import{S as aQt,i as nQt,s as sQt,e as a,k as l,w as F,t as o,M as lQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as iQt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Brt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function dQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,K6,Pf,Oe,Qe,xi,Pn,Z6,Bn,Nn,e7,$i,In,o7,ki,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),K6=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),Z6=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),e7=o(`, make sure its
`),$i=a("code"),In=o("config_class"),o7=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var SS=s(p);m=r(SS,"NewModelConfig"),SS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var RS=s(Ai);Rf=r(RS,"model_type"),RS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var PS=s(Li);yi=r(PS,'"new-model"'),PS.forEach(t),K6=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),Z6=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var BS=s(Bn);Nn=r(BS,"PreTrainedModel"),BS.forEach(t),e7=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Nf=s($i);In=r(Nf,"config_class"),Nf.forEach(t),o7=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var NS=s(ki);Bf=r(NS,"NewModelConfig"),NS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,K6),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,Z6),e(Oe,Bn),e(Bn,Nn),e(Oe,e7),e(Oe,$i),e($i,In),e(Oe,o7),e(Oe,ki),e(ki,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function cQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function gQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function pQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,K6,Pf,Oe,Qe,xi,Pn,Z6,Bn,Nn,e7,$i,In,o7,ki,Bf,Sa,We,Ae,SS,Si,RS,PS,Co,Ra,BS,Nf,NS,tHe,OVe,Ri,If,bae,r7,aHe,vae,nHe,VVe,qn,sHe,Fae,lHe,iHe,Tae,dHe,cHe,XVe,t7,zVe,IS,fHe,QVe,qf,WVe,Pi,jf,Mae,a7,mHe,Eae,gHe,HVe,wo,n7,hHe,s7,pHe,qS,_He,uHe,bHe,l7,vHe,Cae,FHe,THe,MHe,Lr,i7,EHe,wae,CHe,wHe,Bi,AHe,Aae,LHe,yHe,Lae,xHe,$He,kHe,A,Df,yae,SHe,RHe,jS,PHe,BHe,NHe,Gf,xae,IHe,qHe,DS,jHe,DHe,GHe,Of,$ae,OHe,VHe,GS,XHe,zHe,QHe,Vf,kae,WHe,HHe,OS,UHe,JHe,YHe,Xf,Sae,KHe,ZHe,VS,eUe,oUe,rUe,zf,Rae,tUe,aUe,XS,nUe,sUe,lUe,Qf,Pae,iUe,dUe,zS,cUe,fUe,mUe,Wf,Bae,gUe,hUe,QS,pUe,_Ue,uUe,Hf,Nae,bUe,vUe,WS,FUe,TUe,MUe,Uf,Iae,EUe,CUe,HS,wUe,AUe,LUe,Jf,qae,yUe,xUe,US,$Ue,kUe,SUe,Yf,jae,RUe,PUe,JS,BUe,NUe,IUe,Kf,Dae,qUe,jUe,YS,DUe,GUe,OUe,Zf,Gae,VUe,XUe,KS,zUe,QUe,WUe,em,Oae,HUe,UUe,ZS,JUe,YUe,KUe,om,Vae,ZUe,eJe,eR,oJe,rJe,tJe,rm,Xae,aJe,nJe,oR,sJe,lJe,iJe,tm,zae,dJe,cJe,rR,fJe,mJe,gJe,am,Qae,hJe,pJe,tR,_Je,uJe,bJe,nm,Wae,vJe,FJe,aR,TJe,MJe,EJe,sm,Hae,CJe,wJe,nR,AJe,LJe,yJe,lm,Uae,xJe,$Je,sR,kJe,SJe,RJe,im,Jae,PJe,BJe,lR,NJe,IJe,qJe,dm,Yae,jJe,DJe,iR,GJe,OJe,VJe,cm,Kae,XJe,zJe,dR,QJe,WJe,HJe,fm,Zae,UJe,JJe,cR,YJe,KJe,ZJe,mm,ene,eYe,oYe,fR,rYe,tYe,aYe,gm,one,nYe,sYe,mR,lYe,iYe,dYe,hm,rne,cYe,fYe,gR,mYe,gYe,hYe,pm,tne,pYe,_Ye,hR,uYe,bYe,vYe,_m,ane,FYe,TYe,pR,MYe,EYe,CYe,um,nne,wYe,AYe,_R,LYe,yYe,xYe,bm,sne,$Ye,kYe,uR,SYe,RYe,PYe,vm,lne,BYe,NYe,bR,IYe,qYe,jYe,Fm,ine,DYe,GYe,vR,OYe,VYe,XYe,Tm,dne,zYe,QYe,FR,WYe,HYe,UYe,Mm,cne,JYe,YYe,TR,KYe,ZYe,eKe,Em,fne,oKe,rKe,MR,tKe,aKe,nKe,Cm,mne,sKe,lKe,ER,iKe,dKe,cKe,wm,gne,fKe,mKe,CR,gKe,hKe,pKe,Am,hne,_Ke,uKe,wR,bKe,vKe,FKe,Lm,pne,TKe,MKe,AR,EKe,CKe,wKe,ym,_ne,AKe,LKe,LR,yKe,xKe,$Ke,xm,une,kKe,SKe,yR,RKe,PKe,BKe,$m,bne,NKe,IKe,xR,qKe,jKe,DKe,km,vne,GKe,OKe,$R,VKe,XKe,zKe,Sm,Fne,QKe,WKe,kR,HKe,UKe,JKe,Rm,Tne,YKe,KKe,SR,ZKe,eZe,oZe,Pm,Mne,rZe,tZe,RR,aZe,nZe,sZe,Bm,Ene,lZe,iZe,PR,dZe,cZe,fZe,Nm,Cne,mZe,gZe,BR,hZe,pZe,_Ze,Im,wne,uZe,bZe,NR,vZe,FZe,TZe,qm,Ane,MZe,EZe,IR,CZe,wZe,AZe,jm,Lne,LZe,yZe,qR,xZe,$Ze,kZe,Dm,yne,SZe,RZe,jR,PZe,BZe,NZe,Gm,xne,IZe,qZe,DR,jZe,DZe,GZe,Om,$ne,OZe,VZe,GR,XZe,zZe,QZe,Vm,kne,WZe,HZe,OR,UZe,JZe,YZe,Xm,Sne,KZe,ZZe,VR,eeo,oeo,reo,zm,Rne,teo,aeo,XR,neo,seo,leo,Qm,Pne,ieo,deo,zR,ceo,feo,meo,Wm,Bne,geo,heo,QR,peo,_eo,ueo,Hm,Nne,beo,veo,WR,Feo,Teo,Meo,Um,Ine,Eeo,Ceo,HR,weo,Aeo,Leo,Jm,qne,yeo,xeo,UR,$eo,keo,Seo,Ym,jne,Reo,Peo,JR,Beo,Neo,Ieo,Km,Dne,qeo,jeo,YR,Deo,Geo,Oeo,Zm,Gne,Veo,Xeo,KR,zeo,Qeo,Weo,eg,One,Heo,Ueo,ZR,Jeo,Yeo,Keo,og,Vne,Zeo,eoo,eP,ooo,roo,too,rg,Xne,aoo,noo,oP,soo,loo,ioo,tg,zne,doo,coo,rP,foo,moo,goo,ag,Qne,hoo,poo,tP,_oo,uoo,boo,ng,Wne,voo,Foo,aP,Too,Moo,Eoo,sg,Hne,Coo,woo,nP,Aoo,Loo,yoo,lg,Une,xoo,$oo,sP,koo,Soo,Roo,ig,Jne,Poo,Boo,lP,Noo,Ioo,qoo,dg,Yne,joo,Doo,iP,Goo,Ooo,Voo,cg,Kne,Xoo,zoo,dP,Qoo,Woo,Hoo,fg,Zne,Uoo,Joo,cP,Yoo,Koo,Zoo,mg,ese,ero,oro,fP,rro,tro,aro,gg,ose,nro,sro,mP,lro,iro,dro,hg,rse,cro,fro,gP,mro,gro,hro,pg,tse,pro,_ro,hP,uro,bro,vro,_g,ase,Fro,Tro,pP,Mro,Ero,Cro,ug,nse,wro,Aro,_P,Lro,yro,xro,bg,sse,$ro,kro,uP,Sro,Rro,Pro,vg,lse,Bro,Nro,bP,Iro,qro,jro,Fg,ise,Dro,Gro,vP,Oro,Vro,Xro,Tg,dse,zro,Qro,FP,Wro,Hro,Uro,Mg,cse,Jro,Yro,TP,Kro,Zro,eto,Eg,fse,oto,rto,MP,tto,ato,nto,Cg,mse,sto,lto,EP,ito,dto,cto,wg,gse,fto,mto,CP,gto,hto,pto,Ag,hse,_to,uto,wP,bto,vto,Fto,Lg,pse,Tto,Mto,AP,Eto,Cto,wto,yg,_se,Ato,Lto,LP,yto,xto,$to,xg,use,kto,Sto,yP,Rto,Pto,Bto,$g,bse,Nto,Ito,xP,qto,jto,Dto,kg,vse,Gto,Oto,$P,Vto,Xto,zto,Sg,Fse,Qto,Wto,kP,Hto,Uto,Jto,Rg,Tse,Yto,Kto,SP,Zto,eao,oao,Pg,Mse,rao,tao,RP,aao,nao,sao,Bg,Ese,lao,iao,PP,dao,cao,fao,Ng,Cse,mao,gao,BP,hao,pao,_ao,Ig,wse,uao,bao,NP,vao,Fao,Tao,qg,Ase,Mao,Eao,IP,Cao,wao,Aao,jg,Lse,Lao,yao,qP,xao,$ao,kao,Dg,yse,Sao,Rao,jP,Pao,Bao,Nao,Gg,xse,Iao,qao,DP,jao,Dao,Gao,Og,$se,Oao,Vao,GP,Xao,zao,Qao,Vg,kse,Wao,Hao,OP,Uao,Jao,Yao,Xg,Sse,Kao,Zao,VP,eno,ono,rno,zg,Rse,tno,ano,XP,nno,sno,lno,Qg,Pse,ino,dno,zP,cno,fno,mno,Wg,Bse,gno,hno,QP,pno,_no,uno,Hg,Nse,bno,vno,WP,Fno,Tno,Mno,Ug,Ise,Eno,Cno,HP,wno,Ano,Lno,Jg,yno,Yg,d7,xno,qse,$no,UVe,Ni,Kg,jse,c7,kno,Dse,Sno,JVe,Ao,f7,Rno,m7,Pno,UP,Bno,Nno,Ino,g7,qno,Gse,jno,Dno,Gno,yr,h7,Ono,Ose,Vno,Xno,Pa,zno,Vse,Qno,Wno,Xse,Hno,Uno,zse,Jno,Yno,Kno,k,jn,Qse,Zno,eso,JP,oso,rso,YP,tso,aso,nso,Dn,Wse,sso,lso,KP,iso,dso,ZP,cso,fso,mso,Gn,Hse,gso,hso,eB,pso,_so,oB,uso,bso,vso,Zg,Use,Fso,Tso,rB,Mso,Eso,Cso,On,Jse,wso,Aso,tB,Lso,yso,aB,xso,$so,kso,eh,Yse,Sso,Rso,nB,Pso,Bso,Nso,oh,Kse,Iso,qso,sB,jso,Dso,Gso,rh,Zse,Oso,Vso,lB,Xso,zso,Qso,Vn,ele,Wso,Hso,iB,Uso,Jso,dB,Yso,Kso,Zso,Xn,ole,elo,olo,cB,rlo,tlo,fB,alo,nlo,slo,zn,rle,llo,ilo,mB,dlo,clo,gB,flo,mlo,glo,th,tle,hlo,plo,hB,_lo,ulo,blo,ah,ale,vlo,Flo,pB,Tlo,Mlo,Elo,nh,nle,Clo,wlo,_B,Alo,Llo,ylo,Qn,sle,xlo,$lo,uB,klo,Slo,bB,Rlo,Plo,Blo,sh,lle,Nlo,Ilo,vB,qlo,jlo,Dlo,Wn,ile,Glo,Olo,FB,Vlo,Xlo,TB,zlo,Qlo,Wlo,Hn,dle,Hlo,Ulo,MB,Jlo,Ylo,EB,Klo,Zlo,eio,Un,cle,oio,rio,CB,tio,aio,wB,nio,sio,lio,Jn,fle,iio,dio,AB,cio,fio,LB,mio,gio,hio,lh,mle,pio,_io,yB,uio,bio,vio,Yn,gle,Fio,Tio,xB,Mio,Eio,$B,Cio,wio,Aio,Kn,hle,Lio,yio,kB,xio,$io,SB,kio,Sio,Rio,Zn,ple,Pio,Bio,RB,Nio,Iio,PB,qio,jio,Dio,es,_le,Gio,Oio,BB,Vio,Xio,NB,zio,Qio,Wio,os,ule,Hio,Uio,IB,Jio,Yio,qB,Kio,Zio,edo,rs,ble,odo,rdo,jB,tdo,ado,DB,ndo,sdo,ldo,ih,vle,ido,ddo,GB,cdo,fdo,mdo,ts,Fle,gdo,hdo,OB,pdo,_do,VB,udo,bdo,vdo,dh,Tle,Fdo,Tdo,XB,Mdo,Edo,Cdo,as,Mle,wdo,Ado,zB,Ldo,ydo,QB,xdo,$do,kdo,ns,Ele,Sdo,Rdo,WB,Pdo,Bdo,HB,Ndo,Ido,qdo,ss,Cle,jdo,Ddo,UB,Gdo,Odo,JB,Vdo,Xdo,zdo,ch,wle,Qdo,Wdo,YB,Hdo,Udo,Jdo,ls,Ale,Ydo,Kdo,KB,Zdo,eco,ZB,oco,rco,tco,is,Lle,aco,nco,eN,sco,lco,oN,ico,dco,cco,ds,yle,fco,mco,rN,gco,hco,tN,pco,_co,uco,fh,xle,bco,vco,aN,Fco,Tco,Mco,cs,$le,Eco,Cco,nN,wco,Aco,sN,Lco,yco,xco,fs,kle,$co,kco,lN,Sco,Rco,iN,Pco,Bco,Nco,ms,Sle,Ico,qco,dN,jco,Dco,cN,Gco,Oco,Vco,gs,Rle,Xco,zco,fN,Qco,Wco,mN,Hco,Uco,Jco,hs,Ple,Yco,Kco,gN,Zco,efo,hN,ofo,rfo,tfo,ps,Ble,afo,nfo,pN,sfo,lfo,_N,ifo,dfo,cfo,_s,Nle,ffo,mfo,uN,gfo,hfo,bN,pfo,_fo,ufo,us,Ile,bfo,vfo,vN,Ffo,Tfo,FN,Mfo,Efo,Cfo,mh,qle,wfo,Afo,TN,Lfo,yfo,xfo,bs,jle,$fo,kfo,MN,Sfo,Rfo,EN,Pfo,Bfo,Nfo,gh,Dle,Ifo,qfo,CN,jfo,Dfo,Gfo,hh,Gle,Ofo,Vfo,wN,Xfo,zfo,Qfo,vs,Ole,Wfo,Hfo,AN,Ufo,Jfo,LN,Yfo,Kfo,Zfo,Fs,Vle,emo,omo,yN,rmo,tmo,xN,amo,nmo,smo,Ts,Xle,lmo,imo,$N,dmo,cmo,kN,fmo,mmo,gmo,ph,zle,hmo,pmo,SN,_mo,umo,bmo,Ms,Qle,vmo,Fmo,RN,Tmo,Mmo,PN,Emo,Cmo,wmo,Es,Wle,Amo,Lmo,BN,ymo,xmo,NN,$mo,kmo,Smo,Cs,Hle,Rmo,Pmo,IN,Bmo,Nmo,qN,Imo,qmo,jmo,ws,Ule,Dmo,Gmo,jN,Omo,Vmo,DN,Xmo,zmo,Qmo,As,Jle,Wmo,Hmo,GN,Umo,Jmo,ON,Ymo,Kmo,Zmo,Ls,Yle,ego,ogo,VN,rgo,tgo,XN,ago,ngo,sgo,ys,Kle,lgo,igo,zN,dgo,cgo,QN,fgo,mgo,ggo,_h,Zle,hgo,pgo,WN,_go,ugo,bgo,xs,eie,vgo,Fgo,HN,Tgo,Mgo,UN,Ego,Cgo,wgo,uh,oie,Ago,Lgo,JN,ygo,xgo,$go,bh,rie,kgo,Sgo,YN,Rgo,Pgo,Bgo,vh,tie,Ngo,Igo,KN,qgo,jgo,Dgo,Fh,aie,Ggo,Ogo,ZN,Vgo,Xgo,zgo,$s,nie,Qgo,Wgo,eI,Hgo,Ugo,oI,Jgo,Ygo,Kgo,Th,sie,Zgo,eho,rI,oho,rho,tho,ks,lie,aho,nho,tI,sho,lho,aI,iho,dho,cho,Ss,iie,fho,mho,nI,gho,hho,sI,pho,_ho,uho,Rs,die,bho,vho,lI,Fho,Tho,iI,Mho,Eho,Cho,Ps,cie,who,Aho,dI,Lho,yho,cI,xho,$ho,kho,Bs,fie,Sho,Rho,fI,Pho,Bho,mI,Nho,Iho,qho,Ns,mie,jho,Dho,gI,Gho,Oho,hI,Vho,Xho,zho,Mh,gie,Qho,Who,pI,Hho,Uho,Jho,Eh,hie,Yho,Kho,_I,Zho,epo,opo,Is,pie,rpo,tpo,uI,apo,npo,bI,spo,lpo,ipo,qs,_ie,dpo,cpo,vI,fpo,mpo,FI,gpo,hpo,ppo,js,uie,_po,upo,TI,bpo,vpo,MI,Fpo,Tpo,Mpo,Ch,bie,Epo,Cpo,EI,wpo,Apo,Lpo,wh,vie,ypo,xpo,CI,$po,kpo,Spo,Ah,Fie,Rpo,Ppo,wI,Bpo,Npo,Ipo,Ds,Tie,qpo,jpo,AI,Dpo,Gpo,LI,Opo,Vpo,Xpo,Gs,Mie,zpo,Qpo,yI,Wpo,Hpo,xI,Upo,Jpo,Ypo,Lh,Eie,Kpo,Zpo,$I,e_o,o_o,r_o,yh,Cie,t_o,a_o,kI,n_o,s_o,l_o,xh,wie,i_o,d_o,SI,c_o,f_o,m_o,Os,Aie,g_o,h_o,RI,p_o,__o,PI,u_o,b_o,v_o,$h,Lie,F_o,T_o,BI,M_o,E_o,C_o,kh,yie,w_o,A_o,NI,L_o,y_o,x_o,Vs,xie,$_o,k_o,II,S_o,R_o,qI,P_o,B_o,N_o,Xs,$ie,I_o,q_o,jI,j_o,D_o,DI,G_o,O_o,V_o,zs,kie,X_o,z_o,GI,Q_o,W_o,OI,H_o,U_o,J_o,Qs,Sie,Y_o,K_o,VI,Z_o,euo,XI,ouo,ruo,tuo,Sh,auo,Rh,p7,nuo,Rie,suo,YVe,Ii,Ph,Pie,_7,luo,Bie,iuo,KVe,Lo,u7,duo,b7,cuo,zI,fuo,muo,guo,v7,huo,Nie,puo,_uo,uuo,He,F7,buo,Iie,vuo,Fuo,Ba,Tuo,qie,Muo,Euo,jie,Cuo,wuo,Die,Auo,Luo,yuo,Y,Bh,Gie,xuo,$uo,QI,kuo,Suo,Ruo,Nh,Oie,Puo,Buo,WI,Nuo,Iuo,quo,Ih,Vie,juo,Duo,HI,Guo,Ouo,Vuo,qh,Xie,Xuo,zuo,UI,Quo,Wuo,Huo,jh,zie,Uuo,Juo,JI,Yuo,Kuo,Zuo,Dh,Qie,e1o,o1o,YI,r1o,t1o,a1o,Gh,Wie,n1o,s1o,KI,l1o,i1o,d1o,Oh,Hie,c1o,f1o,ZI,m1o,g1o,h1o,Vh,Uie,p1o,_1o,eq,u1o,b1o,v1o,Xh,Jie,F1o,T1o,oq,M1o,E1o,C1o,zh,Yie,w1o,A1o,rq,L1o,y1o,x1o,Qh,Kie,$1o,k1o,tq,S1o,R1o,P1o,Wh,Zie,B1o,N1o,aq,I1o,q1o,j1o,Hh,ede,D1o,G1o,nq,O1o,V1o,X1o,Uh,ode,z1o,Q1o,sq,W1o,H1o,U1o,Jh,rde,J1o,Y1o,lq,K1o,Z1o,e2o,Yh,tde,o2o,r2o,iq,t2o,a2o,n2o,Kh,ade,s2o,l2o,dq,i2o,d2o,c2o,Zh,nde,f2o,m2o,cq,g2o,h2o,p2o,ep,sde,_2o,u2o,fq,b2o,v2o,F2o,op,lde,T2o,M2o,mq,E2o,C2o,w2o,rp,ide,A2o,L2o,gq,y2o,x2o,$2o,tp,dde,k2o,S2o,hq,R2o,P2o,B2o,ap,cde,N2o,I2o,pq,q2o,j2o,D2o,np,fde,G2o,O2o,_q,V2o,X2o,z2o,sp,mde,Q2o,W2o,uq,H2o,U2o,J2o,lp,gde,Y2o,K2o,bq,Z2o,ebo,obo,ip,hde,rbo,tbo,vq,abo,nbo,sbo,dp,pde,lbo,ibo,Fq,dbo,cbo,fbo,cp,_de,mbo,gbo,Tq,hbo,pbo,_bo,fp,ude,ubo,bbo,Mq,vbo,Fbo,Tbo,mp,bde,Mbo,Ebo,Eq,Cbo,wbo,Abo,gp,vde,Lbo,ybo,Cq,xbo,$bo,kbo,hp,Fde,Sbo,Rbo,wq,Pbo,Bbo,Nbo,pp,Ibo,_p,qbo,up,T7,jbo,Tde,Dbo,ZVe,qi,bp,Mde,M7,Gbo,Ede,Obo,eXe,yo,E7,Vbo,C7,Xbo,Aq,zbo,Qbo,Wbo,w7,Hbo,Cde,Ubo,Jbo,Ybo,Ue,A7,Kbo,wde,Zbo,evo,ji,ovo,Ade,rvo,tvo,Lde,avo,nvo,svo,he,vp,yde,lvo,ivo,Lq,dvo,cvo,fvo,Fp,xde,mvo,gvo,$de,hvo,pvo,_vo,Tp,kde,uvo,bvo,yq,vvo,Fvo,Tvo,Mp,Sde,Mvo,Evo,xq,Cvo,wvo,Avo,Ep,Rde,Lvo,yvo,$q,xvo,$vo,kvo,Cp,Pde,Svo,Rvo,kq,Pvo,Bvo,Nvo,wp,Bde,Ivo,qvo,Sq,jvo,Dvo,Gvo,Ap,Nde,Ovo,Vvo,Rq,Xvo,zvo,Qvo,Lp,Ide,Wvo,Hvo,Pq,Uvo,Jvo,Yvo,yp,qde,Kvo,Zvo,Bq,e5o,o5o,r5o,xp,jde,t5o,a5o,Nq,n5o,s5o,l5o,$p,Dde,i5o,d5o,Iq,c5o,f5o,m5o,kp,Gde,g5o,h5o,qq,p5o,_5o,u5o,Sp,Ode,b5o,v5o,jq,F5o,T5o,M5o,Rp,Vde,E5o,C5o,Dq,w5o,A5o,L5o,Pp,Xde,y5o,x5o,Gq,$5o,k5o,S5o,Bp,zde,R5o,P5o,Oq,B5o,N5o,I5o,Np,Qde,q5o,j5o,Vq,D5o,G5o,O5o,Ip,V5o,qp,X5o,jp,L7,z5o,Wde,Q5o,oXe,Di,Dp,Hde,y7,W5o,Ude,H5o,rXe,xo,x7,U5o,Gi,J5o,Xq,Y5o,K5o,zq,Z5o,e0o,o0o,$7,r0o,Jde,t0o,a0o,n0o,lt,k7,s0o,Yde,l0o,i0o,Oi,d0o,Kde,c0o,f0o,Qq,m0o,g0o,h0o,Gp,p0o,Je,S7,_0o,Zde,u0o,b0o,Na,v0o,ece,F0o,T0o,oce,M0o,E0o,rce,C0o,w0o,A0o,y,Op,tce,L0o,y0o,Wq,x0o,$0o,k0o,Vp,ace,S0o,R0o,Hq,P0o,B0o,N0o,Xp,nce,I0o,q0o,Uq,j0o,D0o,G0o,zp,sce,O0o,V0o,Jq,X0o,z0o,Q0o,Qp,lce,W0o,H0o,Yq,U0o,J0o,Y0o,Wp,ice,K0o,Z0o,Kq,eFo,oFo,rFo,Hp,dce,tFo,aFo,Zq,nFo,sFo,lFo,Up,cce,iFo,dFo,ej,cFo,fFo,mFo,Jp,fce,gFo,hFo,oj,pFo,_Fo,uFo,Yp,mce,bFo,vFo,rj,FFo,TFo,MFo,Kp,gce,EFo,CFo,tj,wFo,AFo,LFo,Zp,hce,yFo,xFo,aj,$Fo,kFo,SFo,e_,pce,RFo,PFo,nj,BFo,NFo,IFo,o_,_ce,qFo,jFo,sj,DFo,GFo,OFo,r_,uce,VFo,XFo,lj,zFo,QFo,WFo,t_,bce,HFo,UFo,ij,JFo,YFo,KFo,a_,vce,ZFo,eTo,dj,oTo,rTo,tTo,n_,Fce,aTo,nTo,cj,sTo,lTo,iTo,s_,Tce,dTo,cTo,fj,fTo,mTo,gTo,l_,Mce,hTo,pTo,mj,_To,uTo,bTo,i_,Ece,vTo,FTo,gj,TTo,MTo,ETo,d_,Cce,CTo,wTo,hj,ATo,LTo,yTo,c_,wce,xTo,$To,pj,kTo,STo,RTo,f_,Ace,PTo,BTo,_j,NTo,ITo,qTo,m_,Lce,jTo,DTo,uj,GTo,OTo,VTo,g_,yce,XTo,zTo,bj,QTo,WTo,HTo,h_,xce,UTo,JTo,vj,YTo,KTo,ZTo,p_,$ce,e8o,o8o,Fj,r8o,t8o,a8o,__,kce,n8o,s8o,Tj,l8o,i8o,d8o,u_,Sce,c8o,f8o,Mj,m8o,g8o,h8o,b_,Rce,p8o,_8o,Ej,u8o,b8o,v8o,v_,Pce,F8o,T8o,Cj,M8o,E8o,C8o,F_,Bce,w8o,A8o,wj,L8o,y8o,x8o,T_,Nce,$8o,k8o,Aj,S8o,R8o,P8o,Ws,Ice,B8o,N8o,Lj,I8o,q8o,yj,j8o,D8o,G8o,M_,qce,O8o,V8o,xj,X8o,z8o,Q8o,E_,jce,W8o,H8o,$j,U8o,J8o,Y8o,C_,Dce,K8o,Z8o,kj,e9o,o9o,r9o,w_,Gce,t9o,a9o,Sj,n9o,s9o,l9o,A_,Oce,i9o,d9o,Rj,c9o,f9o,m9o,L_,Vce,g9o,h9o,Pj,p9o,_9o,u9o,y_,Xce,b9o,v9o,Bj,F9o,T9o,M9o,x_,zce,E9o,C9o,Nj,w9o,A9o,L9o,$_,Qce,y9o,x9o,Ij,$9o,k9o,S9o,k_,Wce,R9o,P9o,qj,B9o,N9o,I9o,S_,Hce,q9o,j9o,jj,D9o,G9o,O9o,R_,Uce,V9o,X9o,Dj,z9o,Q9o,W9o,P_,Jce,H9o,U9o,Gj,J9o,Y9o,K9o,B_,Yce,Z9o,eMo,Oj,oMo,rMo,tMo,N_,Kce,aMo,nMo,Vj,sMo,lMo,iMo,I_,Zce,dMo,cMo,Xj,fMo,mMo,gMo,q_,efe,hMo,pMo,zj,_Mo,uMo,bMo,j_,ofe,vMo,FMo,Qj,TMo,MMo,EMo,D_,rfe,CMo,wMo,Wj,AMo,LMo,yMo,G_,tfe,xMo,$Mo,Hj,kMo,SMo,RMo,O_,afe,PMo,BMo,Uj,NMo,IMo,qMo,V_,nfe,jMo,DMo,Jj,GMo,OMo,VMo,X_,sfe,XMo,zMo,Yj,QMo,WMo,HMo,z_,lfe,UMo,JMo,Kj,YMo,KMo,ZMo,Q_,ife,e4o,o4o,Zj,r4o,t4o,a4o,W_,dfe,n4o,s4o,eD,l4o,i4o,d4o,H_,cfe,c4o,f4o,oD,m4o,g4o,h4o,U_,ffe,p4o,_4o,rD,u4o,b4o,v4o,J_,mfe,F4o,T4o,tD,M4o,E4o,C4o,Y_,gfe,w4o,A4o,aD,L4o,y4o,x4o,K_,hfe,$4o,k4o,nD,S4o,R4o,P4o,Z_,pfe,B4o,N4o,sD,I4o,q4o,j4o,eu,_fe,D4o,G4o,lD,O4o,V4o,X4o,ou,ufe,z4o,Q4o,iD,W4o,H4o,U4o,ru,bfe,J4o,Y4o,dD,K4o,Z4o,eEo,tu,vfe,oEo,rEo,cD,tEo,aEo,nEo,au,Ffe,sEo,lEo,fD,iEo,dEo,cEo,nu,Tfe,fEo,mEo,mD,gEo,hEo,pEo,su,Mfe,_Eo,uEo,gD,bEo,vEo,FEo,lu,Efe,TEo,MEo,hD,EEo,CEo,wEo,iu,Cfe,AEo,LEo,pD,yEo,xEo,$Eo,du,wfe,kEo,SEo,_D,REo,PEo,BEo,cu,Afe,NEo,IEo,uD,qEo,jEo,DEo,fu,Lfe,GEo,OEo,bD,VEo,XEo,zEo,mu,yfe,QEo,WEo,vD,HEo,UEo,JEo,gu,xfe,YEo,KEo,FD,ZEo,eCo,oCo,hu,$fe,rCo,tCo,TD,aCo,nCo,sCo,pu,kfe,lCo,iCo,MD,dCo,cCo,fCo,_u,Sfe,mCo,gCo,ED,hCo,pCo,_Co,uu,Rfe,uCo,bCo,CD,vCo,FCo,TCo,bu,Pfe,MCo,ECo,wD,CCo,wCo,ACo,vu,Bfe,LCo,yCo,AD,xCo,$Co,kCo,Fu,Nfe,SCo,RCo,LD,PCo,BCo,NCo,Tu,Ife,ICo,qCo,yD,jCo,DCo,GCo,Mu,qfe,OCo,VCo,xD,XCo,zCo,QCo,Eu,jfe,WCo,HCo,$D,UCo,JCo,YCo,Cu,Dfe,KCo,ZCo,kD,e3o,o3o,r3o,wu,Gfe,t3o,a3o,SD,n3o,s3o,l3o,Au,Ofe,i3o,d3o,RD,c3o,f3o,m3o,Lu,Vfe,g3o,h3o,PD,p3o,_3o,u3o,yu,Xfe,b3o,v3o,BD,F3o,T3o,M3o,xu,zfe,E3o,C3o,ND,w3o,A3o,L3o,$u,Qfe,y3o,x3o,ID,$3o,k3o,S3o,ku,Wfe,R3o,P3o,qD,B3o,N3o,I3o,Su,Hfe,q3o,j3o,jD,D3o,G3o,O3o,Ru,Ufe,V3o,X3o,DD,z3o,Q3o,W3o,Pu,Jfe,H3o,U3o,GD,J3o,Y3o,K3o,Bu,Yfe,Z3o,ewo,OD,owo,rwo,two,Nu,Kfe,awo,nwo,VD,swo,lwo,iwo,Iu,Zfe,dwo,cwo,XD,fwo,mwo,gwo,qu,eme,hwo,pwo,zD,_wo,uwo,bwo,ju,ome,vwo,Fwo,QD,Two,Mwo,Ewo,Du,rme,Cwo,wwo,WD,Awo,Lwo,ywo,Gu,tme,xwo,$wo,HD,kwo,Swo,Rwo,Ou,ame,Pwo,Bwo,UD,Nwo,Iwo,qwo,Vu,nme,jwo,Dwo,JD,Gwo,Owo,Vwo,Xu,Xwo,sme,zwo,Qwo,lme,Wwo,Hwo,zu,tXe,Vi,Qu,ime,R7,Uwo,dme,Jwo,aXe,$o,P7,Ywo,Xi,Kwo,YD,Zwo,eAo,KD,oAo,rAo,tAo,B7,aAo,cme,nAo,sAo,lAo,it,N7,iAo,fme,dAo,cAo,zi,fAo,mme,mAo,gAo,ZD,hAo,pAo,_Ao,Wu,uAo,Ye,I7,bAo,gme,vAo,FAo,Ia,TAo,hme,MAo,EAo,pme,CAo,wAo,_me,AAo,LAo,yAo,G,Hu,ume,xAo,$Ao,eG,kAo,SAo,RAo,Uu,bme,PAo,BAo,oG,NAo,IAo,qAo,Ju,vme,jAo,DAo,rG,GAo,OAo,VAo,Yu,Fme,XAo,zAo,tG,QAo,WAo,HAo,Ku,Tme,UAo,JAo,aG,YAo,KAo,ZAo,Zu,Mme,e6o,o6o,nG,r6o,t6o,a6o,e1,Eme,n6o,s6o,sG,l6o,i6o,d6o,o1,Cme,c6o,f6o,lG,m6o,g6o,h6o,r1,wme,p6o,_6o,iG,u6o,b6o,v6o,t1,Ame,F6o,T6o,dG,M6o,E6o,C6o,a1,Lme,w6o,A6o,cG,L6o,y6o,x6o,n1,yme,$6o,k6o,fG,S6o,R6o,P6o,s1,xme,B6o,N6o,mG,I6o,q6o,j6o,l1,$me,D6o,G6o,gG,O6o,V6o,X6o,i1,kme,z6o,Q6o,hG,W6o,H6o,U6o,d1,Sme,J6o,Y6o,pG,K6o,Z6o,e7o,c1,Rme,o7o,r7o,_G,t7o,a7o,n7o,f1,Pme,s7o,l7o,uG,i7o,d7o,c7o,m1,Bme,f7o,m7o,bG,g7o,h7o,p7o,g1,Nme,_7o,u7o,vG,b7o,v7o,F7o,h1,Ime,T7o,M7o,FG,E7o,C7o,w7o,p1,qme,A7o,L7o,TG,y7o,x7o,$7o,_1,jme,k7o,S7o,MG,R7o,P7o,B7o,u1,Dme,N7o,I7o,EG,q7o,j7o,D7o,b1,Gme,G7o,O7o,CG,V7o,X7o,z7o,v1,Ome,Q7o,W7o,wG,H7o,U7o,J7o,F1,Vme,Y7o,K7o,AG,Z7o,eLo,oLo,T1,Xme,rLo,tLo,LG,aLo,nLo,sLo,M1,zme,lLo,iLo,yG,dLo,cLo,fLo,E1,Qme,mLo,gLo,xG,hLo,pLo,_Lo,C1,Wme,uLo,bLo,$G,vLo,FLo,TLo,w1,Hme,MLo,ELo,kG,CLo,wLo,ALo,A1,Ume,LLo,yLo,SG,xLo,$Lo,kLo,L1,Jme,SLo,RLo,RG,PLo,BLo,NLo,y1,Yme,ILo,qLo,PG,jLo,DLo,GLo,x1,Kme,OLo,VLo,BG,XLo,zLo,QLo,$1,Zme,WLo,HLo,NG,ULo,JLo,YLo,k1,ege,KLo,ZLo,IG,eyo,oyo,ryo,S1,oge,tyo,ayo,qG,nyo,syo,lyo,R1,rge,iyo,dyo,jG,cyo,fyo,myo,P1,tge,gyo,hyo,DG,pyo,_yo,uyo,B1,age,byo,vyo,GG,Fyo,Tyo,Myo,N1,nge,Eyo,Cyo,OG,wyo,Ayo,Lyo,I1,sge,yyo,xyo,VG,$yo,kyo,Syo,q1,lge,Ryo,Pyo,XG,Byo,Nyo,Iyo,j1,qyo,ige,jyo,Dyo,dge,Gyo,Oyo,D1,nXe,Qi,G1,cge,q7,Vyo,fge,Xyo,sXe,ko,j7,zyo,Wi,Qyo,zG,Wyo,Hyo,QG,Uyo,Jyo,Yyo,D7,Kyo,mge,Zyo,exo,oxo,dt,G7,rxo,gge,txo,axo,Hi,nxo,hge,sxo,lxo,WG,ixo,dxo,cxo,O1,fxo,Ke,O7,mxo,pge,gxo,hxo,qa,pxo,_ge,_xo,uxo,uge,bxo,vxo,bge,Fxo,Txo,Mxo,z,V1,vge,Exo,Cxo,HG,wxo,Axo,Lxo,X1,Fge,yxo,xxo,UG,$xo,kxo,Sxo,z1,Tge,Rxo,Pxo,JG,Bxo,Nxo,Ixo,Q1,Mge,qxo,jxo,YG,Dxo,Gxo,Oxo,W1,Ege,Vxo,Xxo,KG,zxo,Qxo,Wxo,H1,Cge,Hxo,Uxo,ZG,Jxo,Yxo,Kxo,U1,wge,Zxo,e$o,eO,o$o,r$o,t$o,J1,Age,a$o,n$o,oO,s$o,l$o,i$o,Y1,Lge,d$o,c$o,rO,f$o,m$o,g$o,K1,yge,h$o,p$o,tO,_$o,u$o,b$o,Z1,xge,v$o,F$o,aO,T$o,M$o,E$o,e2,$ge,C$o,w$o,nO,A$o,L$o,y$o,o2,kge,x$o,$$o,sO,k$o,S$o,R$o,r2,Sge,P$o,B$o,lO,N$o,I$o,q$o,t2,Rge,j$o,D$o,iO,G$o,O$o,V$o,a2,Pge,X$o,z$o,dO,Q$o,W$o,H$o,n2,Bge,U$o,J$o,cO,Y$o,K$o,Z$o,s2,Nge,eko,oko,fO,rko,tko,ako,l2,Ige,nko,sko,mO,lko,iko,dko,i2,qge,cko,fko,gO,mko,gko,hko,d2,jge,pko,_ko,hO,uko,bko,vko,c2,Dge,Fko,Tko,pO,Mko,Eko,Cko,f2,Gge,wko,Ako,_O,Lko,yko,xko,m2,Oge,$ko,kko,uO,Sko,Rko,Pko,g2,Vge,Bko,Nko,bO,Iko,qko,jko,h2,Xge,Dko,Gko,vO,Oko,Vko,Xko,p2,zge,zko,Qko,FO,Wko,Hko,Uko,_2,Qge,Jko,Yko,TO,Kko,Zko,eSo,u2,Wge,oSo,rSo,MO,tSo,aSo,nSo,b2,Hge,sSo,lSo,EO,iSo,dSo,cSo,v2,Uge,fSo,mSo,CO,gSo,hSo,pSo,F2,Jge,_So,uSo,wO,bSo,vSo,FSo,T2,Yge,TSo,MSo,AO,ESo,CSo,wSo,M2,Kge,ASo,LSo,LO,ySo,xSo,$So,E2,Zge,kSo,SSo,yO,RSo,PSo,BSo,C2,ehe,NSo,ISo,xO,qSo,jSo,DSo,w2,ohe,GSo,OSo,$O,VSo,XSo,zSo,A2,rhe,QSo,WSo,kO,HSo,USo,JSo,L2,the,YSo,KSo,SO,ZSo,eRo,oRo,y2,ahe,rRo,tRo,RO,aRo,nRo,sRo,x2,lRo,nhe,iRo,dRo,she,cRo,fRo,$2,lXe,Ui,k2,lhe,V7,mRo,ihe,gRo,iXe,So,X7,hRo,Ji,pRo,PO,_Ro,uRo,BO,bRo,vRo,FRo,z7,TRo,dhe,MRo,ERo,CRo,ct,Q7,wRo,che,ARo,LRo,Yi,yRo,fhe,xRo,$Ro,NO,kRo,SRo,RRo,S2,PRo,Ze,W7,BRo,mhe,NRo,IRo,ja,qRo,ghe,jRo,DRo,hhe,GRo,ORo,phe,VRo,XRo,zRo,W,R2,_he,QRo,WRo,IO,HRo,URo,JRo,P2,uhe,YRo,KRo,qO,ZRo,ePo,oPo,B2,bhe,rPo,tPo,jO,aPo,nPo,sPo,N2,vhe,lPo,iPo,DO,dPo,cPo,fPo,I2,Fhe,mPo,gPo,GO,hPo,pPo,_Po,q2,The,uPo,bPo,OO,vPo,FPo,TPo,j2,Mhe,MPo,EPo,VO,CPo,wPo,APo,D2,Ehe,LPo,yPo,XO,xPo,$Po,kPo,G2,Che,SPo,RPo,zO,PPo,BPo,NPo,O2,whe,IPo,qPo,QO,jPo,DPo,GPo,V2,Ahe,OPo,VPo,WO,XPo,zPo,QPo,X2,Lhe,WPo,HPo,HO,UPo,JPo,YPo,z2,yhe,KPo,ZPo,UO,eBo,oBo,rBo,Q2,xhe,tBo,aBo,JO,nBo,sBo,lBo,W2,$he,iBo,dBo,YO,cBo,fBo,mBo,H2,khe,gBo,hBo,KO,pBo,_Bo,uBo,U2,She,bBo,vBo,ZO,FBo,TBo,MBo,J2,Rhe,EBo,CBo,eV,wBo,ABo,LBo,Y2,Phe,yBo,xBo,oV,$Bo,kBo,SBo,K2,Bhe,RBo,PBo,rV,BBo,NBo,IBo,Z2,Nhe,qBo,jBo,tV,DBo,GBo,OBo,eb,Ihe,VBo,XBo,aV,zBo,QBo,WBo,ob,qhe,HBo,UBo,nV,JBo,YBo,KBo,rb,jhe,ZBo,eNo,sV,oNo,rNo,tNo,tb,Dhe,aNo,nNo,lV,sNo,lNo,iNo,ab,Ghe,dNo,cNo,iV,fNo,mNo,gNo,nb,Ohe,hNo,pNo,dV,_No,uNo,bNo,sb,Vhe,vNo,FNo,cV,TNo,MNo,ENo,lb,Xhe,CNo,wNo,fV,ANo,LNo,yNo,ib,zhe,xNo,$No,mV,kNo,SNo,RNo,db,Qhe,PNo,BNo,gV,NNo,INo,qNo,cb,Whe,jNo,DNo,hV,GNo,ONo,VNo,fb,Hhe,XNo,zNo,pV,QNo,WNo,HNo,mb,Uhe,UNo,JNo,Jhe,YNo,KNo,ZNo,gb,Yhe,eIo,oIo,_V,rIo,tIo,aIo,hb,Khe,nIo,sIo,uV,lIo,iIo,dIo,pb,Zhe,cIo,fIo,bV,mIo,gIo,hIo,_b,epe,pIo,_Io,vV,uIo,bIo,vIo,ub,FIo,ope,TIo,MIo,rpe,EIo,CIo,bb,dXe,Ki,vb,tpe,H7,wIo,ape,AIo,cXe,Ro,U7,LIo,Zi,yIo,FV,xIo,$Io,TV,kIo,SIo,RIo,J7,PIo,npe,BIo,NIo,IIo,ft,Y7,qIo,spe,jIo,DIo,ed,GIo,lpe,OIo,VIo,MV,XIo,zIo,QIo,Fb,WIo,eo,K7,HIo,ipe,UIo,JIo,Da,YIo,dpe,KIo,ZIo,cpe,eqo,oqo,fpe,rqo,tqo,aqo,pe,Tb,mpe,nqo,sqo,EV,lqo,iqo,dqo,Mb,gpe,cqo,fqo,CV,mqo,gqo,hqo,Eb,hpe,pqo,_qo,wV,uqo,bqo,vqo,Cb,ppe,Fqo,Tqo,AV,Mqo,Eqo,Cqo,wb,_pe,wqo,Aqo,LV,Lqo,yqo,xqo,Ab,upe,$qo,kqo,yV,Sqo,Rqo,Pqo,Lb,bpe,Bqo,Nqo,xV,Iqo,qqo,jqo,yb,vpe,Dqo,Gqo,$V,Oqo,Vqo,Xqo,xb,Fpe,zqo,Qqo,kV,Wqo,Hqo,Uqo,$b,Tpe,Jqo,Yqo,SV,Kqo,Zqo,ejo,kb,Mpe,ojo,rjo,RV,tjo,ajo,njo,Sb,Epe,sjo,ljo,PV,ijo,djo,cjo,Rb,Cpe,fjo,mjo,BV,gjo,hjo,pjo,Pb,wpe,_jo,ujo,NV,bjo,vjo,Fjo,Bb,Ape,Tjo,Mjo,IV,Ejo,Cjo,wjo,Nb,Lpe,Ajo,Ljo,qV,yjo,xjo,$jo,Ib,ype,kjo,Sjo,jV,Rjo,Pjo,Bjo,qb,xpe,Njo,Ijo,DV,qjo,jjo,Djo,jb,Gjo,$pe,Ojo,Vjo,kpe,Xjo,zjo,Db,fXe,od,Gb,Spe,Z7,Qjo,Rpe,Wjo,mXe,Po,eL,Hjo,rd,Ujo,GV,Jjo,Yjo,OV,Kjo,Zjo,eDo,oL,oDo,Ppe,rDo,tDo,aDo,mt,rL,nDo,Bpe,sDo,lDo,td,iDo,Npe,dDo,cDo,VV,fDo,mDo,gDo,Ob,hDo,oo,tL,pDo,Ipe,_Do,uDo,Ga,bDo,qpe,vDo,FDo,jpe,TDo,MDo,Dpe,EDo,CDo,wDo,I,Vb,Gpe,ADo,LDo,XV,yDo,xDo,$Do,Xb,Ope,kDo,SDo,zV,RDo,PDo,BDo,zb,Vpe,NDo,IDo,QV,qDo,jDo,DDo,Qb,Xpe,GDo,ODo,WV,VDo,XDo,zDo,Wb,zpe,QDo,WDo,HV,HDo,UDo,JDo,Hb,Qpe,YDo,KDo,UV,ZDo,eGo,oGo,Ub,Wpe,rGo,tGo,JV,aGo,nGo,sGo,Jb,Hpe,lGo,iGo,YV,dGo,cGo,fGo,Yb,Upe,mGo,gGo,KV,hGo,pGo,_Go,Kb,Jpe,uGo,bGo,ZV,vGo,FGo,TGo,Zb,Ype,MGo,EGo,eX,CGo,wGo,AGo,ev,Kpe,LGo,yGo,oX,xGo,$Go,kGo,ov,Zpe,SGo,RGo,rX,PGo,BGo,NGo,rv,e_e,IGo,qGo,tX,jGo,DGo,GGo,tv,o_e,OGo,VGo,aX,XGo,zGo,QGo,av,r_e,WGo,HGo,nX,UGo,JGo,YGo,nv,t_e,KGo,ZGo,sX,eOo,oOo,rOo,sv,a_e,tOo,aOo,lX,nOo,sOo,lOo,lv,n_e,iOo,dOo,iX,cOo,fOo,mOo,iv,s_e,gOo,hOo,dX,pOo,_Oo,uOo,dv,l_e,bOo,vOo,cX,FOo,TOo,MOo,cv,i_e,EOo,COo,fX,wOo,AOo,LOo,fv,d_e,yOo,xOo,mX,$Oo,kOo,SOo,mv,c_e,ROo,POo,gX,BOo,NOo,IOo,gv,f_e,qOo,jOo,hX,DOo,GOo,OOo,hv,m_e,VOo,XOo,pX,zOo,QOo,WOo,pv,g_e,HOo,UOo,_X,JOo,YOo,KOo,_v,h_e,ZOo,eVo,uX,oVo,rVo,tVo,uv,p_e,aVo,nVo,bX,sVo,lVo,iVo,bv,__e,dVo,cVo,vX,fVo,mVo,gVo,vv,u_e,hVo,pVo,FX,_Vo,uVo,bVo,Fv,b_e,vVo,FVo,TX,TVo,MVo,EVo,Tv,v_e,CVo,wVo,MX,AVo,LVo,yVo,Mv,F_e,xVo,$Vo,EX,kVo,SVo,RVo,Ev,T_e,PVo,BVo,CX,NVo,IVo,qVo,Cv,M_e,jVo,DVo,wX,GVo,OVo,VVo,wv,E_e,XVo,zVo,AX,QVo,WVo,HVo,Av,C_e,UVo,JVo,LX,YVo,KVo,ZVo,Lv,w_e,eXo,oXo,yX,rXo,tXo,aXo,yv,A_e,nXo,sXo,xX,lXo,iXo,dXo,xv,L_e,cXo,fXo,$X,mXo,gXo,hXo,$v,y_e,pXo,_Xo,kX,uXo,bXo,vXo,kv,x_e,FXo,TXo,SX,MXo,EXo,CXo,Sv,$_e,wXo,AXo,RX,LXo,yXo,xXo,Rv,k_e,$Xo,kXo,PX,SXo,RXo,PXo,Pv,S_e,BXo,NXo,BX,IXo,qXo,jXo,Bv,R_e,DXo,GXo,NX,OXo,VXo,XXo,Nv,P_e,zXo,QXo,IX,WXo,HXo,UXo,Iv,B_e,JXo,YXo,qX,KXo,ZXo,ezo,qv,N_e,ozo,rzo,jX,tzo,azo,nzo,jv,szo,I_e,lzo,izo,q_e,dzo,czo,Dv,gXe,ad,Gv,j_e,aL,fzo,D_e,mzo,hXe,Bo,nL,gzo,nd,hzo,DX,pzo,_zo,GX,uzo,bzo,vzo,sL,Fzo,G_e,Tzo,Mzo,Ezo,gt,lL,Czo,O_e,wzo,Azo,sd,Lzo,V_e,yzo,xzo,OX,$zo,kzo,Szo,Ov,Rzo,ro,iL,Pzo,X_e,Bzo,Nzo,Oa,Izo,z_e,qzo,jzo,Q_e,Dzo,Gzo,W_e,Ozo,Vzo,Xzo,Z,Vv,H_e,zzo,Qzo,VX,Wzo,Hzo,Uzo,Xv,U_e,Jzo,Yzo,XX,Kzo,Zzo,eQo,zv,J_e,oQo,rQo,zX,tQo,aQo,nQo,Qv,Y_e,sQo,lQo,QX,iQo,dQo,cQo,Wv,K_e,fQo,mQo,WX,gQo,hQo,pQo,Hv,Z_e,_Qo,uQo,HX,bQo,vQo,FQo,Uv,eue,TQo,MQo,UX,EQo,CQo,wQo,Jv,oue,AQo,LQo,JX,yQo,xQo,$Qo,Yv,rue,kQo,SQo,YX,RQo,PQo,BQo,Kv,tue,NQo,IQo,KX,qQo,jQo,DQo,Zv,aue,GQo,OQo,ZX,VQo,XQo,zQo,e5,nue,QQo,WQo,ez,HQo,UQo,JQo,o5,sue,YQo,KQo,oz,ZQo,eWo,oWo,r5,lue,rWo,tWo,rz,aWo,nWo,sWo,t5,iue,lWo,iWo,tz,dWo,cWo,fWo,a5,due,mWo,gWo,az,hWo,pWo,_Wo,n5,cue,uWo,bWo,nz,vWo,FWo,TWo,s5,fue,MWo,EWo,sz,CWo,wWo,AWo,l5,mue,LWo,yWo,lz,xWo,$Wo,kWo,i5,gue,SWo,RWo,iz,PWo,BWo,NWo,d5,hue,IWo,qWo,dz,jWo,DWo,GWo,c5,pue,OWo,VWo,cz,XWo,zWo,QWo,f5,_ue,WWo,HWo,fz,UWo,JWo,YWo,m5,uue,KWo,ZWo,mz,eHo,oHo,rHo,g5,bue,tHo,aHo,gz,nHo,sHo,lHo,h5,vue,iHo,dHo,hz,cHo,fHo,mHo,p5,Fue,gHo,hHo,pz,pHo,_Ho,uHo,_5,Tue,bHo,vHo,_z,FHo,THo,MHo,u5,Mue,EHo,CHo,uz,wHo,AHo,LHo,b5,Eue,yHo,xHo,bz,$Ho,kHo,SHo,v5,RHo,Cue,PHo,BHo,wue,NHo,IHo,F5,pXe,ld,T5,Aue,dL,qHo,Lue,jHo,_Xe,No,cL,DHo,id,GHo,vz,OHo,VHo,Fz,XHo,zHo,QHo,fL,WHo,yue,HHo,UHo,JHo,ht,mL,YHo,xue,KHo,ZHo,dd,eUo,$ue,oUo,rUo,Tz,tUo,aUo,nUo,M5,sUo,to,gL,lUo,kue,iUo,dUo,Va,cUo,Sue,fUo,mUo,Rue,gUo,hUo,Pue,pUo,_Uo,uUo,Io,E5,Bue,bUo,vUo,Mz,FUo,TUo,MUo,C5,Nue,EUo,CUo,Ez,wUo,AUo,LUo,w5,Iue,yUo,xUo,Cz,$Uo,kUo,SUo,A5,que,RUo,PUo,wz,BUo,NUo,IUo,L5,jue,qUo,jUo,Az,DUo,GUo,OUo,y5,Due,VUo,XUo,Lz,zUo,QUo,WUo,x5,HUo,Gue,UUo,JUo,Oue,YUo,KUo,$5,uXe,cd,k5,Vue,hL,ZUo,Xue,eJo,bXe,qo,pL,oJo,fd,rJo,yz,tJo,aJo,xz,nJo,sJo,lJo,_L,iJo,zue,dJo,cJo,fJo,pt,uL,mJo,Que,gJo,hJo,md,pJo,Wue,_Jo,uJo,$z,bJo,vJo,FJo,S5,TJo,ao,bL,MJo,Hue,EJo,CJo,Xa,wJo,Uue,AJo,LJo,Jue,yJo,xJo,Yue,$Jo,kJo,SJo,U,R5,Kue,RJo,PJo,kz,BJo,NJo,IJo,P5,Zue,qJo,jJo,Sz,DJo,GJo,OJo,B5,e1e,VJo,XJo,Rz,zJo,QJo,WJo,N5,o1e,HJo,UJo,Pz,JJo,YJo,KJo,I5,r1e,ZJo,eYo,Bz,oYo,rYo,tYo,q5,t1e,aYo,nYo,Nz,sYo,lYo,iYo,j5,a1e,dYo,cYo,Iz,fYo,mYo,gYo,D5,n1e,hYo,pYo,qz,_Yo,uYo,bYo,G5,s1e,vYo,FYo,jz,TYo,MYo,EYo,O5,l1e,CYo,wYo,Dz,AYo,LYo,yYo,V5,i1e,xYo,$Yo,Gz,kYo,SYo,RYo,X5,d1e,PYo,BYo,Oz,NYo,IYo,qYo,z5,c1e,jYo,DYo,Vz,GYo,OYo,VYo,Q5,f1e,XYo,zYo,Xz,QYo,WYo,HYo,W5,m1e,UYo,JYo,zz,YYo,KYo,ZYo,H5,g1e,eKo,oKo,Qz,rKo,tKo,aKo,U5,h1e,nKo,sKo,Wz,lKo,iKo,dKo,J5,p1e,cKo,fKo,Hz,mKo,gKo,hKo,Y5,_1e,pKo,_Ko,Uz,uKo,bKo,vKo,K5,u1e,FKo,TKo,Jz,MKo,EKo,CKo,Z5,b1e,wKo,AKo,Yz,LKo,yKo,xKo,e0,v1e,$Ko,kKo,Kz,SKo,RKo,PKo,o0,F1e,BKo,NKo,Zz,IKo,qKo,jKo,r0,T1e,DKo,GKo,eQ,OKo,VKo,XKo,t0,M1e,zKo,QKo,oQ,WKo,HKo,UKo,a0,E1e,JKo,YKo,rQ,KKo,ZKo,eZo,n0,C1e,oZo,rZo,tQ,tZo,aZo,nZo,s0,w1e,sZo,lZo,aQ,iZo,dZo,cZo,l0,A1e,fZo,mZo,nQ,gZo,hZo,pZo,i0,L1e,_Zo,uZo,sQ,bZo,vZo,FZo,d0,y1e,TZo,MZo,lQ,EZo,CZo,wZo,c0,x1e,AZo,LZo,iQ,yZo,xZo,$Zo,f0,$1e,kZo,SZo,dQ,RZo,PZo,BZo,m0,k1e,NZo,IZo,cQ,qZo,jZo,DZo,g0,S1e,GZo,OZo,fQ,VZo,XZo,zZo,h0,R1e,QZo,WZo,mQ,HZo,UZo,JZo,p0,YZo,P1e,KZo,ZZo,B1e,eer,oer,_0,vXe,gd,u0,N1e,vL,rer,I1e,ter,FXe,jo,FL,aer,hd,ner,gQ,ser,ler,hQ,ier,der,cer,TL,fer,q1e,mer,ger,her,_t,ML,per,j1e,_er,uer,pd,ber,D1e,ver,Fer,pQ,Ter,Mer,Eer,b0,Cer,no,EL,wer,G1e,Aer,Ler,za,yer,O1e,xer,$er,V1e,ker,Ser,X1e,Rer,Per,Ber,V,v0,z1e,Ner,Ier,_Q,qer,jer,Der,F0,Q1e,Ger,Oer,uQ,Ver,Xer,zer,T0,W1e,Qer,Wer,bQ,Her,Uer,Jer,M0,H1e,Yer,Ker,vQ,Zer,eor,oor,E0,U1e,ror,tor,FQ,aor,nor,sor,C0,J1e,lor,ior,TQ,dor,cor,mor,w0,Y1e,gor,hor,MQ,por,_or,uor,A0,K1e,bor,vor,EQ,For,Tor,Mor,L0,Z1e,Eor,Cor,CQ,wor,Aor,Lor,y0,e2e,yor,xor,wQ,$or,kor,Sor,x0,o2e,Ror,Por,AQ,Bor,Nor,Ior,$0,r2e,qor,jor,LQ,Dor,Gor,Oor,k0,t2e,Vor,Xor,yQ,zor,Qor,Wor,S0,a2e,Hor,Uor,xQ,Jor,Yor,Kor,R0,n2e,Zor,err,$Q,orr,rrr,trr,P0,s2e,arr,nrr,kQ,srr,lrr,irr,B0,l2e,drr,crr,SQ,frr,mrr,grr,N0,i2e,hrr,prr,RQ,_rr,urr,brr,I0,d2e,vrr,Frr,PQ,Trr,Mrr,Err,q0,c2e,Crr,wrr,BQ,Arr,Lrr,yrr,j0,f2e,xrr,$rr,NQ,krr,Srr,Rrr,D0,m2e,Prr,Brr,IQ,Nrr,Irr,qrr,G0,g2e,jrr,Drr,qQ,Grr,Orr,Vrr,O0,h2e,Xrr,zrr,jQ,Qrr,Wrr,Hrr,V0,p2e,Urr,Jrr,DQ,Yrr,Krr,Zrr,X0,_2e,etr,otr,GQ,rtr,ttr,atr,z0,u2e,ntr,str,OQ,ltr,itr,dtr,Q0,b2e,ctr,ftr,VQ,mtr,gtr,htr,W0,v2e,ptr,_tr,XQ,utr,btr,vtr,H0,F2e,Ftr,Ttr,zQ,Mtr,Etr,Ctr,U0,T2e,wtr,Atr,QQ,Ltr,ytr,xtr,J0,M2e,$tr,ktr,WQ,Str,Rtr,Ptr,Y0,E2e,Btr,Ntr,HQ,Itr,qtr,jtr,K0,C2e,Dtr,Gtr,UQ,Otr,Vtr,Xtr,Z0,w2e,ztr,Qtr,JQ,Wtr,Htr,Utr,eF,A2e,Jtr,Ytr,YQ,Ktr,Ztr,ear,oF,L2e,oar,rar,KQ,tar,aar,nar,rF,y2e,sar,lar,ZQ,iar,dar,car,tF,x2e,far,mar,eW,gar,har,par,aF,$2e,_ar,uar,oW,bar,Far,Tar,nF,k2e,Mar,Ear,rW,Car,war,Aar,sF,S2e,Lar,yar,tW,xar,$ar,kar,lF,Sar,R2e,Rar,Par,P2e,Bar,Nar,iF,TXe,_d,dF,B2e,CL,Iar,N2e,qar,MXe,Do,wL,jar,ud,Dar,aW,Gar,Oar,nW,Var,Xar,zar,AL,Qar,I2e,War,Har,Uar,ut,LL,Jar,q2e,Yar,Kar,bd,Zar,j2e,enr,onr,sW,rnr,tnr,anr,cF,nnr,so,yL,snr,D2e,lnr,inr,Qa,dnr,G2e,cnr,fnr,O2e,mnr,gnr,V2e,hnr,pnr,_nr,X2e,fF,z2e,unr,bnr,lW,vnr,Fnr,Tnr,mF,Mnr,Q2e,Enr,Cnr,W2e,wnr,Anr,gF,EXe,vd,hF,H2e,xL,Lnr,U2e,ynr,CXe,Go,$L,xnr,Fd,$nr,iW,knr,Snr,dW,Rnr,Pnr,Bnr,kL,Nnr,J2e,Inr,qnr,jnr,bt,SL,Dnr,Y2e,Gnr,Onr,Td,Vnr,K2e,Xnr,znr,cW,Qnr,Wnr,Hnr,pF,Unr,lo,RL,Jnr,Z2e,Ynr,Knr,Wa,Znr,ebe,esr,osr,obe,rsr,tsr,rbe,asr,nsr,ssr,ve,_F,tbe,lsr,isr,fW,dsr,csr,fsr,uF,abe,msr,gsr,mW,hsr,psr,_sr,bF,nbe,usr,bsr,gW,vsr,Fsr,Tsr,vF,sbe,Msr,Esr,hW,Csr,wsr,Asr,Hs,lbe,Lsr,ysr,pW,xsr,$sr,_W,ksr,Ssr,Rsr,FF,ibe,Psr,Bsr,uW,Nsr,Isr,qsr,Us,dbe,jsr,Dsr,bW,Gsr,Osr,vW,Vsr,Xsr,zsr,TF,cbe,Qsr,Wsr,FW,Hsr,Usr,Jsr,vt,fbe,Ysr,Ksr,TW,Zsr,elr,MW,olr,rlr,EW,tlr,alr,nlr,MF,mbe,slr,llr,CW,ilr,dlr,clr,EF,gbe,flr,mlr,wW,glr,hlr,plr,CF,hbe,_lr,ulr,AW,blr,vlr,Flr,wF,pbe,Tlr,Mlr,LW,Elr,Clr,wlr,AF,_be,Alr,Llr,yW,ylr,xlr,$lr,LF,ube,klr,Slr,xW,Rlr,Plr,Blr,yF,bbe,Nlr,Ilr,$W,qlr,jlr,Dlr,xF,Glr,vbe,Olr,Vlr,Fbe,Xlr,zlr,$F,wXe,Md,kF,Tbe,PL,Qlr,Mbe,Wlr,AXe,Oo,BL,Hlr,Ed,Ulr,kW,Jlr,Ylr,SW,Klr,Zlr,eir,NL,oir,Ebe,rir,tir,air,Ft,IL,nir,Cbe,sir,lir,Cd,iir,wbe,dir,cir,RW,fir,mir,gir,SF,hir,io,qL,pir,Abe,_ir,uir,Ha,bir,Lbe,vir,Fir,ybe,Tir,Mir,xbe,Eir,Cir,wir,$be,RF,kbe,Air,Lir,PW,yir,xir,$ir,PF,kir,Sbe,Sir,Rir,Rbe,Pir,Bir,BF,LXe,wd,NF,Pbe,jL,Nir,Bbe,Iir,yXe,Vo,DL,qir,Ad,jir,BW,Dir,Gir,NW,Oir,Vir,Xir,GL,zir,Nbe,Qir,Wir,Hir,Tt,OL,Uir,Ibe,Jir,Yir,Ld,Kir,qbe,Zir,edr,IW,odr,rdr,tdr,IF,adr,co,VL,ndr,jbe,sdr,ldr,Ua,idr,Dbe,ddr,cdr,Gbe,fdr,mdr,Obe,gdr,hdr,pdr,Vbe,qF,Xbe,_dr,udr,qW,bdr,vdr,Fdr,jF,Tdr,zbe,Mdr,Edr,Qbe,Cdr,wdr,DF,xXe,yd,GF,Wbe,XL,Adr,Hbe,Ldr,$Xe,Xo,zL,ydr,xd,xdr,jW,$dr,kdr,DW,Sdr,Rdr,Pdr,QL,Bdr,Ube,Ndr,Idr,qdr,Mt,WL,jdr,Jbe,Ddr,Gdr,$d,Odr,Ybe,Vdr,Xdr,GW,zdr,Qdr,Wdr,OF,Hdr,fo,HL,Udr,Kbe,Jdr,Ydr,Ja,Kdr,Zbe,Zdr,ecr,eve,ocr,rcr,ove,tcr,acr,ncr,Pe,VF,rve,scr,lcr,OW,icr,dcr,ccr,XF,tve,fcr,mcr,VW,gcr,hcr,pcr,zF,ave,_cr,ucr,XW,bcr,vcr,Fcr,QF,nve,Tcr,Mcr,zW,Ecr,Ccr,wcr,WF,sve,Acr,Lcr,QW,ycr,xcr,$cr,HF,lve,kcr,Scr,WW,Rcr,Pcr,Bcr,UF,ive,Ncr,Icr,HW,qcr,jcr,Dcr,JF,dve,Gcr,Ocr,UW,Vcr,Xcr,zcr,YF,cve,Qcr,Wcr,JW,Hcr,Ucr,Jcr,KF,Ycr,fve,Kcr,Zcr,mve,efr,ofr,ZF,kXe,kd,eT,gve,UL,rfr,hve,tfr,SXe,zo,JL,afr,Sd,nfr,YW,sfr,lfr,KW,ifr,dfr,cfr,YL,ffr,pve,mfr,gfr,hfr,Et,KL,pfr,_ve,_fr,ufr,Rd,bfr,uve,vfr,Ffr,ZW,Tfr,Mfr,Efr,oT,Cfr,mo,ZL,wfr,bve,Afr,Lfr,Ya,yfr,vve,xfr,$fr,Fve,kfr,Sfr,Tve,Rfr,Pfr,Bfr,ot,rT,Mve,Nfr,Ifr,eH,qfr,jfr,Dfr,tT,Eve,Gfr,Ofr,oH,Vfr,Xfr,zfr,aT,Cve,Qfr,Wfr,rH,Hfr,Ufr,Jfr,nT,wve,Yfr,Kfr,tH,Zfr,emr,omr,sT,Ave,rmr,tmr,aH,amr,nmr,smr,lT,lmr,Lve,imr,dmr,yve,cmr,fmr,iT,RXe,Pd,dT,xve,ey,mmr,$ve,gmr,PXe,Qo,oy,hmr,Bd,pmr,nH,_mr,umr,sH,bmr,vmr,Fmr,ry,Tmr,kve,Mmr,Emr,Cmr,Ct,ty,wmr,Sve,Amr,Lmr,Nd,ymr,Rve,xmr,$mr,lH,kmr,Smr,Rmr,cT,Pmr,go,ay,Bmr,Pve,Nmr,Imr,Ka,qmr,Bve,jmr,Dmr,Nve,Gmr,Omr,Ive,Vmr,Xmr,zmr,Le,fT,qve,Qmr,Wmr,iH,Hmr,Umr,Jmr,mT,jve,Ymr,Kmr,dH,Zmr,egr,ogr,gT,Dve,rgr,tgr,cH,agr,ngr,sgr,hT,Gve,lgr,igr,fH,dgr,cgr,fgr,pT,Ove,mgr,ggr,mH,hgr,pgr,_gr,_T,Vve,ugr,bgr,gH,vgr,Fgr,Tgr,uT,Xve,Mgr,Egr,hH,Cgr,wgr,Agr,bT,zve,Lgr,ygr,pH,xgr,$gr,kgr,vT,Qve,Sgr,Rgr,_H,Pgr,Bgr,Ngr,FT,Wve,Igr,qgr,uH,jgr,Dgr,Ggr,TT,Ogr,Hve,Vgr,Xgr,Uve,zgr,Qgr,MT,BXe,Id,ET,Jve,ny,Wgr,Yve,Hgr,NXe,Wo,sy,Ugr,qd,Jgr,bH,Ygr,Kgr,vH,Zgr,ehr,ohr,ly,rhr,Kve,thr,ahr,nhr,wt,iy,shr,Zve,lhr,ihr,jd,dhr,e5e,chr,fhr,FH,mhr,ghr,hhr,CT,phr,ho,dy,_hr,o5e,uhr,bhr,Za,vhr,r5e,Fhr,Thr,t5e,Mhr,Ehr,a5e,Chr,whr,Ahr,cy,wT,n5e,Lhr,yhr,TH,xhr,$hr,khr,AT,s5e,Shr,Rhr,MH,Phr,Bhr,Nhr,LT,Ihr,l5e,qhr,jhr,i5e,Dhr,Ghr,yT,IXe,Dd,xT,d5e,fy,Ohr,c5e,Vhr,qXe,Ho,my,Xhr,Gd,zhr,EH,Qhr,Whr,CH,Hhr,Uhr,Jhr,gy,Yhr,f5e,Khr,Zhr,epr,At,hy,opr,m5e,rpr,tpr,Od,apr,g5e,npr,spr,wH,lpr,ipr,dpr,$T,cpr,po,py,fpr,h5e,mpr,gpr,en,hpr,p5e,ppr,_pr,_5e,upr,bpr,u5e,vpr,Fpr,Tpr,rt,kT,b5e,Mpr,Epr,AH,Cpr,wpr,Apr,ST,v5e,Lpr,ypr,LH,xpr,$pr,kpr,RT,F5e,Spr,Rpr,yH,Ppr,Bpr,Npr,PT,T5e,Ipr,qpr,xH,jpr,Dpr,Gpr,BT,M5e,Opr,Vpr,$H,Xpr,zpr,Qpr,NT,Wpr,E5e,Hpr,Upr,C5e,Jpr,Ypr,IT,jXe,Vd,qT,w5e,_y,Kpr,A5e,Zpr,DXe,Uo,uy,e_r,Xd,o_r,kH,r_r,t_r,SH,a_r,n_r,s_r,by,l_r,L5e,i_r,d_r,c_r,Lt,vy,f_r,y5e,m_r,g_r,zd,h_r,x5e,p_r,__r,RH,u_r,b_r,v_r,jT,F_r,_o,Fy,T_r,$5e,M_r,E_r,on,C_r,k5e,w_r,A_r,S5e,L_r,y_r,R5e,x_r,$_r,k_r,Qd,DT,P5e,S_r,R_r,PH,P_r,B_r,N_r,GT,B5e,I_r,q_r,BH,j_r,D_r,G_r,OT,N5e,O_r,V_r,NH,X_r,z_r,Q_r,VT,W_r,I5e,H_r,U_r,q5e,J_r,Y_r,XT,GXe,Wd,zT,j5e,Ty,K_r,D5e,Z_r,OXe,Jo,My,eur,Hd,our,IH,rur,tur,qH,aur,nur,sur,Ey,lur,G5e,iur,dur,cur,yt,Cy,fur,O5e,mur,gur,Ud,hur,V5e,pur,_ur,jH,uur,bur,vur,QT,Fur,uo,wy,Tur,X5e,Mur,Eur,rn,Cur,z5e,wur,Aur,Q5e,Lur,yur,W5e,xur,$ur,kur,Ay,WT,H5e,Sur,Rur,DH,Pur,Bur,Nur,HT,U5e,Iur,qur,GH,jur,Dur,Gur,UT,Our,J5e,Vur,Xur,Y5e,zur,Qur,JT,VXe,Jd,YT,K5e,Ly,Wur,Z5e,Hur,XXe,Yo,yy,Uur,Yd,Jur,OH,Yur,Kur,VH,Zur,e1r,o1r,xy,r1r,e0e,t1r,a1r,n1r,xt,$y,s1r,o0e,l1r,i1r,Kd,d1r,r0e,c1r,f1r,XH,m1r,g1r,h1r,KT,p1r,bo,ky,_1r,t0e,u1r,b1r,tn,v1r,a0e,F1r,T1r,n0e,M1r,E1r,s0e,C1r,w1r,A1r,l0e,ZT,i0e,L1r,y1r,zH,x1r,$1r,k1r,e8,S1r,d0e,R1r,P1r,c0e,B1r,N1r,o8,zXe,Zd,r8,f0e,Sy,I1r,m0e,q1r,QXe,Ko,Ry,j1r,ec,D1r,QH,G1r,O1r,WH,V1r,X1r,z1r,Py,Q1r,g0e,W1r,H1r,U1r,$t,By,J1r,h0e,Y1r,K1r,oc,Z1r,p0e,e2r,o2r,HH,r2r,t2r,a2r,t8,n2r,vo,Ny,s2r,_0e,l2r,i2r,an,d2r,u0e,c2r,f2r,b0e,m2r,g2r,v0e,h2r,p2r,_2r,tt,a8,F0e,u2r,b2r,UH,v2r,F2r,T2r,n8,T0e,M2r,E2r,JH,C2r,w2r,A2r,s8,M0e,L2r,y2r,YH,x2r,$2r,k2r,l8,E0e,S2r,R2r,KH,P2r,B2r,N2r,i8,C0e,I2r,q2r,ZH,j2r,D2r,G2r,d8,O2r,w0e,V2r,X2r,A0e,z2r,Q2r,c8,WXe,rc,f8,L0e,Iy,W2r,y0e,H2r,HXe,Zo,qy,U2r,tc,J2r,eU,Y2r,K2r,oU,Z2r,ebr,obr,jy,rbr,x0e,tbr,abr,nbr,kt,Dy,sbr,$0e,lbr,ibr,ac,dbr,k0e,cbr,fbr,rU,mbr,gbr,hbr,m8,pbr,Fo,Gy,_br,S0e,ubr,bbr,nn,vbr,R0e,Fbr,Tbr,P0e,Mbr,Ebr,B0e,Cbr,wbr,Abr,N0e,g8,I0e,Lbr,ybr,tU,xbr,$br,kbr,h8,Sbr,q0e,Rbr,Pbr,j0e,Bbr,Nbr,p8,UXe,nc,_8,D0e,Oy,Ibr,G0e,qbr,JXe,er,Vy,jbr,sc,Dbr,aU,Gbr,Obr,nU,Vbr,Xbr,zbr,Xy,Qbr,O0e,Wbr,Hbr,Ubr,St,zy,Jbr,V0e,Ybr,Kbr,lc,Zbr,X0e,evr,ovr,sU,rvr,tvr,avr,u8,nvr,xr,Qy,svr,z0e,lvr,ivr,sn,dvr,Q0e,cvr,fvr,W0e,mvr,gvr,H0e,hvr,pvr,_vr,q,b8,U0e,uvr,bvr,lU,vvr,Fvr,Tvr,v8,J0e,Mvr,Evr,iU,Cvr,wvr,Avr,F8,Y0e,Lvr,yvr,dU,xvr,$vr,kvr,T8,K0e,Svr,Rvr,cU,Pvr,Bvr,Nvr,M8,Z0e,Ivr,qvr,fU,jvr,Dvr,Gvr,E8,eFe,Ovr,Vvr,mU,Xvr,zvr,Qvr,C8,oFe,Wvr,Hvr,gU,Uvr,Jvr,Yvr,w8,rFe,Kvr,Zvr,hU,e5r,o5r,r5r,A8,tFe,t5r,a5r,pU,n5r,s5r,l5r,L8,aFe,i5r,d5r,_U,c5r,f5r,m5r,y8,nFe,g5r,h5r,uU,p5r,_5r,u5r,x8,sFe,b5r,v5r,bU,F5r,T5r,M5r,$8,lFe,E5r,C5r,vU,w5r,A5r,L5r,k8,iFe,y5r,x5r,FU,$5r,k5r,S5r,S8,dFe,R5r,P5r,TU,B5r,N5r,I5r,R8,cFe,q5r,j5r,MU,D5r,G5r,O5r,P8,fFe,V5r,X5r,EU,z5r,Q5r,W5r,Js,mFe,H5r,U5r,CU,J5r,Y5r,wU,K5r,Z5r,e0r,B8,gFe,o0r,r0r,AU,t0r,a0r,n0r,N8,hFe,s0r,l0r,LU,i0r,d0r,c0r,I8,pFe,f0r,m0r,yU,g0r,h0r,p0r,q8,_Fe,_0r,u0r,xU,b0r,v0r,F0r,j8,uFe,T0r,M0r,$U,E0r,C0r,w0r,D8,bFe,A0r,L0r,kU,y0r,x0r,$0r,G8,vFe,k0r,S0r,SU,R0r,P0r,B0r,O8,FFe,N0r,I0r,RU,q0r,j0r,D0r,V8,TFe,G0r,O0r,PU,V0r,X0r,z0r,X8,MFe,Q0r,W0r,BU,H0r,U0r,J0r,z8,EFe,Y0r,K0r,NU,Z0r,eFr,oFr,Q8,CFe,rFr,tFr,IU,aFr,nFr,sFr,W8,wFe,lFr,iFr,qU,dFr,cFr,fFr,H8,AFe,mFr,gFr,jU,hFr,pFr,_Fr,U8,LFe,uFr,bFr,DU,vFr,FFr,TFr,J8,yFe,MFr,EFr,GU,CFr,wFr,AFr,Y8,xFe,LFr,yFr,OU,xFr,$Fr,kFr,K8,$Fe,SFr,RFr,VU,PFr,BFr,NFr,Z8,kFe,IFr,qFr,XU,jFr,DFr,GFr,e9,SFe,OFr,VFr,zU,XFr,zFr,QFr,o9,RFe,WFr,HFr,QU,UFr,JFr,YFr,r9,PFe,KFr,ZFr,WU,eTr,oTr,rTr,t9,BFe,tTr,aTr,HU,nTr,sTr,lTr,a9,NFe,iTr,dTr,UU,cTr,fTr,mTr,n9,IFe,gTr,hTr,JU,pTr,_Tr,uTr,s9,qFe,bTr,vTr,YU,FTr,TTr,MTr,l9,jFe,ETr,CTr,KU,wTr,ATr,LTr,i9,DFe,yTr,xTr,ZU,$Tr,kTr,STr,d9,GFe,RTr,PTr,eJ,BTr,NTr,ITr,c9,OFe,qTr,jTr,oJ,DTr,GTr,OTr,f9,VFe,VTr,XTr,rJ,zTr,QTr,WTr,m9,YXe,ic,g9,XFe,Wy,HTr,zFe,UTr,KXe,or,Hy,JTr,dc,YTr,tJ,KTr,ZTr,aJ,e8r,o8r,r8r,Uy,t8r,QFe,a8r,n8r,s8r,Rt,Jy,l8r,WFe,i8r,d8r,cc,c8r,HFe,f8r,m8r,nJ,g8r,h8r,p8r,h9,_8r,$r,Yy,u8r,UFe,b8r,v8r,ln,F8r,JFe,T8r,M8r,YFe,E8r,C8r,KFe,w8r,A8r,L8r,se,p9,ZFe,y8r,x8r,sJ,$8r,k8r,S8r,_9,eTe,R8r,P8r,lJ,B8r,N8r,I8r,u9,oTe,q8r,j8r,iJ,D8r,G8r,O8r,b9,rTe,V8r,X8r,dJ,z8r,Q8r,W8r,v9,tTe,H8r,U8r,cJ,J8r,Y8r,K8r,F9,aTe,Z8r,e9r,fJ,o9r,r9r,t9r,T9,nTe,a9r,n9r,mJ,s9r,l9r,i9r,M9,sTe,d9r,c9r,gJ,f9r,m9r,g9r,E9,lTe,h9r,p9r,hJ,_9r,u9r,b9r,C9,iTe,v9r,F9r,pJ,T9r,M9r,E9r,w9,dTe,C9r,w9r,_J,A9r,L9r,y9r,A9,cTe,x9r,$9r,uJ,k9r,S9r,R9r,L9,fTe,P9r,B9r,bJ,N9r,I9r,q9r,y9,mTe,j9r,D9r,vJ,G9r,O9r,V9r,x9,gTe,X9r,z9r,FJ,Q9r,W9r,H9r,$9,hTe,U9r,J9r,TJ,Y9r,K9r,Z9r,k9,pTe,eMr,oMr,MJ,rMr,tMr,aMr,S9,_Te,nMr,sMr,EJ,lMr,iMr,dMr,R9,uTe,cMr,fMr,CJ,mMr,gMr,hMr,P9,bTe,pMr,_Mr,wJ,uMr,bMr,vMr,B9,vTe,FMr,TMr,AJ,MMr,EMr,CMr,N9,FTe,wMr,AMr,LJ,LMr,yMr,xMr,I9,TTe,$Mr,kMr,yJ,SMr,RMr,PMr,q9,ZXe,fc,j9,MTe,Ky,BMr,ETe,NMr,eze,rr,Zy,IMr,mc,qMr,xJ,jMr,DMr,$J,GMr,OMr,VMr,ex,XMr,CTe,zMr,QMr,WMr,Pt,ox,HMr,wTe,UMr,JMr,gc,YMr,ATe,KMr,ZMr,kJ,e4r,o4r,r4r,D9,t4r,kr,rx,a4r,LTe,n4r,s4r,dn,l4r,yTe,i4r,d4r,xTe,c4r,f4r,$Te,m4r,g4r,h4r,Me,G9,kTe,p4r,_4r,SJ,u4r,b4r,v4r,O9,STe,F4r,T4r,RJ,M4r,E4r,C4r,V9,RTe,w4r,A4r,PJ,L4r,y4r,x4r,X9,PTe,$4r,k4r,BJ,S4r,R4r,P4r,z9,BTe,B4r,N4r,NJ,I4r,q4r,j4r,Q9,NTe,D4r,G4r,IJ,O4r,V4r,X4r,W9,ITe,z4r,Q4r,qJ,W4r,H4r,U4r,H9,qTe,J4r,Y4r,jJ,K4r,Z4r,eEr,U9,jTe,oEr,rEr,DJ,tEr,aEr,nEr,J9,DTe,sEr,lEr,GJ,iEr,dEr,cEr,Y9,GTe,fEr,mEr,OJ,gEr,hEr,pEr,K9,OTe,_Er,uEr,VJ,bEr,vEr,FEr,Z9,VTe,TEr,MEr,XJ,EEr,CEr,wEr,eM,oze,hc,oM,XTe,tx,AEr,zTe,LEr,rze,tr,ax,yEr,pc,xEr,zJ,$Er,kEr,QJ,SEr,REr,PEr,nx,BEr,QTe,NEr,IEr,qEr,Bt,sx,jEr,WTe,DEr,GEr,_c,OEr,HTe,VEr,XEr,WJ,zEr,QEr,WEr,rM,HEr,Sr,lx,UEr,UTe,JEr,YEr,cn,KEr,JTe,ZEr,eCr,YTe,oCr,rCr,KTe,tCr,aCr,nCr,ar,tM,ZTe,sCr,lCr,HJ,iCr,dCr,cCr,aM,e8e,fCr,mCr,UJ,gCr,hCr,pCr,nM,o8e,_Cr,uCr,JJ,bCr,vCr,FCr,sM,r8e,TCr,MCr,YJ,ECr,CCr,wCr,lM,t8e,ACr,LCr,KJ,yCr,xCr,$Cr,iM,a8e,kCr,SCr,ZJ,RCr,PCr,BCr,dM,tze,uc,cM,n8e,ix,NCr,s8e,ICr,aze,nr,dx,qCr,bc,jCr,eY,DCr,GCr,oY,OCr,VCr,XCr,cx,zCr,l8e,QCr,WCr,HCr,Nt,fx,UCr,i8e,JCr,YCr,vc,KCr,d8e,ZCr,e3r,rY,o3r,r3r,t3r,fM,a3r,Rr,mx,n3r,c8e,s3r,l3r,fn,i3r,f8e,d3r,c3r,m8e,f3r,m3r,g8e,g3r,h3r,p3r,ie,mM,h8e,_3r,u3r,tY,b3r,v3r,F3r,gM,p8e,T3r,M3r,aY,E3r,C3r,w3r,hM,_8e,A3r,L3r,nY,y3r,x3r,$3r,pM,u8e,k3r,S3r,sY,R3r,P3r,B3r,_M,b8e,N3r,I3r,lY,q3r,j3r,D3r,uM,v8e,G3r,O3r,iY,V3r,X3r,z3r,bM,F8e,Q3r,W3r,dY,H3r,U3r,J3r,vM,T8e,Y3r,K3r,cY,Z3r,ewr,owr,FM,M8e,rwr,twr,fY,awr,nwr,swr,TM,E8e,lwr,iwr,mY,dwr,cwr,fwr,MM,C8e,mwr,gwr,gY,hwr,pwr,_wr,EM,w8e,uwr,bwr,hY,vwr,Fwr,Twr,CM,A8e,Mwr,Ewr,pY,Cwr,wwr,Awr,wM,L8e,Lwr,ywr,_Y,xwr,$wr,kwr,AM,y8e,Swr,Rwr,uY,Pwr,Bwr,Nwr,LM,x8e,Iwr,qwr,bY,jwr,Dwr,Gwr,yM,$8e,Owr,Vwr,vY,Xwr,zwr,Qwr,xM,k8e,Wwr,Hwr,FY,Uwr,Jwr,Ywr,$M,S8e,Kwr,Zwr,TY,eAr,oAr,rAr,kM,R8e,tAr,aAr,MY,nAr,sAr,lAr,SM,nze,Fc,RM,P8e,gx,iAr,B8e,dAr,sze,sr,hx,cAr,Tc,fAr,EY,mAr,gAr,CY,hAr,pAr,_Ar,px,uAr,N8e,bAr,vAr,FAr,It,_x,TAr,I8e,MAr,EAr,Mc,CAr,q8e,wAr,AAr,wY,LAr,yAr,xAr,PM,$Ar,Pr,ux,kAr,j8e,SAr,RAr,mn,PAr,D8e,BAr,NAr,G8e,IAr,qAr,O8e,jAr,DAr,GAr,ye,BM,V8e,OAr,VAr,AY,XAr,zAr,QAr,NM,X8e,WAr,HAr,LY,UAr,JAr,YAr,IM,z8e,KAr,ZAr,yY,e6r,o6r,r6r,qM,Q8e,t6r,a6r,xY,n6r,s6r,l6r,jM,W8e,i6r,d6r,$Y,c6r,f6r,m6r,DM,H8e,g6r,h6r,kY,p6r,_6r,u6r,GM,U8e,b6r,v6r,SY,F6r,T6r,M6r,OM,J8e,E6r,C6r,RY,w6r,A6r,L6r,VM,Y8e,y6r,x6r,PY,$6r,k6r,S6r,XM,K8e,R6r,P6r,BY,B6r,N6r,I6r,zM,lze,Ec,QM,Z8e,bx,q6r,e9e,j6r,ize,lr,vx,D6r,Cc,G6r,NY,O6r,V6r,IY,X6r,z6r,Q6r,Fx,W6r,o9e,H6r,U6r,J6r,qt,Tx,Y6r,r9e,K6r,Z6r,wc,e7r,t9e,o7r,r7r,qY,t7r,a7r,n7r,WM,s7r,Br,Mx,l7r,a9e,i7r,d7r,gn,c7r,n9e,f7r,m7r,s9e,g7r,h7r,l9e,p7r,_7r,u7r,te,HM,i9e,b7r,v7r,jY,F7r,T7r,M7r,UM,d9e,E7r,C7r,DY,w7r,A7r,L7r,JM,c9e,y7r,x7r,GY,$7r,k7r,S7r,YM,f9e,R7r,P7r,OY,B7r,N7r,I7r,KM,m9e,q7r,j7r,VY,D7r,G7r,O7r,ZM,g9e,V7r,X7r,XY,z7r,Q7r,W7r,e4,h9e,H7r,U7r,zY,J7r,Y7r,K7r,o4,p9e,Z7r,eLr,QY,oLr,rLr,tLr,r4,_9e,aLr,nLr,WY,sLr,lLr,iLr,t4,u9e,dLr,cLr,HY,fLr,mLr,gLr,a4,b9e,hLr,pLr,UY,_Lr,uLr,bLr,n4,v9e,vLr,FLr,JY,TLr,MLr,ELr,s4,F9e,CLr,wLr,YY,ALr,LLr,yLr,l4,T9e,xLr,$Lr,KY,kLr,SLr,RLr,i4,M9e,PLr,BLr,ZY,NLr,ILr,qLr,d4,E9e,jLr,DLr,eK,GLr,OLr,VLr,c4,C9e,XLr,zLr,oK,QLr,WLr,HLr,f4,w9e,ULr,JLr,rK,YLr,KLr,ZLr,m4,A9e,eyr,oyr,tK,ryr,tyr,ayr,g4,L9e,nyr,syr,aK,lyr,iyr,dyr,h4,y9e,cyr,fyr,nK,myr,gyr,hyr,p4,x9e,pyr,_yr,sK,uyr,byr,vyr,_4,$9e,Fyr,Tyr,lK,Myr,Eyr,Cyr,u4,k9e,wyr,Ayr,iK,Lyr,yyr,xyr,b4,S9e,$yr,kyr,dK,Syr,Ryr,Pyr,v4,R9e,Byr,Nyr,cK,Iyr,qyr,jyr,F4,dze,Ac,T4,P9e,Ex,Dyr,B9e,Gyr,cze,ir,Cx,Oyr,Lc,Vyr,fK,Xyr,zyr,mK,Qyr,Wyr,Hyr,wx,Uyr,N9e,Jyr,Yyr,Kyr,jt,Ax,Zyr,I9e,exr,oxr,yc,rxr,q9e,txr,axr,gK,nxr,sxr,lxr,M4,ixr,Nr,Lx,dxr,j9e,cxr,fxr,hn,mxr,D9e,gxr,hxr,G9e,pxr,_xr,O9e,uxr,bxr,vxr,_e,E4,V9e,Fxr,Txr,hK,Mxr,Exr,Cxr,C4,X9e,wxr,Axr,pK,Lxr,yxr,xxr,w4,z9e,$xr,kxr,_K,Sxr,Rxr,Pxr,A4,Q9e,Bxr,Nxr,uK,Ixr,qxr,jxr,L4,W9e,Dxr,Gxr,bK,Oxr,Vxr,Xxr,y4,H9e,zxr,Qxr,vK,Wxr,Hxr,Uxr,x4,U9e,Jxr,Yxr,FK,Kxr,Zxr,e$r,$4,J9e,o$r,r$r,TK,t$r,a$r,n$r,k4,Y9e,s$r,l$r,MK,i$r,d$r,c$r,S4,K9e,f$r,m$r,EK,g$r,h$r,p$r,R4,Z9e,_$r,u$r,CK,b$r,v$r,F$r,P4,eMe,T$r,M$r,wK,E$r,C$r,w$r,B4,oMe,A$r,L$r,AK,y$r,x$r,$$r,N4,rMe,k$r,S$r,LK,R$r,P$r,B$r,I4,tMe,N$r,I$r,yK,q$r,j$r,D$r,q4,aMe,G$r,O$r,xK,V$r,X$r,z$r,j4,nMe,Q$r,W$r,$K,H$r,U$r,J$r,D4,fze,xc,G4,sMe,yx,Y$r,lMe,K$r,mze,dr,xx,Z$r,$c,ekr,kK,okr,rkr,SK,tkr,akr,nkr,$x,skr,iMe,lkr,ikr,dkr,Dt,kx,ckr,dMe,fkr,mkr,kc,gkr,cMe,hkr,pkr,RK,_kr,ukr,bkr,O4,vkr,Ir,Sx,Fkr,fMe,Tkr,Mkr,pn,Ekr,mMe,Ckr,wkr,gMe,Akr,Lkr,hMe,ykr,xkr,$kr,Rx,V4,pMe,kkr,Skr,PK,Rkr,Pkr,Bkr,X4,_Me,Nkr,Ikr,BK,qkr,jkr,Dkr,z4,gze,Sc,Q4,uMe,Px,Gkr,bMe,Okr,hze,cr,Bx,Vkr,Rc,Xkr,NK,zkr,Qkr,IK,Wkr,Hkr,Ukr,Nx,Jkr,vMe,Ykr,Kkr,Zkr,Gt,Ix,eSr,FMe,oSr,rSr,Pc,tSr,TMe,aSr,nSr,qK,sSr,lSr,iSr,W4,dSr,qr,qx,cSr,MMe,fSr,mSr,_n,gSr,EMe,hSr,pSr,CMe,_Sr,uSr,wMe,bSr,vSr,FSr,AMe,H4,LMe,TSr,MSr,jK,ESr,CSr,wSr,U4,pze,Bc,J4,yMe,jx,ASr,xMe,LSr,_ze,fr,Dx,ySr,Nc,xSr,DK,$Sr,kSr,GK,SSr,RSr,PSr,Gx,BSr,$Me,NSr,ISr,qSr,Ot,Ox,jSr,kMe,DSr,GSr,Ic,OSr,SMe,VSr,XSr,OK,zSr,QSr,WSr,Y4,HSr,jr,Vx,USr,RMe,JSr,YSr,un,KSr,PMe,ZSr,eRr,BMe,oRr,rRr,NMe,tRr,aRr,nRr,de,K4,IMe,sRr,lRr,VK,iRr,dRr,cRr,Z4,qMe,fRr,mRr,XK,gRr,hRr,pRr,eE,jMe,_Rr,uRr,zK,bRr,vRr,FRr,oE,DMe,TRr,MRr,QK,ERr,CRr,wRr,rE,GMe,ARr,LRr,WK,yRr,xRr,$Rr,tE,OMe,kRr,SRr,HK,RRr,PRr,BRr,aE,VMe,NRr,IRr,UK,qRr,jRr,DRr,nE,XMe,GRr,ORr,JK,VRr,XRr,zRr,sE,zMe,QRr,WRr,YK,HRr,URr,JRr,lE,QMe,YRr,KRr,KK,ZRr,ePr,oPr,iE,WMe,rPr,tPr,ZK,aPr,nPr,sPr,dE,HMe,lPr,iPr,eZ,dPr,cPr,fPr,cE,UMe,mPr,gPr,oZ,hPr,pPr,_Pr,fE,JMe,uPr,bPr,rZ,vPr,FPr,TPr,mE,YMe,MPr,EPr,tZ,CPr,wPr,APr,gE,KMe,LPr,yPr,aZ,xPr,$Pr,kPr,hE,ZMe,SPr,RPr,nZ,PPr,BPr,NPr,pE,e4e,IPr,qPr,sZ,jPr,DPr,GPr,_E,o4e,OPr,VPr,lZ,XPr,zPr,QPr,uE,r4e,WPr,HPr,iZ,UPr,JPr,YPr,bE,uze,qc,vE,t4e,Xx,KPr,a4e,ZPr,bze,mr,zx,eBr,jc,oBr,dZ,rBr,tBr,cZ,aBr,nBr,sBr,Qx,lBr,n4e,iBr,dBr,cBr,Vt,Wx,fBr,s4e,mBr,gBr,Dc,hBr,l4e,pBr,_Br,fZ,uBr,bBr,vBr,FE,FBr,Dr,Hx,TBr,i4e,MBr,EBr,bn,CBr,d4e,wBr,ABr,c4e,LBr,yBr,f4e,xBr,$Br,kBr,ce,TE,m4e,SBr,RBr,mZ,PBr,BBr,NBr,ME,g4e,IBr,qBr,gZ,jBr,DBr,GBr,EE,h4e,OBr,VBr,hZ,XBr,zBr,QBr,CE,p4e,WBr,HBr,pZ,UBr,JBr,YBr,wE,_4e,KBr,ZBr,_Z,eNr,oNr,rNr,AE,u4e,tNr,aNr,uZ,nNr,sNr,lNr,LE,b4e,iNr,dNr,bZ,cNr,fNr,mNr,yE,v4e,gNr,hNr,vZ,pNr,_Nr,uNr,xE,F4e,bNr,vNr,FZ,FNr,TNr,MNr,$E,T4e,ENr,CNr,TZ,wNr,ANr,LNr,kE,M4e,yNr,xNr,MZ,$Nr,kNr,SNr,SE,E4e,RNr,PNr,EZ,BNr,NNr,INr,RE,C4e,qNr,jNr,CZ,DNr,GNr,ONr,PE,w4e,VNr,XNr,wZ,zNr,QNr,WNr,BE,A4e,HNr,UNr,AZ,JNr,YNr,KNr,NE,L4e,ZNr,eIr,LZ,oIr,rIr,tIr,IE,y4e,aIr,nIr,yZ,sIr,lIr,iIr,qE,x4e,dIr,cIr,xZ,fIr,mIr,gIr,jE,$4e,hIr,pIr,$Z,_Ir,uIr,bIr,DE,k4e,vIr,FIr,kZ,TIr,MIr,EIr,GE,vze,Gc,OE,S4e,Ux,CIr,R4e,wIr,Fze,gr,Jx,AIr,Oc,LIr,SZ,yIr,xIr,RZ,$Ir,kIr,SIr,Yx,RIr,P4e,PIr,BIr,NIr,Xt,Kx,IIr,B4e,qIr,jIr,Vc,DIr,N4e,GIr,OIr,PZ,VIr,XIr,zIr,VE,QIr,Gr,Zx,WIr,I4e,HIr,UIr,vn,JIr,q4e,YIr,KIr,j4e,ZIr,eqr,D4e,oqr,rqr,tqr,G4e,XE,O4e,aqr,nqr,BZ,sqr,lqr,iqr,zE,Tze,Xc,QE,V4e,e$,dqr,X4e,cqr,Mze,hr,o$,fqr,zc,mqr,NZ,gqr,hqr,IZ,pqr,_qr,uqr,r$,bqr,z4e,vqr,Fqr,Tqr,zt,t$,Mqr,Q4e,Eqr,Cqr,Qc,wqr,W4e,Aqr,Lqr,qZ,yqr,xqr,$qr,WE,kqr,Or,a$,Sqr,H4e,Rqr,Pqr,Fn,Bqr,U4e,Nqr,Iqr,J4e,qqr,jqr,Y4e,Dqr,Gqr,Oqr,K4e,HE,Z4e,Vqr,Xqr,jZ,zqr,Qqr,Wqr,UE,Eze,Wc,JE,eEe,n$,Hqr,oEe,Uqr,Cze,pr,s$,Jqr,Hc,Yqr,DZ,Kqr,Zqr,GZ,ejr,ojr,rjr,l$,tjr,rEe,ajr,njr,sjr,Qt,i$,ljr,tEe,ijr,djr,Uc,cjr,aEe,fjr,mjr,OZ,gjr,hjr,pjr,YE,_jr,Vr,d$,ujr,nEe,bjr,vjr,Tn,Fjr,sEe,Tjr,Mjr,lEe,Ejr,Cjr,iEe,wjr,Ajr,Ljr,oe,KE,dEe,yjr,xjr,VZ,$jr,kjr,Sjr,ZE,cEe,Rjr,Pjr,XZ,Bjr,Njr,Ijr,eC,fEe,qjr,jjr,zZ,Djr,Gjr,Ojr,oC,mEe,Vjr,Xjr,QZ,zjr,Qjr,Wjr,rC,gEe,Hjr,Ujr,WZ,Jjr,Yjr,Kjr,tC,hEe,Zjr,eDr,HZ,oDr,rDr,tDr,aC,pEe,aDr,nDr,UZ,sDr,lDr,iDr,nC,_Ee,dDr,cDr,JZ,fDr,mDr,gDr,sC,uEe,hDr,pDr,YZ,_Dr,uDr,bDr,lC,bEe,vDr,FDr,KZ,TDr,MDr,EDr,iC,vEe,CDr,wDr,ZZ,ADr,LDr,yDr,dC,FEe,xDr,$Dr,eee,kDr,SDr,RDr,cC,TEe,PDr,BDr,oee,NDr,IDr,qDr,fC,MEe,jDr,DDr,ree,GDr,ODr,VDr,mC,EEe,XDr,zDr,tee,QDr,WDr,HDr,gC,CEe,UDr,JDr,aee,YDr,KDr,ZDr,hC,wEe,eGr,oGr,nee,rGr,tGr,aGr,pC,AEe,nGr,sGr,see,lGr,iGr,dGr,_C,LEe,cGr,fGr,lee,mGr,gGr,hGr,uC,yEe,pGr,_Gr,iee,uGr,bGr,vGr,bC,xEe,FGr,TGr,dee,MGr,EGr,CGr,vC,$Ee,wGr,AGr,cee,LGr,yGr,xGr,FC,kEe,$Gr,kGr,fee,SGr,RGr,PGr,TC,SEe,BGr,NGr,mee,IGr,qGr,jGr,MC,REe,DGr,GGr,gee,OGr,VGr,XGr,EC,PEe,zGr,QGr,hee,WGr,HGr,UGr,CC,BEe,JGr,YGr,pee,KGr,ZGr,eOr,wC,wze,Jc,AC,NEe,c$,oOr,IEe,rOr,Aze,_r,f$,tOr,Yc,aOr,_ee,nOr,sOr,uee,lOr,iOr,dOr,m$,cOr,qEe,fOr,mOr,gOr,Wt,g$,hOr,jEe,pOr,_Or,Kc,uOr,DEe,bOr,vOr,bee,FOr,TOr,MOr,LC,EOr,Xr,h$,COr,GEe,wOr,AOr,Mn,LOr,OEe,yOr,xOr,VEe,$Or,kOr,XEe,SOr,ROr,POr,xe,yC,zEe,BOr,NOr,vee,IOr,qOr,jOr,xC,QEe,DOr,GOr,Fee,OOr,VOr,XOr,$C,WEe,zOr,QOr,Tee,WOr,HOr,UOr,kC,HEe,JOr,YOr,Mee,KOr,ZOr,eVr,SC,UEe,oVr,rVr,Eee,tVr,aVr,nVr,RC,JEe,sVr,lVr,Cee,iVr,dVr,cVr,PC,YEe,fVr,mVr,wee,gVr,hVr,pVr,BC,KEe,_Vr,uVr,Aee,bVr,vVr,FVr,NC,ZEe,TVr,MVr,Lee,EVr,CVr,wVr,IC,eCe,AVr,LVr,yee,yVr,xVr,$Vr,qC,Lze,Zc,jC,oCe,p$,kVr,rCe,SVr,yze,ur,_$,RVr,ef,PVr,xee,BVr,NVr,$ee,IVr,qVr,jVr,u$,DVr,tCe,GVr,OVr,VVr,Ht,b$,XVr,aCe,zVr,QVr,of,WVr,nCe,HVr,UVr,kee,JVr,YVr,KVr,DC,ZVr,zr,v$,eXr,sCe,oXr,rXr,En,tXr,lCe,aXr,nXr,iCe,sXr,lXr,dCe,iXr,dXr,cXr,Ee,GC,cCe,fXr,mXr,See,gXr,hXr,pXr,OC,fCe,_Xr,uXr,Ree,bXr,vXr,FXr,VC,mCe,TXr,MXr,Pee,EXr,CXr,wXr,XC,gCe,AXr,LXr,Bee,yXr,xXr,$Xr,zC,hCe,kXr,SXr,Nee,RXr,PXr,BXr,QC,pCe,NXr,IXr,Iee,qXr,jXr,DXr,WC,_Ce,GXr,OXr,qee,VXr,XXr,zXr,HC,uCe,QXr,WXr,jee,HXr,UXr,JXr,UC,bCe,YXr,KXr,Dee,ZXr,ezr,ozr,JC,vCe,rzr,tzr,Gee,azr,nzr,szr,YC,FCe,lzr,izr,Oee,dzr,czr,fzr,KC,TCe,mzr,gzr,Vee,hzr,pzr,_zr,ZC,MCe,uzr,bzr,Xee,vzr,Fzr,Tzr,e3,xze,rf,o3,ECe,F$,Mzr,CCe,Ezr,$ze,br,T$,Czr,tf,wzr,zee,Azr,Lzr,Qee,yzr,xzr,$zr,M$,kzr,wCe,Szr,Rzr,Pzr,Ut,E$,Bzr,ACe,Nzr,Izr,af,qzr,LCe,jzr,Dzr,Wee,Gzr,Ozr,Vzr,r3,Xzr,Qr,C$,zzr,yCe,Qzr,Wzr,Cn,Hzr,xCe,Uzr,Jzr,$Ce,Yzr,Kzr,kCe,Zzr,eQr,oQr,$e,t3,SCe,rQr,tQr,Hee,aQr,nQr,sQr,a3,RCe,lQr,iQr,Uee,dQr,cQr,fQr,n3,PCe,mQr,gQr,Jee,hQr,pQr,_Qr,s3,BCe,uQr,bQr,Yee,vQr,FQr,TQr,l3,NCe,MQr,EQr,Kee,CQr,wQr,AQr,i3,ICe,LQr,yQr,Zee,xQr,$Qr,kQr,d3,qCe,SQr,RQr,eoe,PQr,BQr,NQr,c3,jCe,IQr,qQr,ooe,jQr,DQr,GQr,f3,DCe,OQr,VQr,roe,XQr,zQr,QQr,m3,GCe,WQr,HQr,toe,UQr,JQr,YQr,g3,kze,nf,h3,OCe,w$,KQr,VCe,ZQr,Sze,vr,A$,eWr,sf,oWr,aoe,rWr,tWr,noe,aWr,nWr,sWr,L$,lWr,XCe,iWr,dWr,cWr,Jt,y$,fWr,zCe,mWr,gWr,lf,hWr,QCe,pWr,_Wr,soe,uWr,bWr,vWr,p3,FWr,Wr,x$,TWr,WCe,MWr,EWr,wn,CWr,HCe,wWr,AWr,UCe,LWr,yWr,JCe,xWr,$Wr,kWr,ke,_3,YCe,SWr,RWr,loe,PWr,BWr,NWr,u3,KCe,IWr,qWr,ioe,jWr,DWr,GWr,b3,ZCe,OWr,VWr,doe,XWr,zWr,QWr,v3,e3e,WWr,HWr,coe,UWr,JWr,YWr,F3,o3e,KWr,ZWr,foe,eHr,oHr,rHr,T3,r3e,tHr,aHr,moe,nHr,sHr,lHr,M3,t3e,iHr,dHr,goe,cHr,fHr,mHr,E3,a3e,gHr,hHr,hoe,pHr,_Hr,uHr,C3,n3e,bHr,vHr,poe,FHr,THr,MHr,w3,s3e,EHr,CHr,_oe,wHr,AHr,LHr,A3,Rze,df,L3,l3e,$$,yHr,i3e,xHr,Pze,Fr,k$,$Hr,cf,kHr,uoe,SHr,RHr,boe,PHr,BHr,NHr,S$,IHr,d3e,qHr,jHr,DHr,Yt,R$,GHr,c3e,OHr,VHr,ff,XHr,f3e,zHr,QHr,voe,WHr,HHr,UHr,y3,JHr,Hr,P$,YHr,m3e,KHr,ZHr,An,eUr,g3e,oUr,rUr,h3e,tUr,aUr,p3e,nUr,sUr,lUr,Se,x3,_3e,iUr,dUr,Foe,cUr,fUr,mUr,$3,u3e,gUr,hUr,Toe,pUr,_Ur,uUr,k3,b3e,bUr,vUr,Moe,FUr,TUr,MUr,S3,v3e,EUr,CUr,Eoe,wUr,AUr,LUr,R3,F3e,yUr,xUr,Coe,$Ur,kUr,SUr,P3,T3e,RUr,PUr,woe,BUr,NUr,IUr,B3,M3e,qUr,jUr,Aoe,DUr,GUr,OUr,N3,E3e,VUr,XUr,Loe,zUr,QUr,WUr,I3,C3e,HUr,UUr,yoe,JUr,YUr,KUr,q3,w3e,ZUr,eJr,xoe,oJr,rJr,tJr,j3,Bze,mf,D3,A3e,B$,aJr,L3e,nJr,Nze,Tr,N$,sJr,gf,lJr,$oe,iJr,dJr,koe,cJr,fJr,mJr,I$,gJr,y3e,hJr,pJr,_Jr,Kt,q$,uJr,x3e,bJr,vJr,hf,FJr,$3e,TJr,MJr,Soe,EJr,CJr,wJr,G3,AJr,Ur,j$,LJr,k3e,yJr,xJr,Ln,$Jr,S3e,kJr,SJr,R3e,RJr,PJr,P3e,BJr,NJr,IJr,Re,O3,B3e,qJr,jJr,Roe,DJr,GJr,OJr,V3,N3e,VJr,XJr,Poe,zJr,QJr,WJr,X3,I3e,HJr,UJr,Boe,JJr,YJr,KJr,z3,q3e,ZJr,eYr,Noe,oYr,rYr,tYr,Q3,j3e,aYr,nYr,Ioe,sYr,lYr,iYr,W3,D3e,dYr,cYr,qoe,fYr,mYr,gYr,H3,G3e,hYr,pYr,joe,_Yr,uYr,bYr,U3,O3e,vYr,FYr,Doe,TYr,MYr,EYr,J3,V3e,CYr,wYr,Goe,AYr,LYr,yYr,Y3,X3e,xYr,$Yr,Ooe,kYr,SYr,RYr,K3,Ize,pf,Z3,z3e,D$,PYr,Q3e,BYr,qze,Mr,G$,NYr,_f,IYr,Voe,qYr,jYr,Xoe,DYr,GYr,OYr,O$,VYr,W3e,XYr,zYr,QYr,Zt,V$,WYr,H3e,HYr,UYr,uf,JYr,U3e,YYr,KYr,zoe,ZYr,eKr,oKr,ew,rKr,Jr,X$,tKr,J3e,aKr,nKr,yn,sKr,Y3e,lKr,iKr,K3e,dKr,cKr,Z3e,fKr,mKr,gKr,Ve,ow,ewe,hKr,pKr,Qoe,_Kr,uKr,bKr,rw,owe,vKr,FKr,Woe,TKr,MKr,EKr,tw,rwe,CKr,wKr,Hoe,AKr,LKr,yKr,aw,twe,xKr,$Kr,Uoe,kKr,SKr,RKr,nw,awe,PKr,BKr,Joe,NKr,IKr,qKr,sw,nwe,jKr,DKr,Yoe,GKr,OKr,VKr,lw,swe,XKr,zKr,Koe,QKr,WKr,HKr,iw,lwe,UKr,JKr,Zoe,YKr,KKr,ZKr,dw,jze,bf,cw,iwe,z$,eZr,dwe,oZr,Dze,Er,Q$,rZr,vf,tZr,ere,aZr,nZr,ore,sZr,lZr,iZr,W$,dZr,cwe,cZr,fZr,mZr,ea,H$,gZr,fwe,hZr,pZr,Ff,_Zr,mwe,uZr,bZr,rre,vZr,FZr,TZr,fw,MZr,Yr,U$,EZr,gwe,CZr,wZr,xn,AZr,hwe,LZr,yZr,pwe,xZr,$Zr,_we,kZr,SZr,RZr,Xe,mw,uwe,PZr,BZr,tre,NZr,IZr,qZr,gw,bwe,jZr,DZr,are,GZr,OZr,VZr,hw,vwe,XZr,zZr,nre,QZr,WZr,HZr,pw,Fwe,UZr,JZr,sre,YZr,KZr,ZZr,_w,Twe,eet,oet,lre,ret,tet,aet,uw,Mwe,net,set,ire,iet,det,cet,bw,Ewe,fet,met,dre,get,het,pet,vw,Cwe,_et,uet,cre,bet,vet,Fet,Fw,Gze,Tf,Tw,wwe,J$,Tet,Awe,Met,Oze,Cr,Y$,Eet,Mf,Cet,fre,wet,Aet,mre,Let,yet,xet,K$,$et,Lwe,ket,Set,Ret,oa,Z$,Pet,ywe,Bet,Net,Ef,Iet,xwe,qet,jet,gre,Det,Get,Oet,Mw,Vet,Kr,ek,Xet,$we,zet,Qet,$n,Wet,kwe,Het,Uet,Swe,Jet,Yet,Rwe,Ket,Zet,eot,Pwe,Ew,Bwe,oot,rot,hre,tot,aot,not,Cw,Vze,Cf,ww,Nwe,ok,sot,Iwe,lot,Xze,wr,rk,iot,wf,dot,pre,cot,fot,_re,mot,got,hot,tk,pot,qwe,_ot,uot,bot,ra,ak,vot,jwe,Fot,Tot,Af,Mot,Dwe,Eot,Cot,ure,wot,Aot,Lot,Aw,yot,Zr,nk,xot,Gwe,$ot,kot,kn,Sot,Owe,Rot,Pot,Vwe,Bot,Not,Xwe,Iot,qot,jot,sk,Lw,zwe,Dot,Got,bre,Oot,Vot,Xot,yw,Qwe,zot,Qot,vre,Wot,Hot,Uot,xw,zze,Lf,$w,Wwe,lk,Jot,Hwe,Yot,Qze,Ar,ik,Kot,yf,Zot,Fre,ert,ort,Tre,rrt,trt,art,dk,nrt,Uwe,srt,lrt,irt,ta,ck,drt,Jwe,crt,frt,xf,mrt,Ywe,grt,hrt,Mre,prt,_rt,urt,kw,brt,et,fk,vrt,Kwe,Frt,Trt,Sn,Mrt,Zwe,Ert,Crt,eAe,wrt,Art,oAe,Lrt,yrt,xrt,rAe,Sw,tAe,$rt,krt,Ere,Srt,Rrt,Prt,Rw,Wze;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),r7=new re({}),t7=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Brt({props:{warning:!0,$$slots:{default:[dQt]},$$scope:{ctx:$}}}),a7=new re({}),n7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/configuration_auto.py#L610"}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/configuration_auto.py#L633"}}),Jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[cQt]},$$scope:{ctx:$}}}),d7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/configuration_auto.py#L756"}}),c7=new re({}),f7=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/tokenization_auto.py#L403"}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18059/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/tokenization_auto.py#L417"}}),Sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[fQt]},$$scope:{ctx:$}}}),p7=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/tokenization_auto.py#L616"}}),_7=new re({}),u7=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18059/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),pp=new Brt({props:{$$slots:{default:[mQt]},$$scope:{ctx:$}}}),_p=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[gQt]},$$scope:{ctx:$}}}),T7=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),M7=new re({}),E7=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/processing_auto.py#L89"}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/processing_auto.py#L103"}}),Ip=new Brt({props:{$$slots:{default:[hQt]},$$scope:{ctx:$}}}),qp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),L7=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/processing_auto.py#L256"}}),y7=new re({}),x7=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L782"}}),k7=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Gp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[uQt]},$$scope:{ctx:$}}}),R7=new re({}),P7=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L789"}}),N7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Wu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vQt]},$$scope:{ctx:$}}}),q7=new re({}),j7=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L804"}}),G7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),V7=new re({}),X7=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L811"}}),Q7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),bb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),H7=new re({}),U7=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L818"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),Z7=new re({}),eL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L827"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L872"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L879"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L865"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L836"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L843"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L888"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L927"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L854"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L934"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L957"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L941"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L948"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L966"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L973"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L920"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L895"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L902"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),t8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_auto.py#L911"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),u8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),m9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),h9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),q9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),D9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),B$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18059/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18059/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18059/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),K6=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),Z6=o("AutoConfig"),Bn=o(", "),Nn=a("a"),e7=o("AutoModel"),$i=o(`, and
`),In=a("a"),o7=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),SS=o("will create a model that is an instance of "),Si=a("a"),RS=o("BertModel"),PS=o("."),Co=l(),Ra=a("p"),BS=o("There is one class of "),Nf=a("code"),NS=o("AutoModel"),tHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),OVe=l(),Ri=a("h2"),If=a("a"),bae=a("span"),F(r7.$$.fragment),aHe=l(),vae=a("span"),nHe=o("Extending the Auto Classes"),VVe=l(),qn=a("p"),sHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=a("code"),lHe=o("NewModel"),iHe=o(", make sure you have a "),Tae=a("code"),dHe=o("NewModelConfig"),cHe=o(` then you can add those to the auto
classes like this:`),XVe=l(),F(t7.$$.fragment),zVe=l(),IS=a("p"),fHe=o("You will then be able to use the auto classes like you would usually do!"),QVe=l(),F(qf.$$.fragment),WVe=l(),Pi=a("h2"),jf=a("a"),Mae=a("span"),F(a7.$$.fragment),mHe=l(),Eae=a("span"),gHe=o("AutoConfig"),HVe=l(),wo=a("div"),F(n7.$$.fragment),hHe=l(),s7=a("p"),pHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qS=a("a"),_He=o("from_pretrained()"),uHe=o(" class method."),bHe=l(),l7=a("p"),vHe=o("This class cannot be instantiated directly using "),Cae=a("code"),FHe=o("__init__()"),THe=o(" (throws an error)."),MHe=l(),Lr=a("div"),F(i7.$$.fragment),EHe=l(),wae=a("p"),CHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),wHe=l(),Bi=a("p"),AHe=o("The configuration class to instantiate is selected based on the "),Aae=a("code"),LHe=o("model_type"),yHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=a("code"),xHe=o("pretrained_model_name_or_path"),$He=o(":"),kHe=l(),A=a("ul"),Df=a("li"),yae=a("strong"),SHe=o("albert"),RHe=o(" \u2014 "),jS=a("a"),PHe=o("AlbertConfig"),BHe=o(" (ALBERT model)"),NHe=l(),Gf=a("li"),xae=a("strong"),IHe=o("bart"),qHe=o(" \u2014 "),DS=a("a"),jHe=o("BartConfig"),DHe=o(" (BART model)"),GHe=l(),Of=a("li"),$ae=a("strong"),OHe=o("beit"),VHe=o(" \u2014 "),GS=a("a"),XHe=o("BeitConfig"),zHe=o(" (BEiT model)"),QHe=l(),Vf=a("li"),kae=a("strong"),WHe=o("bert"),HHe=o(" \u2014 "),OS=a("a"),UHe=o("BertConfig"),JHe=o(" (BERT model)"),YHe=l(),Xf=a("li"),Sae=a("strong"),KHe=o("bert-generation"),ZHe=o(" \u2014 "),VS=a("a"),eUe=o("BertGenerationConfig"),oUe=o(" (Bert Generation model)"),rUe=l(),zf=a("li"),Rae=a("strong"),tUe=o("big_bird"),aUe=o(" \u2014 "),XS=a("a"),nUe=o("BigBirdConfig"),sUe=o(" (BigBird model)"),lUe=l(),Qf=a("li"),Pae=a("strong"),iUe=o("bigbird_pegasus"),dUe=o(" \u2014 "),zS=a("a"),cUe=o("BigBirdPegasusConfig"),fUe=o(" (BigBird-Pegasus model)"),mUe=l(),Wf=a("li"),Bae=a("strong"),gUe=o("blenderbot"),hUe=o(" \u2014 "),QS=a("a"),pUe=o("BlenderbotConfig"),_Ue=o(" (Blenderbot model)"),uUe=l(),Hf=a("li"),Nae=a("strong"),bUe=o("blenderbot-small"),vUe=o(" \u2014 "),WS=a("a"),FUe=o("BlenderbotSmallConfig"),TUe=o(" (BlenderbotSmall model)"),MUe=l(),Uf=a("li"),Iae=a("strong"),EUe=o("bloom"),CUe=o(" \u2014 "),HS=a("a"),wUe=o("BloomConfig"),AUe=o(" (BLOOM model)"),LUe=l(),Jf=a("li"),qae=a("strong"),yUe=o("camembert"),xUe=o(" \u2014 "),US=a("a"),$Ue=o("CamembertConfig"),kUe=o(" (CamemBERT model)"),SUe=l(),Yf=a("li"),jae=a("strong"),RUe=o("canine"),PUe=o(" \u2014 "),JS=a("a"),BUe=o("CanineConfig"),NUe=o(" (CANINE model)"),IUe=l(),Kf=a("li"),Dae=a("strong"),qUe=o("clip"),jUe=o(" \u2014 "),YS=a("a"),DUe=o("CLIPConfig"),GUe=o(" (CLIP model)"),OUe=l(),Zf=a("li"),Gae=a("strong"),VUe=o("codegen"),XUe=o(" \u2014 "),KS=a("a"),zUe=o("CodeGenConfig"),QUe=o(" (CodeGen model)"),WUe=l(),em=a("li"),Oae=a("strong"),HUe=o("convbert"),UUe=o(" \u2014 "),ZS=a("a"),JUe=o("ConvBertConfig"),YUe=o(" (ConvBERT model)"),KUe=l(),om=a("li"),Vae=a("strong"),ZUe=o("convnext"),eJe=o(" \u2014 "),eR=a("a"),oJe=o("ConvNextConfig"),rJe=o(" (ConvNeXT model)"),tJe=l(),rm=a("li"),Xae=a("strong"),aJe=o("ctrl"),nJe=o(" \u2014 "),oR=a("a"),sJe=o("CTRLConfig"),lJe=o(" (CTRL model)"),iJe=l(),tm=a("li"),zae=a("strong"),dJe=o("cvt"),cJe=o(" \u2014 "),rR=a("a"),fJe=o("CvtConfig"),mJe=o(" (CvT model)"),gJe=l(),am=a("li"),Qae=a("strong"),hJe=o("data2vec-audio"),pJe=o(" \u2014 "),tR=a("a"),_Je=o("Data2VecAudioConfig"),uJe=o(" (Data2VecAudio model)"),bJe=l(),nm=a("li"),Wae=a("strong"),vJe=o("data2vec-text"),FJe=o(" \u2014 "),aR=a("a"),TJe=o("Data2VecTextConfig"),MJe=o(" (Data2VecText model)"),EJe=l(),sm=a("li"),Hae=a("strong"),CJe=o("data2vec-vision"),wJe=o(" \u2014 "),nR=a("a"),AJe=o("Data2VecVisionConfig"),LJe=o(" (Data2VecVision model)"),yJe=l(),lm=a("li"),Uae=a("strong"),xJe=o("deberta"),$Je=o(" \u2014 "),sR=a("a"),kJe=o("DebertaConfig"),SJe=o(" (DeBERTa model)"),RJe=l(),im=a("li"),Jae=a("strong"),PJe=o("deberta-v2"),BJe=o(" \u2014 "),lR=a("a"),NJe=o("DebertaV2Config"),IJe=o(" (DeBERTa-v2 model)"),qJe=l(),dm=a("li"),Yae=a("strong"),jJe=o("decision_transformer"),DJe=o(" \u2014 "),iR=a("a"),GJe=o("DecisionTransformerConfig"),OJe=o(" (Decision Transformer model)"),VJe=l(),cm=a("li"),Kae=a("strong"),XJe=o("deit"),zJe=o(" \u2014 "),dR=a("a"),QJe=o("DeiTConfig"),WJe=o(" (DeiT model)"),HJe=l(),fm=a("li"),Zae=a("strong"),UJe=o("detr"),JJe=o(" \u2014 "),cR=a("a"),YJe=o("DetrConfig"),KJe=o(" (DETR model)"),ZJe=l(),mm=a("li"),ene=a("strong"),eYe=o("distilbert"),oYe=o(" \u2014 "),fR=a("a"),rYe=o("DistilBertConfig"),tYe=o(" (DistilBERT model)"),aYe=l(),gm=a("li"),one=a("strong"),nYe=o("dpr"),sYe=o(" \u2014 "),mR=a("a"),lYe=o("DPRConfig"),iYe=o(" (DPR model)"),dYe=l(),hm=a("li"),rne=a("strong"),cYe=o("dpt"),fYe=o(" \u2014 "),gR=a("a"),mYe=o("DPTConfig"),gYe=o(" (DPT model)"),hYe=l(),pm=a("li"),tne=a("strong"),pYe=o("electra"),_Ye=o(" \u2014 "),hR=a("a"),uYe=o("ElectraConfig"),bYe=o(" (ELECTRA model)"),vYe=l(),_m=a("li"),ane=a("strong"),FYe=o("encoder-decoder"),TYe=o(" \u2014 "),pR=a("a"),MYe=o("EncoderDecoderConfig"),EYe=o(" (Encoder decoder model)"),CYe=l(),um=a("li"),nne=a("strong"),wYe=o("flaubert"),AYe=o(" \u2014 "),_R=a("a"),LYe=o("FlaubertConfig"),yYe=o(" (FlauBERT model)"),xYe=l(),bm=a("li"),sne=a("strong"),$Ye=o("flava"),kYe=o(" \u2014 "),uR=a("a"),SYe=o("FlavaConfig"),RYe=o(" (FLAVA model)"),PYe=l(),vm=a("li"),lne=a("strong"),BYe=o("fnet"),NYe=o(" \u2014 "),bR=a("a"),IYe=o("FNetConfig"),qYe=o(" (FNet model)"),jYe=l(),Fm=a("li"),ine=a("strong"),DYe=o("fsmt"),GYe=o(" \u2014 "),vR=a("a"),OYe=o("FSMTConfig"),VYe=o(" (FairSeq Machine-Translation model)"),XYe=l(),Tm=a("li"),dne=a("strong"),zYe=o("funnel"),QYe=o(" \u2014 "),FR=a("a"),WYe=o("FunnelConfig"),HYe=o(" (Funnel Transformer model)"),UYe=l(),Mm=a("li"),cne=a("strong"),JYe=o("glpn"),YYe=o(" \u2014 "),TR=a("a"),KYe=o("GLPNConfig"),ZYe=o(" (GLPN model)"),eKe=l(),Em=a("li"),fne=a("strong"),oKe=o("gpt2"),rKe=o(" \u2014 "),MR=a("a"),tKe=o("GPT2Config"),aKe=o(" (OpenAI GPT-2 model)"),nKe=l(),Cm=a("li"),mne=a("strong"),sKe=o("gpt_neo"),lKe=o(" \u2014 "),ER=a("a"),iKe=o("GPTNeoConfig"),dKe=o(" (GPT Neo model)"),cKe=l(),wm=a("li"),gne=a("strong"),fKe=o("gpt_neox"),mKe=o(" \u2014 "),CR=a("a"),gKe=o("GPTNeoXConfig"),hKe=o(" (GPT NeoX model)"),pKe=l(),Am=a("li"),hne=a("strong"),_Ke=o("gptj"),uKe=o(" \u2014 "),wR=a("a"),bKe=o("GPTJConfig"),vKe=o(" (GPT-J model)"),FKe=l(),Lm=a("li"),pne=a("strong"),TKe=o("groupvit"),MKe=o(" \u2014 "),AR=a("a"),EKe=o("GroupViTConfig"),CKe=o(" (GroupViT model)"),wKe=l(),ym=a("li"),_ne=a("strong"),AKe=o("hubert"),LKe=o(" \u2014 "),LR=a("a"),yKe=o("HubertConfig"),xKe=o(" (Hubert model)"),$Ke=l(),xm=a("li"),une=a("strong"),kKe=o("ibert"),SKe=o(" \u2014 "),yR=a("a"),RKe=o("IBertConfig"),PKe=o(" (I-BERT model)"),BKe=l(),$m=a("li"),bne=a("strong"),NKe=o("imagegpt"),IKe=o(" \u2014 "),xR=a("a"),qKe=o("ImageGPTConfig"),jKe=o(" (ImageGPT model)"),DKe=l(),km=a("li"),vne=a("strong"),GKe=o("layoutlm"),OKe=o(" \u2014 "),$R=a("a"),VKe=o("LayoutLMConfig"),XKe=o(" (LayoutLM model)"),zKe=l(),Sm=a("li"),Fne=a("strong"),QKe=o("layoutlmv2"),WKe=o(" \u2014 "),kR=a("a"),HKe=o("LayoutLMv2Config"),UKe=o(" (LayoutLMv2 model)"),JKe=l(),Rm=a("li"),Tne=a("strong"),YKe=o("layoutlmv3"),KKe=o(" \u2014 "),SR=a("a"),ZKe=o("LayoutLMv3Config"),eZe=o(" (LayoutLMv3 model)"),oZe=l(),Pm=a("li"),Mne=a("strong"),rZe=o("led"),tZe=o(" \u2014 "),RR=a("a"),aZe=o("LEDConfig"),nZe=o(" (LED model)"),sZe=l(),Bm=a("li"),Ene=a("strong"),lZe=o("levit"),iZe=o(" \u2014 "),PR=a("a"),dZe=o("LevitConfig"),cZe=o(" (LeViT model)"),fZe=l(),Nm=a("li"),Cne=a("strong"),mZe=o("longformer"),gZe=o(" \u2014 "),BR=a("a"),hZe=o("LongformerConfig"),pZe=o(" (Longformer model)"),_Ze=l(),Im=a("li"),wne=a("strong"),uZe=o("longt5"),bZe=o(" \u2014 "),NR=a("a"),vZe=o("LongT5Config"),FZe=o(" (LongT5 model)"),TZe=l(),qm=a("li"),Ane=a("strong"),MZe=o("luke"),EZe=o(" \u2014 "),IR=a("a"),CZe=o("LukeConfig"),wZe=o(" (LUKE model)"),AZe=l(),jm=a("li"),Lne=a("strong"),LZe=o("lxmert"),yZe=o(" \u2014 "),qR=a("a"),xZe=o("LxmertConfig"),$Ze=o(" (LXMERT model)"),kZe=l(),Dm=a("li"),yne=a("strong"),SZe=o("m2m_100"),RZe=o(" \u2014 "),jR=a("a"),PZe=o("M2M100Config"),BZe=o(" (M2M100 model)"),NZe=l(),Gm=a("li"),xne=a("strong"),IZe=o("marian"),qZe=o(" \u2014 "),DR=a("a"),jZe=o("MarianConfig"),DZe=o(" (Marian model)"),GZe=l(),Om=a("li"),$ne=a("strong"),OZe=o("maskformer"),VZe=o(" \u2014 "),GR=a("a"),XZe=o("MaskFormerConfig"),zZe=o(" (MaskFormer model)"),QZe=l(),Vm=a("li"),kne=a("strong"),WZe=o("mbart"),HZe=o(" \u2014 "),OR=a("a"),UZe=o("MBartConfig"),JZe=o(" (mBART model)"),YZe=l(),Xm=a("li"),Sne=a("strong"),KZe=o("mctct"),ZZe=o(" \u2014 "),VR=a("a"),eeo=o("MCTCTConfig"),oeo=o(" (M-CTC-T model)"),reo=l(),zm=a("li"),Rne=a("strong"),teo=o("megatron-bert"),aeo=o(" \u2014 "),XR=a("a"),neo=o("MegatronBertConfig"),seo=o(" (Megatron-BERT model)"),leo=l(),Qm=a("li"),Pne=a("strong"),ieo=o("mobilebert"),deo=o(" \u2014 "),zR=a("a"),ceo=o("MobileBertConfig"),feo=o(" (MobileBERT model)"),meo=l(),Wm=a("li"),Bne=a("strong"),geo=o("mobilevit"),heo=o(" \u2014 "),QR=a("a"),peo=o("MobileViTConfig"),_eo=o(" (MobileViT model)"),ueo=l(),Hm=a("li"),Nne=a("strong"),beo=o("mpnet"),veo=o(" \u2014 "),WR=a("a"),Feo=o("MPNetConfig"),Teo=o(" (MPNet model)"),Meo=l(),Um=a("li"),Ine=a("strong"),Eeo=o("mt5"),Ceo=o(" \u2014 "),HR=a("a"),weo=o("MT5Config"),Aeo=o(" (MT5 model)"),Leo=l(),Jm=a("li"),qne=a("strong"),yeo=o("mvp"),xeo=o(" \u2014 "),UR=a("a"),$eo=o("MvpConfig"),keo=o(" (MVP model)"),Seo=l(),Ym=a("li"),jne=a("strong"),Reo=o("nezha"),Peo=o(" \u2014 "),JR=a("a"),Beo=o("NezhaConfig"),Neo=o(" (Nezha model)"),Ieo=l(),Km=a("li"),Dne=a("strong"),qeo=o("nystromformer"),jeo=o(" \u2014 "),YR=a("a"),Deo=o("NystromformerConfig"),Geo=o(" (Nystr\xF6mformer model)"),Oeo=l(),Zm=a("li"),Gne=a("strong"),Veo=o("openai-gpt"),Xeo=o(" \u2014 "),KR=a("a"),zeo=o("OpenAIGPTConfig"),Qeo=o(" (OpenAI GPT model)"),Weo=l(),eg=a("li"),One=a("strong"),Heo=o("opt"),Ueo=o(" \u2014 "),ZR=a("a"),Jeo=o("OPTConfig"),Yeo=o(" (OPT model)"),Keo=l(),og=a("li"),Vne=a("strong"),Zeo=o("pegasus"),eoo=o(" \u2014 "),eP=a("a"),ooo=o("PegasusConfig"),roo=o(" (Pegasus model)"),too=l(),rg=a("li"),Xne=a("strong"),aoo=o("perceiver"),noo=o(" \u2014 "),oP=a("a"),soo=o("PerceiverConfig"),loo=o(" (Perceiver model)"),ioo=l(),tg=a("li"),zne=a("strong"),doo=o("plbart"),coo=o(" \u2014 "),rP=a("a"),foo=o("PLBartConfig"),moo=o(" (PLBart model)"),goo=l(),ag=a("li"),Qne=a("strong"),hoo=o("poolformer"),poo=o(" \u2014 "),tP=a("a"),_oo=o("PoolFormerConfig"),uoo=o(" (PoolFormer model)"),boo=l(),ng=a("li"),Wne=a("strong"),voo=o("prophetnet"),Foo=o(" \u2014 "),aP=a("a"),Too=o("ProphetNetConfig"),Moo=o(" (ProphetNet model)"),Eoo=l(),sg=a("li"),Hne=a("strong"),Coo=o("qdqbert"),woo=o(" \u2014 "),nP=a("a"),Aoo=o("QDQBertConfig"),Loo=o(" (QDQBert model)"),yoo=l(),lg=a("li"),Une=a("strong"),xoo=o("rag"),$oo=o(" \u2014 "),sP=a("a"),koo=o("RagConfig"),Soo=o(" (RAG model)"),Roo=l(),ig=a("li"),Jne=a("strong"),Poo=o("realm"),Boo=o(" \u2014 "),lP=a("a"),Noo=o("RealmConfig"),Ioo=o(" (REALM model)"),qoo=l(),dg=a("li"),Yne=a("strong"),joo=o("reformer"),Doo=o(" \u2014 "),iP=a("a"),Goo=o("ReformerConfig"),Ooo=o(" (Reformer model)"),Voo=l(),cg=a("li"),Kne=a("strong"),Xoo=o("regnet"),zoo=o(" \u2014 "),dP=a("a"),Qoo=o("RegNetConfig"),Woo=o(" (RegNet model)"),Hoo=l(),fg=a("li"),Zne=a("strong"),Uoo=o("rembert"),Joo=o(" \u2014 "),cP=a("a"),Yoo=o("RemBertConfig"),Koo=o(" (RemBERT model)"),Zoo=l(),mg=a("li"),ese=a("strong"),ero=o("resnet"),oro=o(" \u2014 "),fP=a("a"),rro=o("ResNetConfig"),tro=o(" (ResNet model)"),aro=l(),gg=a("li"),ose=a("strong"),nro=o("retribert"),sro=o(" \u2014 "),mP=a("a"),lro=o("RetriBertConfig"),iro=o(" (RetriBERT model)"),dro=l(),hg=a("li"),rse=a("strong"),cro=o("roberta"),fro=o(" \u2014 "),gP=a("a"),mro=o("RobertaConfig"),gro=o(" (RoBERTa model)"),hro=l(),pg=a("li"),tse=a("strong"),pro=o("roformer"),_ro=o(" \u2014 "),hP=a("a"),uro=o("RoFormerConfig"),bro=o(" (RoFormer model)"),vro=l(),_g=a("li"),ase=a("strong"),Fro=o("segformer"),Tro=o(" \u2014 "),pP=a("a"),Mro=o("SegformerConfig"),Ero=o(" (SegFormer model)"),Cro=l(),ug=a("li"),nse=a("strong"),wro=o("sew"),Aro=o(" \u2014 "),_P=a("a"),Lro=o("SEWConfig"),yro=o(" (SEW model)"),xro=l(),bg=a("li"),sse=a("strong"),$ro=o("sew-d"),kro=o(" \u2014 "),uP=a("a"),Sro=o("SEWDConfig"),Rro=o(" (SEW-D model)"),Pro=l(),vg=a("li"),lse=a("strong"),Bro=o("speech-encoder-decoder"),Nro=o(" \u2014 "),bP=a("a"),Iro=o("SpeechEncoderDecoderConfig"),qro=o(" (Speech Encoder decoder model)"),jro=l(),Fg=a("li"),ise=a("strong"),Dro=o("speech_to_text"),Gro=o(" \u2014 "),vP=a("a"),Oro=o("Speech2TextConfig"),Vro=o(" (Speech2Text model)"),Xro=l(),Tg=a("li"),dse=a("strong"),zro=o("speech_to_text_2"),Qro=o(" \u2014 "),FP=a("a"),Wro=o("Speech2Text2Config"),Hro=o(" (Speech2Text2 model)"),Uro=l(),Mg=a("li"),cse=a("strong"),Jro=o("splinter"),Yro=o(" \u2014 "),TP=a("a"),Kro=o("SplinterConfig"),Zro=o(" (Splinter model)"),eto=l(),Eg=a("li"),fse=a("strong"),oto=o("squeezebert"),rto=o(" \u2014 "),MP=a("a"),tto=o("SqueezeBertConfig"),ato=o(" (SqueezeBERT model)"),nto=l(),Cg=a("li"),mse=a("strong"),sto=o("swin"),lto=o(" \u2014 "),EP=a("a"),ito=o("SwinConfig"),dto=o(" (Swin Transformer model)"),cto=l(),wg=a("li"),gse=a("strong"),fto=o("t5"),mto=o(" \u2014 "),CP=a("a"),gto=o("T5Config"),hto=o(" (T5 model)"),pto=l(),Ag=a("li"),hse=a("strong"),_to=o("tapas"),uto=o(" \u2014 "),wP=a("a"),bto=o("TapasConfig"),vto=o(" (TAPAS model)"),Fto=l(),Lg=a("li"),pse=a("strong"),Tto=o("trajectory_transformer"),Mto=o(" \u2014 "),AP=a("a"),Eto=o("TrajectoryTransformerConfig"),Cto=o(" (Trajectory Transformer model)"),wto=l(),yg=a("li"),_se=a("strong"),Ato=o("transfo-xl"),Lto=o(" \u2014 "),LP=a("a"),yto=o("TransfoXLConfig"),xto=o(" (Transformer-XL model)"),$to=l(),xg=a("li"),use=a("strong"),kto=o("trocr"),Sto=o(" \u2014 "),yP=a("a"),Rto=o("TrOCRConfig"),Pto=o(" (TrOCR model)"),Bto=l(),$g=a("li"),bse=a("strong"),Nto=o("unispeech"),Ito=o(" \u2014 "),xP=a("a"),qto=o("UniSpeechConfig"),jto=o(" (UniSpeech model)"),Dto=l(),kg=a("li"),vse=a("strong"),Gto=o("unispeech-sat"),Oto=o(" \u2014 "),$P=a("a"),Vto=o("UniSpeechSatConfig"),Xto=o(" (UniSpeechSat model)"),zto=l(),Sg=a("li"),Fse=a("strong"),Qto=o("van"),Wto=o(" \u2014 "),kP=a("a"),Hto=o("VanConfig"),Uto=o(" (VAN model)"),Jto=l(),Rg=a("li"),Tse=a("strong"),Yto=o("vilt"),Kto=o(" \u2014 "),SP=a("a"),Zto=o("ViltConfig"),eao=o(" (ViLT model)"),oao=l(),Pg=a("li"),Mse=a("strong"),rao=o("vision-encoder-decoder"),tao=o(" \u2014 "),RP=a("a"),aao=o("VisionEncoderDecoderConfig"),nao=o(" (Vision Encoder decoder model)"),sao=l(),Bg=a("li"),Ese=a("strong"),lao=o("vision-text-dual-encoder"),iao=o(" \u2014 "),PP=a("a"),dao=o("VisionTextDualEncoderConfig"),cao=o(" (VisionTextDualEncoder model)"),fao=l(),Ng=a("li"),Cse=a("strong"),mao=o("visual_bert"),gao=o(" \u2014 "),BP=a("a"),hao=o("VisualBertConfig"),pao=o(" (VisualBERT model)"),_ao=l(),Ig=a("li"),wse=a("strong"),uao=o("vit"),bao=o(" \u2014 "),NP=a("a"),vao=o("ViTConfig"),Fao=o(" (ViT model)"),Tao=l(),qg=a("li"),Ase=a("strong"),Mao=o("vit_mae"),Eao=o(" \u2014 "),IP=a("a"),Cao=o("ViTMAEConfig"),wao=o(" (ViTMAE model)"),Aao=l(),jg=a("li"),Lse=a("strong"),Lao=o("wav2vec2"),yao=o(" \u2014 "),qP=a("a"),xao=o("Wav2Vec2Config"),$ao=o(" (Wav2Vec2 model)"),kao=l(),Dg=a("li"),yse=a("strong"),Sao=o("wav2vec2-conformer"),Rao=o(" \u2014 "),jP=a("a"),Pao=o("Wav2Vec2ConformerConfig"),Bao=o(" (Wav2Vec2-Conformer model)"),Nao=l(),Gg=a("li"),xse=a("strong"),Iao=o("wavlm"),qao=o(" \u2014 "),DP=a("a"),jao=o("WavLMConfig"),Dao=o(" (WavLM model)"),Gao=l(),Og=a("li"),$se=a("strong"),Oao=o("xglm"),Vao=o(" \u2014 "),GP=a("a"),Xao=o("XGLMConfig"),zao=o(" (XGLM model)"),Qao=l(),Vg=a("li"),kse=a("strong"),Wao=o("xlm"),Hao=o(" \u2014 "),OP=a("a"),Uao=o("XLMConfig"),Jao=o(" (XLM model)"),Yao=l(),Xg=a("li"),Sse=a("strong"),Kao=o("xlm-prophetnet"),Zao=o(" \u2014 "),VP=a("a"),eno=o("XLMProphetNetConfig"),ono=o(" (XLM-ProphetNet model)"),rno=l(),zg=a("li"),Rse=a("strong"),tno=o("xlm-roberta"),ano=o(" \u2014 "),XP=a("a"),nno=o("XLMRobertaConfig"),sno=o(" (XLM-RoBERTa model)"),lno=l(),Qg=a("li"),Pse=a("strong"),ino=o("xlm-roberta-xl"),dno=o(" \u2014 "),zP=a("a"),cno=o("XLMRobertaXLConfig"),fno=o(" (XLM-RoBERTa-XL model)"),mno=l(),Wg=a("li"),Bse=a("strong"),gno=o("xlnet"),hno=o(" \u2014 "),QP=a("a"),pno=o("XLNetConfig"),_no=o(" (XLNet model)"),uno=l(),Hg=a("li"),Nse=a("strong"),bno=o("yolos"),vno=o(" \u2014 "),WP=a("a"),Fno=o("YolosConfig"),Tno=o(" (YOLOS model)"),Mno=l(),Ug=a("li"),Ise=a("strong"),Eno=o("yoso"),Cno=o(" \u2014 "),HP=a("a"),wno=o("YosoConfig"),Ano=o(" (YOSO model)"),Lno=l(),F(Jg.$$.fragment),yno=l(),Yg=a("div"),F(d7.$$.fragment),xno=l(),qse=a("p"),$no=o("Register a new configuration for this class."),UVe=l(),Ni=a("h2"),Kg=a("a"),jse=a("span"),F(c7.$$.fragment),kno=l(),Dse=a("span"),Sno=o("AutoTokenizer"),JVe=l(),Ao=a("div"),F(f7.$$.fragment),Rno=l(),m7=a("p"),Pno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UP=a("a"),Bno=o("AutoTokenizer.from_pretrained()"),Nno=o(" class method."),Ino=l(),g7=a("p"),qno=o("This class cannot be instantiated directly using "),Gse=a("code"),jno=o("__init__()"),Dno=o(" (throws an error)."),Gno=l(),yr=a("div"),F(h7.$$.fragment),Ono=l(),Ose=a("p"),Vno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Xno=l(),Pa=a("p"),zno=o("The tokenizer class to instantiate is selected based on the "),Vse=a("code"),Qno=o("model_type"),Wno=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),Hno=o("pretrained_model_name_or_path"),Uno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),Jno=o("pretrained_model_name_or_path"),Yno=o(":"),Kno=l(),k=a("ul"),jn=a("li"),Qse=a("strong"),Zno=o("albert"),eso=o(" \u2014 "),JP=a("a"),oso=o("AlbertTokenizer"),rso=o(" or "),YP=a("a"),tso=o("AlbertTokenizerFast"),aso=o(" (ALBERT model)"),nso=l(),Dn=a("li"),Wse=a("strong"),sso=o("bart"),lso=o(" \u2014 "),KP=a("a"),iso=o("BartTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("BartTokenizerFast"),fso=o(" (BART model)"),mso=l(),Gn=a("li"),Hse=a("strong"),gso=o("barthez"),hso=o(" \u2014 "),eB=a("a"),pso=o("BarthezTokenizer"),_so=o(" or "),oB=a("a"),uso=o("BarthezTokenizerFast"),bso=o(" (BARThez model)"),vso=l(),Zg=a("li"),Use=a("strong"),Fso=o("bartpho"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("BartphoTokenizer"),Eso=o(" (BARTpho model)"),Cso=l(),On=a("li"),Jse=a("strong"),wso=o("bert"),Aso=o(" \u2014 "),tB=a("a"),Lso=o("BertTokenizer"),yso=o(" or "),aB=a("a"),xso=o("BertTokenizerFast"),$so=o(" (BERT model)"),kso=l(),eh=a("li"),Yse=a("strong"),Sso=o("bert-generation"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("BertGenerationTokenizer"),Bso=o(" (Bert Generation model)"),Nso=l(),oh=a("li"),Kse=a("strong"),Iso=o("bert-japanese"),qso=o(" \u2014 "),sB=a("a"),jso=o("BertJapaneseTokenizer"),Dso=o(" (BertJapanese model)"),Gso=l(),rh=a("li"),Zse=a("strong"),Oso=o("bertweet"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("BertweetTokenizer"),zso=o(" (BERTweet model)"),Qso=l(),Vn=a("li"),ele=a("strong"),Wso=o("big_bird"),Hso=o(" \u2014 "),iB=a("a"),Uso=o("BigBirdTokenizer"),Jso=o(" or "),dB=a("a"),Yso=o("BigBirdTokenizerFast"),Kso=o(" (BigBird model)"),Zso=l(),Xn=a("li"),ole=a("strong"),elo=o("bigbird_pegasus"),olo=o(" \u2014 "),cB=a("a"),rlo=o("PegasusTokenizer"),tlo=o(" or "),fB=a("a"),alo=o("PegasusTokenizerFast"),nlo=o(" (BigBird-Pegasus model)"),slo=l(),zn=a("li"),rle=a("strong"),llo=o("blenderbot"),ilo=o(" \u2014 "),mB=a("a"),dlo=o("BlenderbotTokenizer"),clo=o(" or "),gB=a("a"),flo=o("BlenderbotTokenizerFast"),mlo=o(" (Blenderbot model)"),glo=l(),th=a("li"),tle=a("strong"),hlo=o("blenderbot-small"),plo=o(" \u2014 "),hB=a("a"),_lo=o("BlenderbotSmallTokenizer"),ulo=o(" (BlenderbotSmall model)"),blo=l(),ah=a("li"),ale=a("strong"),vlo=o("bloom"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("BloomTokenizerFast"),Mlo=o(" (BLOOM model)"),Elo=l(),nh=a("li"),nle=a("strong"),Clo=o("byt5"),wlo=o(" \u2014 "),_B=a("a"),Alo=o("ByT5Tokenizer"),Llo=o(" (ByT5 model)"),ylo=l(),Qn=a("li"),sle=a("strong"),xlo=o("camembert"),$lo=o(" \u2014 "),uB=a("a"),klo=o("CamembertTokenizer"),Slo=o(" or "),bB=a("a"),Rlo=o("CamembertTokenizerFast"),Plo=o(" (CamemBERT model)"),Blo=l(),sh=a("li"),lle=a("strong"),Nlo=o("canine"),Ilo=o(" \u2014 "),vB=a("a"),qlo=o("CanineTokenizer"),jlo=o(" (CANINE model)"),Dlo=l(),Wn=a("li"),ile=a("strong"),Glo=o("clip"),Olo=o(" \u2014 "),FB=a("a"),Vlo=o("CLIPTokenizer"),Xlo=o(" or "),TB=a("a"),zlo=o("CLIPTokenizerFast"),Qlo=o(" (CLIP model)"),Wlo=l(),Hn=a("li"),dle=a("strong"),Hlo=o("codegen"),Ulo=o(" \u2014 "),MB=a("a"),Jlo=o("CodeGenTokenizer"),Ylo=o(" or "),EB=a("a"),Klo=o("CodeGenTokenizerFast"),Zlo=o(" (CodeGen model)"),eio=l(),Un=a("li"),cle=a("strong"),oio=o("convbert"),rio=o(" \u2014 "),CB=a("a"),tio=o("ConvBertTokenizer"),aio=o(" or "),wB=a("a"),nio=o("ConvBertTokenizerFast"),sio=o(" (ConvBERT model)"),lio=l(),Jn=a("li"),fle=a("strong"),iio=o("cpm"),dio=o(" \u2014 "),AB=a("a"),cio=o("CpmTokenizer"),fio=o(" or "),LB=a("a"),mio=o("CpmTokenizerFast"),gio=o(" (CPM model)"),hio=l(),lh=a("li"),mle=a("strong"),pio=o("ctrl"),_io=o(" \u2014 "),yB=a("a"),uio=o("CTRLTokenizer"),bio=o(" (CTRL model)"),vio=l(),Yn=a("li"),gle=a("strong"),Fio=o("data2vec-text"),Tio=o(" \u2014 "),xB=a("a"),Mio=o("RobertaTokenizer"),Eio=o(" or "),$B=a("a"),Cio=o("RobertaTokenizerFast"),wio=o(" (Data2VecText model)"),Aio=l(),Kn=a("li"),hle=a("strong"),Lio=o("deberta"),yio=o(" \u2014 "),kB=a("a"),xio=o("DebertaTokenizer"),$io=o(" or "),SB=a("a"),kio=o("DebertaTokenizerFast"),Sio=o(" (DeBERTa model)"),Rio=l(),Zn=a("li"),ple=a("strong"),Pio=o("deberta-v2"),Bio=o(" \u2014 "),RB=a("a"),Nio=o("DebertaV2Tokenizer"),Iio=o(" or "),PB=a("a"),qio=o("DebertaV2TokenizerFast"),jio=o(" (DeBERTa-v2 model)"),Dio=l(),es=a("li"),_le=a("strong"),Gio=o("distilbert"),Oio=o(" \u2014 "),BB=a("a"),Vio=o("DistilBertTokenizer"),Xio=o(" or "),NB=a("a"),zio=o("DistilBertTokenizerFast"),Qio=o(" (DistilBERT model)"),Wio=l(),os=a("li"),ule=a("strong"),Hio=o("dpr"),Uio=o(" \u2014 "),IB=a("a"),Jio=o("DPRQuestionEncoderTokenizer"),Yio=o(" or "),qB=a("a"),Kio=o("DPRQuestionEncoderTokenizerFast"),Zio=o(" (DPR model)"),edo=l(),rs=a("li"),ble=a("strong"),odo=o("electra"),rdo=o(" \u2014 "),jB=a("a"),tdo=o("ElectraTokenizer"),ado=o(" or "),DB=a("a"),ndo=o("ElectraTokenizerFast"),sdo=o(" (ELECTRA model)"),ldo=l(),ih=a("li"),vle=a("strong"),ido=o("flaubert"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("FlaubertTokenizer"),fdo=o(" (FlauBERT model)"),mdo=l(),ts=a("li"),Fle=a("strong"),gdo=o("fnet"),hdo=o(" \u2014 "),OB=a("a"),pdo=o("FNetTokenizer"),_do=o(" or "),VB=a("a"),udo=o("FNetTokenizerFast"),bdo=o(" (FNet model)"),vdo=l(),dh=a("li"),Tle=a("strong"),Fdo=o("fsmt"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("FSMTTokenizer"),Edo=o(" (FairSeq Machine-Translation model)"),Cdo=l(),as=a("li"),Mle=a("strong"),wdo=o("funnel"),Ado=o(" \u2014 "),zB=a("a"),Ldo=o("FunnelTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("FunnelTokenizerFast"),$do=o(" (Funnel Transformer model)"),kdo=l(),ns=a("li"),Ele=a("strong"),Sdo=o("gpt2"),Rdo=o(" \u2014 "),WB=a("a"),Pdo=o("GPT2Tokenizer"),Bdo=o(" or "),HB=a("a"),Ndo=o("GPT2TokenizerFast"),Ido=o(" (OpenAI GPT-2 model)"),qdo=l(),ss=a("li"),Cle=a("strong"),jdo=o("gpt_neo"),Ddo=o(" \u2014 "),UB=a("a"),Gdo=o("GPT2Tokenizer"),Odo=o(" or "),JB=a("a"),Vdo=o("GPT2TokenizerFast"),Xdo=o(" (GPT Neo model)"),zdo=l(),ch=a("li"),wle=a("strong"),Qdo=o("gpt_neox"),Wdo=o(" \u2014 "),YB=a("a"),Hdo=o("GPTNeoXTokenizerFast"),Udo=o(" (GPT NeoX model)"),Jdo=l(),ls=a("li"),Ale=a("strong"),Ydo=o("gptj"),Kdo=o(" \u2014 "),KB=a("a"),Zdo=o("GPT2Tokenizer"),eco=o(" or "),ZB=a("a"),oco=o("GPT2TokenizerFast"),rco=o(" (GPT-J model)"),tco=l(),is=a("li"),Lle=a("strong"),aco=o("groupvit"),nco=o(" \u2014 "),eN=a("a"),sco=o("CLIPTokenizer"),lco=o(" or "),oN=a("a"),ico=o("CLIPTokenizerFast"),dco=o(" (GroupViT model)"),cco=l(),ds=a("li"),yle=a("strong"),fco=o("herbert"),mco=o(" \u2014 "),rN=a("a"),gco=o("HerbertTokenizer"),hco=o(" or "),tN=a("a"),pco=o("HerbertTokenizerFast"),_co=o(" (HerBERT model)"),uco=l(),fh=a("li"),xle=a("strong"),bco=o("hubert"),vco=o(" \u2014 "),aN=a("a"),Fco=o("Wav2Vec2CTCTokenizer"),Tco=o(" (Hubert model)"),Mco=l(),cs=a("li"),$le=a("strong"),Eco=o("ibert"),Cco=o(" \u2014 "),nN=a("a"),wco=o("RobertaTokenizer"),Aco=o(" or "),sN=a("a"),Lco=o("RobertaTokenizerFast"),yco=o(" (I-BERT model)"),xco=l(),fs=a("li"),kle=a("strong"),$co=o("layoutlm"),kco=o(" \u2014 "),lN=a("a"),Sco=o("LayoutLMTokenizer"),Rco=o(" or "),iN=a("a"),Pco=o("LayoutLMTokenizerFast"),Bco=o(" (LayoutLM model)"),Nco=l(),ms=a("li"),Sle=a("strong"),Ico=o("layoutlmv2"),qco=o(" \u2014 "),dN=a("a"),jco=o("LayoutLMv2Tokenizer"),Dco=o(" or "),cN=a("a"),Gco=o("LayoutLMv2TokenizerFast"),Oco=o(" (LayoutLMv2 model)"),Vco=l(),gs=a("li"),Rle=a("strong"),Xco=o("layoutlmv3"),zco=o(" \u2014 "),fN=a("a"),Qco=o("LayoutLMv3Tokenizer"),Wco=o(" or "),mN=a("a"),Hco=o("LayoutLMv3TokenizerFast"),Uco=o(" (LayoutLMv3 model)"),Jco=l(),hs=a("li"),Ple=a("strong"),Yco=o("layoutxlm"),Kco=o(" \u2014 "),gN=a("a"),Zco=o("LayoutXLMTokenizer"),efo=o(" or "),hN=a("a"),ofo=o("LayoutXLMTokenizerFast"),rfo=o(" (LayoutXLM model)"),tfo=l(),ps=a("li"),Ble=a("strong"),afo=o("led"),nfo=o(" \u2014 "),pN=a("a"),sfo=o("LEDTokenizer"),lfo=o(" or "),_N=a("a"),ifo=o("LEDTokenizerFast"),dfo=o(" (LED model)"),cfo=l(),_s=a("li"),Nle=a("strong"),ffo=o("longformer"),mfo=o(" \u2014 "),uN=a("a"),gfo=o("LongformerTokenizer"),hfo=o(" or "),bN=a("a"),pfo=o("LongformerTokenizerFast"),_fo=o(" (Longformer model)"),ufo=l(),us=a("li"),Ile=a("strong"),bfo=o("longt5"),vfo=o(" \u2014 "),vN=a("a"),Ffo=o("T5Tokenizer"),Tfo=o(" or "),FN=a("a"),Mfo=o("T5TokenizerFast"),Efo=o(" (LongT5 model)"),Cfo=l(),mh=a("li"),qle=a("strong"),wfo=o("luke"),Afo=o(" \u2014 "),TN=a("a"),Lfo=o("LukeTokenizer"),yfo=o(" (LUKE model)"),xfo=l(),bs=a("li"),jle=a("strong"),$fo=o("lxmert"),kfo=o(" \u2014 "),MN=a("a"),Sfo=o("LxmertTokenizer"),Rfo=o(" or "),EN=a("a"),Pfo=o("LxmertTokenizerFast"),Bfo=o(" (LXMERT model)"),Nfo=l(),gh=a("li"),Dle=a("strong"),Ifo=o("m2m_100"),qfo=o(" \u2014 "),CN=a("a"),jfo=o("M2M100Tokenizer"),Dfo=o(" (M2M100 model)"),Gfo=l(),hh=a("li"),Gle=a("strong"),Ofo=o("marian"),Vfo=o(" \u2014 "),wN=a("a"),Xfo=o("MarianTokenizer"),zfo=o(" (Marian model)"),Qfo=l(),vs=a("li"),Ole=a("strong"),Wfo=o("mbart"),Hfo=o(" \u2014 "),AN=a("a"),Ufo=o("MBartTokenizer"),Jfo=o(" or "),LN=a("a"),Yfo=o("MBartTokenizerFast"),Kfo=o(" (mBART model)"),Zfo=l(),Fs=a("li"),Vle=a("strong"),emo=o("mbart50"),omo=o(" \u2014 "),yN=a("a"),rmo=o("MBart50Tokenizer"),tmo=o(" or "),xN=a("a"),amo=o("MBart50TokenizerFast"),nmo=o(" (mBART-50 model)"),smo=l(),Ts=a("li"),Xle=a("strong"),lmo=o("megatron-bert"),imo=o(" \u2014 "),$N=a("a"),dmo=o("BertTokenizer"),cmo=o(" or "),kN=a("a"),fmo=o("BertTokenizerFast"),mmo=o(" (Megatron-BERT model)"),gmo=l(),ph=a("li"),zle=a("strong"),hmo=o("mluke"),pmo=o(" \u2014 "),SN=a("a"),_mo=o("MLukeTokenizer"),umo=o(" (mLUKE model)"),bmo=l(),Ms=a("li"),Qle=a("strong"),vmo=o("mobilebert"),Fmo=o(" \u2014 "),RN=a("a"),Tmo=o("MobileBertTokenizer"),Mmo=o(" or "),PN=a("a"),Emo=o("MobileBertTokenizerFast"),Cmo=o(" (MobileBERT model)"),wmo=l(),Es=a("li"),Wle=a("strong"),Amo=o("mpnet"),Lmo=o(" \u2014 "),BN=a("a"),ymo=o("MPNetTokenizer"),xmo=o(" or "),NN=a("a"),$mo=o("MPNetTokenizerFast"),kmo=o(" (MPNet model)"),Smo=l(),Cs=a("li"),Hle=a("strong"),Rmo=o("mt5"),Pmo=o(" \u2014 "),IN=a("a"),Bmo=o("MT5Tokenizer"),Nmo=o(" or "),qN=a("a"),Imo=o("MT5TokenizerFast"),qmo=o(" (MT5 model)"),jmo=l(),ws=a("li"),Ule=a("strong"),Dmo=o("mvp"),Gmo=o(" \u2014 "),jN=a("a"),Omo=o("MvpTokenizer"),Vmo=o(" or "),DN=a("a"),Xmo=o("MvpTokenizerFast"),zmo=o(" (MVP model)"),Qmo=l(),As=a("li"),Jle=a("strong"),Wmo=o("nezha"),Hmo=o(" \u2014 "),GN=a("a"),Umo=o("BertTokenizer"),Jmo=o(" or "),ON=a("a"),Ymo=o("BertTokenizerFast"),Kmo=o(" (Nezha model)"),Zmo=l(),Ls=a("li"),Yle=a("strong"),ego=o("nystromformer"),ogo=o(" \u2014 "),VN=a("a"),rgo=o("AlbertTokenizer"),tgo=o(" or "),XN=a("a"),ago=o("AlbertTokenizerFast"),ngo=o(" (Nystr\xF6mformer model)"),sgo=l(),ys=a("li"),Kle=a("strong"),lgo=o("openai-gpt"),igo=o(" \u2014 "),zN=a("a"),dgo=o("OpenAIGPTTokenizer"),cgo=o(" or "),QN=a("a"),fgo=o("OpenAIGPTTokenizerFast"),mgo=o(" (OpenAI GPT model)"),ggo=l(),_h=a("li"),Zle=a("strong"),hgo=o("opt"),pgo=o(" \u2014 "),WN=a("a"),_go=o("GPT2Tokenizer"),ugo=o(" (OPT model)"),bgo=l(),xs=a("li"),eie=a("strong"),vgo=o("pegasus"),Fgo=o(" \u2014 "),HN=a("a"),Tgo=o("PegasusTokenizer"),Mgo=o(" or "),UN=a("a"),Ego=o("PegasusTokenizerFast"),Cgo=o(" (Pegasus model)"),wgo=l(),uh=a("li"),oie=a("strong"),Ago=o("perceiver"),Lgo=o(" \u2014 "),JN=a("a"),ygo=o("PerceiverTokenizer"),xgo=o(" (Perceiver model)"),$go=l(),bh=a("li"),rie=a("strong"),kgo=o("phobert"),Sgo=o(" \u2014 "),YN=a("a"),Rgo=o("PhobertTokenizer"),Pgo=o(" (PhoBERT model)"),Bgo=l(),vh=a("li"),tie=a("strong"),Ngo=o("plbart"),Igo=o(" \u2014 "),KN=a("a"),qgo=o("PLBartTokenizer"),jgo=o(" (PLBart model)"),Dgo=l(),Fh=a("li"),aie=a("strong"),Ggo=o("prophetnet"),Ogo=o(" \u2014 "),ZN=a("a"),Vgo=o("ProphetNetTokenizer"),Xgo=o(" (ProphetNet model)"),zgo=l(),$s=a("li"),nie=a("strong"),Qgo=o("qdqbert"),Wgo=o(" \u2014 "),eI=a("a"),Hgo=o("BertTokenizer"),Ugo=o(" or "),oI=a("a"),Jgo=o("BertTokenizerFast"),Ygo=o(" (QDQBert model)"),Kgo=l(),Th=a("li"),sie=a("strong"),Zgo=o("rag"),eho=o(" \u2014 "),rI=a("a"),oho=o("RagTokenizer"),rho=o(" (RAG model)"),tho=l(),ks=a("li"),lie=a("strong"),aho=o("realm"),nho=o(" \u2014 "),tI=a("a"),sho=o("RealmTokenizer"),lho=o(" or "),aI=a("a"),iho=o("RealmTokenizerFast"),dho=o(" (REALM model)"),cho=l(),Ss=a("li"),iie=a("strong"),fho=o("reformer"),mho=o(" \u2014 "),nI=a("a"),gho=o("ReformerTokenizer"),hho=o(" or "),sI=a("a"),pho=o("ReformerTokenizerFast"),_ho=o(" (Reformer model)"),uho=l(),Rs=a("li"),die=a("strong"),bho=o("rembert"),vho=o(" \u2014 "),lI=a("a"),Fho=o("RemBertTokenizer"),Tho=o(" or "),iI=a("a"),Mho=o("RemBertTokenizerFast"),Eho=o(" (RemBERT model)"),Cho=l(),Ps=a("li"),cie=a("strong"),who=o("retribert"),Aho=o(" \u2014 "),dI=a("a"),Lho=o("RetriBertTokenizer"),yho=o(" or "),cI=a("a"),xho=o("RetriBertTokenizerFast"),$ho=o(" (RetriBERT model)"),kho=l(),Bs=a("li"),fie=a("strong"),Sho=o("roberta"),Rho=o(" \u2014 "),fI=a("a"),Pho=o("RobertaTokenizer"),Bho=o(" or "),mI=a("a"),Nho=o("RobertaTokenizerFast"),Iho=o(" (RoBERTa model)"),qho=l(),Ns=a("li"),mie=a("strong"),jho=o("roformer"),Dho=o(" \u2014 "),gI=a("a"),Gho=o("RoFormerTokenizer"),Oho=o(" or "),hI=a("a"),Vho=o("RoFormerTokenizerFast"),Xho=o(" (RoFormer model)"),zho=l(),Mh=a("li"),gie=a("strong"),Qho=o("speech_to_text"),Who=o(" \u2014 "),pI=a("a"),Hho=o("Speech2TextTokenizer"),Uho=o(" (Speech2Text model)"),Jho=l(),Eh=a("li"),hie=a("strong"),Yho=o("speech_to_text_2"),Kho=o(" \u2014 "),_I=a("a"),Zho=o("Speech2Text2Tokenizer"),epo=o(" (Speech2Text2 model)"),opo=l(),Is=a("li"),pie=a("strong"),rpo=o("splinter"),tpo=o(" \u2014 "),uI=a("a"),apo=o("SplinterTokenizer"),npo=o(" or "),bI=a("a"),spo=o("SplinterTokenizerFast"),lpo=o(" (Splinter model)"),ipo=l(),qs=a("li"),_ie=a("strong"),dpo=o("squeezebert"),cpo=o(" \u2014 "),vI=a("a"),fpo=o("SqueezeBertTokenizer"),mpo=o(" or "),FI=a("a"),gpo=o("SqueezeBertTokenizerFast"),hpo=o(" (SqueezeBERT model)"),ppo=l(),js=a("li"),uie=a("strong"),_po=o("t5"),upo=o(" \u2014 "),TI=a("a"),bpo=o("T5Tokenizer"),vpo=o(" or "),MI=a("a"),Fpo=o("T5TokenizerFast"),Tpo=o(" (T5 model)"),Mpo=l(),Ch=a("li"),bie=a("strong"),Epo=o("tapas"),Cpo=o(" \u2014 "),EI=a("a"),wpo=o("TapasTokenizer"),Apo=o(" (TAPAS model)"),Lpo=l(),wh=a("li"),vie=a("strong"),ypo=o("tapex"),xpo=o(" \u2014 "),CI=a("a"),$po=o("TapexTokenizer"),kpo=o(" (TAPEX model)"),Spo=l(),Ah=a("li"),Fie=a("strong"),Rpo=o("transfo-xl"),Ppo=o(" \u2014 "),wI=a("a"),Bpo=o("TransfoXLTokenizer"),Npo=o(" (Transformer-XL model)"),Ipo=l(),Ds=a("li"),Tie=a("strong"),qpo=o("vilt"),jpo=o(" \u2014 "),AI=a("a"),Dpo=o("BertTokenizer"),Gpo=o(" or "),LI=a("a"),Opo=o("BertTokenizerFast"),Vpo=o(" (ViLT model)"),Xpo=l(),Gs=a("li"),Mie=a("strong"),zpo=o("visual_bert"),Qpo=o(" \u2014 "),yI=a("a"),Wpo=o("BertTokenizer"),Hpo=o(" or "),xI=a("a"),Upo=o("BertTokenizerFast"),Jpo=o(" (VisualBERT model)"),Ypo=l(),Lh=a("li"),Eie=a("strong"),Kpo=o("wav2vec2"),Zpo=o(" \u2014 "),$I=a("a"),e_o=o("Wav2Vec2CTCTokenizer"),o_o=o(" (Wav2Vec2 model)"),r_o=l(),yh=a("li"),Cie=a("strong"),t_o=o("wav2vec2-conformer"),a_o=o(" \u2014 "),kI=a("a"),n_o=o("Wav2Vec2CTCTokenizer"),s_o=o(" (Wav2Vec2-Conformer model)"),l_o=l(),xh=a("li"),wie=a("strong"),i_o=o("wav2vec2_phoneme"),d_o=o(" \u2014 "),SI=a("a"),c_o=o("Wav2Vec2PhonemeCTCTokenizer"),f_o=o(" (Wav2Vec2Phoneme model)"),m_o=l(),Os=a("li"),Aie=a("strong"),g_o=o("xglm"),h_o=o(" \u2014 "),RI=a("a"),p_o=o("XGLMTokenizer"),__o=o(" or "),PI=a("a"),u_o=o("XGLMTokenizerFast"),b_o=o(" (XGLM model)"),v_o=l(),$h=a("li"),Lie=a("strong"),F_o=o("xlm"),T_o=o(" \u2014 "),BI=a("a"),M_o=o("XLMTokenizer"),E_o=o(" (XLM model)"),C_o=l(),kh=a("li"),yie=a("strong"),w_o=o("xlm-prophetnet"),A_o=o(" \u2014 "),NI=a("a"),L_o=o("XLMProphetNetTokenizer"),y_o=o(" (XLM-ProphetNet model)"),x_o=l(),Vs=a("li"),xie=a("strong"),$_o=o("xlm-roberta"),k_o=o(" \u2014 "),II=a("a"),S_o=o("XLMRobertaTokenizer"),R_o=o(" or "),qI=a("a"),P_o=o("XLMRobertaTokenizerFast"),B_o=o(" (XLM-RoBERTa model)"),N_o=l(),Xs=a("li"),$ie=a("strong"),I_o=o("xlm-roberta-xl"),q_o=o(" \u2014 "),jI=a("a"),j_o=o("RobertaTokenizer"),D_o=o(" or "),DI=a("a"),G_o=o("RobertaTokenizerFast"),O_o=o(" (XLM-RoBERTa-XL model)"),V_o=l(),zs=a("li"),kie=a("strong"),X_o=o("xlnet"),z_o=o(" \u2014 "),GI=a("a"),Q_o=o("XLNetTokenizer"),W_o=o(" or "),OI=a("a"),H_o=o("XLNetTokenizerFast"),U_o=o(" (XLNet model)"),J_o=l(),Qs=a("li"),Sie=a("strong"),Y_o=o("yoso"),K_o=o(" \u2014 "),VI=a("a"),Z_o=o("AlbertTokenizer"),euo=o(" or "),XI=a("a"),ouo=o("AlbertTokenizerFast"),ruo=o(" (YOSO model)"),tuo=l(),F(Sh.$$.fragment),auo=l(),Rh=a("div"),F(p7.$$.fragment),nuo=l(),Rie=a("p"),suo=o("Register a new tokenizer in this mapping."),YVe=l(),Ii=a("h2"),Ph=a("a"),Pie=a("span"),F(_7.$$.fragment),luo=l(),Bie=a("span"),iuo=o("AutoFeatureExtractor"),KVe=l(),Lo=a("div"),F(u7.$$.fragment),duo=l(),b7=a("p"),cuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=a("a"),fuo=o("AutoFeatureExtractor.from_pretrained()"),muo=o(" class method."),guo=l(),v7=a("p"),huo=o("This class cannot be instantiated directly using "),Nie=a("code"),puo=o("__init__()"),_uo=o(" (throws an error)."),uuo=l(),He=a("div"),F(F7.$$.fragment),buo=l(),Iie=a("p"),vuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Fuo=l(),Ba=a("p"),Tuo=o("The feature extractor class to instantiate is selected based on the "),qie=a("code"),Muo=o("model_type"),Euo=o(` property of the config object
(either passed as an argument or loaded from `),jie=a("code"),Cuo=o("pretrained_model_name_or_path"),wuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Die=a("code"),Auo=o("pretrained_model_name_or_path"),Luo=o(":"),yuo=l(),Y=a("ul"),Bh=a("li"),Gie=a("strong"),xuo=o("beit"),$uo=o(" \u2014 "),QI=a("a"),kuo=o("BeitFeatureExtractor"),Suo=o(" (BEiT model)"),Ruo=l(),Nh=a("li"),Oie=a("strong"),Puo=o("clip"),Buo=o(" \u2014 "),WI=a("a"),Nuo=o("CLIPFeatureExtractor"),Iuo=o(" (CLIP model)"),quo=l(),Ih=a("li"),Vie=a("strong"),juo=o("convnext"),Duo=o(" \u2014 "),HI=a("a"),Guo=o("ConvNextFeatureExtractor"),Ouo=o(" (ConvNeXT model)"),Vuo=l(),qh=a("li"),Xie=a("strong"),Xuo=o("cvt"),zuo=o(" \u2014 "),UI=a("a"),Quo=o("ConvNextFeatureExtractor"),Wuo=o(" (CvT model)"),Huo=l(),jh=a("li"),zie=a("strong"),Uuo=o("data2vec-audio"),Juo=o(" \u2014 "),JI=a("a"),Yuo=o("Wav2Vec2FeatureExtractor"),Kuo=o(" (Data2VecAudio model)"),Zuo=l(),Dh=a("li"),Qie=a("strong"),e1o=o("data2vec-vision"),o1o=o(" \u2014 "),YI=a("a"),r1o=o("BeitFeatureExtractor"),t1o=o(" (Data2VecVision model)"),a1o=l(),Gh=a("li"),Wie=a("strong"),n1o=o("deit"),s1o=o(" \u2014 "),KI=a("a"),l1o=o("DeiTFeatureExtractor"),i1o=o(" (DeiT model)"),d1o=l(),Oh=a("li"),Hie=a("strong"),c1o=o("detr"),f1o=o(" \u2014 "),ZI=a("a"),m1o=o("DetrFeatureExtractor"),g1o=o(" (DETR model)"),h1o=l(),Vh=a("li"),Uie=a("strong"),p1o=o("dpt"),_1o=o(" \u2014 "),eq=a("a"),u1o=o("DPTFeatureExtractor"),b1o=o(" (DPT model)"),v1o=l(),Xh=a("li"),Jie=a("strong"),F1o=o("flava"),T1o=o(" \u2014 "),oq=a("a"),M1o=o("FlavaFeatureExtractor"),E1o=o(" (FLAVA model)"),C1o=l(),zh=a("li"),Yie=a("strong"),w1o=o("glpn"),A1o=o(" \u2014 "),rq=a("a"),L1o=o("GLPNFeatureExtractor"),y1o=o(" (GLPN model)"),x1o=l(),Qh=a("li"),Kie=a("strong"),$1o=o("groupvit"),k1o=o(" \u2014 "),tq=a("a"),S1o=o("CLIPFeatureExtractor"),R1o=o(" (GroupViT model)"),P1o=l(),Wh=a("li"),Zie=a("strong"),B1o=o("hubert"),N1o=o(" \u2014 "),aq=a("a"),I1o=o("Wav2Vec2FeatureExtractor"),q1o=o(" (Hubert model)"),j1o=l(),Hh=a("li"),ede=a("strong"),D1o=o("imagegpt"),G1o=o(" \u2014 "),nq=a("a"),O1o=o("ImageGPTFeatureExtractor"),V1o=o(" (ImageGPT model)"),X1o=l(),Uh=a("li"),ode=a("strong"),z1o=o("layoutlmv2"),Q1o=o(" \u2014 "),sq=a("a"),W1o=o("LayoutLMv2FeatureExtractor"),H1o=o(" (LayoutLMv2 model)"),U1o=l(),Jh=a("li"),rde=a("strong"),J1o=o("layoutlmv3"),Y1o=o(" \u2014 "),lq=a("a"),K1o=o("LayoutLMv3FeatureExtractor"),Z1o=o(" (LayoutLMv3 model)"),e2o=l(),Yh=a("li"),tde=a("strong"),o2o=o("levit"),r2o=o(" \u2014 "),iq=a("a"),t2o=o("LevitFeatureExtractor"),a2o=o(" (LeViT model)"),n2o=l(),Kh=a("li"),ade=a("strong"),s2o=o("maskformer"),l2o=o(" \u2014 "),dq=a("a"),i2o=o("MaskFormerFeatureExtractor"),d2o=o(" (MaskFormer model)"),c2o=l(),Zh=a("li"),nde=a("strong"),f2o=o("mctct"),m2o=o(" \u2014 "),cq=a("a"),g2o=o("MCTCTFeatureExtractor"),h2o=o(" (M-CTC-T model)"),p2o=l(),ep=a("li"),sde=a("strong"),_2o=o("mobilevit"),u2o=o(" \u2014 "),fq=a("a"),b2o=o("MobileViTFeatureExtractor"),v2o=o(" (MobileViT model)"),F2o=l(),op=a("li"),lde=a("strong"),T2o=o("perceiver"),M2o=o(" \u2014 "),mq=a("a"),E2o=o("PerceiverFeatureExtractor"),C2o=o(" (Perceiver model)"),w2o=l(),rp=a("li"),ide=a("strong"),A2o=o("poolformer"),L2o=o(" \u2014 "),gq=a("a"),y2o=o("PoolFormerFeatureExtractor"),x2o=o(" (PoolFormer model)"),$2o=l(),tp=a("li"),dde=a("strong"),k2o=o("regnet"),S2o=o(" \u2014 "),hq=a("a"),R2o=o("ConvNextFeatureExtractor"),P2o=o(" (RegNet model)"),B2o=l(),ap=a("li"),cde=a("strong"),N2o=o("resnet"),I2o=o(" \u2014 "),pq=a("a"),q2o=o("ConvNextFeatureExtractor"),j2o=o(" (ResNet model)"),D2o=l(),np=a("li"),fde=a("strong"),G2o=o("segformer"),O2o=o(" \u2014 "),_q=a("a"),V2o=o("SegformerFeatureExtractor"),X2o=o(" (SegFormer model)"),z2o=l(),sp=a("li"),mde=a("strong"),Q2o=o("speech_to_text"),W2o=o(" \u2014 "),uq=a("a"),H2o=o("Speech2TextFeatureExtractor"),U2o=o(" (Speech2Text model)"),J2o=l(),lp=a("li"),gde=a("strong"),Y2o=o("swin"),K2o=o(" \u2014 "),bq=a("a"),Z2o=o("ViTFeatureExtractor"),ebo=o(" (Swin Transformer model)"),obo=l(),ip=a("li"),hde=a("strong"),rbo=o("van"),tbo=o(" \u2014 "),vq=a("a"),abo=o("ConvNextFeatureExtractor"),nbo=o(" (VAN model)"),sbo=l(),dp=a("li"),pde=a("strong"),lbo=o("vilt"),ibo=o(" \u2014 "),Fq=a("a"),dbo=o("ViltFeatureExtractor"),cbo=o(" (ViLT model)"),fbo=l(),cp=a("li"),_de=a("strong"),mbo=o("vit"),gbo=o(" \u2014 "),Tq=a("a"),hbo=o("ViTFeatureExtractor"),pbo=o(" (ViT model)"),_bo=l(),fp=a("li"),ude=a("strong"),ubo=o("vit_mae"),bbo=o(" \u2014 "),Mq=a("a"),vbo=o("ViTFeatureExtractor"),Fbo=o(" (ViTMAE model)"),Tbo=l(),mp=a("li"),bde=a("strong"),Mbo=o("wav2vec2"),Ebo=o(" \u2014 "),Eq=a("a"),Cbo=o("Wav2Vec2FeatureExtractor"),wbo=o(" (Wav2Vec2 model)"),Abo=l(),gp=a("li"),vde=a("strong"),Lbo=o("wav2vec2-conformer"),ybo=o(" \u2014 "),Cq=a("a"),xbo=o("Wav2Vec2FeatureExtractor"),$bo=o(" (Wav2Vec2-Conformer model)"),kbo=l(),hp=a("li"),Fde=a("strong"),Sbo=o("yolos"),Rbo=o(" \u2014 "),wq=a("a"),Pbo=o("YolosFeatureExtractor"),Bbo=o(" (YOLOS model)"),Nbo=l(),F(pp.$$.fragment),Ibo=l(),F(_p.$$.fragment),qbo=l(),up=a("div"),F(T7.$$.fragment),jbo=l(),Tde=a("p"),Dbo=o("Register a new feature extractor for this class."),ZVe=l(),qi=a("h2"),bp=a("a"),Mde=a("span"),F(M7.$$.fragment),Gbo=l(),Ede=a("span"),Obo=o("AutoProcessor"),eXe=l(),yo=a("div"),F(E7.$$.fragment),Vbo=l(),C7=a("p"),Xbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Aq=a("a"),zbo=o("AutoProcessor.from_pretrained()"),Qbo=o(" class method."),Wbo=l(),w7=a("p"),Hbo=o("This class cannot be instantiated directly using "),Cde=a("code"),Ubo=o("__init__()"),Jbo=o(" (throws an error)."),Ybo=l(),Ue=a("div"),F(A7.$$.fragment),Kbo=l(),wde=a("p"),Zbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),evo=l(),ji=a("p"),ovo=o("The processor class to instantiate is selected based on the "),Ade=a("code"),rvo=o("model_type"),tvo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),avo=o("pretrained_model_name_or_path"),nvo=o(" if possible):"),svo=l(),he=a("ul"),vp=a("li"),yde=a("strong"),lvo=o("clip"),ivo=o(" \u2014 "),Lq=a("a"),dvo=o("CLIPProcessor"),cvo=o(" (CLIP model)"),fvo=l(),Fp=a("li"),xde=a("strong"),mvo=o("flava"),gvo=o(" \u2014 "),$de=a("code"),hvo=o("FLAVAProcessor"),pvo=o(" (FLAVA model)"),_vo=l(),Tp=a("li"),kde=a("strong"),uvo=o("groupvit"),bvo=o(" \u2014 "),yq=a("a"),vvo=o("CLIPProcessor"),Fvo=o(" (GroupViT model)"),Tvo=l(),Mp=a("li"),Sde=a("strong"),Mvo=o("layoutlmv2"),Evo=o(" \u2014 "),xq=a("a"),Cvo=o("LayoutLMv2Processor"),wvo=o(" (LayoutLMv2 model)"),Avo=l(),Ep=a("li"),Rde=a("strong"),Lvo=o("layoutlmv3"),yvo=o(" \u2014 "),$q=a("a"),xvo=o("LayoutLMv3Processor"),$vo=o(" (LayoutLMv3 model)"),kvo=l(),Cp=a("li"),Pde=a("strong"),Svo=o("layoutxlm"),Rvo=o(" \u2014 "),kq=a("a"),Pvo=o("LayoutXLMProcessor"),Bvo=o(" (LayoutXLM model)"),Nvo=l(),wp=a("li"),Bde=a("strong"),Ivo=o("sew"),qvo=o(" \u2014 "),Sq=a("a"),jvo=o("Wav2Vec2Processor"),Dvo=o(" (SEW model)"),Gvo=l(),Ap=a("li"),Nde=a("strong"),Ovo=o("sew-d"),Vvo=o(" \u2014 "),Rq=a("a"),Xvo=o("Wav2Vec2Processor"),zvo=o(" (SEW-D model)"),Qvo=l(),Lp=a("li"),Ide=a("strong"),Wvo=o("speech_to_text"),Hvo=o(" \u2014 "),Pq=a("a"),Uvo=o("Speech2TextProcessor"),Jvo=o(" (Speech2Text model)"),Yvo=l(),yp=a("li"),qde=a("strong"),Kvo=o("speech_to_text_2"),Zvo=o(" \u2014 "),Bq=a("a"),e5o=o("Speech2Text2Processor"),o5o=o(" (Speech2Text2 model)"),r5o=l(),xp=a("li"),jde=a("strong"),t5o=o("trocr"),a5o=o(" \u2014 "),Nq=a("a"),n5o=o("TrOCRProcessor"),s5o=o(" (TrOCR model)"),l5o=l(),$p=a("li"),Dde=a("strong"),i5o=o("unispeech"),d5o=o(" \u2014 "),Iq=a("a"),c5o=o("Wav2Vec2Processor"),f5o=o(" (UniSpeech model)"),m5o=l(),kp=a("li"),Gde=a("strong"),g5o=o("unispeech-sat"),h5o=o(" \u2014 "),qq=a("a"),p5o=o("Wav2Vec2Processor"),_5o=o(" (UniSpeechSat model)"),u5o=l(),Sp=a("li"),Ode=a("strong"),b5o=o("vilt"),v5o=o(" \u2014 "),jq=a("a"),F5o=o("ViltProcessor"),T5o=o(" (ViLT model)"),M5o=l(),Rp=a("li"),Vde=a("strong"),E5o=o("vision-text-dual-encoder"),C5o=o(" \u2014 "),Dq=a("a"),w5o=o("VisionTextDualEncoderProcessor"),A5o=o(" (VisionTextDualEncoder model)"),L5o=l(),Pp=a("li"),Xde=a("strong"),y5o=o("wav2vec2"),x5o=o(" \u2014 "),Gq=a("a"),$5o=o("Wav2Vec2Processor"),k5o=o(" (Wav2Vec2 model)"),S5o=l(),Bp=a("li"),zde=a("strong"),R5o=o("wav2vec2-conformer"),P5o=o(" \u2014 "),Oq=a("a"),B5o=o("Wav2Vec2Processor"),N5o=o(" (Wav2Vec2-Conformer model)"),I5o=l(),Np=a("li"),Qde=a("strong"),q5o=o("wavlm"),j5o=o(" \u2014 "),Vq=a("a"),D5o=o("Wav2Vec2Processor"),G5o=o(" (WavLM model)"),O5o=l(),F(Ip.$$.fragment),V5o=l(),F(qp.$$.fragment),X5o=l(),jp=a("div"),F(L7.$$.fragment),z5o=l(),Wde=a("p"),Q5o=o("Register a new processor for this class."),oXe=l(),Di=a("h2"),Dp=a("a"),Hde=a("span"),F(y7.$$.fragment),W5o=l(),Ude=a("span"),H5o=o("AutoModel"),rXe=l(),xo=a("div"),F(x7.$$.fragment),U5o=l(),Gi=a("p"),J5o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xq=a("a"),Y5o=o("from_pretrained()"),K5o=o(" class method or the "),zq=a("a"),Z5o=o("from_config()"),e0o=o(` class
method.`),o0o=l(),$7=a("p"),r0o=o("This class cannot be instantiated directly using "),Jde=a("code"),t0o=o("__init__()"),a0o=o(" (throws an error)."),n0o=l(),lt=a("div"),F(k7.$$.fragment),s0o=l(),Yde=a("p"),l0o=o("Instantiates one of the base model classes of the library from a configuration."),i0o=l(),Oi=a("p"),d0o=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),c0o=o("not"),f0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=a("a"),m0o=o("from_pretrained()"),g0o=o(" to load the model weights."),h0o=l(),F(Gp.$$.fragment),p0o=l(),Je=a("div"),F(S7.$$.fragment),_0o=l(),Zde=a("p"),u0o=o("Instantiate one of the base model classes of the library from a pretrained model."),b0o=l(),Na=a("p"),v0o=o("The model class to instantiate is selected based on the "),ece=a("code"),F0o=o("model_type"),T0o=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),M0o=o("pretrained_model_name_or_path"),E0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),C0o=o("pretrained_model_name_or_path"),w0o=o(":"),A0o=l(),y=a("ul"),Op=a("li"),tce=a("strong"),L0o=o("albert"),y0o=o(" \u2014 "),Wq=a("a"),x0o=o("AlbertModel"),$0o=o(" (ALBERT model)"),k0o=l(),Vp=a("li"),ace=a("strong"),S0o=o("bart"),R0o=o(" \u2014 "),Hq=a("a"),P0o=o("BartModel"),B0o=o(" (BART model)"),N0o=l(),Xp=a("li"),nce=a("strong"),I0o=o("beit"),q0o=o(" \u2014 "),Uq=a("a"),j0o=o("BeitModel"),D0o=o(" (BEiT model)"),G0o=l(),zp=a("li"),sce=a("strong"),O0o=o("bert"),V0o=o(" \u2014 "),Jq=a("a"),X0o=o("BertModel"),z0o=o(" (BERT model)"),Q0o=l(),Qp=a("li"),lce=a("strong"),W0o=o("bert-generation"),H0o=o(" \u2014 "),Yq=a("a"),U0o=o("BertGenerationEncoder"),J0o=o(" (Bert Generation model)"),Y0o=l(),Wp=a("li"),ice=a("strong"),K0o=o("big_bird"),Z0o=o(" \u2014 "),Kq=a("a"),eFo=o("BigBirdModel"),oFo=o(" (BigBird model)"),rFo=l(),Hp=a("li"),dce=a("strong"),tFo=o("bigbird_pegasus"),aFo=o(" \u2014 "),Zq=a("a"),nFo=o("BigBirdPegasusModel"),sFo=o(" (BigBird-Pegasus model)"),lFo=l(),Up=a("li"),cce=a("strong"),iFo=o("blenderbot"),dFo=o(" \u2014 "),ej=a("a"),cFo=o("BlenderbotModel"),fFo=o(" (Blenderbot model)"),mFo=l(),Jp=a("li"),fce=a("strong"),gFo=o("blenderbot-small"),hFo=o(" \u2014 "),oj=a("a"),pFo=o("BlenderbotSmallModel"),_Fo=o(" (BlenderbotSmall model)"),uFo=l(),Yp=a("li"),mce=a("strong"),bFo=o("bloom"),vFo=o(" \u2014 "),rj=a("a"),FFo=o("BloomModel"),TFo=o(" (BLOOM model)"),MFo=l(),Kp=a("li"),gce=a("strong"),EFo=o("camembert"),CFo=o(" \u2014 "),tj=a("a"),wFo=o("CamembertModel"),AFo=o(" (CamemBERT model)"),LFo=l(),Zp=a("li"),hce=a("strong"),yFo=o("canine"),xFo=o(" \u2014 "),aj=a("a"),$Fo=o("CanineModel"),kFo=o(" (CANINE model)"),SFo=l(),e_=a("li"),pce=a("strong"),RFo=o("clip"),PFo=o(" \u2014 "),nj=a("a"),BFo=o("CLIPModel"),NFo=o(" (CLIP model)"),IFo=l(),o_=a("li"),_ce=a("strong"),qFo=o("codegen"),jFo=o(" \u2014 "),sj=a("a"),DFo=o("CodeGenModel"),GFo=o(" (CodeGen model)"),OFo=l(),r_=a("li"),uce=a("strong"),VFo=o("convbert"),XFo=o(" \u2014 "),lj=a("a"),zFo=o("ConvBertModel"),QFo=o(" (ConvBERT model)"),WFo=l(),t_=a("li"),bce=a("strong"),HFo=o("convnext"),UFo=o(" \u2014 "),ij=a("a"),JFo=o("ConvNextModel"),YFo=o(" (ConvNeXT model)"),KFo=l(),a_=a("li"),vce=a("strong"),ZFo=o("ctrl"),eTo=o(" \u2014 "),dj=a("a"),oTo=o("CTRLModel"),rTo=o(" (CTRL model)"),tTo=l(),n_=a("li"),Fce=a("strong"),aTo=o("cvt"),nTo=o(" \u2014 "),cj=a("a"),sTo=o("CvtModel"),lTo=o(" (CvT model)"),iTo=l(),s_=a("li"),Tce=a("strong"),dTo=o("data2vec-audio"),cTo=o(" \u2014 "),fj=a("a"),fTo=o("Data2VecAudioModel"),mTo=o(" (Data2VecAudio model)"),gTo=l(),l_=a("li"),Mce=a("strong"),hTo=o("data2vec-text"),pTo=o(" \u2014 "),mj=a("a"),_To=o("Data2VecTextModel"),uTo=o(" (Data2VecText model)"),bTo=l(),i_=a("li"),Ece=a("strong"),vTo=o("data2vec-vision"),FTo=o(" \u2014 "),gj=a("a"),TTo=o("Data2VecVisionModel"),MTo=o(" (Data2VecVision model)"),ETo=l(),d_=a("li"),Cce=a("strong"),CTo=o("deberta"),wTo=o(" \u2014 "),hj=a("a"),ATo=o("DebertaModel"),LTo=o(" (DeBERTa model)"),yTo=l(),c_=a("li"),wce=a("strong"),xTo=o("deberta-v2"),$To=o(" \u2014 "),pj=a("a"),kTo=o("DebertaV2Model"),STo=o(" (DeBERTa-v2 model)"),RTo=l(),f_=a("li"),Ace=a("strong"),PTo=o("decision_transformer"),BTo=o(" \u2014 "),_j=a("a"),NTo=o("DecisionTransformerModel"),ITo=o(" (Decision Transformer model)"),qTo=l(),m_=a("li"),Lce=a("strong"),jTo=o("deit"),DTo=o(" \u2014 "),uj=a("a"),GTo=o("DeiTModel"),OTo=o(" (DeiT model)"),VTo=l(),g_=a("li"),yce=a("strong"),XTo=o("detr"),zTo=o(" \u2014 "),bj=a("a"),QTo=o("DetrModel"),WTo=o(" (DETR model)"),HTo=l(),h_=a("li"),xce=a("strong"),UTo=o("distilbert"),JTo=o(" \u2014 "),vj=a("a"),YTo=o("DistilBertModel"),KTo=o(" (DistilBERT model)"),ZTo=l(),p_=a("li"),$ce=a("strong"),e8o=o("dpr"),o8o=o(" \u2014 "),Fj=a("a"),r8o=o("DPRQuestionEncoder"),t8o=o(" (DPR model)"),a8o=l(),__=a("li"),kce=a("strong"),n8o=o("dpt"),s8o=o(" \u2014 "),Tj=a("a"),l8o=o("DPTModel"),i8o=o(" (DPT model)"),d8o=l(),u_=a("li"),Sce=a("strong"),c8o=o("electra"),f8o=o(" \u2014 "),Mj=a("a"),m8o=o("ElectraModel"),g8o=o(" (ELECTRA model)"),h8o=l(),b_=a("li"),Rce=a("strong"),p8o=o("flaubert"),_8o=o(" \u2014 "),Ej=a("a"),u8o=o("FlaubertModel"),b8o=o(" (FlauBERT model)"),v8o=l(),v_=a("li"),Pce=a("strong"),F8o=o("flava"),T8o=o(" \u2014 "),Cj=a("a"),M8o=o("FlavaModel"),E8o=o(" (FLAVA model)"),C8o=l(),F_=a("li"),Bce=a("strong"),w8o=o("fnet"),A8o=o(" \u2014 "),wj=a("a"),L8o=o("FNetModel"),y8o=o(" (FNet model)"),x8o=l(),T_=a("li"),Nce=a("strong"),$8o=o("fsmt"),k8o=o(" \u2014 "),Aj=a("a"),S8o=o("FSMTModel"),R8o=o(" (FairSeq Machine-Translation model)"),P8o=l(),Ws=a("li"),Ice=a("strong"),B8o=o("funnel"),N8o=o(" \u2014 "),Lj=a("a"),I8o=o("FunnelModel"),q8o=o(" or "),yj=a("a"),j8o=o("FunnelBaseModel"),D8o=o(" (Funnel Transformer model)"),G8o=l(),M_=a("li"),qce=a("strong"),O8o=o("glpn"),V8o=o(" \u2014 "),xj=a("a"),X8o=o("GLPNModel"),z8o=o(" (GLPN model)"),Q8o=l(),E_=a("li"),jce=a("strong"),W8o=o("gpt2"),H8o=o(" \u2014 "),$j=a("a"),U8o=o("GPT2Model"),J8o=o(" (OpenAI GPT-2 model)"),Y8o=l(),C_=a("li"),Dce=a("strong"),K8o=o("gpt_neo"),Z8o=o(" \u2014 "),kj=a("a"),e9o=o("GPTNeoModel"),o9o=o(" (GPT Neo model)"),r9o=l(),w_=a("li"),Gce=a("strong"),t9o=o("gpt_neox"),a9o=o(" \u2014 "),Sj=a("a"),n9o=o("GPTNeoXModel"),s9o=o(" (GPT NeoX model)"),l9o=l(),A_=a("li"),Oce=a("strong"),i9o=o("gptj"),d9o=o(" \u2014 "),Rj=a("a"),c9o=o("GPTJModel"),f9o=o(" (GPT-J model)"),m9o=l(),L_=a("li"),Vce=a("strong"),g9o=o("groupvit"),h9o=o(" \u2014 "),Pj=a("a"),p9o=o("GroupViTModel"),_9o=o(" (GroupViT model)"),u9o=l(),y_=a("li"),Xce=a("strong"),b9o=o("hubert"),v9o=o(" \u2014 "),Bj=a("a"),F9o=o("HubertModel"),T9o=o(" (Hubert model)"),M9o=l(),x_=a("li"),zce=a("strong"),E9o=o("ibert"),C9o=o(" \u2014 "),Nj=a("a"),w9o=o("IBertModel"),A9o=o(" (I-BERT model)"),L9o=l(),$_=a("li"),Qce=a("strong"),y9o=o("imagegpt"),x9o=o(" \u2014 "),Ij=a("a"),$9o=o("ImageGPTModel"),k9o=o(" (ImageGPT model)"),S9o=l(),k_=a("li"),Wce=a("strong"),R9o=o("layoutlm"),P9o=o(" \u2014 "),qj=a("a"),B9o=o("LayoutLMModel"),N9o=o(" (LayoutLM model)"),I9o=l(),S_=a("li"),Hce=a("strong"),q9o=o("layoutlmv2"),j9o=o(" \u2014 "),jj=a("a"),D9o=o("LayoutLMv2Model"),G9o=o(" (LayoutLMv2 model)"),O9o=l(),R_=a("li"),Uce=a("strong"),V9o=o("layoutlmv3"),X9o=o(" \u2014 "),Dj=a("a"),z9o=o("LayoutLMv3Model"),Q9o=o(" (LayoutLMv3 model)"),W9o=l(),P_=a("li"),Jce=a("strong"),H9o=o("led"),U9o=o(" \u2014 "),Gj=a("a"),J9o=o("LEDModel"),Y9o=o(" (LED model)"),K9o=l(),B_=a("li"),Yce=a("strong"),Z9o=o("levit"),eMo=o(" \u2014 "),Oj=a("a"),oMo=o("LevitModel"),rMo=o(" (LeViT model)"),tMo=l(),N_=a("li"),Kce=a("strong"),aMo=o("longformer"),nMo=o(" \u2014 "),Vj=a("a"),sMo=o("LongformerModel"),lMo=o(" (Longformer model)"),iMo=l(),I_=a("li"),Zce=a("strong"),dMo=o("longt5"),cMo=o(" \u2014 "),Xj=a("a"),fMo=o("LongT5Model"),mMo=o(" (LongT5 model)"),gMo=l(),q_=a("li"),efe=a("strong"),hMo=o("luke"),pMo=o(" \u2014 "),zj=a("a"),_Mo=o("LukeModel"),uMo=o(" (LUKE model)"),bMo=l(),j_=a("li"),ofe=a("strong"),vMo=o("lxmert"),FMo=o(" \u2014 "),Qj=a("a"),TMo=o("LxmertModel"),MMo=o(" (LXMERT model)"),EMo=l(),D_=a("li"),rfe=a("strong"),CMo=o("m2m_100"),wMo=o(" \u2014 "),Wj=a("a"),AMo=o("M2M100Model"),LMo=o(" (M2M100 model)"),yMo=l(),G_=a("li"),tfe=a("strong"),xMo=o("marian"),$Mo=o(" \u2014 "),Hj=a("a"),kMo=o("MarianModel"),SMo=o(" (Marian model)"),RMo=l(),O_=a("li"),afe=a("strong"),PMo=o("maskformer"),BMo=o(" \u2014 "),Uj=a("a"),NMo=o("MaskFormerModel"),IMo=o(" (MaskFormer model)"),qMo=l(),V_=a("li"),nfe=a("strong"),jMo=o("mbart"),DMo=o(" \u2014 "),Jj=a("a"),GMo=o("MBartModel"),OMo=o(" (mBART model)"),VMo=l(),X_=a("li"),sfe=a("strong"),XMo=o("mctct"),zMo=o(" \u2014 "),Yj=a("a"),QMo=o("MCTCTModel"),WMo=o(" (M-CTC-T model)"),HMo=l(),z_=a("li"),lfe=a("strong"),UMo=o("megatron-bert"),JMo=o(" \u2014 "),Kj=a("a"),YMo=o("MegatronBertModel"),KMo=o(" (Megatron-BERT model)"),ZMo=l(),Q_=a("li"),ife=a("strong"),e4o=o("mobilebert"),o4o=o(" \u2014 "),Zj=a("a"),r4o=o("MobileBertModel"),t4o=o(" (MobileBERT model)"),a4o=l(),W_=a("li"),dfe=a("strong"),n4o=o("mobilevit"),s4o=o(" \u2014 "),eD=a("a"),l4o=o("MobileViTModel"),i4o=o(" (MobileViT model)"),d4o=l(),H_=a("li"),cfe=a("strong"),c4o=o("mpnet"),f4o=o(" \u2014 "),oD=a("a"),m4o=o("MPNetModel"),g4o=o(" (MPNet model)"),h4o=l(),U_=a("li"),ffe=a("strong"),p4o=o("mt5"),_4o=o(" \u2014 "),rD=a("a"),u4o=o("MT5Model"),b4o=o(" (MT5 model)"),v4o=l(),J_=a("li"),mfe=a("strong"),F4o=o("mvp"),T4o=o(" \u2014 "),tD=a("a"),M4o=o("MvpModel"),E4o=o(" (MVP model)"),C4o=l(),Y_=a("li"),gfe=a("strong"),w4o=o("nezha"),A4o=o(" \u2014 "),aD=a("a"),L4o=o("NezhaModel"),y4o=o(" (Nezha model)"),x4o=l(),K_=a("li"),hfe=a("strong"),$4o=o("nystromformer"),k4o=o(" \u2014 "),nD=a("a"),S4o=o("NystromformerModel"),R4o=o(" (Nystr\xF6mformer model)"),P4o=l(),Z_=a("li"),pfe=a("strong"),B4o=o("openai-gpt"),N4o=o(" \u2014 "),sD=a("a"),I4o=o("OpenAIGPTModel"),q4o=o(" (OpenAI GPT model)"),j4o=l(),eu=a("li"),_fe=a("strong"),D4o=o("opt"),G4o=o(" \u2014 "),lD=a("a"),O4o=o("OPTModel"),V4o=o(" (OPT model)"),X4o=l(),ou=a("li"),ufe=a("strong"),z4o=o("pegasus"),Q4o=o(" \u2014 "),iD=a("a"),W4o=o("PegasusModel"),H4o=o(" (Pegasus model)"),U4o=l(),ru=a("li"),bfe=a("strong"),J4o=o("perceiver"),Y4o=o(" \u2014 "),dD=a("a"),K4o=o("PerceiverModel"),Z4o=o(" (Perceiver model)"),eEo=l(),tu=a("li"),vfe=a("strong"),oEo=o("plbart"),rEo=o(" \u2014 "),cD=a("a"),tEo=o("PLBartModel"),aEo=o(" (PLBart model)"),nEo=l(),au=a("li"),Ffe=a("strong"),sEo=o("poolformer"),lEo=o(" \u2014 "),fD=a("a"),iEo=o("PoolFormerModel"),dEo=o(" (PoolFormer model)"),cEo=l(),nu=a("li"),Tfe=a("strong"),fEo=o("prophetnet"),mEo=o(" \u2014 "),mD=a("a"),gEo=o("ProphetNetModel"),hEo=o(" (ProphetNet model)"),pEo=l(),su=a("li"),Mfe=a("strong"),_Eo=o("qdqbert"),uEo=o(" \u2014 "),gD=a("a"),bEo=o("QDQBertModel"),vEo=o(" (QDQBert model)"),FEo=l(),lu=a("li"),Efe=a("strong"),TEo=o("reformer"),MEo=o(" \u2014 "),hD=a("a"),EEo=o("ReformerModel"),CEo=o(" (Reformer model)"),wEo=l(),iu=a("li"),Cfe=a("strong"),AEo=o("regnet"),LEo=o(" \u2014 "),pD=a("a"),yEo=o("RegNetModel"),xEo=o(" (RegNet model)"),$Eo=l(),du=a("li"),wfe=a("strong"),kEo=o("rembert"),SEo=o(" \u2014 "),_D=a("a"),REo=o("RemBertModel"),PEo=o(" (RemBERT model)"),BEo=l(),cu=a("li"),Afe=a("strong"),NEo=o("resnet"),IEo=o(" \u2014 "),uD=a("a"),qEo=o("ResNetModel"),jEo=o(" (ResNet model)"),DEo=l(),fu=a("li"),Lfe=a("strong"),GEo=o("retribert"),OEo=o(" \u2014 "),bD=a("a"),VEo=o("RetriBertModel"),XEo=o(" (RetriBERT model)"),zEo=l(),mu=a("li"),yfe=a("strong"),QEo=o("roberta"),WEo=o(" \u2014 "),vD=a("a"),HEo=o("RobertaModel"),UEo=o(" (RoBERTa model)"),JEo=l(),gu=a("li"),xfe=a("strong"),YEo=o("roformer"),KEo=o(" \u2014 "),FD=a("a"),ZEo=o("RoFormerModel"),eCo=o(" (RoFormer model)"),oCo=l(),hu=a("li"),$fe=a("strong"),rCo=o("segformer"),tCo=o(" \u2014 "),TD=a("a"),aCo=o("SegformerModel"),nCo=o(" (SegFormer model)"),sCo=l(),pu=a("li"),kfe=a("strong"),lCo=o("sew"),iCo=o(" \u2014 "),MD=a("a"),dCo=o("SEWModel"),cCo=o(" (SEW model)"),fCo=l(),_u=a("li"),Sfe=a("strong"),mCo=o("sew-d"),gCo=o(" \u2014 "),ED=a("a"),hCo=o("SEWDModel"),pCo=o(" (SEW-D model)"),_Co=l(),uu=a("li"),Rfe=a("strong"),uCo=o("speech_to_text"),bCo=o(" \u2014 "),CD=a("a"),vCo=o("Speech2TextModel"),FCo=o(" (Speech2Text model)"),TCo=l(),bu=a("li"),Pfe=a("strong"),MCo=o("splinter"),ECo=o(" \u2014 "),wD=a("a"),CCo=o("SplinterModel"),wCo=o(" (Splinter model)"),ACo=l(),vu=a("li"),Bfe=a("strong"),LCo=o("squeezebert"),yCo=o(" \u2014 "),AD=a("a"),xCo=o("SqueezeBertModel"),$Co=o(" (SqueezeBERT model)"),kCo=l(),Fu=a("li"),Nfe=a("strong"),SCo=o("swin"),RCo=o(" \u2014 "),LD=a("a"),PCo=o("SwinModel"),BCo=o(" (Swin Transformer model)"),NCo=l(),Tu=a("li"),Ife=a("strong"),ICo=o("t5"),qCo=o(" \u2014 "),yD=a("a"),jCo=o("T5Model"),DCo=o(" (T5 model)"),GCo=l(),Mu=a("li"),qfe=a("strong"),OCo=o("tapas"),VCo=o(" \u2014 "),xD=a("a"),XCo=o("TapasModel"),zCo=o(" (TAPAS model)"),QCo=l(),Eu=a("li"),jfe=a("strong"),WCo=o("trajectory_transformer"),HCo=o(" \u2014 "),$D=a("a"),UCo=o("TrajectoryTransformerModel"),JCo=o(" (Trajectory Transformer model)"),YCo=l(),Cu=a("li"),Dfe=a("strong"),KCo=o("transfo-xl"),ZCo=o(" \u2014 "),kD=a("a"),e3o=o("TransfoXLModel"),o3o=o(" (Transformer-XL model)"),r3o=l(),wu=a("li"),Gfe=a("strong"),t3o=o("unispeech"),a3o=o(" \u2014 "),SD=a("a"),n3o=o("UniSpeechModel"),s3o=o(" (UniSpeech model)"),l3o=l(),Au=a("li"),Ofe=a("strong"),i3o=o("unispeech-sat"),d3o=o(" \u2014 "),RD=a("a"),c3o=o("UniSpeechSatModel"),f3o=o(" (UniSpeechSat model)"),m3o=l(),Lu=a("li"),Vfe=a("strong"),g3o=o("van"),h3o=o(" \u2014 "),PD=a("a"),p3o=o("VanModel"),_3o=o(" (VAN model)"),u3o=l(),yu=a("li"),Xfe=a("strong"),b3o=o("vilt"),v3o=o(" \u2014 "),BD=a("a"),F3o=o("ViltModel"),T3o=o(" (ViLT model)"),M3o=l(),xu=a("li"),zfe=a("strong"),E3o=o("vision-text-dual-encoder"),C3o=o(" \u2014 "),ND=a("a"),w3o=o("VisionTextDualEncoderModel"),A3o=o(" (VisionTextDualEncoder model)"),L3o=l(),$u=a("li"),Qfe=a("strong"),y3o=o("visual_bert"),x3o=o(" \u2014 "),ID=a("a"),$3o=o("VisualBertModel"),k3o=o(" (VisualBERT model)"),S3o=l(),ku=a("li"),Wfe=a("strong"),R3o=o("vit"),P3o=o(" \u2014 "),qD=a("a"),B3o=o("ViTModel"),N3o=o(" (ViT model)"),I3o=l(),Su=a("li"),Hfe=a("strong"),q3o=o("vit_mae"),j3o=o(" \u2014 "),jD=a("a"),D3o=o("ViTMAEModel"),G3o=o(" (ViTMAE model)"),O3o=l(),Ru=a("li"),Ufe=a("strong"),V3o=o("wav2vec2"),X3o=o(" \u2014 "),DD=a("a"),z3o=o("Wav2Vec2Model"),Q3o=o(" (Wav2Vec2 model)"),W3o=l(),Pu=a("li"),Jfe=a("strong"),H3o=o("wav2vec2-conformer"),U3o=o(" \u2014 "),GD=a("a"),J3o=o("Wav2Vec2ConformerModel"),Y3o=o(" (Wav2Vec2-Conformer model)"),K3o=l(),Bu=a("li"),Yfe=a("strong"),Z3o=o("wavlm"),ewo=o(" \u2014 "),OD=a("a"),owo=o("WavLMModel"),rwo=o(" (WavLM model)"),two=l(),Nu=a("li"),Kfe=a("strong"),awo=o("xglm"),nwo=o(" \u2014 "),VD=a("a"),swo=o("XGLMModel"),lwo=o(" (XGLM model)"),iwo=l(),Iu=a("li"),Zfe=a("strong"),dwo=o("xlm"),cwo=o(" \u2014 "),XD=a("a"),fwo=o("XLMModel"),mwo=o(" (XLM model)"),gwo=l(),qu=a("li"),eme=a("strong"),hwo=o("xlm-prophetnet"),pwo=o(" \u2014 "),zD=a("a"),_wo=o("XLMProphetNetModel"),uwo=o(" (XLM-ProphetNet model)"),bwo=l(),ju=a("li"),ome=a("strong"),vwo=o("xlm-roberta"),Fwo=o(" \u2014 "),QD=a("a"),Two=o("XLMRobertaModel"),Mwo=o(" (XLM-RoBERTa model)"),Ewo=l(),Du=a("li"),rme=a("strong"),Cwo=o("xlm-roberta-xl"),wwo=o(" \u2014 "),WD=a("a"),Awo=o("XLMRobertaXLModel"),Lwo=o(" (XLM-RoBERTa-XL model)"),ywo=l(),Gu=a("li"),tme=a("strong"),xwo=o("xlnet"),$wo=o(" \u2014 "),HD=a("a"),kwo=o("XLNetModel"),Swo=o(" (XLNet model)"),Rwo=l(),Ou=a("li"),ame=a("strong"),Pwo=o("yolos"),Bwo=o(" \u2014 "),UD=a("a"),Nwo=o("YolosModel"),Iwo=o(" (YOLOS model)"),qwo=l(),Vu=a("li"),nme=a("strong"),jwo=o("yoso"),Dwo=o(" \u2014 "),JD=a("a"),Gwo=o("YosoModel"),Owo=o(" (YOSO model)"),Vwo=l(),Xu=a("p"),Xwo=o("The model is set in evaluation mode by default using "),sme=a("code"),zwo=o("model.eval()"),Qwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),Wwo=o("model.train()"),Hwo=l(),F(zu.$$.fragment),tXe=l(),Vi=a("h2"),Qu=a("a"),ime=a("span"),F(R7.$$.fragment),Uwo=l(),dme=a("span"),Jwo=o("AutoModelForPreTraining"),aXe=l(),$o=a("div"),F(P7.$$.fragment),Ywo=l(),Xi=a("p"),Kwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YD=a("a"),Zwo=o("from_pretrained()"),eAo=o(" class method or the "),KD=a("a"),oAo=o("from_config()"),rAo=o(` class
method.`),tAo=l(),B7=a("p"),aAo=o("This class cannot be instantiated directly using "),cme=a("code"),nAo=o("__init__()"),sAo=o(" (throws an error)."),lAo=l(),it=a("div"),F(N7.$$.fragment),iAo=l(),fme=a("p"),dAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cAo=l(),zi=a("p"),fAo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),mAo=o("not"),gAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),hAo=o("from_pretrained()"),pAo=o(" to load the model weights."),_Ao=l(),F(Wu.$$.fragment),uAo=l(),Ye=a("div"),F(I7.$$.fragment),bAo=l(),gme=a("p"),vAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FAo=l(),Ia=a("p"),TAo=o("The model class to instantiate is selected based on the "),hme=a("code"),MAo=o("model_type"),EAo=o(` property of the config object (either
passed as an argument or loaded from `),pme=a("code"),CAo=o("pretrained_model_name_or_path"),wAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=a("code"),AAo=o("pretrained_model_name_or_path"),LAo=o(":"),yAo=l(),G=a("ul"),Hu=a("li"),ume=a("strong"),xAo=o("albert"),$Ao=o(" \u2014 "),eG=a("a"),kAo=o("AlbertForPreTraining"),SAo=o(" (ALBERT model)"),RAo=l(),Uu=a("li"),bme=a("strong"),PAo=o("bart"),BAo=o(" \u2014 "),oG=a("a"),NAo=o("BartForConditionalGeneration"),IAo=o(" (BART model)"),qAo=l(),Ju=a("li"),vme=a("strong"),jAo=o("bert"),DAo=o(" \u2014 "),rG=a("a"),GAo=o("BertForPreTraining"),OAo=o(" (BERT model)"),VAo=l(),Yu=a("li"),Fme=a("strong"),XAo=o("big_bird"),zAo=o(" \u2014 "),tG=a("a"),QAo=o("BigBirdForPreTraining"),WAo=o(" (BigBird model)"),HAo=l(),Ku=a("li"),Tme=a("strong"),UAo=o("bloom"),JAo=o(" \u2014 "),aG=a("a"),YAo=o("BloomForCausalLM"),KAo=o(" (BLOOM model)"),ZAo=l(),Zu=a("li"),Mme=a("strong"),e6o=o("camembert"),o6o=o(" \u2014 "),nG=a("a"),r6o=o("CamembertForMaskedLM"),t6o=o(" (CamemBERT model)"),a6o=l(),e1=a("li"),Eme=a("strong"),n6o=o("ctrl"),s6o=o(" \u2014 "),sG=a("a"),l6o=o("CTRLLMHeadModel"),i6o=o(" (CTRL model)"),d6o=l(),o1=a("li"),Cme=a("strong"),c6o=o("data2vec-text"),f6o=o(" \u2014 "),lG=a("a"),m6o=o("Data2VecTextForMaskedLM"),g6o=o(" (Data2VecText model)"),h6o=l(),r1=a("li"),wme=a("strong"),p6o=o("deberta"),_6o=o(" \u2014 "),iG=a("a"),u6o=o("DebertaForMaskedLM"),b6o=o(" (DeBERTa model)"),v6o=l(),t1=a("li"),Ame=a("strong"),F6o=o("deberta-v2"),T6o=o(" \u2014 "),dG=a("a"),M6o=o("DebertaV2ForMaskedLM"),E6o=o(" (DeBERTa-v2 model)"),C6o=l(),a1=a("li"),Lme=a("strong"),w6o=o("distilbert"),A6o=o(" \u2014 "),cG=a("a"),L6o=o("DistilBertForMaskedLM"),y6o=o(" (DistilBERT model)"),x6o=l(),n1=a("li"),yme=a("strong"),$6o=o("electra"),k6o=o(" \u2014 "),fG=a("a"),S6o=o("ElectraForPreTraining"),R6o=o(" (ELECTRA model)"),P6o=l(),s1=a("li"),xme=a("strong"),B6o=o("flaubert"),N6o=o(" \u2014 "),mG=a("a"),I6o=o("FlaubertWithLMHeadModel"),q6o=o(" (FlauBERT model)"),j6o=l(),l1=a("li"),$me=a("strong"),D6o=o("flava"),G6o=o(" \u2014 "),gG=a("a"),O6o=o("FlavaForPreTraining"),V6o=o(" (FLAVA model)"),X6o=l(),i1=a("li"),kme=a("strong"),z6o=o("fnet"),Q6o=o(" \u2014 "),hG=a("a"),W6o=o("FNetForPreTraining"),H6o=o(" (FNet model)"),U6o=l(),d1=a("li"),Sme=a("strong"),J6o=o("fsmt"),Y6o=o(" \u2014 "),pG=a("a"),K6o=o("FSMTForConditionalGeneration"),Z6o=o(" (FairSeq Machine-Translation model)"),e7o=l(),c1=a("li"),Rme=a("strong"),o7o=o("funnel"),r7o=o(" \u2014 "),_G=a("a"),t7o=o("FunnelForPreTraining"),a7o=o(" (Funnel Transformer model)"),n7o=l(),f1=a("li"),Pme=a("strong"),s7o=o("gpt2"),l7o=o(" \u2014 "),uG=a("a"),i7o=o("GPT2LMHeadModel"),d7o=o(" (OpenAI GPT-2 model)"),c7o=l(),m1=a("li"),Bme=a("strong"),f7o=o("ibert"),m7o=o(" \u2014 "),bG=a("a"),g7o=o("IBertForMaskedLM"),h7o=o(" (I-BERT model)"),p7o=l(),g1=a("li"),Nme=a("strong"),_7o=o("layoutlm"),u7o=o(" \u2014 "),vG=a("a"),b7o=o("LayoutLMForMaskedLM"),v7o=o(" (LayoutLM model)"),F7o=l(),h1=a("li"),Ime=a("strong"),T7o=o("longformer"),M7o=o(" \u2014 "),FG=a("a"),E7o=o("LongformerForMaskedLM"),C7o=o(" (Longformer model)"),w7o=l(),p1=a("li"),qme=a("strong"),A7o=o("lxmert"),L7o=o(" \u2014 "),TG=a("a"),y7o=o("LxmertForPreTraining"),x7o=o(" (LXMERT model)"),$7o=l(),_1=a("li"),jme=a("strong"),k7o=o("megatron-bert"),S7o=o(" \u2014 "),MG=a("a"),R7o=o("MegatronBertForPreTraining"),P7o=o(" (Megatron-BERT model)"),B7o=l(),u1=a("li"),Dme=a("strong"),N7o=o("mobilebert"),I7o=o(" \u2014 "),EG=a("a"),q7o=o("MobileBertForPreTraining"),j7o=o(" (MobileBERT model)"),D7o=l(),b1=a("li"),Gme=a("strong"),G7o=o("mpnet"),O7o=o(" \u2014 "),CG=a("a"),V7o=o("MPNetForMaskedLM"),X7o=o(" (MPNet model)"),z7o=l(),v1=a("li"),Ome=a("strong"),Q7o=o("mvp"),W7o=o(" \u2014 "),wG=a("a"),H7o=o("MvpForConditionalGeneration"),U7o=o(" (MVP model)"),J7o=l(),F1=a("li"),Vme=a("strong"),Y7o=o("nezha"),K7o=o(" \u2014 "),AG=a("a"),Z7o=o("NezhaForPreTraining"),eLo=o(" (Nezha model)"),oLo=l(),T1=a("li"),Xme=a("strong"),rLo=o("openai-gpt"),tLo=o(" \u2014 "),LG=a("a"),aLo=o("OpenAIGPTLMHeadModel"),nLo=o(" (OpenAI GPT model)"),sLo=l(),M1=a("li"),zme=a("strong"),lLo=o("retribert"),iLo=o(" \u2014 "),yG=a("a"),dLo=o("RetriBertModel"),cLo=o(" (RetriBERT model)"),fLo=l(),E1=a("li"),Qme=a("strong"),mLo=o("roberta"),gLo=o(" \u2014 "),xG=a("a"),hLo=o("RobertaForMaskedLM"),pLo=o(" (RoBERTa model)"),_Lo=l(),C1=a("li"),Wme=a("strong"),uLo=o("splinter"),bLo=o(" \u2014 "),$G=a("a"),vLo=o("SplinterForPreTraining"),FLo=o(" (Splinter model)"),TLo=l(),w1=a("li"),Hme=a("strong"),MLo=o("squeezebert"),ELo=o(" \u2014 "),kG=a("a"),CLo=o("SqueezeBertForMaskedLM"),wLo=o(" (SqueezeBERT model)"),ALo=l(),A1=a("li"),Ume=a("strong"),LLo=o("t5"),yLo=o(" \u2014 "),SG=a("a"),xLo=o("T5ForConditionalGeneration"),$Lo=o(" (T5 model)"),kLo=l(),L1=a("li"),Jme=a("strong"),SLo=o("tapas"),RLo=o(" \u2014 "),RG=a("a"),PLo=o("TapasForMaskedLM"),BLo=o(" (TAPAS model)"),NLo=l(),y1=a("li"),Yme=a("strong"),ILo=o("transfo-xl"),qLo=o(" \u2014 "),PG=a("a"),jLo=o("TransfoXLLMHeadModel"),DLo=o(" (Transformer-XL model)"),GLo=l(),x1=a("li"),Kme=a("strong"),OLo=o("unispeech"),VLo=o(" \u2014 "),BG=a("a"),XLo=o("UniSpeechForPreTraining"),zLo=o(" (UniSpeech model)"),QLo=l(),$1=a("li"),Zme=a("strong"),WLo=o("unispeech-sat"),HLo=o(" \u2014 "),NG=a("a"),ULo=o("UniSpeechSatForPreTraining"),JLo=o(" (UniSpeechSat model)"),YLo=l(),k1=a("li"),ege=a("strong"),KLo=o("visual_bert"),ZLo=o(" \u2014 "),IG=a("a"),eyo=o("VisualBertForPreTraining"),oyo=o(" (VisualBERT model)"),ryo=l(),S1=a("li"),oge=a("strong"),tyo=o("vit_mae"),ayo=o(" \u2014 "),qG=a("a"),nyo=o("ViTMAEForPreTraining"),syo=o(" (ViTMAE model)"),lyo=l(),R1=a("li"),rge=a("strong"),iyo=o("wav2vec2"),dyo=o(" \u2014 "),jG=a("a"),cyo=o("Wav2Vec2ForPreTraining"),fyo=o(" (Wav2Vec2 model)"),myo=l(),P1=a("li"),tge=a("strong"),gyo=o("wav2vec2-conformer"),hyo=o(" \u2014 "),DG=a("a"),pyo=o("Wav2Vec2ConformerForPreTraining"),_yo=o(" (Wav2Vec2-Conformer model)"),uyo=l(),B1=a("li"),age=a("strong"),byo=o("xlm"),vyo=o(" \u2014 "),GG=a("a"),Fyo=o("XLMWithLMHeadModel"),Tyo=o(" (XLM model)"),Myo=l(),N1=a("li"),nge=a("strong"),Eyo=o("xlm-roberta"),Cyo=o(" \u2014 "),OG=a("a"),wyo=o("XLMRobertaForMaskedLM"),Ayo=o(" (XLM-RoBERTa model)"),Lyo=l(),I1=a("li"),sge=a("strong"),yyo=o("xlm-roberta-xl"),xyo=o(" \u2014 "),VG=a("a"),$yo=o("XLMRobertaXLForMaskedLM"),kyo=o(" (XLM-RoBERTa-XL model)"),Syo=l(),q1=a("li"),lge=a("strong"),Ryo=o("xlnet"),Pyo=o(" \u2014 "),XG=a("a"),Byo=o("XLNetLMHeadModel"),Nyo=o(" (XLNet model)"),Iyo=l(),j1=a("p"),qyo=o("The model is set in evaluation mode by default using "),ige=a("code"),jyo=o("model.eval()"),Dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),Gyo=o("model.train()"),Oyo=l(),F(D1.$$.fragment),nXe=l(),Qi=a("h2"),G1=a("a"),cge=a("span"),F(q7.$$.fragment),Vyo=l(),fge=a("span"),Xyo=o("AutoModelForCausalLM"),sXe=l(),ko=a("div"),F(j7.$$.fragment),zyo=l(),Wi=a("p"),Qyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zG=a("a"),Wyo=o("from_pretrained()"),Hyo=o(" class method or the "),QG=a("a"),Uyo=o("from_config()"),Jyo=o(` class
method.`),Yyo=l(),D7=a("p"),Kyo=o("This class cannot be instantiated directly using "),mge=a("code"),Zyo=o("__init__()"),exo=o(" (throws an error)."),oxo=l(),dt=a("div"),F(G7.$$.fragment),rxo=l(),gge=a("p"),txo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),axo=l(),Hi=a("p"),nxo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),sxo=o("not"),lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),ixo=o("from_pretrained()"),dxo=o(" to load the model weights."),cxo=l(),F(O1.$$.fragment),fxo=l(),Ke=a("div"),F(O7.$$.fragment),mxo=l(),pge=a("p"),gxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hxo=l(),qa=a("p"),pxo=o("The model class to instantiate is selected based on the "),_ge=a("code"),_xo=o("model_type"),uxo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),bxo=o("pretrained_model_name_or_path"),vxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),Fxo=o("pretrained_model_name_or_path"),Txo=o(":"),Mxo=l(),z=a("ul"),V1=a("li"),vge=a("strong"),Exo=o("bart"),Cxo=o(" \u2014 "),HG=a("a"),wxo=o("BartForCausalLM"),Axo=o(" (BART model)"),Lxo=l(),X1=a("li"),Fge=a("strong"),yxo=o("bert"),xxo=o(" \u2014 "),UG=a("a"),$xo=o("BertLMHeadModel"),kxo=o(" (BERT model)"),Sxo=l(),z1=a("li"),Tge=a("strong"),Rxo=o("bert-generation"),Pxo=o(" \u2014 "),JG=a("a"),Bxo=o("BertGenerationDecoder"),Nxo=o(" (Bert Generation model)"),Ixo=l(),Q1=a("li"),Mge=a("strong"),qxo=o("big_bird"),jxo=o(" \u2014 "),YG=a("a"),Dxo=o("BigBirdForCausalLM"),Gxo=o(" (BigBird model)"),Oxo=l(),W1=a("li"),Ege=a("strong"),Vxo=o("bigbird_pegasus"),Xxo=o(" \u2014 "),KG=a("a"),zxo=o("BigBirdPegasusForCausalLM"),Qxo=o(" (BigBird-Pegasus model)"),Wxo=l(),H1=a("li"),Cge=a("strong"),Hxo=o("blenderbot"),Uxo=o(" \u2014 "),ZG=a("a"),Jxo=o("BlenderbotForCausalLM"),Yxo=o(" (Blenderbot model)"),Kxo=l(),U1=a("li"),wge=a("strong"),Zxo=o("blenderbot-small"),e$o=o(" \u2014 "),eO=a("a"),o$o=o("BlenderbotSmallForCausalLM"),r$o=o(" (BlenderbotSmall model)"),t$o=l(),J1=a("li"),Age=a("strong"),a$o=o("bloom"),n$o=o(" \u2014 "),oO=a("a"),s$o=o("BloomForCausalLM"),l$o=o(" (BLOOM model)"),i$o=l(),Y1=a("li"),Lge=a("strong"),d$o=o("camembert"),c$o=o(" \u2014 "),rO=a("a"),f$o=o("CamembertForCausalLM"),m$o=o(" (CamemBERT model)"),g$o=l(),K1=a("li"),yge=a("strong"),h$o=o("codegen"),p$o=o(" \u2014 "),tO=a("a"),_$o=o("CodeGenForCausalLM"),u$o=o(" (CodeGen model)"),b$o=l(),Z1=a("li"),xge=a("strong"),v$o=o("ctrl"),F$o=o(" \u2014 "),aO=a("a"),T$o=o("CTRLLMHeadModel"),M$o=o(" (CTRL model)"),E$o=l(),e2=a("li"),$ge=a("strong"),C$o=o("data2vec-text"),w$o=o(" \u2014 "),nO=a("a"),A$o=o("Data2VecTextForCausalLM"),L$o=o(" (Data2VecText model)"),y$o=l(),o2=a("li"),kge=a("strong"),x$o=o("electra"),$$o=o(" \u2014 "),sO=a("a"),k$o=o("ElectraForCausalLM"),S$o=o(" (ELECTRA model)"),R$o=l(),r2=a("li"),Sge=a("strong"),P$o=o("gpt2"),B$o=o(" \u2014 "),lO=a("a"),N$o=o("GPT2LMHeadModel"),I$o=o(" (OpenAI GPT-2 model)"),q$o=l(),t2=a("li"),Rge=a("strong"),j$o=o("gpt_neo"),D$o=o(" \u2014 "),iO=a("a"),G$o=o("GPTNeoForCausalLM"),O$o=o(" (GPT Neo model)"),V$o=l(),a2=a("li"),Pge=a("strong"),X$o=o("gpt_neox"),z$o=o(" \u2014 "),dO=a("a"),Q$o=o("GPTNeoXForCausalLM"),W$o=o(" (GPT NeoX model)"),H$o=l(),n2=a("li"),Bge=a("strong"),U$o=o("gptj"),J$o=o(" \u2014 "),cO=a("a"),Y$o=o("GPTJForCausalLM"),K$o=o(" (GPT-J model)"),Z$o=l(),s2=a("li"),Nge=a("strong"),eko=o("marian"),oko=o(" \u2014 "),fO=a("a"),rko=o("MarianForCausalLM"),tko=o(" (Marian model)"),ako=l(),l2=a("li"),Ige=a("strong"),nko=o("mbart"),sko=o(" \u2014 "),mO=a("a"),lko=o("MBartForCausalLM"),iko=o(" (mBART model)"),dko=l(),i2=a("li"),qge=a("strong"),cko=o("megatron-bert"),fko=o(" \u2014 "),gO=a("a"),mko=o("MegatronBertForCausalLM"),gko=o(" (Megatron-BERT model)"),hko=l(),d2=a("li"),jge=a("strong"),pko=o("mvp"),_ko=o(" \u2014 "),hO=a("a"),uko=o("MvpForCausalLM"),bko=o(" (MVP model)"),vko=l(),c2=a("li"),Dge=a("strong"),Fko=o("openai-gpt"),Tko=o(" \u2014 "),pO=a("a"),Mko=o("OpenAIGPTLMHeadModel"),Eko=o(" (OpenAI GPT model)"),Cko=l(),f2=a("li"),Gge=a("strong"),wko=o("opt"),Ako=o(" \u2014 "),_O=a("a"),Lko=o("OPTForCausalLM"),yko=o(" (OPT model)"),xko=l(),m2=a("li"),Oge=a("strong"),$ko=o("pegasus"),kko=o(" \u2014 "),uO=a("a"),Sko=o("PegasusForCausalLM"),Rko=o(" (Pegasus model)"),Pko=l(),g2=a("li"),Vge=a("strong"),Bko=o("plbart"),Nko=o(" \u2014 "),bO=a("a"),Iko=o("PLBartForCausalLM"),qko=o(" (PLBart model)"),jko=l(),h2=a("li"),Xge=a("strong"),Dko=o("prophetnet"),Gko=o(" \u2014 "),vO=a("a"),Oko=o("ProphetNetForCausalLM"),Vko=o(" (ProphetNet model)"),Xko=l(),p2=a("li"),zge=a("strong"),zko=o("qdqbert"),Qko=o(" \u2014 "),FO=a("a"),Wko=o("QDQBertLMHeadModel"),Hko=o(" (QDQBert model)"),Uko=l(),_2=a("li"),Qge=a("strong"),Jko=o("reformer"),Yko=o(" \u2014 "),TO=a("a"),Kko=o("ReformerModelWithLMHead"),Zko=o(" (Reformer model)"),eSo=l(),u2=a("li"),Wge=a("strong"),oSo=o("rembert"),rSo=o(" \u2014 "),MO=a("a"),tSo=o("RemBertForCausalLM"),aSo=o(" (RemBERT model)"),nSo=l(),b2=a("li"),Hge=a("strong"),sSo=o("roberta"),lSo=o(" \u2014 "),EO=a("a"),iSo=o("RobertaForCausalLM"),dSo=o(" (RoBERTa model)"),cSo=l(),v2=a("li"),Uge=a("strong"),fSo=o("roformer"),mSo=o(" \u2014 "),CO=a("a"),gSo=o("RoFormerForCausalLM"),hSo=o(" (RoFormer model)"),pSo=l(),F2=a("li"),Jge=a("strong"),_So=o("speech_to_text_2"),uSo=o(" \u2014 "),wO=a("a"),bSo=o("Speech2Text2ForCausalLM"),vSo=o(" (Speech2Text2 model)"),FSo=l(),T2=a("li"),Yge=a("strong"),TSo=o("transfo-xl"),MSo=o(" \u2014 "),AO=a("a"),ESo=o("TransfoXLLMHeadModel"),CSo=o(" (Transformer-XL model)"),wSo=l(),M2=a("li"),Kge=a("strong"),ASo=o("trocr"),LSo=o(" \u2014 "),LO=a("a"),ySo=o("TrOCRForCausalLM"),xSo=o(" (TrOCR model)"),$So=l(),E2=a("li"),Zge=a("strong"),kSo=o("xglm"),SSo=o(" \u2014 "),yO=a("a"),RSo=o("XGLMForCausalLM"),PSo=o(" (XGLM model)"),BSo=l(),C2=a("li"),ehe=a("strong"),NSo=o("xlm"),ISo=o(" \u2014 "),xO=a("a"),qSo=o("XLMWithLMHeadModel"),jSo=o(" (XLM model)"),DSo=l(),w2=a("li"),ohe=a("strong"),GSo=o("xlm-prophetnet"),OSo=o(" \u2014 "),$O=a("a"),VSo=o("XLMProphetNetForCausalLM"),XSo=o(" (XLM-ProphetNet model)"),zSo=l(),A2=a("li"),rhe=a("strong"),QSo=o("xlm-roberta"),WSo=o(" \u2014 "),kO=a("a"),HSo=o("XLMRobertaForCausalLM"),USo=o(" (XLM-RoBERTa model)"),JSo=l(),L2=a("li"),the=a("strong"),YSo=o("xlm-roberta-xl"),KSo=o(" \u2014 "),SO=a("a"),ZSo=o("XLMRobertaXLForCausalLM"),eRo=o(" (XLM-RoBERTa-XL model)"),oRo=l(),y2=a("li"),ahe=a("strong"),rRo=o("xlnet"),tRo=o(" \u2014 "),RO=a("a"),aRo=o("XLNetLMHeadModel"),nRo=o(" (XLNet model)"),sRo=l(),x2=a("p"),lRo=o("The model is set in evaluation mode by default using "),nhe=a("code"),iRo=o("model.eval()"),dRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),cRo=o("model.train()"),fRo=l(),F($2.$$.fragment),lXe=l(),Ui=a("h2"),k2=a("a"),lhe=a("span"),F(V7.$$.fragment),mRo=l(),ihe=a("span"),gRo=o("AutoModelForMaskedLM"),iXe=l(),So=a("div"),F(X7.$$.fragment),hRo=l(),Ji=a("p"),pRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PO=a("a"),_Ro=o("from_pretrained()"),uRo=o(" class method or the "),BO=a("a"),bRo=o("from_config()"),vRo=o(` class
method.`),FRo=l(),z7=a("p"),TRo=o("This class cannot be instantiated directly using "),dhe=a("code"),MRo=o("__init__()"),ERo=o(" (throws an error)."),CRo=l(),ct=a("div"),F(Q7.$$.fragment),wRo=l(),che=a("p"),ARo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LRo=l(),Yi=a("p"),yRo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),xRo=o("not"),$Ro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),kRo=o("from_pretrained()"),SRo=o(" to load the model weights."),RRo=l(),F(S2.$$.fragment),PRo=l(),Ze=a("div"),F(W7.$$.fragment),BRo=l(),mhe=a("p"),NRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),IRo=l(),ja=a("p"),qRo=o("The model class to instantiate is selected based on the "),ghe=a("code"),jRo=o("model_type"),DRo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),GRo=o("pretrained_model_name_or_path"),ORo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),VRo=o("pretrained_model_name_or_path"),XRo=o(":"),zRo=l(),W=a("ul"),R2=a("li"),_he=a("strong"),QRo=o("albert"),WRo=o(" \u2014 "),IO=a("a"),HRo=o("AlbertForMaskedLM"),URo=o(" (ALBERT model)"),JRo=l(),P2=a("li"),uhe=a("strong"),YRo=o("bart"),KRo=o(" \u2014 "),qO=a("a"),ZRo=o("BartForConditionalGeneration"),ePo=o(" (BART model)"),oPo=l(),B2=a("li"),bhe=a("strong"),rPo=o("bert"),tPo=o(" \u2014 "),jO=a("a"),aPo=o("BertForMaskedLM"),nPo=o(" (BERT model)"),sPo=l(),N2=a("li"),vhe=a("strong"),lPo=o("big_bird"),iPo=o(" \u2014 "),DO=a("a"),dPo=o("BigBirdForMaskedLM"),cPo=o(" (BigBird model)"),fPo=l(),I2=a("li"),Fhe=a("strong"),mPo=o("camembert"),gPo=o(" \u2014 "),GO=a("a"),hPo=o("CamembertForMaskedLM"),pPo=o(" (CamemBERT model)"),_Po=l(),q2=a("li"),The=a("strong"),uPo=o("convbert"),bPo=o(" \u2014 "),OO=a("a"),vPo=o("ConvBertForMaskedLM"),FPo=o(" (ConvBERT model)"),TPo=l(),j2=a("li"),Mhe=a("strong"),MPo=o("data2vec-text"),EPo=o(" \u2014 "),VO=a("a"),CPo=o("Data2VecTextForMaskedLM"),wPo=o(" (Data2VecText model)"),APo=l(),D2=a("li"),Ehe=a("strong"),LPo=o("deberta"),yPo=o(" \u2014 "),XO=a("a"),xPo=o("DebertaForMaskedLM"),$Po=o(" (DeBERTa model)"),kPo=l(),G2=a("li"),Che=a("strong"),SPo=o("deberta-v2"),RPo=o(" \u2014 "),zO=a("a"),PPo=o("DebertaV2ForMaskedLM"),BPo=o(" (DeBERTa-v2 model)"),NPo=l(),O2=a("li"),whe=a("strong"),IPo=o("distilbert"),qPo=o(" \u2014 "),QO=a("a"),jPo=o("DistilBertForMaskedLM"),DPo=o(" (DistilBERT model)"),GPo=l(),V2=a("li"),Ahe=a("strong"),OPo=o("electra"),VPo=o(" \u2014 "),WO=a("a"),XPo=o("ElectraForMaskedLM"),zPo=o(" (ELECTRA model)"),QPo=l(),X2=a("li"),Lhe=a("strong"),WPo=o("flaubert"),HPo=o(" \u2014 "),HO=a("a"),UPo=o("FlaubertWithLMHeadModel"),JPo=o(" (FlauBERT model)"),YPo=l(),z2=a("li"),yhe=a("strong"),KPo=o("fnet"),ZPo=o(" \u2014 "),UO=a("a"),eBo=o("FNetForMaskedLM"),oBo=o(" (FNet model)"),rBo=l(),Q2=a("li"),xhe=a("strong"),tBo=o("funnel"),aBo=o(" \u2014 "),JO=a("a"),nBo=o("FunnelForMaskedLM"),sBo=o(" (Funnel Transformer model)"),lBo=l(),W2=a("li"),$he=a("strong"),iBo=o("ibert"),dBo=o(" \u2014 "),YO=a("a"),cBo=o("IBertForMaskedLM"),fBo=o(" (I-BERT model)"),mBo=l(),H2=a("li"),khe=a("strong"),gBo=o("layoutlm"),hBo=o(" \u2014 "),KO=a("a"),pBo=o("LayoutLMForMaskedLM"),_Bo=o(" (LayoutLM model)"),uBo=l(),U2=a("li"),She=a("strong"),bBo=o("longformer"),vBo=o(" \u2014 "),ZO=a("a"),FBo=o("LongformerForMaskedLM"),TBo=o(" (Longformer model)"),MBo=l(),J2=a("li"),Rhe=a("strong"),EBo=o("luke"),CBo=o(" \u2014 "),eV=a("a"),wBo=o("LukeForMaskedLM"),ABo=o(" (LUKE model)"),LBo=l(),Y2=a("li"),Phe=a("strong"),yBo=o("mbart"),xBo=o(" \u2014 "),oV=a("a"),$Bo=o("MBartForConditionalGeneration"),kBo=o(" (mBART model)"),SBo=l(),K2=a("li"),Bhe=a("strong"),RBo=o("megatron-bert"),PBo=o(" \u2014 "),rV=a("a"),BBo=o("MegatronBertForMaskedLM"),NBo=o(" (Megatron-BERT model)"),IBo=l(),Z2=a("li"),Nhe=a("strong"),qBo=o("mobilebert"),jBo=o(" \u2014 "),tV=a("a"),DBo=o("MobileBertForMaskedLM"),GBo=o(" (MobileBERT model)"),OBo=l(),eb=a("li"),Ihe=a("strong"),VBo=o("mpnet"),XBo=o(" \u2014 "),aV=a("a"),zBo=o("MPNetForMaskedLM"),QBo=o(" (MPNet model)"),WBo=l(),ob=a("li"),qhe=a("strong"),HBo=o("mvp"),UBo=o(" \u2014 "),nV=a("a"),JBo=o("MvpForConditionalGeneration"),YBo=o(" (MVP model)"),KBo=l(),rb=a("li"),jhe=a("strong"),ZBo=o("nezha"),eNo=o(" \u2014 "),sV=a("a"),oNo=o("NezhaForMaskedLM"),rNo=o(" (Nezha model)"),tNo=l(),tb=a("li"),Dhe=a("strong"),aNo=o("nystromformer"),nNo=o(" \u2014 "),lV=a("a"),sNo=o("NystromformerForMaskedLM"),lNo=o(" (Nystr\xF6mformer model)"),iNo=l(),ab=a("li"),Ghe=a("strong"),dNo=o("perceiver"),cNo=o(" \u2014 "),iV=a("a"),fNo=o("PerceiverForMaskedLM"),mNo=o(" (Perceiver model)"),gNo=l(),nb=a("li"),Ohe=a("strong"),hNo=o("qdqbert"),pNo=o(" \u2014 "),dV=a("a"),_No=o("QDQBertForMaskedLM"),uNo=o(" (QDQBert model)"),bNo=l(),sb=a("li"),Vhe=a("strong"),vNo=o("reformer"),FNo=o(" \u2014 "),cV=a("a"),TNo=o("ReformerForMaskedLM"),MNo=o(" (Reformer model)"),ENo=l(),lb=a("li"),Xhe=a("strong"),CNo=o("rembert"),wNo=o(" \u2014 "),fV=a("a"),ANo=o("RemBertForMaskedLM"),LNo=o(" (RemBERT model)"),yNo=l(),ib=a("li"),zhe=a("strong"),xNo=o("roberta"),$No=o(" \u2014 "),mV=a("a"),kNo=o("RobertaForMaskedLM"),SNo=o(" (RoBERTa model)"),RNo=l(),db=a("li"),Qhe=a("strong"),PNo=o("roformer"),BNo=o(" \u2014 "),gV=a("a"),NNo=o("RoFormerForMaskedLM"),INo=o(" (RoFormer model)"),qNo=l(),cb=a("li"),Whe=a("strong"),jNo=o("squeezebert"),DNo=o(" \u2014 "),hV=a("a"),GNo=o("SqueezeBertForMaskedLM"),ONo=o(" (SqueezeBERT model)"),VNo=l(),fb=a("li"),Hhe=a("strong"),XNo=o("tapas"),zNo=o(" \u2014 "),pV=a("a"),QNo=o("TapasForMaskedLM"),WNo=o(" (TAPAS model)"),HNo=l(),mb=a("li"),Uhe=a("strong"),UNo=o("wav2vec2"),JNo=o(" \u2014 "),Jhe=a("code"),YNo=o("Wav2Vec2ForMaskedLM"),KNo=o(" (Wav2Vec2 model)"),ZNo=l(),gb=a("li"),Yhe=a("strong"),eIo=o("xlm"),oIo=o(" \u2014 "),_V=a("a"),rIo=o("XLMWithLMHeadModel"),tIo=o(" (XLM model)"),aIo=l(),hb=a("li"),Khe=a("strong"),nIo=o("xlm-roberta"),sIo=o(" \u2014 "),uV=a("a"),lIo=o("XLMRobertaForMaskedLM"),iIo=o(" (XLM-RoBERTa model)"),dIo=l(),pb=a("li"),Zhe=a("strong"),cIo=o("xlm-roberta-xl"),fIo=o(" \u2014 "),bV=a("a"),mIo=o("XLMRobertaXLForMaskedLM"),gIo=o(" (XLM-RoBERTa-XL model)"),hIo=l(),_b=a("li"),epe=a("strong"),pIo=o("yoso"),_Io=o(" \u2014 "),vV=a("a"),uIo=o("YosoForMaskedLM"),bIo=o(" (YOSO model)"),vIo=l(),ub=a("p"),FIo=o("The model is set in evaluation mode by default using "),ope=a("code"),TIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),EIo=o("model.train()"),CIo=l(),F(bb.$$.fragment),dXe=l(),Ki=a("h2"),vb=a("a"),tpe=a("span"),F(H7.$$.fragment),wIo=l(),ape=a("span"),AIo=o("AutoModelForSeq2SeqLM"),cXe=l(),Ro=a("div"),F(U7.$$.fragment),LIo=l(),Zi=a("p"),yIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FV=a("a"),xIo=o("from_pretrained()"),$Io=o(" class method or the "),TV=a("a"),kIo=o("from_config()"),SIo=o(` class
method.`),RIo=l(),J7=a("p"),PIo=o("This class cannot be instantiated directly using "),npe=a("code"),BIo=o("__init__()"),NIo=o(" (throws an error)."),IIo=l(),ft=a("div"),F(Y7.$$.fragment),qIo=l(),spe=a("p"),jIo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DIo=l(),ed=a("p"),GIo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),OIo=o("not"),VIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),XIo=o("from_pretrained()"),zIo=o(" to load the model weights."),QIo=l(),F(Fb.$$.fragment),WIo=l(),eo=a("div"),F(K7.$$.fragment),HIo=l(),ipe=a("p"),UIo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JIo=l(),Da=a("p"),YIo=o("The model class to instantiate is selected based on the "),dpe=a("code"),KIo=o("model_type"),ZIo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(":"),aqo=l(),pe=a("ul"),Tb=a("li"),mpe=a("strong"),nqo=o("bart"),sqo=o(" \u2014 "),EV=a("a"),lqo=o("BartForConditionalGeneration"),iqo=o(" (BART model)"),dqo=l(),Mb=a("li"),gpe=a("strong"),cqo=o("bigbird_pegasus"),fqo=o(" \u2014 "),CV=a("a"),mqo=o("BigBirdPegasusForConditionalGeneration"),gqo=o(" (BigBird-Pegasus model)"),hqo=l(),Eb=a("li"),hpe=a("strong"),pqo=o("blenderbot"),_qo=o(" \u2014 "),wV=a("a"),uqo=o("BlenderbotForConditionalGeneration"),bqo=o(" (Blenderbot model)"),vqo=l(),Cb=a("li"),ppe=a("strong"),Fqo=o("blenderbot-small"),Tqo=o(" \u2014 "),AV=a("a"),Mqo=o("BlenderbotSmallForConditionalGeneration"),Eqo=o(" (BlenderbotSmall model)"),Cqo=l(),wb=a("li"),_pe=a("strong"),wqo=o("encoder-decoder"),Aqo=o(" \u2014 "),LV=a("a"),Lqo=o("EncoderDecoderModel"),yqo=o(" (Encoder decoder model)"),xqo=l(),Ab=a("li"),upe=a("strong"),$qo=o("fsmt"),kqo=o(" \u2014 "),yV=a("a"),Sqo=o("FSMTForConditionalGeneration"),Rqo=o(" (FairSeq Machine-Translation model)"),Pqo=l(),Lb=a("li"),bpe=a("strong"),Bqo=o("led"),Nqo=o(" \u2014 "),xV=a("a"),Iqo=o("LEDForConditionalGeneration"),qqo=o(" (LED model)"),jqo=l(),yb=a("li"),vpe=a("strong"),Dqo=o("longt5"),Gqo=o(" \u2014 "),$V=a("a"),Oqo=o("LongT5ForConditionalGeneration"),Vqo=o(" (LongT5 model)"),Xqo=l(),xb=a("li"),Fpe=a("strong"),zqo=o("m2m_100"),Qqo=o(" \u2014 "),kV=a("a"),Wqo=o("M2M100ForConditionalGeneration"),Hqo=o(" (M2M100 model)"),Uqo=l(),$b=a("li"),Tpe=a("strong"),Jqo=o("marian"),Yqo=o(" \u2014 "),SV=a("a"),Kqo=o("MarianMTModel"),Zqo=o(" (Marian model)"),ejo=l(),kb=a("li"),Mpe=a("strong"),ojo=o("mbart"),rjo=o(" \u2014 "),RV=a("a"),tjo=o("MBartForConditionalGeneration"),ajo=o(" (mBART model)"),njo=l(),Sb=a("li"),Epe=a("strong"),sjo=o("mt5"),ljo=o(" \u2014 "),PV=a("a"),ijo=o("MT5ForConditionalGeneration"),djo=o(" (MT5 model)"),cjo=l(),Rb=a("li"),Cpe=a("strong"),fjo=o("mvp"),mjo=o(" \u2014 "),BV=a("a"),gjo=o("MvpForConditionalGeneration"),hjo=o(" (MVP model)"),pjo=l(),Pb=a("li"),wpe=a("strong"),_jo=o("pegasus"),ujo=o(" \u2014 "),NV=a("a"),bjo=o("PegasusForConditionalGeneration"),vjo=o(" (Pegasus model)"),Fjo=l(),Bb=a("li"),Ape=a("strong"),Tjo=o("plbart"),Mjo=o(" \u2014 "),IV=a("a"),Ejo=o("PLBartForConditionalGeneration"),Cjo=o(" (PLBart model)"),wjo=l(),Nb=a("li"),Lpe=a("strong"),Ajo=o("prophetnet"),Ljo=o(" \u2014 "),qV=a("a"),yjo=o("ProphetNetForConditionalGeneration"),xjo=o(" (ProphetNet model)"),$jo=l(),Ib=a("li"),ype=a("strong"),kjo=o("t5"),Sjo=o(" \u2014 "),jV=a("a"),Rjo=o("T5ForConditionalGeneration"),Pjo=o(" (T5 model)"),Bjo=l(),qb=a("li"),xpe=a("strong"),Njo=o("xlm-prophetnet"),Ijo=o(" \u2014 "),DV=a("a"),qjo=o("XLMProphetNetForConditionalGeneration"),jjo=o(" (XLM-ProphetNet model)"),Djo=l(),jb=a("p"),Gjo=o("The model is set in evaluation mode by default using "),$pe=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),Xjo=o("model.train()"),zjo=l(),F(Db.$$.fragment),fXe=l(),od=a("h2"),Gb=a("a"),Spe=a("span"),F(Z7.$$.fragment),Qjo=l(),Rpe=a("span"),Wjo=o("AutoModelForSequenceClassification"),mXe=l(),Po=a("div"),F(eL.$$.fragment),Hjo=l(),rd=a("p"),Ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GV=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),OV=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),oL=a("p"),oDo=o("This class cannot be instantiated directly using "),Ppe=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),mt=a("div"),F(rL.$$.fragment),nDo=l(),Bpe=a("p"),sDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lDo=l(),td=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),fDo=o("from_pretrained()"),mDo=o(" to load the model weights."),gDo=l(),F(Ob.$$.fragment),hDo=l(),oo=a("div"),F(tL.$$.fragment),pDo=l(),Ipe=a("p"),_Do=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uDo=l(),Ga=a("p"),bDo=o("The model class to instantiate is selected based on the "),qpe=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),I=a("ul"),Vb=a("li"),Gpe=a("strong"),ADo=o("albert"),LDo=o(" \u2014 "),XV=a("a"),yDo=o("AlbertForSequenceClassification"),xDo=o(" (ALBERT model)"),$Do=l(),Xb=a("li"),Ope=a("strong"),kDo=o("bart"),SDo=o(" \u2014 "),zV=a("a"),RDo=o("BartForSequenceClassification"),PDo=o(" (BART model)"),BDo=l(),zb=a("li"),Vpe=a("strong"),NDo=o("bert"),IDo=o(" \u2014 "),QV=a("a"),qDo=o("BertForSequenceClassification"),jDo=o(" (BERT model)"),DDo=l(),Qb=a("li"),Xpe=a("strong"),GDo=o("big_bird"),ODo=o(" \u2014 "),WV=a("a"),VDo=o("BigBirdForSequenceClassification"),XDo=o(" (BigBird model)"),zDo=l(),Wb=a("li"),zpe=a("strong"),QDo=o("bigbird_pegasus"),WDo=o(" \u2014 "),HV=a("a"),HDo=o("BigBirdPegasusForSequenceClassification"),UDo=o(" (BigBird-Pegasus model)"),JDo=l(),Hb=a("li"),Qpe=a("strong"),YDo=o("bloom"),KDo=o(" \u2014 "),UV=a("a"),ZDo=o("BloomForSequenceClassification"),eGo=o(" (BLOOM model)"),oGo=l(),Ub=a("li"),Wpe=a("strong"),rGo=o("camembert"),tGo=o(" \u2014 "),JV=a("a"),aGo=o("CamembertForSequenceClassification"),nGo=o(" (CamemBERT model)"),sGo=l(),Jb=a("li"),Hpe=a("strong"),lGo=o("canine"),iGo=o(" \u2014 "),YV=a("a"),dGo=o("CanineForSequenceClassification"),cGo=o(" (CANINE model)"),fGo=l(),Yb=a("li"),Upe=a("strong"),mGo=o("convbert"),gGo=o(" \u2014 "),KV=a("a"),hGo=o("ConvBertForSequenceClassification"),pGo=o(" (ConvBERT model)"),_Go=l(),Kb=a("li"),Jpe=a("strong"),uGo=o("ctrl"),bGo=o(" \u2014 "),ZV=a("a"),vGo=o("CTRLForSequenceClassification"),FGo=o(" (CTRL model)"),TGo=l(),Zb=a("li"),Ype=a("strong"),MGo=o("data2vec-text"),EGo=o(" \u2014 "),eX=a("a"),CGo=o("Data2VecTextForSequenceClassification"),wGo=o(" (Data2VecText model)"),AGo=l(),ev=a("li"),Kpe=a("strong"),LGo=o("deberta"),yGo=o(" \u2014 "),oX=a("a"),xGo=o("DebertaForSequenceClassification"),$Go=o(" (DeBERTa model)"),kGo=l(),ov=a("li"),Zpe=a("strong"),SGo=o("deberta-v2"),RGo=o(" \u2014 "),rX=a("a"),PGo=o("DebertaV2ForSequenceClassification"),BGo=o(" (DeBERTa-v2 model)"),NGo=l(),rv=a("li"),e_e=a("strong"),IGo=o("distilbert"),qGo=o(" \u2014 "),tX=a("a"),jGo=o("DistilBertForSequenceClassification"),DGo=o(" (DistilBERT model)"),GGo=l(),tv=a("li"),o_e=a("strong"),OGo=o("electra"),VGo=o(" \u2014 "),aX=a("a"),XGo=o("ElectraForSequenceClassification"),zGo=o(" (ELECTRA model)"),QGo=l(),av=a("li"),r_e=a("strong"),WGo=o("flaubert"),HGo=o(" \u2014 "),nX=a("a"),UGo=o("FlaubertForSequenceClassification"),JGo=o(" (FlauBERT model)"),YGo=l(),nv=a("li"),t_e=a("strong"),KGo=o("fnet"),ZGo=o(" \u2014 "),sX=a("a"),eOo=o("FNetForSequenceClassification"),oOo=o(" (FNet model)"),rOo=l(),sv=a("li"),a_e=a("strong"),tOo=o("funnel"),aOo=o(" \u2014 "),lX=a("a"),nOo=o("FunnelForSequenceClassification"),sOo=o(" (Funnel Transformer model)"),lOo=l(),lv=a("li"),n_e=a("strong"),iOo=o("gpt2"),dOo=o(" \u2014 "),iX=a("a"),cOo=o("GPT2ForSequenceClassification"),fOo=o(" (OpenAI GPT-2 model)"),mOo=l(),iv=a("li"),s_e=a("strong"),gOo=o("gpt_neo"),hOo=o(" \u2014 "),dX=a("a"),pOo=o("GPTNeoForSequenceClassification"),_Oo=o(" (GPT Neo model)"),uOo=l(),dv=a("li"),l_e=a("strong"),bOo=o("gptj"),vOo=o(" \u2014 "),cX=a("a"),FOo=o("GPTJForSequenceClassification"),TOo=o(" (GPT-J model)"),MOo=l(),cv=a("li"),i_e=a("strong"),EOo=o("ibert"),COo=o(" \u2014 "),fX=a("a"),wOo=o("IBertForSequenceClassification"),AOo=o(" (I-BERT model)"),LOo=l(),fv=a("li"),d_e=a("strong"),yOo=o("layoutlm"),xOo=o(" \u2014 "),mX=a("a"),$Oo=o("LayoutLMForSequenceClassification"),kOo=o(" (LayoutLM model)"),SOo=l(),mv=a("li"),c_e=a("strong"),ROo=o("layoutlmv2"),POo=o(" \u2014 "),gX=a("a"),BOo=o("LayoutLMv2ForSequenceClassification"),NOo=o(" (LayoutLMv2 model)"),IOo=l(),gv=a("li"),f_e=a("strong"),qOo=o("layoutlmv3"),jOo=o(" \u2014 "),hX=a("a"),DOo=o("LayoutLMv3ForSequenceClassification"),GOo=o(" (LayoutLMv3 model)"),OOo=l(),hv=a("li"),m_e=a("strong"),VOo=o("led"),XOo=o(" \u2014 "),pX=a("a"),zOo=o("LEDForSequenceClassification"),QOo=o(" (LED model)"),WOo=l(),pv=a("li"),g_e=a("strong"),HOo=o("longformer"),UOo=o(" \u2014 "),_X=a("a"),JOo=o("LongformerForSequenceClassification"),YOo=o(" (Longformer model)"),KOo=l(),_v=a("li"),h_e=a("strong"),ZOo=o("mbart"),eVo=o(" \u2014 "),uX=a("a"),oVo=o("MBartForSequenceClassification"),rVo=o(" (mBART model)"),tVo=l(),uv=a("li"),p_e=a("strong"),aVo=o("megatron-bert"),nVo=o(" \u2014 "),bX=a("a"),sVo=o("MegatronBertForSequenceClassification"),lVo=o(" (Megatron-BERT model)"),iVo=l(),bv=a("li"),__e=a("strong"),dVo=o("mobilebert"),cVo=o(" \u2014 "),vX=a("a"),fVo=o("MobileBertForSequenceClassification"),mVo=o(" (MobileBERT model)"),gVo=l(),vv=a("li"),u_e=a("strong"),hVo=o("mpnet"),pVo=o(" \u2014 "),FX=a("a"),_Vo=o("MPNetForSequenceClassification"),uVo=o(" (MPNet model)"),bVo=l(),Fv=a("li"),b_e=a("strong"),vVo=o("mvp"),FVo=o(" \u2014 "),TX=a("a"),TVo=o("MvpForSequenceClassification"),MVo=o(" (MVP model)"),EVo=l(),Tv=a("li"),v_e=a("strong"),CVo=o("nezha"),wVo=o(" \u2014 "),MX=a("a"),AVo=o("NezhaForSequenceClassification"),LVo=o(" (Nezha model)"),yVo=l(),Mv=a("li"),F_e=a("strong"),xVo=o("nystromformer"),$Vo=o(" \u2014 "),EX=a("a"),kVo=o("NystromformerForSequenceClassification"),SVo=o(" (Nystr\xF6mformer model)"),RVo=l(),Ev=a("li"),T_e=a("strong"),PVo=o("openai-gpt"),BVo=o(" \u2014 "),CX=a("a"),NVo=o("OpenAIGPTForSequenceClassification"),IVo=o(" (OpenAI GPT model)"),qVo=l(),Cv=a("li"),M_e=a("strong"),jVo=o("perceiver"),DVo=o(" \u2014 "),wX=a("a"),GVo=o("PerceiverForSequenceClassification"),OVo=o(" (Perceiver model)"),VVo=l(),wv=a("li"),E_e=a("strong"),XVo=o("plbart"),zVo=o(" \u2014 "),AX=a("a"),QVo=o("PLBartForSequenceClassification"),WVo=o(" (PLBart model)"),HVo=l(),Av=a("li"),C_e=a("strong"),UVo=o("qdqbert"),JVo=o(" \u2014 "),LX=a("a"),YVo=o("QDQBertForSequenceClassification"),KVo=o(" (QDQBert model)"),ZVo=l(),Lv=a("li"),w_e=a("strong"),eXo=o("reformer"),oXo=o(" \u2014 "),yX=a("a"),rXo=o("ReformerForSequenceClassification"),tXo=o(" (Reformer model)"),aXo=l(),yv=a("li"),A_e=a("strong"),nXo=o("rembert"),sXo=o(" \u2014 "),xX=a("a"),lXo=o("RemBertForSequenceClassification"),iXo=o(" (RemBERT model)"),dXo=l(),xv=a("li"),L_e=a("strong"),cXo=o("roberta"),fXo=o(" \u2014 "),$X=a("a"),mXo=o("RobertaForSequenceClassification"),gXo=o(" (RoBERTa model)"),hXo=l(),$v=a("li"),y_e=a("strong"),pXo=o("roformer"),_Xo=o(" \u2014 "),kX=a("a"),uXo=o("RoFormerForSequenceClassification"),bXo=o(" (RoFormer model)"),vXo=l(),kv=a("li"),x_e=a("strong"),FXo=o("squeezebert"),TXo=o(" \u2014 "),SX=a("a"),MXo=o("SqueezeBertForSequenceClassification"),EXo=o(" (SqueezeBERT model)"),CXo=l(),Sv=a("li"),$_e=a("strong"),wXo=o("tapas"),AXo=o(" \u2014 "),RX=a("a"),LXo=o("TapasForSequenceClassification"),yXo=o(" (TAPAS model)"),xXo=l(),Rv=a("li"),k_e=a("strong"),$Xo=o("transfo-xl"),kXo=o(" \u2014 "),PX=a("a"),SXo=o("TransfoXLForSequenceClassification"),RXo=o(" (Transformer-XL model)"),PXo=l(),Pv=a("li"),S_e=a("strong"),BXo=o("xlm"),NXo=o(" \u2014 "),BX=a("a"),IXo=o("XLMForSequenceClassification"),qXo=o(" (XLM model)"),jXo=l(),Bv=a("li"),R_e=a("strong"),DXo=o("xlm-roberta"),GXo=o(" \u2014 "),NX=a("a"),OXo=o("XLMRobertaForSequenceClassification"),VXo=o(" (XLM-RoBERTa model)"),XXo=l(),Nv=a("li"),P_e=a("strong"),zXo=o("xlm-roberta-xl"),QXo=o(" \u2014 "),IX=a("a"),WXo=o("XLMRobertaXLForSequenceClassification"),HXo=o(" (XLM-RoBERTa-XL model)"),UXo=l(),Iv=a("li"),B_e=a("strong"),JXo=o("xlnet"),YXo=o(" \u2014 "),qX=a("a"),KXo=o("XLNetForSequenceClassification"),ZXo=o(" (XLNet model)"),ezo=l(),qv=a("li"),N_e=a("strong"),ozo=o("yoso"),rzo=o(" \u2014 "),jX=a("a"),tzo=o("YosoForSequenceClassification"),azo=o(" (YOSO model)"),nzo=l(),jv=a("p"),szo=o("The model is set in evaluation mode by default using "),I_e=a("code"),lzo=o("model.eval()"),izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),dzo=o("model.train()"),czo=l(),F(Dv.$$.fragment),gXe=l(),ad=a("h2"),Gv=a("a"),j_e=a("span"),F(aL.$$.fragment),fzo=l(),D_e=a("span"),mzo=o("AutoModelForMultipleChoice"),hXe=l(),Bo=a("div"),F(nL.$$.fragment),gzo=l(),nd=a("p"),hzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DX=a("a"),pzo=o("from_pretrained()"),_zo=o(" class method or the "),GX=a("a"),uzo=o("from_config()"),bzo=o(` class
method.`),vzo=l(),sL=a("p"),Fzo=o("This class cannot be instantiated directly using "),G_e=a("code"),Tzo=o("__init__()"),Mzo=o(" (throws an error)."),Ezo=l(),gt=a("div"),F(lL.$$.fragment),Czo=l(),O_e=a("p"),wzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Azo=l(),sd=a("p"),Lzo=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),yzo=o("not"),xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),$zo=o("from_pretrained()"),kzo=o(" to load the model weights."),Szo=l(),F(Ov.$$.fragment),Rzo=l(),ro=a("div"),F(iL.$$.fragment),Pzo=l(),X_e=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nzo=l(),Oa=a("p"),Izo=o("The model class to instantiate is selected based on the "),z_e=a("code"),qzo=o("model_type"),jzo=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),Dzo=o("pretrained_model_name_or_path"),Gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Ozo=o("pretrained_model_name_or_path"),Vzo=o(":"),Xzo=l(),Z=a("ul"),Vv=a("li"),H_e=a("strong"),zzo=o("albert"),Qzo=o(" \u2014 "),VX=a("a"),Wzo=o("AlbertForMultipleChoice"),Hzo=o(" (ALBERT model)"),Uzo=l(),Xv=a("li"),U_e=a("strong"),Jzo=o("bert"),Yzo=o(" \u2014 "),XX=a("a"),Kzo=o("BertForMultipleChoice"),Zzo=o(" (BERT model)"),eQo=l(),zv=a("li"),J_e=a("strong"),oQo=o("big_bird"),rQo=o(" \u2014 "),zX=a("a"),tQo=o("BigBirdForMultipleChoice"),aQo=o(" (BigBird model)"),nQo=l(),Qv=a("li"),Y_e=a("strong"),sQo=o("camembert"),lQo=o(" \u2014 "),QX=a("a"),iQo=o("CamembertForMultipleChoice"),dQo=o(" (CamemBERT model)"),cQo=l(),Wv=a("li"),K_e=a("strong"),fQo=o("canine"),mQo=o(" \u2014 "),WX=a("a"),gQo=o("CanineForMultipleChoice"),hQo=o(" (CANINE model)"),pQo=l(),Hv=a("li"),Z_e=a("strong"),_Qo=o("convbert"),uQo=o(" \u2014 "),HX=a("a"),bQo=o("ConvBertForMultipleChoice"),vQo=o(" (ConvBERT model)"),FQo=l(),Uv=a("li"),eue=a("strong"),TQo=o("data2vec-text"),MQo=o(" \u2014 "),UX=a("a"),EQo=o("Data2VecTextForMultipleChoice"),CQo=o(" (Data2VecText model)"),wQo=l(),Jv=a("li"),oue=a("strong"),AQo=o("deberta-v2"),LQo=o(" \u2014 "),JX=a("a"),yQo=o("DebertaV2ForMultipleChoice"),xQo=o(" (DeBERTa-v2 model)"),$Qo=l(),Yv=a("li"),rue=a("strong"),kQo=o("distilbert"),SQo=o(" \u2014 "),YX=a("a"),RQo=o("DistilBertForMultipleChoice"),PQo=o(" (DistilBERT model)"),BQo=l(),Kv=a("li"),tue=a("strong"),NQo=o("electra"),IQo=o(" \u2014 "),KX=a("a"),qQo=o("ElectraForMultipleChoice"),jQo=o(" (ELECTRA model)"),DQo=l(),Zv=a("li"),aue=a("strong"),GQo=o("flaubert"),OQo=o(" \u2014 "),ZX=a("a"),VQo=o("FlaubertForMultipleChoice"),XQo=o(" (FlauBERT model)"),zQo=l(),e5=a("li"),nue=a("strong"),QQo=o("fnet"),WQo=o(" \u2014 "),ez=a("a"),HQo=o("FNetForMultipleChoice"),UQo=o(" (FNet model)"),JQo=l(),o5=a("li"),sue=a("strong"),YQo=o("funnel"),KQo=o(" \u2014 "),oz=a("a"),ZQo=o("FunnelForMultipleChoice"),eWo=o(" (Funnel Transformer model)"),oWo=l(),r5=a("li"),lue=a("strong"),rWo=o("ibert"),tWo=o(" \u2014 "),rz=a("a"),aWo=o("IBertForMultipleChoice"),nWo=o(" (I-BERT model)"),sWo=l(),t5=a("li"),iue=a("strong"),lWo=o("longformer"),iWo=o(" \u2014 "),tz=a("a"),dWo=o("LongformerForMultipleChoice"),cWo=o(" (Longformer model)"),fWo=l(),a5=a("li"),due=a("strong"),mWo=o("megatron-bert"),gWo=o(" \u2014 "),az=a("a"),hWo=o("MegatronBertForMultipleChoice"),pWo=o(" (Megatron-BERT model)"),_Wo=l(),n5=a("li"),cue=a("strong"),uWo=o("mobilebert"),bWo=o(" \u2014 "),nz=a("a"),vWo=o("MobileBertForMultipleChoice"),FWo=o(" (MobileBERT model)"),TWo=l(),s5=a("li"),fue=a("strong"),MWo=o("mpnet"),EWo=o(" \u2014 "),sz=a("a"),CWo=o("MPNetForMultipleChoice"),wWo=o(" (MPNet model)"),AWo=l(),l5=a("li"),mue=a("strong"),LWo=o("nezha"),yWo=o(" \u2014 "),lz=a("a"),xWo=o("NezhaForMultipleChoice"),$Wo=o(" (Nezha model)"),kWo=l(),i5=a("li"),gue=a("strong"),SWo=o("nystromformer"),RWo=o(" \u2014 "),iz=a("a"),PWo=o("NystromformerForMultipleChoice"),BWo=o(" (Nystr\xF6mformer model)"),NWo=l(),d5=a("li"),hue=a("strong"),IWo=o("qdqbert"),qWo=o(" \u2014 "),dz=a("a"),jWo=o("QDQBertForMultipleChoice"),DWo=o(" (QDQBert model)"),GWo=l(),c5=a("li"),pue=a("strong"),OWo=o("rembert"),VWo=o(" \u2014 "),cz=a("a"),XWo=o("RemBertForMultipleChoice"),zWo=o(" (RemBERT model)"),QWo=l(),f5=a("li"),_ue=a("strong"),WWo=o("roberta"),HWo=o(" \u2014 "),fz=a("a"),UWo=o("RobertaForMultipleChoice"),JWo=o(" (RoBERTa model)"),YWo=l(),m5=a("li"),uue=a("strong"),KWo=o("roformer"),ZWo=o(" \u2014 "),mz=a("a"),eHo=o("RoFormerForMultipleChoice"),oHo=o(" (RoFormer model)"),rHo=l(),g5=a("li"),bue=a("strong"),tHo=o("squeezebert"),aHo=o(" \u2014 "),gz=a("a"),nHo=o("SqueezeBertForMultipleChoice"),sHo=o(" (SqueezeBERT model)"),lHo=l(),h5=a("li"),vue=a("strong"),iHo=o("xlm"),dHo=o(" \u2014 "),hz=a("a"),cHo=o("XLMForMultipleChoice"),fHo=o(" (XLM model)"),mHo=l(),p5=a("li"),Fue=a("strong"),gHo=o("xlm-roberta"),hHo=o(" \u2014 "),pz=a("a"),pHo=o("XLMRobertaForMultipleChoice"),_Ho=o(" (XLM-RoBERTa model)"),uHo=l(),_5=a("li"),Tue=a("strong"),bHo=o("xlm-roberta-xl"),vHo=o(" \u2014 "),_z=a("a"),FHo=o("XLMRobertaXLForMultipleChoice"),THo=o(" (XLM-RoBERTa-XL model)"),MHo=l(),u5=a("li"),Mue=a("strong"),EHo=o("xlnet"),CHo=o(" \u2014 "),uz=a("a"),wHo=o("XLNetForMultipleChoice"),AHo=o(" (XLNet model)"),LHo=l(),b5=a("li"),Eue=a("strong"),yHo=o("yoso"),xHo=o(" \u2014 "),bz=a("a"),$Ho=o("YosoForMultipleChoice"),kHo=o(" (YOSO model)"),SHo=l(),v5=a("p"),RHo=o("The model is set in evaluation mode by default using "),Cue=a("code"),PHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),NHo=o("model.train()"),IHo=l(),F(F5.$$.fragment),pXe=l(),ld=a("h2"),T5=a("a"),Aue=a("span"),F(dL.$$.fragment),qHo=l(),Lue=a("span"),jHo=o("AutoModelForNextSentencePrediction"),_Xe=l(),No=a("div"),F(cL.$$.fragment),DHo=l(),id=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vz=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),Fz=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),fL=a("p"),WHo=o("This class cannot be instantiated directly using "),yue=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),ht=a("div"),F(mL.$$.fragment),YHo=l(),xue=a("p"),KHo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZHo=l(),dd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(M5.$$.fragment),sUo=l(),to=a("div"),F(gL.$$.fragment),lUo=l(),kue=a("p"),iUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dUo=l(),Va=a("p"),cUo=o("The model class to instantiate is selected based on the "),Sue=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(":"),uUo=l(),Io=a("ul"),E5=a("li"),Bue=a("strong"),bUo=o("bert"),vUo=o(" \u2014 "),Mz=a("a"),FUo=o("BertForNextSentencePrediction"),TUo=o(" (BERT model)"),MUo=l(),C5=a("li"),Nue=a("strong"),EUo=o("fnet"),CUo=o(" \u2014 "),Ez=a("a"),wUo=o("FNetForNextSentencePrediction"),AUo=o(" (FNet model)"),LUo=l(),w5=a("li"),Iue=a("strong"),yUo=o("megatron-bert"),xUo=o(" \u2014 "),Cz=a("a"),$Uo=o("MegatronBertForNextSentencePrediction"),kUo=o(" (Megatron-BERT model)"),SUo=l(),A5=a("li"),que=a("strong"),RUo=o("mobilebert"),PUo=o(" \u2014 "),wz=a("a"),BUo=o("MobileBertForNextSentencePrediction"),NUo=o(" (MobileBERT model)"),IUo=l(),L5=a("li"),jue=a("strong"),qUo=o("nezha"),jUo=o(" \u2014 "),Az=a("a"),DUo=o("NezhaForNextSentencePrediction"),GUo=o(" (Nezha model)"),OUo=l(),y5=a("li"),Due=a("strong"),VUo=o("qdqbert"),XUo=o(" \u2014 "),Lz=a("a"),zUo=o("QDQBertForNextSentencePrediction"),QUo=o(" (QDQBert model)"),WUo=l(),x5=a("p"),HUo=o("The model is set in evaluation mode by default using "),Gue=a("code"),UUo=o("model.eval()"),JUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),YUo=o("model.train()"),KUo=l(),F($5.$$.fragment),uXe=l(),cd=a("h2"),k5=a("a"),Vue=a("span"),F(hL.$$.fragment),ZUo=l(),Xue=a("span"),eJo=o("AutoModelForTokenClassification"),bXe=l(),qo=a("div"),F(pL.$$.fragment),oJo=l(),fd=a("p"),rJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yz=a("a"),tJo=o("from_pretrained()"),aJo=o(" class method or the "),xz=a("a"),nJo=o("from_config()"),sJo=o(` class
method.`),lJo=l(),_L=a("p"),iJo=o("This class cannot be instantiated directly using "),zue=a("code"),dJo=o("__init__()"),cJo=o(" (throws an error)."),fJo=l(),pt=a("div"),F(uL.$$.fragment),mJo=l(),Que=a("p"),gJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hJo=l(),md=a("p"),pJo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),_Jo=o("not"),uJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),bJo=o("from_pretrained()"),vJo=o(" to load the model weights."),FJo=l(),F(S5.$$.fragment),TJo=l(),ao=a("div"),F(bL.$$.fragment),MJo=l(),Hue=a("p"),EJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CJo=l(),Xa=a("p"),wJo=o("The model class to instantiate is selected based on the "),Uue=a("code"),AJo=o("model_type"),LJo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),yJo=o("pretrained_model_name_or_path"),xJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),$Jo=o("pretrained_model_name_or_path"),kJo=o(":"),SJo=l(),U=a("ul"),R5=a("li"),Kue=a("strong"),RJo=o("albert"),PJo=o(" \u2014 "),kz=a("a"),BJo=o("AlbertForTokenClassification"),NJo=o(" (ALBERT model)"),IJo=l(),P5=a("li"),Zue=a("strong"),qJo=o("bert"),jJo=o(" \u2014 "),Sz=a("a"),DJo=o("BertForTokenClassification"),GJo=o(" (BERT model)"),OJo=l(),B5=a("li"),e1e=a("strong"),VJo=o("big_bird"),XJo=o(" \u2014 "),Rz=a("a"),zJo=o("BigBirdForTokenClassification"),QJo=o(" (BigBird model)"),WJo=l(),N5=a("li"),o1e=a("strong"),HJo=o("bloom"),UJo=o(" \u2014 "),Pz=a("a"),JJo=o("BloomForTokenClassification"),YJo=o(" (BLOOM model)"),KJo=l(),I5=a("li"),r1e=a("strong"),ZJo=o("camembert"),eYo=o(" \u2014 "),Bz=a("a"),oYo=o("CamembertForTokenClassification"),rYo=o(" (CamemBERT model)"),tYo=l(),q5=a("li"),t1e=a("strong"),aYo=o("canine"),nYo=o(" \u2014 "),Nz=a("a"),sYo=o("CanineForTokenClassification"),lYo=o(" (CANINE model)"),iYo=l(),j5=a("li"),a1e=a("strong"),dYo=o("convbert"),cYo=o(" \u2014 "),Iz=a("a"),fYo=o("ConvBertForTokenClassification"),mYo=o(" (ConvBERT model)"),gYo=l(),D5=a("li"),n1e=a("strong"),hYo=o("data2vec-text"),pYo=o(" \u2014 "),qz=a("a"),_Yo=o("Data2VecTextForTokenClassification"),uYo=o(" (Data2VecText model)"),bYo=l(),G5=a("li"),s1e=a("strong"),vYo=o("deberta"),FYo=o(" \u2014 "),jz=a("a"),TYo=o("DebertaForTokenClassification"),MYo=o(" (DeBERTa model)"),EYo=l(),O5=a("li"),l1e=a("strong"),CYo=o("deberta-v2"),wYo=o(" \u2014 "),Dz=a("a"),AYo=o("DebertaV2ForTokenClassification"),LYo=o(" (DeBERTa-v2 model)"),yYo=l(),V5=a("li"),i1e=a("strong"),xYo=o("distilbert"),$Yo=o(" \u2014 "),Gz=a("a"),kYo=o("DistilBertForTokenClassification"),SYo=o(" (DistilBERT model)"),RYo=l(),X5=a("li"),d1e=a("strong"),PYo=o("electra"),BYo=o(" \u2014 "),Oz=a("a"),NYo=o("ElectraForTokenClassification"),IYo=o(" (ELECTRA model)"),qYo=l(),z5=a("li"),c1e=a("strong"),jYo=o("flaubert"),DYo=o(" \u2014 "),Vz=a("a"),GYo=o("FlaubertForTokenClassification"),OYo=o(" (FlauBERT model)"),VYo=l(),Q5=a("li"),f1e=a("strong"),XYo=o("fnet"),zYo=o(" \u2014 "),Xz=a("a"),QYo=o("FNetForTokenClassification"),WYo=o(" (FNet model)"),HYo=l(),W5=a("li"),m1e=a("strong"),UYo=o("funnel"),JYo=o(" \u2014 "),zz=a("a"),YYo=o("FunnelForTokenClassification"),KYo=o(" (Funnel Transformer model)"),ZYo=l(),H5=a("li"),g1e=a("strong"),eKo=o("gpt2"),oKo=o(" \u2014 "),Qz=a("a"),rKo=o("GPT2ForTokenClassification"),tKo=o(" (OpenAI GPT-2 model)"),aKo=l(),U5=a("li"),h1e=a("strong"),nKo=o("ibert"),sKo=o(" \u2014 "),Wz=a("a"),lKo=o("IBertForTokenClassification"),iKo=o(" (I-BERT model)"),dKo=l(),J5=a("li"),p1e=a("strong"),cKo=o("layoutlm"),fKo=o(" \u2014 "),Hz=a("a"),mKo=o("LayoutLMForTokenClassification"),gKo=o(" (LayoutLM model)"),hKo=l(),Y5=a("li"),_1e=a("strong"),pKo=o("layoutlmv2"),_Ko=o(" \u2014 "),Uz=a("a"),uKo=o("LayoutLMv2ForTokenClassification"),bKo=o(" (LayoutLMv2 model)"),vKo=l(),K5=a("li"),u1e=a("strong"),FKo=o("layoutlmv3"),TKo=o(" \u2014 "),Jz=a("a"),MKo=o("LayoutLMv3ForTokenClassification"),EKo=o(" (LayoutLMv3 model)"),CKo=l(),Z5=a("li"),b1e=a("strong"),wKo=o("longformer"),AKo=o(" \u2014 "),Yz=a("a"),LKo=o("LongformerForTokenClassification"),yKo=o(" (Longformer model)"),xKo=l(),e0=a("li"),v1e=a("strong"),$Ko=o("megatron-bert"),kKo=o(" \u2014 "),Kz=a("a"),SKo=o("MegatronBertForTokenClassification"),RKo=o(" (Megatron-BERT model)"),PKo=l(),o0=a("li"),F1e=a("strong"),BKo=o("mobilebert"),NKo=o(" \u2014 "),Zz=a("a"),IKo=o("MobileBertForTokenClassification"),qKo=o(" (MobileBERT model)"),jKo=l(),r0=a("li"),T1e=a("strong"),DKo=o("mpnet"),GKo=o(" \u2014 "),eQ=a("a"),OKo=o("MPNetForTokenClassification"),VKo=o(" (MPNet model)"),XKo=l(),t0=a("li"),M1e=a("strong"),zKo=o("nezha"),QKo=o(" \u2014 "),oQ=a("a"),WKo=o("NezhaForTokenClassification"),HKo=o(" (Nezha model)"),UKo=l(),a0=a("li"),E1e=a("strong"),JKo=o("nystromformer"),YKo=o(" \u2014 "),rQ=a("a"),KKo=o("NystromformerForTokenClassification"),ZKo=o(" (Nystr\xF6mformer model)"),eZo=l(),n0=a("li"),C1e=a("strong"),oZo=o("qdqbert"),rZo=o(" \u2014 "),tQ=a("a"),tZo=o("QDQBertForTokenClassification"),aZo=o(" (QDQBert model)"),nZo=l(),s0=a("li"),w1e=a("strong"),sZo=o("rembert"),lZo=o(" \u2014 "),aQ=a("a"),iZo=o("RemBertForTokenClassification"),dZo=o(" (RemBERT model)"),cZo=l(),l0=a("li"),A1e=a("strong"),fZo=o("roberta"),mZo=o(" \u2014 "),nQ=a("a"),gZo=o("RobertaForTokenClassification"),hZo=o(" (RoBERTa model)"),pZo=l(),i0=a("li"),L1e=a("strong"),_Zo=o("roformer"),uZo=o(" \u2014 "),sQ=a("a"),bZo=o("RoFormerForTokenClassification"),vZo=o(" (RoFormer model)"),FZo=l(),d0=a("li"),y1e=a("strong"),TZo=o("squeezebert"),MZo=o(" \u2014 "),lQ=a("a"),EZo=o("SqueezeBertForTokenClassification"),CZo=o(" (SqueezeBERT model)"),wZo=l(),c0=a("li"),x1e=a("strong"),AZo=o("xlm"),LZo=o(" \u2014 "),iQ=a("a"),yZo=o("XLMForTokenClassification"),xZo=o(" (XLM model)"),$Zo=l(),f0=a("li"),$1e=a("strong"),kZo=o("xlm-roberta"),SZo=o(" \u2014 "),dQ=a("a"),RZo=o("XLMRobertaForTokenClassification"),PZo=o(" (XLM-RoBERTa model)"),BZo=l(),m0=a("li"),k1e=a("strong"),NZo=o("xlm-roberta-xl"),IZo=o(" \u2014 "),cQ=a("a"),qZo=o("XLMRobertaXLForTokenClassification"),jZo=o(" (XLM-RoBERTa-XL model)"),DZo=l(),g0=a("li"),S1e=a("strong"),GZo=o("xlnet"),OZo=o(" \u2014 "),fQ=a("a"),VZo=o("XLNetForTokenClassification"),XZo=o(" (XLNet model)"),zZo=l(),h0=a("li"),R1e=a("strong"),QZo=o("yoso"),WZo=o(" \u2014 "),mQ=a("a"),HZo=o("YosoForTokenClassification"),UZo=o(" (YOSO model)"),JZo=l(),p0=a("p"),YZo=o("The model is set in evaluation mode by default using "),P1e=a("code"),KZo=o("model.eval()"),ZZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=a("code"),eer=o("model.train()"),oer=l(),F(_0.$$.fragment),vXe=l(),gd=a("h2"),u0=a("a"),N1e=a("span"),F(vL.$$.fragment),rer=l(),I1e=a("span"),ter=o("AutoModelForQuestionAnswering"),FXe=l(),jo=a("div"),F(FL.$$.fragment),aer=l(),hd=a("p"),ner=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=a("a"),ser=o("from_pretrained()"),ler=o(" class method or the "),hQ=a("a"),ier=o("from_config()"),der=o(` class
method.`),cer=l(),TL=a("p"),fer=o("This class cannot be instantiated directly using "),q1e=a("code"),mer=o("__init__()"),ger=o(" (throws an error)."),her=l(),_t=a("div"),F(ML.$$.fragment),per=l(),j1e=a("p"),_er=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uer=l(),pd=a("p"),ber=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),ver=o("not"),Fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Ter=o("from_pretrained()"),Mer=o(" to load the model weights."),Eer=l(),F(b0.$$.fragment),Cer=l(),no=a("div"),F(EL.$$.fragment),wer=l(),G1e=a("p"),Aer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ler=l(),za=a("p"),yer=o("The model class to instantiate is selected based on the "),O1e=a("code"),xer=o("model_type"),$er=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),ker=o("pretrained_model_name_or_path"),Ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),Rer=o("pretrained_model_name_or_path"),Per=o(":"),Ber=l(),V=a("ul"),v0=a("li"),z1e=a("strong"),Ner=o("albert"),Ier=o(" \u2014 "),_Q=a("a"),qer=o("AlbertForQuestionAnswering"),jer=o(" (ALBERT model)"),Der=l(),F0=a("li"),Q1e=a("strong"),Ger=o("bart"),Oer=o(" \u2014 "),uQ=a("a"),Ver=o("BartForQuestionAnswering"),Xer=o(" (BART model)"),zer=l(),T0=a("li"),W1e=a("strong"),Qer=o("bert"),Wer=o(" \u2014 "),bQ=a("a"),Her=o("BertForQuestionAnswering"),Uer=o(" (BERT model)"),Jer=l(),M0=a("li"),H1e=a("strong"),Yer=o("big_bird"),Ker=o(" \u2014 "),vQ=a("a"),Zer=o("BigBirdForQuestionAnswering"),eor=o(" (BigBird model)"),oor=l(),E0=a("li"),U1e=a("strong"),ror=o("bigbird_pegasus"),tor=o(" \u2014 "),FQ=a("a"),aor=o("BigBirdPegasusForQuestionAnswering"),nor=o(" (BigBird-Pegasus model)"),sor=l(),C0=a("li"),J1e=a("strong"),lor=o("camembert"),ior=o(" \u2014 "),TQ=a("a"),dor=o("CamembertForQuestionAnswering"),cor=o(" (CamemBERT model)"),mor=l(),w0=a("li"),Y1e=a("strong"),gor=o("canine"),hor=o(" \u2014 "),MQ=a("a"),por=o("CanineForQuestionAnswering"),_or=o(" (CANINE model)"),uor=l(),A0=a("li"),K1e=a("strong"),bor=o("convbert"),vor=o(" \u2014 "),EQ=a("a"),For=o("ConvBertForQuestionAnswering"),Tor=o(" (ConvBERT model)"),Mor=l(),L0=a("li"),Z1e=a("strong"),Eor=o("data2vec-text"),Cor=o(" \u2014 "),CQ=a("a"),wor=o("Data2VecTextForQuestionAnswering"),Aor=o(" (Data2VecText model)"),Lor=l(),y0=a("li"),e2e=a("strong"),yor=o("deberta"),xor=o(" \u2014 "),wQ=a("a"),$or=o("DebertaForQuestionAnswering"),kor=o(" (DeBERTa model)"),Sor=l(),x0=a("li"),o2e=a("strong"),Ror=o("deberta-v2"),Por=o(" \u2014 "),AQ=a("a"),Bor=o("DebertaV2ForQuestionAnswering"),Nor=o(" (DeBERTa-v2 model)"),Ior=l(),$0=a("li"),r2e=a("strong"),qor=o("distilbert"),jor=o(" \u2014 "),LQ=a("a"),Dor=o("DistilBertForQuestionAnswering"),Gor=o(" (DistilBERT model)"),Oor=l(),k0=a("li"),t2e=a("strong"),Vor=o("electra"),Xor=o(" \u2014 "),yQ=a("a"),zor=o("ElectraForQuestionAnswering"),Qor=o(" (ELECTRA model)"),Wor=l(),S0=a("li"),a2e=a("strong"),Hor=o("flaubert"),Uor=o(" \u2014 "),xQ=a("a"),Jor=o("FlaubertForQuestionAnsweringSimple"),Yor=o(" (FlauBERT model)"),Kor=l(),R0=a("li"),n2e=a("strong"),Zor=o("fnet"),err=o(" \u2014 "),$Q=a("a"),orr=o("FNetForQuestionAnswering"),rrr=o(" (FNet model)"),trr=l(),P0=a("li"),s2e=a("strong"),arr=o("funnel"),nrr=o(" \u2014 "),kQ=a("a"),srr=o("FunnelForQuestionAnswering"),lrr=o(" (Funnel Transformer model)"),irr=l(),B0=a("li"),l2e=a("strong"),drr=o("gptj"),crr=o(" \u2014 "),SQ=a("a"),frr=o("GPTJForQuestionAnswering"),mrr=o(" (GPT-J model)"),grr=l(),N0=a("li"),i2e=a("strong"),hrr=o("ibert"),prr=o(" \u2014 "),RQ=a("a"),_rr=o("IBertForQuestionAnswering"),urr=o(" (I-BERT model)"),brr=l(),I0=a("li"),d2e=a("strong"),vrr=o("layoutlmv2"),Frr=o(" \u2014 "),PQ=a("a"),Trr=o("LayoutLMv2ForQuestionAnswering"),Mrr=o(" (LayoutLMv2 model)"),Err=l(),q0=a("li"),c2e=a("strong"),Crr=o("layoutlmv3"),wrr=o(" \u2014 "),BQ=a("a"),Arr=o("LayoutLMv3ForQuestionAnswering"),Lrr=o(" (LayoutLMv3 model)"),yrr=l(),j0=a("li"),f2e=a("strong"),xrr=o("led"),$rr=o(" \u2014 "),NQ=a("a"),krr=o("LEDForQuestionAnswering"),Srr=o(" (LED model)"),Rrr=l(),D0=a("li"),m2e=a("strong"),Prr=o("longformer"),Brr=o(" \u2014 "),IQ=a("a"),Nrr=o("LongformerForQuestionAnswering"),Irr=o(" (Longformer model)"),qrr=l(),G0=a("li"),g2e=a("strong"),jrr=o("lxmert"),Drr=o(" \u2014 "),qQ=a("a"),Grr=o("LxmertForQuestionAnswering"),Orr=o(" (LXMERT model)"),Vrr=l(),O0=a("li"),h2e=a("strong"),Xrr=o("mbart"),zrr=o(" \u2014 "),jQ=a("a"),Qrr=o("MBartForQuestionAnswering"),Wrr=o(" (mBART model)"),Hrr=l(),V0=a("li"),p2e=a("strong"),Urr=o("megatron-bert"),Jrr=o(" \u2014 "),DQ=a("a"),Yrr=o("MegatronBertForQuestionAnswering"),Krr=o(" (Megatron-BERT model)"),Zrr=l(),X0=a("li"),_2e=a("strong"),etr=o("mobilebert"),otr=o(" \u2014 "),GQ=a("a"),rtr=o("MobileBertForQuestionAnswering"),ttr=o(" (MobileBERT model)"),atr=l(),z0=a("li"),u2e=a("strong"),ntr=o("mpnet"),str=o(" \u2014 "),OQ=a("a"),ltr=o("MPNetForQuestionAnswering"),itr=o(" (MPNet model)"),dtr=l(),Q0=a("li"),b2e=a("strong"),ctr=o("mvp"),ftr=o(" \u2014 "),VQ=a("a"),mtr=o("MvpForQuestionAnswering"),gtr=o(" (MVP model)"),htr=l(),W0=a("li"),v2e=a("strong"),ptr=o("nezha"),_tr=o(" \u2014 "),XQ=a("a"),utr=o("NezhaForQuestionAnswering"),btr=o(" (Nezha model)"),vtr=l(),H0=a("li"),F2e=a("strong"),Ftr=o("nystromformer"),Ttr=o(" \u2014 "),zQ=a("a"),Mtr=o("NystromformerForQuestionAnswering"),Etr=o(" (Nystr\xF6mformer model)"),Ctr=l(),U0=a("li"),T2e=a("strong"),wtr=o("qdqbert"),Atr=o(" \u2014 "),QQ=a("a"),Ltr=o("QDQBertForQuestionAnswering"),ytr=o(" (QDQBert model)"),xtr=l(),J0=a("li"),M2e=a("strong"),$tr=o("reformer"),ktr=o(" \u2014 "),WQ=a("a"),Str=o("ReformerForQuestionAnswering"),Rtr=o(" (Reformer model)"),Ptr=l(),Y0=a("li"),E2e=a("strong"),Btr=o("rembert"),Ntr=o(" \u2014 "),HQ=a("a"),Itr=o("RemBertForQuestionAnswering"),qtr=o(" (RemBERT model)"),jtr=l(),K0=a("li"),C2e=a("strong"),Dtr=o("roberta"),Gtr=o(" \u2014 "),UQ=a("a"),Otr=o("RobertaForQuestionAnswering"),Vtr=o(" (RoBERTa model)"),Xtr=l(),Z0=a("li"),w2e=a("strong"),ztr=o("roformer"),Qtr=o(" \u2014 "),JQ=a("a"),Wtr=o("RoFormerForQuestionAnswering"),Htr=o(" (RoFormer model)"),Utr=l(),eF=a("li"),A2e=a("strong"),Jtr=o("splinter"),Ytr=o(" \u2014 "),YQ=a("a"),Ktr=o("SplinterForQuestionAnswering"),Ztr=o(" (Splinter model)"),ear=l(),oF=a("li"),L2e=a("strong"),oar=o("squeezebert"),rar=o(" \u2014 "),KQ=a("a"),tar=o("SqueezeBertForQuestionAnswering"),aar=o(" (SqueezeBERT model)"),nar=l(),rF=a("li"),y2e=a("strong"),sar=o("xlm"),lar=o(" \u2014 "),ZQ=a("a"),iar=o("XLMForQuestionAnsweringSimple"),dar=o(" (XLM model)"),car=l(),tF=a("li"),x2e=a("strong"),far=o("xlm-roberta"),mar=o(" \u2014 "),eW=a("a"),gar=o("XLMRobertaForQuestionAnswering"),har=o(" (XLM-RoBERTa model)"),par=l(),aF=a("li"),$2e=a("strong"),_ar=o("xlm-roberta-xl"),uar=o(" \u2014 "),oW=a("a"),bar=o("XLMRobertaXLForQuestionAnswering"),Far=o(" (XLM-RoBERTa-XL model)"),Tar=l(),nF=a("li"),k2e=a("strong"),Mar=o("xlnet"),Ear=o(" \u2014 "),rW=a("a"),Car=o("XLNetForQuestionAnsweringSimple"),war=o(" (XLNet model)"),Aar=l(),sF=a("li"),S2e=a("strong"),Lar=o("yoso"),yar=o(" \u2014 "),tW=a("a"),xar=o("YosoForQuestionAnswering"),$ar=o(" (YOSO model)"),kar=l(),lF=a("p"),Sar=o("The model is set in evaluation mode by default using "),R2e=a("code"),Rar=o("model.eval()"),Par=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),Bar=o("model.train()"),Nar=l(),F(iF.$$.fragment),TXe=l(),_d=a("h2"),dF=a("a"),B2e=a("span"),F(CL.$$.fragment),Iar=l(),N2e=a("span"),qar=o("AutoModelForTableQuestionAnswering"),MXe=l(),Do=a("div"),F(wL.$$.fragment),jar=l(),ud=a("p"),Dar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aW=a("a"),Gar=o("from_pretrained()"),Oar=o(" class method or the "),nW=a("a"),Var=o("from_config()"),Xar=o(` class
method.`),zar=l(),AL=a("p"),Qar=o("This class cannot be instantiated directly using "),I2e=a("code"),War=o("__init__()"),Har=o(" (throws an error)."),Uar=l(),ut=a("div"),F(LL.$$.fragment),Jar=l(),q2e=a("p"),Yar=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kar=l(),bd=a("p"),Zar=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),enr=o("not"),onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),rnr=o("from_pretrained()"),tnr=o(" to load the model weights."),anr=l(),F(cF.$$.fragment),nnr=l(),so=a("div"),F(yL.$$.fragment),snr=l(),D2e=a("p"),lnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),inr=l(),Qa=a("p"),dnr=o("The model class to instantiate is selected based on the "),G2e=a("code"),cnr=o("model_type"),fnr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),mnr=o("pretrained_model_name_or_path"),gnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(":"),_nr=l(),X2e=a("ul"),fF=a("li"),z2e=a("strong"),unr=o("tapas"),bnr=o(" \u2014 "),lW=a("a"),vnr=o("TapasForQuestionAnswering"),Fnr=o(" (TAPAS model)"),Tnr=l(),mF=a("p"),Mnr=o("The model is set in evaluation mode by default using "),Q2e=a("code"),Enr=o("model.eval()"),Cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),wnr=o("model.train()"),Anr=l(),F(gF.$$.fragment),EXe=l(),vd=a("h2"),hF=a("a"),H2e=a("span"),F(xL.$$.fragment),Lnr=l(),U2e=a("span"),ynr=o("AutoModelForImageClassification"),CXe=l(),Go=a("div"),F($L.$$.fragment),xnr=l(),Fd=a("p"),$nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iW=a("a"),knr=o("from_pretrained()"),Snr=o(" class method or the "),dW=a("a"),Rnr=o("from_config()"),Pnr=o(` class
method.`),Bnr=l(),kL=a("p"),Nnr=o("This class cannot be instantiated directly using "),J2e=a("code"),Inr=o("__init__()"),qnr=o(" (throws an error)."),jnr=l(),bt=a("div"),F(SL.$$.fragment),Dnr=l(),Y2e=a("p"),Gnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Onr=l(),Td=a("p"),Vnr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Xnr=o("not"),znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Qnr=o("from_pretrained()"),Wnr=o(" to load the model weights."),Hnr=l(),F(pF.$$.fragment),Unr=l(),lo=a("div"),F(RL.$$.fragment),Jnr=l(),Z2e=a("p"),Ynr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Knr=l(),Wa=a("p"),Znr=o("The model class to instantiate is selected based on the "),ebe=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(":"),ssr=l(),ve=a("ul"),_F=a("li"),tbe=a("strong"),lsr=o("beit"),isr=o(" \u2014 "),fW=a("a"),dsr=o("BeitForImageClassification"),csr=o(" (BEiT model)"),fsr=l(),uF=a("li"),abe=a("strong"),msr=o("convnext"),gsr=o(" \u2014 "),mW=a("a"),hsr=o("ConvNextForImageClassification"),psr=o(" (ConvNeXT model)"),_sr=l(),bF=a("li"),nbe=a("strong"),usr=o("cvt"),bsr=o(" \u2014 "),gW=a("a"),vsr=o("CvtForImageClassification"),Fsr=o(" (CvT model)"),Tsr=l(),vF=a("li"),sbe=a("strong"),Msr=o("data2vec-vision"),Esr=o(" \u2014 "),hW=a("a"),Csr=o("Data2VecVisionForImageClassification"),wsr=o(" (Data2VecVision model)"),Asr=l(),Hs=a("li"),lbe=a("strong"),Lsr=o("deit"),ysr=o(" \u2014 "),pW=a("a"),xsr=o("DeiTForImageClassification"),$sr=o(" or "),_W=a("a"),ksr=o("DeiTForImageClassificationWithTeacher"),Ssr=o(" (DeiT model)"),Rsr=l(),FF=a("li"),ibe=a("strong"),Psr=o("imagegpt"),Bsr=o(" \u2014 "),uW=a("a"),Nsr=o("ImageGPTForImageClassification"),Isr=o(" (ImageGPT model)"),qsr=l(),Us=a("li"),dbe=a("strong"),jsr=o("levit"),Dsr=o(" \u2014 "),bW=a("a"),Gsr=o("LevitForImageClassification"),Osr=o(" or "),vW=a("a"),Vsr=o("LevitForImageClassificationWithTeacher"),Xsr=o(" (LeViT model)"),zsr=l(),TF=a("li"),cbe=a("strong"),Qsr=o("mobilevit"),Wsr=o(" \u2014 "),FW=a("a"),Hsr=o("MobileViTForImageClassification"),Usr=o(" (MobileViT model)"),Jsr=l(),vt=a("li"),fbe=a("strong"),Ysr=o("perceiver"),Ksr=o(" \u2014 "),TW=a("a"),Zsr=o("PerceiverForImageClassificationLearned"),elr=o(" or "),MW=a("a"),olr=o("PerceiverForImageClassificationFourier"),rlr=o(" or "),EW=a("a"),tlr=o("PerceiverForImageClassificationConvProcessing"),alr=o(" (Perceiver model)"),nlr=l(),MF=a("li"),mbe=a("strong"),slr=o("poolformer"),llr=o(" \u2014 "),CW=a("a"),ilr=o("PoolFormerForImageClassification"),dlr=o(" (PoolFormer model)"),clr=l(),EF=a("li"),gbe=a("strong"),flr=o("regnet"),mlr=o(" \u2014 "),wW=a("a"),glr=o("RegNetForImageClassification"),hlr=o(" (RegNet model)"),plr=l(),CF=a("li"),hbe=a("strong"),_lr=o("resnet"),ulr=o(" \u2014 "),AW=a("a"),blr=o("ResNetForImageClassification"),vlr=o(" (ResNet model)"),Flr=l(),wF=a("li"),pbe=a("strong"),Tlr=o("segformer"),Mlr=o(" \u2014 "),LW=a("a"),Elr=o("SegformerForImageClassification"),Clr=o(" (SegFormer model)"),wlr=l(),AF=a("li"),_be=a("strong"),Alr=o("swin"),Llr=o(" \u2014 "),yW=a("a"),ylr=o("SwinForImageClassification"),xlr=o(" (Swin Transformer model)"),$lr=l(),LF=a("li"),ube=a("strong"),klr=o("van"),Slr=o(" \u2014 "),xW=a("a"),Rlr=o("VanForImageClassification"),Plr=o(" (VAN model)"),Blr=l(),yF=a("li"),bbe=a("strong"),Nlr=o("vit"),Ilr=o(" \u2014 "),$W=a("a"),qlr=o("ViTForImageClassification"),jlr=o(" (ViT model)"),Dlr=l(),xF=a("p"),Glr=o("The model is set in evaluation mode by default using "),vbe=a("code"),Olr=o("model.eval()"),Vlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),Xlr=o("model.train()"),zlr=l(),F($F.$$.fragment),wXe=l(),Md=a("h2"),kF=a("a"),Tbe=a("span"),F(PL.$$.fragment),Qlr=l(),Mbe=a("span"),Wlr=o("AutoModelForVision2Seq"),AXe=l(),Oo=a("div"),F(BL.$$.fragment),Hlr=l(),Ed=a("p"),Ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" class method or the "),SW=a("a"),Klr=o("from_config()"),Zlr=o(` class
method.`),eir=l(),NL=a("p"),oir=o("This class cannot be instantiated directly using "),Ebe=a("code"),rir=o("__init__()"),tir=o(" (throws an error)."),air=l(),Ft=a("div"),F(IL.$$.fragment),nir=l(),Cbe=a("p"),sir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lir=l(),Cd=a("p"),iir=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),dir=o("not"),cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),fir=o("from_pretrained()"),mir=o(" to load the model weights."),gir=l(),F(SF.$$.fragment),hir=l(),io=a("div"),F(qL.$$.fragment),pir=l(),Abe=a("p"),_ir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uir=l(),Ha=a("p"),bir=o("The model class to instantiate is selected based on the "),Lbe=a("code"),vir=o("model_type"),Fir=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Eir=o("pretrained_model_name_or_path"),Cir=o(":"),wir=l(),$be=a("ul"),RF=a("li"),kbe=a("strong"),Air=o("vision-encoder-decoder"),Lir=o(" \u2014 "),PW=a("a"),yir=o("VisionEncoderDecoderModel"),xir=o(" (Vision Encoder decoder model)"),$ir=l(),PF=a("p"),kir=o("The model is set in evaluation mode by default using "),Sbe=a("code"),Sir=o("model.eval()"),Rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),Pir=o("model.train()"),Bir=l(),F(BF.$$.fragment),LXe=l(),wd=a("h2"),NF=a("a"),Pbe=a("span"),F(jL.$$.fragment),Nir=l(),Bbe=a("span"),Iir=o("AutoModelForVisualQuestionAnswering"),yXe=l(),Vo=a("div"),F(DL.$$.fragment),qir=l(),Ad=a("p"),jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),BW=a("a"),Dir=o("from_pretrained()"),Gir=o(" class method or the "),NW=a("a"),Oir=o("from_config()"),Vir=o(` class
method.`),Xir=l(),GL=a("p"),zir=o("This class cannot be instantiated directly using "),Nbe=a("code"),Qir=o("__init__()"),Wir=o(" (throws an error)."),Hir=l(),Tt=a("div"),F(OL.$$.fragment),Uir=l(),Ibe=a("p"),Jir=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Yir=l(),Ld=a("p"),Kir=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),Zir=o("not"),edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),odr=o("from_pretrained()"),rdr=o(" to load the model weights."),tdr=l(),F(IF.$$.fragment),adr=l(),co=a("div"),F(VL.$$.fragment),ndr=l(),jbe=a("p"),sdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ldr=l(),Ua=a("p"),idr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),ddr=o("model_type"),cdr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(":"),pdr=l(),Vbe=a("ul"),qF=a("li"),Xbe=a("strong"),_dr=o("vilt"),udr=o(" \u2014 "),qW=a("a"),bdr=o("ViltForQuestionAnswering"),vdr=o(" (ViLT model)"),Fdr=l(),jF=a("p"),Tdr=o("The model is set in evaluation mode by default using "),zbe=a("code"),Mdr=o("model.eval()"),Edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),Cdr=o("model.train()"),wdr=l(),F(DF.$$.fragment),xXe=l(),yd=a("h2"),GF=a("a"),Wbe=a("span"),F(XL.$$.fragment),Adr=l(),Hbe=a("span"),Ldr=o("AutoModelForAudioClassification"),$Xe=l(),Xo=a("div"),F(zL.$$.fragment),ydr=l(),xd=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jW=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),DW=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Pdr=l(),QL=a("p"),Bdr=o("This class cannot be instantiated directly using "),Ube=a("code"),Ndr=o("__init__()"),Idr=o(" (throws an error)."),qdr=l(),Mt=a("div"),F(WL.$$.fragment),jdr=l(),Jbe=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Gdr=l(),$d=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(OF.$$.fragment),Hdr=l(),fo=a("div"),F(HL.$$.fragment),Udr=l(),Kbe=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ydr=l(),Ja=a("p"),Kdr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),Pe=a("ul"),VF=a("li"),rve=a("strong"),scr=o("data2vec-audio"),lcr=o(" \u2014 "),OW=a("a"),icr=o("Data2VecAudioForSequenceClassification"),dcr=o(" (Data2VecAudio model)"),ccr=l(),XF=a("li"),tve=a("strong"),fcr=o("hubert"),mcr=o(" \u2014 "),VW=a("a"),gcr=o("HubertForSequenceClassification"),hcr=o(" (Hubert model)"),pcr=l(),zF=a("li"),ave=a("strong"),_cr=o("sew"),ucr=o(" \u2014 "),XW=a("a"),bcr=o("SEWForSequenceClassification"),vcr=o(" (SEW model)"),Fcr=l(),QF=a("li"),nve=a("strong"),Tcr=o("sew-d"),Mcr=o(" \u2014 "),zW=a("a"),Ecr=o("SEWDForSequenceClassification"),Ccr=o(" (SEW-D model)"),wcr=l(),WF=a("li"),sve=a("strong"),Acr=o("unispeech"),Lcr=o(" \u2014 "),QW=a("a"),ycr=o("UniSpeechForSequenceClassification"),xcr=o(" (UniSpeech model)"),$cr=l(),HF=a("li"),lve=a("strong"),kcr=o("unispeech-sat"),Scr=o(" \u2014 "),WW=a("a"),Rcr=o("UniSpeechSatForSequenceClassification"),Pcr=o(" (UniSpeechSat model)"),Bcr=l(),UF=a("li"),ive=a("strong"),Ncr=o("wav2vec2"),Icr=o(" \u2014 "),HW=a("a"),qcr=o("Wav2Vec2ForSequenceClassification"),jcr=o(" (Wav2Vec2 model)"),Dcr=l(),JF=a("li"),dve=a("strong"),Gcr=o("wav2vec2-conformer"),Ocr=o(" \u2014 "),UW=a("a"),Vcr=o("Wav2Vec2ConformerForSequenceClassification"),Xcr=o(" (Wav2Vec2-Conformer model)"),zcr=l(),YF=a("li"),cve=a("strong"),Qcr=o("wavlm"),Wcr=o(" \u2014 "),JW=a("a"),Hcr=o("WavLMForSequenceClassification"),Ucr=o(" (WavLM model)"),Jcr=l(),KF=a("p"),Ycr=o("The model is set in evaluation mode by default using "),fve=a("code"),Kcr=o("model.eval()"),Zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),efr=o("model.train()"),ofr=l(),F(ZF.$$.fragment),kXe=l(),kd=a("h2"),eT=a("a"),gve=a("span"),F(UL.$$.fragment),rfr=l(),hve=a("span"),tfr=o("AutoModelForAudioFrameClassification"),SXe=l(),zo=a("div"),F(JL.$$.fragment),afr=l(),Sd=a("p"),nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YW=a("a"),sfr=o("from_pretrained()"),lfr=o(" class method or the "),KW=a("a"),ifr=o("from_config()"),dfr=o(` class
method.`),cfr=l(),YL=a("p"),ffr=o("This class cannot be instantiated directly using "),pve=a("code"),mfr=o("__init__()"),gfr=o(" (throws an error)."),hfr=l(),Et=a("div"),F(KL.$$.fragment),pfr=l(),_ve=a("p"),_fr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ufr=l(),Rd=a("p"),bfr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),vfr=o("not"),Ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),Tfr=o("from_pretrained()"),Mfr=o(" to load the model weights."),Efr=l(),F(oT.$$.fragment),Cfr=l(),mo=a("div"),F(ZL.$$.fragment),wfr=l(),bve=a("p"),Afr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Lfr=l(),Ya=a("p"),yfr=o("The model class to instantiate is selected based on the "),vve=a("code"),xfr=o("model_type"),$fr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),kfr=o("pretrained_model_name_or_path"),Sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),Rfr=o("pretrained_model_name_or_path"),Pfr=o(":"),Bfr=l(),ot=a("ul"),rT=a("li"),Mve=a("strong"),Nfr=o("data2vec-audio"),Ifr=o(" \u2014 "),eH=a("a"),qfr=o("Data2VecAudioForAudioFrameClassification"),jfr=o(" (Data2VecAudio model)"),Dfr=l(),tT=a("li"),Eve=a("strong"),Gfr=o("unispeech-sat"),Ofr=o(" \u2014 "),oH=a("a"),Vfr=o("UniSpeechSatForAudioFrameClassification"),Xfr=o(" (UniSpeechSat model)"),zfr=l(),aT=a("li"),Cve=a("strong"),Qfr=o("wav2vec2"),Wfr=o(" \u2014 "),rH=a("a"),Hfr=o("Wav2Vec2ForAudioFrameClassification"),Ufr=o(" (Wav2Vec2 model)"),Jfr=l(),nT=a("li"),wve=a("strong"),Yfr=o("wav2vec2-conformer"),Kfr=o(" \u2014 "),tH=a("a"),Zfr=o("Wav2Vec2ConformerForAudioFrameClassification"),emr=o(" (Wav2Vec2-Conformer model)"),omr=l(),sT=a("li"),Ave=a("strong"),rmr=o("wavlm"),tmr=o(" \u2014 "),aH=a("a"),amr=o("WavLMForAudioFrameClassification"),nmr=o(" (WavLM model)"),smr=l(),lT=a("p"),lmr=o("The model is set in evaluation mode by default using "),Lve=a("code"),imr=o("model.eval()"),dmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),cmr=o("model.train()"),fmr=l(),F(iT.$$.fragment),RXe=l(),Pd=a("h2"),dT=a("a"),xve=a("span"),F(ey.$$.fragment),mmr=l(),$ve=a("span"),gmr=o("AutoModelForCTC"),PXe=l(),Qo=a("div"),F(oy.$$.fragment),hmr=l(),Bd=a("p"),pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nH=a("a"),_mr=o("from_pretrained()"),umr=o(" class method or the "),sH=a("a"),bmr=o("from_config()"),vmr=o(` class
method.`),Fmr=l(),ry=a("p"),Tmr=o("This class cannot be instantiated directly using "),kve=a("code"),Mmr=o("__init__()"),Emr=o(" (throws an error)."),Cmr=l(),Ct=a("div"),F(ty.$$.fragment),wmr=l(),Sve=a("p"),Amr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lmr=l(),Nd=a("p"),ymr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),xmr=o("not"),$mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),kmr=o("from_pretrained()"),Smr=o(" to load the model weights."),Rmr=l(),F(cT.$$.fragment),Pmr=l(),go=a("div"),F(ay.$$.fragment),Bmr=l(),Pve=a("p"),Nmr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Imr=l(),Ka=a("p"),qmr=o("The model class to instantiate is selected based on the "),Bve=a("code"),jmr=o("model_type"),Dmr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(":"),zmr=l(),Le=a("ul"),fT=a("li"),qve=a("strong"),Qmr=o("data2vec-audio"),Wmr=o(" \u2014 "),iH=a("a"),Hmr=o("Data2VecAudioForCTC"),Umr=o(" (Data2VecAudio model)"),Jmr=l(),mT=a("li"),jve=a("strong"),Ymr=o("hubert"),Kmr=o(" \u2014 "),dH=a("a"),Zmr=o("HubertForCTC"),egr=o(" (Hubert model)"),ogr=l(),gT=a("li"),Dve=a("strong"),rgr=o("mctct"),tgr=o(" \u2014 "),cH=a("a"),agr=o("MCTCTForCTC"),ngr=o(" (M-CTC-T model)"),sgr=l(),hT=a("li"),Gve=a("strong"),lgr=o("sew"),igr=o(" \u2014 "),fH=a("a"),dgr=o("SEWForCTC"),cgr=o(" (SEW model)"),fgr=l(),pT=a("li"),Ove=a("strong"),mgr=o("sew-d"),ggr=o(" \u2014 "),mH=a("a"),hgr=o("SEWDForCTC"),pgr=o(" (SEW-D model)"),_gr=l(),_T=a("li"),Vve=a("strong"),ugr=o("unispeech"),bgr=o(" \u2014 "),gH=a("a"),vgr=o("UniSpeechForCTC"),Fgr=o(" (UniSpeech model)"),Tgr=l(),uT=a("li"),Xve=a("strong"),Mgr=o("unispeech-sat"),Egr=o(" \u2014 "),hH=a("a"),Cgr=o("UniSpeechSatForCTC"),wgr=o(" (UniSpeechSat model)"),Agr=l(),bT=a("li"),zve=a("strong"),Lgr=o("wav2vec2"),ygr=o(" \u2014 "),pH=a("a"),xgr=o("Wav2Vec2ForCTC"),$gr=o(" (Wav2Vec2 model)"),kgr=l(),vT=a("li"),Qve=a("strong"),Sgr=o("wav2vec2-conformer"),Rgr=o(" \u2014 "),_H=a("a"),Pgr=o("Wav2Vec2ConformerForCTC"),Bgr=o(" (Wav2Vec2-Conformer model)"),Ngr=l(),FT=a("li"),Wve=a("strong"),Igr=o("wavlm"),qgr=o(" \u2014 "),uH=a("a"),jgr=o("WavLMForCTC"),Dgr=o(" (WavLM model)"),Ggr=l(),TT=a("p"),Ogr=o("The model is set in evaluation mode by default using "),Hve=a("code"),Vgr=o("model.eval()"),Xgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=a("code"),zgr=o("model.train()"),Qgr=l(),F(MT.$$.fragment),BXe=l(),Id=a("h2"),ET=a("a"),Jve=a("span"),F(ny.$$.fragment),Wgr=l(),Yve=a("span"),Hgr=o("AutoModelForSpeechSeq2Seq"),NXe=l(),Wo=a("div"),F(sy.$$.fragment),Ugr=l(),qd=a("p"),Jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" class method or the "),vH=a("a"),Zgr=o("from_config()"),ehr=o(` class
method.`),ohr=l(),ly=a("p"),rhr=o("This class cannot be instantiated directly using "),Kve=a("code"),thr=o("__init__()"),ahr=o(" (throws an error)."),nhr=l(),wt=a("div"),F(iy.$$.fragment),shr=l(),Zve=a("p"),lhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ihr=l(),jd=a("p"),dhr=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),chr=o("not"),fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),mhr=o("from_pretrained()"),ghr=o(" to load the model weights."),hhr=l(),F(CT.$$.fragment),phr=l(),ho=a("div"),F(dy.$$.fragment),_hr=l(),o5e=a("p"),uhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bhr=l(),Za=a("p"),vhr=o("The model class to instantiate is selected based on the "),r5e=a("code"),Fhr=o("model_type"),Thr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),Chr=o("pretrained_model_name_or_path"),whr=o(":"),Ahr=l(),cy=a("ul"),wT=a("li"),n5e=a("strong"),Lhr=o("speech-encoder-decoder"),yhr=o(" \u2014 "),TH=a("a"),xhr=o("SpeechEncoderDecoderModel"),$hr=o(" (Speech Encoder decoder model)"),khr=l(),AT=a("li"),s5e=a("strong"),Shr=o("speech_to_text"),Rhr=o(" \u2014 "),MH=a("a"),Phr=o("Speech2TextForConditionalGeneration"),Bhr=o(" (Speech2Text model)"),Nhr=l(),LT=a("p"),Ihr=o("The model is set in evaluation mode by default using "),l5e=a("code"),qhr=o("model.eval()"),jhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i5e=a("code"),Dhr=o("model.train()"),Ghr=l(),F(yT.$$.fragment),IXe=l(),Dd=a("h2"),xT=a("a"),d5e=a("span"),F(fy.$$.fragment),Ohr=l(),c5e=a("span"),Vhr=o("AutoModelForAudioXVector"),qXe=l(),Ho=a("div"),F(my.$$.fragment),Xhr=l(),Gd=a("p"),zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EH=a("a"),Qhr=o("from_pretrained()"),Whr=o(" class method or the "),CH=a("a"),Hhr=o("from_config()"),Uhr=o(` class
method.`),Jhr=l(),gy=a("p"),Yhr=o("This class cannot be instantiated directly using "),f5e=a("code"),Khr=o("__init__()"),Zhr=o(" (throws an error)."),epr=l(),At=a("div"),F(hy.$$.fragment),opr=l(),m5e=a("p"),rpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tpr=l(),Od=a("p"),apr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),npr=o("not"),spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),lpr=o("from_pretrained()"),ipr=o(" to load the model weights."),dpr=l(),F($T.$$.fragment),cpr=l(),po=a("div"),F(py.$$.fragment),fpr=l(),h5e=a("p"),mpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gpr=l(),en=a("p"),hpr=o("The model class to instantiate is selected based on the "),p5e=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(":"),Tpr=l(),rt=a("ul"),kT=a("li"),b5e=a("strong"),Mpr=o("data2vec-audio"),Epr=o(" \u2014 "),AH=a("a"),Cpr=o("Data2VecAudioForXVector"),wpr=o(" (Data2VecAudio model)"),Apr=l(),ST=a("li"),v5e=a("strong"),Lpr=o("unispeech-sat"),ypr=o(" \u2014 "),LH=a("a"),xpr=o("UniSpeechSatForXVector"),$pr=o(" (UniSpeechSat model)"),kpr=l(),RT=a("li"),F5e=a("strong"),Spr=o("wav2vec2"),Rpr=o(" \u2014 "),yH=a("a"),Ppr=o("Wav2Vec2ForXVector"),Bpr=o(" (Wav2Vec2 model)"),Npr=l(),PT=a("li"),T5e=a("strong"),Ipr=o("wav2vec2-conformer"),qpr=o(" \u2014 "),xH=a("a"),jpr=o("Wav2Vec2ConformerForXVector"),Dpr=o(" (Wav2Vec2-Conformer model)"),Gpr=l(),BT=a("li"),M5e=a("strong"),Opr=o("wavlm"),Vpr=o(" \u2014 "),$H=a("a"),Xpr=o("WavLMForXVector"),zpr=o(" (WavLM model)"),Qpr=l(),NT=a("p"),Wpr=o("The model is set in evaluation mode by default using "),E5e=a("code"),Hpr=o("model.eval()"),Upr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C5e=a("code"),Jpr=o("model.train()"),Ypr=l(),F(IT.$$.fragment),jXe=l(),Vd=a("h2"),qT=a("a"),w5e=a("span"),F(_y.$$.fragment),Kpr=l(),A5e=a("span"),Zpr=o("AutoModelForMaskedImageModeling"),DXe=l(),Uo=a("div"),F(uy.$$.fragment),e_r=l(),Xd=a("p"),o_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kH=a("a"),r_r=o("from_pretrained()"),t_r=o(" class method or the "),SH=a("a"),a_r=o("from_config()"),n_r=o(` class
method.`),s_r=l(),by=a("p"),l_r=o("This class cannot be instantiated directly using "),L5e=a("code"),i_r=o("__init__()"),d_r=o(" (throws an error)."),c_r=l(),Lt=a("div"),F(vy.$$.fragment),f_r=l(),y5e=a("p"),m_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),g_r=l(),zd=a("p"),h_r=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),p_r=o("not"),__r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),u_r=o("from_pretrained()"),b_r=o(" to load the model weights."),v_r=l(),F(jT.$$.fragment),F_r=l(),_o=a("div"),F(Fy.$$.fragment),T_r=l(),$5e=a("p"),M_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),E_r=l(),on=a("p"),C_r=o("The model class to instantiate is selected based on the "),k5e=a("code"),w_r=o("model_type"),A_r=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),L_r=o("pretrained_model_name_or_path"),y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(":"),k_r=l(),Qd=a("ul"),DT=a("li"),P5e=a("strong"),S_r=o("deit"),R_r=o(" \u2014 "),PH=a("a"),P_r=o("DeiTForMaskedImageModeling"),B_r=o(" (DeiT model)"),N_r=l(),GT=a("li"),B5e=a("strong"),I_r=o("swin"),q_r=o(" \u2014 "),BH=a("a"),j_r=o("SwinForMaskedImageModeling"),D_r=o(" (Swin Transformer model)"),G_r=l(),OT=a("li"),N5e=a("strong"),O_r=o("vit"),V_r=o(" \u2014 "),NH=a("a"),X_r=o("ViTForMaskedImageModeling"),z_r=o(" (ViT model)"),Q_r=l(),VT=a("p"),W_r=o("The model is set in evaluation mode by default using "),I5e=a("code"),H_r=o("model.eval()"),U_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q5e=a("code"),J_r=o("model.train()"),Y_r=l(),F(XT.$$.fragment),GXe=l(),Wd=a("h2"),zT=a("a"),j5e=a("span"),F(Ty.$$.fragment),K_r=l(),D5e=a("span"),Z_r=o("AutoModelForObjectDetection"),OXe=l(),Jo=a("div"),F(My.$$.fragment),eur=l(),Hd=a("p"),our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),IH=a("a"),rur=o("from_pretrained()"),tur=o(" class method or the "),qH=a("a"),aur=o("from_config()"),nur=o(` class
method.`),sur=l(),Ey=a("p"),lur=o("This class cannot be instantiated directly using "),G5e=a("code"),iur=o("__init__()"),dur=o(" (throws an error)."),cur=l(),yt=a("div"),F(Cy.$$.fragment),fur=l(),O5e=a("p"),mur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gur=l(),Ud=a("p"),hur=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),pur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),uur=o("from_pretrained()"),bur=o(" to load the model weights."),vur=l(),F(QT.$$.fragment),Fur=l(),uo=a("div"),F(wy.$$.fragment),Tur=l(),X5e=a("p"),Mur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Eur=l(),rn=a("p"),Cur=o("The model class to instantiate is selected based on the "),z5e=a("code"),wur=o("model_type"),Aur=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),Lur=o("pretrained_model_name_or_path"),yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(":"),kur=l(),Ay=a("ul"),WT=a("li"),H5e=a("strong"),Sur=o("detr"),Rur=o(" \u2014 "),DH=a("a"),Pur=o("DetrForObjectDetection"),Bur=o(" (DETR model)"),Nur=l(),HT=a("li"),U5e=a("strong"),Iur=o("yolos"),qur=o(" \u2014 "),GH=a("a"),jur=o("YolosForObjectDetection"),Dur=o(" (YOLOS model)"),Gur=l(),UT=a("p"),Our=o("The model is set in evaluation mode by default using "),J5e=a("code"),Vur=o("model.eval()"),Xur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y5e=a("code"),zur=o("model.train()"),Qur=l(),F(JT.$$.fragment),VXe=l(),Jd=a("h2"),YT=a("a"),K5e=a("span"),F(Ly.$$.fragment),Wur=l(),Z5e=a("span"),Hur=o("AutoModelForImageSegmentation"),XXe=l(),Yo=a("div"),F(yy.$$.fragment),Uur=l(),Yd=a("p"),Jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OH=a("a"),Yur=o("from_pretrained()"),Kur=o(" class method or the "),VH=a("a"),Zur=o("from_config()"),e1r=o(` class
method.`),o1r=l(),xy=a("p"),r1r=o("This class cannot be instantiated directly using "),e0e=a("code"),t1r=o("__init__()"),a1r=o(" (throws an error)."),n1r=l(),xt=a("div"),F($y.$$.fragment),s1r=l(),o0e=a("p"),l1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i1r=l(),Kd=a("p"),d1r=o(`Note:
Loading a model from its configuration file does `),r0e=a("strong"),c1r=o("not"),f1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),m1r=o("from_pretrained()"),g1r=o(" to load the model weights."),h1r=l(),F(KT.$$.fragment),p1r=l(),bo=a("div"),F(ky.$$.fragment),_1r=l(),t0e=a("p"),u1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),b1r=l(),tn=a("p"),v1r=o("The model class to instantiate is selected based on the "),a0e=a("code"),F1r=o("model_type"),T1r=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),M1r=o("pretrained_model_name_or_path"),E1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),C1r=o("pretrained_model_name_or_path"),w1r=o(":"),A1r=l(),l0e=a("ul"),ZT=a("li"),i0e=a("strong"),L1r=o("detr"),y1r=o(" \u2014 "),zH=a("a"),x1r=o("DetrForSegmentation"),$1r=o(" (DETR model)"),k1r=l(),e8=a("p"),S1r=o("The model is set in evaluation mode by default using "),d0e=a("code"),R1r=o("model.eval()"),P1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c0e=a("code"),B1r=o("model.train()"),N1r=l(),F(o8.$$.fragment),zXe=l(),Zd=a("h2"),r8=a("a"),f0e=a("span"),F(Sy.$$.fragment),I1r=l(),m0e=a("span"),q1r=o("AutoModelForSemanticSegmentation"),QXe=l(),Ko=a("div"),F(Ry.$$.fragment),j1r=l(),ec=a("p"),D1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QH=a("a"),G1r=o("from_pretrained()"),O1r=o(" class method or the "),WH=a("a"),V1r=o("from_config()"),X1r=o(` class
method.`),z1r=l(),Py=a("p"),Q1r=o("This class cannot be instantiated directly using "),g0e=a("code"),W1r=o("__init__()"),H1r=o(" (throws an error)."),U1r=l(),$t=a("div"),F(By.$$.fragment),J1r=l(),h0e=a("p"),Y1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),K1r=l(),oc=a("p"),Z1r=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),e2r=o("not"),o2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),r2r=o("from_pretrained()"),t2r=o(" to load the model weights."),a2r=l(),F(t8.$$.fragment),n2r=l(),vo=a("div"),F(Ny.$$.fragment),s2r=l(),_0e=a("p"),l2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),i2r=l(),an=a("p"),d2r=o("The model class to instantiate is selected based on the "),u0e=a("code"),c2r=o("model_type"),f2r=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),m2r=o("pretrained_model_name_or_path"),g2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(":"),_2r=l(),tt=a("ul"),a8=a("li"),F0e=a("strong"),u2r=o("beit"),b2r=o(" \u2014 "),UH=a("a"),v2r=o("BeitForSemanticSegmentation"),F2r=o(" (BEiT model)"),T2r=l(),n8=a("li"),T0e=a("strong"),M2r=o("data2vec-vision"),E2r=o(" \u2014 "),JH=a("a"),C2r=o("Data2VecVisionForSemanticSegmentation"),w2r=o(" (Data2VecVision model)"),A2r=l(),s8=a("li"),M0e=a("strong"),L2r=o("dpt"),y2r=o(" \u2014 "),YH=a("a"),x2r=o("DPTForSemanticSegmentation"),$2r=o(" (DPT model)"),k2r=l(),l8=a("li"),E0e=a("strong"),S2r=o("mobilevit"),R2r=o(" \u2014 "),KH=a("a"),P2r=o("MobileViTForSemanticSegmentation"),B2r=o(" (MobileViT model)"),N2r=l(),i8=a("li"),C0e=a("strong"),I2r=o("segformer"),q2r=o(" \u2014 "),ZH=a("a"),j2r=o("SegformerForSemanticSegmentation"),D2r=o(" (SegFormer model)"),G2r=l(),d8=a("p"),O2r=o("The model is set in evaluation mode by default using "),w0e=a("code"),V2r=o("model.eval()"),X2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A0e=a("code"),z2r=o("model.train()"),Q2r=l(),F(c8.$$.fragment),WXe=l(),rc=a("h2"),f8=a("a"),L0e=a("span"),F(Iy.$$.fragment),W2r=l(),y0e=a("span"),H2r=o("AutoModelForInstanceSegmentation"),HXe=l(),Zo=a("div"),F(qy.$$.fragment),U2r=l(),tc=a("p"),J2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eU=a("a"),Y2r=o("from_pretrained()"),K2r=o(" class method or the "),oU=a("a"),Z2r=o("from_config()"),ebr=o(` class
method.`),obr=l(),jy=a("p"),rbr=o("This class cannot be instantiated directly using "),x0e=a("code"),tbr=o("__init__()"),abr=o(" (throws an error)."),nbr=l(),kt=a("div"),F(Dy.$$.fragment),sbr=l(),$0e=a("p"),lbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ibr=l(),ac=a("p"),dbr=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),cbr=o("not"),fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),mbr=o("from_pretrained()"),gbr=o(" to load the model weights."),hbr=l(),F(m8.$$.fragment),pbr=l(),Fo=a("div"),F(Gy.$$.fragment),_br=l(),S0e=a("p"),ubr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bbr=l(),nn=a("p"),vbr=o("The model class to instantiate is selected based on the "),R0e=a("code"),Fbr=o("model_type"),Tbr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),Mbr=o("pretrained_model_name_or_path"),Ebr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(":"),Abr=l(),N0e=a("ul"),g8=a("li"),I0e=a("strong"),Lbr=o("maskformer"),ybr=o(" \u2014 "),tU=a("a"),xbr=o("MaskFormerForInstanceSegmentation"),$br=o(" (MaskFormer model)"),kbr=l(),h8=a("p"),Sbr=o("The model is set in evaluation mode by default using "),q0e=a("code"),Rbr=o("model.eval()"),Pbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=a("code"),Bbr=o("model.train()"),Nbr=l(),F(p8.$$.fragment),UXe=l(),nc=a("h2"),_8=a("a"),D0e=a("span"),F(Oy.$$.fragment),Ibr=l(),G0e=a("span"),qbr=o("TFAutoModel"),JXe=l(),er=a("div"),F(Vy.$$.fragment),jbr=l(),sc=a("p"),Dbr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aU=a("a"),Gbr=o("from_pretrained()"),Obr=o(" class method or the "),nU=a("a"),Vbr=o("from_config()"),Xbr=o(` class
method.`),zbr=l(),Xy=a("p"),Qbr=o("This class cannot be instantiated directly using "),O0e=a("code"),Wbr=o("__init__()"),Hbr=o(" (throws an error)."),Ubr=l(),St=a("div"),F(zy.$$.fragment),Jbr=l(),V0e=a("p"),Ybr=o("Instantiates one of the base model classes of the library from a configuration."),Kbr=l(),lc=a("p"),Zbr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),evr=o("not"),ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),rvr=o("from_pretrained()"),tvr=o(" to load the model weights."),avr=l(),F(u8.$$.fragment),nvr=l(),xr=a("div"),F(Qy.$$.fragment),svr=l(),z0e=a("p"),lvr=o("Instantiate one of the base model classes of the library from a pretrained model."),ivr=l(),sn=a("p"),dvr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),cvr=o("model_type"),fvr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),mvr=o("pretrained_model_name_or_path"),gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),hvr=o("pretrained_model_name_or_path"),pvr=o(":"),_vr=l(),q=a("ul"),b8=a("li"),U0e=a("strong"),uvr=o("albert"),bvr=o(" \u2014 "),lU=a("a"),vvr=o("TFAlbertModel"),Fvr=o(" (ALBERT model)"),Tvr=l(),v8=a("li"),J0e=a("strong"),Mvr=o("bart"),Evr=o(" \u2014 "),iU=a("a"),Cvr=o("TFBartModel"),wvr=o(" (BART model)"),Avr=l(),F8=a("li"),Y0e=a("strong"),Lvr=o("bert"),yvr=o(" \u2014 "),dU=a("a"),xvr=o("TFBertModel"),$vr=o(" (BERT model)"),kvr=l(),T8=a("li"),K0e=a("strong"),Svr=o("blenderbot"),Rvr=o(" \u2014 "),cU=a("a"),Pvr=o("TFBlenderbotModel"),Bvr=o(" (Blenderbot model)"),Nvr=l(),M8=a("li"),Z0e=a("strong"),Ivr=o("blenderbot-small"),qvr=o(" \u2014 "),fU=a("a"),jvr=o("TFBlenderbotSmallModel"),Dvr=o(" (BlenderbotSmall model)"),Gvr=l(),E8=a("li"),eFe=a("strong"),Ovr=o("camembert"),Vvr=o(" \u2014 "),mU=a("a"),Xvr=o("TFCamembertModel"),zvr=o(" (CamemBERT model)"),Qvr=l(),C8=a("li"),oFe=a("strong"),Wvr=o("clip"),Hvr=o(" \u2014 "),gU=a("a"),Uvr=o("TFCLIPModel"),Jvr=o(" (CLIP model)"),Yvr=l(),w8=a("li"),rFe=a("strong"),Kvr=o("convbert"),Zvr=o(" \u2014 "),hU=a("a"),e5r=o("TFConvBertModel"),o5r=o(" (ConvBERT model)"),r5r=l(),A8=a("li"),tFe=a("strong"),t5r=o("convnext"),a5r=o(" \u2014 "),pU=a("a"),n5r=o("TFConvNextModel"),s5r=o(" (ConvNeXT model)"),l5r=l(),L8=a("li"),aFe=a("strong"),i5r=o("ctrl"),d5r=o(" \u2014 "),_U=a("a"),c5r=o("TFCTRLModel"),f5r=o(" (CTRL model)"),m5r=l(),y8=a("li"),nFe=a("strong"),g5r=o("data2vec-vision"),h5r=o(" \u2014 "),uU=a("a"),p5r=o("TFData2VecVisionModel"),_5r=o(" (Data2VecVision model)"),u5r=l(),x8=a("li"),sFe=a("strong"),b5r=o("deberta"),v5r=o(" \u2014 "),bU=a("a"),F5r=o("TFDebertaModel"),T5r=o(" (DeBERTa model)"),M5r=l(),$8=a("li"),lFe=a("strong"),E5r=o("deberta-v2"),C5r=o(" \u2014 "),vU=a("a"),w5r=o("TFDebertaV2Model"),A5r=o(" (DeBERTa-v2 model)"),L5r=l(),k8=a("li"),iFe=a("strong"),y5r=o("distilbert"),x5r=o(" \u2014 "),FU=a("a"),$5r=o("TFDistilBertModel"),k5r=o(" (DistilBERT model)"),S5r=l(),S8=a("li"),dFe=a("strong"),R5r=o("dpr"),P5r=o(" \u2014 "),TU=a("a"),B5r=o("TFDPRQuestionEncoder"),N5r=o(" (DPR model)"),I5r=l(),R8=a("li"),cFe=a("strong"),q5r=o("electra"),j5r=o(" \u2014 "),MU=a("a"),D5r=o("TFElectraModel"),G5r=o(" (ELECTRA model)"),O5r=l(),P8=a("li"),fFe=a("strong"),V5r=o("flaubert"),X5r=o(" \u2014 "),EU=a("a"),z5r=o("TFFlaubertModel"),Q5r=o(" (FlauBERT model)"),W5r=l(),Js=a("li"),mFe=a("strong"),H5r=o("funnel"),U5r=o(" \u2014 "),CU=a("a"),J5r=o("TFFunnelModel"),Y5r=o(" or "),wU=a("a"),K5r=o("TFFunnelBaseModel"),Z5r=o(" (Funnel Transformer model)"),e0r=l(),B8=a("li"),gFe=a("strong"),o0r=o("gpt2"),r0r=o(" \u2014 "),AU=a("a"),t0r=o("TFGPT2Model"),a0r=o(" (OpenAI GPT-2 model)"),n0r=l(),N8=a("li"),hFe=a("strong"),s0r=o("gptj"),l0r=o(" \u2014 "),LU=a("a"),i0r=o("TFGPTJModel"),d0r=o(" (GPT-J model)"),c0r=l(),I8=a("li"),pFe=a("strong"),f0r=o("hubert"),m0r=o(" \u2014 "),yU=a("a"),g0r=o("TFHubertModel"),h0r=o(" (Hubert model)"),p0r=l(),q8=a("li"),_Fe=a("strong"),_0r=o("layoutlm"),u0r=o(" \u2014 "),xU=a("a"),b0r=o("TFLayoutLMModel"),v0r=o(" (LayoutLM model)"),F0r=l(),j8=a("li"),uFe=a("strong"),T0r=o("led"),M0r=o(" \u2014 "),$U=a("a"),E0r=o("TFLEDModel"),C0r=o(" (LED model)"),w0r=l(),D8=a("li"),bFe=a("strong"),A0r=o("longformer"),L0r=o(" \u2014 "),kU=a("a"),y0r=o("TFLongformerModel"),x0r=o(" (Longformer model)"),$0r=l(),G8=a("li"),vFe=a("strong"),k0r=o("lxmert"),S0r=o(" \u2014 "),SU=a("a"),R0r=o("TFLxmertModel"),P0r=o(" (LXMERT model)"),B0r=l(),O8=a("li"),FFe=a("strong"),N0r=o("marian"),I0r=o(" \u2014 "),RU=a("a"),q0r=o("TFMarianModel"),j0r=o(" (Marian model)"),D0r=l(),V8=a("li"),TFe=a("strong"),G0r=o("mbart"),O0r=o(" \u2014 "),PU=a("a"),V0r=o("TFMBartModel"),X0r=o(" (mBART model)"),z0r=l(),X8=a("li"),MFe=a("strong"),Q0r=o("mobilebert"),W0r=o(" \u2014 "),BU=a("a"),H0r=o("TFMobileBertModel"),U0r=o(" (MobileBERT model)"),J0r=l(),z8=a("li"),EFe=a("strong"),Y0r=o("mpnet"),K0r=o(" \u2014 "),NU=a("a"),Z0r=o("TFMPNetModel"),eFr=o(" (MPNet model)"),oFr=l(),Q8=a("li"),CFe=a("strong"),rFr=o("mt5"),tFr=o(" \u2014 "),IU=a("a"),aFr=o("TFMT5Model"),nFr=o(" (MT5 model)"),sFr=l(),W8=a("li"),wFe=a("strong"),lFr=o("openai-gpt"),iFr=o(" \u2014 "),qU=a("a"),dFr=o("TFOpenAIGPTModel"),cFr=o(" (OpenAI GPT model)"),fFr=l(),H8=a("li"),AFe=a("strong"),mFr=o("opt"),gFr=o(" \u2014 "),jU=a("a"),hFr=o("TFOPTModel"),pFr=o(" (OPT model)"),_Fr=l(),U8=a("li"),LFe=a("strong"),uFr=o("pegasus"),bFr=o(" \u2014 "),DU=a("a"),vFr=o("TFPegasusModel"),FFr=o(" (Pegasus model)"),TFr=l(),J8=a("li"),yFe=a("strong"),MFr=o("regnet"),EFr=o(" \u2014 "),GU=a("a"),CFr=o("TFRegNetModel"),wFr=o(" (RegNet model)"),AFr=l(),Y8=a("li"),xFe=a("strong"),LFr=o("rembert"),yFr=o(" \u2014 "),OU=a("a"),xFr=o("TFRemBertModel"),$Fr=o(" (RemBERT model)"),kFr=l(),K8=a("li"),$Fe=a("strong"),SFr=o("resnet"),RFr=o(" \u2014 "),VU=a("a"),PFr=o("TFResNetModel"),BFr=o(" (ResNet model)"),NFr=l(),Z8=a("li"),kFe=a("strong"),IFr=o("roberta"),qFr=o(" \u2014 "),XU=a("a"),jFr=o("TFRobertaModel"),DFr=o(" (RoBERTa model)"),GFr=l(),e9=a("li"),SFe=a("strong"),OFr=o("roformer"),VFr=o(" \u2014 "),zU=a("a"),XFr=o("TFRoFormerModel"),zFr=o(" (RoFormer model)"),QFr=l(),o9=a("li"),RFe=a("strong"),WFr=o("speech_to_text"),HFr=o(" \u2014 "),QU=a("a"),UFr=o("TFSpeech2TextModel"),JFr=o(" (Speech2Text model)"),YFr=l(),r9=a("li"),PFe=a("strong"),KFr=o("swin"),ZFr=o(" \u2014 "),WU=a("a"),eTr=o("TFSwinModel"),oTr=o(" (Swin Transformer model)"),rTr=l(),t9=a("li"),BFe=a("strong"),tTr=o("t5"),aTr=o(" \u2014 "),HU=a("a"),nTr=o("TFT5Model"),sTr=o(" (T5 model)"),lTr=l(),a9=a("li"),NFe=a("strong"),iTr=o("tapas"),dTr=o(" \u2014 "),UU=a("a"),cTr=o("TFTapasModel"),fTr=o(" (TAPAS model)"),mTr=l(),n9=a("li"),IFe=a("strong"),gTr=o("transfo-xl"),hTr=o(" \u2014 "),JU=a("a"),pTr=o("TFTransfoXLModel"),_Tr=o(" (Transformer-XL model)"),uTr=l(),s9=a("li"),qFe=a("strong"),bTr=o("vit"),vTr=o(" \u2014 "),YU=a("a"),FTr=o("TFViTModel"),TTr=o(" (ViT model)"),MTr=l(),l9=a("li"),jFe=a("strong"),ETr=o("vit_mae"),CTr=o(" \u2014 "),KU=a("a"),wTr=o("TFViTMAEModel"),ATr=o(" (ViTMAE model)"),LTr=l(),i9=a("li"),DFe=a("strong"),yTr=o("wav2vec2"),xTr=o(" \u2014 "),ZU=a("a"),$Tr=o("TFWav2Vec2Model"),kTr=o(" (Wav2Vec2 model)"),STr=l(),d9=a("li"),GFe=a("strong"),RTr=o("xlm"),PTr=o(" \u2014 "),eJ=a("a"),BTr=o("TFXLMModel"),NTr=o(" (XLM model)"),ITr=l(),c9=a("li"),OFe=a("strong"),qTr=o("xlm-roberta"),jTr=o(" \u2014 "),oJ=a("a"),DTr=o("TFXLMRobertaModel"),GTr=o(" (XLM-RoBERTa model)"),OTr=l(),f9=a("li"),VFe=a("strong"),VTr=o("xlnet"),XTr=o(" \u2014 "),rJ=a("a"),zTr=o("TFXLNetModel"),QTr=o(" (XLNet model)"),WTr=l(),F(m9.$$.fragment),YXe=l(),ic=a("h2"),g9=a("a"),XFe=a("span"),F(Wy.$$.fragment),HTr=l(),zFe=a("span"),UTr=o("TFAutoModelForPreTraining"),KXe=l(),or=a("div"),F(Hy.$$.fragment),JTr=l(),dc=a("p"),YTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=a("a"),KTr=o("from_pretrained()"),ZTr=o(" class method or the "),aJ=a("a"),e8r=o("from_config()"),o8r=o(` class
method.`),r8r=l(),Uy=a("p"),t8r=o("This class cannot be instantiated directly using "),QFe=a("code"),a8r=o("__init__()"),n8r=o(" (throws an error)."),s8r=l(),Rt=a("div"),F(Jy.$$.fragment),l8r=l(),WFe=a("p"),i8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d8r=l(),cc=a("p"),c8r=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),f8r=o("not"),m8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),g8r=o("from_pretrained()"),h8r=o(" to load the model weights."),p8r=l(),F(h9.$$.fragment),_8r=l(),$r=a("div"),F(Yy.$$.fragment),u8r=l(),UFe=a("p"),b8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v8r=l(),ln=a("p"),F8r=o("The model class to instantiate is selected based on the "),JFe=a("code"),T8r=o("model_type"),M8r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),E8r=o("pretrained_model_name_or_path"),C8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(":"),L8r=l(),se=a("ul"),p9=a("li"),ZFe=a("strong"),y8r=o("albert"),x8r=o(" \u2014 "),sJ=a("a"),$8r=o("TFAlbertForPreTraining"),k8r=o(" (ALBERT model)"),S8r=l(),_9=a("li"),eTe=a("strong"),R8r=o("bart"),P8r=o(" \u2014 "),lJ=a("a"),B8r=o("TFBartForConditionalGeneration"),N8r=o(" (BART model)"),I8r=l(),u9=a("li"),oTe=a("strong"),q8r=o("bert"),j8r=o(" \u2014 "),iJ=a("a"),D8r=o("TFBertForPreTraining"),G8r=o(" (BERT model)"),O8r=l(),b9=a("li"),rTe=a("strong"),V8r=o("camembert"),X8r=o(" \u2014 "),dJ=a("a"),z8r=o("TFCamembertForMaskedLM"),Q8r=o(" (CamemBERT model)"),W8r=l(),v9=a("li"),tTe=a("strong"),H8r=o("ctrl"),U8r=o(" \u2014 "),cJ=a("a"),J8r=o("TFCTRLLMHeadModel"),Y8r=o(" (CTRL model)"),K8r=l(),F9=a("li"),aTe=a("strong"),Z8r=o("distilbert"),e9r=o(" \u2014 "),fJ=a("a"),o9r=o("TFDistilBertForMaskedLM"),r9r=o(" (DistilBERT model)"),t9r=l(),T9=a("li"),nTe=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),mJ=a("a"),s9r=o("TFElectraForPreTraining"),l9r=o(" (ELECTRA model)"),i9r=l(),M9=a("li"),sTe=a("strong"),d9r=o("flaubert"),c9r=o(" \u2014 "),gJ=a("a"),f9r=o("TFFlaubertWithLMHeadModel"),m9r=o(" (FlauBERT model)"),g9r=l(),E9=a("li"),lTe=a("strong"),h9r=o("funnel"),p9r=o(" \u2014 "),hJ=a("a"),_9r=o("TFFunnelForPreTraining"),u9r=o(" (Funnel Transformer model)"),b9r=l(),C9=a("li"),iTe=a("strong"),v9r=o("gpt2"),F9r=o(" \u2014 "),pJ=a("a"),T9r=o("TFGPT2LMHeadModel"),M9r=o(" (OpenAI GPT-2 model)"),E9r=l(),w9=a("li"),dTe=a("strong"),C9r=o("layoutlm"),w9r=o(" \u2014 "),_J=a("a"),A9r=o("TFLayoutLMForMaskedLM"),L9r=o(" (LayoutLM model)"),y9r=l(),A9=a("li"),cTe=a("strong"),x9r=o("lxmert"),$9r=o(" \u2014 "),uJ=a("a"),k9r=o("TFLxmertForPreTraining"),S9r=o(" (LXMERT model)"),R9r=l(),L9=a("li"),fTe=a("strong"),P9r=o("mobilebert"),B9r=o(" \u2014 "),bJ=a("a"),N9r=o("TFMobileBertForPreTraining"),I9r=o(" (MobileBERT model)"),q9r=l(),y9=a("li"),mTe=a("strong"),j9r=o("mpnet"),D9r=o(" \u2014 "),vJ=a("a"),G9r=o("TFMPNetForMaskedLM"),O9r=o(" (MPNet model)"),V9r=l(),x9=a("li"),gTe=a("strong"),X9r=o("openai-gpt"),z9r=o(" \u2014 "),FJ=a("a"),Q9r=o("TFOpenAIGPTLMHeadModel"),W9r=o(" (OpenAI GPT model)"),H9r=l(),$9=a("li"),hTe=a("strong"),U9r=o("roberta"),J9r=o(" \u2014 "),TJ=a("a"),Y9r=o("TFRobertaForMaskedLM"),K9r=o(" (RoBERTa model)"),Z9r=l(),k9=a("li"),pTe=a("strong"),eMr=o("t5"),oMr=o(" \u2014 "),MJ=a("a"),rMr=o("TFT5ForConditionalGeneration"),tMr=o(" (T5 model)"),aMr=l(),S9=a("li"),_Te=a("strong"),nMr=o("tapas"),sMr=o(" \u2014 "),EJ=a("a"),lMr=o("TFTapasForMaskedLM"),iMr=o(" (TAPAS model)"),dMr=l(),R9=a("li"),uTe=a("strong"),cMr=o("transfo-xl"),fMr=o(" \u2014 "),CJ=a("a"),mMr=o("TFTransfoXLLMHeadModel"),gMr=o(" (Transformer-XL model)"),hMr=l(),P9=a("li"),bTe=a("strong"),pMr=o("vit_mae"),_Mr=o(" \u2014 "),wJ=a("a"),uMr=o("TFViTMAEForPreTraining"),bMr=o(" (ViTMAE model)"),vMr=l(),B9=a("li"),vTe=a("strong"),FMr=o("xlm"),TMr=o(" \u2014 "),AJ=a("a"),MMr=o("TFXLMWithLMHeadModel"),EMr=o(" (XLM model)"),CMr=l(),N9=a("li"),FTe=a("strong"),wMr=o("xlm-roberta"),AMr=o(" \u2014 "),LJ=a("a"),LMr=o("TFXLMRobertaForMaskedLM"),yMr=o(" (XLM-RoBERTa model)"),xMr=l(),I9=a("li"),TTe=a("strong"),$Mr=o("xlnet"),kMr=o(" \u2014 "),yJ=a("a"),SMr=o("TFXLNetLMHeadModel"),RMr=o(" (XLNet model)"),PMr=l(),F(q9.$$.fragment),ZXe=l(),fc=a("h2"),j9=a("a"),MTe=a("span"),F(Ky.$$.fragment),BMr=l(),ETe=a("span"),NMr=o("TFAutoModelForCausalLM"),eze=l(),rr=a("div"),F(Zy.$$.fragment),IMr=l(),mc=a("p"),qMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=a("a"),jMr=o("from_pretrained()"),DMr=o(" class method or the "),$J=a("a"),GMr=o("from_config()"),OMr=o(` class
method.`),VMr=l(),ex=a("p"),XMr=o("This class cannot be instantiated directly using "),CTe=a("code"),zMr=o("__init__()"),QMr=o(" (throws an error)."),WMr=l(),Pt=a("div"),F(ox.$$.fragment),HMr=l(),wTe=a("p"),UMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JMr=l(),gc=a("p"),YMr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),KMr=o("not"),ZMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),e4r=o("from_pretrained()"),o4r=o(" to load the model weights."),r4r=l(),F(D9.$$.fragment),t4r=l(),kr=a("div"),F(rx.$$.fragment),a4r=l(),LTe=a("p"),n4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s4r=l(),dn=a("p"),l4r=o("The model class to instantiate is selected based on the "),yTe=a("code"),i4r=o("model_type"),d4r=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(":"),h4r=l(),Me=a("ul"),G9=a("li"),kTe=a("strong"),p4r=o("bert"),_4r=o(" \u2014 "),SJ=a("a"),u4r=o("TFBertLMHeadModel"),b4r=o(" (BERT model)"),v4r=l(),O9=a("li"),STe=a("strong"),F4r=o("camembert"),T4r=o(" \u2014 "),RJ=a("a"),M4r=o("TFCamembertForCausalLM"),E4r=o(" (CamemBERT model)"),C4r=l(),V9=a("li"),RTe=a("strong"),w4r=o("ctrl"),A4r=o(" \u2014 "),PJ=a("a"),L4r=o("TFCTRLLMHeadModel"),y4r=o(" (CTRL model)"),x4r=l(),X9=a("li"),PTe=a("strong"),$4r=o("gpt2"),k4r=o(" \u2014 "),BJ=a("a"),S4r=o("TFGPT2LMHeadModel"),R4r=o(" (OpenAI GPT-2 model)"),P4r=l(),z9=a("li"),BTe=a("strong"),B4r=o("gptj"),N4r=o(" \u2014 "),NJ=a("a"),I4r=o("TFGPTJForCausalLM"),q4r=o(" (GPT-J model)"),j4r=l(),Q9=a("li"),NTe=a("strong"),D4r=o("openai-gpt"),G4r=o(" \u2014 "),IJ=a("a"),O4r=o("TFOpenAIGPTLMHeadModel"),V4r=o(" (OpenAI GPT model)"),X4r=l(),W9=a("li"),ITe=a("strong"),z4r=o("opt"),Q4r=o(" \u2014 "),qJ=a("a"),W4r=o("TFOPTForCausalLM"),H4r=o(" (OPT model)"),U4r=l(),H9=a("li"),qTe=a("strong"),J4r=o("rembert"),Y4r=o(" \u2014 "),jJ=a("a"),K4r=o("TFRemBertForCausalLM"),Z4r=o(" (RemBERT model)"),eEr=l(),U9=a("li"),jTe=a("strong"),oEr=o("roberta"),rEr=o(" \u2014 "),DJ=a("a"),tEr=o("TFRobertaForCausalLM"),aEr=o(" (RoBERTa model)"),nEr=l(),J9=a("li"),DTe=a("strong"),sEr=o("roformer"),lEr=o(" \u2014 "),GJ=a("a"),iEr=o("TFRoFormerForCausalLM"),dEr=o(" (RoFormer model)"),cEr=l(),Y9=a("li"),GTe=a("strong"),fEr=o("transfo-xl"),mEr=o(" \u2014 "),OJ=a("a"),gEr=o("TFTransfoXLLMHeadModel"),hEr=o(" (Transformer-XL model)"),pEr=l(),K9=a("li"),OTe=a("strong"),_Er=o("xlm"),uEr=o(" \u2014 "),VJ=a("a"),bEr=o("TFXLMWithLMHeadModel"),vEr=o(" (XLM model)"),FEr=l(),Z9=a("li"),VTe=a("strong"),TEr=o("xlnet"),MEr=o(" \u2014 "),XJ=a("a"),EEr=o("TFXLNetLMHeadModel"),CEr=o(" (XLNet model)"),wEr=l(),F(eM.$$.fragment),oze=l(),hc=a("h2"),oM=a("a"),XTe=a("span"),F(tx.$$.fragment),AEr=l(),zTe=a("span"),LEr=o("TFAutoModelForImageClassification"),rze=l(),tr=a("div"),F(ax.$$.fragment),yEr=l(),pc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),QJ=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),nx=a("p"),BEr=o("This class cannot be instantiated directly using "),QTe=a("code"),NEr=o("__init__()"),IEr=o(" (throws an error)."),qEr=l(),Bt=a("div"),F(sx.$$.fragment),jEr=l(),WTe=a("p"),DEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GEr=l(),_c=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),zEr=o("from_pretrained()"),QEr=o(" to load the model weights."),WEr=l(),F(rM.$$.fragment),HEr=l(),Sr=a("div"),F(lx.$$.fragment),UEr=l(),UTe=a("p"),JEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),JTe=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),ar=a("ul"),tM=a("li"),ZTe=a("strong"),sCr=o("convnext"),lCr=o(" \u2014 "),HJ=a("a"),iCr=o("TFConvNextForImageClassification"),dCr=o(" (ConvNeXT model)"),cCr=l(),aM=a("li"),e8e=a("strong"),fCr=o("data2vec-vision"),mCr=o(" \u2014 "),UJ=a("a"),gCr=o("TFData2VecVisionForImageClassification"),hCr=o(" (Data2VecVision model)"),pCr=l(),nM=a("li"),o8e=a("strong"),_Cr=o("regnet"),uCr=o(" \u2014 "),JJ=a("a"),bCr=o("TFRegNetForImageClassification"),vCr=o(" (RegNet model)"),FCr=l(),sM=a("li"),r8e=a("strong"),TCr=o("resnet"),MCr=o(" \u2014 "),YJ=a("a"),ECr=o("TFResNetForImageClassification"),CCr=o(" (ResNet model)"),wCr=l(),lM=a("li"),t8e=a("strong"),ACr=o("swin"),LCr=o(" \u2014 "),KJ=a("a"),yCr=o("TFSwinForImageClassification"),xCr=o(" (Swin Transformer model)"),$Cr=l(),iM=a("li"),a8e=a("strong"),kCr=o("vit"),SCr=o(" \u2014 "),ZJ=a("a"),RCr=o("TFViTForImageClassification"),PCr=o(" (ViT model)"),BCr=l(),F(dM.$$.fragment),tze=l(),uc=a("h2"),cM=a("a"),n8e=a("span"),F(ix.$$.fragment),NCr=l(),s8e=a("span"),ICr=o("TFAutoModelForMaskedLM"),aze=l(),nr=a("div"),F(dx.$$.fragment),qCr=l(),bc=a("p"),jCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),oY=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),cx=a("p"),zCr=o("This class cannot be instantiated directly using "),l8e=a("code"),QCr=o("__init__()"),WCr=o(" (throws an error)."),HCr=l(),Nt=a("div"),F(fx.$$.fragment),UCr=l(),i8e=a("p"),JCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YCr=l(),vc=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),ZCr=o("not"),e3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),o3r=o("from_pretrained()"),r3r=o(" to load the model weights."),t3r=l(),F(fM.$$.fragment),a3r=l(),Rr=a("div"),F(mx.$$.fragment),n3r=l(),c8e=a("p"),s3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l3r=l(),fn=a("p"),i3r=o("The model class to instantiate is selected based on the "),f8e=a("code"),d3r=o("model_type"),c3r=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),f3r=o("pretrained_model_name_or_path"),m3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(":"),p3r=l(),ie=a("ul"),mM=a("li"),h8e=a("strong"),_3r=o("albert"),u3r=o(" \u2014 "),tY=a("a"),b3r=o("TFAlbertForMaskedLM"),v3r=o(" (ALBERT model)"),F3r=l(),gM=a("li"),p8e=a("strong"),T3r=o("bert"),M3r=o(" \u2014 "),aY=a("a"),E3r=o("TFBertForMaskedLM"),C3r=o(" (BERT model)"),w3r=l(),hM=a("li"),_8e=a("strong"),A3r=o("camembert"),L3r=o(" \u2014 "),nY=a("a"),y3r=o("TFCamembertForMaskedLM"),x3r=o(" (CamemBERT model)"),$3r=l(),pM=a("li"),u8e=a("strong"),k3r=o("convbert"),S3r=o(" \u2014 "),sY=a("a"),R3r=o("TFConvBertForMaskedLM"),P3r=o(" (ConvBERT model)"),B3r=l(),_M=a("li"),b8e=a("strong"),N3r=o("deberta"),I3r=o(" \u2014 "),lY=a("a"),q3r=o("TFDebertaForMaskedLM"),j3r=o(" (DeBERTa model)"),D3r=l(),uM=a("li"),v8e=a("strong"),G3r=o("deberta-v2"),O3r=o(" \u2014 "),iY=a("a"),V3r=o("TFDebertaV2ForMaskedLM"),X3r=o(" (DeBERTa-v2 model)"),z3r=l(),bM=a("li"),F8e=a("strong"),Q3r=o("distilbert"),W3r=o(" \u2014 "),dY=a("a"),H3r=o("TFDistilBertForMaskedLM"),U3r=o(" (DistilBERT model)"),J3r=l(),vM=a("li"),T8e=a("strong"),Y3r=o("electra"),K3r=o(" \u2014 "),cY=a("a"),Z3r=o("TFElectraForMaskedLM"),ewr=o(" (ELECTRA model)"),owr=l(),FM=a("li"),M8e=a("strong"),rwr=o("flaubert"),twr=o(" \u2014 "),fY=a("a"),awr=o("TFFlaubertWithLMHeadModel"),nwr=o(" (FlauBERT model)"),swr=l(),TM=a("li"),E8e=a("strong"),lwr=o("funnel"),iwr=o(" \u2014 "),mY=a("a"),dwr=o("TFFunnelForMaskedLM"),cwr=o(" (Funnel Transformer model)"),fwr=l(),MM=a("li"),C8e=a("strong"),mwr=o("layoutlm"),gwr=o(" \u2014 "),gY=a("a"),hwr=o("TFLayoutLMForMaskedLM"),pwr=o(" (LayoutLM model)"),_wr=l(),EM=a("li"),w8e=a("strong"),uwr=o("longformer"),bwr=o(" \u2014 "),hY=a("a"),vwr=o("TFLongformerForMaskedLM"),Fwr=o(" (Longformer model)"),Twr=l(),CM=a("li"),A8e=a("strong"),Mwr=o("mobilebert"),Ewr=o(" \u2014 "),pY=a("a"),Cwr=o("TFMobileBertForMaskedLM"),wwr=o(" (MobileBERT model)"),Awr=l(),wM=a("li"),L8e=a("strong"),Lwr=o("mpnet"),ywr=o(" \u2014 "),_Y=a("a"),xwr=o("TFMPNetForMaskedLM"),$wr=o(" (MPNet model)"),kwr=l(),AM=a("li"),y8e=a("strong"),Swr=o("rembert"),Rwr=o(" \u2014 "),uY=a("a"),Pwr=o("TFRemBertForMaskedLM"),Bwr=o(" (RemBERT model)"),Nwr=l(),LM=a("li"),x8e=a("strong"),Iwr=o("roberta"),qwr=o(" \u2014 "),bY=a("a"),jwr=o("TFRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),yM=a("li"),$8e=a("strong"),Owr=o("roformer"),Vwr=o(" \u2014 "),vY=a("a"),Xwr=o("TFRoFormerForMaskedLM"),zwr=o(" (RoFormer model)"),Qwr=l(),xM=a("li"),k8e=a("strong"),Wwr=o("tapas"),Hwr=o(" \u2014 "),FY=a("a"),Uwr=o("TFTapasForMaskedLM"),Jwr=o(" (TAPAS model)"),Ywr=l(),$M=a("li"),S8e=a("strong"),Kwr=o("xlm"),Zwr=o(" \u2014 "),TY=a("a"),eAr=o("TFXLMWithLMHeadModel"),oAr=o(" (XLM model)"),rAr=l(),kM=a("li"),R8e=a("strong"),tAr=o("xlm-roberta"),aAr=o(" \u2014 "),MY=a("a"),nAr=o("TFXLMRobertaForMaskedLM"),sAr=o(" (XLM-RoBERTa model)"),lAr=l(),F(SM.$$.fragment),nze=l(),Fc=a("h2"),RM=a("a"),P8e=a("span"),F(gx.$$.fragment),iAr=l(),B8e=a("span"),dAr=o("TFAutoModelForSeq2SeqLM"),sze=l(),sr=a("div"),F(hx.$$.fragment),cAr=l(),Tc=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),CY=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),px=a("p"),uAr=o("This class cannot be instantiated directly using "),N8e=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),It=a("div"),F(_x.$$.fragment),TAr=l(),I8e=a("p"),MAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EAr=l(),Mc=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),q8e=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),LAr=o("from_pretrained()"),yAr=o(" to load the model weights."),xAr=l(),F(PM.$$.fragment),$Ar=l(),Pr=a("div"),F(ux.$$.fragment),kAr=l(),j8e=a("p"),SAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RAr=l(),mn=a("p"),PAr=o("The model class to instantiate is selected based on the "),D8e=a("code"),BAr=o("model_type"),NAr=o(` property of the config object (either
passed as an argument or loaded from `),G8e=a("code"),IAr=o("pretrained_model_name_or_path"),qAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(":"),GAr=l(),ye=a("ul"),BM=a("li"),V8e=a("strong"),OAr=o("bart"),VAr=o(" \u2014 "),AY=a("a"),XAr=o("TFBartForConditionalGeneration"),zAr=o(" (BART model)"),QAr=l(),NM=a("li"),X8e=a("strong"),WAr=o("blenderbot"),HAr=o(" \u2014 "),LY=a("a"),UAr=o("TFBlenderbotForConditionalGeneration"),JAr=o(" (Blenderbot model)"),YAr=l(),IM=a("li"),z8e=a("strong"),KAr=o("blenderbot-small"),ZAr=o(" \u2014 "),yY=a("a"),e6r=o("TFBlenderbotSmallForConditionalGeneration"),o6r=o(" (BlenderbotSmall model)"),r6r=l(),qM=a("li"),Q8e=a("strong"),t6r=o("encoder-decoder"),a6r=o(" \u2014 "),xY=a("a"),n6r=o("TFEncoderDecoderModel"),s6r=o(" (Encoder decoder model)"),l6r=l(),jM=a("li"),W8e=a("strong"),i6r=o("led"),d6r=o(" \u2014 "),$Y=a("a"),c6r=o("TFLEDForConditionalGeneration"),f6r=o(" (LED model)"),m6r=l(),DM=a("li"),H8e=a("strong"),g6r=o("marian"),h6r=o(" \u2014 "),kY=a("a"),p6r=o("TFMarianMTModel"),_6r=o(" (Marian model)"),u6r=l(),GM=a("li"),U8e=a("strong"),b6r=o("mbart"),v6r=o(" \u2014 "),SY=a("a"),F6r=o("TFMBartForConditionalGeneration"),T6r=o(" (mBART model)"),M6r=l(),OM=a("li"),J8e=a("strong"),E6r=o("mt5"),C6r=o(" \u2014 "),RY=a("a"),w6r=o("TFMT5ForConditionalGeneration"),A6r=o(" (MT5 model)"),L6r=l(),VM=a("li"),Y8e=a("strong"),y6r=o("pegasus"),x6r=o(" \u2014 "),PY=a("a"),$6r=o("TFPegasusForConditionalGeneration"),k6r=o(" (Pegasus model)"),S6r=l(),XM=a("li"),K8e=a("strong"),R6r=o("t5"),P6r=o(" \u2014 "),BY=a("a"),B6r=o("TFT5ForConditionalGeneration"),N6r=o(" (T5 model)"),I6r=l(),F(zM.$$.fragment),lze=l(),Ec=a("h2"),QM=a("a"),Z8e=a("span"),F(bx.$$.fragment),q6r=l(),e9e=a("span"),j6r=o("TFAutoModelForSequenceClassification"),ize=l(),lr=a("div"),F(vx.$$.fragment),D6r=l(),Cc=a("p"),G6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NY=a("a"),O6r=o("from_pretrained()"),V6r=o(" class method or the "),IY=a("a"),X6r=o("from_config()"),z6r=o(` class
method.`),Q6r=l(),Fx=a("p"),W6r=o("This class cannot be instantiated directly using "),o9e=a("code"),H6r=o("__init__()"),U6r=o(" (throws an error)."),J6r=l(),qt=a("div"),F(Tx.$$.fragment),Y6r=l(),r9e=a("p"),K6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z6r=l(),wc=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),t9e=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(WM.$$.fragment),s7r=l(),Br=a("div"),F(Mx.$$.fragment),l7r=l(),a9e=a("p"),i7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d7r=l(),gn=a("p"),c7r=o("The model class to instantiate is selected based on the "),n9e=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),s9e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(":"),u7r=l(),te=a("ul"),HM=a("li"),i9e=a("strong"),b7r=o("albert"),v7r=o(" \u2014 "),jY=a("a"),F7r=o("TFAlbertForSequenceClassification"),T7r=o(" (ALBERT model)"),M7r=l(),UM=a("li"),d9e=a("strong"),E7r=o("bert"),C7r=o(" \u2014 "),DY=a("a"),w7r=o("TFBertForSequenceClassification"),A7r=o(" (BERT model)"),L7r=l(),JM=a("li"),c9e=a("strong"),y7r=o("camembert"),x7r=o(" \u2014 "),GY=a("a"),$7r=o("TFCamembertForSequenceClassification"),k7r=o(" (CamemBERT model)"),S7r=l(),YM=a("li"),f9e=a("strong"),R7r=o("convbert"),P7r=o(" \u2014 "),OY=a("a"),B7r=o("TFConvBertForSequenceClassification"),N7r=o(" (ConvBERT model)"),I7r=l(),KM=a("li"),m9e=a("strong"),q7r=o("ctrl"),j7r=o(" \u2014 "),VY=a("a"),D7r=o("TFCTRLForSequenceClassification"),G7r=o(" (CTRL model)"),O7r=l(),ZM=a("li"),g9e=a("strong"),V7r=o("deberta"),X7r=o(" \u2014 "),XY=a("a"),z7r=o("TFDebertaForSequenceClassification"),Q7r=o(" (DeBERTa model)"),W7r=l(),e4=a("li"),h9e=a("strong"),H7r=o("deberta-v2"),U7r=o(" \u2014 "),zY=a("a"),J7r=o("TFDebertaV2ForSequenceClassification"),Y7r=o(" (DeBERTa-v2 model)"),K7r=l(),o4=a("li"),p9e=a("strong"),Z7r=o("distilbert"),eLr=o(" \u2014 "),QY=a("a"),oLr=o("TFDistilBertForSequenceClassification"),rLr=o(" (DistilBERT model)"),tLr=l(),r4=a("li"),_9e=a("strong"),aLr=o("electra"),nLr=o(" \u2014 "),WY=a("a"),sLr=o("TFElectraForSequenceClassification"),lLr=o(" (ELECTRA model)"),iLr=l(),t4=a("li"),u9e=a("strong"),dLr=o("flaubert"),cLr=o(" \u2014 "),HY=a("a"),fLr=o("TFFlaubertForSequenceClassification"),mLr=o(" (FlauBERT model)"),gLr=l(),a4=a("li"),b9e=a("strong"),hLr=o("funnel"),pLr=o(" \u2014 "),UY=a("a"),_Lr=o("TFFunnelForSequenceClassification"),uLr=o(" (Funnel Transformer model)"),bLr=l(),n4=a("li"),v9e=a("strong"),vLr=o("gpt2"),FLr=o(" \u2014 "),JY=a("a"),TLr=o("TFGPT2ForSequenceClassification"),MLr=o(" (OpenAI GPT-2 model)"),ELr=l(),s4=a("li"),F9e=a("strong"),CLr=o("gptj"),wLr=o(" \u2014 "),YY=a("a"),ALr=o("TFGPTJForSequenceClassification"),LLr=o(" (GPT-J model)"),yLr=l(),l4=a("li"),T9e=a("strong"),xLr=o("layoutlm"),$Lr=o(" \u2014 "),KY=a("a"),kLr=o("TFLayoutLMForSequenceClassification"),SLr=o(" (LayoutLM model)"),RLr=l(),i4=a("li"),M9e=a("strong"),PLr=o("longformer"),BLr=o(" \u2014 "),ZY=a("a"),NLr=o("TFLongformerForSequenceClassification"),ILr=o(" (Longformer model)"),qLr=l(),d4=a("li"),E9e=a("strong"),jLr=o("mobilebert"),DLr=o(" \u2014 "),eK=a("a"),GLr=o("TFMobileBertForSequenceClassification"),OLr=o(" (MobileBERT model)"),VLr=l(),c4=a("li"),C9e=a("strong"),XLr=o("mpnet"),zLr=o(" \u2014 "),oK=a("a"),QLr=o("TFMPNetForSequenceClassification"),WLr=o(" (MPNet model)"),HLr=l(),f4=a("li"),w9e=a("strong"),ULr=o("openai-gpt"),JLr=o(" \u2014 "),rK=a("a"),YLr=o("TFOpenAIGPTForSequenceClassification"),KLr=o(" (OpenAI GPT model)"),ZLr=l(),m4=a("li"),A9e=a("strong"),eyr=o("rembert"),oyr=o(" \u2014 "),tK=a("a"),ryr=o("TFRemBertForSequenceClassification"),tyr=o(" (RemBERT model)"),ayr=l(),g4=a("li"),L9e=a("strong"),nyr=o("roberta"),syr=o(" \u2014 "),aK=a("a"),lyr=o("TFRobertaForSequenceClassification"),iyr=o(" (RoBERTa model)"),dyr=l(),h4=a("li"),y9e=a("strong"),cyr=o("roformer"),fyr=o(" \u2014 "),nK=a("a"),myr=o("TFRoFormerForSequenceClassification"),gyr=o(" (RoFormer model)"),hyr=l(),p4=a("li"),x9e=a("strong"),pyr=o("tapas"),_yr=o(" \u2014 "),sK=a("a"),uyr=o("TFTapasForSequenceClassification"),byr=o(" (TAPAS model)"),vyr=l(),_4=a("li"),$9e=a("strong"),Fyr=o("transfo-xl"),Tyr=o(" \u2014 "),lK=a("a"),Myr=o("TFTransfoXLForSequenceClassification"),Eyr=o(" (Transformer-XL model)"),Cyr=l(),u4=a("li"),k9e=a("strong"),wyr=o("xlm"),Ayr=o(" \u2014 "),iK=a("a"),Lyr=o("TFXLMForSequenceClassification"),yyr=o(" (XLM model)"),xyr=l(),b4=a("li"),S9e=a("strong"),$yr=o("xlm-roberta"),kyr=o(" \u2014 "),dK=a("a"),Syr=o("TFXLMRobertaForSequenceClassification"),Ryr=o(" (XLM-RoBERTa model)"),Pyr=l(),v4=a("li"),R9e=a("strong"),Byr=o("xlnet"),Nyr=o(" \u2014 "),cK=a("a"),Iyr=o("TFXLNetForSequenceClassification"),qyr=o(" (XLNet model)"),jyr=l(),F(F4.$$.fragment),dze=l(),Ac=a("h2"),T4=a("a"),P9e=a("span"),F(Ex.$$.fragment),Dyr=l(),B9e=a("span"),Gyr=o("TFAutoModelForMultipleChoice"),cze=l(),ir=a("div"),F(Cx.$$.fragment),Oyr=l(),Lc=a("p"),Vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fK=a("a"),Xyr=o("from_pretrained()"),zyr=o(" class method or the "),mK=a("a"),Qyr=o("from_config()"),Wyr=o(` class
method.`),Hyr=l(),wx=a("p"),Uyr=o("This class cannot be instantiated directly using "),N9e=a("code"),Jyr=o("__init__()"),Yyr=o(" (throws an error)."),Kyr=l(),jt=a("div"),F(Ax.$$.fragment),Zyr=l(),I9e=a("p"),exr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oxr=l(),yc=a("p"),rxr=o(`Note:
Loading a model from its configuration file does `),q9e=a("strong"),txr=o("not"),axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),nxr=o("from_pretrained()"),sxr=o(" to load the model weights."),lxr=l(),F(M4.$$.fragment),ixr=l(),Nr=a("div"),F(Lx.$$.fragment),dxr=l(),j9e=a("p"),cxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fxr=l(),hn=a("p"),mxr=o("The model class to instantiate is selected based on the "),D9e=a("code"),gxr=o("model_type"),hxr=o(` property of the config object (either
passed as an argument or loaded from `),G9e=a("code"),pxr=o("pretrained_model_name_or_path"),_xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O9e=a("code"),uxr=o("pretrained_model_name_or_path"),bxr=o(":"),vxr=l(),_e=a("ul"),E4=a("li"),V9e=a("strong"),Fxr=o("albert"),Txr=o(" \u2014 "),hK=a("a"),Mxr=o("TFAlbertForMultipleChoice"),Exr=o(" (ALBERT model)"),Cxr=l(),C4=a("li"),X9e=a("strong"),wxr=o("bert"),Axr=o(" \u2014 "),pK=a("a"),Lxr=o("TFBertForMultipleChoice"),yxr=o(" (BERT model)"),xxr=l(),w4=a("li"),z9e=a("strong"),$xr=o("camembert"),kxr=o(" \u2014 "),_K=a("a"),Sxr=o("TFCamembertForMultipleChoice"),Rxr=o(" (CamemBERT model)"),Pxr=l(),A4=a("li"),Q9e=a("strong"),Bxr=o("convbert"),Nxr=o(" \u2014 "),uK=a("a"),Ixr=o("TFConvBertForMultipleChoice"),qxr=o(" (ConvBERT model)"),jxr=l(),L4=a("li"),W9e=a("strong"),Dxr=o("distilbert"),Gxr=o(" \u2014 "),bK=a("a"),Oxr=o("TFDistilBertForMultipleChoice"),Vxr=o(" (DistilBERT model)"),Xxr=l(),y4=a("li"),H9e=a("strong"),zxr=o("electra"),Qxr=o(" \u2014 "),vK=a("a"),Wxr=o("TFElectraForMultipleChoice"),Hxr=o(" (ELECTRA model)"),Uxr=l(),x4=a("li"),U9e=a("strong"),Jxr=o("flaubert"),Yxr=o(" \u2014 "),FK=a("a"),Kxr=o("TFFlaubertForMultipleChoice"),Zxr=o(" (FlauBERT model)"),e$r=l(),$4=a("li"),J9e=a("strong"),o$r=o("funnel"),r$r=o(" \u2014 "),TK=a("a"),t$r=o("TFFunnelForMultipleChoice"),a$r=o(" (Funnel Transformer model)"),n$r=l(),k4=a("li"),Y9e=a("strong"),s$r=o("longformer"),l$r=o(" \u2014 "),MK=a("a"),i$r=o("TFLongformerForMultipleChoice"),d$r=o(" (Longformer model)"),c$r=l(),S4=a("li"),K9e=a("strong"),f$r=o("mobilebert"),m$r=o(" \u2014 "),EK=a("a"),g$r=o("TFMobileBertForMultipleChoice"),h$r=o(" (MobileBERT model)"),p$r=l(),R4=a("li"),Z9e=a("strong"),_$r=o("mpnet"),u$r=o(" \u2014 "),CK=a("a"),b$r=o("TFMPNetForMultipleChoice"),v$r=o(" (MPNet model)"),F$r=l(),P4=a("li"),eMe=a("strong"),T$r=o("rembert"),M$r=o(" \u2014 "),wK=a("a"),E$r=o("TFRemBertForMultipleChoice"),C$r=o(" (RemBERT model)"),w$r=l(),B4=a("li"),oMe=a("strong"),A$r=o("roberta"),L$r=o(" \u2014 "),AK=a("a"),y$r=o("TFRobertaForMultipleChoice"),x$r=o(" (RoBERTa model)"),$$r=l(),N4=a("li"),rMe=a("strong"),k$r=o("roformer"),S$r=o(" \u2014 "),LK=a("a"),R$r=o("TFRoFormerForMultipleChoice"),P$r=o(" (RoFormer model)"),B$r=l(),I4=a("li"),tMe=a("strong"),N$r=o("xlm"),I$r=o(" \u2014 "),yK=a("a"),q$r=o("TFXLMForMultipleChoice"),j$r=o(" (XLM model)"),D$r=l(),q4=a("li"),aMe=a("strong"),G$r=o("xlm-roberta"),O$r=o(" \u2014 "),xK=a("a"),V$r=o("TFXLMRobertaForMultipleChoice"),X$r=o(" (XLM-RoBERTa model)"),z$r=l(),j4=a("li"),nMe=a("strong"),Q$r=o("xlnet"),W$r=o(" \u2014 "),$K=a("a"),H$r=o("TFXLNetForMultipleChoice"),U$r=o(" (XLNet model)"),J$r=l(),F(D4.$$.fragment),fze=l(),xc=a("h2"),G4=a("a"),sMe=a("span"),F(yx.$$.fragment),Y$r=l(),lMe=a("span"),K$r=o("TFAutoModelForNextSentencePrediction"),mze=l(),dr=a("div"),F(xx.$$.fragment),Z$r=l(),$c=a("p"),ekr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=a("a"),okr=o("from_pretrained()"),rkr=o(" class method or the "),SK=a("a"),tkr=o("from_config()"),akr=o(` class
method.`),nkr=l(),$x=a("p"),skr=o("This class cannot be instantiated directly using "),iMe=a("code"),lkr=o("__init__()"),ikr=o(" (throws an error)."),dkr=l(),Dt=a("div"),F(kx.$$.fragment),ckr=l(),dMe=a("p"),fkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mkr=l(),kc=a("p"),gkr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),hkr=o("not"),pkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),_kr=o("from_pretrained()"),ukr=o(" to load the model weights."),bkr=l(),F(O4.$$.fragment),vkr=l(),Ir=a("div"),F(Sx.$$.fragment),Fkr=l(),fMe=a("p"),Tkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mkr=l(),pn=a("p"),Ekr=o("The model class to instantiate is selected based on the "),mMe=a("code"),Ckr=o("model_type"),wkr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),Akr=o("pretrained_model_name_or_path"),Lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),ykr=o("pretrained_model_name_or_path"),xkr=o(":"),$kr=l(),Rx=a("ul"),V4=a("li"),pMe=a("strong"),kkr=o("bert"),Skr=o(" \u2014 "),PK=a("a"),Rkr=o("TFBertForNextSentencePrediction"),Pkr=o(" (BERT model)"),Bkr=l(),X4=a("li"),_Me=a("strong"),Nkr=o("mobilebert"),Ikr=o(" \u2014 "),BK=a("a"),qkr=o("TFMobileBertForNextSentencePrediction"),jkr=o(" (MobileBERT model)"),Dkr=l(),F(z4.$$.fragment),gze=l(),Sc=a("h2"),Q4=a("a"),uMe=a("span"),F(Px.$$.fragment),Gkr=l(),bMe=a("span"),Okr=o("TFAutoModelForTableQuestionAnswering"),hze=l(),cr=a("div"),F(Bx.$$.fragment),Vkr=l(),Rc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NK=a("a"),zkr=o("from_pretrained()"),Qkr=o(" class method or the "),IK=a("a"),Wkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),Nx=a("p"),Jkr=o("This class cannot be instantiated directly using "),vMe=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),Gt=a("div"),F(Ix.$$.fragment),eSr=l(),FMe=a("p"),oSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rSr=l(),Pc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(W4.$$.fragment),dSr=l(),qr=a("div"),F(qx.$$.fragment),cSr=l(),MMe=a("p"),fSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mSr=l(),_n=a("p"),gSr=o("The model class to instantiate is selected based on the "),EMe=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),AMe=a("ul"),H4=a("li"),LMe=a("strong"),TSr=o("tapas"),MSr=o(" \u2014 "),jK=a("a"),ESr=o("TFTapasForQuestionAnswering"),CSr=o(" (TAPAS model)"),wSr=l(),F(U4.$$.fragment),pze=l(),Bc=a("h2"),J4=a("a"),yMe=a("span"),F(jx.$$.fragment),ASr=l(),xMe=a("span"),LSr=o("TFAutoModelForTokenClassification"),_ze=l(),fr=a("div"),F(Dx.$$.fragment),ySr=l(),Nc=a("p"),xSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=a("a"),$Sr=o("from_pretrained()"),kSr=o(" class method or the "),GK=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),PSr=l(),Gx=a("p"),BSr=o("This class cannot be instantiated directly using "),$Me=a("code"),NSr=o("__init__()"),ISr=o(" (throws an error)."),qSr=l(),Ot=a("div"),F(Ox.$$.fragment),jSr=l(),kMe=a("p"),DSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GSr=l(),Ic=a("p"),OSr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),VSr=o("not"),XSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),zSr=o("from_pretrained()"),QSr=o(" to load the model weights."),WSr=l(),F(Y4.$$.fragment),HSr=l(),jr=a("div"),F(Vx.$$.fragment),USr=l(),RMe=a("p"),JSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YSr=l(),un=a("p"),KSr=o("The model class to instantiate is selected based on the "),PMe=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),de=a("ul"),K4=a("li"),IMe=a("strong"),sRr=o("albert"),lRr=o(" \u2014 "),VK=a("a"),iRr=o("TFAlbertForTokenClassification"),dRr=o(" (ALBERT model)"),cRr=l(),Z4=a("li"),qMe=a("strong"),fRr=o("bert"),mRr=o(" \u2014 "),XK=a("a"),gRr=o("TFBertForTokenClassification"),hRr=o(" (BERT model)"),pRr=l(),eE=a("li"),jMe=a("strong"),_Rr=o("camembert"),uRr=o(" \u2014 "),zK=a("a"),bRr=o("TFCamembertForTokenClassification"),vRr=o(" (CamemBERT model)"),FRr=l(),oE=a("li"),DMe=a("strong"),TRr=o("convbert"),MRr=o(" \u2014 "),QK=a("a"),ERr=o("TFConvBertForTokenClassification"),CRr=o(" (ConvBERT model)"),wRr=l(),rE=a("li"),GMe=a("strong"),ARr=o("deberta"),LRr=o(" \u2014 "),WK=a("a"),yRr=o("TFDebertaForTokenClassification"),xRr=o(" (DeBERTa model)"),$Rr=l(),tE=a("li"),OMe=a("strong"),kRr=o("deberta-v2"),SRr=o(" \u2014 "),HK=a("a"),RRr=o("TFDebertaV2ForTokenClassification"),PRr=o(" (DeBERTa-v2 model)"),BRr=l(),aE=a("li"),VMe=a("strong"),NRr=o("distilbert"),IRr=o(" \u2014 "),UK=a("a"),qRr=o("TFDistilBertForTokenClassification"),jRr=o(" (DistilBERT model)"),DRr=l(),nE=a("li"),XMe=a("strong"),GRr=o("electra"),ORr=o(" \u2014 "),JK=a("a"),VRr=o("TFElectraForTokenClassification"),XRr=o(" (ELECTRA model)"),zRr=l(),sE=a("li"),zMe=a("strong"),QRr=o("flaubert"),WRr=o(" \u2014 "),YK=a("a"),HRr=o("TFFlaubertForTokenClassification"),URr=o(" (FlauBERT model)"),JRr=l(),lE=a("li"),QMe=a("strong"),YRr=o("funnel"),KRr=o(" \u2014 "),KK=a("a"),ZRr=o("TFFunnelForTokenClassification"),ePr=o(" (Funnel Transformer model)"),oPr=l(),iE=a("li"),WMe=a("strong"),rPr=o("layoutlm"),tPr=o(" \u2014 "),ZK=a("a"),aPr=o("TFLayoutLMForTokenClassification"),nPr=o(" (LayoutLM model)"),sPr=l(),dE=a("li"),HMe=a("strong"),lPr=o("longformer"),iPr=o(" \u2014 "),eZ=a("a"),dPr=o("TFLongformerForTokenClassification"),cPr=o(" (Longformer model)"),fPr=l(),cE=a("li"),UMe=a("strong"),mPr=o("mobilebert"),gPr=o(" \u2014 "),oZ=a("a"),hPr=o("TFMobileBertForTokenClassification"),pPr=o(" (MobileBERT model)"),_Pr=l(),fE=a("li"),JMe=a("strong"),uPr=o("mpnet"),bPr=o(" \u2014 "),rZ=a("a"),vPr=o("TFMPNetForTokenClassification"),FPr=o(" (MPNet model)"),TPr=l(),mE=a("li"),YMe=a("strong"),MPr=o("rembert"),EPr=o(" \u2014 "),tZ=a("a"),CPr=o("TFRemBertForTokenClassification"),wPr=o(" (RemBERT model)"),APr=l(),gE=a("li"),KMe=a("strong"),LPr=o("roberta"),yPr=o(" \u2014 "),aZ=a("a"),xPr=o("TFRobertaForTokenClassification"),$Pr=o(" (RoBERTa model)"),kPr=l(),hE=a("li"),ZMe=a("strong"),SPr=o("roformer"),RPr=o(" \u2014 "),nZ=a("a"),PPr=o("TFRoFormerForTokenClassification"),BPr=o(" (RoFormer model)"),NPr=l(),pE=a("li"),e4e=a("strong"),IPr=o("xlm"),qPr=o(" \u2014 "),sZ=a("a"),jPr=o("TFXLMForTokenClassification"),DPr=o(" (XLM model)"),GPr=l(),_E=a("li"),o4e=a("strong"),OPr=o("xlm-roberta"),VPr=o(" \u2014 "),lZ=a("a"),XPr=o("TFXLMRobertaForTokenClassification"),zPr=o(" (XLM-RoBERTa model)"),QPr=l(),uE=a("li"),r4e=a("strong"),WPr=o("xlnet"),HPr=o(" \u2014 "),iZ=a("a"),UPr=o("TFXLNetForTokenClassification"),JPr=o(" (XLNet model)"),YPr=l(),F(bE.$$.fragment),uze=l(),qc=a("h2"),vE=a("a"),t4e=a("span"),F(Xx.$$.fragment),KPr=l(),a4e=a("span"),ZPr=o("TFAutoModelForQuestionAnswering"),bze=l(),mr=a("div"),F(zx.$$.fragment),eBr=l(),jc=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),cZ=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),Qx=a("p"),lBr=o("This class cannot be instantiated directly using "),n4e=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),Vt=a("div"),F(Wx.$$.fragment),fBr=l(),s4e=a("p"),mBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gBr=l(),Dc=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),pBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),uBr=o("from_pretrained()"),bBr=o(" to load the model weights."),vBr=l(),F(FE.$$.fragment),FBr=l(),Dr=a("div"),F(Hx.$$.fragment),TBr=l(),i4e=a("p"),MBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EBr=l(),bn=a("p"),CBr=o("The model class to instantiate is selected based on the "),d4e=a("code"),wBr=o("model_type"),ABr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),LBr=o("pretrained_model_name_or_path"),yBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(":"),kBr=l(),ce=a("ul"),TE=a("li"),m4e=a("strong"),SBr=o("albert"),RBr=o(" \u2014 "),mZ=a("a"),PBr=o("TFAlbertForQuestionAnswering"),BBr=o(" (ALBERT model)"),NBr=l(),ME=a("li"),g4e=a("strong"),IBr=o("bert"),qBr=o(" \u2014 "),gZ=a("a"),jBr=o("TFBertForQuestionAnswering"),DBr=o(" (BERT model)"),GBr=l(),EE=a("li"),h4e=a("strong"),OBr=o("camembert"),VBr=o(" \u2014 "),hZ=a("a"),XBr=o("TFCamembertForQuestionAnswering"),zBr=o(" (CamemBERT model)"),QBr=l(),CE=a("li"),p4e=a("strong"),WBr=o("convbert"),HBr=o(" \u2014 "),pZ=a("a"),UBr=o("TFConvBertForQuestionAnswering"),JBr=o(" (ConvBERT model)"),YBr=l(),wE=a("li"),_4e=a("strong"),KBr=o("deberta"),ZBr=o(" \u2014 "),_Z=a("a"),eNr=o("TFDebertaForQuestionAnswering"),oNr=o(" (DeBERTa model)"),rNr=l(),AE=a("li"),u4e=a("strong"),tNr=o("deberta-v2"),aNr=o(" \u2014 "),uZ=a("a"),nNr=o("TFDebertaV2ForQuestionAnswering"),sNr=o(" (DeBERTa-v2 model)"),lNr=l(),LE=a("li"),b4e=a("strong"),iNr=o("distilbert"),dNr=o(" \u2014 "),bZ=a("a"),cNr=o("TFDistilBertForQuestionAnswering"),fNr=o(" (DistilBERT model)"),mNr=l(),yE=a("li"),v4e=a("strong"),gNr=o("electra"),hNr=o(" \u2014 "),vZ=a("a"),pNr=o("TFElectraForQuestionAnswering"),_Nr=o(" (ELECTRA model)"),uNr=l(),xE=a("li"),F4e=a("strong"),bNr=o("flaubert"),vNr=o(" \u2014 "),FZ=a("a"),FNr=o("TFFlaubertForQuestionAnsweringSimple"),TNr=o(" (FlauBERT model)"),MNr=l(),$E=a("li"),T4e=a("strong"),ENr=o("funnel"),CNr=o(" \u2014 "),TZ=a("a"),wNr=o("TFFunnelForQuestionAnswering"),ANr=o(" (Funnel Transformer model)"),LNr=l(),kE=a("li"),M4e=a("strong"),yNr=o("gptj"),xNr=o(" \u2014 "),MZ=a("a"),$Nr=o("TFGPTJForQuestionAnswering"),kNr=o(" (GPT-J model)"),SNr=l(),SE=a("li"),E4e=a("strong"),RNr=o("longformer"),PNr=o(" \u2014 "),EZ=a("a"),BNr=o("TFLongformerForQuestionAnswering"),NNr=o(" (Longformer model)"),INr=l(),RE=a("li"),C4e=a("strong"),qNr=o("mobilebert"),jNr=o(" \u2014 "),CZ=a("a"),DNr=o("TFMobileBertForQuestionAnswering"),GNr=o(" (MobileBERT model)"),ONr=l(),PE=a("li"),w4e=a("strong"),VNr=o("mpnet"),XNr=o(" \u2014 "),wZ=a("a"),zNr=o("TFMPNetForQuestionAnswering"),QNr=o(" (MPNet model)"),WNr=l(),BE=a("li"),A4e=a("strong"),HNr=o("rembert"),UNr=o(" \u2014 "),AZ=a("a"),JNr=o("TFRemBertForQuestionAnswering"),YNr=o(" (RemBERT model)"),KNr=l(),NE=a("li"),L4e=a("strong"),ZNr=o("roberta"),eIr=o(" \u2014 "),LZ=a("a"),oIr=o("TFRobertaForQuestionAnswering"),rIr=o(" (RoBERTa model)"),tIr=l(),IE=a("li"),y4e=a("strong"),aIr=o("roformer"),nIr=o(" \u2014 "),yZ=a("a"),sIr=o("TFRoFormerForQuestionAnswering"),lIr=o(" (RoFormer model)"),iIr=l(),qE=a("li"),x4e=a("strong"),dIr=o("xlm"),cIr=o(" \u2014 "),xZ=a("a"),fIr=o("TFXLMForQuestionAnsweringSimple"),mIr=o(" (XLM model)"),gIr=l(),jE=a("li"),$4e=a("strong"),hIr=o("xlm-roberta"),pIr=o(" \u2014 "),$Z=a("a"),_Ir=o("TFXLMRobertaForQuestionAnswering"),uIr=o(" (XLM-RoBERTa model)"),bIr=l(),DE=a("li"),k4e=a("strong"),vIr=o("xlnet"),FIr=o(" \u2014 "),kZ=a("a"),TIr=o("TFXLNetForQuestionAnsweringSimple"),MIr=o(" (XLNet model)"),EIr=l(),F(GE.$$.fragment),vze=l(),Gc=a("h2"),OE=a("a"),S4e=a("span"),F(Ux.$$.fragment),CIr=l(),R4e=a("span"),wIr=o("TFAutoModelForVision2Seq"),Fze=l(),gr=a("div"),F(Jx.$$.fragment),AIr=l(),Oc=a("p"),LIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=a("a"),yIr=o("from_pretrained()"),xIr=o(" class method or the "),RZ=a("a"),$Ir=o("from_config()"),kIr=o(` class
method.`),SIr=l(),Yx=a("p"),RIr=o("This class cannot be instantiated directly using "),P4e=a("code"),PIr=o("__init__()"),BIr=o(" (throws an error)."),NIr=l(),Xt=a("div"),F(Kx.$$.fragment),IIr=l(),B4e=a("p"),qIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jIr=l(),Vc=a("p"),DIr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),GIr=o("not"),OIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),VIr=o("from_pretrained()"),XIr=o(" to load the model weights."),zIr=l(),F(VE.$$.fragment),QIr=l(),Gr=a("div"),F(Zx.$$.fragment),WIr=l(),I4e=a("p"),HIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UIr=l(),vn=a("p"),JIr=o("The model class to instantiate is selected based on the "),q4e=a("code"),YIr=o("model_type"),KIr=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),G4e=a("ul"),XE=a("li"),O4e=a("strong"),aqr=o("vision-encoder-decoder"),nqr=o(" \u2014 "),BZ=a("a"),sqr=o("TFVisionEncoderDecoderModel"),lqr=o(" (Vision Encoder decoder model)"),iqr=l(),F(zE.$$.fragment),Tze=l(),Xc=a("h2"),QE=a("a"),V4e=a("span"),F(e$.$$.fragment),dqr=l(),X4e=a("span"),cqr=o("TFAutoModelForSpeechSeq2Seq"),Mze=l(),hr=a("div"),F(o$.$$.fragment),fqr=l(),zc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NZ=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),IZ=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),uqr=l(),r$=a("p"),bqr=o("This class cannot be instantiated directly using "),z4e=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),zt=a("div"),F(t$.$$.fragment),Mqr=l(),Q4e=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cqr=l(),Qc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),Aqr=o("not"),Lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),yqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(WE.$$.fragment),kqr=l(),Or=a("div"),F(a$.$$.fragment),Sqr=l(),H4e=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pqr=l(),Fn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),U4e=a("code"),Nqr=o("model_type"),Iqr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),K4e=a("ul"),HE=a("li"),Z4e=a("strong"),Vqr=o("speech_to_text"),Xqr=o(" \u2014 "),jZ=a("a"),zqr=o("TFSpeech2TextForConditionalGeneration"),Qqr=o(" (Speech2Text model)"),Wqr=l(),F(UE.$$.fragment),Eze=l(),Wc=a("h2"),JE=a("a"),eEe=a("span"),F(n$.$$.fragment),Hqr=l(),oEe=a("span"),Uqr=o("FlaxAutoModel"),Cze=l(),pr=a("div"),F(s$.$$.fragment),Jqr=l(),Hc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),GZ=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),l$=a("p"),tjr=o("This class cannot be instantiated directly using "),rEe=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Qt=a("div"),F(i$.$$.fragment),ljr=l(),tEe=a("p"),ijr=o("Instantiates one of the base model classes of the library from a configuration."),djr=l(),Uc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(YE.$$.fragment),_jr=l(),Vr=a("div"),F(d$.$$.fragment),ujr=l(),nEe=a("p"),bjr=o("Instantiate one of the base model classes of the library from a pretrained model."),vjr=l(),Tn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),sEe=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),oe=a("ul"),KE=a("li"),dEe=a("strong"),yjr=o("albert"),xjr=o(" \u2014 "),VZ=a("a"),$jr=o("FlaxAlbertModel"),kjr=o(" (ALBERT model)"),Sjr=l(),ZE=a("li"),cEe=a("strong"),Rjr=o("bart"),Pjr=o(" \u2014 "),XZ=a("a"),Bjr=o("FlaxBartModel"),Njr=o(" (BART model)"),Ijr=l(),eC=a("li"),fEe=a("strong"),qjr=o("beit"),jjr=o(" \u2014 "),zZ=a("a"),Djr=o("FlaxBeitModel"),Gjr=o(" (BEiT model)"),Ojr=l(),oC=a("li"),mEe=a("strong"),Vjr=o("bert"),Xjr=o(" \u2014 "),QZ=a("a"),zjr=o("FlaxBertModel"),Qjr=o(" (BERT model)"),Wjr=l(),rC=a("li"),gEe=a("strong"),Hjr=o("big_bird"),Ujr=o(" \u2014 "),WZ=a("a"),Jjr=o("FlaxBigBirdModel"),Yjr=o(" (BigBird model)"),Kjr=l(),tC=a("li"),hEe=a("strong"),Zjr=o("blenderbot"),eDr=o(" \u2014 "),HZ=a("a"),oDr=o("FlaxBlenderbotModel"),rDr=o(" (Blenderbot model)"),tDr=l(),aC=a("li"),pEe=a("strong"),aDr=o("blenderbot-small"),nDr=o(" \u2014 "),UZ=a("a"),sDr=o("FlaxBlenderbotSmallModel"),lDr=o(" (BlenderbotSmall model)"),iDr=l(),nC=a("li"),_Ee=a("strong"),dDr=o("clip"),cDr=o(" \u2014 "),JZ=a("a"),fDr=o("FlaxCLIPModel"),mDr=o(" (CLIP model)"),gDr=l(),sC=a("li"),uEe=a("strong"),hDr=o("distilbert"),pDr=o(" \u2014 "),YZ=a("a"),_Dr=o("FlaxDistilBertModel"),uDr=o(" (DistilBERT model)"),bDr=l(),lC=a("li"),bEe=a("strong"),vDr=o("electra"),FDr=o(" \u2014 "),KZ=a("a"),TDr=o("FlaxElectraModel"),MDr=o(" (ELECTRA model)"),EDr=l(),iC=a("li"),vEe=a("strong"),CDr=o("gpt2"),wDr=o(" \u2014 "),ZZ=a("a"),ADr=o("FlaxGPT2Model"),LDr=o(" (OpenAI GPT-2 model)"),yDr=l(),dC=a("li"),FEe=a("strong"),xDr=o("gpt_neo"),$Dr=o(" \u2014 "),eee=a("a"),kDr=o("FlaxGPTNeoModel"),SDr=o(" (GPT Neo model)"),RDr=l(),cC=a("li"),TEe=a("strong"),PDr=o("gptj"),BDr=o(" \u2014 "),oee=a("a"),NDr=o("FlaxGPTJModel"),IDr=o(" (GPT-J model)"),qDr=l(),fC=a("li"),MEe=a("strong"),jDr=o("longt5"),DDr=o(" \u2014 "),ree=a("a"),GDr=o("FlaxLongT5Model"),ODr=o(" (LongT5 model)"),VDr=l(),mC=a("li"),EEe=a("strong"),XDr=o("marian"),zDr=o(" \u2014 "),tee=a("a"),QDr=o("FlaxMarianModel"),WDr=o(" (Marian model)"),HDr=l(),gC=a("li"),CEe=a("strong"),UDr=o("mbart"),JDr=o(" \u2014 "),aee=a("a"),YDr=o("FlaxMBartModel"),KDr=o(" (mBART model)"),ZDr=l(),hC=a("li"),wEe=a("strong"),eGr=o("mt5"),oGr=o(" \u2014 "),nee=a("a"),rGr=o("FlaxMT5Model"),tGr=o(" (MT5 model)"),aGr=l(),pC=a("li"),AEe=a("strong"),nGr=o("opt"),sGr=o(" \u2014 "),see=a("a"),lGr=o("FlaxOPTModel"),iGr=o(" (OPT model)"),dGr=l(),_C=a("li"),LEe=a("strong"),cGr=o("pegasus"),fGr=o(" \u2014 "),lee=a("a"),mGr=o("FlaxPegasusModel"),gGr=o(" (Pegasus model)"),hGr=l(),uC=a("li"),yEe=a("strong"),pGr=o("roberta"),_Gr=o(" \u2014 "),iee=a("a"),uGr=o("FlaxRobertaModel"),bGr=o(" (RoBERTa model)"),vGr=l(),bC=a("li"),xEe=a("strong"),FGr=o("roformer"),TGr=o(" \u2014 "),dee=a("a"),MGr=o("FlaxRoFormerModel"),EGr=o(" (RoFormer model)"),CGr=l(),vC=a("li"),$Ee=a("strong"),wGr=o("t5"),AGr=o(" \u2014 "),cee=a("a"),LGr=o("FlaxT5Model"),yGr=o(" (T5 model)"),xGr=l(),FC=a("li"),kEe=a("strong"),$Gr=o("vision-text-dual-encoder"),kGr=o(" \u2014 "),fee=a("a"),SGr=o("FlaxVisionTextDualEncoderModel"),RGr=o(" (VisionTextDualEncoder model)"),PGr=l(),TC=a("li"),SEe=a("strong"),BGr=o("vit"),NGr=o(" \u2014 "),mee=a("a"),IGr=o("FlaxViTModel"),qGr=o(" (ViT model)"),jGr=l(),MC=a("li"),REe=a("strong"),DGr=o("wav2vec2"),GGr=o(" \u2014 "),gee=a("a"),OGr=o("FlaxWav2Vec2Model"),VGr=o(" (Wav2Vec2 model)"),XGr=l(),EC=a("li"),PEe=a("strong"),zGr=o("xglm"),QGr=o(" \u2014 "),hee=a("a"),WGr=o("FlaxXGLMModel"),HGr=o(" (XGLM model)"),UGr=l(),CC=a("li"),BEe=a("strong"),JGr=o("xlm-roberta"),YGr=o(" \u2014 "),pee=a("a"),KGr=o("FlaxXLMRobertaModel"),ZGr=o(" (XLM-RoBERTa model)"),eOr=l(),F(wC.$$.fragment),wze=l(),Jc=a("h2"),AC=a("a"),NEe=a("span"),F(c$.$$.fragment),oOr=l(),IEe=a("span"),rOr=o("FlaxAutoModelForCausalLM"),Aze=l(),_r=a("div"),F(f$.$$.fragment),tOr=l(),Yc=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ee=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),uee=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),m$=a("p"),cOr=o("This class cannot be instantiated directly using "),qEe=a("code"),fOr=o("__init__()"),mOr=o(" (throws an error)."),gOr=l(),Wt=a("div"),F(g$.$$.fragment),hOr=l(),jEe=a("p"),pOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Or=l(),Kc=a("p"),uOr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(LC.$$.fragment),EOr=l(),Xr=a("div"),F(h$.$$.fragment),COr=l(),GEe=a("p"),wOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AOr=l(),Mn=a("p"),LOr=o("The model class to instantiate is selected based on the "),OEe=a("code"),yOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),xe=a("ul"),yC=a("li"),zEe=a("strong"),BOr=o("bart"),NOr=o(" \u2014 "),vee=a("a"),IOr=o("FlaxBartForCausalLM"),qOr=o(" (BART model)"),jOr=l(),xC=a("li"),QEe=a("strong"),DOr=o("bert"),GOr=o(" \u2014 "),Fee=a("a"),OOr=o("FlaxBertForCausalLM"),VOr=o(" (BERT model)"),XOr=l(),$C=a("li"),WEe=a("strong"),zOr=o("big_bird"),QOr=o(" \u2014 "),Tee=a("a"),WOr=o("FlaxBigBirdForCausalLM"),HOr=o(" (BigBird model)"),UOr=l(),kC=a("li"),HEe=a("strong"),JOr=o("electra"),YOr=o(" \u2014 "),Mee=a("a"),KOr=o("FlaxElectraForCausalLM"),ZOr=o(" (ELECTRA model)"),eVr=l(),SC=a("li"),UEe=a("strong"),oVr=o("gpt2"),rVr=o(" \u2014 "),Eee=a("a"),tVr=o("FlaxGPT2LMHeadModel"),aVr=o(" (OpenAI GPT-2 model)"),nVr=l(),RC=a("li"),JEe=a("strong"),sVr=o("gpt_neo"),lVr=o(" \u2014 "),Cee=a("a"),iVr=o("FlaxGPTNeoForCausalLM"),dVr=o(" (GPT Neo model)"),cVr=l(),PC=a("li"),YEe=a("strong"),fVr=o("gptj"),mVr=o(" \u2014 "),wee=a("a"),gVr=o("FlaxGPTJForCausalLM"),hVr=o(" (GPT-J model)"),pVr=l(),BC=a("li"),KEe=a("strong"),_Vr=o("opt"),uVr=o(" \u2014 "),Aee=a("a"),bVr=o("FlaxOPTForCausalLM"),vVr=o(" (OPT model)"),FVr=l(),NC=a("li"),ZEe=a("strong"),TVr=o("roberta"),MVr=o(" \u2014 "),Lee=a("a"),EVr=o("FlaxRobertaForCausalLM"),CVr=o(" (RoBERTa model)"),wVr=l(),IC=a("li"),eCe=a("strong"),AVr=o("xglm"),LVr=o(" \u2014 "),yee=a("a"),yVr=o("FlaxXGLMForCausalLM"),xVr=o(" (XGLM model)"),$Vr=l(),F(qC.$$.fragment),Lze=l(),Zc=a("h2"),jC=a("a"),oCe=a("span"),F(p$.$$.fragment),kVr=l(),rCe=a("span"),SVr=o("FlaxAutoModelForPreTraining"),yze=l(),ur=a("div"),F(_$.$$.fragment),RVr=l(),ef=a("p"),PVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=a("a"),BVr=o("from_pretrained()"),NVr=o(" class method or the "),$ee=a("a"),IVr=o("from_config()"),qVr=o(` class
method.`),jVr=l(),u$=a("p"),DVr=o("This class cannot be instantiated directly using "),tCe=a("code"),GVr=o("__init__()"),OVr=o(" (throws an error)."),VVr=l(),Ht=a("div"),F(b$.$$.fragment),XVr=l(),aCe=a("p"),zVr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QVr=l(),of=a("p"),WVr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),HVr=o("not"),UVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=a("a"),JVr=o("from_pretrained()"),YVr=o(" to load the model weights."),KVr=l(),F(DC.$$.fragment),ZVr=l(),zr=a("div"),F(v$.$$.fragment),eXr=l(),sCe=a("p"),oXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rXr=l(),En=a("p"),tXr=o("The model class to instantiate is selected based on the "),lCe=a("code"),aXr=o("model_type"),nXr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),sXr=o("pretrained_model_name_or_path"),lXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),iXr=o("pretrained_model_name_or_path"),dXr=o(":"),cXr=l(),Ee=a("ul"),GC=a("li"),cCe=a("strong"),fXr=o("albert"),mXr=o(" \u2014 "),See=a("a"),gXr=o("FlaxAlbertForPreTraining"),hXr=o(" (ALBERT model)"),pXr=l(),OC=a("li"),fCe=a("strong"),_Xr=o("bart"),uXr=o(" \u2014 "),Ree=a("a"),bXr=o("FlaxBartForConditionalGeneration"),vXr=o(" (BART model)"),FXr=l(),VC=a("li"),mCe=a("strong"),TXr=o("bert"),MXr=o(" \u2014 "),Pee=a("a"),EXr=o("FlaxBertForPreTraining"),CXr=o(" (BERT model)"),wXr=l(),XC=a("li"),gCe=a("strong"),AXr=o("big_bird"),LXr=o(" \u2014 "),Bee=a("a"),yXr=o("FlaxBigBirdForPreTraining"),xXr=o(" (BigBird model)"),$Xr=l(),zC=a("li"),hCe=a("strong"),kXr=o("electra"),SXr=o(" \u2014 "),Nee=a("a"),RXr=o("FlaxElectraForPreTraining"),PXr=o(" (ELECTRA model)"),BXr=l(),QC=a("li"),pCe=a("strong"),NXr=o("longt5"),IXr=o(" \u2014 "),Iee=a("a"),qXr=o("FlaxLongT5ForConditionalGeneration"),jXr=o(" (LongT5 model)"),DXr=l(),WC=a("li"),_Ce=a("strong"),GXr=o("mbart"),OXr=o(" \u2014 "),qee=a("a"),VXr=o("FlaxMBartForConditionalGeneration"),XXr=o(" (mBART model)"),zXr=l(),HC=a("li"),uCe=a("strong"),QXr=o("mt5"),WXr=o(" \u2014 "),jee=a("a"),HXr=o("FlaxMT5ForConditionalGeneration"),UXr=o(" (MT5 model)"),JXr=l(),UC=a("li"),bCe=a("strong"),YXr=o("roberta"),KXr=o(" \u2014 "),Dee=a("a"),ZXr=o("FlaxRobertaForMaskedLM"),ezr=o(" (RoBERTa model)"),ozr=l(),JC=a("li"),vCe=a("strong"),rzr=o("roformer"),tzr=o(" \u2014 "),Gee=a("a"),azr=o("FlaxRoFormerForMaskedLM"),nzr=o(" (RoFormer model)"),szr=l(),YC=a("li"),FCe=a("strong"),lzr=o("t5"),izr=o(" \u2014 "),Oee=a("a"),dzr=o("FlaxT5ForConditionalGeneration"),czr=o(" (T5 model)"),fzr=l(),KC=a("li"),TCe=a("strong"),mzr=o("wav2vec2"),gzr=o(" \u2014 "),Vee=a("a"),hzr=o("FlaxWav2Vec2ForPreTraining"),pzr=o(" (Wav2Vec2 model)"),_zr=l(),ZC=a("li"),MCe=a("strong"),uzr=o("xlm-roberta"),bzr=o(" \u2014 "),Xee=a("a"),vzr=o("FlaxXLMRobertaForMaskedLM"),Fzr=o(" (XLM-RoBERTa model)"),Tzr=l(),F(e3.$$.fragment),xze=l(),rf=a("h2"),o3=a("a"),ECe=a("span"),F(F$.$$.fragment),Mzr=l(),CCe=a("span"),Ezr=o("FlaxAutoModelForMaskedLM"),$ze=l(),br=a("div"),F(T$.$$.fragment),Czr=l(),tf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),Qee=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),M$=a("p"),kzr=o("This class cannot be instantiated directly using "),wCe=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Ut=a("div"),F(E$.$$.fragment),Bzr=l(),ACe=a("p"),Nzr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Izr=l(),af=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(r3.$$.fragment),Xzr=l(),Qr=a("div"),F(C$.$$.fragment),zzr=l(),yCe=a("p"),Qzr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wzr=l(),Cn=a("p"),Hzr=o("The model class to instantiate is selected based on the "),xCe=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),Zzr=o("pretrained_model_name_or_path"),eQr=o(":"),oQr=l(),$e=a("ul"),t3=a("li"),SCe=a("strong"),rQr=o("albert"),tQr=o(" \u2014 "),Hee=a("a"),aQr=o("FlaxAlbertForMaskedLM"),nQr=o(" (ALBERT model)"),sQr=l(),a3=a("li"),RCe=a("strong"),lQr=o("bart"),iQr=o(" \u2014 "),Uee=a("a"),dQr=o("FlaxBartForConditionalGeneration"),cQr=o(" (BART model)"),fQr=l(),n3=a("li"),PCe=a("strong"),mQr=o("bert"),gQr=o(" \u2014 "),Jee=a("a"),hQr=o("FlaxBertForMaskedLM"),pQr=o(" (BERT model)"),_Qr=l(),s3=a("li"),BCe=a("strong"),uQr=o("big_bird"),bQr=o(" \u2014 "),Yee=a("a"),vQr=o("FlaxBigBirdForMaskedLM"),FQr=o(" (BigBird model)"),TQr=l(),l3=a("li"),NCe=a("strong"),MQr=o("distilbert"),EQr=o(" \u2014 "),Kee=a("a"),CQr=o("FlaxDistilBertForMaskedLM"),wQr=o(" (DistilBERT model)"),AQr=l(),i3=a("li"),ICe=a("strong"),LQr=o("electra"),yQr=o(" \u2014 "),Zee=a("a"),xQr=o("FlaxElectraForMaskedLM"),$Qr=o(" (ELECTRA model)"),kQr=l(),d3=a("li"),qCe=a("strong"),SQr=o("mbart"),RQr=o(" \u2014 "),eoe=a("a"),PQr=o("FlaxMBartForConditionalGeneration"),BQr=o(" (mBART model)"),NQr=l(),c3=a("li"),jCe=a("strong"),IQr=o("roberta"),qQr=o(" \u2014 "),ooe=a("a"),jQr=o("FlaxRobertaForMaskedLM"),DQr=o(" (RoBERTa model)"),GQr=l(),f3=a("li"),DCe=a("strong"),OQr=o("roformer"),VQr=o(" \u2014 "),roe=a("a"),XQr=o("FlaxRoFormerForMaskedLM"),zQr=o(" (RoFormer model)"),QQr=l(),m3=a("li"),GCe=a("strong"),WQr=o("xlm-roberta"),HQr=o(" \u2014 "),toe=a("a"),UQr=o("FlaxXLMRobertaForMaskedLM"),JQr=o(" (XLM-RoBERTa model)"),YQr=l(),F(g3.$$.fragment),kze=l(),nf=a("h2"),h3=a("a"),OCe=a("span"),F(w$.$$.fragment),KQr=l(),VCe=a("span"),ZQr=o("FlaxAutoModelForSeq2SeqLM"),Sze=l(),vr=a("div"),F(A$.$$.fragment),eWr=l(),sf=a("p"),oWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=a("a"),rWr=o("from_pretrained()"),tWr=o(" class method or the "),noe=a("a"),aWr=o("from_config()"),nWr=o(` class
method.`),sWr=l(),L$=a("p"),lWr=o("This class cannot be instantiated directly using "),XCe=a("code"),iWr=o("__init__()"),dWr=o(" (throws an error)."),cWr=l(),Jt=a("div"),F(y$.$$.fragment),fWr=l(),zCe=a("p"),mWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gWr=l(),lf=a("p"),hWr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),pWr=o("not"),_Wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),uWr=o("from_pretrained()"),bWr=o(" to load the model weights."),vWr=l(),F(p3.$$.fragment),FWr=l(),Wr=a("div"),F(x$.$$.fragment),TWr=l(),WCe=a("p"),MWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EWr=l(),wn=a("p"),CWr=o("The model class to instantiate is selected based on the "),HCe=a("code"),wWr=o("model_type"),AWr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),LWr=o("pretrained_model_name_or_path"),yWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=a("code"),xWr=o("pretrained_model_name_or_path"),$Wr=o(":"),kWr=l(),ke=a("ul"),_3=a("li"),YCe=a("strong"),SWr=o("bart"),RWr=o(" \u2014 "),loe=a("a"),PWr=o("FlaxBartForConditionalGeneration"),BWr=o(" (BART model)"),NWr=l(),u3=a("li"),KCe=a("strong"),IWr=o("blenderbot"),qWr=o(" \u2014 "),ioe=a("a"),jWr=o("FlaxBlenderbotForConditionalGeneration"),DWr=o(" (Blenderbot model)"),GWr=l(),b3=a("li"),ZCe=a("strong"),OWr=o("blenderbot-small"),VWr=o(" \u2014 "),doe=a("a"),XWr=o("FlaxBlenderbotSmallForConditionalGeneration"),zWr=o(" (BlenderbotSmall model)"),QWr=l(),v3=a("li"),e3e=a("strong"),WWr=o("encoder-decoder"),HWr=o(" \u2014 "),coe=a("a"),UWr=o("FlaxEncoderDecoderModel"),JWr=o(" (Encoder decoder model)"),YWr=l(),F3=a("li"),o3e=a("strong"),KWr=o("longt5"),ZWr=o(" \u2014 "),foe=a("a"),eHr=o("FlaxLongT5ForConditionalGeneration"),oHr=o(" (LongT5 model)"),rHr=l(),T3=a("li"),r3e=a("strong"),tHr=o("marian"),aHr=o(" \u2014 "),moe=a("a"),nHr=o("FlaxMarianMTModel"),sHr=o(" (Marian model)"),lHr=l(),M3=a("li"),t3e=a("strong"),iHr=o("mbart"),dHr=o(" \u2014 "),goe=a("a"),cHr=o("FlaxMBartForConditionalGeneration"),fHr=o(" (mBART model)"),mHr=l(),E3=a("li"),a3e=a("strong"),gHr=o("mt5"),hHr=o(" \u2014 "),hoe=a("a"),pHr=o("FlaxMT5ForConditionalGeneration"),_Hr=o(" (MT5 model)"),uHr=l(),C3=a("li"),n3e=a("strong"),bHr=o("pegasus"),vHr=o(" \u2014 "),poe=a("a"),FHr=o("FlaxPegasusForConditionalGeneration"),THr=o(" (Pegasus model)"),MHr=l(),w3=a("li"),s3e=a("strong"),EHr=o("t5"),CHr=o(" \u2014 "),_oe=a("a"),wHr=o("FlaxT5ForConditionalGeneration"),AHr=o(" (T5 model)"),LHr=l(),F(A3.$$.fragment),Rze=l(),df=a("h2"),L3=a("a"),l3e=a("span"),F($$.$$.fragment),yHr=l(),i3e=a("span"),xHr=o("FlaxAutoModelForSequenceClassification"),Pze=l(),Fr=a("div"),F(k$.$$.fragment),$Hr=l(),cf=a("p"),kHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=a("a"),SHr=o("from_pretrained()"),RHr=o(" class method or the "),boe=a("a"),PHr=o("from_config()"),BHr=o(` class
method.`),NHr=l(),S$=a("p"),IHr=o("This class cannot be instantiated directly using "),d3e=a("code"),qHr=o("__init__()"),jHr=o(" (throws an error)."),DHr=l(),Yt=a("div"),F(R$.$$.fragment),GHr=l(),c3e=a("p"),OHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VHr=l(),ff=a("p"),XHr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),zHr=o("not"),QHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),WHr=o("from_pretrained()"),HHr=o(" to load the model weights."),UHr=l(),F(y3.$$.fragment),JHr=l(),Hr=a("div"),F(P$.$$.fragment),YHr=l(),m3e=a("p"),KHr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZHr=l(),An=a("p"),eUr=o("The model class to instantiate is selected based on the "),g3e=a("code"),oUr=o("model_type"),rUr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),tUr=o("pretrained_model_name_or_path"),aUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),nUr=o("pretrained_model_name_or_path"),sUr=o(":"),lUr=l(),Se=a("ul"),x3=a("li"),_3e=a("strong"),iUr=o("albert"),dUr=o(" \u2014 "),Foe=a("a"),cUr=o("FlaxAlbertForSequenceClassification"),fUr=o(" (ALBERT model)"),mUr=l(),$3=a("li"),u3e=a("strong"),gUr=o("bart"),hUr=o(" \u2014 "),Toe=a("a"),pUr=o("FlaxBartForSequenceClassification"),_Ur=o(" (BART model)"),uUr=l(),k3=a("li"),b3e=a("strong"),bUr=o("bert"),vUr=o(" \u2014 "),Moe=a("a"),FUr=o("FlaxBertForSequenceClassification"),TUr=o(" (BERT model)"),MUr=l(),S3=a("li"),v3e=a("strong"),EUr=o("big_bird"),CUr=o(" \u2014 "),Eoe=a("a"),wUr=o("FlaxBigBirdForSequenceClassification"),AUr=o(" (BigBird model)"),LUr=l(),R3=a("li"),F3e=a("strong"),yUr=o("distilbert"),xUr=o(" \u2014 "),Coe=a("a"),$Ur=o("FlaxDistilBertForSequenceClassification"),kUr=o(" (DistilBERT model)"),SUr=l(),P3=a("li"),T3e=a("strong"),RUr=o("electra"),PUr=o(" \u2014 "),woe=a("a"),BUr=o("FlaxElectraForSequenceClassification"),NUr=o(" (ELECTRA model)"),IUr=l(),B3=a("li"),M3e=a("strong"),qUr=o("mbart"),jUr=o(" \u2014 "),Aoe=a("a"),DUr=o("FlaxMBartForSequenceClassification"),GUr=o(" (mBART model)"),OUr=l(),N3=a("li"),E3e=a("strong"),VUr=o("roberta"),XUr=o(" \u2014 "),Loe=a("a"),zUr=o("FlaxRobertaForSequenceClassification"),QUr=o(" (RoBERTa model)"),WUr=l(),I3=a("li"),C3e=a("strong"),HUr=o("roformer"),UUr=o(" \u2014 "),yoe=a("a"),JUr=o("FlaxRoFormerForSequenceClassification"),YUr=o(" (RoFormer model)"),KUr=l(),q3=a("li"),w3e=a("strong"),ZUr=o("xlm-roberta"),eJr=o(" \u2014 "),xoe=a("a"),oJr=o("FlaxXLMRobertaForSequenceClassification"),rJr=o(" (XLM-RoBERTa model)"),tJr=l(),F(j3.$$.fragment),Bze=l(),mf=a("h2"),D3=a("a"),A3e=a("span"),F(B$.$$.fragment),aJr=l(),L3e=a("span"),nJr=o("FlaxAutoModelForQuestionAnswering"),Nze=l(),Tr=a("div"),F(N$.$$.fragment),sJr=l(),gf=a("p"),lJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),iJr=o("from_pretrained()"),dJr=o(" class method or the "),koe=a("a"),cJr=o("from_config()"),fJr=o(` class
method.`),mJr=l(),I$=a("p"),gJr=o("This class cannot be instantiated directly using "),y3e=a("code"),hJr=o("__init__()"),pJr=o(" (throws an error)."),_Jr=l(),Kt=a("div"),F(q$.$$.fragment),uJr=l(),x3e=a("p"),bJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vJr=l(),hf=a("p"),FJr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),TJr=o("not"),MJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),EJr=o("from_pretrained()"),CJr=o(" to load the model weights."),wJr=l(),F(G3.$$.fragment),AJr=l(),Ur=a("div"),F(j$.$$.fragment),LJr=l(),k3e=a("p"),yJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xJr=l(),Ln=a("p"),$Jr=o("The model class to instantiate is selected based on the "),S3e=a("code"),kJr=o("model_type"),SJr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),RJr=o("pretrained_model_name_or_path"),PJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),BJr=o("pretrained_model_name_or_path"),NJr=o(":"),IJr=l(),Re=a("ul"),O3=a("li"),B3e=a("strong"),qJr=o("albert"),jJr=o(" \u2014 "),Roe=a("a"),DJr=o("FlaxAlbertForQuestionAnswering"),GJr=o(" (ALBERT model)"),OJr=l(),V3=a("li"),N3e=a("strong"),VJr=o("bart"),XJr=o(" \u2014 "),Poe=a("a"),zJr=o("FlaxBartForQuestionAnswering"),QJr=o(" (BART model)"),WJr=l(),X3=a("li"),I3e=a("strong"),HJr=o("bert"),UJr=o(" \u2014 "),Boe=a("a"),JJr=o("FlaxBertForQuestionAnswering"),YJr=o(" (BERT model)"),KJr=l(),z3=a("li"),q3e=a("strong"),ZJr=o("big_bird"),eYr=o(" \u2014 "),Noe=a("a"),oYr=o("FlaxBigBirdForQuestionAnswering"),rYr=o(" (BigBird model)"),tYr=l(),Q3=a("li"),j3e=a("strong"),aYr=o("distilbert"),nYr=o(" \u2014 "),Ioe=a("a"),sYr=o("FlaxDistilBertForQuestionAnswering"),lYr=o(" (DistilBERT model)"),iYr=l(),W3=a("li"),D3e=a("strong"),dYr=o("electra"),cYr=o(" \u2014 "),qoe=a("a"),fYr=o("FlaxElectraForQuestionAnswering"),mYr=o(" (ELECTRA model)"),gYr=l(),H3=a("li"),G3e=a("strong"),hYr=o("mbart"),pYr=o(" \u2014 "),joe=a("a"),_Yr=o("FlaxMBartForQuestionAnswering"),uYr=o(" (mBART model)"),bYr=l(),U3=a("li"),O3e=a("strong"),vYr=o("roberta"),FYr=o(" \u2014 "),Doe=a("a"),TYr=o("FlaxRobertaForQuestionAnswering"),MYr=o(" (RoBERTa model)"),EYr=l(),J3=a("li"),V3e=a("strong"),CYr=o("roformer"),wYr=o(" \u2014 "),Goe=a("a"),AYr=o("FlaxRoFormerForQuestionAnswering"),LYr=o(" (RoFormer model)"),yYr=l(),Y3=a("li"),X3e=a("strong"),xYr=o("xlm-roberta"),$Yr=o(" \u2014 "),Ooe=a("a"),kYr=o("FlaxXLMRobertaForQuestionAnswering"),SYr=o(" (XLM-RoBERTa model)"),RYr=l(),F(K3.$$.fragment),Ize=l(),pf=a("h2"),Z3=a("a"),z3e=a("span"),F(D$.$$.fragment),PYr=l(),Q3e=a("span"),BYr=o("FlaxAutoModelForTokenClassification"),qze=l(),Mr=a("div"),F(G$.$$.fragment),NYr=l(),_f=a("p"),IYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=a("a"),qYr=o("from_pretrained()"),jYr=o(" class method or the "),Xoe=a("a"),DYr=o("from_config()"),GYr=o(` class
method.`),OYr=l(),O$=a("p"),VYr=o("This class cannot be instantiated directly using "),W3e=a("code"),XYr=o("__init__()"),zYr=o(" (throws an error)."),QYr=l(),Zt=a("div"),F(V$.$$.fragment),WYr=l(),H3e=a("p"),HYr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UYr=l(),uf=a("p"),JYr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),YYr=o("not"),KYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),ZYr=o("from_pretrained()"),eKr=o(" to load the model weights."),oKr=l(),F(ew.$$.fragment),rKr=l(),Jr=a("div"),F(X$.$$.fragment),tKr=l(),J3e=a("p"),aKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nKr=l(),yn=a("p"),sKr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),lKr=o("model_type"),iKr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),dKr=o("pretrained_model_name_or_path"),cKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),fKr=o("pretrained_model_name_or_path"),mKr=o(":"),gKr=l(),Ve=a("ul"),ow=a("li"),ewe=a("strong"),hKr=o("albert"),pKr=o(" \u2014 "),Qoe=a("a"),_Kr=o("FlaxAlbertForTokenClassification"),uKr=o(" (ALBERT model)"),bKr=l(),rw=a("li"),owe=a("strong"),vKr=o("bert"),FKr=o(" \u2014 "),Woe=a("a"),TKr=o("FlaxBertForTokenClassification"),MKr=o(" (BERT model)"),EKr=l(),tw=a("li"),rwe=a("strong"),CKr=o("big_bird"),wKr=o(" \u2014 "),Hoe=a("a"),AKr=o("FlaxBigBirdForTokenClassification"),LKr=o(" (BigBird model)"),yKr=l(),aw=a("li"),twe=a("strong"),xKr=o("distilbert"),$Kr=o(" \u2014 "),Uoe=a("a"),kKr=o("FlaxDistilBertForTokenClassification"),SKr=o(" (DistilBERT model)"),RKr=l(),nw=a("li"),awe=a("strong"),PKr=o("electra"),BKr=o(" \u2014 "),Joe=a("a"),NKr=o("FlaxElectraForTokenClassification"),IKr=o(" (ELECTRA model)"),qKr=l(),sw=a("li"),nwe=a("strong"),jKr=o("roberta"),DKr=o(" \u2014 "),Yoe=a("a"),GKr=o("FlaxRobertaForTokenClassification"),OKr=o(" (RoBERTa model)"),VKr=l(),lw=a("li"),swe=a("strong"),XKr=o("roformer"),zKr=o(" \u2014 "),Koe=a("a"),QKr=o("FlaxRoFormerForTokenClassification"),WKr=o(" (RoFormer model)"),HKr=l(),iw=a("li"),lwe=a("strong"),UKr=o("xlm-roberta"),JKr=o(" \u2014 "),Zoe=a("a"),YKr=o("FlaxXLMRobertaForTokenClassification"),KKr=o(" (XLM-RoBERTa model)"),ZKr=l(),F(dw.$$.fragment),jze=l(),bf=a("h2"),cw=a("a"),iwe=a("span"),F(z$.$$.fragment),eZr=l(),dwe=a("span"),oZr=o("FlaxAutoModelForMultipleChoice"),Dze=l(),Er=a("div"),F(Q$.$$.fragment),rZr=l(),vf=a("p"),tZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=a("a"),aZr=o("from_pretrained()"),nZr=o(" class method or the "),ore=a("a"),sZr=o("from_config()"),lZr=o(` class
method.`),iZr=l(),W$=a("p"),dZr=o("This class cannot be instantiated directly using "),cwe=a("code"),cZr=o("__init__()"),fZr=o(" (throws an error)."),mZr=l(),ea=a("div"),F(H$.$$.fragment),gZr=l(),fwe=a("p"),hZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pZr=l(),Ff=a("p"),_Zr=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),uZr=o("not"),bZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),vZr=o("from_pretrained()"),FZr=o(" to load the model weights."),TZr=l(),F(fw.$$.fragment),MZr=l(),Yr=a("div"),F(U$.$$.fragment),EZr=l(),gwe=a("p"),CZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wZr=l(),xn=a("p"),AZr=o("The model class to instantiate is selected based on the "),hwe=a("code"),LZr=o("model_type"),yZr=o(` property of the config object (either
passed as an argument or loaded from `),pwe=a("code"),xZr=o("pretrained_model_name_or_path"),$Zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=a("code"),kZr=o("pretrained_model_name_or_path"),SZr=o(":"),RZr=l(),Xe=a("ul"),mw=a("li"),uwe=a("strong"),PZr=o("albert"),BZr=o(" \u2014 "),tre=a("a"),NZr=o("FlaxAlbertForMultipleChoice"),IZr=o(" (ALBERT model)"),qZr=l(),gw=a("li"),bwe=a("strong"),jZr=o("bert"),DZr=o(" \u2014 "),are=a("a"),GZr=o("FlaxBertForMultipleChoice"),OZr=o(" (BERT model)"),VZr=l(),hw=a("li"),vwe=a("strong"),XZr=o("big_bird"),zZr=o(" \u2014 "),nre=a("a"),QZr=o("FlaxBigBirdForMultipleChoice"),WZr=o(" (BigBird model)"),HZr=l(),pw=a("li"),Fwe=a("strong"),UZr=o("distilbert"),JZr=o(" \u2014 "),sre=a("a"),YZr=o("FlaxDistilBertForMultipleChoice"),KZr=o(" (DistilBERT model)"),ZZr=l(),_w=a("li"),Twe=a("strong"),eet=o("electra"),oet=o(" \u2014 "),lre=a("a"),ret=o("FlaxElectraForMultipleChoice"),tet=o(" (ELECTRA model)"),aet=l(),uw=a("li"),Mwe=a("strong"),net=o("roberta"),set=o(" \u2014 "),ire=a("a"),iet=o("FlaxRobertaForMultipleChoice"),det=o(" (RoBERTa model)"),cet=l(),bw=a("li"),Ewe=a("strong"),fet=o("roformer"),met=o(" \u2014 "),dre=a("a"),get=o("FlaxRoFormerForMultipleChoice"),het=o(" (RoFormer model)"),pet=l(),vw=a("li"),Cwe=a("strong"),_et=o("xlm-roberta"),uet=o(" \u2014 "),cre=a("a"),bet=o("FlaxXLMRobertaForMultipleChoice"),vet=o(" (XLM-RoBERTa model)"),Fet=l(),F(Fw.$$.fragment),Gze=l(),Tf=a("h2"),Tw=a("a"),wwe=a("span"),F(J$.$$.fragment),Tet=l(),Awe=a("span"),Met=o("FlaxAutoModelForNextSentencePrediction"),Oze=l(),Cr=a("div"),F(Y$.$$.fragment),Eet=l(),Mf=a("p"),Cet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fre=a("a"),wet=o("from_pretrained()"),Aet=o(" class method or the "),mre=a("a"),Let=o("from_config()"),yet=o(` class
method.`),xet=l(),K$=a("p"),$et=o("This class cannot be instantiated directly using "),Lwe=a("code"),ket=o("__init__()"),Set=o(" (throws an error)."),Ret=l(),oa=a("div"),F(Z$.$$.fragment),Pet=l(),ywe=a("p"),Bet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Net=l(),Ef=a("p"),Iet=o(`Note:
Loading a model from its configuration file does `),xwe=a("strong"),qet=o("not"),jet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),Det=o("from_pretrained()"),Get=o(" to load the model weights."),Oet=l(),F(Mw.$$.fragment),Vet=l(),Kr=a("div"),F(ek.$$.fragment),Xet=l(),$we=a("p"),zet=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qet=l(),$n=a("p"),Wet=o("The model class to instantiate is selected based on the "),kwe=a("code"),Het=o("model_type"),Uet=o(` property of the config object (either
passed as an argument or loaded from `),Swe=a("code"),Jet=o("pretrained_model_name_or_path"),Yet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=a("code"),Ket=o("pretrained_model_name_or_path"),Zet=o(":"),eot=l(),Pwe=a("ul"),Ew=a("li"),Bwe=a("strong"),oot=o("bert"),rot=o(" \u2014 "),hre=a("a"),tot=o("FlaxBertForNextSentencePrediction"),aot=o(" (BERT model)"),not=l(),F(Cw.$$.fragment),Vze=l(),Cf=a("h2"),ww=a("a"),Nwe=a("span"),F(ok.$$.fragment),sot=l(),Iwe=a("span"),lot=o("FlaxAutoModelForImageClassification"),Xze=l(),wr=a("div"),F(rk.$$.fragment),iot=l(),wf=a("p"),dot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pre=a("a"),cot=o("from_pretrained()"),fot=o(" class method or the "),_re=a("a"),mot=o("from_config()"),got=o(` class
method.`),hot=l(),tk=a("p"),pot=o("This class cannot be instantiated directly using "),qwe=a("code"),_ot=o("__init__()"),uot=o(" (throws an error)."),bot=l(),ra=a("div"),F(ak.$$.fragment),vot=l(),jwe=a("p"),Fot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tot=l(),Af=a("p"),Mot=o(`Note:
Loading a model from its configuration file does `),Dwe=a("strong"),Eot=o("not"),Cot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),wot=o("from_pretrained()"),Aot=o(" to load the model weights."),Lot=l(),F(Aw.$$.fragment),yot=l(),Zr=a("div"),F(nk.$$.fragment),xot=l(),Gwe=a("p"),$ot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kot=l(),kn=a("p"),Sot=o("The model class to instantiate is selected based on the "),Owe=a("code"),Rot=o("model_type"),Pot=o(` property of the config object (either
passed as an argument or loaded from `),Vwe=a("code"),Bot=o("pretrained_model_name_or_path"),Not=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=a("code"),Iot=o("pretrained_model_name_or_path"),qot=o(":"),jot=l(),sk=a("ul"),Lw=a("li"),zwe=a("strong"),Dot=o("beit"),Got=o(" \u2014 "),bre=a("a"),Oot=o("FlaxBeitForImageClassification"),Vot=o(" (BEiT model)"),Xot=l(),yw=a("li"),Qwe=a("strong"),zot=o("vit"),Qot=o(" \u2014 "),vre=a("a"),Wot=o("FlaxViTForImageClassification"),Hot=o(" (ViT model)"),Uot=l(),F(xw.$$.fragment),zze=l(),Lf=a("h2"),$w=a("a"),Wwe=a("span"),F(lk.$$.fragment),Jot=l(),Hwe=a("span"),Yot=o("FlaxAutoModelForVision2Seq"),Qze=l(),Ar=a("div"),F(ik.$$.fragment),Kot=l(),yf=a("p"),Zot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=a("a"),ert=o("from_pretrained()"),ort=o(" class method or the "),Tre=a("a"),rrt=o("from_config()"),trt=o(` class
method.`),art=l(),dk=a("p"),nrt=o("This class cannot be instantiated directly using "),Uwe=a("code"),srt=o("__init__()"),lrt=o(" (throws an error)."),irt=l(),ta=a("div"),F(ck.$$.fragment),drt=l(),Jwe=a("p"),crt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),frt=l(),xf=a("p"),mrt=o(`Note:
Loading a model from its configuration file does `),Ywe=a("strong"),grt=o("not"),hrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),prt=o("from_pretrained()"),_rt=o(" to load the model weights."),urt=l(),F(kw.$$.fragment),brt=l(),et=a("div"),F(fk.$$.fragment),vrt=l(),Kwe=a("p"),Frt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Trt=l(),Sn=a("p"),Mrt=o("The model class to instantiate is selected based on the "),Zwe=a("code"),Ert=o("model_type"),Crt=o(` property of the config object (either
passed as an argument or loaded from `),eAe=a("code"),wrt=o("pretrained_model_name_or_path"),Art=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=a("code"),Lrt=o("pretrained_model_name_or_path"),yrt=o(":"),xrt=l(),rAe=a("ul"),Sw=a("li"),tAe=a("strong"),$rt=o("vision-encoder-decoder"),krt=o(" \u2014 "),Ere=a("a"),Srt=o("FlaxVisionEncoderDecoderModel"),Rrt=o(" (Vision Encoder decoder model)"),Prt=l(),F(Rw.$$.fragment),this.h()},l(f){const u=lQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var mk=s(p);m=n(mk,"A",{id:!0,class:!0,href:!0});var aAe=s(m);_=n(aAe,"SPAN",{});var nAe=s(_);T(d.$$.fragment,nAe),nAe.forEach(t),aAe.forEach(t),h=i(mk),Eo=n(mk,"SPAN",{});var sAe=s(Eo);Ai=r(sAe,"Auto Classes"),sAe.forEach(t),mk.forEach(t),Rf=i(f),st=n(f,"P",{});var gk=s(st);Li=r(gk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(gk,"CODE",{});var lAe=s(yi);K6=r(lAe,"from_pretrained()"),lAe.forEach(t),Pf=r(gk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),gk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var iAe=s(Pn);Z6=r(iAe,"AutoConfig"),iAe.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var dAe=s(Nn);e7=r(dAe,"AutoModel"),dAe.forEach(t),$i=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var cAe=s(In);o7=r(cAe,"AutoTokenizer"),cAe.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var hk=s(Ae);SS=r(hk,"will create a model that is an instance of "),Si=n(hk,"A",{href:!0});var fAe=s(Si);RS=r(fAe,"BertModel"),fAe.forEach(t),PS=r(hk,"."),hk.forEach(t),Co=i(f),Ra=n(f,"P",{});var pk=s(Ra);BS=r(pk,"There is one class of "),Nf=n(pk,"CODE",{});var mAe=s(Nf);NS=r(mAe,"AutoModel"),mAe.forEach(t),tHe=r(pk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pk.forEach(t),OVe=i(f),Ri=n(f,"H2",{class:!0});var _k=s(Ri);If=n(_k,"A",{id:!0,class:!0,href:!0});var gAe=s(If);bae=n(gAe,"SPAN",{});var hAe=s(bae);T(r7.$$.fragment,hAe),hAe.forEach(t),gAe.forEach(t),aHe=i(_k),vae=n(_k,"SPAN",{});var pAe=s(vae);nHe=r(pAe,"Extending the Auto Classes"),pAe.forEach(t),_k.forEach(t),VVe=i(f),qn=n(f,"P",{});var $f=s(qn);sHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=n($f,"CODE",{});var _Ae=s(Fae);lHe=r(_Ae,"NewModel"),_Ae.forEach(t),iHe=r($f,", make sure you have a "),Tae=n($f,"CODE",{});var uAe=s(Tae);dHe=r(uAe,"NewModelConfig"),uAe.forEach(t),cHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),XVe=i(f),T(t7.$$.fragment,f),zVe=i(f),IS=n(f,"P",{});var bAe=s(IS);fHe=r(bAe,"You will then be able to use the auto classes like you would usually do!"),bAe.forEach(t),QVe=i(f),T(qf.$$.fragment,f),WVe=i(f),Pi=n(f,"H2",{class:!0});var uk=s(Pi);jf=n(uk,"A",{id:!0,class:!0,href:!0});var vAe=s(jf);Mae=n(vAe,"SPAN",{});var FAe=s(Mae);T(a7.$$.fragment,FAe),FAe.forEach(t),vAe.forEach(t),mHe=i(uk),Eae=n(uk,"SPAN",{});var TAe=s(Eae);gHe=r(TAe,"AutoConfig"),TAe.forEach(t),uk.forEach(t),HVe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(n7.$$.fragment,at),hHe=i(at),s7=n(at,"P",{});var bk=s(s7);pHe=r(bk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qS=n(bk,"A",{href:!0});var MAe=s(qS);_He=r(MAe,"from_pretrained()"),MAe.forEach(t),uHe=r(bk," class method."),bk.forEach(t),bHe=i(at),l7=n(at,"P",{});var vk=s(l7);vHe=r(vk,"This class cannot be instantiated directly using "),Cae=n(vk,"CODE",{});var EAe=s(Cae);FHe=r(EAe,"__init__()"),EAe.forEach(t),THe=r(vk," (throws an error)."),vk.forEach(t),MHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(i7.$$.fragment,nt),EHe=i(nt),wae=n(nt,"P",{});var CAe=s(wae);CHe=r(CAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CAe.forEach(t),wHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);AHe=r(kf,"The configuration class to instantiate is selected based on the "),Aae=n(kf,"CODE",{});var wAe=s(Aae);LHe=r(wAe,"model_type"),wAe.forEach(t),yHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=n(kf,"CODE",{});var AAe=s(Lae);xHe=r(AAe,"pretrained_model_name_or_path"),AAe.forEach(t),$He=r(kf,":"),kf.forEach(t),kHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var Pw=s(Df);yae=n(Pw,"STRONG",{});var LAe=s(yae);SHe=r(LAe,"albert"),LAe.forEach(t),RHe=r(Pw," \u2014 "),jS=n(Pw,"A",{href:!0});var yAe=s(jS);PHe=r(yAe,"AlbertConfig"),yAe.forEach(t),BHe=r(Pw," (ALBERT model)"),Pw.forEach(t),NHe=i(L),Gf=n(L,"LI",{});var Bw=s(Gf);xae=n(Bw,"STRONG",{});var xAe=s(xae);IHe=r(xAe,"bart"),xAe.forEach(t),qHe=r(Bw," \u2014 "),DS=n(Bw,"A",{href:!0});var $Ae=s(DS);jHe=r($Ae,"BartConfig"),$Ae.forEach(t),DHe=r(Bw," (BART model)"),Bw.forEach(t),GHe=i(L),Of=n(L,"LI",{});var Nw=s(Of);$ae=n(Nw,"STRONG",{});var kAe=s($ae);OHe=r(kAe,"beit"),kAe.forEach(t),VHe=r(Nw," \u2014 "),GS=n(Nw,"A",{href:!0});var SAe=s(GS);XHe=r(SAe,"BeitConfig"),SAe.forEach(t),zHe=r(Nw," (BEiT model)"),Nw.forEach(t),QHe=i(L),Vf=n(L,"LI",{});var Iw=s(Vf);kae=n(Iw,"STRONG",{});var RAe=s(kae);WHe=r(RAe,"bert"),RAe.forEach(t),HHe=r(Iw," \u2014 "),OS=n(Iw,"A",{href:!0});var PAe=s(OS);UHe=r(PAe,"BertConfig"),PAe.forEach(t),JHe=r(Iw," (BERT model)"),Iw.forEach(t),YHe=i(L),Xf=n(L,"LI",{});var qw=s(Xf);Sae=n(qw,"STRONG",{});var BAe=s(Sae);KHe=r(BAe,"bert-generation"),BAe.forEach(t),ZHe=r(qw," \u2014 "),VS=n(qw,"A",{href:!0});var NAe=s(VS);eUe=r(NAe,"BertGenerationConfig"),NAe.forEach(t),oUe=r(qw," (Bert Generation model)"),qw.forEach(t),rUe=i(L),zf=n(L,"LI",{});var jw=s(zf);Rae=n(jw,"STRONG",{});var IAe=s(Rae);tUe=r(IAe,"big_bird"),IAe.forEach(t),aUe=r(jw," \u2014 "),XS=n(jw,"A",{href:!0});var qAe=s(XS);nUe=r(qAe,"BigBirdConfig"),qAe.forEach(t),sUe=r(jw," (BigBird model)"),jw.forEach(t),lUe=i(L),Qf=n(L,"LI",{});var Dw=s(Qf);Pae=n(Dw,"STRONG",{});var jAe=s(Pae);iUe=r(jAe,"bigbird_pegasus"),jAe.forEach(t),dUe=r(Dw," \u2014 "),zS=n(Dw,"A",{href:!0});var DAe=s(zS);cUe=r(DAe,"BigBirdPegasusConfig"),DAe.forEach(t),fUe=r(Dw," (BigBird-Pegasus model)"),Dw.forEach(t),mUe=i(L),Wf=n(L,"LI",{});var Gw=s(Wf);Bae=n(Gw,"STRONG",{});var GAe=s(Bae);gUe=r(GAe,"blenderbot"),GAe.forEach(t),hUe=r(Gw," \u2014 "),QS=n(Gw,"A",{href:!0});var OAe=s(QS);pUe=r(OAe,"BlenderbotConfig"),OAe.forEach(t),_Ue=r(Gw," (Blenderbot model)"),Gw.forEach(t),uUe=i(L),Hf=n(L,"LI",{});var Ow=s(Hf);Nae=n(Ow,"STRONG",{});var VAe=s(Nae);bUe=r(VAe,"blenderbot-small"),VAe.forEach(t),vUe=r(Ow," \u2014 "),WS=n(Ow,"A",{href:!0});var XAe=s(WS);FUe=r(XAe,"BlenderbotSmallConfig"),XAe.forEach(t),TUe=r(Ow," (BlenderbotSmall model)"),Ow.forEach(t),MUe=i(L),Uf=n(L,"LI",{});var Vw=s(Uf);Iae=n(Vw,"STRONG",{});var zAe=s(Iae);EUe=r(zAe,"bloom"),zAe.forEach(t),CUe=r(Vw," \u2014 "),HS=n(Vw,"A",{href:!0});var QAe=s(HS);wUe=r(QAe,"BloomConfig"),QAe.forEach(t),AUe=r(Vw," (BLOOM model)"),Vw.forEach(t),LUe=i(L),Jf=n(L,"LI",{});var Xw=s(Jf);qae=n(Xw,"STRONG",{});var WAe=s(qae);yUe=r(WAe,"camembert"),WAe.forEach(t),xUe=r(Xw," \u2014 "),US=n(Xw,"A",{href:!0});var HAe=s(US);$Ue=r(HAe,"CamembertConfig"),HAe.forEach(t),kUe=r(Xw," (CamemBERT model)"),Xw.forEach(t),SUe=i(L),Yf=n(L,"LI",{});var zw=s(Yf);jae=n(zw,"STRONG",{});var UAe=s(jae);RUe=r(UAe,"canine"),UAe.forEach(t),PUe=r(zw," \u2014 "),JS=n(zw,"A",{href:!0});var JAe=s(JS);BUe=r(JAe,"CanineConfig"),JAe.forEach(t),NUe=r(zw," (CANINE model)"),zw.forEach(t),IUe=i(L),Kf=n(L,"LI",{});var Qw=s(Kf);Dae=n(Qw,"STRONG",{});var YAe=s(Dae);qUe=r(YAe,"clip"),YAe.forEach(t),jUe=r(Qw," \u2014 "),YS=n(Qw,"A",{href:!0});var KAe=s(YS);DUe=r(KAe,"CLIPConfig"),KAe.forEach(t),GUe=r(Qw," (CLIP model)"),Qw.forEach(t),OUe=i(L),Zf=n(L,"LI",{});var Ww=s(Zf);Gae=n(Ww,"STRONG",{});var ZAe=s(Gae);VUe=r(ZAe,"codegen"),ZAe.forEach(t),XUe=r(Ww," \u2014 "),KS=n(Ww,"A",{href:!0});var e6e=s(KS);zUe=r(e6e,"CodeGenConfig"),e6e.forEach(t),QUe=r(Ww," (CodeGen model)"),Ww.forEach(t),WUe=i(L),em=n(L,"LI",{});var Hw=s(em);Oae=n(Hw,"STRONG",{});var o6e=s(Oae);HUe=r(o6e,"convbert"),o6e.forEach(t),UUe=r(Hw," \u2014 "),ZS=n(Hw,"A",{href:!0});var r6e=s(ZS);JUe=r(r6e,"ConvBertConfig"),r6e.forEach(t),YUe=r(Hw," (ConvBERT model)"),Hw.forEach(t),KUe=i(L),om=n(L,"LI",{});var Uw=s(om);Vae=n(Uw,"STRONG",{});var t6e=s(Vae);ZUe=r(t6e,"convnext"),t6e.forEach(t),eJe=r(Uw," \u2014 "),eR=n(Uw,"A",{href:!0});var a6e=s(eR);oJe=r(a6e,"ConvNextConfig"),a6e.forEach(t),rJe=r(Uw," (ConvNeXT model)"),Uw.forEach(t),tJe=i(L),rm=n(L,"LI",{});var Jw=s(rm);Xae=n(Jw,"STRONG",{});var n6e=s(Xae);aJe=r(n6e,"ctrl"),n6e.forEach(t),nJe=r(Jw," \u2014 "),oR=n(Jw,"A",{href:!0});var s6e=s(oR);sJe=r(s6e,"CTRLConfig"),s6e.forEach(t),lJe=r(Jw," (CTRL model)"),Jw.forEach(t),iJe=i(L),tm=n(L,"LI",{});var Yw=s(tm);zae=n(Yw,"STRONG",{});var l6e=s(zae);dJe=r(l6e,"cvt"),l6e.forEach(t),cJe=r(Yw," \u2014 "),rR=n(Yw,"A",{href:!0});var i6e=s(rR);fJe=r(i6e,"CvtConfig"),i6e.forEach(t),mJe=r(Yw," (CvT model)"),Yw.forEach(t),gJe=i(L),am=n(L,"LI",{});var Kw=s(am);Qae=n(Kw,"STRONG",{});var d6e=s(Qae);hJe=r(d6e,"data2vec-audio"),d6e.forEach(t),pJe=r(Kw," \u2014 "),tR=n(Kw,"A",{href:!0});var c6e=s(tR);_Je=r(c6e,"Data2VecAudioConfig"),c6e.forEach(t),uJe=r(Kw," (Data2VecAudio model)"),Kw.forEach(t),bJe=i(L),nm=n(L,"LI",{});var Zw=s(nm);Wae=n(Zw,"STRONG",{});var f6e=s(Wae);vJe=r(f6e,"data2vec-text"),f6e.forEach(t),FJe=r(Zw," \u2014 "),aR=n(Zw,"A",{href:!0});var m6e=s(aR);TJe=r(m6e,"Data2VecTextConfig"),m6e.forEach(t),MJe=r(Zw," (Data2VecText model)"),Zw.forEach(t),EJe=i(L),sm=n(L,"LI",{});var eA=s(sm);Hae=n(eA,"STRONG",{});var g6e=s(Hae);CJe=r(g6e,"data2vec-vision"),g6e.forEach(t),wJe=r(eA," \u2014 "),nR=n(eA,"A",{href:!0});var h6e=s(nR);AJe=r(h6e,"Data2VecVisionConfig"),h6e.forEach(t),LJe=r(eA," (Data2VecVision model)"),eA.forEach(t),yJe=i(L),lm=n(L,"LI",{});var oA=s(lm);Uae=n(oA,"STRONG",{});var p6e=s(Uae);xJe=r(p6e,"deberta"),p6e.forEach(t),$Je=r(oA," \u2014 "),sR=n(oA,"A",{href:!0});var _6e=s(sR);kJe=r(_6e,"DebertaConfig"),_6e.forEach(t),SJe=r(oA," (DeBERTa model)"),oA.forEach(t),RJe=i(L),im=n(L,"LI",{});var rA=s(im);Jae=n(rA,"STRONG",{});var u6e=s(Jae);PJe=r(u6e,"deberta-v2"),u6e.forEach(t),BJe=r(rA," \u2014 "),lR=n(rA,"A",{href:!0});var b6e=s(lR);NJe=r(b6e,"DebertaV2Config"),b6e.forEach(t),IJe=r(rA," (DeBERTa-v2 model)"),rA.forEach(t),qJe=i(L),dm=n(L,"LI",{});var tA=s(dm);Yae=n(tA,"STRONG",{});var Nrt=s(Yae);jJe=r(Nrt,"decision_transformer"),Nrt.forEach(t),DJe=r(tA," \u2014 "),iR=n(tA,"A",{href:!0});var Irt=s(iR);GJe=r(Irt,"DecisionTransformerConfig"),Irt.forEach(t),OJe=r(tA," (Decision Transformer model)"),tA.forEach(t),VJe=i(L),cm=n(L,"LI",{});var v6e=s(cm);Kae=n(v6e,"STRONG",{});var qrt=s(Kae);XJe=r(qrt,"deit"),qrt.forEach(t),zJe=r(v6e," \u2014 "),dR=n(v6e,"A",{href:!0});var jrt=s(dR);QJe=r(jrt,"DeiTConfig"),jrt.forEach(t),WJe=r(v6e," (DeiT model)"),v6e.forEach(t),HJe=i(L),fm=n(L,"LI",{});var F6e=s(fm);Zae=n(F6e,"STRONG",{});var Drt=s(Zae);UJe=r(Drt,"detr"),Drt.forEach(t),JJe=r(F6e," \u2014 "),cR=n(F6e,"A",{href:!0});var Grt=s(cR);YJe=r(Grt,"DetrConfig"),Grt.forEach(t),KJe=r(F6e," (DETR model)"),F6e.forEach(t),ZJe=i(L),mm=n(L,"LI",{});var T6e=s(mm);ene=n(T6e,"STRONG",{});var Ort=s(ene);eYe=r(Ort,"distilbert"),Ort.forEach(t),oYe=r(T6e," \u2014 "),fR=n(T6e,"A",{href:!0});var Vrt=s(fR);rYe=r(Vrt,"DistilBertConfig"),Vrt.forEach(t),tYe=r(T6e," (DistilBERT model)"),T6e.forEach(t),aYe=i(L),gm=n(L,"LI",{});var M6e=s(gm);one=n(M6e,"STRONG",{});var Xrt=s(one);nYe=r(Xrt,"dpr"),Xrt.forEach(t),sYe=r(M6e," \u2014 "),mR=n(M6e,"A",{href:!0});var zrt=s(mR);lYe=r(zrt,"DPRConfig"),zrt.forEach(t),iYe=r(M6e," (DPR model)"),M6e.forEach(t),dYe=i(L),hm=n(L,"LI",{});var E6e=s(hm);rne=n(E6e,"STRONG",{});var Qrt=s(rne);cYe=r(Qrt,"dpt"),Qrt.forEach(t),fYe=r(E6e," \u2014 "),gR=n(E6e,"A",{href:!0});var Wrt=s(gR);mYe=r(Wrt,"DPTConfig"),Wrt.forEach(t),gYe=r(E6e," (DPT model)"),E6e.forEach(t),hYe=i(L),pm=n(L,"LI",{});var C6e=s(pm);tne=n(C6e,"STRONG",{});var Hrt=s(tne);pYe=r(Hrt,"electra"),Hrt.forEach(t),_Ye=r(C6e," \u2014 "),hR=n(C6e,"A",{href:!0});var Urt=s(hR);uYe=r(Urt,"ElectraConfig"),Urt.forEach(t),bYe=r(C6e," (ELECTRA model)"),C6e.forEach(t),vYe=i(L),_m=n(L,"LI",{});var w6e=s(_m);ane=n(w6e,"STRONG",{});var Jrt=s(ane);FYe=r(Jrt,"encoder-decoder"),Jrt.forEach(t),TYe=r(w6e," \u2014 "),pR=n(w6e,"A",{href:!0});var Yrt=s(pR);MYe=r(Yrt,"EncoderDecoderConfig"),Yrt.forEach(t),EYe=r(w6e," (Encoder decoder model)"),w6e.forEach(t),CYe=i(L),um=n(L,"LI",{});var A6e=s(um);nne=n(A6e,"STRONG",{});var Krt=s(nne);wYe=r(Krt,"flaubert"),Krt.forEach(t),AYe=r(A6e," \u2014 "),_R=n(A6e,"A",{href:!0});var Zrt=s(_R);LYe=r(Zrt,"FlaubertConfig"),Zrt.forEach(t),yYe=r(A6e," (FlauBERT model)"),A6e.forEach(t),xYe=i(L),bm=n(L,"LI",{});var L6e=s(bm);sne=n(L6e,"STRONG",{});var ett=s(sne);$Ye=r(ett,"flava"),ett.forEach(t),kYe=r(L6e," \u2014 "),uR=n(L6e,"A",{href:!0});var ott=s(uR);SYe=r(ott,"FlavaConfig"),ott.forEach(t),RYe=r(L6e," (FLAVA model)"),L6e.forEach(t),PYe=i(L),vm=n(L,"LI",{});var y6e=s(vm);lne=n(y6e,"STRONG",{});var rtt=s(lne);BYe=r(rtt,"fnet"),rtt.forEach(t),NYe=r(y6e," \u2014 "),bR=n(y6e,"A",{href:!0});var ttt=s(bR);IYe=r(ttt,"FNetConfig"),ttt.forEach(t),qYe=r(y6e," (FNet model)"),y6e.forEach(t),jYe=i(L),Fm=n(L,"LI",{});var x6e=s(Fm);ine=n(x6e,"STRONG",{});var att=s(ine);DYe=r(att,"fsmt"),att.forEach(t),GYe=r(x6e," \u2014 "),vR=n(x6e,"A",{href:!0});var ntt=s(vR);OYe=r(ntt,"FSMTConfig"),ntt.forEach(t),VYe=r(x6e," (FairSeq Machine-Translation model)"),x6e.forEach(t),XYe=i(L),Tm=n(L,"LI",{});var $6e=s(Tm);dne=n($6e,"STRONG",{});var stt=s(dne);zYe=r(stt,"funnel"),stt.forEach(t),QYe=r($6e," \u2014 "),FR=n($6e,"A",{href:!0});var ltt=s(FR);WYe=r(ltt,"FunnelConfig"),ltt.forEach(t),HYe=r($6e," (Funnel Transformer model)"),$6e.forEach(t),UYe=i(L),Mm=n(L,"LI",{});var k6e=s(Mm);cne=n(k6e,"STRONG",{});var itt=s(cne);JYe=r(itt,"glpn"),itt.forEach(t),YYe=r(k6e," \u2014 "),TR=n(k6e,"A",{href:!0});var dtt=s(TR);KYe=r(dtt,"GLPNConfig"),dtt.forEach(t),ZYe=r(k6e," (GLPN model)"),k6e.forEach(t),eKe=i(L),Em=n(L,"LI",{});var S6e=s(Em);fne=n(S6e,"STRONG",{});var ctt=s(fne);oKe=r(ctt,"gpt2"),ctt.forEach(t),rKe=r(S6e," \u2014 "),MR=n(S6e,"A",{href:!0});var ftt=s(MR);tKe=r(ftt,"GPT2Config"),ftt.forEach(t),aKe=r(S6e," (OpenAI GPT-2 model)"),S6e.forEach(t),nKe=i(L),Cm=n(L,"LI",{});var R6e=s(Cm);mne=n(R6e,"STRONG",{});var mtt=s(mne);sKe=r(mtt,"gpt_neo"),mtt.forEach(t),lKe=r(R6e," \u2014 "),ER=n(R6e,"A",{href:!0});var gtt=s(ER);iKe=r(gtt,"GPTNeoConfig"),gtt.forEach(t),dKe=r(R6e," (GPT Neo model)"),R6e.forEach(t),cKe=i(L),wm=n(L,"LI",{});var P6e=s(wm);gne=n(P6e,"STRONG",{});var htt=s(gne);fKe=r(htt,"gpt_neox"),htt.forEach(t),mKe=r(P6e," \u2014 "),CR=n(P6e,"A",{href:!0});var ptt=s(CR);gKe=r(ptt,"GPTNeoXConfig"),ptt.forEach(t),hKe=r(P6e," (GPT NeoX model)"),P6e.forEach(t),pKe=i(L),Am=n(L,"LI",{});var B6e=s(Am);hne=n(B6e,"STRONG",{});var _tt=s(hne);_Ke=r(_tt,"gptj"),_tt.forEach(t),uKe=r(B6e," \u2014 "),wR=n(B6e,"A",{href:!0});var utt=s(wR);bKe=r(utt,"GPTJConfig"),utt.forEach(t),vKe=r(B6e," (GPT-J model)"),B6e.forEach(t),FKe=i(L),Lm=n(L,"LI",{});var N6e=s(Lm);pne=n(N6e,"STRONG",{});var btt=s(pne);TKe=r(btt,"groupvit"),btt.forEach(t),MKe=r(N6e," \u2014 "),AR=n(N6e,"A",{href:!0});var vtt=s(AR);EKe=r(vtt,"GroupViTConfig"),vtt.forEach(t),CKe=r(N6e," (GroupViT model)"),N6e.forEach(t),wKe=i(L),ym=n(L,"LI",{});var I6e=s(ym);_ne=n(I6e,"STRONG",{});var Ftt=s(_ne);AKe=r(Ftt,"hubert"),Ftt.forEach(t),LKe=r(I6e," \u2014 "),LR=n(I6e,"A",{href:!0});var Ttt=s(LR);yKe=r(Ttt,"HubertConfig"),Ttt.forEach(t),xKe=r(I6e," (Hubert model)"),I6e.forEach(t),$Ke=i(L),xm=n(L,"LI",{});var q6e=s(xm);une=n(q6e,"STRONG",{});var Mtt=s(une);kKe=r(Mtt,"ibert"),Mtt.forEach(t),SKe=r(q6e," \u2014 "),yR=n(q6e,"A",{href:!0});var Ett=s(yR);RKe=r(Ett,"IBertConfig"),Ett.forEach(t),PKe=r(q6e," (I-BERT model)"),q6e.forEach(t),BKe=i(L),$m=n(L,"LI",{});var j6e=s($m);bne=n(j6e,"STRONG",{});var Ctt=s(bne);NKe=r(Ctt,"imagegpt"),Ctt.forEach(t),IKe=r(j6e," \u2014 "),xR=n(j6e,"A",{href:!0});var wtt=s(xR);qKe=r(wtt,"ImageGPTConfig"),wtt.forEach(t),jKe=r(j6e," (ImageGPT model)"),j6e.forEach(t),DKe=i(L),km=n(L,"LI",{});var D6e=s(km);vne=n(D6e,"STRONG",{});var Att=s(vne);GKe=r(Att,"layoutlm"),Att.forEach(t),OKe=r(D6e," \u2014 "),$R=n(D6e,"A",{href:!0});var Ltt=s($R);VKe=r(Ltt,"LayoutLMConfig"),Ltt.forEach(t),XKe=r(D6e," (LayoutLM model)"),D6e.forEach(t),zKe=i(L),Sm=n(L,"LI",{});var G6e=s(Sm);Fne=n(G6e,"STRONG",{});var ytt=s(Fne);QKe=r(ytt,"layoutlmv2"),ytt.forEach(t),WKe=r(G6e," \u2014 "),kR=n(G6e,"A",{href:!0});var xtt=s(kR);HKe=r(xtt,"LayoutLMv2Config"),xtt.forEach(t),UKe=r(G6e," (LayoutLMv2 model)"),G6e.forEach(t),JKe=i(L),Rm=n(L,"LI",{});var O6e=s(Rm);Tne=n(O6e,"STRONG",{});var $tt=s(Tne);YKe=r($tt,"layoutlmv3"),$tt.forEach(t),KKe=r(O6e," \u2014 "),SR=n(O6e,"A",{href:!0});var ktt=s(SR);ZKe=r(ktt,"LayoutLMv3Config"),ktt.forEach(t),eZe=r(O6e," (LayoutLMv3 model)"),O6e.forEach(t),oZe=i(L),Pm=n(L,"LI",{});var V6e=s(Pm);Mne=n(V6e,"STRONG",{});var Stt=s(Mne);rZe=r(Stt,"led"),Stt.forEach(t),tZe=r(V6e," \u2014 "),RR=n(V6e,"A",{href:!0});var Rtt=s(RR);aZe=r(Rtt,"LEDConfig"),Rtt.forEach(t),nZe=r(V6e," (LED model)"),V6e.forEach(t),sZe=i(L),Bm=n(L,"LI",{});var X6e=s(Bm);Ene=n(X6e,"STRONG",{});var Ptt=s(Ene);lZe=r(Ptt,"levit"),Ptt.forEach(t),iZe=r(X6e," \u2014 "),PR=n(X6e,"A",{href:!0});var Btt=s(PR);dZe=r(Btt,"LevitConfig"),Btt.forEach(t),cZe=r(X6e," (LeViT model)"),X6e.forEach(t),fZe=i(L),Nm=n(L,"LI",{});var z6e=s(Nm);Cne=n(z6e,"STRONG",{});var Ntt=s(Cne);mZe=r(Ntt,"longformer"),Ntt.forEach(t),gZe=r(z6e," \u2014 "),BR=n(z6e,"A",{href:!0});var Itt=s(BR);hZe=r(Itt,"LongformerConfig"),Itt.forEach(t),pZe=r(z6e," (Longformer model)"),z6e.forEach(t),_Ze=i(L),Im=n(L,"LI",{});var Q6e=s(Im);wne=n(Q6e,"STRONG",{});var qtt=s(wne);uZe=r(qtt,"longt5"),qtt.forEach(t),bZe=r(Q6e," \u2014 "),NR=n(Q6e,"A",{href:!0});var jtt=s(NR);vZe=r(jtt,"LongT5Config"),jtt.forEach(t),FZe=r(Q6e," (LongT5 model)"),Q6e.forEach(t),TZe=i(L),qm=n(L,"LI",{});var W6e=s(qm);Ane=n(W6e,"STRONG",{});var Dtt=s(Ane);MZe=r(Dtt,"luke"),Dtt.forEach(t),EZe=r(W6e," \u2014 "),IR=n(W6e,"A",{href:!0});var Gtt=s(IR);CZe=r(Gtt,"LukeConfig"),Gtt.forEach(t),wZe=r(W6e," (LUKE model)"),W6e.forEach(t),AZe=i(L),jm=n(L,"LI",{});var H6e=s(jm);Lne=n(H6e,"STRONG",{});var Ott=s(Lne);LZe=r(Ott,"lxmert"),Ott.forEach(t),yZe=r(H6e," \u2014 "),qR=n(H6e,"A",{href:!0});var Vtt=s(qR);xZe=r(Vtt,"LxmertConfig"),Vtt.forEach(t),$Ze=r(H6e," (LXMERT model)"),H6e.forEach(t),kZe=i(L),Dm=n(L,"LI",{});var U6e=s(Dm);yne=n(U6e,"STRONG",{});var Xtt=s(yne);SZe=r(Xtt,"m2m_100"),Xtt.forEach(t),RZe=r(U6e," \u2014 "),jR=n(U6e,"A",{href:!0});var ztt=s(jR);PZe=r(ztt,"M2M100Config"),ztt.forEach(t),BZe=r(U6e," (M2M100 model)"),U6e.forEach(t),NZe=i(L),Gm=n(L,"LI",{});var J6e=s(Gm);xne=n(J6e,"STRONG",{});var Qtt=s(xne);IZe=r(Qtt,"marian"),Qtt.forEach(t),qZe=r(J6e," \u2014 "),DR=n(J6e,"A",{href:!0});var Wtt=s(DR);jZe=r(Wtt,"MarianConfig"),Wtt.forEach(t),DZe=r(J6e," (Marian model)"),J6e.forEach(t),GZe=i(L),Om=n(L,"LI",{});var Y6e=s(Om);$ne=n(Y6e,"STRONG",{});var Htt=s($ne);OZe=r(Htt,"maskformer"),Htt.forEach(t),VZe=r(Y6e," \u2014 "),GR=n(Y6e,"A",{href:!0});var Utt=s(GR);XZe=r(Utt,"MaskFormerConfig"),Utt.forEach(t),zZe=r(Y6e," (MaskFormer model)"),Y6e.forEach(t),QZe=i(L),Vm=n(L,"LI",{});var K6e=s(Vm);kne=n(K6e,"STRONG",{});var Jtt=s(kne);WZe=r(Jtt,"mbart"),Jtt.forEach(t),HZe=r(K6e," \u2014 "),OR=n(K6e,"A",{href:!0});var Ytt=s(OR);UZe=r(Ytt,"MBartConfig"),Ytt.forEach(t),JZe=r(K6e," (mBART model)"),K6e.forEach(t),YZe=i(L),Xm=n(L,"LI",{});var Z6e=s(Xm);Sne=n(Z6e,"STRONG",{});var Ktt=s(Sne);KZe=r(Ktt,"mctct"),Ktt.forEach(t),ZZe=r(Z6e," \u2014 "),VR=n(Z6e,"A",{href:!0});var Ztt=s(VR);eeo=r(Ztt,"MCTCTConfig"),Ztt.forEach(t),oeo=r(Z6e," (M-CTC-T model)"),Z6e.forEach(t),reo=i(L),zm=n(L,"LI",{});var e7e=s(zm);Rne=n(e7e,"STRONG",{});var eat=s(Rne);teo=r(eat,"megatron-bert"),eat.forEach(t),aeo=r(e7e," \u2014 "),XR=n(e7e,"A",{href:!0});var oat=s(XR);neo=r(oat,"MegatronBertConfig"),oat.forEach(t),seo=r(e7e," (Megatron-BERT model)"),e7e.forEach(t),leo=i(L),Qm=n(L,"LI",{});var o7e=s(Qm);Pne=n(o7e,"STRONG",{});var rat=s(Pne);ieo=r(rat,"mobilebert"),rat.forEach(t),deo=r(o7e," \u2014 "),zR=n(o7e,"A",{href:!0});var tat=s(zR);ceo=r(tat,"MobileBertConfig"),tat.forEach(t),feo=r(o7e," (MobileBERT model)"),o7e.forEach(t),meo=i(L),Wm=n(L,"LI",{});var r7e=s(Wm);Bne=n(r7e,"STRONG",{});var aat=s(Bne);geo=r(aat,"mobilevit"),aat.forEach(t),heo=r(r7e," \u2014 "),QR=n(r7e,"A",{href:!0});var nat=s(QR);peo=r(nat,"MobileViTConfig"),nat.forEach(t),_eo=r(r7e," (MobileViT model)"),r7e.forEach(t),ueo=i(L),Hm=n(L,"LI",{});var t7e=s(Hm);Nne=n(t7e,"STRONG",{});var sat=s(Nne);beo=r(sat,"mpnet"),sat.forEach(t),veo=r(t7e," \u2014 "),WR=n(t7e,"A",{href:!0});var lat=s(WR);Feo=r(lat,"MPNetConfig"),lat.forEach(t),Teo=r(t7e," (MPNet model)"),t7e.forEach(t),Meo=i(L),Um=n(L,"LI",{});var a7e=s(Um);Ine=n(a7e,"STRONG",{});var iat=s(Ine);Eeo=r(iat,"mt5"),iat.forEach(t),Ceo=r(a7e," \u2014 "),HR=n(a7e,"A",{href:!0});var dat=s(HR);weo=r(dat,"MT5Config"),dat.forEach(t),Aeo=r(a7e," (MT5 model)"),a7e.forEach(t),Leo=i(L),Jm=n(L,"LI",{});var n7e=s(Jm);qne=n(n7e,"STRONG",{});var cat=s(qne);yeo=r(cat,"mvp"),cat.forEach(t),xeo=r(n7e," \u2014 "),UR=n(n7e,"A",{href:!0});var fat=s(UR);$eo=r(fat,"MvpConfig"),fat.forEach(t),keo=r(n7e," (MVP model)"),n7e.forEach(t),Seo=i(L),Ym=n(L,"LI",{});var s7e=s(Ym);jne=n(s7e,"STRONG",{});var mat=s(jne);Reo=r(mat,"nezha"),mat.forEach(t),Peo=r(s7e," \u2014 "),JR=n(s7e,"A",{href:!0});var gat=s(JR);Beo=r(gat,"NezhaConfig"),gat.forEach(t),Neo=r(s7e," (Nezha model)"),s7e.forEach(t),Ieo=i(L),Km=n(L,"LI",{});var l7e=s(Km);Dne=n(l7e,"STRONG",{});var hat=s(Dne);qeo=r(hat,"nystromformer"),hat.forEach(t),jeo=r(l7e," \u2014 "),YR=n(l7e,"A",{href:!0});var pat=s(YR);Deo=r(pat,"NystromformerConfig"),pat.forEach(t),Geo=r(l7e," (Nystr\xF6mformer model)"),l7e.forEach(t),Oeo=i(L),Zm=n(L,"LI",{});var i7e=s(Zm);Gne=n(i7e,"STRONG",{});var _at=s(Gne);Veo=r(_at,"openai-gpt"),_at.forEach(t),Xeo=r(i7e," \u2014 "),KR=n(i7e,"A",{href:!0});var uat=s(KR);zeo=r(uat,"OpenAIGPTConfig"),uat.forEach(t),Qeo=r(i7e," (OpenAI GPT model)"),i7e.forEach(t),Weo=i(L),eg=n(L,"LI",{});var d7e=s(eg);One=n(d7e,"STRONG",{});var bat=s(One);Heo=r(bat,"opt"),bat.forEach(t),Ueo=r(d7e," \u2014 "),ZR=n(d7e,"A",{href:!0});var vat=s(ZR);Jeo=r(vat,"OPTConfig"),vat.forEach(t),Yeo=r(d7e," (OPT model)"),d7e.forEach(t),Keo=i(L),og=n(L,"LI",{});var c7e=s(og);Vne=n(c7e,"STRONG",{});var Fat=s(Vne);Zeo=r(Fat,"pegasus"),Fat.forEach(t),eoo=r(c7e," \u2014 "),eP=n(c7e,"A",{href:!0});var Tat=s(eP);ooo=r(Tat,"PegasusConfig"),Tat.forEach(t),roo=r(c7e," (Pegasus model)"),c7e.forEach(t),too=i(L),rg=n(L,"LI",{});var f7e=s(rg);Xne=n(f7e,"STRONG",{});var Mat=s(Xne);aoo=r(Mat,"perceiver"),Mat.forEach(t),noo=r(f7e," \u2014 "),oP=n(f7e,"A",{href:!0});var Eat=s(oP);soo=r(Eat,"PerceiverConfig"),Eat.forEach(t),loo=r(f7e," (Perceiver model)"),f7e.forEach(t),ioo=i(L),tg=n(L,"LI",{});var m7e=s(tg);zne=n(m7e,"STRONG",{});var Cat=s(zne);doo=r(Cat,"plbart"),Cat.forEach(t),coo=r(m7e," \u2014 "),rP=n(m7e,"A",{href:!0});var wat=s(rP);foo=r(wat,"PLBartConfig"),wat.forEach(t),moo=r(m7e," (PLBart model)"),m7e.forEach(t),goo=i(L),ag=n(L,"LI",{});var g7e=s(ag);Qne=n(g7e,"STRONG",{});var Aat=s(Qne);hoo=r(Aat,"poolformer"),Aat.forEach(t),poo=r(g7e," \u2014 "),tP=n(g7e,"A",{href:!0});var Lat=s(tP);_oo=r(Lat,"PoolFormerConfig"),Lat.forEach(t),uoo=r(g7e," (PoolFormer model)"),g7e.forEach(t),boo=i(L),ng=n(L,"LI",{});var h7e=s(ng);Wne=n(h7e,"STRONG",{});var yat=s(Wne);voo=r(yat,"prophetnet"),yat.forEach(t),Foo=r(h7e," \u2014 "),aP=n(h7e,"A",{href:!0});var xat=s(aP);Too=r(xat,"ProphetNetConfig"),xat.forEach(t),Moo=r(h7e," (ProphetNet model)"),h7e.forEach(t),Eoo=i(L),sg=n(L,"LI",{});var p7e=s(sg);Hne=n(p7e,"STRONG",{});var $at=s(Hne);Coo=r($at,"qdqbert"),$at.forEach(t),woo=r(p7e," \u2014 "),nP=n(p7e,"A",{href:!0});var kat=s(nP);Aoo=r(kat,"QDQBertConfig"),kat.forEach(t),Loo=r(p7e," (QDQBert model)"),p7e.forEach(t),yoo=i(L),lg=n(L,"LI",{});var _7e=s(lg);Une=n(_7e,"STRONG",{});var Sat=s(Une);xoo=r(Sat,"rag"),Sat.forEach(t),$oo=r(_7e," \u2014 "),sP=n(_7e,"A",{href:!0});var Rat=s(sP);koo=r(Rat,"RagConfig"),Rat.forEach(t),Soo=r(_7e," (RAG model)"),_7e.forEach(t),Roo=i(L),ig=n(L,"LI",{});var u7e=s(ig);Jne=n(u7e,"STRONG",{});var Pat=s(Jne);Poo=r(Pat,"realm"),Pat.forEach(t),Boo=r(u7e," \u2014 "),lP=n(u7e,"A",{href:!0});var Bat=s(lP);Noo=r(Bat,"RealmConfig"),Bat.forEach(t),Ioo=r(u7e," (REALM model)"),u7e.forEach(t),qoo=i(L),dg=n(L,"LI",{});var b7e=s(dg);Yne=n(b7e,"STRONG",{});var Nat=s(Yne);joo=r(Nat,"reformer"),Nat.forEach(t),Doo=r(b7e," \u2014 "),iP=n(b7e,"A",{href:!0});var Iat=s(iP);Goo=r(Iat,"ReformerConfig"),Iat.forEach(t),Ooo=r(b7e," (Reformer model)"),b7e.forEach(t),Voo=i(L),cg=n(L,"LI",{});var v7e=s(cg);Kne=n(v7e,"STRONG",{});var qat=s(Kne);Xoo=r(qat,"regnet"),qat.forEach(t),zoo=r(v7e," \u2014 "),dP=n(v7e,"A",{href:!0});var jat=s(dP);Qoo=r(jat,"RegNetConfig"),jat.forEach(t),Woo=r(v7e," (RegNet model)"),v7e.forEach(t),Hoo=i(L),fg=n(L,"LI",{});var F7e=s(fg);Zne=n(F7e,"STRONG",{});var Dat=s(Zne);Uoo=r(Dat,"rembert"),Dat.forEach(t),Joo=r(F7e," \u2014 "),cP=n(F7e,"A",{href:!0});var Gat=s(cP);Yoo=r(Gat,"RemBertConfig"),Gat.forEach(t),Koo=r(F7e," (RemBERT model)"),F7e.forEach(t),Zoo=i(L),mg=n(L,"LI",{});var T7e=s(mg);ese=n(T7e,"STRONG",{});var Oat=s(ese);ero=r(Oat,"resnet"),Oat.forEach(t),oro=r(T7e," \u2014 "),fP=n(T7e,"A",{href:!0});var Vat=s(fP);rro=r(Vat,"ResNetConfig"),Vat.forEach(t),tro=r(T7e," (ResNet model)"),T7e.forEach(t),aro=i(L),gg=n(L,"LI",{});var M7e=s(gg);ose=n(M7e,"STRONG",{});var Xat=s(ose);nro=r(Xat,"retribert"),Xat.forEach(t),sro=r(M7e," \u2014 "),mP=n(M7e,"A",{href:!0});var zat=s(mP);lro=r(zat,"RetriBertConfig"),zat.forEach(t),iro=r(M7e," (RetriBERT model)"),M7e.forEach(t),dro=i(L),hg=n(L,"LI",{});var E7e=s(hg);rse=n(E7e,"STRONG",{});var Qat=s(rse);cro=r(Qat,"roberta"),Qat.forEach(t),fro=r(E7e," \u2014 "),gP=n(E7e,"A",{href:!0});var Wat=s(gP);mro=r(Wat,"RobertaConfig"),Wat.forEach(t),gro=r(E7e," (RoBERTa model)"),E7e.forEach(t),hro=i(L),pg=n(L,"LI",{});var C7e=s(pg);tse=n(C7e,"STRONG",{});var Hat=s(tse);pro=r(Hat,"roformer"),Hat.forEach(t),_ro=r(C7e," \u2014 "),hP=n(C7e,"A",{href:!0});var Uat=s(hP);uro=r(Uat,"RoFormerConfig"),Uat.forEach(t),bro=r(C7e," (RoFormer model)"),C7e.forEach(t),vro=i(L),_g=n(L,"LI",{});var w7e=s(_g);ase=n(w7e,"STRONG",{});var Jat=s(ase);Fro=r(Jat,"segformer"),Jat.forEach(t),Tro=r(w7e," \u2014 "),pP=n(w7e,"A",{href:!0});var Yat=s(pP);Mro=r(Yat,"SegformerConfig"),Yat.forEach(t),Ero=r(w7e," (SegFormer model)"),w7e.forEach(t),Cro=i(L),ug=n(L,"LI",{});var A7e=s(ug);nse=n(A7e,"STRONG",{});var Kat=s(nse);wro=r(Kat,"sew"),Kat.forEach(t),Aro=r(A7e," \u2014 "),_P=n(A7e,"A",{href:!0});var Zat=s(_P);Lro=r(Zat,"SEWConfig"),Zat.forEach(t),yro=r(A7e," (SEW model)"),A7e.forEach(t),xro=i(L),bg=n(L,"LI",{});var L7e=s(bg);sse=n(L7e,"STRONG",{});var ent=s(sse);$ro=r(ent,"sew-d"),ent.forEach(t),kro=r(L7e," \u2014 "),uP=n(L7e,"A",{href:!0});var ont=s(uP);Sro=r(ont,"SEWDConfig"),ont.forEach(t),Rro=r(L7e," (SEW-D model)"),L7e.forEach(t),Pro=i(L),vg=n(L,"LI",{});var y7e=s(vg);lse=n(y7e,"STRONG",{});var rnt=s(lse);Bro=r(rnt,"speech-encoder-decoder"),rnt.forEach(t),Nro=r(y7e," \u2014 "),bP=n(y7e,"A",{href:!0});var tnt=s(bP);Iro=r(tnt,"SpeechEncoderDecoderConfig"),tnt.forEach(t),qro=r(y7e," (Speech Encoder decoder model)"),y7e.forEach(t),jro=i(L),Fg=n(L,"LI",{});var x7e=s(Fg);ise=n(x7e,"STRONG",{});var ant=s(ise);Dro=r(ant,"speech_to_text"),ant.forEach(t),Gro=r(x7e," \u2014 "),vP=n(x7e,"A",{href:!0});var nnt=s(vP);Oro=r(nnt,"Speech2TextConfig"),nnt.forEach(t),Vro=r(x7e," (Speech2Text model)"),x7e.forEach(t),Xro=i(L),Tg=n(L,"LI",{});var $7e=s(Tg);dse=n($7e,"STRONG",{});var snt=s(dse);zro=r(snt,"speech_to_text_2"),snt.forEach(t),Qro=r($7e," \u2014 "),FP=n($7e,"A",{href:!0});var lnt=s(FP);Wro=r(lnt,"Speech2Text2Config"),lnt.forEach(t),Hro=r($7e," (Speech2Text2 model)"),$7e.forEach(t),Uro=i(L),Mg=n(L,"LI",{});var k7e=s(Mg);cse=n(k7e,"STRONG",{});var int=s(cse);Jro=r(int,"splinter"),int.forEach(t),Yro=r(k7e," \u2014 "),TP=n(k7e,"A",{href:!0});var dnt=s(TP);Kro=r(dnt,"SplinterConfig"),dnt.forEach(t),Zro=r(k7e," (Splinter model)"),k7e.forEach(t),eto=i(L),Eg=n(L,"LI",{});var S7e=s(Eg);fse=n(S7e,"STRONG",{});var cnt=s(fse);oto=r(cnt,"squeezebert"),cnt.forEach(t),rto=r(S7e," \u2014 "),MP=n(S7e,"A",{href:!0});var fnt=s(MP);tto=r(fnt,"SqueezeBertConfig"),fnt.forEach(t),ato=r(S7e," (SqueezeBERT model)"),S7e.forEach(t),nto=i(L),Cg=n(L,"LI",{});var R7e=s(Cg);mse=n(R7e,"STRONG",{});var mnt=s(mse);sto=r(mnt,"swin"),mnt.forEach(t),lto=r(R7e," \u2014 "),EP=n(R7e,"A",{href:!0});var gnt=s(EP);ito=r(gnt,"SwinConfig"),gnt.forEach(t),dto=r(R7e," (Swin Transformer model)"),R7e.forEach(t),cto=i(L),wg=n(L,"LI",{});var P7e=s(wg);gse=n(P7e,"STRONG",{});var hnt=s(gse);fto=r(hnt,"t5"),hnt.forEach(t),mto=r(P7e," \u2014 "),CP=n(P7e,"A",{href:!0});var pnt=s(CP);gto=r(pnt,"T5Config"),pnt.forEach(t),hto=r(P7e," (T5 model)"),P7e.forEach(t),pto=i(L),Ag=n(L,"LI",{});var B7e=s(Ag);hse=n(B7e,"STRONG",{});var _nt=s(hse);_to=r(_nt,"tapas"),_nt.forEach(t),uto=r(B7e," \u2014 "),wP=n(B7e,"A",{href:!0});var unt=s(wP);bto=r(unt,"TapasConfig"),unt.forEach(t),vto=r(B7e," (TAPAS model)"),B7e.forEach(t),Fto=i(L),Lg=n(L,"LI",{});var N7e=s(Lg);pse=n(N7e,"STRONG",{});var bnt=s(pse);Tto=r(bnt,"trajectory_transformer"),bnt.forEach(t),Mto=r(N7e," \u2014 "),AP=n(N7e,"A",{href:!0});var vnt=s(AP);Eto=r(vnt,"TrajectoryTransformerConfig"),vnt.forEach(t),Cto=r(N7e," (Trajectory Transformer model)"),N7e.forEach(t),wto=i(L),yg=n(L,"LI",{});var I7e=s(yg);_se=n(I7e,"STRONG",{});var Fnt=s(_se);Ato=r(Fnt,"transfo-xl"),Fnt.forEach(t),Lto=r(I7e," \u2014 "),LP=n(I7e,"A",{href:!0});var Tnt=s(LP);yto=r(Tnt,"TransfoXLConfig"),Tnt.forEach(t),xto=r(I7e," (Transformer-XL model)"),I7e.forEach(t),$to=i(L),xg=n(L,"LI",{});var q7e=s(xg);use=n(q7e,"STRONG",{});var Mnt=s(use);kto=r(Mnt,"trocr"),Mnt.forEach(t),Sto=r(q7e," \u2014 "),yP=n(q7e,"A",{href:!0});var Ent=s(yP);Rto=r(Ent,"TrOCRConfig"),Ent.forEach(t),Pto=r(q7e," (TrOCR model)"),q7e.forEach(t),Bto=i(L),$g=n(L,"LI",{});var j7e=s($g);bse=n(j7e,"STRONG",{});var Cnt=s(bse);Nto=r(Cnt,"unispeech"),Cnt.forEach(t),Ito=r(j7e," \u2014 "),xP=n(j7e,"A",{href:!0});var wnt=s(xP);qto=r(wnt,"UniSpeechConfig"),wnt.forEach(t),jto=r(j7e," (UniSpeech model)"),j7e.forEach(t),Dto=i(L),kg=n(L,"LI",{});var D7e=s(kg);vse=n(D7e,"STRONG",{});var Ant=s(vse);Gto=r(Ant,"unispeech-sat"),Ant.forEach(t),Oto=r(D7e," \u2014 "),$P=n(D7e,"A",{href:!0});var Lnt=s($P);Vto=r(Lnt,"UniSpeechSatConfig"),Lnt.forEach(t),Xto=r(D7e," (UniSpeechSat model)"),D7e.forEach(t),zto=i(L),Sg=n(L,"LI",{});var G7e=s(Sg);Fse=n(G7e,"STRONG",{});var ynt=s(Fse);Qto=r(ynt,"van"),ynt.forEach(t),Wto=r(G7e," \u2014 "),kP=n(G7e,"A",{href:!0});var xnt=s(kP);Hto=r(xnt,"VanConfig"),xnt.forEach(t),Uto=r(G7e," (VAN model)"),G7e.forEach(t),Jto=i(L),Rg=n(L,"LI",{});var O7e=s(Rg);Tse=n(O7e,"STRONG",{});var $nt=s(Tse);Yto=r($nt,"vilt"),$nt.forEach(t),Kto=r(O7e," \u2014 "),SP=n(O7e,"A",{href:!0});var knt=s(SP);Zto=r(knt,"ViltConfig"),knt.forEach(t),eao=r(O7e," (ViLT model)"),O7e.forEach(t),oao=i(L),Pg=n(L,"LI",{});var V7e=s(Pg);Mse=n(V7e,"STRONG",{});var Snt=s(Mse);rao=r(Snt,"vision-encoder-decoder"),Snt.forEach(t),tao=r(V7e," \u2014 "),RP=n(V7e,"A",{href:!0});var Rnt=s(RP);aao=r(Rnt,"VisionEncoderDecoderConfig"),Rnt.forEach(t),nao=r(V7e," (Vision Encoder decoder model)"),V7e.forEach(t),sao=i(L),Bg=n(L,"LI",{});var X7e=s(Bg);Ese=n(X7e,"STRONG",{});var Pnt=s(Ese);lao=r(Pnt,"vision-text-dual-encoder"),Pnt.forEach(t),iao=r(X7e," \u2014 "),PP=n(X7e,"A",{href:!0});var Bnt=s(PP);dao=r(Bnt,"VisionTextDualEncoderConfig"),Bnt.forEach(t),cao=r(X7e," (VisionTextDualEncoder model)"),X7e.forEach(t),fao=i(L),Ng=n(L,"LI",{});var z7e=s(Ng);Cse=n(z7e,"STRONG",{});var Nnt=s(Cse);mao=r(Nnt,"visual_bert"),Nnt.forEach(t),gao=r(z7e," \u2014 "),BP=n(z7e,"A",{href:!0});var Int=s(BP);hao=r(Int,"VisualBertConfig"),Int.forEach(t),pao=r(z7e," (VisualBERT model)"),z7e.forEach(t),_ao=i(L),Ig=n(L,"LI",{});var Q7e=s(Ig);wse=n(Q7e,"STRONG",{});var qnt=s(wse);uao=r(qnt,"vit"),qnt.forEach(t),bao=r(Q7e," \u2014 "),NP=n(Q7e,"A",{href:!0});var jnt=s(NP);vao=r(jnt,"ViTConfig"),jnt.forEach(t),Fao=r(Q7e," (ViT model)"),Q7e.forEach(t),Tao=i(L),qg=n(L,"LI",{});var W7e=s(qg);Ase=n(W7e,"STRONG",{});var Dnt=s(Ase);Mao=r(Dnt,"vit_mae"),Dnt.forEach(t),Eao=r(W7e," \u2014 "),IP=n(W7e,"A",{href:!0});var Gnt=s(IP);Cao=r(Gnt,"ViTMAEConfig"),Gnt.forEach(t),wao=r(W7e," (ViTMAE model)"),W7e.forEach(t),Aao=i(L),jg=n(L,"LI",{});var H7e=s(jg);Lse=n(H7e,"STRONG",{});var Ont=s(Lse);Lao=r(Ont,"wav2vec2"),Ont.forEach(t),yao=r(H7e," \u2014 "),qP=n(H7e,"A",{href:!0});var Vnt=s(qP);xao=r(Vnt,"Wav2Vec2Config"),Vnt.forEach(t),$ao=r(H7e," (Wav2Vec2 model)"),H7e.forEach(t),kao=i(L),Dg=n(L,"LI",{});var U7e=s(Dg);yse=n(U7e,"STRONG",{});var Xnt=s(yse);Sao=r(Xnt,"wav2vec2-conformer"),Xnt.forEach(t),Rao=r(U7e," \u2014 "),jP=n(U7e,"A",{href:!0});var znt=s(jP);Pao=r(znt,"Wav2Vec2ConformerConfig"),znt.forEach(t),Bao=r(U7e," (Wav2Vec2-Conformer model)"),U7e.forEach(t),Nao=i(L),Gg=n(L,"LI",{});var J7e=s(Gg);xse=n(J7e,"STRONG",{});var Qnt=s(xse);Iao=r(Qnt,"wavlm"),Qnt.forEach(t),qao=r(J7e," \u2014 "),DP=n(J7e,"A",{href:!0});var Wnt=s(DP);jao=r(Wnt,"WavLMConfig"),Wnt.forEach(t),Dao=r(J7e," (WavLM model)"),J7e.forEach(t),Gao=i(L),Og=n(L,"LI",{});var Y7e=s(Og);$se=n(Y7e,"STRONG",{});var Hnt=s($se);Oao=r(Hnt,"xglm"),Hnt.forEach(t),Vao=r(Y7e," \u2014 "),GP=n(Y7e,"A",{href:!0});var Unt=s(GP);Xao=r(Unt,"XGLMConfig"),Unt.forEach(t),zao=r(Y7e," (XGLM model)"),Y7e.forEach(t),Qao=i(L),Vg=n(L,"LI",{});var K7e=s(Vg);kse=n(K7e,"STRONG",{});var Jnt=s(kse);Wao=r(Jnt,"xlm"),Jnt.forEach(t),Hao=r(K7e," \u2014 "),OP=n(K7e,"A",{href:!0});var Ynt=s(OP);Uao=r(Ynt,"XLMConfig"),Ynt.forEach(t),Jao=r(K7e," (XLM model)"),K7e.forEach(t),Yao=i(L),Xg=n(L,"LI",{});var Z7e=s(Xg);Sse=n(Z7e,"STRONG",{});var Knt=s(Sse);Kao=r(Knt,"xlm-prophetnet"),Knt.forEach(t),Zao=r(Z7e," \u2014 "),VP=n(Z7e,"A",{href:!0});var Znt=s(VP);eno=r(Znt,"XLMProphetNetConfig"),Znt.forEach(t),ono=r(Z7e," (XLM-ProphetNet model)"),Z7e.forEach(t),rno=i(L),zg=n(L,"LI",{});var eLe=s(zg);Rse=n(eLe,"STRONG",{});var est=s(Rse);tno=r(est,"xlm-roberta"),est.forEach(t),ano=r(eLe," \u2014 "),XP=n(eLe,"A",{href:!0});var ost=s(XP);nno=r(ost,"XLMRobertaConfig"),ost.forEach(t),sno=r(eLe," (XLM-RoBERTa model)"),eLe.forEach(t),lno=i(L),Qg=n(L,"LI",{});var oLe=s(Qg);Pse=n(oLe,"STRONG",{});var rst=s(Pse);ino=r(rst,"xlm-roberta-xl"),rst.forEach(t),dno=r(oLe," \u2014 "),zP=n(oLe,"A",{href:!0});var tst=s(zP);cno=r(tst,"XLMRobertaXLConfig"),tst.forEach(t),fno=r(oLe," (XLM-RoBERTa-XL model)"),oLe.forEach(t),mno=i(L),Wg=n(L,"LI",{});var rLe=s(Wg);Bse=n(rLe,"STRONG",{});var ast=s(Bse);gno=r(ast,"xlnet"),ast.forEach(t),hno=r(rLe," \u2014 "),QP=n(rLe,"A",{href:!0});var nst=s(QP);pno=r(nst,"XLNetConfig"),nst.forEach(t),_no=r(rLe," (XLNet model)"),rLe.forEach(t),uno=i(L),Hg=n(L,"LI",{});var tLe=s(Hg);Nse=n(tLe,"STRONG",{});var sst=s(Nse);bno=r(sst,"yolos"),sst.forEach(t),vno=r(tLe," \u2014 "),WP=n(tLe,"A",{href:!0});var lst=s(WP);Fno=r(lst,"YolosConfig"),lst.forEach(t),Tno=r(tLe," (YOLOS model)"),tLe.forEach(t),Mno=i(L),Ug=n(L,"LI",{});var aLe=s(Ug);Ise=n(aLe,"STRONG",{});var ist=s(Ise);Eno=r(ist,"yoso"),ist.forEach(t),Cno=r(aLe," \u2014 "),HP=n(aLe,"A",{href:!0});var dst=s(HP);wno=r(dst,"YosoConfig"),dst.forEach(t),Ano=r(aLe," (YOSO model)"),aLe.forEach(t),L.forEach(t),Lno=i(nt),T(Jg.$$.fragment,nt),nt.forEach(t),yno=i(at),Yg=n(at,"DIV",{class:!0});var Hze=s(Yg);T(d7.$$.fragment,Hze),xno=i(Hze),qse=n(Hze,"P",{});var cst=s(qse);$no=r(cst,"Register a new configuration for this class."),cst.forEach(t),Hze.forEach(t),at.forEach(t),UVe=i(f),Ni=n(f,"H2",{class:!0});var Uze=s(Ni);Kg=n(Uze,"A",{id:!0,class:!0,href:!0});var fst=s(Kg);jse=n(fst,"SPAN",{});var mst=s(jse);T(c7.$$.fragment,mst),mst.forEach(t),fst.forEach(t),kno=i(Uze),Dse=n(Uze,"SPAN",{});var gst=s(Dse);Sno=r(gst,"AutoTokenizer"),gst.forEach(t),Uze.forEach(t),JVe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(f7.$$.fragment,Ys),Rno=i(Ys),m7=n(Ys,"P",{});var Jze=s(m7);Pno=r(Jze,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UP=n(Jze,"A",{href:!0});var hst=s(UP);Bno=r(hst,"AutoTokenizer.from_pretrained()"),hst.forEach(t),Nno=r(Jze," class method."),Jze.forEach(t),Ino=i(Ys),g7=n(Ys,"P",{});var Yze=s(g7);qno=r(Yze,"This class cannot be instantiated directly using "),Gse=n(Yze,"CODE",{});var pst=s(Gse);jno=r(pst,"__init__()"),pst.forEach(t),Dno=r(Yze," (throws an error)."),Yze.forEach(t),Gno=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(h7.$$.fragment,Ks),Ono=i(Ks),Ose=n(Ks,"P",{});var _st=s(Ose);Vno=r(_st,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_st.forEach(t),Xno=i(Ks),Pa=n(Ks,"P",{});var aA=s(Pa);zno=r(aA,"The tokenizer class to instantiate is selected based on the "),Vse=n(aA,"CODE",{});var ust=s(Vse);Qno=r(ust,"model_type"),ust.forEach(t),Wno=r(aA,` property of the config object (either
passed as an argument or loaded from `),Xse=n(aA,"CODE",{});var bst=s(Xse);Hno=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),Uno=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(aA,"CODE",{});var vst=s(zse);Jno=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),Yno=r(aA,":"),aA.forEach(t),Kno=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Fk=s(jn);Qse=n(Fk,"STRONG",{});var Fst=s(Qse);Zno=r(Fst,"albert"),Fst.forEach(t),eso=r(Fk," \u2014 "),JP=n(Fk,"A",{href:!0});var Tst=s(JP);oso=r(Tst,"AlbertTokenizer"),Tst.forEach(t),rso=r(Fk," or "),YP=n(Fk,"A",{href:!0});var Mst=s(YP);tso=r(Mst,"AlbertTokenizerFast"),Mst.forEach(t),aso=r(Fk," (ALBERT model)"),Fk.forEach(t),nso=i(S),Dn=n(S,"LI",{});var Tk=s(Dn);Wse=n(Tk,"STRONG",{});var Est=s(Wse);sso=r(Est,"bart"),Est.forEach(t),lso=r(Tk," \u2014 "),KP=n(Tk,"A",{href:!0});var Cst=s(KP);iso=r(Cst,"BartTokenizer"),Cst.forEach(t),dso=r(Tk," or "),ZP=n(Tk,"A",{href:!0});var wst=s(ZP);cso=r(wst,"BartTokenizerFast"),wst.forEach(t),fso=r(Tk," (BART model)"),Tk.forEach(t),mso=i(S),Gn=n(S,"LI",{});var Mk=s(Gn);Hse=n(Mk,"STRONG",{});var Ast=s(Hse);gso=r(Ast,"barthez"),Ast.forEach(t),hso=r(Mk," \u2014 "),eB=n(Mk,"A",{href:!0});var Lst=s(eB);pso=r(Lst,"BarthezTokenizer"),Lst.forEach(t),_so=r(Mk," or "),oB=n(Mk,"A",{href:!0});var yst=s(oB);uso=r(yst,"BarthezTokenizerFast"),yst.forEach(t),bso=r(Mk," (BARThez model)"),Mk.forEach(t),vso=i(S),Zg=n(S,"LI",{});var nLe=s(Zg);Use=n(nLe,"STRONG",{});var xst=s(Use);Fso=r(xst,"bartpho"),xst.forEach(t),Tso=r(nLe," \u2014 "),rB=n(nLe,"A",{href:!0});var $st=s(rB);Mso=r($st,"BartphoTokenizer"),$st.forEach(t),Eso=r(nLe," (BARTpho model)"),nLe.forEach(t),Cso=i(S),On=n(S,"LI",{});var Ek=s(On);Jse=n(Ek,"STRONG",{});var kst=s(Jse);wso=r(kst,"bert"),kst.forEach(t),Aso=r(Ek," \u2014 "),tB=n(Ek,"A",{href:!0});var Sst=s(tB);Lso=r(Sst,"BertTokenizer"),Sst.forEach(t),yso=r(Ek," or "),aB=n(Ek,"A",{href:!0});var Rst=s(aB);xso=r(Rst,"BertTokenizerFast"),Rst.forEach(t),$so=r(Ek," (BERT model)"),Ek.forEach(t),kso=i(S),eh=n(S,"LI",{});var sLe=s(eh);Yse=n(sLe,"STRONG",{});var Pst=s(Yse);Sso=r(Pst,"bert-generation"),Pst.forEach(t),Rso=r(sLe," \u2014 "),nB=n(sLe,"A",{href:!0});var Bst=s(nB);Pso=r(Bst,"BertGenerationTokenizer"),Bst.forEach(t),Bso=r(sLe," (Bert Generation model)"),sLe.forEach(t),Nso=i(S),oh=n(S,"LI",{});var lLe=s(oh);Kse=n(lLe,"STRONG",{});var Nst=s(Kse);Iso=r(Nst,"bert-japanese"),Nst.forEach(t),qso=r(lLe," \u2014 "),sB=n(lLe,"A",{href:!0});var Ist=s(sB);jso=r(Ist,"BertJapaneseTokenizer"),Ist.forEach(t),Dso=r(lLe," (BertJapanese model)"),lLe.forEach(t),Gso=i(S),rh=n(S,"LI",{});var iLe=s(rh);Zse=n(iLe,"STRONG",{});var qst=s(Zse);Oso=r(qst,"bertweet"),qst.forEach(t),Vso=r(iLe," \u2014 "),lB=n(iLe,"A",{href:!0});var jst=s(lB);Xso=r(jst,"BertweetTokenizer"),jst.forEach(t),zso=r(iLe," (BERTweet model)"),iLe.forEach(t),Qso=i(S),Vn=n(S,"LI",{});var Ck=s(Vn);ele=n(Ck,"STRONG",{});var Dst=s(ele);Wso=r(Dst,"big_bird"),Dst.forEach(t),Hso=r(Ck," \u2014 "),iB=n(Ck,"A",{href:!0});var Gst=s(iB);Uso=r(Gst,"BigBirdTokenizer"),Gst.forEach(t),Jso=r(Ck," or "),dB=n(Ck,"A",{href:!0});var Ost=s(dB);Yso=r(Ost,"BigBirdTokenizerFast"),Ost.forEach(t),Kso=r(Ck," (BigBird model)"),Ck.forEach(t),Zso=i(S),Xn=n(S,"LI",{});var wk=s(Xn);ole=n(wk,"STRONG",{});var Vst=s(ole);elo=r(Vst,"bigbird_pegasus"),Vst.forEach(t),olo=r(wk," \u2014 "),cB=n(wk,"A",{href:!0});var Xst=s(cB);rlo=r(Xst,"PegasusTokenizer"),Xst.forEach(t),tlo=r(wk," or "),fB=n(wk,"A",{href:!0});var zst=s(fB);alo=r(zst,"PegasusTokenizerFast"),zst.forEach(t),nlo=r(wk," (BigBird-Pegasus model)"),wk.forEach(t),slo=i(S),zn=n(S,"LI",{});var Ak=s(zn);rle=n(Ak,"STRONG",{});var Qst=s(rle);llo=r(Qst,"blenderbot"),Qst.forEach(t),ilo=r(Ak," \u2014 "),mB=n(Ak,"A",{href:!0});var Wst=s(mB);dlo=r(Wst,"BlenderbotTokenizer"),Wst.forEach(t),clo=r(Ak," or "),gB=n(Ak,"A",{href:!0});var Hst=s(gB);flo=r(Hst,"BlenderbotTokenizerFast"),Hst.forEach(t),mlo=r(Ak," (Blenderbot model)"),Ak.forEach(t),glo=i(S),th=n(S,"LI",{});var dLe=s(th);tle=n(dLe,"STRONG",{});var Ust=s(tle);hlo=r(Ust,"blenderbot-small"),Ust.forEach(t),plo=r(dLe," \u2014 "),hB=n(dLe,"A",{href:!0});var Jst=s(hB);_lo=r(Jst,"BlenderbotSmallTokenizer"),Jst.forEach(t),ulo=r(dLe," (BlenderbotSmall model)"),dLe.forEach(t),blo=i(S),ah=n(S,"LI",{});var cLe=s(ah);ale=n(cLe,"STRONG",{});var Yst=s(ale);vlo=r(Yst,"bloom"),Yst.forEach(t),Flo=r(cLe," \u2014 "),pB=n(cLe,"A",{href:!0});var Kst=s(pB);Tlo=r(Kst,"BloomTokenizerFast"),Kst.forEach(t),Mlo=r(cLe," (BLOOM model)"),cLe.forEach(t),Elo=i(S),nh=n(S,"LI",{});var fLe=s(nh);nle=n(fLe,"STRONG",{});var Zst=s(nle);Clo=r(Zst,"byt5"),Zst.forEach(t),wlo=r(fLe," \u2014 "),_B=n(fLe,"A",{href:!0});var elt=s(_B);Alo=r(elt,"ByT5Tokenizer"),elt.forEach(t),Llo=r(fLe," (ByT5 model)"),fLe.forEach(t),ylo=i(S),Qn=n(S,"LI",{});var Lk=s(Qn);sle=n(Lk,"STRONG",{});var olt=s(sle);xlo=r(olt,"camembert"),olt.forEach(t),$lo=r(Lk," \u2014 "),uB=n(Lk,"A",{href:!0});var rlt=s(uB);klo=r(rlt,"CamembertTokenizer"),rlt.forEach(t),Slo=r(Lk," or "),bB=n(Lk,"A",{href:!0});var tlt=s(bB);Rlo=r(tlt,"CamembertTokenizerFast"),tlt.forEach(t),Plo=r(Lk," (CamemBERT model)"),Lk.forEach(t),Blo=i(S),sh=n(S,"LI",{});var mLe=s(sh);lle=n(mLe,"STRONG",{});var alt=s(lle);Nlo=r(alt,"canine"),alt.forEach(t),Ilo=r(mLe," \u2014 "),vB=n(mLe,"A",{href:!0});var nlt=s(vB);qlo=r(nlt,"CanineTokenizer"),nlt.forEach(t),jlo=r(mLe," (CANINE model)"),mLe.forEach(t),Dlo=i(S),Wn=n(S,"LI",{});var yk=s(Wn);ile=n(yk,"STRONG",{});var slt=s(ile);Glo=r(slt,"clip"),slt.forEach(t),Olo=r(yk," \u2014 "),FB=n(yk,"A",{href:!0});var llt=s(FB);Vlo=r(llt,"CLIPTokenizer"),llt.forEach(t),Xlo=r(yk," or "),TB=n(yk,"A",{href:!0});var ilt=s(TB);zlo=r(ilt,"CLIPTokenizerFast"),ilt.forEach(t),Qlo=r(yk," (CLIP model)"),yk.forEach(t),Wlo=i(S),Hn=n(S,"LI",{});var xk=s(Hn);dle=n(xk,"STRONG",{});var dlt=s(dle);Hlo=r(dlt,"codegen"),dlt.forEach(t),Ulo=r(xk," \u2014 "),MB=n(xk,"A",{href:!0});var clt=s(MB);Jlo=r(clt,"CodeGenTokenizer"),clt.forEach(t),Ylo=r(xk," or "),EB=n(xk,"A",{href:!0});var flt=s(EB);Klo=r(flt,"CodeGenTokenizerFast"),flt.forEach(t),Zlo=r(xk," (CodeGen model)"),xk.forEach(t),eio=i(S),Un=n(S,"LI",{});var $k=s(Un);cle=n($k,"STRONG",{});var mlt=s(cle);oio=r(mlt,"convbert"),mlt.forEach(t),rio=r($k," \u2014 "),CB=n($k,"A",{href:!0});var glt=s(CB);tio=r(glt,"ConvBertTokenizer"),glt.forEach(t),aio=r($k," or "),wB=n($k,"A",{href:!0});var hlt=s(wB);nio=r(hlt,"ConvBertTokenizerFast"),hlt.forEach(t),sio=r($k," (ConvBERT model)"),$k.forEach(t),lio=i(S),Jn=n(S,"LI",{});var kk=s(Jn);fle=n(kk,"STRONG",{});var plt=s(fle);iio=r(plt,"cpm"),plt.forEach(t),dio=r(kk," \u2014 "),AB=n(kk,"A",{href:!0});var _lt=s(AB);cio=r(_lt,"CpmTokenizer"),_lt.forEach(t),fio=r(kk," or "),LB=n(kk,"A",{href:!0});var ult=s(LB);mio=r(ult,"CpmTokenizerFast"),ult.forEach(t),gio=r(kk," (CPM model)"),kk.forEach(t),hio=i(S),lh=n(S,"LI",{});var gLe=s(lh);mle=n(gLe,"STRONG",{});var blt=s(mle);pio=r(blt,"ctrl"),blt.forEach(t),_io=r(gLe," \u2014 "),yB=n(gLe,"A",{href:!0});var vlt=s(yB);uio=r(vlt,"CTRLTokenizer"),vlt.forEach(t),bio=r(gLe," (CTRL model)"),gLe.forEach(t),vio=i(S),Yn=n(S,"LI",{});var Sk=s(Yn);gle=n(Sk,"STRONG",{});var Flt=s(gle);Fio=r(Flt,"data2vec-text"),Flt.forEach(t),Tio=r(Sk," \u2014 "),xB=n(Sk,"A",{href:!0});var Tlt=s(xB);Mio=r(Tlt,"RobertaTokenizer"),Tlt.forEach(t),Eio=r(Sk," or "),$B=n(Sk,"A",{href:!0});var Mlt=s($B);Cio=r(Mlt,"RobertaTokenizerFast"),Mlt.forEach(t),wio=r(Sk," (Data2VecText model)"),Sk.forEach(t),Aio=i(S),Kn=n(S,"LI",{});var Rk=s(Kn);hle=n(Rk,"STRONG",{});var Elt=s(hle);Lio=r(Elt,"deberta"),Elt.forEach(t),yio=r(Rk," \u2014 "),kB=n(Rk,"A",{href:!0});var Clt=s(kB);xio=r(Clt,"DebertaTokenizer"),Clt.forEach(t),$io=r(Rk," or "),SB=n(Rk,"A",{href:!0});var wlt=s(SB);kio=r(wlt,"DebertaTokenizerFast"),wlt.forEach(t),Sio=r(Rk," (DeBERTa model)"),Rk.forEach(t),Rio=i(S),Zn=n(S,"LI",{});var Pk=s(Zn);ple=n(Pk,"STRONG",{});var Alt=s(ple);Pio=r(Alt,"deberta-v2"),Alt.forEach(t),Bio=r(Pk," \u2014 "),RB=n(Pk,"A",{href:!0});var Llt=s(RB);Nio=r(Llt,"DebertaV2Tokenizer"),Llt.forEach(t),Iio=r(Pk," or "),PB=n(Pk,"A",{href:!0});var ylt=s(PB);qio=r(ylt,"DebertaV2TokenizerFast"),ylt.forEach(t),jio=r(Pk," (DeBERTa-v2 model)"),Pk.forEach(t),Dio=i(S),es=n(S,"LI",{});var Bk=s(es);_le=n(Bk,"STRONG",{});var xlt=s(_le);Gio=r(xlt,"distilbert"),xlt.forEach(t),Oio=r(Bk," \u2014 "),BB=n(Bk,"A",{href:!0});var $lt=s(BB);Vio=r($lt,"DistilBertTokenizer"),$lt.forEach(t),Xio=r(Bk," or "),NB=n(Bk,"A",{href:!0});var klt=s(NB);zio=r(klt,"DistilBertTokenizerFast"),klt.forEach(t),Qio=r(Bk," (DistilBERT model)"),Bk.forEach(t),Wio=i(S),os=n(S,"LI",{});var Nk=s(os);ule=n(Nk,"STRONG",{});var Slt=s(ule);Hio=r(Slt,"dpr"),Slt.forEach(t),Uio=r(Nk," \u2014 "),IB=n(Nk,"A",{href:!0});var Rlt=s(IB);Jio=r(Rlt,"DPRQuestionEncoderTokenizer"),Rlt.forEach(t),Yio=r(Nk," or "),qB=n(Nk,"A",{href:!0});var Plt=s(qB);Kio=r(Plt,"DPRQuestionEncoderTokenizerFast"),Plt.forEach(t),Zio=r(Nk," (DPR model)"),Nk.forEach(t),edo=i(S),rs=n(S,"LI",{});var Ik=s(rs);ble=n(Ik,"STRONG",{});var Blt=s(ble);odo=r(Blt,"electra"),Blt.forEach(t),rdo=r(Ik," \u2014 "),jB=n(Ik,"A",{href:!0});var Nlt=s(jB);tdo=r(Nlt,"ElectraTokenizer"),Nlt.forEach(t),ado=r(Ik," or "),DB=n(Ik,"A",{href:!0});var Ilt=s(DB);ndo=r(Ilt,"ElectraTokenizerFast"),Ilt.forEach(t),sdo=r(Ik," (ELECTRA model)"),Ik.forEach(t),ldo=i(S),ih=n(S,"LI",{});var hLe=s(ih);vle=n(hLe,"STRONG",{});var qlt=s(vle);ido=r(qlt,"flaubert"),qlt.forEach(t),ddo=r(hLe," \u2014 "),GB=n(hLe,"A",{href:!0});var jlt=s(GB);cdo=r(jlt,"FlaubertTokenizer"),jlt.forEach(t),fdo=r(hLe," (FlauBERT model)"),hLe.forEach(t),mdo=i(S),ts=n(S,"LI",{});var qk=s(ts);Fle=n(qk,"STRONG",{});var Dlt=s(Fle);gdo=r(Dlt,"fnet"),Dlt.forEach(t),hdo=r(qk," \u2014 "),OB=n(qk,"A",{href:!0});var Glt=s(OB);pdo=r(Glt,"FNetTokenizer"),Glt.forEach(t),_do=r(qk," or "),VB=n(qk,"A",{href:!0});var Olt=s(VB);udo=r(Olt,"FNetTokenizerFast"),Olt.forEach(t),bdo=r(qk," (FNet model)"),qk.forEach(t),vdo=i(S),dh=n(S,"LI",{});var pLe=s(dh);Tle=n(pLe,"STRONG",{});var Vlt=s(Tle);Fdo=r(Vlt,"fsmt"),Vlt.forEach(t),Tdo=r(pLe," \u2014 "),XB=n(pLe,"A",{href:!0});var Xlt=s(XB);Mdo=r(Xlt,"FSMTTokenizer"),Xlt.forEach(t),Edo=r(pLe," (FairSeq Machine-Translation model)"),pLe.forEach(t),Cdo=i(S),as=n(S,"LI",{});var jk=s(as);Mle=n(jk,"STRONG",{});var zlt=s(Mle);wdo=r(zlt,"funnel"),zlt.forEach(t),Ado=r(jk," \u2014 "),zB=n(jk,"A",{href:!0});var Qlt=s(zB);Ldo=r(Qlt,"FunnelTokenizer"),Qlt.forEach(t),ydo=r(jk," or "),QB=n(jk,"A",{href:!0});var Wlt=s(QB);xdo=r(Wlt,"FunnelTokenizerFast"),Wlt.forEach(t),$do=r(jk," (Funnel Transformer model)"),jk.forEach(t),kdo=i(S),ns=n(S,"LI",{});var Dk=s(ns);Ele=n(Dk,"STRONG",{});var Hlt=s(Ele);Sdo=r(Hlt,"gpt2"),Hlt.forEach(t),Rdo=r(Dk," \u2014 "),WB=n(Dk,"A",{href:!0});var Ult=s(WB);Pdo=r(Ult,"GPT2Tokenizer"),Ult.forEach(t),Bdo=r(Dk," or "),HB=n(Dk,"A",{href:!0});var Jlt=s(HB);Ndo=r(Jlt,"GPT2TokenizerFast"),Jlt.forEach(t),Ido=r(Dk," (OpenAI GPT-2 model)"),Dk.forEach(t),qdo=i(S),ss=n(S,"LI",{});var Gk=s(ss);Cle=n(Gk,"STRONG",{});var Ylt=s(Cle);jdo=r(Ylt,"gpt_neo"),Ylt.forEach(t),Ddo=r(Gk," \u2014 "),UB=n(Gk,"A",{href:!0});var Klt=s(UB);Gdo=r(Klt,"GPT2Tokenizer"),Klt.forEach(t),Odo=r(Gk," or "),JB=n(Gk,"A",{href:!0});var Zlt=s(JB);Vdo=r(Zlt,"GPT2TokenizerFast"),Zlt.forEach(t),Xdo=r(Gk," (GPT Neo model)"),Gk.forEach(t),zdo=i(S),ch=n(S,"LI",{});var _Le=s(ch);wle=n(_Le,"STRONG",{});var eit=s(wle);Qdo=r(eit,"gpt_neox"),eit.forEach(t),Wdo=r(_Le," \u2014 "),YB=n(_Le,"A",{href:!0});var oit=s(YB);Hdo=r(oit,"GPTNeoXTokenizerFast"),oit.forEach(t),Udo=r(_Le," (GPT NeoX model)"),_Le.forEach(t),Jdo=i(S),ls=n(S,"LI",{});var Ok=s(ls);Ale=n(Ok,"STRONG",{});var rit=s(Ale);Ydo=r(rit,"gptj"),rit.forEach(t),Kdo=r(Ok," \u2014 "),KB=n(Ok,"A",{href:!0});var tit=s(KB);Zdo=r(tit,"GPT2Tokenizer"),tit.forEach(t),eco=r(Ok," or "),ZB=n(Ok,"A",{href:!0});var ait=s(ZB);oco=r(ait,"GPT2TokenizerFast"),ait.forEach(t),rco=r(Ok," (GPT-J model)"),Ok.forEach(t),tco=i(S),is=n(S,"LI",{});var Vk=s(is);Lle=n(Vk,"STRONG",{});var nit=s(Lle);aco=r(nit,"groupvit"),nit.forEach(t),nco=r(Vk," \u2014 "),eN=n(Vk,"A",{href:!0});var sit=s(eN);sco=r(sit,"CLIPTokenizer"),sit.forEach(t),lco=r(Vk," or "),oN=n(Vk,"A",{href:!0});var lit=s(oN);ico=r(lit,"CLIPTokenizerFast"),lit.forEach(t),dco=r(Vk," (GroupViT model)"),Vk.forEach(t),cco=i(S),ds=n(S,"LI",{});var Xk=s(ds);yle=n(Xk,"STRONG",{});var iit=s(yle);fco=r(iit,"herbert"),iit.forEach(t),mco=r(Xk," \u2014 "),rN=n(Xk,"A",{href:!0});var dit=s(rN);gco=r(dit,"HerbertTokenizer"),dit.forEach(t),hco=r(Xk," or "),tN=n(Xk,"A",{href:!0});var cit=s(tN);pco=r(cit,"HerbertTokenizerFast"),cit.forEach(t),_co=r(Xk," (HerBERT model)"),Xk.forEach(t),uco=i(S),fh=n(S,"LI",{});var uLe=s(fh);xle=n(uLe,"STRONG",{});var fit=s(xle);bco=r(fit,"hubert"),fit.forEach(t),vco=r(uLe," \u2014 "),aN=n(uLe,"A",{href:!0});var mit=s(aN);Fco=r(mit,"Wav2Vec2CTCTokenizer"),mit.forEach(t),Tco=r(uLe," (Hubert model)"),uLe.forEach(t),Mco=i(S),cs=n(S,"LI",{});var zk=s(cs);$le=n(zk,"STRONG",{});var git=s($le);Eco=r(git,"ibert"),git.forEach(t),Cco=r(zk," \u2014 "),nN=n(zk,"A",{href:!0});var hit=s(nN);wco=r(hit,"RobertaTokenizer"),hit.forEach(t),Aco=r(zk," or "),sN=n(zk,"A",{href:!0});var pit=s(sN);Lco=r(pit,"RobertaTokenizerFast"),pit.forEach(t),yco=r(zk," (I-BERT model)"),zk.forEach(t),xco=i(S),fs=n(S,"LI",{});var Qk=s(fs);kle=n(Qk,"STRONG",{});var _it=s(kle);$co=r(_it,"layoutlm"),_it.forEach(t),kco=r(Qk," \u2014 "),lN=n(Qk,"A",{href:!0});var uit=s(lN);Sco=r(uit,"LayoutLMTokenizer"),uit.forEach(t),Rco=r(Qk," or "),iN=n(Qk,"A",{href:!0});var bit=s(iN);Pco=r(bit,"LayoutLMTokenizerFast"),bit.forEach(t),Bco=r(Qk," (LayoutLM model)"),Qk.forEach(t),Nco=i(S),ms=n(S,"LI",{});var Wk=s(ms);Sle=n(Wk,"STRONG",{});var vit=s(Sle);Ico=r(vit,"layoutlmv2"),vit.forEach(t),qco=r(Wk," \u2014 "),dN=n(Wk,"A",{href:!0});var Fit=s(dN);jco=r(Fit,"LayoutLMv2Tokenizer"),Fit.forEach(t),Dco=r(Wk," or "),cN=n(Wk,"A",{href:!0});var Tit=s(cN);Gco=r(Tit,"LayoutLMv2TokenizerFast"),Tit.forEach(t),Oco=r(Wk," (LayoutLMv2 model)"),Wk.forEach(t),Vco=i(S),gs=n(S,"LI",{});var Hk=s(gs);Rle=n(Hk,"STRONG",{});var Mit=s(Rle);Xco=r(Mit,"layoutlmv3"),Mit.forEach(t),zco=r(Hk," \u2014 "),fN=n(Hk,"A",{href:!0});var Eit=s(fN);Qco=r(Eit,"LayoutLMv3Tokenizer"),Eit.forEach(t),Wco=r(Hk," or "),mN=n(Hk,"A",{href:!0});var Cit=s(mN);Hco=r(Cit,"LayoutLMv3TokenizerFast"),Cit.forEach(t),Uco=r(Hk," (LayoutLMv3 model)"),Hk.forEach(t),Jco=i(S),hs=n(S,"LI",{});var Uk=s(hs);Ple=n(Uk,"STRONG",{});var wit=s(Ple);Yco=r(wit,"layoutxlm"),wit.forEach(t),Kco=r(Uk," \u2014 "),gN=n(Uk,"A",{href:!0});var Ait=s(gN);Zco=r(Ait,"LayoutXLMTokenizer"),Ait.forEach(t),efo=r(Uk," or "),hN=n(Uk,"A",{href:!0});var Lit=s(hN);ofo=r(Lit,"LayoutXLMTokenizerFast"),Lit.forEach(t),rfo=r(Uk," (LayoutXLM model)"),Uk.forEach(t),tfo=i(S),ps=n(S,"LI",{});var Jk=s(ps);Ble=n(Jk,"STRONG",{});var yit=s(Ble);afo=r(yit,"led"),yit.forEach(t),nfo=r(Jk," \u2014 "),pN=n(Jk,"A",{href:!0});var xit=s(pN);sfo=r(xit,"LEDTokenizer"),xit.forEach(t),lfo=r(Jk," or "),_N=n(Jk,"A",{href:!0});var $it=s(_N);ifo=r($it,"LEDTokenizerFast"),$it.forEach(t),dfo=r(Jk," (LED model)"),Jk.forEach(t),cfo=i(S),_s=n(S,"LI",{});var Yk=s(_s);Nle=n(Yk,"STRONG",{});var kit=s(Nle);ffo=r(kit,"longformer"),kit.forEach(t),mfo=r(Yk," \u2014 "),uN=n(Yk,"A",{href:!0});var Sit=s(uN);gfo=r(Sit,"LongformerTokenizer"),Sit.forEach(t),hfo=r(Yk," or "),bN=n(Yk,"A",{href:!0});var Rit=s(bN);pfo=r(Rit,"LongformerTokenizerFast"),Rit.forEach(t),_fo=r(Yk," (Longformer model)"),Yk.forEach(t),ufo=i(S),us=n(S,"LI",{});var Kk=s(us);Ile=n(Kk,"STRONG",{});var Pit=s(Ile);bfo=r(Pit,"longt5"),Pit.forEach(t),vfo=r(Kk," \u2014 "),vN=n(Kk,"A",{href:!0});var Bit=s(vN);Ffo=r(Bit,"T5Tokenizer"),Bit.forEach(t),Tfo=r(Kk," or "),FN=n(Kk,"A",{href:!0});var Nit=s(FN);Mfo=r(Nit,"T5TokenizerFast"),Nit.forEach(t),Efo=r(Kk," (LongT5 model)"),Kk.forEach(t),Cfo=i(S),mh=n(S,"LI",{});var bLe=s(mh);qle=n(bLe,"STRONG",{});var Iit=s(qle);wfo=r(Iit,"luke"),Iit.forEach(t),Afo=r(bLe," \u2014 "),TN=n(bLe,"A",{href:!0});var qit=s(TN);Lfo=r(qit,"LukeTokenizer"),qit.forEach(t),yfo=r(bLe," (LUKE model)"),bLe.forEach(t),xfo=i(S),bs=n(S,"LI",{});var Zk=s(bs);jle=n(Zk,"STRONG",{});var jit=s(jle);$fo=r(jit,"lxmert"),jit.forEach(t),kfo=r(Zk," \u2014 "),MN=n(Zk,"A",{href:!0});var Dit=s(MN);Sfo=r(Dit,"LxmertTokenizer"),Dit.forEach(t),Rfo=r(Zk," or "),EN=n(Zk,"A",{href:!0});var Git=s(EN);Pfo=r(Git,"LxmertTokenizerFast"),Git.forEach(t),Bfo=r(Zk," (LXMERT model)"),Zk.forEach(t),Nfo=i(S),gh=n(S,"LI",{});var vLe=s(gh);Dle=n(vLe,"STRONG",{});var Oit=s(Dle);Ifo=r(Oit,"m2m_100"),Oit.forEach(t),qfo=r(vLe," \u2014 "),CN=n(vLe,"A",{href:!0});var Vit=s(CN);jfo=r(Vit,"M2M100Tokenizer"),Vit.forEach(t),Dfo=r(vLe," (M2M100 model)"),vLe.forEach(t),Gfo=i(S),hh=n(S,"LI",{});var FLe=s(hh);Gle=n(FLe,"STRONG",{});var Xit=s(Gle);Ofo=r(Xit,"marian"),Xit.forEach(t),Vfo=r(FLe," \u2014 "),wN=n(FLe,"A",{href:!0});var zit=s(wN);Xfo=r(zit,"MarianTokenizer"),zit.forEach(t),zfo=r(FLe," (Marian model)"),FLe.forEach(t),Qfo=i(S),vs=n(S,"LI",{});var eS=s(vs);Ole=n(eS,"STRONG",{});var Qit=s(Ole);Wfo=r(Qit,"mbart"),Qit.forEach(t),Hfo=r(eS," \u2014 "),AN=n(eS,"A",{href:!0});var Wit=s(AN);Ufo=r(Wit,"MBartTokenizer"),Wit.forEach(t),Jfo=r(eS," or "),LN=n(eS,"A",{href:!0});var Hit=s(LN);Yfo=r(Hit,"MBartTokenizerFast"),Hit.forEach(t),Kfo=r(eS," (mBART model)"),eS.forEach(t),Zfo=i(S),Fs=n(S,"LI",{});var oS=s(Fs);Vle=n(oS,"STRONG",{});var Uit=s(Vle);emo=r(Uit,"mbart50"),Uit.forEach(t),omo=r(oS," \u2014 "),yN=n(oS,"A",{href:!0});var Jit=s(yN);rmo=r(Jit,"MBart50Tokenizer"),Jit.forEach(t),tmo=r(oS," or "),xN=n(oS,"A",{href:!0});var Yit=s(xN);amo=r(Yit,"MBart50TokenizerFast"),Yit.forEach(t),nmo=r(oS," (mBART-50 model)"),oS.forEach(t),smo=i(S),Ts=n(S,"LI",{});var rS=s(Ts);Xle=n(rS,"STRONG",{});var Kit=s(Xle);lmo=r(Kit,"megatron-bert"),Kit.forEach(t),imo=r(rS," \u2014 "),$N=n(rS,"A",{href:!0});var Zit=s($N);dmo=r(Zit,"BertTokenizer"),Zit.forEach(t),cmo=r(rS," or "),kN=n(rS,"A",{href:!0});var edt=s(kN);fmo=r(edt,"BertTokenizerFast"),edt.forEach(t),mmo=r(rS," (Megatron-BERT model)"),rS.forEach(t),gmo=i(S),ph=n(S,"LI",{});var TLe=s(ph);zle=n(TLe,"STRONG",{});var odt=s(zle);hmo=r(odt,"mluke"),odt.forEach(t),pmo=r(TLe," \u2014 "),SN=n(TLe,"A",{href:!0});var rdt=s(SN);_mo=r(rdt,"MLukeTokenizer"),rdt.forEach(t),umo=r(TLe," (mLUKE model)"),TLe.forEach(t),bmo=i(S),Ms=n(S,"LI",{});var tS=s(Ms);Qle=n(tS,"STRONG",{});var tdt=s(Qle);vmo=r(tdt,"mobilebert"),tdt.forEach(t),Fmo=r(tS," \u2014 "),RN=n(tS,"A",{href:!0});var adt=s(RN);Tmo=r(adt,"MobileBertTokenizer"),adt.forEach(t),Mmo=r(tS," or "),PN=n(tS,"A",{href:!0});var ndt=s(PN);Emo=r(ndt,"MobileBertTokenizerFast"),ndt.forEach(t),Cmo=r(tS," (MobileBERT model)"),tS.forEach(t),wmo=i(S),Es=n(S,"LI",{});var aS=s(Es);Wle=n(aS,"STRONG",{});var sdt=s(Wle);Amo=r(sdt,"mpnet"),sdt.forEach(t),Lmo=r(aS," \u2014 "),BN=n(aS,"A",{href:!0});var ldt=s(BN);ymo=r(ldt,"MPNetTokenizer"),ldt.forEach(t),xmo=r(aS," or "),NN=n(aS,"A",{href:!0});var idt=s(NN);$mo=r(idt,"MPNetTokenizerFast"),idt.forEach(t),kmo=r(aS," (MPNet model)"),aS.forEach(t),Smo=i(S),Cs=n(S,"LI",{});var nS=s(Cs);Hle=n(nS,"STRONG",{});var ddt=s(Hle);Rmo=r(ddt,"mt5"),ddt.forEach(t),Pmo=r(nS," \u2014 "),IN=n(nS,"A",{href:!0});var cdt=s(IN);Bmo=r(cdt,"MT5Tokenizer"),cdt.forEach(t),Nmo=r(nS," or "),qN=n(nS,"A",{href:!0});var fdt=s(qN);Imo=r(fdt,"MT5TokenizerFast"),fdt.forEach(t),qmo=r(nS," (MT5 model)"),nS.forEach(t),jmo=i(S),ws=n(S,"LI",{});var sS=s(ws);Ule=n(sS,"STRONG",{});var mdt=s(Ule);Dmo=r(mdt,"mvp"),mdt.forEach(t),Gmo=r(sS," \u2014 "),jN=n(sS,"A",{href:!0});var gdt=s(jN);Omo=r(gdt,"MvpTokenizer"),gdt.forEach(t),Vmo=r(sS," or "),DN=n(sS,"A",{href:!0});var hdt=s(DN);Xmo=r(hdt,"MvpTokenizerFast"),hdt.forEach(t),zmo=r(sS," (MVP model)"),sS.forEach(t),Qmo=i(S),As=n(S,"LI",{});var lS=s(As);Jle=n(lS,"STRONG",{});var pdt=s(Jle);Wmo=r(pdt,"nezha"),pdt.forEach(t),Hmo=r(lS," \u2014 "),GN=n(lS,"A",{href:!0});var _dt=s(GN);Umo=r(_dt,"BertTokenizer"),_dt.forEach(t),Jmo=r(lS," or "),ON=n(lS,"A",{href:!0});var udt=s(ON);Ymo=r(udt,"BertTokenizerFast"),udt.forEach(t),Kmo=r(lS," (Nezha model)"),lS.forEach(t),Zmo=i(S),Ls=n(S,"LI",{});var iS=s(Ls);Yle=n(iS,"STRONG",{});var bdt=s(Yle);ego=r(bdt,"nystromformer"),bdt.forEach(t),ogo=r(iS," \u2014 "),VN=n(iS,"A",{href:!0});var vdt=s(VN);rgo=r(vdt,"AlbertTokenizer"),vdt.forEach(t),tgo=r(iS," or "),XN=n(iS,"A",{href:!0});var Fdt=s(XN);ago=r(Fdt,"AlbertTokenizerFast"),Fdt.forEach(t),ngo=r(iS," (Nystr\xF6mformer model)"),iS.forEach(t),sgo=i(S),ys=n(S,"LI",{});var dS=s(ys);Kle=n(dS,"STRONG",{});var Tdt=s(Kle);lgo=r(Tdt,"openai-gpt"),Tdt.forEach(t),igo=r(dS," \u2014 "),zN=n(dS,"A",{href:!0});var Mdt=s(zN);dgo=r(Mdt,"OpenAIGPTTokenizer"),Mdt.forEach(t),cgo=r(dS," or "),QN=n(dS,"A",{href:!0});var Edt=s(QN);fgo=r(Edt,"OpenAIGPTTokenizerFast"),Edt.forEach(t),mgo=r(dS," (OpenAI GPT model)"),dS.forEach(t),ggo=i(S),_h=n(S,"LI",{});var MLe=s(_h);Zle=n(MLe,"STRONG",{});var Cdt=s(Zle);hgo=r(Cdt,"opt"),Cdt.forEach(t),pgo=r(MLe," \u2014 "),WN=n(MLe,"A",{href:!0});var wdt=s(WN);_go=r(wdt,"GPT2Tokenizer"),wdt.forEach(t),ugo=r(MLe," (OPT model)"),MLe.forEach(t),bgo=i(S),xs=n(S,"LI",{});var cS=s(xs);eie=n(cS,"STRONG",{});var Adt=s(eie);vgo=r(Adt,"pegasus"),Adt.forEach(t),Fgo=r(cS," \u2014 "),HN=n(cS,"A",{href:!0});var Ldt=s(HN);Tgo=r(Ldt,"PegasusTokenizer"),Ldt.forEach(t),Mgo=r(cS," or "),UN=n(cS,"A",{href:!0});var ydt=s(UN);Ego=r(ydt,"PegasusTokenizerFast"),ydt.forEach(t),Cgo=r(cS," (Pegasus model)"),cS.forEach(t),wgo=i(S),uh=n(S,"LI",{});var ELe=s(uh);oie=n(ELe,"STRONG",{});var xdt=s(oie);Ago=r(xdt,"perceiver"),xdt.forEach(t),Lgo=r(ELe," \u2014 "),JN=n(ELe,"A",{href:!0});var $dt=s(JN);ygo=r($dt,"PerceiverTokenizer"),$dt.forEach(t),xgo=r(ELe," (Perceiver model)"),ELe.forEach(t),$go=i(S),bh=n(S,"LI",{});var CLe=s(bh);rie=n(CLe,"STRONG",{});var kdt=s(rie);kgo=r(kdt,"phobert"),kdt.forEach(t),Sgo=r(CLe," \u2014 "),YN=n(CLe,"A",{href:!0});var Sdt=s(YN);Rgo=r(Sdt,"PhobertTokenizer"),Sdt.forEach(t),Pgo=r(CLe," (PhoBERT model)"),CLe.forEach(t),Bgo=i(S),vh=n(S,"LI",{});var wLe=s(vh);tie=n(wLe,"STRONG",{});var Rdt=s(tie);Ngo=r(Rdt,"plbart"),Rdt.forEach(t),Igo=r(wLe," \u2014 "),KN=n(wLe,"A",{href:!0});var Pdt=s(KN);qgo=r(Pdt,"PLBartTokenizer"),Pdt.forEach(t),jgo=r(wLe," (PLBart model)"),wLe.forEach(t),Dgo=i(S),Fh=n(S,"LI",{});var ALe=s(Fh);aie=n(ALe,"STRONG",{});var Bdt=s(aie);Ggo=r(Bdt,"prophetnet"),Bdt.forEach(t),Ogo=r(ALe," \u2014 "),ZN=n(ALe,"A",{href:!0});var Ndt=s(ZN);Vgo=r(Ndt,"ProphetNetTokenizer"),Ndt.forEach(t),Xgo=r(ALe," (ProphetNet model)"),ALe.forEach(t),zgo=i(S),$s=n(S,"LI",{});var fS=s($s);nie=n(fS,"STRONG",{});var Idt=s(nie);Qgo=r(Idt,"qdqbert"),Idt.forEach(t),Wgo=r(fS," \u2014 "),eI=n(fS,"A",{href:!0});var qdt=s(eI);Hgo=r(qdt,"BertTokenizer"),qdt.forEach(t),Ugo=r(fS," or "),oI=n(fS,"A",{href:!0});var jdt=s(oI);Jgo=r(jdt,"BertTokenizerFast"),jdt.forEach(t),Ygo=r(fS," (QDQBert model)"),fS.forEach(t),Kgo=i(S),Th=n(S,"LI",{});var LLe=s(Th);sie=n(LLe,"STRONG",{});var Ddt=s(sie);Zgo=r(Ddt,"rag"),Ddt.forEach(t),eho=r(LLe," \u2014 "),rI=n(LLe,"A",{href:!0});var Gdt=s(rI);oho=r(Gdt,"RagTokenizer"),Gdt.forEach(t),rho=r(LLe," (RAG model)"),LLe.forEach(t),tho=i(S),ks=n(S,"LI",{});var mS=s(ks);lie=n(mS,"STRONG",{});var Odt=s(lie);aho=r(Odt,"realm"),Odt.forEach(t),nho=r(mS," \u2014 "),tI=n(mS,"A",{href:!0});var Vdt=s(tI);sho=r(Vdt,"RealmTokenizer"),Vdt.forEach(t),lho=r(mS," or "),aI=n(mS,"A",{href:!0});var Xdt=s(aI);iho=r(Xdt,"RealmTokenizerFast"),Xdt.forEach(t),dho=r(mS," (REALM model)"),mS.forEach(t),cho=i(S),Ss=n(S,"LI",{});var gS=s(Ss);iie=n(gS,"STRONG",{});var zdt=s(iie);fho=r(zdt,"reformer"),zdt.forEach(t),mho=r(gS," \u2014 "),nI=n(gS,"A",{href:!0});var Qdt=s(nI);gho=r(Qdt,"ReformerTokenizer"),Qdt.forEach(t),hho=r(gS," or "),sI=n(gS,"A",{href:!0});var Wdt=s(sI);pho=r(Wdt,"ReformerTokenizerFast"),Wdt.forEach(t),_ho=r(gS," (Reformer model)"),gS.forEach(t),uho=i(S),Rs=n(S,"LI",{});var hS=s(Rs);die=n(hS,"STRONG",{});var Hdt=s(die);bho=r(Hdt,"rembert"),Hdt.forEach(t),vho=r(hS," \u2014 "),lI=n(hS,"A",{href:!0});var Udt=s(lI);Fho=r(Udt,"RemBertTokenizer"),Udt.forEach(t),Tho=r(hS," or "),iI=n(hS,"A",{href:!0});var Jdt=s(iI);Mho=r(Jdt,"RemBertTokenizerFast"),Jdt.forEach(t),Eho=r(hS," (RemBERT model)"),hS.forEach(t),Cho=i(S),Ps=n(S,"LI",{});var pS=s(Ps);cie=n(pS,"STRONG",{});var Ydt=s(cie);who=r(Ydt,"retribert"),Ydt.forEach(t),Aho=r(pS," \u2014 "),dI=n(pS,"A",{href:!0});var Kdt=s(dI);Lho=r(Kdt,"RetriBertTokenizer"),Kdt.forEach(t),yho=r(pS," or "),cI=n(pS,"A",{href:!0});var Zdt=s(cI);xho=r(Zdt,"RetriBertTokenizerFast"),Zdt.forEach(t),$ho=r(pS," (RetriBERT model)"),pS.forEach(t),kho=i(S),Bs=n(S,"LI",{});var _S=s(Bs);fie=n(_S,"STRONG",{});var ect=s(fie);Sho=r(ect,"roberta"),ect.forEach(t),Rho=r(_S," \u2014 "),fI=n(_S,"A",{href:!0});var oct=s(fI);Pho=r(oct,"RobertaTokenizer"),oct.forEach(t),Bho=r(_S," or "),mI=n(_S,"A",{href:!0});var rct=s(mI);Nho=r(rct,"RobertaTokenizerFast"),rct.forEach(t),Iho=r(_S," (RoBERTa model)"),_S.forEach(t),qho=i(S),Ns=n(S,"LI",{});var uS=s(Ns);mie=n(uS,"STRONG",{});var tct=s(mie);jho=r(tct,"roformer"),tct.forEach(t),Dho=r(uS," \u2014 "),gI=n(uS,"A",{href:!0});var act=s(gI);Gho=r(act,"RoFormerTokenizer"),act.forEach(t),Oho=r(uS," or "),hI=n(uS,"A",{href:!0});var nct=s(hI);Vho=r(nct,"RoFormerTokenizerFast"),nct.forEach(t),Xho=r(uS," (RoFormer model)"),uS.forEach(t),zho=i(S),Mh=n(S,"LI",{});var yLe=s(Mh);gie=n(yLe,"STRONG",{});var sct=s(gie);Qho=r(sct,"speech_to_text"),sct.forEach(t),Who=r(yLe," \u2014 "),pI=n(yLe,"A",{href:!0});var lct=s(pI);Hho=r(lct,"Speech2TextTokenizer"),lct.forEach(t),Uho=r(yLe," (Speech2Text model)"),yLe.forEach(t),Jho=i(S),Eh=n(S,"LI",{});var xLe=s(Eh);hie=n(xLe,"STRONG",{});var ict=s(hie);Yho=r(ict,"speech_to_text_2"),ict.forEach(t),Kho=r(xLe," \u2014 "),_I=n(xLe,"A",{href:!0});var dct=s(_I);Zho=r(dct,"Speech2Text2Tokenizer"),dct.forEach(t),epo=r(xLe," (Speech2Text2 model)"),xLe.forEach(t),opo=i(S),Is=n(S,"LI",{});var bS=s(Is);pie=n(bS,"STRONG",{});var cct=s(pie);rpo=r(cct,"splinter"),cct.forEach(t),tpo=r(bS," \u2014 "),uI=n(bS,"A",{href:!0});var fct=s(uI);apo=r(fct,"SplinterTokenizer"),fct.forEach(t),npo=r(bS," or "),bI=n(bS,"A",{href:!0});var mct=s(bI);spo=r(mct,"SplinterTokenizerFast"),mct.forEach(t),lpo=r(bS," (Splinter model)"),bS.forEach(t),ipo=i(S),qs=n(S,"LI",{});var vS=s(qs);_ie=n(vS,"STRONG",{});var gct=s(_ie);dpo=r(gct,"squeezebert"),gct.forEach(t),cpo=r(vS," \u2014 "),vI=n(vS,"A",{href:!0});var hct=s(vI);fpo=r(hct,"SqueezeBertTokenizer"),hct.forEach(t),mpo=r(vS," or "),FI=n(vS,"A",{href:!0});var pct=s(FI);gpo=r(pct,"SqueezeBertTokenizerFast"),pct.forEach(t),hpo=r(vS," (SqueezeBERT model)"),vS.forEach(t),ppo=i(S),js=n(S,"LI",{});var FS=s(js);uie=n(FS,"STRONG",{});var _ct=s(uie);_po=r(_ct,"t5"),_ct.forEach(t),upo=r(FS," \u2014 "),TI=n(FS,"A",{href:!0});var uct=s(TI);bpo=r(uct,"T5Tokenizer"),uct.forEach(t),vpo=r(FS," or "),MI=n(FS,"A",{href:!0});var bct=s(MI);Fpo=r(bct,"T5TokenizerFast"),bct.forEach(t),Tpo=r(FS," (T5 model)"),FS.forEach(t),Mpo=i(S),Ch=n(S,"LI",{});var $Le=s(Ch);bie=n($Le,"STRONG",{});var vct=s(bie);Epo=r(vct,"tapas"),vct.forEach(t),Cpo=r($Le," \u2014 "),EI=n($Le,"A",{href:!0});var Fct=s(EI);wpo=r(Fct,"TapasTokenizer"),Fct.forEach(t),Apo=r($Le," (TAPAS model)"),$Le.forEach(t),Lpo=i(S),wh=n(S,"LI",{});var kLe=s(wh);vie=n(kLe,"STRONG",{});var Tct=s(vie);ypo=r(Tct,"tapex"),Tct.forEach(t),xpo=r(kLe," \u2014 "),CI=n(kLe,"A",{href:!0});var Mct=s(CI);$po=r(Mct,"TapexTokenizer"),Mct.forEach(t),kpo=r(kLe," (TAPEX model)"),kLe.forEach(t),Spo=i(S),Ah=n(S,"LI",{});var SLe=s(Ah);Fie=n(SLe,"STRONG",{});var Ect=s(Fie);Rpo=r(Ect,"transfo-xl"),Ect.forEach(t),Ppo=r(SLe," \u2014 "),wI=n(SLe,"A",{href:!0});var Cct=s(wI);Bpo=r(Cct,"TransfoXLTokenizer"),Cct.forEach(t),Npo=r(SLe," (Transformer-XL model)"),SLe.forEach(t),Ipo=i(S),Ds=n(S,"LI",{});var TS=s(Ds);Tie=n(TS,"STRONG",{});var wct=s(Tie);qpo=r(wct,"vilt"),wct.forEach(t),jpo=r(TS," \u2014 "),AI=n(TS,"A",{href:!0});var Act=s(AI);Dpo=r(Act,"BertTokenizer"),Act.forEach(t),Gpo=r(TS," or "),LI=n(TS,"A",{href:!0});var Lct=s(LI);Opo=r(Lct,"BertTokenizerFast"),Lct.forEach(t),Vpo=r(TS," (ViLT model)"),TS.forEach(t),Xpo=i(S),Gs=n(S,"LI",{});var MS=s(Gs);Mie=n(MS,"STRONG",{});var yct=s(Mie);zpo=r(yct,"visual_bert"),yct.forEach(t),Qpo=r(MS," \u2014 "),yI=n(MS,"A",{href:!0});var xct=s(yI);Wpo=r(xct,"BertTokenizer"),xct.forEach(t),Hpo=r(MS," or "),xI=n(MS,"A",{href:!0});var $ct=s(xI);Upo=r($ct,"BertTokenizerFast"),$ct.forEach(t),Jpo=r(MS," (VisualBERT model)"),MS.forEach(t),Ypo=i(S),Lh=n(S,"LI",{});var RLe=s(Lh);Eie=n(RLe,"STRONG",{});var kct=s(Eie);Kpo=r(kct,"wav2vec2"),kct.forEach(t),Zpo=r(RLe," \u2014 "),$I=n(RLe,"A",{href:!0});var Sct=s($I);e_o=r(Sct,"Wav2Vec2CTCTokenizer"),Sct.forEach(t),o_o=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),r_o=i(S),yh=n(S,"LI",{});var PLe=s(yh);Cie=n(PLe,"STRONG",{});var Rct=s(Cie);t_o=r(Rct,"wav2vec2-conformer"),Rct.forEach(t),a_o=r(PLe," \u2014 "),kI=n(PLe,"A",{href:!0});var Pct=s(kI);n_o=r(Pct,"Wav2Vec2CTCTokenizer"),Pct.forEach(t),s_o=r(PLe," (Wav2Vec2-Conformer model)"),PLe.forEach(t),l_o=i(S),xh=n(S,"LI",{});var BLe=s(xh);wie=n(BLe,"STRONG",{});var Bct=s(wie);i_o=r(Bct,"wav2vec2_phoneme"),Bct.forEach(t),d_o=r(BLe," \u2014 "),SI=n(BLe,"A",{href:!0});var Nct=s(SI);c_o=r(Nct,"Wav2Vec2PhonemeCTCTokenizer"),Nct.forEach(t),f_o=r(BLe," (Wav2Vec2Phoneme model)"),BLe.forEach(t),m_o=i(S),Os=n(S,"LI",{});var ES=s(Os);Aie=n(ES,"STRONG",{});var Ict=s(Aie);g_o=r(Ict,"xglm"),Ict.forEach(t),h_o=r(ES," \u2014 "),RI=n(ES,"A",{href:!0});var qct=s(RI);p_o=r(qct,"XGLMTokenizer"),qct.forEach(t),__o=r(ES," or "),PI=n(ES,"A",{href:!0});var jct=s(PI);u_o=r(jct,"XGLMTokenizerFast"),jct.forEach(t),b_o=r(ES," (XGLM model)"),ES.forEach(t),v_o=i(S),$h=n(S,"LI",{});var NLe=s($h);Lie=n(NLe,"STRONG",{});var Dct=s(Lie);F_o=r(Dct,"xlm"),Dct.forEach(t),T_o=r(NLe," \u2014 "),BI=n(NLe,"A",{href:!0});var Gct=s(BI);M_o=r(Gct,"XLMTokenizer"),Gct.forEach(t),E_o=r(NLe," (XLM model)"),NLe.forEach(t),C_o=i(S),kh=n(S,"LI",{});var ILe=s(kh);yie=n(ILe,"STRONG",{});var Oct=s(yie);w_o=r(Oct,"xlm-prophetnet"),Oct.forEach(t),A_o=r(ILe," \u2014 "),NI=n(ILe,"A",{href:!0});var Vct=s(NI);L_o=r(Vct,"XLMProphetNetTokenizer"),Vct.forEach(t),y_o=r(ILe," (XLM-ProphetNet model)"),ILe.forEach(t),x_o=i(S),Vs=n(S,"LI",{});var CS=s(Vs);xie=n(CS,"STRONG",{});var Xct=s(xie);$_o=r(Xct,"xlm-roberta"),Xct.forEach(t),k_o=r(CS," \u2014 "),II=n(CS,"A",{href:!0});var zct=s(II);S_o=r(zct,"XLMRobertaTokenizer"),zct.forEach(t),R_o=r(CS," or "),qI=n(CS,"A",{href:!0});var Qct=s(qI);P_o=r(Qct,"XLMRobertaTokenizerFast"),Qct.forEach(t),B_o=r(CS," (XLM-RoBERTa model)"),CS.forEach(t),N_o=i(S),Xs=n(S,"LI",{});var wS=s(Xs);$ie=n(wS,"STRONG",{});var Wct=s($ie);I_o=r(Wct,"xlm-roberta-xl"),Wct.forEach(t),q_o=r(wS," \u2014 "),jI=n(wS,"A",{href:!0});var Hct=s(jI);j_o=r(Hct,"RobertaTokenizer"),Hct.forEach(t),D_o=r(wS," or "),DI=n(wS,"A",{href:!0});var Uct=s(DI);G_o=r(Uct,"RobertaTokenizerFast"),Uct.forEach(t),O_o=r(wS," (XLM-RoBERTa-XL model)"),wS.forEach(t),V_o=i(S),zs=n(S,"LI",{});var AS=s(zs);kie=n(AS,"STRONG",{});var Jct=s(kie);X_o=r(Jct,"xlnet"),Jct.forEach(t),z_o=r(AS," \u2014 "),GI=n(AS,"A",{href:!0});var Yct=s(GI);Q_o=r(Yct,"XLNetTokenizer"),Yct.forEach(t),W_o=r(AS," or "),OI=n(AS,"A",{href:!0});var Kct=s(OI);H_o=r(Kct,"XLNetTokenizerFast"),Kct.forEach(t),U_o=r(AS," (XLNet model)"),AS.forEach(t),J_o=i(S),Qs=n(S,"LI",{});var LS=s(Qs);Sie=n(LS,"STRONG",{});var Zct=s(Sie);Y_o=r(Zct,"yoso"),Zct.forEach(t),K_o=r(LS," \u2014 "),VI=n(LS,"A",{href:!0});var eft=s(VI);Z_o=r(eft,"AlbertTokenizer"),eft.forEach(t),euo=r(LS," or "),XI=n(LS,"A",{href:!0});var oft=s(XI);ouo=r(oft,"AlbertTokenizerFast"),oft.forEach(t),ruo=r(LS," (YOSO model)"),LS.forEach(t),S.forEach(t),tuo=i(Ks),T(Sh.$$.fragment,Ks),Ks.forEach(t),auo=i(Ys),Rh=n(Ys,"DIV",{class:!0});var Kze=s(Rh);T(p7.$$.fragment,Kze),nuo=i(Kze),Rie=n(Kze,"P",{});var rft=s(Rie);suo=r(rft,"Register a new tokenizer in this mapping."),rft.forEach(t),Kze.forEach(t),Ys.forEach(t),YVe=i(f),Ii=n(f,"H2",{class:!0});var Zze=s(Ii);Ph=n(Zze,"A",{id:!0,class:!0,href:!0});var tft=s(Ph);Pie=n(tft,"SPAN",{});var aft=s(Pie);T(_7.$$.fragment,aft),aft.forEach(t),tft.forEach(t),luo=i(Zze),Bie=n(Zze,"SPAN",{});var nft=s(Bie);iuo=r(nft,"AutoFeatureExtractor"),nft.forEach(t),Zze.forEach(t),KVe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(u7.$$.fragment,Zs),duo=i(Zs),b7=n(Zs,"P",{});var eQe=s(b7);cuo=r(eQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=n(eQe,"A",{href:!0});var sft=s(zI);fuo=r(sft,"AutoFeatureExtractor.from_pretrained()"),sft.forEach(t),muo=r(eQe," class method."),eQe.forEach(t),guo=i(Zs),v7=n(Zs,"P",{});var oQe=s(v7);huo=r(oQe,"This class cannot be instantiated directly using "),Nie=n(oQe,"CODE",{});var lft=s(Nie);puo=r(lft,"__init__()"),lft.forEach(t),_uo=r(oQe," (throws an error)."),oQe.forEach(t),uuo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(F7.$$.fragment,aa),buo=i(aa),Iie=n(aa,"P",{});var ift=s(Iie);vuo=r(ift,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ift.forEach(t),Fuo=i(aa),Ba=n(aa,"P",{});var nA=s(Ba);Tuo=r(nA,"The feature extractor class to instantiate is selected based on the "),qie=n(nA,"CODE",{});var dft=s(qie);Muo=r(dft,"model_type"),dft.forEach(t),Euo=r(nA,` property of the config object
(either passed as an argument or loaded from `),jie=n(nA,"CODE",{});var cft=s(jie);Cuo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),wuo=r(nA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Die=n(nA,"CODE",{});var fft=s(Die);Auo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),Luo=r(nA,":"),nA.forEach(t),yuo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Bh=n(K,"LI",{});var qLe=s(Bh);Gie=n(qLe,"STRONG",{});var mft=s(Gie);xuo=r(mft,"beit"),mft.forEach(t),$uo=r(qLe," \u2014 "),QI=n(qLe,"A",{href:!0});var gft=s(QI);kuo=r(gft,"BeitFeatureExtractor"),gft.forEach(t),Suo=r(qLe," (BEiT model)"),qLe.forEach(t),Ruo=i(K),Nh=n(K,"LI",{});var jLe=s(Nh);Oie=n(jLe,"STRONG",{});var hft=s(Oie);Puo=r(hft,"clip"),hft.forEach(t),Buo=r(jLe," \u2014 "),WI=n(jLe,"A",{href:!0});var pft=s(WI);Nuo=r(pft,"CLIPFeatureExtractor"),pft.forEach(t),Iuo=r(jLe," (CLIP model)"),jLe.forEach(t),quo=i(K),Ih=n(K,"LI",{});var DLe=s(Ih);Vie=n(DLe,"STRONG",{});var _ft=s(Vie);juo=r(_ft,"convnext"),_ft.forEach(t),Duo=r(DLe," \u2014 "),HI=n(DLe,"A",{href:!0});var uft=s(HI);Guo=r(uft,"ConvNextFeatureExtractor"),uft.forEach(t),Ouo=r(DLe," (ConvNeXT model)"),DLe.forEach(t),Vuo=i(K),qh=n(K,"LI",{});var GLe=s(qh);Xie=n(GLe,"STRONG",{});var bft=s(Xie);Xuo=r(bft,"cvt"),bft.forEach(t),zuo=r(GLe," \u2014 "),UI=n(GLe,"A",{href:!0});var vft=s(UI);Quo=r(vft,"ConvNextFeatureExtractor"),vft.forEach(t),Wuo=r(GLe," (CvT model)"),GLe.forEach(t),Huo=i(K),jh=n(K,"LI",{});var OLe=s(jh);zie=n(OLe,"STRONG",{});var Fft=s(zie);Uuo=r(Fft,"data2vec-audio"),Fft.forEach(t),Juo=r(OLe," \u2014 "),JI=n(OLe,"A",{href:!0});var Tft=s(JI);Yuo=r(Tft,"Wav2Vec2FeatureExtractor"),Tft.forEach(t),Kuo=r(OLe," (Data2VecAudio model)"),OLe.forEach(t),Zuo=i(K),Dh=n(K,"LI",{});var VLe=s(Dh);Qie=n(VLe,"STRONG",{});var Mft=s(Qie);e1o=r(Mft,"data2vec-vision"),Mft.forEach(t),o1o=r(VLe," \u2014 "),YI=n(VLe,"A",{href:!0});var Eft=s(YI);r1o=r(Eft,"BeitFeatureExtractor"),Eft.forEach(t),t1o=r(VLe," (Data2VecVision model)"),VLe.forEach(t),a1o=i(K),Gh=n(K,"LI",{});var XLe=s(Gh);Wie=n(XLe,"STRONG",{});var Cft=s(Wie);n1o=r(Cft,"deit"),Cft.forEach(t),s1o=r(XLe," \u2014 "),KI=n(XLe,"A",{href:!0});var wft=s(KI);l1o=r(wft,"DeiTFeatureExtractor"),wft.forEach(t),i1o=r(XLe," (DeiT model)"),XLe.forEach(t),d1o=i(K),Oh=n(K,"LI",{});var zLe=s(Oh);Hie=n(zLe,"STRONG",{});var Aft=s(Hie);c1o=r(Aft,"detr"),Aft.forEach(t),f1o=r(zLe," \u2014 "),ZI=n(zLe,"A",{href:!0});var Lft=s(ZI);m1o=r(Lft,"DetrFeatureExtractor"),Lft.forEach(t),g1o=r(zLe," (DETR model)"),zLe.forEach(t),h1o=i(K),Vh=n(K,"LI",{});var QLe=s(Vh);Uie=n(QLe,"STRONG",{});var yft=s(Uie);p1o=r(yft,"dpt"),yft.forEach(t),_1o=r(QLe," \u2014 "),eq=n(QLe,"A",{href:!0});var xft=s(eq);u1o=r(xft,"DPTFeatureExtractor"),xft.forEach(t),b1o=r(QLe," (DPT model)"),QLe.forEach(t),v1o=i(K),Xh=n(K,"LI",{});var WLe=s(Xh);Jie=n(WLe,"STRONG",{});var $ft=s(Jie);F1o=r($ft,"flava"),$ft.forEach(t),T1o=r(WLe," \u2014 "),oq=n(WLe,"A",{href:!0});var kft=s(oq);M1o=r(kft,"FlavaFeatureExtractor"),kft.forEach(t),E1o=r(WLe," (FLAVA model)"),WLe.forEach(t),C1o=i(K),zh=n(K,"LI",{});var HLe=s(zh);Yie=n(HLe,"STRONG",{});var Sft=s(Yie);w1o=r(Sft,"glpn"),Sft.forEach(t),A1o=r(HLe," \u2014 "),rq=n(HLe,"A",{href:!0});var Rft=s(rq);L1o=r(Rft,"GLPNFeatureExtractor"),Rft.forEach(t),y1o=r(HLe," (GLPN model)"),HLe.forEach(t),x1o=i(K),Qh=n(K,"LI",{});var ULe=s(Qh);Kie=n(ULe,"STRONG",{});var Pft=s(Kie);$1o=r(Pft,"groupvit"),Pft.forEach(t),k1o=r(ULe," \u2014 "),tq=n(ULe,"A",{href:!0});var Bft=s(tq);S1o=r(Bft,"CLIPFeatureExtractor"),Bft.forEach(t),R1o=r(ULe," (GroupViT model)"),ULe.forEach(t),P1o=i(K),Wh=n(K,"LI",{});var JLe=s(Wh);Zie=n(JLe,"STRONG",{});var Nft=s(Zie);B1o=r(Nft,"hubert"),Nft.forEach(t),N1o=r(JLe," \u2014 "),aq=n(JLe,"A",{href:!0});var Ift=s(aq);I1o=r(Ift,"Wav2Vec2FeatureExtractor"),Ift.forEach(t),q1o=r(JLe," (Hubert model)"),JLe.forEach(t),j1o=i(K),Hh=n(K,"LI",{});var YLe=s(Hh);ede=n(YLe,"STRONG",{});var qft=s(ede);D1o=r(qft,"imagegpt"),qft.forEach(t),G1o=r(YLe," \u2014 "),nq=n(YLe,"A",{href:!0});var jft=s(nq);O1o=r(jft,"ImageGPTFeatureExtractor"),jft.forEach(t),V1o=r(YLe," (ImageGPT model)"),YLe.forEach(t),X1o=i(K),Uh=n(K,"LI",{});var KLe=s(Uh);ode=n(KLe,"STRONG",{});var Dft=s(ode);z1o=r(Dft,"layoutlmv2"),Dft.forEach(t),Q1o=r(KLe," \u2014 "),sq=n(KLe,"A",{href:!0});var Gft=s(sq);W1o=r(Gft,"LayoutLMv2FeatureExtractor"),Gft.forEach(t),H1o=r(KLe," (LayoutLMv2 model)"),KLe.forEach(t),U1o=i(K),Jh=n(K,"LI",{});var ZLe=s(Jh);rde=n(ZLe,"STRONG",{});var Oft=s(rde);J1o=r(Oft,"layoutlmv3"),Oft.forEach(t),Y1o=r(ZLe," \u2014 "),lq=n(ZLe,"A",{href:!0});var Vft=s(lq);K1o=r(Vft,"LayoutLMv3FeatureExtractor"),Vft.forEach(t),Z1o=r(ZLe," (LayoutLMv3 model)"),ZLe.forEach(t),e2o=i(K),Yh=n(K,"LI",{});var eye=s(Yh);tde=n(eye,"STRONG",{});var Xft=s(tde);o2o=r(Xft,"levit"),Xft.forEach(t),r2o=r(eye," \u2014 "),iq=n(eye,"A",{href:!0});var zft=s(iq);t2o=r(zft,"LevitFeatureExtractor"),zft.forEach(t),a2o=r(eye," (LeViT model)"),eye.forEach(t),n2o=i(K),Kh=n(K,"LI",{});var oye=s(Kh);ade=n(oye,"STRONG",{});var Qft=s(ade);s2o=r(Qft,"maskformer"),Qft.forEach(t),l2o=r(oye," \u2014 "),dq=n(oye,"A",{href:!0});var Wft=s(dq);i2o=r(Wft,"MaskFormerFeatureExtractor"),Wft.forEach(t),d2o=r(oye," (MaskFormer model)"),oye.forEach(t),c2o=i(K),Zh=n(K,"LI",{});var rye=s(Zh);nde=n(rye,"STRONG",{});var Hft=s(nde);f2o=r(Hft,"mctct"),Hft.forEach(t),m2o=r(rye," \u2014 "),cq=n(rye,"A",{href:!0});var Uft=s(cq);g2o=r(Uft,"MCTCTFeatureExtractor"),Uft.forEach(t),h2o=r(rye," (M-CTC-T model)"),rye.forEach(t),p2o=i(K),ep=n(K,"LI",{});var tye=s(ep);sde=n(tye,"STRONG",{});var Jft=s(sde);_2o=r(Jft,"mobilevit"),Jft.forEach(t),u2o=r(tye," \u2014 "),fq=n(tye,"A",{href:!0});var Yft=s(fq);b2o=r(Yft,"MobileViTFeatureExtractor"),Yft.forEach(t),v2o=r(tye," (MobileViT model)"),tye.forEach(t),F2o=i(K),op=n(K,"LI",{});var aye=s(op);lde=n(aye,"STRONG",{});var Kft=s(lde);T2o=r(Kft,"perceiver"),Kft.forEach(t),M2o=r(aye," \u2014 "),mq=n(aye,"A",{href:!0});var Zft=s(mq);E2o=r(Zft,"PerceiverFeatureExtractor"),Zft.forEach(t),C2o=r(aye," (Perceiver model)"),aye.forEach(t),w2o=i(K),rp=n(K,"LI",{});var nye=s(rp);ide=n(nye,"STRONG",{});var emt=s(ide);A2o=r(emt,"poolformer"),emt.forEach(t),L2o=r(nye," \u2014 "),gq=n(nye,"A",{href:!0});var omt=s(gq);y2o=r(omt,"PoolFormerFeatureExtractor"),omt.forEach(t),x2o=r(nye," (PoolFormer model)"),nye.forEach(t),$2o=i(K),tp=n(K,"LI",{});var sye=s(tp);dde=n(sye,"STRONG",{});var rmt=s(dde);k2o=r(rmt,"regnet"),rmt.forEach(t),S2o=r(sye," \u2014 "),hq=n(sye,"A",{href:!0});var tmt=s(hq);R2o=r(tmt,"ConvNextFeatureExtractor"),tmt.forEach(t),P2o=r(sye," (RegNet model)"),sye.forEach(t),B2o=i(K),ap=n(K,"LI",{});var lye=s(ap);cde=n(lye,"STRONG",{});var amt=s(cde);N2o=r(amt,"resnet"),amt.forEach(t),I2o=r(lye," \u2014 "),pq=n(lye,"A",{href:!0});var nmt=s(pq);q2o=r(nmt,"ConvNextFeatureExtractor"),nmt.forEach(t),j2o=r(lye," (ResNet model)"),lye.forEach(t),D2o=i(K),np=n(K,"LI",{});var iye=s(np);fde=n(iye,"STRONG",{});var smt=s(fde);G2o=r(smt,"segformer"),smt.forEach(t),O2o=r(iye," \u2014 "),_q=n(iye,"A",{href:!0});var lmt=s(_q);V2o=r(lmt,"SegformerFeatureExtractor"),lmt.forEach(t),X2o=r(iye," (SegFormer model)"),iye.forEach(t),z2o=i(K),sp=n(K,"LI",{});var dye=s(sp);mde=n(dye,"STRONG",{});var imt=s(mde);Q2o=r(imt,"speech_to_text"),imt.forEach(t),W2o=r(dye," \u2014 "),uq=n(dye,"A",{href:!0});var dmt=s(uq);H2o=r(dmt,"Speech2TextFeatureExtractor"),dmt.forEach(t),U2o=r(dye," (Speech2Text model)"),dye.forEach(t),J2o=i(K),lp=n(K,"LI",{});var cye=s(lp);gde=n(cye,"STRONG",{});var cmt=s(gde);Y2o=r(cmt,"swin"),cmt.forEach(t),K2o=r(cye," \u2014 "),bq=n(cye,"A",{href:!0});var fmt=s(bq);Z2o=r(fmt,"ViTFeatureExtractor"),fmt.forEach(t),ebo=r(cye," (Swin Transformer model)"),cye.forEach(t),obo=i(K),ip=n(K,"LI",{});var fye=s(ip);hde=n(fye,"STRONG",{});var mmt=s(hde);rbo=r(mmt,"van"),mmt.forEach(t),tbo=r(fye," \u2014 "),vq=n(fye,"A",{href:!0});var gmt=s(vq);abo=r(gmt,"ConvNextFeatureExtractor"),gmt.forEach(t),nbo=r(fye," (VAN model)"),fye.forEach(t),sbo=i(K),dp=n(K,"LI",{});var mye=s(dp);pde=n(mye,"STRONG",{});var hmt=s(pde);lbo=r(hmt,"vilt"),hmt.forEach(t),ibo=r(mye," \u2014 "),Fq=n(mye,"A",{href:!0});var pmt=s(Fq);dbo=r(pmt,"ViltFeatureExtractor"),pmt.forEach(t),cbo=r(mye," (ViLT model)"),mye.forEach(t),fbo=i(K),cp=n(K,"LI",{});var gye=s(cp);_de=n(gye,"STRONG",{});var _mt=s(_de);mbo=r(_mt,"vit"),_mt.forEach(t),gbo=r(gye," \u2014 "),Tq=n(gye,"A",{href:!0});var umt=s(Tq);hbo=r(umt,"ViTFeatureExtractor"),umt.forEach(t),pbo=r(gye," (ViT model)"),gye.forEach(t),_bo=i(K),fp=n(K,"LI",{});var hye=s(fp);ude=n(hye,"STRONG",{});var bmt=s(ude);ubo=r(bmt,"vit_mae"),bmt.forEach(t),bbo=r(hye," \u2014 "),Mq=n(hye,"A",{href:!0});var vmt=s(Mq);vbo=r(vmt,"ViTFeatureExtractor"),vmt.forEach(t),Fbo=r(hye," (ViTMAE model)"),hye.forEach(t),Tbo=i(K),mp=n(K,"LI",{});var pye=s(mp);bde=n(pye,"STRONG",{});var Fmt=s(bde);Mbo=r(Fmt,"wav2vec2"),Fmt.forEach(t),Ebo=r(pye," \u2014 "),Eq=n(pye,"A",{href:!0});var Tmt=s(Eq);Cbo=r(Tmt,"Wav2Vec2FeatureExtractor"),Tmt.forEach(t),wbo=r(pye," (Wav2Vec2 model)"),pye.forEach(t),Abo=i(K),gp=n(K,"LI",{});var _ye=s(gp);vde=n(_ye,"STRONG",{});var Mmt=s(vde);Lbo=r(Mmt,"wav2vec2-conformer"),Mmt.forEach(t),ybo=r(_ye," \u2014 "),Cq=n(_ye,"A",{href:!0});var Emt=s(Cq);xbo=r(Emt,"Wav2Vec2FeatureExtractor"),Emt.forEach(t),$bo=r(_ye," (Wav2Vec2-Conformer model)"),_ye.forEach(t),kbo=i(K),hp=n(K,"LI",{});var uye=s(hp);Fde=n(uye,"STRONG",{});var Cmt=s(Fde);Sbo=r(Cmt,"yolos"),Cmt.forEach(t),Rbo=r(uye," \u2014 "),wq=n(uye,"A",{href:!0});var wmt=s(wq);Pbo=r(wmt,"YolosFeatureExtractor"),wmt.forEach(t),Bbo=r(uye," (YOLOS model)"),uye.forEach(t),K.forEach(t),Nbo=i(aa),T(pp.$$.fragment,aa),Ibo=i(aa),T(_p.$$.fragment,aa),aa.forEach(t),qbo=i(Zs),up=n(Zs,"DIV",{class:!0});var rQe=s(up);T(T7.$$.fragment,rQe),jbo=i(rQe),Tde=n(rQe,"P",{});var Amt=s(Tde);Dbo=r(Amt,"Register a new feature extractor for this class."),Amt.forEach(t),rQe.forEach(t),Zs.forEach(t),ZVe=i(f),qi=n(f,"H2",{class:!0});var tQe=s(qi);bp=n(tQe,"A",{id:!0,class:!0,href:!0});var Lmt=s(bp);Mde=n(Lmt,"SPAN",{});var ymt=s(Mde);T(M7.$$.fragment,ymt),ymt.forEach(t),Lmt.forEach(t),Gbo=i(tQe),Ede=n(tQe,"SPAN",{});var xmt=s(Ede);Obo=r(xmt,"AutoProcessor"),xmt.forEach(t),tQe.forEach(t),eXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(E7.$$.fragment,el),Vbo=i(el),C7=n(el,"P",{});var aQe=s(C7);Xbo=r(aQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Aq=n(aQe,"A",{href:!0});var $mt=s(Aq);zbo=r($mt,"AutoProcessor.from_pretrained()"),$mt.forEach(t),Qbo=r(aQe," class method."),aQe.forEach(t),Wbo=i(el),w7=n(el,"P",{});var nQe=s(w7);Hbo=r(nQe,"This class cannot be instantiated directly using "),Cde=n(nQe,"CODE",{});var kmt=s(Cde);Ubo=r(kmt,"__init__()"),kmt.forEach(t),Jbo=r(nQe," (throws an error)."),nQe.forEach(t),Ybo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(A7.$$.fragment,na),Kbo=i(na),wde=n(na,"P",{});var Smt=s(wde);Zbo=r(Smt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Smt.forEach(t),evo=i(na),ji=n(na,"P",{});var Cre=s(ji);ovo=r(Cre,"The processor class to instantiate is selected based on the "),Ade=n(Cre,"CODE",{});var Rmt=s(Ade);rvo=r(Rmt,"model_type"),Rmt.forEach(t),tvo=r(Cre,` property of the config object (either
passed as an argument or loaded from `),Lde=n(Cre,"CODE",{});var Pmt=s(Lde);avo=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),nvo=r(Cre," if possible):"),Cre.forEach(t),svo=i(na),he=n(na,"UL",{});var ue=s(he);vp=n(ue,"LI",{});var bye=s(vp);yde=n(bye,"STRONG",{});var Bmt=s(yde);lvo=r(Bmt,"clip"),Bmt.forEach(t),ivo=r(bye," \u2014 "),Lq=n(bye,"A",{href:!0});var Nmt=s(Lq);dvo=r(Nmt,"CLIPProcessor"),Nmt.forEach(t),cvo=r(bye," (CLIP model)"),bye.forEach(t),fvo=i(ue),Fp=n(ue,"LI",{});var vye=s(Fp);xde=n(vye,"STRONG",{});var Imt=s(xde);mvo=r(Imt,"flava"),Imt.forEach(t),gvo=r(vye," \u2014 "),$de=n(vye,"CODE",{});var qmt=s($de);hvo=r(qmt,"FLAVAProcessor"),qmt.forEach(t),pvo=r(vye," (FLAVA model)"),vye.forEach(t),_vo=i(ue),Tp=n(ue,"LI",{});var Fye=s(Tp);kde=n(Fye,"STRONG",{});var jmt=s(kde);uvo=r(jmt,"groupvit"),jmt.forEach(t),bvo=r(Fye," \u2014 "),yq=n(Fye,"A",{href:!0});var Dmt=s(yq);vvo=r(Dmt,"CLIPProcessor"),Dmt.forEach(t),Fvo=r(Fye," (GroupViT model)"),Fye.forEach(t),Tvo=i(ue),Mp=n(ue,"LI",{});var Tye=s(Mp);Sde=n(Tye,"STRONG",{});var Gmt=s(Sde);Mvo=r(Gmt,"layoutlmv2"),Gmt.forEach(t),Evo=r(Tye," \u2014 "),xq=n(Tye,"A",{href:!0});var Omt=s(xq);Cvo=r(Omt,"LayoutLMv2Processor"),Omt.forEach(t),wvo=r(Tye," (LayoutLMv2 model)"),Tye.forEach(t),Avo=i(ue),Ep=n(ue,"LI",{});var Mye=s(Ep);Rde=n(Mye,"STRONG",{});var Vmt=s(Rde);Lvo=r(Vmt,"layoutlmv3"),Vmt.forEach(t),yvo=r(Mye," \u2014 "),$q=n(Mye,"A",{href:!0});var Xmt=s($q);xvo=r(Xmt,"LayoutLMv3Processor"),Xmt.forEach(t),$vo=r(Mye," (LayoutLMv3 model)"),Mye.forEach(t),kvo=i(ue),Cp=n(ue,"LI",{});var Eye=s(Cp);Pde=n(Eye,"STRONG",{});var zmt=s(Pde);Svo=r(zmt,"layoutxlm"),zmt.forEach(t),Rvo=r(Eye," \u2014 "),kq=n(Eye,"A",{href:!0});var Qmt=s(kq);Pvo=r(Qmt,"LayoutXLMProcessor"),Qmt.forEach(t),Bvo=r(Eye," (LayoutXLM model)"),Eye.forEach(t),Nvo=i(ue),wp=n(ue,"LI",{});var Cye=s(wp);Bde=n(Cye,"STRONG",{});var Wmt=s(Bde);Ivo=r(Wmt,"sew"),Wmt.forEach(t),qvo=r(Cye," \u2014 "),Sq=n(Cye,"A",{href:!0});var Hmt=s(Sq);jvo=r(Hmt,"Wav2Vec2Processor"),Hmt.forEach(t),Dvo=r(Cye," (SEW model)"),Cye.forEach(t),Gvo=i(ue),Ap=n(ue,"LI",{});var wye=s(Ap);Nde=n(wye,"STRONG",{});var Umt=s(Nde);Ovo=r(Umt,"sew-d"),Umt.forEach(t),Vvo=r(wye," \u2014 "),Rq=n(wye,"A",{href:!0});var Jmt=s(Rq);Xvo=r(Jmt,"Wav2Vec2Processor"),Jmt.forEach(t),zvo=r(wye," (SEW-D model)"),wye.forEach(t),Qvo=i(ue),Lp=n(ue,"LI",{});var Aye=s(Lp);Ide=n(Aye,"STRONG",{});var Ymt=s(Ide);Wvo=r(Ymt,"speech_to_text"),Ymt.forEach(t),Hvo=r(Aye," \u2014 "),Pq=n(Aye,"A",{href:!0});var Kmt=s(Pq);Uvo=r(Kmt,"Speech2TextProcessor"),Kmt.forEach(t),Jvo=r(Aye," (Speech2Text model)"),Aye.forEach(t),Yvo=i(ue),yp=n(ue,"LI",{});var Lye=s(yp);qde=n(Lye,"STRONG",{});var Zmt=s(qde);Kvo=r(Zmt,"speech_to_text_2"),Zmt.forEach(t),Zvo=r(Lye," \u2014 "),Bq=n(Lye,"A",{href:!0});var egt=s(Bq);e5o=r(egt,"Speech2Text2Processor"),egt.forEach(t),o5o=r(Lye," (Speech2Text2 model)"),Lye.forEach(t),r5o=i(ue),xp=n(ue,"LI",{});var yye=s(xp);jde=n(yye,"STRONG",{});var ogt=s(jde);t5o=r(ogt,"trocr"),ogt.forEach(t),a5o=r(yye," \u2014 "),Nq=n(yye,"A",{href:!0});var rgt=s(Nq);n5o=r(rgt,"TrOCRProcessor"),rgt.forEach(t),s5o=r(yye," (TrOCR model)"),yye.forEach(t),l5o=i(ue),$p=n(ue,"LI",{});var xye=s($p);Dde=n(xye,"STRONG",{});var tgt=s(Dde);i5o=r(tgt,"unispeech"),tgt.forEach(t),d5o=r(xye," \u2014 "),Iq=n(xye,"A",{href:!0});var agt=s(Iq);c5o=r(agt,"Wav2Vec2Processor"),agt.forEach(t),f5o=r(xye," (UniSpeech model)"),xye.forEach(t),m5o=i(ue),kp=n(ue,"LI",{});var $ye=s(kp);Gde=n($ye,"STRONG",{});var ngt=s(Gde);g5o=r(ngt,"unispeech-sat"),ngt.forEach(t),h5o=r($ye," \u2014 "),qq=n($ye,"A",{href:!0});var sgt=s(qq);p5o=r(sgt,"Wav2Vec2Processor"),sgt.forEach(t),_5o=r($ye," (UniSpeechSat model)"),$ye.forEach(t),u5o=i(ue),Sp=n(ue,"LI",{});var kye=s(Sp);Ode=n(kye,"STRONG",{});var lgt=s(Ode);b5o=r(lgt,"vilt"),lgt.forEach(t),v5o=r(kye," \u2014 "),jq=n(kye,"A",{href:!0});var igt=s(jq);F5o=r(igt,"ViltProcessor"),igt.forEach(t),T5o=r(kye," (ViLT model)"),kye.forEach(t),M5o=i(ue),Rp=n(ue,"LI",{});var Sye=s(Rp);Vde=n(Sye,"STRONG",{});var dgt=s(Vde);E5o=r(dgt,"vision-text-dual-encoder"),dgt.forEach(t),C5o=r(Sye," \u2014 "),Dq=n(Sye,"A",{href:!0});var cgt=s(Dq);w5o=r(cgt,"VisionTextDualEncoderProcessor"),cgt.forEach(t),A5o=r(Sye," (VisionTextDualEncoder model)"),Sye.forEach(t),L5o=i(ue),Pp=n(ue,"LI",{});var Rye=s(Pp);Xde=n(Rye,"STRONG",{});var fgt=s(Xde);y5o=r(fgt,"wav2vec2"),fgt.forEach(t),x5o=r(Rye," \u2014 "),Gq=n(Rye,"A",{href:!0});var mgt=s(Gq);$5o=r(mgt,"Wav2Vec2Processor"),mgt.forEach(t),k5o=r(Rye," (Wav2Vec2 model)"),Rye.forEach(t),S5o=i(ue),Bp=n(ue,"LI",{});var Pye=s(Bp);zde=n(Pye,"STRONG",{});var ggt=s(zde);R5o=r(ggt,"wav2vec2-conformer"),ggt.forEach(t),P5o=r(Pye," \u2014 "),Oq=n(Pye,"A",{href:!0});var hgt=s(Oq);B5o=r(hgt,"Wav2Vec2Processor"),hgt.forEach(t),N5o=r(Pye," (Wav2Vec2-Conformer model)"),Pye.forEach(t),I5o=i(ue),Np=n(ue,"LI",{});var Bye=s(Np);Qde=n(Bye,"STRONG",{});var pgt=s(Qde);q5o=r(pgt,"wavlm"),pgt.forEach(t),j5o=r(Bye," \u2014 "),Vq=n(Bye,"A",{href:!0});var _gt=s(Vq);D5o=r(_gt,"Wav2Vec2Processor"),_gt.forEach(t),G5o=r(Bye," (WavLM model)"),Bye.forEach(t),ue.forEach(t),O5o=i(na),T(Ip.$$.fragment,na),V5o=i(na),T(qp.$$.fragment,na),na.forEach(t),X5o=i(el),jp=n(el,"DIV",{class:!0});var sQe=s(jp);T(L7.$$.fragment,sQe),z5o=i(sQe),Wde=n(sQe,"P",{});var ugt=s(Wde);Q5o=r(ugt,"Register a new processor for this class."),ugt.forEach(t),sQe.forEach(t),el.forEach(t),oXe=i(f),Di=n(f,"H2",{class:!0});var lQe=s(Di);Dp=n(lQe,"A",{id:!0,class:!0,href:!0});var bgt=s(Dp);Hde=n(bgt,"SPAN",{});var vgt=s(Hde);T(y7.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),W5o=i(lQe),Ude=n(lQe,"SPAN",{});var Fgt=s(Ude);H5o=r(Fgt,"AutoModel"),Fgt.forEach(t),lQe.forEach(t),rXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(x7.$$.fragment,ol),U5o=i(ol),Gi=n(ol,"P",{});var wre=s(Gi);J5o=r(wre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xq=n(wre,"A",{href:!0});var Tgt=s(Xq);Y5o=r(Tgt,"from_pretrained()"),Tgt.forEach(t),K5o=r(wre," class method or the "),zq=n(wre,"A",{href:!0});var Mgt=s(zq);Z5o=r(Mgt,"from_config()"),Mgt.forEach(t),e0o=r(wre,` class
method.`),wre.forEach(t),o0o=i(ol),$7=n(ol,"P",{});var iQe=s($7);r0o=r(iQe,"This class cannot be instantiated directly using "),Jde=n(iQe,"CODE",{});var Egt=s(Jde);t0o=r(Egt,"__init__()"),Egt.forEach(t),a0o=r(iQe," (throws an error)."),iQe.forEach(t),n0o=i(ol),lt=n(ol,"DIV",{class:!0});var sA=s(lt);T(k7.$$.fragment,sA),s0o=i(sA),Yde=n(sA,"P",{});var Cgt=s(Yde);l0o=r(Cgt,"Instantiates one of the base model classes of the library from a configuration."),Cgt.forEach(t),i0o=i(sA),Oi=n(sA,"P",{});var Are=s(Oi);d0o=r(Are,`Note:
Loading a model from its configuration file does `),Kde=n(Are,"STRONG",{});var wgt=s(Kde);c0o=r(wgt,"not"),wgt.forEach(t),f0o=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=n(Are,"A",{href:!0});var Agt=s(Qq);m0o=r(Agt,"from_pretrained()"),Agt.forEach(t),g0o=r(Are," to load the model weights."),Are.forEach(t),h0o=i(sA),T(Gp.$$.fragment,sA),sA.forEach(t),p0o=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(S7.$$.fragment,sa),_0o=i(sa),Zde=n(sa,"P",{});var Lgt=s(Zde);u0o=r(Lgt,"Instantiate one of the base model classes of the library from a pretrained model."),Lgt.forEach(t),b0o=i(sa),Na=n(sa,"P",{});var lA=s(Na);v0o=r(lA,"The model class to instantiate is selected based on the "),ece=n(lA,"CODE",{});var ygt=s(ece);F0o=r(ygt,"model_type"),ygt.forEach(t),T0o=r(lA,` property of the config object (either
passed as an argument or loaded from `),oce=n(lA,"CODE",{});var xgt=s(oce);M0o=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),E0o=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(lA,"CODE",{});var $gt=s(rce);C0o=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),w0o=r(lA,":"),lA.forEach(t),A0o=i(sa),y=n(sa,"UL",{});var x=s(y);Op=n(x,"LI",{});var Nye=s(Op);tce=n(Nye,"STRONG",{});var kgt=s(tce);L0o=r(kgt,"albert"),kgt.forEach(t),y0o=r(Nye," \u2014 "),Wq=n(Nye,"A",{href:!0});var Sgt=s(Wq);x0o=r(Sgt,"AlbertModel"),Sgt.forEach(t),$0o=r(Nye," (ALBERT model)"),Nye.forEach(t),k0o=i(x),Vp=n(x,"LI",{});var Iye=s(Vp);ace=n(Iye,"STRONG",{});var Rgt=s(ace);S0o=r(Rgt,"bart"),Rgt.forEach(t),R0o=r(Iye," \u2014 "),Hq=n(Iye,"A",{href:!0});var Pgt=s(Hq);P0o=r(Pgt,"BartModel"),Pgt.forEach(t),B0o=r(Iye," (BART model)"),Iye.forEach(t),N0o=i(x),Xp=n(x,"LI",{});var qye=s(Xp);nce=n(qye,"STRONG",{});var Bgt=s(nce);I0o=r(Bgt,"beit"),Bgt.forEach(t),q0o=r(qye," \u2014 "),Uq=n(qye,"A",{href:!0});var Ngt=s(Uq);j0o=r(Ngt,"BeitModel"),Ngt.forEach(t),D0o=r(qye," (BEiT model)"),qye.forEach(t),G0o=i(x),zp=n(x,"LI",{});var jye=s(zp);sce=n(jye,"STRONG",{});var Igt=s(sce);O0o=r(Igt,"bert"),Igt.forEach(t),V0o=r(jye," \u2014 "),Jq=n(jye,"A",{href:!0});var qgt=s(Jq);X0o=r(qgt,"BertModel"),qgt.forEach(t),z0o=r(jye," (BERT model)"),jye.forEach(t),Q0o=i(x),Qp=n(x,"LI",{});var Dye=s(Qp);lce=n(Dye,"STRONG",{});var jgt=s(lce);W0o=r(jgt,"bert-generation"),jgt.forEach(t),H0o=r(Dye," \u2014 "),Yq=n(Dye,"A",{href:!0});var Dgt=s(Yq);U0o=r(Dgt,"BertGenerationEncoder"),Dgt.forEach(t),J0o=r(Dye," (Bert Generation model)"),Dye.forEach(t),Y0o=i(x),Wp=n(x,"LI",{});var Gye=s(Wp);ice=n(Gye,"STRONG",{});var Ggt=s(ice);K0o=r(Ggt,"big_bird"),Ggt.forEach(t),Z0o=r(Gye," \u2014 "),Kq=n(Gye,"A",{href:!0});var Ogt=s(Kq);eFo=r(Ogt,"BigBirdModel"),Ogt.forEach(t),oFo=r(Gye," (BigBird model)"),Gye.forEach(t),rFo=i(x),Hp=n(x,"LI",{});var Oye=s(Hp);dce=n(Oye,"STRONG",{});var Vgt=s(dce);tFo=r(Vgt,"bigbird_pegasus"),Vgt.forEach(t),aFo=r(Oye," \u2014 "),Zq=n(Oye,"A",{href:!0});var Xgt=s(Zq);nFo=r(Xgt,"BigBirdPegasusModel"),Xgt.forEach(t),sFo=r(Oye," (BigBird-Pegasus model)"),Oye.forEach(t),lFo=i(x),Up=n(x,"LI",{});var Vye=s(Up);cce=n(Vye,"STRONG",{});var zgt=s(cce);iFo=r(zgt,"blenderbot"),zgt.forEach(t),dFo=r(Vye," \u2014 "),ej=n(Vye,"A",{href:!0});var Qgt=s(ej);cFo=r(Qgt,"BlenderbotModel"),Qgt.forEach(t),fFo=r(Vye," (Blenderbot model)"),Vye.forEach(t),mFo=i(x),Jp=n(x,"LI",{});var Xye=s(Jp);fce=n(Xye,"STRONG",{});var Wgt=s(fce);gFo=r(Wgt,"blenderbot-small"),Wgt.forEach(t),hFo=r(Xye," \u2014 "),oj=n(Xye,"A",{href:!0});var Hgt=s(oj);pFo=r(Hgt,"BlenderbotSmallModel"),Hgt.forEach(t),_Fo=r(Xye," (BlenderbotSmall model)"),Xye.forEach(t),uFo=i(x),Yp=n(x,"LI",{});var zye=s(Yp);mce=n(zye,"STRONG",{});var Ugt=s(mce);bFo=r(Ugt,"bloom"),Ugt.forEach(t),vFo=r(zye," \u2014 "),rj=n(zye,"A",{href:!0});var Jgt=s(rj);FFo=r(Jgt,"BloomModel"),Jgt.forEach(t),TFo=r(zye," (BLOOM model)"),zye.forEach(t),MFo=i(x),Kp=n(x,"LI",{});var Qye=s(Kp);gce=n(Qye,"STRONG",{});var Ygt=s(gce);EFo=r(Ygt,"camembert"),Ygt.forEach(t),CFo=r(Qye," \u2014 "),tj=n(Qye,"A",{href:!0});var Kgt=s(tj);wFo=r(Kgt,"CamembertModel"),Kgt.forEach(t),AFo=r(Qye," (CamemBERT model)"),Qye.forEach(t),LFo=i(x),Zp=n(x,"LI",{});var Wye=s(Zp);hce=n(Wye,"STRONG",{});var Zgt=s(hce);yFo=r(Zgt,"canine"),Zgt.forEach(t),xFo=r(Wye," \u2014 "),aj=n(Wye,"A",{href:!0});var eht=s(aj);$Fo=r(eht,"CanineModel"),eht.forEach(t),kFo=r(Wye," (CANINE model)"),Wye.forEach(t),SFo=i(x),e_=n(x,"LI",{});var Hye=s(e_);pce=n(Hye,"STRONG",{});var oht=s(pce);RFo=r(oht,"clip"),oht.forEach(t),PFo=r(Hye," \u2014 "),nj=n(Hye,"A",{href:!0});var rht=s(nj);BFo=r(rht,"CLIPModel"),rht.forEach(t),NFo=r(Hye," (CLIP model)"),Hye.forEach(t),IFo=i(x),o_=n(x,"LI",{});var Uye=s(o_);_ce=n(Uye,"STRONG",{});var tht=s(_ce);qFo=r(tht,"codegen"),tht.forEach(t),jFo=r(Uye," \u2014 "),sj=n(Uye,"A",{href:!0});var aht=s(sj);DFo=r(aht,"CodeGenModel"),aht.forEach(t),GFo=r(Uye," (CodeGen model)"),Uye.forEach(t),OFo=i(x),r_=n(x,"LI",{});var Jye=s(r_);uce=n(Jye,"STRONG",{});var nht=s(uce);VFo=r(nht,"convbert"),nht.forEach(t),XFo=r(Jye," \u2014 "),lj=n(Jye,"A",{href:!0});var sht=s(lj);zFo=r(sht,"ConvBertModel"),sht.forEach(t),QFo=r(Jye," (ConvBERT model)"),Jye.forEach(t),WFo=i(x),t_=n(x,"LI",{});var Yye=s(t_);bce=n(Yye,"STRONG",{});var lht=s(bce);HFo=r(lht,"convnext"),lht.forEach(t),UFo=r(Yye," \u2014 "),ij=n(Yye,"A",{href:!0});var iht=s(ij);JFo=r(iht,"ConvNextModel"),iht.forEach(t),YFo=r(Yye," (ConvNeXT model)"),Yye.forEach(t),KFo=i(x),a_=n(x,"LI",{});var Kye=s(a_);vce=n(Kye,"STRONG",{});var dht=s(vce);ZFo=r(dht,"ctrl"),dht.forEach(t),eTo=r(Kye," \u2014 "),dj=n(Kye,"A",{href:!0});var cht=s(dj);oTo=r(cht,"CTRLModel"),cht.forEach(t),rTo=r(Kye," (CTRL model)"),Kye.forEach(t),tTo=i(x),n_=n(x,"LI",{});var Zye=s(n_);Fce=n(Zye,"STRONG",{});var fht=s(Fce);aTo=r(fht,"cvt"),fht.forEach(t),nTo=r(Zye," \u2014 "),cj=n(Zye,"A",{href:!0});var mht=s(cj);sTo=r(mht,"CvtModel"),mht.forEach(t),lTo=r(Zye," (CvT model)"),Zye.forEach(t),iTo=i(x),s_=n(x,"LI",{});var exe=s(s_);Tce=n(exe,"STRONG",{});var ght=s(Tce);dTo=r(ght,"data2vec-audio"),ght.forEach(t),cTo=r(exe," \u2014 "),fj=n(exe,"A",{href:!0});var hht=s(fj);fTo=r(hht,"Data2VecAudioModel"),hht.forEach(t),mTo=r(exe," (Data2VecAudio model)"),exe.forEach(t),gTo=i(x),l_=n(x,"LI",{});var oxe=s(l_);Mce=n(oxe,"STRONG",{});var pht=s(Mce);hTo=r(pht,"data2vec-text"),pht.forEach(t),pTo=r(oxe," \u2014 "),mj=n(oxe,"A",{href:!0});var _ht=s(mj);_To=r(_ht,"Data2VecTextModel"),_ht.forEach(t),uTo=r(oxe," (Data2VecText model)"),oxe.forEach(t),bTo=i(x),i_=n(x,"LI",{});var rxe=s(i_);Ece=n(rxe,"STRONG",{});var uht=s(Ece);vTo=r(uht,"data2vec-vision"),uht.forEach(t),FTo=r(rxe," \u2014 "),gj=n(rxe,"A",{href:!0});var bht=s(gj);TTo=r(bht,"Data2VecVisionModel"),bht.forEach(t),MTo=r(rxe," (Data2VecVision model)"),rxe.forEach(t),ETo=i(x),d_=n(x,"LI",{});var txe=s(d_);Cce=n(txe,"STRONG",{});var vht=s(Cce);CTo=r(vht,"deberta"),vht.forEach(t),wTo=r(txe," \u2014 "),hj=n(txe,"A",{href:!0});var Fht=s(hj);ATo=r(Fht,"DebertaModel"),Fht.forEach(t),LTo=r(txe," (DeBERTa model)"),txe.forEach(t),yTo=i(x),c_=n(x,"LI",{});var axe=s(c_);wce=n(axe,"STRONG",{});var Tht=s(wce);xTo=r(Tht,"deberta-v2"),Tht.forEach(t),$To=r(axe," \u2014 "),pj=n(axe,"A",{href:!0});var Mht=s(pj);kTo=r(Mht,"DebertaV2Model"),Mht.forEach(t),STo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),RTo=i(x),f_=n(x,"LI",{});var nxe=s(f_);Ace=n(nxe,"STRONG",{});var Eht=s(Ace);PTo=r(Eht,"decision_transformer"),Eht.forEach(t),BTo=r(nxe," \u2014 "),_j=n(nxe,"A",{href:!0});var Cht=s(_j);NTo=r(Cht,"DecisionTransformerModel"),Cht.forEach(t),ITo=r(nxe," (Decision Transformer model)"),nxe.forEach(t),qTo=i(x),m_=n(x,"LI",{});var sxe=s(m_);Lce=n(sxe,"STRONG",{});var wht=s(Lce);jTo=r(wht,"deit"),wht.forEach(t),DTo=r(sxe," \u2014 "),uj=n(sxe,"A",{href:!0});var Aht=s(uj);GTo=r(Aht,"DeiTModel"),Aht.forEach(t),OTo=r(sxe," (DeiT model)"),sxe.forEach(t),VTo=i(x),g_=n(x,"LI",{});var lxe=s(g_);yce=n(lxe,"STRONG",{});var Lht=s(yce);XTo=r(Lht,"detr"),Lht.forEach(t),zTo=r(lxe," \u2014 "),bj=n(lxe,"A",{href:!0});var yht=s(bj);QTo=r(yht,"DetrModel"),yht.forEach(t),WTo=r(lxe," (DETR model)"),lxe.forEach(t),HTo=i(x),h_=n(x,"LI",{});var ixe=s(h_);xce=n(ixe,"STRONG",{});var xht=s(xce);UTo=r(xht,"distilbert"),xht.forEach(t),JTo=r(ixe," \u2014 "),vj=n(ixe,"A",{href:!0});var $ht=s(vj);YTo=r($ht,"DistilBertModel"),$ht.forEach(t),KTo=r(ixe," (DistilBERT model)"),ixe.forEach(t),ZTo=i(x),p_=n(x,"LI",{});var dxe=s(p_);$ce=n(dxe,"STRONG",{});var kht=s($ce);e8o=r(kht,"dpr"),kht.forEach(t),o8o=r(dxe," \u2014 "),Fj=n(dxe,"A",{href:!0});var Sht=s(Fj);r8o=r(Sht,"DPRQuestionEncoder"),Sht.forEach(t),t8o=r(dxe," (DPR model)"),dxe.forEach(t),a8o=i(x),__=n(x,"LI",{});var cxe=s(__);kce=n(cxe,"STRONG",{});var Rht=s(kce);n8o=r(Rht,"dpt"),Rht.forEach(t),s8o=r(cxe," \u2014 "),Tj=n(cxe,"A",{href:!0});var Pht=s(Tj);l8o=r(Pht,"DPTModel"),Pht.forEach(t),i8o=r(cxe," (DPT model)"),cxe.forEach(t),d8o=i(x),u_=n(x,"LI",{});var fxe=s(u_);Sce=n(fxe,"STRONG",{});var Bht=s(Sce);c8o=r(Bht,"electra"),Bht.forEach(t),f8o=r(fxe," \u2014 "),Mj=n(fxe,"A",{href:!0});var Nht=s(Mj);m8o=r(Nht,"ElectraModel"),Nht.forEach(t),g8o=r(fxe," (ELECTRA model)"),fxe.forEach(t),h8o=i(x),b_=n(x,"LI",{});var mxe=s(b_);Rce=n(mxe,"STRONG",{});var Iht=s(Rce);p8o=r(Iht,"flaubert"),Iht.forEach(t),_8o=r(mxe," \u2014 "),Ej=n(mxe,"A",{href:!0});var qht=s(Ej);u8o=r(qht,"FlaubertModel"),qht.forEach(t),b8o=r(mxe," (FlauBERT model)"),mxe.forEach(t),v8o=i(x),v_=n(x,"LI",{});var gxe=s(v_);Pce=n(gxe,"STRONG",{});var jht=s(Pce);F8o=r(jht,"flava"),jht.forEach(t),T8o=r(gxe," \u2014 "),Cj=n(gxe,"A",{href:!0});var Dht=s(Cj);M8o=r(Dht,"FlavaModel"),Dht.forEach(t),E8o=r(gxe," (FLAVA model)"),gxe.forEach(t),C8o=i(x),F_=n(x,"LI",{});var hxe=s(F_);Bce=n(hxe,"STRONG",{});var Ght=s(Bce);w8o=r(Ght,"fnet"),Ght.forEach(t),A8o=r(hxe," \u2014 "),wj=n(hxe,"A",{href:!0});var Oht=s(wj);L8o=r(Oht,"FNetModel"),Oht.forEach(t),y8o=r(hxe," (FNet model)"),hxe.forEach(t),x8o=i(x),T_=n(x,"LI",{});var pxe=s(T_);Nce=n(pxe,"STRONG",{});var Vht=s(Nce);$8o=r(Vht,"fsmt"),Vht.forEach(t),k8o=r(pxe," \u2014 "),Aj=n(pxe,"A",{href:!0});var Xht=s(Aj);S8o=r(Xht,"FSMTModel"),Xht.forEach(t),R8o=r(pxe," (FairSeq Machine-Translation model)"),pxe.forEach(t),P8o=i(x),Ws=n(x,"LI",{});var yS=s(Ws);Ice=n(yS,"STRONG",{});var zht=s(Ice);B8o=r(zht,"funnel"),zht.forEach(t),N8o=r(yS," \u2014 "),Lj=n(yS,"A",{href:!0});var Qht=s(Lj);I8o=r(Qht,"FunnelModel"),Qht.forEach(t),q8o=r(yS," or "),yj=n(yS,"A",{href:!0});var Wht=s(yj);j8o=r(Wht,"FunnelBaseModel"),Wht.forEach(t),D8o=r(yS," (Funnel Transformer model)"),yS.forEach(t),G8o=i(x),M_=n(x,"LI",{});var _xe=s(M_);qce=n(_xe,"STRONG",{});var Hht=s(qce);O8o=r(Hht,"glpn"),Hht.forEach(t),V8o=r(_xe," \u2014 "),xj=n(_xe,"A",{href:!0});var Uht=s(xj);X8o=r(Uht,"GLPNModel"),Uht.forEach(t),z8o=r(_xe," (GLPN model)"),_xe.forEach(t),Q8o=i(x),E_=n(x,"LI",{});var uxe=s(E_);jce=n(uxe,"STRONG",{});var Jht=s(jce);W8o=r(Jht,"gpt2"),Jht.forEach(t),H8o=r(uxe," \u2014 "),$j=n(uxe,"A",{href:!0});var Yht=s($j);U8o=r(Yht,"GPT2Model"),Yht.forEach(t),J8o=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),Y8o=i(x),C_=n(x,"LI",{});var bxe=s(C_);Dce=n(bxe,"STRONG",{});var Kht=s(Dce);K8o=r(Kht,"gpt_neo"),Kht.forEach(t),Z8o=r(bxe," \u2014 "),kj=n(bxe,"A",{href:!0});var Zht=s(kj);e9o=r(Zht,"GPTNeoModel"),Zht.forEach(t),o9o=r(bxe," (GPT Neo model)"),bxe.forEach(t),r9o=i(x),w_=n(x,"LI",{});var vxe=s(w_);Gce=n(vxe,"STRONG",{});var ept=s(Gce);t9o=r(ept,"gpt_neox"),ept.forEach(t),a9o=r(vxe," \u2014 "),Sj=n(vxe,"A",{href:!0});var opt=s(Sj);n9o=r(opt,"GPTNeoXModel"),opt.forEach(t),s9o=r(vxe," (GPT NeoX model)"),vxe.forEach(t),l9o=i(x),A_=n(x,"LI",{});var Fxe=s(A_);Oce=n(Fxe,"STRONG",{});var rpt=s(Oce);i9o=r(rpt,"gptj"),rpt.forEach(t),d9o=r(Fxe," \u2014 "),Rj=n(Fxe,"A",{href:!0});var tpt=s(Rj);c9o=r(tpt,"GPTJModel"),tpt.forEach(t),f9o=r(Fxe," (GPT-J model)"),Fxe.forEach(t),m9o=i(x),L_=n(x,"LI",{});var Txe=s(L_);Vce=n(Txe,"STRONG",{});var apt=s(Vce);g9o=r(apt,"groupvit"),apt.forEach(t),h9o=r(Txe," \u2014 "),Pj=n(Txe,"A",{href:!0});var npt=s(Pj);p9o=r(npt,"GroupViTModel"),npt.forEach(t),_9o=r(Txe," (GroupViT model)"),Txe.forEach(t),u9o=i(x),y_=n(x,"LI",{});var Mxe=s(y_);Xce=n(Mxe,"STRONG",{});var spt=s(Xce);b9o=r(spt,"hubert"),spt.forEach(t),v9o=r(Mxe," \u2014 "),Bj=n(Mxe,"A",{href:!0});var lpt=s(Bj);F9o=r(lpt,"HubertModel"),lpt.forEach(t),T9o=r(Mxe," (Hubert model)"),Mxe.forEach(t),M9o=i(x),x_=n(x,"LI",{});var Exe=s(x_);zce=n(Exe,"STRONG",{});var ipt=s(zce);E9o=r(ipt,"ibert"),ipt.forEach(t),C9o=r(Exe," \u2014 "),Nj=n(Exe,"A",{href:!0});var dpt=s(Nj);w9o=r(dpt,"IBertModel"),dpt.forEach(t),A9o=r(Exe," (I-BERT model)"),Exe.forEach(t),L9o=i(x),$_=n(x,"LI",{});var Cxe=s($_);Qce=n(Cxe,"STRONG",{});var cpt=s(Qce);y9o=r(cpt,"imagegpt"),cpt.forEach(t),x9o=r(Cxe," \u2014 "),Ij=n(Cxe,"A",{href:!0});var fpt=s(Ij);$9o=r(fpt,"ImageGPTModel"),fpt.forEach(t),k9o=r(Cxe," (ImageGPT model)"),Cxe.forEach(t),S9o=i(x),k_=n(x,"LI",{});var wxe=s(k_);Wce=n(wxe,"STRONG",{});var mpt=s(Wce);R9o=r(mpt,"layoutlm"),mpt.forEach(t),P9o=r(wxe," \u2014 "),qj=n(wxe,"A",{href:!0});var gpt=s(qj);B9o=r(gpt,"LayoutLMModel"),gpt.forEach(t),N9o=r(wxe," (LayoutLM model)"),wxe.forEach(t),I9o=i(x),S_=n(x,"LI",{});var Axe=s(S_);Hce=n(Axe,"STRONG",{});var hpt=s(Hce);q9o=r(hpt,"layoutlmv2"),hpt.forEach(t),j9o=r(Axe," \u2014 "),jj=n(Axe,"A",{href:!0});var ppt=s(jj);D9o=r(ppt,"LayoutLMv2Model"),ppt.forEach(t),G9o=r(Axe," (LayoutLMv2 model)"),Axe.forEach(t),O9o=i(x),R_=n(x,"LI",{});var Lxe=s(R_);Uce=n(Lxe,"STRONG",{});var _pt=s(Uce);V9o=r(_pt,"layoutlmv3"),_pt.forEach(t),X9o=r(Lxe," \u2014 "),Dj=n(Lxe,"A",{href:!0});var upt=s(Dj);z9o=r(upt,"LayoutLMv3Model"),upt.forEach(t),Q9o=r(Lxe," (LayoutLMv3 model)"),Lxe.forEach(t),W9o=i(x),P_=n(x,"LI",{});var yxe=s(P_);Jce=n(yxe,"STRONG",{});var bpt=s(Jce);H9o=r(bpt,"led"),bpt.forEach(t),U9o=r(yxe," \u2014 "),Gj=n(yxe,"A",{href:!0});var vpt=s(Gj);J9o=r(vpt,"LEDModel"),vpt.forEach(t),Y9o=r(yxe," (LED model)"),yxe.forEach(t),K9o=i(x),B_=n(x,"LI",{});var xxe=s(B_);Yce=n(xxe,"STRONG",{});var Fpt=s(Yce);Z9o=r(Fpt,"levit"),Fpt.forEach(t),eMo=r(xxe," \u2014 "),Oj=n(xxe,"A",{href:!0});var Tpt=s(Oj);oMo=r(Tpt,"LevitModel"),Tpt.forEach(t),rMo=r(xxe," (LeViT model)"),xxe.forEach(t),tMo=i(x),N_=n(x,"LI",{});var $xe=s(N_);Kce=n($xe,"STRONG",{});var Mpt=s(Kce);aMo=r(Mpt,"longformer"),Mpt.forEach(t),nMo=r($xe," \u2014 "),Vj=n($xe,"A",{href:!0});var Ept=s(Vj);sMo=r(Ept,"LongformerModel"),Ept.forEach(t),lMo=r($xe," (Longformer model)"),$xe.forEach(t),iMo=i(x),I_=n(x,"LI",{});var kxe=s(I_);Zce=n(kxe,"STRONG",{});var Cpt=s(Zce);dMo=r(Cpt,"longt5"),Cpt.forEach(t),cMo=r(kxe," \u2014 "),Xj=n(kxe,"A",{href:!0});var wpt=s(Xj);fMo=r(wpt,"LongT5Model"),wpt.forEach(t),mMo=r(kxe," (LongT5 model)"),kxe.forEach(t),gMo=i(x),q_=n(x,"LI",{});var Sxe=s(q_);efe=n(Sxe,"STRONG",{});var Apt=s(efe);hMo=r(Apt,"luke"),Apt.forEach(t),pMo=r(Sxe," \u2014 "),zj=n(Sxe,"A",{href:!0});var Lpt=s(zj);_Mo=r(Lpt,"LukeModel"),Lpt.forEach(t),uMo=r(Sxe," (LUKE model)"),Sxe.forEach(t),bMo=i(x),j_=n(x,"LI",{});var Rxe=s(j_);ofe=n(Rxe,"STRONG",{});var ypt=s(ofe);vMo=r(ypt,"lxmert"),ypt.forEach(t),FMo=r(Rxe," \u2014 "),Qj=n(Rxe,"A",{href:!0});var xpt=s(Qj);TMo=r(xpt,"LxmertModel"),xpt.forEach(t),MMo=r(Rxe," (LXMERT model)"),Rxe.forEach(t),EMo=i(x),D_=n(x,"LI",{});var Pxe=s(D_);rfe=n(Pxe,"STRONG",{});var $pt=s(rfe);CMo=r($pt,"m2m_100"),$pt.forEach(t),wMo=r(Pxe," \u2014 "),Wj=n(Pxe,"A",{href:!0});var kpt=s(Wj);AMo=r(kpt,"M2M100Model"),kpt.forEach(t),LMo=r(Pxe," (M2M100 model)"),Pxe.forEach(t),yMo=i(x),G_=n(x,"LI",{});var Bxe=s(G_);tfe=n(Bxe,"STRONG",{});var Spt=s(tfe);xMo=r(Spt,"marian"),Spt.forEach(t),$Mo=r(Bxe," \u2014 "),Hj=n(Bxe,"A",{href:!0});var Rpt=s(Hj);kMo=r(Rpt,"MarianModel"),Rpt.forEach(t),SMo=r(Bxe," (Marian model)"),Bxe.forEach(t),RMo=i(x),O_=n(x,"LI",{});var Nxe=s(O_);afe=n(Nxe,"STRONG",{});var Ppt=s(afe);PMo=r(Ppt,"maskformer"),Ppt.forEach(t),BMo=r(Nxe," \u2014 "),Uj=n(Nxe,"A",{href:!0});var Bpt=s(Uj);NMo=r(Bpt,"MaskFormerModel"),Bpt.forEach(t),IMo=r(Nxe," (MaskFormer model)"),Nxe.forEach(t),qMo=i(x),V_=n(x,"LI",{});var Ixe=s(V_);nfe=n(Ixe,"STRONG",{});var Npt=s(nfe);jMo=r(Npt,"mbart"),Npt.forEach(t),DMo=r(Ixe," \u2014 "),Jj=n(Ixe,"A",{href:!0});var Ipt=s(Jj);GMo=r(Ipt,"MBartModel"),Ipt.forEach(t),OMo=r(Ixe," (mBART model)"),Ixe.forEach(t),VMo=i(x),X_=n(x,"LI",{});var qxe=s(X_);sfe=n(qxe,"STRONG",{});var qpt=s(sfe);XMo=r(qpt,"mctct"),qpt.forEach(t),zMo=r(qxe," \u2014 "),Yj=n(qxe,"A",{href:!0});var jpt=s(Yj);QMo=r(jpt,"MCTCTModel"),jpt.forEach(t),WMo=r(qxe," (M-CTC-T model)"),qxe.forEach(t),HMo=i(x),z_=n(x,"LI",{});var jxe=s(z_);lfe=n(jxe,"STRONG",{});var Dpt=s(lfe);UMo=r(Dpt,"megatron-bert"),Dpt.forEach(t),JMo=r(jxe," \u2014 "),Kj=n(jxe,"A",{href:!0});var Gpt=s(Kj);YMo=r(Gpt,"MegatronBertModel"),Gpt.forEach(t),KMo=r(jxe," (Megatron-BERT model)"),jxe.forEach(t),ZMo=i(x),Q_=n(x,"LI",{});var Dxe=s(Q_);ife=n(Dxe,"STRONG",{});var Opt=s(ife);e4o=r(Opt,"mobilebert"),Opt.forEach(t),o4o=r(Dxe," \u2014 "),Zj=n(Dxe,"A",{href:!0});var Vpt=s(Zj);r4o=r(Vpt,"MobileBertModel"),Vpt.forEach(t),t4o=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),a4o=i(x),W_=n(x,"LI",{});var Gxe=s(W_);dfe=n(Gxe,"STRONG",{});var Xpt=s(dfe);n4o=r(Xpt,"mobilevit"),Xpt.forEach(t),s4o=r(Gxe," \u2014 "),eD=n(Gxe,"A",{href:!0});var zpt=s(eD);l4o=r(zpt,"MobileViTModel"),zpt.forEach(t),i4o=r(Gxe," (MobileViT model)"),Gxe.forEach(t),d4o=i(x),H_=n(x,"LI",{});var Oxe=s(H_);cfe=n(Oxe,"STRONG",{});var Qpt=s(cfe);c4o=r(Qpt,"mpnet"),Qpt.forEach(t),f4o=r(Oxe," \u2014 "),oD=n(Oxe,"A",{href:!0});var Wpt=s(oD);m4o=r(Wpt,"MPNetModel"),Wpt.forEach(t),g4o=r(Oxe," (MPNet model)"),Oxe.forEach(t),h4o=i(x),U_=n(x,"LI",{});var Vxe=s(U_);ffe=n(Vxe,"STRONG",{});var Hpt=s(ffe);p4o=r(Hpt,"mt5"),Hpt.forEach(t),_4o=r(Vxe," \u2014 "),rD=n(Vxe,"A",{href:!0});var Upt=s(rD);u4o=r(Upt,"MT5Model"),Upt.forEach(t),b4o=r(Vxe," (MT5 model)"),Vxe.forEach(t),v4o=i(x),J_=n(x,"LI",{});var Xxe=s(J_);mfe=n(Xxe,"STRONG",{});var Jpt=s(mfe);F4o=r(Jpt,"mvp"),Jpt.forEach(t),T4o=r(Xxe," \u2014 "),tD=n(Xxe,"A",{href:!0});var Ypt=s(tD);M4o=r(Ypt,"MvpModel"),Ypt.forEach(t),E4o=r(Xxe," (MVP model)"),Xxe.forEach(t),C4o=i(x),Y_=n(x,"LI",{});var zxe=s(Y_);gfe=n(zxe,"STRONG",{});var Kpt=s(gfe);w4o=r(Kpt,"nezha"),Kpt.forEach(t),A4o=r(zxe," \u2014 "),aD=n(zxe,"A",{href:!0});var Zpt=s(aD);L4o=r(Zpt,"NezhaModel"),Zpt.forEach(t),y4o=r(zxe," (Nezha model)"),zxe.forEach(t),x4o=i(x),K_=n(x,"LI",{});var Qxe=s(K_);hfe=n(Qxe,"STRONG",{});var e_t=s(hfe);$4o=r(e_t,"nystromformer"),e_t.forEach(t),k4o=r(Qxe," \u2014 "),nD=n(Qxe,"A",{href:!0});var o_t=s(nD);S4o=r(o_t,"NystromformerModel"),o_t.forEach(t),R4o=r(Qxe," (Nystr\xF6mformer model)"),Qxe.forEach(t),P4o=i(x),Z_=n(x,"LI",{});var Wxe=s(Z_);pfe=n(Wxe,"STRONG",{});var r_t=s(pfe);B4o=r(r_t,"openai-gpt"),r_t.forEach(t),N4o=r(Wxe," \u2014 "),sD=n(Wxe,"A",{href:!0});var t_t=s(sD);I4o=r(t_t,"OpenAIGPTModel"),t_t.forEach(t),q4o=r(Wxe," (OpenAI GPT model)"),Wxe.forEach(t),j4o=i(x),eu=n(x,"LI",{});var Hxe=s(eu);_fe=n(Hxe,"STRONG",{});var a_t=s(_fe);D4o=r(a_t,"opt"),a_t.forEach(t),G4o=r(Hxe," \u2014 "),lD=n(Hxe,"A",{href:!0});var n_t=s(lD);O4o=r(n_t,"OPTModel"),n_t.forEach(t),V4o=r(Hxe," (OPT model)"),Hxe.forEach(t),X4o=i(x),ou=n(x,"LI",{});var Uxe=s(ou);ufe=n(Uxe,"STRONG",{});var s_t=s(ufe);z4o=r(s_t,"pegasus"),s_t.forEach(t),Q4o=r(Uxe," \u2014 "),iD=n(Uxe,"A",{href:!0});var l_t=s(iD);W4o=r(l_t,"PegasusModel"),l_t.forEach(t),H4o=r(Uxe," (Pegasus model)"),Uxe.forEach(t),U4o=i(x),ru=n(x,"LI",{});var Jxe=s(ru);bfe=n(Jxe,"STRONG",{});var i_t=s(bfe);J4o=r(i_t,"perceiver"),i_t.forEach(t),Y4o=r(Jxe," \u2014 "),dD=n(Jxe,"A",{href:!0});var d_t=s(dD);K4o=r(d_t,"PerceiverModel"),d_t.forEach(t),Z4o=r(Jxe," (Perceiver model)"),Jxe.forEach(t),eEo=i(x),tu=n(x,"LI",{});var Yxe=s(tu);vfe=n(Yxe,"STRONG",{});var c_t=s(vfe);oEo=r(c_t,"plbart"),c_t.forEach(t),rEo=r(Yxe," \u2014 "),cD=n(Yxe,"A",{href:!0});var f_t=s(cD);tEo=r(f_t,"PLBartModel"),f_t.forEach(t),aEo=r(Yxe," (PLBart model)"),Yxe.forEach(t),nEo=i(x),au=n(x,"LI",{});var Kxe=s(au);Ffe=n(Kxe,"STRONG",{});var m_t=s(Ffe);sEo=r(m_t,"poolformer"),m_t.forEach(t),lEo=r(Kxe," \u2014 "),fD=n(Kxe,"A",{href:!0});var g_t=s(fD);iEo=r(g_t,"PoolFormerModel"),g_t.forEach(t),dEo=r(Kxe," (PoolFormer model)"),Kxe.forEach(t),cEo=i(x),nu=n(x,"LI",{});var Zxe=s(nu);Tfe=n(Zxe,"STRONG",{});var h_t=s(Tfe);fEo=r(h_t,"prophetnet"),h_t.forEach(t),mEo=r(Zxe," \u2014 "),mD=n(Zxe,"A",{href:!0});var p_t=s(mD);gEo=r(p_t,"ProphetNetModel"),p_t.forEach(t),hEo=r(Zxe," (ProphetNet model)"),Zxe.forEach(t),pEo=i(x),su=n(x,"LI",{});var e$e=s(su);Mfe=n(e$e,"STRONG",{});var __t=s(Mfe);_Eo=r(__t,"qdqbert"),__t.forEach(t),uEo=r(e$e," \u2014 "),gD=n(e$e,"A",{href:!0});var u_t=s(gD);bEo=r(u_t,"QDQBertModel"),u_t.forEach(t),vEo=r(e$e," (QDQBert model)"),e$e.forEach(t),FEo=i(x),lu=n(x,"LI",{});var o$e=s(lu);Efe=n(o$e,"STRONG",{});var b_t=s(Efe);TEo=r(b_t,"reformer"),b_t.forEach(t),MEo=r(o$e," \u2014 "),hD=n(o$e,"A",{href:!0});var v_t=s(hD);EEo=r(v_t,"ReformerModel"),v_t.forEach(t),CEo=r(o$e," (Reformer model)"),o$e.forEach(t),wEo=i(x),iu=n(x,"LI",{});var r$e=s(iu);Cfe=n(r$e,"STRONG",{});var F_t=s(Cfe);AEo=r(F_t,"regnet"),F_t.forEach(t),LEo=r(r$e," \u2014 "),pD=n(r$e,"A",{href:!0});var T_t=s(pD);yEo=r(T_t,"RegNetModel"),T_t.forEach(t),xEo=r(r$e," (RegNet model)"),r$e.forEach(t),$Eo=i(x),du=n(x,"LI",{});var t$e=s(du);wfe=n(t$e,"STRONG",{});var M_t=s(wfe);kEo=r(M_t,"rembert"),M_t.forEach(t),SEo=r(t$e," \u2014 "),_D=n(t$e,"A",{href:!0});var E_t=s(_D);REo=r(E_t,"RemBertModel"),E_t.forEach(t),PEo=r(t$e," (RemBERT model)"),t$e.forEach(t),BEo=i(x),cu=n(x,"LI",{});var a$e=s(cu);Afe=n(a$e,"STRONG",{});var C_t=s(Afe);NEo=r(C_t,"resnet"),C_t.forEach(t),IEo=r(a$e," \u2014 "),uD=n(a$e,"A",{href:!0});var w_t=s(uD);qEo=r(w_t,"ResNetModel"),w_t.forEach(t),jEo=r(a$e," (ResNet model)"),a$e.forEach(t),DEo=i(x),fu=n(x,"LI",{});var n$e=s(fu);Lfe=n(n$e,"STRONG",{});var A_t=s(Lfe);GEo=r(A_t,"retribert"),A_t.forEach(t),OEo=r(n$e," \u2014 "),bD=n(n$e,"A",{href:!0});var L_t=s(bD);VEo=r(L_t,"RetriBertModel"),L_t.forEach(t),XEo=r(n$e," (RetriBERT model)"),n$e.forEach(t),zEo=i(x),mu=n(x,"LI",{});var s$e=s(mu);yfe=n(s$e,"STRONG",{});var y_t=s(yfe);QEo=r(y_t,"roberta"),y_t.forEach(t),WEo=r(s$e," \u2014 "),vD=n(s$e,"A",{href:!0});var x_t=s(vD);HEo=r(x_t,"RobertaModel"),x_t.forEach(t),UEo=r(s$e," (RoBERTa model)"),s$e.forEach(t),JEo=i(x),gu=n(x,"LI",{});var l$e=s(gu);xfe=n(l$e,"STRONG",{});var $_t=s(xfe);YEo=r($_t,"roformer"),$_t.forEach(t),KEo=r(l$e," \u2014 "),FD=n(l$e,"A",{href:!0});var k_t=s(FD);ZEo=r(k_t,"RoFormerModel"),k_t.forEach(t),eCo=r(l$e," (RoFormer model)"),l$e.forEach(t),oCo=i(x),hu=n(x,"LI",{});var i$e=s(hu);$fe=n(i$e,"STRONG",{});var S_t=s($fe);rCo=r(S_t,"segformer"),S_t.forEach(t),tCo=r(i$e," \u2014 "),TD=n(i$e,"A",{href:!0});var R_t=s(TD);aCo=r(R_t,"SegformerModel"),R_t.forEach(t),nCo=r(i$e," (SegFormer model)"),i$e.forEach(t),sCo=i(x),pu=n(x,"LI",{});var d$e=s(pu);kfe=n(d$e,"STRONG",{});var P_t=s(kfe);lCo=r(P_t,"sew"),P_t.forEach(t),iCo=r(d$e," \u2014 "),MD=n(d$e,"A",{href:!0});var B_t=s(MD);dCo=r(B_t,"SEWModel"),B_t.forEach(t),cCo=r(d$e," (SEW model)"),d$e.forEach(t),fCo=i(x),_u=n(x,"LI",{});var c$e=s(_u);Sfe=n(c$e,"STRONG",{});var N_t=s(Sfe);mCo=r(N_t,"sew-d"),N_t.forEach(t),gCo=r(c$e," \u2014 "),ED=n(c$e,"A",{href:!0});var I_t=s(ED);hCo=r(I_t,"SEWDModel"),I_t.forEach(t),pCo=r(c$e," (SEW-D model)"),c$e.forEach(t),_Co=i(x),uu=n(x,"LI",{});var f$e=s(uu);Rfe=n(f$e,"STRONG",{});var q_t=s(Rfe);uCo=r(q_t,"speech_to_text"),q_t.forEach(t),bCo=r(f$e," \u2014 "),CD=n(f$e,"A",{href:!0});var j_t=s(CD);vCo=r(j_t,"Speech2TextModel"),j_t.forEach(t),FCo=r(f$e," (Speech2Text model)"),f$e.forEach(t),TCo=i(x),bu=n(x,"LI",{});var m$e=s(bu);Pfe=n(m$e,"STRONG",{});var D_t=s(Pfe);MCo=r(D_t,"splinter"),D_t.forEach(t),ECo=r(m$e," \u2014 "),wD=n(m$e,"A",{href:!0});var G_t=s(wD);CCo=r(G_t,"SplinterModel"),G_t.forEach(t),wCo=r(m$e," (Splinter model)"),m$e.forEach(t),ACo=i(x),vu=n(x,"LI",{});var g$e=s(vu);Bfe=n(g$e,"STRONG",{});var O_t=s(Bfe);LCo=r(O_t,"squeezebert"),O_t.forEach(t),yCo=r(g$e," \u2014 "),AD=n(g$e,"A",{href:!0});var V_t=s(AD);xCo=r(V_t,"SqueezeBertModel"),V_t.forEach(t),$Co=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),kCo=i(x),Fu=n(x,"LI",{});var h$e=s(Fu);Nfe=n(h$e,"STRONG",{});var X_t=s(Nfe);SCo=r(X_t,"swin"),X_t.forEach(t),RCo=r(h$e," \u2014 "),LD=n(h$e,"A",{href:!0});var z_t=s(LD);PCo=r(z_t,"SwinModel"),z_t.forEach(t),BCo=r(h$e," (Swin Transformer model)"),h$e.forEach(t),NCo=i(x),Tu=n(x,"LI",{});var p$e=s(Tu);Ife=n(p$e,"STRONG",{});var Q_t=s(Ife);ICo=r(Q_t,"t5"),Q_t.forEach(t),qCo=r(p$e," \u2014 "),yD=n(p$e,"A",{href:!0});var W_t=s(yD);jCo=r(W_t,"T5Model"),W_t.forEach(t),DCo=r(p$e," (T5 model)"),p$e.forEach(t),GCo=i(x),Mu=n(x,"LI",{});var _$e=s(Mu);qfe=n(_$e,"STRONG",{});var H_t=s(qfe);OCo=r(H_t,"tapas"),H_t.forEach(t),VCo=r(_$e," \u2014 "),xD=n(_$e,"A",{href:!0});var U_t=s(xD);XCo=r(U_t,"TapasModel"),U_t.forEach(t),zCo=r(_$e," (TAPAS model)"),_$e.forEach(t),QCo=i(x),Eu=n(x,"LI",{});var u$e=s(Eu);jfe=n(u$e,"STRONG",{});var J_t=s(jfe);WCo=r(J_t,"trajectory_transformer"),J_t.forEach(t),HCo=r(u$e," \u2014 "),$D=n(u$e,"A",{href:!0});var Y_t=s($D);UCo=r(Y_t,"TrajectoryTransformerModel"),Y_t.forEach(t),JCo=r(u$e," (Trajectory Transformer model)"),u$e.forEach(t),YCo=i(x),Cu=n(x,"LI",{});var b$e=s(Cu);Dfe=n(b$e,"STRONG",{});var K_t=s(Dfe);KCo=r(K_t,"transfo-xl"),K_t.forEach(t),ZCo=r(b$e," \u2014 "),kD=n(b$e,"A",{href:!0});var Z_t=s(kD);e3o=r(Z_t,"TransfoXLModel"),Z_t.forEach(t),o3o=r(b$e," (Transformer-XL model)"),b$e.forEach(t),r3o=i(x),wu=n(x,"LI",{});var v$e=s(wu);Gfe=n(v$e,"STRONG",{});var eut=s(Gfe);t3o=r(eut,"unispeech"),eut.forEach(t),a3o=r(v$e," \u2014 "),SD=n(v$e,"A",{href:!0});var out=s(SD);n3o=r(out,"UniSpeechModel"),out.forEach(t),s3o=r(v$e," (UniSpeech model)"),v$e.forEach(t),l3o=i(x),Au=n(x,"LI",{});var F$e=s(Au);Ofe=n(F$e,"STRONG",{});var rut=s(Ofe);i3o=r(rut,"unispeech-sat"),rut.forEach(t),d3o=r(F$e," \u2014 "),RD=n(F$e,"A",{href:!0});var tut=s(RD);c3o=r(tut,"UniSpeechSatModel"),tut.forEach(t),f3o=r(F$e," (UniSpeechSat model)"),F$e.forEach(t),m3o=i(x),Lu=n(x,"LI",{});var T$e=s(Lu);Vfe=n(T$e,"STRONG",{});var aut=s(Vfe);g3o=r(aut,"van"),aut.forEach(t),h3o=r(T$e," \u2014 "),PD=n(T$e,"A",{href:!0});var nut=s(PD);p3o=r(nut,"VanModel"),nut.forEach(t),_3o=r(T$e," (VAN model)"),T$e.forEach(t),u3o=i(x),yu=n(x,"LI",{});var M$e=s(yu);Xfe=n(M$e,"STRONG",{});var sut=s(Xfe);b3o=r(sut,"vilt"),sut.forEach(t),v3o=r(M$e," \u2014 "),BD=n(M$e,"A",{href:!0});var lut=s(BD);F3o=r(lut,"ViltModel"),lut.forEach(t),T3o=r(M$e," (ViLT model)"),M$e.forEach(t),M3o=i(x),xu=n(x,"LI",{});var E$e=s(xu);zfe=n(E$e,"STRONG",{});var iut=s(zfe);E3o=r(iut,"vision-text-dual-encoder"),iut.forEach(t),C3o=r(E$e," \u2014 "),ND=n(E$e,"A",{href:!0});var dut=s(ND);w3o=r(dut,"VisionTextDualEncoderModel"),dut.forEach(t),A3o=r(E$e," (VisionTextDualEncoder model)"),E$e.forEach(t),L3o=i(x),$u=n(x,"LI",{});var C$e=s($u);Qfe=n(C$e,"STRONG",{});var cut=s(Qfe);y3o=r(cut,"visual_bert"),cut.forEach(t),x3o=r(C$e," \u2014 "),ID=n(C$e,"A",{href:!0});var fut=s(ID);$3o=r(fut,"VisualBertModel"),fut.forEach(t),k3o=r(C$e," (VisualBERT model)"),C$e.forEach(t),S3o=i(x),ku=n(x,"LI",{});var w$e=s(ku);Wfe=n(w$e,"STRONG",{});var mut=s(Wfe);R3o=r(mut,"vit"),mut.forEach(t),P3o=r(w$e," \u2014 "),qD=n(w$e,"A",{href:!0});var gut=s(qD);B3o=r(gut,"ViTModel"),gut.forEach(t),N3o=r(w$e," (ViT model)"),w$e.forEach(t),I3o=i(x),Su=n(x,"LI",{});var A$e=s(Su);Hfe=n(A$e,"STRONG",{});var hut=s(Hfe);q3o=r(hut,"vit_mae"),hut.forEach(t),j3o=r(A$e," \u2014 "),jD=n(A$e,"A",{href:!0});var put=s(jD);D3o=r(put,"ViTMAEModel"),put.forEach(t),G3o=r(A$e," (ViTMAE model)"),A$e.forEach(t),O3o=i(x),Ru=n(x,"LI",{});var L$e=s(Ru);Ufe=n(L$e,"STRONG",{});var _ut=s(Ufe);V3o=r(_ut,"wav2vec2"),_ut.forEach(t),X3o=r(L$e," \u2014 "),DD=n(L$e,"A",{href:!0});var uut=s(DD);z3o=r(uut,"Wav2Vec2Model"),uut.forEach(t),Q3o=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),W3o=i(x),Pu=n(x,"LI",{});var y$e=s(Pu);Jfe=n(y$e,"STRONG",{});var but=s(Jfe);H3o=r(but,"wav2vec2-conformer"),but.forEach(t),U3o=r(y$e," \u2014 "),GD=n(y$e,"A",{href:!0});var vut=s(GD);J3o=r(vut,"Wav2Vec2ConformerModel"),vut.forEach(t),Y3o=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),K3o=i(x),Bu=n(x,"LI",{});var x$e=s(Bu);Yfe=n(x$e,"STRONG",{});var Fut=s(Yfe);Z3o=r(Fut,"wavlm"),Fut.forEach(t),ewo=r(x$e," \u2014 "),OD=n(x$e,"A",{href:!0});var Tut=s(OD);owo=r(Tut,"WavLMModel"),Tut.forEach(t),rwo=r(x$e," (WavLM model)"),x$e.forEach(t),two=i(x),Nu=n(x,"LI",{});var $$e=s(Nu);Kfe=n($$e,"STRONG",{});var Mut=s(Kfe);awo=r(Mut,"xglm"),Mut.forEach(t),nwo=r($$e," \u2014 "),VD=n($$e,"A",{href:!0});var Eut=s(VD);swo=r(Eut,"XGLMModel"),Eut.forEach(t),lwo=r($$e," (XGLM model)"),$$e.forEach(t),iwo=i(x),Iu=n(x,"LI",{});var k$e=s(Iu);Zfe=n(k$e,"STRONG",{});var Cut=s(Zfe);dwo=r(Cut,"xlm"),Cut.forEach(t),cwo=r(k$e," \u2014 "),XD=n(k$e,"A",{href:!0});var wut=s(XD);fwo=r(wut,"XLMModel"),wut.forEach(t),mwo=r(k$e," (XLM model)"),k$e.forEach(t),gwo=i(x),qu=n(x,"LI",{});var S$e=s(qu);eme=n(S$e,"STRONG",{});var Aut=s(eme);hwo=r(Aut,"xlm-prophetnet"),Aut.forEach(t),pwo=r(S$e," \u2014 "),zD=n(S$e,"A",{href:!0});var Lut=s(zD);_wo=r(Lut,"XLMProphetNetModel"),Lut.forEach(t),uwo=r(S$e," (XLM-ProphetNet model)"),S$e.forEach(t),bwo=i(x),ju=n(x,"LI",{});var R$e=s(ju);ome=n(R$e,"STRONG",{});var yut=s(ome);vwo=r(yut,"xlm-roberta"),yut.forEach(t),Fwo=r(R$e," \u2014 "),QD=n(R$e,"A",{href:!0});var xut=s(QD);Two=r(xut,"XLMRobertaModel"),xut.forEach(t),Mwo=r(R$e," (XLM-RoBERTa model)"),R$e.forEach(t),Ewo=i(x),Du=n(x,"LI",{});var P$e=s(Du);rme=n(P$e,"STRONG",{});var $ut=s(rme);Cwo=r($ut,"xlm-roberta-xl"),$ut.forEach(t),wwo=r(P$e," \u2014 "),WD=n(P$e,"A",{href:!0});var kut=s(WD);Awo=r(kut,"XLMRobertaXLModel"),kut.forEach(t),Lwo=r(P$e," (XLM-RoBERTa-XL model)"),P$e.forEach(t),ywo=i(x),Gu=n(x,"LI",{});var B$e=s(Gu);tme=n(B$e,"STRONG",{});var Sut=s(tme);xwo=r(Sut,"xlnet"),Sut.forEach(t),$wo=r(B$e," \u2014 "),HD=n(B$e,"A",{href:!0});var Rut=s(HD);kwo=r(Rut,"XLNetModel"),Rut.forEach(t),Swo=r(B$e," (XLNet model)"),B$e.forEach(t),Rwo=i(x),Ou=n(x,"LI",{});var N$e=s(Ou);ame=n(N$e,"STRONG",{});var Put=s(ame);Pwo=r(Put,"yolos"),Put.forEach(t),Bwo=r(N$e," \u2014 "),UD=n(N$e,"A",{href:!0});var But=s(UD);Nwo=r(But,"YolosModel"),But.forEach(t),Iwo=r(N$e," (YOLOS model)"),N$e.forEach(t),qwo=i(x),Vu=n(x,"LI",{});var I$e=s(Vu);nme=n(I$e,"STRONG",{});var Nut=s(nme);jwo=r(Nut,"yoso"),Nut.forEach(t),Dwo=r(I$e," \u2014 "),JD=n(I$e,"A",{href:!0});var Iut=s(JD);Gwo=r(Iut,"YosoModel"),Iut.forEach(t),Owo=r(I$e," (YOSO model)"),I$e.forEach(t),x.forEach(t),Vwo=i(sa),Xu=n(sa,"P",{});var q$e=s(Xu);Xwo=r(q$e,"The model is set in evaluation mode by default using "),sme=n(q$e,"CODE",{});var qut=s(sme);zwo=r(qut,"model.eval()"),qut.forEach(t),Qwo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(q$e,"CODE",{});var jut=s(lme);Wwo=r(jut,"model.train()"),jut.forEach(t),q$e.forEach(t),Hwo=i(sa),T(zu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),tXe=i(f),Vi=n(f,"H2",{class:!0});var dQe=s(Vi);Qu=n(dQe,"A",{id:!0,class:!0,href:!0});var Dut=s(Qu);ime=n(Dut,"SPAN",{});var Gut=s(ime);T(R7.$$.fragment,Gut),Gut.forEach(t),Dut.forEach(t),Uwo=i(dQe),dme=n(dQe,"SPAN",{});var Out=s(dme);Jwo=r(Out,"AutoModelForPreTraining"),Out.forEach(t),dQe.forEach(t),aXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(P7.$$.fragment,rl),Ywo=i(rl),Xi=n(rl,"P",{});var Lre=s(Xi);Kwo=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YD=n(Lre,"A",{href:!0});var Vut=s(YD);Zwo=r(Vut,"from_pretrained()"),Vut.forEach(t),eAo=r(Lre," class method or the "),KD=n(Lre,"A",{href:!0});var Xut=s(KD);oAo=r(Xut,"from_config()"),Xut.forEach(t),rAo=r(Lre,` class
method.`),Lre.forEach(t),tAo=i(rl),B7=n(rl,"P",{});var cQe=s(B7);aAo=r(cQe,"This class cannot be instantiated directly using "),cme=n(cQe,"CODE",{});var zut=s(cme);nAo=r(zut,"__init__()"),zut.forEach(t),sAo=r(cQe," (throws an error)."),cQe.forEach(t),lAo=i(rl),it=n(rl,"DIV",{class:!0});var iA=s(it);T(N7.$$.fragment,iA),iAo=i(iA),fme=n(iA,"P",{});var Qut=s(fme);dAo=r(Qut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qut.forEach(t),cAo=i(iA),zi=n(iA,"P",{});var yre=s(zi);fAo=r(yre,`Note:
Loading a model from its configuration file does `),mme=n(yre,"STRONG",{});var Wut=s(mme);mAo=r(Wut,"not"),Wut.forEach(t),gAo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(yre,"A",{href:!0});var Hut=s(ZD);hAo=r(Hut,"from_pretrained()"),Hut.forEach(t),pAo=r(yre," to load the model weights."),yre.forEach(t),_Ao=i(iA),T(Wu.$$.fragment,iA),iA.forEach(t),uAo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(I7.$$.fragment,la),bAo=i(la),gme=n(la,"P",{});var Uut=s(gme);vAo=r(Uut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uut.forEach(t),FAo=i(la),Ia=n(la,"P",{});var dA=s(Ia);TAo=r(dA,"The model class to instantiate is selected based on the "),hme=n(dA,"CODE",{});var Jut=s(hme);MAo=r(Jut,"model_type"),Jut.forEach(t),EAo=r(dA,` property of the config object (either
passed as an argument or loaded from `),pme=n(dA,"CODE",{});var Yut=s(pme);CAo=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),wAo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=n(dA,"CODE",{});var Kut=s(_me);AAo=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),LAo=r(dA,":"),dA.forEach(t),yAo=i(la),G=n(la,"UL",{});var O=s(G);Hu=n(O,"LI",{});var j$e=s(Hu);ume=n(j$e,"STRONG",{});var Zut=s(ume);xAo=r(Zut,"albert"),Zut.forEach(t),$Ao=r(j$e," \u2014 "),eG=n(j$e,"A",{href:!0});var e1t=s(eG);kAo=r(e1t,"AlbertForPreTraining"),e1t.forEach(t),SAo=r(j$e," (ALBERT model)"),j$e.forEach(t),RAo=i(O),Uu=n(O,"LI",{});var D$e=s(Uu);bme=n(D$e,"STRONG",{});var o1t=s(bme);PAo=r(o1t,"bart"),o1t.forEach(t),BAo=r(D$e," \u2014 "),oG=n(D$e,"A",{href:!0});var r1t=s(oG);NAo=r(r1t,"BartForConditionalGeneration"),r1t.forEach(t),IAo=r(D$e," (BART model)"),D$e.forEach(t),qAo=i(O),Ju=n(O,"LI",{});var G$e=s(Ju);vme=n(G$e,"STRONG",{});var t1t=s(vme);jAo=r(t1t,"bert"),t1t.forEach(t),DAo=r(G$e," \u2014 "),rG=n(G$e,"A",{href:!0});var a1t=s(rG);GAo=r(a1t,"BertForPreTraining"),a1t.forEach(t),OAo=r(G$e," (BERT model)"),G$e.forEach(t),VAo=i(O),Yu=n(O,"LI",{});var O$e=s(Yu);Fme=n(O$e,"STRONG",{});var n1t=s(Fme);XAo=r(n1t,"big_bird"),n1t.forEach(t),zAo=r(O$e," \u2014 "),tG=n(O$e,"A",{href:!0});var s1t=s(tG);QAo=r(s1t,"BigBirdForPreTraining"),s1t.forEach(t),WAo=r(O$e," (BigBird model)"),O$e.forEach(t),HAo=i(O),Ku=n(O,"LI",{});var V$e=s(Ku);Tme=n(V$e,"STRONG",{});var l1t=s(Tme);UAo=r(l1t,"bloom"),l1t.forEach(t),JAo=r(V$e," \u2014 "),aG=n(V$e,"A",{href:!0});var i1t=s(aG);YAo=r(i1t,"BloomForCausalLM"),i1t.forEach(t),KAo=r(V$e," (BLOOM model)"),V$e.forEach(t),ZAo=i(O),Zu=n(O,"LI",{});var X$e=s(Zu);Mme=n(X$e,"STRONG",{});var d1t=s(Mme);e6o=r(d1t,"camembert"),d1t.forEach(t),o6o=r(X$e," \u2014 "),nG=n(X$e,"A",{href:!0});var c1t=s(nG);r6o=r(c1t,"CamembertForMaskedLM"),c1t.forEach(t),t6o=r(X$e," (CamemBERT model)"),X$e.forEach(t),a6o=i(O),e1=n(O,"LI",{});var z$e=s(e1);Eme=n(z$e,"STRONG",{});var f1t=s(Eme);n6o=r(f1t,"ctrl"),f1t.forEach(t),s6o=r(z$e," \u2014 "),sG=n(z$e,"A",{href:!0});var m1t=s(sG);l6o=r(m1t,"CTRLLMHeadModel"),m1t.forEach(t),i6o=r(z$e," (CTRL model)"),z$e.forEach(t),d6o=i(O),o1=n(O,"LI",{});var Q$e=s(o1);Cme=n(Q$e,"STRONG",{});var g1t=s(Cme);c6o=r(g1t,"data2vec-text"),g1t.forEach(t),f6o=r(Q$e," \u2014 "),lG=n(Q$e,"A",{href:!0});var h1t=s(lG);m6o=r(h1t,"Data2VecTextForMaskedLM"),h1t.forEach(t),g6o=r(Q$e," (Data2VecText model)"),Q$e.forEach(t),h6o=i(O),r1=n(O,"LI",{});var W$e=s(r1);wme=n(W$e,"STRONG",{});var p1t=s(wme);p6o=r(p1t,"deberta"),p1t.forEach(t),_6o=r(W$e," \u2014 "),iG=n(W$e,"A",{href:!0});var _1t=s(iG);u6o=r(_1t,"DebertaForMaskedLM"),_1t.forEach(t),b6o=r(W$e," (DeBERTa model)"),W$e.forEach(t),v6o=i(O),t1=n(O,"LI",{});var H$e=s(t1);Ame=n(H$e,"STRONG",{});var u1t=s(Ame);F6o=r(u1t,"deberta-v2"),u1t.forEach(t),T6o=r(H$e," \u2014 "),dG=n(H$e,"A",{href:!0});var b1t=s(dG);M6o=r(b1t,"DebertaV2ForMaskedLM"),b1t.forEach(t),E6o=r(H$e," (DeBERTa-v2 model)"),H$e.forEach(t),C6o=i(O),a1=n(O,"LI",{});var U$e=s(a1);Lme=n(U$e,"STRONG",{});var v1t=s(Lme);w6o=r(v1t,"distilbert"),v1t.forEach(t),A6o=r(U$e," \u2014 "),cG=n(U$e,"A",{href:!0});var F1t=s(cG);L6o=r(F1t,"DistilBertForMaskedLM"),F1t.forEach(t),y6o=r(U$e," (DistilBERT model)"),U$e.forEach(t),x6o=i(O),n1=n(O,"LI",{});var J$e=s(n1);yme=n(J$e,"STRONG",{});var T1t=s(yme);$6o=r(T1t,"electra"),T1t.forEach(t),k6o=r(J$e," \u2014 "),fG=n(J$e,"A",{href:!0});var M1t=s(fG);S6o=r(M1t,"ElectraForPreTraining"),M1t.forEach(t),R6o=r(J$e," (ELECTRA model)"),J$e.forEach(t),P6o=i(O),s1=n(O,"LI",{});var Y$e=s(s1);xme=n(Y$e,"STRONG",{});var E1t=s(xme);B6o=r(E1t,"flaubert"),E1t.forEach(t),N6o=r(Y$e," \u2014 "),mG=n(Y$e,"A",{href:!0});var C1t=s(mG);I6o=r(C1t,"FlaubertWithLMHeadModel"),C1t.forEach(t),q6o=r(Y$e," (FlauBERT model)"),Y$e.forEach(t),j6o=i(O),l1=n(O,"LI",{});var K$e=s(l1);$me=n(K$e,"STRONG",{});var w1t=s($me);D6o=r(w1t,"flava"),w1t.forEach(t),G6o=r(K$e," \u2014 "),gG=n(K$e,"A",{href:!0});var A1t=s(gG);O6o=r(A1t,"FlavaForPreTraining"),A1t.forEach(t),V6o=r(K$e," (FLAVA model)"),K$e.forEach(t),X6o=i(O),i1=n(O,"LI",{});var Z$e=s(i1);kme=n(Z$e,"STRONG",{});var L1t=s(kme);z6o=r(L1t,"fnet"),L1t.forEach(t),Q6o=r(Z$e," \u2014 "),hG=n(Z$e,"A",{href:!0});var y1t=s(hG);W6o=r(y1t,"FNetForPreTraining"),y1t.forEach(t),H6o=r(Z$e," (FNet model)"),Z$e.forEach(t),U6o=i(O),d1=n(O,"LI",{});var eke=s(d1);Sme=n(eke,"STRONG",{});var x1t=s(Sme);J6o=r(x1t,"fsmt"),x1t.forEach(t),Y6o=r(eke," \u2014 "),pG=n(eke,"A",{href:!0});var $1t=s(pG);K6o=r($1t,"FSMTForConditionalGeneration"),$1t.forEach(t),Z6o=r(eke," (FairSeq Machine-Translation model)"),eke.forEach(t),e7o=i(O),c1=n(O,"LI",{});var oke=s(c1);Rme=n(oke,"STRONG",{});var k1t=s(Rme);o7o=r(k1t,"funnel"),k1t.forEach(t),r7o=r(oke," \u2014 "),_G=n(oke,"A",{href:!0});var S1t=s(_G);t7o=r(S1t,"FunnelForPreTraining"),S1t.forEach(t),a7o=r(oke," (Funnel Transformer model)"),oke.forEach(t),n7o=i(O),f1=n(O,"LI",{});var rke=s(f1);Pme=n(rke,"STRONG",{});var R1t=s(Pme);s7o=r(R1t,"gpt2"),R1t.forEach(t),l7o=r(rke," \u2014 "),uG=n(rke,"A",{href:!0});var P1t=s(uG);i7o=r(P1t,"GPT2LMHeadModel"),P1t.forEach(t),d7o=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),c7o=i(O),m1=n(O,"LI",{});var tke=s(m1);Bme=n(tke,"STRONG",{});var B1t=s(Bme);f7o=r(B1t,"ibert"),B1t.forEach(t),m7o=r(tke," \u2014 "),bG=n(tke,"A",{href:!0});var N1t=s(bG);g7o=r(N1t,"IBertForMaskedLM"),N1t.forEach(t),h7o=r(tke," (I-BERT model)"),tke.forEach(t),p7o=i(O),g1=n(O,"LI",{});var ake=s(g1);Nme=n(ake,"STRONG",{});var I1t=s(Nme);_7o=r(I1t,"layoutlm"),I1t.forEach(t),u7o=r(ake," \u2014 "),vG=n(ake,"A",{href:!0});var q1t=s(vG);b7o=r(q1t,"LayoutLMForMaskedLM"),q1t.forEach(t),v7o=r(ake," (LayoutLM model)"),ake.forEach(t),F7o=i(O),h1=n(O,"LI",{});var nke=s(h1);Ime=n(nke,"STRONG",{});var j1t=s(Ime);T7o=r(j1t,"longformer"),j1t.forEach(t),M7o=r(nke," \u2014 "),FG=n(nke,"A",{href:!0});var D1t=s(FG);E7o=r(D1t,"LongformerForMaskedLM"),D1t.forEach(t),C7o=r(nke," (Longformer model)"),nke.forEach(t),w7o=i(O),p1=n(O,"LI",{});var ske=s(p1);qme=n(ske,"STRONG",{});var G1t=s(qme);A7o=r(G1t,"lxmert"),G1t.forEach(t),L7o=r(ske," \u2014 "),TG=n(ske,"A",{href:!0});var O1t=s(TG);y7o=r(O1t,"LxmertForPreTraining"),O1t.forEach(t),x7o=r(ske," (LXMERT model)"),ske.forEach(t),$7o=i(O),_1=n(O,"LI",{});var lke=s(_1);jme=n(lke,"STRONG",{});var V1t=s(jme);k7o=r(V1t,"megatron-bert"),V1t.forEach(t),S7o=r(lke," \u2014 "),MG=n(lke,"A",{href:!0});var X1t=s(MG);R7o=r(X1t,"MegatronBertForPreTraining"),X1t.forEach(t),P7o=r(lke," (Megatron-BERT model)"),lke.forEach(t),B7o=i(O),u1=n(O,"LI",{});var ike=s(u1);Dme=n(ike,"STRONG",{});var z1t=s(Dme);N7o=r(z1t,"mobilebert"),z1t.forEach(t),I7o=r(ike," \u2014 "),EG=n(ike,"A",{href:!0});var Q1t=s(EG);q7o=r(Q1t,"MobileBertForPreTraining"),Q1t.forEach(t),j7o=r(ike," (MobileBERT model)"),ike.forEach(t),D7o=i(O),b1=n(O,"LI",{});var dke=s(b1);Gme=n(dke,"STRONG",{});var W1t=s(Gme);G7o=r(W1t,"mpnet"),W1t.forEach(t),O7o=r(dke," \u2014 "),CG=n(dke,"A",{href:!0});var H1t=s(CG);V7o=r(H1t,"MPNetForMaskedLM"),H1t.forEach(t),X7o=r(dke," (MPNet model)"),dke.forEach(t),z7o=i(O),v1=n(O,"LI",{});var cke=s(v1);Ome=n(cke,"STRONG",{});var U1t=s(Ome);Q7o=r(U1t,"mvp"),U1t.forEach(t),W7o=r(cke," \u2014 "),wG=n(cke,"A",{href:!0});var J1t=s(wG);H7o=r(J1t,"MvpForConditionalGeneration"),J1t.forEach(t),U7o=r(cke," (MVP model)"),cke.forEach(t),J7o=i(O),F1=n(O,"LI",{});var fke=s(F1);Vme=n(fke,"STRONG",{});var Y1t=s(Vme);Y7o=r(Y1t,"nezha"),Y1t.forEach(t),K7o=r(fke," \u2014 "),AG=n(fke,"A",{href:!0});var K1t=s(AG);Z7o=r(K1t,"NezhaForPreTraining"),K1t.forEach(t),eLo=r(fke," (Nezha model)"),fke.forEach(t),oLo=i(O),T1=n(O,"LI",{});var mke=s(T1);Xme=n(mke,"STRONG",{});var Z1t=s(Xme);rLo=r(Z1t,"openai-gpt"),Z1t.forEach(t),tLo=r(mke," \u2014 "),LG=n(mke,"A",{href:!0});var e2t=s(LG);aLo=r(e2t,"OpenAIGPTLMHeadModel"),e2t.forEach(t),nLo=r(mke," (OpenAI GPT model)"),mke.forEach(t),sLo=i(O),M1=n(O,"LI",{});var gke=s(M1);zme=n(gke,"STRONG",{});var o2t=s(zme);lLo=r(o2t,"retribert"),o2t.forEach(t),iLo=r(gke," \u2014 "),yG=n(gke,"A",{href:!0});var r2t=s(yG);dLo=r(r2t,"RetriBertModel"),r2t.forEach(t),cLo=r(gke," (RetriBERT model)"),gke.forEach(t),fLo=i(O),E1=n(O,"LI",{});var hke=s(E1);Qme=n(hke,"STRONG",{});var t2t=s(Qme);mLo=r(t2t,"roberta"),t2t.forEach(t),gLo=r(hke," \u2014 "),xG=n(hke,"A",{href:!0});var a2t=s(xG);hLo=r(a2t,"RobertaForMaskedLM"),a2t.forEach(t),pLo=r(hke," (RoBERTa model)"),hke.forEach(t),_Lo=i(O),C1=n(O,"LI",{});var pke=s(C1);Wme=n(pke,"STRONG",{});var n2t=s(Wme);uLo=r(n2t,"splinter"),n2t.forEach(t),bLo=r(pke," \u2014 "),$G=n(pke,"A",{href:!0});var s2t=s($G);vLo=r(s2t,"SplinterForPreTraining"),s2t.forEach(t),FLo=r(pke," (Splinter model)"),pke.forEach(t),TLo=i(O),w1=n(O,"LI",{});var _ke=s(w1);Hme=n(_ke,"STRONG",{});var l2t=s(Hme);MLo=r(l2t,"squeezebert"),l2t.forEach(t),ELo=r(_ke," \u2014 "),kG=n(_ke,"A",{href:!0});var i2t=s(kG);CLo=r(i2t,"SqueezeBertForMaskedLM"),i2t.forEach(t),wLo=r(_ke," (SqueezeBERT model)"),_ke.forEach(t),ALo=i(O),A1=n(O,"LI",{});var uke=s(A1);Ume=n(uke,"STRONG",{});var d2t=s(Ume);LLo=r(d2t,"t5"),d2t.forEach(t),yLo=r(uke," \u2014 "),SG=n(uke,"A",{href:!0});var c2t=s(SG);xLo=r(c2t,"T5ForConditionalGeneration"),c2t.forEach(t),$Lo=r(uke," (T5 model)"),uke.forEach(t),kLo=i(O),L1=n(O,"LI",{});var bke=s(L1);Jme=n(bke,"STRONG",{});var f2t=s(Jme);SLo=r(f2t,"tapas"),f2t.forEach(t),RLo=r(bke," \u2014 "),RG=n(bke,"A",{href:!0});var m2t=s(RG);PLo=r(m2t,"TapasForMaskedLM"),m2t.forEach(t),BLo=r(bke," (TAPAS model)"),bke.forEach(t),NLo=i(O),y1=n(O,"LI",{});var vke=s(y1);Yme=n(vke,"STRONG",{});var g2t=s(Yme);ILo=r(g2t,"transfo-xl"),g2t.forEach(t),qLo=r(vke," \u2014 "),PG=n(vke,"A",{href:!0});var h2t=s(PG);jLo=r(h2t,"TransfoXLLMHeadModel"),h2t.forEach(t),DLo=r(vke," (Transformer-XL model)"),vke.forEach(t),GLo=i(O),x1=n(O,"LI",{});var Fke=s(x1);Kme=n(Fke,"STRONG",{});var p2t=s(Kme);OLo=r(p2t,"unispeech"),p2t.forEach(t),VLo=r(Fke," \u2014 "),BG=n(Fke,"A",{href:!0});var _2t=s(BG);XLo=r(_2t,"UniSpeechForPreTraining"),_2t.forEach(t),zLo=r(Fke," (UniSpeech model)"),Fke.forEach(t),QLo=i(O),$1=n(O,"LI",{});var Tke=s($1);Zme=n(Tke,"STRONG",{});var u2t=s(Zme);WLo=r(u2t,"unispeech-sat"),u2t.forEach(t),HLo=r(Tke," \u2014 "),NG=n(Tke,"A",{href:!0});var b2t=s(NG);ULo=r(b2t,"UniSpeechSatForPreTraining"),b2t.forEach(t),JLo=r(Tke," (UniSpeechSat model)"),Tke.forEach(t),YLo=i(O),k1=n(O,"LI",{});var Mke=s(k1);ege=n(Mke,"STRONG",{});var v2t=s(ege);KLo=r(v2t,"visual_bert"),v2t.forEach(t),ZLo=r(Mke," \u2014 "),IG=n(Mke,"A",{href:!0});var F2t=s(IG);eyo=r(F2t,"VisualBertForPreTraining"),F2t.forEach(t),oyo=r(Mke," (VisualBERT model)"),Mke.forEach(t),ryo=i(O),S1=n(O,"LI",{});var Eke=s(S1);oge=n(Eke,"STRONG",{});var T2t=s(oge);tyo=r(T2t,"vit_mae"),T2t.forEach(t),ayo=r(Eke," \u2014 "),qG=n(Eke,"A",{href:!0});var M2t=s(qG);nyo=r(M2t,"ViTMAEForPreTraining"),M2t.forEach(t),syo=r(Eke," (ViTMAE model)"),Eke.forEach(t),lyo=i(O),R1=n(O,"LI",{});var Cke=s(R1);rge=n(Cke,"STRONG",{});var E2t=s(rge);iyo=r(E2t,"wav2vec2"),E2t.forEach(t),dyo=r(Cke," \u2014 "),jG=n(Cke,"A",{href:!0});var C2t=s(jG);cyo=r(C2t,"Wav2Vec2ForPreTraining"),C2t.forEach(t),fyo=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),myo=i(O),P1=n(O,"LI",{});var wke=s(P1);tge=n(wke,"STRONG",{});var w2t=s(tge);gyo=r(w2t,"wav2vec2-conformer"),w2t.forEach(t),hyo=r(wke," \u2014 "),DG=n(wke,"A",{href:!0});var A2t=s(DG);pyo=r(A2t,"Wav2Vec2ConformerForPreTraining"),A2t.forEach(t),_yo=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),uyo=i(O),B1=n(O,"LI",{});var Ake=s(B1);age=n(Ake,"STRONG",{});var L2t=s(age);byo=r(L2t,"xlm"),L2t.forEach(t),vyo=r(Ake," \u2014 "),GG=n(Ake,"A",{href:!0});var y2t=s(GG);Fyo=r(y2t,"XLMWithLMHeadModel"),y2t.forEach(t),Tyo=r(Ake," (XLM model)"),Ake.forEach(t),Myo=i(O),N1=n(O,"LI",{});var Lke=s(N1);nge=n(Lke,"STRONG",{});var x2t=s(nge);Eyo=r(x2t,"xlm-roberta"),x2t.forEach(t),Cyo=r(Lke," \u2014 "),OG=n(Lke,"A",{href:!0});var $2t=s(OG);wyo=r($2t,"XLMRobertaForMaskedLM"),$2t.forEach(t),Ayo=r(Lke," (XLM-RoBERTa model)"),Lke.forEach(t),Lyo=i(O),I1=n(O,"LI",{});var yke=s(I1);sge=n(yke,"STRONG",{});var k2t=s(sge);yyo=r(k2t,"xlm-roberta-xl"),k2t.forEach(t),xyo=r(yke," \u2014 "),VG=n(yke,"A",{href:!0});var S2t=s(VG);$yo=r(S2t,"XLMRobertaXLForMaskedLM"),S2t.forEach(t),kyo=r(yke," (XLM-RoBERTa-XL model)"),yke.forEach(t),Syo=i(O),q1=n(O,"LI",{});var xke=s(q1);lge=n(xke,"STRONG",{});var R2t=s(lge);Ryo=r(R2t,"xlnet"),R2t.forEach(t),Pyo=r(xke," \u2014 "),XG=n(xke,"A",{href:!0});var P2t=s(XG);Byo=r(P2t,"XLNetLMHeadModel"),P2t.forEach(t),Nyo=r(xke," (XLNet model)"),xke.forEach(t),O.forEach(t),Iyo=i(la),j1=n(la,"P",{});var $ke=s(j1);qyo=r($ke,"The model is set in evaluation mode by default using "),ige=n($ke,"CODE",{});var B2t=s(ige);jyo=r(B2t,"model.eval()"),B2t.forEach(t),Dyo=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n($ke,"CODE",{});var N2t=s(dge);Gyo=r(N2t,"model.train()"),N2t.forEach(t),$ke.forEach(t),Oyo=i(la),T(D1.$$.fragment,la),la.forEach(t),rl.forEach(t),nXe=i(f),Qi=n(f,"H2",{class:!0});var fQe=s(Qi);G1=n(fQe,"A",{id:!0,class:!0,href:!0});var I2t=s(G1);cge=n(I2t,"SPAN",{});var q2t=s(cge);T(q7.$$.fragment,q2t),q2t.forEach(t),I2t.forEach(t),Vyo=i(fQe),fge=n(fQe,"SPAN",{});var j2t=s(fge);Xyo=r(j2t,"AutoModelForCausalLM"),j2t.forEach(t),fQe.forEach(t),sXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(j7.$$.fragment,tl),zyo=i(tl),Wi=n(tl,"P",{});var xre=s(Wi);Qyo=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zG=n(xre,"A",{href:!0});var D2t=s(zG);Wyo=r(D2t,"from_pretrained()"),D2t.forEach(t),Hyo=r(xre," class method or the "),QG=n(xre,"A",{href:!0});var G2t=s(QG);Uyo=r(G2t,"from_config()"),G2t.forEach(t),Jyo=r(xre,` class
method.`),xre.forEach(t),Yyo=i(tl),D7=n(tl,"P",{});var mQe=s(D7);Kyo=r(mQe,"This class cannot be instantiated directly using "),mge=n(mQe,"CODE",{});var O2t=s(mge);Zyo=r(O2t,"__init__()"),O2t.forEach(t),exo=r(mQe," (throws an error)."),mQe.forEach(t),oxo=i(tl),dt=n(tl,"DIV",{class:!0});var cA=s(dt);T(G7.$$.fragment,cA),rxo=i(cA),gge=n(cA,"P",{});var V2t=s(gge);txo=r(V2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V2t.forEach(t),axo=i(cA),Hi=n(cA,"P",{});var $re=s(Hi);nxo=r($re,`Note:
Loading a model from its configuration file does `),hge=n($re,"STRONG",{});var X2t=s(hge);sxo=r(X2t,"not"),X2t.forEach(t),lxo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n($re,"A",{href:!0});var z2t=s(WG);ixo=r(z2t,"from_pretrained()"),z2t.forEach(t),dxo=r($re," to load the model weights."),$re.forEach(t),cxo=i(cA),T(O1.$$.fragment,cA),cA.forEach(t),fxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(O7.$$.fragment,ia),mxo=i(ia),pge=n(ia,"P",{});var Q2t=s(pge);gxo=r(Q2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q2t.forEach(t),hxo=i(ia),qa=n(ia,"P",{});var fA=s(qa);pxo=r(fA,"The model class to instantiate is selected based on the "),_ge=n(fA,"CODE",{});var W2t=s(_ge);_xo=r(W2t,"model_type"),W2t.forEach(t),uxo=r(fA,` property of the config object (either
passed as an argument or loaded from `),uge=n(fA,"CODE",{});var H2t=s(uge);bxo=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),vxo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(fA,"CODE",{});var U2t=s(bge);Fxo=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),Txo=r(fA,":"),fA.forEach(t),Mxo=i(ia),z=n(ia,"UL",{});var Q=s(z);V1=n(Q,"LI",{});var kke=s(V1);vge=n(kke,"STRONG",{});var J2t=s(vge);Exo=r(J2t,"bart"),J2t.forEach(t),Cxo=r(kke," \u2014 "),HG=n(kke,"A",{href:!0});var Y2t=s(HG);wxo=r(Y2t,"BartForCausalLM"),Y2t.forEach(t),Axo=r(kke," (BART model)"),kke.forEach(t),Lxo=i(Q),X1=n(Q,"LI",{});var Ske=s(X1);Fge=n(Ske,"STRONG",{});var K2t=s(Fge);yxo=r(K2t,"bert"),K2t.forEach(t),xxo=r(Ske," \u2014 "),UG=n(Ske,"A",{href:!0});var Z2t=s(UG);$xo=r(Z2t,"BertLMHeadModel"),Z2t.forEach(t),kxo=r(Ske," (BERT model)"),Ske.forEach(t),Sxo=i(Q),z1=n(Q,"LI",{});var Rke=s(z1);Tge=n(Rke,"STRONG",{});var ebt=s(Tge);Rxo=r(ebt,"bert-generation"),ebt.forEach(t),Pxo=r(Rke," \u2014 "),JG=n(Rke,"A",{href:!0});var obt=s(JG);Bxo=r(obt,"BertGenerationDecoder"),obt.forEach(t),Nxo=r(Rke," (Bert Generation model)"),Rke.forEach(t),Ixo=i(Q),Q1=n(Q,"LI",{});var Pke=s(Q1);Mge=n(Pke,"STRONG",{});var rbt=s(Mge);qxo=r(rbt,"big_bird"),rbt.forEach(t),jxo=r(Pke," \u2014 "),YG=n(Pke,"A",{href:!0});var tbt=s(YG);Dxo=r(tbt,"BigBirdForCausalLM"),tbt.forEach(t),Gxo=r(Pke," (BigBird model)"),Pke.forEach(t),Oxo=i(Q),W1=n(Q,"LI",{});var Bke=s(W1);Ege=n(Bke,"STRONG",{});var abt=s(Ege);Vxo=r(abt,"bigbird_pegasus"),abt.forEach(t),Xxo=r(Bke," \u2014 "),KG=n(Bke,"A",{href:!0});var nbt=s(KG);zxo=r(nbt,"BigBirdPegasusForCausalLM"),nbt.forEach(t),Qxo=r(Bke," (BigBird-Pegasus model)"),Bke.forEach(t),Wxo=i(Q),H1=n(Q,"LI",{});var Nke=s(H1);Cge=n(Nke,"STRONG",{});var sbt=s(Cge);Hxo=r(sbt,"blenderbot"),sbt.forEach(t),Uxo=r(Nke," \u2014 "),ZG=n(Nke,"A",{href:!0});var lbt=s(ZG);Jxo=r(lbt,"BlenderbotForCausalLM"),lbt.forEach(t),Yxo=r(Nke," (Blenderbot model)"),Nke.forEach(t),Kxo=i(Q),U1=n(Q,"LI",{});var Ike=s(U1);wge=n(Ike,"STRONG",{});var ibt=s(wge);Zxo=r(ibt,"blenderbot-small"),ibt.forEach(t),e$o=r(Ike," \u2014 "),eO=n(Ike,"A",{href:!0});var dbt=s(eO);o$o=r(dbt,"BlenderbotSmallForCausalLM"),dbt.forEach(t),r$o=r(Ike," (BlenderbotSmall model)"),Ike.forEach(t),t$o=i(Q),J1=n(Q,"LI",{});var qke=s(J1);Age=n(qke,"STRONG",{});var cbt=s(Age);a$o=r(cbt,"bloom"),cbt.forEach(t),n$o=r(qke," \u2014 "),oO=n(qke,"A",{href:!0});var fbt=s(oO);s$o=r(fbt,"BloomForCausalLM"),fbt.forEach(t),l$o=r(qke," (BLOOM model)"),qke.forEach(t),i$o=i(Q),Y1=n(Q,"LI",{});var jke=s(Y1);Lge=n(jke,"STRONG",{});var mbt=s(Lge);d$o=r(mbt,"camembert"),mbt.forEach(t),c$o=r(jke," \u2014 "),rO=n(jke,"A",{href:!0});var gbt=s(rO);f$o=r(gbt,"CamembertForCausalLM"),gbt.forEach(t),m$o=r(jke," (CamemBERT model)"),jke.forEach(t),g$o=i(Q),K1=n(Q,"LI",{});var Dke=s(K1);yge=n(Dke,"STRONG",{});var hbt=s(yge);h$o=r(hbt,"codegen"),hbt.forEach(t),p$o=r(Dke," \u2014 "),tO=n(Dke,"A",{href:!0});var pbt=s(tO);_$o=r(pbt,"CodeGenForCausalLM"),pbt.forEach(t),u$o=r(Dke," (CodeGen model)"),Dke.forEach(t),b$o=i(Q),Z1=n(Q,"LI",{});var Gke=s(Z1);xge=n(Gke,"STRONG",{});var _bt=s(xge);v$o=r(_bt,"ctrl"),_bt.forEach(t),F$o=r(Gke," \u2014 "),aO=n(Gke,"A",{href:!0});var ubt=s(aO);T$o=r(ubt,"CTRLLMHeadModel"),ubt.forEach(t),M$o=r(Gke," (CTRL model)"),Gke.forEach(t),E$o=i(Q),e2=n(Q,"LI",{});var Oke=s(e2);$ge=n(Oke,"STRONG",{});var bbt=s($ge);C$o=r(bbt,"data2vec-text"),bbt.forEach(t),w$o=r(Oke," \u2014 "),nO=n(Oke,"A",{href:!0});var vbt=s(nO);A$o=r(vbt,"Data2VecTextForCausalLM"),vbt.forEach(t),L$o=r(Oke," (Data2VecText model)"),Oke.forEach(t),y$o=i(Q),o2=n(Q,"LI",{});var Vke=s(o2);kge=n(Vke,"STRONG",{});var Fbt=s(kge);x$o=r(Fbt,"electra"),Fbt.forEach(t),$$o=r(Vke," \u2014 "),sO=n(Vke,"A",{href:!0});var Tbt=s(sO);k$o=r(Tbt,"ElectraForCausalLM"),Tbt.forEach(t),S$o=r(Vke," (ELECTRA model)"),Vke.forEach(t),R$o=i(Q),r2=n(Q,"LI",{});var Xke=s(r2);Sge=n(Xke,"STRONG",{});var Mbt=s(Sge);P$o=r(Mbt,"gpt2"),Mbt.forEach(t),B$o=r(Xke," \u2014 "),lO=n(Xke,"A",{href:!0});var Ebt=s(lO);N$o=r(Ebt,"GPT2LMHeadModel"),Ebt.forEach(t),I$o=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),q$o=i(Q),t2=n(Q,"LI",{});var zke=s(t2);Rge=n(zke,"STRONG",{});var Cbt=s(Rge);j$o=r(Cbt,"gpt_neo"),Cbt.forEach(t),D$o=r(zke," \u2014 "),iO=n(zke,"A",{href:!0});var wbt=s(iO);G$o=r(wbt,"GPTNeoForCausalLM"),wbt.forEach(t),O$o=r(zke," (GPT Neo model)"),zke.forEach(t),V$o=i(Q),a2=n(Q,"LI",{});var Qke=s(a2);Pge=n(Qke,"STRONG",{});var Abt=s(Pge);X$o=r(Abt,"gpt_neox"),Abt.forEach(t),z$o=r(Qke," \u2014 "),dO=n(Qke,"A",{href:!0});var Lbt=s(dO);Q$o=r(Lbt,"GPTNeoXForCausalLM"),Lbt.forEach(t),W$o=r(Qke," (GPT NeoX model)"),Qke.forEach(t),H$o=i(Q),n2=n(Q,"LI",{});var Wke=s(n2);Bge=n(Wke,"STRONG",{});var ybt=s(Bge);U$o=r(ybt,"gptj"),ybt.forEach(t),J$o=r(Wke," \u2014 "),cO=n(Wke,"A",{href:!0});var xbt=s(cO);Y$o=r(xbt,"GPTJForCausalLM"),xbt.forEach(t),K$o=r(Wke," (GPT-J model)"),Wke.forEach(t),Z$o=i(Q),s2=n(Q,"LI",{});var Hke=s(s2);Nge=n(Hke,"STRONG",{});var $bt=s(Nge);eko=r($bt,"marian"),$bt.forEach(t),oko=r(Hke," \u2014 "),fO=n(Hke,"A",{href:!0});var kbt=s(fO);rko=r(kbt,"MarianForCausalLM"),kbt.forEach(t),tko=r(Hke," (Marian model)"),Hke.forEach(t),ako=i(Q),l2=n(Q,"LI",{});var Uke=s(l2);Ige=n(Uke,"STRONG",{});var Sbt=s(Ige);nko=r(Sbt,"mbart"),Sbt.forEach(t),sko=r(Uke," \u2014 "),mO=n(Uke,"A",{href:!0});var Rbt=s(mO);lko=r(Rbt,"MBartForCausalLM"),Rbt.forEach(t),iko=r(Uke," (mBART model)"),Uke.forEach(t),dko=i(Q),i2=n(Q,"LI",{});var Jke=s(i2);qge=n(Jke,"STRONG",{});var Pbt=s(qge);cko=r(Pbt,"megatron-bert"),Pbt.forEach(t),fko=r(Jke," \u2014 "),gO=n(Jke,"A",{href:!0});var Bbt=s(gO);mko=r(Bbt,"MegatronBertForCausalLM"),Bbt.forEach(t),gko=r(Jke," (Megatron-BERT model)"),Jke.forEach(t),hko=i(Q),d2=n(Q,"LI",{});var Yke=s(d2);jge=n(Yke,"STRONG",{});var Nbt=s(jge);pko=r(Nbt,"mvp"),Nbt.forEach(t),_ko=r(Yke," \u2014 "),hO=n(Yke,"A",{href:!0});var Ibt=s(hO);uko=r(Ibt,"MvpForCausalLM"),Ibt.forEach(t),bko=r(Yke," (MVP model)"),Yke.forEach(t),vko=i(Q),c2=n(Q,"LI",{});var Kke=s(c2);Dge=n(Kke,"STRONG",{});var qbt=s(Dge);Fko=r(qbt,"openai-gpt"),qbt.forEach(t),Tko=r(Kke," \u2014 "),pO=n(Kke,"A",{href:!0});var jbt=s(pO);Mko=r(jbt,"OpenAIGPTLMHeadModel"),jbt.forEach(t),Eko=r(Kke," (OpenAI GPT model)"),Kke.forEach(t),Cko=i(Q),f2=n(Q,"LI",{});var Zke=s(f2);Gge=n(Zke,"STRONG",{});var Dbt=s(Gge);wko=r(Dbt,"opt"),Dbt.forEach(t),Ako=r(Zke," \u2014 "),_O=n(Zke,"A",{href:!0});var Gbt=s(_O);Lko=r(Gbt,"OPTForCausalLM"),Gbt.forEach(t),yko=r(Zke," (OPT model)"),Zke.forEach(t),xko=i(Q),m2=n(Q,"LI",{});var eSe=s(m2);Oge=n(eSe,"STRONG",{});var Obt=s(Oge);$ko=r(Obt,"pegasus"),Obt.forEach(t),kko=r(eSe," \u2014 "),uO=n(eSe,"A",{href:!0});var Vbt=s(uO);Sko=r(Vbt,"PegasusForCausalLM"),Vbt.forEach(t),Rko=r(eSe," (Pegasus model)"),eSe.forEach(t),Pko=i(Q),g2=n(Q,"LI",{});var oSe=s(g2);Vge=n(oSe,"STRONG",{});var Xbt=s(Vge);Bko=r(Xbt,"plbart"),Xbt.forEach(t),Nko=r(oSe," \u2014 "),bO=n(oSe,"A",{href:!0});var zbt=s(bO);Iko=r(zbt,"PLBartForCausalLM"),zbt.forEach(t),qko=r(oSe," (PLBart model)"),oSe.forEach(t),jko=i(Q),h2=n(Q,"LI",{});var rSe=s(h2);Xge=n(rSe,"STRONG",{});var Qbt=s(Xge);Dko=r(Qbt,"prophetnet"),Qbt.forEach(t),Gko=r(rSe," \u2014 "),vO=n(rSe,"A",{href:!0});var Wbt=s(vO);Oko=r(Wbt,"ProphetNetForCausalLM"),Wbt.forEach(t),Vko=r(rSe," (ProphetNet model)"),rSe.forEach(t),Xko=i(Q),p2=n(Q,"LI",{});var tSe=s(p2);zge=n(tSe,"STRONG",{});var Hbt=s(zge);zko=r(Hbt,"qdqbert"),Hbt.forEach(t),Qko=r(tSe," \u2014 "),FO=n(tSe,"A",{href:!0});var Ubt=s(FO);Wko=r(Ubt,"QDQBertLMHeadModel"),Ubt.forEach(t),Hko=r(tSe," (QDQBert model)"),tSe.forEach(t),Uko=i(Q),_2=n(Q,"LI",{});var aSe=s(_2);Qge=n(aSe,"STRONG",{});var Jbt=s(Qge);Jko=r(Jbt,"reformer"),Jbt.forEach(t),Yko=r(aSe," \u2014 "),TO=n(aSe,"A",{href:!0});var Ybt=s(TO);Kko=r(Ybt,"ReformerModelWithLMHead"),Ybt.forEach(t),Zko=r(aSe," (Reformer model)"),aSe.forEach(t),eSo=i(Q),u2=n(Q,"LI",{});var nSe=s(u2);Wge=n(nSe,"STRONG",{});var Kbt=s(Wge);oSo=r(Kbt,"rembert"),Kbt.forEach(t),rSo=r(nSe," \u2014 "),MO=n(nSe,"A",{href:!0});var Zbt=s(MO);tSo=r(Zbt,"RemBertForCausalLM"),Zbt.forEach(t),aSo=r(nSe," (RemBERT model)"),nSe.forEach(t),nSo=i(Q),b2=n(Q,"LI",{});var sSe=s(b2);Hge=n(sSe,"STRONG",{});var evt=s(Hge);sSo=r(evt,"roberta"),evt.forEach(t),lSo=r(sSe," \u2014 "),EO=n(sSe,"A",{href:!0});var ovt=s(EO);iSo=r(ovt,"RobertaForCausalLM"),ovt.forEach(t),dSo=r(sSe," (RoBERTa model)"),sSe.forEach(t),cSo=i(Q),v2=n(Q,"LI",{});var lSe=s(v2);Uge=n(lSe,"STRONG",{});var rvt=s(Uge);fSo=r(rvt,"roformer"),rvt.forEach(t),mSo=r(lSe," \u2014 "),CO=n(lSe,"A",{href:!0});var tvt=s(CO);gSo=r(tvt,"RoFormerForCausalLM"),tvt.forEach(t),hSo=r(lSe," (RoFormer model)"),lSe.forEach(t),pSo=i(Q),F2=n(Q,"LI",{});var iSe=s(F2);Jge=n(iSe,"STRONG",{});var avt=s(Jge);_So=r(avt,"speech_to_text_2"),avt.forEach(t),uSo=r(iSe," \u2014 "),wO=n(iSe,"A",{href:!0});var nvt=s(wO);bSo=r(nvt,"Speech2Text2ForCausalLM"),nvt.forEach(t),vSo=r(iSe," (Speech2Text2 model)"),iSe.forEach(t),FSo=i(Q),T2=n(Q,"LI",{});var dSe=s(T2);Yge=n(dSe,"STRONG",{});var svt=s(Yge);TSo=r(svt,"transfo-xl"),svt.forEach(t),MSo=r(dSe," \u2014 "),AO=n(dSe,"A",{href:!0});var lvt=s(AO);ESo=r(lvt,"TransfoXLLMHeadModel"),lvt.forEach(t),CSo=r(dSe," (Transformer-XL model)"),dSe.forEach(t),wSo=i(Q),M2=n(Q,"LI",{});var cSe=s(M2);Kge=n(cSe,"STRONG",{});var ivt=s(Kge);ASo=r(ivt,"trocr"),ivt.forEach(t),LSo=r(cSe," \u2014 "),LO=n(cSe,"A",{href:!0});var dvt=s(LO);ySo=r(dvt,"TrOCRForCausalLM"),dvt.forEach(t),xSo=r(cSe," (TrOCR model)"),cSe.forEach(t),$So=i(Q),E2=n(Q,"LI",{});var fSe=s(E2);Zge=n(fSe,"STRONG",{});var cvt=s(Zge);kSo=r(cvt,"xglm"),cvt.forEach(t),SSo=r(fSe," \u2014 "),yO=n(fSe,"A",{href:!0});var fvt=s(yO);RSo=r(fvt,"XGLMForCausalLM"),fvt.forEach(t),PSo=r(fSe," (XGLM model)"),fSe.forEach(t),BSo=i(Q),C2=n(Q,"LI",{});var mSe=s(C2);ehe=n(mSe,"STRONG",{});var mvt=s(ehe);NSo=r(mvt,"xlm"),mvt.forEach(t),ISo=r(mSe," \u2014 "),xO=n(mSe,"A",{href:!0});var gvt=s(xO);qSo=r(gvt,"XLMWithLMHeadModel"),gvt.forEach(t),jSo=r(mSe," (XLM model)"),mSe.forEach(t),DSo=i(Q),w2=n(Q,"LI",{});var gSe=s(w2);ohe=n(gSe,"STRONG",{});var hvt=s(ohe);GSo=r(hvt,"xlm-prophetnet"),hvt.forEach(t),OSo=r(gSe," \u2014 "),$O=n(gSe,"A",{href:!0});var pvt=s($O);VSo=r(pvt,"XLMProphetNetForCausalLM"),pvt.forEach(t),XSo=r(gSe," (XLM-ProphetNet model)"),gSe.forEach(t),zSo=i(Q),A2=n(Q,"LI",{});var hSe=s(A2);rhe=n(hSe,"STRONG",{});var _vt=s(rhe);QSo=r(_vt,"xlm-roberta"),_vt.forEach(t),WSo=r(hSe," \u2014 "),kO=n(hSe,"A",{href:!0});var uvt=s(kO);HSo=r(uvt,"XLMRobertaForCausalLM"),uvt.forEach(t),USo=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),JSo=i(Q),L2=n(Q,"LI",{});var pSe=s(L2);the=n(pSe,"STRONG",{});var bvt=s(the);YSo=r(bvt,"xlm-roberta-xl"),bvt.forEach(t),KSo=r(pSe," \u2014 "),SO=n(pSe,"A",{href:!0});var vvt=s(SO);ZSo=r(vvt,"XLMRobertaXLForCausalLM"),vvt.forEach(t),eRo=r(pSe," (XLM-RoBERTa-XL model)"),pSe.forEach(t),oRo=i(Q),y2=n(Q,"LI",{});var _Se=s(y2);ahe=n(_Se,"STRONG",{});var Fvt=s(ahe);rRo=r(Fvt,"xlnet"),Fvt.forEach(t),tRo=r(_Se," \u2014 "),RO=n(_Se,"A",{href:!0});var Tvt=s(RO);aRo=r(Tvt,"XLNetLMHeadModel"),Tvt.forEach(t),nRo=r(_Se," (XLNet model)"),_Se.forEach(t),Q.forEach(t),sRo=i(ia),x2=n(ia,"P",{});var uSe=s(x2);lRo=r(uSe,"The model is set in evaluation mode by default using "),nhe=n(uSe,"CODE",{});var Mvt=s(nhe);iRo=r(Mvt,"model.eval()"),Mvt.forEach(t),dRo=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(uSe,"CODE",{});var Evt=s(she);cRo=r(Evt,"model.train()"),Evt.forEach(t),uSe.forEach(t),fRo=i(ia),T($2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),lXe=i(f),Ui=n(f,"H2",{class:!0});var gQe=s(Ui);k2=n(gQe,"A",{id:!0,class:!0,href:!0});var Cvt=s(k2);lhe=n(Cvt,"SPAN",{});var wvt=s(lhe);T(V7.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),mRo=i(gQe),ihe=n(gQe,"SPAN",{});var Avt=s(ihe);gRo=r(Avt,"AutoModelForMaskedLM"),Avt.forEach(t),gQe.forEach(t),iXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(X7.$$.fragment,al),hRo=i(al),Ji=n(al,"P",{});var kre=s(Ji);pRo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PO=n(kre,"A",{href:!0});var Lvt=s(PO);_Ro=r(Lvt,"from_pretrained()"),Lvt.forEach(t),uRo=r(kre," class method or the "),BO=n(kre,"A",{href:!0});var yvt=s(BO);bRo=r(yvt,"from_config()"),yvt.forEach(t),vRo=r(kre,` class
method.`),kre.forEach(t),FRo=i(al),z7=n(al,"P",{});var hQe=s(z7);TRo=r(hQe,"This class cannot be instantiated directly using "),dhe=n(hQe,"CODE",{});var xvt=s(dhe);MRo=r(xvt,"__init__()"),xvt.forEach(t),ERo=r(hQe," (throws an error)."),hQe.forEach(t),CRo=i(al),ct=n(al,"DIV",{class:!0});var mA=s(ct);T(Q7.$$.fragment,mA),wRo=i(mA),che=n(mA,"P",{});var $vt=s(che);ARo=r($vt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$vt.forEach(t),LRo=i(mA),Yi=n(mA,"P",{});var Sre=s(Yi);yRo=r(Sre,`Note:
Loading a model from its configuration file does `),fhe=n(Sre,"STRONG",{});var kvt=s(fhe);xRo=r(kvt,"not"),kvt.forEach(t),$Ro=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(Sre,"A",{href:!0});var Svt=s(NO);kRo=r(Svt,"from_pretrained()"),Svt.forEach(t),SRo=r(Sre," to load the model weights."),Sre.forEach(t),RRo=i(mA),T(S2.$$.fragment,mA),mA.forEach(t),PRo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(W7.$$.fragment,da),BRo=i(da),mhe=n(da,"P",{});var Rvt=s(mhe);NRo=r(Rvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rvt.forEach(t),IRo=i(da),ja=n(da,"P",{});var gA=s(ja);qRo=r(gA,"The model class to instantiate is selected based on the "),ghe=n(gA,"CODE",{});var Pvt=s(ghe);jRo=r(Pvt,"model_type"),Pvt.forEach(t),DRo=r(gA,` property of the config object (either
passed as an argument or loaded from `),hhe=n(gA,"CODE",{});var Bvt=s(hhe);GRo=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),ORo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(gA,"CODE",{});var Nvt=s(phe);VRo=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),XRo=r(gA,":"),gA.forEach(t),zRo=i(da),W=n(da,"UL",{});var H=s(W);R2=n(H,"LI",{});var bSe=s(R2);_he=n(bSe,"STRONG",{});var Ivt=s(_he);QRo=r(Ivt,"albert"),Ivt.forEach(t),WRo=r(bSe," \u2014 "),IO=n(bSe,"A",{href:!0});var qvt=s(IO);HRo=r(qvt,"AlbertForMaskedLM"),qvt.forEach(t),URo=r(bSe," (ALBERT model)"),bSe.forEach(t),JRo=i(H),P2=n(H,"LI",{});var vSe=s(P2);uhe=n(vSe,"STRONG",{});var jvt=s(uhe);YRo=r(jvt,"bart"),jvt.forEach(t),KRo=r(vSe," \u2014 "),qO=n(vSe,"A",{href:!0});var Dvt=s(qO);ZRo=r(Dvt,"BartForConditionalGeneration"),Dvt.forEach(t),ePo=r(vSe," (BART model)"),vSe.forEach(t),oPo=i(H),B2=n(H,"LI",{});var FSe=s(B2);bhe=n(FSe,"STRONG",{});var Gvt=s(bhe);rPo=r(Gvt,"bert"),Gvt.forEach(t),tPo=r(FSe," \u2014 "),jO=n(FSe,"A",{href:!0});var Ovt=s(jO);aPo=r(Ovt,"BertForMaskedLM"),Ovt.forEach(t),nPo=r(FSe," (BERT model)"),FSe.forEach(t),sPo=i(H),N2=n(H,"LI",{});var TSe=s(N2);vhe=n(TSe,"STRONG",{});var Vvt=s(vhe);lPo=r(Vvt,"big_bird"),Vvt.forEach(t),iPo=r(TSe," \u2014 "),DO=n(TSe,"A",{href:!0});var Xvt=s(DO);dPo=r(Xvt,"BigBirdForMaskedLM"),Xvt.forEach(t),cPo=r(TSe," (BigBird model)"),TSe.forEach(t),fPo=i(H),I2=n(H,"LI",{});var MSe=s(I2);Fhe=n(MSe,"STRONG",{});var zvt=s(Fhe);mPo=r(zvt,"camembert"),zvt.forEach(t),gPo=r(MSe," \u2014 "),GO=n(MSe,"A",{href:!0});var Qvt=s(GO);hPo=r(Qvt,"CamembertForMaskedLM"),Qvt.forEach(t),pPo=r(MSe," (CamemBERT model)"),MSe.forEach(t),_Po=i(H),q2=n(H,"LI",{});var ESe=s(q2);The=n(ESe,"STRONG",{});var Wvt=s(The);uPo=r(Wvt,"convbert"),Wvt.forEach(t),bPo=r(ESe," \u2014 "),OO=n(ESe,"A",{href:!0});var Hvt=s(OO);vPo=r(Hvt,"ConvBertForMaskedLM"),Hvt.forEach(t),FPo=r(ESe," (ConvBERT model)"),ESe.forEach(t),TPo=i(H),j2=n(H,"LI",{});var CSe=s(j2);Mhe=n(CSe,"STRONG",{});var Uvt=s(Mhe);MPo=r(Uvt,"data2vec-text"),Uvt.forEach(t),EPo=r(CSe," \u2014 "),VO=n(CSe,"A",{href:!0});var Jvt=s(VO);CPo=r(Jvt,"Data2VecTextForMaskedLM"),Jvt.forEach(t),wPo=r(CSe," (Data2VecText model)"),CSe.forEach(t),APo=i(H),D2=n(H,"LI",{});var wSe=s(D2);Ehe=n(wSe,"STRONG",{});var Yvt=s(Ehe);LPo=r(Yvt,"deberta"),Yvt.forEach(t),yPo=r(wSe," \u2014 "),XO=n(wSe,"A",{href:!0});var Kvt=s(XO);xPo=r(Kvt,"DebertaForMaskedLM"),Kvt.forEach(t),$Po=r(wSe," (DeBERTa model)"),wSe.forEach(t),kPo=i(H),G2=n(H,"LI",{});var ASe=s(G2);Che=n(ASe,"STRONG",{});var Zvt=s(Che);SPo=r(Zvt,"deberta-v2"),Zvt.forEach(t),RPo=r(ASe," \u2014 "),zO=n(ASe,"A",{href:!0});var e5t=s(zO);PPo=r(e5t,"DebertaV2ForMaskedLM"),e5t.forEach(t),BPo=r(ASe," (DeBERTa-v2 model)"),ASe.forEach(t),NPo=i(H),O2=n(H,"LI",{});var LSe=s(O2);whe=n(LSe,"STRONG",{});var o5t=s(whe);IPo=r(o5t,"distilbert"),o5t.forEach(t),qPo=r(LSe," \u2014 "),QO=n(LSe,"A",{href:!0});var r5t=s(QO);jPo=r(r5t,"DistilBertForMaskedLM"),r5t.forEach(t),DPo=r(LSe," (DistilBERT model)"),LSe.forEach(t),GPo=i(H),V2=n(H,"LI",{});var ySe=s(V2);Ahe=n(ySe,"STRONG",{});var t5t=s(Ahe);OPo=r(t5t,"electra"),t5t.forEach(t),VPo=r(ySe," \u2014 "),WO=n(ySe,"A",{href:!0});var a5t=s(WO);XPo=r(a5t,"ElectraForMaskedLM"),a5t.forEach(t),zPo=r(ySe," (ELECTRA model)"),ySe.forEach(t),QPo=i(H),X2=n(H,"LI",{});var xSe=s(X2);Lhe=n(xSe,"STRONG",{});var n5t=s(Lhe);WPo=r(n5t,"flaubert"),n5t.forEach(t),HPo=r(xSe," \u2014 "),HO=n(xSe,"A",{href:!0});var s5t=s(HO);UPo=r(s5t,"FlaubertWithLMHeadModel"),s5t.forEach(t),JPo=r(xSe," (FlauBERT model)"),xSe.forEach(t),YPo=i(H),z2=n(H,"LI",{});var $Se=s(z2);yhe=n($Se,"STRONG",{});var l5t=s(yhe);KPo=r(l5t,"fnet"),l5t.forEach(t),ZPo=r($Se," \u2014 "),UO=n($Se,"A",{href:!0});var i5t=s(UO);eBo=r(i5t,"FNetForMaskedLM"),i5t.forEach(t),oBo=r($Se," (FNet model)"),$Se.forEach(t),rBo=i(H),Q2=n(H,"LI",{});var kSe=s(Q2);xhe=n(kSe,"STRONG",{});var d5t=s(xhe);tBo=r(d5t,"funnel"),d5t.forEach(t),aBo=r(kSe," \u2014 "),JO=n(kSe,"A",{href:!0});var c5t=s(JO);nBo=r(c5t,"FunnelForMaskedLM"),c5t.forEach(t),sBo=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),lBo=i(H),W2=n(H,"LI",{});var SSe=s(W2);$he=n(SSe,"STRONG",{});var f5t=s($he);iBo=r(f5t,"ibert"),f5t.forEach(t),dBo=r(SSe," \u2014 "),YO=n(SSe,"A",{href:!0});var m5t=s(YO);cBo=r(m5t,"IBertForMaskedLM"),m5t.forEach(t),fBo=r(SSe," (I-BERT model)"),SSe.forEach(t),mBo=i(H),H2=n(H,"LI",{});var RSe=s(H2);khe=n(RSe,"STRONG",{});var g5t=s(khe);gBo=r(g5t,"layoutlm"),g5t.forEach(t),hBo=r(RSe," \u2014 "),KO=n(RSe,"A",{href:!0});var h5t=s(KO);pBo=r(h5t,"LayoutLMForMaskedLM"),h5t.forEach(t),_Bo=r(RSe," (LayoutLM model)"),RSe.forEach(t),uBo=i(H),U2=n(H,"LI",{});var PSe=s(U2);She=n(PSe,"STRONG",{});var p5t=s(She);bBo=r(p5t,"longformer"),p5t.forEach(t),vBo=r(PSe," \u2014 "),ZO=n(PSe,"A",{href:!0});var _5t=s(ZO);FBo=r(_5t,"LongformerForMaskedLM"),_5t.forEach(t),TBo=r(PSe," (Longformer model)"),PSe.forEach(t),MBo=i(H),J2=n(H,"LI",{});var BSe=s(J2);Rhe=n(BSe,"STRONG",{});var u5t=s(Rhe);EBo=r(u5t,"luke"),u5t.forEach(t),CBo=r(BSe," \u2014 "),eV=n(BSe,"A",{href:!0});var b5t=s(eV);wBo=r(b5t,"LukeForMaskedLM"),b5t.forEach(t),ABo=r(BSe," (LUKE model)"),BSe.forEach(t),LBo=i(H),Y2=n(H,"LI",{});var NSe=s(Y2);Phe=n(NSe,"STRONG",{});var v5t=s(Phe);yBo=r(v5t,"mbart"),v5t.forEach(t),xBo=r(NSe," \u2014 "),oV=n(NSe,"A",{href:!0});var F5t=s(oV);$Bo=r(F5t,"MBartForConditionalGeneration"),F5t.forEach(t),kBo=r(NSe," (mBART model)"),NSe.forEach(t),SBo=i(H),K2=n(H,"LI",{});var ISe=s(K2);Bhe=n(ISe,"STRONG",{});var T5t=s(Bhe);RBo=r(T5t,"megatron-bert"),T5t.forEach(t),PBo=r(ISe," \u2014 "),rV=n(ISe,"A",{href:!0});var M5t=s(rV);BBo=r(M5t,"MegatronBertForMaskedLM"),M5t.forEach(t),NBo=r(ISe," (Megatron-BERT model)"),ISe.forEach(t),IBo=i(H),Z2=n(H,"LI",{});var qSe=s(Z2);Nhe=n(qSe,"STRONG",{});var E5t=s(Nhe);qBo=r(E5t,"mobilebert"),E5t.forEach(t),jBo=r(qSe," \u2014 "),tV=n(qSe,"A",{href:!0});var C5t=s(tV);DBo=r(C5t,"MobileBertForMaskedLM"),C5t.forEach(t),GBo=r(qSe," (MobileBERT model)"),qSe.forEach(t),OBo=i(H),eb=n(H,"LI",{});var jSe=s(eb);Ihe=n(jSe,"STRONG",{});var w5t=s(Ihe);VBo=r(w5t,"mpnet"),w5t.forEach(t),XBo=r(jSe," \u2014 "),aV=n(jSe,"A",{href:!0});var A5t=s(aV);zBo=r(A5t,"MPNetForMaskedLM"),A5t.forEach(t),QBo=r(jSe," (MPNet model)"),jSe.forEach(t),WBo=i(H),ob=n(H,"LI",{});var DSe=s(ob);qhe=n(DSe,"STRONG",{});var L5t=s(qhe);HBo=r(L5t,"mvp"),L5t.forEach(t),UBo=r(DSe," \u2014 "),nV=n(DSe,"A",{href:!0});var y5t=s(nV);JBo=r(y5t,"MvpForConditionalGeneration"),y5t.forEach(t),YBo=r(DSe," (MVP model)"),DSe.forEach(t),KBo=i(H),rb=n(H,"LI",{});var GSe=s(rb);jhe=n(GSe,"STRONG",{});var x5t=s(jhe);ZBo=r(x5t,"nezha"),x5t.forEach(t),eNo=r(GSe," \u2014 "),sV=n(GSe,"A",{href:!0});var $5t=s(sV);oNo=r($5t,"NezhaForMaskedLM"),$5t.forEach(t),rNo=r(GSe," (Nezha model)"),GSe.forEach(t),tNo=i(H),tb=n(H,"LI",{});var OSe=s(tb);Dhe=n(OSe,"STRONG",{});var k5t=s(Dhe);aNo=r(k5t,"nystromformer"),k5t.forEach(t),nNo=r(OSe," \u2014 "),lV=n(OSe,"A",{href:!0});var S5t=s(lV);sNo=r(S5t,"NystromformerForMaskedLM"),S5t.forEach(t),lNo=r(OSe," (Nystr\xF6mformer model)"),OSe.forEach(t),iNo=i(H),ab=n(H,"LI",{});var VSe=s(ab);Ghe=n(VSe,"STRONG",{});var R5t=s(Ghe);dNo=r(R5t,"perceiver"),R5t.forEach(t),cNo=r(VSe," \u2014 "),iV=n(VSe,"A",{href:!0});var P5t=s(iV);fNo=r(P5t,"PerceiverForMaskedLM"),P5t.forEach(t),mNo=r(VSe," (Perceiver model)"),VSe.forEach(t),gNo=i(H),nb=n(H,"LI",{});var XSe=s(nb);Ohe=n(XSe,"STRONG",{});var B5t=s(Ohe);hNo=r(B5t,"qdqbert"),B5t.forEach(t),pNo=r(XSe," \u2014 "),dV=n(XSe,"A",{href:!0});var N5t=s(dV);_No=r(N5t,"QDQBertForMaskedLM"),N5t.forEach(t),uNo=r(XSe," (QDQBert model)"),XSe.forEach(t),bNo=i(H),sb=n(H,"LI",{});var zSe=s(sb);Vhe=n(zSe,"STRONG",{});var I5t=s(Vhe);vNo=r(I5t,"reformer"),I5t.forEach(t),FNo=r(zSe," \u2014 "),cV=n(zSe,"A",{href:!0});var q5t=s(cV);TNo=r(q5t,"ReformerForMaskedLM"),q5t.forEach(t),MNo=r(zSe," (Reformer model)"),zSe.forEach(t),ENo=i(H),lb=n(H,"LI",{});var QSe=s(lb);Xhe=n(QSe,"STRONG",{});var j5t=s(Xhe);CNo=r(j5t,"rembert"),j5t.forEach(t),wNo=r(QSe," \u2014 "),fV=n(QSe,"A",{href:!0});var D5t=s(fV);ANo=r(D5t,"RemBertForMaskedLM"),D5t.forEach(t),LNo=r(QSe," (RemBERT model)"),QSe.forEach(t),yNo=i(H),ib=n(H,"LI",{});var WSe=s(ib);zhe=n(WSe,"STRONG",{});var G5t=s(zhe);xNo=r(G5t,"roberta"),G5t.forEach(t),$No=r(WSe," \u2014 "),mV=n(WSe,"A",{href:!0});var O5t=s(mV);kNo=r(O5t,"RobertaForMaskedLM"),O5t.forEach(t),SNo=r(WSe," (RoBERTa model)"),WSe.forEach(t),RNo=i(H),db=n(H,"LI",{});var HSe=s(db);Qhe=n(HSe,"STRONG",{});var V5t=s(Qhe);PNo=r(V5t,"roformer"),V5t.forEach(t),BNo=r(HSe," \u2014 "),gV=n(HSe,"A",{href:!0});var X5t=s(gV);NNo=r(X5t,"RoFormerForMaskedLM"),X5t.forEach(t),INo=r(HSe," (RoFormer model)"),HSe.forEach(t),qNo=i(H),cb=n(H,"LI",{});var USe=s(cb);Whe=n(USe,"STRONG",{});var z5t=s(Whe);jNo=r(z5t,"squeezebert"),z5t.forEach(t),DNo=r(USe," \u2014 "),hV=n(USe,"A",{href:!0});var Q5t=s(hV);GNo=r(Q5t,"SqueezeBertForMaskedLM"),Q5t.forEach(t),ONo=r(USe," (SqueezeBERT model)"),USe.forEach(t),VNo=i(H),fb=n(H,"LI",{});var JSe=s(fb);Hhe=n(JSe,"STRONG",{});var W5t=s(Hhe);XNo=r(W5t,"tapas"),W5t.forEach(t),zNo=r(JSe," \u2014 "),pV=n(JSe,"A",{href:!0});var H5t=s(pV);QNo=r(H5t,"TapasForMaskedLM"),H5t.forEach(t),WNo=r(JSe," (TAPAS model)"),JSe.forEach(t),HNo=i(H),mb=n(H,"LI",{});var YSe=s(mb);Uhe=n(YSe,"STRONG",{});var U5t=s(Uhe);UNo=r(U5t,"wav2vec2"),U5t.forEach(t),JNo=r(YSe," \u2014 "),Jhe=n(YSe,"CODE",{});var J5t=s(Jhe);YNo=r(J5t,"Wav2Vec2ForMaskedLM"),J5t.forEach(t),KNo=r(YSe," (Wav2Vec2 model)"),YSe.forEach(t),ZNo=i(H),gb=n(H,"LI",{});var KSe=s(gb);Yhe=n(KSe,"STRONG",{});var Y5t=s(Yhe);eIo=r(Y5t,"xlm"),Y5t.forEach(t),oIo=r(KSe," \u2014 "),_V=n(KSe,"A",{href:!0});var K5t=s(_V);rIo=r(K5t,"XLMWithLMHeadModel"),K5t.forEach(t),tIo=r(KSe," (XLM model)"),KSe.forEach(t),aIo=i(H),hb=n(H,"LI",{});var ZSe=s(hb);Khe=n(ZSe,"STRONG",{});var Z5t=s(Khe);nIo=r(Z5t,"xlm-roberta"),Z5t.forEach(t),sIo=r(ZSe," \u2014 "),uV=n(ZSe,"A",{href:!0});var e0t=s(uV);lIo=r(e0t,"XLMRobertaForMaskedLM"),e0t.forEach(t),iIo=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),dIo=i(H),pb=n(H,"LI",{});var eRe=s(pb);Zhe=n(eRe,"STRONG",{});var o0t=s(Zhe);cIo=r(o0t,"xlm-roberta-xl"),o0t.forEach(t),fIo=r(eRe," \u2014 "),bV=n(eRe,"A",{href:!0});var r0t=s(bV);mIo=r(r0t,"XLMRobertaXLForMaskedLM"),r0t.forEach(t),gIo=r(eRe," (XLM-RoBERTa-XL model)"),eRe.forEach(t),hIo=i(H),_b=n(H,"LI",{});var oRe=s(_b);epe=n(oRe,"STRONG",{});var t0t=s(epe);pIo=r(t0t,"yoso"),t0t.forEach(t),_Io=r(oRe," \u2014 "),vV=n(oRe,"A",{href:!0});var a0t=s(vV);uIo=r(a0t,"YosoForMaskedLM"),a0t.forEach(t),bIo=r(oRe," (YOSO model)"),oRe.forEach(t),H.forEach(t),vIo=i(da),ub=n(da,"P",{});var rRe=s(ub);FIo=r(rRe,"The model is set in evaluation mode by default using "),ope=n(rRe,"CODE",{});var n0t=s(ope);TIo=r(n0t,"model.eval()"),n0t.forEach(t),MIo=r(rRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(rRe,"CODE",{});var s0t=s(rpe);EIo=r(s0t,"model.train()"),s0t.forEach(t),rRe.forEach(t),CIo=i(da),T(bb.$$.fragment,da),da.forEach(t),al.forEach(t),dXe=i(f),Ki=n(f,"H2",{class:!0});var pQe=s(Ki);vb=n(pQe,"A",{id:!0,class:!0,href:!0});var l0t=s(vb);tpe=n(l0t,"SPAN",{});var i0t=s(tpe);T(H7.$$.fragment,i0t),i0t.forEach(t),l0t.forEach(t),wIo=i(pQe),ape=n(pQe,"SPAN",{});var d0t=s(ape);AIo=r(d0t,"AutoModelForSeq2SeqLM"),d0t.forEach(t),pQe.forEach(t),cXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(U7.$$.fragment,nl),LIo=i(nl),Zi=n(nl,"P",{});var Rre=s(Zi);yIo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FV=n(Rre,"A",{href:!0});var c0t=s(FV);xIo=r(c0t,"from_pretrained()"),c0t.forEach(t),$Io=r(Rre," class method or the "),TV=n(Rre,"A",{href:!0});var f0t=s(TV);kIo=r(f0t,"from_config()"),f0t.forEach(t),SIo=r(Rre,` class
method.`),Rre.forEach(t),RIo=i(nl),J7=n(nl,"P",{});var _Qe=s(J7);PIo=r(_Qe,"This class cannot be instantiated directly using "),npe=n(_Qe,"CODE",{});var m0t=s(npe);BIo=r(m0t,"__init__()"),m0t.forEach(t),NIo=r(_Qe," (throws an error)."),_Qe.forEach(t),IIo=i(nl),ft=n(nl,"DIV",{class:!0});var hA=s(ft);T(Y7.$$.fragment,hA),qIo=i(hA),spe=n(hA,"P",{});var g0t=s(spe);jIo=r(g0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),g0t.forEach(t),DIo=i(hA),ed=n(hA,"P",{});var Pre=s(ed);GIo=r(Pre,`Note:
Loading a model from its configuration file does `),lpe=n(Pre,"STRONG",{});var h0t=s(lpe);OIo=r(h0t,"not"),h0t.forEach(t),VIo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(Pre,"A",{href:!0});var p0t=s(MV);XIo=r(p0t,"from_pretrained()"),p0t.forEach(t),zIo=r(Pre," to load the model weights."),Pre.forEach(t),QIo=i(hA),T(Fb.$$.fragment,hA),hA.forEach(t),WIo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(K7.$$.fragment,ca),HIo=i(ca),ipe=n(ca,"P",{});var _0t=s(ipe);UIo=r(_0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_0t.forEach(t),JIo=i(ca),Da=n(ca,"P",{});var pA=s(Da);YIo=r(pA,"The model class to instantiate is selected based on the "),dpe=n(pA,"CODE",{});var u0t=s(dpe);KIo=r(u0t,"model_type"),u0t.forEach(t),ZIo=r(pA,` property of the config object (either
passed as an argument or loaded from `),cpe=n(pA,"CODE",{});var b0t=s(cpe);eqo=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),oqo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(pA,"CODE",{});var v0t=s(fpe);rqo=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),tqo=r(pA,":"),pA.forEach(t),aqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);Tb=n(be,"LI",{});var tRe=s(Tb);mpe=n(tRe,"STRONG",{});var F0t=s(mpe);nqo=r(F0t,"bart"),F0t.forEach(t),sqo=r(tRe," \u2014 "),EV=n(tRe,"A",{href:!0});var T0t=s(EV);lqo=r(T0t,"BartForConditionalGeneration"),T0t.forEach(t),iqo=r(tRe," (BART model)"),tRe.forEach(t),dqo=i(be),Mb=n(be,"LI",{});var aRe=s(Mb);gpe=n(aRe,"STRONG",{});var M0t=s(gpe);cqo=r(M0t,"bigbird_pegasus"),M0t.forEach(t),fqo=r(aRe," \u2014 "),CV=n(aRe,"A",{href:!0});var E0t=s(CV);mqo=r(E0t,"BigBirdPegasusForConditionalGeneration"),E0t.forEach(t),gqo=r(aRe," (BigBird-Pegasus model)"),aRe.forEach(t),hqo=i(be),Eb=n(be,"LI",{});var nRe=s(Eb);hpe=n(nRe,"STRONG",{});var C0t=s(hpe);pqo=r(C0t,"blenderbot"),C0t.forEach(t),_qo=r(nRe," \u2014 "),wV=n(nRe,"A",{href:!0});var w0t=s(wV);uqo=r(w0t,"BlenderbotForConditionalGeneration"),w0t.forEach(t),bqo=r(nRe," (Blenderbot model)"),nRe.forEach(t),vqo=i(be),Cb=n(be,"LI",{});var sRe=s(Cb);ppe=n(sRe,"STRONG",{});var A0t=s(ppe);Fqo=r(A0t,"blenderbot-small"),A0t.forEach(t),Tqo=r(sRe," \u2014 "),AV=n(sRe,"A",{href:!0});var L0t=s(AV);Mqo=r(L0t,"BlenderbotSmallForConditionalGeneration"),L0t.forEach(t),Eqo=r(sRe," (BlenderbotSmall model)"),sRe.forEach(t),Cqo=i(be),wb=n(be,"LI",{});var lRe=s(wb);_pe=n(lRe,"STRONG",{});var y0t=s(_pe);wqo=r(y0t,"encoder-decoder"),y0t.forEach(t),Aqo=r(lRe," \u2014 "),LV=n(lRe,"A",{href:!0});var x0t=s(LV);Lqo=r(x0t,"EncoderDecoderModel"),x0t.forEach(t),yqo=r(lRe," (Encoder decoder model)"),lRe.forEach(t),xqo=i(be),Ab=n(be,"LI",{});var iRe=s(Ab);upe=n(iRe,"STRONG",{});var $0t=s(upe);$qo=r($0t,"fsmt"),$0t.forEach(t),kqo=r(iRe," \u2014 "),yV=n(iRe,"A",{href:!0});var k0t=s(yV);Sqo=r(k0t,"FSMTForConditionalGeneration"),k0t.forEach(t),Rqo=r(iRe," (FairSeq Machine-Translation model)"),iRe.forEach(t),Pqo=i(be),Lb=n(be,"LI",{});var dRe=s(Lb);bpe=n(dRe,"STRONG",{});var S0t=s(bpe);Bqo=r(S0t,"led"),S0t.forEach(t),Nqo=r(dRe," \u2014 "),xV=n(dRe,"A",{href:!0});var R0t=s(xV);Iqo=r(R0t,"LEDForConditionalGeneration"),R0t.forEach(t),qqo=r(dRe," (LED model)"),dRe.forEach(t),jqo=i(be),yb=n(be,"LI",{});var cRe=s(yb);vpe=n(cRe,"STRONG",{});var P0t=s(vpe);Dqo=r(P0t,"longt5"),P0t.forEach(t),Gqo=r(cRe," \u2014 "),$V=n(cRe,"A",{href:!0});var B0t=s($V);Oqo=r(B0t,"LongT5ForConditionalGeneration"),B0t.forEach(t),Vqo=r(cRe," (LongT5 model)"),cRe.forEach(t),Xqo=i(be),xb=n(be,"LI",{});var fRe=s(xb);Fpe=n(fRe,"STRONG",{});var N0t=s(Fpe);zqo=r(N0t,"m2m_100"),N0t.forEach(t),Qqo=r(fRe," \u2014 "),kV=n(fRe,"A",{href:!0});var I0t=s(kV);Wqo=r(I0t,"M2M100ForConditionalGeneration"),I0t.forEach(t),Hqo=r(fRe," (M2M100 model)"),fRe.forEach(t),Uqo=i(be),$b=n(be,"LI",{});var mRe=s($b);Tpe=n(mRe,"STRONG",{});var q0t=s(Tpe);Jqo=r(q0t,"marian"),q0t.forEach(t),Yqo=r(mRe," \u2014 "),SV=n(mRe,"A",{href:!0});var j0t=s(SV);Kqo=r(j0t,"MarianMTModel"),j0t.forEach(t),Zqo=r(mRe," (Marian model)"),mRe.forEach(t),ejo=i(be),kb=n(be,"LI",{});var gRe=s(kb);Mpe=n(gRe,"STRONG",{});var D0t=s(Mpe);ojo=r(D0t,"mbart"),D0t.forEach(t),rjo=r(gRe," \u2014 "),RV=n(gRe,"A",{href:!0});var G0t=s(RV);tjo=r(G0t,"MBartForConditionalGeneration"),G0t.forEach(t),ajo=r(gRe," (mBART model)"),gRe.forEach(t),njo=i(be),Sb=n(be,"LI",{});var hRe=s(Sb);Epe=n(hRe,"STRONG",{});var O0t=s(Epe);sjo=r(O0t,"mt5"),O0t.forEach(t),ljo=r(hRe," \u2014 "),PV=n(hRe,"A",{href:!0});var V0t=s(PV);ijo=r(V0t,"MT5ForConditionalGeneration"),V0t.forEach(t),djo=r(hRe," (MT5 model)"),hRe.forEach(t),cjo=i(be),Rb=n(be,"LI",{});var pRe=s(Rb);Cpe=n(pRe,"STRONG",{});var X0t=s(Cpe);fjo=r(X0t,"mvp"),X0t.forEach(t),mjo=r(pRe," \u2014 "),BV=n(pRe,"A",{href:!0});var z0t=s(BV);gjo=r(z0t,"MvpForConditionalGeneration"),z0t.forEach(t),hjo=r(pRe," (MVP model)"),pRe.forEach(t),pjo=i(be),Pb=n(be,"LI",{});var _Re=s(Pb);wpe=n(_Re,"STRONG",{});var Q0t=s(wpe);_jo=r(Q0t,"pegasus"),Q0t.forEach(t),ujo=r(_Re," \u2014 "),NV=n(_Re,"A",{href:!0});var W0t=s(NV);bjo=r(W0t,"PegasusForConditionalGeneration"),W0t.forEach(t),vjo=r(_Re," (Pegasus model)"),_Re.forEach(t),Fjo=i(be),Bb=n(be,"LI",{});var uRe=s(Bb);Ape=n(uRe,"STRONG",{});var H0t=s(Ape);Tjo=r(H0t,"plbart"),H0t.forEach(t),Mjo=r(uRe," \u2014 "),IV=n(uRe,"A",{href:!0});var U0t=s(IV);Ejo=r(U0t,"PLBartForConditionalGeneration"),U0t.forEach(t),Cjo=r(uRe," (PLBart model)"),uRe.forEach(t),wjo=i(be),Nb=n(be,"LI",{});var bRe=s(Nb);Lpe=n(bRe,"STRONG",{});var J0t=s(Lpe);Ajo=r(J0t,"prophetnet"),J0t.forEach(t),Ljo=r(bRe," \u2014 "),qV=n(bRe,"A",{href:!0});var Y0t=s(qV);yjo=r(Y0t,"ProphetNetForConditionalGeneration"),Y0t.forEach(t),xjo=r(bRe," (ProphetNet model)"),bRe.forEach(t),$jo=i(be),Ib=n(be,"LI",{});var vRe=s(Ib);ype=n(vRe,"STRONG",{});var K0t=s(ype);kjo=r(K0t,"t5"),K0t.forEach(t),Sjo=r(vRe," \u2014 "),jV=n(vRe,"A",{href:!0});var Z0t=s(jV);Rjo=r(Z0t,"T5ForConditionalGeneration"),Z0t.forEach(t),Pjo=r(vRe," (T5 model)"),vRe.forEach(t),Bjo=i(be),qb=n(be,"LI",{});var FRe=s(qb);xpe=n(FRe,"STRONG",{});var eFt=s(xpe);Njo=r(eFt,"xlm-prophetnet"),eFt.forEach(t),Ijo=r(FRe," \u2014 "),DV=n(FRe,"A",{href:!0});var oFt=s(DV);qjo=r(oFt,"XLMProphetNetForConditionalGeneration"),oFt.forEach(t),jjo=r(FRe," (XLM-ProphetNet model)"),FRe.forEach(t),be.forEach(t),Djo=i(ca),jb=n(ca,"P",{});var TRe=s(jb);Gjo=r(TRe,"The model is set in evaluation mode by default using "),$pe=n(TRe,"CODE",{});var rFt=s($pe);Ojo=r(rFt,"model.eval()"),rFt.forEach(t),Vjo=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(TRe,"CODE",{});var tFt=s(kpe);Xjo=r(tFt,"model.train()"),tFt.forEach(t),TRe.forEach(t),zjo=i(ca),T(Db.$$.fragment,ca),ca.forEach(t),nl.forEach(t),fXe=i(f),od=n(f,"H2",{class:!0});var uQe=s(od);Gb=n(uQe,"A",{id:!0,class:!0,href:!0});var aFt=s(Gb);Spe=n(aFt,"SPAN",{});var nFt=s(Spe);T(Z7.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),Qjo=i(uQe),Rpe=n(uQe,"SPAN",{});var sFt=s(Rpe);Wjo=r(sFt,"AutoModelForSequenceClassification"),sFt.forEach(t),uQe.forEach(t),mXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(eL.$$.fragment,sl),Hjo=i(sl),rd=n(sl,"P",{});var Bre=s(rd);Ujo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GV=n(Bre,"A",{href:!0});var lFt=s(GV);Jjo=r(lFt,"from_pretrained()"),lFt.forEach(t),Yjo=r(Bre," class method or the "),OV=n(Bre,"A",{href:!0});var iFt=s(OV);Kjo=r(iFt,"from_config()"),iFt.forEach(t),Zjo=r(Bre,` class
method.`),Bre.forEach(t),eDo=i(sl),oL=n(sl,"P",{});var bQe=s(oL);oDo=r(bQe,"This class cannot be instantiated directly using "),Ppe=n(bQe,"CODE",{});var dFt=s(Ppe);rDo=r(dFt,"__init__()"),dFt.forEach(t),tDo=r(bQe," (throws an error)."),bQe.forEach(t),aDo=i(sl),mt=n(sl,"DIV",{class:!0});var _A=s(mt);T(rL.$$.fragment,_A),nDo=i(_A),Bpe=n(_A,"P",{});var cFt=s(Bpe);sDo=r(cFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cFt.forEach(t),lDo=i(_A),td=n(_A,"P",{});var Nre=s(td);iDo=r(Nre,`Note:
Loading a model from its configuration file does `),Npe=n(Nre,"STRONG",{});var fFt=s(Npe);dDo=r(fFt,"not"),fFt.forEach(t),cDo=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(Nre,"A",{href:!0});var mFt=s(VV);fDo=r(mFt,"from_pretrained()"),mFt.forEach(t),mDo=r(Nre," to load the model weights."),Nre.forEach(t),gDo=i(_A),T(Ob.$$.fragment,_A),_A.forEach(t),hDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(tL.$$.fragment,fa),pDo=i(fa),Ipe=n(fa,"P",{});var gFt=s(Ipe);_Do=r(gFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gFt.forEach(t),uDo=i(fa),Ga=n(fa,"P",{});var uA=s(Ga);bDo=r(uA,"The model class to instantiate is selected based on the "),qpe=n(uA,"CODE",{});var hFt=s(qpe);vDo=r(hFt,"model_type"),hFt.forEach(t),FDo=r(uA,` property of the config object (either
passed as an argument or loaded from `),jpe=n(uA,"CODE",{});var pFt=s(jpe);TDo=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),MDo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(uA,"CODE",{});var _Ft=s(Dpe);EDo=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),CDo=r(uA,":"),uA.forEach(t),wDo=i(fa),I=n(fa,"UL",{});var j=s(I);Vb=n(j,"LI",{});var MRe=s(Vb);Gpe=n(MRe,"STRONG",{});var uFt=s(Gpe);ADo=r(uFt,"albert"),uFt.forEach(t),LDo=r(MRe," \u2014 "),XV=n(MRe,"A",{href:!0});var bFt=s(XV);yDo=r(bFt,"AlbertForSequenceClassification"),bFt.forEach(t),xDo=r(MRe," (ALBERT model)"),MRe.forEach(t),$Do=i(j),Xb=n(j,"LI",{});var ERe=s(Xb);Ope=n(ERe,"STRONG",{});var vFt=s(Ope);kDo=r(vFt,"bart"),vFt.forEach(t),SDo=r(ERe," \u2014 "),zV=n(ERe,"A",{href:!0});var FFt=s(zV);RDo=r(FFt,"BartForSequenceClassification"),FFt.forEach(t),PDo=r(ERe," (BART model)"),ERe.forEach(t),BDo=i(j),zb=n(j,"LI",{});var CRe=s(zb);Vpe=n(CRe,"STRONG",{});var TFt=s(Vpe);NDo=r(TFt,"bert"),TFt.forEach(t),IDo=r(CRe," \u2014 "),QV=n(CRe,"A",{href:!0});var MFt=s(QV);qDo=r(MFt,"BertForSequenceClassification"),MFt.forEach(t),jDo=r(CRe," (BERT model)"),CRe.forEach(t),DDo=i(j),Qb=n(j,"LI",{});var wRe=s(Qb);Xpe=n(wRe,"STRONG",{});var EFt=s(Xpe);GDo=r(EFt,"big_bird"),EFt.forEach(t),ODo=r(wRe," \u2014 "),WV=n(wRe,"A",{href:!0});var CFt=s(WV);VDo=r(CFt,"BigBirdForSequenceClassification"),CFt.forEach(t),XDo=r(wRe," (BigBird model)"),wRe.forEach(t),zDo=i(j),Wb=n(j,"LI",{});var ARe=s(Wb);zpe=n(ARe,"STRONG",{});var wFt=s(zpe);QDo=r(wFt,"bigbird_pegasus"),wFt.forEach(t),WDo=r(ARe," \u2014 "),HV=n(ARe,"A",{href:!0});var AFt=s(HV);HDo=r(AFt,"BigBirdPegasusForSequenceClassification"),AFt.forEach(t),UDo=r(ARe," (BigBird-Pegasus model)"),ARe.forEach(t),JDo=i(j),Hb=n(j,"LI",{});var LRe=s(Hb);Qpe=n(LRe,"STRONG",{});var LFt=s(Qpe);YDo=r(LFt,"bloom"),LFt.forEach(t),KDo=r(LRe," \u2014 "),UV=n(LRe,"A",{href:!0});var yFt=s(UV);ZDo=r(yFt,"BloomForSequenceClassification"),yFt.forEach(t),eGo=r(LRe," (BLOOM model)"),LRe.forEach(t),oGo=i(j),Ub=n(j,"LI",{});var yRe=s(Ub);Wpe=n(yRe,"STRONG",{});var xFt=s(Wpe);rGo=r(xFt,"camembert"),xFt.forEach(t),tGo=r(yRe," \u2014 "),JV=n(yRe,"A",{href:!0});var $Ft=s(JV);aGo=r($Ft,"CamembertForSequenceClassification"),$Ft.forEach(t),nGo=r(yRe," (CamemBERT model)"),yRe.forEach(t),sGo=i(j),Jb=n(j,"LI",{});var xRe=s(Jb);Hpe=n(xRe,"STRONG",{});var kFt=s(Hpe);lGo=r(kFt,"canine"),kFt.forEach(t),iGo=r(xRe," \u2014 "),YV=n(xRe,"A",{href:!0});var SFt=s(YV);dGo=r(SFt,"CanineForSequenceClassification"),SFt.forEach(t),cGo=r(xRe," (CANINE model)"),xRe.forEach(t),fGo=i(j),Yb=n(j,"LI",{});var $Re=s(Yb);Upe=n($Re,"STRONG",{});var RFt=s(Upe);mGo=r(RFt,"convbert"),RFt.forEach(t),gGo=r($Re," \u2014 "),KV=n($Re,"A",{href:!0});var PFt=s(KV);hGo=r(PFt,"ConvBertForSequenceClassification"),PFt.forEach(t),pGo=r($Re," (ConvBERT model)"),$Re.forEach(t),_Go=i(j),Kb=n(j,"LI",{});var kRe=s(Kb);Jpe=n(kRe,"STRONG",{});var BFt=s(Jpe);uGo=r(BFt,"ctrl"),BFt.forEach(t),bGo=r(kRe," \u2014 "),ZV=n(kRe,"A",{href:!0});var NFt=s(ZV);vGo=r(NFt,"CTRLForSequenceClassification"),NFt.forEach(t),FGo=r(kRe," (CTRL model)"),kRe.forEach(t),TGo=i(j),Zb=n(j,"LI",{});var SRe=s(Zb);Ype=n(SRe,"STRONG",{});var IFt=s(Ype);MGo=r(IFt,"data2vec-text"),IFt.forEach(t),EGo=r(SRe," \u2014 "),eX=n(SRe,"A",{href:!0});var qFt=s(eX);CGo=r(qFt,"Data2VecTextForSequenceClassification"),qFt.forEach(t),wGo=r(SRe," (Data2VecText model)"),SRe.forEach(t),AGo=i(j),ev=n(j,"LI",{});var RRe=s(ev);Kpe=n(RRe,"STRONG",{});var jFt=s(Kpe);LGo=r(jFt,"deberta"),jFt.forEach(t),yGo=r(RRe," \u2014 "),oX=n(RRe,"A",{href:!0});var DFt=s(oX);xGo=r(DFt,"DebertaForSequenceClassification"),DFt.forEach(t),$Go=r(RRe," (DeBERTa model)"),RRe.forEach(t),kGo=i(j),ov=n(j,"LI",{});var PRe=s(ov);Zpe=n(PRe,"STRONG",{});var GFt=s(Zpe);SGo=r(GFt,"deberta-v2"),GFt.forEach(t),RGo=r(PRe," \u2014 "),rX=n(PRe,"A",{href:!0});var OFt=s(rX);PGo=r(OFt,"DebertaV2ForSequenceClassification"),OFt.forEach(t),BGo=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),NGo=i(j),rv=n(j,"LI",{});var BRe=s(rv);e_e=n(BRe,"STRONG",{});var VFt=s(e_e);IGo=r(VFt,"distilbert"),VFt.forEach(t),qGo=r(BRe," \u2014 "),tX=n(BRe,"A",{href:!0});var XFt=s(tX);jGo=r(XFt,"DistilBertForSequenceClassification"),XFt.forEach(t),DGo=r(BRe," (DistilBERT model)"),BRe.forEach(t),GGo=i(j),tv=n(j,"LI",{});var NRe=s(tv);o_e=n(NRe,"STRONG",{});var zFt=s(o_e);OGo=r(zFt,"electra"),zFt.forEach(t),VGo=r(NRe," \u2014 "),aX=n(NRe,"A",{href:!0});var QFt=s(aX);XGo=r(QFt,"ElectraForSequenceClassification"),QFt.forEach(t),zGo=r(NRe," (ELECTRA model)"),NRe.forEach(t),QGo=i(j),av=n(j,"LI",{});var IRe=s(av);r_e=n(IRe,"STRONG",{});var WFt=s(r_e);WGo=r(WFt,"flaubert"),WFt.forEach(t),HGo=r(IRe," \u2014 "),nX=n(IRe,"A",{href:!0});var HFt=s(nX);UGo=r(HFt,"FlaubertForSequenceClassification"),HFt.forEach(t),JGo=r(IRe," (FlauBERT model)"),IRe.forEach(t),YGo=i(j),nv=n(j,"LI",{});var qRe=s(nv);t_e=n(qRe,"STRONG",{});var UFt=s(t_e);KGo=r(UFt,"fnet"),UFt.forEach(t),ZGo=r(qRe," \u2014 "),sX=n(qRe,"A",{href:!0});var JFt=s(sX);eOo=r(JFt,"FNetForSequenceClassification"),JFt.forEach(t),oOo=r(qRe," (FNet model)"),qRe.forEach(t),rOo=i(j),sv=n(j,"LI",{});var jRe=s(sv);a_e=n(jRe,"STRONG",{});var YFt=s(a_e);tOo=r(YFt,"funnel"),YFt.forEach(t),aOo=r(jRe," \u2014 "),lX=n(jRe,"A",{href:!0});var KFt=s(lX);nOo=r(KFt,"FunnelForSequenceClassification"),KFt.forEach(t),sOo=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),lOo=i(j),lv=n(j,"LI",{});var DRe=s(lv);n_e=n(DRe,"STRONG",{});var ZFt=s(n_e);iOo=r(ZFt,"gpt2"),ZFt.forEach(t),dOo=r(DRe," \u2014 "),iX=n(DRe,"A",{href:!0});var eTt=s(iX);cOo=r(eTt,"GPT2ForSequenceClassification"),eTt.forEach(t),fOo=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),mOo=i(j),iv=n(j,"LI",{});var GRe=s(iv);s_e=n(GRe,"STRONG",{});var oTt=s(s_e);gOo=r(oTt,"gpt_neo"),oTt.forEach(t),hOo=r(GRe," \u2014 "),dX=n(GRe,"A",{href:!0});var rTt=s(dX);pOo=r(rTt,"GPTNeoForSequenceClassification"),rTt.forEach(t),_Oo=r(GRe," (GPT Neo model)"),GRe.forEach(t),uOo=i(j),dv=n(j,"LI",{});var ORe=s(dv);l_e=n(ORe,"STRONG",{});var tTt=s(l_e);bOo=r(tTt,"gptj"),tTt.forEach(t),vOo=r(ORe," \u2014 "),cX=n(ORe,"A",{href:!0});var aTt=s(cX);FOo=r(aTt,"GPTJForSequenceClassification"),aTt.forEach(t),TOo=r(ORe," (GPT-J model)"),ORe.forEach(t),MOo=i(j),cv=n(j,"LI",{});var VRe=s(cv);i_e=n(VRe,"STRONG",{});var nTt=s(i_e);EOo=r(nTt,"ibert"),nTt.forEach(t),COo=r(VRe," \u2014 "),fX=n(VRe,"A",{href:!0});var sTt=s(fX);wOo=r(sTt,"IBertForSequenceClassification"),sTt.forEach(t),AOo=r(VRe," (I-BERT model)"),VRe.forEach(t),LOo=i(j),fv=n(j,"LI",{});var XRe=s(fv);d_e=n(XRe,"STRONG",{});var lTt=s(d_e);yOo=r(lTt,"layoutlm"),lTt.forEach(t),xOo=r(XRe," \u2014 "),mX=n(XRe,"A",{href:!0});var iTt=s(mX);$Oo=r(iTt,"LayoutLMForSequenceClassification"),iTt.forEach(t),kOo=r(XRe," (LayoutLM model)"),XRe.forEach(t),SOo=i(j),mv=n(j,"LI",{});var zRe=s(mv);c_e=n(zRe,"STRONG",{});var dTt=s(c_e);ROo=r(dTt,"layoutlmv2"),dTt.forEach(t),POo=r(zRe," \u2014 "),gX=n(zRe,"A",{href:!0});var cTt=s(gX);BOo=r(cTt,"LayoutLMv2ForSequenceClassification"),cTt.forEach(t),NOo=r(zRe," (LayoutLMv2 model)"),zRe.forEach(t),IOo=i(j),gv=n(j,"LI",{});var QRe=s(gv);f_e=n(QRe,"STRONG",{});var fTt=s(f_e);qOo=r(fTt,"layoutlmv3"),fTt.forEach(t),jOo=r(QRe," \u2014 "),hX=n(QRe,"A",{href:!0});var mTt=s(hX);DOo=r(mTt,"LayoutLMv3ForSequenceClassification"),mTt.forEach(t),GOo=r(QRe," (LayoutLMv3 model)"),QRe.forEach(t),OOo=i(j),hv=n(j,"LI",{});var WRe=s(hv);m_e=n(WRe,"STRONG",{});var gTt=s(m_e);VOo=r(gTt,"led"),gTt.forEach(t),XOo=r(WRe," \u2014 "),pX=n(WRe,"A",{href:!0});var hTt=s(pX);zOo=r(hTt,"LEDForSequenceClassification"),hTt.forEach(t),QOo=r(WRe," (LED model)"),WRe.forEach(t),WOo=i(j),pv=n(j,"LI",{});var HRe=s(pv);g_e=n(HRe,"STRONG",{});var pTt=s(g_e);HOo=r(pTt,"longformer"),pTt.forEach(t),UOo=r(HRe," \u2014 "),_X=n(HRe,"A",{href:!0});var _Tt=s(_X);JOo=r(_Tt,"LongformerForSequenceClassification"),_Tt.forEach(t),YOo=r(HRe," (Longformer model)"),HRe.forEach(t),KOo=i(j),_v=n(j,"LI",{});var URe=s(_v);h_e=n(URe,"STRONG",{});var uTt=s(h_e);ZOo=r(uTt,"mbart"),uTt.forEach(t),eVo=r(URe," \u2014 "),uX=n(URe,"A",{href:!0});var bTt=s(uX);oVo=r(bTt,"MBartForSequenceClassification"),bTt.forEach(t),rVo=r(URe," (mBART model)"),URe.forEach(t),tVo=i(j),uv=n(j,"LI",{});var JRe=s(uv);p_e=n(JRe,"STRONG",{});var vTt=s(p_e);aVo=r(vTt,"megatron-bert"),vTt.forEach(t),nVo=r(JRe," \u2014 "),bX=n(JRe,"A",{href:!0});var FTt=s(bX);sVo=r(FTt,"MegatronBertForSequenceClassification"),FTt.forEach(t),lVo=r(JRe," (Megatron-BERT model)"),JRe.forEach(t),iVo=i(j),bv=n(j,"LI",{});var YRe=s(bv);__e=n(YRe,"STRONG",{});var TTt=s(__e);dVo=r(TTt,"mobilebert"),TTt.forEach(t),cVo=r(YRe," \u2014 "),vX=n(YRe,"A",{href:!0});var MTt=s(vX);fVo=r(MTt,"MobileBertForSequenceClassification"),MTt.forEach(t),mVo=r(YRe," (MobileBERT model)"),YRe.forEach(t),gVo=i(j),vv=n(j,"LI",{});var KRe=s(vv);u_e=n(KRe,"STRONG",{});var ETt=s(u_e);hVo=r(ETt,"mpnet"),ETt.forEach(t),pVo=r(KRe," \u2014 "),FX=n(KRe,"A",{href:!0});var CTt=s(FX);_Vo=r(CTt,"MPNetForSequenceClassification"),CTt.forEach(t),uVo=r(KRe," (MPNet model)"),KRe.forEach(t),bVo=i(j),Fv=n(j,"LI",{});var ZRe=s(Fv);b_e=n(ZRe,"STRONG",{});var wTt=s(b_e);vVo=r(wTt,"mvp"),wTt.forEach(t),FVo=r(ZRe," \u2014 "),TX=n(ZRe,"A",{href:!0});var ATt=s(TX);TVo=r(ATt,"MvpForSequenceClassification"),ATt.forEach(t),MVo=r(ZRe," (MVP model)"),ZRe.forEach(t),EVo=i(j),Tv=n(j,"LI",{});var ePe=s(Tv);v_e=n(ePe,"STRONG",{});var LTt=s(v_e);CVo=r(LTt,"nezha"),LTt.forEach(t),wVo=r(ePe," \u2014 "),MX=n(ePe,"A",{href:!0});var yTt=s(MX);AVo=r(yTt,"NezhaForSequenceClassification"),yTt.forEach(t),LVo=r(ePe," (Nezha model)"),ePe.forEach(t),yVo=i(j),Mv=n(j,"LI",{});var oPe=s(Mv);F_e=n(oPe,"STRONG",{});var xTt=s(F_e);xVo=r(xTt,"nystromformer"),xTt.forEach(t),$Vo=r(oPe," \u2014 "),EX=n(oPe,"A",{href:!0});var $Tt=s(EX);kVo=r($Tt,"NystromformerForSequenceClassification"),$Tt.forEach(t),SVo=r(oPe," (Nystr\xF6mformer model)"),oPe.forEach(t),RVo=i(j),Ev=n(j,"LI",{});var rPe=s(Ev);T_e=n(rPe,"STRONG",{});var kTt=s(T_e);PVo=r(kTt,"openai-gpt"),kTt.forEach(t),BVo=r(rPe," \u2014 "),CX=n(rPe,"A",{href:!0});var STt=s(CX);NVo=r(STt,"OpenAIGPTForSequenceClassification"),STt.forEach(t),IVo=r(rPe," (OpenAI GPT model)"),rPe.forEach(t),qVo=i(j),Cv=n(j,"LI",{});var tPe=s(Cv);M_e=n(tPe,"STRONG",{});var RTt=s(M_e);jVo=r(RTt,"perceiver"),RTt.forEach(t),DVo=r(tPe," \u2014 "),wX=n(tPe,"A",{href:!0});var PTt=s(wX);GVo=r(PTt,"PerceiverForSequenceClassification"),PTt.forEach(t),OVo=r(tPe," (Perceiver model)"),tPe.forEach(t),VVo=i(j),wv=n(j,"LI",{});var aPe=s(wv);E_e=n(aPe,"STRONG",{});var BTt=s(E_e);XVo=r(BTt,"plbart"),BTt.forEach(t),zVo=r(aPe," \u2014 "),AX=n(aPe,"A",{href:!0});var NTt=s(AX);QVo=r(NTt,"PLBartForSequenceClassification"),NTt.forEach(t),WVo=r(aPe," (PLBart model)"),aPe.forEach(t),HVo=i(j),Av=n(j,"LI",{});var nPe=s(Av);C_e=n(nPe,"STRONG",{});var ITt=s(C_e);UVo=r(ITt,"qdqbert"),ITt.forEach(t),JVo=r(nPe," \u2014 "),LX=n(nPe,"A",{href:!0});var qTt=s(LX);YVo=r(qTt,"QDQBertForSequenceClassification"),qTt.forEach(t),KVo=r(nPe," (QDQBert model)"),nPe.forEach(t),ZVo=i(j),Lv=n(j,"LI",{});var sPe=s(Lv);w_e=n(sPe,"STRONG",{});var jTt=s(w_e);eXo=r(jTt,"reformer"),jTt.forEach(t),oXo=r(sPe," \u2014 "),yX=n(sPe,"A",{href:!0});var DTt=s(yX);rXo=r(DTt,"ReformerForSequenceClassification"),DTt.forEach(t),tXo=r(sPe," (Reformer model)"),sPe.forEach(t),aXo=i(j),yv=n(j,"LI",{});var lPe=s(yv);A_e=n(lPe,"STRONG",{});var GTt=s(A_e);nXo=r(GTt,"rembert"),GTt.forEach(t),sXo=r(lPe," \u2014 "),xX=n(lPe,"A",{href:!0});var OTt=s(xX);lXo=r(OTt,"RemBertForSequenceClassification"),OTt.forEach(t),iXo=r(lPe," (RemBERT model)"),lPe.forEach(t),dXo=i(j),xv=n(j,"LI",{});var iPe=s(xv);L_e=n(iPe,"STRONG",{});var VTt=s(L_e);cXo=r(VTt,"roberta"),VTt.forEach(t),fXo=r(iPe," \u2014 "),$X=n(iPe,"A",{href:!0});var XTt=s($X);mXo=r(XTt,"RobertaForSequenceClassification"),XTt.forEach(t),gXo=r(iPe," (RoBERTa model)"),iPe.forEach(t),hXo=i(j),$v=n(j,"LI",{});var dPe=s($v);y_e=n(dPe,"STRONG",{});var zTt=s(y_e);pXo=r(zTt,"roformer"),zTt.forEach(t),_Xo=r(dPe," \u2014 "),kX=n(dPe,"A",{href:!0});var QTt=s(kX);uXo=r(QTt,"RoFormerForSequenceClassification"),QTt.forEach(t),bXo=r(dPe," (RoFormer model)"),dPe.forEach(t),vXo=i(j),kv=n(j,"LI",{});var cPe=s(kv);x_e=n(cPe,"STRONG",{});var WTt=s(x_e);FXo=r(WTt,"squeezebert"),WTt.forEach(t),TXo=r(cPe," \u2014 "),SX=n(cPe,"A",{href:!0});var HTt=s(SX);MXo=r(HTt,"SqueezeBertForSequenceClassification"),HTt.forEach(t),EXo=r(cPe," (SqueezeBERT model)"),cPe.forEach(t),CXo=i(j),Sv=n(j,"LI",{});var fPe=s(Sv);$_e=n(fPe,"STRONG",{});var UTt=s($_e);wXo=r(UTt,"tapas"),UTt.forEach(t),AXo=r(fPe," \u2014 "),RX=n(fPe,"A",{href:!0});var JTt=s(RX);LXo=r(JTt,"TapasForSequenceClassification"),JTt.forEach(t),yXo=r(fPe," (TAPAS model)"),fPe.forEach(t),xXo=i(j),Rv=n(j,"LI",{});var mPe=s(Rv);k_e=n(mPe,"STRONG",{});var YTt=s(k_e);$Xo=r(YTt,"transfo-xl"),YTt.forEach(t),kXo=r(mPe," \u2014 "),PX=n(mPe,"A",{href:!0});var KTt=s(PX);SXo=r(KTt,"TransfoXLForSequenceClassification"),KTt.forEach(t),RXo=r(mPe," (Transformer-XL model)"),mPe.forEach(t),PXo=i(j),Pv=n(j,"LI",{});var gPe=s(Pv);S_e=n(gPe,"STRONG",{});var ZTt=s(S_e);BXo=r(ZTt,"xlm"),ZTt.forEach(t),NXo=r(gPe," \u2014 "),BX=n(gPe,"A",{href:!0});var e8t=s(BX);IXo=r(e8t,"XLMForSequenceClassification"),e8t.forEach(t),qXo=r(gPe," (XLM model)"),gPe.forEach(t),jXo=i(j),Bv=n(j,"LI",{});var hPe=s(Bv);R_e=n(hPe,"STRONG",{});var o8t=s(R_e);DXo=r(o8t,"xlm-roberta"),o8t.forEach(t),GXo=r(hPe," \u2014 "),NX=n(hPe,"A",{href:!0});var r8t=s(NX);OXo=r(r8t,"XLMRobertaForSequenceClassification"),r8t.forEach(t),VXo=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),XXo=i(j),Nv=n(j,"LI",{});var pPe=s(Nv);P_e=n(pPe,"STRONG",{});var t8t=s(P_e);zXo=r(t8t,"xlm-roberta-xl"),t8t.forEach(t),QXo=r(pPe," \u2014 "),IX=n(pPe,"A",{href:!0});var a8t=s(IX);WXo=r(a8t,"XLMRobertaXLForSequenceClassification"),a8t.forEach(t),HXo=r(pPe," (XLM-RoBERTa-XL model)"),pPe.forEach(t),UXo=i(j),Iv=n(j,"LI",{});var _Pe=s(Iv);B_e=n(_Pe,"STRONG",{});var n8t=s(B_e);JXo=r(n8t,"xlnet"),n8t.forEach(t),YXo=r(_Pe," \u2014 "),qX=n(_Pe,"A",{href:!0});var s8t=s(qX);KXo=r(s8t,"XLNetForSequenceClassification"),s8t.forEach(t),ZXo=r(_Pe," (XLNet model)"),_Pe.forEach(t),ezo=i(j),qv=n(j,"LI",{});var uPe=s(qv);N_e=n(uPe,"STRONG",{});var l8t=s(N_e);ozo=r(l8t,"yoso"),l8t.forEach(t),rzo=r(uPe," \u2014 "),jX=n(uPe,"A",{href:!0});var i8t=s(jX);tzo=r(i8t,"YosoForSequenceClassification"),i8t.forEach(t),azo=r(uPe," (YOSO model)"),uPe.forEach(t),j.forEach(t),nzo=i(fa),jv=n(fa,"P",{});var bPe=s(jv);szo=r(bPe,"The model is set in evaluation mode by default using "),I_e=n(bPe,"CODE",{});var d8t=s(I_e);lzo=r(d8t,"model.eval()"),d8t.forEach(t),izo=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(bPe,"CODE",{});var c8t=s(q_e);dzo=r(c8t,"model.train()"),c8t.forEach(t),bPe.forEach(t),czo=i(fa),T(Dv.$$.fragment,fa),fa.forEach(t),sl.forEach(t),gXe=i(f),ad=n(f,"H2",{class:!0});var vQe=s(ad);Gv=n(vQe,"A",{id:!0,class:!0,href:!0});var f8t=s(Gv);j_e=n(f8t,"SPAN",{});var m8t=s(j_e);T(aL.$$.fragment,m8t),m8t.forEach(t),f8t.forEach(t),fzo=i(vQe),D_e=n(vQe,"SPAN",{});var g8t=s(D_e);mzo=r(g8t,"AutoModelForMultipleChoice"),g8t.forEach(t),vQe.forEach(t),hXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(nL.$$.fragment,ll),gzo=i(ll),nd=n(ll,"P",{});var Ire=s(nd);hzo=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DX=n(Ire,"A",{href:!0});var h8t=s(DX);pzo=r(h8t,"from_pretrained()"),h8t.forEach(t),_zo=r(Ire," class method or the "),GX=n(Ire,"A",{href:!0});var p8t=s(GX);uzo=r(p8t,"from_config()"),p8t.forEach(t),bzo=r(Ire,` class
method.`),Ire.forEach(t),vzo=i(ll),sL=n(ll,"P",{});var FQe=s(sL);Fzo=r(FQe,"This class cannot be instantiated directly using "),G_e=n(FQe,"CODE",{});var _8t=s(G_e);Tzo=r(_8t,"__init__()"),_8t.forEach(t),Mzo=r(FQe," (throws an error)."),FQe.forEach(t),Ezo=i(ll),gt=n(ll,"DIV",{class:!0});var bA=s(gt);T(lL.$$.fragment,bA),Czo=i(bA),O_e=n(bA,"P",{});var u8t=s(O_e);wzo=r(u8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u8t.forEach(t),Azo=i(bA),sd=n(bA,"P",{});var qre=s(sd);Lzo=r(qre,`Note:
Loading a model from its configuration file does `),V_e=n(qre,"STRONG",{});var b8t=s(V_e);yzo=r(b8t,"not"),b8t.forEach(t),xzo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(qre,"A",{href:!0});var v8t=s(OX);$zo=r(v8t,"from_pretrained()"),v8t.forEach(t),kzo=r(qre," to load the model weights."),qre.forEach(t),Szo=i(bA),T(Ov.$$.fragment,bA),bA.forEach(t),Rzo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(iL.$$.fragment,ma),Pzo=i(ma),X_e=n(ma,"P",{});var F8t=s(X_e);Bzo=r(F8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F8t.forEach(t),Nzo=i(ma),Oa=n(ma,"P",{});var vA=s(Oa);Izo=r(vA,"The model class to instantiate is selected based on the "),z_e=n(vA,"CODE",{});var T8t=s(z_e);qzo=r(T8t,"model_type"),T8t.forEach(t),jzo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(vA,"CODE",{});var M8t=s(Q_e);Dzo=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),Gzo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(vA,"CODE",{});var E8t=s(W_e);Ozo=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Vzo=r(vA,":"),vA.forEach(t),Xzo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Vv=n(ee,"LI",{});var vPe=s(Vv);H_e=n(vPe,"STRONG",{});var C8t=s(H_e);zzo=r(C8t,"albert"),C8t.forEach(t),Qzo=r(vPe," \u2014 "),VX=n(vPe,"A",{href:!0});var w8t=s(VX);Wzo=r(w8t,"AlbertForMultipleChoice"),w8t.forEach(t),Hzo=r(vPe," (ALBERT model)"),vPe.forEach(t),Uzo=i(ee),Xv=n(ee,"LI",{});var FPe=s(Xv);U_e=n(FPe,"STRONG",{});var A8t=s(U_e);Jzo=r(A8t,"bert"),A8t.forEach(t),Yzo=r(FPe," \u2014 "),XX=n(FPe,"A",{href:!0});var L8t=s(XX);Kzo=r(L8t,"BertForMultipleChoice"),L8t.forEach(t),Zzo=r(FPe," (BERT model)"),FPe.forEach(t),eQo=i(ee),zv=n(ee,"LI",{});var TPe=s(zv);J_e=n(TPe,"STRONG",{});var y8t=s(J_e);oQo=r(y8t,"big_bird"),y8t.forEach(t),rQo=r(TPe," \u2014 "),zX=n(TPe,"A",{href:!0});var x8t=s(zX);tQo=r(x8t,"BigBirdForMultipleChoice"),x8t.forEach(t),aQo=r(TPe," (BigBird model)"),TPe.forEach(t),nQo=i(ee),Qv=n(ee,"LI",{});var MPe=s(Qv);Y_e=n(MPe,"STRONG",{});var $8t=s(Y_e);sQo=r($8t,"camembert"),$8t.forEach(t),lQo=r(MPe," \u2014 "),QX=n(MPe,"A",{href:!0});var k8t=s(QX);iQo=r(k8t,"CamembertForMultipleChoice"),k8t.forEach(t),dQo=r(MPe," (CamemBERT model)"),MPe.forEach(t),cQo=i(ee),Wv=n(ee,"LI",{});var EPe=s(Wv);K_e=n(EPe,"STRONG",{});var S8t=s(K_e);fQo=r(S8t,"canine"),S8t.forEach(t),mQo=r(EPe," \u2014 "),WX=n(EPe,"A",{href:!0});var R8t=s(WX);gQo=r(R8t,"CanineForMultipleChoice"),R8t.forEach(t),hQo=r(EPe," (CANINE model)"),EPe.forEach(t),pQo=i(ee),Hv=n(ee,"LI",{});var CPe=s(Hv);Z_e=n(CPe,"STRONG",{});var P8t=s(Z_e);_Qo=r(P8t,"convbert"),P8t.forEach(t),uQo=r(CPe," \u2014 "),HX=n(CPe,"A",{href:!0});var B8t=s(HX);bQo=r(B8t,"ConvBertForMultipleChoice"),B8t.forEach(t),vQo=r(CPe," (ConvBERT model)"),CPe.forEach(t),FQo=i(ee),Uv=n(ee,"LI",{});var wPe=s(Uv);eue=n(wPe,"STRONG",{});var N8t=s(eue);TQo=r(N8t,"data2vec-text"),N8t.forEach(t),MQo=r(wPe," \u2014 "),UX=n(wPe,"A",{href:!0});var I8t=s(UX);EQo=r(I8t,"Data2VecTextForMultipleChoice"),I8t.forEach(t),CQo=r(wPe," (Data2VecText model)"),wPe.forEach(t),wQo=i(ee),Jv=n(ee,"LI",{});var APe=s(Jv);oue=n(APe,"STRONG",{});var q8t=s(oue);AQo=r(q8t,"deberta-v2"),q8t.forEach(t),LQo=r(APe," \u2014 "),JX=n(APe,"A",{href:!0});var j8t=s(JX);yQo=r(j8t,"DebertaV2ForMultipleChoice"),j8t.forEach(t),xQo=r(APe," (DeBERTa-v2 model)"),APe.forEach(t),$Qo=i(ee),Yv=n(ee,"LI",{});var LPe=s(Yv);rue=n(LPe,"STRONG",{});var D8t=s(rue);kQo=r(D8t,"distilbert"),D8t.forEach(t),SQo=r(LPe," \u2014 "),YX=n(LPe,"A",{href:!0});var G8t=s(YX);RQo=r(G8t,"DistilBertForMultipleChoice"),G8t.forEach(t),PQo=r(LPe," (DistilBERT model)"),LPe.forEach(t),BQo=i(ee),Kv=n(ee,"LI",{});var yPe=s(Kv);tue=n(yPe,"STRONG",{});var O8t=s(tue);NQo=r(O8t,"electra"),O8t.forEach(t),IQo=r(yPe," \u2014 "),KX=n(yPe,"A",{href:!0});var V8t=s(KX);qQo=r(V8t,"ElectraForMultipleChoice"),V8t.forEach(t),jQo=r(yPe," (ELECTRA model)"),yPe.forEach(t),DQo=i(ee),Zv=n(ee,"LI",{});var xPe=s(Zv);aue=n(xPe,"STRONG",{});var X8t=s(aue);GQo=r(X8t,"flaubert"),X8t.forEach(t),OQo=r(xPe," \u2014 "),ZX=n(xPe,"A",{href:!0});var z8t=s(ZX);VQo=r(z8t,"FlaubertForMultipleChoice"),z8t.forEach(t),XQo=r(xPe," (FlauBERT model)"),xPe.forEach(t),zQo=i(ee),e5=n(ee,"LI",{});var $Pe=s(e5);nue=n($Pe,"STRONG",{});var Q8t=s(nue);QQo=r(Q8t,"fnet"),Q8t.forEach(t),WQo=r($Pe," \u2014 "),ez=n($Pe,"A",{href:!0});var W8t=s(ez);HQo=r(W8t,"FNetForMultipleChoice"),W8t.forEach(t),UQo=r($Pe," (FNet model)"),$Pe.forEach(t),JQo=i(ee),o5=n(ee,"LI",{});var kPe=s(o5);sue=n(kPe,"STRONG",{});var H8t=s(sue);YQo=r(H8t,"funnel"),H8t.forEach(t),KQo=r(kPe," \u2014 "),oz=n(kPe,"A",{href:!0});var U8t=s(oz);ZQo=r(U8t,"FunnelForMultipleChoice"),U8t.forEach(t),eWo=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),oWo=i(ee),r5=n(ee,"LI",{});var SPe=s(r5);lue=n(SPe,"STRONG",{});var J8t=s(lue);rWo=r(J8t,"ibert"),J8t.forEach(t),tWo=r(SPe," \u2014 "),rz=n(SPe,"A",{href:!0});var Y8t=s(rz);aWo=r(Y8t,"IBertForMultipleChoice"),Y8t.forEach(t),nWo=r(SPe," (I-BERT model)"),SPe.forEach(t),sWo=i(ee),t5=n(ee,"LI",{});var RPe=s(t5);iue=n(RPe,"STRONG",{});var K8t=s(iue);lWo=r(K8t,"longformer"),K8t.forEach(t),iWo=r(RPe," \u2014 "),tz=n(RPe,"A",{href:!0});var Z8t=s(tz);dWo=r(Z8t,"LongformerForMultipleChoice"),Z8t.forEach(t),cWo=r(RPe," (Longformer model)"),RPe.forEach(t),fWo=i(ee),a5=n(ee,"LI",{});var PPe=s(a5);due=n(PPe,"STRONG",{});var e9t=s(due);mWo=r(e9t,"megatron-bert"),e9t.forEach(t),gWo=r(PPe," \u2014 "),az=n(PPe,"A",{href:!0});var o9t=s(az);hWo=r(o9t,"MegatronBertForMultipleChoice"),o9t.forEach(t),pWo=r(PPe," (Megatron-BERT model)"),PPe.forEach(t),_Wo=i(ee),n5=n(ee,"LI",{});var BPe=s(n5);cue=n(BPe,"STRONG",{});var r9t=s(cue);uWo=r(r9t,"mobilebert"),r9t.forEach(t),bWo=r(BPe," \u2014 "),nz=n(BPe,"A",{href:!0});var t9t=s(nz);vWo=r(t9t,"MobileBertForMultipleChoice"),t9t.forEach(t),FWo=r(BPe," (MobileBERT model)"),BPe.forEach(t),TWo=i(ee),s5=n(ee,"LI",{});var NPe=s(s5);fue=n(NPe,"STRONG",{});var a9t=s(fue);MWo=r(a9t,"mpnet"),a9t.forEach(t),EWo=r(NPe," \u2014 "),sz=n(NPe,"A",{href:!0});var n9t=s(sz);CWo=r(n9t,"MPNetForMultipleChoice"),n9t.forEach(t),wWo=r(NPe," (MPNet model)"),NPe.forEach(t),AWo=i(ee),l5=n(ee,"LI",{});var IPe=s(l5);mue=n(IPe,"STRONG",{});var s9t=s(mue);LWo=r(s9t,"nezha"),s9t.forEach(t),yWo=r(IPe," \u2014 "),lz=n(IPe,"A",{href:!0});var l9t=s(lz);xWo=r(l9t,"NezhaForMultipleChoice"),l9t.forEach(t),$Wo=r(IPe," (Nezha model)"),IPe.forEach(t),kWo=i(ee),i5=n(ee,"LI",{});var qPe=s(i5);gue=n(qPe,"STRONG",{});var i9t=s(gue);SWo=r(i9t,"nystromformer"),i9t.forEach(t),RWo=r(qPe," \u2014 "),iz=n(qPe,"A",{href:!0});var d9t=s(iz);PWo=r(d9t,"NystromformerForMultipleChoice"),d9t.forEach(t),BWo=r(qPe," (Nystr\xF6mformer model)"),qPe.forEach(t),NWo=i(ee),d5=n(ee,"LI",{});var jPe=s(d5);hue=n(jPe,"STRONG",{});var c9t=s(hue);IWo=r(c9t,"qdqbert"),c9t.forEach(t),qWo=r(jPe," \u2014 "),dz=n(jPe,"A",{href:!0});var f9t=s(dz);jWo=r(f9t,"QDQBertForMultipleChoice"),f9t.forEach(t),DWo=r(jPe," (QDQBert model)"),jPe.forEach(t),GWo=i(ee),c5=n(ee,"LI",{});var DPe=s(c5);pue=n(DPe,"STRONG",{});var m9t=s(pue);OWo=r(m9t,"rembert"),m9t.forEach(t),VWo=r(DPe," \u2014 "),cz=n(DPe,"A",{href:!0});var g9t=s(cz);XWo=r(g9t,"RemBertForMultipleChoice"),g9t.forEach(t),zWo=r(DPe," (RemBERT model)"),DPe.forEach(t),QWo=i(ee),f5=n(ee,"LI",{});var GPe=s(f5);_ue=n(GPe,"STRONG",{});var h9t=s(_ue);WWo=r(h9t,"roberta"),h9t.forEach(t),HWo=r(GPe," \u2014 "),fz=n(GPe,"A",{href:!0});var p9t=s(fz);UWo=r(p9t,"RobertaForMultipleChoice"),p9t.forEach(t),JWo=r(GPe," (RoBERTa model)"),GPe.forEach(t),YWo=i(ee),m5=n(ee,"LI",{});var OPe=s(m5);uue=n(OPe,"STRONG",{});var _9t=s(uue);KWo=r(_9t,"roformer"),_9t.forEach(t),ZWo=r(OPe," \u2014 "),mz=n(OPe,"A",{href:!0});var u9t=s(mz);eHo=r(u9t,"RoFormerForMultipleChoice"),u9t.forEach(t),oHo=r(OPe," (RoFormer model)"),OPe.forEach(t),rHo=i(ee),g5=n(ee,"LI",{});var VPe=s(g5);bue=n(VPe,"STRONG",{});var b9t=s(bue);tHo=r(b9t,"squeezebert"),b9t.forEach(t),aHo=r(VPe," \u2014 "),gz=n(VPe,"A",{href:!0});var v9t=s(gz);nHo=r(v9t,"SqueezeBertForMultipleChoice"),v9t.forEach(t),sHo=r(VPe," (SqueezeBERT model)"),VPe.forEach(t),lHo=i(ee),h5=n(ee,"LI",{});var XPe=s(h5);vue=n(XPe,"STRONG",{});var F9t=s(vue);iHo=r(F9t,"xlm"),F9t.forEach(t),dHo=r(XPe," \u2014 "),hz=n(XPe,"A",{href:!0});var T9t=s(hz);cHo=r(T9t,"XLMForMultipleChoice"),T9t.forEach(t),fHo=r(XPe," (XLM model)"),XPe.forEach(t),mHo=i(ee),p5=n(ee,"LI",{});var zPe=s(p5);Fue=n(zPe,"STRONG",{});var M9t=s(Fue);gHo=r(M9t,"xlm-roberta"),M9t.forEach(t),hHo=r(zPe," \u2014 "),pz=n(zPe,"A",{href:!0});var E9t=s(pz);pHo=r(E9t,"XLMRobertaForMultipleChoice"),E9t.forEach(t),_Ho=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),uHo=i(ee),_5=n(ee,"LI",{});var QPe=s(_5);Tue=n(QPe,"STRONG",{});var C9t=s(Tue);bHo=r(C9t,"xlm-roberta-xl"),C9t.forEach(t),vHo=r(QPe," \u2014 "),_z=n(QPe,"A",{href:!0});var w9t=s(_z);FHo=r(w9t,"XLMRobertaXLForMultipleChoice"),w9t.forEach(t),THo=r(QPe," (XLM-RoBERTa-XL model)"),QPe.forEach(t),MHo=i(ee),u5=n(ee,"LI",{});var WPe=s(u5);Mue=n(WPe,"STRONG",{});var A9t=s(Mue);EHo=r(A9t,"xlnet"),A9t.forEach(t),CHo=r(WPe," \u2014 "),uz=n(WPe,"A",{href:!0});var L9t=s(uz);wHo=r(L9t,"XLNetForMultipleChoice"),L9t.forEach(t),AHo=r(WPe," (XLNet model)"),WPe.forEach(t),LHo=i(ee),b5=n(ee,"LI",{});var HPe=s(b5);Eue=n(HPe,"STRONG",{});var y9t=s(Eue);yHo=r(y9t,"yoso"),y9t.forEach(t),xHo=r(HPe," \u2014 "),bz=n(HPe,"A",{href:!0});var x9t=s(bz);$Ho=r(x9t,"YosoForMultipleChoice"),x9t.forEach(t),kHo=r(HPe," (YOSO model)"),HPe.forEach(t),ee.forEach(t),SHo=i(ma),v5=n(ma,"P",{});var UPe=s(v5);RHo=r(UPe,"The model is set in evaluation mode by default using "),Cue=n(UPe,"CODE",{});var $9t=s(Cue);PHo=r($9t,"model.eval()"),$9t.forEach(t),BHo=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(UPe,"CODE",{});var k9t=s(wue);NHo=r(k9t,"model.train()"),k9t.forEach(t),UPe.forEach(t),IHo=i(ma),T(F5.$$.fragment,ma),ma.forEach(t),ll.forEach(t),pXe=i(f),ld=n(f,"H2",{class:!0});var TQe=s(ld);T5=n(TQe,"A",{id:!0,class:!0,href:!0});var S9t=s(T5);Aue=n(S9t,"SPAN",{});var R9t=s(Aue);T(dL.$$.fragment,R9t),R9t.forEach(t),S9t.forEach(t),qHo=i(TQe),Lue=n(TQe,"SPAN",{});var P9t=s(Lue);jHo=r(P9t,"AutoModelForNextSentencePrediction"),P9t.forEach(t),TQe.forEach(t),_Xe=i(f),No=n(f,"DIV",{class:!0});var il=s(No);T(cL.$$.fragment,il),DHo=i(il),id=n(il,"P",{});var jre=s(id);GHo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vz=n(jre,"A",{href:!0});var B9t=s(vz);OHo=r(B9t,"from_pretrained()"),B9t.forEach(t),VHo=r(jre," class method or the "),Fz=n(jre,"A",{href:!0});var N9t=s(Fz);XHo=r(N9t,"from_config()"),N9t.forEach(t),zHo=r(jre,` class
method.`),jre.forEach(t),QHo=i(il),fL=n(il,"P",{});var MQe=s(fL);WHo=r(MQe,"This class cannot be instantiated directly using "),yue=n(MQe,"CODE",{});var I9t=s(yue);HHo=r(I9t,"__init__()"),I9t.forEach(t),UHo=r(MQe," (throws an error)."),MQe.forEach(t),JHo=i(il),ht=n(il,"DIV",{class:!0});var FA=s(ht);T(mL.$$.fragment,FA),YHo=i(FA),xue=n(FA,"P",{});var q9t=s(xue);KHo=r(q9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),q9t.forEach(t),ZHo=i(FA),dd=n(FA,"P",{});var Dre=s(dd);eUo=r(Dre,`Note:
Loading a model from its configuration file does `),$ue=n(Dre,"STRONG",{});var j9t=s($ue);oUo=r(j9t,"not"),j9t.forEach(t),rUo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(Dre,"A",{href:!0});var D9t=s(Tz);tUo=r(D9t,"from_pretrained()"),D9t.forEach(t),aUo=r(Dre," to load the model weights."),Dre.forEach(t),nUo=i(FA),T(M5.$$.fragment,FA),FA.forEach(t),sUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(gL.$$.fragment,ga),lUo=i(ga),kue=n(ga,"P",{});var G9t=s(kue);iUo=r(G9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),G9t.forEach(t),dUo=i(ga),Va=n(ga,"P",{});var TA=s(Va);cUo=r(TA,"The model class to instantiate is selected based on the "),Sue=n(TA,"CODE",{});var O9t=s(Sue);fUo=r(O9t,"model_type"),O9t.forEach(t),mUo=r(TA,` property of the config object (either
passed as an argument or loaded from `),Rue=n(TA,"CODE",{});var V9t=s(Rue);gUo=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),hUo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(TA,"CODE",{});var X9t=s(Pue);pUo=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),_Uo=r(TA,":"),TA.forEach(t),uUo=i(ga),Io=n(ga,"UL",{});var ha=s(Io);E5=n(ha,"LI",{});var JPe=s(E5);Bue=n(JPe,"STRONG",{});var z9t=s(Bue);bUo=r(z9t,"bert"),z9t.forEach(t),vUo=r(JPe," \u2014 "),Mz=n(JPe,"A",{href:!0});var Q9t=s(Mz);FUo=r(Q9t,"BertForNextSentencePrediction"),Q9t.forEach(t),TUo=r(JPe," (BERT model)"),JPe.forEach(t),MUo=i(ha),C5=n(ha,"LI",{});var YPe=s(C5);Nue=n(YPe,"STRONG",{});var W9t=s(Nue);EUo=r(W9t,"fnet"),W9t.forEach(t),CUo=r(YPe," \u2014 "),Ez=n(YPe,"A",{href:!0});var H9t=s(Ez);wUo=r(H9t,"FNetForNextSentencePrediction"),H9t.forEach(t),AUo=r(YPe," (FNet model)"),YPe.forEach(t),LUo=i(ha),w5=n(ha,"LI",{});var KPe=s(w5);Iue=n(KPe,"STRONG",{});var U9t=s(Iue);yUo=r(U9t,"megatron-bert"),U9t.forEach(t),xUo=r(KPe," \u2014 "),Cz=n(KPe,"A",{href:!0});var J9t=s(Cz);$Uo=r(J9t,"MegatronBertForNextSentencePrediction"),J9t.forEach(t),kUo=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),SUo=i(ha),A5=n(ha,"LI",{});var ZPe=s(A5);que=n(ZPe,"STRONG",{});var Y9t=s(que);RUo=r(Y9t,"mobilebert"),Y9t.forEach(t),PUo=r(ZPe," \u2014 "),wz=n(ZPe,"A",{href:!0});var K9t=s(wz);BUo=r(K9t,"MobileBertForNextSentencePrediction"),K9t.forEach(t),NUo=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),IUo=i(ha),L5=n(ha,"LI",{});var eBe=s(L5);jue=n(eBe,"STRONG",{});var Z9t=s(jue);qUo=r(Z9t,"nezha"),Z9t.forEach(t),jUo=r(eBe," \u2014 "),Az=n(eBe,"A",{href:!0});var eMt=s(Az);DUo=r(eMt,"NezhaForNextSentencePrediction"),eMt.forEach(t),GUo=r(eBe," (Nezha model)"),eBe.forEach(t),OUo=i(ha),y5=n(ha,"LI",{});var oBe=s(y5);Due=n(oBe,"STRONG",{});var oMt=s(Due);VUo=r(oMt,"qdqbert"),oMt.forEach(t),XUo=r(oBe," \u2014 "),Lz=n(oBe,"A",{href:!0});var rMt=s(Lz);zUo=r(rMt,"QDQBertForNextSentencePrediction"),rMt.forEach(t),QUo=r(oBe," (QDQBert model)"),oBe.forEach(t),ha.forEach(t),WUo=i(ga),x5=n(ga,"P",{});var rBe=s(x5);HUo=r(rBe,"The model is set in evaluation mode by default using "),Gue=n(rBe,"CODE",{});var tMt=s(Gue);UUo=r(tMt,"model.eval()"),tMt.forEach(t),JUo=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(rBe,"CODE",{});var aMt=s(Oue);YUo=r(aMt,"model.train()"),aMt.forEach(t),rBe.forEach(t),KUo=i(ga),T($5.$$.fragment,ga),ga.forEach(t),il.forEach(t),uXe=i(f),cd=n(f,"H2",{class:!0});var EQe=s(cd);k5=n(EQe,"A",{id:!0,class:!0,href:!0});var nMt=s(k5);Vue=n(nMt,"SPAN",{});var sMt=s(Vue);T(hL.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),ZUo=i(EQe),Xue=n(EQe,"SPAN",{});var lMt=s(Xue);eJo=r(lMt,"AutoModelForTokenClassification"),lMt.forEach(t),EQe.forEach(t),bXe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(pL.$$.fragment,dl),oJo=i(dl),fd=n(dl,"P",{});var Gre=s(fd);rJo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yz=n(Gre,"A",{href:!0});var iMt=s(yz);tJo=r(iMt,"from_pretrained()"),iMt.forEach(t),aJo=r(Gre," class method or the "),xz=n(Gre,"A",{href:!0});var dMt=s(xz);nJo=r(dMt,"from_config()"),dMt.forEach(t),sJo=r(Gre,` class
method.`),Gre.forEach(t),lJo=i(dl),_L=n(dl,"P",{});var CQe=s(_L);iJo=r(CQe,"This class cannot be instantiated directly using "),zue=n(CQe,"CODE",{});var cMt=s(zue);dJo=r(cMt,"__init__()"),cMt.forEach(t),cJo=r(CQe," (throws an error)."),CQe.forEach(t),fJo=i(dl),pt=n(dl,"DIV",{class:!0});var MA=s(pt);T(uL.$$.fragment,MA),mJo=i(MA),Que=n(MA,"P",{});var fMt=s(Que);gJo=r(fMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fMt.forEach(t),hJo=i(MA),md=n(MA,"P",{});var Ore=s(md);pJo=r(Ore,`Note:
Loading a model from its configuration file does `),Wue=n(Ore,"STRONG",{});var mMt=s(Wue);_Jo=r(mMt,"not"),mMt.forEach(t),uJo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(Ore,"A",{href:!0});var gMt=s($z);bJo=r(gMt,"from_pretrained()"),gMt.forEach(t),vJo=r(Ore," to load the model weights."),Ore.forEach(t),FJo=i(MA),T(S5.$$.fragment,MA),MA.forEach(t),TJo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(bL.$$.fragment,pa),MJo=i(pa),Hue=n(pa,"P",{});var hMt=s(Hue);EJo=r(hMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hMt.forEach(t),CJo=i(pa),Xa=n(pa,"P",{});var EA=s(Xa);wJo=r(EA,"The model class to instantiate is selected based on the "),Uue=n(EA,"CODE",{});var pMt=s(Uue);AJo=r(pMt,"model_type"),pMt.forEach(t),LJo=r(EA,` property of the config object (either
passed as an argument or loaded from `),Jue=n(EA,"CODE",{});var _Mt=s(Jue);yJo=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),xJo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(EA,"CODE",{});var uMt=s(Yue);$Jo=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),kJo=r(EA,":"),EA.forEach(t),SJo=i(pa),U=n(pa,"UL",{});var J=s(U);R5=n(J,"LI",{});var tBe=s(R5);Kue=n(tBe,"STRONG",{});var bMt=s(Kue);RJo=r(bMt,"albert"),bMt.forEach(t),PJo=r(tBe," \u2014 "),kz=n(tBe,"A",{href:!0});var vMt=s(kz);BJo=r(vMt,"AlbertForTokenClassification"),vMt.forEach(t),NJo=r(tBe," (ALBERT model)"),tBe.forEach(t),IJo=i(J),P5=n(J,"LI",{});var aBe=s(P5);Zue=n(aBe,"STRONG",{});var FMt=s(Zue);qJo=r(FMt,"bert"),FMt.forEach(t),jJo=r(aBe," \u2014 "),Sz=n(aBe,"A",{href:!0});var TMt=s(Sz);DJo=r(TMt,"BertForTokenClassification"),TMt.forEach(t),GJo=r(aBe," (BERT model)"),aBe.forEach(t),OJo=i(J),B5=n(J,"LI",{});var nBe=s(B5);e1e=n(nBe,"STRONG",{});var MMt=s(e1e);VJo=r(MMt,"big_bird"),MMt.forEach(t),XJo=r(nBe," \u2014 "),Rz=n(nBe,"A",{href:!0});var EMt=s(Rz);zJo=r(EMt,"BigBirdForTokenClassification"),EMt.forEach(t),QJo=r(nBe," (BigBird model)"),nBe.forEach(t),WJo=i(J),N5=n(J,"LI",{});var sBe=s(N5);o1e=n(sBe,"STRONG",{});var CMt=s(o1e);HJo=r(CMt,"bloom"),CMt.forEach(t),UJo=r(sBe," \u2014 "),Pz=n(sBe,"A",{href:!0});var wMt=s(Pz);JJo=r(wMt,"BloomForTokenClassification"),wMt.forEach(t),YJo=r(sBe," (BLOOM model)"),sBe.forEach(t),KJo=i(J),I5=n(J,"LI",{});var lBe=s(I5);r1e=n(lBe,"STRONG",{});var AMt=s(r1e);ZJo=r(AMt,"camembert"),AMt.forEach(t),eYo=r(lBe," \u2014 "),Bz=n(lBe,"A",{href:!0});var LMt=s(Bz);oYo=r(LMt,"CamembertForTokenClassification"),LMt.forEach(t),rYo=r(lBe," (CamemBERT model)"),lBe.forEach(t),tYo=i(J),q5=n(J,"LI",{});var iBe=s(q5);t1e=n(iBe,"STRONG",{});var yMt=s(t1e);aYo=r(yMt,"canine"),yMt.forEach(t),nYo=r(iBe," \u2014 "),Nz=n(iBe,"A",{href:!0});var xMt=s(Nz);sYo=r(xMt,"CanineForTokenClassification"),xMt.forEach(t),lYo=r(iBe," (CANINE model)"),iBe.forEach(t),iYo=i(J),j5=n(J,"LI",{});var dBe=s(j5);a1e=n(dBe,"STRONG",{});var $Mt=s(a1e);dYo=r($Mt,"convbert"),$Mt.forEach(t),cYo=r(dBe," \u2014 "),Iz=n(dBe,"A",{href:!0});var kMt=s(Iz);fYo=r(kMt,"ConvBertForTokenClassification"),kMt.forEach(t),mYo=r(dBe," (ConvBERT model)"),dBe.forEach(t),gYo=i(J),D5=n(J,"LI",{});var cBe=s(D5);n1e=n(cBe,"STRONG",{});var SMt=s(n1e);hYo=r(SMt,"data2vec-text"),SMt.forEach(t),pYo=r(cBe," \u2014 "),qz=n(cBe,"A",{href:!0});var RMt=s(qz);_Yo=r(RMt,"Data2VecTextForTokenClassification"),RMt.forEach(t),uYo=r(cBe," (Data2VecText model)"),cBe.forEach(t),bYo=i(J),G5=n(J,"LI",{});var fBe=s(G5);s1e=n(fBe,"STRONG",{});var PMt=s(s1e);vYo=r(PMt,"deberta"),PMt.forEach(t),FYo=r(fBe," \u2014 "),jz=n(fBe,"A",{href:!0});var BMt=s(jz);TYo=r(BMt,"DebertaForTokenClassification"),BMt.forEach(t),MYo=r(fBe," (DeBERTa model)"),fBe.forEach(t),EYo=i(J),O5=n(J,"LI",{});var mBe=s(O5);l1e=n(mBe,"STRONG",{});var NMt=s(l1e);CYo=r(NMt,"deberta-v2"),NMt.forEach(t),wYo=r(mBe," \u2014 "),Dz=n(mBe,"A",{href:!0});var IMt=s(Dz);AYo=r(IMt,"DebertaV2ForTokenClassification"),IMt.forEach(t),LYo=r(mBe," (DeBERTa-v2 model)"),mBe.forEach(t),yYo=i(J),V5=n(J,"LI",{});var gBe=s(V5);i1e=n(gBe,"STRONG",{});var qMt=s(i1e);xYo=r(qMt,"distilbert"),qMt.forEach(t),$Yo=r(gBe," \u2014 "),Gz=n(gBe,"A",{href:!0});var jMt=s(Gz);kYo=r(jMt,"DistilBertForTokenClassification"),jMt.forEach(t),SYo=r(gBe," (DistilBERT model)"),gBe.forEach(t),RYo=i(J),X5=n(J,"LI",{});var hBe=s(X5);d1e=n(hBe,"STRONG",{});var DMt=s(d1e);PYo=r(DMt,"electra"),DMt.forEach(t),BYo=r(hBe," \u2014 "),Oz=n(hBe,"A",{href:!0});var GMt=s(Oz);NYo=r(GMt,"ElectraForTokenClassification"),GMt.forEach(t),IYo=r(hBe," (ELECTRA model)"),hBe.forEach(t),qYo=i(J),z5=n(J,"LI",{});var pBe=s(z5);c1e=n(pBe,"STRONG",{});var OMt=s(c1e);jYo=r(OMt,"flaubert"),OMt.forEach(t),DYo=r(pBe," \u2014 "),Vz=n(pBe,"A",{href:!0});var VMt=s(Vz);GYo=r(VMt,"FlaubertForTokenClassification"),VMt.forEach(t),OYo=r(pBe," (FlauBERT model)"),pBe.forEach(t),VYo=i(J),Q5=n(J,"LI",{});var _Be=s(Q5);f1e=n(_Be,"STRONG",{});var XMt=s(f1e);XYo=r(XMt,"fnet"),XMt.forEach(t),zYo=r(_Be," \u2014 "),Xz=n(_Be,"A",{href:!0});var zMt=s(Xz);QYo=r(zMt,"FNetForTokenClassification"),zMt.forEach(t),WYo=r(_Be," (FNet model)"),_Be.forEach(t),HYo=i(J),W5=n(J,"LI",{});var uBe=s(W5);m1e=n(uBe,"STRONG",{});var QMt=s(m1e);UYo=r(QMt,"funnel"),QMt.forEach(t),JYo=r(uBe," \u2014 "),zz=n(uBe,"A",{href:!0});var WMt=s(zz);YYo=r(WMt,"FunnelForTokenClassification"),WMt.forEach(t),KYo=r(uBe," (Funnel Transformer model)"),uBe.forEach(t),ZYo=i(J),H5=n(J,"LI",{});var bBe=s(H5);g1e=n(bBe,"STRONG",{});var HMt=s(g1e);eKo=r(HMt,"gpt2"),HMt.forEach(t),oKo=r(bBe," \u2014 "),Qz=n(bBe,"A",{href:!0});var UMt=s(Qz);rKo=r(UMt,"GPT2ForTokenClassification"),UMt.forEach(t),tKo=r(bBe," (OpenAI GPT-2 model)"),bBe.forEach(t),aKo=i(J),U5=n(J,"LI",{});var vBe=s(U5);h1e=n(vBe,"STRONG",{});var JMt=s(h1e);nKo=r(JMt,"ibert"),JMt.forEach(t),sKo=r(vBe," \u2014 "),Wz=n(vBe,"A",{href:!0});var YMt=s(Wz);lKo=r(YMt,"IBertForTokenClassification"),YMt.forEach(t),iKo=r(vBe," (I-BERT model)"),vBe.forEach(t),dKo=i(J),J5=n(J,"LI",{});var FBe=s(J5);p1e=n(FBe,"STRONG",{});var KMt=s(p1e);cKo=r(KMt,"layoutlm"),KMt.forEach(t),fKo=r(FBe," \u2014 "),Hz=n(FBe,"A",{href:!0});var ZMt=s(Hz);mKo=r(ZMt,"LayoutLMForTokenClassification"),ZMt.forEach(t),gKo=r(FBe," (LayoutLM model)"),FBe.forEach(t),hKo=i(J),Y5=n(J,"LI",{});var TBe=s(Y5);_1e=n(TBe,"STRONG",{});var e4t=s(_1e);pKo=r(e4t,"layoutlmv2"),e4t.forEach(t),_Ko=r(TBe," \u2014 "),Uz=n(TBe,"A",{href:!0});var o4t=s(Uz);uKo=r(o4t,"LayoutLMv2ForTokenClassification"),o4t.forEach(t),bKo=r(TBe," (LayoutLMv2 model)"),TBe.forEach(t),vKo=i(J),K5=n(J,"LI",{});var MBe=s(K5);u1e=n(MBe,"STRONG",{});var r4t=s(u1e);FKo=r(r4t,"layoutlmv3"),r4t.forEach(t),TKo=r(MBe," \u2014 "),Jz=n(MBe,"A",{href:!0});var t4t=s(Jz);MKo=r(t4t,"LayoutLMv3ForTokenClassification"),t4t.forEach(t),EKo=r(MBe," (LayoutLMv3 model)"),MBe.forEach(t),CKo=i(J),Z5=n(J,"LI",{});var EBe=s(Z5);b1e=n(EBe,"STRONG",{});var a4t=s(b1e);wKo=r(a4t,"longformer"),a4t.forEach(t),AKo=r(EBe," \u2014 "),Yz=n(EBe,"A",{href:!0});var n4t=s(Yz);LKo=r(n4t,"LongformerForTokenClassification"),n4t.forEach(t),yKo=r(EBe," (Longformer model)"),EBe.forEach(t),xKo=i(J),e0=n(J,"LI",{});var CBe=s(e0);v1e=n(CBe,"STRONG",{});var s4t=s(v1e);$Ko=r(s4t,"megatron-bert"),s4t.forEach(t),kKo=r(CBe," \u2014 "),Kz=n(CBe,"A",{href:!0});var l4t=s(Kz);SKo=r(l4t,"MegatronBertForTokenClassification"),l4t.forEach(t),RKo=r(CBe," (Megatron-BERT model)"),CBe.forEach(t),PKo=i(J),o0=n(J,"LI",{});var wBe=s(o0);F1e=n(wBe,"STRONG",{});var i4t=s(F1e);BKo=r(i4t,"mobilebert"),i4t.forEach(t),NKo=r(wBe," \u2014 "),Zz=n(wBe,"A",{href:!0});var d4t=s(Zz);IKo=r(d4t,"MobileBertForTokenClassification"),d4t.forEach(t),qKo=r(wBe," (MobileBERT model)"),wBe.forEach(t),jKo=i(J),r0=n(J,"LI",{});var ABe=s(r0);T1e=n(ABe,"STRONG",{});var c4t=s(T1e);DKo=r(c4t,"mpnet"),c4t.forEach(t),GKo=r(ABe," \u2014 "),eQ=n(ABe,"A",{href:!0});var f4t=s(eQ);OKo=r(f4t,"MPNetForTokenClassification"),f4t.forEach(t),VKo=r(ABe," (MPNet model)"),ABe.forEach(t),XKo=i(J),t0=n(J,"LI",{});var LBe=s(t0);M1e=n(LBe,"STRONG",{});var m4t=s(M1e);zKo=r(m4t,"nezha"),m4t.forEach(t),QKo=r(LBe," \u2014 "),oQ=n(LBe,"A",{href:!0});var g4t=s(oQ);WKo=r(g4t,"NezhaForTokenClassification"),g4t.forEach(t),HKo=r(LBe," (Nezha model)"),LBe.forEach(t),UKo=i(J),a0=n(J,"LI",{});var yBe=s(a0);E1e=n(yBe,"STRONG",{});var h4t=s(E1e);JKo=r(h4t,"nystromformer"),h4t.forEach(t),YKo=r(yBe," \u2014 "),rQ=n(yBe,"A",{href:!0});var p4t=s(rQ);KKo=r(p4t,"NystromformerForTokenClassification"),p4t.forEach(t),ZKo=r(yBe," (Nystr\xF6mformer model)"),yBe.forEach(t),eZo=i(J),n0=n(J,"LI",{});var xBe=s(n0);C1e=n(xBe,"STRONG",{});var _4t=s(C1e);oZo=r(_4t,"qdqbert"),_4t.forEach(t),rZo=r(xBe," \u2014 "),tQ=n(xBe,"A",{href:!0});var u4t=s(tQ);tZo=r(u4t,"QDQBertForTokenClassification"),u4t.forEach(t),aZo=r(xBe," (QDQBert model)"),xBe.forEach(t),nZo=i(J),s0=n(J,"LI",{});var $Be=s(s0);w1e=n($Be,"STRONG",{});var b4t=s(w1e);sZo=r(b4t,"rembert"),b4t.forEach(t),lZo=r($Be," \u2014 "),aQ=n($Be,"A",{href:!0});var v4t=s(aQ);iZo=r(v4t,"RemBertForTokenClassification"),v4t.forEach(t),dZo=r($Be," (RemBERT model)"),$Be.forEach(t),cZo=i(J),l0=n(J,"LI",{});var kBe=s(l0);A1e=n(kBe,"STRONG",{});var F4t=s(A1e);fZo=r(F4t,"roberta"),F4t.forEach(t),mZo=r(kBe," \u2014 "),nQ=n(kBe,"A",{href:!0});var T4t=s(nQ);gZo=r(T4t,"RobertaForTokenClassification"),T4t.forEach(t),hZo=r(kBe," (RoBERTa model)"),kBe.forEach(t),pZo=i(J),i0=n(J,"LI",{});var SBe=s(i0);L1e=n(SBe,"STRONG",{});var M4t=s(L1e);_Zo=r(M4t,"roformer"),M4t.forEach(t),uZo=r(SBe," \u2014 "),sQ=n(SBe,"A",{href:!0});var E4t=s(sQ);bZo=r(E4t,"RoFormerForTokenClassification"),E4t.forEach(t),vZo=r(SBe," (RoFormer model)"),SBe.forEach(t),FZo=i(J),d0=n(J,"LI",{});var RBe=s(d0);y1e=n(RBe,"STRONG",{});var C4t=s(y1e);TZo=r(C4t,"squeezebert"),C4t.forEach(t),MZo=r(RBe," \u2014 "),lQ=n(RBe,"A",{href:!0});var w4t=s(lQ);EZo=r(w4t,"SqueezeBertForTokenClassification"),w4t.forEach(t),CZo=r(RBe," (SqueezeBERT model)"),RBe.forEach(t),wZo=i(J),c0=n(J,"LI",{});var PBe=s(c0);x1e=n(PBe,"STRONG",{});var A4t=s(x1e);AZo=r(A4t,"xlm"),A4t.forEach(t),LZo=r(PBe," \u2014 "),iQ=n(PBe,"A",{href:!0});var L4t=s(iQ);yZo=r(L4t,"XLMForTokenClassification"),L4t.forEach(t),xZo=r(PBe," (XLM model)"),PBe.forEach(t),$Zo=i(J),f0=n(J,"LI",{});var BBe=s(f0);$1e=n(BBe,"STRONG",{});var y4t=s($1e);kZo=r(y4t,"xlm-roberta"),y4t.forEach(t),SZo=r(BBe," \u2014 "),dQ=n(BBe,"A",{href:!0});var x4t=s(dQ);RZo=r(x4t,"XLMRobertaForTokenClassification"),x4t.forEach(t),PZo=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),BZo=i(J),m0=n(J,"LI",{});var NBe=s(m0);k1e=n(NBe,"STRONG",{});var $4t=s(k1e);NZo=r($4t,"xlm-roberta-xl"),$4t.forEach(t),IZo=r(NBe," \u2014 "),cQ=n(NBe,"A",{href:!0});var k4t=s(cQ);qZo=r(k4t,"XLMRobertaXLForTokenClassification"),k4t.forEach(t),jZo=r(NBe," (XLM-RoBERTa-XL model)"),NBe.forEach(t),DZo=i(J),g0=n(J,"LI",{});var IBe=s(g0);S1e=n(IBe,"STRONG",{});var S4t=s(S1e);GZo=r(S4t,"xlnet"),S4t.forEach(t),OZo=r(IBe," \u2014 "),fQ=n(IBe,"A",{href:!0});var R4t=s(fQ);VZo=r(R4t,"XLNetForTokenClassification"),R4t.forEach(t),XZo=r(IBe," (XLNet model)"),IBe.forEach(t),zZo=i(J),h0=n(J,"LI",{});var qBe=s(h0);R1e=n(qBe,"STRONG",{});var P4t=s(R1e);QZo=r(P4t,"yoso"),P4t.forEach(t),WZo=r(qBe," \u2014 "),mQ=n(qBe,"A",{href:!0});var B4t=s(mQ);HZo=r(B4t,"YosoForTokenClassification"),B4t.forEach(t),UZo=r(qBe," (YOSO model)"),qBe.forEach(t),J.forEach(t),JZo=i(pa),p0=n(pa,"P",{});var jBe=s(p0);YZo=r(jBe,"The model is set in evaluation mode by default using "),P1e=n(jBe,"CODE",{});var N4t=s(P1e);KZo=r(N4t,"model.eval()"),N4t.forEach(t),ZZo=r(jBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B1e=n(jBe,"CODE",{});var I4t=s(B1e);eer=r(I4t,"model.train()"),I4t.forEach(t),jBe.forEach(t),oer=i(pa),T(_0.$$.fragment,pa),pa.forEach(t),dl.forEach(t),vXe=i(f),gd=n(f,"H2",{class:!0});var wQe=s(gd);u0=n(wQe,"A",{id:!0,class:!0,href:!0});var q4t=s(u0);N1e=n(q4t,"SPAN",{});var j4t=s(N1e);T(vL.$$.fragment,j4t),j4t.forEach(t),q4t.forEach(t),rer=i(wQe),I1e=n(wQe,"SPAN",{});var D4t=s(I1e);ter=r(D4t,"AutoModelForQuestionAnswering"),D4t.forEach(t),wQe.forEach(t),FXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(FL.$$.fragment,cl),aer=i(cl),hd=n(cl,"P",{});var Vre=s(hd);ner=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=n(Vre,"A",{href:!0});var G4t=s(gQ);ser=r(G4t,"from_pretrained()"),G4t.forEach(t),ler=r(Vre," class method or the "),hQ=n(Vre,"A",{href:!0});var O4t=s(hQ);ier=r(O4t,"from_config()"),O4t.forEach(t),der=r(Vre,` class
method.`),Vre.forEach(t),cer=i(cl),TL=n(cl,"P",{});var AQe=s(TL);fer=r(AQe,"This class cannot be instantiated directly using "),q1e=n(AQe,"CODE",{});var V4t=s(q1e);mer=r(V4t,"__init__()"),V4t.forEach(t),ger=r(AQe," (throws an error)."),AQe.forEach(t),her=i(cl),_t=n(cl,"DIV",{class:!0});var CA=s(_t);T(ML.$$.fragment,CA),per=i(CA),j1e=n(CA,"P",{});var X4t=s(j1e);_er=r(X4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X4t.forEach(t),uer=i(CA),pd=n(CA,"P",{});var Xre=s(pd);ber=r(Xre,`Note:
Loading a model from its configuration file does `),D1e=n(Xre,"STRONG",{});var z4t=s(D1e);ver=r(z4t,"not"),z4t.forEach(t),Fer=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(Xre,"A",{href:!0});var Q4t=s(pQ);Ter=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Mer=r(Xre," to load the model weights."),Xre.forEach(t),Eer=i(CA),T(b0.$$.fragment,CA),CA.forEach(t),Cer=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(EL.$$.fragment,_a),wer=i(_a),G1e=n(_a,"P",{});var W4t=s(G1e);Aer=r(W4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W4t.forEach(t),Ler=i(_a),za=n(_a,"P",{});var wA=s(za);yer=r(wA,"The model class to instantiate is selected based on the "),O1e=n(wA,"CODE",{});var H4t=s(O1e);xer=r(H4t,"model_type"),H4t.forEach(t),$er=r(wA,` property of the config object (either
passed as an argument or loaded from `),V1e=n(wA,"CODE",{});var U4t=s(V1e);ker=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),Ser=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(wA,"CODE",{});var J4t=s(X1e);Rer=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),Per=r(wA,":"),wA.forEach(t),Ber=i(_a),V=n(_a,"UL",{});var X=s(V);v0=n(X,"LI",{});var DBe=s(v0);z1e=n(DBe,"STRONG",{});var Y4t=s(z1e);Ner=r(Y4t,"albert"),Y4t.forEach(t),Ier=r(DBe," \u2014 "),_Q=n(DBe,"A",{href:!0});var K4t=s(_Q);qer=r(K4t,"AlbertForQuestionAnswering"),K4t.forEach(t),jer=r(DBe," (ALBERT model)"),DBe.forEach(t),Der=i(X),F0=n(X,"LI",{});var GBe=s(F0);Q1e=n(GBe,"STRONG",{});var Z4t=s(Q1e);Ger=r(Z4t,"bart"),Z4t.forEach(t),Oer=r(GBe," \u2014 "),uQ=n(GBe,"A",{href:!0});var eEt=s(uQ);Ver=r(eEt,"BartForQuestionAnswering"),eEt.forEach(t),Xer=r(GBe," (BART model)"),GBe.forEach(t),zer=i(X),T0=n(X,"LI",{});var OBe=s(T0);W1e=n(OBe,"STRONG",{});var oEt=s(W1e);Qer=r(oEt,"bert"),oEt.forEach(t),Wer=r(OBe," \u2014 "),bQ=n(OBe,"A",{href:!0});var rEt=s(bQ);Her=r(rEt,"BertForQuestionAnswering"),rEt.forEach(t),Uer=r(OBe," (BERT model)"),OBe.forEach(t),Jer=i(X),M0=n(X,"LI",{});var VBe=s(M0);H1e=n(VBe,"STRONG",{});var tEt=s(H1e);Yer=r(tEt,"big_bird"),tEt.forEach(t),Ker=r(VBe," \u2014 "),vQ=n(VBe,"A",{href:!0});var aEt=s(vQ);Zer=r(aEt,"BigBirdForQuestionAnswering"),aEt.forEach(t),eor=r(VBe," (BigBird model)"),VBe.forEach(t),oor=i(X),E0=n(X,"LI",{});var XBe=s(E0);U1e=n(XBe,"STRONG",{});var nEt=s(U1e);ror=r(nEt,"bigbird_pegasus"),nEt.forEach(t),tor=r(XBe," \u2014 "),FQ=n(XBe,"A",{href:!0});var sEt=s(FQ);aor=r(sEt,"BigBirdPegasusForQuestionAnswering"),sEt.forEach(t),nor=r(XBe," (BigBird-Pegasus model)"),XBe.forEach(t),sor=i(X),C0=n(X,"LI",{});var zBe=s(C0);J1e=n(zBe,"STRONG",{});var lEt=s(J1e);lor=r(lEt,"camembert"),lEt.forEach(t),ior=r(zBe," \u2014 "),TQ=n(zBe,"A",{href:!0});var iEt=s(TQ);dor=r(iEt,"CamembertForQuestionAnswering"),iEt.forEach(t),cor=r(zBe," (CamemBERT model)"),zBe.forEach(t),mor=i(X),w0=n(X,"LI",{});var QBe=s(w0);Y1e=n(QBe,"STRONG",{});var dEt=s(Y1e);gor=r(dEt,"canine"),dEt.forEach(t),hor=r(QBe," \u2014 "),MQ=n(QBe,"A",{href:!0});var cEt=s(MQ);por=r(cEt,"CanineForQuestionAnswering"),cEt.forEach(t),_or=r(QBe," (CANINE model)"),QBe.forEach(t),uor=i(X),A0=n(X,"LI",{});var WBe=s(A0);K1e=n(WBe,"STRONG",{});var fEt=s(K1e);bor=r(fEt,"convbert"),fEt.forEach(t),vor=r(WBe," \u2014 "),EQ=n(WBe,"A",{href:!0});var mEt=s(EQ);For=r(mEt,"ConvBertForQuestionAnswering"),mEt.forEach(t),Tor=r(WBe," (ConvBERT model)"),WBe.forEach(t),Mor=i(X),L0=n(X,"LI",{});var HBe=s(L0);Z1e=n(HBe,"STRONG",{});var gEt=s(Z1e);Eor=r(gEt,"data2vec-text"),gEt.forEach(t),Cor=r(HBe," \u2014 "),CQ=n(HBe,"A",{href:!0});var hEt=s(CQ);wor=r(hEt,"Data2VecTextForQuestionAnswering"),hEt.forEach(t),Aor=r(HBe," (Data2VecText model)"),HBe.forEach(t),Lor=i(X),y0=n(X,"LI",{});var UBe=s(y0);e2e=n(UBe,"STRONG",{});var pEt=s(e2e);yor=r(pEt,"deberta"),pEt.forEach(t),xor=r(UBe," \u2014 "),wQ=n(UBe,"A",{href:!0});var _Et=s(wQ);$or=r(_Et,"DebertaForQuestionAnswering"),_Et.forEach(t),kor=r(UBe," (DeBERTa model)"),UBe.forEach(t),Sor=i(X),x0=n(X,"LI",{});var JBe=s(x0);o2e=n(JBe,"STRONG",{});var uEt=s(o2e);Ror=r(uEt,"deberta-v2"),uEt.forEach(t),Por=r(JBe," \u2014 "),AQ=n(JBe,"A",{href:!0});var bEt=s(AQ);Bor=r(bEt,"DebertaV2ForQuestionAnswering"),bEt.forEach(t),Nor=r(JBe," (DeBERTa-v2 model)"),JBe.forEach(t),Ior=i(X),$0=n(X,"LI",{});var YBe=s($0);r2e=n(YBe,"STRONG",{});var vEt=s(r2e);qor=r(vEt,"distilbert"),vEt.forEach(t),jor=r(YBe," \u2014 "),LQ=n(YBe,"A",{href:!0});var FEt=s(LQ);Dor=r(FEt,"DistilBertForQuestionAnswering"),FEt.forEach(t),Gor=r(YBe," (DistilBERT model)"),YBe.forEach(t),Oor=i(X),k0=n(X,"LI",{});var KBe=s(k0);t2e=n(KBe,"STRONG",{});var TEt=s(t2e);Vor=r(TEt,"electra"),TEt.forEach(t),Xor=r(KBe," \u2014 "),yQ=n(KBe,"A",{href:!0});var MEt=s(yQ);zor=r(MEt,"ElectraForQuestionAnswering"),MEt.forEach(t),Qor=r(KBe," (ELECTRA model)"),KBe.forEach(t),Wor=i(X),S0=n(X,"LI",{});var ZBe=s(S0);a2e=n(ZBe,"STRONG",{});var EEt=s(a2e);Hor=r(EEt,"flaubert"),EEt.forEach(t),Uor=r(ZBe," \u2014 "),xQ=n(ZBe,"A",{href:!0});var CEt=s(xQ);Jor=r(CEt,"FlaubertForQuestionAnsweringSimple"),CEt.forEach(t),Yor=r(ZBe," (FlauBERT model)"),ZBe.forEach(t),Kor=i(X),R0=n(X,"LI",{});var eNe=s(R0);n2e=n(eNe,"STRONG",{});var wEt=s(n2e);Zor=r(wEt,"fnet"),wEt.forEach(t),err=r(eNe," \u2014 "),$Q=n(eNe,"A",{href:!0});var AEt=s($Q);orr=r(AEt,"FNetForQuestionAnswering"),AEt.forEach(t),rrr=r(eNe," (FNet model)"),eNe.forEach(t),trr=i(X),P0=n(X,"LI",{});var oNe=s(P0);s2e=n(oNe,"STRONG",{});var LEt=s(s2e);arr=r(LEt,"funnel"),LEt.forEach(t),nrr=r(oNe," \u2014 "),kQ=n(oNe,"A",{href:!0});var yEt=s(kQ);srr=r(yEt,"FunnelForQuestionAnswering"),yEt.forEach(t),lrr=r(oNe," (Funnel Transformer model)"),oNe.forEach(t),irr=i(X),B0=n(X,"LI",{});var rNe=s(B0);l2e=n(rNe,"STRONG",{});var xEt=s(l2e);drr=r(xEt,"gptj"),xEt.forEach(t),crr=r(rNe," \u2014 "),SQ=n(rNe,"A",{href:!0});var $Et=s(SQ);frr=r($Et,"GPTJForQuestionAnswering"),$Et.forEach(t),mrr=r(rNe," (GPT-J model)"),rNe.forEach(t),grr=i(X),N0=n(X,"LI",{});var tNe=s(N0);i2e=n(tNe,"STRONG",{});var kEt=s(i2e);hrr=r(kEt,"ibert"),kEt.forEach(t),prr=r(tNe," \u2014 "),RQ=n(tNe,"A",{href:!0});var SEt=s(RQ);_rr=r(SEt,"IBertForQuestionAnswering"),SEt.forEach(t),urr=r(tNe," (I-BERT model)"),tNe.forEach(t),brr=i(X),I0=n(X,"LI",{});var aNe=s(I0);d2e=n(aNe,"STRONG",{});var REt=s(d2e);vrr=r(REt,"layoutlmv2"),REt.forEach(t),Frr=r(aNe," \u2014 "),PQ=n(aNe,"A",{href:!0});var PEt=s(PQ);Trr=r(PEt,"LayoutLMv2ForQuestionAnswering"),PEt.forEach(t),Mrr=r(aNe," (LayoutLMv2 model)"),aNe.forEach(t),Err=i(X),q0=n(X,"LI",{});var nNe=s(q0);c2e=n(nNe,"STRONG",{});var BEt=s(c2e);Crr=r(BEt,"layoutlmv3"),BEt.forEach(t),wrr=r(nNe," \u2014 "),BQ=n(nNe,"A",{href:!0});var NEt=s(BQ);Arr=r(NEt,"LayoutLMv3ForQuestionAnswering"),NEt.forEach(t),Lrr=r(nNe," (LayoutLMv3 model)"),nNe.forEach(t),yrr=i(X),j0=n(X,"LI",{});var sNe=s(j0);f2e=n(sNe,"STRONG",{});var IEt=s(f2e);xrr=r(IEt,"led"),IEt.forEach(t),$rr=r(sNe," \u2014 "),NQ=n(sNe,"A",{href:!0});var qEt=s(NQ);krr=r(qEt,"LEDForQuestionAnswering"),qEt.forEach(t),Srr=r(sNe," (LED model)"),sNe.forEach(t),Rrr=i(X),D0=n(X,"LI",{});var lNe=s(D0);m2e=n(lNe,"STRONG",{});var jEt=s(m2e);Prr=r(jEt,"longformer"),jEt.forEach(t),Brr=r(lNe," \u2014 "),IQ=n(lNe,"A",{href:!0});var DEt=s(IQ);Nrr=r(DEt,"LongformerForQuestionAnswering"),DEt.forEach(t),Irr=r(lNe," (Longformer model)"),lNe.forEach(t),qrr=i(X),G0=n(X,"LI",{});var iNe=s(G0);g2e=n(iNe,"STRONG",{});var GEt=s(g2e);jrr=r(GEt,"lxmert"),GEt.forEach(t),Drr=r(iNe," \u2014 "),qQ=n(iNe,"A",{href:!0});var OEt=s(qQ);Grr=r(OEt,"LxmertForQuestionAnswering"),OEt.forEach(t),Orr=r(iNe," (LXMERT model)"),iNe.forEach(t),Vrr=i(X),O0=n(X,"LI",{});var dNe=s(O0);h2e=n(dNe,"STRONG",{});var VEt=s(h2e);Xrr=r(VEt,"mbart"),VEt.forEach(t),zrr=r(dNe," \u2014 "),jQ=n(dNe,"A",{href:!0});var XEt=s(jQ);Qrr=r(XEt,"MBartForQuestionAnswering"),XEt.forEach(t),Wrr=r(dNe," (mBART model)"),dNe.forEach(t),Hrr=i(X),V0=n(X,"LI",{});var cNe=s(V0);p2e=n(cNe,"STRONG",{});var zEt=s(p2e);Urr=r(zEt,"megatron-bert"),zEt.forEach(t),Jrr=r(cNe," \u2014 "),DQ=n(cNe,"A",{href:!0});var QEt=s(DQ);Yrr=r(QEt,"MegatronBertForQuestionAnswering"),QEt.forEach(t),Krr=r(cNe," (Megatron-BERT model)"),cNe.forEach(t),Zrr=i(X),X0=n(X,"LI",{});var fNe=s(X0);_2e=n(fNe,"STRONG",{});var WEt=s(_2e);etr=r(WEt,"mobilebert"),WEt.forEach(t),otr=r(fNe," \u2014 "),GQ=n(fNe,"A",{href:!0});var HEt=s(GQ);rtr=r(HEt,"MobileBertForQuestionAnswering"),HEt.forEach(t),ttr=r(fNe," (MobileBERT model)"),fNe.forEach(t),atr=i(X),z0=n(X,"LI",{});var mNe=s(z0);u2e=n(mNe,"STRONG",{});var UEt=s(u2e);ntr=r(UEt,"mpnet"),UEt.forEach(t),str=r(mNe," \u2014 "),OQ=n(mNe,"A",{href:!0});var JEt=s(OQ);ltr=r(JEt,"MPNetForQuestionAnswering"),JEt.forEach(t),itr=r(mNe," (MPNet model)"),mNe.forEach(t),dtr=i(X),Q0=n(X,"LI",{});var gNe=s(Q0);b2e=n(gNe,"STRONG",{});var YEt=s(b2e);ctr=r(YEt,"mvp"),YEt.forEach(t),ftr=r(gNe," \u2014 "),VQ=n(gNe,"A",{href:!0});var KEt=s(VQ);mtr=r(KEt,"MvpForQuestionAnswering"),KEt.forEach(t),gtr=r(gNe," (MVP model)"),gNe.forEach(t),htr=i(X),W0=n(X,"LI",{});var hNe=s(W0);v2e=n(hNe,"STRONG",{});var ZEt=s(v2e);ptr=r(ZEt,"nezha"),ZEt.forEach(t),_tr=r(hNe," \u2014 "),XQ=n(hNe,"A",{href:!0});var eCt=s(XQ);utr=r(eCt,"NezhaForQuestionAnswering"),eCt.forEach(t),btr=r(hNe," (Nezha model)"),hNe.forEach(t),vtr=i(X),H0=n(X,"LI",{});var pNe=s(H0);F2e=n(pNe,"STRONG",{});var oCt=s(F2e);Ftr=r(oCt,"nystromformer"),oCt.forEach(t),Ttr=r(pNe," \u2014 "),zQ=n(pNe,"A",{href:!0});var rCt=s(zQ);Mtr=r(rCt,"NystromformerForQuestionAnswering"),rCt.forEach(t),Etr=r(pNe," (Nystr\xF6mformer model)"),pNe.forEach(t),Ctr=i(X),U0=n(X,"LI",{});var _Ne=s(U0);T2e=n(_Ne,"STRONG",{});var tCt=s(T2e);wtr=r(tCt,"qdqbert"),tCt.forEach(t),Atr=r(_Ne," \u2014 "),QQ=n(_Ne,"A",{href:!0});var aCt=s(QQ);Ltr=r(aCt,"QDQBertForQuestionAnswering"),aCt.forEach(t),ytr=r(_Ne," (QDQBert model)"),_Ne.forEach(t),xtr=i(X),J0=n(X,"LI",{});var uNe=s(J0);M2e=n(uNe,"STRONG",{});var nCt=s(M2e);$tr=r(nCt,"reformer"),nCt.forEach(t),ktr=r(uNe," \u2014 "),WQ=n(uNe,"A",{href:!0});var sCt=s(WQ);Str=r(sCt,"ReformerForQuestionAnswering"),sCt.forEach(t),Rtr=r(uNe," (Reformer model)"),uNe.forEach(t),Ptr=i(X),Y0=n(X,"LI",{});var bNe=s(Y0);E2e=n(bNe,"STRONG",{});var lCt=s(E2e);Btr=r(lCt,"rembert"),lCt.forEach(t),Ntr=r(bNe," \u2014 "),HQ=n(bNe,"A",{href:!0});var iCt=s(HQ);Itr=r(iCt,"RemBertForQuestionAnswering"),iCt.forEach(t),qtr=r(bNe," (RemBERT model)"),bNe.forEach(t),jtr=i(X),K0=n(X,"LI",{});var vNe=s(K0);C2e=n(vNe,"STRONG",{});var dCt=s(C2e);Dtr=r(dCt,"roberta"),dCt.forEach(t),Gtr=r(vNe," \u2014 "),UQ=n(vNe,"A",{href:!0});var cCt=s(UQ);Otr=r(cCt,"RobertaForQuestionAnswering"),cCt.forEach(t),Vtr=r(vNe," (RoBERTa model)"),vNe.forEach(t),Xtr=i(X),Z0=n(X,"LI",{});var FNe=s(Z0);w2e=n(FNe,"STRONG",{});var fCt=s(w2e);ztr=r(fCt,"roformer"),fCt.forEach(t),Qtr=r(FNe," \u2014 "),JQ=n(FNe,"A",{href:!0});var mCt=s(JQ);Wtr=r(mCt,"RoFormerForQuestionAnswering"),mCt.forEach(t),Htr=r(FNe," (RoFormer model)"),FNe.forEach(t),Utr=i(X),eF=n(X,"LI",{});var TNe=s(eF);A2e=n(TNe,"STRONG",{});var gCt=s(A2e);Jtr=r(gCt,"splinter"),gCt.forEach(t),Ytr=r(TNe," \u2014 "),YQ=n(TNe,"A",{href:!0});var hCt=s(YQ);Ktr=r(hCt,"SplinterForQuestionAnswering"),hCt.forEach(t),Ztr=r(TNe," (Splinter model)"),TNe.forEach(t),ear=i(X),oF=n(X,"LI",{});var MNe=s(oF);L2e=n(MNe,"STRONG",{});var pCt=s(L2e);oar=r(pCt,"squeezebert"),pCt.forEach(t),rar=r(MNe," \u2014 "),KQ=n(MNe,"A",{href:!0});var _Ct=s(KQ);tar=r(_Ct,"SqueezeBertForQuestionAnswering"),_Ct.forEach(t),aar=r(MNe," (SqueezeBERT model)"),MNe.forEach(t),nar=i(X),rF=n(X,"LI",{});var ENe=s(rF);y2e=n(ENe,"STRONG",{});var uCt=s(y2e);sar=r(uCt,"xlm"),uCt.forEach(t),lar=r(ENe," \u2014 "),ZQ=n(ENe,"A",{href:!0});var bCt=s(ZQ);iar=r(bCt,"XLMForQuestionAnsweringSimple"),bCt.forEach(t),dar=r(ENe," (XLM model)"),ENe.forEach(t),car=i(X),tF=n(X,"LI",{});var CNe=s(tF);x2e=n(CNe,"STRONG",{});var vCt=s(x2e);far=r(vCt,"xlm-roberta"),vCt.forEach(t),mar=r(CNe," \u2014 "),eW=n(CNe,"A",{href:!0});var FCt=s(eW);gar=r(FCt,"XLMRobertaForQuestionAnswering"),FCt.forEach(t),har=r(CNe," (XLM-RoBERTa model)"),CNe.forEach(t),par=i(X),aF=n(X,"LI",{});var wNe=s(aF);$2e=n(wNe,"STRONG",{});var TCt=s($2e);_ar=r(TCt,"xlm-roberta-xl"),TCt.forEach(t),uar=r(wNe," \u2014 "),oW=n(wNe,"A",{href:!0});var MCt=s(oW);bar=r(MCt,"XLMRobertaXLForQuestionAnswering"),MCt.forEach(t),Far=r(wNe," (XLM-RoBERTa-XL model)"),wNe.forEach(t),Tar=i(X),nF=n(X,"LI",{});var ANe=s(nF);k2e=n(ANe,"STRONG",{});var ECt=s(k2e);Mar=r(ECt,"xlnet"),ECt.forEach(t),Ear=r(ANe," \u2014 "),rW=n(ANe,"A",{href:!0});var CCt=s(rW);Car=r(CCt,"XLNetForQuestionAnsweringSimple"),CCt.forEach(t),war=r(ANe," (XLNet model)"),ANe.forEach(t),Aar=i(X),sF=n(X,"LI",{});var LNe=s(sF);S2e=n(LNe,"STRONG",{});var wCt=s(S2e);Lar=r(wCt,"yoso"),wCt.forEach(t),yar=r(LNe," \u2014 "),tW=n(LNe,"A",{href:!0});var ACt=s(tW);xar=r(ACt,"YosoForQuestionAnswering"),ACt.forEach(t),$ar=r(LNe," (YOSO model)"),LNe.forEach(t),X.forEach(t),kar=i(_a),lF=n(_a,"P",{});var yNe=s(lF);Sar=r(yNe,"The model is set in evaluation mode by default using "),R2e=n(yNe,"CODE",{});var LCt=s(R2e);Rar=r(LCt,"model.eval()"),LCt.forEach(t),Par=r(yNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(yNe,"CODE",{});var yCt=s(P2e);Bar=r(yCt,"model.train()"),yCt.forEach(t),yNe.forEach(t),Nar=i(_a),T(iF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),TXe=i(f),_d=n(f,"H2",{class:!0});var LQe=s(_d);dF=n(LQe,"A",{id:!0,class:!0,href:!0});var xCt=s(dF);B2e=n(xCt,"SPAN",{});var $Ct=s(B2e);T(CL.$$.fragment,$Ct),$Ct.forEach(t),xCt.forEach(t),Iar=i(LQe),N2e=n(LQe,"SPAN",{});var kCt=s(N2e);qar=r(kCt,"AutoModelForTableQuestionAnswering"),kCt.forEach(t),LQe.forEach(t),MXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(wL.$$.fragment,fl),jar=i(fl),ud=n(fl,"P",{});var zre=s(ud);Dar=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aW=n(zre,"A",{href:!0});var SCt=s(aW);Gar=r(SCt,"from_pretrained()"),SCt.forEach(t),Oar=r(zre," class method or the "),nW=n(zre,"A",{href:!0});var RCt=s(nW);Var=r(RCt,"from_config()"),RCt.forEach(t),Xar=r(zre,` class
method.`),zre.forEach(t),zar=i(fl),AL=n(fl,"P",{});var yQe=s(AL);Qar=r(yQe,"This class cannot be instantiated directly using "),I2e=n(yQe,"CODE",{});var PCt=s(I2e);War=r(PCt,"__init__()"),PCt.forEach(t),Har=r(yQe," (throws an error)."),yQe.forEach(t),Uar=i(fl),ut=n(fl,"DIV",{class:!0});var AA=s(ut);T(LL.$$.fragment,AA),Jar=i(AA),q2e=n(AA,"P",{});var BCt=s(q2e);Yar=r(BCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BCt.forEach(t),Kar=i(AA),bd=n(AA,"P",{});var Qre=s(bd);Zar=r(Qre,`Note:
Loading a model from its configuration file does `),j2e=n(Qre,"STRONG",{});var NCt=s(j2e);enr=r(NCt,"not"),NCt.forEach(t),onr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Qre,"A",{href:!0});var ICt=s(sW);rnr=r(ICt,"from_pretrained()"),ICt.forEach(t),tnr=r(Qre," to load the model weights."),Qre.forEach(t),anr=i(AA),T(cF.$$.fragment,AA),AA.forEach(t),nnr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(yL.$$.fragment,ua),snr=i(ua),D2e=n(ua,"P",{});var qCt=s(D2e);lnr=r(qCt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qCt.forEach(t),inr=i(ua),Qa=n(ua,"P",{});var LA=s(Qa);dnr=r(LA,"The model class to instantiate is selected based on the "),G2e=n(LA,"CODE",{});var jCt=s(G2e);cnr=r(jCt,"model_type"),jCt.forEach(t),fnr=r(LA,` property of the config object (either
passed as an argument or loaded from `),O2e=n(LA,"CODE",{});var DCt=s(O2e);mnr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),gnr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(LA,"CODE",{});var GCt=s(V2e);hnr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),pnr=r(LA,":"),LA.forEach(t),_nr=i(ua),X2e=n(ua,"UL",{});var OCt=s(X2e);fF=n(OCt,"LI",{});var xNe=s(fF);z2e=n(xNe,"STRONG",{});var VCt=s(z2e);unr=r(VCt,"tapas"),VCt.forEach(t),bnr=r(xNe," \u2014 "),lW=n(xNe,"A",{href:!0});var XCt=s(lW);vnr=r(XCt,"TapasForQuestionAnswering"),XCt.forEach(t),Fnr=r(xNe," (TAPAS model)"),xNe.forEach(t),OCt.forEach(t),Tnr=i(ua),mF=n(ua,"P",{});var $Ne=s(mF);Mnr=r($Ne,"The model is set in evaluation mode by default using "),Q2e=n($Ne,"CODE",{});var zCt=s(Q2e);Enr=r(zCt,"model.eval()"),zCt.forEach(t),Cnr=r($Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n($Ne,"CODE",{});var QCt=s(W2e);wnr=r(QCt,"model.train()"),QCt.forEach(t),$Ne.forEach(t),Anr=i(ua),T(gF.$$.fragment,ua),ua.forEach(t),fl.forEach(t),EXe=i(f),vd=n(f,"H2",{class:!0});var xQe=s(vd);hF=n(xQe,"A",{id:!0,class:!0,href:!0});var WCt=s(hF);H2e=n(WCt,"SPAN",{});var HCt=s(H2e);T(xL.$$.fragment,HCt),HCt.forEach(t),WCt.forEach(t),Lnr=i(xQe),U2e=n(xQe,"SPAN",{});var UCt=s(U2e);ynr=r(UCt,"AutoModelForImageClassification"),UCt.forEach(t),xQe.forEach(t),CXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T($L.$$.fragment,ml),xnr=i(ml),Fd=n(ml,"P",{});var Wre=s(Fd);$nr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iW=n(Wre,"A",{href:!0});var JCt=s(iW);knr=r(JCt,"from_pretrained()"),JCt.forEach(t),Snr=r(Wre," class method or the "),dW=n(Wre,"A",{href:!0});var YCt=s(dW);Rnr=r(YCt,"from_config()"),YCt.forEach(t),Pnr=r(Wre,` class
method.`),Wre.forEach(t),Bnr=i(ml),kL=n(ml,"P",{});var $Qe=s(kL);Nnr=r($Qe,"This class cannot be instantiated directly using "),J2e=n($Qe,"CODE",{});var KCt=s(J2e);Inr=r(KCt,"__init__()"),KCt.forEach(t),qnr=r($Qe," (throws an error)."),$Qe.forEach(t),jnr=i(ml),bt=n(ml,"DIV",{class:!0});var yA=s(bt);T(SL.$$.fragment,yA),Dnr=i(yA),Y2e=n(yA,"P",{});var ZCt=s(Y2e);Gnr=r(ZCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZCt.forEach(t),Onr=i(yA),Td=n(yA,"P",{});var Hre=s(Td);Vnr=r(Hre,`Note:
Loading a model from its configuration file does `),K2e=n(Hre,"STRONG",{});var e3t=s(K2e);Xnr=r(e3t,"not"),e3t.forEach(t),znr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Hre,"A",{href:!0});var o3t=s(cW);Qnr=r(o3t,"from_pretrained()"),o3t.forEach(t),Wnr=r(Hre," to load the model weights."),Hre.forEach(t),Hnr=i(yA),T(pF.$$.fragment,yA),yA.forEach(t),Unr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(RL.$$.fragment,ba),Jnr=i(ba),Z2e=n(ba,"P",{});var r3t=s(Z2e);Ynr=r(r3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),r3t.forEach(t),Knr=i(ba),Wa=n(ba,"P",{});var xA=s(Wa);Znr=r(xA,"The model class to instantiate is selected based on the "),ebe=n(xA,"CODE",{});var t3t=s(ebe);esr=r(t3t,"model_type"),t3t.forEach(t),osr=r(xA,` property of the config object (either
passed as an argument or loaded from `),obe=n(xA,"CODE",{});var a3t=s(obe);rsr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),tsr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(xA,"CODE",{});var n3t=s(rbe);asr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),nsr=r(xA,":"),xA.forEach(t),ssr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);_F=n(Te,"LI",{});var kNe=s(_F);tbe=n(kNe,"STRONG",{});var s3t=s(tbe);lsr=r(s3t,"beit"),s3t.forEach(t),isr=r(kNe," \u2014 "),fW=n(kNe,"A",{href:!0});var l3t=s(fW);dsr=r(l3t,"BeitForImageClassification"),l3t.forEach(t),csr=r(kNe," (BEiT model)"),kNe.forEach(t),fsr=i(Te),uF=n(Te,"LI",{});var SNe=s(uF);abe=n(SNe,"STRONG",{});var i3t=s(abe);msr=r(i3t,"convnext"),i3t.forEach(t),gsr=r(SNe," \u2014 "),mW=n(SNe,"A",{href:!0});var d3t=s(mW);hsr=r(d3t,"ConvNextForImageClassification"),d3t.forEach(t),psr=r(SNe," (ConvNeXT model)"),SNe.forEach(t),_sr=i(Te),bF=n(Te,"LI",{});var RNe=s(bF);nbe=n(RNe,"STRONG",{});var c3t=s(nbe);usr=r(c3t,"cvt"),c3t.forEach(t),bsr=r(RNe," \u2014 "),gW=n(RNe,"A",{href:!0});var f3t=s(gW);vsr=r(f3t,"CvtForImageClassification"),f3t.forEach(t),Fsr=r(RNe," (CvT model)"),RNe.forEach(t),Tsr=i(Te),vF=n(Te,"LI",{});var PNe=s(vF);sbe=n(PNe,"STRONG",{});var m3t=s(sbe);Msr=r(m3t,"data2vec-vision"),m3t.forEach(t),Esr=r(PNe," \u2014 "),hW=n(PNe,"A",{href:!0});var g3t=s(hW);Csr=r(g3t,"Data2VecVisionForImageClassification"),g3t.forEach(t),wsr=r(PNe," (Data2VecVision model)"),PNe.forEach(t),Asr=i(Te),Hs=n(Te,"LI",{});var xS=s(Hs);lbe=n(xS,"STRONG",{});var h3t=s(lbe);Lsr=r(h3t,"deit"),h3t.forEach(t),ysr=r(xS," \u2014 "),pW=n(xS,"A",{href:!0});var p3t=s(pW);xsr=r(p3t,"DeiTForImageClassification"),p3t.forEach(t),$sr=r(xS," or "),_W=n(xS,"A",{href:!0});var _3t=s(_W);ksr=r(_3t,"DeiTForImageClassificationWithTeacher"),_3t.forEach(t),Ssr=r(xS," (DeiT model)"),xS.forEach(t),Rsr=i(Te),FF=n(Te,"LI",{});var BNe=s(FF);ibe=n(BNe,"STRONG",{});var u3t=s(ibe);Psr=r(u3t,"imagegpt"),u3t.forEach(t),Bsr=r(BNe," \u2014 "),uW=n(BNe,"A",{href:!0});var b3t=s(uW);Nsr=r(b3t,"ImageGPTForImageClassification"),b3t.forEach(t),Isr=r(BNe," (ImageGPT model)"),BNe.forEach(t),qsr=i(Te),Us=n(Te,"LI",{});var $S=s(Us);dbe=n($S,"STRONG",{});var v3t=s(dbe);jsr=r(v3t,"levit"),v3t.forEach(t),Dsr=r($S," \u2014 "),bW=n($S,"A",{href:!0});var F3t=s(bW);Gsr=r(F3t,"LevitForImageClassification"),F3t.forEach(t),Osr=r($S," or "),vW=n($S,"A",{href:!0});var T3t=s(vW);Vsr=r(T3t,"LevitForImageClassificationWithTeacher"),T3t.forEach(t),Xsr=r($S," (LeViT model)"),$S.forEach(t),zsr=i(Te),TF=n(Te,"LI",{});var NNe=s(TF);cbe=n(NNe,"STRONG",{});var M3t=s(cbe);Qsr=r(M3t,"mobilevit"),M3t.forEach(t),Wsr=r(NNe," \u2014 "),FW=n(NNe,"A",{href:!0});var E3t=s(FW);Hsr=r(E3t,"MobileViTForImageClassification"),E3t.forEach(t),Usr=r(NNe," (MobileViT model)"),NNe.forEach(t),Jsr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);fbe=n(Sf,"STRONG",{});var C3t=s(fbe);Ysr=r(C3t,"perceiver"),C3t.forEach(t),Ksr=r(Sf," \u2014 "),TW=n(Sf,"A",{href:!0});var w3t=s(TW);Zsr=r(w3t,"PerceiverForImageClassificationLearned"),w3t.forEach(t),elr=r(Sf," or "),MW=n(Sf,"A",{href:!0});var A3t=s(MW);olr=r(A3t,"PerceiverForImageClassificationFourier"),A3t.forEach(t),rlr=r(Sf," or "),EW=n(Sf,"A",{href:!0});var L3t=s(EW);tlr=r(L3t,"PerceiverForImageClassificationConvProcessing"),L3t.forEach(t),alr=r(Sf," (Perceiver model)"),Sf.forEach(t),nlr=i(Te),MF=n(Te,"LI",{});var INe=s(MF);mbe=n(INe,"STRONG",{});var y3t=s(mbe);slr=r(y3t,"poolformer"),y3t.forEach(t),llr=r(INe," \u2014 "),CW=n(INe,"A",{href:!0});var x3t=s(CW);ilr=r(x3t,"PoolFormerForImageClassification"),x3t.forEach(t),dlr=r(INe," (PoolFormer model)"),INe.forEach(t),clr=i(Te),EF=n(Te,"LI",{});var qNe=s(EF);gbe=n(qNe,"STRONG",{});var $3t=s(gbe);flr=r($3t,"regnet"),$3t.forEach(t),mlr=r(qNe," \u2014 "),wW=n(qNe,"A",{href:!0});var k3t=s(wW);glr=r(k3t,"RegNetForImageClassification"),k3t.forEach(t),hlr=r(qNe," (RegNet model)"),qNe.forEach(t),plr=i(Te),CF=n(Te,"LI",{});var jNe=s(CF);hbe=n(jNe,"STRONG",{});var S3t=s(hbe);_lr=r(S3t,"resnet"),S3t.forEach(t),ulr=r(jNe," \u2014 "),AW=n(jNe,"A",{href:!0});var R3t=s(AW);blr=r(R3t,"ResNetForImageClassification"),R3t.forEach(t),vlr=r(jNe," (ResNet model)"),jNe.forEach(t),Flr=i(Te),wF=n(Te,"LI",{});var DNe=s(wF);pbe=n(DNe,"STRONG",{});var P3t=s(pbe);Tlr=r(P3t,"segformer"),P3t.forEach(t),Mlr=r(DNe," \u2014 "),LW=n(DNe,"A",{href:!0});var B3t=s(LW);Elr=r(B3t,"SegformerForImageClassification"),B3t.forEach(t),Clr=r(DNe," (SegFormer model)"),DNe.forEach(t),wlr=i(Te),AF=n(Te,"LI",{});var GNe=s(AF);_be=n(GNe,"STRONG",{});var N3t=s(_be);Alr=r(N3t,"swin"),N3t.forEach(t),Llr=r(GNe," \u2014 "),yW=n(GNe,"A",{href:!0});var I3t=s(yW);ylr=r(I3t,"SwinForImageClassification"),I3t.forEach(t),xlr=r(GNe," (Swin Transformer model)"),GNe.forEach(t),$lr=i(Te),LF=n(Te,"LI",{});var ONe=s(LF);ube=n(ONe,"STRONG",{});var q3t=s(ube);klr=r(q3t,"van"),q3t.forEach(t),Slr=r(ONe," \u2014 "),xW=n(ONe,"A",{href:!0});var j3t=s(xW);Rlr=r(j3t,"VanForImageClassification"),j3t.forEach(t),Plr=r(ONe," (VAN model)"),ONe.forEach(t),Blr=i(Te),yF=n(Te,"LI",{});var VNe=s(yF);bbe=n(VNe,"STRONG",{});var D3t=s(bbe);Nlr=r(D3t,"vit"),D3t.forEach(t),Ilr=r(VNe," \u2014 "),$W=n(VNe,"A",{href:!0});var G3t=s($W);qlr=r(G3t,"ViTForImageClassification"),G3t.forEach(t),jlr=r(VNe," (ViT model)"),VNe.forEach(t),Te.forEach(t),Dlr=i(ba),xF=n(ba,"P",{});var XNe=s(xF);Glr=r(XNe,"The model is set in evaluation mode by default using "),vbe=n(XNe,"CODE",{});var O3t=s(vbe);Olr=r(O3t,"model.eval()"),O3t.forEach(t),Vlr=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(XNe,"CODE",{});var V3t=s(Fbe);Xlr=r(V3t,"model.train()"),V3t.forEach(t),XNe.forEach(t),zlr=i(ba),T($F.$$.fragment,ba),ba.forEach(t),ml.forEach(t),wXe=i(f),Md=n(f,"H2",{class:!0});var kQe=s(Md);kF=n(kQe,"A",{id:!0,class:!0,href:!0});var X3t=s(kF);Tbe=n(X3t,"SPAN",{});var z3t=s(Tbe);T(PL.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),Qlr=i(kQe),Mbe=n(kQe,"SPAN",{});var Q3t=s(Mbe);Wlr=r(Q3t,"AutoModelForVision2Seq"),Q3t.forEach(t),kQe.forEach(t),AXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(BL.$$.fragment,gl),Hlr=i(gl),Ed=n(gl,"P",{});var Ure=s(Ed);Ulr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=n(Ure,"A",{href:!0});var W3t=s(kW);Jlr=r(W3t,"from_pretrained()"),W3t.forEach(t),Ylr=r(Ure," class method or the "),SW=n(Ure,"A",{href:!0});var H3t=s(SW);Klr=r(H3t,"from_config()"),H3t.forEach(t),Zlr=r(Ure,` class
method.`),Ure.forEach(t),eir=i(gl),NL=n(gl,"P",{});var SQe=s(NL);oir=r(SQe,"This class cannot be instantiated directly using "),Ebe=n(SQe,"CODE",{});var U3t=s(Ebe);rir=r(U3t,"__init__()"),U3t.forEach(t),tir=r(SQe," (throws an error)."),SQe.forEach(t),air=i(gl),Ft=n(gl,"DIV",{class:!0});var $A=s(Ft);T(IL.$$.fragment,$A),nir=i($A),Cbe=n($A,"P",{});var J3t=s(Cbe);sir=r(J3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J3t.forEach(t),lir=i($A),Cd=n($A,"P",{});var Jre=s(Cd);iir=r(Jre,`Note:
Loading a model from its configuration file does `),wbe=n(Jre,"STRONG",{});var Y3t=s(wbe);dir=r(Y3t,"not"),Y3t.forEach(t),cir=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(Jre,"A",{href:!0});var K3t=s(RW);fir=r(K3t,"from_pretrained()"),K3t.forEach(t),mir=r(Jre," to load the model weights."),Jre.forEach(t),gir=i($A),T(SF.$$.fragment,$A),$A.forEach(t),hir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(qL.$$.fragment,va),pir=i(va),Abe=n(va,"P",{});var Z3t=s(Abe);_ir=r(Z3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z3t.forEach(t),uir=i(va),Ha=n(va,"P",{});var kA=s(Ha);bir=r(kA,"The model class to instantiate is selected based on the "),Lbe=n(kA,"CODE",{});var ewt=s(Lbe);vir=r(ewt,"model_type"),ewt.forEach(t),Fir=r(kA,` property of the config object (either
passed as an argument or loaded from `),ybe=n(kA,"CODE",{});var owt=s(ybe);Tir=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),Mir=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(kA,"CODE",{});var rwt=s(xbe);Eir=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),Cir=r(kA,":"),kA.forEach(t),wir=i(va),$be=n(va,"UL",{});var twt=s($be);RF=n(twt,"LI",{});var zNe=s(RF);kbe=n(zNe,"STRONG",{});var awt=s(kbe);Air=r(awt,"vision-encoder-decoder"),awt.forEach(t),Lir=r(zNe," \u2014 "),PW=n(zNe,"A",{href:!0});var nwt=s(PW);yir=r(nwt,"VisionEncoderDecoderModel"),nwt.forEach(t),xir=r(zNe," (Vision Encoder decoder model)"),zNe.forEach(t),twt.forEach(t),$ir=i(va),PF=n(va,"P",{});var QNe=s(PF);kir=r(QNe,"The model is set in evaluation mode by default using "),Sbe=n(QNe,"CODE",{});var swt=s(Sbe);Sir=r(swt,"model.eval()"),swt.forEach(t),Rir=r(QNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(QNe,"CODE",{});var lwt=s(Rbe);Pir=r(lwt,"model.train()"),lwt.forEach(t),QNe.forEach(t),Bir=i(va),T(BF.$$.fragment,va),va.forEach(t),gl.forEach(t),LXe=i(f),wd=n(f,"H2",{class:!0});var RQe=s(wd);NF=n(RQe,"A",{id:!0,class:!0,href:!0});var iwt=s(NF);Pbe=n(iwt,"SPAN",{});var dwt=s(Pbe);T(jL.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),Nir=i(RQe),Bbe=n(RQe,"SPAN",{});var cwt=s(Bbe);Iir=r(cwt,"AutoModelForVisualQuestionAnswering"),cwt.forEach(t),RQe.forEach(t),yXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(DL.$$.fragment,hl),qir=i(hl),Ad=n(hl,"P",{});var Yre=s(Ad);jir=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),BW=n(Yre,"A",{href:!0});var fwt=s(BW);Dir=r(fwt,"from_pretrained()"),fwt.forEach(t),Gir=r(Yre," class method or the "),NW=n(Yre,"A",{href:!0});var mwt=s(NW);Oir=r(mwt,"from_config()"),mwt.forEach(t),Vir=r(Yre,` class
method.`),Yre.forEach(t),Xir=i(hl),GL=n(hl,"P",{});var PQe=s(GL);zir=r(PQe,"This class cannot be instantiated directly using "),Nbe=n(PQe,"CODE",{});var gwt=s(Nbe);Qir=r(gwt,"__init__()"),gwt.forEach(t),Wir=r(PQe," (throws an error)."),PQe.forEach(t),Hir=i(hl),Tt=n(hl,"DIV",{class:!0});var SA=s(Tt);T(OL.$$.fragment,SA),Uir=i(SA),Ibe=n(SA,"P",{});var hwt=s(Ibe);Jir=r(hwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),hwt.forEach(t),Yir=i(SA),Ld=n(SA,"P",{});var Kre=s(Ld);Kir=r(Kre,`Note:
Loading a model from its configuration file does `),qbe=n(Kre,"STRONG",{});var pwt=s(qbe);Zir=r(pwt,"not"),pwt.forEach(t),edr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(Kre,"A",{href:!0});var _wt=s(IW);odr=r(_wt,"from_pretrained()"),_wt.forEach(t),rdr=r(Kre," to load the model weights."),Kre.forEach(t),tdr=i(SA),T(IF.$$.fragment,SA),SA.forEach(t),adr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(VL.$$.fragment,Fa),ndr=i(Fa),jbe=n(Fa,"P",{});var uwt=s(jbe);sdr=r(uwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),uwt.forEach(t),ldr=i(Fa),Ua=n(Fa,"P",{});var RA=s(Ua);idr=r(RA,"The model class to instantiate is selected based on the "),Dbe=n(RA,"CODE",{});var bwt=s(Dbe);ddr=r(bwt,"model_type"),bwt.forEach(t),cdr=r(RA,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(RA,"CODE",{});var vwt=s(Gbe);fdr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),mdr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(RA,"CODE",{});var Fwt=s(Obe);gdr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),hdr=r(RA,":"),RA.forEach(t),pdr=i(Fa),Vbe=n(Fa,"UL",{});var Twt=s(Vbe);qF=n(Twt,"LI",{});var WNe=s(qF);Xbe=n(WNe,"STRONG",{});var Mwt=s(Xbe);_dr=r(Mwt,"vilt"),Mwt.forEach(t),udr=r(WNe," \u2014 "),qW=n(WNe,"A",{href:!0});var Ewt=s(qW);bdr=r(Ewt,"ViltForQuestionAnswering"),Ewt.forEach(t),vdr=r(WNe," (ViLT model)"),WNe.forEach(t),Twt.forEach(t),Fdr=i(Fa),jF=n(Fa,"P",{});var HNe=s(jF);Tdr=r(HNe,"The model is set in evaluation mode by default using "),zbe=n(HNe,"CODE",{});var Cwt=s(zbe);Mdr=r(Cwt,"model.eval()"),Cwt.forEach(t),Edr=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(HNe,"CODE",{});var wwt=s(Qbe);Cdr=r(wwt,"model.train()"),wwt.forEach(t),HNe.forEach(t),wdr=i(Fa),T(DF.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),xXe=i(f),yd=n(f,"H2",{class:!0});var BQe=s(yd);GF=n(BQe,"A",{id:!0,class:!0,href:!0});var Awt=s(GF);Wbe=n(Awt,"SPAN",{});var Lwt=s(Wbe);T(XL.$$.fragment,Lwt),Lwt.forEach(t),Awt.forEach(t),Adr=i(BQe),Hbe=n(BQe,"SPAN",{});var ywt=s(Hbe);Ldr=r(ywt,"AutoModelForAudioClassification"),ywt.forEach(t),BQe.forEach(t),$Xe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(zL.$$.fragment,pl),ydr=i(pl),xd=n(pl,"P",{});var Zre=s(xd);xdr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jW=n(Zre,"A",{href:!0});var xwt=s(jW);$dr=r(xwt,"from_pretrained()"),xwt.forEach(t),kdr=r(Zre," class method or the "),DW=n(Zre,"A",{href:!0});var $wt=s(DW);Sdr=r($wt,"from_config()"),$wt.forEach(t),Rdr=r(Zre,` class
method.`),Zre.forEach(t),Pdr=i(pl),QL=n(pl,"P",{});var NQe=s(QL);Bdr=r(NQe,"This class cannot be instantiated directly using "),Ube=n(NQe,"CODE",{});var kwt=s(Ube);Ndr=r(kwt,"__init__()"),kwt.forEach(t),Idr=r(NQe," (throws an error)."),NQe.forEach(t),qdr=i(pl),Mt=n(pl,"DIV",{class:!0});var PA=s(Mt);T(WL.$$.fragment,PA),jdr=i(PA),Jbe=n(PA,"P",{});var Swt=s(Jbe);Ddr=r(Swt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Swt.forEach(t),Gdr=i(PA),$d=n(PA,"P",{});var ete=s($d);Odr=r(ete,`Note:
Loading a model from its configuration file does `),Ybe=n(ete,"STRONG",{});var Rwt=s(Ybe);Vdr=r(Rwt,"not"),Rwt.forEach(t),Xdr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(ete,"A",{href:!0});var Pwt=s(GW);zdr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),Qdr=r(ete," to load the model weights."),ete.forEach(t),Wdr=i(PA),T(OF.$$.fragment,PA),PA.forEach(t),Hdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(HL.$$.fragment,Ta),Udr=i(Ta),Kbe=n(Ta,"P",{});var Bwt=s(Kbe);Jdr=r(Bwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bwt.forEach(t),Ydr=i(Ta),Ja=n(Ta,"P",{});var BA=s(Ja);Kdr=r(BA,"The model class to instantiate is selected based on the "),Zbe=n(BA,"CODE",{});var Nwt=s(Zbe);Zdr=r(Nwt,"model_type"),Nwt.forEach(t),ecr=r(BA,` property of the config object (either
passed as an argument or loaded from `),eve=n(BA,"CODE",{});var Iwt=s(eve);ocr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),rcr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(BA,"CODE",{});var qwt=s(ove);tcr=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),acr=r(BA,":"),BA.forEach(t),ncr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);VF=n(ze,"LI",{});var UNe=s(VF);rve=n(UNe,"STRONG",{});var jwt=s(rve);scr=r(jwt,"data2vec-audio"),jwt.forEach(t),lcr=r(UNe," \u2014 "),OW=n(UNe,"A",{href:!0});var Dwt=s(OW);icr=r(Dwt,"Data2VecAudioForSequenceClassification"),Dwt.forEach(t),dcr=r(UNe," (Data2VecAudio model)"),UNe.forEach(t),ccr=i(ze),XF=n(ze,"LI",{});var JNe=s(XF);tve=n(JNe,"STRONG",{});var Gwt=s(tve);fcr=r(Gwt,"hubert"),Gwt.forEach(t),mcr=r(JNe," \u2014 "),VW=n(JNe,"A",{href:!0});var Owt=s(VW);gcr=r(Owt,"HubertForSequenceClassification"),Owt.forEach(t),hcr=r(JNe," (Hubert model)"),JNe.forEach(t),pcr=i(ze),zF=n(ze,"LI",{});var YNe=s(zF);ave=n(YNe,"STRONG",{});var Vwt=s(ave);_cr=r(Vwt,"sew"),Vwt.forEach(t),ucr=r(YNe," \u2014 "),XW=n(YNe,"A",{href:!0});var Xwt=s(XW);bcr=r(Xwt,"SEWForSequenceClassification"),Xwt.forEach(t),vcr=r(YNe," (SEW model)"),YNe.forEach(t),Fcr=i(ze),QF=n(ze,"LI",{});var KNe=s(QF);nve=n(KNe,"STRONG",{});var zwt=s(nve);Tcr=r(zwt,"sew-d"),zwt.forEach(t),Mcr=r(KNe," \u2014 "),zW=n(KNe,"A",{href:!0});var Qwt=s(zW);Ecr=r(Qwt,"SEWDForSequenceClassification"),Qwt.forEach(t),Ccr=r(KNe," (SEW-D model)"),KNe.forEach(t),wcr=i(ze),WF=n(ze,"LI",{});var ZNe=s(WF);sve=n(ZNe,"STRONG",{});var Wwt=s(sve);Acr=r(Wwt,"unispeech"),Wwt.forEach(t),Lcr=r(ZNe," \u2014 "),QW=n(ZNe,"A",{href:!0});var Hwt=s(QW);ycr=r(Hwt,"UniSpeechForSequenceClassification"),Hwt.forEach(t),xcr=r(ZNe," (UniSpeech model)"),ZNe.forEach(t),$cr=i(ze),HF=n(ze,"LI",{});var eIe=s(HF);lve=n(eIe,"STRONG",{});var Uwt=s(lve);kcr=r(Uwt,"unispeech-sat"),Uwt.forEach(t),Scr=r(eIe," \u2014 "),WW=n(eIe,"A",{href:!0});var Jwt=s(WW);Rcr=r(Jwt,"UniSpeechSatForSequenceClassification"),Jwt.forEach(t),Pcr=r(eIe," (UniSpeechSat model)"),eIe.forEach(t),Bcr=i(ze),UF=n(ze,"LI",{});var oIe=s(UF);ive=n(oIe,"STRONG",{});var Ywt=s(ive);Ncr=r(Ywt,"wav2vec2"),Ywt.forEach(t),Icr=r(oIe," \u2014 "),HW=n(oIe,"A",{href:!0});var Kwt=s(HW);qcr=r(Kwt,"Wav2Vec2ForSequenceClassification"),Kwt.forEach(t),jcr=r(oIe," (Wav2Vec2 model)"),oIe.forEach(t),Dcr=i(ze),JF=n(ze,"LI",{});var rIe=s(JF);dve=n(rIe,"STRONG",{});var Zwt=s(dve);Gcr=r(Zwt,"wav2vec2-conformer"),Zwt.forEach(t),Ocr=r(rIe," \u2014 "),UW=n(rIe,"A",{href:!0});var eAt=s(UW);Vcr=r(eAt,"Wav2Vec2ConformerForSequenceClassification"),eAt.forEach(t),Xcr=r(rIe," (Wav2Vec2-Conformer model)"),rIe.forEach(t),zcr=i(ze),YF=n(ze,"LI",{});var tIe=s(YF);cve=n(tIe,"STRONG",{});var oAt=s(cve);Qcr=r(oAt,"wavlm"),oAt.forEach(t),Wcr=r(tIe," \u2014 "),JW=n(tIe,"A",{href:!0});var rAt=s(JW);Hcr=r(rAt,"WavLMForSequenceClassification"),rAt.forEach(t),Ucr=r(tIe," (WavLM model)"),tIe.forEach(t),ze.forEach(t),Jcr=i(Ta),KF=n(Ta,"P",{});var aIe=s(KF);Ycr=r(aIe,"The model is set in evaluation mode by default using "),fve=n(aIe,"CODE",{});var tAt=s(fve);Kcr=r(tAt,"model.eval()"),tAt.forEach(t),Zcr=r(aIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n(aIe,"CODE",{});var aAt=s(mve);efr=r(aAt,"model.train()"),aAt.forEach(t),aIe.forEach(t),ofr=i(Ta),T(ZF.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),kXe=i(f),kd=n(f,"H2",{class:!0});var IQe=s(kd);eT=n(IQe,"A",{id:!0,class:!0,href:!0});var nAt=s(eT);gve=n(nAt,"SPAN",{});var sAt=s(gve);T(UL.$$.fragment,sAt),sAt.forEach(t),nAt.forEach(t),rfr=i(IQe),hve=n(IQe,"SPAN",{});var lAt=s(hve);tfr=r(lAt,"AutoModelForAudioFrameClassification"),lAt.forEach(t),IQe.forEach(t),SXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(JL.$$.fragment,_l),afr=i(_l),Sd=n(_l,"P",{});var ote=s(Sd);nfr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YW=n(ote,"A",{href:!0});var iAt=s(YW);sfr=r(iAt,"from_pretrained()"),iAt.forEach(t),lfr=r(ote," class method or the "),KW=n(ote,"A",{href:!0});var dAt=s(KW);ifr=r(dAt,"from_config()"),dAt.forEach(t),dfr=r(ote,` class
method.`),ote.forEach(t),cfr=i(_l),YL=n(_l,"P",{});var qQe=s(YL);ffr=r(qQe,"This class cannot be instantiated directly using "),pve=n(qQe,"CODE",{});var cAt=s(pve);mfr=r(cAt,"__init__()"),cAt.forEach(t),gfr=r(qQe," (throws an error)."),qQe.forEach(t),hfr=i(_l),Et=n(_l,"DIV",{class:!0});var NA=s(Et);T(KL.$$.fragment,NA),pfr=i(NA),_ve=n(NA,"P",{});var fAt=s(_ve);_fr=r(fAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fAt.forEach(t),ufr=i(NA),Rd=n(NA,"P",{});var rte=s(Rd);bfr=r(rte,`Note:
Loading a model from its configuration file does `),uve=n(rte,"STRONG",{});var mAt=s(uve);vfr=r(mAt,"not"),mAt.forEach(t),Ffr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(rte,"A",{href:!0});var gAt=s(ZW);Tfr=r(gAt,"from_pretrained()"),gAt.forEach(t),Mfr=r(rte," to load the model weights."),rte.forEach(t),Efr=i(NA),T(oT.$$.fragment,NA),NA.forEach(t),Cfr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(ZL.$$.fragment,Ma),wfr=i(Ma),bve=n(Ma,"P",{});var hAt=s(bve);Afr=r(hAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hAt.forEach(t),Lfr=i(Ma),Ya=n(Ma,"P",{});var IA=s(Ya);yfr=r(IA,"The model class to instantiate is selected based on the "),vve=n(IA,"CODE",{});var pAt=s(vve);xfr=r(pAt,"model_type"),pAt.forEach(t),$fr=r(IA,` property of the config object (either
passed as an argument or loaded from `),Fve=n(IA,"CODE",{});var _At=s(Fve);kfr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),Sfr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(IA,"CODE",{});var uAt=s(Tve);Rfr=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),Pfr=r(IA,":"),IA.forEach(t),Bfr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);rT=n(ul,"LI",{});var nIe=s(rT);Mve=n(nIe,"STRONG",{});var bAt=s(Mve);Nfr=r(bAt,"data2vec-audio"),bAt.forEach(t),Ifr=r(nIe," \u2014 "),eH=n(nIe,"A",{href:!0});var vAt=s(eH);qfr=r(vAt,"Data2VecAudioForAudioFrameClassification"),vAt.forEach(t),jfr=r(nIe," (Data2VecAudio model)"),nIe.forEach(t),Dfr=i(ul),tT=n(ul,"LI",{});var sIe=s(tT);Eve=n(sIe,"STRONG",{});var FAt=s(Eve);Gfr=r(FAt,"unispeech-sat"),FAt.forEach(t),Ofr=r(sIe," \u2014 "),oH=n(sIe,"A",{href:!0});var TAt=s(oH);Vfr=r(TAt,"UniSpeechSatForAudioFrameClassification"),TAt.forEach(t),Xfr=r(sIe," (UniSpeechSat model)"),sIe.forEach(t),zfr=i(ul),aT=n(ul,"LI",{});var lIe=s(aT);Cve=n(lIe,"STRONG",{});var MAt=s(Cve);Qfr=r(MAt,"wav2vec2"),MAt.forEach(t),Wfr=r(lIe," \u2014 "),rH=n(lIe,"A",{href:!0});var EAt=s(rH);Hfr=r(EAt,"Wav2Vec2ForAudioFrameClassification"),EAt.forEach(t),Ufr=r(lIe," (Wav2Vec2 model)"),lIe.forEach(t),Jfr=i(ul),nT=n(ul,"LI",{});var iIe=s(nT);wve=n(iIe,"STRONG",{});var CAt=s(wve);Yfr=r(CAt,"wav2vec2-conformer"),CAt.forEach(t),Kfr=r(iIe," \u2014 "),tH=n(iIe,"A",{href:!0});var wAt=s(tH);Zfr=r(wAt,"Wav2Vec2ConformerForAudioFrameClassification"),wAt.forEach(t),emr=r(iIe," (Wav2Vec2-Conformer model)"),iIe.forEach(t),omr=i(ul),sT=n(ul,"LI",{});var dIe=s(sT);Ave=n(dIe,"STRONG",{});var AAt=s(Ave);rmr=r(AAt,"wavlm"),AAt.forEach(t),tmr=r(dIe," \u2014 "),aH=n(dIe,"A",{href:!0});var LAt=s(aH);amr=r(LAt,"WavLMForAudioFrameClassification"),LAt.forEach(t),nmr=r(dIe," (WavLM model)"),dIe.forEach(t),ul.forEach(t),smr=i(Ma),lT=n(Ma,"P",{});var cIe=s(lT);lmr=r(cIe,"The model is set in evaluation mode by default using "),Lve=n(cIe,"CODE",{});var yAt=s(Lve);imr=r(yAt,"model.eval()"),yAt.forEach(t),dmr=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(cIe,"CODE",{});var xAt=s(yve);cmr=r(xAt,"model.train()"),xAt.forEach(t),cIe.forEach(t),fmr=i(Ma),T(iT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),RXe=i(f),Pd=n(f,"H2",{class:!0});var jQe=s(Pd);dT=n(jQe,"A",{id:!0,class:!0,href:!0});var $At=s(dT);xve=n($At,"SPAN",{});var kAt=s(xve);T(ey.$$.fragment,kAt),kAt.forEach(t),$At.forEach(t),mmr=i(jQe),$ve=n(jQe,"SPAN",{});var SAt=s($ve);gmr=r(SAt,"AutoModelForCTC"),SAt.forEach(t),jQe.forEach(t),PXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(oy.$$.fragment,bl),hmr=i(bl),Bd=n(bl,"P",{});var tte=s(Bd);pmr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nH=n(tte,"A",{href:!0});var RAt=s(nH);_mr=r(RAt,"from_pretrained()"),RAt.forEach(t),umr=r(tte," class method or the "),sH=n(tte,"A",{href:!0});var PAt=s(sH);bmr=r(PAt,"from_config()"),PAt.forEach(t),vmr=r(tte,` class
method.`),tte.forEach(t),Fmr=i(bl),ry=n(bl,"P",{});var DQe=s(ry);Tmr=r(DQe,"This class cannot be instantiated directly using "),kve=n(DQe,"CODE",{});var BAt=s(kve);Mmr=r(BAt,"__init__()"),BAt.forEach(t),Emr=r(DQe," (throws an error)."),DQe.forEach(t),Cmr=i(bl),Ct=n(bl,"DIV",{class:!0});var qA=s(Ct);T(ty.$$.fragment,qA),wmr=i(qA),Sve=n(qA,"P",{});var NAt=s(Sve);Amr=r(NAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NAt.forEach(t),Lmr=i(qA),Nd=n(qA,"P",{});var ate=s(Nd);ymr=r(ate,`Note:
Loading a model from its configuration file does `),Rve=n(ate,"STRONG",{});var IAt=s(Rve);xmr=r(IAt,"not"),IAt.forEach(t),$mr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(ate,"A",{href:!0});var qAt=s(lH);kmr=r(qAt,"from_pretrained()"),qAt.forEach(t),Smr=r(ate," to load the model weights."),ate.forEach(t),Rmr=i(qA),T(cT.$$.fragment,qA),qA.forEach(t),Pmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(ay.$$.fragment,Ea),Bmr=i(Ea),Pve=n(Ea,"P",{});var jAt=s(Pve);Nmr=r(jAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jAt.forEach(t),Imr=i(Ea),Ka=n(Ea,"P",{});var jA=s(Ka);qmr=r(jA,"The model class to instantiate is selected based on the "),Bve=n(jA,"CODE",{});var DAt=s(Bve);jmr=r(DAt,"model_type"),DAt.forEach(t),Dmr=r(jA,` property of the config object (either
passed as an argument or loaded from `),Nve=n(jA,"CODE",{});var GAt=s(Nve);Gmr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),Omr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(jA,"CODE",{});var OAt=s(Ive);Vmr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),Xmr=r(jA,":"),jA.forEach(t),zmr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);fT=n(Be,"LI",{});var fIe=s(fT);qve=n(fIe,"STRONG",{});var VAt=s(qve);Qmr=r(VAt,"data2vec-audio"),VAt.forEach(t),Wmr=r(fIe," \u2014 "),iH=n(fIe,"A",{href:!0});var XAt=s(iH);Hmr=r(XAt,"Data2VecAudioForCTC"),XAt.forEach(t),Umr=r(fIe," (Data2VecAudio model)"),fIe.forEach(t),Jmr=i(Be),mT=n(Be,"LI",{});var mIe=s(mT);jve=n(mIe,"STRONG",{});var zAt=s(jve);Ymr=r(zAt,"hubert"),zAt.forEach(t),Kmr=r(mIe," \u2014 "),dH=n(mIe,"A",{href:!0});var QAt=s(dH);Zmr=r(QAt,"HubertForCTC"),QAt.forEach(t),egr=r(mIe," (Hubert model)"),mIe.forEach(t),ogr=i(Be),gT=n(Be,"LI",{});var gIe=s(gT);Dve=n(gIe,"STRONG",{});var WAt=s(Dve);rgr=r(WAt,"mctct"),WAt.forEach(t),tgr=r(gIe," \u2014 "),cH=n(gIe,"A",{href:!0});var HAt=s(cH);agr=r(HAt,"MCTCTForCTC"),HAt.forEach(t),ngr=r(gIe," (M-CTC-T model)"),gIe.forEach(t),sgr=i(Be),hT=n(Be,"LI",{});var hIe=s(hT);Gve=n(hIe,"STRONG",{});var UAt=s(Gve);lgr=r(UAt,"sew"),UAt.forEach(t),igr=r(hIe," \u2014 "),fH=n(hIe,"A",{href:!0});var JAt=s(fH);dgr=r(JAt,"SEWForCTC"),JAt.forEach(t),cgr=r(hIe," (SEW model)"),hIe.forEach(t),fgr=i(Be),pT=n(Be,"LI",{});var pIe=s(pT);Ove=n(pIe,"STRONG",{});var YAt=s(Ove);mgr=r(YAt,"sew-d"),YAt.forEach(t),ggr=r(pIe," \u2014 "),mH=n(pIe,"A",{href:!0});var KAt=s(mH);hgr=r(KAt,"SEWDForCTC"),KAt.forEach(t),pgr=r(pIe," (SEW-D model)"),pIe.forEach(t),_gr=i(Be),_T=n(Be,"LI",{});var _Ie=s(_T);Vve=n(_Ie,"STRONG",{});var ZAt=s(Vve);ugr=r(ZAt,"unispeech"),ZAt.forEach(t),bgr=r(_Ie," \u2014 "),gH=n(_Ie,"A",{href:!0});var e6t=s(gH);vgr=r(e6t,"UniSpeechForCTC"),e6t.forEach(t),Fgr=r(_Ie," (UniSpeech model)"),_Ie.forEach(t),Tgr=i(Be),uT=n(Be,"LI",{});var uIe=s(uT);Xve=n(uIe,"STRONG",{});var o6t=s(Xve);Mgr=r(o6t,"unispeech-sat"),o6t.forEach(t),Egr=r(uIe," \u2014 "),hH=n(uIe,"A",{href:!0});var r6t=s(hH);Cgr=r(r6t,"UniSpeechSatForCTC"),r6t.forEach(t),wgr=r(uIe," (UniSpeechSat model)"),uIe.forEach(t),Agr=i(Be),bT=n(Be,"LI",{});var bIe=s(bT);zve=n(bIe,"STRONG",{});var t6t=s(zve);Lgr=r(t6t,"wav2vec2"),t6t.forEach(t),ygr=r(bIe," \u2014 "),pH=n(bIe,"A",{href:!0});var a6t=s(pH);xgr=r(a6t,"Wav2Vec2ForCTC"),a6t.forEach(t),$gr=r(bIe," (Wav2Vec2 model)"),bIe.forEach(t),kgr=i(Be),vT=n(Be,"LI",{});var vIe=s(vT);Qve=n(vIe,"STRONG",{});var n6t=s(Qve);Sgr=r(n6t,"wav2vec2-conformer"),n6t.forEach(t),Rgr=r(vIe," \u2014 "),_H=n(vIe,"A",{href:!0});var s6t=s(_H);Pgr=r(s6t,"Wav2Vec2ConformerForCTC"),s6t.forEach(t),Bgr=r(vIe," (Wav2Vec2-Conformer model)"),vIe.forEach(t),Ngr=i(Be),FT=n(Be,"LI",{});var FIe=s(FT);Wve=n(FIe,"STRONG",{});var l6t=s(Wve);Igr=r(l6t,"wavlm"),l6t.forEach(t),qgr=r(FIe," \u2014 "),uH=n(FIe,"A",{href:!0});var i6t=s(uH);jgr=r(i6t,"WavLMForCTC"),i6t.forEach(t),Dgr=r(FIe," (WavLM model)"),FIe.forEach(t),Be.forEach(t),Ggr=i(Ea),TT=n(Ea,"P",{});var TIe=s(TT);Ogr=r(TIe,"The model is set in evaluation mode by default using "),Hve=n(TIe,"CODE",{});var d6t=s(Hve);Vgr=r(d6t,"model.eval()"),d6t.forEach(t),Xgr=r(TIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uve=n(TIe,"CODE",{});var c6t=s(Uve);zgr=r(c6t,"model.train()"),c6t.forEach(t),TIe.forEach(t),Qgr=i(Ea),T(MT.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),BXe=i(f),Id=n(f,"H2",{class:!0});var GQe=s(Id);ET=n(GQe,"A",{id:!0,class:!0,href:!0});var f6t=s(ET);Jve=n(f6t,"SPAN",{});var m6t=s(Jve);T(ny.$$.fragment,m6t),m6t.forEach(t),f6t.forEach(t),Wgr=i(GQe),Yve=n(GQe,"SPAN",{});var g6t=s(Yve);Hgr=r(g6t,"AutoModelForSpeechSeq2Seq"),g6t.forEach(t),GQe.forEach(t),NXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(sy.$$.fragment,vl),Ugr=i(vl),qd=n(vl,"P",{});var nte=s(qd);Jgr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=n(nte,"A",{href:!0});var h6t=s(bH);Ygr=r(h6t,"from_pretrained()"),h6t.forEach(t),Kgr=r(nte," class method or the "),vH=n(nte,"A",{href:!0});var p6t=s(vH);Zgr=r(p6t,"from_config()"),p6t.forEach(t),ehr=r(nte,` class
method.`),nte.forEach(t),ohr=i(vl),ly=n(vl,"P",{});var OQe=s(ly);rhr=r(OQe,"This class cannot be instantiated directly using "),Kve=n(OQe,"CODE",{});var _6t=s(Kve);thr=r(_6t,"__init__()"),_6t.forEach(t),ahr=r(OQe," (throws an error)."),OQe.forEach(t),nhr=i(vl),wt=n(vl,"DIV",{class:!0});var DA=s(wt);T(iy.$$.fragment,DA),shr=i(DA),Zve=n(DA,"P",{});var u6t=s(Zve);lhr=r(u6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u6t.forEach(t),ihr=i(DA),jd=n(DA,"P",{});var ste=s(jd);dhr=r(ste,`Note:
Loading a model from its configuration file does `),e5e=n(ste,"STRONG",{});var b6t=s(e5e);chr=r(b6t,"not"),b6t.forEach(t),fhr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(ste,"A",{href:!0});var v6t=s(FH);mhr=r(v6t,"from_pretrained()"),v6t.forEach(t),ghr=r(ste," to load the model weights."),ste.forEach(t),hhr=i(DA),T(CT.$$.fragment,DA),DA.forEach(t),phr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(dy.$$.fragment,Ca),_hr=i(Ca),o5e=n(Ca,"P",{});var F6t=s(o5e);uhr=r(F6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F6t.forEach(t),bhr=i(Ca),Za=n(Ca,"P",{});var GA=s(Za);vhr=r(GA,"The model class to instantiate is selected based on the "),r5e=n(GA,"CODE",{});var T6t=s(r5e);Fhr=r(T6t,"model_type"),T6t.forEach(t),Thr=r(GA,` property of the config object (either
passed as an argument or loaded from `),t5e=n(GA,"CODE",{});var M6t=s(t5e);Mhr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),Ehr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(GA,"CODE",{});var E6t=s(a5e);Chr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),whr=r(GA,":"),GA.forEach(t),Ahr=i(Ca),cy=n(Ca,"UL",{});var VQe=s(cy);wT=n(VQe,"LI",{});var MIe=s(wT);n5e=n(MIe,"STRONG",{});var C6t=s(n5e);Lhr=r(C6t,"speech-encoder-decoder"),C6t.forEach(t),yhr=r(MIe," \u2014 "),TH=n(MIe,"A",{href:!0});var w6t=s(TH);xhr=r(w6t,"SpeechEncoderDecoderModel"),w6t.forEach(t),$hr=r(MIe," (Speech Encoder decoder model)"),MIe.forEach(t),khr=i(VQe),AT=n(VQe,"LI",{});var EIe=s(AT);s5e=n(EIe,"STRONG",{});var A6t=s(s5e);Shr=r(A6t,"speech_to_text"),A6t.forEach(t),Rhr=r(EIe," \u2014 "),MH=n(EIe,"A",{href:!0});var L6t=s(MH);Phr=r(L6t,"Speech2TextForConditionalGeneration"),L6t.forEach(t),Bhr=r(EIe," (Speech2Text model)"),EIe.forEach(t),VQe.forEach(t),Nhr=i(Ca),LT=n(Ca,"P",{});var CIe=s(LT);Ihr=r(CIe,"The model is set in evaluation mode by default using "),l5e=n(CIe,"CODE",{});var y6t=s(l5e);qhr=r(y6t,"model.eval()"),y6t.forEach(t),jhr=r(CIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i5e=n(CIe,"CODE",{});var x6t=s(i5e);Dhr=r(x6t,"model.train()"),x6t.forEach(t),CIe.forEach(t),Ghr=i(Ca),T(yT.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),IXe=i(f),Dd=n(f,"H2",{class:!0});var XQe=s(Dd);xT=n(XQe,"A",{id:!0,class:!0,href:!0});var $6t=s(xT);d5e=n($6t,"SPAN",{});var k6t=s(d5e);T(fy.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),Ohr=i(XQe),c5e=n(XQe,"SPAN",{});var S6t=s(c5e);Vhr=r(S6t,"AutoModelForAudioXVector"),S6t.forEach(t),XQe.forEach(t),qXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(my.$$.fragment,Fl),Xhr=i(Fl),Gd=n(Fl,"P",{});var lte=s(Gd);zhr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EH=n(lte,"A",{href:!0});var R6t=s(EH);Qhr=r(R6t,"from_pretrained()"),R6t.forEach(t),Whr=r(lte," class method or the "),CH=n(lte,"A",{href:!0});var P6t=s(CH);Hhr=r(P6t,"from_config()"),P6t.forEach(t),Uhr=r(lte,` class
method.`),lte.forEach(t),Jhr=i(Fl),gy=n(Fl,"P",{});var zQe=s(gy);Yhr=r(zQe,"This class cannot be instantiated directly using "),f5e=n(zQe,"CODE",{});var B6t=s(f5e);Khr=r(B6t,"__init__()"),B6t.forEach(t),Zhr=r(zQe," (throws an error)."),zQe.forEach(t),epr=i(Fl),At=n(Fl,"DIV",{class:!0});var OA=s(At);T(hy.$$.fragment,OA),opr=i(OA),m5e=n(OA,"P",{});var N6t=s(m5e);rpr=r(N6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),N6t.forEach(t),tpr=i(OA),Od=n(OA,"P",{});var ite=s(Od);apr=r(ite,`Note:
Loading a model from its configuration file does `),g5e=n(ite,"STRONG",{});var I6t=s(g5e);npr=r(I6t,"not"),I6t.forEach(t),spr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(ite,"A",{href:!0});var q6t=s(wH);lpr=r(q6t,"from_pretrained()"),q6t.forEach(t),ipr=r(ite," to load the model weights."),ite.forEach(t),dpr=i(OA),T($T.$$.fragment,OA),OA.forEach(t),cpr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(py.$$.fragment,wa),fpr=i(wa),h5e=n(wa,"P",{});var j6t=s(h5e);mpr=r(j6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),j6t.forEach(t),gpr=i(wa),en=n(wa,"P",{});var VA=s(en);hpr=r(VA,"The model class to instantiate is selected based on the "),p5e=n(VA,"CODE",{});var D6t=s(p5e);ppr=r(D6t,"model_type"),D6t.forEach(t),_pr=r(VA,` property of the config object (either
passed as an argument or loaded from `),_5e=n(VA,"CODE",{});var G6t=s(_5e);upr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),bpr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(VA,"CODE",{});var O6t=s(u5e);vpr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),Fpr=r(VA,":"),VA.forEach(t),Tpr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);kT=n(Tl,"LI",{});var wIe=s(kT);b5e=n(wIe,"STRONG",{});var V6t=s(b5e);Mpr=r(V6t,"data2vec-audio"),V6t.forEach(t),Epr=r(wIe," \u2014 "),AH=n(wIe,"A",{href:!0});var X6t=s(AH);Cpr=r(X6t,"Data2VecAudioForXVector"),X6t.forEach(t),wpr=r(wIe," (Data2VecAudio model)"),wIe.forEach(t),Apr=i(Tl),ST=n(Tl,"LI",{});var AIe=s(ST);v5e=n(AIe,"STRONG",{});var z6t=s(v5e);Lpr=r(z6t,"unispeech-sat"),z6t.forEach(t),ypr=r(AIe," \u2014 "),LH=n(AIe,"A",{href:!0});var Q6t=s(LH);xpr=r(Q6t,"UniSpeechSatForXVector"),Q6t.forEach(t),$pr=r(AIe," (UniSpeechSat model)"),AIe.forEach(t),kpr=i(Tl),RT=n(Tl,"LI",{});var LIe=s(RT);F5e=n(LIe,"STRONG",{});var W6t=s(F5e);Spr=r(W6t,"wav2vec2"),W6t.forEach(t),Rpr=r(LIe," \u2014 "),yH=n(LIe,"A",{href:!0});var H6t=s(yH);Ppr=r(H6t,"Wav2Vec2ForXVector"),H6t.forEach(t),Bpr=r(LIe," (Wav2Vec2 model)"),LIe.forEach(t),Npr=i(Tl),PT=n(Tl,"LI",{});var yIe=s(PT);T5e=n(yIe,"STRONG",{});var U6t=s(T5e);Ipr=r(U6t,"wav2vec2-conformer"),U6t.forEach(t),qpr=r(yIe," \u2014 "),xH=n(yIe,"A",{href:!0});var J6t=s(xH);jpr=r(J6t,"Wav2Vec2ConformerForXVector"),J6t.forEach(t),Dpr=r(yIe," (Wav2Vec2-Conformer model)"),yIe.forEach(t),Gpr=i(Tl),BT=n(Tl,"LI",{});var xIe=s(BT);M5e=n(xIe,"STRONG",{});var Y6t=s(M5e);Opr=r(Y6t,"wavlm"),Y6t.forEach(t),Vpr=r(xIe," \u2014 "),$H=n(xIe,"A",{href:!0});var K6t=s($H);Xpr=r(K6t,"WavLMForXVector"),K6t.forEach(t),zpr=r(xIe," (WavLM model)"),xIe.forEach(t),Tl.forEach(t),Qpr=i(wa),NT=n(wa,"P",{});var $Ie=s(NT);Wpr=r($Ie,"The model is set in evaluation mode by default using "),E5e=n($Ie,"CODE",{});var Z6t=s(E5e);Hpr=r(Z6t,"model.eval()"),Z6t.forEach(t),Upr=r($Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C5e=n($Ie,"CODE",{});var e7t=s(C5e);Jpr=r(e7t,"model.train()"),e7t.forEach(t),$Ie.forEach(t),Ypr=i(wa),T(IT.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),jXe=i(f),Vd=n(f,"H2",{class:!0});var QQe=s(Vd);qT=n(QQe,"A",{id:!0,class:!0,href:!0});var o7t=s(qT);w5e=n(o7t,"SPAN",{});var r7t=s(w5e);T(_y.$$.fragment,r7t),r7t.forEach(t),o7t.forEach(t),Kpr=i(QQe),A5e=n(QQe,"SPAN",{});var t7t=s(A5e);Zpr=r(t7t,"AutoModelForMaskedImageModeling"),t7t.forEach(t),QQe.forEach(t),DXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(uy.$$.fragment,Ml),e_r=i(Ml),Xd=n(Ml,"P",{});var dte=s(Xd);o_r=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kH=n(dte,"A",{href:!0});var a7t=s(kH);r_r=r(a7t,"from_pretrained()"),a7t.forEach(t),t_r=r(dte," class method or the "),SH=n(dte,"A",{href:!0});var n7t=s(SH);a_r=r(n7t,"from_config()"),n7t.forEach(t),n_r=r(dte,` class
method.`),dte.forEach(t),s_r=i(Ml),by=n(Ml,"P",{});var WQe=s(by);l_r=r(WQe,"This class cannot be instantiated directly using "),L5e=n(WQe,"CODE",{});var s7t=s(L5e);i_r=r(s7t,"__init__()"),s7t.forEach(t),d_r=r(WQe," (throws an error)."),WQe.forEach(t),c_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var XA=s(Lt);T(vy.$$.fragment,XA),f_r=i(XA),y5e=n(XA,"P",{});var l7t=s(y5e);m_r=r(l7t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),l7t.forEach(t),g_r=i(XA),zd=n(XA,"P",{});var cte=s(zd);h_r=r(cte,`Note:
Loading a model from its configuration file does `),x5e=n(cte,"STRONG",{});var i7t=s(x5e);p_r=r(i7t,"not"),i7t.forEach(t),__r=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(cte,"A",{href:!0});var d7t=s(RH);u_r=r(d7t,"from_pretrained()"),d7t.forEach(t),b_r=r(cte," to load the model weights."),cte.forEach(t),v_r=i(XA),T(jT.$$.fragment,XA),XA.forEach(t),F_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(Fy.$$.fragment,Aa),T_r=i(Aa),$5e=n(Aa,"P",{});var c7t=s($5e);M_r=r(c7t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),c7t.forEach(t),E_r=i(Aa),on=n(Aa,"P",{});var zA=s(on);C_r=r(zA,"The model class to instantiate is selected based on the "),k5e=n(zA,"CODE",{});var f7t=s(k5e);w_r=r(f7t,"model_type"),f7t.forEach(t),A_r=r(zA,` property of the config object (either
passed as an argument or loaded from `),S5e=n(zA,"CODE",{});var m7t=s(S5e);L_r=r(m7t,"pretrained_model_name_or_path"),m7t.forEach(t),y_r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(zA,"CODE",{});var g7t=s(R5e);x_r=r(g7t,"pretrained_model_name_or_path"),g7t.forEach(t),$_r=r(zA,":"),zA.forEach(t),k_r=i(Aa),Qd=n(Aa,"UL",{});var fte=s(Qd);DT=n(fte,"LI",{});var kIe=s(DT);P5e=n(kIe,"STRONG",{});var h7t=s(P5e);S_r=r(h7t,"deit"),h7t.forEach(t),R_r=r(kIe," \u2014 "),PH=n(kIe,"A",{href:!0});var p7t=s(PH);P_r=r(p7t,"DeiTForMaskedImageModeling"),p7t.forEach(t),B_r=r(kIe," (DeiT model)"),kIe.forEach(t),N_r=i(fte),GT=n(fte,"LI",{});var SIe=s(GT);B5e=n(SIe,"STRONG",{});var _7t=s(B5e);I_r=r(_7t,"swin"),_7t.forEach(t),q_r=r(SIe," \u2014 "),BH=n(SIe,"A",{href:!0});var u7t=s(BH);j_r=r(u7t,"SwinForMaskedImageModeling"),u7t.forEach(t),D_r=r(SIe," (Swin Transformer model)"),SIe.forEach(t),G_r=i(fte),OT=n(fte,"LI",{});var RIe=s(OT);N5e=n(RIe,"STRONG",{});var b7t=s(N5e);O_r=r(b7t,"vit"),b7t.forEach(t),V_r=r(RIe," \u2014 "),NH=n(RIe,"A",{href:!0});var v7t=s(NH);X_r=r(v7t,"ViTForMaskedImageModeling"),v7t.forEach(t),z_r=r(RIe," (ViT model)"),RIe.forEach(t),fte.forEach(t),Q_r=i(Aa),VT=n(Aa,"P",{});var PIe=s(VT);W_r=r(PIe,"The model is set in evaluation mode by default using "),I5e=n(PIe,"CODE",{});var F7t=s(I5e);H_r=r(F7t,"model.eval()"),F7t.forEach(t),U_r=r(PIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q5e=n(PIe,"CODE",{});var T7t=s(q5e);J_r=r(T7t,"model.train()"),T7t.forEach(t),PIe.forEach(t),Y_r=i(Aa),T(XT.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),GXe=i(f),Wd=n(f,"H2",{class:!0});var HQe=s(Wd);zT=n(HQe,"A",{id:!0,class:!0,href:!0});var M7t=s(zT);j5e=n(M7t,"SPAN",{});var E7t=s(j5e);T(Ty.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),K_r=i(HQe),D5e=n(HQe,"SPAN",{});var C7t=s(D5e);Z_r=r(C7t,"AutoModelForObjectDetection"),C7t.forEach(t),HQe.forEach(t),OXe=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(My.$$.fragment,El),eur=i(El),Hd=n(El,"P",{});var mte=s(Hd);our=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),IH=n(mte,"A",{href:!0});var w7t=s(IH);rur=r(w7t,"from_pretrained()"),w7t.forEach(t),tur=r(mte," class method or the "),qH=n(mte,"A",{href:!0});var A7t=s(qH);aur=r(A7t,"from_config()"),A7t.forEach(t),nur=r(mte,` class
method.`),mte.forEach(t),sur=i(El),Ey=n(El,"P",{});var UQe=s(Ey);lur=r(UQe,"This class cannot be instantiated directly using "),G5e=n(UQe,"CODE",{});var L7t=s(G5e);iur=r(L7t,"__init__()"),L7t.forEach(t),dur=r(UQe," (throws an error)."),UQe.forEach(t),cur=i(El),yt=n(El,"DIV",{class:!0});var QA=s(yt);T(Cy.$$.fragment,QA),fur=i(QA),O5e=n(QA,"P",{});var y7t=s(O5e);mur=r(y7t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),y7t.forEach(t),gur=i(QA),Ud=n(QA,"P",{});var gte=s(Ud);hur=r(gte,`Note:
Loading a model from its configuration file does `),V5e=n(gte,"STRONG",{});var x7t=s(V5e);pur=r(x7t,"not"),x7t.forEach(t),_ur=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(gte,"A",{href:!0});var $7t=s(jH);uur=r($7t,"from_pretrained()"),$7t.forEach(t),bur=r(gte," to load the model weights."),gte.forEach(t),vur=i(QA),T(QT.$$.fragment,QA),QA.forEach(t),Fur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(wy.$$.fragment,La),Tur=i(La),X5e=n(La,"P",{});var k7t=s(X5e);Mur=r(k7t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),k7t.forEach(t),Eur=i(La),rn=n(La,"P",{});var WA=s(rn);Cur=r(WA,"The model class to instantiate is selected based on the "),z5e=n(WA,"CODE",{});var S7t=s(z5e);wur=r(S7t,"model_type"),S7t.forEach(t),Aur=r(WA,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(WA,"CODE",{});var R7t=s(Q5e);Lur=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),yur=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(WA,"CODE",{});var P7t=s(W5e);xur=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),$ur=r(WA,":"),WA.forEach(t),kur=i(La),Ay=n(La,"UL",{});var JQe=s(Ay);WT=n(JQe,"LI",{});var BIe=s(WT);H5e=n(BIe,"STRONG",{});var B7t=s(H5e);Sur=r(B7t,"detr"),B7t.forEach(t),Rur=r(BIe," \u2014 "),DH=n(BIe,"A",{href:!0});var N7t=s(DH);Pur=r(N7t,"DetrForObjectDetection"),N7t.forEach(t),Bur=r(BIe," (DETR model)"),BIe.forEach(t),Nur=i(JQe),HT=n(JQe,"LI",{});var NIe=s(HT);U5e=n(NIe,"STRONG",{});var I7t=s(U5e);Iur=r(I7t,"yolos"),I7t.forEach(t),qur=r(NIe," \u2014 "),GH=n(NIe,"A",{href:!0});var q7t=s(GH);jur=r(q7t,"YolosForObjectDetection"),q7t.forEach(t),Dur=r(NIe," (YOLOS model)"),NIe.forEach(t),JQe.forEach(t),Gur=i(La),UT=n(La,"P",{});var IIe=s(UT);Our=r(IIe,"The model is set in evaluation mode by default using "),J5e=n(IIe,"CODE",{});var j7t=s(J5e);Vur=r(j7t,"model.eval()"),j7t.forEach(t),Xur=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y5e=n(IIe,"CODE",{});var D7t=s(Y5e);zur=r(D7t,"model.train()"),D7t.forEach(t),IIe.forEach(t),Qur=i(La),T(JT.$$.fragment,La),La.forEach(t),El.forEach(t),VXe=i(f),Jd=n(f,"H2",{class:!0});var YQe=s(Jd);YT=n(YQe,"A",{id:!0,class:!0,href:!0});var G7t=s(YT);K5e=n(G7t,"SPAN",{});var O7t=s(K5e);T(Ly.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),Wur=i(YQe),Z5e=n(YQe,"SPAN",{});var V7t=s(Z5e);Hur=r(V7t,"AutoModelForImageSegmentation"),V7t.forEach(t),YQe.forEach(t),XXe=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(yy.$$.fragment,Cl),Uur=i(Cl),Yd=n(Cl,"P",{});var hte=s(Yd);Jur=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OH=n(hte,"A",{href:!0});var X7t=s(OH);Yur=r(X7t,"from_pretrained()"),X7t.forEach(t),Kur=r(hte," class method or the "),VH=n(hte,"A",{href:!0});var z7t=s(VH);Zur=r(z7t,"from_config()"),z7t.forEach(t),e1r=r(hte,` class
method.`),hte.forEach(t),o1r=i(Cl),xy=n(Cl,"P",{});var KQe=s(xy);r1r=r(KQe,"This class cannot be instantiated directly using "),e0e=n(KQe,"CODE",{});var Q7t=s(e0e);t1r=r(Q7t,"__init__()"),Q7t.forEach(t),a1r=r(KQe," (throws an error)."),KQe.forEach(t),n1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var HA=s(xt);T($y.$$.fragment,HA),s1r=i(HA),o0e=n(HA,"P",{});var W7t=s(o0e);l1r=r(W7t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),W7t.forEach(t),i1r=i(HA),Kd=n(HA,"P",{});var pte=s(Kd);d1r=r(pte,`Note:
Loading a model from its configuration file does `),r0e=n(pte,"STRONG",{});var H7t=s(r0e);c1r=r(H7t,"not"),H7t.forEach(t),f1r=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(pte,"A",{href:!0});var U7t=s(XH);m1r=r(U7t,"from_pretrained()"),U7t.forEach(t),g1r=r(pte," to load the model weights."),pte.forEach(t),h1r=i(HA),T(KT.$$.fragment,HA),HA.forEach(t),p1r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(ky.$$.fragment,ya),_1r=i(ya),t0e=n(ya,"P",{});var J7t=s(t0e);u1r=r(J7t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),J7t.forEach(t),b1r=i(ya),tn=n(ya,"P",{});var UA=s(tn);v1r=r(UA,"The model class to instantiate is selected based on the "),a0e=n(UA,"CODE",{});var Y7t=s(a0e);F1r=r(Y7t,"model_type"),Y7t.forEach(t),T1r=r(UA,` property of the config object (either
passed as an argument or loaded from `),n0e=n(UA,"CODE",{});var K7t=s(n0e);M1r=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),E1r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(UA,"CODE",{});var Z7t=s(s0e);C1r=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),w1r=r(UA,":"),UA.forEach(t),A1r=i(ya),l0e=n(ya,"UL",{});var eLt=s(l0e);ZT=n(eLt,"LI",{});var qIe=s(ZT);i0e=n(qIe,"STRONG",{});var oLt=s(i0e);L1r=r(oLt,"detr"),oLt.forEach(t),y1r=r(qIe," \u2014 "),zH=n(qIe,"A",{href:!0});var rLt=s(zH);x1r=r(rLt,"DetrForSegmentation"),rLt.forEach(t),$1r=r(qIe," (DETR model)"),qIe.forEach(t),eLt.forEach(t),k1r=i(ya),e8=n(ya,"P",{});var jIe=s(e8);S1r=r(jIe,"The model is set in evaluation mode by default using "),d0e=n(jIe,"CODE",{});var tLt=s(d0e);R1r=r(tLt,"model.eval()"),tLt.forEach(t),P1r=r(jIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c0e=n(jIe,"CODE",{});var aLt=s(c0e);B1r=r(aLt,"model.train()"),aLt.forEach(t),jIe.forEach(t),N1r=i(ya),T(o8.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),zXe=i(f),Zd=n(f,"H2",{class:!0});var ZQe=s(Zd);r8=n(ZQe,"A",{id:!0,class:!0,href:!0});var nLt=s(r8);f0e=n(nLt,"SPAN",{});var sLt=s(f0e);T(Sy.$$.fragment,sLt),sLt.forEach(t),nLt.forEach(t),I1r=i(ZQe),m0e=n(ZQe,"SPAN",{});var lLt=s(m0e);q1r=r(lLt,"AutoModelForSemanticSegmentation"),lLt.forEach(t),ZQe.forEach(t),QXe=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(Ry.$$.fragment,wl),j1r=i(wl),ec=n(wl,"P",{});var _te=s(ec);D1r=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QH=n(_te,"A",{href:!0});var iLt=s(QH);G1r=r(iLt,"from_pretrained()"),iLt.forEach(t),O1r=r(_te," class method or the "),WH=n(_te,"A",{href:!0});var dLt=s(WH);V1r=r(dLt,"from_config()"),dLt.forEach(t),X1r=r(_te,` class
method.`),_te.forEach(t),z1r=i(wl),Py=n(wl,"P",{});var eWe=s(Py);Q1r=r(eWe,"This class cannot be instantiated directly using "),g0e=n(eWe,"CODE",{});var cLt=s(g0e);W1r=r(cLt,"__init__()"),cLt.forEach(t),H1r=r(eWe," (throws an error)."),eWe.forEach(t),U1r=i(wl),$t=n(wl,"DIV",{class:!0});var JA=s($t);T(By.$$.fragment,JA),J1r=i(JA),h0e=n(JA,"P",{});var fLt=s(h0e);Y1r=r(fLt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fLt.forEach(t),K1r=i(JA),oc=n(JA,"P",{});var ute=s(oc);Z1r=r(ute,`Note:
Loading a model from its configuration file does `),p0e=n(ute,"STRONG",{});var mLt=s(p0e);e2r=r(mLt,"not"),mLt.forEach(t),o2r=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(ute,"A",{href:!0});var gLt=s(HH);r2r=r(gLt,"from_pretrained()"),gLt.forEach(t),t2r=r(ute," to load the model weights."),ute.forEach(t),a2r=i(JA),T(t8.$$.fragment,JA),JA.forEach(t),n2r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(Ny.$$.fragment,xa),s2r=i(xa),_0e=n(xa,"P",{});var hLt=s(_0e);l2r=r(hLt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hLt.forEach(t),i2r=i(xa),an=n(xa,"P",{});var YA=s(an);d2r=r(YA,"The model class to instantiate is selected based on the "),u0e=n(YA,"CODE",{});var pLt=s(u0e);c2r=r(pLt,"model_type"),pLt.forEach(t),f2r=r(YA,` property of the config object (either
passed as an argument or loaded from `),b0e=n(YA,"CODE",{});var _Lt=s(b0e);m2r=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),g2r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(YA,"CODE",{});var uLt=s(v0e);h2r=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),p2r=r(YA,":"),YA.forEach(t),_2r=i(xa),tt=n(xa,"UL",{});var Al=s(tt);a8=n(Al,"LI",{});var DIe=s(a8);F0e=n(DIe,"STRONG",{});var bLt=s(F0e);u2r=r(bLt,"beit"),bLt.forEach(t),b2r=r(DIe," \u2014 "),UH=n(DIe,"A",{href:!0});var vLt=s(UH);v2r=r(vLt,"BeitForSemanticSegmentation"),vLt.forEach(t),F2r=r(DIe," (BEiT model)"),DIe.forEach(t),T2r=i(Al),n8=n(Al,"LI",{});var GIe=s(n8);T0e=n(GIe,"STRONG",{});var FLt=s(T0e);M2r=r(FLt,"data2vec-vision"),FLt.forEach(t),E2r=r(GIe," \u2014 "),JH=n(GIe,"A",{href:!0});var TLt=s(JH);C2r=r(TLt,"Data2VecVisionForSemanticSegmentation"),TLt.forEach(t),w2r=r(GIe," (Data2VecVision model)"),GIe.forEach(t),A2r=i(Al),s8=n(Al,"LI",{});var OIe=s(s8);M0e=n(OIe,"STRONG",{});var MLt=s(M0e);L2r=r(MLt,"dpt"),MLt.forEach(t),y2r=r(OIe," \u2014 "),YH=n(OIe,"A",{href:!0});var ELt=s(YH);x2r=r(ELt,"DPTForSemanticSegmentation"),ELt.forEach(t),$2r=r(OIe," (DPT model)"),OIe.forEach(t),k2r=i(Al),l8=n(Al,"LI",{});var VIe=s(l8);E0e=n(VIe,"STRONG",{});var CLt=s(E0e);S2r=r(CLt,"mobilevit"),CLt.forEach(t),R2r=r(VIe," \u2014 "),KH=n(VIe,"A",{href:!0});var wLt=s(KH);P2r=r(wLt,"MobileViTForSemanticSegmentation"),wLt.forEach(t),B2r=r(VIe," (MobileViT model)"),VIe.forEach(t),N2r=i(Al),i8=n(Al,"LI",{});var XIe=s(i8);C0e=n(XIe,"STRONG",{});var ALt=s(C0e);I2r=r(ALt,"segformer"),ALt.forEach(t),q2r=r(XIe," \u2014 "),ZH=n(XIe,"A",{href:!0});var LLt=s(ZH);j2r=r(LLt,"SegformerForSemanticSegmentation"),LLt.forEach(t),D2r=r(XIe," (SegFormer model)"),XIe.forEach(t),Al.forEach(t),G2r=i(xa),d8=n(xa,"P",{});var zIe=s(d8);O2r=r(zIe,"The model is set in evaluation mode by default using "),w0e=n(zIe,"CODE",{});var yLt=s(w0e);V2r=r(yLt,"model.eval()"),yLt.forEach(t),X2r=r(zIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A0e=n(zIe,"CODE",{});var xLt=s(A0e);z2r=r(xLt,"model.train()"),xLt.forEach(t),zIe.forEach(t),Q2r=i(xa),T(c8.$$.fragment,xa),xa.forEach(t),wl.forEach(t),WXe=i(f),rc=n(f,"H2",{class:!0});var oWe=s(rc);f8=n(oWe,"A",{id:!0,class:!0,href:!0});var $Lt=s(f8);L0e=n($Lt,"SPAN",{});var kLt=s(L0e);T(Iy.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),W2r=i(oWe),y0e=n(oWe,"SPAN",{});var SLt=s(y0e);H2r=r(SLt,"AutoModelForInstanceSegmentation"),SLt.forEach(t),oWe.forEach(t),HXe=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(qy.$$.fragment,Ll),U2r=i(Ll),tc=n(Ll,"P",{});var bte=s(tc);J2r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eU=n(bte,"A",{href:!0});var RLt=s(eU);Y2r=r(RLt,"from_pretrained()"),RLt.forEach(t),K2r=r(bte," class method or the "),oU=n(bte,"A",{href:!0});var PLt=s(oU);Z2r=r(PLt,"from_config()"),PLt.forEach(t),ebr=r(bte,` class
method.`),bte.forEach(t),obr=i(Ll),jy=n(Ll,"P",{});var rWe=s(jy);rbr=r(rWe,"This class cannot be instantiated directly using "),x0e=n(rWe,"CODE",{});var BLt=s(x0e);tbr=r(BLt,"__init__()"),BLt.forEach(t),abr=r(rWe," (throws an error)."),rWe.forEach(t),nbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var KA=s(kt);T(Dy.$$.fragment,KA),sbr=i(KA),$0e=n(KA,"P",{});var NLt=s($0e);lbr=r(NLt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),NLt.forEach(t),ibr=i(KA),ac=n(KA,"P",{});var vte=s(ac);dbr=r(vte,`Note:
Loading a model from its configuration file does `),k0e=n(vte,"STRONG",{});var ILt=s(k0e);cbr=r(ILt,"not"),ILt.forEach(t),fbr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(vte,"A",{href:!0});var qLt=s(rU);mbr=r(qLt,"from_pretrained()"),qLt.forEach(t),gbr=r(vte," to load the model weights."),vte.forEach(t),hbr=i(KA),T(m8.$$.fragment,KA),KA.forEach(t),pbr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(Gy.$$.fragment,$a),_br=i($a),S0e=n($a,"P",{});var jLt=s(S0e);ubr=r(jLt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jLt.forEach(t),bbr=i($a),nn=n($a,"P",{});var ZA=s(nn);vbr=r(ZA,"The model class to instantiate is selected based on the "),R0e=n(ZA,"CODE",{});var DLt=s(R0e);Fbr=r(DLt,"model_type"),DLt.forEach(t),Tbr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),P0e=n(ZA,"CODE",{});var GLt=s(P0e);Mbr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),Ebr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(ZA,"CODE",{});var OLt=s(B0e);Cbr=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),wbr=r(ZA,":"),ZA.forEach(t),Abr=i($a),N0e=n($a,"UL",{});var VLt=s(N0e);g8=n(VLt,"LI",{});var QIe=s(g8);I0e=n(QIe,"STRONG",{});var XLt=s(I0e);Lbr=r(XLt,"maskformer"),XLt.forEach(t),ybr=r(QIe," \u2014 "),tU=n(QIe,"A",{href:!0});var zLt=s(tU);xbr=r(zLt,"MaskFormerForInstanceSegmentation"),zLt.forEach(t),$br=r(QIe," (MaskFormer model)"),QIe.forEach(t),VLt.forEach(t),kbr=i($a),h8=n($a,"P",{});var WIe=s(h8);Sbr=r(WIe,"The model is set in evaluation mode by default using "),q0e=n(WIe,"CODE",{});var QLt=s(q0e);Rbr=r(QLt,"model.eval()"),QLt.forEach(t),Pbr=r(WIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=n(WIe,"CODE",{});var WLt=s(j0e);Bbr=r(WLt,"model.train()"),WLt.forEach(t),WIe.forEach(t),Nbr=i($a),T(p8.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),UXe=i(f),nc=n(f,"H2",{class:!0});var tWe=s(nc);_8=n(tWe,"A",{id:!0,class:!0,href:!0});var HLt=s(_8);D0e=n(HLt,"SPAN",{});var ULt=s(D0e);T(Oy.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),Ibr=i(tWe),G0e=n(tWe,"SPAN",{});var JLt=s(G0e);qbr=r(JLt,"TFAutoModel"),JLt.forEach(t),tWe.forEach(t),JXe=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(Vy.$$.fragment,yl),jbr=i(yl),sc=n(yl,"P",{});var Fte=s(sc);Dbr=r(Fte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aU=n(Fte,"A",{href:!0});var YLt=s(aU);Gbr=r(YLt,"from_pretrained()"),YLt.forEach(t),Obr=r(Fte," class method or the "),nU=n(Fte,"A",{href:!0});var KLt=s(nU);Vbr=r(KLt,"from_config()"),KLt.forEach(t),Xbr=r(Fte,` class
method.`),Fte.forEach(t),zbr=i(yl),Xy=n(yl,"P",{});var aWe=s(Xy);Qbr=r(aWe,"This class cannot be instantiated directly using "),O0e=n(aWe,"CODE",{});var ZLt=s(O0e);Wbr=r(ZLt,"__init__()"),ZLt.forEach(t),Hbr=r(aWe," (throws an error)."),aWe.forEach(t),Ubr=i(yl),St=n(yl,"DIV",{class:!0});var e6=s(St);T(zy.$$.fragment,e6),Jbr=i(e6),V0e=n(e6,"P",{});var eyt=s(V0e);Ybr=r(eyt,"Instantiates one of the base model classes of the library from a configuration."),eyt.forEach(t),Kbr=i(e6),lc=n(e6,"P",{});var Tte=s(lc);Zbr=r(Tte,`Note:
Loading a model from its configuration file does `),X0e=n(Tte,"STRONG",{});var oyt=s(X0e);evr=r(oyt,"not"),oyt.forEach(t),ovr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Tte,"A",{href:!0});var ryt=s(sU);rvr=r(ryt,"from_pretrained()"),ryt.forEach(t),tvr=r(Tte," to load the model weights."),Tte.forEach(t),avr=i(e6),T(u8.$$.fragment,e6),e6.forEach(t),nvr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(Qy.$$.fragment,xl),svr=i(xl),z0e=n(xl,"P",{});var tyt=s(z0e);lvr=r(tyt,"Instantiate one of the base model classes of the library from a pretrained model."),tyt.forEach(t),ivr=i(xl),sn=n(xl,"P",{});var o6=s(sn);dvr=r(o6,"The model class to instantiate is selected based on the "),Q0e=n(o6,"CODE",{});var ayt=s(Q0e);cvr=r(ayt,"model_type"),ayt.forEach(t),fvr=r(o6,` property of the config object (either
passed as an argument or loaded from `),W0e=n(o6,"CODE",{});var nyt=s(W0e);mvr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),gvr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(o6,"CODE",{});var syt=s(H0e);hvr=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),pvr=r(o6,":"),o6.forEach(t),_vr=i(xl),q=n(xl,"UL",{});var D=s(q);b8=n(D,"LI",{});var HIe=s(b8);U0e=n(HIe,"STRONG",{});var lyt=s(U0e);uvr=r(lyt,"albert"),lyt.forEach(t),bvr=r(HIe," \u2014 "),lU=n(HIe,"A",{href:!0});var iyt=s(lU);vvr=r(iyt,"TFAlbertModel"),iyt.forEach(t),Fvr=r(HIe," (ALBERT model)"),HIe.forEach(t),Tvr=i(D),v8=n(D,"LI",{});var UIe=s(v8);J0e=n(UIe,"STRONG",{});var dyt=s(J0e);Mvr=r(dyt,"bart"),dyt.forEach(t),Evr=r(UIe," \u2014 "),iU=n(UIe,"A",{href:!0});var cyt=s(iU);Cvr=r(cyt,"TFBartModel"),cyt.forEach(t),wvr=r(UIe," (BART model)"),UIe.forEach(t),Avr=i(D),F8=n(D,"LI",{});var JIe=s(F8);Y0e=n(JIe,"STRONG",{});var fyt=s(Y0e);Lvr=r(fyt,"bert"),fyt.forEach(t),yvr=r(JIe," \u2014 "),dU=n(JIe,"A",{href:!0});var myt=s(dU);xvr=r(myt,"TFBertModel"),myt.forEach(t),$vr=r(JIe," (BERT model)"),JIe.forEach(t),kvr=i(D),T8=n(D,"LI",{});var YIe=s(T8);K0e=n(YIe,"STRONG",{});var gyt=s(K0e);Svr=r(gyt,"blenderbot"),gyt.forEach(t),Rvr=r(YIe," \u2014 "),cU=n(YIe,"A",{href:!0});var hyt=s(cU);Pvr=r(hyt,"TFBlenderbotModel"),hyt.forEach(t),Bvr=r(YIe," (Blenderbot model)"),YIe.forEach(t),Nvr=i(D),M8=n(D,"LI",{});var KIe=s(M8);Z0e=n(KIe,"STRONG",{});var pyt=s(Z0e);Ivr=r(pyt,"blenderbot-small"),pyt.forEach(t),qvr=r(KIe," \u2014 "),fU=n(KIe,"A",{href:!0});var _yt=s(fU);jvr=r(_yt,"TFBlenderbotSmallModel"),_yt.forEach(t),Dvr=r(KIe," (BlenderbotSmall model)"),KIe.forEach(t),Gvr=i(D),E8=n(D,"LI",{});var ZIe=s(E8);eFe=n(ZIe,"STRONG",{});var uyt=s(eFe);Ovr=r(uyt,"camembert"),uyt.forEach(t),Vvr=r(ZIe," \u2014 "),mU=n(ZIe,"A",{href:!0});var byt=s(mU);Xvr=r(byt,"TFCamembertModel"),byt.forEach(t),zvr=r(ZIe," (CamemBERT model)"),ZIe.forEach(t),Qvr=i(D),C8=n(D,"LI",{});var eqe=s(C8);oFe=n(eqe,"STRONG",{});var vyt=s(oFe);Wvr=r(vyt,"clip"),vyt.forEach(t),Hvr=r(eqe," \u2014 "),gU=n(eqe,"A",{href:!0});var Fyt=s(gU);Uvr=r(Fyt,"TFCLIPModel"),Fyt.forEach(t),Jvr=r(eqe," (CLIP model)"),eqe.forEach(t),Yvr=i(D),w8=n(D,"LI",{});var oqe=s(w8);rFe=n(oqe,"STRONG",{});var Tyt=s(rFe);Kvr=r(Tyt,"convbert"),Tyt.forEach(t),Zvr=r(oqe," \u2014 "),hU=n(oqe,"A",{href:!0});var Myt=s(hU);e5r=r(Myt,"TFConvBertModel"),Myt.forEach(t),o5r=r(oqe," (ConvBERT model)"),oqe.forEach(t),r5r=i(D),A8=n(D,"LI",{});var rqe=s(A8);tFe=n(rqe,"STRONG",{});var Eyt=s(tFe);t5r=r(Eyt,"convnext"),Eyt.forEach(t),a5r=r(rqe," \u2014 "),pU=n(rqe,"A",{href:!0});var Cyt=s(pU);n5r=r(Cyt,"TFConvNextModel"),Cyt.forEach(t),s5r=r(rqe," (ConvNeXT model)"),rqe.forEach(t),l5r=i(D),L8=n(D,"LI",{});var tqe=s(L8);aFe=n(tqe,"STRONG",{});var wyt=s(aFe);i5r=r(wyt,"ctrl"),wyt.forEach(t),d5r=r(tqe," \u2014 "),_U=n(tqe,"A",{href:!0});var Ayt=s(_U);c5r=r(Ayt,"TFCTRLModel"),Ayt.forEach(t),f5r=r(tqe," (CTRL model)"),tqe.forEach(t),m5r=i(D),y8=n(D,"LI",{});var aqe=s(y8);nFe=n(aqe,"STRONG",{});var Lyt=s(nFe);g5r=r(Lyt,"data2vec-vision"),Lyt.forEach(t),h5r=r(aqe," \u2014 "),uU=n(aqe,"A",{href:!0});var yyt=s(uU);p5r=r(yyt,"TFData2VecVisionModel"),yyt.forEach(t),_5r=r(aqe," (Data2VecVision model)"),aqe.forEach(t),u5r=i(D),x8=n(D,"LI",{});var nqe=s(x8);sFe=n(nqe,"STRONG",{});var xyt=s(sFe);b5r=r(xyt,"deberta"),xyt.forEach(t),v5r=r(nqe," \u2014 "),bU=n(nqe,"A",{href:!0});var $yt=s(bU);F5r=r($yt,"TFDebertaModel"),$yt.forEach(t),T5r=r(nqe," (DeBERTa model)"),nqe.forEach(t),M5r=i(D),$8=n(D,"LI",{});var sqe=s($8);lFe=n(sqe,"STRONG",{});var kyt=s(lFe);E5r=r(kyt,"deberta-v2"),kyt.forEach(t),C5r=r(sqe," \u2014 "),vU=n(sqe,"A",{href:!0});var Syt=s(vU);w5r=r(Syt,"TFDebertaV2Model"),Syt.forEach(t),A5r=r(sqe," (DeBERTa-v2 model)"),sqe.forEach(t),L5r=i(D),k8=n(D,"LI",{});var lqe=s(k8);iFe=n(lqe,"STRONG",{});var Ryt=s(iFe);y5r=r(Ryt,"distilbert"),Ryt.forEach(t),x5r=r(lqe," \u2014 "),FU=n(lqe,"A",{href:!0});var Pyt=s(FU);$5r=r(Pyt,"TFDistilBertModel"),Pyt.forEach(t),k5r=r(lqe," (DistilBERT model)"),lqe.forEach(t),S5r=i(D),S8=n(D,"LI",{});var iqe=s(S8);dFe=n(iqe,"STRONG",{});var Byt=s(dFe);R5r=r(Byt,"dpr"),Byt.forEach(t),P5r=r(iqe," \u2014 "),TU=n(iqe,"A",{href:!0});var Nyt=s(TU);B5r=r(Nyt,"TFDPRQuestionEncoder"),Nyt.forEach(t),N5r=r(iqe," (DPR model)"),iqe.forEach(t),I5r=i(D),R8=n(D,"LI",{});var dqe=s(R8);cFe=n(dqe,"STRONG",{});var Iyt=s(cFe);q5r=r(Iyt,"electra"),Iyt.forEach(t),j5r=r(dqe," \u2014 "),MU=n(dqe,"A",{href:!0});var qyt=s(MU);D5r=r(qyt,"TFElectraModel"),qyt.forEach(t),G5r=r(dqe," (ELECTRA model)"),dqe.forEach(t),O5r=i(D),P8=n(D,"LI",{});var cqe=s(P8);fFe=n(cqe,"STRONG",{});var jyt=s(fFe);V5r=r(jyt,"flaubert"),jyt.forEach(t),X5r=r(cqe," \u2014 "),EU=n(cqe,"A",{href:!0});var Dyt=s(EU);z5r=r(Dyt,"TFFlaubertModel"),Dyt.forEach(t),Q5r=r(cqe," (FlauBERT model)"),cqe.forEach(t),W5r=i(D),Js=n(D,"LI",{});var kS=s(Js);mFe=n(kS,"STRONG",{});var Gyt=s(mFe);H5r=r(Gyt,"funnel"),Gyt.forEach(t),U5r=r(kS," \u2014 "),CU=n(kS,"A",{href:!0});var Oyt=s(CU);J5r=r(Oyt,"TFFunnelModel"),Oyt.forEach(t),Y5r=r(kS," or "),wU=n(kS,"A",{href:!0});var Vyt=s(wU);K5r=r(Vyt,"TFFunnelBaseModel"),Vyt.forEach(t),Z5r=r(kS," (Funnel Transformer model)"),kS.forEach(t),e0r=i(D),B8=n(D,"LI",{});var fqe=s(B8);gFe=n(fqe,"STRONG",{});var Xyt=s(gFe);o0r=r(Xyt,"gpt2"),Xyt.forEach(t),r0r=r(fqe," \u2014 "),AU=n(fqe,"A",{href:!0});var zyt=s(AU);t0r=r(zyt,"TFGPT2Model"),zyt.forEach(t),a0r=r(fqe," (OpenAI GPT-2 model)"),fqe.forEach(t),n0r=i(D),N8=n(D,"LI",{});var mqe=s(N8);hFe=n(mqe,"STRONG",{});var Qyt=s(hFe);s0r=r(Qyt,"gptj"),Qyt.forEach(t),l0r=r(mqe," \u2014 "),LU=n(mqe,"A",{href:!0});var Wyt=s(LU);i0r=r(Wyt,"TFGPTJModel"),Wyt.forEach(t),d0r=r(mqe," (GPT-J model)"),mqe.forEach(t),c0r=i(D),I8=n(D,"LI",{});var gqe=s(I8);pFe=n(gqe,"STRONG",{});var Hyt=s(pFe);f0r=r(Hyt,"hubert"),Hyt.forEach(t),m0r=r(gqe," \u2014 "),yU=n(gqe,"A",{href:!0});var Uyt=s(yU);g0r=r(Uyt,"TFHubertModel"),Uyt.forEach(t),h0r=r(gqe," (Hubert model)"),gqe.forEach(t),p0r=i(D),q8=n(D,"LI",{});var hqe=s(q8);_Fe=n(hqe,"STRONG",{});var Jyt=s(_Fe);_0r=r(Jyt,"layoutlm"),Jyt.forEach(t),u0r=r(hqe," \u2014 "),xU=n(hqe,"A",{href:!0});var Yyt=s(xU);b0r=r(Yyt,"TFLayoutLMModel"),Yyt.forEach(t),v0r=r(hqe," (LayoutLM model)"),hqe.forEach(t),F0r=i(D),j8=n(D,"LI",{});var pqe=s(j8);uFe=n(pqe,"STRONG",{});var Kyt=s(uFe);T0r=r(Kyt,"led"),Kyt.forEach(t),M0r=r(pqe," \u2014 "),$U=n(pqe,"A",{href:!0});var Zyt=s($U);E0r=r(Zyt,"TFLEDModel"),Zyt.forEach(t),C0r=r(pqe," (LED model)"),pqe.forEach(t),w0r=i(D),D8=n(D,"LI",{});var _qe=s(D8);bFe=n(_qe,"STRONG",{});var ext=s(bFe);A0r=r(ext,"longformer"),ext.forEach(t),L0r=r(_qe," \u2014 "),kU=n(_qe,"A",{href:!0});var oxt=s(kU);y0r=r(oxt,"TFLongformerModel"),oxt.forEach(t),x0r=r(_qe," (Longformer model)"),_qe.forEach(t),$0r=i(D),G8=n(D,"LI",{});var uqe=s(G8);vFe=n(uqe,"STRONG",{});var rxt=s(vFe);k0r=r(rxt,"lxmert"),rxt.forEach(t),S0r=r(uqe," \u2014 "),SU=n(uqe,"A",{href:!0});var txt=s(SU);R0r=r(txt,"TFLxmertModel"),txt.forEach(t),P0r=r(uqe," (LXMERT model)"),uqe.forEach(t),B0r=i(D),O8=n(D,"LI",{});var bqe=s(O8);FFe=n(bqe,"STRONG",{});var axt=s(FFe);N0r=r(axt,"marian"),axt.forEach(t),I0r=r(bqe," \u2014 "),RU=n(bqe,"A",{href:!0});var nxt=s(RU);q0r=r(nxt,"TFMarianModel"),nxt.forEach(t),j0r=r(bqe," (Marian model)"),bqe.forEach(t),D0r=i(D),V8=n(D,"LI",{});var vqe=s(V8);TFe=n(vqe,"STRONG",{});var sxt=s(TFe);G0r=r(sxt,"mbart"),sxt.forEach(t),O0r=r(vqe," \u2014 "),PU=n(vqe,"A",{href:!0});var lxt=s(PU);V0r=r(lxt,"TFMBartModel"),lxt.forEach(t),X0r=r(vqe," (mBART model)"),vqe.forEach(t),z0r=i(D),X8=n(D,"LI",{});var Fqe=s(X8);MFe=n(Fqe,"STRONG",{});var ixt=s(MFe);Q0r=r(ixt,"mobilebert"),ixt.forEach(t),W0r=r(Fqe," \u2014 "),BU=n(Fqe,"A",{href:!0});var dxt=s(BU);H0r=r(dxt,"TFMobileBertModel"),dxt.forEach(t),U0r=r(Fqe," (MobileBERT model)"),Fqe.forEach(t),J0r=i(D),z8=n(D,"LI",{});var Tqe=s(z8);EFe=n(Tqe,"STRONG",{});var cxt=s(EFe);Y0r=r(cxt,"mpnet"),cxt.forEach(t),K0r=r(Tqe," \u2014 "),NU=n(Tqe,"A",{href:!0});var fxt=s(NU);Z0r=r(fxt,"TFMPNetModel"),fxt.forEach(t),eFr=r(Tqe," (MPNet model)"),Tqe.forEach(t),oFr=i(D),Q8=n(D,"LI",{});var Mqe=s(Q8);CFe=n(Mqe,"STRONG",{});var mxt=s(CFe);rFr=r(mxt,"mt5"),mxt.forEach(t),tFr=r(Mqe," \u2014 "),IU=n(Mqe,"A",{href:!0});var gxt=s(IU);aFr=r(gxt,"TFMT5Model"),gxt.forEach(t),nFr=r(Mqe," (MT5 model)"),Mqe.forEach(t),sFr=i(D),W8=n(D,"LI",{});var Eqe=s(W8);wFe=n(Eqe,"STRONG",{});var hxt=s(wFe);lFr=r(hxt,"openai-gpt"),hxt.forEach(t),iFr=r(Eqe," \u2014 "),qU=n(Eqe,"A",{href:!0});var pxt=s(qU);dFr=r(pxt,"TFOpenAIGPTModel"),pxt.forEach(t),cFr=r(Eqe," (OpenAI GPT model)"),Eqe.forEach(t),fFr=i(D),H8=n(D,"LI",{});var Cqe=s(H8);AFe=n(Cqe,"STRONG",{});var _xt=s(AFe);mFr=r(_xt,"opt"),_xt.forEach(t),gFr=r(Cqe," \u2014 "),jU=n(Cqe,"A",{href:!0});var uxt=s(jU);hFr=r(uxt,"TFOPTModel"),uxt.forEach(t),pFr=r(Cqe," (OPT model)"),Cqe.forEach(t),_Fr=i(D),U8=n(D,"LI",{});var wqe=s(U8);LFe=n(wqe,"STRONG",{});var bxt=s(LFe);uFr=r(bxt,"pegasus"),bxt.forEach(t),bFr=r(wqe," \u2014 "),DU=n(wqe,"A",{href:!0});var vxt=s(DU);vFr=r(vxt,"TFPegasusModel"),vxt.forEach(t),FFr=r(wqe," (Pegasus model)"),wqe.forEach(t),TFr=i(D),J8=n(D,"LI",{});var Aqe=s(J8);yFe=n(Aqe,"STRONG",{});var Fxt=s(yFe);MFr=r(Fxt,"regnet"),Fxt.forEach(t),EFr=r(Aqe," \u2014 "),GU=n(Aqe,"A",{href:!0});var Txt=s(GU);CFr=r(Txt,"TFRegNetModel"),Txt.forEach(t),wFr=r(Aqe," (RegNet model)"),Aqe.forEach(t),AFr=i(D),Y8=n(D,"LI",{});var Lqe=s(Y8);xFe=n(Lqe,"STRONG",{});var Mxt=s(xFe);LFr=r(Mxt,"rembert"),Mxt.forEach(t),yFr=r(Lqe," \u2014 "),OU=n(Lqe,"A",{href:!0});var Ext=s(OU);xFr=r(Ext,"TFRemBertModel"),Ext.forEach(t),$Fr=r(Lqe," (RemBERT model)"),Lqe.forEach(t),kFr=i(D),K8=n(D,"LI",{});var yqe=s(K8);$Fe=n(yqe,"STRONG",{});var Cxt=s($Fe);SFr=r(Cxt,"resnet"),Cxt.forEach(t),RFr=r(yqe," \u2014 "),VU=n(yqe,"A",{href:!0});var wxt=s(VU);PFr=r(wxt,"TFResNetModel"),wxt.forEach(t),BFr=r(yqe," (ResNet model)"),yqe.forEach(t),NFr=i(D),Z8=n(D,"LI",{});var xqe=s(Z8);kFe=n(xqe,"STRONG",{});var Axt=s(kFe);IFr=r(Axt,"roberta"),Axt.forEach(t),qFr=r(xqe," \u2014 "),XU=n(xqe,"A",{href:!0});var Lxt=s(XU);jFr=r(Lxt,"TFRobertaModel"),Lxt.forEach(t),DFr=r(xqe," (RoBERTa model)"),xqe.forEach(t),GFr=i(D),e9=n(D,"LI",{});var $qe=s(e9);SFe=n($qe,"STRONG",{});var yxt=s(SFe);OFr=r(yxt,"roformer"),yxt.forEach(t),VFr=r($qe," \u2014 "),zU=n($qe,"A",{href:!0});var xxt=s(zU);XFr=r(xxt,"TFRoFormerModel"),xxt.forEach(t),zFr=r($qe," (RoFormer model)"),$qe.forEach(t),QFr=i(D),o9=n(D,"LI",{});var kqe=s(o9);RFe=n(kqe,"STRONG",{});var $xt=s(RFe);WFr=r($xt,"speech_to_text"),$xt.forEach(t),HFr=r(kqe," \u2014 "),QU=n(kqe,"A",{href:!0});var kxt=s(QU);UFr=r(kxt,"TFSpeech2TextModel"),kxt.forEach(t),JFr=r(kqe," (Speech2Text model)"),kqe.forEach(t),YFr=i(D),r9=n(D,"LI",{});var Sqe=s(r9);PFe=n(Sqe,"STRONG",{});var Sxt=s(PFe);KFr=r(Sxt,"swin"),Sxt.forEach(t),ZFr=r(Sqe," \u2014 "),WU=n(Sqe,"A",{href:!0});var Rxt=s(WU);eTr=r(Rxt,"TFSwinModel"),Rxt.forEach(t),oTr=r(Sqe," (Swin Transformer model)"),Sqe.forEach(t),rTr=i(D),t9=n(D,"LI",{});var Rqe=s(t9);BFe=n(Rqe,"STRONG",{});var Pxt=s(BFe);tTr=r(Pxt,"t5"),Pxt.forEach(t),aTr=r(Rqe," \u2014 "),HU=n(Rqe,"A",{href:!0});var Bxt=s(HU);nTr=r(Bxt,"TFT5Model"),Bxt.forEach(t),sTr=r(Rqe," (T5 model)"),Rqe.forEach(t),lTr=i(D),a9=n(D,"LI",{});var Pqe=s(a9);NFe=n(Pqe,"STRONG",{});var Nxt=s(NFe);iTr=r(Nxt,"tapas"),Nxt.forEach(t),dTr=r(Pqe," \u2014 "),UU=n(Pqe,"A",{href:!0});var Ixt=s(UU);cTr=r(Ixt,"TFTapasModel"),Ixt.forEach(t),fTr=r(Pqe," (TAPAS model)"),Pqe.forEach(t),mTr=i(D),n9=n(D,"LI",{});var Bqe=s(n9);IFe=n(Bqe,"STRONG",{});var qxt=s(IFe);gTr=r(qxt,"transfo-xl"),qxt.forEach(t),hTr=r(Bqe," \u2014 "),JU=n(Bqe,"A",{href:!0});var jxt=s(JU);pTr=r(jxt,"TFTransfoXLModel"),jxt.forEach(t),_Tr=r(Bqe," (Transformer-XL model)"),Bqe.forEach(t),uTr=i(D),s9=n(D,"LI",{});var Nqe=s(s9);qFe=n(Nqe,"STRONG",{});var Dxt=s(qFe);bTr=r(Dxt,"vit"),Dxt.forEach(t),vTr=r(Nqe," \u2014 "),YU=n(Nqe,"A",{href:!0});var Gxt=s(YU);FTr=r(Gxt,"TFViTModel"),Gxt.forEach(t),TTr=r(Nqe," (ViT model)"),Nqe.forEach(t),MTr=i(D),l9=n(D,"LI",{});var Iqe=s(l9);jFe=n(Iqe,"STRONG",{});var Oxt=s(jFe);ETr=r(Oxt,"vit_mae"),Oxt.forEach(t),CTr=r(Iqe," \u2014 "),KU=n(Iqe,"A",{href:!0});var Vxt=s(KU);wTr=r(Vxt,"TFViTMAEModel"),Vxt.forEach(t),ATr=r(Iqe," (ViTMAE model)"),Iqe.forEach(t),LTr=i(D),i9=n(D,"LI",{});var qqe=s(i9);DFe=n(qqe,"STRONG",{});var Xxt=s(DFe);yTr=r(Xxt,"wav2vec2"),Xxt.forEach(t),xTr=r(qqe," \u2014 "),ZU=n(qqe,"A",{href:!0});var zxt=s(ZU);$Tr=r(zxt,"TFWav2Vec2Model"),zxt.forEach(t),kTr=r(qqe," (Wav2Vec2 model)"),qqe.forEach(t),STr=i(D),d9=n(D,"LI",{});var jqe=s(d9);GFe=n(jqe,"STRONG",{});var Qxt=s(GFe);RTr=r(Qxt,"xlm"),Qxt.forEach(t),PTr=r(jqe," \u2014 "),eJ=n(jqe,"A",{href:!0});var Wxt=s(eJ);BTr=r(Wxt,"TFXLMModel"),Wxt.forEach(t),NTr=r(jqe," (XLM model)"),jqe.forEach(t),ITr=i(D),c9=n(D,"LI",{});var Dqe=s(c9);OFe=n(Dqe,"STRONG",{});var Hxt=s(OFe);qTr=r(Hxt,"xlm-roberta"),Hxt.forEach(t),jTr=r(Dqe," \u2014 "),oJ=n(Dqe,"A",{href:!0});var Uxt=s(oJ);DTr=r(Uxt,"TFXLMRobertaModel"),Uxt.forEach(t),GTr=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),OTr=i(D),f9=n(D,"LI",{});var Gqe=s(f9);VFe=n(Gqe,"STRONG",{});var Jxt=s(VFe);VTr=r(Jxt,"xlnet"),Jxt.forEach(t),XTr=r(Gqe," \u2014 "),rJ=n(Gqe,"A",{href:!0});var Yxt=s(rJ);zTr=r(Yxt,"TFXLNetModel"),Yxt.forEach(t),QTr=r(Gqe," (XLNet model)"),Gqe.forEach(t),D.forEach(t),WTr=i(xl),T(m9.$$.fragment,xl),xl.forEach(t),yl.forEach(t),YXe=i(f),ic=n(f,"H2",{class:!0});var nWe=s(ic);g9=n(nWe,"A",{id:!0,class:!0,href:!0});var Kxt=s(g9);XFe=n(Kxt,"SPAN",{});var Zxt=s(XFe);T(Wy.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),HTr=i(nWe),zFe=n(nWe,"SPAN",{});var e$t=s(zFe);UTr=r(e$t,"TFAutoModelForPreTraining"),e$t.forEach(t),nWe.forEach(t),KXe=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Hy.$$.fragment,$l),JTr=i($l),dc=n($l,"P",{});var Mte=s(dc);YTr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=n(Mte,"A",{href:!0});var o$t=s(tJ);KTr=r(o$t,"from_pretrained()"),o$t.forEach(t),ZTr=r(Mte," class method or the "),aJ=n(Mte,"A",{href:!0});var r$t=s(aJ);e8r=r(r$t,"from_config()"),r$t.forEach(t),o8r=r(Mte,` class
method.`),Mte.forEach(t),r8r=i($l),Uy=n($l,"P",{});var sWe=s(Uy);t8r=r(sWe,"This class cannot be instantiated directly using "),QFe=n(sWe,"CODE",{});var t$t=s(QFe);a8r=r(t$t,"__init__()"),t$t.forEach(t),n8r=r(sWe," (throws an error)."),sWe.forEach(t),s8r=i($l),Rt=n($l,"DIV",{class:!0});var r6=s(Rt);T(Jy.$$.fragment,r6),l8r=i(r6),WFe=n(r6,"P",{});var a$t=s(WFe);i8r=r(a$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a$t.forEach(t),d8r=i(r6),cc=n(r6,"P",{});var Ete=s(cc);c8r=r(Ete,`Note:
Loading a model from its configuration file does `),HFe=n(Ete,"STRONG",{});var n$t=s(HFe);f8r=r(n$t,"not"),n$t.forEach(t),m8r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(Ete,"A",{href:!0});var s$t=s(nJ);g8r=r(s$t,"from_pretrained()"),s$t.forEach(t),h8r=r(Ete," to load the model weights."),Ete.forEach(t),p8r=i(r6),T(h9.$$.fragment,r6),r6.forEach(t),_8r=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(Yy.$$.fragment,kl),u8r=i(kl),UFe=n(kl,"P",{});var l$t=s(UFe);b8r=r(l$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l$t.forEach(t),v8r=i(kl),ln=n(kl,"P",{});var t6=s(ln);F8r=r(t6,"The model class to instantiate is selected based on the "),JFe=n(t6,"CODE",{});var i$t=s(JFe);T8r=r(i$t,"model_type"),i$t.forEach(t),M8r=r(t6,` property of the config object (either
passed as an argument or loaded from `),YFe=n(t6,"CODE",{});var d$t=s(YFe);E8r=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),C8r=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(t6,"CODE",{});var c$t=s(KFe);w8r=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),A8r=r(t6,":"),t6.forEach(t),L8r=i(kl),se=n(kl,"UL",{});var le=s(se);p9=n(le,"LI",{});var Oqe=s(p9);ZFe=n(Oqe,"STRONG",{});var f$t=s(ZFe);y8r=r(f$t,"albert"),f$t.forEach(t),x8r=r(Oqe," \u2014 "),sJ=n(Oqe,"A",{href:!0});var m$t=s(sJ);$8r=r(m$t,"TFAlbertForPreTraining"),m$t.forEach(t),k8r=r(Oqe," (ALBERT model)"),Oqe.forEach(t),S8r=i(le),_9=n(le,"LI",{});var Vqe=s(_9);eTe=n(Vqe,"STRONG",{});var g$t=s(eTe);R8r=r(g$t,"bart"),g$t.forEach(t),P8r=r(Vqe," \u2014 "),lJ=n(Vqe,"A",{href:!0});var h$t=s(lJ);B8r=r(h$t,"TFBartForConditionalGeneration"),h$t.forEach(t),N8r=r(Vqe," (BART model)"),Vqe.forEach(t),I8r=i(le),u9=n(le,"LI",{});var Xqe=s(u9);oTe=n(Xqe,"STRONG",{});var p$t=s(oTe);q8r=r(p$t,"bert"),p$t.forEach(t),j8r=r(Xqe," \u2014 "),iJ=n(Xqe,"A",{href:!0});var _$t=s(iJ);D8r=r(_$t,"TFBertForPreTraining"),_$t.forEach(t),G8r=r(Xqe," (BERT model)"),Xqe.forEach(t),O8r=i(le),b9=n(le,"LI",{});var zqe=s(b9);rTe=n(zqe,"STRONG",{});var u$t=s(rTe);V8r=r(u$t,"camembert"),u$t.forEach(t),X8r=r(zqe," \u2014 "),dJ=n(zqe,"A",{href:!0});var b$t=s(dJ);z8r=r(b$t,"TFCamembertForMaskedLM"),b$t.forEach(t),Q8r=r(zqe," (CamemBERT model)"),zqe.forEach(t),W8r=i(le),v9=n(le,"LI",{});var Qqe=s(v9);tTe=n(Qqe,"STRONG",{});var v$t=s(tTe);H8r=r(v$t,"ctrl"),v$t.forEach(t),U8r=r(Qqe," \u2014 "),cJ=n(Qqe,"A",{href:!0});var F$t=s(cJ);J8r=r(F$t,"TFCTRLLMHeadModel"),F$t.forEach(t),Y8r=r(Qqe," (CTRL model)"),Qqe.forEach(t),K8r=i(le),F9=n(le,"LI",{});var Wqe=s(F9);aTe=n(Wqe,"STRONG",{});var T$t=s(aTe);Z8r=r(T$t,"distilbert"),T$t.forEach(t),e9r=r(Wqe," \u2014 "),fJ=n(Wqe,"A",{href:!0});var M$t=s(fJ);o9r=r(M$t,"TFDistilBertForMaskedLM"),M$t.forEach(t),r9r=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),t9r=i(le),T9=n(le,"LI",{});var Hqe=s(T9);nTe=n(Hqe,"STRONG",{});var E$t=s(nTe);a9r=r(E$t,"electra"),E$t.forEach(t),n9r=r(Hqe," \u2014 "),mJ=n(Hqe,"A",{href:!0});var C$t=s(mJ);s9r=r(C$t,"TFElectraForPreTraining"),C$t.forEach(t),l9r=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),i9r=i(le),M9=n(le,"LI",{});var Uqe=s(M9);sTe=n(Uqe,"STRONG",{});var w$t=s(sTe);d9r=r(w$t,"flaubert"),w$t.forEach(t),c9r=r(Uqe," \u2014 "),gJ=n(Uqe,"A",{href:!0});var A$t=s(gJ);f9r=r(A$t,"TFFlaubertWithLMHeadModel"),A$t.forEach(t),m9r=r(Uqe," (FlauBERT model)"),Uqe.forEach(t),g9r=i(le),E9=n(le,"LI",{});var Jqe=s(E9);lTe=n(Jqe,"STRONG",{});var L$t=s(lTe);h9r=r(L$t,"funnel"),L$t.forEach(t),p9r=r(Jqe," \u2014 "),hJ=n(Jqe,"A",{href:!0});var y$t=s(hJ);_9r=r(y$t,"TFFunnelForPreTraining"),y$t.forEach(t),u9r=r(Jqe," (Funnel Transformer model)"),Jqe.forEach(t),b9r=i(le),C9=n(le,"LI",{});var Yqe=s(C9);iTe=n(Yqe,"STRONG",{});var x$t=s(iTe);v9r=r(x$t,"gpt2"),x$t.forEach(t),F9r=r(Yqe," \u2014 "),pJ=n(Yqe,"A",{href:!0});var $$t=s(pJ);T9r=r($$t,"TFGPT2LMHeadModel"),$$t.forEach(t),M9r=r(Yqe," (OpenAI GPT-2 model)"),Yqe.forEach(t),E9r=i(le),w9=n(le,"LI",{});var Kqe=s(w9);dTe=n(Kqe,"STRONG",{});var k$t=s(dTe);C9r=r(k$t,"layoutlm"),k$t.forEach(t),w9r=r(Kqe," \u2014 "),_J=n(Kqe,"A",{href:!0});var S$t=s(_J);A9r=r(S$t,"TFLayoutLMForMaskedLM"),S$t.forEach(t),L9r=r(Kqe," (LayoutLM model)"),Kqe.forEach(t),y9r=i(le),A9=n(le,"LI",{});var Zqe=s(A9);cTe=n(Zqe,"STRONG",{});var R$t=s(cTe);x9r=r(R$t,"lxmert"),R$t.forEach(t),$9r=r(Zqe," \u2014 "),uJ=n(Zqe,"A",{href:!0});var P$t=s(uJ);k9r=r(P$t,"TFLxmertForPreTraining"),P$t.forEach(t),S9r=r(Zqe," (LXMERT model)"),Zqe.forEach(t),R9r=i(le),L9=n(le,"LI",{});var eje=s(L9);fTe=n(eje,"STRONG",{});var B$t=s(fTe);P9r=r(B$t,"mobilebert"),B$t.forEach(t),B9r=r(eje," \u2014 "),bJ=n(eje,"A",{href:!0});var N$t=s(bJ);N9r=r(N$t,"TFMobileBertForPreTraining"),N$t.forEach(t),I9r=r(eje," (MobileBERT model)"),eje.forEach(t),q9r=i(le),y9=n(le,"LI",{});var oje=s(y9);mTe=n(oje,"STRONG",{});var I$t=s(mTe);j9r=r(I$t,"mpnet"),I$t.forEach(t),D9r=r(oje," \u2014 "),vJ=n(oje,"A",{href:!0});var q$t=s(vJ);G9r=r(q$t,"TFMPNetForMaskedLM"),q$t.forEach(t),O9r=r(oje," (MPNet model)"),oje.forEach(t),V9r=i(le),x9=n(le,"LI",{});var rje=s(x9);gTe=n(rje,"STRONG",{});var j$t=s(gTe);X9r=r(j$t,"openai-gpt"),j$t.forEach(t),z9r=r(rje," \u2014 "),FJ=n(rje,"A",{href:!0});var D$t=s(FJ);Q9r=r(D$t,"TFOpenAIGPTLMHeadModel"),D$t.forEach(t),W9r=r(rje," (OpenAI GPT model)"),rje.forEach(t),H9r=i(le),$9=n(le,"LI",{});var tje=s($9);hTe=n(tje,"STRONG",{});var G$t=s(hTe);U9r=r(G$t,"roberta"),G$t.forEach(t),J9r=r(tje," \u2014 "),TJ=n(tje,"A",{href:!0});var O$t=s(TJ);Y9r=r(O$t,"TFRobertaForMaskedLM"),O$t.forEach(t),K9r=r(tje," (RoBERTa model)"),tje.forEach(t),Z9r=i(le),k9=n(le,"LI",{});var aje=s(k9);pTe=n(aje,"STRONG",{});var V$t=s(pTe);eMr=r(V$t,"t5"),V$t.forEach(t),oMr=r(aje," \u2014 "),MJ=n(aje,"A",{href:!0});var X$t=s(MJ);rMr=r(X$t,"TFT5ForConditionalGeneration"),X$t.forEach(t),tMr=r(aje," (T5 model)"),aje.forEach(t),aMr=i(le),S9=n(le,"LI",{});var nje=s(S9);_Te=n(nje,"STRONG",{});var z$t=s(_Te);nMr=r(z$t,"tapas"),z$t.forEach(t),sMr=r(nje," \u2014 "),EJ=n(nje,"A",{href:!0});var Q$t=s(EJ);lMr=r(Q$t,"TFTapasForMaskedLM"),Q$t.forEach(t),iMr=r(nje," (TAPAS model)"),nje.forEach(t),dMr=i(le),R9=n(le,"LI",{});var sje=s(R9);uTe=n(sje,"STRONG",{});var W$t=s(uTe);cMr=r(W$t,"transfo-xl"),W$t.forEach(t),fMr=r(sje," \u2014 "),CJ=n(sje,"A",{href:!0});var H$t=s(CJ);mMr=r(H$t,"TFTransfoXLLMHeadModel"),H$t.forEach(t),gMr=r(sje," (Transformer-XL model)"),sje.forEach(t),hMr=i(le),P9=n(le,"LI",{});var lje=s(P9);bTe=n(lje,"STRONG",{});var U$t=s(bTe);pMr=r(U$t,"vit_mae"),U$t.forEach(t),_Mr=r(lje," \u2014 "),wJ=n(lje,"A",{href:!0});var J$t=s(wJ);uMr=r(J$t,"TFViTMAEForPreTraining"),J$t.forEach(t),bMr=r(lje," (ViTMAE model)"),lje.forEach(t),vMr=i(le),B9=n(le,"LI",{});var ije=s(B9);vTe=n(ije,"STRONG",{});var Y$t=s(vTe);FMr=r(Y$t,"xlm"),Y$t.forEach(t),TMr=r(ije," \u2014 "),AJ=n(ije,"A",{href:!0});var K$t=s(AJ);MMr=r(K$t,"TFXLMWithLMHeadModel"),K$t.forEach(t),EMr=r(ije," (XLM model)"),ije.forEach(t),CMr=i(le),N9=n(le,"LI",{});var dje=s(N9);FTe=n(dje,"STRONG",{});var Z$t=s(FTe);wMr=r(Z$t,"xlm-roberta"),Z$t.forEach(t),AMr=r(dje," \u2014 "),LJ=n(dje,"A",{href:!0});var ekt=s(LJ);LMr=r(ekt,"TFXLMRobertaForMaskedLM"),ekt.forEach(t),yMr=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),xMr=i(le),I9=n(le,"LI",{});var cje=s(I9);TTe=n(cje,"STRONG",{});var okt=s(TTe);$Mr=r(okt,"xlnet"),okt.forEach(t),kMr=r(cje," \u2014 "),yJ=n(cje,"A",{href:!0});var rkt=s(yJ);SMr=r(rkt,"TFXLNetLMHeadModel"),rkt.forEach(t),RMr=r(cje," (XLNet model)"),cje.forEach(t),le.forEach(t),PMr=i(kl),T(q9.$$.fragment,kl),kl.forEach(t),$l.forEach(t),ZXe=i(f),fc=n(f,"H2",{class:!0});var lWe=s(fc);j9=n(lWe,"A",{id:!0,class:!0,href:!0});var tkt=s(j9);MTe=n(tkt,"SPAN",{});var akt=s(MTe);T(Ky.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),BMr=i(lWe),ETe=n(lWe,"SPAN",{});var nkt=s(ETe);NMr=r(nkt,"TFAutoModelForCausalLM"),nkt.forEach(t),lWe.forEach(t),eze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(Zy.$$.fragment,Sl),IMr=i(Sl),mc=n(Sl,"P",{});var Cte=s(mc);qMr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=n(Cte,"A",{href:!0});var skt=s(xJ);jMr=r(skt,"from_pretrained()"),skt.forEach(t),DMr=r(Cte," class method or the "),$J=n(Cte,"A",{href:!0});var lkt=s($J);GMr=r(lkt,"from_config()"),lkt.forEach(t),OMr=r(Cte,` class
method.`),Cte.forEach(t),VMr=i(Sl),ex=n(Sl,"P",{});var iWe=s(ex);XMr=r(iWe,"This class cannot be instantiated directly using "),CTe=n(iWe,"CODE",{});var ikt=s(CTe);zMr=r(ikt,"__init__()"),ikt.forEach(t),QMr=r(iWe," (throws an error)."),iWe.forEach(t),WMr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var a6=s(Pt);T(ox.$$.fragment,a6),HMr=i(a6),wTe=n(a6,"P",{});var dkt=s(wTe);UMr=r(dkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dkt.forEach(t),JMr=i(a6),gc=n(a6,"P",{});var wte=s(gc);YMr=r(wte,`Note:
Loading a model from its configuration file does `),ATe=n(wte,"STRONG",{});var ckt=s(ATe);KMr=r(ckt,"not"),ckt.forEach(t),ZMr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(wte,"A",{href:!0});var fkt=s(kJ);e4r=r(fkt,"from_pretrained()"),fkt.forEach(t),o4r=r(wte," to load the model weights."),wte.forEach(t),r4r=i(a6),T(D9.$$.fragment,a6),a6.forEach(t),t4r=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(rx.$$.fragment,Rl),a4r=i(Rl),LTe=n(Rl,"P",{});var mkt=s(LTe);n4r=r(mkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mkt.forEach(t),s4r=i(Rl),dn=n(Rl,"P",{});var n6=s(dn);l4r=r(n6,"The model class to instantiate is selected based on the "),yTe=n(n6,"CODE",{});var gkt=s(yTe);i4r=r(gkt,"model_type"),gkt.forEach(t),d4r=r(n6,` property of the config object (either
passed as an argument or loaded from `),xTe=n(n6,"CODE",{});var hkt=s(xTe);c4r=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),f4r=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(n6,"CODE",{});var pkt=s($Te);m4r=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),g4r=r(n6,":"),n6.forEach(t),h4r=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);G9=n(Ce,"LI",{});var fje=s(G9);kTe=n(fje,"STRONG",{});var _kt=s(kTe);p4r=r(_kt,"bert"),_kt.forEach(t),_4r=r(fje," \u2014 "),SJ=n(fje,"A",{href:!0});var ukt=s(SJ);u4r=r(ukt,"TFBertLMHeadModel"),ukt.forEach(t),b4r=r(fje," (BERT model)"),fje.forEach(t),v4r=i(Ce),O9=n(Ce,"LI",{});var mje=s(O9);STe=n(mje,"STRONG",{});var bkt=s(STe);F4r=r(bkt,"camembert"),bkt.forEach(t),T4r=r(mje," \u2014 "),RJ=n(mje,"A",{href:!0});var vkt=s(RJ);M4r=r(vkt,"TFCamembertForCausalLM"),vkt.forEach(t),E4r=r(mje," (CamemBERT model)"),mje.forEach(t),C4r=i(Ce),V9=n(Ce,"LI",{});var gje=s(V9);RTe=n(gje,"STRONG",{});var Fkt=s(RTe);w4r=r(Fkt,"ctrl"),Fkt.forEach(t),A4r=r(gje," \u2014 "),PJ=n(gje,"A",{href:!0});var Tkt=s(PJ);L4r=r(Tkt,"TFCTRLLMHeadModel"),Tkt.forEach(t),y4r=r(gje," (CTRL model)"),gje.forEach(t),x4r=i(Ce),X9=n(Ce,"LI",{});var hje=s(X9);PTe=n(hje,"STRONG",{});var Mkt=s(PTe);$4r=r(Mkt,"gpt2"),Mkt.forEach(t),k4r=r(hje," \u2014 "),BJ=n(hje,"A",{href:!0});var Ekt=s(BJ);S4r=r(Ekt,"TFGPT2LMHeadModel"),Ekt.forEach(t),R4r=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),P4r=i(Ce),z9=n(Ce,"LI",{});var pje=s(z9);BTe=n(pje,"STRONG",{});var Ckt=s(BTe);B4r=r(Ckt,"gptj"),Ckt.forEach(t),N4r=r(pje," \u2014 "),NJ=n(pje,"A",{href:!0});var wkt=s(NJ);I4r=r(wkt,"TFGPTJForCausalLM"),wkt.forEach(t),q4r=r(pje," (GPT-J model)"),pje.forEach(t),j4r=i(Ce),Q9=n(Ce,"LI",{});var _je=s(Q9);NTe=n(_je,"STRONG",{});var Akt=s(NTe);D4r=r(Akt,"openai-gpt"),Akt.forEach(t),G4r=r(_je," \u2014 "),IJ=n(_je,"A",{href:!0});var Lkt=s(IJ);O4r=r(Lkt,"TFOpenAIGPTLMHeadModel"),Lkt.forEach(t),V4r=r(_je," (OpenAI GPT model)"),_je.forEach(t),X4r=i(Ce),W9=n(Ce,"LI",{});var uje=s(W9);ITe=n(uje,"STRONG",{});var ykt=s(ITe);z4r=r(ykt,"opt"),ykt.forEach(t),Q4r=r(uje," \u2014 "),qJ=n(uje,"A",{href:!0});var xkt=s(qJ);W4r=r(xkt,"TFOPTForCausalLM"),xkt.forEach(t),H4r=r(uje," (OPT model)"),uje.forEach(t),U4r=i(Ce),H9=n(Ce,"LI",{});var bje=s(H9);qTe=n(bje,"STRONG",{});var $kt=s(qTe);J4r=r($kt,"rembert"),$kt.forEach(t),Y4r=r(bje," \u2014 "),jJ=n(bje,"A",{href:!0});var kkt=s(jJ);K4r=r(kkt,"TFRemBertForCausalLM"),kkt.forEach(t),Z4r=r(bje," (RemBERT model)"),bje.forEach(t),eEr=i(Ce),U9=n(Ce,"LI",{});var vje=s(U9);jTe=n(vje,"STRONG",{});var Skt=s(jTe);oEr=r(Skt,"roberta"),Skt.forEach(t),rEr=r(vje," \u2014 "),DJ=n(vje,"A",{href:!0});var Rkt=s(DJ);tEr=r(Rkt,"TFRobertaForCausalLM"),Rkt.forEach(t),aEr=r(vje," (RoBERTa model)"),vje.forEach(t),nEr=i(Ce),J9=n(Ce,"LI",{});var Fje=s(J9);DTe=n(Fje,"STRONG",{});var Pkt=s(DTe);sEr=r(Pkt,"roformer"),Pkt.forEach(t),lEr=r(Fje," \u2014 "),GJ=n(Fje,"A",{href:!0});var Bkt=s(GJ);iEr=r(Bkt,"TFRoFormerForCausalLM"),Bkt.forEach(t),dEr=r(Fje," (RoFormer model)"),Fje.forEach(t),cEr=i(Ce),Y9=n(Ce,"LI",{});var Tje=s(Y9);GTe=n(Tje,"STRONG",{});var Nkt=s(GTe);fEr=r(Nkt,"transfo-xl"),Nkt.forEach(t),mEr=r(Tje," \u2014 "),OJ=n(Tje,"A",{href:!0});var Ikt=s(OJ);gEr=r(Ikt,"TFTransfoXLLMHeadModel"),Ikt.forEach(t),hEr=r(Tje," (Transformer-XL model)"),Tje.forEach(t),pEr=i(Ce),K9=n(Ce,"LI",{});var Mje=s(K9);OTe=n(Mje,"STRONG",{});var qkt=s(OTe);_Er=r(qkt,"xlm"),qkt.forEach(t),uEr=r(Mje," \u2014 "),VJ=n(Mje,"A",{href:!0});var jkt=s(VJ);bEr=r(jkt,"TFXLMWithLMHeadModel"),jkt.forEach(t),vEr=r(Mje," (XLM model)"),Mje.forEach(t),FEr=i(Ce),Z9=n(Ce,"LI",{});var Eje=s(Z9);VTe=n(Eje,"STRONG",{});var Dkt=s(VTe);TEr=r(Dkt,"xlnet"),Dkt.forEach(t),MEr=r(Eje," \u2014 "),XJ=n(Eje,"A",{href:!0});var Gkt=s(XJ);EEr=r(Gkt,"TFXLNetLMHeadModel"),Gkt.forEach(t),CEr=r(Eje," (XLNet model)"),Eje.forEach(t),Ce.forEach(t),wEr=i(Rl),T(eM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),oze=i(f),hc=n(f,"H2",{class:!0});var dWe=s(hc);oM=n(dWe,"A",{id:!0,class:!0,href:!0});var Okt=s(oM);XTe=n(Okt,"SPAN",{});var Vkt=s(XTe);T(tx.$$.fragment,Vkt),Vkt.forEach(t),Okt.forEach(t),AEr=i(dWe),zTe=n(dWe,"SPAN",{});var Xkt=s(zTe);LEr=r(Xkt,"TFAutoModelForImageClassification"),Xkt.forEach(t),dWe.forEach(t),rze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(ax.$$.fragment,Pl),yEr=i(Pl),pc=n(Pl,"P",{});var Ate=s(pc);xEr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=n(Ate,"A",{href:!0});var zkt=s(zJ);$Er=r(zkt,"from_pretrained()"),zkt.forEach(t),kEr=r(Ate," class method or the "),QJ=n(Ate,"A",{href:!0});var Qkt=s(QJ);SEr=r(Qkt,"from_config()"),Qkt.forEach(t),REr=r(Ate,` class
method.`),Ate.forEach(t),PEr=i(Pl),nx=n(Pl,"P",{});var cWe=s(nx);BEr=r(cWe,"This class cannot be instantiated directly using "),QTe=n(cWe,"CODE",{});var Wkt=s(QTe);NEr=r(Wkt,"__init__()"),Wkt.forEach(t),IEr=r(cWe," (throws an error)."),cWe.forEach(t),qEr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var s6=s(Bt);T(sx.$$.fragment,s6),jEr=i(s6),WTe=n(s6,"P",{});var Hkt=s(WTe);DEr=r(Hkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hkt.forEach(t),GEr=i(s6),_c=n(s6,"P",{});var Lte=s(_c);OEr=r(Lte,`Note:
Loading a model from its configuration file does `),HTe=n(Lte,"STRONG",{});var Ukt=s(HTe);VEr=r(Ukt,"not"),Ukt.forEach(t),XEr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Lte,"A",{href:!0});var Jkt=s(WJ);zEr=r(Jkt,"from_pretrained()"),Jkt.forEach(t),QEr=r(Lte," to load the model weights."),Lte.forEach(t),WEr=i(s6),T(rM.$$.fragment,s6),s6.forEach(t),HEr=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(lx.$$.fragment,Bl),UEr=i(Bl),UTe=n(Bl,"P",{});var Ykt=s(UTe);JEr=r(Ykt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ykt.forEach(t),YEr=i(Bl),cn=n(Bl,"P",{});var l6=s(cn);KEr=r(l6,"The model class to instantiate is selected based on the "),JTe=n(l6,"CODE",{});var Kkt=s(JTe);ZEr=r(Kkt,"model_type"),Kkt.forEach(t),eCr=r(l6,` property of the config object (either
passed as an argument or loaded from `),YTe=n(l6,"CODE",{});var Zkt=s(YTe);oCr=r(Zkt,"pretrained_model_name_or_path"),Zkt.forEach(t),rCr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(l6,"CODE",{});var eSt=s(KTe);tCr=r(eSt,"pretrained_model_name_or_path"),eSt.forEach(t),aCr=r(l6,":"),l6.forEach(t),nCr=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);tM=n(ka,"LI",{});var Cje=s(tM);ZTe=n(Cje,"STRONG",{});var oSt=s(ZTe);sCr=r(oSt,"convnext"),oSt.forEach(t),lCr=r(Cje," \u2014 "),HJ=n(Cje,"A",{href:!0});var rSt=s(HJ);iCr=r(rSt,"TFConvNextForImageClassification"),rSt.forEach(t),dCr=r(Cje," (ConvNeXT model)"),Cje.forEach(t),cCr=i(ka),aM=n(ka,"LI",{});var wje=s(aM);e8e=n(wje,"STRONG",{});var tSt=s(e8e);fCr=r(tSt,"data2vec-vision"),tSt.forEach(t),mCr=r(wje," \u2014 "),UJ=n(wje,"A",{href:!0});var aSt=s(UJ);gCr=r(aSt,"TFData2VecVisionForImageClassification"),aSt.forEach(t),hCr=r(wje," (Data2VecVision model)"),wje.forEach(t),pCr=i(ka),nM=n(ka,"LI",{});var Aje=s(nM);o8e=n(Aje,"STRONG",{});var nSt=s(o8e);_Cr=r(nSt,"regnet"),nSt.forEach(t),uCr=r(Aje," \u2014 "),JJ=n(Aje,"A",{href:!0});var sSt=s(JJ);bCr=r(sSt,"TFRegNetForImageClassification"),sSt.forEach(t),vCr=r(Aje," (RegNet model)"),Aje.forEach(t),FCr=i(ka),sM=n(ka,"LI",{});var Lje=s(sM);r8e=n(Lje,"STRONG",{});var lSt=s(r8e);TCr=r(lSt,"resnet"),lSt.forEach(t),MCr=r(Lje," \u2014 "),YJ=n(Lje,"A",{href:!0});var iSt=s(YJ);ECr=r(iSt,"TFResNetForImageClassification"),iSt.forEach(t),CCr=r(Lje," (ResNet model)"),Lje.forEach(t),wCr=i(ka),lM=n(ka,"LI",{});var yje=s(lM);t8e=n(yje,"STRONG",{});var dSt=s(t8e);ACr=r(dSt,"swin"),dSt.forEach(t),LCr=r(yje," \u2014 "),KJ=n(yje,"A",{href:!0});var cSt=s(KJ);yCr=r(cSt,"TFSwinForImageClassification"),cSt.forEach(t),xCr=r(yje," (Swin Transformer model)"),yje.forEach(t),$Cr=i(ka),iM=n(ka,"LI",{});var xje=s(iM);a8e=n(xje,"STRONG",{});var fSt=s(a8e);kCr=r(fSt,"vit"),fSt.forEach(t),SCr=r(xje," \u2014 "),ZJ=n(xje,"A",{href:!0});var mSt=s(ZJ);RCr=r(mSt,"TFViTForImageClassification"),mSt.forEach(t),PCr=r(xje," (ViT model)"),xje.forEach(t),ka.forEach(t),BCr=i(Bl),T(dM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),tze=i(f),uc=n(f,"H2",{class:!0});var fWe=s(uc);cM=n(fWe,"A",{id:!0,class:!0,href:!0});var gSt=s(cM);n8e=n(gSt,"SPAN",{});var hSt=s(n8e);T(ix.$$.fragment,hSt),hSt.forEach(t),gSt.forEach(t),NCr=i(fWe),s8e=n(fWe,"SPAN",{});var pSt=s(s8e);ICr=r(pSt,"TFAutoModelForMaskedLM"),pSt.forEach(t),fWe.forEach(t),aze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(dx.$$.fragment,Nl),qCr=i(Nl),bc=n(Nl,"P",{});var yte=s(bc);jCr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=n(yte,"A",{href:!0});var _St=s(eY);DCr=r(_St,"from_pretrained()"),_St.forEach(t),GCr=r(yte," class method or the "),oY=n(yte,"A",{href:!0});var uSt=s(oY);OCr=r(uSt,"from_config()"),uSt.forEach(t),VCr=r(yte,` class
method.`),yte.forEach(t),XCr=i(Nl),cx=n(Nl,"P",{});var mWe=s(cx);zCr=r(mWe,"This class cannot be instantiated directly using "),l8e=n(mWe,"CODE",{});var bSt=s(l8e);QCr=r(bSt,"__init__()"),bSt.forEach(t),WCr=r(mWe," (throws an error)."),mWe.forEach(t),HCr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var i6=s(Nt);T(fx.$$.fragment,i6),UCr=i(i6),i8e=n(i6,"P",{});var vSt=s(i8e);JCr=r(vSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vSt.forEach(t),YCr=i(i6),vc=n(i6,"P",{});var xte=s(vc);KCr=r(xte,`Note:
Loading a model from its configuration file does `),d8e=n(xte,"STRONG",{});var FSt=s(d8e);ZCr=r(FSt,"not"),FSt.forEach(t),e3r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(xte,"A",{href:!0});var TSt=s(rY);o3r=r(TSt,"from_pretrained()"),TSt.forEach(t),r3r=r(xte," to load the model weights."),xte.forEach(t),t3r=i(i6),T(fM.$$.fragment,i6),i6.forEach(t),a3r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var Il=s(Rr);T(mx.$$.fragment,Il),n3r=i(Il),c8e=n(Il,"P",{});var MSt=s(c8e);s3r=r(MSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MSt.forEach(t),l3r=i(Il),fn=n(Il,"P",{});var d6=s(fn);i3r=r(d6,"The model class to instantiate is selected based on the "),f8e=n(d6,"CODE",{});var ESt=s(f8e);d3r=r(ESt,"model_type"),ESt.forEach(t),c3r=r(d6,` property of the config object (either
passed as an argument or loaded from `),m8e=n(d6,"CODE",{});var CSt=s(m8e);f3r=r(CSt,"pretrained_model_name_or_path"),CSt.forEach(t),m3r=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(d6,"CODE",{});var wSt=s(g8e);g3r=r(wSt,"pretrained_model_name_or_path"),wSt.forEach(t),h3r=r(d6,":"),d6.forEach(t),p3r=i(Il),ie=n(Il,"UL",{});var fe=s(ie);mM=n(fe,"LI",{});var $je=s(mM);h8e=n($je,"STRONG",{});var ASt=s(h8e);_3r=r(ASt,"albert"),ASt.forEach(t),u3r=r($je," \u2014 "),tY=n($je,"A",{href:!0});var LSt=s(tY);b3r=r(LSt,"TFAlbertForMaskedLM"),LSt.forEach(t),v3r=r($je," (ALBERT model)"),$je.forEach(t),F3r=i(fe),gM=n(fe,"LI",{});var kje=s(gM);p8e=n(kje,"STRONG",{});var ySt=s(p8e);T3r=r(ySt,"bert"),ySt.forEach(t),M3r=r(kje," \u2014 "),aY=n(kje,"A",{href:!0});var xSt=s(aY);E3r=r(xSt,"TFBertForMaskedLM"),xSt.forEach(t),C3r=r(kje," (BERT model)"),kje.forEach(t),w3r=i(fe),hM=n(fe,"LI",{});var Sje=s(hM);_8e=n(Sje,"STRONG",{});var $St=s(_8e);A3r=r($St,"camembert"),$St.forEach(t),L3r=r(Sje," \u2014 "),nY=n(Sje,"A",{href:!0});var kSt=s(nY);y3r=r(kSt,"TFCamembertForMaskedLM"),kSt.forEach(t),x3r=r(Sje," (CamemBERT model)"),Sje.forEach(t),$3r=i(fe),pM=n(fe,"LI",{});var Rje=s(pM);u8e=n(Rje,"STRONG",{});var SSt=s(u8e);k3r=r(SSt,"convbert"),SSt.forEach(t),S3r=r(Rje," \u2014 "),sY=n(Rje,"A",{href:!0});var RSt=s(sY);R3r=r(RSt,"TFConvBertForMaskedLM"),RSt.forEach(t),P3r=r(Rje," (ConvBERT model)"),Rje.forEach(t),B3r=i(fe),_M=n(fe,"LI",{});var Pje=s(_M);b8e=n(Pje,"STRONG",{});var PSt=s(b8e);N3r=r(PSt,"deberta"),PSt.forEach(t),I3r=r(Pje," \u2014 "),lY=n(Pje,"A",{href:!0});var BSt=s(lY);q3r=r(BSt,"TFDebertaForMaskedLM"),BSt.forEach(t),j3r=r(Pje," (DeBERTa model)"),Pje.forEach(t),D3r=i(fe),uM=n(fe,"LI",{});var Bje=s(uM);v8e=n(Bje,"STRONG",{});var NSt=s(v8e);G3r=r(NSt,"deberta-v2"),NSt.forEach(t),O3r=r(Bje," \u2014 "),iY=n(Bje,"A",{href:!0});var ISt=s(iY);V3r=r(ISt,"TFDebertaV2ForMaskedLM"),ISt.forEach(t),X3r=r(Bje," (DeBERTa-v2 model)"),Bje.forEach(t),z3r=i(fe),bM=n(fe,"LI",{});var Nje=s(bM);F8e=n(Nje,"STRONG",{});var qSt=s(F8e);Q3r=r(qSt,"distilbert"),qSt.forEach(t),W3r=r(Nje," \u2014 "),dY=n(Nje,"A",{href:!0});var jSt=s(dY);H3r=r(jSt,"TFDistilBertForMaskedLM"),jSt.forEach(t),U3r=r(Nje," (DistilBERT model)"),Nje.forEach(t),J3r=i(fe),vM=n(fe,"LI",{});var Ije=s(vM);T8e=n(Ije,"STRONG",{});var DSt=s(T8e);Y3r=r(DSt,"electra"),DSt.forEach(t),K3r=r(Ije," \u2014 "),cY=n(Ije,"A",{href:!0});var GSt=s(cY);Z3r=r(GSt,"TFElectraForMaskedLM"),GSt.forEach(t),ewr=r(Ije," (ELECTRA model)"),Ije.forEach(t),owr=i(fe),FM=n(fe,"LI",{});var qje=s(FM);M8e=n(qje,"STRONG",{});var OSt=s(M8e);rwr=r(OSt,"flaubert"),OSt.forEach(t),twr=r(qje," \u2014 "),fY=n(qje,"A",{href:!0});var VSt=s(fY);awr=r(VSt,"TFFlaubertWithLMHeadModel"),VSt.forEach(t),nwr=r(qje," (FlauBERT model)"),qje.forEach(t),swr=i(fe),TM=n(fe,"LI",{});var jje=s(TM);E8e=n(jje,"STRONG",{});var XSt=s(E8e);lwr=r(XSt,"funnel"),XSt.forEach(t),iwr=r(jje," \u2014 "),mY=n(jje,"A",{href:!0});var zSt=s(mY);dwr=r(zSt,"TFFunnelForMaskedLM"),zSt.forEach(t),cwr=r(jje," (Funnel Transformer model)"),jje.forEach(t),fwr=i(fe),MM=n(fe,"LI",{});var Dje=s(MM);C8e=n(Dje,"STRONG",{});var QSt=s(C8e);mwr=r(QSt,"layoutlm"),QSt.forEach(t),gwr=r(Dje," \u2014 "),gY=n(Dje,"A",{href:!0});var WSt=s(gY);hwr=r(WSt,"TFLayoutLMForMaskedLM"),WSt.forEach(t),pwr=r(Dje," (LayoutLM model)"),Dje.forEach(t),_wr=i(fe),EM=n(fe,"LI",{});var Gje=s(EM);w8e=n(Gje,"STRONG",{});var HSt=s(w8e);uwr=r(HSt,"longformer"),HSt.forEach(t),bwr=r(Gje," \u2014 "),hY=n(Gje,"A",{href:!0});var USt=s(hY);vwr=r(USt,"TFLongformerForMaskedLM"),USt.forEach(t),Fwr=r(Gje," (Longformer model)"),Gje.forEach(t),Twr=i(fe),CM=n(fe,"LI",{});var Oje=s(CM);A8e=n(Oje,"STRONG",{});var JSt=s(A8e);Mwr=r(JSt,"mobilebert"),JSt.forEach(t),Ewr=r(Oje," \u2014 "),pY=n(Oje,"A",{href:!0});var YSt=s(pY);Cwr=r(YSt,"TFMobileBertForMaskedLM"),YSt.forEach(t),wwr=r(Oje," (MobileBERT model)"),Oje.forEach(t),Awr=i(fe),wM=n(fe,"LI",{});var Vje=s(wM);L8e=n(Vje,"STRONG",{});var KSt=s(L8e);Lwr=r(KSt,"mpnet"),KSt.forEach(t),ywr=r(Vje," \u2014 "),_Y=n(Vje,"A",{href:!0});var ZSt=s(_Y);xwr=r(ZSt,"TFMPNetForMaskedLM"),ZSt.forEach(t),$wr=r(Vje," (MPNet model)"),Vje.forEach(t),kwr=i(fe),AM=n(fe,"LI",{});var Xje=s(AM);y8e=n(Xje,"STRONG",{});var eRt=s(y8e);Swr=r(eRt,"rembert"),eRt.forEach(t),Rwr=r(Xje," \u2014 "),uY=n(Xje,"A",{href:!0});var oRt=s(uY);Pwr=r(oRt,"TFRemBertForMaskedLM"),oRt.forEach(t),Bwr=r(Xje," (RemBERT model)"),Xje.forEach(t),Nwr=i(fe),LM=n(fe,"LI",{});var zje=s(LM);x8e=n(zje,"STRONG",{});var rRt=s(x8e);Iwr=r(rRt,"roberta"),rRt.forEach(t),qwr=r(zje," \u2014 "),bY=n(zje,"A",{href:!0});var tRt=s(bY);jwr=r(tRt,"TFRobertaForMaskedLM"),tRt.forEach(t),Dwr=r(zje," (RoBERTa model)"),zje.forEach(t),Gwr=i(fe),yM=n(fe,"LI",{});var Qje=s(yM);$8e=n(Qje,"STRONG",{});var aRt=s($8e);Owr=r(aRt,"roformer"),aRt.forEach(t),Vwr=r(Qje," \u2014 "),vY=n(Qje,"A",{href:!0});var nRt=s(vY);Xwr=r(nRt,"TFRoFormerForMaskedLM"),nRt.forEach(t),zwr=r(Qje," (RoFormer model)"),Qje.forEach(t),Qwr=i(fe),xM=n(fe,"LI",{});var Wje=s(xM);k8e=n(Wje,"STRONG",{});var sRt=s(k8e);Wwr=r(sRt,"tapas"),sRt.forEach(t),Hwr=r(Wje," \u2014 "),FY=n(Wje,"A",{href:!0});var lRt=s(FY);Uwr=r(lRt,"TFTapasForMaskedLM"),lRt.forEach(t),Jwr=r(Wje," (TAPAS model)"),Wje.forEach(t),Ywr=i(fe),$M=n(fe,"LI",{});var Hje=s($M);S8e=n(Hje,"STRONG",{});var iRt=s(S8e);Kwr=r(iRt,"xlm"),iRt.forEach(t),Zwr=r(Hje," \u2014 "),TY=n(Hje,"A",{href:!0});var dRt=s(TY);eAr=r(dRt,"TFXLMWithLMHeadModel"),dRt.forEach(t),oAr=r(Hje," (XLM model)"),Hje.forEach(t),rAr=i(fe),kM=n(fe,"LI",{});var Uje=s(kM);R8e=n(Uje,"STRONG",{});var cRt=s(R8e);tAr=r(cRt,"xlm-roberta"),cRt.forEach(t),aAr=r(Uje," \u2014 "),MY=n(Uje,"A",{href:!0});var fRt=s(MY);nAr=r(fRt,"TFXLMRobertaForMaskedLM"),fRt.forEach(t),sAr=r(Uje," (XLM-RoBERTa model)"),Uje.forEach(t),fe.forEach(t),lAr=i(Il),T(SM.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),nze=i(f),Fc=n(f,"H2",{class:!0});var gWe=s(Fc);RM=n(gWe,"A",{id:!0,class:!0,href:!0});var mRt=s(RM);P8e=n(mRt,"SPAN",{});var gRt=s(P8e);T(gx.$$.fragment,gRt),gRt.forEach(t),mRt.forEach(t),iAr=i(gWe),B8e=n(gWe,"SPAN",{});var hRt=s(B8e);dAr=r(hRt,"TFAutoModelForSeq2SeqLM"),hRt.forEach(t),gWe.forEach(t),sze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(hx.$$.fragment,ql),cAr=i(ql),Tc=n(ql,"P",{});var $te=s(Tc);fAr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n($te,"A",{href:!0});var pRt=s(EY);mAr=r(pRt,"from_pretrained()"),pRt.forEach(t),gAr=r($te," class method or the "),CY=n($te,"A",{href:!0});var _Rt=s(CY);hAr=r(_Rt,"from_config()"),_Rt.forEach(t),pAr=r($te,` class
method.`),$te.forEach(t),_Ar=i(ql),px=n(ql,"P",{});var hWe=s(px);uAr=r(hWe,"This class cannot be instantiated directly using "),N8e=n(hWe,"CODE",{});var uRt=s(N8e);bAr=r(uRt,"__init__()"),uRt.forEach(t),vAr=r(hWe," (throws an error)."),hWe.forEach(t),FAr=i(ql),It=n(ql,"DIV",{class:!0});var c6=s(It);T(_x.$$.fragment,c6),TAr=i(c6),I8e=n(c6,"P",{});var bRt=s(I8e);MAr=r(bRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bRt.forEach(t),EAr=i(c6),Mc=n(c6,"P",{});var kte=s(Mc);CAr=r(kte,`Note:
Loading a model from its configuration file does `),q8e=n(kte,"STRONG",{});var vRt=s(q8e);wAr=r(vRt,"not"),vRt.forEach(t),AAr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(kte,"A",{href:!0});var FRt=s(wY);LAr=r(FRt,"from_pretrained()"),FRt.forEach(t),yAr=r(kte," to load the model weights."),kte.forEach(t),xAr=i(c6),T(PM.$$.fragment,c6),c6.forEach(t),$Ar=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(ux.$$.fragment,jl),kAr=i(jl),j8e=n(jl,"P",{});var TRt=s(j8e);SAr=r(TRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TRt.forEach(t),RAr=i(jl),mn=n(jl,"P",{});var f6=s(mn);PAr=r(f6,"The model class to instantiate is selected based on the "),D8e=n(f6,"CODE",{});var MRt=s(D8e);BAr=r(MRt,"model_type"),MRt.forEach(t),NAr=r(f6,` property of the config object (either
passed as an argument or loaded from `),G8e=n(f6,"CODE",{});var ERt=s(G8e);IAr=r(ERt,"pretrained_model_name_or_path"),ERt.forEach(t),qAr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O8e=n(f6,"CODE",{});var CRt=s(O8e);jAr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),DAr=r(f6,":"),f6.forEach(t),GAr=i(jl),ye=n(jl,"UL",{});var Ne=s(ye);BM=n(Ne,"LI",{});var Jje=s(BM);V8e=n(Jje,"STRONG",{});var wRt=s(V8e);OAr=r(wRt,"bart"),wRt.forEach(t),VAr=r(Jje," \u2014 "),AY=n(Jje,"A",{href:!0});var ARt=s(AY);XAr=r(ARt,"TFBartForConditionalGeneration"),ARt.forEach(t),zAr=r(Jje," (BART model)"),Jje.forEach(t),QAr=i(Ne),NM=n(Ne,"LI",{});var Yje=s(NM);X8e=n(Yje,"STRONG",{});var LRt=s(X8e);WAr=r(LRt,"blenderbot"),LRt.forEach(t),HAr=r(Yje," \u2014 "),LY=n(Yje,"A",{href:!0});var yRt=s(LY);UAr=r(yRt,"TFBlenderbotForConditionalGeneration"),yRt.forEach(t),JAr=r(Yje," (Blenderbot model)"),Yje.forEach(t),YAr=i(Ne),IM=n(Ne,"LI",{});var Kje=s(IM);z8e=n(Kje,"STRONG",{});var xRt=s(z8e);KAr=r(xRt,"blenderbot-small"),xRt.forEach(t),ZAr=r(Kje," \u2014 "),yY=n(Kje,"A",{href:!0});var $Rt=s(yY);e6r=r($Rt,"TFBlenderbotSmallForConditionalGeneration"),$Rt.forEach(t),o6r=r(Kje," (BlenderbotSmall model)"),Kje.forEach(t),r6r=i(Ne),qM=n(Ne,"LI",{});var Zje=s(qM);Q8e=n(Zje,"STRONG",{});var kRt=s(Q8e);t6r=r(kRt,"encoder-decoder"),kRt.forEach(t),a6r=r(Zje," \u2014 "),xY=n(Zje,"A",{href:!0});var SRt=s(xY);n6r=r(SRt,"TFEncoderDecoderModel"),SRt.forEach(t),s6r=r(Zje," (Encoder decoder model)"),Zje.forEach(t),l6r=i(Ne),jM=n(Ne,"LI",{});var eDe=s(jM);W8e=n(eDe,"STRONG",{});var RRt=s(W8e);i6r=r(RRt,"led"),RRt.forEach(t),d6r=r(eDe," \u2014 "),$Y=n(eDe,"A",{href:!0});var PRt=s($Y);c6r=r(PRt,"TFLEDForConditionalGeneration"),PRt.forEach(t),f6r=r(eDe," (LED model)"),eDe.forEach(t),m6r=i(Ne),DM=n(Ne,"LI",{});var oDe=s(DM);H8e=n(oDe,"STRONG",{});var BRt=s(H8e);g6r=r(BRt,"marian"),BRt.forEach(t),h6r=r(oDe," \u2014 "),kY=n(oDe,"A",{href:!0});var NRt=s(kY);p6r=r(NRt,"TFMarianMTModel"),NRt.forEach(t),_6r=r(oDe," (Marian model)"),oDe.forEach(t),u6r=i(Ne),GM=n(Ne,"LI",{});var rDe=s(GM);U8e=n(rDe,"STRONG",{});var IRt=s(U8e);b6r=r(IRt,"mbart"),IRt.forEach(t),v6r=r(rDe," \u2014 "),SY=n(rDe,"A",{href:!0});var qRt=s(SY);F6r=r(qRt,"TFMBartForConditionalGeneration"),qRt.forEach(t),T6r=r(rDe," (mBART model)"),rDe.forEach(t),M6r=i(Ne),OM=n(Ne,"LI",{});var tDe=s(OM);J8e=n(tDe,"STRONG",{});var jRt=s(J8e);E6r=r(jRt,"mt5"),jRt.forEach(t),C6r=r(tDe," \u2014 "),RY=n(tDe,"A",{href:!0});var DRt=s(RY);w6r=r(DRt,"TFMT5ForConditionalGeneration"),DRt.forEach(t),A6r=r(tDe," (MT5 model)"),tDe.forEach(t),L6r=i(Ne),VM=n(Ne,"LI",{});var aDe=s(VM);Y8e=n(aDe,"STRONG",{});var GRt=s(Y8e);y6r=r(GRt,"pegasus"),GRt.forEach(t),x6r=r(aDe," \u2014 "),PY=n(aDe,"A",{href:!0});var ORt=s(PY);$6r=r(ORt,"TFPegasusForConditionalGeneration"),ORt.forEach(t),k6r=r(aDe," (Pegasus model)"),aDe.forEach(t),S6r=i(Ne),XM=n(Ne,"LI",{});var nDe=s(XM);K8e=n(nDe,"STRONG",{});var VRt=s(K8e);R6r=r(VRt,"t5"),VRt.forEach(t),P6r=r(nDe," \u2014 "),BY=n(nDe,"A",{href:!0});var XRt=s(BY);B6r=r(XRt,"TFT5ForConditionalGeneration"),XRt.forEach(t),N6r=r(nDe," (T5 model)"),nDe.forEach(t),Ne.forEach(t),I6r=i(jl),T(zM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),lze=i(f),Ec=n(f,"H2",{class:!0});var pWe=s(Ec);QM=n(pWe,"A",{id:!0,class:!0,href:!0});var zRt=s(QM);Z8e=n(zRt,"SPAN",{});var QRt=s(Z8e);T(bx.$$.fragment,QRt),QRt.forEach(t),zRt.forEach(t),q6r=i(pWe),e9e=n(pWe,"SPAN",{});var WRt=s(e9e);j6r=r(WRt,"TFAutoModelForSequenceClassification"),WRt.forEach(t),pWe.forEach(t),ize=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(vx.$$.fragment,Dl),D6r=i(Dl),Cc=n(Dl,"P",{});var Ste=s(Cc);G6r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NY=n(Ste,"A",{href:!0});var HRt=s(NY);O6r=r(HRt,"from_pretrained()"),HRt.forEach(t),V6r=r(Ste," class method or the "),IY=n(Ste,"A",{href:!0});var URt=s(IY);X6r=r(URt,"from_config()"),URt.forEach(t),z6r=r(Ste,` class
method.`),Ste.forEach(t),Q6r=i(Dl),Fx=n(Dl,"P",{});var _We=s(Fx);W6r=r(_We,"This class cannot be instantiated directly using "),o9e=n(_We,"CODE",{});var JRt=s(o9e);H6r=r(JRt,"__init__()"),JRt.forEach(t),U6r=r(_We," (throws an error)."),_We.forEach(t),J6r=i(Dl),qt=n(Dl,"DIV",{class:!0});var m6=s(qt);T(Tx.$$.fragment,m6),Y6r=i(m6),r9e=n(m6,"P",{});var YRt=s(r9e);K6r=r(YRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YRt.forEach(t),Z6r=i(m6),wc=n(m6,"P",{});var Rte=s(wc);e7r=r(Rte,`Note:
Loading a model from its configuration file does `),t9e=n(Rte,"STRONG",{});var KRt=s(t9e);o7r=r(KRt,"not"),KRt.forEach(t),r7r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Rte,"A",{href:!0});var ZRt=s(qY);t7r=r(ZRt,"from_pretrained()"),ZRt.forEach(t),a7r=r(Rte," to load the model weights."),Rte.forEach(t),n7r=i(m6),T(WM.$$.fragment,m6),m6.forEach(t),s7r=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Mx.$$.fragment,Gl),l7r=i(Gl),a9e=n(Gl,"P",{});var ePt=s(a9e);i7r=r(ePt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ePt.forEach(t),d7r=i(Gl),gn=n(Gl,"P",{});var g6=s(gn);c7r=r(g6,"The model class to instantiate is selected based on the "),n9e=n(g6,"CODE",{});var oPt=s(n9e);f7r=r(oPt,"model_type"),oPt.forEach(t),m7r=r(g6,` property of the config object (either
passed as an argument or loaded from `),s9e=n(g6,"CODE",{});var rPt=s(s9e);g7r=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),h7r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=n(g6,"CODE",{});var tPt=s(l9e);p7r=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),_7r=r(g6,":"),g6.forEach(t),u7r=i(Gl),te=n(Gl,"UL",{});var ne=s(te);HM=n(ne,"LI",{});var sDe=s(HM);i9e=n(sDe,"STRONG",{});var aPt=s(i9e);b7r=r(aPt,"albert"),aPt.forEach(t),v7r=r(sDe," \u2014 "),jY=n(sDe,"A",{href:!0});var nPt=s(jY);F7r=r(nPt,"TFAlbertForSequenceClassification"),nPt.forEach(t),T7r=r(sDe," (ALBERT model)"),sDe.forEach(t),M7r=i(ne),UM=n(ne,"LI",{});var lDe=s(UM);d9e=n(lDe,"STRONG",{});var sPt=s(d9e);E7r=r(sPt,"bert"),sPt.forEach(t),C7r=r(lDe," \u2014 "),DY=n(lDe,"A",{href:!0});var lPt=s(DY);w7r=r(lPt,"TFBertForSequenceClassification"),lPt.forEach(t),A7r=r(lDe," (BERT model)"),lDe.forEach(t),L7r=i(ne),JM=n(ne,"LI",{});var iDe=s(JM);c9e=n(iDe,"STRONG",{});var iPt=s(c9e);y7r=r(iPt,"camembert"),iPt.forEach(t),x7r=r(iDe," \u2014 "),GY=n(iDe,"A",{href:!0});var dPt=s(GY);$7r=r(dPt,"TFCamembertForSequenceClassification"),dPt.forEach(t),k7r=r(iDe," (CamemBERT model)"),iDe.forEach(t),S7r=i(ne),YM=n(ne,"LI",{});var dDe=s(YM);f9e=n(dDe,"STRONG",{});var cPt=s(f9e);R7r=r(cPt,"convbert"),cPt.forEach(t),P7r=r(dDe," \u2014 "),OY=n(dDe,"A",{href:!0});var fPt=s(OY);B7r=r(fPt,"TFConvBertForSequenceClassification"),fPt.forEach(t),N7r=r(dDe," (ConvBERT model)"),dDe.forEach(t),I7r=i(ne),KM=n(ne,"LI",{});var cDe=s(KM);m9e=n(cDe,"STRONG",{});var mPt=s(m9e);q7r=r(mPt,"ctrl"),mPt.forEach(t),j7r=r(cDe," \u2014 "),VY=n(cDe,"A",{href:!0});var gPt=s(VY);D7r=r(gPt,"TFCTRLForSequenceClassification"),gPt.forEach(t),G7r=r(cDe," (CTRL model)"),cDe.forEach(t),O7r=i(ne),ZM=n(ne,"LI",{});var fDe=s(ZM);g9e=n(fDe,"STRONG",{});var hPt=s(g9e);V7r=r(hPt,"deberta"),hPt.forEach(t),X7r=r(fDe," \u2014 "),XY=n(fDe,"A",{href:!0});var pPt=s(XY);z7r=r(pPt,"TFDebertaForSequenceClassification"),pPt.forEach(t),Q7r=r(fDe," (DeBERTa model)"),fDe.forEach(t),W7r=i(ne),e4=n(ne,"LI",{});var mDe=s(e4);h9e=n(mDe,"STRONG",{});var _Pt=s(h9e);H7r=r(_Pt,"deberta-v2"),_Pt.forEach(t),U7r=r(mDe," \u2014 "),zY=n(mDe,"A",{href:!0});var uPt=s(zY);J7r=r(uPt,"TFDebertaV2ForSequenceClassification"),uPt.forEach(t),Y7r=r(mDe," (DeBERTa-v2 model)"),mDe.forEach(t),K7r=i(ne),o4=n(ne,"LI",{});var gDe=s(o4);p9e=n(gDe,"STRONG",{});var bPt=s(p9e);Z7r=r(bPt,"distilbert"),bPt.forEach(t),eLr=r(gDe," \u2014 "),QY=n(gDe,"A",{href:!0});var vPt=s(QY);oLr=r(vPt,"TFDistilBertForSequenceClassification"),vPt.forEach(t),rLr=r(gDe," (DistilBERT model)"),gDe.forEach(t),tLr=i(ne),r4=n(ne,"LI",{});var hDe=s(r4);_9e=n(hDe,"STRONG",{});var FPt=s(_9e);aLr=r(FPt,"electra"),FPt.forEach(t),nLr=r(hDe," \u2014 "),WY=n(hDe,"A",{href:!0});var TPt=s(WY);sLr=r(TPt,"TFElectraForSequenceClassification"),TPt.forEach(t),lLr=r(hDe," (ELECTRA model)"),hDe.forEach(t),iLr=i(ne),t4=n(ne,"LI",{});var pDe=s(t4);u9e=n(pDe,"STRONG",{});var MPt=s(u9e);dLr=r(MPt,"flaubert"),MPt.forEach(t),cLr=r(pDe," \u2014 "),HY=n(pDe,"A",{href:!0});var EPt=s(HY);fLr=r(EPt,"TFFlaubertForSequenceClassification"),EPt.forEach(t),mLr=r(pDe," (FlauBERT model)"),pDe.forEach(t),gLr=i(ne),a4=n(ne,"LI",{});var _De=s(a4);b9e=n(_De,"STRONG",{});var CPt=s(b9e);hLr=r(CPt,"funnel"),CPt.forEach(t),pLr=r(_De," \u2014 "),UY=n(_De,"A",{href:!0});var wPt=s(UY);_Lr=r(wPt,"TFFunnelForSequenceClassification"),wPt.forEach(t),uLr=r(_De," (Funnel Transformer model)"),_De.forEach(t),bLr=i(ne),n4=n(ne,"LI",{});var uDe=s(n4);v9e=n(uDe,"STRONG",{});var APt=s(v9e);vLr=r(APt,"gpt2"),APt.forEach(t),FLr=r(uDe," \u2014 "),JY=n(uDe,"A",{href:!0});var LPt=s(JY);TLr=r(LPt,"TFGPT2ForSequenceClassification"),LPt.forEach(t),MLr=r(uDe," (OpenAI GPT-2 model)"),uDe.forEach(t),ELr=i(ne),s4=n(ne,"LI",{});var bDe=s(s4);F9e=n(bDe,"STRONG",{});var yPt=s(F9e);CLr=r(yPt,"gptj"),yPt.forEach(t),wLr=r(bDe," \u2014 "),YY=n(bDe,"A",{href:!0});var xPt=s(YY);ALr=r(xPt,"TFGPTJForSequenceClassification"),xPt.forEach(t),LLr=r(bDe," (GPT-J model)"),bDe.forEach(t),yLr=i(ne),l4=n(ne,"LI",{});var vDe=s(l4);T9e=n(vDe,"STRONG",{});var $Pt=s(T9e);xLr=r($Pt,"layoutlm"),$Pt.forEach(t),$Lr=r(vDe," \u2014 "),KY=n(vDe,"A",{href:!0});var kPt=s(KY);kLr=r(kPt,"TFLayoutLMForSequenceClassification"),kPt.forEach(t),SLr=r(vDe," (LayoutLM model)"),vDe.forEach(t),RLr=i(ne),i4=n(ne,"LI",{});var FDe=s(i4);M9e=n(FDe,"STRONG",{});var SPt=s(M9e);PLr=r(SPt,"longformer"),SPt.forEach(t),BLr=r(FDe," \u2014 "),ZY=n(FDe,"A",{href:!0});var RPt=s(ZY);NLr=r(RPt,"TFLongformerForSequenceClassification"),RPt.forEach(t),ILr=r(FDe," (Longformer model)"),FDe.forEach(t),qLr=i(ne),d4=n(ne,"LI",{});var TDe=s(d4);E9e=n(TDe,"STRONG",{});var PPt=s(E9e);jLr=r(PPt,"mobilebert"),PPt.forEach(t),DLr=r(TDe," \u2014 "),eK=n(TDe,"A",{href:!0});var BPt=s(eK);GLr=r(BPt,"TFMobileBertForSequenceClassification"),BPt.forEach(t),OLr=r(TDe," (MobileBERT model)"),TDe.forEach(t),VLr=i(ne),c4=n(ne,"LI",{});var MDe=s(c4);C9e=n(MDe,"STRONG",{});var NPt=s(C9e);XLr=r(NPt,"mpnet"),NPt.forEach(t),zLr=r(MDe," \u2014 "),oK=n(MDe,"A",{href:!0});var IPt=s(oK);QLr=r(IPt,"TFMPNetForSequenceClassification"),IPt.forEach(t),WLr=r(MDe," (MPNet model)"),MDe.forEach(t),HLr=i(ne),f4=n(ne,"LI",{});var EDe=s(f4);w9e=n(EDe,"STRONG",{});var qPt=s(w9e);ULr=r(qPt,"openai-gpt"),qPt.forEach(t),JLr=r(EDe," \u2014 "),rK=n(EDe,"A",{href:!0});var jPt=s(rK);YLr=r(jPt,"TFOpenAIGPTForSequenceClassification"),jPt.forEach(t),KLr=r(EDe," (OpenAI GPT model)"),EDe.forEach(t),ZLr=i(ne),m4=n(ne,"LI",{});var CDe=s(m4);A9e=n(CDe,"STRONG",{});var DPt=s(A9e);eyr=r(DPt,"rembert"),DPt.forEach(t),oyr=r(CDe," \u2014 "),tK=n(CDe,"A",{href:!0});var GPt=s(tK);ryr=r(GPt,"TFRemBertForSequenceClassification"),GPt.forEach(t),tyr=r(CDe," (RemBERT model)"),CDe.forEach(t),ayr=i(ne),g4=n(ne,"LI",{});var wDe=s(g4);L9e=n(wDe,"STRONG",{});var OPt=s(L9e);nyr=r(OPt,"roberta"),OPt.forEach(t),syr=r(wDe," \u2014 "),aK=n(wDe,"A",{href:!0});var VPt=s(aK);lyr=r(VPt,"TFRobertaForSequenceClassification"),VPt.forEach(t),iyr=r(wDe," (RoBERTa model)"),wDe.forEach(t),dyr=i(ne),h4=n(ne,"LI",{});var ADe=s(h4);y9e=n(ADe,"STRONG",{});var XPt=s(y9e);cyr=r(XPt,"roformer"),XPt.forEach(t),fyr=r(ADe," \u2014 "),nK=n(ADe,"A",{href:!0});var zPt=s(nK);myr=r(zPt,"TFRoFormerForSequenceClassification"),zPt.forEach(t),gyr=r(ADe," (RoFormer model)"),ADe.forEach(t),hyr=i(ne),p4=n(ne,"LI",{});var LDe=s(p4);x9e=n(LDe,"STRONG",{});var QPt=s(x9e);pyr=r(QPt,"tapas"),QPt.forEach(t),_yr=r(LDe," \u2014 "),sK=n(LDe,"A",{href:!0});var WPt=s(sK);uyr=r(WPt,"TFTapasForSequenceClassification"),WPt.forEach(t),byr=r(LDe," (TAPAS model)"),LDe.forEach(t),vyr=i(ne),_4=n(ne,"LI",{});var yDe=s(_4);$9e=n(yDe,"STRONG",{});var HPt=s($9e);Fyr=r(HPt,"transfo-xl"),HPt.forEach(t),Tyr=r(yDe," \u2014 "),lK=n(yDe,"A",{href:!0});var UPt=s(lK);Myr=r(UPt,"TFTransfoXLForSequenceClassification"),UPt.forEach(t),Eyr=r(yDe," (Transformer-XL model)"),yDe.forEach(t),Cyr=i(ne),u4=n(ne,"LI",{});var xDe=s(u4);k9e=n(xDe,"STRONG",{});var JPt=s(k9e);wyr=r(JPt,"xlm"),JPt.forEach(t),Ayr=r(xDe," \u2014 "),iK=n(xDe,"A",{href:!0});var YPt=s(iK);Lyr=r(YPt,"TFXLMForSequenceClassification"),YPt.forEach(t),yyr=r(xDe," (XLM model)"),xDe.forEach(t),xyr=i(ne),b4=n(ne,"LI",{});var $De=s(b4);S9e=n($De,"STRONG",{});var KPt=s(S9e);$yr=r(KPt,"xlm-roberta"),KPt.forEach(t),kyr=r($De," \u2014 "),dK=n($De,"A",{href:!0});var ZPt=s(dK);Syr=r(ZPt,"TFXLMRobertaForSequenceClassification"),ZPt.forEach(t),Ryr=r($De," (XLM-RoBERTa model)"),$De.forEach(t),Pyr=i(ne),v4=n(ne,"LI",{});var kDe=s(v4);R9e=n(kDe,"STRONG",{});var eBt=s(R9e);Byr=r(eBt,"xlnet"),eBt.forEach(t),Nyr=r(kDe," \u2014 "),cK=n(kDe,"A",{href:!0});var oBt=s(cK);Iyr=r(oBt,"TFXLNetForSequenceClassification"),oBt.forEach(t),qyr=r(kDe," (XLNet model)"),kDe.forEach(t),ne.forEach(t),jyr=i(Gl),T(F4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),dze=i(f),Ac=n(f,"H2",{class:!0});var uWe=s(Ac);T4=n(uWe,"A",{id:!0,class:!0,href:!0});var rBt=s(T4);P9e=n(rBt,"SPAN",{});var tBt=s(P9e);T(Ex.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),Dyr=i(uWe),B9e=n(uWe,"SPAN",{});var aBt=s(B9e);Gyr=r(aBt,"TFAutoModelForMultipleChoice"),aBt.forEach(t),uWe.forEach(t),cze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(Cx.$$.fragment,Ol),Oyr=i(Ol),Lc=n(Ol,"P",{});var Pte=s(Lc);Vyr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fK=n(Pte,"A",{href:!0});var nBt=s(fK);Xyr=r(nBt,"from_pretrained()"),nBt.forEach(t),zyr=r(Pte," class method or the "),mK=n(Pte,"A",{href:!0});var sBt=s(mK);Qyr=r(sBt,"from_config()"),sBt.forEach(t),Wyr=r(Pte,` class
method.`),Pte.forEach(t),Hyr=i(Ol),wx=n(Ol,"P",{});var bWe=s(wx);Uyr=r(bWe,"This class cannot be instantiated directly using "),N9e=n(bWe,"CODE",{});var lBt=s(N9e);Jyr=r(lBt,"__init__()"),lBt.forEach(t),Yyr=r(bWe," (throws an error)."),bWe.forEach(t),Kyr=i(Ol),jt=n(Ol,"DIV",{class:!0});var h6=s(jt);T(Ax.$$.fragment,h6),Zyr=i(h6),I9e=n(h6,"P",{});var iBt=s(I9e);exr=r(iBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iBt.forEach(t),oxr=i(h6),yc=n(h6,"P",{});var Bte=s(yc);rxr=r(Bte,`Note:
Loading a model from its configuration file does `),q9e=n(Bte,"STRONG",{});var dBt=s(q9e);txr=r(dBt,"not"),dBt.forEach(t),axr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Bte,"A",{href:!0});var cBt=s(gK);nxr=r(cBt,"from_pretrained()"),cBt.forEach(t),sxr=r(Bte," to load the model weights."),Bte.forEach(t),lxr=i(h6),T(M4.$$.fragment,h6),h6.forEach(t),ixr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(Lx.$$.fragment,Vl),dxr=i(Vl),j9e=n(Vl,"P",{});var fBt=s(j9e);cxr=r(fBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fBt.forEach(t),fxr=i(Vl),hn=n(Vl,"P",{});var p6=s(hn);mxr=r(p6,"The model class to instantiate is selected based on the "),D9e=n(p6,"CODE",{});var mBt=s(D9e);gxr=r(mBt,"model_type"),mBt.forEach(t),hxr=r(p6,` property of the config object (either
passed as an argument or loaded from `),G9e=n(p6,"CODE",{});var gBt=s(G9e);pxr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),_xr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O9e=n(p6,"CODE",{});var hBt=s(O9e);uxr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),bxr=r(p6,":"),p6.forEach(t),vxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);E4=n(Fe,"LI",{});var SDe=s(E4);V9e=n(SDe,"STRONG",{});var pBt=s(V9e);Fxr=r(pBt,"albert"),pBt.forEach(t),Txr=r(SDe," \u2014 "),hK=n(SDe,"A",{href:!0});var _Bt=s(hK);Mxr=r(_Bt,"TFAlbertForMultipleChoice"),_Bt.forEach(t),Exr=r(SDe," (ALBERT model)"),SDe.forEach(t),Cxr=i(Fe),C4=n(Fe,"LI",{});var RDe=s(C4);X9e=n(RDe,"STRONG",{});var uBt=s(X9e);wxr=r(uBt,"bert"),uBt.forEach(t),Axr=r(RDe," \u2014 "),pK=n(RDe,"A",{href:!0});var bBt=s(pK);Lxr=r(bBt,"TFBertForMultipleChoice"),bBt.forEach(t),yxr=r(RDe," (BERT model)"),RDe.forEach(t),xxr=i(Fe),w4=n(Fe,"LI",{});var PDe=s(w4);z9e=n(PDe,"STRONG",{});var vBt=s(z9e);$xr=r(vBt,"camembert"),vBt.forEach(t),kxr=r(PDe," \u2014 "),_K=n(PDe,"A",{href:!0});var FBt=s(_K);Sxr=r(FBt,"TFCamembertForMultipleChoice"),FBt.forEach(t),Rxr=r(PDe," (CamemBERT model)"),PDe.forEach(t),Pxr=i(Fe),A4=n(Fe,"LI",{});var BDe=s(A4);Q9e=n(BDe,"STRONG",{});var TBt=s(Q9e);Bxr=r(TBt,"convbert"),TBt.forEach(t),Nxr=r(BDe," \u2014 "),uK=n(BDe,"A",{href:!0});var MBt=s(uK);Ixr=r(MBt,"TFConvBertForMultipleChoice"),MBt.forEach(t),qxr=r(BDe," (ConvBERT model)"),BDe.forEach(t),jxr=i(Fe),L4=n(Fe,"LI",{});var NDe=s(L4);W9e=n(NDe,"STRONG",{});var EBt=s(W9e);Dxr=r(EBt,"distilbert"),EBt.forEach(t),Gxr=r(NDe," \u2014 "),bK=n(NDe,"A",{href:!0});var CBt=s(bK);Oxr=r(CBt,"TFDistilBertForMultipleChoice"),CBt.forEach(t),Vxr=r(NDe," (DistilBERT model)"),NDe.forEach(t),Xxr=i(Fe),y4=n(Fe,"LI",{});var IDe=s(y4);H9e=n(IDe,"STRONG",{});var wBt=s(H9e);zxr=r(wBt,"electra"),wBt.forEach(t),Qxr=r(IDe," \u2014 "),vK=n(IDe,"A",{href:!0});var ABt=s(vK);Wxr=r(ABt,"TFElectraForMultipleChoice"),ABt.forEach(t),Hxr=r(IDe," (ELECTRA model)"),IDe.forEach(t),Uxr=i(Fe),x4=n(Fe,"LI",{});var qDe=s(x4);U9e=n(qDe,"STRONG",{});var LBt=s(U9e);Jxr=r(LBt,"flaubert"),LBt.forEach(t),Yxr=r(qDe," \u2014 "),FK=n(qDe,"A",{href:!0});var yBt=s(FK);Kxr=r(yBt,"TFFlaubertForMultipleChoice"),yBt.forEach(t),Zxr=r(qDe," (FlauBERT model)"),qDe.forEach(t),e$r=i(Fe),$4=n(Fe,"LI",{});var jDe=s($4);J9e=n(jDe,"STRONG",{});var xBt=s(J9e);o$r=r(xBt,"funnel"),xBt.forEach(t),r$r=r(jDe," \u2014 "),TK=n(jDe,"A",{href:!0});var $Bt=s(TK);t$r=r($Bt,"TFFunnelForMultipleChoice"),$Bt.forEach(t),a$r=r(jDe," (Funnel Transformer model)"),jDe.forEach(t),n$r=i(Fe),k4=n(Fe,"LI",{});var DDe=s(k4);Y9e=n(DDe,"STRONG",{});var kBt=s(Y9e);s$r=r(kBt,"longformer"),kBt.forEach(t),l$r=r(DDe," \u2014 "),MK=n(DDe,"A",{href:!0});var SBt=s(MK);i$r=r(SBt,"TFLongformerForMultipleChoice"),SBt.forEach(t),d$r=r(DDe," (Longformer model)"),DDe.forEach(t),c$r=i(Fe),S4=n(Fe,"LI",{});var GDe=s(S4);K9e=n(GDe,"STRONG",{});var RBt=s(K9e);f$r=r(RBt,"mobilebert"),RBt.forEach(t),m$r=r(GDe," \u2014 "),EK=n(GDe,"A",{href:!0});var PBt=s(EK);g$r=r(PBt,"TFMobileBertForMultipleChoice"),PBt.forEach(t),h$r=r(GDe," (MobileBERT model)"),GDe.forEach(t),p$r=i(Fe),R4=n(Fe,"LI",{});var ODe=s(R4);Z9e=n(ODe,"STRONG",{});var BBt=s(Z9e);_$r=r(BBt,"mpnet"),BBt.forEach(t),u$r=r(ODe," \u2014 "),CK=n(ODe,"A",{href:!0});var NBt=s(CK);b$r=r(NBt,"TFMPNetForMultipleChoice"),NBt.forEach(t),v$r=r(ODe," (MPNet model)"),ODe.forEach(t),F$r=i(Fe),P4=n(Fe,"LI",{});var VDe=s(P4);eMe=n(VDe,"STRONG",{});var IBt=s(eMe);T$r=r(IBt,"rembert"),IBt.forEach(t),M$r=r(VDe," \u2014 "),wK=n(VDe,"A",{href:!0});var qBt=s(wK);E$r=r(qBt,"TFRemBertForMultipleChoice"),qBt.forEach(t),C$r=r(VDe," (RemBERT model)"),VDe.forEach(t),w$r=i(Fe),B4=n(Fe,"LI",{});var XDe=s(B4);oMe=n(XDe,"STRONG",{});var jBt=s(oMe);A$r=r(jBt,"roberta"),jBt.forEach(t),L$r=r(XDe," \u2014 "),AK=n(XDe,"A",{href:!0});var DBt=s(AK);y$r=r(DBt,"TFRobertaForMultipleChoice"),DBt.forEach(t),x$r=r(XDe," (RoBERTa model)"),XDe.forEach(t),$$r=i(Fe),N4=n(Fe,"LI",{});var zDe=s(N4);rMe=n(zDe,"STRONG",{});var GBt=s(rMe);k$r=r(GBt,"roformer"),GBt.forEach(t),S$r=r(zDe," \u2014 "),LK=n(zDe,"A",{href:!0});var OBt=s(LK);R$r=r(OBt,"TFRoFormerForMultipleChoice"),OBt.forEach(t),P$r=r(zDe," (RoFormer model)"),zDe.forEach(t),B$r=i(Fe),I4=n(Fe,"LI",{});var QDe=s(I4);tMe=n(QDe,"STRONG",{});var VBt=s(tMe);N$r=r(VBt,"xlm"),VBt.forEach(t),I$r=r(QDe," \u2014 "),yK=n(QDe,"A",{href:!0});var XBt=s(yK);q$r=r(XBt,"TFXLMForMultipleChoice"),XBt.forEach(t),j$r=r(QDe," (XLM model)"),QDe.forEach(t),D$r=i(Fe),q4=n(Fe,"LI",{});var WDe=s(q4);aMe=n(WDe,"STRONG",{});var zBt=s(aMe);G$r=r(zBt,"xlm-roberta"),zBt.forEach(t),O$r=r(WDe," \u2014 "),xK=n(WDe,"A",{href:!0});var QBt=s(xK);V$r=r(QBt,"TFXLMRobertaForMultipleChoice"),QBt.forEach(t),X$r=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),z$r=i(Fe),j4=n(Fe,"LI",{});var HDe=s(j4);nMe=n(HDe,"STRONG",{});var WBt=s(nMe);Q$r=r(WBt,"xlnet"),WBt.forEach(t),W$r=r(HDe," \u2014 "),$K=n(HDe,"A",{href:!0});var HBt=s($K);H$r=r(HBt,"TFXLNetForMultipleChoice"),HBt.forEach(t),U$r=r(HDe," (XLNet model)"),HDe.forEach(t),Fe.forEach(t),J$r=i(Vl),T(D4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),fze=i(f),xc=n(f,"H2",{class:!0});var vWe=s(xc);G4=n(vWe,"A",{id:!0,class:!0,href:!0});var UBt=s(G4);sMe=n(UBt,"SPAN",{});var JBt=s(sMe);T(yx.$$.fragment,JBt),JBt.forEach(t),UBt.forEach(t),Y$r=i(vWe),lMe=n(vWe,"SPAN",{});var YBt=s(lMe);K$r=r(YBt,"TFAutoModelForNextSentencePrediction"),YBt.forEach(t),vWe.forEach(t),mze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(xx.$$.fragment,Xl),Z$r=i(Xl),$c=n(Xl,"P",{});var Nte=s($c);ekr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=n(Nte,"A",{href:!0});var KBt=s(kK);okr=r(KBt,"from_pretrained()"),KBt.forEach(t),rkr=r(Nte," class method or the "),SK=n(Nte,"A",{href:!0});var ZBt=s(SK);tkr=r(ZBt,"from_config()"),ZBt.forEach(t),akr=r(Nte,` class
method.`),Nte.forEach(t),nkr=i(Xl),$x=n(Xl,"P",{});var FWe=s($x);skr=r(FWe,"This class cannot be instantiated directly using "),iMe=n(FWe,"CODE",{});var eNt=s(iMe);lkr=r(eNt,"__init__()"),eNt.forEach(t),ikr=r(FWe," (throws an error)."),FWe.forEach(t),dkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var _6=s(Dt);T(kx.$$.fragment,_6),ckr=i(_6),dMe=n(_6,"P",{});var oNt=s(dMe);fkr=r(oNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oNt.forEach(t),mkr=i(_6),kc=n(_6,"P",{});var Ite=s(kc);gkr=r(Ite,`Note:
Loading a model from its configuration file does `),cMe=n(Ite,"STRONG",{});var rNt=s(cMe);hkr=r(rNt,"not"),rNt.forEach(t),pkr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Ite,"A",{href:!0});var tNt=s(RK);_kr=r(tNt,"from_pretrained()"),tNt.forEach(t),ukr=r(Ite," to load the model weights."),Ite.forEach(t),bkr=i(_6),T(O4.$$.fragment,_6),_6.forEach(t),vkr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Sx.$$.fragment,zl),Fkr=i(zl),fMe=n(zl,"P",{});var aNt=s(fMe);Tkr=r(aNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aNt.forEach(t),Mkr=i(zl),pn=n(zl,"P",{});var u6=s(pn);Ekr=r(u6,"The model class to instantiate is selected based on the "),mMe=n(u6,"CODE",{});var nNt=s(mMe);Ckr=r(nNt,"model_type"),nNt.forEach(t),wkr=r(u6,` property of the config object (either
passed as an argument or loaded from `),gMe=n(u6,"CODE",{});var sNt=s(gMe);Akr=r(sNt,"pretrained_model_name_or_path"),sNt.forEach(t),Lkr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(u6,"CODE",{});var lNt=s(hMe);ykr=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),xkr=r(u6,":"),u6.forEach(t),$kr=i(zl),Rx=n(zl,"UL",{});var TWe=s(Rx);V4=n(TWe,"LI",{});var UDe=s(V4);pMe=n(UDe,"STRONG",{});var iNt=s(pMe);kkr=r(iNt,"bert"),iNt.forEach(t),Skr=r(UDe," \u2014 "),PK=n(UDe,"A",{href:!0});var dNt=s(PK);Rkr=r(dNt,"TFBertForNextSentencePrediction"),dNt.forEach(t),Pkr=r(UDe," (BERT model)"),UDe.forEach(t),Bkr=i(TWe),X4=n(TWe,"LI",{});var JDe=s(X4);_Me=n(JDe,"STRONG",{});var cNt=s(_Me);Nkr=r(cNt,"mobilebert"),cNt.forEach(t),Ikr=r(JDe," \u2014 "),BK=n(JDe,"A",{href:!0});var fNt=s(BK);qkr=r(fNt,"TFMobileBertForNextSentencePrediction"),fNt.forEach(t),jkr=r(JDe," (MobileBERT model)"),JDe.forEach(t),TWe.forEach(t),Dkr=i(zl),T(z4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),gze=i(f),Sc=n(f,"H2",{class:!0});var MWe=s(Sc);Q4=n(MWe,"A",{id:!0,class:!0,href:!0});var mNt=s(Q4);uMe=n(mNt,"SPAN",{});var gNt=s(uMe);T(Px.$$.fragment,gNt),gNt.forEach(t),mNt.forEach(t),Gkr=i(MWe),bMe=n(MWe,"SPAN",{});var hNt=s(bMe);Okr=r(hNt,"TFAutoModelForTableQuestionAnswering"),hNt.forEach(t),MWe.forEach(t),hze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Bx.$$.fragment,Ql),Vkr=i(Ql),Rc=n(Ql,"P",{});var qte=s(Rc);Xkr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NK=n(qte,"A",{href:!0});var pNt=s(NK);zkr=r(pNt,"from_pretrained()"),pNt.forEach(t),Qkr=r(qte," class method or the "),IK=n(qte,"A",{href:!0});var _Nt=s(IK);Wkr=r(_Nt,"from_config()"),_Nt.forEach(t),Hkr=r(qte,` class
method.`),qte.forEach(t),Ukr=i(Ql),Nx=n(Ql,"P",{});var EWe=s(Nx);Jkr=r(EWe,"This class cannot be instantiated directly using "),vMe=n(EWe,"CODE",{});var uNt=s(vMe);Ykr=r(uNt,"__init__()"),uNt.forEach(t),Kkr=r(EWe," (throws an error)."),EWe.forEach(t),Zkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var b6=s(Gt);T(Ix.$$.fragment,b6),eSr=i(b6),FMe=n(b6,"P",{});var bNt=s(FMe);oSr=r(bNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bNt.forEach(t),rSr=i(b6),Pc=n(b6,"P",{});var jte=s(Pc);tSr=r(jte,`Note:
Loading a model from its configuration file does `),TMe=n(jte,"STRONG",{});var vNt=s(TMe);aSr=r(vNt,"not"),vNt.forEach(t),nSr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(jte,"A",{href:!0});var FNt=s(qK);sSr=r(FNt,"from_pretrained()"),FNt.forEach(t),lSr=r(jte," to load the model weights."),jte.forEach(t),iSr=i(b6),T(W4.$$.fragment,b6),b6.forEach(t),dSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(qx.$$.fragment,Wl),cSr=i(Wl),MMe=n(Wl,"P",{});var TNt=s(MMe);fSr=r(TNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TNt.forEach(t),mSr=i(Wl),_n=n(Wl,"P",{});var v6=s(_n);gSr=r(v6,"The model class to instantiate is selected based on the "),EMe=n(v6,"CODE",{});var MNt=s(EMe);hSr=r(MNt,"model_type"),MNt.forEach(t),pSr=r(v6,` property of the config object (either
passed as an argument or loaded from `),CMe=n(v6,"CODE",{});var ENt=s(CMe);_Sr=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),uSr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(v6,"CODE",{});var CNt=s(wMe);bSr=r(CNt,"pretrained_model_name_or_path"),CNt.forEach(t),vSr=r(v6,":"),v6.forEach(t),FSr=i(Wl),AMe=n(Wl,"UL",{});var wNt=s(AMe);H4=n(wNt,"LI",{});var YDe=s(H4);LMe=n(YDe,"STRONG",{});var ANt=s(LMe);TSr=r(ANt,"tapas"),ANt.forEach(t),MSr=r(YDe," \u2014 "),jK=n(YDe,"A",{href:!0});var LNt=s(jK);ESr=r(LNt,"TFTapasForQuestionAnswering"),LNt.forEach(t),CSr=r(YDe," (TAPAS model)"),YDe.forEach(t),wNt.forEach(t),wSr=i(Wl),T(U4.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),pze=i(f),Bc=n(f,"H2",{class:!0});var CWe=s(Bc);J4=n(CWe,"A",{id:!0,class:!0,href:!0});var yNt=s(J4);yMe=n(yNt,"SPAN",{});var xNt=s(yMe);T(jx.$$.fragment,xNt),xNt.forEach(t),yNt.forEach(t),ASr=i(CWe),xMe=n(CWe,"SPAN",{});var $Nt=s(xMe);LSr=r($Nt,"TFAutoModelForTokenClassification"),$Nt.forEach(t),CWe.forEach(t),_ze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Dx.$$.fragment,Hl),ySr=i(Hl),Nc=n(Hl,"P",{});var Dte=s(Nc);xSr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=n(Dte,"A",{href:!0});var kNt=s(DK);$Sr=r(kNt,"from_pretrained()"),kNt.forEach(t),kSr=r(Dte," class method or the "),GK=n(Dte,"A",{href:!0});var SNt=s(GK);SSr=r(SNt,"from_config()"),SNt.forEach(t),RSr=r(Dte,` class
method.`),Dte.forEach(t),PSr=i(Hl),Gx=n(Hl,"P",{});var wWe=s(Gx);BSr=r(wWe,"This class cannot be instantiated directly using "),$Me=n(wWe,"CODE",{});var RNt=s($Me);NSr=r(RNt,"__init__()"),RNt.forEach(t),ISr=r(wWe," (throws an error)."),wWe.forEach(t),qSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var F6=s(Ot);T(Ox.$$.fragment,F6),jSr=i(F6),kMe=n(F6,"P",{});var PNt=s(kMe);DSr=r(PNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PNt.forEach(t),GSr=i(F6),Ic=n(F6,"P",{});var Gte=s(Ic);OSr=r(Gte,`Note:
Loading a model from its configuration file does `),SMe=n(Gte,"STRONG",{});var BNt=s(SMe);VSr=r(BNt,"not"),BNt.forEach(t),XSr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Gte,"A",{href:!0});var NNt=s(OK);zSr=r(NNt,"from_pretrained()"),NNt.forEach(t),QSr=r(Gte," to load the model weights."),Gte.forEach(t),WSr=i(F6),T(Y4.$$.fragment,F6),F6.forEach(t),HSr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Vx.$$.fragment,Ul),USr=i(Ul),RMe=n(Ul,"P",{});var INt=s(RMe);JSr=r(INt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),INt.forEach(t),YSr=i(Ul),un=n(Ul,"P",{});var T6=s(un);KSr=r(T6,"The model class to instantiate is selected based on the "),PMe=n(T6,"CODE",{});var qNt=s(PMe);ZSr=r(qNt,"model_type"),qNt.forEach(t),eRr=r(T6,` property of the config object (either
passed as an argument or loaded from `),BMe=n(T6,"CODE",{});var jNt=s(BMe);oRr=r(jNt,"pretrained_model_name_or_path"),jNt.forEach(t),rRr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(T6,"CODE",{});var DNt=s(NMe);tRr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),aRr=r(T6,":"),T6.forEach(t),nRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);K4=n(me,"LI",{});var KDe=s(K4);IMe=n(KDe,"STRONG",{});var GNt=s(IMe);sRr=r(GNt,"albert"),GNt.forEach(t),lRr=r(KDe," \u2014 "),VK=n(KDe,"A",{href:!0});var ONt=s(VK);iRr=r(ONt,"TFAlbertForTokenClassification"),ONt.forEach(t),dRr=r(KDe," (ALBERT model)"),KDe.forEach(t),cRr=i(me),Z4=n(me,"LI",{});var ZDe=s(Z4);qMe=n(ZDe,"STRONG",{});var VNt=s(qMe);fRr=r(VNt,"bert"),VNt.forEach(t),mRr=r(ZDe," \u2014 "),XK=n(ZDe,"A",{href:!0});var XNt=s(XK);gRr=r(XNt,"TFBertForTokenClassification"),XNt.forEach(t),hRr=r(ZDe," (BERT model)"),ZDe.forEach(t),pRr=i(me),eE=n(me,"LI",{});var eGe=s(eE);jMe=n(eGe,"STRONG",{});var zNt=s(jMe);_Rr=r(zNt,"camembert"),zNt.forEach(t),uRr=r(eGe," \u2014 "),zK=n(eGe,"A",{href:!0});var QNt=s(zK);bRr=r(QNt,"TFCamembertForTokenClassification"),QNt.forEach(t),vRr=r(eGe," (CamemBERT model)"),eGe.forEach(t),FRr=i(me),oE=n(me,"LI",{});var oGe=s(oE);DMe=n(oGe,"STRONG",{});var WNt=s(DMe);TRr=r(WNt,"convbert"),WNt.forEach(t),MRr=r(oGe," \u2014 "),QK=n(oGe,"A",{href:!0});var HNt=s(QK);ERr=r(HNt,"TFConvBertForTokenClassification"),HNt.forEach(t),CRr=r(oGe," (ConvBERT model)"),oGe.forEach(t),wRr=i(me),rE=n(me,"LI",{});var rGe=s(rE);GMe=n(rGe,"STRONG",{});var UNt=s(GMe);ARr=r(UNt,"deberta"),UNt.forEach(t),LRr=r(rGe," \u2014 "),WK=n(rGe,"A",{href:!0});var JNt=s(WK);yRr=r(JNt,"TFDebertaForTokenClassification"),JNt.forEach(t),xRr=r(rGe," (DeBERTa model)"),rGe.forEach(t),$Rr=i(me),tE=n(me,"LI",{});var tGe=s(tE);OMe=n(tGe,"STRONG",{});var YNt=s(OMe);kRr=r(YNt,"deberta-v2"),YNt.forEach(t),SRr=r(tGe," \u2014 "),HK=n(tGe,"A",{href:!0});var KNt=s(HK);RRr=r(KNt,"TFDebertaV2ForTokenClassification"),KNt.forEach(t),PRr=r(tGe," (DeBERTa-v2 model)"),tGe.forEach(t),BRr=i(me),aE=n(me,"LI",{});var aGe=s(aE);VMe=n(aGe,"STRONG",{});var ZNt=s(VMe);NRr=r(ZNt,"distilbert"),ZNt.forEach(t),IRr=r(aGe," \u2014 "),UK=n(aGe,"A",{href:!0});var eIt=s(UK);qRr=r(eIt,"TFDistilBertForTokenClassification"),eIt.forEach(t),jRr=r(aGe," (DistilBERT model)"),aGe.forEach(t),DRr=i(me),nE=n(me,"LI",{});var nGe=s(nE);XMe=n(nGe,"STRONG",{});var oIt=s(XMe);GRr=r(oIt,"electra"),oIt.forEach(t),ORr=r(nGe," \u2014 "),JK=n(nGe,"A",{href:!0});var rIt=s(JK);VRr=r(rIt,"TFElectraForTokenClassification"),rIt.forEach(t),XRr=r(nGe," (ELECTRA model)"),nGe.forEach(t),zRr=i(me),sE=n(me,"LI",{});var sGe=s(sE);zMe=n(sGe,"STRONG",{});var tIt=s(zMe);QRr=r(tIt,"flaubert"),tIt.forEach(t),WRr=r(sGe," \u2014 "),YK=n(sGe,"A",{href:!0});var aIt=s(YK);HRr=r(aIt,"TFFlaubertForTokenClassification"),aIt.forEach(t),URr=r(sGe," (FlauBERT model)"),sGe.forEach(t),JRr=i(me),lE=n(me,"LI",{});var lGe=s(lE);QMe=n(lGe,"STRONG",{});var nIt=s(QMe);YRr=r(nIt,"funnel"),nIt.forEach(t),KRr=r(lGe," \u2014 "),KK=n(lGe,"A",{href:!0});var sIt=s(KK);ZRr=r(sIt,"TFFunnelForTokenClassification"),sIt.forEach(t),ePr=r(lGe," (Funnel Transformer model)"),lGe.forEach(t),oPr=i(me),iE=n(me,"LI",{});var iGe=s(iE);WMe=n(iGe,"STRONG",{});var lIt=s(WMe);rPr=r(lIt,"layoutlm"),lIt.forEach(t),tPr=r(iGe," \u2014 "),ZK=n(iGe,"A",{href:!0});var iIt=s(ZK);aPr=r(iIt,"TFLayoutLMForTokenClassification"),iIt.forEach(t),nPr=r(iGe," (LayoutLM model)"),iGe.forEach(t),sPr=i(me),dE=n(me,"LI",{});var dGe=s(dE);HMe=n(dGe,"STRONG",{});var dIt=s(HMe);lPr=r(dIt,"longformer"),dIt.forEach(t),iPr=r(dGe," \u2014 "),eZ=n(dGe,"A",{href:!0});var cIt=s(eZ);dPr=r(cIt,"TFLongformerForTokenClassification"),cIt.forEach(t),cPr=r(dGe," (Longformer model)"),dGe.forEach(t),fPr=i(me),cE=n(me,"LI",{});var cGe=s(cE);UMe=n(cGe,"STRONG",{});var fIt=s(UMe);mPr=r(fIt,"mobilebert"),fIt.forEach(t),gPr=r(cGe," \u2014 "),oZ=n(cGe,"A",{href:!0});var mIt=s(oZ);hPr=r(mIt,"TFMobileBertForTokenClassification"),mIt.forEach(t),pPr=r(cGe," (MobileBERT model)"),cGe.forEach(t),_Pr=i(me),fE=n(me,"LI",{});var fGe=s(fE);JMe=n(fGe,"STRONG",{});var gIt=s(JMe);uPr=r(gIt,"mpnet"),gIt.forEach(t),bPr=r(fGe," \u2014 "),rZ=n(fGe,"A",{href:!0});var hIt=s(rZ);vPr=r(hIt,"TFMPNetForTokenClassification"),hIt.forEach(t),FPr=r(fGe," (MPNet model)"),fGe.forEach(t),TPr=i(me),mE=n(me,"LI",{});var mGe=s(mE);YMe=n(mGe,"STRONG",{});var pIt=s(YMe);MPr=r(pIt,"rembert"),pIt.forEach(t),EPr=r(mGe," \u2014 "),tZ=n(mGe,"A",{href:!0});var _It=s(tZ);CPr=r(_It,"TFRemBertForTokenClassification"),_It.forEach(t),wPr=r(mGe," (RemBERT model)"),mGe.forEach(t),APr=i(me),gE=n(me,"LI",{});var gGe=s(gE);KMe=n(gGe,"STRONG",{});var uIt=s(KMe);LPr=r(uIt,"roberta"),uIt.forEach(t),yPr=r(gGe," \u2014 "),aZ=n(gGe,"A",{href:!0});var bIt=s(aZ);xPr=r(bIt,"TFRobertaForTokenClassification"),bIt.forEach(t),$Pr=r(gGe," (RoBERTa model)"),gGe.forEach(t),kPr=i(me),hE=n(me,"LI",{});var hGe=s(hE);ZMe=n(hGe,"STRONG",{});var vIt=s(ZMe);SPr=r(vIt,"roformer"),vIt.forEach(t),RPr=r(hGe," \u2014 "),nZ=n(hGe,"A",{href:!0});var FIt=s(nZ);PPr=r(FIt,"TFRoFormerForTokenClassification"),FIt.forEach(t),BPr=r(hGe," (RoFormer model)"),hGe.forEach(t),NPr=i(me),pE=n(me,"LI",{});var pGe=s(pE);e4e=n(pGe,"STRONG",{});var TIt=s(e4e);IPr=r(TIt,"xlm"),TIt.forEach(t),qPr=r(pGe," \u2014 "),sZ=n(pGe,"A",{href:!0});var MIt=s(sZ);jPr=r(MIt,"TFXLMForTokenClassification"),MIt.forEach(t),DPr=r(pGe," (XLM model)"),pGe.forEach(t),GPr=i(me),_E=n(me,"LI",{});var _Ge=s(_E);o4e=n(_Ge,"STRONG",{});var EIt=s(o4e);OPr=r(EIt,"xlm-roberta"),EIt.forEach(t),VPr=r(_Ge," \u2014 "),lZ=n(_Ge,"A",{href:!0});var CIt=s(lZ);XPr=r(CIt,"TFXLMRobertaForTokenClassification"),CIt.forEach(t),zPr=r(_Ge," (XLM-RoBERTa model)"),_Ge.forEach(t),QPr=i(me),uE=n(me,"LI",{});var uGe=s(uE);r4e=n(uGe,"STRONG",{});var wIt=s(r4e);WPr=r(wIt,"xlnet"),wIt.forEach(t),HPr=r(uGe," \u2014 "),iZ=n(uGe,"A",{href:!0});var AIt=s(iZ);UPr=r(AIt,"TFXLNetForTokenClassification"),AIt.forEach(t),JPr=r(uGe," (XLNet model)"),uGe.forEach(t),me.forEach(t),YPr=i(Ul),T(bE.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),uze=i(f),qc=n(f,"H2",{class:!0});var AWe=s(qc);vE=n(AWe,"A",{id:!0,class:!0,href:!0});var LIt=s(vE);t4e=n(LIt,"SPAN",{});var yIt=s(t4e);T(Xx.$$.fragment,yIt),yIt.forEach(t),LIt.forEach(t),KPr=i(AWe),a4e=n(AWe,"SPAN",{});var xIt=s(a4e);ZPr=r(xIt,"TFAutoModelForQuestionAnswering"),xIt.forEach(t),AWe.forEach(t),bze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(zx.$$.fragment,Jl),eBr=i(Jl),jc=n(Jl,"P",{});var Ote=s(jc);oBr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=n(Ote,"A",{href:!0});var $It=s(dZ);rBr=r($It,"from_pretrained()"),$It.forEach(t),tBr=r(Ote," class method or the "),cZ=n(Ote,"A",{href:!0});var kIt=s(cZ);aBr=r(kIt,"from_config()"),kIt.forEach(t),nBr=r(Ote,` class
method.`),Ote.forEach(t),sBr=i(Jl),Qx=n(Jl,"P",{});var LWe=s(Qx);lBr=r(LWe,"This class cannot be instantiated directly using "),n4e=n(LWe,"CODE",{});var SIt=s(n4e);iBr=r(SIt,"__init__()"),SIt.forEach(t),dBr=r(LWe," (throws an error)."),LWe.forEach(t),cBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var M6=s(Vt);T(Wx.$$.fragment,M6),fBr=i(M6),s4e=n(M6,"P",{});var RIt=s(s4e);mBr=r(RIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RIt.forEach(t),gBr=i(M6),Dc=n(M6,"P",{});var Vte=s(Dc);hBr=r(Vte,`Note:
Loading a model from its configuration file does `),l4e=n(Vte,"STRONG",{});var PIt=s(l4e);pBr=r(PIt,"not"),PIt.forEach(t),_Br=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Vte,"A",{href:!0});var BIt=s(fZ);uBr=r(BIt,"from_pretrained()"),BIt.forEach(t),bBr=r(Vte," to load the model weights."),Vte.forEach(t),vBr=i(M6),T(FE.$$.fragment,M6),M6.forEach(t),FBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Hx.$$.fragment,Yl),TBr=i(Yl),i4e=n(Yl,"P",{});var NIt=s(i4e);MBr=r(NIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NIt.forEach(t),EBr=i(Yl),bn=n(Yl,"P",{});var E6=s(bn);CBr=r(E6,"The model class to instantiate is selected based on the "),d4e=n(E6,"CODE",{});var IIt=s(d4e);wBr=r(IIt,"model_type"),IIt.forEach(t),ABr=r(E6,` property of the config object (either
passed as an argument or loaded from `),c4e=n(E6,"CODE",{});var qIt=s(c4e);LBr=r(qIt,"pretrained_model_name_or_path"),qIt.forEach(t),yBr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(E6,"CODE",{});var jIt=s(f4e);xBr=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),$Br=r(E6,":"),E6.forEach(t),kBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);TE=n(ge,"LI",{});var bGe=s(TE);m4e=n(bGe,"STRONG",{});var DIt=s(m4e);SBr=r(DIt,"albert"),DIt.forEach(t),RBr=r(bGe," \u2014 "),mZ=n(bGe,"A",{href:!0});var GIt=s(mZ);PBr=r(GIt,"TFAlbertForQuestionAnswering"),GIt.forEach(t),BBr=r(bGe," (ALBERT model)"),bGe.forEach(t),NBr=i(ge),ME=n(ge,"LI",{});var vGe=s(ME);g4e=n(vGe,"STRONG",{});var OIt=s(g4e);IBr=r(OIt,"bert"),OIt.forEach(t),qBr=r(vGe," \u2014 "),gZ=n(vGe,"A",{href:!0});var VIt=s(gZ);jBr=r(VIt,"TFBertForQuestionAnswering"),VIt.forEach(t),DBr=r(vGe," (BERT model)"),vGe.forEach(t),GBr=i(ge),EE=n(ge,"LI",{});var FGe=s(EE);h4e=n(FGe,"STRONG",{});var XIt=s(h4e);OBr=r(XIt,"camembert"),XIt.forEach(t),VBr=r(FGe," \u2014 "),hZ=n(FGe,"A",{href:!0});var zIt=s(hZ);XBr=r(zIt,"TFCamembertForQuestionAnswering"),zIt.forEach(t),zBr=r(FGe," (CamemBERT model)"),FGe.forEach(t),QBr=i(ge),CE=n(ge,"LI",{});var TGe=s(CE);p4e=n(TGe,"STRONG",{});var QIt=s(p4e);WBr=r(QIt,"convbert"),QIt.forEach(t),HBr=r(TGe," \u2014 "),pZ=n(TGe,"A",{href:!0});var WIt=s(pZ);UBr=r(WIt,"TFConvBertForQuestionAnswering"),WIt.forEach(t),JBr=r(TGe," (ConvBERT model)"),TGe.forEach(t),YBr=i(ge),wE=n(ge,"LI",{});var MGe=s(wE);_4e=n(MGe,"STRONG",{});var HIt=s(_4e);KBr=r(HIt,"deberta"),HIt.forEach(t),ZBr=r(MGe," \u2014 "),_Z=n(MGe,"A",{href:!0});var UIt=s(_Z);eNr=r(UIt,"TFDebertaForQuestionAnswering"),UIt.forEach(t),oNr=r(MGe," (DeBERTa model)"),MGe.forEach(t),rNr=i(ge),AE=n(ge,"LI",{});var EGe=s(AE);u4e=n(EGe,"STRONG",{});var JIt=s(u4e);tNr=r(JIt,"deberta-v2"),JIt.forEach(t),aNr=r(EGe," \u2014 "),uZ=n(EGe,"A",{href:!0});var YIt=s(uZ);nNr=r(YIt,"TFDebertaV2ForQuestionAnswering"),YIt.forEach(t),sNr=r(EGe," (DeBERTa-v2 model)"),EGe.forEach(t),lNr=i(ge),LE=n(ge,"LI",{});var CGe=s(LE);b4e=n(CGe,"STRONG",{});var KIt=s(b4e);iNr=r(KIt,"distilbert"),KIt.forEach(t),dNr=r(CGe," \u2014 "),bZ=n(CGe,"A",{href:!0});var ZIt=s(bZ);cNr=r(ZIt,"TFDistilBertForQuestionAnswering"),ZIt.forEach(t),fNr=r(CGe," (DistilBERT model)"),CGe.forEach(t),mNr=i(ge),yE=n(ge,"LI",{});var wGe=s(yE);v4e=n(wGe,"STRONG",{});var eqt=s(v4e);gNr=r(eqt,"electra"),eqt.forEach(t),hNr=r(wGe," \u2014 "),vZ=n(wGe,"A",{href:!0});var oqt=s(vZ);pNr=r(oqt,"TFElectraForQuestionAnswering"),oqt.forEach(t),_Nr=r(wGe," (ELECTRA model)"),wGe.forEach(t),uNr=i(ge),xE=n(ge,"LI",{});var AGe=s(xE);F4e=n(AGe,"STRONG",{});var rqt=s(F4e);bNr=r(rqt,"flaubert"),rqt.forEach(t),vNr=r(AGe," \u2014 "),FZ=n(AGe,"A",{href:!0});var tqt=s(FZ);FNr=r(tqt,"TFFlaubertForQuestionAnsweringSimple"),tqt.forEach(t),TNr=r(AGe," (FlauBERT model)"),AGe.forEach(t),MNr=i(ge),$E=n(ge,"LI",{});var LGe=s($E);T4e=n(LGe,"STRONG",{});var aqt=s(T4e);ENr=r(aqt,"funnel"),aqt.forEach(t),CNr=r(LGe," \u2014 "),TZ=n(LGe,"A",{href:!0});var nqt=s(TZ);wNr=r(nqt,"TFFunnelForQuestionAnswering"),nqt.forEach(t),ANr=r(LGe," (Funnel Transformer model)"),LGe.forEach(t),LNr=i(ge),kE=n(ge,"LI",{});var yGe=s(kE);M4e=n(yGe,"STRONG",{});var sqt=s(M4e);yNr=r(sqt,"gptj"),sqt.forEach(t),xNr=r(yGe," \u2014 "),MZ=n(yGe,"A",{href:!0});var lqt=s(MZ);$Nr=r(lqt,"TFGPTJForQuestionAnswering"),lqt.forEach(t),kNr=r(yGe," (GPT-J model)"),yGe.forEach(t),SNr=i(ge),SE=n(ge,"LI",{});var xGe=s(SE);E4e=n(xGe,"STRONG",{});var iqt=s(E4e);RNr=r(iqt,"longformer"),iqt.forEach(t),PNr=r(xGe," \u2014 "),EZ=n(xGe,"A",{href:!0});var dqt=s(EZ);BNr=r(dqt,"TFLongformerForQuestionAnswering"),dqt.forEach(t),NNr=r(xGe," (Longformer model)"),xGe.forEach(t),INr=i(ge),RE=n(ge,"LI",{});var $Ge=s(RE);C4e=n($Ge,"STRONG",{});var cqt=s(C4e);qNr=r(cqt,"mobilebert"),cqt.forEach(t),jNr=r($Ge," \u2014 "),CZ=n($Ge,"A",{href:!0});var fqt=s(CZ);DNr=r(fqt,"TFMobileBertForQuestionAnswering"),fqt.forEach(t),GNr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),ONr=i(ge),PE=n(ge,"LI",{});var kGe=s(PE);w4e=n(kGe,"STRONG",{});var mqt=s(w4e);VNr=r(mqt,"mpnet"),mqt.forEach(t),XNr=r(kGe," \u2014 "),wZ=n(kGe,"A",{href:!0});var gqt=s(wZ);zNr=r(gqt,"TFMPNetForQuestionAnswering"),gqt.forEach(t),QNr=r(kGe," (MPNet model)"),kGe.forEach(t),WNr=i(ge),BE=n(ge,"LI",{});var SGe=s(BE);A4e=n(SGe,"STRONG",{});var hqt=s(A4e);HNr=r(hqt,"rembert"),hqt.forEach(t),UNr=r(SGe," \u2014 "),AZ=n(SGe,"A",{href:!0});var pqt=s(AZ);JNr=r(pqt,"TFRemBertForQuestionAnswering"),pqt.forEach(t),YNr=r(SGe," (RemBERT model)"),SGe.forEach(t),KNr=i(ge),NE=n(ge,"LI",{});var RGe=s(NE);L4e=n(RGe,"STRONG",{});var _qt=s(L4e);ZNr=r(_qt,"roberta"),_qt.forEach(t),eIr=r(RGe," \u2014 "),LZ=n(RGe,"A",{href:!0});var uqt=s(LZ);oIr=r(uqt,"TFRobertaForQuestionAnswering"),uqt.forEach(t),rIr=r(RGe," (RoBERTa model)"),RGe.forEach(t),tIr=i(ge),IE=n(ge,"LI",{});var PGe=s(IE);y4e=n(PGe,"STRONG",{});var bqt=s(y4e);aIr=r(bqt,"roformer"),bqt.forEach(t),nIr=r(PGe," \u2014 "),yZ=n(PGe,"A",{href:!0});var vqt=s(yZ);sIr=r(vqt,"TFRoFormerForQuestionAnswering"),vqt.forEach(t),lIr=r(PGe," (RoFormer model)"),PGe.forEach(t),iIr=i(ge),qE=n(ge,"LI",{});var BGe=s(qE);x4e=n(BGe,"STRONG",{});var Fqt=s(x4e);dIr=r(Fqt,"xlm"),Fqt.forEach(t),cIr=r(BGe," \u2014 "),xZ=n(BGe,"A",{href:!0});var Tqt=s(xZ);fIr=r(Tqt,"TFXLMForQuestionAnsweringSimple"),Tqt.forEach(t),mIr=r(BGe," (XLM model)"),BGe.forEach(t),gIr=i(ge),jE=n(ge,"LI",{});var NGe=s(jE);$4e=n(NGe,"STRONG",{});var Mqt=s($4e);hIr=r(Mqt,"xlm-roberta"),Mqt.forEach(t),pIr=r(NGe," \u2014 "),$Z=n(NGe,"A",{href:!0});var Eqt=s($Z);_Ir=r(Eqt,"TFXLMRobertaForQuestionAnswering"),Eqt.forEach(t),uIr=r(NGe," (XLM-RoBERTa model)"),NGe.forEach(t),bIr=i(ge),DE=n(ge,"LI",{});var IGe=s(DE);k4e=n(IGe,"STRONG",{});var Cqt=s(k4e);vIr=r(Cqt,"xlnet"),Cqt.forEach(t),FIr=r(IGe," \u2014 "),kZ=n(IGe,"A",{href:!0});var wqt=s(kZ);TIr=r(wqt,"TFXLNetForQuestionAnsweringSimple"),wqt.forEach(t),MIr=r(IGe," (XLNet model)"),IGe.forEach(t),ge.forEach(t),EIr=i(Yl),T(GE.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),vze=i(f),Gc=n(f,"H2",{class:!0});var yWe=s(Gc);OE=n(yWe,"A",{id:!0,class:!0,href:!0});var Aqt=s(OE);S4e=n(Aqt,"SPAN",{});var Lqt=s(S4e);T(Ux.$$.fragment,Lqt),Lqt.forEach(t),Aqt.forEach(t),CIr=i(yWe),R4e=n(yWe,"SPAN",{});var yqt=s(R4e);wIr=r(yqt,"TFAutoModelForVision2Seq"),yqt.forEach(t),yWe.forEach(t),Fze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Jx.$$.fragment,Kl),AIr=i(Kl),Oc=n(Kl,"P",{});var Xte=s(Oc);LIr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=n(Xte,"A",{href:!0});var xqt=s(SZ);yIr=r(xqt,"from_pretrained()"),xqt.forEach(t),xIr=r(Xte," class method or the "),RZ=n(Xte,"A",{href:!0});var $qt=s(RZ);$Ir=r($qt,"from_config()"),$qt.forEach(t),kIr=r(Xte,` class
method.`),Xte.forEach(t),SIr=i(Kl),Yx=n(Kl,"P",{});var xWe=s(Yx);RIr=r(xWe,"This class cannot be instantiated directly using "),P4e=n(xWe,"CODE",{});var kqt=s(P4e);PIr=r(kqt,"__init__()"),kqt.forEach(t),BIr=r(xWe," (throws an error)."),xWe.forEach(t),NIr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var C6=s(Xt);T(Kx.$$.fragment,C6),IIr=i(C6),B4e=n(C6,"P",{});var Sqt=s(B4e);qIr=r(Sqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sqt.forEach(t),jIr=i(C6),Vc=n(C6,"P",{});var zte=s(Vc);DIr=r(zte,`Note:
Loading a model from its configuration file does `),N4e=n(zte,"STRONG",{});var Rqt=s(N4e);GIr=r(Rqt,"not"),Rqt.forEach(t),OIr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(zte,"A",{href:!0});var Pqt=s(PZ);VIr=r(Pqt,"from_pretrained()"),Pqt.forEach(t),XIr=r(zte," to load the model weights."),zte.forEach(t),zIr=i(C6),T(VE.$$.fragment,C6),C6.forEach(t),QIr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Zx.$$.fragment,Zl),WIr=i(Zl),I4e=n(Zl,"P",{});var Bqt=s(I4e);HIr=r(Bqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bqt.forEach(t),UIr=i(Zl),vn=n(Zl,"P",{});var w6=s(vn);JIr=r(w6,"The model class to instantiate is selected based on the "),q4e=n(w6,"CODE",{});var Nqt=s(q4e);YIr=r(Nqt,"model_type"),Nqt.forEach(t),KIr=r(w6,` property of the config object (either
passed as an argument or loaded from `),j4e=n(w6,"CODE",{});var Iqt=s(j4e);ZIr=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),eqr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(w6,"CODE",{});var qqt=s(D4e);oqr=r(qqt,"pretrained_model_name_or_path"),qqt.forEach(t),rqr=r(w6,":"),w6.forEach(t),tqr=i(Zl),G4e=n(Zl,"UL",{});var jqt=s(G4e);XE=n(jqt,"LI",{});var qGe=s(XE);O4e=n(qGe,"STRONG",{});var Dqt=s(O4e);aqr=r(Dqt,"vision-encoder-decoder"),Dqt.forEach(t),nqr=r(qGe," \u2014 "),BZ=n(qGe,"A",{href:!0});var Gqt=s(BZ);sqr=r(Gqt,"TFVisionEncoderDecoderModel"),Gqt.forEach(t),lqr=r(qGe," (Vision Encoder decoder model)"),qGe.forEach(t),jqt.forEach(t),iqr=i(Zl),T(zE.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Tze=i(f),Xc=n(f,"H2",{class:!0});var $We=s(Xc);QE=n($We,"A",{id:!0,class:!0,href:!0});var Oqt=s(QE);V4e=n(Oqt,"SPAN",{});var Vqt=s(V4e);T(e$.$$.fragment,Vqt),Vqt.forEach(t),Oqt.forEach(t),dqr=i($We),X4e=n($We,"SPAN",{});var Xqt=s(X4e);cqr=r(Xqt,"TFAutoModelForSpeechSeq2Seq"),Xqt.forEach(t),$We.forEach(t),Mze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(o$.$$.fragment,ei),fqr=i(ei),zc=n(ei,"P",{});var Qte=s(zc);mqr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NZ=n(Qte,"A",{href:!0});var zqt=s(NZ);gqr=r(zqt,"from_pretrained()"),zqt.forEach(t),hqr=r(Qte," class method or the "),IZ=n(Qte,"A",{href:!0});var Qqt=s(IZ);pqr=r(Qqt,"from_config()"),Qqt.forEach(t),_qr=r(Qte,` class
method.`),Qte.forEach(t),uqr=i(ei),r$=n(ei,"P",{});var kWe=s(r$);bqr=r(kWe,"This class cannot be instantiated directly using "),z4e=n(kWe,"CODE",{});var Wqt=s(z4e);vqr=r(Wqt,"__init__()"),Wqt.forEach(t),Fqr=r(kWe," (throws an error)."),kWe.forEach(t),Tqr=i(ei),zt=n(ei,"DIV",{class:!0});var A6=s(zt);T(t$.$$.fragment,A6),Mqr=i(A6),Q4e=n(A6,"P",{});var Hqt=s(Q4e);Eqr=r(Hqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hqt.forEach(t),Cqr=i(A6),Qc=n(A6,"P",{});var Wte=s(Qc);wqr=r(Wte,`Note:
Loading a model from its configuration file does `),W4e=n(Wte,"STRONG",{});var Uqt=s(W4e);Aqr=r(Uqt,"not"),Uqt.forEach(t),Lqr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Wte,"A",{href:!0});var Jqt=s(qZ);yqr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),xqr=r(Wte," to load the model weights."),Wte.forEach(t),$qr=i(A6),T(WE.$$.fragment,A6),A6.forEach(t),kqr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(a$.$$.fragment,oi),Sqr=i(oi),H4e=n(oi,"P",{});var Yqt=s(H4e);Rqr=r(Yqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yqt.forEach(t),Pqr=i(oi),Fn=n(oi,"P",{});var L6=s(Fn);Bqr=r(L6,"The model class to instantiate is selected based on the "),U4e=n(L6,"CODE",{});var Kqt=s(U4e);Nqr=r(Kqt,"model_type"),Kqt.forEach(t),Iqr=r(L6,` property of the config object (either
passed as an argument or loaded from `),J4e=n(L6,"CODE",{});var Zqt=s(J4e);qqr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),jqr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(L6,"CODE",{});var ejt=s(Y4e);Dqr=r(ejt,"pretrained_model_name_or_path"),ejt.forEach(t),Gqr=r(L6,":"),L6.forEach(t),Oqr=i(oi),K4e=n(oi,"UL",{});var ojt=s(K4e);HE=n(ojt,"LI",{});var jGe=s(HE);Z4e=n(jGe,"STRONG",{});var rjt=s(Z4e);Vqr=r(rjt,"speech_to_text"),rjt.forEach(t),Xqr=r(jGe," \u2014 "),jZ=n(jGe,"A",{href:!0});var tjt=s(jZ);zqr=r(tjt,"TFSpeech2TextForConditionalGeneration"),tjt.forEach(t),Qqr=r(jGe," (Speech2Text model)"),jGe.forEach(t),ojt.forEach(t),Wqr=i(oi),T(UE.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Eze=i(f),Wc=n(f,"H2",{class:!0});var SWe=s(Wc);JE=n(SWe,"A",{id:!0,class:!0,href:!0});var ajt=s(JE);eEe=n(ajt,"SPAN",{});var njt=s(eEe);T(n$.$$.fragment,njt),njt.forEach(t),ajt.forEach(t),Hqr=i(SWe),oEe=n(SWe,"SPAN",{});var sjt=s(oEe);Uqr=r(sjt,"FlaxAutoModel"),sjt.forEach(t),SWe.forEach(t),Cze=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(s$.$$.fragment,ri),Jqr=i(ri),Hc=n(ri,"P",{});var Hte=s(Hc);Yqr=r(Hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=n(Hte,"A",{href:!0});var ljt=s(DZ);Kqr=r(ljt,"from_pretrained()"),ljt.forEach(t),Zqr=r(Hte," class method or the "),GZ=n(Hte,"A",{href:!0});var ijt=s(GZ);ejr=r(ijt,"from_config()"),ijt.forEach(t),ojr=r(Hte,` class
method.`),Hte.forEach(t),rjr=i(ri),l$=n(ri,"P",{});var RWe=s(l$);tjr=r(RWe,"This class cannot be instantiated directly using "),rEe=n(RWe,"CODE",{});var djt=s(rEe);ajr=r(djt,"__init__()"),djt.forEach(t),njr=r(RWe," (throws an error)."),RWe.forEach(t),sjr=i(ri),Qt=n(ri,"DIV",{class:!0});var y6=s(Qt);T(i$.$$.fragment,y6),ljr=i(y6),tEe=n(y6,"P",{});var cjt=s(tEe);ijr=r(cjt,"Instantiates one of the base model classes of the library from a configuration."),cjt.forEach(t),djr=i(y6),Uc=n(y6,"P",{});var Ute=s(Uc);cjr=r(Ute,`Note:
Loading a model from its configuration file does `),aEe=n(Ute,"STRONG",{});var fjt=s(aEe);fjr=r(fjt,"not"),fjt.forEach(t),mjr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Ute,"A",{href:!0});var mjt=s(OZ);gjr=r(mjt,"from_pretrained()"),mjt.forEach(t),hjr=r(Ute," to load the model weights."),Ute.forEach(t),pjr=i(y6),T(YE.$$.fragment,y6),y6.forEach(t),_jr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(d$.$$.fragment,ti),ujr=i(ti),nEe=n(ti,"P",{});var gjt=s(nEe);bjr=r(gjt,"Instantiate one of the base model classes of the library from a pretrained model."),gjt.forEach(t),vjr=i(ti),Tn=n(ti,"P",{});var x6=s(Tn);Fjr=r(x6,"The model class to instantiate is selected based on the "),sEe=n(x6,"CODE",{});var hjt=s(sEe);Tjr=r(hjt,"model_type"),hjt.forEach(t),Mjr=r(x6,` property of the config object (either
passed as an argument or loaded from `),lEe=n(x6,"CODE",{});var pjt=s(lEe);Ejr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),Cjr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(x6,"CODE",{});var _jt=s(iEe);wjr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),Ajr=r(x6,":"),x6.forEach(t),Ljr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);KE=n(ae,"LI",{});var DGe=s(KE);dEe=n(DGe,"STRONG",{});var ujt=s(dEe);yjr=r(ujt,"albert"),ujt.forEach(t),xjr=r(DGe," \u2014 "),VZ=n(DGe,"A",{href:!0});var bjt=s(VZ);$jr=r(bjt,"FlaxAlbertModel"),bjt.forEach(t),kjr=r(DGe," (ALBERT model)"),DGe.forEach(t),Sjr=i(ae),ZE=n(ae,"LI",{});var GGe=s(ZE);cEe=n(GGe,"STRONG",{});var vjt=s(cEe);Rjr=r(vjt,"bart"),vjt.forEach(t),Pjr=r(GGe," \u2014 "),XZ=n(GGe,"A",{href:!0});var Fjt=s(XZ);Bjr=r(Fjt,"FlaxBartModel"),Fjt.forEach(t),Njr=r(GGe," (BART model)"),GGe.forEach(t),Ijr=i(ae),eC=n(ae,"LI",{});var OGe=s(eC);fEe=n(OGe,"STRONG",{});var Tjt=s(fEe);qjr=r(Tjt,"beit"),Tjt.forEach(t),jjr=r(OGe," \u2014 "),zZ=n(OGe,"A",{href:!0});var Mjt=s(zZ);Djr=r(Mjt,"FlaxBeitModel"),Mjt.forEach(t),Gjr=r(OGe," (BEiT model)"),OGe.forEach(t),Ojr=i(ae),oC=n(ae,"LI",{});var VGe=s(oC);mEe=n(VGe,"STRONG",{});var Ejt=s(mEe);Vjr=r(Ejt,"bert"),Ejt.forEach(t),Xjr=r(VGe," \u2014 "),QZ=n(VGe,"A",{href:!0});var Cjt=s(QZ);zjr=r(Cjt,"FlaxBertModel"),Cjt.forEach(t),Qjr=r(VGe," (BERT model)"),VGe.forEach(t),Wjr=i(ae),rC=n(ae,"LI",{});var XGe=s(rC);gEe=n(XGe,"STRONG",{});var wjt=s(gEe);Hjr=r(wjt,"big_bird"),wjt.forEach(t),Ujr=r(XGe," \u2014 "),WZ=n(XGe,"A",{href:!0});var Ajt=s(WZ);Jjr=r(Ajt,"FlaxBigBirdModel"),Ajt.forEach(t),Yjr=r(XGe," (BigBird model)"),XGe.forEach(t),Kjr=i(ae),tC=n(ae,"LI",{});var zGe=s(tC);hEe=n(zGe,"STRONG",{});var Ljt=s(hEe);Zjr=r(Ljt,"blenderbot"),Ljt.forEach(t),eDr=r(zGe," \u2014 "),HZ=n(zGe,"A",{href:!0});var yjt=s(HZ);oDr=r(yjt,"FlaxBlenderbotModel"),yjt.forEach(t),rDr=r(zGe," (Blenderbot model)"),zGe.forEach(t),tDr=i(ae),aC=n(ae,"LI",{});var QGe=s(aC);pEe=n(QGe,"STRONG",{});var xjt=s(pEe);aDr=r(xjt,"blenderbot-small"),xjt.forEach(t),nDr=r(QGe," \u2014 "),UZ=n(QGe,"A",{href:!0});var $jt=s(UZ);sDr=r($jt,"FlaxBlenderbotSmallModel"),$jt.forEach(t),lDr=r(QGe," (BlenderbotSmall model)"),QGe.forEach(t),iDr=i(ae),nC=n(ae,"LI",{});var WGe=s(nC);_Ee=n(WGe,"STRONG",{});var kjt=s(_Ee);dDr=r(kjt,"clip"),kjt.forEach(t),cDr=r(WGe," \u2014 "),JZ=n(WGe,"A",{href:!0});var Sjt=s(JZ);fDr=r(Sjt,"FlaxCLIPModel"),Sjt.forEach(t),mDr=r(WGe," (CLIP model)"),WGe.forEach(t),gDr=i(ae),sC=n(ae,"LI",{});var HGe=s(sC);uEe=n(HGe,"STRONG",{});var Rjt=s(uEe);hDr=r(Rjt,"distilbert"),Rjt.forEach(t),pDr=r(HGe," \u2014 "),YZ=n(HGe,"A",{href:!0});var Pjt=s(YZ);_Dr=r(Pjt,"FlaxDistilBertModel"),Pjt.forEach(t),uDr=r(HGe," (DistilBERT model)"),HGe.forEach(t),bDr=i(ae),lC=n(ae,"LI",{});var UGe=s(lC);bEe=n(UGe,"STRONG",{});var Bjt=s(bEe);vDr=r(Bjt,"electra"),Bjt.forEach(t),FDr=r(UGe," \u2014 "),KZ=n(UGe,"A",{href:!0});var Njt=s(KZ);TDr=r(Njt,"FlaxElectraModel"),Njt.forEach(t),MDr=r(UGe," (ELECTRA model)"),UGe.forEach(t),EDr=i(ae),iC=n(ae,"LI",{});var JGe=s(iC);vEe=n(JGe,"STRONG",{});var Ijt=s(vEe);CDr=r(Ijt,"gpt2"),Ijt.forEach(t),wDr=r(JGe," \u2014 "),ZZ=n(JGe,"A",{href:!0});var qjt=s(ZZ);ADr=r(qjt,"FlaxGPT2Model"),qjt.forEach(t),LDr=r(JGe," (OpenAI GPT-2 model)"),JGe.forEach(t),yDr=i(ae),dC=n(ae,"LI",{});var YGe=s(dC);FEe=n(YGe,"STRONG",{});var jjt=s(FEe);xDr=r(jjt,"gpt_neo"),jjt.forEach(t),$Dr=r(YGe," \u2014 "),eee=n(YGe,"A",{href:!0});var Djt=s(eee);kDr=r(Djt,"FlaxGPTNeoModel"),Djt.forEach(t),SDr=r(YGe," (GPT Neo model)"),YGe.forEach(t),RDr=i(ae),cC=n(ae,"LI",{});var KGe=s(cC);TEe=n(KGe,"STRONG",{});var Gjt=s(TEe);PDr=r(Gjt,"gptj"),Gjt.forEach(t),BDr=r(KGe," \u2014 "),oee=n(KGe,"A",{href:!0});var Ojt=s(oee);NDr=r(Ojt,"FlaxGPTJModel"),Ojt.forEach(t),IDr=r(KGe," (GPT-J model)"),KGe.forEach(t),qDr=i(ae),fC=n(ae,"LI",{});var ZGe=s(fC);MEe=n(ZGe,"STRONG",{});var Vjt=s(MEe);jDr=r(Vjt,"longt5"),Vjt.forEach(t),DDr=r(ZGe," \u2014 "),ree=n(ZGe,"A",{href:!0});var Xjt=s(ree);GDr=r(Xjt,"FlaxLongT5Model"),Xjt.forEach(t),ODr=r(ZGe," (LongT5 model)"),ZGe.forEach(t),VDr=i(ae),mC=n(ae,"LI",{});var eOe=s(mC);EEe=n(eOe,"STRONG",{});var zjt=s(EEe);XDr=r(zjt,"marian"),zjt.forEach(t),zDr=r(eOe," \u2014 "),tee=n(eOe,"A",{href:!0});var Qjt=s(tee);QDr=r(Qjt,"FlaxMarianModel"),Qjt.forEach(t),WDr=r(eOe," (Marian model)"),eOe.forEach(t),HDr=i(ae),gC=n(ae,"LI",{});var oOe=s(gC);CEe=n(oOe,"STRONG",{});var Wjt=s(CEe);UDr=r(Wjt,"mbart"),Wjt.forEach(t),JDr=r(oOe," \u2014 "),aee=n(oOe,"A",{href:!0});var Hjt=s(aee);YDr=r(Hjt,"FlaxMBartModel"),Hjt.forEach(t),KDr=r(oOe," (mBART model)"),oOe.forEach(t),ZDr=i(ae),hC=n(ae,"LI",{});var rOe=s(hC);wEe=n(rOe,"STRONG",{});var Ujt=s(wEe);eGr=r(Ujt,"mt5"),Ujt.forEach(t),oGr=r(rOe," \u2014 "),nee=n(rOe,"A",{href:!0});var Jjt=s(nee);rGr=r(Jjt,"FlaxMT5Model"),Jjt.forEach(t),tGr=r(rOe," (MT5 model)"),rOe.forEach(t),aGr=i(ae),pC=n(ae,"LI",{});var tOe=s(pC);AEe=n(tOe,"STRONG",{});var Yjt=s(AEe);nGr=r(Yjt,"opt"),Yjt.forEach(t),sGr=r(tOe," \u2014 "),see=n(tOe,"A",{href:!0});var Kjt=s(see);lGr=r(Kjt,"FlaxOPTModel"),Kjt.forEach(t),iGr=r(tOe," (OPT model)"),tOe.forEach(t),dGr=i(ae),_C=n(ae,"LI",{});var aOe=s(_C);LEe=n(aOe,"STRONG",{});var Zjt=s(LEe);cGr=r(Zjt,"pegasus"),Zjt.forEach(t),fGr=r(aOe," \u2014 "),lee=n(aOe,"A",{href:!0});var eDt=s(lee);mGr=r(eDt,"FlaxPegasusModel"),eDt.forEach(t),gGr=r(aOe," (Pegasus model)"),aOe.forEach(t),hGr=i(ae),uC=n(ae,"LI",{});var nOe=s(uC);yEe=n(nOe,"STRONG",{});var oDt=s(yEe);pGr=r(oDt,"roberta"),oDt.forEach(t),_Gr=r(nOe," \u2014 "),iee=n(nOe,"A",{href:!0});var rDt=s(iee);uGr=r(rDt,"FlaxRobertaModel"),rDt.forEach(t),bGr=r(nOe," (RoBERTa model)"),nOe.forEach(t),vGr=i(ae),bC=n(ae,"LI",{});var sOe=s(bC);xEe=n(sOe,"STRONG",{});var tDt=s(xEe);FGr=r(tDt,"roformer"),tDt.forEach(t),TGr=r(sOe," \u2014 "),dee=n(sOe,"A",{href:!0});var aDt=s(dee);MGr=r(aDt,"FlaxRoFormerModel"),aDt.forEach(t),EGr=r(sOe," (RoFormer model)"),sOe.forEach(t),CGr=i(ae),vC=n(ae,"LI",{});var lOe=s(vC);$Ee=n(lOe,"STRONG",{});var nDt=s($Ee);wGr=r(nDt,"t5"),nDt.forEach(t),AGr=r(lOe," \u2014 "),cee=n(lOe,"A",{href:!0});var sDt=s(cee);LGr=r(sDt,"FlaxT5Model"),sDt.forEach(t),yGr=r(lOe," (T5 model)"),lOe.forEach(t),xGr=i(ae),FC=n(ae,"LI",{});var iOe=s(FC);kEe=n(iOe,"STRONG",{});var lDt=s(kEe);$Gr=r(lDt,"vision-text-dual-encoder"),lDt.forEach(t),kGr=r(iOe," \u2014 "),fee=n(iOe,"A",{href:!0});var iDt=s(fee);SGr=r(iDt,"FlaxVisionTextDualEncoderModel"),iDt.forEach(t),RGr=r(iOe," (VisionTextDualEncoder model)"),iOe.forEach(t),PGr=i(ae),TC=n(ae,"LI",{});var dOe=s(TC);SEe=n(dOe,"STRONG",{});var dDt=s(SEe);BGr=r(dDt,"vit"),dDt.forEach(t),NGr=r(dOe," \u2014 "),mee=n(dOe,"A",{href:!0});var cDt=s(mee);IGr=r(cDt,"FlaxViTModel"),cDt.forEach(t),qGr=r(dOe," (ViT model)"),dOe.forEach(t),jGr=i(ae),MC=n(ae,"LI",{});var cOe=s(MC);REe=n(cOe,"STRONG",{});var fDt=s(REe);DGr=r(fDt,"wav2vec2"),fDt.forEach(t),GGr=r(cOe," \u2014 "),gee=n(cOe,"A",{href:!0});var mDt=s(gee);OGr=r(mDt,"FlaxWav2Vec2Model"),mDt.forEach(t),VGr=r(cOe," (Wav2Vec2 model)"),cOe.forEach(t),XGr=i(ae),EC=n(ae,"LI",{});var fOe=s(EC);PEe=n(fOe,"STRONG",{});var gDt=s(PEe);zGr=r(gDt,"xglm"),gDt.forEach(t),QGr=r(fOe," \u2014 "),hee=n(fOe,"A",{href:!0});var hDt=s(hee);WGr=r(hDt,"FlaxXGLMModel"),hDt.forEach(t),HGr=r(fOe," (XGLM model)"),fOe.forEach(t),UGr=i(ae),CC=n(ae,"LI",{});var mOe=s(CC);BEe=n(mOe,"STRONG",{});var pDt=s(BEe);JGr=r(pDt,"xlm-roberta"),pDt.forEach(t),YGr=r(mOe," \u2014 "),pee=n(mOe,"A",{href:!0});var _Dt=s(pee);KGr=r(_Dt,"FlaxXLMRobertaModel"),_Dt.forEach(t),ZGr=r(mOe," (XLM-RoBERTa model)"),mOe.forEach(t),ae.forEach(t),eOr=i(ti),T(wC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),wze=i(f),Jc=n(f,"H2",{class:!0});var PWe=s(Jc);AC=n(PWe,"A",{id:!0,class:!0,href:!0});var uDt=s(AC);NEe=n(uDt,"SPAN",{});var bDt=s(NEe);T(c$.$$.fragment,bDt),bDt.forEach(t),uDt.forEach(t),oOr=i(PWe),IEe=n(PWe,"SPAN",{});var vDt=s(IEe);rOr=r(vDt,"FlaxAutoModelForCausalLM"),vDt.forEach(t),PWe.forEach(t),Aze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(f$.$$.fragment,ai),tOr=i(ai),Yc=n(ai,"P",{});var Jte=s(Yc);aOr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ee=n(Jte,"A",{href:!0});var FDt=s(_ee);nOr=r(FDt,"from_pretrained()"),FDt.forEach(t),sOr=r(Jte," class method or the "),uee=n(Jte,"A",{href:!0});var TDt=s(uee);lOr=r(TDt,"from_config()"),TDt.forEach(t),iOr=r(Jte,` class
method.`),Jte.forEach(t),dOr=i(ai),m$=n(ai,"P",{});var BWe=s(m$);cOr=r(BWe,"This class cannot be instantiated directly using "),qEe=n(BWe,"CODE",{});var MDt=s(qEe);fOr=r(MDt,"__init__()"),MDt.forEach(t),mOr=r(BWe," (throws an error)."),BWe.forEach(t),gOr=i(ai),Wt=n(ai,"DIV",{class:!0});var $6=s(Wt);T(g$.$$.fragment,$6),hOr=i($6),jEe=n($6,"P",{});var EDt=s(jEe);pOr=r(EDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EDt.forEach(t),_Or=i($6),Kc=n($6,"P",{});var Yte=s(Kc);uOr=r(Yte,`Note:
Loading a model from its configuration file does `),DEe=n(Yte,"STRONG",{});var CDt=s(DEe);bOr=r(CDt,"not"),CDt.forEach(t),vOr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=n(Yte,"A",{href:!0});var wDt=s(bee);FOr=r(wDt,"from_pretrained()"),wDt.forEach(t),TOr=r(Yte," to load the model weights."),Yte.forEach(t),MOr=i($6),T(LC.$$.fragment,$6),$6.forEach(t),EOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(h$.$$.fragment,ni),COr=i(ni),GEe=n(ni,"P",{});var ADt=s(GEe);wOr=r(ADt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ADt.forEach(t),AOr=i(ni),Mn=n(ni,"P",{});var k6=s(Mn);LOr=r(k6,"The model class to instantiate is selected based on the "),OEe=n(k6,"CODE",{});var LDt=s(OEe);yOr=r(LDt,"model_type"),LDt.forEach(t),xOr=r(k6,` property of the config object (either
passed as an argument or loaded from `),VEe=n(k6,"CODE",{});var yDt=s(VEe);$Or=r(yDt,"pretrained_model_name_or_path"),yDt.forEach(t),kOr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(k6,"CODE",{});var xDt=s(XEe);SOr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),ROr=r(k6,":"),k6.forEach(t),POr=i(ni),xe=n(ni,"UL",{});var Ie=s(xe);yC=n(Ie,"LI",{});var gOe=s(yC);zEe=n(gOe,"STRONG",{});var $Dt=s(zEe);BOr=r($Dt,"bart"),$Dt.forEach(t),NOr=r(gOe," \u2014 "),vee=n(gOe,"A",{href:!0});var kDt=s(vee);IOr=r(kDt,"FlaxBartForCausalLM"),kDt.forEach(t),qOr=r(gOe," (BART model)"),gOe.forEach(t),jOr=i(Ie),xC=n(Ie,"LI",{});var hOe=s(xC);QEe=n(hOe,"STRONG",{});var SDt=s(QEe);DOr=r(SDt,"bert"),SDt.forEach(t),GOr=r(hOe," \u2014 "),Fee=n(hOe,"A",{href:!0});var RDt=s(Fee);OOr=r(RDt,"FlaxBertForCausalLM"),RDt.forEach(t),VOr=r(hOe," (BERT model)"),hOe.forEach(t),XOr=i(Ie),$C=n(Ie,"LI",{});var pOe=s($C);WEe=n(pOe,"STRONG",{});var PDt=s(WEe);zOr=r(PDt,"big_bird"),PDt.forEach(t),QOr=r(pOe," \u2014 "),Tee=n(pOe,"A",{href:!0});var BDt=s(Tee);WOr=r(BDt,"FlaxBigBirdForCausalLM"),BDt.forEach(t),HOr=r(pOe," (BigBird model)"),pOe.forEach(t),UOr=i(Ie),kC=n(Ie,"LI",{});var _Oe=s(kC);HEe=n(_Oe,"STRONG",{});var NDt=s(HEe);JOr=r(NDt,"electra"),NDt.forEach(t),YOr=r(_Oe," \u2014 "),Mee=n(_Oe,"A",{href:!0});var IDt=s(Mee);KOr=r(IDt,"FlaxElectraForCausalLM"),IDt.forEach(t),ZOr=r(_Oe," (ELECTRA model)"),_Oe.forEach(t),eVr=i(Ie),SC=n(Ie,"LI",{});var uOe=s(SC);UEe=n(uOe,"STRONG",{});var qDt=s(UEe);oVr=r(qDt,"gpt2"),qDt.forEach(t),rVr=r(uOe," \u2014 "),Eee=n(uOe,"A",{href:!0});var jDt=s(Eee);tVr=r(jDt,"FlaxGPT2LMHeadModel"),jDt.forEach(t),aVr=r(uOe," (OpenAI GPT-2 model)"),uOe.forEach(t),nVr=i(Ie),RC=n(Ie,"LI",{});var bOe=s(RC);JEe=n(bOe,"STRONG",{});var DDt=s(JEe);sVr=r(DDt,"gpt_neo"),DDt.forEach(t),lVr=r(bOe," \u2014 "),Cee=n(bOe,"A",{href:!0});var GDt=s(Cee);iVr=r(GDt,"FlaxGPTNeoForCausalLM"),GDt.forEach(t),dVr=r(bOe," (GPT Neo model)"),bOe.forEach(t),cVr=i(Ie),PC=n(Ie,"LI",{});var vOe=s(PC);YEe=n(vOe,"STRONG",{});var ODt=s(YEe);fVr=r(ODt,"gptj"),ODt.forEach(t),mVr=r(vOe," \u2014 "),wee=n(vOe,"A",{href:!0});var VDt=s(wee);gVr=r(VDt,"FlaxGPTJForCausalLM"),VDt.forEach(t),hVr=r(vOe," (GPT-J model)"),vOe.forEach(t),pVr=i(Ie),BC=n(Ie,"LI",{});var FOe=s(BC);KEe=n(FOe,"STRONG",{});var XDt=s(KEe);_Vr=r(XDt,"opt"),XDt.forEach(t),uVr=r(FOe," \u2014 "),Aee=n(FOe,"A",{href:!0});var zDt=s(Aee);bVr=r(zDt,"FlaxOPTForCausalLM"),zDt.forEach(t),vVr=r(FOe," (OPT model)"),FOe.forEach(t),FVr=i(Ie),NC=n(Ie,"LI",{});var TOe=s(NC);ZEe=n(TOe,"STRONG",{});var QDt=s(ZEe);TVr=r(QDt,"roberta"),QDt.forEach(t),MVr=r(TOe," \u2014 "),Lee=n(TOe,"A",{href:!0});var WDt=s(Lee);EVr=r(WDt,"FlaxRobertaForCausalLM"),WDt.forEach(t),CVr=r(TOe," (RoBERTa model)"),TOe.forEach(t),wVr=i(Ie),IC=n(Ie,"LI",{});var MOe=s(IC);eCe=n(MOe,"STRONG",{});var HDt=s(eCe);AVr=r(HDt,"xglm"),HDt.forEach(t),LVr=r(MOe," \u2014 "),yee=n(MOe,"A",{href:!0});var UDt=s(yee);yVr=r(UDt,"FlaxXGLMForCausalLM"),UDt.forEach(t),xVr=r(MOe," (XGLM model)"),MOe.forEach(t),Ie.forEach(t),$Vr=i(ni),T(qC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Lze=i(f),Zc=n(f,"H2",{class:!0});var NWe=s(Zc);jC=n(NWe,"A",{id:!0,class:!0,href:!0});var JDt=s(jC);oCe=n(JDt,"SPAN",{});var YDt=s(oCe);T(p$.$$.fragment,YDt),YDt.forEach(t),JDt.forEach(t),kVr=i(NWe),rCe=n(NWe,"SPAN",{});var KDt=s(rCe);SVr=r(KDt,"FlaxAutoModelForPreTraining"),KDt.forEach(t),NWe.forEach(t),yze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(_$.$$.fragment,si),RVr=i(si),ef=n(si,"P",{});var Kte=s(ef);PVr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=n(Kte,"A",{href:!0});var ZDt=s(xee);BVr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),NVr=r(Kte," class method or the "),$ee=n(Kte,"A",{href:!0});var eGt=s($ee);IVr=r(eGt,"from_config()"),eGt.forEach(t),qVr=r(Kte,` class
method.`),Kte.forEach(t),jVr=i(si),u$=n(si,"P",{});var IWe=s(u$);DVr=r(IWe,"This class cannot be instantiated directly using "),tCe=n(IWe,"CODE",{});var oGt=s(tCe);GVr=r(oGt,"__init__()"),oGt.forEach(t),OVr=r(IWe," (throws an error)."),IWe.forEach(t),VVr=i(si),Ht=n(si,"DIV",{class:!0});var S6=s(Ht);T(b$.$$.fragment,S6),XVr=i(S6),aCe=n(S6,"P",{});var rGt=s(aCe);zVr=r(rGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rGt.forEach(t),QVr=i(S6),of=n(S6,"P",{});var Zte=s(of);WVr=r(Zte,`Note:
Loading a model from its configuration file does `),nCe=n(Zte,"STRONG",{});var tGt=s(nCe);HVr=r(tGt,"not"),tGt.forEach(t),UVr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=n(Zte,"A",{href:!0});var aGt=s(kee);JVr=r(aGt,"from_pretrained()"),aGt.forEach(t),YVr=r(Zte," to load the model weights."),Zte.forEach(t),KVr=i(S6),T(DC.$$.fragment,S6),S6.forEach(t),ZVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(v$.$$.fragment,li),eXr=i(li),sCe=n(li,"P",{});var nGt=s(sCe);oXr=r(nGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nGt.forEach(t),rXr=i(li),En=n(li,"P",{});var R6=s(En);tXr=r(R6,"The model class to instantiate is selected based on the "),lCe=n(R6,"CODE",{});var sGt=s(lCe);aXr=r(sGt,"model_type"),sGt.forEach(t),nXr=r(R6,` property of the config object (either
passed as an argument or loaded from `),iCe=n(R6,"CODE",{});var lGt=s(iCe);sXr=r(lGt,"pretrained_model_name_or_path"),lGt.forEach(t),lXr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(R6,"CODE",{});var iGt=s(dCe);iXr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),dXr=r(R6,":"),R6.forEach(t),cXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);GC=n(we,"LI",{});var EOe=s(GC);cCe=n(EOe,"STRONG",{});var dGt=s(cCe);fXr=r(dGt,"albert"),dGt.forEach(t),mXr=r(EOe," \u2014 "),See=n(EOe,"A",{href:!0});var cGt=s(See);gXr=r(cGt,"FlaxAlbertForPreTraining"),cGt.forEach(t),hXr=r(EOe," (ALBERT model)"),EOe.forEach(t),pXr=i(we),OC=n(we,"LI",{});var COe=s(OC);fCe=n(COe,"STRONG",{});var fGt=s(fCe);_Xr=r(fGt,"bart"),fGt.forEach(t),uXr=r(COe," \u2014 "),Ree=n(COe,"A",{href:!0});var mGt=s(Ree);bXr=r(mGt,"FlaxBartForConditionalGeneration"),mGt.forEach(t),vXr=r(COe," (BART model)"),COe.forEach(t),FXr=i(we),VC=n(we,"LI",{});var wOe=s(VC);mCe=n(wOe,"STRONG",{});var gGt=s(mCe);TXr=r(gGt,"bert"),gGt.forEach(t),MXr=r(wOe," \u2014 "),Pee=n(wOe,"A",{href:!0});var hGt=s(Pee);EXr=r(hGt,"FlaxBertForPreTraining"),hGt.forEach(t),CXr=r(wOe," (BERT model)"),wOe.forEach(t),wXr=i(we),XC=n(we,"LI",{});var AOe=s(XC);gCe=n(AOe,"STRONG",{});var pGt=s(gCe);AXr=r(pGt,"big_bird"),pGt.forEach(t),LXr=r(AOe," \u2014 "),Bee=n(AOe,"A",{href:!0});var _Gt=s(Bee);yXr=r(_Gt,"FlaxBigBirdForPreTraining"),_Gt.forEach(t),xXr=r(AOe," (BigBird model)"),AOe.forEach(t),$Xr=i(we),zC=n(we,"LI",{});var LOe=s(zC);hCe=n(LOe,"STRONG",{});var uGt=s(hCe);kXr=r(uGt,"electra"),uGt.forEach(t),SXr=r(LOe," \u2014 "),Nee=n(LOe,"A",{href:!0});var bGt=s(Nee);RXr=r(bGt,"FlaxElectraForPreTraining"),bGt.forEach(t),PXr=r(LOe," (ELECTRA model)"),LOe.forEach(t),BXr=i(we),QC=n(we,"LI",{});var yOe=s(QC);pCe=n(yOe,"STRONG",{});var vGt=s(pCe);NXr=r(vGt,"longt5"),vGt.forEach(t),IXr=r(yOe," \u2014 "),Iee=n(yOe,"A",{href:!0});var FGt=s(Iee);qXr=r(FGt,"FlaxLongT5ForConditionalGeneration"),FGt.forEach(t),jXr=r(yOe," (LongT5 model)"),yOe.forEach(t),DXr=i(we),WC=n(we,"LI",{});var xOe=s(WC);_Ce=n(xOe,"STRONG",{});var TGt=s(_Ce);GXr=r(TGt,"mbart"),TGt.forEach(t),OXr=r(xOe," \u2014 "),qee=n(xOe,"A",{href:!0});var MGt=s(qee);VXr=r(MGt,"FlaxMBartForConditionalGeneration"),MGt.forEach(t),XXr=r(xOe," (mBART model)"),xOe.forEach(t),zXr=i(we),HC=n(we,"LI",{});var $Oe=s(HC);uCe=n($Oe,"STRONG",{});var EGt=s(uCe);QXr=r(EGt,"mt5"),EGt.forEach(t),WXr=r($Oe," \u2014 "),jee=n($Oe,"A",{href:!0});var CGt=s(jee);HXr=r(CGt,"FlaxMT5ForConditionalGeneration"),CGt.forEach(t),UXr=r($Oe," (MT5 model)"),$Oe.forEach(t),JXr=i(we),UC=n(we,"LI",{});var kOe=s(UC);bCe=n(kOe,"STRONG",{});var wGt=s(bCe);YXr=r(wGt,"roberta"),wGt.forEach(t),KXr=r(kOe," \u2014 "),Dee=n(kOe,"A",{href:!0});var AGt=s(Dee);ZXr=r(AGt,"FlaxRobertaForMaskedLM"),AGt.forEach(t),ezr=r(kOe," (RoBERTa model)"),kOe.forEach(t),ozr=i(we),JC=n(we,"LI",{});var SOe=s(JC);vCe=n(SOe,"STRONG",{});var LGt=s(vCe);rzr=r(LGt,"roformer"),LGt.forEach(t),tzr=r(SOe," \u2014 "),Gee=n(SOe,"A",{href:!0});var yGt=s(Gee);azr=r(yGt,"FlaxRoFormerForMaskedLM"),yGt.forEach(t),nzr=r(SOe," (RoFormer model)"),SOe.forEach(t),szr=i(we),YC=n(we,"LI",{});var ROe=s(YC);FCe=n(ROe,"STRONG",{});var xGt=s(FCe);lzr=r(xGt,"t5"),xGt.forEach(t),izr=r(ROe," \u2014 "),Oee=n(ROe,"A",{href:!0});var $Gt=s(Oee);dzr=r($Gt,"FlaxT5ForConditionalGeneration"),$Gt.forEach(t),czr=r(ROe," (T5 model)"),ROe.forEach(t),fzr=i(we),KC=n(we,"LI",{});var POe=s(KC);TCe=n(POe,"STRONG",{});var kGt=s(TCe);mzr=r(kGt,"wav2vec2"),kGt.forEach(t),gzr=r(POe," \u2014 "),Vee=n(POe,"A",{href:!0});var SGt=s(Vee);hzr=r(SGt,"FlaxWav2Vec2ForPreTraining"),SGt.forEach(t),pzr=r(POe," (Wav2Vec2 model)"),POe.forEach(t),_zr=i(we),ZC=n(we,"LI",{});var BOe=s(ZC);MCe=n(BOe,"STRONG",{});var RGt=s(MCe);uzr=r(RGt,"xlm-roberta"),RGt.forEach(t),bzr=r(BOe," \u2014 "),Xee=n(BOe,"A",{href:!0});var PGt=s(Xee);vzr=r(PGt,"FlaxXLMRobertaForMaskedLM"),PGt.forEach(t),Fzr=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),we.forEach(t),Tzr=i(li),T(e3.$$.fragment,li),li.forEach(t),si.forEach(t),xze=i(f),rf=n(f,"H2",{class:!0});var qWe=s(rf);o3=n(qWe,"A",{id:!0,class:!0,href:!0});var BGt=s(o3);ECe=n(BGt,"SPAN",{});var NGt=s(ECe);T(F$.$$.fragment,NGt),NGt.forEach(t),BGt.forEach(t),Mzr=i(qWe),CCe=n(qWe,"SPAN",{});var IGt=s(CCe);Ezr=r(IGt,"FlaxAutoModelForMaskedLM"),IGt.forEach(t),qWe.forEach(t),$ze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(T$.$$.fragment,ii),Czr=i(ii),tf=n(ii,"P",{});var eae=s(tf);wzr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=n(eae,"A",{href:!0});var qGt=s(zee);Azr=r(qGt,"from_pretrained()"),qGt.forEach(t),Lzr=r(eae," class method or the "),Qee=n(eae,"A",{href:!0});var jGt=s(Qee);yzr=r(jGt,"from_config()"),jGt.forEach(t),xzr=r(eae,` class
method.`),eae.forEach(t),$zr=i(ii),M$=n(ii,"P",{});var jWe=s(M$);kzr=r(jWe,"This class cannot be instantiated directly using "),wCe=n(jWe,"CODE",{});var DGt=s(wCe);Szr=r(DGt,"__init__()"),DGt.forEach(t),Rzr=r(jWe," (throws an error)."),jWe.forEach(t),Pzr=i(ii),Ut=n(ii,"DIV",{class:!0});var P6=s(Ut);T(E$.$$.fragment,P6),Bzr=i(P6),ACe=n(P6,"P",{});var GGt=s(ACe);Nzr=r(GGt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GGt.forEach(t),Izr=i(P6),af=n(P6,"P",{});var oae=s(af);qzr=r(oae,`Note:
Loading a model from its configuration file does `),LCe=n(oae,"STRONG",{});var OGt=s(LCe);jzr=r(OGt,"not"),OGt.forEach(t),Dzr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(oae,"A",{href:!0});var VGt=s(Wee);Gzr=r(VGt,"from_pretrained()"),VGt.forEach(t),Ozr=r(oae," to load the model weights."),oae.forEach(t),Vzr=i(P6),T(r3.$$.fragment,P6),P6.forEach(t),Xzr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(C$.$$.fragment,di),zzr=i(di),yCe=n(di,"P",{});var XGt=s(yCe);Qzr=r(XGt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XGt.forEach(t),Wzr=i(di),Cn=n(di,"P",{});var B6=s(Cn);Hzr=r(B6,"The model class to instantiate is selected based on the "),xCe=n(B6,"CODE",{});var zGt=s(xCe);Uzr=r(zGt,"model_type"),zGt.forEach(t),Jzr=r(B6,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(B6,"CODE",{});var QGt=s($Ce);Yzr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),Kzr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(B6,"CODE",{});var WGt=s(kCe);Zzr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),eQr=r(B6,":"),B6.forEach(t),oQr=i(di),$e=n(di,"UL",{});var qe=s($e);t3=n(qe,"LI",{});var NOe=s(t3);SCe=n(NOe,"STRONG",{});var HGt=s(SCe);rQr=r(HGt,"albert"),HGt.forEach(t),tQr=r(NOe," \u2014 "),Hee=n(NOe,"A",{href:!0});var UGt=s(Hee);aQr=r(UGt,"FlaxAlbertForMaskedLM"),UGt.forEach(t),nQr=r(NOe," (ALBERT model)"),NOe.forEach(t),sQr=i(qe),a3=n(qe,"LI",{});var IOe=s(a3);RCe=n(IOe,"STRONG",{});var JGt=s(RCe);lQr=r(JGt,"bart"),JGt.forEach(t),iQr=r(IOe," \u2014 "),Uee=n(IOe,"A",{href:!0});var YGt=s(Uee);dQr=r(YGt,"FlaxBartForConditionalGeneration"),YGt.forEach(t),cQr=r(IOe," (BART model)"),IOe.forEach(t),fQr=i(qe),n3=n(qe,"LI",{});var qOe=s(n3);PCe=n(qOe,"STRONG",{});var KGt=s(PCe);mQr=r(KGt,"bert"),KGt.forEach(t),gQr=r(qOe," \u2014 "),Jee=n(qOe,"A",{href:!0});var ZGt=s(Jee);hQr=r(ZGt,"FlaxBertForMaskedLM"),ZGt.forEach(t),pQr=r(qOe," (BERT model)"),qOe.forEach(t),_Qr=i(qe),s3=n(qe,"LI",{});var jOe=s(s3);BCe=n(jOe,"STRONG",{});var eOt=s(BCe);uQr=r(eOt,"big_bird"),eOt.forEach(t),bQr=r(jOe," \u2014 "),Yee=n(jOe,"A",{href:!0});var oOt=s(Yee);vQr=r(oOt,"FlaxBigBirdForMaskedLM"),oOt.forEach(t),FQr=r(jOe," (BigBird model)"),jOe.forEach(t),TQr=i(qe),l3=n(qe,"LI",{});var DOe=s(l3);NCe=n(DOe,"STRONG",{});var rOt=s(NCe);MQr=r(rOt,"distilbert"),rOt.forEach(t),EQr=r(DOe," \u2014 "),Kee=n(DOe,"A",{href:!0});var tOt=s(Kee);CQr=r(tOt,"FlaxDistilBertForMaskedLM"),tOt.forEach(t),wQr=r(DOe," (DistilBERT model)"),DOe.forEach(t),AQr=i(qe),i3=n(qe,"LI",{});var GOe=s(i3);ICe=n(GOe,"STRONG",{});var aOt=s(ICe);LQr=r(aOt,"electra"),aOt.forEach(t),yQr=r(GOe," \u2014 "),Zee=n(GOe,"A",{href:!0});var nOt=s(Zee);xQr=r(nOt,"FlaxElectraForMaskedLM"),nOt.forEach(t),$Qr=r(GOe," (ELECTRA model)"),GOe.forEach(t),kQr=i(qe),d3=n(qe,"LI",{});var OOe=s(d3);qCe=n(OOe,"STRONG",{});var sOt=s(qCe);SQr=r(sOt,"mbart"),sOt.forEach(t),RQr=r(OOe," \u2014 "),eoe=n(OOe,"A",{href:!0});var lOt=s(eoe);PQr=r(lOt,"FlaxMBartForConditionalGeneration"),lOt.forEach(t),BQr=r(OOe," (mBART model)"),OOe.forEach(t),NQr=i(qe),c3=n(qe,"LI",{});var VOe=s(c3);jCe=n(VOe,"STRONG",{});var iOt=s(jCe);IQr=r(iOt,"roberta"),iOt.forEach(t),qQr=r(VOe," \u2014 "),ooe=n(VOe,"A",{href:!0});var dOt=s(ooe);jQr=r(dOt,"FlaxRobertaForMaskedLM"),dOt.forEach(t),DQr=r(VOe," (RoBERTa model)"),VOe.forEach(t),GQr=i(qe),f3=n(qe,"LI",{});var XOe=s(f3);DCe=n(XOe,"STRONG",{});var cOt=s(DCe);OQr=r(cOt,"roformer"),cOt.forEach(t),VQr=r(XOe," \u2014 "),roe=n(XOe,"A",{href:!0});var fOt=s(roe);XQr=r(fOt,"FlaxRoFormerForMaskedLM"),fOt.forEach(t),zQr=r(XOe," (RoFormer model)"),XOe.forEach(t),QQr=i(qe),m3=n(qe,"LI",{});var zOe=s(m3);GCe=n(zOe,"STRONG",{});var mOt=s(GCe);WQr=r(mOt,"xlm-roberta"),mOt.forEach(t),HQr=r(zOe," \u2014 "),toe=n(zOe,"A",{href:!0});var gOt=s(toe);UQr=r(gOt,"FlaxXLMRobertaForMaskedLM"),gOt.forEach(t),JQr=r(zOe," (XLM-RoBERTa model)"),zOe.forEach(t),qe.forEach(t),YQr=i(di),T(g3.$$.fragment,di),di.forEach(t),ii.forEach(t),kze=i(f),nf=n(f,"H2",{class:!0});var DWe=s(nf);h3=n(DWe,"A",{id:!0,class:!0,href:!0});var hOt=s(h3);OCe=n(hOt,"SPAN",{});var pOt=s(OCe);T(w$.$$.fragment,pOt),pOt.forEach(t),hOt.forEach(t),KQr=i(DWe),VCe=n(DWe,"SPAN",{});var _Ot=s(VCe);ZQr=r(_Ot,"FlaxAutoModelForSeq2SeqLM"),_Ot.forEach(t),DWe.forEach(t),Sze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(A$.$$.fragment,ci),eWr=i(ci),sf=n(ci,"P",{});var rae=s(sf);oWr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=n(rae,"A",{href:!0});var uOt=s(aoe);rWr=r(uOt,"from_pretrained()"),uOt.forEach(t),tWr=r(rae," class method or the "),noe=n(rae,"A",{href:!0});var bOt=s(noe);aWr=r(bOt,"from_config()"),bOt.forEach(t),nWr=r(rae,` class
method.`),rae.forEach(t),sWr=i(ci),L$=n(ci,"P",{});var GWe=s(L$);lWr=r(GWe,"This class cannot be instantiated directly using "),XCe=n(GWe,"CODE",{});var vOt=s(XCe);iWr=r(vOt,"__init__()"),vOt.forEach(t),dWr=r(GWe," (throws an error)."),GWe.forEach(t),cWr=i(ci),Jt=n(ci,"DIV",{class:!0});var N6=s(Jt);T(y$.$$.fragment,N6),fWr=i(N6),zCe=n(N6,"P",{});var FOt=s(zCe);mWr=r(FOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FOt.forEach(t),gWr=i(N6),lf=n(N6,"P",{});var tae=s(lf);hWr=r(tae,`Note:
Loading a model from its configuration file does `),QCe=n(tae,"STRONG",{});var TOt=s(QCe);pWr=r(TOt,"not"),TOt.forEach(t),_Wr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(tae,"A",{href:!0});var MOt=s(soe);uWr=r(MOt,"from_pretrained()"),MOt.forEach(t),bWr=r(tae," to load the model weights."),tae.forEach(t),vWr=i(N6),T(p3.$$.fragment,N6),N6.forEach(t),FWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(x$.$$.fragment,fi),TWr=i(fi),WCe=n(fi,"P",{});var EOt=s(WCe);MWr=r(EOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EOt.forEach(t),EWr=i(fi),wn=n(fi,"P",{});var I6=s(wn);CWr=r(I6,"The model class to instantiate is selected based on the "),HCe=n(I6,"CODE",{});var COt=s(HCe);wWr=r(COt,"model_type"),COt.forEach(t),AWr=r(I6,` property of the config object (either
passed as an argument or loaded from `),UCe=n(I6,"CODE",{});var wOt=s(UCe);LWr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),yWr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=n(I6,"CODE",{});var AOt=s(JCe);xWr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),$Wr=r(I6,":"),I6.forEach(t),kWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);_3=n(je,"LI",{});var QOe=s(_3);YCe=n(QOe,"STRONG",{});var LOt=s(YCe);SWr=r(LOt,"bart"),LOt.forEach(t),RWr=r(QOe," \u2014 "),loe=n(QOe,"A",{href:!0});var yOt=s(loe);PWr=r(yOt,"FlaxBartForConditionalGeneration"),yOt.forEach(t),BWr=r(QOe," (BART model)"),QOe.forEach(t),NWr=i(je),u3=n(je,"LI",{});var WOe=s(u3);KCe=n(WOe,"STRONG",{});var xOt=s(KCe);IWr=r(xOt,"blenderbot"),xOt.forEach(t),qWr=r(WOe," \u2014 "),ioe=n(WOe,"A",{href:!0});var $Ot=s(ioe);jWr=r($Ot,"FlaxBlenderbotForConditionalGeneration"),$Ot.forEach(t),DWr=r(WOe," (Blenderbot model)"),WOe.forEach(t),GWr=i(je),b3=n(je,"LI",{});var HOe=s(b3);ZCe=n(HOe,"STRONG",{});var kOt=s(ZCe);OWr=r(kOt,"blenderbot-small"),kOt.forEach(t),VWr=r(HOe," \u2014 "),doe=n(HOe,"A",{href:!0});var SOt=s(doe);XWr=r(SOt,"FlaxBlenderbotSmallForConditionalGeneration"),SOt.forEach(t),zWr=r(HOe," (BlenderbotSmall model)"),HOe.forEach(t),QWr=i(je),v3=n(je,"LI",{});var UOe=s(v3);e3e=n(UOe,"STRONG",{});var ROt=s(e3e);WWr=r(ROt,"encoder-decoder"),ROt.forEach(t),HWr=r(UOe," \u2014 "),coe=n(UOe,"A",{href:!0});var POt=s(coe);UWr=r(POt,"FlaxEncoderDecoderModel"),POt.forEach(t),JWr=r(UOe," (Encoder decoder model)"),UOe.forEach(t),YWr=i(je),F3=n(je,"LI",{});var JOe=s(F3);o3e=n(JOe,"STRONG",{});var BOt=s(o3e);KWr=r(BOt,"longt5"),BOt.forEach(t),ZWr=r(JOe," \u2014 "),foe=n(JOe,"A",{href:!0});var NOt=s(foe);eHr=r(NOt,"FlaxLongT5ForConditionalGeneration"),NOt.forEach(t),oHr=r(JOe," (LongT5 model)"),JOe.forEach(t),rHr=i(je),T3=n(je,"LI",{});var YOe=s(T3);r3e=n(YOe,"STRONG",{});var IOt=s(r3e);tHr=r(IOt,"marian"),IOt.forEach(t),aHr=r(YOe," \u2014 "),moe=n(YOe,"A",{href:!0});var qOt=s(moe);nHr=r(qOt,"FlaxMarianMTModel"),qOt.forEach(t),sHr=r(YOe," (Marian model)"),YOe.forEach(t),lHr=i(je),M3=n(je,"LI",{});var KOe=s(M3);t3e=n(KOe,"STRONG",{});var jOt=s(t3e);iHr=r(jOt,"mbart"),jOt.forEach(t),dHr=r(KOe," \u2014 "),goe=n(KOe,"A",{href:!0});var DOt=s(goe);cHr=r(DOt,"FlaxMBartForConditionalGeneration"),DOt.forEach(t),fHr=r(KOe," (mBART model)"),KOe.forEach(t),mHr=i(je),E3=n(je,"LI",{});var ZOe=s(E3);a3e=n(ZOe,"STRONG",{});var GOt=s(a3e);gHr=r(GOt,"mt5"),GOt.forEach(t),hHr=r(ZOe," \u2014 "),hoe=n(ZOe,"A",{href:!0});var OOt=s(hoe);pHr=r(OOt,"FlaxMT5ForConditionalGeneration"),OOt.forEach(t),_Hr=r(ZOe," (MT5 model)"),ZOe.forEach(t),uHr=i(je),C3=n(je,"LI",{});var eVe=s(C3);n3e=n(eVe,"STRONG",{});var VOt=s(n3e);bHr=r(VOt,"pegasus"),VOt.forEach(t),vHr=r(eVe," \u2014 "),poe=n(eVe,"A",{href:!0});var XOt=s(poe);FHr=r(XOt,"FlaxPegasusForConditionalGeneration"),XOt.forEach(t),THr=r(eVe," (Pegasus model)"),eVe.forEach(t),MHr=i(je),w3=n(je,"LI",{});var oVe=s(w3);s3e=n(oVe,"STRONG",{});var zOt=s(s3e);EHr=r(zOt,"t5"),zOt.forEach(t),CHr=r(oVe," \u2014 "),_oe=n(oVe,"A",{href:!0});var QOt=s(_oe);wHr=r(QOt,"FlaxT5ForConditionalGeneration"),QOt.forEach(t),AHr=r(oVe," (T5 model)"),oVe.forEach(t),je.forEach(t),LHr=i(fi),T(A3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Rze=i(f),df=n(f,"H2",{class:!0});var OWe=s(df);L3=n(OWe,"A",{id:!0,class:!0,href:!0});var WOt=s(L3);l3e=n(WOt,"SPAN",{});var HOt=s(l3e);T($$.$$.fragment,HOt),HOt.forEach(t),WOt.forEach(t),yHr=i(OWe),i3e=n(OWe,"SPAN",{});var UOt=s(i3e);xHr=r(UOt,"FlaxAutoModelForSequenceClassification"),UOt.forEach(t),OWe.forEach(t),Pze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(k$.$$.fragment,mi),$Hr=i(mi),cf=n(mi,"P",{});var aae=s(cf);kHr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=n(aae,"A",{href:!0});var JOt=s(uoe);SHr=r(JOt,"from_pretrained()"),JOt.forEach(t),RHr=r(aae," class method or the "),boe=n(aae,"A",{href:!0});var YOt=s(boe);PHr=r(YOt,"from_config()"),YOt.forEach(t),BHr=r(aae,` class
method.`),aae.forEach(t),NHr=i(mi),S$=n(mi,"P",{});var VWe=s(S$);IHr=r(VWe,"This class cannot be instantiated directly using "),d3e=n(VWe,"CODE",{});var KOt=s(d3e);qHr=r(KOt,"__init__()"),KOt.forEach(t),jHr=r(VWe," (throws an error)."),VWe.forEach(t),DHr=i(mi),Yt=n(mi,"DIV",{class:!0});var q6=s(Yt);T(R$.$$.fragment,q6),GHr=i(q6),c3e=n(q6,"P",{});var ZOt=s(c3e);OHr=r(ZOt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZOt.forEach(t),VHr=i(q6),ff=n(q6,"P",{});var nae=s(ff);XHr=r(nae,`Note:
Loading a model from its configuration file does `),f3e=n(nae,"STRONG",{});var eVt=s(f3e);zHr=r(eVt,"not"),eVt.forEach(t),QHr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(nae,"A",{href:!0});var oVt=s(voe);WHr=r(oVt,"from_pretrained()"),oVt.forEach(t),HHr=r(nae," to load the model weights."),nae.forEach(t),UHr=i(q6),T(y3.$$.fragment,q6),q6.forEach(t),JHr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(P$.$$.fragment,gi),YHr=i(gi),m3e=n(gi,"P",{});var rVt=s(m3e);KHr=r(rVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rVt.forEach(t),ZHr=i(gi),An=n(gi,"P",{});var j6=s(An);eUr=r(j6,"The model class to instantiate is selected based on the "),g3e=n(j6,"CODE",{});var tVt=s(g3e);oUr=r(tVt,"model_type"),tVt.forEach(t),rUr=r(j6,` property of the config object (either
passed as an argument or loaded from `),h3e=n(j6,"CODE",{});var aVt=s(h3e);tUr=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),aUr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(j6,"CODE",{});var nVt=s(p3e);nUr=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),sUr=r(j6,":"),j6.forEach(t),lUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);x3=n(De,"LI",{});var rVe=s(x3);_3e=n(rVe,"STRONG",{});var sVt=s(_3e);iUr=r(sVt,"albert"),sVt.forEach(t),dUr=r(rVe," \u2014 "),Foe=n(rVe,"A",{href:!0});var lVt=s(Foe);cUr=r(lVt,"FlaxAlbertForSequenceClassification"),lVt.forEach(t),fUr=r(rVe," (ALBERT model)"),rVe.forEach(t),mUr=i(De),$3=n(De,"LI",{});var tVe=s($3);u3e=n(tVe,"STRONG",{});var iVt=s(u3e);gUr=r(iVt,"bart"),iVt.forEach(t),hUr=r(tVe," \u2014 "),Toe=n(tVe,"A",{href:!0});var dVt=s(Toe);pUr=r(dVt,"FlaxBartForSequenceClassification"),dVt.forEach(t),_Ur=r(tVe," (BART model)"),tVe.forEach(t),uUr=i(De),k3=n(De,"LI",{});var aVe=s(k3);b3e=n(aVe,"STRONG",{});var cVt=s(b3e);bUr=r(cVt,"bert"),cVt.forEach(t),vUr=r(aVe," \u2014 "),Moe=n(aVe,"A",{href:!0});var fVt=s(Moe);FUr=r(fVt,"FlaxBertForSequenceClassification"),fVt.forEach(t),TUr=r(aVe," (BERT model)"),aVe.forEach(t),MUr=i(De),S3=n(De,"LI",{});var nVe=s(S3);v3e=n(nVe,"STRONG",{});var mVt=s(v3e);EUr=r(mVt,"big_bird"),mVt.forEach(t),CUr=r(nVe," \u2014 "),Eoe=n(nVe,"A",{href:!0});var gVt=s(Eoe);wUr=r(gVt,"FlaxBigBirdForSequenceClassification"),gVt.forEach(t),AUr=r(nVe," (BigBird model)"),nVe.forEach(t),LUr=i(De),R3=n(De,"LI",{});var sVe=s(R3);F3e=n(sVe,"STRONG",{});var hVt=s(F3e);yUr=r(hVt,"distilbert"),hVt.forEach(t),xUr=r(sVe," \u2014 "),Coe=n(sVe,"A",{href:!0});var pVt=s(Coe);$Ur=r(pVt,"FlaxDistilBertForSequenceClassification"),pVt.forEach(t),kUr=r(sVe," (DistilBERT model)"),sVe.forEach(t),SUr=i(De),P3=n(De,"LI",{});var lVe=s(P3);T3e=n(lVe,"STRONG",{});var _Vt=s(T3e);RUr=r(_Vt,"electra"),_Vt.forEach(t),PUr=r(lVe," \u2014 "),woe=n(lVe,"A",{href:!0});var uVt=s(woe);BUr=r(uVt,"FlaxElectraForSequenceClassification"),uVt.forEach(t),NUr=r(lVe," (ELECTRA model)"),lVe.forEach(t),IUr=i(De),B3=n(De,"LI",{});var iVe=s(B3);M3e=n(iVe,"STRONG",{});var bVt=s(M3e);qUr=r(bVt,"mbart"),bVt.forEach(t),jUr=r(iVe," \u2014 "),Aoe=n(iVe,"A",{href:!0});var vVt=s(Aoe);DUr=r(vVt,"FlaxMBartForSequenceClassification"),vVt.forEach(t),GUr=r(iVe," (mBART model)"),iVe.forEach(t),OUr=i(De),N3=n(De,"LI",{});var dVe=s(N3);E3e=n(dVe,"STRONG",{});var FVt=s(E3e);VUr=r(FVt,"roberta"),FVt.forEach(t),XUr=r(dVe," \u2014 "),Loe=n(dVe,"A",{href:!0});var TVt=s(Loe);zUr=r(TVt,"FlaxRobertaForSequenceClassification"),TVt.forEach(t),QUr=r(dVe," (RoBERTa model)"),dVe.forEach(t),WUr=i(De),I3=n(De,"LI",{});var cVe=s(I3);C3e=n(cVe,"STRONG",{});var MVt=s(C3e);HUr=r(MVt,"roformer"),MVt.forEach(t),UUr=r(cVe," \u2014 "),yoe=n(cVe,"A",{href:!0});var EVt=s(yoe);JUr=r(EVt,"FlaxRoFormerForSequenceClassification"),EVt.forEach(t),YUr=r(cVe," (RoFormer model)"),cVe.forEach(t),KUr=i(De),q3=n(De,"LI",{});var fVe=s(q3);w3e=n(fVe,"STRONG",{});var CVt=s(w3e);ZUr=r(CVt,"xlm-roberta"),CVt.forEach(t),eJr=r(fVe," \u2014 "),xoe=n(fVe,"A",{href:!0});var wVt=s(xoe);oJr=r(wVt,"FlaxXLMRobertaForSequenceClassification"),wVt.forEach(t),rJr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),De.forEach(t),tJr=i(gi),T(j3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Bze=i(f),mf=n(f,"H2",{class:!0});var XWe=s(mf);D3=n(XWe,"A",{id:!0,class:!0,href:!0});var AVt=s(D3);A3e=n(AVt,"SPAN",{});var LVt=s(A3e);T(B$.$$.fragment,LVt),LVt.forEach(t),AVt.forEach(t),aJr=i(XWe),L3e=n(XWe,"SPAN",{});var yVt=s(L3e);nJr=r(yVt,"FlaxAutoModelForQuestionAnswering"),yVt.forEach(t),XWe.forEach(t),Nze=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(N$.$$.fragment,hi),sJr=i(hi),gf=n(hi,"P",{});var sae=s(gf);lJr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(sae,"A",{href:!0});var xVt=s($oe);iJr=r(xVt,"from_pretrained()"),xVt.forEach(t),dJr=r(sae," class method or the "),koe=n(sae,"A",{href:!0});var $Vt=s(koe);cJr=r($Vt,"from_config()"),$Vt.forEach(t),fJr=r(sae,` class
method.`),sae.forEach(t),mJr=i(hi),I$=n(hi,"P",{});var zWe=s(I$);gJr=r(zWe,"This class cannot be instantiated directly using "),y3e=n(zWe,"CODE",{});var kVt=s(y3e);hJr=r(kVt,"__init__()"),kVt.forEach(t),pJr=r(zWe," (throws an error)."),zWe.forEach(t),_Jr=i(hi),Kt=n(hi,"DIV",{class:!0});var D6=s(Kt);T(q$.$$.fragment,D6),uJr=i(D6),x3e=n(D6,"P",{});var SVt=s(x3e);bJr=r(SVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SVt.forEach(t),vJr=i(D6),hf=n(D6,"P",{});var lae=s(hf);FJr=r(lae,`Note:
Loading a model from its configuration file does `),$3e=n(lae,"STRONG",{});var RVt=s($3e);TJr=r(RVt,"not"),RVt.forEach(t),MJr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(lae,"A",{href:!0});var PVt=s(Soe);EJr=r(PVt,"from_pretrained()"),PVt.forEach(t),CJr=r(lae," to load the model weights."),lae.forEach(t),wJr=i(D6),T(G3.$$.fragment,D6),D6.forEach(t),AJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(j$.$$.fragment,pi),LJr=i(pi),k3e=n(pi,"P",{});var BVt=s(k3e);yJr=r(BVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BVt.forEach(t),xJr=i(pi),Ln=n(pi,"P",{});var G6=s(Ln);$Jr=r(G6,"The model class to instantiate is selected based on the "),S3e=n(G6,"CODE",{});var NVt=s(S3e);kJr=r(NVt,"model_type"),NVt.forEach(t),SJr=r(G6,` property of the config object (either
passed as an argument or loaded from `),R3e=n(G6,"CODE",{});var IVt=s(R3e);RJr=r(IVt,"pretrained_model_name_or_path"),IVt.forEach(t),PJr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(G6,"CODE",{});var qVt=s(P3e);BJr=r(qVt,"pretrained_model_name_or_path"),qVt.forEach(t),NJr=r(G6,":"),G6.forEach(t),IJr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);O3=n(Ge,"LI",{});var mVe=s(O3);B3e=n(mVe,"STRONG",{});var jVt=s(B3e);qJr=r(jVt,"albert"),jVt.forEach(t),jJr=r(mVe," \u2014 "),Roe=n(mVe,"A",{href:!0});var DVt=s(Roe);DJr=r(DVt,"FlaxAlbertForQuestionAnswering"),DVt.forEach(t),GJr=r(mVe," (ALBERT model)"),mVe.forEach(t),OJr=i(Ge),V3=n(Ge,"LI",{});var gVe=s(V3);N3e=n(gVe,"STRONG",{});var GVt=s(N3e);VJr=r(GVt,"bart"),GVt.forEach(t),XJr=r(gVe," \u2014 "),Poe=n(gVe,"A",{href:!0});var OVt=s(Poe);zJr=r(OVt,"FlaxBartForQuestionAnswering"),OVt.forEach(t),QJr=r(gVe," (BART model)"),gVe.forEach(t),WJr=i(Ge),X3=n(Ge,"LI",{});var hVe=s(X3);I3e=n(hVe,"STRONG",{});var VVt=s(I3e);HJr=r(VVt,"bert"),VVt.forEach(t),UJr=r(hVe," \u2014 "),Boe=n(hVe,"A",{href:!0});var XVt=s(Boe);JJr=r(XVt,"FlaxBertForQuestionAnswering"),XVt.forEach(t),YJr=r(hVe," (BERT model)"),hVe.forEach(t),KJr=i(Ge),z3=n(Ge,"LI",{});var pVe=s(z3);q3e=n(pVe,"STRONG",{});var zVt=s(q3e);ZJr=r(zVt,"big_bird"),zVt.forEach(t),eYr=r(pVe," \u2014 "),Noe=n(pVe,"A",{href:!0});var QVt=s(Noe);oYr=r(QVt,"FlaxBigBirdForQuestionAnswering"),QVt.forEach(t),rYr=r(pVe," (BigBird model)"),pVe.forEach(t),tYr=i(Ge),Q3=n(Ge,"LI",{});var _Ve=s(Q3);j3e=n(_Ve,"STRONG",{});var WVt=s(j3e);aYr=r(WVt,"distilbert"),WVt.forEach(t),nYr=r(_Ve," \u2014 "),Ioe=n(_Ve,"A",{href:!0});var HVt=s(Ioe);sYr=r(HVt,"FlaxDistilBertForQuestionAnswering"),HVt.forEach(t),lYr=r(_Ve," (DistilBERT model)"),_Ve.forEach(t),iYr=i(Ge),W3=n(Ge,"LI",{});var uVe=s(W3);D3e=n(uVe,"STRONG",{});var UVt=s(D3e);dYr=r(UVt,"electra"),UVt.forEach(t),cYr=r(uVe," \u2014 "),qoe=n(uVe,"A",{href:!0});var JVt=s(qoe);fYr=r(JVt,"FlaxElectraForQuestionAnswering"),JVt.forEach(t),mYr=r(uVe," (ELECTRA model)"),uVe.forEach(t),gYr=i(Ge),H3=n(Ge,"LI",{});var bVe=s(H3);G3e=n(bVe,"STRONG",{});var YVt=s(G3e);hYr=r(YVt,"mbart"),YVt.forEach(t),pYr=r(bVe," \u2014 "),joe=n(bVe,"A",{href:!0});var KVt=s(joe);_Yr=r(KVt,"FlaxMBartForQuestionAnswering"),KVt.forEach(t),uYr=r(bVe," (mBART model)"),bVe.forEach(t),bYr=i(Ge),U3=n(Ge,"LI",{});var vVe=s(U3);O3e=n(vVe,"STRONG",{});var ZVt=s(O3e);vYr=r(ZVt,"roberta"),ZVt.forEach(t),FYr=r(vVe," \u2014 "),Doe=n(vVe,"A",{href:!0});var eXt=s(Doe);TYr=r(eXt,"FlaxRobertaForQuestionAnswering"),eXt.forEach(t),MYr=r(vVe," (RoBERTa model)"),vVe.forEach(t),EYr=i(Ge),J3=n(Ge,"LI",{});var FVe=s(J3);V3e=n(FVe,"STRONG",{});var oXt=s(V3e);CYr=r(oXt,"roformer"),oXt.forEach(t),wYr=r(FVe," \u2014 "),Goe=n(FVe,"A",{href:!0});var rXt=s(Goe);AYr=r(rXt,"FlaxRoFormerForQuestionAnswering"),rXt.forEach(t),LYr=r(FVe," (RoFormer model)"),FVe.forEach(t),yYr=i(Ge),Y3=n(Ge,"LI",{});var TVe=s(Y3);X3e=n(TVe,"STRONG",{});var tXt=s(X3e);xYr=r(tXt,"xlm-roberta"),tXt.forEach(t),$Yr=r(TVe," \u2014 "),Ooe=n(TVe,"A",{href:!0});var aXt=s(Ooe);kYr=r(aXt,"FlaxXLMRobertaForQuestionAnswering"),aXt.forEach(t),SYr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),Ge.forEach(t),RYr=i(pi),T(K3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Ize=i(f),pf=n(f,"H2",{class:!0});var QWe=s(pf);Z3=n(QWe,"A",{id:!0,class:!0,href:!0});var nXt=s(Z3);z3e=n(nXt,"SPAN",{});var sXt=s(z3e);T(D$.$$.fragment,sXt),sXt.forEach(t),nXt.forEach(t),PYr=i(QWe),Q3e=n(QWe,"SPAN",{});var lXt=s(Q3e);BYr=r(lXt,"FlaxAutoModelForTokenClassification"),lXt.forEach(t),QWe.forEach(t),qze=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(G$.$$.fragment,_i),NYr=i(_i),_f=n(_i,"P",{});var iae=s(_f);IYr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=n(iae,"A",{href:!0});var iXt=s(Voe);qYr=r(iXt,"from_pretrained()"),iXt.forEach(t),jYr=r(iae," class method or the "),Xoe=n(iae,"A",{href:!0});var dXt=s(Xoe);DYr=r(dXt,"from_config()"),dXt.forEach(t),GYr=r(iae,` class
method.`),iae.forEach(t),OYr=i(_i),O$=n(_i,"P",{});var WWe=s(O$);VYr=r(WWe,"This class cannot be instantiated directly using "),W3e=n(WWe,"CODE",{});var cXt=s(W3e);XYr=r(cXt,"__init__()"),cXt.forEach(t),zYr=r(WWe," (throws an error)."),WWe.forEach(t),QYr=i(_i),Zt=n(_i,"DIV",{class:!0});var O6=s(Zt);T(V$.$$.fragment,O6),WYr=i(O6),H3e=n(O6,"P",{});var fXt=s(H3e);HYr=r(fXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fXt.forEach(t),UYr=i(O6),uf=n(O6,"P",{});var dae=s(uf);JYr=r(dae,`Note:
Loading a model from its configuration file does `),U3e=n(dae,"STRONG",{});var mXt=s(U3e);YYr=r(mXt,"not"),mXt.forEach(t),KYr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(dae,"A",{href:!0});var gXt=s(zoe);ZYr=r(gXt,"from_pretrained()"),gXt.forEach(t),eKr=r(dae," to load the model weights."),dae.forEach(t),oKr=i(O6),T(ew.$$.fragment,O6),O6.forEach(t),rKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(X$.$$.fragment,ui),tKr=i(ui),J3e=n(ui,"P",{});var hXt=s(J3e);aKr=r(hXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hXt.forEach(t),nKr=i(ui),yn=n(ui,"P",{});var V6=s(yn);sKr=r(V6,"The model class to instantiate is selected based on the "),Y3e=n(V6,"CODE",{});var pXt=s(Y3e);lKr=r(pXt,"model_type"),pXt.forEach(t),iKr=r(V6,` property of the config object (either
passed as an argument or loaded from `),K3e=n(V6,"CODE",{});var _Xt=s(K3e);dKr=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),cKr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(V6,"CODE",{});var uXt=s(Z3e);fKr=r(uXt,"pretrained_model_name_or_path"),uXt.forEach(t),mKr=r(V6,":"),V6.forEach(t),gKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);ow=n(To,"LI",{});var MVe=s(ow);ewe=n(MVe,"STRONG",{});var bXt=s(ewe);hKr=r(bXt,"albert"),bXt.forEach(t),pKr=r(MVe," \u2014 "),Qoe=n(MVe,"A",{href:!0});var vXt=s(Qoe);_Kr=r(vXt,"FlaxAlbertForTokenClassification"),vXt.forEach(t),uKr=r(MVe," (ALBERT model)"),MVe.forEach(t),bKr=i(To),rw=n(To,"LI",{});var EVe=s(rw);owe=n(EVe,"STRONG",{});var FXt=s(owe);vKr=r(FXt,"bert"),FXt.forEach(t),FKr=r(EVe," \u2014 "),Woe=n(EVe,"A",{href:!0});var TXt=s(Woe);TKr=r(TXt,"FlaxBertForTokenClassification"),TXt.forEach(t),MKr=r(EVe," (BERT model)"),EVe.forEach(t),EKr=i(To),tw=n(To,"LI",{});var CVe=s(tw);rwe=n(CVe,"STRONG",{});var MXt=s(rwe);CKr=r(MXt,"big_bird"),MXt.forEach(t),wKr=r(CVe," \u2014 "),Hoe=n(CVe,"A",{href:!0});var EXt=s(Hoe);AKr=r(EXt,"FlaxBigBirdForTokenClassification"),EXt.forEach(t),LKr=r(CVe," (BigBird model)"),CVe.forEach(t),yKr=i(To),aw=n(To,"LI",{});var wVe=s(aw);twe=n(wVe,"STRONG",{});var CXt=s(twe);xKr=r(CXt,"distilbert"),CXt.forEach(t),$Kr=r(wVe," \u2014 "),Uoe=n(wVe,"A",{href:!0});var wXt=s(Uoe);kKr=r(wXt,"FlaxDistilBertForTokenClassification"),wXt.forEach(t),SKr=r(wVe," (DistilBERT model)"),wVe.forEach(t),RKr=i(To),nw=n(To,"LI",{});var AVe=s(nw);awe=n(AVe,"STRONG",{});var AXt=s(awe);PKr=r(AXt,"electra"),AXt.forEach(t),BKr=r(AVe," \u2014 "),Joe=n(AVe,"A",{href:!0});var LXt=s(Joe);NKr=r(LXt,"FlaxElectraForTokenClassification"),LXt.forEach(t),IKr=r(AVe," (ELECTRA model)"),AVe.forEach(t),qKr=i(To),sw=n(To,"LI",{});var LVe=s(sw);nwe=n(LVe,"STRONG",{});var yXt=s(nwe);jKr=r(yXt,"roberta"),yXt.forEach(t),DKr=r(LVe," \u2014 "),Yoe=n(LVe,"A",{href:!0});var xXt=s(Yoe);GKr=r(xXt,"FlaxRobertaForTokenClassification"),xXt.forEach(t),OKr=r(LVe," (RoBERTa model)"),LVe.forEach(t),VKr=i(To),lw=n(To,"LI",{});var yVe=s(lw);swe=n(yVe,"STRONG",{});var $Xt=s(swe);XKr=r($Xt,"roformer"),$Xt.forEach(t),zKr=r(yVe," \u2014 "),Koe=n(yVe,"A",{href:!0});var kXt=s(Koe);QKr=r(kXt,"FlaxRoFormerForTokenClassification"),kXt.forEach(t),WKr=r(yVe," (RoFormer model)"),yVe.forEach(t),HKr=i(To),iw=n(To,"LI",{});var xVe=s(iw);lwe=n(xVe,"STRONG",{});var SXt=s(lwe);UKr=r(SXt,"xlm-roberta"),SXt.forEach(t),JKr=r(xVe," \u2014 "),Zoe=n(xVe,"A",{href:!0});var RXt=s(Zoe);YKr=r(RXt,"FlaxXLMRobertaForTokenClassification"),RXt.forEach(t),KKr=r(xVe," (XLM-RoBERTa model)"),xVe.forEach(t),To.forEach(t),ZKr=i(ui),T(dw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),jze=i(f),bf=n(f,"H2",{class:!0});var HWe=s(bf);cw=n(HWe,"A",{id:!0,class:!0,href:!0});var PXt=s(cw);iwe=n(PXt,"SPAN",{});var BXt=s(iwe);T(z$.$$.fragment,BXt),BXt.forEach(t),PXt.forEach(t),eZr=i(HWe),dwe=n(HWe,"SPAN",{});var NXt=s(dwe);oZr=r(NXt,"FlaxAutoModelForMultipleChoice"),NXt.forEach(t),HWe.forEach(t),Dze=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(Q$.$$.fragment,bi),rZr=i(bi),vf=n(bi,"P",{});var cae=s(vf);tZr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=n(cae,"A",{href:!0});var IXt=s(ere);aZr=r(IXt,"from_pretrained()"),IXt.forEach(t),nZr=r(cae," class method or the "),ore=n(cae,"A",{href:!0});var qXt=s(ore);sZr=r(qXt,"from_config()"),qXt.forEach(t),lZr=r(cae,` class
method.`),cae.forEach(t),iZr=i(bi),W$=n(bi,"P",{});var UWe=s(W$);dZr=r(UWe,"This class cannot be instantiated directly using "),cwe=n(UWe,"CODE",{});var jXt=s(cwe);cZr=r(jXt,"__init__()"),jXt.forEach(t),fZr=r(UWe," (throws an error)."),UWe.forEach(t),mZr=i(bi),ea=n(bi,"DIV",{class:!0});var X6=s(ea);T(H$.$$.fragment,X6),gZr=i(X6),fwe=n(X6,"P",{});var DXt=s(fwe);hZr=r(DXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DXt.forEach(t),pZr=i(X6),Ff=n(X6,"P",{});var fae=s(Ff);_Zr=r(fae,`Note:
Loading a model from its configuration file does `),mwe=n(fae,"STRONG",{});var GXt=s(mwe);uZr=r(GXt,"not"),GXt.forEach(t),bZr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(fae,"A",{href:!0});var OXt=s(rre);vZr=r(OXt,"from_pretrained()"),OXt.forEach(t),FZr=r(fae," to load the model weights."),fae.forEach(t),TZr=i(X6),T(fw.$$.fragment,X6),X6.forEach(t),MZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(U$.$$.fragment,vi),EZr=i(vi),gwe=n(vi,"P",{});var VXt=s(gwe);CZr=r(VXt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VXt.forEach(t),wZr=i(vi),xn=n(vi,"P",{});var z6=s(xn);AZr=r(z6,"The model class to instantiate is selected based on the "),hwe=n(z6,"CODE",{});var XXt=s(hwe);LZr=r(XXt,"model_type"),XXt.forEach(t),yZr=r(z6,` property of the config object (either
passed as an argument or loaded from `),pwe=n(z6,"CODE",{});var zXt=s(pwe);xZr=r(zXt,"pretrained_model_name_or_path"),zXt.forEach(t),$Zr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=n(z6,"CODE",{});var QXt=s(_we);kZr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),SZr=r(z6,":"),z6.forEach(t),RZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);mw=n(Mo,"LI",{});var $Ve=s(mw);uwe=n($Ve,"STRONG",{});var WXt=s(uwe);PZr=r(WXt,"albert"),WXt.forEach(t),BZr=r($Ve," \u2014 "),tre=n($Ve,"A",{href:!0});var HXt=s(tre);NZr=r(HXt,"FlaxAlbertForMultipleChoice"),HXt.forEach(t),IZr=r($Ve," (ALBERT model)"),$Ve.forEach(t),qZr=i(Mo),gw=n(Mo,"LI",{});var kVe=s(gw);bwe=n(kVe,"STRONG",{});var UXt=s(bwe);jZr=r(UXt,"bert"),UXt.forEach(t),DZr=r(kVe," \u2014 "),are=n(kVe,"A",{href:!0});var JXt=s(are);GZr=r(JXt,"FlaxBertForMultipleChoice"),JXt.forEach(t),OZr=r(kVe," (BERT model)"),kVe.forEach(t),VZr=i(Mo),hw=n(Mo,"LI",{});var SVe=s(hw);vwe=n(SVe,"STRONG",{});var YXt=s(vwe);XZr=r(YXt,"big_bird"),YXt.forEach(t),zZr=r(SVe," \u2014 "),nre=n(SVe,"A",{href:!0});var KXt=s(nre);QZr=r(KXt,"FlaxBigBirdForMultipleChoice"),KXt.forEach(t),WZr=r(SVe," (BigBird model)"),SVe.forEach(t),HZr=i(Mo),pw=n(Mo,"LI",{});var RVe=s(pw);Fwe=n(RVe,"STRONG",{});var ZXt=s(Fwe);UZr=r(ZXt,"distilbert"),ZXt.forEach(t),JZr=r(RVe," \u2014 "),sre=n(RVe,"A",{href:!0});var ezt=s(sre);YZr=r(ezt,"FlaxDistilBertForMultipleChoice"),ezt.forEach(t),KZr=r(RVe," (DistilBERT model)"),RVe.forEach(t),ZZr=i(Mo),_w=n(Mo,"LI",{});var PVe=s(_w);Twe=n(PVe,"STRONG",{});var ozt=s(Twe);eet=r(ozt,"electra"),ozt.forEach(t),oet=r(PVe," \u2014 "),lre=n(PVe,"A",{href:!0});var rzt=s(lre);ret=r(rzt,"FlaxElectraForMultipleChoice"),rzt.forEach(t),tet=r(PVe," (ELECTRA model)"),PVe.forEach(t),aet=i(Mo),uw=n(Mo,"LI",{});var BVe=s(uw);Mwe=n(BVe,"STRONG",{});var tzt=s(Mwe);net=r(tzt,"roberta"),tzt.forEach(t),set=r(BVe," \u2014 "),ire=n(BVe,"A",{href:!0});var azt=s(ire);iet=r(azt,"FlaxRobertaForMultipleChoice"),azt.forEach(t),det=r(BVe," (RoBERTa model)"),BVe.forEach(t),cet=i(Mo),bw=n(Mo,"LI",{});var NVe=s(bw);Ewe=n(NVe,"STRONG",{});var nzt=s(Ewe);fet=r(nzt,"roformer"),nzt.forEach(t),met=r(NVe," \u2014 "),dre=n(NVe,"A",{href:!0});var szt=s(dre);get=r(szt,"FlaxRoFormerForMultipleChoice"),szt.forEach(t),het=r(NVe," (RoFormer model)"),NVe.forEach(t),pet=i(Mo),vw=n(Mo,"LI",{});var IVe=s(vw);Cwe=n(IVe,"STRONG",{});var lzt=s(Cwe);_et=r(lzt,"xlm-roberta"),lzt.forEach(t),uet=r(IVe," \u2014 "),cre=n(IVe,"A",{href:!0});var izt=s(cre);bet=r(izt,"FlaxXLMRobertaForMultipleChoice"),izt.forEach(t),vet=r(IVe," (XLM-RoBERTa model)"),IVe.forEach(t),Mo.forEach(t),Fet=i(vi),T(Fw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Gze=i(f),Tf=n(f,"H2",{class:!0});var JWe=s(Tf);Tw=n(JWe,"A",{id:!0,class:!0,href:!0});var dzt=s(Tw);wwe=n(dzt,"SPAN",{});var czt=s(wwe);T(J$.$$.fragment,czt),czt.forEach(t),dzt.forEach(t),Tet=i(JWe),Awe=n(JWe,"SPAN",{});var fzt=s(Awe);Met=r(fzt,"FlaxAutoModelForNextSentencePrediction"),fzt.forEach(t),JWe.forEach(t),Oze=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(Y$.$$.fragment,Fi),Eet=i(Fi),Mf=n(Fi,"P",{});var mae=s(Mf);Cet=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fre=n(mae,"A",{href:!0});var mzt=s(fre);wet=r(mzt,"from_pretrained()"),mzt.forEach(t),Aet=r(mae," class method or the "),mre=n(mae,"A",{href:!0});var gzt=s(mre);Let=r(gzt,"from_config()"),gzt.forEach(t),yet=r(mae,` class
method.`),mae.forEach(t),xet=i(Fi),K$=n(Fi,"P",{});var YWe=s(K$);$et=r(YWe,"This class cannot be instantiated directly using "),Lwe=n(YWe,"CODE",{});var hzt=s(Lwe);ket=r(hzt,"__init__()"),hzt.forEach(t),Set=r(YWe," (throws an error)."),YWe.forEach(t),Ret=i(Fi),oa=n(Fi,"DIV",{class:!0});var Q6=s(oa);T(Z$.$$.fragment,Q6),Pet=i(Q6),ywe=n(Q6,"P",{});var pzt=s(ywe);Bet=r(pzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pzt.forEach(t),Net=i(Q6),Ef=n(Q6,"P",{});var gae=s(Ef);Iet=r(gae,`Note:
Loading a model from its configuration file does `),xwe=n(gae,"STRONG",{});var _zt=s(xwe);qet=r(_zt,"not"),_zt.forEach(t),jet=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(gae,"A",{href:!0});var uzt=s(gre);Det=r(uzt,"from_pretrained()"),uzt.forEach(t),Get=r(gae," to load the model weights."),gae.forEach(t),Oet=i(Q6),T(Mw.$$.fragment,Q6),Q6.forEach(t),Vet=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(ek.$$.fragment,Ti),Xet=i(Ti),$we=n(Ti,"P",{});var bzt=s($we);zet=r(bzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bzt.forEach(t),Qet=i(Ti),$n=n(Ti,"P",{});var W6=s($n);Wet=r(W6,"The model class to instantiate is selected based on the "),kwe=n(W6,"CODE",{});var vzt=s(kwe);Het=r(vzt,"model_type"),vzt.forEach(t),Uet=r(W6,` property of the config object (either
passed as an argument or loaded from `),Swe=n(W6,"CODE",{});var Fzt=s(Swe);Jet=r(Fzt,"pretrained_model_name_or_path"),Fzt.forEach(t),Yet=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=n(W6,"CODE",{});var Tzt=s(Rwe);Ket=r(Tzt,"pretrained_model_name_or_path"),Tzt.forEach(t),Zet=r(W6,":"),W6.forEach(t),eot=i(Ti),Pwe=n(Ti,"UL",{});var Mzt=s(Pwe);Ew=n(Mzt,"LI",{});var qVe=s(Ew);Bwe=n(qVe,"STRONG",{});var Ezt=s(Bwe);oot=r(Ezt,"bert"),Ezt.forEach(t),rot=r(qVe," \u2014 "),hre=n(qVe,"A",{href:!0});var Czt=s(hre);tot=r(Czt,"FlaxBertForNextSentencePrediction"),Czt.forEach(t),aot=r(qVe," (BERT model)"),qVe.forEach(t),Mzt.forEach(t),not=i(Ti),T(Cw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Vze=i(f),Cf=n(f,"H2",{class:!0});var KWe=s(Cf);ww=n(KWe,"A",{id:!0,class:!0,href:!0});var wzt=s(ww);Nwe=n(wzt,"SPAN",{});var Azt=s(Nwe);T(ok.$$.fragment,Azt),Azt.forEach(t),wzt.forEach(t),sot=i(KWe),Iwe=n(KWe,"SPAN",{});var Lzt=s(Iwe);lot=r(Lzt,"FlaxAutoModelForImageClassification"),Lzt.forEach(t),KWe.forEach(t),Xze=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(rk.$$.fragment,Mi),iot=i(Mi),wf=n(Mi,"P",{});var hae=s(wf);dot=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pre=n(hae,"A",{href:!0});var yzt=s(pre);cot=r(yzt,"from_pretrained()"),yzt.forEach(t),fot=r(hae," class method or the "),_re=n(hae,"A",{href:!0});var xzt=s(_re);mot=r(xzt,"from_config()"),xzt.forEach(t),got=r(hae,` class
method.`),hae.forEach(t),hot=i(Mi),tk=n(Mi,"P",{});var ZWe=s(tk);pot=r(ZWe,"This class cannot be instantiated directly using "),qwe=n(ZWe,"CODE",{});var $zt=s(qwe);_ot=r($zt,"__init__()"),$zt.forEach(t),uot=r(ZWe," (throws an error)."),ZWe.forEach(t),bot=i(Mi),ra=n(Mi,"DIV",{class:!0});var H6=s(ra);T(ak.$$.fragment,H6),vot=i(H6),jwe=n(H6,"P",{});var kzt=s(jwe);Fot=r(kzt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kzt.forEach(t),Tot=i(H6),Af=n(H6,"P",{});var pae=s(Af);Mot=r(pae,`Note:
Loading a model from its configuration file does `),Dwe=n(pae,"STRONG",{});var Szt=s(Dwe);Eot=r(Szt,"not"),Szt.forEach(t),Cot=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(pae,"A",{href:!0});var Rzt=s(ure);wot=r(Rzt,"from_pretrained()"),Rzt.forEach(t),Aot=r(pae," to load the model weights."),pae.forEach(t),Lot=i(H6),T(Aw.$$.fragment,H6),H6.forEach(t),yot=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(nk.$$.fragment,Ei),xot=i(Ei),Gwe=n(Ei,"P",{});var Pzt=s(Gwe);$ot=r(Pzt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pzt.forEach(t),kot=i(Ei),kn=n(Ei,"P",{});var U6=s(kn);Sot=r(U6,"The model class to instantiate is selected based on the "),Owe=n(U6,"CODE",{});var Bzt=s(Owe);Rot=r(Bzt,"model_type"),Bzt.forEach(t),Pot=r(U6,` property of the config object (either
passed as an argument or loaded from `),Vwe=n(U6,"CODE",{});var Nzt=s(Vwe);Bot=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),Not=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=n(U6,"CODE",{});var Izt=s(Xwe);Iot=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),qot=r(U6,":"),U6.forEach(t),jot=i(Ei),sk=n(Ei,"UL",{});var eHe=s(sk);Lw=n(eHe,"LI",{});var jVe=s(Lw);zwe=n(jVe,"STRONG",{});var qzt=s(zwe);Dot=r(qzt,"beit"),qzt.forEach(t),Got=r(jVe," \u2014 "),bre=n(jVe,"A",{href:!0});var jzt=s(bre);Oot=r(jzt,"FlaxBeitForImageClassification"),jzt.forEach(t),Vot=r(jVe," (BEiT model)"),jVe.forEach(t),Xot=i(eHe),yw=n(eHe,"LI",{});var DVe=s(yw);Qwe=n(DVe,"STRONG",{});var Dzt=s(Qwe);zot=r(Dzt,"vit"),Dzt.forEach(t),Qot=r(DVe," \u2014 "),vre=n(DVe,"A",{href:!0});var Gzt=s(vre);Wot=r(Gzt,"FlaxViTForImageClassification"),Gzt.forEach(t),Hot=r(DVe," (ViT model)"),DVe.forEach(t),eHe.forEach(t),Uot=i(Ei),T(xw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),zze=i(f),Lf=n(f,"H2",{class:!0});var oHe=s(Lf);$w=n(oHe,"A",{id:!0,class:!0,href:!0});var Ozt=s($w);Wwe=n(Ozt,"SPAN",{});var Vzt=s(Wwe);T(lk.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),Jot=i(oHe),Hwe=n(oHe,"SPAN",{});var Xzt=s(Hwe);Yot=r(Xzt,"FlaxAutoModelForVision2Seq"),Xzt.forEach(t),oHe.forEach(t),Qze=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(ik.$$.fragment,Ci),Kot=i(Ci),yf=n(Ci,"P",{});var _ae=s(yf);Zot=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=n(_ae,"A",{href:!0});var zzt=s(Fre);ert=r(zzt,"from_pretrained()"),zzt.forEach(t),ort=r(_ae," class method or the "),Tre=n(_ae,"A",{href:!0});var Qzt=s(Tre);rrt=r(Qzt,"from_config()"),Qzt.forEach(t),trt=r(_ae,` class
method.`),_ae.forEach(t),art=i(Ci),dk=n(Ci,"P",{});var rHe=s(dk);nrt=r(rHe,"This class cannot be instantiated directly using "),Uwe=n(rHe,"CODE",{});var Wzt=s(Uwe);srt=r(Wzt,"__init__()"),Wzt.forEach(t),lrt=r(rHe," (throws an error)."),rHe.forEach(t),irt=i(Ci),ta=n(Ci,"DIV",{class:!0});var J6=s(ta);T(ck.$$.fragment,J6),drt=i(J6),Jwe=n(J6,"P",{});var Hzt=s(Jwe);crt=r(Hzt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hzt.forEach(t),frt=i(J6),xf=n(J6,"P",{});var uae=s(xf);mrt=r(uae,`Note:
Loading a model from its configuration file does `),Ywe=n(uae,"STRONG",{});var Uzt=s(Ywe);grt=r(Uzt,"not"),Uzt.forEach(t),hrt=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(uae,"A",{href:!0});var Jzt=s(Mre);prt=r(Jzt,"from_pretrained()"),Jzt.forEach(t),_rt=r(uae," to load the model weights."),uae.forEach(t),urt=i(J6),T(kw.$$.fragment,J6),J6.forEach(t),brt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(fk.$$.fragment,wi),vrt=i(wi),Kwe=n(wi,"P",{});var Yzt=s(Kwe);Frt=r(Yzt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yzt.forEach(t),Trt=i(wi),Sn=n(wi,"P",{});var Y6=s(Sn);Mrt=r(Y6,"The model class to instantiate is selected based on the "),Zwe=n(Y6,"CODE",{});var Kzt=s(Zwe);Ert=r(Kzt,"model_type"),Kzt.forEach(t),Crt=r(Y6,` property of the config object (either
passed as an argument or loaded from `),eAe=n(Y6,"CODE",{});var Zzt=s(eAe);wrt=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),Art=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=n(Y6,"CODE",{});var eQt=s(oAe);Lrt=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),yrt=r(Y6,":"),Y6.forEach(t),xrt=i(wi),rAe=n(wi,"UL",{});var oQt=s(rAe);Sw=n(oQt,"LI",{});var GVe=s(Sw);tAe=n(GVe,"STRONG",{});var rQt=s(tAe);$rt=r(rQt,"vision-encoder-decoder"),rQt.forEach(t),krt=r(GVe," \u2014 "),Ere=n(GVe,"A",{href:!0});var tQt=s(Ere);Srt=r(tQt,"FlaxVisionEncoderDecoderModel"),tQt.forEach(t),Rrt=r(GVe," (Vision Encoder decoder model)"),GVe.forEach(t),oQt.forEach(t),Prt=i(wi),T(Rw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertModel"),c(If,"id","extending-the-auto-classes"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(qS,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(jS,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertConfig"),c(DS,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartConfig"),c(GS,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitConfig"),c(OS,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertConfig"),c(VS,"href","/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(XS,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdConfig"),c(zS,"href","/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(QS,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(WS,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(HS,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomConfig"),c(US,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertConfig"),c(JS,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineConfig"),c(YS,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPConfig"),c(KS,"href","/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenConfig"),c(ZS,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertConfig"),c(eR,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextConfig"),c(oR,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLConfig"),c(rR,"href","/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtConfig"),c(tR,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(aR,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(nR,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(sR,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaConfig"),c(lR,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(iR,"href","/docs/transformers/pr_18059/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(dR,"href","/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTConfig"),c(cR,"href","/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrConfig"),c(fR,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertConfig"),c(mR,"href","/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRConfig"),c(gR,"href","/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTConfig"),c(hR,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraConfig"),c(pR,"href","/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_R,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertConfig"),c(uR,"href","/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaConfig"),c(bR,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetConfig"),c(vR,"href","/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTConfig"),c(FR,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelConfig"),c(TR,"href","/docs/transformers/pr_18059/en/model_doc/glpn#transformers.GLPNConfig"),c(MR,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Config"),c(ER,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(CR,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(wR,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJConfig"),c(AR,"href","/docs/transformers/pr_18059/en/model_doc/groupvit#transformers.GroupViTConfig"),c(LR,"href","/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertConfig"),c(yR,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertConfig"),c(xR,"href","/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c($R,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(kR,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(SR,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(RR,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDConfig"),c(PR,"href","/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitConfig"),c(BR,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerConfig"),c(NR,"href","/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Config"),c(IR,"href","/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeConfig"),c(qR,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertConfig"),c(jR,"href","/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100Config"),c(DR,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianConfig"),c(GR,"href","/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(OR,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartConfig"),c(VR,"href","/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTConfig"),c(XR,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(zR,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(QR,"href","/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(WR,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetConfig"),c(HR,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Config"),c(UR,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpConfig"),c(JR,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaConfig"),c(YR,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(KR,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(ZR,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTConfig"),c(eP,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusConfig"),c(oP,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverConfig"),c(rP,"href","/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartConfig"),c(tP,"href","/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(aP,"href","/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(nP,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(sP,"href","/docs/transformers/pr_18059/en/model_doc/rag#transformers.RagConfig"),c(lP,"href","/docs/transformers/pr_18059/en/model_doc/realm#transformers.RealmConfig"),c(iP,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerConfig"),c(dP,"href","/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetConfig"),c(cP,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertConfig"),c(fP,"href","/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetConfig"),c(mP,"href","/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertConfig"),c(gP,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaConfig"),c(hP,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerConfig"),c(pP,"href","/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerConfig"),c(_P,"href","/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWConfig"),c(uP,"href","/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDConfig"),c(bP,"href","/docs/transformers/pr_18059/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(vP,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(FP,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(TP,"href","/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterConfig"),c(MP,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(EP,"href","/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinConfig"),c(CP,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Config"),c(wP,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasConfig"),c(AP,"href","/docs/transformers/pr_18059/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(LP,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yP,"href","/docs/transformers/pr_18059/en/model_doc/trocr#transformers.TrOCRConfig"),c(xP,"href","/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechConfig"),c($P,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(kP,"href","/docs/transformers/pr_18059/en/model_doc/van#transformers.VanConfig"),c(SP,"href","/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltConfig"),c(RP,"href","/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(PP,"href","/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(BP,"href","/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(NP,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTConfig"),c(IP,"href","/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qP,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(jP,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(DP,"href","/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMConfig"),c(GP,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMConfig"),c(OP,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMConfig"),c(VP,"href","/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(XP,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(zP,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QP,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetConfig"),c(WP,"href","/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosConfig"),c(HP,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoTokenizer"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(UP,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(JP,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertTokenizer"),c(YP,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KP,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartTokenizer"),c(ZP,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartTokenizerFast"),c(eB,"href","/docs/transformers/pr_18059/en/model_doc/barthez#transformers.BarthezTokenizer"),c(oB,"href","/docs/transformers/pr_18059/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(rB,"href","/docs/transformers/pr_18059/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(tB,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(sB,"href","/docs/transformers/pr_18059/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(lB,"href","/docs/transformers/pr_18059/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(iB,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(dB,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(cB,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fB,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mB,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(gB,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(hB,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(pB,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(_B,"href","/docs/transformers/pr_18059/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(uB,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertTokenizer"),c(bB,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(vB,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineTokenizer"),c(FB,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPTokenizer"),c(TB,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(MB,"href","/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(EB,"href","/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(CB,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(wB,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_18059/en/model_doc/cpm#transformers.CpmTokenizer"),c(LB,"href","/docs/transformers/pr_18059/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(yB,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(xB,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaTokenizer"),c(SB,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(PB,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(BB,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(NB,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(qB,"href","/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(jB,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraTokenizer"),c(DB,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(GB,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(OB,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetTokenizer"),c(VB,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(XB,"href","/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(zB,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QB,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(WB,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UB,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JB,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YB,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(KB,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eN,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPTokenizer"),c(oN,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rN,"href","/docs/transformers/pr_18059/en/model_doc/herbert#transformers.HerbertTokenizer"),c(tN,"href","/docs/transformers/pr_18059/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(aN,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nN,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sN,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lN,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(iN,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(dN,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(cN,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(fN,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(mN,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(gN,"href","/docs/transformers/pr_18059/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(hN,"href","/docs/transformers/pr_18059/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(pN,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDTokenizer"),c(_N,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDTokenizerFast"),c(uN,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerTokenizer"),c(bN,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(vN,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Tokenizer"),c(FN,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5TokenizerFast"),c(TN,"href","/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeTokenizer"),c(MN,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(EN,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(CN,"href","/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(wN,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianTokenizer"),c(AN,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartTokenizer"),c(LN,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yN,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(xN,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c($N,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizer"),c(kN,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizerFast"),c(SN,"href","/docs/transformers/pr_18059/en/model_doc/mluke#transformers.MLukeTokenizer"),c(RN,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(PN,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(BN,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NN,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(IN,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Tokenizer"),c(qN,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5TokenizerFast"),c(jN,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpTokenizer"),c(DN,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(GN,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizer"),c(ON,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizerFast"),c(VN,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertTokenizer"),c(XN,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zN,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(QN,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(WN,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HN,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UN,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JN,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YN,"href","/docs/transformers/pr_18059/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KN,"href","/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZN,"href","/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eI,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/pr_18059/en/model_doc/rag#transformers.RagTokenizer"),c(tI,"href","/docs/transformers/pr_18059/en/model_doc/realm#transformers.RealmTokenizer"),c(aI,"href","/docs/transformers/pr_18059/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nI,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sI,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lI,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iI,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dI,"href","/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cI,"href","/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fI,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mI,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gI,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hI,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pI,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(_I,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uI,"href","/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bI,"href","/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vI,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FI,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TI,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Tokenizer"),c(MI,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5TokenizerFast"),c(EI,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasTokenizer"),c(CI,"href","/docs/transformers/pr_18059/en/model_doc/tapex#transformers.TapexTokenizer"),c(wI,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AI,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kI,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SI,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RI,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PI,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BI,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMTokenizer"),c(NI,"href","/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(II,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qI,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jI,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DI,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GI,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OI,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VI,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertTokenizer"),c(XI,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoFeatureExtractor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoFeatureExtractor"),c(Ii,"class","relative group"),c(zI,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QI,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WI,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HI,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UI,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YI,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KI,"href","/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eq,"href","/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rq,"href","/docs/transformers/pr_18059/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nq,"href","/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lq,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(iq,"href","/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(dq,"href","/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wq,"href","/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(up,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"id","transformers.AutoProcessor"),c(bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Aq,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Lq,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPProcessor"),c(yq,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPProcessor"),c(xq,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c($q,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(kq,"href","/docs/transformers/pr_18059/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Sq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Rq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Pq,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Bq,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Nq,"href","/docs/transformers/pr_18059/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Iq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltProcessor"),c(Dq,"href","/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Gq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"id","transformers.AutoModel"),c(Dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Xq,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zq,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qq,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wq,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertModel"),c(Hq,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartModel"),c(Uq,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitModel"),c(Jq,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertModel"),c(Yq,"href","/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Kq,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdModel"),c(Zq,"href","/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ej,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(oj,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(rj,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomModel"),c(tj,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertModel"),c(aj,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineModel"),c(nj,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.CLIPModel"),c(sj,"href","/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenModel"),c(lj,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertModel"),c(ij,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextModel"),c(dj,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLModel"),c(cj,"href","/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtModel"),c(fj,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(mj,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gj,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hj,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaModel"),c(pj,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(_j,"href","/docs/transformers/pr_18059/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(uj,"href","/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTModel"),c(bj,"href","/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrModel"),c(vj,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertModel"),c(Fj,"href","/docs/transformers/pr_18059/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Tj,"href","/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTModel"),c(Mj,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraModel"),c(Ej,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertModel"),c(Cj,"href","/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaModel"),c(wj,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetModel"),c(Aj,"href","/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTModel"),c(Lj,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelModel"),c(yj,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelBaseModel"),c(xj,"href","/docs/transformers/pr_18059/en/model_doc/glpn#transformers.GLPNModel"),c($j,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2Model"),c(kj,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Sj,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Rj,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJModel"),c(Pj,"href","/docs/transformers/pr_18059/en/model_doc/groupvit#transformers.GroupViTModel"),c(Bj,"href","/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertModel"),c(Nj,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertModel"),c(Ij,"href","/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qj,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jj,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Dj,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Gj,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDModel"),c(Oj,"href","/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitModel"),c(Vj,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerModel"),c(Xj,"href","/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5Model"),c(zj,"href","/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeModel"),c(Qj,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertModel"),c(Wj,"href","/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100Model"),c(Hj,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianModel"),c(Uj,"href","/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Jj,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartModel"),c(Yj,"href","/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTModel"),c(Kj,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Zj,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eD,"href","/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTModel"),c(oD,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetModel"),c(rD,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5Model"),c(tD,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpModel"),c(aD,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaModel"),c(nD,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerModel"),c(sD,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(lD,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTModel"),c(iD,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusModel"),c(dD,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverModel"),c(cD,"href","/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartModel"),c(fD,"href","/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mD,"href","/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gD,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hD,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerModel"),c(pD,"href","/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetModel"),c(_D,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertModel"),c(uD,"href","/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetModel"),c(bD,"href","/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertModel"),c(vD,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaModel"),c(FD,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerModel"),c(TD,"href","/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerModel"),c(MD,"href","/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWModel"),c(ED,"href","/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDModel"),c(CD,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wD,"href","/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterModel"),c(AD,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(LD,"href","/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinModel"),c(yD,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5Model"),c(xD,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasModel"),c($D,"href","/docs/transformers/pr_18059/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(kD,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(SD,"href","/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechModel"),c(RD,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(PD,"href","/docs/transformers/pr_18059/en/model_doc/van#transformers.VanModel"),c(BD,"href","/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltModel"),c(ND,"href","/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(ID,"href","/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qD,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTModel"),c(jD,"href","/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(DD,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(GD,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(OD,"href","/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMModel"),c(VD,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMModel"),c(XD,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMModel"),c(zD,"href","/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(QD,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(WD,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(HD,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetModel"),c(UD,"href","/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosModel"),c(JD,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"id","transformers.AutoModelForPreTraining"),c(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(YD,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oG,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForPreTraining"),c(tG,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aG,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nG,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sG,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lG,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iG,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dG,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cG,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fG,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mG,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gG,"href","/docs/transformers/pr_18059/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hG,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pG,"href","/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uG,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bG,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vG,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FG,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TG,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MG,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EG,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CG,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wG,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(LG,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yG,"href","/docs/transformers/pr_18059/en/model_doc/retribert#transformers.RetriBertModel"),c(xG,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($G,"href","/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(kG,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SG,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(PG,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BG,"href","/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(NG,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(IG,"href","/docs/transformers/pr_18059/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(qG,"href","/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(jG,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(DG,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(GG,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OG,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VG,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XG,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForCausalLM"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(zG,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WG,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForCausalLM"),c(UG,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertLMHeadModel"),c(JG,"href","/docs/transformers/pr_18059/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(YG,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(KG,"href","/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ZG,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(eO,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(oO,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForCausalLM"),c(rO,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(tO,"href","/docs/transformers/pr_18059/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(aO,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nO,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(sO,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForCausalLM"),c(lO,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iO,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(dO,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(cO,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(fO,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianForCausalLM"),c(mO,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gO,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hO,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForCausalLM"),c(pO,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_O,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.OPTForCausalLM"),c(uO,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bO,"href","/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vO,"href","/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(FO,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(TO,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(MO,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(EO,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(CO,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wO,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(AO,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LO,"href","/docs/transformers/pr_18059/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yO,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xO,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($O,"href","/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kO,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(SO,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(RO,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForMaskedLM"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(PO,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qO,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForMaskedLM"),c(DO,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(GO,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OO,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(VO,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XO,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zO,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QO,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(HO,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UO,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(JO,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(YO,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KO,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eV,"href","/docs/transformers/pr_18059/en/model_doc/luke#transformers.LukeForMaskedLM"),c(oV,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nV,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(lV,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iV,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dV,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(fV,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gV,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hV,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_V,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uV,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bV,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vV,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForSeq2SeqLM"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(FV,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yV,"href","/docs/transformers/pr_18059/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($V,"href","/docs/transformers/pr_18059/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18059/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.MarianMTModel"),c(RV,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18059/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18059/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(GV,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForSequenceClassification"),c(QV,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(HV,"href","/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(UV,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(JV,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(KV,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eX,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oX,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18059/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForMultipleChoice"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(DX,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XX,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zX,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(QX,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(HX,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JX,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(YX,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(az,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.AutoModelForNextSentencePrediction"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(vz,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Ez,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Cz,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wz,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Az,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForTokenClassification"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(yz,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Sz,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForTokenClassification"),c(Rz,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Pz,"href","/docs/transformers/pr_18059/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Bz,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Nz,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Iz,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qz,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(jz,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Dz,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Gz,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zz,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.AutoModelForQuestionAnswering"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_18059/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_18059/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($Q,"href","/docs/transformers/pr_18059/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18059/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18059/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18059/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18059/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18059/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18059/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18059/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18059/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18059/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18059/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eW,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tW,"href","/docs/transformers/pr_18059/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForTableQuestionAnswering"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(aW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForImageClassification"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(iW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitForImageClassification"),c(mW,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gW,"href","/docs/transformers/pr_18059/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hW,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(pW,"href","/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTForImageClassification"),c(_W,"href","/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(uW,"href","/docs/transformers/pr_18059/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bW,"href","/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitForImageClassification"),c(vW,"href","/docs/transformers/pr_18059/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(FW,"href","/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(TW,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MW,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EW,"href","/docs/transformers/pr_18059/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CW,"href","/docs/transformers/pr_18059/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wW,"href","/docs/transformers/pr_18059/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AW,"href","/docs/transformers/pr_18059/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(LW,"href","/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yW,"href","/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinForImageClassification"),c(xW,"href","/docs/transformers/pr_18059/en/model_doc/van#transformers.VanForImageClassification"),c($W,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForVision2Seq"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(kW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(BW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_18059/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForAudioClassification"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(jW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(VW,"href","/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(XW,"href","/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(zW,"href","/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(QW,"href","/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(WW,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(HW,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(UW,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForAudioFrameClassification"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(YW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(oH,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(rH,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(tH,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(aH,"href","/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForCTC"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(nH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(dH,"href","/docs/transformers/pr_18059/en/model_doc/hubert#transformers.HubertForCTC"),c(cH,"href","/docs/transformers/pr_18059/en/model_doc/mctct#transformers.MCTCTForCTC"),c(fH,"href","/docs/transformers/pr_18059/en/model_doc/sew#transformers.SEWForCTC"),c(mH,"href","/docs/transformers/pr_18059/en/model_doc/sew-d#transformers.SEWDForCTC"),c(gH,"href","/docs/transformers/pr_18059/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(hH,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(pH,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(_H,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(uH,"href","/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(bH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_18059/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MH,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForAudioXVector"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(EH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(LH,"href","/docs/transformers/pr_18059/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yH,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(xH,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c($H,"href","/docs/transformers/pr_18059/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForMaskedImageModeling"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(kH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_18059/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(BH,"href","/docs/transformers/pr_18059/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(NH,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForObjectDetection"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(IH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrForObjectDetection"),c(GH,"href","/docs/transformers/pr_18059/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForImageSegmentation"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(OH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_18059/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r8,"id","transformers.AutoModelForSemanticSegmentation"),c(r8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r8,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(QH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(JH,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(YH,"href","/docs/transformers/pr_18059/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(KH,"href","/docs/transformers/pr_18059/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(ZH,"href","/docs/transformers/pr_18059/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f8,"id","transformers.AutoModelForInstanceSegmentation"),c(f8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f8,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(eU,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_18059/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_8,"id","transformers.TFAutoModel"),c(_8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_8,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(aU,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertModel"),c(iU,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.TFBartModel"),c(dU,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertModel"),c(cU,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(fU,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(mU,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertModel"),c(gU,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.TFCLIPModel"),c(hU,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertModel"),c(pU,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.TFConvNextModel"),c(_U,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLModel"),c(uU,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(bU,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaModel"),c(vU,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(FU,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(TU,"href","/docs/transformers/pr_18059/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(MU,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraModel"),c(EU,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(CU,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelModel"),c(wU,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(AU,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LU,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJModel"),c(yU,"href","/docs/transformers/pr_18059/en/model_doc/hubert#transformers.TFHubertModel"),c(xU,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c($U,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.TFLEDModel"),c(kU,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerModel"),c(SU,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.TFLxmertModel"),c(RU,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.TFMarianModel"),c(PU,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.TFMBartModel"),c(BU,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(NU,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetModel"),c(IU,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.TFMT5Model"),c(qU,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(jU,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.TFOPTModel"),c(DU,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GU,"href","/docs/transformers/pr_18059/en/model_doc/regnet#transformers.TFRegNetModel"),c(OU,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertModel"),c(VU,"href","/docs/transformers/pr_18059/en/model_doc/resnet#transformers.TFResNetModel"),c(XU,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaModel"),c(zU,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerModel"),c(QU,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(WU,"href","/docs/transformers/pr_18059/en/model_doc/swin#transformers.TFSwinModel"),c(HU,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.TFT5Model"),c(UU,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasModel"),c(JU,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YU,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.TFViTModel"),c(KU,"href","/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZU,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eJ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMModel"),c(oJ,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rJ,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g9,"id","transformers.TFAutoModelForPreTraining"),c(g9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g9,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(tJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lJ,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dJ,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fJ,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gJ,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hJ,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pJ,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_J,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uJ,"href","/docs/transformers/pr_18059/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bJ,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vJ,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FJ,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TJ,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MJ,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CJ,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wJ,"href","/docs/transformers/pr_18059/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AJ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LJ,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j9,"id","transformers.TFAutoModelForCausalLM"),c(j9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j9,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RJ,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(PJ,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BJ,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NJ,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(IJ,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qJ,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(jJ,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(DJ,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(GJ,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(OJ,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VJ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XJ,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.TFAutoModelForImageClassification"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_18059/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UJ,"href","/docs/transformers/pr_18059/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(JJ,"href","/docs/transformers/pr_18059/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(YJ,"href","/docs/transformers/pr_18059/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(KJ,"href","/docs/transformers/pr_18059/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(ZJ,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForMaskedLM"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(eY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aY,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nY,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sY,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lY,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iY,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dY,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fY,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mY,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gY,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hY,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pY,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uY,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vY,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FY,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TY,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MY,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(EY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($Y,"href","/docs/transformers/pr_18059/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.TFMarianMTModel"),c(SY,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForSequenceClassification"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(NY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DY,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OY,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_18059/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XY,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zY,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QY,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HY,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JY,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YY,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KY,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18059/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18059/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForMultipleChoice"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(fK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_K,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bK,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FK,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MK,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EK,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wK,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LK,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yK,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($K,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(kK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(BK,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(NK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_18059/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForTokenClassification"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(DK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XK,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zK,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QK,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WK,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HK,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UK,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KK,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZK,"href","/docs/transformers/pr_18059/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eZ,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oZ,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tZ,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForQuestionAnswering"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_18059/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_18059/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_18059/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_18059/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_18059/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TZ,"href","/docs/transformers/pr_18059/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_18059/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_18059/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_18059/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_18059/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18059/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($Z,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18059/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForVision2Seq"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_18059/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModel"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XZ,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartModel"),c(zZ,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.FlaxBeitModel"),c(QZ,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertModel"),c(WZ,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HZ,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UZ,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JZ,"href","/docs/transformers/pr_18059/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YZ,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KZ,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZZ,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eee,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oee,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ree,"href","/docs/transformers/pr_18059/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(tee,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.FlaxMarianModel"),c(aee,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nee,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.FlaxMT5Model"),c(see,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.FlaxOPTModel"),c(lee,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iee,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dee,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cee,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.FlaxT5Model"),c(fee,"href","/docs/transformers/pr_18059/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(mee,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.FlaxViTModel"),c(gee,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hee,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pee,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForCausalLM"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(_ee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vee,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Fee,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Tee,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Mee,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Eee,"href","/docs/transformers/pr_18059/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Cee,"href","/docs/transformers/pr_18059/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wee,"href","/docs/transformers/pr_18059/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Aee,"href","/docs/transformers/pr_18059/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Lee,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(yee,"href","/docs/transformers/pr_18059/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForPreTraining"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(xee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(See,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ree,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Bee,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Nee,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Iee,"href","/docs/transformers/pr_18059/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jee,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Gee,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Oee,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vee,"href","/docs/transformers/pr_18059/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Xee,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModelForMaskedLM"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(zee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Uee,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Yee,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Kee,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eoe,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(roe,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(toe,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(aoe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ioe,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(doe,"href","/docs/transformers/pr_18059/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_18059/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(foe,"href","/docs/transformers/pr_18059/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_18059/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(goe,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_18059/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_18059/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_18059/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(uoe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Toe,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Moe,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Eoe,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Coe,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c($oe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18059/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18059/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForTokenClassification"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Voe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qoe,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Woe,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Joe,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Koe,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(ere,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ore,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tre,"href","/docs/transformers/pr_18059/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(are,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nre,"href","/docs/transformers/pr_18059/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sre,"href","/docs/transformers/pr_18059/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lre,"href","/docs/transformers/pr_18059/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ire,"href","/docs/transformers/pr_18059/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dre,"href","/docs/transformers/pr_18059/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cre,"href","/docs/transformers/pr_18059/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(fre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/pr_18059/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForImageClassification"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(pre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_18059/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vre,"href","/docs/transformers/pr_18059/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForVision2Seq"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Fre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/pr_18059/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/pr_18059/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,K6),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,Z6),e(Qe,Bn),e(Qe,Nn),e(Nn,e7),e(Qe,$i),e(Qe,In),e(In,o7),e(Qe,ki),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,SS),e(Ae,Si),e(Si,RS),e(Ae,PS),b(f,Co,u),b(f,Ra,u),e(Ra,BS),e(Ra,Nf),e(Nf,NS),e(Ra,tHe),b(f,OVe,u),b(f,Ri,u),e(Ri,If),e(If,bae),M(r7,bae,null),e(Ri,aHe),e(Ri,vae),e(vae,nHe),b(f,VVe,u),b(f,qn,u),e(qn,sHe),e(qn,Fae),e(Fae,lHe),e(qn,iHe),e(qn,Tae),e(Tae,dHe),e(qn,cHe),b(f,XVe,u),M(t7,f,u),b(f,zVe,u),b(f,IS,u),e(IS,fHe),b(f,QVe,u),M(qf,f,u),b(f,WVe,u),b(f,Pi,u),e(Pi,jf),e(jf,Mae),M(a7,Mae,null),e(Pi,mHe),e(Pi,Eae),e(Eae,gHe),b(f,HVe,u),b(f,wo,u),M(n7,wo,null),e(wo,hHe),e(wo,s7),e(s7,pHe),e(s7,qS),e(qS,_He),e(s7,uHe),e(wo,bHe),e(wo,l7),e(l7,vHe),e(l7,Cae),e(Cae,FHe),e(l7,THe),e(wo,MHe),e(wo,Lr),M(i7,Lr,null),e(Lr,EHe),e(Lr,wae),e(wae,CHe),e(Lr,wHe),e(Lr,Bi),e(Bi,AHe),e(Bi,Aae),e(Aae,LHe),e(Bi,yHe),e(Bi,Lae),e(Lae,xHe),e(Bi,$He),e(Lr,kHe),e(Lr,A),e(A,Df),e(Df,yae),e(yae,SHe),e(Df,RHe),e(Df,jS),e(jS,PHe),e(Df,BHe),e(A,NHe),e(A,Gf),e(Gf,xae),e(xae,IHe),e(Gf,qHe),e(Gf,DS),e(DS,jHe),e(Gf,DHe),e(A,GHe),e(A,Of),e(Of,$ae),e($ae,OHe),e(Of,VHe),e(Of,GS),e(GS,XHe),e(Of,zHe),e(A,QHe),e(A,Vf),e(Vf,kae),e(kae,WHe),e(Vf,HHe),e(Vf,OS),e(OS,UHe),e(Vf,JHe),e(A,YHe),e(A,Xf),e(Xf,Sae),e(Sae,KHe),e(Xf,ZHe),e(Xf,VS),e(VS,eUe),e(Xf,oUe),e(A,rUe),e(A,zf),e(zf,Rae),e(Rae,tUe),e(zf,aUe),e(zf,XS),e(XS,nUe),e(zf,sUe),e(A,lUe),e(A,Qf),e(Qf,Pae),e(Pae,iUe),e(Qf,dUe),e(Qf,zS),e(zS,cUe),e(Qf,fUe),e(A,mUe),e(A,Wf),e(Wf,Bae),e(Bae,gUe),e(Wf,hUe),e(Wf,QS),e(QS,pUe),e(Wf,_Ue),e(A,uUe),e(A,Hf),e(Hf,Nae),e(Nae,bUe),e(Hf,vUe),e(Hf,WS),e(WS,FUe),e(Hf,TUe),e(A,MUe),e(A,Uf),e(Uf,Iae),e(Iae,EUe),e(Uf,CUe),e(Uf,HS),e(HS,wUe),e(Uf,AUe),e(A,LUe),e(A,Jf),e(Jf,qae),e(qae,yUe),e(Jf,xUe),e(Jf,US),e(US,$Ue),e(Jf,kUe),e(A,SUe),e(A,Yf),e(Yf,jae),e(jae,RUe),e(Yf,PUe),e(Yf,JS),e(JS,BUe),e(Yf,NUe),e(A,IUe),e(A,Kf),e(Kf,Dae),e(Dae,qUe),e(Kf,jUe),e(Kf,YS),e(YS,DUe),e(Kf,GUe),e(A,OUe),e(A,Zf),e(Zf,Gae),e(Gae,VUe),e(Zf,XUe),e(Zf,KS),e(KS,zUe),e(Zf,QUe),e(A,WUe),e(A,em),e(em,Oae),e(Oae,HUe),e(em,UUe),e(em,ZS),e(ZS,JUe),e(em,YUe),e(A,KUe),e(A,om),e(om,Vae),e(Vae,ZUe),e(om,eJe),e(om,eR),e(eR,oJe),e(om,rJe),e(A,tJe),e(A,rm),e(rm,Xae),e(Xae,aJe),e(rm,nJe),e(rm,oR),e(oR,sJe),e(rm,lJe),e(A,iJe),e(A,tm),e(tm,zae),e(zae,dJe),e(tm,cJe),e(tm,rR),e(rR,fJe),e(tm,mJe),e(A,gJe),e(A,am),e(am,Qae),e(Qae,hJe),e(am,pJe),e(am,tR),e(tR,_Je),e(am,uJe),e(A,bJe),e(A,nm),e(nm,Wae),e(Wae,vJe),e(nm,FJe),e(nm,aR),e(aR,TJe),e(nm,MJe),e(A,EJe),e(A,sm),e(sm,Hae),e(Hae,CJe),e(sm,wJe),e(sm,nR),e(nR,AJe),e(sm,LJe),e(A,yJe),e(A,lm),e(lm,Uae),e(Uae,xJe),e(lm,$Je),e(lm,sR),e(sR,kJe),e(lm,SJe),e(A,RJe),e(A,im),e(im,Jae),e(Jae,PJe),e(im,BJe),e(im,lR),e(lR,NJe),e(im,IJe),e(A,qJe),e(A,dm),e(dm,Yae),e(Yae,jJe),e(dm,DJe),e(dm,iR),e(iR,GJe),e(dm,OJe),e(A,VJe),e(A,cm),e(cm,Kae),e(Kae,XJe),e(cm,zJe),e(cm,dR),e(dR,QJe),e(cm,WJe),e(A,HJe),e(A,fm),e(fm,Zae),e(Zae,UJe),e(fm,JJe),e(fm,cR),e(cR,YJe),e(fm,KJe),e(A,ZJe),e(A,mm),e(mm,ene),e(ene,eYe),e(mm,oYe),e(mm,fR),e(fR,rYe),e(mm,tYe),e(A,aYe),e(A,gm),e(gm,one),e(one,nYe),e(gm,sYe),e(gm,mR),e(mR,lYe),e(gm,iYe),e(A,dYe),e(A,hm),e(hm,rne),e(rne,cYe),e(hm,fYe),e(hm,gR),e(gR,mYe),e(hm,gYe),e(A,hYe),e(A,pm),e(pm,tne),e(tne,pYe),e(pm,_Ye),e(pm,hR),e(hR,uYe),e(pm,bYe),e(A,vYe),e(A,_m),e(_m,ane),e(ane,FYe),e(_m,TYe),e(_m,pR),e(pR,MYe),e(_m,EYe),e(A,CYe),e(A,um),e(um,nne),e(nne,wYe),e(um,AYe),e(um,_R),e(_R,LYe),e(um,yYe),e(A,xYe),e(A,bm),e(bm,sne),e(sne,$Ye),e(bm,kYe),e(bm,uR),e(uR,SYe),e(bm,RYe),e(A,PYe),e(A,vm),e(vm,lne),e(lne,BYe),e(vm,NYe),e(vm,bR),e(bR,IYe),e(vm,qYe),e(A,jYe),e(A,Fm),e(Fm,ine),e(ine,DYe),e(Fm,GYe),e(Fm,vR),e(vR,OYe),e(Fm,VYe),e(A,XYe),e(A,Tm),e(Tm,dne),e(dne,zYe),e(Tm,QYe),e(Tm,FR),e(FR,WYe),e(Tm,HYe),e(A,UYe),e(A,Mm),e(Mm,cne),e(cne,JYe),e(Mm,YYe),e(Mm,TR),e(TR,KYe),e(Mm,ZYe),e(A,eKe),e(A,Em),e(Em,fne),e(fne,oKe),e(Em,rKe),e(Em,MR),e(MR,tKe),e(Em,aKe),e(A,nKe),e(A,Cm),e(Cm,mne),e(mne,sKe),e(Cm,lKe),e(Cm,ER),e(ER,iKe),e(Cm,dKe),e(A,cKe),e(A,wm),e(wm,gne),e(gne,fKe),e(wm,mKe),e(wm,CR),e(CR,gKe),e(wm,hKe),e(A,pKe),e(A,Am),e(Am,hne),e(hne,_Ke),e(Am,uKe),e(Am,wR),e(wR,bKe),e(Am,vKe),e(A,FKe),e(A,Lm),e(Lm,pne),e(pne,TKe),e(Lm,MKe),e(Lm,AR),e(AR,EKe),e(Lm,CKe),e(A,wKe),e(A,ym),e(ym,_ne),e(_ne,AKe),e(ym,LKe),e(ym,LR),e(LR,yKe),e(ym,xKe),e(A,$Ke),e(A,xm),e(xm,une),e(une,kKe),e(xm,SKe),e(xm,yR),e(yR,RKe),e(xm,PKe),e(A,BKe),e(A,$m),e($m,bne),e(bne,NKe),e($m,IKe),e($m,xR),e(xR,qKe),e($m,jKe),e(A,DKe),e(A,km),e(km,vne),e(vne,GKe),e(km,OKe),e(km,$R),e($R,VKe),e(km,XKe),e(A,zKe),e(A,Sm),e(Sm,Fne),e(Fne,QKe),e(Sm,WKe),e(Sm,kR),e(kR,HKe),e(Sm,UKe),e(A,JKe),e(A,Rm),e(Rm,Tne),e(Tne,YKe),e(Rm,KKe),e(Rm,SR),e(SR,ZKe),e(Rm,eZe),e(A,oZe),e(A,Pm),e(Pm,Mne),e(Mne,rZe),e(Pm,tZe),e(Pm,RR),e(RR,aZe),e(Pm,nZe),e(A,sZe),e(A,Bm),e(Bm,Ene),e(Ene,lZe),e(Bm,iZe),e(Bm,PR),e(PR,dZe),e(Bm,cZe),e(A,fZe),e(A,Nm),e(Nm,Cne),e(Cne,mZe),e(Nm,gZe),e(Nm,BR),e(BR,hZe),e(Nm,pZe),e(A,_Ze),e(A,Im),e(Im,wne),e(wne,uZe),e(Im,bZe),e(Im,NR),e(NR,vZe),e(Im,FZe),e(A,TZe),e(A,qm),e(qm,Ane),e(Ane,MZe),e(qm,EZe),e(qm,IR),e(IR,CZe),e(qm,wZe),e(A,AZe),e(A,jm),e(jm,Lne),e(Lne,LZe),e(jm,yZe),e(jm,qR),e(qR,xZe),e(jm,$Ze),e(A,kZe),e(A,Dm),e(Dm,yne),e(yne,SZe),e(Dm,RZe),e(Dm,jR),e(jR,PZe),e(Dm,BZe),e(A,NZe),e(A,Gm),e(Gm,xne),e(xne,IZe),e(Gm,qZe),e(Gm,DR),e(DR,jZe),e(Gm,DZe),e(A,GZe),e(A,Om),e(Om,$ne),e($ne,OZe),e(Om,VZe),e(Om,GR),e(GR,XZe),e(Om,zZe),e(A,QZe),e(A,Vm),e(Vm,kne),e(kne,WZe),e(Vm,HZe),e(Vm,OR),e(OR,UZe),e(Vm,JZe),e(A,YZe),e(A,Xm),e(Xm,Sne),e(Sne,KZe),e(Xm,ZZe),e(Xm,VR),e(VR,eeo),e(Xm,oeo),e(A,reo),e(A,zm),e(zm,Rne),e(Rne,teo),e(zm,aeo),e(zm,XR),e(XR,neo),e(zm,seo),e(A,leo),e(A,Qm),e(Qm,Pne),e(Pne,ieo),e(Qm,deo),e(Qm,zR),e(zR,ceo),e(Qm,feo),e(A,meo),e(A,Wm),e(Wm,Bne),e(Bne,geo),e(Wm,heo),e(Wm,QR),e(QR,peo),e(Wm,_eo),e(A,ueo),e(A,Hm),e(Hm,Nne),e(Nne,beo),e(Hm,veo),e(Hm,WR),e(WR,Feo),e(Hm,Teo),e(A,Meo),e(A,Um),e(Um,Ine),e(Ine,Eeo),e(Um,Ceo),e(Um,HR),e(HR,weo),e(Um,Aeo),e(A,Leo),e(A,Jm),e(Jm,qne),e(qne,yeo),e(Jm,xeo),e(Jm,UR),e(UR,$eo),e(Jm,keo),e(A,Seo),e(A,Ym),e(Ym,jne),e(jne,Reo),e(Ym,Peo),e(Ym,JR),e(JR,Beo),e(Ym,Neo),e(A,Ieo),e(A,Km),e(Km,Dne),e(Dne,qeo),e(Km,jeo),e(Km,YR),e(YR,Deo),e(Km,Geo),e(A,Oeo),e(A,Zm),e(Zm,Gne),e(Gne,Veo),e(Zm,Xeo),e(Zm,KR),e(KR,zeo),e(Zm,Qeo),e(A,Weo),e(A,eg),e(eg,One),e(One,Heo),e(eg,Ueo),e(eg,ZR),e(ZR,Jeo),e(eg,Yeo),e(A,Keo),e(A,og),e(og,Vne),e(Vne,Zeo),e(og,eoo),e(og,eP),e(eP,ooo),e(og,roo),e(A,too),e(A,rg),e(rg,Xne),e(Xne,aoo),e(rg,noo),e(rg,oP),e(oP,soo),e(rg,loo),e(A,ioo),e(A,tg),e(tg,zne),e(zne,doo),e(tg,coo),e(tg,rP),e(rP,foo),e(tg,moo),e(A,goo),e(A,ag),e(ag,Qne),e(Qne,hoo),e(ag,poo),e(ag,tP),e(tP,_oo),e(ag,uoo),e(A,boo),e(A,ng),e(ng,Wne),e(Wne,voo),e(ng,Foo),e(ng,aP),e(aP,Too),e(ng,Moo),e(A,Eoo),e(A,sg),e(sg,Hne),e(Hne,Coo),e(sg,woo),e(sg,nP),e(nP,Aoo),e(sg,Loo),e(A,yoo),e(A,lg),e(lg,Une),e(Une,xoo),e(lg,$oo),e(lg,sP),e(sP,koo),e(lg,Soo),e(A,Roo),e(A,ig),e(ig,Jne),e(Jne,Poo),e(ig,Boo),e(ig,lP),e(lP,Noo),e(ig,Ioo),e(A,qoo),e(A,dg),e(dg,Yne),e(Yne,joo),e(dg,Doo),e(dg,iP),e(iP,Goo),e(dg,Ooo),e(A,Voo),e(A,cg),e(cg,Kne),e(Kne,Xoo),e(cg,zoo),e(cg,dP),e(dP,Qoo),e(cg,Woo),e(A,Hoo),e(A,fg),e(fg,Zne),e(Zne,Uoo),e(fg,Joo),e(fg,cP),e(cP,Yoo),e(fg,Koo),e(A,Zoo),e(A,mg),e(mg,ese),e(ese,ero),e(mg,oro),e(mg,fP),e(fP,rro),e(mg,tro),e(A,aro),e(A,gg),e(gg,ose),e(ose,nro),e(gg,sro),e(gg,mP),e(mP,lro),e(gg,iro),e(A,dro),e(A,hg),e(hg,rse),e(rse,cro),e(hg,fro),e(hg,gP),e(gP,mro),e(hg,gro),e(A,hro),e(A,pg),e(pg,tse),e(tse,pro),e(pg,_ro),e(pg,hP),e(hP,uro),e(pg,bro),e(A,vro),e(A,_g),e(_g,ase),e(ase,Fro),e(_g,Tro),e(_g,pP),e(pP,Mro),e(_g,Ero),e(A,Cro),e(A,ug),e(ug,nse),e(nse,wro),e(ug,Aro),e(ug,_P),e(_P,Lro),e(ug,yro),e(A,xro),e(A,bg),e(bg,sse),e(sse,$ro),e(bg,kro),e(bg,uP),e(uP,Sro),e(bg,Rro),e(A,Pro),e(A,vg),e(vg,lse),e(lse,Bro),e(vg,Nro),e(vg,bP),e(bP,Iro),e(vg,qro),e(A,jro),e(A,Fg),e(Fg,ise),e(ise,Dro),e(Fg,Gro),e(Fg,vP),e(vP,Oro),e(Fg,Vro),e(A,Xro),e(A,Tg),e(Tg,dse),e(dse,zro),e(Tg,Qro),e(Tg,FP),e(FP,Wro),e(Tg,Hro),e(A,Uro),e(A,Mg),e(Mg,cse),e(cse,Jro),e(Mg,Yro),e(Mg,TP),e(TP,Kro),e(Mg,Zro),e(A,eto),e(A,Eg),e(Eg,fse),e(fse,oto),e(Eg,rto),e(Eg,MP),e(MP,tto),e(Eg,ato),e(A,nto),e(A,Cg),e(Cg,mse),e(mse,sto),e(Cg,lto),e(Cg,EP),e(EP,ito),e(Cg,dto),e(A,cto),e(A,wg),e(wg,gse),e(gse,fto),e(wg,mto),e(wg,CP),e(CP,gto),e(wg,hto),e(A,pto),e(A,Ag),e(Ag,hse),e(hse,_to),e(Ag,uto),e(Ag,wP),e(wP,bto),e(Ag,vto),e(A,Fto),e(A,Lg),e(Lg,pse),e(pse,Tto),e(Lg,Mto),e(Lg,AP),e(AP,Eto),e(Lg,Cto),e(A,wto),e(A,yg),e(yg,_se),e(_se,Ato),e(yg,Lto),e(yg,LP),e(LP,yto),e(yg,xto),e(A,$to),e(A,xg),e(xg,use),e(use,kto),e(xg,Sto),e(xg,yP),e(yP,Rto),e(xg,Pto),e(A,Bto),e(A,$g),e($g,bse),e(bse,Nto),e($g,Ito),e($g,xP),e(xP,qto),e($g,jto),e(A,Dto),e(A,kg),e(kg,vse),e(vse,Gto),e(kg,Oto),e(kg,$P),e($P,Vto),e(kg,Xto),e(A,zto),e(A,Sg),e(Sg,Fse),e(Fse,Qto),e(Sg,Wto),e(Sg,kP),e(kP,Hto),e(Sg,Uto),e(A,Jto),e(A,Rg),e(Rg,Tse),e(Tse,Yto),e(Rg,Kto),e(Rg,SP),e(SP,Zto),e(Rg,eao),e(A,oao),e(A,Pg),e(Pg,Mse),e(Mse,rao),e(Pg,tao),e(Pg,RP),e(RP,aao),e(Pg,nao),e(A,sao),e(A,Bg),e(Bg,Ese),e(Ese,lao),e(Bg,iao),e(Bg,PP),e(PP,dao),e(Bg,cao),e(A,fao),e(A,Ng),e(Ng,Cse),e(Cse,mao),e(Ng,gao),e(Ng,BP),e(BP,hao),e(Ng,pao),e(A,_ao),e(A,Ig),e(Ig,wse),e(wse,uao),e(Ig,bao),e(Ig,NP),e(NP,vao),e(Ig,Fao),e(A,Tao),e(A,qg),e(qg,Ase),e(Ase,Mao),e(qg,Eao),e(qg,IP),e(IP,Cao),e(qg,wao),e(A,Aao),e(A,jg),e(jg,Lse),e(Lse,Lao),e(jg,yao),e(jg,qP),e(qP,xao),e(jg,$ao),e(A,kao),e(A,Dg),e(Dg,yse),e(yse,Sao),e(Dg,Rao),e(Dg,jP),e(jP,Pao),e(Dg,Bao),e(A,Nao),e(A,Gg),e(Gg,xse),e(xse,Iao),e(Gg,qao),e(Gg,DP),e(DP,jao),e(Gg,Dao),e(A,Gao),e(A,Og),e(Og,$se),e($se,Oao),e(Og,Vao),e(Og,GP),e(GP,Xao),e(Og,zao),e(A,Qao),e(A,Vg),e(Vg,kse),e(kse,Wao),e(Vg,Hao),e(Vg,OP),e(OP,Uao),e(Vg,Jao),e(A,Yao),e(A,Xg),e(Xg,Sse),e(Sse,Kao),e(Xg,Zao),e(Xg,VP),e(VP,eno),e(Xg,ono),e(A,rno),e(A,zg),e(zg,Rse),e(Rse,tno),e(zg,ano),e(zg,XP),e(XP,nno),e(zg,sno),e(A,lno),e(A,Qg),e(Qg,Pse),e(Pse,ino),e(Qg,dno),e(Qg,zP),e(zP,cno),e(Qg,fno),e(A,mno),e(A,Wg),e(Wg,Bse),e(Bse,gno),e(Wg,hno),e(Wg,QP),e(QP,pno),e(Wg,_no),e(A,uno),e(A,Hg),e(Hg,Nse),e(Nse,bno),e(Hg,vno),e(Hg,WP),e(WP,Fno),e(Hg,Tno),e(A,Mno),e(A,Ug),e(Ug,Ise),e(Ise,Eno),e(Ug,Cno),e(Ug,HP),e(HP,wno),e(Ug,Ano),e(Lr,Lno),M(Jg,Lr,null),e(wo,yno),e(wo,Yg),M(d7,Yg,null),e(Yg,xno),e(Yg,qse),e(qse,$no),b(f,UVe,u),b(f,Ni,u),e(Ni,Kg),e(Kg,jse),M(c7,jse,null),e(Ni,kno),e(Ni,Dse),e(Dse,Sno),b(f,JVe,u),b(f,Ao,u),M(f7,Ao,null),e(Ao,Rno),e(Ao,m7),e(m7,Pno),e(m7,UP),e(UP,Bno),e(m7,Nno),e(Ao,Ino),e(Ao,g7),e(g7,qno),e(g7,Gse),e(Gse,jno),e(g7,Dno),e(Ao,Gno),e(Ao,yr),M(h7,yr,null),e(yr,Ono),e(yr,Ose),e(Ose,Vno),e(yr,Xno),e(yr,Pa),e(Pa,zno),e(Pa,Vse),e(Vse,Qno),e(Pa,Wno),e(Pa,Xse),e(Xse,Hno),e(Pa,Uno),e(Pa,zse),e(zse,Jno),e(Pa,Yno),e(yr,Kno),e(yr,k),e(k,jn),e(jn,Qse),e(Qse,Zno),e(jn,eso),e(jn,JP),e(JP,oso),e(jn,rso),e(jn,YP),e(YP,tso),e(jn,aso),e(k,nso),e(k,Dn),e(Dn,Wse),e(Wse,sso),e(Dn,lso),e(Dn,KP),e(KP,iso),e(Dn,dso),e(Dn,ZP),e(ZP,cso),e(Dn,fso),e(k,mso),e(k,Gn),e(Gn,Hse),e(Hse,gso),e(Gn,hso),e(Gn,eB),e(eB,pso),e(Gn,_so),e(Gn,oB),e(oB,uso),e(Gn,bso),e(k,vso),e(k,Zg),e(Zg,Use),e(Use,Fso),e(Zg,Tso),e(Zg,rB),e(rB,Mso),e(Zg,Eso),e(k,Cso),e(k,On),e(On,Jse),e(Jse,wso),e(On,Aso),e(On,tB),e(tB,Lso),e(On,yso),e(On,aB),e(aB,xso),e(On,$so),e(k,kso),e(k,eh),e(eh,Yse),e(Yse,Sso),e(eh,Rso),e(eh,nB),e(nB,Pso),e(eh,Bso),e(k,Nso),e(k,oh),e(oh,Kse),e(Kse,Iso),e(oh,qso),e(oh,sB),e(sB,jso),e(oh,Dso),e(k,Gso),e(k,rh),e(rh,Zse),e(Zse,Oso),e(rh,Vso),e(rh,lB),e(lB,Xso),e(rh,zso),e(k,Qso),e(k,Vn),e(Vn,ele),e(ele,Wso),e(Vn,Hso),e(Vn,iB),e(iB,Uso),e(Vn,Jso),e(Vn,dB),e(dB,Yso),e(Vn,Kso),e(k,Zso),e(k,Xn),e(Xn,ole),e(ole,elo),e(Xn,olo),e(Xn,cB),e(cB,rlo),e(Xn,tlo),e(Xn,fB),e(fB,alo),e(Xn,nlo),e(k,slo),e(k,zn),e(zn,rle),e(rle,llo),e(zn,ilo),e(zn,mB),e(mB,dlo),e(zn,clo),e(zn,gB),e(gB,flo),e(zn,mlo),e(k,glo),e(k,th),e(th,tle),e(tle,hlo),e(th,plo),e(th,hB),e(hB,_lo),e(th,ulo),e(k,blo),e(k,ah),e(ah,ale),e(ale,vlo),e(ah,Flo),e(ah,pB),e(pB,Tlo),e(ah,Mlo),e(k,Elo),e(k,nh),e(nh,nle),e(nle,Clo),e(nh,wlo),e(nh,_B),e(_B,Alo),e(nh,Llo),e(k,ylo),e(k,Qn),e(Qn,sle),e(sle,xlo),e(Qn,$lo),e(Qn,uB),e(uB,klo),e(Qn,Slo),e(Qn,bB),e(bB,Rlo),e(Qn,Plo),e(k,Blo),e(k,sh),e(sh,lle),e(lle,Nlo),e(sh,Ilo),e(sh,vB),e(vB,qlo),e(sh,jlo),e(k,Dlo),e(k,Wn),e(Wn,ile),e(ile,Glo),e(Wn,Olo),e(Wn,FB),e(FB,Vlo),e(Wn,Xlo),e(Wn,TB),e(TB,zlo),e(Wn,Qlo),e(k,Wlo),e(k,Hn),e(Hn,dle),e(dle,Hlo),e(Hn,Ulo),e(Hn,MB),e(MB,Jlo),e(Hn,Ylo),e(Hn,EB),e(EB,Klo),e(Hn,Zlo),e(k,eio),e(k,Un),e(Un,cle),e(cle,oio),e(Un,rio),e(Un,CB),e(CB,tio),e(Un,aio),e(Un,wB),e(wB,nio),e(Un,sio),e(k,lio),e(k,Jn),e(Jn,fle),e(fle,iio),e(Jn,dio),e(Jn,AB),e(AB,cio),e(Jn,fio),e(Jn,LB),e(LB,mio),e(Jn,gio),e(k,hio),e(k,lh),e(lh,mle),e(mle,pio),e(lh,_io),e(lh,yB),e(yB,uio),e(lh,bio),e(k,vio),e(k,Yn),e(Yn,gle),e(gle,Fio),e(Yn,Tio),e(Yn,xB),e(xB,Mio),e(Yn,Eio),e(Yn,$B),e($B,Cio),e(Yn,wio),e(k,Aio),e(k,Kn),e(Kn,hle),e(hle,Lio),e(Kn,yio),e(Kn,kB),e(kB,xio),e(Kn,$io),e(Kn,SB),e(SB,kio),e(Kn,Sio),e(k,Rio),e(k,Zn),e(Zn,ple),e(ple,Pio),e(Zn,Bio),e(Zn,RB),e(RB,Nio),e(Zn,Iio),e(Zn,PB),e(PB,qio),e(Zn,jio),e(k,Dio),e(k,es),e(es,_le),e(_le,Gio),e(es,Oio),e(es,BB),e(BB,Vio),e(es,Xio),e(es,NB),e(NB,zio),e(es,Qio),e(k,Wio),e(k,os),e(os,ule),e(ule,Hio),e(os,Uio),e(os,IB),e(IB,Jio),e(os,Yio),e(os,qB),e(qB,Kio),e(os,Zio),e(k,edo),e(k,rs),e(rs,ble),e(ble,odo),e(rs,rdo),e(rs,jB),e(jB,tdo),e(rs,ado),e(rs,DB),e(DB,ndo),e(rs,sdo),e(k,ldo),e(k,ih),e(ih,vle),e(vle,ido),e(ih,ddo),e(ih,GB),e(GB,cdo),e(ih,fdo),e(k,mdo),e(k,ts),e(ts,Fle),e(Fle,gdo),e(ts,hdo),e(ts,OB),e(OB,pdo),e(ts,_do),e(ts,VB),e(VB,udo),e(ts,bdo),e(k,vdo),e(k,dh),e(dh,Tle),e(Tle,Fdo),e(dh,Tdo),e(dh,XB),e(XB,Mdo),e(dh,Edo),e(k,Cdo),e(k,as),e(as,Mle),e(Mle,wdo),e(as,Ado),e(as,zB),e(zB,Ldo),e(as,ydo),e(as,QB),e(QB,xdo),e(as,$do),e(k,kdo),e(k,ns),e(ns,Ele),e(Ele,Sdo),e(ns,Rdo),e(ns,WB),e(WB,Pdo),e(ns,Bdo),e(ns,HB),e(HB,Ndo),e(ns,Ido),e(k,qdo),e(k,ss),e(ss,Cle),e(Cle,jdo),e(ss,Ddo),e(ss,UB),e(UB,Gdo),e(ss,Odo),e(ss,JB),e(JB,Vdo),e(ss,Xdo),e(k,zdo),e(k,ch),e(ch,wle),e(wle,Qdo),e(ch,Wdo),e(ch,YB),e(YB,Hdo),e(ch,Udo),e(k,Jdo),e(k,ls),e(ls,Ale),e(Ale,Ydo),e(ls,Kdo),e(ls,KB),e(KB,Zdo),e(ls,eco),e(ls,ZB),e(ZB,oco),e(ls,rco),e(k,tco),e(k,is),e(is,Lle),e(Lle,aco),e(is,nco),e(is,eN),e(eN,sco),e(is,lco),e(is,oN),e(oN,ico),e(is,dco),e(k,cco),e(k,ds),e(ds,yle),e(yle,fco),e(ds,mco),e(ds,rN),e(rN,gco),e(ds,hco),e(ds,tN),e(tN,pco),e(ds,_co),e(k,uco),e(k,fh),e(fh,xle),e(xle,bco),e(fh,vco),e(fh,aN),e(aN,Fco),e(fh,Tco),e(k,Mco),e(k,cs),e(cs,$le),e($le,Eco),e(cs,Cco),e(cs,nN),e(nN,wco),e(cs,Aco),e(cs,sN),e(sN,Lco),e(cs,yco),e(k,xco),e(k,fs),e(fs,kle),e(kle,$co),e(fs,kco),e(fs,lN),e(lN,Sco),e(fs,Rco),e(fs,iN),e(iN,Pco),e(fs,Bco),e(k,Nco),e(k,ms),e(ms,Sle),e(Sle,Ico),e(ms,qco),e(ms,dN),e(dN,jco),e(ms,Dco),e(ms,cN),e(cN,Gco),e(ms,Oco),e(k,Vco),e(k,gs),e(gs,Rle),e(Rle,Xco),e(gs,zco),e(gs,fN),e(fN,Qco),e(gs,Wco),e(gs,mN),e(mN,Hco),e(gs,Uco),e(k,Jco),e(k,hs),e(hs,Ple),e(Ple,Yco),e(hs,Kco),e(hs,gN),e(gN,Zco),e(hs,efo),e(hs,hN),e(hN,ofo),e(hs,rfo),e(k,tfo),e(k,ps),e(ps,Ble),e(Ble,afo),e(ps,nfo),e(ps,pN),e(pN,sfo),e(ps,lfo),e(ps,_N),e(_N,ifo),e(ps,dfo),e(k,cfo),e(k,_s),e(_s,Nle),e(Nle,ffo),e(_s,mfo),e(_s,uN),e(uN,gfo),e(_s,hfo),e(_s,bN),e(bN,pfo),e(_s,_fo),e(k,ufo),e(k,us),e(us,Ile),e(Ile,bfo),e(us,vfo),e(us,vN),e(vN,Ffo),e(us,Tfo),e(us,FN),e(FN,Mfo),e(us,Efo),e(k,Cfo),e(k,mh),e(mh,qle),e(qle,wfo),e(mh,Afo),e(mh,TN),e(TN,Lfo),e(mh,yfo),e(k,xfo),e(k,bs),e(bs,jle),e(jle,$fo),e(bs,kfo),e(bs,MN),e(MN,Sfo),e(bs,Rfo),e(bs,EN),e(EN,Pfo),e(bs,Bfo),e(k,Nfo),e(k,gh),e(gh,Dle),e(Dle,Ifo),e(gh,qfo),e(gh,CN),e(CN,jfo),e(gh,Dfo),e(k,Gfo),e(k,hh),e(hh,Gle),e(Gle,Ofo),e(hh,Vfo),e(hh,wN),e(wN,Xfo),e(hh,zfo),e(k,Qfo),e(k,vs),e(vs,Ole),e(Ole,Wfo),e(vs,Hfo),e(vs,AN),e(AN,Ufo),e(vs,Jfo),e(vs,LN),e(LN,Yfo),e(vs,Kfo),e(k,Zfo),e(k,Fs),e(Fs,Vle),e(Vle,emo),e(Fs,omo),e(Fs,yN),e(yN,rmo),e(Fs,tmo),e(Fs,xN),e(xN,amo),e(Fs,nmo),e(k,smo),e(k,Ts),e(Ts,Xle),e(Xle,lmo),e(Ts,imo),e(Ts,$N),e($N,dmo),e(Ts,cmo),e(Ts,kN),e(kN,fmo),e(Ts,mmo),e(k,gmo),e(k,ph),e(ph,zle),e(zle,hmo),e(ph,pmo),e(ph,SN),e(SN,_mo),e(ph,umo),e(k,bmo),e(k,Ms),e(Ms,Qle),e(Qle,vmo),e(Ms,Fmo),e(Ms,RN),e(RN,Tmo),e(Ms,Mmo),e(Ms,PN),e(PN,Emo),e(Ms,Cmo),e(k,wmo),e(k,Es),e(Es,Wle),e(Wle,Amo),e(Es,Lmo),e(Es,BN),e(BN,ymo),e(Es,xmo),e(Es,NN),e(NN,$mo),e(Es,kmo),e(k,Smo),e(k,Cs),e(Cs,Hle),e(Hle,Rmo),e(Cs,Pmo),e(Cs,IN),e(IN,Bmo),e(Cs,Nmo),e(Cs,qN),e(qN,Imo),e(Cs,qmo),e(k,jmo),e(k,ws),e(ws,Ule),e(Ule,Dmo),e(ws,Gmo),e(ws,jN),e(jN,Omo),e(ws,Vmo),e(ws,DN),e(DN,Xmo),e(ws,zmo),e(k,Qmo),e(k,As),e(As,Jle),e(Jle,Wmo),e(As,Hmo),e(As,GN),e(GN,Umo),e(As,Jmo),e(As,ON),e(ON,Ymo),e(As,Kmo),e(k,Zmo),e(k,Ls),e(Ls,Yle),e(Yle,ego),e(Ls,ogo),e(Ls,VN),e(VN,rgo),e(Ls,tgo),e(Ls,XN),e(XN,ago),e(Ls,ngo),e(k,sgo),e(k,ys),e(ys,Kle),e(Kle,lgo),e(ys,igo),e(ys,zN),e(zN,dgo),e(ys,cgo),e(ys,QN),e(QN,fgo),e(ys,mgo),e(k,ggo),e(k,_h),e(_h,Zle),e(Zle,hgo),e(_h,pgo),e(_h,WN),e(WN,_go),e(_h,ugo),e(k,bgo),e(k,xs),e(xs,eie),e(eie,vgo),e(xs,Fgo),e(xs,HN),e(HN,Tgo),e(xs,Mgo),e(xs,UN),e(UN,Ego),e(xs,Cgo),e(k,wgo),e(k,uh),e(uh,oie),e(oie,Ago),e(uh,Lgo),e(uh,JN),e(JN,ygo),e(uh,xgo),e(k,$go),e(k,bh),e(bh,rie),e(rie,kgo),e(bh,Sgo),e(bh,YN),e(YN,Rgo),e(bh,Pgo),e(k,Bgo),e(k,vh),e(vh,tie),e(tie,Ngo),e(vh,Igo),e(vh,KN),e(KN,qgo),e(vh,jgo),e(k,Dgo),e(k,Fh),e(Fh,aie),e(aie,Ggo),e(Fh,Ogo),e(Fh,ZN),e(ZN,Vgo),e(Fh,Xgo),e(k,zgo),e(k,$s),e($s,nie),e(nie,Qgo),e($s,Wgo),e($s,eI),e(eI,Hgo),e($s,Ugo),e($s,oI),e(oI,Jgo),e($s,Ygo),e(k,Kgo),e(k,Th),e(Th,sie),e(sie,Zgo),e(Th,eho),e(Th,rI),e(rI,oho),e(Th,rho),e(k,tho),e(k,ks),e(ks,lie),e(lie,aho),e(ks,nho),e(ks,tI),e(tI,sho),e(ks,lho),e(ks,aI),e(aI,iho),e(ks,dho),e(k,cho),e(k,Ss),e(Ss,iie),e(iie,fho),e(Ss,mho),e(Ss,nI),e(nI,gho),e(Ss,hho),e(Ss,sI),e(sI,pho),e(Ss,_ho),e(k,uho),e(k,Rs),e(Rs,die),e(die,bho),e(Rs,vho),e(Rs,lI),e(lI,Fho),e(Rs,Tho),e(Rs,iI),e(iI,Mho),e(Rs,Eho),e(k,Cho),e(k,Ps),e(Ps,cie),e(cie,who),e(Ps,Aho),e(Ps,dI),e(dI,Lho),e(Ps,yho),e(Ps,cI),e(cI,xho),e(Ps,$ho),e(k,kho),e(k,Bs),e(Bs,fie),e(fie,Sho),e(Bs,Rho),e(Bs,fI),e(fI,Pho),e(Bs,Bho),e(Bs,mI),e(mI,Nho),e(Bs,Iho),e(k,qho),e(k,Ns),e(Ns,mie),e(mie,jho),e(Ns,Dho),e(Ns,gI),e(gI,Gho),e(Ns,Oho),e(Ns,hI),e(hI,Vho),e(Ns,Xho),e(k,zho),e(k,Mh),e(Mh,gie),e(gie,Qho),e(Mh,Who),e(Mh,pI),e(pI,Hho),e(Mh,Uho),e(k,Jho),e(k,Eh),e(Eh,hie),e(hie,Yho),e(Eh,Kho),e(Eh,_I),e(_I,Zho),e(Eh,epo),e(k,opo),e(k,Is),e(Is,pie),e(pie,rpo),e(Is,tpo),e(Is,uI),e(uI,apo),e(Is,npo),e(Is,bI),e(bI,spo),e(Is,lpo),e(k,ipo),e(k,qs),e(qs,_ie),e(_ie,dpo),e(qs,cpo),e(qs,vI),e(vI,fpo),e(qs,mpo),e(qs,FI),e(FI,gpo),e(qs,hpo),e(k,ppo),e(k,js),e(js,uie),e(uie,_po),e(js,upo),e(js,TI),e(TI,bpo),e(js,vpo),e(js,MI),e(MI,Fpo),e(js,Tpo),e(k,Mpo),e(k,Ch),e(Ch,bie),e(bie,Epo),e(Ch,Cpo),e(Ch,EI),e(EI,wpo),e(Ch,Apo),e(k,Lpo),e(k,wh),e(wh,vie),e(vie,ypo),e(wh,xpo),e(wh,CI),e(CI,$po),e(wh,kpo),e(k,Spo),e(k,Ah),e(Ah,Fie),e(Fie,Rpo),e(Ah,Ppo),e(Ah,wI),e(wI,Bpo),e(Ah,Npo),e(k,Ipo),e(k,Ds),e(Ds,Tie),e(Tie,qpo),e(Ds,jpo),e(Ds,AI),e(AI,Dpo),e(Ds,Gpo),e(Ds,LI),e(LI,Opo),e(Ds,Vpo),e(k,Xpo),e(k,Gs),e(Gs,Mie),e(Mie,zpo),e(Gs,Qpo),e(Gs,yI),e(yI,Wpo),e(Gs,Hpo),e(Gs,xI),e(xI,Upo),e(Gs,Jpo),e(k,Ypo),e(k,Lh),e(Lh,Eie),e(Eie,Kpo),e(Lh,Zpo),e(Lh,$I),e($I,e_o),e(Lh,o_o),e(k,r_o),e(k,yh),e(yh,Cie),e(Cie,t_o),e(yh,a_o),e(yh,kI),e(kI,n_o),e(yh,s_o),e(k,l_o),e(k,xh),e(xh,wie),e(wie,i_o),e(xh,d_o),e(xh,SI),e(SI,c_o),e(xh,f_o),e(k,m_o),e(k,Os),e(Os,Aie),e(Aie,g_o),e(Os,h_o),e(Os,RI),e(RI,p_o),e(Os,__o),e(Os,PI),e(PI,u_o),e(Os,b_o),e(k,v_o),e(k,$h),e($h,Lie),e(Lie,F_o),e($h,T_o),e($h,BI),e(BI,M_o),e($h,E_o),e(k,C_o),e(k,kh),e(kh,yie),e(yie,w_o),e(kh,A_o),e(kh,NI),e(NI,L_o),e(kh,y_o),e(k,x_o),e(k,Vs),e(Vs,xie),e(xie,$_o),e(Vs,k_o),e(Vs,II),e(II,S_o),e(Vs,R_o),e(Vs,qI),e(qI,P_o),e(Vs,B_o),e(k,N_o),e(k,Xs),e(Xs,$ie),e($ie,I_o),e(Xs,q_o),e(Xs,jI),e(jI,j_o),e(Xs,D_o),e(Xs,DI),e(DI,G_o),e(Xs,O_o),e(k,V_o),e(k,zs),e(zs,kie),e(kie,X_o),e(zs,z_o),e(zs,GI),e(GI,Q_o),e(zs,W_o),e(zs,OI),e(OI,H_o),e(zs,U_o),e(k,J_o),e(k,Qs),e(Qs,Sie),e(Sie,Y_o),e(Qs,K_o),e(Qs,VI),e(VI,Z_o),e(Qs,euo),e(Qs,XI),e(XI,ouo),e(Qs,ruo),e(yr,tuo),M(Sh,yr,null),e(Ao,auo),e(Ao,Rh),M(p7,Rh,null),e(Rh,nuo),e(Rh,Rie),e(Rie,suo),b(f,YVe,u),b(f,Ii,u),e(Ii,Ph),e(Ph,Pie),M(_7,Pie,null),e(Ii,luo),e(Ii,Bie),e(Bie,iuo),b(f,KVe,u),b(f,Lo,u),M(u7,Lo,null),e(Lo,duo),e(Lo,b7),e(b7,cuo),e(b7,zI),e(zI,fuo),e(b7,muo),e(Lo,guo),e(Lo,v7),e(v7,huo),e(v7,Nie),e(Nie,puo),e(v7,_uo),e(Lo,uuo),e(Lo,He),M(F7,He,null),e(He,buo),e(He,Iie),e(Iie,vuo),e(He,Fuo),e(He,Ba),e(Ba,Tuo),e(Ba,qie),e(qie,Muo),e(Ba,Euo),e(Ba,jie),e(jie,Cuo),e(Ba,wuo),e(Ba,Die),e(Die,Auo),e(Ba,Luo),e(He,yuo),e(He,Y),e(Y,Bh),e(Bh,Gie),e(Gie,xuo),e(Bh,$uo),e(Bh,QI),e(QI,kuo),e(Bh,Suo),e(Y,Ruo),e(Y,Nh),e(Nh,Oie),e(Oie,Puo),e(Nh,Buo),e(Nh,WI),e(WI,Nuo),e(Nh,Iuo),e(Y,quo),e(Y,Ih),e(Ih,Vie),e(Vie,juo),e(Ih,Duo),e(Ih,HI),e(HI,Guo),e(Ih,Ouo),e(Y,Vuo),e(Y,qh),e(qh,Xie),e(Xie,Xuo),e(qh,zuo),e(qh,UI),e(UI,Quo),e(qh,Wuo),e(Y,Huo),e(Y,jh),e(jh,zie),e(zie,Uuo),e(jh,Juo),e(jh,JI),e(JI,Yuo),e(jh,Kuo),e(Y,Zuo),e(Y,Dh),e(Dh,Qie),e(Qie,e1o),e(Dh,o1o),e(Dh,YI),e(YI,r1o),e(Dh,t1o),e(Y,a1o),e(Y,Gh),e(Gh,Wie),e(Wie,n1o),e(Gh,s1o),e(Gh,KI),e(KI,l1o),e(Gh,i1o),e(Y,d1o),e(Y,Oh),e(Oh,Hie),e(Hie,c1o),e(Oh,f1o),e(Oh,ZI),e(ZI,m1o),e(Oh,g1o),e(Y,h1o),e(Y,Vh),e(Vh,Uie),e(Uie,p1o),e(Vh,_1o),e(Vh,eq),e(eq,u1o),e(Vh,b1o),e(Y,v1o),e(Y,Xh),e(Xh,Jie),e(Jie,F1o),e(Xh,T1o),e(Xh,oq),e(oq,M1o),e(Xh,E1o),e(Y,C1o),e(Y,zh),e(zh,Yie),e(Yie,w1o),e(zh,A1o),e(zh,rq),e(rq,L1o),e(zh,y1o),e(Y,x1o),e(Y,Qh),e(Qh,Kie),e(Kie,$1o),e(Qh,k1o),e(Qh,tq),e(tq,S1o),e(Qh,R1o),e(Y,P1o),e(Y,Wh),e(Wh,Zie),e(Zie,B1o),e(Wh,N1o),e(Wh,aq),e(aq,I1o),e(Wh,q1o),e(Y,j1o),e(Y,Hh),e(Hh,ede),e(ede,D1o),e(Hh,G1o),e(Hh,nq),e(nq,O1o),e(Hh,V1o),e(Y,X1o),e(Y,Uh),e(Uh,ode),e(ode,z1o),e(Uh,Q1o),e(Uh,sq),e(sq,W1o),e(Uh,H1o),e(Y,U1o),e(Y,Jh),e(Jh,rde),e(rde,J1o),e(Jh,Y1o),e(Jh,lq),e(lq,K1o),e(Jh,Z1o),e(Y,e2o),e(Y,Yh),e(Yh,tde),e(tde,o2o),e(Yh,r2o),e(Yh,iq),e(iq,t2o),e(Yh,a2o),e(Y,n2o),e(Y,Kh),e(Kh,ade),e(ade,s2o),e(Kh,l2o),e(Kh,dq),e(dq,i2o),e(Kh,d2o),e(Y,c2o),e(Y,Zh),e(Zh,nde),e(nde,f2o),e(Zh,m2o),e(Zh,cq),e(cq,g2o),e(Zh,h2o),e(Y,p2o),e(Y,ep),e(ep,sde),e(sde,_2o),e(ep,u2o),e(ep,fq),e(fq,b2o),e(ep,v2o),e(Y,F2o),e(Y,op),e(op,lde),e(lde,T2o),e(op,M2o),e(op,mq),e(mq,E2o),e(op,C2o),e(Y,w2o),e(Y,rp),e(rp,ide),e(ide,A2o),e(rp,L2o),e(rp,gq),e(gq,y2o),e(rp,x2o),e(Y,$2o),e(Y,tp),e(tp,dde),e(dde,k2o),e(tp,S2o),e(tp,hq),e(hq,R2o),e(tp,P2o),e(Y,B2o),e(Y,ap),e(ap,cde),e(cde,N2o),e(ap,I2o),e(ap,pq),e(pq,q2o),e(ap,j2o),e(Y,D2o),e(Y,np),e(np,fde),e(fde,G2o),e(np,O2o),e(np,_q),e(_q,V2o),e(np,X2o),e(Y,z2o),e(Y,sp),e(sp,mde),e(mde,Q2o),e(sp,W2o),e(sp,uq),e(uq,H2o),e(sp,U2o),e(Y,J2o),e(Y,lp),e(lp,gde),e(gde,Y2o),e(lp,K2o),e(lp,bq),e(bq,Z2o),e(lp,ebo),e(Y,obo),e(Y,ip),e(ip,hde),e(hde,rbo),e(ip,tbo),e(ip,vq),e(vq,abo),e(ip,nbo),e(Y,sbo),e(Y,dp),e(dp,pde),e(pde,lbo),e(dp,ibo),e(dp,Fq),e(Fq,dbo),e(dp,cbo),e(Y,fbo),e(Y,cp),e(cp,_de),e(_de,mbo),e(cp,gbo),e(cp,Tq),e(Tq,hbo),e(cp,pbo),e(Y,_bo),e(Y,fp),e(fp,ude),e(ude,ubo),e(fp,bbo),e(fp,Mq),e(Mq,vbo),e(fp,Fbo),e(Y,Tbo),e(Y,mp),e(mp,bde),e(bde,Mbo),e(mp,Ebo),e(mp,Eq),e(Eq,Cbo),e(mp,wbo),e(Y,Abo),e(Y,gp),e(gp,vde),e(vde,Lbo),e(gp,ybo),e(gp,Cq),e(Cq,xbo),e(gp,$bo),e(Y,kbo),e(Y,hp),e(hp,Fde),e(Fde,Sbo),e(hp,Rbo),e(hp,wq),e(wq,Pbo),e(hp,Bbo),e(He,Nbo),M(pp,He,null),e(He,Ibo),M(_p,He,null),e(Lo,qbo),e(Lo,up),M(T7,up,null),e(up,jbo),e(up,Tde),e(Tde,Dbo),b(f,ZVe,u),b(f,qi,u),e(qi,bp),e(bp,Mde),M(M7,Mde,null),e(qi,Gbo),e(qi,Ede),e(Ede,Obo),b(f,eXe,u),b(f,yo,u),M(E7,yo,null),e(yo,Vbo),e(yo,C7),e(C7,Xbo),e(C7,Aq),e(Aq,zbo),e(C7,Qbo),e(yo,Wbo),e(yo,w7),e(w7,Hbo),e(w7,Cde),e(Cde,Ubo),e(w7,Jbo),e(yo,Ybo),e(yo,Ue),M(A7,Ue,null),e(Ue,Kbo),e(Ue,wde),e(wde,Zbo),e(Ue,evo),e(Ue,ji),e(ji,ovo),e(ji,Ade),e(Ade,rvo),e(ji,tvo),e(ji,Lde),e(Lde,avo),e(ji,nvo),e(Ue,svo),e(Ue,he),e(he,vp),e(vp,yde),e(yde,lvo),e(vp,ivo),e(vp,Lq),e(Lq,dvo),e(vp,cvo),e(he,fvo),e(he,Fp),e(Fp,xde),e(xde,mvo),e(Fp,gvo),e(Fp,$de),e($de,hvo),e(Fp,pvo),e(he,_vo),e(he,Tp),e(Tp,kde),e(kde,uvo),e(Tp,bvo),e(Tp,yq),e(yq,vvo),e(Tp,Fvo),e(he,Tvo),e(he,Mp),e(Mp,Sde),e(Sde,Mvo),e(Mp,Evo),e(Mp,xq),e(xq,Cvo),e(Mp,wvo),e(he,Avo),e(he,Ep),e(Ep,Rde),e(Rde,Lvo),e(Ep,yvo),e(Ep,$q),e($q,xvo),e(Ep,$vo),e(he,kvo),e(he,Cp),e(Cp,Pde),e(Pde,Svo),e(Cp,Rvo),e(Cp,kq),e(kq,Pvo),e(Cp,Bvo),e(he,Nvo),e(he,wp),e(wp,Bde),e(Bde,Ivo),e(wp,qvo),e(wp,Sq),e(Sq,jvo),e(wp,Dvo),e(he,Gvo),e(he,Ap),e(Ap,Nde),e(Nde,Ovo),e(Ap,Vvo),e(Ap,Rq),e(Rq,Xvo),e(Ap,zvo),e(he,Qvo),e(he,Lp),e(Lp,Ide),e(Ide,Wvo),e(Lp,Hvo),e(Lp,Pq),e(Pq,Uvo),e(Lp,Jvo),e(he,Yvo),e(he,yp),e(yp,qde),e(qde,Kvo),e(yp,Zvo),e(yp,Bq),e(Bq,e5o),e(yp,o5o),e(he,r5o),e(he,xp),e(xp,jde),e(jde,t5o),e(xp,a5o),e(xp,Nq),e(Nq,n5o),e(xp,s5o),e(he,l5o),e(he,$p),e($p,Dde),e(Dde,i5o),e($p,d5o),e($p,Iq),e(Iq,c5o),e($p,f5o),e(he,m5o),e(he,kp),e(kp,Gde),e(Gde,g5o),e(kp,h5o),e(kp,qq),e(qq,p5o),e(kp,_5o),e(he,u5o),e(he,Sp),e(Sp,Ode),e(Ode,b5o),e(Sp,v5o),e(Sp,jq),e(jq,F5o),e(Sp,T5o),e(he,M5o),e(he,Rp),e(Rp,Vde),e(Vde,E5o),e(Rp,C5o),e(Rp,Dq),e(Dq,w5o),e(Rp,A5o),e(he,L5o),e(he,Pp),e(Pp,Xde),e(Xde,y5o),e(Pp,x5o),e(Pp,Gq),e(Gq,$5o),e(Pp,k5o),e(he,S5o),e(he,Bp),e(Bp,zde),e(zde,R5o),e(Bp,P5o),e(Bp,Oq),e(Oq,B5o),e(Bp,N5o),e(he,I5o),e(he,Np),e(Np,Qde),e(Qde,q5o),e(Np,j5o),e(Np,Vq),e(Vq,D5o),e(Np,G5o),e(Ue,O5o),M(Ip,Ue,null),e(Ue,V5o),M(qp,Ue,null),e(yo,X5o),e(yo,jp),M(L7,jp,null),e(jp,z5o),e(jp,Wde),e(Wde,Q5o),b(f,oXe,u),b(f,Di,u),e(Di,Dp),e(Dp,Hde),M(y7,Hde,null),e(Di,W5o),e(Di,Ude),e(Ude,H5o),b(f,rXe,u),b(f,xo,u),M(x7,xo,null),e(xo,U5o),e(xo,Gi),e(Gi,J5o),e(Gi,Xq),e(Xq,Y5o),e(Gi,K5o),e(Gi,zq),e(zq,Z5o),e(Gi,e0o),e(xo,o0o),e(xo,$7),e($7,r0o),e($7,Jde),e(Jde,t0o),e($7,a0o),e(xo,n0o),e(xo,lt),M(k7,lt,null),e(lt,s0o),e(lt,Yde),e(Yde,l0o),e(lt,i0o),e(lt,Oi),e(Oi,d0o),e(Oi,Kde),e(Kde,c0o),e(Oi,f0o),e(Oi,Qq),e(Qq,m0o),e(Oi,g0o),e(lt,h0o),M(Gp,lt,null),e(xo,p0o),e(xo,Je),M(S7,Je,null),e(Je,_0o),e(Je,Zde),e(Zde,u0o),e(Je,b0o),e(Je,Na),e(Na,v0o),e(Na,ece),e(ece,F0o),e(Na,T0o),e(Na,oce),e(oce,M0o),e(Na,E0o),e(Na,rce),e(rce,C0o),e(Na,w0o),e(Je,A0o),e(Je,y),e(y,Op),e(Op,tce),e(tce,L0o),e(Op,y0o),e(Op,Wq),e(Wq,x0o),e(Op,$0o),e(y,k0o),e(y,Vp),e(Vp,ace),e(ace,S0o),e(Vp,R0o),e(Vp,Hq),e(Hq,P0o),e(Vp,B0o),e(y,N0o),e(y,Xp),e(Xp,nce),e(nce,I0o),e(Xp,q0o),e(Xp,Uq),e(Uq,j0o),e(Xp,D0o),e(y,G0o),e(y,zp),e(zp,sce),e(sce,O0o),e(zp,V0o),e(zp,Jq),e(Jq,X0o),e(zp,z0o),e(y,Q0o),e(y,Qp),e(Qp,lce),e(lce,W0o),e(Qp,H0o),e(Qp,Yq),e(Yq,U0o),e(Qp,J0o),e(y,Y0o),e(y,Wp),e(Wp,ice),e(ice,K0o),e(Wp,Z0o),e(Wp,Kq),e(Kq,eFo),e(Wp,oFo),e(y,rFo),e(y,Hp),e(Hp,dce),e(dce,tFo),e(Hp,aFo),e(Hp,Zq),e(Zq,nFo),e(Hp,sFo),e(y,lFo),e(y,Up),e(Up,cce),e(cce,iFo),e(Up,dFo),e(Up,ej),e(ej,cFo),e(Up,fFo),e(y,mFo),e(y,Jp),e(Jp,fce),e(fce,gFo),e(Jp,hFo),e(Jp,oj),e(oj,pFo),e(Jp,_Fo),e(y,uFo),e(y,Yp),e(Yp,mce),e(mce,bFo),e(Yp,vFo),e(Yp,rj),e(rj,FFo),e(Yp,TFo),e(y,MFo),e(y,Kp),e(Kp,gce),e(gce,EFo),e(Kp,CFo),e(Kp,tj),e(tj,wFo),e(Kp,AFo),e(y,LFo),e(y,Zp),e(Zp,hce),e(hce,yFo),e(Zp,xFo),e(Zp,aj),e(aj,$Fo),e(Zp,kFo),e(y,SFo),e(y,e_),e(e_,pce),e(pce,RFo),e(e_,PFo),e(e_,nj),e(nj,BFo),e(e_,NFo),e(y,IFo),e(y,o_),e(o_,_ce),e(_ce,qFo),e(o_,jFo),e(o_,sj),e(sj,DFo),e(o_,GFo),e(y,OFo),e(y,r_),e(r_,uce),e(uce,VFo),e(r_,XFo),e(r_,lj),e(lj,zFo),e(r_,QFo),e(y,WFo),e(y,t_),e(t_,bce),e(bce,HFo),e(t_,UFo),e(t_,ij),e(ij,JFo),e(t_,YFo),e(y,KFo),e(y,a_),e(a_,vce),e(vce,ZFo),e(a_,eTo),e(a_,dj),e(dj,oTo),e(a_,rTo),e(y,tTo),e(y,n_),e(n_,Fce),e(Fce,aTo),e(n_,nTo),e(n_,cj),e(cj,sTo),e(n_,lTo),e(y,iTo),e(y,s_),e(s_,Tce),e(Tce,dTo),e(s_,cTo),e(s_,fj),e(fj,fTo),e(s_,mTo),e(y,gTo),e(y,l_),e(l_,Mce),e(Mce,hTo),e(l_,pTo),e(l_,mj),e(mj,_To),e(l_,uTo),e(y,bTo),e(y,i_),e(i_,Ece),e(Ece,vTo),e(i_,FTo),e(i_,gj),e(gj,TTo),e(i_,MTo),e(y,ETo),e(y,d_),e(d_,Cce),e(Cce,CTo),e(d_,wTo),e(d_,hj),e(hj,ATo),e(d_,LTo),e(y,yTo),e(y,c_),e(c_,wce),e(wce,xTo),e(c_,$To),e(c_,pj),e(pj,kTo),e(c_,STo),e(y,RTo),e(y,f_),e(f_,Ace),e(Ace,PTo),e(f_,BTo),e(f_,_j),e(_j,NTo),e(f_,ITo),e(y,qTo),e(y,m_),e(m_,Lce),e(Lce,jTo),e(m_,DTo),e(m_,uj),e(uj,GTo),e(m_,OTo),e(y,VTo),e(y,g_),e(g_,yce),e(yce,XTo),e(g_,zTo),e(g_,bj),e(bj,QTo),e(g_,WTo),e(y,HTo),e(y,h_),e(h_,xce),e(xce,UTo),e(h_,JTo),e(h_,vj),e(vj,YTo),e(h_,KTo),e(y,ZTo),e(y,p_),e(p_,$ce),e($ce,e8o),e(p_,o8o),e(p_,Fj),e(Fj,r8o),e(p_,t8o),e(y,a8o),e(y,__),e(__,kce),e(kce,n8o),e(__,s8o),e(__,Tj),e(Tj,l8o),e(__,i8o),e(y,d8o),e(y,u_),e(u_,Sce),e(Sce,c8o),e(u_,f8o),e(u_,Mj),e(Mj,m8o),e(u_,g8o),e(y,h8o),e(y,b_),e(b_,Rce),e(Rce,p8o),e(b_,_8o),e(b_,Ej),e(Ej,u8o),e(b_,b8o),e(y,v8o),e(y,v_),e(v_,Pce),e(Pce,F8o),e(v_,T8o),e(v_,Cj),e(Cj,M8o),e(v_,E8o),e(y,C8o),e(y,F_),e(F_,Bce),e(Bce,w8o),e(F_,A8o),e(F_,wj),e(wj,L8o),e(F_,y8o),e(y,x8o),e(y,T_),e(T_,Nce),e(Nce,$8o),e(T_,k8o),e(T_,Aj),e(Aj,S8o),e(T_,R8o),e(y,P8o),e(y,Ws),e(Ws,Ice),e(Ice,B8o),e(Ws,N8o),e(Ws,Lj),e(Lj,I8o),e(Ws,q8o),e(Ws,yj),e(yj,j8o),e(Ws,D8o),e(y,G8o),e(y,M_),e(M_,qce),e(qce,O8o),e(M_,V8o),e(M_,xj),e(xj,X8o),e(M_,z8o),e(y,Q8o),e(y,E_),e(E_,jce),e(jce,W8o),e(E_,H8o),e(E_,$j),e($j,U8o),e(E_,J8o),e(y,Y8o),e(y,C_),e(C_,Dce),e(Dce,K8o),e(C_,Z8o),e(C_,kj),e(kj,e9o),e(C_,o9o),e(y,r9o),e(y,w_),e(w_,Gce),e(Gce,t9o),e(w_,a9o),e(w_,Sj),e(Sj,n9o),e(w_,s9o),e(y,l9o),e(y,A_),e(A_,Oce),e(Oce,i9o),e(A_,d9o),e(A_,Rj),e(Rj,c9o),e(A_,f9o),e(y,m9o),e(y,L_),e(L_,Vce),e(Vce,g9o),e(L_,h9o),e(L_,Pj),e(Pj,p9o),e(L_,_9o),e(y,u9o),e(y,y_),e(y_,Xce),e(Xce,b9o),e(y_,v9o),e(y_,Bj),e(Bj,F9o),e(y_,T9o),e(y,M9o),e(y,x_),e(x_,zce),e(zce,E9o),e(x_,C9o),e(x_,Nj),e(Nj,w9o),e(x_,A9o),e(y,L9o),e(y,$_),e($_,Qce),e(Qce,y9o),e($_,x9o),e($_,Ij),e(Ij,$9o),e($_,k9o),e(y,S9o),e(y,k_),e(k_,Wce),e(Wce,R9o),e(k_,P9o),e(k_,qj),e(qj,B9o),e(k_,N9o),e(y,I9o),e(y,S_),e(S_,Hce),e(Hce,q9o),e(S_,j9o),e(S_,jj),e(jj,D9o),e(S_,G9o),e(y,O9o),e(y,R_),e(R_,Uce),e(Uce,V9o),e(R_,X9o),e(R_,Dj),e(Dj,z9o),e(R_,Q9o),e(y,W9o),e(y,P_),e(P_,Jce),e(Jce,H9o),e(P_,U9o),e(P_,Gj),e(Gj,J9o),e(P_,Y9o),e(y,K9o),e(y,B_),e(B_,Yce),e(Yce,Z9o),e(B_,eMo),e(B_,Oj),e(Oj,oMo),e(B_,rMo),e(y,tMo),e(y,N_),e(N_,Kce),e(Kce,aMo),e(N_,nMo),e(N_,Vj),e(Vj,sMo),e(N_,lMo),e(y,iMo),e(y,I_),e(I_,Zce),e(Zce,dMo),e(I_,cMo),e(I_,Xj),e(Xj,fMo),e(I_,mMo),e(y,gMo),e(y,q_),e(q_,efe),e(efe,hMo),e(q_,pMo),e(q_,zj),e(zj,_Mo),e(q_,uMo),e(y,bMo),e(y,j_),e(j_,ofe),e(ofe,vMo),e(j_,FMo),e(j_,Qj),e(Qj,TMo),e(j_,MMo),e(y,EMo),e(y,D_),e(D_,rfe),e(rfe,CMo),e(D_,wMo),e(D_,Wj),e(Wj,AMo),e(D_,LMo),e(y,yMo),e(y,G_),e(G_,tfe),e(tfe,xMo),e(G_,$Mo),e(G_,Hj),e(Hj,kMo),e(G_,SMo),e(y,RMo),e(y,O_),e(O_,afe),e(afe,PMo),e(O_,BMo),e(O_,Uj),e(Uj,NMo),e(O_,IMo),e(y,qMo),e(y,V_),e(V_,nfe),e(nfe,jMo),e(V_,DMo),e(V_,Jj),e(Jj,GMo),e(V_,OMo),e(y,VMo),e(y,X_),e(X_,sfe),e(sfe,XMo),e(X_,zMo),e(X_,Yj),e(Yj,QMo),e(X_,WMo),e(y,HMo),e(y,z_),e(z_,lfe),e(lfe,UMo),e(z_,JMo),e(z_,Kj),e(Kj,YMo),e(z_,KMo),e(y,ZMo),e(y,Q_),e(Q_,ife),e(ife,e4o),e(Q_,o4o),e(Q_,Zj),e(Zj,r4o),e(Q_,t4o),e(y,a4o),e(y,W_),e(W_,dfe),e(dfe,n4o),e(W_,s4o),e(W_,eD),e(eD,l4o),e(W_,i4o),e(y,d4o),e(y,H_),e(H_,cfe),e(cfe,c4o),e(H_,f4o),e(H_,oD),e(oD,m4o),e(H_,g4o),e(y,h4o),e(y,U_),e(U_,ffe),e(ffe,p4o),e(U_,_4o),e(U_,rD),e(rD,u4o),e(U_,b4o),e(y,v4o),e(y,J_),e(J_,mfe),e(mfe,F4o),e(J_,T4o),e(J_,tD),e(tD,M4o),e(J_,E4o),e(y,C4o),e(y,Y_),e(Y_,gfe),e(gfe,w4o),e(Y_,A4o),e(Y_,aD),e(aD,L4o),e(Y_,y4o),e(y,x4o),e(y,K_),e(K_,hfe),e(hfe,$4o),e(K_,k4o),e(K_,nD),e(nD,S4o),e(K_,R4o),e(y,P4o),e(y,Z_),e(Z_,pfe),e(pfe,B4o),e(Z_,N4o),e(Z_,sD),e(sD,I4o),e(Z_,q4o),e(y,j4o),e(y,eu),e(eu,_fe),e(_fe,D4o),e(eu,G4o),e(eu,lD),e(lD,O4o),e(eu,V4o),e(y,X4o),e(y,ou),e(ou,ufe),e(ufe,z4o),e(ou,Q4o),e(ou,iD),e(iD,W4o),e(ou,H4o),e(y,U4o),e(y,ru),e(ru,bfe),e(bfe,J4o),e(ru,Y4o),e(ru,dD),e(dD,K4o),e(ru,Z4o),e(y,eEo),e(y,tu),e(tu,vfe),e(vfe,oEo),e(tu,rEo),e(tu,cD),e(cD,tEo),e(tu,aEo),e(y,nEo),e(y,au),e(au,Ffe),e(Ffe,sEo),e(au,lEo),e(au,fD),e(fD,iEo),e(au,dEo),e(y,cEo),e(y,nu),e(nu,Tfe),e(Tfe,fEo),e(nu,mEo),e(nu,mD),e(mD,gEo),e(nu,hEo),e(y,pEo),e(y,su),e(su,Mfe),e(Mfe,_Eo),e(su,uEo),e(su,gD),e(gD,bEo),e(su,vEo),e(y,FEo),e(y,lu),e(lu,Efe),e(Efe,TEo),e(lu,MEo),e(lu,hD),e(hD,EEo),e(lu,CEo),e(y,wEo),e(y,iu),e(iu,Cfe),e(Cfe,AEo),e(iu,LEo),e(iu,pD),e(pD,yEo),e(iu,xEo),e(y,$Eo),e(y,du),e(du,wfe),e(wfe,kEo),e(du,SEo),e(du,_D),e(_D,REo),e(du,PEo),e(y,BEo),e(y,cu),e(cu,Afe),e(Afe,NEo),e(cu,IEo),e(cu,uD),e(uD,qEo),e(cu,jEo),e(y,DEo),e(y,fu),e(fu,Lfe),e(Lfe,GEo),e(fu,OEo),e(fu,bD),e(bD,VEo),e(fu,XEo),e(y,zEo),e(y,mu),e(mu,yfe),e(yfe,QEo),e(mu,WEo),e(mu,vD),e(vD,HEo),e(mu,UEo),e(y,JEo),e(y,gu),e(gu,xfe),e(xfe,YEo),e(gu,KEo),e(gu,FD),e(FD,ZEo),e(gu,eCo),e(y,oCo),e(y,hu),e(hu,$fe),e($fe,rCo),e(hu,tCo),e(hu,TD),e(TD,aCo),e(hu,nCo),e(y,sCo),e(y,pu),e(pu,kfe),e(kfe,lCo),e(pu,iCo),e(pu,MD),e(MD,dCo),e(pu,cCo),e(y,fCo),e(y,_u),e(_u,Sfe),e(Sfe,mCo),e(_u,gCo),e(_u,ED),e(ED,hCo),e(_u,pCo),e(y,_Co),e(y,uu),e(uu,Rfe),e(Rfe,uCo),e(uu,bCo),e(uu,CD),e(CD,vCo),e(uu,FCo),e(y,TCo),e(y,bu),e(bu,Pfe),e(Pfe,MCo),e(bu,ECo),e(bu,wD),e(wD,CCo),e(bu,wCo),e(y,ACo),e(y,vu),e(vu,Bfe),e(Bfe,LCo),e(vu,yCo),e(vu,AD),e(AD,xCo),e(vu,$Co),e(y,kCo),e(y,Fu),e(Fu,Nfe),e(Nfe,SCo),e(Fu,RCo),e(Fu,LD),e(LD,PCo),e(Fu,BCo),e(y,NCo),e(y,Tu),e(Tu,Ife),e(Ife,ICo),e(Tu,qCo),e(Tu,yD),e(yD,jCo),e(Tu,DCo),e(y,GCo),e(y,Mu),e(Mu,qfe),e(qfe,OCo),e(Mu,VCo),e(Mu,xD),e(xD,XCo),e(Mu,zCo),e(y,QCo),e(y,Eu),e(Eu,jfe),e(jfe,WCo),e(Eu,HCo),e(Eu,$D),e($D,UCo),e(Eu,JCo),e(y,YCo),e(y,Cu),e(Cu,Dfe),e(Dfe,KCo),e(Cu,ZCo),e(Cu,kD),e(kD,e3o),e(Cu,o3o),e(y,r3o),e(y,wu),e(wu,Gfe),e(Gfe,t3o),e(wu,a3o),e(wu,SD),e(SD,n3o),e(wu,s3o),e(y,l3o),e(y,Au),e(Au,Ofe),e(Ofe,i3o),e(Au,d3o),e(Au,RD),e(RD,c3o),e(Au,f3o),e(y,m3o),e(y,Lu),e(Lu,Vfe),e(Vfe,g3o),e(Lu,h3o),e(Lu,PD),e(PD,p3o),e(Lu,_3o),e(y,u3o),e(y,yu),e(yu,Xfe),e(Xfe,b3o),e(yu,v3o),e(yu,BD),e(BD,F3o),e(yu,T3o),e(y,M3o),e(y,xu),e(xu,zfe),e(zfe,E3o),e(xu,C3o),e(xu,ND),e(ND,w3o),e(xu,A3o),e(y,L3o),e(y,$u),e($u,Qfe),e(Qfe,y3o),e($u,x3o),e($u,ID),e(ID,$3o),e($u,k3o),e(y,S3o),e(y,ku),e(ku,Wfe),e(Wfe,R3o),e(ku,P3o),e(ku,qD),e(qD,B3o),e(ku,N3o),e(y,I3o),e(y,Su),e(Su,Hfe),e(Hfe,q3o),e(Su,j3o),e(Su,jD),e(jD,D3o),e(Su,G3o),e(y,O3o),e(y,Ru),e(Ru,Ufe),e(Ufe,V3o),e(Ru,X3o),e(Ru,DD),e(DD,z3o),e(Ru,Q3o),e(y,W3o),e(y,Pu),e(Pu,Jfe),e(Jfe,H3o),e(Pu,U3o),e(Pu,GD),e(GD,J3o),e(Pu,Y3o),e(y,K3o),e(y,Bu),e(Bu,Yfe),e(Yfe,Z3o),e(Bu,ewo),e(Bu,OD),e(OD,owo),e(Bu,rwo),e(y,two),e(y,Nu),e(Nu,Kfe),e(Kfe,awo),e(Nu,nwo),e(Nu,VD),e(VD,swo),e(Nu,lwo),e(y,iwo),e(y,Iu),e(Iu,Zfe),e(Zfe,dwo),e(Iu,cwo),e(Iu,XD),e(XD,fwo),e(Iu,mwo),e(y,gwo),e(y,qu),e(qu,eme),e(eme,hwo),e(qu,pwo),e(qu,zD),e(zD,_wo),e(qu,uwo),e(y,bwo),e(y,ju),e(ju,ome),e(ome,vwo),e(ju,Fwo),e(ju,QD),e(QD,Two),e(ju,Mwo),e(y,Ewo),e(y,Du),e(Du,rme),e(rme,Cwo),e(Du,wwo),e(Du,WD),e(WD,Awo),e(Du,Lwo),e(y,ywo),e(y,Gu),e(Gu,tme),e(tme,xwo),e(Gu,$wo),e(Gu,HD),e(HD,kwo),e(Gu,Swo),e(y,Rwo),e(y,Ou),e(Ou,ame),e(ame,Pwo),e(Ou,Bwo),e(Ou,UD),e(UD,Nwo),e(Ou,Iwo),e(y,qwo),e(y,Vu),e(Vu,nme),e(nme,jwo),e(Vu,Dwo),e(Vu,JD),e(JD,Gwo),e(Vu,Owo),e(Je,Vwo),e(Je,Xu),e(Xu,Xwo),e(Xu,sme),e(sme,zwo),e(Xu,Qwo),e(Xu,lme),e(lme,Wwo),e(Je,Hwo),M(zu,Je,null),b(f,tXe,u),b(f,Vi,u),e(Vi,Qu),e(Qu,ime),M(R7,ime,null),e(Vi,Uwo),e(Vi,dme),e(dme,Jwo),b(f,aXe,u),b(f,$o,u),M(P7,$o,null),e($o,Ywo),e($o,Xi),e(Xi,Kwo),e(Xi,YD),e(YD,Zwo),e(Xi,eAo),e(Xi,KD),e(KD,oAo),e(Xi,rAo),e($o,tAo),e($o,B7),e(B7,aAo),e(B7,cme),e(cme,nAo),e(B7,sAo),e($o,lAo),e($o,it),M(N7,it,null),e(it,iAo),e(it,fme),e(fme,dAo),e(it,cAo),e(it,zi),e(zi,fAo),e(zi,mme),e(mme,mAo),e(zi,gAo),e(zi,ZD),e(ZD,hAo),e(zi,pAo),e(it,_Ao),M(Wu,it,null),e($o,uAo),e($o,Ye),M(I7,Ye,null),e(Ye,bAo),e(Ye,gme),e(gme,vAo),e(Ye,FAo),e(Ye,Ia),e(Ia,TAo),e(Ia,hme),e(hme,MAo),e(Ia,EAo),e(Ia,pme),e(pme,CAo),e(Ia,wAo),e(Ia,_me),e(_me,AAo),e(Ia,LAo),e(Ye,yAo),e(Ye,G),e(G,Hu),e(Hu,ume),e(ume,xAo),e(Hu,$Ao),e(Hu,eG),e(eG,kAo),e(Hu,SAo),e(G,RAo),e(G,Uu),e(Uu,bme),e(bme,PAo),e(Uu,BAo),e(Uu,oG),e(oG,NAo),e(Uu,IAo),e(G,qAo),e(G,Ju),e(Ju,vme),e(vme,jAo),e(Ju,DAo),e(Ju,rG),e(rG,GAo),e(Ju,OAo),e(G,VAo),e(G,Yu),e(Yu,Fme),e(Fme,XAo),e(Yu,zAo),e(Yu,tG),e(tG,QAo),e(Yu,WAo),e(G,HAo),e(G,Ku),e(Ku,Tme),e(Tme,UAo),e(Ku,JAo),e(Ku,aG),e(aG,YAo),e(Ku,KAo),e(G,ZAo),e(G,Zu),e(Zu,Mme),e(Mme,e6o),e(Zu,o6o),e(Zu,nG),e(nG,r6o),e(Zu,t6o),e(G,a6o),e(G,e1),e(e1,Eme),e(Eme,n6o),e(e1,s6o),e(e1,sG),e(sG,l6o),e(e1,i6o),e(G,d6o),e(G,o1),e(o1,Cme),e(Cme,c6o),e(o1,f6o),e(o1,lG),e(lG,m6o),e(o1,g6o),e(G,h6o),e(G,r1),e(r1,wme),e(wme,p6o),e(r1,_6o),e(r1,iG),e(iG,u6o),e(r1,b6o),e(G,v6o),e(G,t1),e(t1,Ame),e(Ame,F6o),e(t1,T6o),e(t1,dG),e(dG,M6o),e(t1,E6o),e(G,C6o),e(G,a1),e(a1,Lme),e(Lme,w6o),e(a1,A6o),e(a1,cG),e(cG,L6o),e(a1,y6o),e(G,x6o),e(G,n1),e(n1,yme),e(yme,$6o),e(n1,k6o),e(n1,fG),e(fG,S6o),e(n1,R6o),e(G,P6o),e(G,s1),e(s1,xme),e(xme,B6o),e(s1,N6o),e(s1,mG),e(mG,I6o),e(s1,q6o),e(G,j6o),e(G,l1),e(l1,$me),e($me,D6o),e(l1,G6o),e(l1,gG),e(gG,O6o),e(l1,V6o),e(G,X6o),e(G,i1),e(i1,kme),e(kme,z6o),e(i1,Q6o),e(i1,hG),e(hG,W6o),e(i1,H6o),e(G,U6o),e(G,d1),e(d1,Sme),e(Sme,J6o),e(d1,Y6o),e(d1,pG),e(pG,K6o),e(d1,Z6o),e(G,e7o),e(G,c1),e(c1,Rme),e(Rme,o7o),e(c1,r7o),e(c1,_G),e(_G,t7o),e(c1,a7o),e(G,n7o),e(G,f1),e(f1,Pme),e(Pme,s7o),e(f1,l7o),e(f1,uG),e(uG,i7o),e(f1,d7o),e(G,c7o),e(G,m1),e(m1,Bme),e(Bme,f7o),e(m1,m7o),e(m1,bG),e(bG,g7o),e(m1,h7o),e(G,p7o),e(G,g1),e(g1,Nme),e(Nme,_7o),e(g1,u7o),e(g1,vG),e(vG,b7o),e(g1,v7o),e(G,F7o),e(G,h1),e(h1,Ime),e(Ime,T7o),e(h1,M7o),e(h1,FG),e(FG,E7o),e(h1,C7o),e(G,w7o),e(G,p1),e(p1,qme),e(qme,A7o),e(p1,L7o),e(p1,TG),e(TG,y7o),e(p1,x7o),e(G,$7o),e(G,_1),e(_1,jme),e(jme,k7o),e(_1,S7o),e(_1,MG),e(MG,R7o),e(_1,P7o),e(G,B7o),e(G,u1),e(u1,Dme),e(Dme,N7o),e(u1,I7o),e(u1,EG),e(EG,q7o),e(u1,j7o),e(G,D7o),e(G,b1),e(b1,Gme),e(Gme,G7o),e(b1,O7o),e(b1,CG),e(CG,V7o),e(b1,X7o),e(G,z7o),e(G,v1),e(v1,Ome),e(Ome,Q7o),e(v1,W7o),e(v1,wG),e(wG,H7o),e(v1,U7o),e(G,J7o),e(G,F1),e(F1,Vme),e(Vme,Y7o),e(F1,K7o),e(F1,AG),e(AG,Z7o),e(F1,eLo),e(G,oLo),e(G,T1),e(T1,Xme),e(Xme,rLo),e(T1,tLo),e(T1,LG),e(LG,aLo),e(T1,nLo),e(G,sLo),e(G,M1),e(M1,zme),e(zme,lLo),e(M1,iLo),e(M1,yG),e(yG,dLo),e(M1,cLo),e(G,fLo),e(G,E1),e(E1,Qme),e(Qme,mLo),e(E1,gLo),e(E1,xG),e(xG,hLo),e(E1,pLo),e(G,_Lo),e(G,C1),e(C1,Wme),e(Wme,uLo),e(C1,bLo),e(C1,$G),e($G,vLo),e(C1,FLo),e(G,TLo),e(G,w1),e(w1,Hme),e(Hme,MLo),e(w1,ELo),e(w1,kG),e(kG,CLo),e(w1,wLo),e(G,ALo),e(G,A1),e(A1,Ume),e(Ume,LLo),e(A1,yLo),e(A1,SG),e(SG,xLo),e(A1,$Lo),e(G,kLo),e(G,L1),e(L1,Jme),e(Jme,SLo),e(L1,RLo),e(L1,RG),e(RG,PLo),e(L1,BLo),e(G,NLo),e(G,y1),e(y1,Yme),e(Yme,ILo),e(y1,qLo),e(y1,PG),e(PG,jLo),e(y1,DLo),e(G,GLo),e(G,x1),e(x1,Kme),e(Kme,OLo),e(x1,VLo),e(x1,BG),e(BG,XLo),e(x1,zLo),e(G,QLo),e(G,$1),e($1,Zme),e(Zme,WLo),e($1,HLo),e($1,NG),e(NG,ULo),e($1,JLo),e(G,YLo),e(G,k1),e(k1,ege),e(ege,KLo),e(k1,ZLo),e(k1,IG),e(IG,eyo),e(k1,oyo),e(G,ryo),e(G,S1),e(S1,oge),e(oge,tyo),e(S1,ayo),e(S1,qG),e(qG,nyo),e(S1,syo),e(G,lyo),e(G,R1),e(R1,rge),e(rge,iyo),e(R1,dyo),e(R1,jG),e(jG,cyo),e(R1,fyo),e(G,myo),e(G,P1),e(P1,tge),e(tge,gyo),e(P1,hyo),e(P1,DG),e(DG,pyo),e(P1,_yo),e(G,uyo),e(G,B1),e(B1,age),e(age,byo),e(B1,vyo),e(B1,GG),e(GG,Fyo),e(B1,Tyo),e(G,Myo),e(G,N1),e(N1,nge),e(nge,Eyo),e(N1,Cyo),e(N1,OG),e(OG,wyo),e(N1,Ayo),e(G,Lyo),e(G,I1),e(I1,sge),e(sge,yyo),e(I1,xyo),e(I1,VG),e(VG,$yo),e(I1,kyo),e(G,Syo),e(G,q1),e(q1,lge),e(lge,Ryo),e(q1,Pyo),e(q1,XG),e(XG,Byo),e(q1,Nyo),e(Ye,Iyo),e(Ye,j1),e(j1,qyo),e(j1,ige),e(ige,jyo),e(j1,Dyo),e(j1,dge),e(dge,Gyo),e(Ye,Oyo),M(D1,Ye,null),b(f,nXe,u),b(f,Qi,u),e(Qi,G1),e(G1,cge),M(q7,cge,null),e(Qi,Vyo),e(Qi,fge),e(fge,Xyo),b(f,sXe,u),b(f,ko,u),M(j7,ko,null),e(ko,zyo),e(ko,Wi),e(Wi,Qyo),e(Wi,zG),e(zG,Wyo),e(Wi,Hyo),e(Wi,QG),e(QG,Uyo),e(Wi,Jyo),e(ko,Yyo),e(ko,D7),e(D7,Kyo),e(D7,mge),e(mge,Zyo),e(D7,exo),e(ko,oxo),e(ko,dt),M(G7,dt,null),e(dt,rxo),e(dt,gge),e(gge,txo),e(dt,axo),e(dt,Hi),e(Hi,nxo),e(Hi,hge),e(hge,sxo),e(Hi,lxo),e(Hi,WG),e(WG,ixo),e(Hi,dxo),e(dt,cxo),M(O1,dt,null),e(ko,fxo),e(ko,Ke),M(O7,Ke,null),e(Ke,mxo),e(Ke,pge),e(pge,gxo),e(Ke,hxo),e(Ke,qa),e(qa,pxo),e(qa,_ge),e(_ge,_xo),e(qa,uxo),e(qa,uge),e(uge,bxo),e(qa,vxo),e(qa,bge),e(bge,Fxo),e(qa,Txo),e(Ke,Mxo),e(Ke,z),e(z,V1),e(V1,vge),e(vge,Exo),e(V1,Cxo),e(V1,HG),e(HG,wxo),e(V1,Axo),e(z,Lxo),e(z,X1),e(X1,Fge),e(Fge,yxo),e(X1,xxo),e(X1,UG),e(UG,$xo),e(X1,kxo),e(z,Sxo),e(z,z1),e(z1,Tge),e(Tge,Rxo),e(z1,Pxo),e(z1,JG),e(JG,Bxo),e(z1,Nxo),e(z,Ixo),e(z,Q1),e(Q1,Mge),e(Mge,qxo),e(Q1,jxo),e(Q1,YG),e(YG,Dxo),e(Q1,Gxo),e(z,Oxo),e(z,W1),e(W1,Ege),e(Ege,Vxo),e(W1,Xxo),e(W1,KG),e(KG,zxo),e(W1,Qxo),e(z,Wxo),e(z,H1),e(H1,Cge),e(Cge,Hxo),e(H1,Uxo),e(H1,ZG),e(ZG,Jxo),e(H1,Yxo),e(z,Kxo),e(z,U1),e(U1,wge),e(wge,Zxo),e(U1,e$o),e(U1,eO),e(eO,o$o),e(U1,r$o),e(z,t$o),e(z,J1),e(J1,Age),e(Age,a$o),e(J1,n$o),e(J1,oO),e(oO,s$o),e(J1,l$o),e(z,i$o),e(z,Y1),e(Y1,Lge),e(Lge,d$o),e(Y1,c$o),e(Y1,rO),e(rO,f$o),e(Y1,m$o),e(z,g$o),e(z,K1),e(K1,yge),e(yge,h$o),e(K1,p$o),e(K1,tO),e(tO,_$o),e(K1,u$o),e(z,b$o),e(z,Z1),e(Z1,xge),e(xge,v$o),e(Z1,F$o),e(Z1,aO),e(aO,T$o),e(Z1,M$o),e(z,E$o),e(z,e2),e(e2,$ge),e($ge,C$o),e(e2,w$o),e(e2,nO),e(nO,A$o),e(e2,L$o),e(z,y$o),e(z,o2),e(o2,kge),e(kge,x$o),e(o2,$$o),e(o2,sO),e(sO,k$o),e(o2,S$o),e(z,R$o),e(z,r2),e(r2,Sge),e(Sge,P$o),e(r2,B$o),e(r2,lO),e(lO,N$o),e(r2,I$o),e(z,q$o),e(z,t2),e(t2,Rge),e(Rge,j$o),e(t2,D$o),e(t2,iO),e(iO,G$o),e(t2,O$o),e(z,V$o),e(z,a2),e(a2,Pge),e(Pge,X$o),e(a2,z$o),e(a2,dO),e(dO,Q$o),e(a2,W$o),e(z,H$o),e(z,n2),e(n2,Bge),e(Bge,U$o),e(n2,J$o),e(n2,cO),e(cO,Y$o),e(n2,K$o),e(z,Z$o),e(z,s2),e(s2,Nge),e(Nge,eko),e(s2,oko),e(s2,fO),e(fO,rko),e(s2,tko),e(z,ako),e(z,l2),e(l2,Ige),e(Ige,nko),e(l2,sko),e(l2,mO),e(mO,lko),e(l2,iko),e(z,dko),e(z,i2),e(i2,qge),e(qge,cko),e(i2,fko),e(i2,gO),e(gO,mko),e(i2,gko),e(z,hko),e(z,d2),e(d2,jge),e(jge,pko),e(d2,_ko),e(d2,hO),e(hO,uko),e(d2,bko),e(z,vko),e(z,c2),e(c2,Dge),e(Dge,Fko),e(c2,Tko),e(c2,pO),e(pO,Mko),e(c2,Eko),e(z,Cko),e(z,f2),e(f2,Gge),e(Gge,wko),e(f2,Ako),e(f2,_O),e(_O,Lko),e(f2,yko),e(z,xko),e(z,m2),e(m2,Oge),e(Oge,$ko),e(m2,kko),e(m2,uO),e(uO,Sko),e(m2,Rko),e(z,Pko),e(z,g2),e(g2,Vge),e(Vge,Bko),e(g2,Nko),e(g2,bO),e(bO,Iko),e(g2,qko),e(z,jko),e(z,h2),e(h2,Xge),e(Xge,Dko),e(h2,Gko),e(h2,vO),e(vO,Oko),e(h2,Vko),e(z,Xko),e(z,p2),e(p2,zge),e(zge,zko),e(p2,Qko),e(p2,FO),e(FO,Wko),e(p2,Hko),e(z,Uko),e(z,_2),e(_2,Qge),e(Qge,Jko),e(_2,Yko),e(_2,TO),e(TO,Kko),e(_2,Zko),e(z,eSo),e(z,u2),e(u2,Wge),e(Wge,oSo),e(u2,rSo),e(u2,MO),e(MO,tSo),e(u2,aSo),e(z,nSo),e(z,b2),e(b2,Hge),e(Hge,sSo),e(b2,lSo),e(b2,EO),e(EO,iSo),e(b2,dSo),e(z,cSo),e(z,v2),e(v2,Uge),e(Uge,fSo),e(v2,mSo),e(v2,CO),e(CO,gSo),e(v2,hSo),e(z,pSo),e(z,F2),e(F2,Jge),e(Jge,_So),e(F2,uSo),e(F2,wO),e(wO,bSo),e(F2,vSo),e(z,FSo),e(z,T2),e(T2,Yge),e(Yge,TSo),e(T2,MSo),e(T2,AO),e(AO,ESo),e(T2,CSo),e(z,wSo),e(z,M2),e(M2,Kge),e(Kge,ASo),e(M2,LSo),e(M2,LO),e(LO,ySo),e(M2,xSo),e(z,$So),e(z,E2),e(E2,Zge),e(Zge,kSo),e(E2,SSo),e(E2,yO),e(yO,RSo),e(E2,PSo),e(z,BSo),e(z,C2),e(C2,ehe),e(ehe,NSo),e(C2,ISo),e(C2,xO),e(xO,qSo),e(C2,jSo),e(z,DSo),e(z,w2),e(w2,ohe),e(ohe,GSo),e(w2,OSo),e(w2,$O),e($O,VSo),e(w2,XSo),e(z,zSo),e(z,A2),e(A2,rhe),e(rhe,QSo),e(A2,WSo),e(A2,kO),e(kO,HSo),e(A2,USo),e(z,JSo),e(z,L2),e(L2,the),e(the,YSo),e(L2,KSo),e(L2,SO),e(SO,ZSo),e(L2,eRo),e(z,oRo),e(z,y2),e(y2,ahe),e(ahe,rRo),e(y2,tRo),e(y2,RO),e(RO,aRo),e(y2,nRo),e(Ke,sRo),e(Ke,x2),e(x2,lRo),e(x2,nhe),e(nhe,iRo),e(x2,dRo),e(x2,she),e(she,cRo),e(Ke,fRo),M($2,Ke,null),b(f,lXe,u),b(f,Ui,u),e(Ui,k2),e(k2,lhe),M(V7,lhe,null),e(Ui,mRo),e(Ui,ihe),e(ihe,gRo),b(f,iXe,u),b(f,So,u),M(X7,So,null),e(So,hRo),e(So,Ji),e(Ji,pRo),e(Ji,PO),e(PO,_Ro),e(Ji,uRo),e(Ji,BO),e(BO,bRo),e(Ji,vRo),e(So,FRo),e(So,z7),e(z7,TRo),e(z7,dhe),e(dhe,MRo),e(z7,ERo),e(So,CRo),e(So,ct),M(Q7,ct,null),e(ct,wRo),e(ct,che),e(che,ARo),e(ct,LRo),e(ct,Yi),e(Yi,yRo),e(Yi,fhe),e(fhe,xRo),e(Yi,$Ro),e(Yi,NO),e(NO,kRo),e(Yi,SRo),e(ct,RRo),M(S2,ct,null),e(So,PRo),e(So,Ze),M(W7,Ze,null),e(Ze,BRo),e(Ze,mhe),e(mhe,NRo),e(Ze,IRo),e(Ze,ja),e(ja,qRo),e(ja,ghe),e(ghe,jRo),e(ja,DRo),e(ja,hhe),e(hhe,GRo),e(ja,ORo),e(ja,phe),e(phe,VRo),e(ja,XRo),e(Ze,zRo),e(Ze,W),e(W,R2),e(R2,_he),e(_he,QRo),e(R2,WRo),e(R2,IO),e(IO,HRo),e(R2,URo),e(W,JRo),e(W,P2),e(P2,uhe),e(uhe,YRo),e(P2,KRo),e(P2,qO),e(qO,ZRo),e(P2,ePo),e(W,oPo),e(W,B2),e(B2,bhe),e(bhe,rPo),e(B2,tPo),e(B2,jO),e(jO,aPo),e(B2,nPo),e(W,sPo),e(W,N2),e(N2,vhe),e(vhe,lPo),e(N2,iPo),e(N2,DO),e(DO,dPo),e(N2,cPo),e(W,fPo),e(W,I2),e(I2,Fhe),e(Fhe,mPo),e(I2,gPo),e(I2,GO),e(GO,hPo),e(I2,pPo),e(W,_Po),e(W,q2),e(q2,The),e(The,uPo),e(q2,bPo),e(q2,OO),e(OO,vPo),e(q2,FPo),e(W,TPo),e(W,j2),e(j2,Mhe),e(Mhe,MPo),e(j2,EPo),e(j2,VO),e(VO,CPo),e(j2,wPo),e(W,APo),e(W,D2),e(D2,Ehe),e(Ehe,LPo),e(D2,yPo),e(D2,XO),e(XO,xPo),e(D2,$Po),e(W,kPo),e(W,G2),e(G2,Che),e(Che,SPo),e(G2,RPo),e(G2,zO),e(zO,PPo),e(G2,BPo),e(W,NPo),e(W,O2),e(O2,whe),e(whe,IPo),e(O2,qPo),e(O2,QO),e(QO,jPo),e(O2,DPo),e(W,GPo),e(W,V2),e(V2,Ahe),e(Ahe,OPo),e(V2,VPo),e(V2,WO),e(WO,XPo),e(V2,zPo),e(W,QPo),e(W,X2),e(X2,Lhe),e(Lhe,WPo),e(X2,HPo),e(X2,HO),e(HO,UPo),e(X2,JPo),e(W,YPo),e(W,z2),e(z2,yhe),e(yhe,KPo),e(z2,ZPo),e(z2,UO),e(UO,eBo),e(z2,oBo),e(W,rBo),e(W,Q2),e(Q2,xhe),e(xhe,tBo),e(Q2,aBo),e(Q2,JO),e(JO,nBo),e(Q2,sBo),e(W,lBo),e(W,W2),e(W2,$he),e($he,iBo),e(W2,dBo),e(W2,YO),e(YO,cBo),e(W2,fBo),e(W,mBo),e(W,H2),e(H2,khe),e(khe,gBo),e(H2,hBo),e(H2,KO),e(KO,pBo),e(H2,_Bo),e(W,uBo),e(W,U2),e(U2,She),e(She,bBo),e(U2,vBo),e(U2,ZO),e(ZO,FBo),e(U2,TBo),e(W,MBo),e(W,J2),e(J2,Rhe),e(Rhe,EBo),e(J2,CBo),e(J2,eV),e(eV,wBo),e(J2,ABo),e(W,LBo),e(W,Y2),e(Y2,Phe),e(Phe,yBo),e(Y2,xBo),e(Y2,oV),e(oV,$Bo),e(Y2,kBo),e(W,SBo),e(W,K2),e(K2,Bhe),e(Bhe,RBo),e(K2,PBo),e(K2,rV),e(rV,BBo),e(K2,NBo),e(W,IBo),e(W,Z2),e(Z2,Nhe),e(Nhe,qBo),e(Z2,jBo),e(Z2,tV),e(tV,DBo),e(Z2,GBo),e(W,OBo),e(W,eb),e(eb,Ihe),e(Ihe,VBo),e(eb,XBo),e(eb,aV),e(aV,zBo),e(eb,QBo),e(W,WBo),e(W,ob),e(ob,qhe),e(qhe,HBo),e(ob,UBo),e(ob,nV),e(nV,JBo),e(ob,YBo),e(W,KBo),e(W,rb),e(rb,jhe),e(jhe,ZBo),e(rb,eNo),e(rb,sV),e(sV,oNo),e(rb,rNo),e(W,tNo),e(W,tb),e(tb,Dhe),e(Dhe,aNo),e(tb,nNo),e(tb,lV),e(lV,sNo),e(tb,lNo),e(W,iNo),e(W,ab),e(ab,Ghe),e(Ghe,dNo),e(ab,cNo),e(ab,iV),e(iV,fNo),e(ab,mNo),e(W,gNo),e(W,nb),e(nb,Ohe),e(Ohe,hNo),e(nb,pNo),e(nb,dV),e(dV,_No),e(nb,uNo),e(W,bNo),e(W,sb),e(sb,Vhe),e(Vhe,vNo),e(sb,FNo),e(sb,cV),e(cV,TNo),e(sb,MNo),e(W,ENo),e(W,lb),e(lb,Xhe),e(Xhe,CNo),e(lb,wNo),e(lb,fV),e(fV,ANo),e(lb,LNo),e(W,yNo),e(W,ib),e(ib,zhe),e(zhe,xNo),e(ib,$No),e(ib,mV),e(mV,kNo),e(ib,SNo),e(W,RNo),e(W,db),e(db,Qhe),e(Qhe,PNo),e(db,BNo),e(db,gV),e(gV,NNo),e(db,INo),e(W,qNo),e(W,cb),e(cb,Whe),e(Whe,jNo),e(cb,DNo),e(cb,hV),e(hV,GNo),e(cb,ONo),e(W,VNo),e(W,fb),e(fb,Hhe),e(Hhe,XNo),e(fb,zNo),e(fb,pV),e(pV,QNo),e(fb,WNo),e(W,HNo),e(W,mb),e(mb,Uhe),e(Uhe,UNo),e(mb,JNo),e(mb,Jhe),e(Jhe,YNo),e(mb,KNo),e(W,ZNo),e(W,gb),e(gb,Yhe),e(Yhe,eIo),e(gb,oIo),e(gb,_V),e(_V,rIo),e(gb,tIo),e(W,aIo),e(W,hb),e(hb,Khe),e(Khe,nIo),e(hb,sIo),e(hb,uV),e(uV,lIo),e(hb,iIo),e(W,dIo),e(W,pb),e(pb,Zhe),e(Zhe,cIo),e(pb,fIo),e(pb,bV),e(bV,mIo),e(pb,gIo),e(W,hIo),e(W,_b),e(_b,epe),e(epe,pIo),e(_b,_Io),e(_b,vV),e(vV,uIo),e(_b,bIo),e(Ze,vIo),e(Ze,ub),e(ub,FIo),e(ub,ope),e(ope,TIo),e(ub,MIo),e(ub,rpe),e(rpe,EIo),e(Ze,CIo),M(bb,Ze,null),b(f,dXe,u),b(f,Ki,u),e(Ki,vb),e(vb,tpe),M(H7,tpe,null),e(Ki,wIo),e(Ki,ape),e(ape,AIo),b(f,cXe,u),b(f,Ro,u),M(U7,Ro,null),e(Ro,LIo),e(Ro,Zi),e(Zi,yIo),e(Zi,FV),e(FV,xIo),e(Zi,$Io),e(Zi,TV),e(TV,kIo),e(Zi,SIo),e(Ro,RIo),e(Ro,J7),e(J7,PIo),e(J7,npe),e(npe,BIo),e(J7,NIo),e(Ro,IIo),e(Ro,ft),M(Y7,ft,null),e(ft,qIo),e(ft,spe),e(spe,jIo),e(ft,DIo),e(ft,ed),e(ed,GIo),e(ed,lpe),e(lpe,OIo),e(ed,VIo),e(ed,MV),e(MV,XIo),e(ed,zIo),e(ft,QIo),M(Fb,ft,null),e(Ro,WIo),e(Ro,eo),M(K7,eo,null),e(eo,HIo),e(eo,ipe),e(ipe,UIo),e(eo,JIo),e(eo,Da),e(Da,YIo),e(Da,dpe),e(dpe,KIo),e(Da,ZIo),e(Da,cpe),e(cpe,eqo),e(Da,oqo),e(Da,fpe),e(fpe,rqo),e(Da,tqo),e(eo,aqo),e(eo,pe),e(pe,Tb),e(Tb,mpe),e(mpe,nqo),e(Tb,sqo),e(Tb,EV),e(EV,lqo),e(Tb,iqo),e(pe,dqo),e(pe,Mb),e(Mb,gpe),e(gpe,cqo),e(Mb,fqo),e(Mb,CV),e(CV,mqo),e(Mb,gqo),e(pe,hqo),e(pe,Eb),e(Eb,hpe),e(hpe,pqo),e(Eb,_qo),e(Eb,wV),e(wV,uqo),e(Eb,bqo),e(pe,vqo),e(pe,Cb),e(Cb,ppe),e(ppe,Fqo),e(Cb,Tqo),e(Cb,AV),e(AV,Mqo),e(Cb,Eqo),e(pe,Cqo),e(pe,wb),e(wb,_pe),e(_pe,wqo),e(wb,Aqo),e(wb,LV),e(LV,Lqo),e(wb,yqo),e(pe,xqo),e(pe,Ab),e(Ab,upe),e(upe,$qo),e(Ab,kqo),e(Ab,yV),e(yV,Sqo),e(Ab,Rqo),e(pe,Pqo),e(pe,Lb),e(Lb,bpe),e(bpe,Bqo),e(Lb,Nqo),e(Lb,xV),e(xV,Iqo),e(Lb,qqo),e(pe,jqo),e(pe,yb),e(yb,vpe),e(vpe,Dqo),e(yb,Gqo),e(yb,$V),e($V,Oqo),e(yb,Vqo),e(pe,Xqo),e(pe,xb),e(xb,Fpe),e(Fpe,zqo),e(xb,Qqo),e(xb,kV),e(kV,Wqo),e(xb,Hqo),e(pe,Uqo),e(pe,$b),e($b,Tpe),e(Tpe,Jqo),e($b,Yqo),e($b,SV),e(SV,Kqo),e($b,Zqo),e(pe,ejo),e(pe,kb),e(kb,Mpe),e(Mpe,ojo),e(kb,rjo),e(kb,RV),e(RV,tjo),e(kb,ajo),e(pe,njo),e(pe,Sb),e(Sb,Epe),e(Epe,sjo),e(Sb,ljo),e(Sb,PV),e(PV,ijo),e(Sb,djo),e(pe,cjo),e(pe,Rb),e(Rb,Cpe),e(Cpe,fjo),e(Rb,mjo),e(Rb,BV),e(BV,gjo),e(Rb,hjo),e(pe,pjo),e(pe,Pb),e(Pb,wpe),e(wpe,_jo),e(Pb,ujo),e(Pb,NV),e(NV,bjo),e(Pb,vjo),e(pe,Fjo),e(pe,Bb),e(Bb,Ape),e(Ape,Tjo),e(Bb,Mjo),e(Bb,IV),e(IV,Ejo),e(Bb,Cjo),e(pe,wjo),e(pe,Nb),e(Nb,Lpe),e(Lpe,Ajo),e(Nb,Ljo),e(Nb,qV),e(qV,yjo),e(Nb,xjo),e(pe,$jo),e(pe,Ib),e(Ib,ype),e(ype,kjo),e(Ib,Sjo),e(Ib,jV),e(jV,Rjo),e(Ib,Pjo),e(pe,Bjo),e(pe,qb),e(qb,xpe),e(xpe,Njo),e(qb,Ijo),e(qb,DV),e(DV,qjo),e(qb,jjo),e(eo,Djo),e(eo,jb),e(jb,Gjo),e(jb,$pe),e($pe,Ojo),e(jb,Vjo),e(jb,kpe),e(kpe,Xjo),e(eo,zjo),M(Db,eo,null),b(f,fXe,u),b(f,od,u),e(od,Gb),e(Gb,Spe),M(Z7,Spe,null),e(od,Qjo),e(od,Rpe),e(Rpe,Wjo),b(f,mXe,u),b(f,Po,u),M(eL,Po,null),e(Po,Hjo),e(Po,rd),e(rd,Ujo),e(rd,GV),e(GV,Jjo),e(rd,Yjo),e(rd,OV),e(OV,Kjo),e(rd,Zjo),e(Po,eDo),e(Po,oL),e(oL,oDo),e(oL,Ppe),e(Ppe,rDo),e(oL,tDo),e(Po,aDo),e(Po,mt),M(rL,mt,null),e(mt,nDo),e(mt,Bpe),e(Bpe,sDo),e(mt,lDo),e(mt,td),e(td,iDo),e(td,Npe),e(Npe,dDo),e(td,cDo),e(td,VV),e(VV,fDo),e(td,mDo),e(mt,gDo),M(Ob,mt,null),e(Po,hDo),e(Po,oo),M(tL,oo,null),e(oo,pDo),e(oo,Ipe),e(Ipe,_Do),e(oo,uDo),e(oo,Ga),e(Ga,bDo),e(Ga,qpe),e(qpe,vDo),e(Ga,FDo),e(Ga,jpe),e(jpe,TDo),e(Ga,MDo),e(Ga,Dpe),e(Dpe,EDo),e(Ga,CDo),e(oo,wDo),e(oo,I),e(I,Vb),e(Vb,Gpe),e(Gpe,ADo),e(Vb,LDo),e(Vb,XV),e(XV,yDo),e(Vb,xDo),e(I,$Do),e(I,Xb),e(Xb,Ope),e(Ope,kDo),e(Xb,SDo),e(Xb,zV),e(zV,RDo),e(Xb,PDo),e(I,BDo),e(I,zb),e(zb,Vpe),e(Vpe,NDo),e(zb,IDo),e(zb,QV),e(QV,qDo),e(zb,jDo),e(I,DDo),e(I,Qb),e(Qb,Xpe),e(Xpe,GDo),e(Qb,ODo),e(Qb,WV),e(WV,VDo),e(Qb,XDo),e(I,zDo),e(I,Wb),e(Wb,zpe),e(zpe,QDo),e(Wb,WDo),e(Wb,HV),e(HV,HDo),e(Wb,UDo),e(I,JDo),e(I,Hb),e(Hb,Qpe),e(Qpe,YDo),e(Hb,KDo),e(Hb,UV),e(UV,ZDo),e(Hb,eGo),e(I,oGo),e(I,Ub),e(Ub,Wpe),e(Wpe,rGo),e(Ub,tGo),e(Ub,JV),e(JV,aGo),e(Ub,nGo),e(I,sGo),e(I,Jb),e(Jb,Hpe),e(Hpe,lGo),e(Jb,iGo),e(Jb,YV),e(YV,dGo),e(Jb,cGo),e(I,fGo),e(I,Yb),e(Yb,Upe),e(Upe,mGo),e(Yb,gGo),e(Yb,KV),e(KV,hGo),e(Yb,pGo),e(I,_Go),e(I,Kb),e(Kb,Jpe),e(Jpe,uGo),e(Kb,bGo),e(Kb,ZV),e(ZV,vGo),e(Kb,FGo),e(I,TGo),e(I,Zb),e(Zb,Ype),e(Ype,MGo),e(Zb,EGo),e(Zb,eX),e(eX,CGo),e(Zb,wGo),e(I,AGo),e(I,ev),e(ev,Kpe),e(Kpe,LGo),e(ev,yGo),e(ev,oX),e(oX,xGo),e(ev,$Go),e(I,kGo),e(I,ov),e(ov,Zpe),e(Zpe,SGo),e(ov,RGo),e(ov,rX),e(rX,PGo),e(ov,BGo),e(I,NGo),e(I,rv),e(rv,e_e),e(e_e,IGo),e(rv,qGo),e(rv,tX),e(tX,jGo),e(rv,DGo),e(I,GGo),e(I,tv),e(tv,o_e),e(o_e,OGo),e(tv,VGo),e(tv,aX),e(aX,XGo),e(tv,zGo),e(I,QGo),e(I,av),e(av,r_e),e(r_e,WGo),e(av,HGo),e(av,nX),e(nX,UGo),e(av,JGo),e(I,YGo),e(I,nv),e(nv,t_e),e(t_e,KGo),e(nv,ZGo),e(nv,sX),e(sX,eOo),e(nv,oOo),e(I,rOo),e(I,sv),e(sv,a_e),e(a_e,tOo),e(sv,aOo),e(sv,lX),e(lX,nOo),e(sv,sOo),e(I,lOo),e(I,lv),e(lv,n_e),e(n_e,iOo),e(lv,dOo),e(lv,iX),e(iX,cOo),e(lv,fOo),e(I,mOo),e(I,iv),e(iv,s_e),e(s_e,gOo),e(iv,hOo),e(iv,dX),e(dX,pOo),e(iv,_Oo),e(I,uOo),e(I,dv),e(dv,l_e),e(l_e,bOo),e(dv,vOo),e(dv,cX),e(cX,FOo),e(dv,TOo),e(I,MOo),e(I,cv),e(cv,i_e),e(i_e,EOo),e(cv,COo),e(cv,fX),e(fX,wOo),e(cv,AOo),e(I,LOo),e(I,fv),e(fv,d_e),e(d_e,yOo),e(fv,xOo),e(fv,mX),e(mX,$Oo),e(fv,kOo),e(I,SOo),e(I,mv),e(mv,c_e),e(c_e,ROo),e(mv,POo),e(mv,gX),e(gX,BOo),e(mv,NOo),e(I,IOo),e(I,gv),e(gv,f_e),e(f_e,qOo),e(gv,jOo),e(gv,hX),e(hX,DOo),e(gv,GOo),e(I,OOo),e(I,hv),e(hv,m_e),e(m_e,VOo),e(hv,XOo),e(hv,pX),e(pX,zOo),e(hv,QOo),e(I,WOo),e(I,pv),e(pv,g_e),e(g_e,HOo),e(pv,UOo),e(pv,_X),e(_X,JOo),e(pv,YOo),e(I,KOo),e(I,_v),e(_v,h_e),e(h_e,ZOo),e(_v,eVo),e(_v,uX),e(uX,oVo),e(_v,rVo),e(I,tVo),e(I,uv),e(uv,p_e),e(p_e,aVo),e(uv,nVo),e(uv,bX),e(bX,sVo),e(uv,lVo),e(I,iVo),e(I,bv),e(bv,__e),e(__e,dVo),e(bv,cVo),e(bv,vX),e(vX,fVo),e(bv,mVo),e(I,gVo),e(I,vv),e(vv,u_e),e(u_e,hVo),e(vv,pVo),e(vv,FX),e(FX,_Vo),e(vv,uVo),e(I,bVo),e(I,Fv),e(Fv,b_e),e(b_e,vVo),e(Fv,FVo),e(Fv,TX),e(TX,TVo),e(Fv,MVo),e(I,EVo),e(I,Tv),e(Tv,v_e),e(v_e,CVo),e(Tv,wVo),e(Tv,MX),e(MX,AVo),e(Tv,LVo),e(I,yVo),e(I,Mv),e(Mv,F_e),e(F_e,xVo),e(Mv,$Vo),e(Mv,EX),e(EX,kVo),e(Mv,SVo),e(I,RVo),e(I,Ev),e(Ev,T_e),e(T_e,PVo),e(Ev,BVo),e(Ev,CX),e(CX,NVo),e(Ev,IVo),e(I,qVo),e(I,Cv),e(Cv,M_e),e(M_e,jVo),e(Cv,DVo),e(Cv,wX),e(wX,GVo),e(Cv,OVo),e(I,VVo),e(I,wv),e(wv,E_e),e(E_e,XVo),e(wv,zVo),e(wv,AX),e(AX,QVo),e(wv,WVo),e(I,HVo),e(I,Av),e(Av,C_e),e(C_e,UVo),e(Av,JVo),e(Av,LX),e(LX,YVo),e(Av,KVo),e(I,ZVo),e(I,Lv),e(Lv,w_e),e(w_e,eXo),e(Lv,oXo),e(Lv,yX),e(yX,rXo),e(Lv,tXo),e(I,aXo),e(I,yv),e(yv,A_e),e(A_e,nXo),e(yv,sXo),e(yv,xX),e(xX,lXo),e(yv,iXo),e(I,dXo),e(I,xv),e(xv,L_e),e(L_e,cXo),e(xv,fXo),e(xv,$X),e($X,mXo),e(xv,gXo),e(I,hXo),e(I,$v),e($v,y_e),e(y_e,pXo),e($v,_Xo),e($v,kX),e(kX,uXo),e($v,bXo),e(I,vXo),e(I,kv),e(kv,x_e),e(x_e,FXo),e(kv,TXo),e(kv,SX),e(SX,MXo),e(kv,EXo),e(I,CXo),e(I,Sv),e(Sv,$_e),e($_e,wXo),e(Sv,AXo),e(Sv,RX),e(RX,LXo),e(Sv,yXo),e(I,xXo),e(I,Rv),e(Rv,k_e),e(k_e,$Xo),e(Rv,kXo),e(Rv,PX),e(PX,SXo),e(Rv,RXo),e(I,PXo),e(I,Pv),e(Pv,S_e),e(S_e,BXo),e(Pv,NXo),e(Pv,BX),e(BX,IXo),e(Pv,qXo),e(I,jXo),e(I,Bv),e(Bv,R_e),e(R_e,DXo),e(Bv,GXo),e(Bv,NX),e(NX,OXo),e(Bv,VXo),e(I,XXo),e(I,Nv),e(Nv,P_e),e(P_e,zXo),e(Nv,QXo),e(Nv,IX),e(IX,WXo),e(Nv,HXo),e(I,UXo),e(I,Iv),e(Iv,B_e),e(B_e,JXo),e(Iv,YXo),e(Iv,qX),e(qX,KXo),e(Iv,ZXo),e(I,ezo),e(I,qv),e(qv,N_e),e(N_e,ozo),e(qv,rzo),e(qv,jX),e(jX,tzo),e(qv,azo),e(oo,nzo),e(oo,jv),e(jv,szo),e(jv,I_e),e(I_e,lzo),e(jv,izo),e(jv,q_e),e(q_e,dzo),e(oo,czo),M(Dv,oo,null),b(f,gXe,u),b(f,ad,u),e(ad,Gv),e(Gv,j_e),M(aL,j_e,null),e(ad,fzo),e(ad,D_e),e(D_e,mzo),b(f,hXe,u),b(f,Bo,u),M(nL,Bo,null),e(Bo,gzo),e(Bo,nd),e(nd,hzo),e(nd,DX),e(DX,pzo),e(nd,_zo),e(nd,GX),e(GX,uzo),e(nd,bzo),e(Bo,vzo),e(Bo,sL),e(sL,Fzo),e(sL,G_e),e(G_e,Tzo),e(sL,Mzo),e(Bo,Ezo),e(Bo,gt),M(lL,gt,null),e(gt,Czo),e(gt,O_e),e(O_e,wzo),e(gt,Azo),e(gt,sd),e(sd,Lzo),e(sd,V_e),e(V_e,yzo),e(sd,xzo),e(sd,OX),e(OX,$zo),e(sd,kzo),e(gt,Szo),M(Ov,gt,null),e(Bo,Rzo),e(Bo,ro),M(iL,ro,null),e(ro,Pzo),e(ro,X_e),e(X_e,Bzo),e(ro,Nzo),e(ro,Oa),e(Oa,Izo),e(Oa,z_e),e(z_e,qzo),e(Oa,jzo),e(Oa,Q_e),e(Q_e,Dzo),e(Oa,Gzo),e(Oa,W_e),e(W_e,Ozo),e(Oa,Vzo),e(ro,Xzo),e(ro,Z),e(Z,Vv),e(Vv,H_e),e(H_e,zzo),e(Vv,Qzo),e(Vv,VX),e(VX,Wzo),e(Vv,Hzo),e(Z,Uzo),e(Z,Xv),e(Xv,U_e),e(U_e,Jzo),e(Xv,Yzo),e(Xv,XX),e(XX,Kzo),e(Xv,Zzo),e(Z,eQo),e(Z,zv),e(zv,J_e),e(J_e,oQo),e(zv,rQo),e(zv,zX),e(zX,tQo),e(zv,aQo),e(Z,nQo),e(Z,Qv),e(Qv,Y_e),e(Y_e,sQo),e(Qv,lQo),e(Qv,QX),e(QX,iQo),e(Qv,dQo),e(Z,cQo),e(Z,Wv),e(Wv,K_e),e(K_e,fQo),e(Wv,mQo),e(Wv,WX),e(WX,gQo),e(Wv,hQo),e(Z,pQo),e(Z,Hv),e(Hv,Z_e),e(Z_e,_Qo),e(Hv,uQo),e(Hv,HX),e(HX,bQo),e(Hv,vQo),e(Z,FQo),e(Z,Uv),e(Uv,eue),e(eue,TQo),e(Uv,MQo),e(Uv,UX),e(UX,EQo),e(Uv,CQo),e(Z,wQo),e(Z,Jv),e(Jv,oue),e(oue,AQo),e(Jv,LQo),e(Jv,JX),e(JX,yQo),e(Jv,xQo),e(Z,$Qo),e(Z,Yv),e(Yv,rue),e(rue,kQo),e(Yv,SQo),e(Yv,YX),e(YX,RQo),e(Yv,PQo),e(Z,BQo),e(Z,Kv),e(Kv,tue),e(tue,NQo),e(Kv,IQo),e(Kv,KX),e(KX,qQo),e(Kv,jQo),e(Z,DQo),e(Z,Zv),e(Zv,aue),e(aue,GQo),e(Zv,OQo),e(Zv,ZX),e(ZX,VQo),e(Zv,XQo),e(Z,zQo),e(Z,e5),e(e5,nue),e(nue,QQo),e(e5,WQo),e(e5,ez),e(ez,HQo),e(e5,UQo),e(Z,JQo),e(Z,o5),e(o5,sue),e(sue,YQo),e(o5,KQo),e(o5,oz),e(oz,ZQo),e(o5,eWo),e(Z,oWo),e(Z,r5),e(r5,lue),e(lue,rWo),e(r5,tWo),e(r5,rz),e(rz,aWo),e(r5,nWo),e(Z,sWo),e(Z,t5),e(t5,iue),e(iue,lWo),e(t5,iWo),e(t5,tz),e(tz,dWo),e(t5,cWo),e(Z,fWo),e(Z,a5),e(a5,due),e(due,mWo),e(a5,gWo),e(a5,az),e(az,hWo),e(a5,pWo),e(Z,_Wo),e(Z,n5),e(n5,cue),e(cue,uWo),e(n5,bWo),e(n5,nz),e(nz,vWo),e(n5,FWo),e(Z,TWo),e(Z,s5),e(s5,fue),e(fue,MWo),e(s5,EWo),e(s5,sz),e(sz,CWo),e(s5,wWo),e(Z,AWo),e(Z,l5),e(l5,mue),e(mue,LWo),e(l5,yWo),e(l5,lz),e(lz,xWo),e(l5,$Wo),e(Z,kWo),e(Z,i5),e(i5,gue),e(gue,SWo),e(i5,RWo),e(i5,iz),e(iz,PWo),e(i5,BWo),e(Z,NWo),e(Z,d5),e(d5,hue),e(hue,IWo),e(d5,qWo),e(d5,dz),e(dz,jWo),e(d5,DWo),e(Z,GWo),e(Z,c5),e(c5,pue),e(pue,OWo),e(c5,VWo),e(c5,cz),e(cz,XWo),e(c5,zWo),e(Z,QWo),e(Z,f5),e(f5,_ue),e(_ue,WWo),e(f5,HWo),e(f5,fz),e(fz,UWo),e(f5,JWo),e(Z,YWo),e(Z,m5),e(m5,uue),e(uue,KWo),e(m5,ZWo),e(m5,mz),e(mz,eHo),e(m5,oHo),e(Z,rHo),e(Z,g5),e(g5,bue),e(bue,tHo),e(g5,aHo),e(g5,gz),e(gz,nHo),e(g5,sHo),e(Z,lHo),e(Z,h5),e(h5,vue),e(vue,iHo),e(h5,dHo),e(h5,hz),e(hz,cHo),e(h5,fHo),e(Z,mHo),e(Z,p5),e(p5,Fue),e(Fue,gHo),e(p5,hHo),e(p5,pz),e(pz,pHo),e(p5,_Ho),e(Z,uHo),e(Z,_5),e(_5,Tue),e(Tue,bHo),e(_5,vHo),e(_5,_z),e(_z,FHo),e(_5,THo),e(Z,MHo),e(Z,u5),e(u5,Mue),e(Mue,EHo),e(u5,CHo),e(u5,uz),e(uz,wHo),e(u5,AHo),e(Z,LHo),e(Z,b5),e(b5,Eue),e(Eue,yHo),e(b5,xHo),e(b5,bz),e(bz,$Ho),e(b5,kHo),e(ro,SHo),e(ro,v5),e(v5,RHo),e(v5,Cue),e(Cue,PHo),e(v5,BHo),e(v5,wue),e(wue,NHo),e(ro,IHo),M(F5,ro,null),b(f,pXe,u),b(f,ld,u),e(ld,T5),e(T5,Aue),M(dL,Aue,null),e(ld,qHo),e(ld,Lue),e(Lue,jHo),b(f,_Xe,u),b(f,No,u),M(cL,No,null),e(No,DHo),e(No,id),e(id,GHo),e(id,vz),e(vz,OHo),e(id,VHo),e(id,Fz),e(Fz,XHo),e(id,zHo),e(No,QHo),e(No,fL),e(fL,WHo),e(fL,yue),e(yue,HHo),e(fL,UHo),e(No,JHo),e(No,ht),M(mL,ht,null),e(ht,YHo),e(ht,xue),e(xue,KHo),e(ht,ZHo),e(ht,dd),e(dd,eUo),e(dd,$ue),e($ue,oUo),e(dd,rUo),e(dd,Tz),e(Tz,tUo),e(dd,aUo),e(ht,nUo),M(M5,ht,null),e(No,sUo),e(No,to),M(gL,to,null),e(to,lUo),e(to,kue),e(kue,iUo),e(to,dUo),e(to,Va),e(Va,cUo),e(Va,Sue),e(Sue,fUo),e(Va,mUo),e(Va,Rue),e(Rue,gUo),e(Va,hUo),e(Va,Pue),e(Pue,pUo),e(Va,_Uo),e(to,uUo),e(to,Io),e(Io,E5),e(E5,Bue),e(Bue,bUo),e(E5,vUo),e(E5,Mz),e(Mz,FUo),e(E5,TUo),e(Io,MUo),e(Io,C5),e(C5,Nue),e(Nue,EUo),e(C5,CUo),e(C5,Ez),e(Ez,wUo),e(C5,AUo),e(Io,LUo),e(Io,w5),e(w5,Iue),e(Iue,yUo),e(w5,xUo),e(w5,Cz),e(Cz,$Uo),e(w5,kUo),e(Io,SUo),e(Io,A5),e(A5,que),e(que,RUo),e(A5,PUo),e(A5,wz),e(wz,BUo),e(A5,NUo),e(Io,IUo),e(Io,L5),e(L5,jue),e(jue,qUo),e(L5,jUo),e(L5,Az),e(Az,DUo),e(L5,GUo),e(Io,OUo),e(Io,y5),e(y5,Due),e(Due,VUo),e(y5,XUo),e(y5,Lz),e(Lz,zUo),e(y5,QUo),e(to,WUo),e(to,x5),e(x5,HUo),e(x5,Gue),e(Gue,UUo),e(x5,JUo),e(x5,Oue),e(Oue,YUo),e(to,KUo),M($5,to,null),b(f,uXe,u),b(f,cd,u),e(cd,k5),e(k5,Vue),M(hL,Vue,null),e(cd,ZUo),e(cd,Xue),e(Xue,eJo),b(f,bXe,u),b(f,qo,u),M(pL,qo,null),e(qo,oJo),e(qo,fd),e(fd,rJo),e(fd,yz),e(yz,tJo),e(fd,aJo),e(fd,xz),e(xz,nJo),e(fd,sJo),e(qo,lJo),e(qo,_L),e(_L,iJo),e(_L,zue),e(zue,dJo),e(_L,cJo),e(qo,fJo),e(qo,pt),M(uL,pt,null),e(pt,mJo),e(pt,Que),e(Que,gJo),e(pt,hJo),e(pt,md),e(md,pJo),e(md,Wue),e(Wue,_Jo),e(md,uJo),e(md,$z),e($z,bJo),e(md,vJo),e(pt,FJo),M(S5,pt,null),e(qo,TJo),e(qo,ao),M(bL,ao,null),e(ao,MJo),e(ao,Hue),e(Hue,EJo),e(ao,CJo),e(ao,Xa),e(Xa,wJo),e(Xa,Uue),e(Uue,AJo),e(Xa,LJo),e(Xa,Jue),e(Jue,yJo),e(Xa,xJo),e(Xa,Yue),e(Yue,$Jo),e(Xa,kJo),e(ao,SJo),e(ao,U),e(U,R5),e(R5,Kue),e(Kue,RJo),e(R5,PJo),e(R5,kz),e(kz,BJo),e(R5,NJo),e(U,IJo),e(U,P5),e(P5,Zue),e(Zue,qJo),e(P5,jJo),e(P5,Sz),e(Sz,DJo),e(P5,GJo),e(U,OJo),e(U,B5),e(B5,e1e),e(e1e,VJo),e(B5,XJo),e(B5,Rz),e(Rz,zJo),e(B5,QJo),e(U,WJo),e(U,N5),e(N5,o1e),e(o1e,HJo),e(N5,UJo),e(N5,Pz),e(Pz,JJo),e(N5,YJo),e(U,KJo),e(U,I5),e(I5,r1e),e(r1e,ZJo),e(I5,eYo),e(I5,Bz),e(Bz,oYo),e(I5,rYo),e(U,tYo),e(U,q5),e(q5,t1e),e(t1e,aYo),e(q5,nYo),e(q5,Nz),e(Nz,sYo),e(q5,lYo),e(U,iYo),e(U,j5),e(j5,a1e),e(a1e,dYo),e(j5,cYo),e(j5,Iz),e(Iz,fYo),e(j5,mYo),e(U,gYo),e(U,D5),e(D5,n1e),e(n1e,hYo),e(D5,pYo),e(D5,qz),e(qz,_Yo),e(D5,uYo),e(U,bYo),e(U,G5),e(G5,s1e),e(s1e,vYo),e(G5,FYo),e(G5,jz),e(jz,TYo),e(G5,MYo),e(U,EYo),e(U,O5),e(O5,l1e),e(l1e,CYo),e(O5,wYo),e(O5,Dz),e(Dz,AYo),e(O5,LYo),e(U,yYo),e(U,V5),e(V5,i1e),e(i1e,xYo),e(V5,$Yo),e(V5,Gz),e(Gz,kYo),e(V5,SYo),e(U,RYo),e(U,X5),e(X5,d1e),e(d1e,PYo),e(X5,BYo),e(X5,Oz),e(Oz,NYo),e(X5,IYo),e(U,qYo),e(U,z5),e(z5,c1e),e(c1e,jYo),e(z5,DYo),e(z5,Vz),e(Vz,GYo),e(z5,OYo),e(U,VYo),e(U,Q5),e(Q5,f1e),e(f1e,XYo),e(Q5,zYo),e(Q5,Xz),e(Xz,QYo),e(Q5,WYo),e(U,HYo),e(U,W5),e(W5,m1e),e(m1e,UYo),e(W5,JYo),e(W5,zz),e(zz,YYo),e(W5,KYo),e(U,ZYo),e(U,H5),e(H5,g1e),e(g1e,eKo),e(H5,oKo),e(H5,Qz),e(Qz,rKo),e(H5,tKo),e(U,aKo),e(U,U5),e(U5,h1e),e(h1e,nKo),e(U5,sKo),e(U5,Wz),e(Wz,lKo),e(U5,iKo),e(U,dKo),e(U,J5),e(J5,p1e),e(p1e,cKo),e(J5,fKo),e(J5,Hz),e(Hz,mKo),e(J5,gKo),e(U,hKo),e(U,Y5),e(Y5,_1e),e(_1e,pKo),e(Y5,_Ko),e(Y5,Uz),e(Uz,uKo),e(Y5,bKo),e(U,vKo),e(U,K5),e(K5,u1e),e(u1e,FKo),e(K5,TKo),e(K5,Jz),e(Jz,MKo),e(K5,EKo),e(U,CKo),e(U,Z5),e(Z5,b1e),e(b1e,wKo),e(Z5,AKo),e(Z5,Yz),e(Yz,LKo),e(Z5,yKo),e(U,xKo),e(U,e0),e(e0,v1e),e(v1e,$Ko),e(e0,kKo),e(e0,Kz),e(Kz,SKo),e(e0,RKo),e(U,PKo),e(U,o0),e(o0,F1e),e(F1e,BKo),e(o0,NKo),e(o0,Zz),e(Zz,IKo),e(o0,qKo),e(U,jKo),e(U,r0),e(r0,T1e),e(T1e,DKo),e(r0,GKo),e(r0,eQ),e(eQ,OKo),e(r0,VKo),e(U,XKo),e(U,t0),e(t0,M1e),e(M1e,zKo),e(t0,QKo),e(t0,oQ),e(oQ,WKo),e(t0,HKo),e(U,UKo),e(U,a0),e(a0,E1e),e(E1e,JKo),e(a0,YKo),e(a0,rQ),e(rQ,KKo),e(a0,ZKo),e(U,eZo),e(U,n0),e(n0,C1e),e(C1e,oZo),e(n0,rZo),e(n0,tQ),e(tQ,tZo),e(n0,aZo),e(U,nZo),e(U,s0),e(s0,w1e),e(w1e,sZo),e(s0,lZo),e(s0,aQ),e(aQ,iZo),e(s0,dZo),e(U,cZo),e(U,l0),e(l0,A1e),e(A1e,fZo),e(l0,mZo),e(l0,nQ),e(nQ,gZo),e(l0,hZo),e(U,pZo),e(U,i0),e(i0,L1e),e(L1e,_Zo),e(i0,uZo),e(i0,sQ),e(sQ,bZo),e(i0,vZo),e(U,FZo),e(U,d0),e(d0,y1e),e(y1e,TZo),e(d0,MZo),e(d0,lQ),e(lQ,EZo),e(d0,CZo),e(U,wZo),e(U,c0),e(c0,x1e),e(x1e,AZo),e(c0,LZo),e(c0,iQ),e(iQ,yZo),e(c0,xZo),e(U,$Zo),e(U,f0),e(f0,$1e),e($1e,kZo),e(f0,SZo),e(f0,dQ),e(dQ,RZo),e(f0,PZo),e(U,BZo),e(U,m0),e(m0,k1e),e(k1e,NZo),e(m0,IZo),e(m0,cQ),e(cQ,qZo),e(m0,jZo),e(U,DZo),e(U,g0),e(g0,S1e),e(S1e,GZo),e(g0,OZo),e(g0,fQ),e(fQ,VZo),e(g0,XZo),e(U,zZo),e(U,h0),e(h0,R1e),e(R1e,QZo),e(h0,WZo),e(h0,mQ),e(mQ,HZo),e(h0,UZo),e(ao,JZo),e(ao,p0),e(p0,YZo),e(p0,P1e),e(P1e,KZo),e(p0,ZZo),e(p0,B1e),e(B1e,eer),e(ao,oer),M(_0,ao,null),b(f,vXe,u),b(f,gd,u),e(gd,u0),e(u0,N1e),M(vL,N1e,null),e(gd,rer),e(gd,I1e),e(I1e,ter),b(f,FXe,u),b(f,jo,u),M(FL,jo,null),e(jo,aer),e(jo,hd),e(hd,ner),e(hd,gQ),e(gQ,ser),e(hd,ler),e(hd,hQ),e(hQ,ier),e(hd,der),e(jo,cer),e(jo,TL),e(TL,fer),e(TL,q1e),e(q1e,mer),e(TL,ger),e(jo,her),e(jo,_t),M(ML,_t,null),e(_t,per),e(_t,j1e),e(j1e,_er),e(_t,uer),e(_t,pd),e(pd,ber),e(pd,D1e),e(D1e,ver),e(pd,Fer),e(pd,pQ),e(pQ,Ter),e(pd,Mer),e(_t,Eer),M(b0,_t,null),e(jo,Cer),e(jo,no),M(EL,no,null),e(no,wer),e(no,G1e),e(G1e,Aer),e(no,Ler),e(no,za),e(za,yer),e(za,O1e),e(O1e,xer),e(za,$er),e(za,V1e),e(V1e,ker),e(za,Ser),e(za,X1e),e(X1e,Rer),e(za,Per),e(no,Ber),e(no,V),e(V,v0),e(v0,z1e),e(z1e,Ner),e(v0,Ier),e(v0,_Q),e(_Q,qer),e(v0,jer),e(V,Der),e(V,F0),e(F0,Q1e),e(Q1e,Ger),e(F0,Oer),e(F0,uQ),e(uQ,Ver),e(F0,Xer),e(V,zer),e(V,T0),e(T0,W1e),e(W1e,Qer),e(T0,Wer),e(T0,bQ),e(bQ,Her),e(T0,Uer),e(V,Jer),e(V,M0),e(M0,H1e),e(H1e,Yer),e(M0,Ker),e(M0,vQ),e(vQ,Zer),e(M0,eor),e(V,oor),e(V,E0),e(E0,U1e),e(U1e,ror),e(E0,tor),e(E0,FQ),e(FQ,aor),e(E0,nor),e(V,sor),e(V,C0),e(C0,J1e),e(J1e,lor),e(C0,ior),e(C0,TQ),e(TQ,dor),e(C0,cor),e(V,mor),e(V,w0),e(w0,Y1e),e(Y1e,gor),e(w0,hor),e(w0,MQ),e(MQ,por),e(w0,_or),e(V,uor),e(V,A0),e(A0,K1e),e(K1e,bor),e(A0,vor),e(A0,EQ),e(EQ,For),e(A0,Tor),e(V,Mor),e(V,L0),e(L0,Z1e),e(Z1e,Eor),e(L0,Cor),e(L0,CQ),e(CQ,wor),e(L0,Aor),e(V,Lor),e(V,y0),e(y0,e2e),e(e2e,yor),e(y0,xor),e(y0,wQ),e(wQ,$or),e(y0,kor),e(V,Sor),e(V,x0),e(x0,o2e),e(o2e,Ror),e(x0,Por),e(x0,AQ),e(AQ,Bor),e(x0,Nor),e(V,Ior),e(V,$0),e($0,r2e),e(r2e,qor),e($0,jor),e($0,LQ),e(LQ,Dor),e($0,Gor),e(V,Oor),e(V,k0),e(k0,t2e),e(t2e,Vor),e(k0,Xor),e(k0,yQ),e(yQ,zor),e(k0,Qor),e(V,Wor),e(V,S0),e(S0,a2e),e(a2e,Hor),e(S0,Uor),e(S0,xQ),e(xQ,Jor),e(S0,Yor),e(V,Kor),e(V,R0),e(R0,n2e),e(n2e,Zor),e(R0,err),e(R0,$Q),e($Q,orr),e(R0,rrr),e(V,trr),e(V,P0),e(P0,s2e),e(s2e,arr),e(P0,nrr),e(P0,kQ),e(kQ,srr),e(P0,lrr),e(V,irr),e(V,B0),e(B0,l2e),e(l2e,drr),e(B0,crr),e(B0,SQ),e(SQ,frr),e(B0,mrr),e(V,grr),e(V,N0),e(N0,i2e),e(i2e,hrr),e(N0,prr),e(N0,RQ),e(RQ,_rr),e(N0,urr),e(V,brr),e(V,I0),e(I0,d2e),e(d2e,vrr),e(I0,Frr),e(I0,PQ),e(PQ,Trr),e(I0,Mrr),e(V,Err),e(V,q0),e(q0,c2e),e(c2e,Crr),e(q0,wrr),e(q0,BQ),e(BQ,Arr),e(q0,Lrr),e(V,yrr),e(V,j0),e(j0,f2e),e(f2e,xrr),e(j0,$rr),e(j0,NQ),e(NQ,krr),e(j0,Srr),e(V,Rrr),e(V,D0),e(D0,m2e),e(m2e,Prr),e(D0,Brr),e(D0,IQ),e(IQ,Nrr),e(D0,Irr),e(V,qrr),e(V,G0),e(G0,g2e),e(g2e,jrr),e(G0,Drr),e(G0,qQ),e(qQ,Grr),e(G0,Orr),e(V,Vrr),e(V,O0),e(O0,h2e),e(h2e,Xrr),e(O0,zrr),e(O0,jQ),e(jQ,Qrr),e(O0,Wrr),e(V,Hrr),e(V,V0),e(V0,p2e),e(p2e,Urr),e(V0,Jrr),e(V0,DQ),e(DQ,Yrr),e(V0,Krr),e(V,Zrr),e(V,X0),e(X0,_2e),e(_2e,etr),e(X0,otr),e(X0,GQ),e(GQ,rtr),e(X0,ttr),e(V,atr),e(V,z0),e(z0,u2e),e(u2e,ntr),e(z0,str),e(z0,OQ),e(OQ,ltr),e(z0,itr),e(V,dtr),e(V,Q0),e(Q0,b2e),e(b2e,ctr),e(Q0,ftr),e(Q0,VQ),e(VQ,mtr),e(Q0,gtr),e(V,htr),e(V,W0),e(W0,v2e),e(v2e,ptr),e(W0,_tr),e(W0,XQ),e(XQ,utr),e(W0,btr),e(V,vtr),e(V,H0),e(H0,F2e),e(F2e,Ftr),e(H0,Ttr),e(H0,zQ),e(zQ,Mtr),e(H0,Etr),e(V,Ctr),e(V,U0),e(U0,T2e),e(T2e,wtr),e(U0,Atr),e(U0,QQ),e(QQ,Ltr),e(U0,ytr),e(V,xtr),e(V,J0),e(J0,M2e),e(M2e,$tr),e(J0,ktr),e(J0,WQ),e(WQ,Str),e(J0,Rtr),e(V,Ptr),e(V,Y0),e(Y0,E2e),e(E2e,Btr),e(Y0,Ntr),e(Y0,HQ),e(HQ,Itr),e(Y0,qtr),e(V,jtr),e(V,K0),e(K0,C2e),e(C2e,Dtr),e(K0,Gtr),e(K0,UQ),e(UQ,Otr),e(K0,Vtr),e(V,Xtr),e(V,Z0),e(Z0,w2e),e(w2e,ztr),e(Z0,Qtr),e(Z0,JQ),e(JQ,Wtr),e(Z0,Htr),e(V,Utr),e(V,eF),e(eF,A2e),e(A2e,Jtr),e(eF,Ytr),e(eF,YQ),e(YQ,Ktr),e(eF,Ztr),e(V,ear),e(V,oF),e(oF,L2e),e(L2e,oar),e(oF,rar),e(oF,KQ),e(KQ,tar),e(oF,aar),e(V,nar),e(V,rF),e(rF,y2e),e(y2e,sar),e(rF,lar),e(rF,ZQ),e(ZQ,iar),e(rF,dar),e(V,car),e(V,tF),e(tF,x2e),e(x2e,far),e(tF,mar),e(tF,eW),e(eW,gar),e(tF,har),e(V,par),e(V,aF),e(aF,$2e),e($2e,_ar),e(aF,uar),e(aF,oW),e(oW,bar),e(aF,Far),e(V,Tar),e(V,nF),e(nF,k2e),e(k2e,Mar),e(nF,Ear),e(nF,rW),e(rW,Car),e(nF,war),e(V,Aar),e(V,sF),e(sF,S2e),e(S2e,Lar),e(sF,yar),e(sF,tW),e(tW,xar),e(sF,$ar),e(no,kar),e(no,lF),e(lF,Sar),e(lF,R2e),e(R2e,Rar),e(lF,Par),e(lF,P2e),e(P2e,Bar),e(no,Nar),M(iF,no,null),b(f,TXe,u),b(f,_d,u),e(_d,dF),e(dF,B2e),M(CL,B2e,null),e(_d,Iar),e(_d,N2e),e(N2e,qar),b(f,MXe,u),b(f,Do,u),M(wL,Do,null),e(Do,jar),e(Do,ud),e(ud,Dar),e(ud,aW),e(aW,Gar),e(ud,Oar),e(ud,nW),e(nW,Var),e(ud,Xar),e(Do,zar),e(Do,AL),e(AL,Qar),e(AL,I2e),e(I2e,War),e(AL,Har),e(Do,Uar),e(Do,ut),M(LL,ut,null),e(ut,Jar),e(ut,q2e),e(q2e,Yar),e(ut,Kar),e(ut,bd),e(bd,Zar),e(bd,j2e),e(j2e,enr),e(bd,onr),e(bd,sW),e(sW,rnr),e(bd,tnr),e(ut,anr),M(cF,ut,null),e(Do,nnr),e(Do,so),M(yL,so,null),e(so,snr),e(so,D2e),e(D2e,lnr),e(so,inr),e(so,Qa),e(Qa,dnr),e(Qa,G2e),e(G2e,cnr),e(Qa,fnr),e(Qa,O2e),e(O2e,mnr),e(Qa,gnr),e(Qa,V2e),e(V2e,hnr),e(Qa,pnr),e(so,_nr),e(so,X2e),e(X2e,fF),e(fF,z2e),e(z2e,unr),e(fF,bnr),e(fF,lW),e(lW,vnr),e(fF,Fnr),e(so,Tnr),e(so,mF),e(mF,Mnr),e(mF,Q2e),e(Q2e,Enr),e(mF,Cnr),e(mF,W2e),e(W2e,wnr),e(so,Anr),M(gF,so,null),b(f,EXe,u),b(f,vd,u),e(vd,hF),e(hF,H2e),M(xL,H2e,null),e(vd,Lnr),e(vd,U2e),e(U2e,ynr),b(f,CXe,u),b(f,Go,u),M($L,Go,null),e(Go,xnr),e(Go,Fd),e(Fd,$nr),e(Fd,iW),e(iW,knr),e(Fd,Snr),e(Fd,dW),e(dW,Rnr),e(Fd,Pnr),e(Go,Bnr),e(Go,kL),e(kL,Nnr),e(kL,J2e),e(J2e,Inr),e(kL,qnr),e(Go,jnr),e(Go,bt),M(SL,bt,null),e(bt,Dnr),e(bt,Y2e),e(Y2e,Gnr),e(bt,Onr),e(bt,Td),e(Td,Vnr),e(Td,K2e),e(K2e,Xnr),e(Td,znr),e(Td,cW),e(cW,Qnr),e(Td,Wnr),e(bt,Hnr),M(pF,bt,null),e(Go,Unr),e(Go,lo),M(RL,lo,null),e(lo,Jnr),e(lo,Z2e),e(Z2e,Ynr),e(lo,Knr),e(lo,Wa),e(Wa,Znr),e(Wa,ebe),e(ebe,esr),e(Wa,osr),e(Wa,obe),e(obe,rsr),e(Wa,tsr),e(Wa,rbe),e(rbe,asr),e(Wa,nsr),e(lo,ssr),e(lo,ve),e(ve,_F),e(_F,tbe),e(tbe,lsr),e(_F,isr),e(_F,fW),e(fW,dsr),e(_F,csr),e(ve,fsr),e(ve,uF),e(uF,abe),e(abe,msr),e(uF,gsr),e(uF,mW),e(mW,hsr),e(uF,psr),e(ve,_sr),e(ve,bF),e(bF,nbe),e(nbe,usr),e(bF,bsr),e(bF,gW),e(gW,vsr),e(bF,Fsr),e(ve,Tsr),e(ve,vF),e(vF,sbe),e(sbe,Msr),e(vF,Esr),e(vF,hW),e(hW,Csr),e(vF,wsr),e(ve,Asr),e(ve,Hs),e(Hs,lbe),e(lbe,Lsr),e(Hs,ysr),e(Hs,pW),e(pW,xsr),e(Hs,$sr),e(Hs,_W),e(_W,ksr),e(Hs,Ssr),e(ve,Rsr),e(ve,FF),e(FF,ibe),e(ibe,Psr),e(FF,Bsr),e(FF,uW),e(uW,Nsr),e(FF,Isr),e(ve,qsr),e(ve,Us),e(Us,dbe),e(dbe,jsr),e(Us,Dsr),e(Us,bW),e(bW,Gsr),e(Us,Osr),e(Us,vW),e(vW,Vsr),e(Us,Xsr),e(ve,zsr),e(ve,TF),e(TF,cbe),e(cbe,Qsr),e(TF,Wsr),e(TF,FW),e(FW,Hsr),e(TF,Usr),e(ve,Jsr),e(ve,vt),e(vt,fbe),e(fbe,Ysr),e(vt,Ksr),e(vt,TW),e(TW,Zsr),e(vt,elr),e(vt,MW),e(MW,olr),e(vt,rlr),e(vt,EW),e(EW,tlr),e(vt,alr),e(ve,nlr),e(ve,MF),e(MF,mbe),e(mbe,slr),e(MF,llr),e(MF,CW),e(CW,ilr),e(MF,dlr),e(ve,clr),e(ve,EF),e(EF,gbe),e(gbe,flr),e(EF,mlr),e(EF,wW),e(wW,glr),e(EF,hlr),e(ve,plr),e(ve,CF),e(CF,hbe),e(hbe,_lr),e(CF,ulr),e(CF,AW),e(AW,blr),e(CF,vlr),e(ve,Flr),e(ve,wF),e(wF,pbe),e(pbe,Tlr),e(wF,Mlr),e(wF,LW),e(LW,Elr),e(wF,Clr),e(ve,wlr),e(ve,AF),e(AF,_be),e(_be,Alr),e(AF,Llr),e(AF,yW),e(yW,ylr),e(AF,xlr),e(ve,$lr),e(ve,LF),e(LF,ube),e(ube,klr),e(LF,Slr),e(LF,xW),e(xW,Rlr),e(LF,Plr),e(ve,Blr),e(ve,yF),e(yF,bbe),e(bbe,Nlr),e(yF,Ilr),e(yF,$W),e($W,qlr),e(yF,jlr),e(lo,Dlr),e(lo,xF),e(xF,Glr),e(xF,vbe),e(vbe,Olr),e(xF,Vlr),e(xF,Fbe),e(Fbe,Xlr),e(lo,zlr),M($F,lo,null),b(f,wXe,u),b(f,Md,u),e(Md,kF),e(kF,Tbe),M(PL,Tbe,null),e(Md,Qlr),e(Md,Mbe),e(Mbe,Wlr),b(f,AXe,u),b(f,Oo,u),M(BL,Oo,null),e(Oo,Hlr),e(Oo,Ed),e(Ed,Ulr),e(Ed,kW),e(kW,Jlr),e(Ed,Ylr),e(Ed,SW),e(SW,Klr),e(Ed,Zlr),e(Oo,eir),e(Oo,NL),e(NL,oir),e(NL,Ebe),e(Ebe,rir),e(NL,tir),e(Oo,air),e(Oo,Ft),M(IL,Ft,null),e(Ft,nir),e(Ft,Cbe),e(Cbe,sir),e(Ft,lir),e(Ft,Cd),e(Cd,iir),e(Cd,wbe),e(wbe,dir),e(Cd,cir),e(Cd,RW),e(RW,fir),e(Cd,mir),e(Ft,gir),M(SF,Ft,null),e(Oo,hir),e(Oo,io),M(qL,io,null),e(io,pir),e(io,Abe),e(Abe,_ir),e(io,uir),e(io,Ha),e(Ha,bir),e(Ha,Lbe),e(Lbe,vir),e(Ha,Fir),e(Ha,ybe),e(ybe,Tir),e(Ha,Mir),e(Ha,xbe),e(xbe,Eir),e(Ha,Cir),e(io,wir),e(io,$be),e($be,RF),e(RF,kbe),e(kbe,Air),e(RF,Lir),e(RF,PW),e(PW,yir),e(RF,xir),e(io,$ir),e(io,PF),e(PF,kir),e(PF,Sbe),e(Sbe,Sir),e(PF,Rir),e(PF,Rbe),e(Rbe,Pir),e(io,Bir),M(BF,io,null),b(f,LXe,u),b(f,wd,u),e(wd,NF),e(NF,Pbe),M(jL,Pbe,null),e(wd,Nir),e(wd,Bbe),e(Bbe,Iir),b(f,yXe,u),b(f,Vo,u),M(DL,Vo,null),e(Vo,qir),e(Vo,Ad),e(Ad,jir),e(Ad,BW),e(BW,Dir),e(Ad,Gir),e(Ad,NW),e(NW,Oir),e(Ad,Vir),e(Vo,Xir),e(Vo,GL),e(GL,zir),e(GL,Nbe),e(Nbe,Qir),e(GL,Wir),e(Vo,Hir),e(Vo,Tt),M(OL,Tt,null),e(Tt,Uir),e(Tt,Ibe),e(Ibe,Jir),e(Tt,Yir),e(Tt,Ld),e(Ld,Kir),e(Ld,qbe),e(qbe,Zir),e(Ld,edr),e(Ld,IW),e(IW,odr),e(Ld,rdr),e(Tt,tdr),M(IF,Tt,null),e(Vo,adr),e(Vo,co),M(VL,co,null),e(co,ndr),e(co,jbe),e(jbe,sdr),e(co,ldr),e(co,Ua),e(Ua,idr),e(Ua,Dbe),e(Dbe,ddr),e(Ua,cdr),e(Ua,Gbe),e(Gbe,fdr),e(Ua,mdr),e(Ua,Obe),e(Obe,gdr),e(Ua,hdr),e(co,pdr),e(co,Vbe),e(Vbe,qF),e(qF,Xbe),e(Xbe,_dr),e(qF,udr),e(qF,qW),e(qW,bdr),e(qF,vdr),e(co,Fdr),e(co,jF),e(jF,Tdr),e(jF,zbe),e(zbe,Mdr),e(jF,Edr),e(jF,Qbe),e(Qbe,Cdr),e(co,wdr),M(DF,co,null),b(f,xXe,u),b(f,yd,u),e(yd,GF),e(GF,Wbe),M(XL,Wbe,null),e(yd,Adr),e(yd,Hbe),e(Hbe,Ldr),b(f,$Xe,u),b(f,Xo,u),M(zL,Xo,null),e(Xo,ydr),e(Xo,xd),e(xd,xdr),e(xd,jW),e(jW,$dr),e(xd,kdr),e(xd,DW),e(DW,Sdr),e(xd,Rdr),e(Xo,Pdr),e(Xo,QL),e(QL,Bdr),e(QL,Ube),e(Ube,Ndr),e(QL,Idr),e(Xo,qdr),e(Xo,Mt),M(WL,Mt,null),e(Mt,jdr),e(Mt,Jbe),e(Jbe,Ddr),e(Mt,Gdr),e(Mt,$d),e($d,Odr),e($d,Ybe),e(Ybe,Vdr),e($d,Xdr),e($d,GW),e(GW,zdr),e($d,Qdr),e(Mt,Wdr),M(OF,Mt,null),e(Xo,Hdr),e(Xo,fo),M(HL,fo,null),e(fo,Udr),e(fo,Kbe),e(Kbe,Jdr),e(fo,Ydr),e(fo,Ja),e(Ja,Kdr),e(Ja,Zbe),e(Zbe,Zdr),e(Ja,ecr),e(Ja,eve),e(eve,ocr),e(Ja,rcr),e(Ja,ove),e(ove,tcr),e(Ja,acr),e(fo,ncr),e(fo,Pe),e(Pe,VF),e(VF,rve),e(rve,scr),e(VF,lcr),e(VF,OW),e(OW,icr),e(VF,dcr),e(Pe,ccr),e(Pe,XF),e(XF,tve),e(tve,fcr),e(XF,mcr),e(XF,VW),e(VW,gcr),e(XF,hcr),e(Pe,pcr),e(Pe,zF),e(zF,ave),e(ave,_cr),e(zF,ucr),e(zF,XW),e(XW,bcr),e(zF,vcr),e(Pe,Fcr),e(Pe,QF),e(QF,nve),e(nve,Tcr),e(QF,Mcr),e(QF,zW),e(zW,Ecr),e(QF,Ccr),e(Pe,wcr),e(Pe,WF),e(WF,sve),e(sve,Acr),e(WF,Lcr),e(WF,QW),e(QW,ycr),e(WF,xcr),e(Pe,$cr),e(Pe,HF),e(HF,lve),e(lve,kcr),e(HF,Scr),e(HF,WW),e(WW,Rcr),e(HF,Pcr),e(Pe,Bcr),e(Pe,UF),e(UF,ive),e(ive,Ncr),e(UF,Icr),e(UF,HW),e(HW,qcr),e(UF,jcr),e(Pe,Dcr),e(Pe,JF),e(JF,dve),e(dve,Gcr),e(JF,Ocr),e(JF,UW),e(UW,Vcr),e(JF,Xcr),e(Pe,zcr),e(Pe,YF),e(YF,cve),e(cve,Qcr),e(YF,Wcr),e(YF,JW),e(JW,Hcr),e(YF,Ucr),e(fo,Jcr),e(fo,KF),e(KF,Ycr),e(KF,fve),e(fve,Kcr),e(KF,Zcr),e(KF,mve),e(mve,efr),e(fo,ofr),M(ZF,fo,null),b(f,kXe,u),b(f,kd,u),e(kd,eT),e(eT,gve),M(UL,gve,null),e(kd,rfr),e(kd,hve),e(hve,tfr),b(f,SXe,u),b(f,zo,u),M(JL,zo,null),e(zo,afr),e(zo,Sd),e(Sd,nfr),e(Sd,YW),e(YW,sfr),e(Sd,lfr),e(Sd,KW),e(KW,ifr),e(Sd,dfr),e(zo,cfr),e(zo,YL),e(YL,ffr),e(YL,pve),e(pve,mfr),e(YL,gfr),e(zo,hfr),e(zo,Et),M(KL,Et,null),e(Et,pfr),e(Et,_ve),e(_ve,_fr),e(Et,ufr),e(Et,Rd),e(Rd,bfr),e(Rd,uve),e(uve,vfr),e(Rd,Ffr),e(Rd,ZW),e(ZW,Tfr),e(Rd,Mfr),e(Et,Efr),M(oT,Et,null),e(zo,Cfr),e(zo,mo),M(ZL,mo,null),e(mo,wfr),e(mo,bve),e(bve,Afr),e(mo,Lfr),e(mo,Ya),e(Ya,yfr),e(Ya,vve),e(vve,xfr),e(Ya,$fr),e(Ya,Fve),e(Fve,kfr),e(Ya,Sfr),e(Ya,Tve),e(Tve,Rfr),e(Ya,Pfr),e(mo,Bfr),e(mo,ot),e(ot,rT),e(rT,Mve),e(Mve,Nfr),e(rT,Ifr),e(rT,eH),e(eH,qfr),e(rT,jfr),e(ot,Dfr),e(ot,tT),e(tT,Eve),e(Eve,Gfr),e(tT,Ofr),e(tT,oH),e(oH,Vfr),e(tT,Xfr),e(ot,zfr),e(ot,aT),e(aT,Cve),e(Cve,Qfr),e(aT,Wfr),e(aT,rH),e(rH,Hfr),e(aT,Ufr),e(ot,Jfr),e(ot,nT),e(nT,wve),e(wve,Yfr),e(nT,Kfr),e(nT,tH),e(tH,Zfr),e(nT,emr),e(ot,omr),e(ot,sT),e(sT,Ave),e(Ave,rmr),e(sT,tmr),e(sT,aH),e(aH,amr),e(sT,nmr),e(mo,smr),e(mo,lT),e(lT,lmr),e(lT,Lve),e(Lve,imr),e(lT,dmr),e(lT,yve),e(yve,cmr),e(mo,fmr),M(iT,mo,null),b(f,RXe,u),b(f,Pd,u),e(Pd,dT),e(dT,xve),M(ey,xve,null),e(Pd,mmr),e(Pd,$ve),e($ve,gmr),b(f,PXe,u),b(f,Qo,u),M(oy,Qo,null),e(Qo,hmr),e(Qo,Bd),e(Bd,pmr),e(Bd,nH),e(nH,_mr),e(Bd,umr),e(Bd,sH),e(sH,bmr),e(Bd,vmr),e(Qo,Fmr),e(Qo,ry),e(ry,Tmr),e(ry,kve),e(kve,Mmr),e(ry,Emr),e(Qo,Cmr),e(Qo,Ct),M(ty,Ct,null),e(Ct,wmr),e(Ct,Sve),e(Sve,Amr),e(Ct,Lmr),e(Ct,Nd),e(Nd,ymr),e(Nd,Rve),e(Rve,xmr),e(Nd,$mr),e(Nd,lH),e(lH,kmr),e(Nd,Smr),e(Ct,Rmr),M(cT,Ct,null),e(Qo,Pmr),e(Qo,go),M(ay,go,null),e(go,Bmr),e(go,Pve),e(Pve,Nmr),e(go,Imr),e(go,Ka),e(Ka,qmr),e(Ka,Bve),e(Bve,jmr),e(Ka,Dmr),e(Ka,Nve),e(Nve,Gmr),e(Ka,Omr),e(Ka,Ive),e(Ive,Vmr),e(Ka,Xmr),e(go,zmr),e(go,Le),e(Le,fT),e(fT,qve),e(qve,Qmr),e(fT,Wmr),e(fT,iH),e(iH,Hmr),e(fT,Umr),e(Le,Jmr),e(Le,mT),e(mT,jve),e(jve,Ymr),e(mT,Kmr),e(mT,dH),e(dH,Zmr),e(mT,egr),e(Le,ogr),e(Le,gT),e(gT,Dve),e(Dve,rgr),e(gT,tgr),e(gT,cH),e(cH,agr),e(gT,ngr),e(Le,sgr),e(Le,hT),e(hT,Gve),e(Gve,lgr),e(hT,igr),e(hT,fH),e(fH,dgr),e(hT,cgr),e(Le,fgr),e(Le,pT),e(pT,Ove),e(Ove,mgr),e(pT,ggr),e(pT,mH),e(mH,hgr),e(pT,pgr),e(Le,_gr),e(Le,_T),e(_T,Vve),e(Vve,ugr),e(_T,bgr),e(_T,gH),e(gH,vgr),e(_T,Fgr),e(Le,Tgr),e(Le,uT),e(uT,Xve),e(Xve,Mgr),e(uT,Egr),e(uT,hH),e(hH,Cgr),e(uT,wgr),e(Le,Agr),e(Le,bT),e(bT,zve),e(zve,Lgr),e(bT,ygr),e(bT,pH),e(pH,xgr),e(bT,$gr),e(Le,kgr),e(Le,vT),e(vT,Qve),e(Qve,Sgr),e(vT,Rgr),e(vT,_H),e(_H,Pgr),e(vT,Bgr),e(Le,Ngr),e(Le,FT),e(FT,Wve),e(Wve,Igr),e(FT,qgr),e(FT,uH),e(uH,jgr),e(FT,Dgr),e(go,Ggr),e(go,TT),e(TT,Ogr),e(TT,Hve),e(Hve,Vgr),e(TT,Xgr),e(TT,Uve),e(Uve,zgr),e(go,Qgr),M(MT,go,null),b(f,BXe,u),b(f,Id,u),e(Id,ET),e(ET,Jve),M(ny,Jve,null),e(Id,Wgr),e(Id,Yve),e(Yve,Hgr),b(f,NXe,u),b(f,Wo,u),M(sy,Wo,null),e(Wo,Ugr),e(Wo,qd),e(qd,Jgr),e(qd,bH),e(bH,Ygr),e(qd,Kgr),e(qd,vH),e(vH,Zgr),e(qd,ehr),e(Wo,ohr),e(Wo,ly),e(ly,rhr),e(ly,Kve),e(Kve,thr),e(ly,ahr),e(Wo,nhr),e(Wo,wt),M(iy,wt,null),e(wt,shr),e(wt,Zve),e(Zve,lhr),e(wt,ihr),e(wt,jd),e(jd,dhr),e(jd,e5e),e(e5e,chr),e(jd,fhr),e(jd,FH),e(FH,mhr),e(jd,ghr),e(wt,hhr),M(CT,wt,null),e(Wo,phr),e(Wo,ho),M(dy,ho,null),e(ho,_hr),e(ho,o5e),e(o5e,uhr),e(ho,bhr),e(ho,Za),e(Za,vhr),e(Za,r5e),e(r5e,Fhr),e(Za,Thr),e(Za,t5e),e(t5e,Mhr),e(Za,Ehr),e(Za,a5e),e(a5e,Chr),e(Za,whr),e(ho,Ahr),e(ho,cy),e(cy,wT),e(wT,n5e),e(n5e,Lhr),e(wT,yhr),e(wT,TH),e(TH,xhr),e(wT,$hr),e(cy,khr),e(cy,AT),e(AT,s5e),e(s5e,Shr),e(AT,Rhr),e(AT,MH),e(MH,Phr),e(AT,Bhr),e(ho,Nhr),e(ho,LT),e(LT,Ihr),e(LT,l5e),e(l5e,qhr),e(LT,jhr),e(LT,i5e),e(i5e,Dhr),e(ho,Ghr),M(yT,ho,null),b(f,IXe,u),b(f,Dd,u),e(Dd,xT),e(xT,d5e),M(fy,d5e,null),e(Dd,Ohr),e(Dd,c5e),e(c5e,Vhr),b(f,qXe,u),b(f,Ho,u),M(my,Ho,null),e(Ho,Xhr),e(Ho,Gd),e(Gd,zhr),e(Gd,EH),e(EH,Qhr),e(Gd,Whr),e(Gd,CH),e(CH,Hhr),e(Gd,Uhr),e(Ho,Jhr),e(Ho,gy),e(gy,Yhr),e(gy,f5e),e(f5e,Khr),e(gy,Zhr),e(Ho,epr),e(Ho,At),M(hy,At,null),e(At,opr),e(At,m5e),e(m5e,rpr),e(At,tpr),e(At,Od),e(Od,apr),e(Od,g5e),e(g5e,npr),e(Od,spr),e(Od,wH),e(wH,lpr),e(Od,ipr),e(At,dpr),M($T,At,null),e(Ho,cpr),e(Ho,po),M(py,po,null),e(po,fpr),e(po,h5e),e(h5e,mpr),e(po,gpr),e(po,en),e(en,hpr),e(en,p5e),e(p5e,ppr),e(en,_pr),e(en,_5e),e(_5e,upr),e(en,bpr),e(en,u5e),e(u5e,vpr),e(en,Fpr),e(po,Tpr),e(po,rt),e(rt,kT),e(kT,b5e),e(b5e,Mpr),e(kT,Epr),e(kT,AH),e(AH,Cpr),e(kT,wpr),e(rt,Apr),e(rt,ST),e(ST,v5e),e(v5e,Lpr),e(ST,ypr),e(ST,LH),e(LH,xpr),e(ST,$pr),e(rt,kpr),e(rt,RT),e(RT,F5e),e(F5e,Spr),e(RT,Rpr),e(RT,yH),e(yH,Ppr),e(RT,Bpr),e(rt,Npr),e(rt,PT),e(PT,T5e),e(T5e,Ipr),e(PT,qpr),e(PT,xH),e(xH,jpr),e(PT,Dpr),e(rt,Gpr),e(rt,BT),e(BT,M5e),e(M5e,Opr),e(BT,Vpr),e(BT,$H),e($H,Xpr),e(BT,zpr),e(po,Qpr),e(po,NT),e(NT,Wpr),e(NT,E5e),e(E5e,Hpr),e(NT,Upr),e(NT,C5e),e(C5e,Jpr),e(po,Ypr),M(IT,po,null),b(f,jXe,u),b(f,Vd,u),e(Vd,qT),e(qT,w5e),M(_y,w5e,null),e(Vd,Kpr),e(Vd,A5e),e(A5e,Zpr),b(f,DXe,u),b(f,Uo,u),M(uy,Uo,null),e(Uo,e_r),e(Uo,Xd),e(Xd,o_r),e(Xd,kH),e(kH,r_r),e(Xd,t_r),e(Xd,SH),e(SH,a_r),e(Xd,n_r),e(Uo,s_r),e(Uo,by),e(by,l_r),e(by,L5e),e(L5e,i_r),e(by,d_r),e(Uo,c_r),e(Uo,Lt),M(vy,Lt,null),e(Lt,f_r),e(Lt,y5e),e(y5e,m_r),e(Lt,g_r),e(Lt,zd),e(zd,h_r),e(zd,x5e),e(x5e,p_r),e(zd,__r),e(zd,RH),e(RH,u_r),e(zd,b_r),e(Lt,v_r),M(jT,Lt,null),e(Uo,F_r),e(Uo,_o),M(Fy,_o,null),e(_o,T_r),e(_o,$5e),e($5e,M_r),e(_o,E_r),e(_o,on),e(on,C_r),e(on,k5e),e(k5e,w_r),e(on,A_r),e(on,S5e),e(S5e,L_r),e(on,y_r),e(on,R5e),e(R5e,x_r),e(on,$_r),e(_o,k_r),e(_o,Qd),e(Qd,DT),e(DT,P5e),e(P5e,S_r),e(DT,R_r),e(DT,PH),e(PH,P_r),e(DT,B_r),e(Qd,N_r),e(Qd,GT),e(GT,B5e),e(B5e,I_r),e(GT,q_r),e(GT,BH),e(BH,j_r),e(GT,D_r),e(Qd,G_r),e(Qd,OT),e(OT,N5e),e(N5e,O_r),e(OT,V_r),e(OT,NH),e(NH,X_r),e(OT,z_r),e(_o,Q_r),e(_o,VT),e(VT,W_r),e(VT,I5e),e(I5e,H_r),e(VT,U_r),e(VT,q5e),e(q5e,J_r),e(_o,Y_r),M(XT,_o,null),b(f,GXe,u),b(f,Wd,u),e(Wd,zT),e(zT,j5e),M(Ty,j5e,null),e(Wd,K_r),e(Wd,D5e),e(D5e,Z_r),b(f,OXe,u),b(f,Jo,u),M(My,Jo,null),e(Jo,eur),e(Jo,Hd),e(Hd,our),e(Hd,IH),e(IH,rur),e(Hd,tur),e(Hd,qH),e(qH,aur),e(Hd,nur),e(Jo,sur),e(Jo,Ey),e(Ey,lur),e(Ey,G5e),e(G5e,iur),e(Ey,dur),e(Jo,cur),e(Jo,yt),M(Cy,yt,null),e(yt,fur),e(yt,O5e),e(O5e,mur),e(yt,gur),e(yt,Ud),e(Ud,hur),e(Ud,V5e),e(V5e,pur),e(Ud,_ur),e(Ud,jH),e(jH,uur),e(Ud,bur),e(yt,vur),M(QT,yt,null),e(Jo,Fur),e(Jo,uo),M(wy,uo,null),e(uo,Tur),e(uo,X5e),e(X5e,Mur),e(uo,Eur),e(uo,rn),e(rn,Cur),e(rn,z5e),e(z5e,wur),e(rn,Aur),e(rn,Q5e),e(Q5e,Lur),e(rn,yur),e(rn,W5e),e(W5e,xur),e(rn,$ur),e(uo,kur),e(uo,Ay),e(Ay,WT),e(WT,H5e),e(H5e,Sur),e(WT,Rur),e(WT,DH),e(DH,Pur),e(WT,Bur),e(Ay,Nur),e(Ay,HT),e(HT,U5e),e(U5e,Iur),e(HT,qur),e(HT,GH),e(GH,jur),e(HT,Dur),e(uo,Gur),e(uo,UT),e(UT,Our),e(UT,J5e),e(J5e,Vur),e(UT,Xur),e(UT,Y5e),e(Y5e,zur),e(uo,Qur),M(JT,uo,null),b(f,VXe,u),b(f,Jd,u),e(Jd,YT),e(YT,K5e),M(Ly,K5e,null),e(Jd,Wur),e(Jd,Z5e),e(Z5e,Hur),b(f,XXe,u),b(f,Yo,u),M(yy,Yo,null),e(Yo,Uur),e(Yo,Yd),e(Yd,Jur),e(Yd,OH),e(OH,Yur),e(Yd,Kur),e(Yd,VH),e(VH,Zur),e(Yd,e1r),e(Yo,o1r),e(Yo,xy),e(xy,r1r),e(xy,e0e),e(e0e,t1r),e(xy,a1r),e(Yo,n1r),e(Yo,xt),M($y,xt,null),e(xt,s1r),e(xt,o0e),e(o0e,l1r),e(xt,i1r),e(xt,Kd),e(Kd,d1r),e(Kd,r0e),e(r0e,c1r),e(Kd,f1r),e(Kd,XH),e(XH,m1r),e(Kd,g1r),e(xt,h1r),M(KT,xt,null),e(Yo,p1r),e(Yo,bo),M(ky,bo,null),e(bo,_1r),e(bo,t0e),e(t0e,u1r),e(bo,b1r),e(bo,tn),e(tn,v1r),e(tn,a0e),e(a0e,F1r),e(tn,T1r),e(tn,n0e),e(n0e,M1r),e(tn,E1r),e(tn,s0e),e(s0e,C1r),e(tn,w1r),e(bo,A1r),e(bo,l0e),e(l0e,ZT),e(ZT,i0e),e(i0e,L1r),e(ZT,y1r),e(ZT,zH),e(zH,x1r),e(ZT,$1r),e(bo,k1r),e(bo,e8),e(e8,S1r),e(e8,d0e),e(d0e,R1r),e(e8,P1r),e(e8,c0e),e(c0e,B1r),e(bo,N1r),M(o8,bo,null),b(f,zXe,u),b(f,Zd,u),e(Zd,r8),e(r8,f0e),M(Sy,f0e,null),e(Zd,I1r),e(Zd,m0e),e(m0e,q1r),b(f,QXe,u),b(f,Ko,u),M(Ry,Ko,null),e(Ko,j1r),e(Ko,ec),e(ec,D1r),e(ec,QH),e(QH,G1r),e(ec,O1r),e(ec,WH),e(WH,V1r),e(ec,X1r),e(Ko,z1r),e(Ko,Py),e(Py,Q1r),e(Py,g0e),e(g0e,W1r),e(Py,H1r),e(Ko,U1r),e(Ko,$t),M(By,$t,null),e($t,J1r),e($t,h0e),e(h0e,Y1r),e($t,K1r),e($t,oc),e(oc,Z1r),e(oc,p0e),e(p0e,e2r),e(oc,o2r),e(oc,HH),e(HH,r2r),e(oc,t2r),e($t,a2r),M(t8,$t,null),e(Ko,n2r),e(Ko,vo),M(Ny,vo,null),e(vo,s2r),e(vo,_0e),e(_0e,l2r),e(vo,i2r),e(vo,an),e(an,d2r),e(an,u0e),e(u0e,c2r),e(an,f2r),e(an,b0e),e(b0e,m2r),e(an,g2r),e(an,v0e),e(v0e,h2r),e(an,p2r),e(vo,_2r),e(vo,tt),e(tt,a8),e(a8,F0e),e(F0e,u2r),e(a8,b2r),e(a8,UH),e(UH,v2r),e(a8,F2r),e(tt,T2r),e(tt,n8),e(n8,T0e),e(T0e,M2r),e(n8,E2r),e(n8,JH),e(JH,C2r),e(n8,w2r),e(tt,A2r),e(tt,s8),e(s8,M0e),e(M0e,L2r),e(s8,y2r),e(s8,YH),e(YH,x2r),e(s8,$2r),e(tt,k2r),e(tt,l8),e(l8,E0e),e(E0e,S2r),e(l8,R2r),e(l8,KH),e(KH,P2r),e(l8,B2r),e(tt,N2r),e(tt,i8),e(i8,C0e),e(C0e,I2r),e(i8,q2r),e(i8,ZH),e(ZH,j2r),e(i8,D2r),e(vo,G2r),e(vo,d8),e(d8,O2r),e(d8,w0e),e(w0e,V2r),e(d8,X2r),e(d8,A0e),e(A0e,z2r),e(vo,Q2r),M(c8,vo,null),b(f,WXe,u),b(f,rc,u),e(rc,f8),e(f8,L0e),M(Iy,L0e,null),e(rc,W2r),e(rc,y0e),e(y0e,H2r),b(f,HXe,u),b(f,Zo,u),M(qy,Zo,null),e(Zo,U2r),e(Zo,tc),e(tc,J2r),e(tc,eU),e(eU,Y2r),e(tc,K2r),e(tc,oU),e(oU,Z2r),e(tc,ebr),e(Zo,obr),e(Zo,jy),e(jy,rbr),e(jy,x0e),e(x0e,tbr),e(jy,abr),e(Zo,nbr),e(Zo,kt),M(Dy,kt,null),e(kt,sbr),e(kt,$0e),e($0e,lbr),e(kt,ibr),e(kt,ac),e(ac,dbr),e(ac,k0e),e(k0e,cbr),e(ac,fbr),e(ac,rU),e(rU,mbr),e(ac,gbr),e(kt,hbr),M(m8,kt,null),e(Zo,pbr),e(Zo,Fo),M(Gy,Fo,null),e(Fo,_br),e(Fo,S0e),e(S0e,ubr),e(Fo,bbr),e(Fo,nn),e(nn,vbr),e(nn,R0e),e(R0e,Fbr),e(nn,Tbr),e(nn,P0e),e(P0e,Mbr),e(nn,Ebr),e(nn,B0e),e(B0e,Cbr),e(nn,wbr),e(Fo,Abr),e(Fo,N0e),e(N0e,g8),e(g8,I0e),e(I0e,Lbr),e(g8,ybr),e(g8,tU),e(tU,xbr),e(g8,$br),e(Fo,kbr),e(Fo,h8),e(h8,Sbr),e(h8,q0e),e(q0e,Rbr),e(h8,Pbr),e(h8,j0e),e(j0e,Bbr),e(Fo,Nbr),M(p8,Fo,null),b(f,UXe,u),b(f,nc,u),e(nc,_8),e(_8,D0e),M(Oy,D0e,null),e(nc,Ibr),e(nc,G0e),e(G0e,qbr),b(f,JXe,u),b(f,er,u),M(Vy,er,null),e(er,jbr),e(er,sc),e(sc,Dbr),e(sc,aU),e(aU,Gbr),e(sc,Obr),e(sc,nU),e(nU,Vbr),e(sc,Xbr),e(er,zbr),e(er,Xy),e(Xy,Qbr),e(Xy,O0e),e(O0e,Wbr),e(Xy,Hbr),e(er,Ubr),e(er,St),M(zy,St,null),e(St,Jbr),e(St,V0e),e(V0e,Ybr),e(St,Kbr),e(St,lc),e(lc,Zbr),e(lc,X0e),e(X0e,evr),e(lc,ovr),e(lc,sU),e(sU,rvr),e(lc,tvr),e(St,avr),M(u8,St,null),e(er,nvr),e(er,xr),M(Qy,xr,null),e(xr,svr),e(xr,z0e),e(z0e,lvr),e(xr,ivr),e(xr,sn),e(sn,dvr),e(sn,Q0e),e(Q0e,cvr),e(sn,fvr),e(sn,W0e),e(W0e,mvr),e(sn,gvr),e(sn,H0e),e(H0e,hvr),e(sn,pvr),e(xr,_vr),e(xr,q),e(q,b8),e(b8,U0e),e(U0e,uvr),e(b8,bvr),e(b8,lU),e(lU,vvr),e(b8,Fvr),e(q,Tvr),e(q,v8),e(v8,J0e),e(J0e,Mvr),e(v8,Evr),e(v8,iU),e(iU,Cvr),e(v8,wvr),e(q,Avr),e(q,F8),e(F8,Y0e),e(Y0e,Lvr),e(F8,yvr),e(F8,dU),e(dU,xvr),e(F8,$vr),e(q,kvr),e(q,T8),e(T8,K0e),e(K0e,Svr),e(T8,Rvr),e(T8,cU),e(cU,Pvr),e(T8,Bvr),e(q,Nvr),e(q,M8),e(M8,Z0e),e(Z0e,Ivr),e(M8,qvr),e(M8,fU),e(fU,jvr),e(M8,Dvr),e(q,Gvr),e(q,E8),e(E8,eFe),e(eFe,Ovr),e(E8,Vvr),e(E8,mU),e(mU,Xvr),e(E8,zvr),e(q,Qvr),e(q,C8),e(C8,oFe),e(oFe,Wvr),e(C8,Hvr),e(C8,gU),e(gU,Uvr),e(C8,Jvr),e(q,Yvr),e(q,w8),e(w8,rFe),e(rFe,Kvr),e(w8,Zvr),e(w8,hU),e(hU,e5r),e(w8,o5r),e(q,r5r),e(q,A8),e(A8,tFe),e(tFe,t5r),e(A8,a5r),e(A8,pU),e(pU,n5r),e(A8,s5r),e(q,l5r),e(q,L8),e(L8,aFe),e(aFe,i5r),e(L8,d5r),e(L8,_U),e(_U,c5r),e(L8,f5r),e(q,m5r),e(q,y8),e(y8,nFe),e(nFe,g5r),e(y8,h5r),e(y8,uU),e(uU,p5r),e(y8,_5r),e(q,u5r),e(q,x8),e(x8,sFe),e(sFe,b5r),e(x8,v5r),e(x8,bU),e(bU,F5r),e(x8,T5r),e(q,M5r),e(q,$8),e($8,lFe),e(lFe,E5r),e($8,C5r),e($8,vU),e(vU,w5r),e($8,A5r),e(q,L5r),e(q,k8),e(k8,iFe),e(iFe,y5r),e(k8,x5r),e(k8,FU),e(FU,$5r),e(k8,k5r),e(q,S5r),e(q,S8),e(S8,dFe),e(dFe,R5r),e(S8,P5r),e(S8,TU),e(TU,B5r),e(S8,N5r),e(q,I5r),e(q,R8),e(R8,cFe),e(cFe,q5r),e(R8,j5r),e(R8,MU),e(MU,D5r),e(R8,G5r),e(q,O5r),e(q,P8),e(P8,fFe),e(fFe,V5r),e(P8,X5r),e(P8,EU),e(EU,z5r),e(P8,Q5r),e(q,W5r),e(q,Js),e(Js,mFe),e(mFe,H5r),e(Js,U5r),e(Js,CU),e(CU,J5r),e(Js,Y5r),e(Js,wU),e(wU,K5r),e(Js,Z5r),e(q,e0r),e(q,B8),e(B8,gFe),e(gFe,o0r),e(B8,r0r),e(B8,AU),e(AU,t0r),e(B8,a0r),e(q,n0r),e(q,N8),e(N8,hFe),e(hFe,s0r),e(N8,l0r),e(N8,LU),e(LU,i0r),e(N8,d0r),e(q,c0r),e(q,I8),e(I8,pFe),e(pFe,f0r),e(I8,m0r),e(I8,yU),e(yU,g0r),e(I8,h0r),e(q,p0r),e(q,q8),e(q8,_Fe),e(_Fe,_0r),e(q8,u0r),e(q8,xU),e(xU,b0r),e(q8,v0r),e(q,F0r),e(q,j8),e(j8,uFe),e(uFe,T0r),e(j8,M0r),e(j8,$U),e($U,E0r),e(j8,C0r),e(q,w0r),e(q,D8),e(D8,bFe),e(bFe,A0r),e(D8,L0r),e(D8,kU),e(kU,y0r),e(D8,x0r),e(q,$0r),e(q,G8),e(G8,vFe),e(vFe,k0r),e(G8,S0r),e(G8,SU),e(SU,R0r),e(G8,P0r),e(q,B0r),e(q,O8),e(O8,FFe),e(FFe,N0r),e(O8,I0r),e(O8,RU),e(RU,q0r),e(O8,j0r),e(q,D0r),e(q,V8),e(V8,TFe),e(TFe,G0r),e(V8,O0r),e(V8,PU),e(PU,V0r),e(V8,X0r),e(q,z0r),e(q,X8),e(X8,MFe),e(MFe,Q0r),e(X8,W0r),e(X8,BU),e(BU,H0r),e(X8,U0r),e(q,J0r),e(q,z8),e(z8,EFe),e(EFe,Y0r),e(z8,K0r),e(z8,NU),e(NU,Z0r),e(z8,eFr),e(q,oFr),e(q,Q8),e(Q8,CFe),e(CFe,rFr),e(Q8,tFr),e(Q8,IU),e(IU,aFr),e(Q8,nFr),e(q,sFr),e(q,W8),e(W8,wFe),e(wFe,lFr),e(W8,iFr),e(W8,qU),e(qU,dFr),e(W8,cFr),e(q,fFr),e(q,H8),e(H8,AFe),e(AFe,mFr),e(H8,gFr),e(H8,jU),e(jU,hFr),e(H8,pFr),e(q,_Fr),e(q,U8),e(U8,LFe),e(LFe,uFr),e(U8,bFr),e(U8,DU),e(DU,vFr),e(U8,FFr),e(q,TFr),e(q,J8),e(J8,yFe),e(yFe,MFr),e(J8,EFr),e(J8,GU),e(GU,CFr),e(J8,wFr),e(q,AFr),e(q,Y8),e(Y8,xFe),e(xFe,LFr),e(Y8,yFr),e(Y8,OU),e(OU,xFr),e(Y8,$Fr),e(q,kFr),e(q,K8),e(K8,$Fe),e($Fe,SFr),e(K8,RFr),e(K8,VU),e(VU,PFr),e(K8,BFr),e(q,NFr),e(q,Z8),e(Z8,kFe),e(kFe,IFr),e(Z8,qFr),e(Z8,XU),e(XU,jFr),e(Z8,DFr),e(q,GFr),e(q,e9),e(e9,SFe),e(SFe,OFr),e(e9,VFr),e(e9,zU),e(zU,XFr),e(e9,zFr),e(q,QFr),e(q,o9),e(o9,RFe),e(RFe,WFr),e(o9,HFr),e(o9,QU),e(QU,UFr),e(o9,JFr),e(q,YFr),e(q,r9),e(r9,PFe),e(PFe,KFr),e(r9,ZFr),e(r9,WU),e(WU,eTr),e(r9,oTr),e(q,rTr),e(q,t9),e(t9,BFe),e(BFe,tTr),e(t9,aTr),e(t9,HU),e(HU,nTr),e(t9,sTr),e(q,lTr),e(q,a9),e(a9,NFe),e(NFe,iTr),e(a9,dTr),e(a9,UU),e(UU,cTr),e(a9,fTr),e(q,mTr),e(q,n9),e(n9,IFe),e(IFe,gTr),e(n9,hTr),e(n9,JU),e(JU,pTr),e(n9,_Tr),e(q,uTr),e(q,s9),e(s9,qFe),e(qFe,bTr),e(s9,vTr),e(s9,YU),e(YU,FTr),e(s9,TTr),e(q,MTr),e(q,l9),e(l9,jFe),e(jFe,ETr),e(l9,CTr),e(l9,KU),e(KU,wTr),e(l9,ATr),e(q,LTr),e(q,i9),e(i9,DFe),e(DFe,yTr),e(i9,xTr),e(i9,ZU),e(ZU,$Tr),e(i9,kTr),e(q,STr),e(q,d9),e(d9,GFe),e(GFe,RTr),e(d9,PTr),e(d9,eJ),e(eJ,BTr),e(d9,NTr),e(q,ITr),e(q,c9),e(c9,OFe),e(OFe,qTr),e(c9,jTr),e(c9,oJ),e(oJ,DTr),e(c9,GTr),e(q,OTr),e(q,f9),e(f9,VFe),e(VFe,VTr),e(f9,XTr),e(f9,rJ),e(rJ,zTr),e(f9,QTr),e(xr,WTr),M(m9,xr,null),b(f,YXe,u),b(f,ic,u),e(ic,g9),e(g9,XFe),M(Wy,XFe,null),e(ic,HTr),e(ic,zFe),e(zFe,UTr),b(f,KXe,u),b(f,or,u),M(Hy,or,null),e(or,JTr),e(or,dc),e(dc,YTr),e(dc,tJ),e(tJ,KTr),e(dc,ZTr),e(dc,aJ),e(aJ,e8r),e(dc,o8r),e(or,r8r),e(or,Uy),e(Uy,t8r),e(Uy,QFe),e(QFe,a8r),e(Uy,n8r),e(or,s8r),e(or,Rt),M(Jy,Rt,null),e(Rt,l8r),e(Rt,WFe),e(WFe,i8r),e(Rt,d8r),e(Rt,cc),e(cc,c8r),e(cc,HFe),e(HFe,f8r),e(cc,m8r),e(cc,nJ),e(nJ,g8r),e(cc,h8r),e(Rt,p8r),M(h9,Rt,null),e(or,_8r),e(or,$r),M(Yy,$r,null),e($r,u8r),e($r,UFe),e(UFe,b8r),e($r,v8r),e($r,ln),e(ln,F8r),e(ln,JFe),e(JFe,T8r),e(ln,M8r),e(ln,YFe),e(YFe,E8r),e(ln,C8r),e(ln,KFe),e(KFe,w8r),e(ln,A8r),e($r,L8r),e($r,se),e(se,p9),e(p9,ZFe),e(ZFe,y8r),e(p9,x8r),e(p9,sJ),e(sJ,$8r),e(p9,k8r),e(se,S8r),e(se,_9),e(_9,eTe),e(eTe,R8r),e(_9,P8r),e(_9,lJ),e(lJ,B8r),e(_9,N8r),e(se,I8r),e(se,u9),e(u9,oTe),e(oTe,q8r),e(u9,j8r),e(u9,iJ),e(iJ,D8r),e(u9,G8r),e(se,O8r),e(se,b9),e(b9,rTe),e(rTe,V8r),e(b9,X8r),e(b9,dJ),e(dJ,z8r),e(b9,Q8r),e(se,W8r),e(se,v9),e(v9,tTe),e(tTe,H8r),e(v9,U8r),e(v9,cJ),e(cJ,J8r),e(v9,Y8r),e(se,K8r),e(se,F9),e(F9,aTe),e(aTe,Z8r),e(F9,e9r),e(F9,fJ),e(fJ,o9r),e(F9,r9r),e(se,t9r),e(se,T9),e(T9,nTe),e(nTe,a9r),e(T9,n9r),e(T9,mJ),e(mJ,s9r),e(T9,l9r),e(se,i9r),e(se,M9),e(M9,sTe),e(sTe,d9r),e(M9,c9r),e(M9,gJ),e(gJ,f9r),e(M9,m9r),e(se,g9r),e(se,E9),e(E9,lTe),e(lTe,h9r),e(E9,p9r),e(E9,hJ),e(hJ,_9r),e(E9,u9r),e(se,b9r),e(se,C9),e(C9,iTe),e(iTe,v9r),e(C9,F9r),e(C9,pJ),e(pJ,T9r),e(C9,M9r),e(se,E9r),e(se,w9),e(w9,dTe),e(dTe,C9r),e(w9,w9r),e(w9,_J),e(_J,A9r),e(w9,L9r),e(se,y9r),e(se,A9),e(A9,cTe),e(cTe,x9r),e(A9,$9r),e(A9,uJ),e(uJ,k9r),e(A9,S9r),e(se,R9r),e(se,L9),e(L9,fTe),e(fTe,P9r),e(L9,B9r),e(L9,bJ),e(bJ,N9r),e(L9,I9r),e(se,q9r),e(se,y9),e(y9,mTe),e(mTe,j9r),e(y9,D9r),e(y9,vJ),e(vJ,G9r),e(y9,O9r),e(se,V9r),e(se,x9),e(x9,gTe),e(gTe,X9r),e(x9,z9r),e(x9,FJ),e(FJ,Q9r),e(x9,W9r),e(se,H9r),e(se,$9),e($9,hTe),e(hTe,U9r),e($9,J9r),e($9,TJ),e(TJ,Y9r),e($9,K9r),e(se,Z9r),e(se,k9),e(k9,pTe),e(pTe,eMr),e(k9,oMr),e(k9,MJ),e(MJ,rMr),e(k9,tMr),e(se,aMr),e(se,S9),e(S9,_Te),e(_Te,nMr),e(S9,sMr),e(S9,EJ),e(EJ,lMr),e(S9,iMr),e(se,dMr),e(se,R9),e(R9,uTe),e(uTe,cMr),e(R9,fMr),e(R9,CJ),e(CJ,mMr),e(R9,gMr),e(se,hMr),e(se,P9),e(P9,bTe),e(bTe,pMr),e(P9,_Mr),e(P9,wJ),e(wJ,uMr),e(P9,bMr),e(se,vMr),e(se,B9),e(B9,vTe),e(vTe,FMr),e(B9,TMr),e(B9,AJ),e(AJ,MMr),e(B9,EMr),e(se,CMr),e(se,N9),e(N9,FTe),e(FTe,wMr),e(N9,AMr),e(N9,LJ),e(LJ,LMr),e(N9,yMr),e(se,xMr),e(se,I9),e(I9,TTe),e(TTe,$Mr),e(I9,kMr),e(I9,yJ),e(yJ,SMr),e(I9,RMr),e($r,PMr),M(q9,$r,null),b(f,ZXe,u),b(f,fc,u),e(fc,j9),e(j9,MTe),M(Ky,MTe,null),e(fc,BMr),e(fc,ETe),e(ETe,NMr),b(f,eze,u),b(f,rr,u),M(Zy,rr,null),e(rr,IMr),e(rr,mc),e(mc,qMr),e(mc,xJ),e(xJ,jMr),e(mc,DMr),e(mc,$J),e($J,GMr),e(mc,OMr),e(rr,VMr),e(rr,ex),e(ex,XMr),e(ex,CTe),e(CTe,zMr),e(ex,QMr),e(rr,WMr),e(rr,Pt),M(ox,Pt,null),e(Pt,HMr),e(Pt,wTe),e(wTe,UMr),e(Pt,JMr),e(Pt,gc),e(gc,YMr),e(gc,ATe),e(ATe,KMr),e(gc,ZMr),e(gc,kJ),e(kJ,e4r),e(gc,o4r),e(Pt,r4r),M(D9,Pt,null),e(rr,t4r),e(rr,kr),M(rx,kr,null),e(kr,a4r),e(kr,LTe),e(LTe,n4r),e(kr,s4r),e(kr,dn),e(dn,l4r),e(dn,yTe),e(yTe,i4r),e(dn,d4r),e(dn,xTe),e(xTe,c4r),e(dn,f4r),e(dn,$Te),e($Te,m4r),e(dn,g4r),e(kr,h4r),e(kr,Me),e(Me,G9),e(G9,kTe),e(kTe,p4r),e(G9,_4r),e(G9,SJ),e(SJ,u4r),e(G9,b4r),e(Me,v4r),e(Me,O9),e(O9,STe),e(STe,F4r),e(O9,T4r),e(O9,RJ),e(RJ,M4r),e(O9,E4r),e(Me,C4r),e(Me,V9),e(V9,RTe),e(RTe,w4r),e(V9,A4r),e(V9,PJ),e(PJ,L4r),e(V9,y4r),e(Me,x4r),e(Me,X9),e(X9,PTe),e(PTe,$4r),e(X9,k4r),e(X9,BJ),e(BJ,S4r),e(X9,R4r),e(Me,P4r),e(Me,z9),e(z9,BTe),e(BTe,B4r),e(z9,N4r),e(z9,NJ),e(NJ,I4r),e(z9,q4r),e(Me,j4r),e(Me,Q9),e(Q9,NTe),e(NTe,D4r),e(Q9,G4r),e(Q9,IJ),e(IJ,O4r),e(Q9,V4r),e(Me,X4r),e(Me,W9),e(W9,ITe),e(ITe,z4r),e(W9,Q4r),e(W9,qJ),e(qJ,W4r),e(W9,H4r),e(Me,U4r),e(Me,H9),e(H9,qTe),e(qTe,J4r),e(H9,Y4r),e(H9,jJ),e(jJ,K4r),e(H9,Z4r),e(Me,eEr),e(Me,U9),e(U9,jTe),e(jTe,oEr),e(U9,rEr),e(U9,DJ),e(DJ,tEr),e(U9,aEr),e(Me,nEr),e(Me,J9),e(J9,DTe),e(DTe,sEr),e(J9,lEr),e(J9,GJ),e(GJ,iEr),e(J9,dEr),e(Me,cEr),e(Me,Y9),e(Y9,GTe),e(GTe,fEr),e(Y9,mEr),e(Y9,OJ),e(OJ,gEr),e(Y9,hEr),e(Me,pEr),e(Me,K9),e(K9,OTe),e(OTe,_Er),e(K9,uEr),e(K9,VJ),e(VJ,bEr),e(K9,vEr),e(Me,FEr),e(Me,Z9),e(Z9,VTe),e(VTe,TEr),e(Z9,MEr),e(Z9,XJ),e(XJ,EEr),e(Z9,CEr),e(kr,wEr),M(eM,kr,null),b(f,oze,u),b(f,hc,u),e(hc,oM),e(oM,XTe),M(tx,XTe,null),e(hc,AEr),e(hc,zTe),e(zTe,LEr),b(f,rze,u),b(f,tr,u),M(ax,tr,null),e(tr,yEr),e(tr,pc),e(pc,xEr),e(pc,zJ),e(zJ,$Er),e(pc,kEr),e(pc,QJ),e(QJ,SEr),e(pc,REr),e(tr,PEr),e(tr,nx),e(nx,BEr),e(nx,QTe),e(QTe,NEr),e(nx,IEr),e(tr,qEr),e(tr,Bt),M(sx,Bt,null),e(Bt,jEr),e(Bt,WTe),e(WTe,DEr),e(Bt,GEr),e(Bt,_c),e(_c,OEr),e(_c,HTe),e(HTe,VEr),e(_c,XEr),e(_c,WJ),e(WJ,zEr),e(_c,QEr),e(Bt,WEr),M(rM,Bt,null),e(tr,HEr),e(tr,Sr),M(lx,Sr,null),e(Sr,UEr),e(Sr,UTe),e(UTe,JEr),e(Sr,YEr),e(Sr,cn),e(cn,KEr),e(cn,JTe),e(JTe,ZEr),e(cn,eCr),e(cn,YTe),e(YTe,oCr),e(cn,rCr),e(cn,KTe),e(KTe,tCr),e(cn,aCr),e(Sr,nCr),e(Sr,ar),e(ar,tM),e(tM,ZTe),e(ZTe,sCr),e(tM,lCr),e(tM,HJ),e(HJ,iCr),e(tM,dCr),e(ar,cCr),e(ar,aM),e(aM,e8e),e(e8e,fCr),e(aM,mCr),e(aM,UJ),e(UJ,gCr),e(aM,hCr),e(ar,pCr),e(ar,nM),e(nM,o8e),e(o8e,_Cr),e(nM,uCr),e(nM,JJ),e(JJ,bCr),e(nM,vCr),e(ar,FCr),e(ar,sM),e(sM,r8e),e(r8e,TCr),e(sM,MCr),e(sM,YJ),e(YJ,ECr),e(sM,CCr),e(ar,wCr),e(ar,lM),e(lM,t8e),e(t8e,ACr),e(lM,LCr),e(lM,KJ),e(KJ,yCr),e(lM,xCr),e(ar,$Cr),e(ar,iM),e(iM,a8e),e(a8e,kCr),e(iM,SCr),e(iM,ZJ),e(ZJ,RCr),e(iM,PCr),e(Sr,BCr),M(dM,Sr,null),b(f,tze,u),b(f,uc,u),e(uc,cM),e(cM,n8e),M(ix,n8e,null),e(uc,NCr),e(uc,s8e),e(s8e,ICr),b(f,aze,u),b(f,nr,u),M(dx,nr,null),e(nr,qCr),e(nr,bc),e(bc,jCr),e(bc,eY),e(eY,DCr),e(bc,GCr),e(bc,oY),e(oY,OCr),e(bc,VCr),e(nr,XCr),e(nr,cx),e(cx,zCr),e(cx,l8e),e(l8e,QCr),e(cx,WCr),e(nr,HCr),e(nr,Nt),M(fx,Nt,null),e(Nt,UCr),e(Nt,i8e),e(i8e,JCr),e(Nt,YCr),e(Nt,vc),e(vc,KCr),e(vc,d8e),e(d8e,ZCr),e(vc,e3r),e(vc,rY),e(rY,o3r),e(vc,r3r),e(Nt,t3r),M(fM,Nt,null),e(nr,a3r),e(nr,Rr),M(mx,Rr,null),e(Rr,n3r),e(Rr,c8e),e(c8e,s3r),e(Rr,l3r),e(Rr,fn),e(fn,i3r),e(fn,f8e),e(f8e,d3r),e(fn,c3r),e(fn,m8e),e(m8e,f3r),e(fn,m3r),e(fn,g8e),e(g8e,g3r),e(fn,h3r),e(Rr,p3r),e(Rr,ie),e(ie,mM),e(mM,h8e),e(h8e,_3r),e(mM,u3r),e(mM,tY),e(tY,b3r),e(mM,v3r),e(ie,F3r),e(ie,gM),e(gM,p8e),e(p8e,T3r),e(gM,M3r),e(gM,aY),e(aY,E3r),e(gM,C3r),e(ie,w3r),e(ie,hM),e(hM,_8e),e(_8e,A3r),e(hM,L3r),e(hM,nY),e(nY,y3r),e(hM,x3r),e(ie,$3r),e(ie,pM),e(pM,u8e),e(u8e,k3r),e(pM,S3r),e(pM,sY),e(sY,R3r),e(pM,P3r),e(ie,B3r),e(ie,_M),e(_M,b8e),e(b8e,N3r),e(_M,I3r),e(_M,lY),e(lY,q3r),e(_M,j3r),e(ie,D3r),e(ie,uM),e(uM,v8e),e(v8e,G3r),e(uM,O3r),e(uM,iY),e(iY,V3r),e(uM,X3r),e(ie,z3r),e(ie,bM),e(bM,F8e),e(F8e,Q3r),e(bM,W3r),e(bM,dY),e(dY,H3r),e(bM,U3r),e(ie,J3r),e(ie,vM),e(vM,T8e),e(T8e,Y3r),e(vM,K3r),e(vM,cY),e(cY,Z3r),e(vM,ewr),e(ie,owr),e(ie,FM),e(FM,M8e),e(M8e,rwr),e(FM,twr),e(FM,fY),e(fY,awr),e(FM,nwr),e(ie,swr),e(ie,TM),e(TM,E8e),e(E8e,lwr),e(TM,iwr),e(TM,mY),e(mY,dwr),e(TM,cwr),e(ie,fwr),e(ie,MM),e(MM,C8e),e(C8e,mwr),e(MM,gwr),e(MM,gY),e(gY,hwr),e(MM,pwr),e(ie,_wr),e(ie,EM),e(EM,w8e),e(w8e,uwr),e(EM,bwr),e(EM,hY),e(hY,vwr),e(EM,Fwr),e(ie,Twr),e(ie,CM),e(CM,A8e),e(A8e,Mwr),e(CM,Ewr),e(CM,pY),e(pY,Cwr),e(CM,wwr),e(ie,Awr),e(ie,wM),e(wM,L8e),e(L8e,Lwr),e(wM,ywr),e(wM,_Y),e(_Y,xwr),e(wM,$wr),e(ie,kwr),e(ie,AM),e(AM,y8e),e(y8e,Swr),e(AM,Rwr),e(AM,uY),e(uY,Pwr),e(AM,Bwr),e(ie,Nwr),e(ie,LM),e(LM,x8e),e(x8e,Iwr),e(LM,qwr),e(LM,bY),e(bY,jwr),e(LM,Dwr),e(ie,Gwr),e(ie,yM),e(yM,$8e),e($8e,Owr),e(yM,Vwr),e(yM,vY),e(vY,Xwr),e(yM,zwr),e(ie,Qwr),e(ie,xM),e(xM,k8e),e(k8e,Wwr),e(xM,Hwr),e(xM,FY),e(FY,Uwr),e(xM,Jwr),e(ie,Ywr),e(ie,$M),e($M,S8e),e(S8e,Kwr),e($M,Zwr),e($M,TY),e(TY,eAr),e($M,oAr),e(ie,rAr),e(ie,kM),e(kM,R8e),e(R8e,tAr),e(kM,aAr),e(kM,MY),e(MY,nAr),e(kM,sAr),e(Rr,lAr),M(SM,Rr,null),b(f,nze,u),b(f,Fc,u),e(Fc,RM),e(RM,P8e),M(gx,P8e,null),e(Fc,iAr),e(Fc,B8e),e(B8e,dAr),b(f,sze,u),b(f,sr,u),M(hx,sr,null),e(sr,cAr),e(sr,Tc),e(Tc,fAr),e(Tc,EY),e(EY,mAr),e(Tc,gAr),e(Tc,CY),e(CY,hAr),e(Tc,pAr),e(sr,_Ar),e(sr,px),e(px,uAr),e(px,N8e),e(N8e,bAr),e(px,vAr),e(sr,FAr),e(sr,It),M(_x,It,null),e(It,TAr),e(It,I8e),e(I8e,MAr),e(It,EAr),e(It,Mc),e(Mc,CAr),e(Mc,q8e),e(q8e,wAr),e(Mc,AAr),e(Mc,wY),e(wY,LAr),e(Mc,yAr),e(It,xAr),M(PM,It,null),e(sr,$Ar),e(sr,Pr),M(ux,Pr,null),e(Pr,kAr),e(Pr,j8e),e(j8e,SAr),e(Pr,RAr),e(Pr,mn),e(mn,PAr),e(mn,D8e),e(D8e,BAr),e(mn,NAr),e(mn,G8e),e(G8e,IAr),e(mn,qAr),e(mn,O8e),e(O8e,jAr),e(mn,DAr),e(Pr,GAr),e(Pr,ye),e(ye,BM),e(BM,V8e),e(V8e,OAr),e(BM,VAr),e(BM,AY),e(AY,XAr),e(BM,zAr),e(ye,QAr),e(ye,NM),e(NM,X8e),e(X8e,WAr),e(NM,HAr),e(NM,LY),e(LY,UAr),e(NM,JAr),e(ye,YAr),e(ye,IM),e(IM,z8e),e(z8e,KAr),e(IM,ZAr),e(IM,yY),e(yY,e6r),e(IM,o6r),e(ye,r6r),e(ye,qM),e(qM,Q8e),e(Q8e,t6r),e(qM,a6r),e(qM,xY),e(xY,n6r),e(qM,s6r),e(ye,l6r),e(ye,jM),e(jM,W8e),e(W8e,i6r),e(jM,d6r),e(jM,$Y),e($Y,c6r),e(jM,f6r),e(ye,m6r),e(ye,DM),e(DM,H8e),e(H8e,g6r),e(DM,h6r),e(DM,kY),e(kY,p6r),e(DM,_6r),e(ye,u6r),e(ye,GM),e(GM,U8e),e(U8e,b6r),e(GM,v6r),e(GM,SY),e(SY,F6r),e(GM,T6r),e(ye,M6r),e(ye,OM),e(OM,J8e),e(J8e,E6r),e(OM,C6r),e(OM,RY),e(RY,w6r),e(OM,A6r),e(ye,L6r),e(ye,VM),e(VM,Y8e),e(Y8e,y6r),e(VM,x6r),e(VM,PY),e(PY,$6r),e(VM,k6r),e(ye,S6r),e(ye,XM),e(XM,K8e),e(K8e,R6r),e(XM,P6r),e(XM,BY),e(BY,B6r),e(XM,N6r),e(Pr,I6r),M(zM,Pr,null),b(f,lze,u),b(f,Ec,u),e(Ec,QM),e(QM,Z8e),M(bx,Z8e,null),e(Ec,q6r),e(Ec,e9e),e(e9e,j6r),b(f,ize,u),b(f,lr,u),M(vx,lr,null),e(lr,D6r),e(lr,Cc),e(Cc,G6r),e(Cc,NY),e(NY,O6r),e(Cc,V6r),e(Cc,IY),e(IY,X6r),e(Cc,z6r),e(lr,Q6r),e(lr,Fx),e(Fx,W6r),e(Fx,o9e),e(o9e,H6r),e(Fx,U6r),e(lr,J6r),e(lr,qt),M(Tx,qt,null),e(qt,Y6r),e(qt,r9e),e(r9e,K6r),e(qt,Z6r),e(qt,wc),e(wc,e7r),e(wc,t9e),e(t9e,o7r),e(wc,r7r),e(wc,qY),e(qY,t7r),e(wc,a7r),e(qt,n7r),M(WM,qt,null),e(lr,s7r),e(lr,Br),M(Mx,Br,null),e(Br,l7r),e(Br,a9e),e(a9e,i7r),e(Br,d7r),e(Br,gn),e(gn,c7r),e(gn,n9e),e(n9e,f7r),e(gn,m7r),e(gn,s9e),e(s9e,g7r),e(gn,h7r),e(gn,l9e),e(l9e,p7r),e(gn,_7r),e(Br,u7r),e(Br,te),e(te,HM),e(HM,i9e),e(i9e,b7r),e(HM,v7r),e(HM,jY),e(jY,F7r),e(HM,T7r),e(te,M7r),e(te,UM),e(UM,d9e),e(d9e,E7r),e(UM,C7r),e(UM,DY),e(DY,w7r),e(UM,A7r),e(te,L7r),e(te,JM),e(JM,c9e),e(c9e,y7r),e(JM,x7r),e(JM,GY),e(GY,$7r),e(JM,k7r),e(te,S7r),e(te,YM),e(YM,f9e),e(f9e,R7r),e(YM,P7r),e(YM,OY),e(OY,B7r),e(YM,N7r),e(te,I7r),e(te,KM),e(KM,m9e),e(m9e,q7r),e(KM,j7r),e(KM,VY),e(VY,D7r),e(KM,G7r),e(te,O7r),e(te,ZM),e(ZM,g9e),e(g9e,V7r),e(ZM,X7r),e(ZM,XY),e(XY,z7r),e(ZM,Q7r),e(te,W7r),e(te,e4),e(e4,h9e),e(h9e,H7r),e(e4,U7r),e(e4,zY),e(zY,J7r),e(e4,Y7r),e(te,K7r),e(te,o4),e(o4,p9e),e(p9e,Z7r),e(o4,eLr),e(o4,QY),e(QY,oLr),e(o4,rLr),e(te,tLr),e(te,r4),e(r4,_9e),e(_9e,aLr),e(r4,nLr),e(r4,WY),e(WY,sLr),e(r4,lLr),e(te,iLr),e(te,t4),e(t4,u9e),e(u9e,dLr),e(t4,cLr),e(t4,HY),e(HY,fLr),e(t4,mLr),e(te,gLr),e(te,a4),e(a4,b9e),e(b9e,hLr),e(a4,pLr),e(a4,UY),e(UY,_Lr),e(a4,uLr),e(te,bLr),e(te,n4),e(n4,v9e),e(v9e,vLr),e(n4,FLr),e(n4,JY),e(JY,TLr),e(n4,MLr),e(te,ELr),e(te,s4),e(s4,F9e),e(F9e,CLr),e(s4,wLr),e(s4,YY),e(YY,ALr),e(s4,LLr),e(te,yLr),e(te,l4),e(l4,T9e),e(T9e,xLr),e(l4,$Lr),e(l4,KY),e(KY,kLr),e(l4,SLr),e(te,RLr),e(te,i4),e(i4,M9e),e(M9e,PLr),e(i4,BLr),e(i4,ZY),e(ZY,NLr),e(i4,ILr),e(te,qLr),e(te,d4),e(d4,E9e),e(E9e,jLr),e(d4,DLr),e(d4,eK),e(eK,GLr),e(d4,OLr),e(te,VLr),e(te,c4),e(c4,C9e),e(C9e,XLr),e(c4,zLr),e(c4,oK),e(oK,QLr),e(c4,WLr),e(te,HLr),e(te,f4),e(f4,w9e),e(w9e,ULr),e(f4,JLr),e(f4,rK),e(rK,YLr),e(f4,KLr),e(te,ZLr),e(te,m4),e(m4,A9e),e(A9e,eyr),e(m4,oyr),e(m4,tK),e(tK,ryr),e(m4,tyr),e(te,ayr),e(te,g4),e(g4,L9e),e(L9e,nyr),e(g4,syr),e(g4,aK),e(aK,lyr),e(g4,iyr),e(te,dyr),e(te,h4),e(h4,y9e),e(y9e,cyr),e(h4,fyr),e(h4,nK),e(nK,myr),e(h4,gyr),e(te,hyr),e(te,p4),e(p4,x9e),e(x9e,pyr),e(p4,_yr),e(p4,sK),e(sK,uyr),e(p4,byr),e(te,vyr),e(te,_4),e(_4,$9e),e($9e,Fyr),e(_4,Tyr),e(_4,lK),e(lK,Myr),e(_4,Eyr),e(te,Cyr),e(te,u4),e(u4,k9e),e(k9e,wyr),e(u4,Ayr),e(u4,iK),e(iK,Lyr),e(u4,yyr),e(te,xyr),e(te,b4),e(b4,S9e),e(S9e,$yr),e(b4,kyr),e(b4,dK),e(dK,Syr),e(b4,Ryr),e(te,Pyr),e(te,v4),e(v4,R9e),e(R9e,Byr),e(v4,Nyr),e(v4,cK),e(cK,Iyr),e(v4,qyr),e(Br,jyr),M(F4,Br,null),b(f,dze,u),b(f,Ac,u),e(Ac,T4),e(T4,P9e),M(Ex,P9e,null),e(Ac,Dyr),e(Ac,B9e),e(B9e,Gyr),b(f,cze,u),b(f,ir,u),M(Cx,ir,null),e(ir,Oyr),e(ir,Lc),e(Lc,Vyr),e(Lc,fK),e(fK,Xyr),e(Lc,zyr),e(Lc,mK),e(mK,Qyr),e(Lc,Wyr),e(ir,Hyr),e(ir,wx),e(wx,Uyr),e(wx,N9e),e(N9e,Jyr),e(wx,Yyr),e(ir,Kyr),e(ir,jt),M(Ax,jt,null),e(jt,Zyr),e(jt,I9e),e(I9e,exr),e(jt,oxr),e(jt,yc),e(yc,rxr),e(yc,q9e),e(q9e,txr),e(yc,axr),e(yc,gK),e(gK,nxr),e(yc,sxr),e(jt,lxr),M(M4,jt,null),e(ir,ixr),e(ir,Nr),M(Lx,Nr,null),e(Nr,dxr),e(Nr,j9e),e(j9e,cxr),e(Nr,fxr),e(Nr,hn),e(hn,mxr),e(hn,D9e),e(D9e,gxr),e(hn,hxr),e(hn,G9e),e(G9e,pxr),e(hn,_xr),e(hn,O9e),e(O9e,uxr),e(hn,bxr),e(Nr,vxr),e(Nr,_e),e(_e,E4),e(E4,V9e),e(V9e,Fxr),e(E4,Txr),e(E4,hK),e(hK,Mxr),e(E4,Exr),e(_e,Cxr),e(_e,C4),e(C4,X9e),e(X9e,wxr),e(C4,Axr),e(C4,pK),e(pK,Lxr),e(C4,yxr),e(_e,xxr),e(_e,w4),e(w4,z9e),e(z9e,$xr),e(w4,kxr),e(w4,_K),e(_K,Sxr),e(w4,Rxr),e(_e,Pxr),e(_e,A4),e(A4,Q9e),e(Q9e,Bxr),e(A4,Nxr),e(A4,uK),e(uK,Ixr),e(A4,qxr),e(_e,jxr),e(_e,L4),e(L4,W9e),e(W9e,Dxr),e(L4,Gxr),e(L4,bK),e(bK,Oxr),e(L4,Vxr),e(_e,Xxr),e(_e,y4),e(y4,H9e),e(H9e,zxr),e(y4,Qxr),e(y4,vK),e(vK,Wxr),e(y4,Hxr),e(_e,Uxr),e(_e,x4),e(x4,U9e),e(U9e,Jxr),e(x4,Yxr),e(x4,FK),e(FK,Kxr),e(x4,Zxr),e(_e,e$r),e(_e,$4),e($4,J9e),e(J9e,o$r),e($4,r$r),e($4,TK),e(TK,t$r),e($4,a$r),e(_e,n$r),e(_e,k4),e(k4,Y9e),e(Y9e,s$r),e(k4,l$r),e(k4,MK),e(MK,i$r),e(k4,d$r),e(_e,c$r),e(_e,S4),e(S4,K9e),e(K9e,f$r),e(S4,m$r),e(S4,EK),e(EK,g$r),e(S4,h$r),e(_e,p$r),e(_e,R4),e(R4,Z9e),e(Z9e,_$r),e(R4,u$r),e(R4,CK),e(CK,b$r),e(R4,v$r),e(_e,F$r),e(_e,P4),e(P4,eMe),e(eMe,T$r),e(P4,M$r),e(P4,wK),e(wK,E$r),e(P4,C$r),e(_e,w$r),e(_e,B4),e(B4,oMe),e(oMe,A$r),e(B4,L$r),e(B4,AK),e(AK,y$r),e(B4,x$r),e(_e,$$r),e(_e,N4),e(N4,rMe),e(rMe,k$r),e(N4,S$r),e(N4,LK),e(LK,R$r),e(N4,P$r),e(_e,B$r),e(_e,I4),e(I4,tMe),e(tMe,N$r),e(I4,I$r),e(I4,yK),e(yK,q$r),e(I4,j$r),e(_e,D$r),e(_e,q4),e(q4,aMe),e(aMe,G$r),e(q4,O$r),e(q4,xK),e(xK,V$r),e(q4,X$r),e(_e,z$r),e(_e,j4),e(j4,nMe),e(nMe,Q$r),e(j4,W$r),e(j4,$K),e($K,H$r),e(j4,U$r),e(Nr,J$r),M(D4,Nr,null),b(f,fze,u),b(f,xc,u),e(xc,G4),e(G4,sMe),M(yx,sMe,null),e(xc,Y$r),e(xc,lMe),e(lMe,K$r),b(f,mze,u),b(f,dr,u),M(xx,dr,null),e(dr,Z$r),e(dr,$c),e($c,ekr),e($c,kK),e(kK,okr),e($c,rkr),e($c,SK),e(SK,tkr),e($c,akr),e(dr,nkr),e(dr,$x),e($x,skr),e($x,iMe),e(iMe,lkr),e($x,ikr),e(dr,dkr),e(dr,Dt),M(kx,Dt,null),e(Dt,ckr),e(Dt,dMe),e(dMe,fkr),e(Dt,mkr),e(Dt,kc),e(kc,gkr),e(kc,cMe),e(cMe,hkr),e(kc,pkr),e(kc,RK),e(RK,_kr),e(kc,ukr),e(Dt,bkr),M(O4,Dt,null),e(dr,vkr),e(dr,Ir),M(Sx,Ir,null),e(Ir,Fkr),e(Ir,fMe),e(fMe,Tkr),e(Ir,Mkr),e(Ir,pn),e(pn,Ekr),e(pn,mMe),e(mMe,Ckr),e(pn,wkr),e(pn,gMe),e(gMe,Akr),e(pn,Lkr),e(pn,hMe),e(hMe,ykr),e(pn,xkr),e(Ir,$kr),e(Ir,Rx),e(Rx,V4),e(V4,pMe),e(pMe,kkr),e(V4,Skr),e(V4,PK),e(PK,Rkr),e(V4,Pkr),e(Rx,Bkr),e(Rx,X4),e(X4,_Me),e(_Me,Nkr),e(X4,Ikr),e(X4,BK),e(BK,qkr),e(X4,jkr),e(Ir,Dkr),M(z4,Ir,null),b(f,gze,u),b(f,Sc,u),e(Sc,Q4),e(Q4,uMe),M(Px,uMe,null),e(Sc,Gkr),e(Sc,bMe),e(bMe,Okr),b(f,hze,u),b(f,cr,u),M(Bx,cr,null),e(cr,Vkr),e(cr,Rc),e(Rc,Xkr),e(Rc,NK),e(NK,zkr),e(Rc,Qkr),e(Rc,IK),e(IK,Wkr),e(Rc,Hkr),e(cr,Ukr),e(cr,Nx),e(Nx,Jkr),e(Nx,vMe),e(vMe,Ykr),e(Nx,Kkr),e(cr,Zkr),e(cr,Gt),M(Ix,Gt,null),e(Gt,eSr),e(Gt,FMe),e(FMe,oSr),e(Gt,rSr),e(Gt,Pc),e(Pc,tSr),e(Pc,TMe),e(TMe,aSr),e(Pc,nSr),e(Pc,qK),e(qK,sSr),e(Pc,lSr),e(Gt,iSr),M(W4,Gt,null),e(cr,dSr),e(cr,qr),M(qx,qr,null),e(qr,cSr),e(qr,MMe),e(MMe,fSr),e(qr,mSr),e(qr,_n),e(_n,gSr),e(_n,EMe),e(EMe,hSr),e(_n,pSr),e(_n,CMe),e(CMe,_Sr),e(_n,uSr),e(_n,wMe),e(wMe,bSr),e(_n,vSr),e(qr,FSr),e(qr,AMe),e(AMe,H4),e(H4,LMe),e(LMe,TSr),e(H4,MSr),e(H4,jK),e(jK,ESr),e(H4,CSr),e(qr,wSr),M(U4,qr,null),b(f,pze,u),b(f,Bc,u),e(Bc,J4),e(J4,yMe),M(jx,yMe,null),e(Bc,ASr),e(Bc,xMe),e(xMe,LSr),b(f,_ze,u),b(f,fr,u),M(Dx,fr,null),e(fr,ySr),e(fr,Nc),e(Nc,xSr),e(Nc,DK),e(DK,$Sr),e(Nc,kSr),e(Nc,GK),e(GK,SSr),e(Nc,RSr),e(fr,PSr),e(fr,Gx),e(Gx,BSr),e(Gx,$Me),e($Me,NSr),e(Gx,ISr),e(fr,qSr),e(fr,Ot),M(Ox,Ot,null),e(Ot,jSr),e(Ot,kMe),e(kMe,DSr),e(Ot,GSr),e(Ot,Ic),e(Ic,OSr),e(Ic,SMe),e(SMe,VSr),e(Ic,XSr),e(Ic,OK),e(OK,zSr),e(Ic,QSr),e(Ot,WSr),M(Y4,Ot,null),e(fr,HSr),e(fr,jr),M(Vx,jr,null),e(jr,USr),e(jr,RMe),e(RMe,JSr),e(jr,YSr),e(jr,un),e(un,KSr),e(un,PMe),e(PMe,ZSr),e(un,eRr),e(un,BMe),e(BMe,oRr),e(un,rRr),e(un,NMe),e(NMe,tRr),e(un,aRr),e(jr,nRr),e(jr,de),e(de,K4),e(K4,IMe),e(IMe,sRr),e(K4,lRr),e(K4,VK),e(VK,iRr),e(K4,dRr),e(de,cRr),e(de,Z4),e(Z4,qMe),e(qMe,fRr),e(Z4,mRr),e(Z4,XK),e(XK,gRr),e(Z4,hRr),e(de,pRr),e(de,eE),e(eE,jMe),e(jMe,_Rr),e(eE,uRr),e(eE,zK),e(zK,bRr),e(eE,vRr),e(de,FRr),e(de,oE),e(oE,DMe),e(DMe,TRr),e(oE,MRr),e(oE,QK),e(QK,ERr),e(oE,CRr),e(de,wRr),e(de,rE),e(rE,GMe),e(GMe,ARr),e(rE,LRr),e(rE,WK),e(WK,yRr),e(rE,xRr),e(de,$Rr),e(de,tE),e(tE,OMe),e(OMe,kRr),e(tE,SRr),e(tE,HK),e(HK,RRr),e(tE,PRr),e(de,BRr),e(de,aE),e(aE,VMe),e(VMe,NRr),e(aE,IRr),e(aE,UK),e(UK,qRr),e(aE,jRr),e(de,DRr),e(de,nE),e(nE,XMe),e(XMe,GRr),e(nE,ORr),e(nE,JK),e(JK,VRr),e(nE,XRr),e(de,zRr),e(de,sE),e(sE,zMe),e(zMe,QRr),e(sE,WRr),e(sE,YK),e(YK,HRr),e(sE,URr),e(de,JRr),e(de,lE),e(lE,QMe),e(QMe,YRr),e(lE,KRr),e(lE,KK),e(KK,ZRr),e(lE,ePr),e(de,oPr),e(de,iE),e(iE,WMe),e(WMe,rPr),e(iE,tPr),e(iE,ZK),e(ZK,aPr),e(iE,nPr),e(de,sPr),e(de,dE),e(dE,HMe),e(HMe,lPr),e(dE,iPr),e(dE,eZ),e(eZ,dPr),e(dE,cPr),e(de,fPr),e(de,cE),e(cE,UMe),e(UMe,mPr),e(cE,gPr),e(cE,oZ),e(oZ,hPr),e(cE,pPr),e(de,_Pr),e(de,fE),e(fE,JMe),e(JMe,uPr),e(fE,bPr),e(fE,rZ),e(rZ,vPr),e(fE,FPr),e(de,TPr),e(de,mE),e(mE,YMe),e(YMe,MPr),e(mE,EPr),e(mE,tZ),e(tZ,CPr),e(mE,wPr),e(de,APr),e(de,gE),e(gE,KMe),e(KMe,LPr),e(gE,yPr),e(gE,aZ),e(aZ,xPr),e(gE,$Pr),e(de,kPr),e(de,hE),e(hE,ZMe),e(ZMe,SPr),e(hE,RPr),e(hE,nZ),e(nZ,PPr),e(hE,BPr),e(de,NPr),e(de,pE),e(pE,e4e),e(e4e,IPr),e(pE,qPr),e(pE,sZ),e(sZ,jPr),e(pE,DPr),e(de,GPr),e(de,_E),e(_E,o4e),e(o4e,OPr),e(_E,VPr),e(_E,lZ),e(lZ,XPr),e(_E,zPr),e(de,QPr),e(de,uE),e(uE,r4e),e(r4e,WPr),e(uE,HPr),e(uE,iZ),e(iZ,UPr),e(uE,JPr),e(jr,YPr),M(bE,jr,null),b(f,uze,u),b(f,qc,u),e(qc,vE),e(vE,t4e),M(Xx,t4e,null),e(qc,KPr),e(qc,a4e),e(a4e,ZPr),b(f,bze,u),b(f,mr,u),M(zx,mr,null),e(mr,eBr),e(mr,jc),e(jc,oBr),e(jc,dZ),e(dZ,rBr),e(jc,tBr),e(jc,cZ),e(cZ,aBr),e(jc,nBr),e(mr,sBr),e(mr,Qx),e(Qx,lBr),e(Qx,n4e),e(n4e,iBr),e(Qx,dBr),e(mr,cBr),e(mr,Vt),M(Wx,Vt,null),e(Vt,fBr),e(Vt,s4e),e(s4e,mBr),e(Vt,gBr),e(Vt,Dc),e(Dc,hBr),e(Dc,l4e),e(l4e,pBr),e(Dc,_Br),e(Dc,fZ),e(fZ,uBr),e(Dc,bBr),e(Vt,vBr),M(FE,Vt,null),e(mr,FBr),e(mr,Dr),M(Hx,Dr,null),e(Dr,TBr),e(Dr,i4e),e(i4e,MBr),e(Dr,EBr),e(Dr,bn),e(bn,CBr),e(bn,d4e),e(d4e,wBr),e(bn,ABr),e(bn,c4e),e(c4e,LBr),e(bn,yBr),e(bn,f4e),e(f4e,xBr),e(bn,$Br),e(Dr,kBr),e(Dr,ce),e(ce,TE),e(TE,m4e),e(m4e,SBr),e(TE,RBr),e(TE,mZ),e(mZ,PBr),e(TE,BBr),e(ce,NBr),e(ce,ME),e(ME,g4e),e(g4e,IBr),e(ME,qBr),e(ME,gZ),e(gZ,jBr),e(ME,DBr),e(ce,GBr),e(ce,EE),e(EE,h4e),e(h4e,OBr),e(EE,VBr),e(EE,hZ),e(hZ,XBr),e(EE,zBr),e(ce,QBr),e(ce,CE),e(CE,p4e),e(p4e,WBr),e(CE,HBr),e(CE,pZ),e(pZ,UBr),e(CE,JBr),e(ce,YBr),e(ce,wE),e(wE,_4e),e(_4e,KBr),e(wE,ZBr),e(wE,_Z),e(_Z,eNr),e(wE,oNr),e(ce,rNr),e(ce,AE),e(AE,u4e),e(u4e,tNr),e(AE,aNr),e(AE,uZ),e(uZ,nNr),e(AE,sNr),e(ce,lNr),e(ce,LE),e(LE,b4e),e(b4e,iNr),e(LE,dNr),e(LE,bZ),e(bZ,cNr),e(LE,fNr),e(ce,mNr),e(ce,yE),e(yE,v4e),e(v4e,gNr),e(yE,hNr),e(yE,vZ),e(vZ,pNr),e(yE,_Nr),e(ce,uNr),e(ce,xE),e(xE,F4e),e(F4e,bNr),e(xE,vNr),e(xE,FZ),e(FZ,FNr),e(xE,TNr),e(ce,MNr),e(ce,$E),e($E,T4e),e(T4e,ENr),e($E,CNr),e($E,TZ),e(TZ,wNr),e($E,ANr),e(ce,LNr),e(ce,kE),e(kE,M4e),e(M4e,yNr),e(kE,xNr),e(kE,MZ),e(MZ,$Nr),e(kE,kNr),e(ce,SNr),e(ce,SE),e(SE,E4e),e(E4e,RNr),e(SE,PNr),e(SE,EZ),e(EZ,BNr),e(SE,NNr),e(ce,INr),e(ce,RE),e(RE,C4e),e(C4e,qNr),e(RE,jNr),e(RE,CZ),e(CZ,DNr),e(RE,GNr),e(ce,ONr),e(ce,PE),e(PE,w4e),e(w4e,VNr),e(PE,XNr),e(PE,wZ),e(wZ,zNr),e(PE,QNr),e(ce,WNr),e(ce,BE),e(BE,A4e),e(A4e,HNr),e(BE,UNr),e(BE,AZ),e(AZ,JNr),e(BE,YNr),e(ce,KNr),e(ce,NE),e(NE,L4e),e(L4e,ZNr),e(NE,eIr),e(NE,LZ),e(LZ,oIr),e(NE,rIr),e(ce,tIr),e(ce,IE),e(IE,y4e),e(y4e,aIr),e(IE,nIr),e(IE,yZ),e(yZ,sIr),e(IE,lIr),e(ce,iIr),e(ce,qE),e(qE,x4e),e(x4e,dIr),e(qE,cIr),e(qE,xZ),e(xZ,fIr),e(qE,mIr),e(ce,gIr),e(ce,jE),e(jE,$4e),e($4e,hIr),e(jE,pIr),e(jE,$Z),e($Z,_Ir),e(jE,uIr),e(ce,bIr),e(ce,DE),e(DE,k4e),e(k4e,vIr),e(DE,FIr),e(DE,kZ),e(kZ,TIr),e(DE,MIr),e(Dr,EIr),M(GE,Dr,null),b(f,vze,u),b(f,Gc,u),e(Gc,OE),e(OE,S4e),M(Ux,S4e,null),e(Gc,CIr),e(Gc,R4e),e(R4e,wIr),b(f,Fze,u),b(f,gr,u),M(Jx,gr,null),e(gr,AIr),e(gr,Oc),e(Oc,LIr),e(Oc,SZ),e(SZ,yIr),e(Oc,xIr),e(Oc,RZ),e(RZ,$Ir),e(Oc,kIr),e(gr,SIr),e(gr,Yx),e(Yx,RIr),e(Yx,P4e),e(P4e,PIr),e(Yx,BIr),e(gr,NIr),e(gr,Xt),M(Kx,Xt,null),e(Xt,IIr),e(Xt,B4e),e(B4e,qIr),e(Xt,jIr),e(Xt,Vc),e(Vc,DIr),e(Vc,N4e),e(N4e,GIr),e(Vc,OIr),e(Vc,PZ),e(PZ,VIr),e(Vc,XIr),e(Xt,zIr),M(VE,Xt,null),e(gr,QIr),e(gr,Gr),M(Zx,Gr,null),e(Gr,WIr),e(Gr,I4e),e(I4e,HIr),e(Gr,UIr),e(Gr,vn),e(vn,JIr),e(vn,q4e),e(q4e,YIr),e(vn,KIr),e(vn,j4e),e(j4e,ZIr),e(vn,eqr),e(vn,D4e),e(D4e,oqr),e(vn,rqr),e(Gr,tqr),e(Gr,G4e),e(G4e,XE),e(XE,O4e),e(O4e,aqr),e(XE,nqr),e(XE,BZ),e(BZ,sqr),e(XE,lqr),e(Gr,iqr),M(zE,Gr,null),b(f,Tze,u),b(f,Xc,u),e(Xc,QE),e(QE,V4e),M(e$,V4e,null),e(Xc,dqr),e(Xc,X4e),e(X4e,cqr),b(f,Mze,u),b(f,hr,u),M(o$,hr,null),e(hr,fqr),e(hr,zc),e(zc,mqr),e(zc,NZ),e(NZ,gqr),e(zc,hqr),e(zc,IZ),e(IZ,pqr),e(zc,_qr),e(hr,uqr),e(hr,r$),e(r$,bqr),e(r$,z4e),e(z4e,vqr),e(r$,Fqr),e(hr,Tqr),e(hr,zt),M(t$,zt,null),e(zt,Mqr),e(zt,Q4e),e(Q4e,Eqr),e(zt,Cqr),e(zt,Qc),e(Qc,wqr),e(Qc,W4e),e(W4e,Aqr),e(Qc,Lqr),e(Qc,qZ),e(qZ,yqr),e(Qc,xqr),e(zt,$qr),M(WE,zt,null),e(hr,kqr),e(hr,Or),M(a$,Or,null),e(Or,Sqr),e(Or,H4e),e(H4e,Rqr),e(Or,Pqr),e(Or,Fn),e(Fn,Bqr),e(Fn,U4e),e(U4e,Nqr),e(Fn,Iqr),e(Fn,J4e),e(J4e,qqr),e(Fn,jqr),e(Fn,Y4e),e(Y4e,Dqr),e(Fn,Gqr),e(Or,Oqr),e(Or,K4e),e(K4e,HE),e(HE,Z4e),e(Z4e,Vqr),e(HE,Xqr),e(HE,jZ),e(jZ,zqr),e(HE,Qqr),e(Or,Wqr),M(UE,Or,null),b(f,Eze,u),b(f,Wc,u),e(Wc,JE),e(JE,eEe),M(n$,eEe,null),e(Wc,Hqr),e(Wc,oEe),e(oEe,Uqr),b(f,Cze,u),b(f,pr,u),M(s$,pr,null),e(pr,Jqr),e(pr,Hc),e(Hc,Yqr),e(Hc,DZ),e(DZ,Kqr),e(Hc,Zqr),e(Hc,GZ),e(GZ,ejr),e(Hc,ojr),e(pr,rjr),e(pr,l$),e(l$,tjr),e(l$,rEe),e(rEe,ajr),e(l$,njr),e(pr,sjr),e(pr,Qt),M(i$,Qt,null),e(Qt,ljr),e(Qt,tEe),e(tEe,ijr),e(Qt,djr),e(Qt,Uc),e(Uc,cjr),e(Uc,aEe),e(aEe,fjr),e(Uc,mjr),e(Uc,OZ),e(OZ,gjr),e(Uc,hjr),e(Qt,pjr),M(YE,Qt,null),e(pr,_jr),e(pr,Vr),M(d$,Vr,null),e(Vr,ujr),e(Vr,nEe),e(nEe,bjr),e(Vr,vjr),e(Vr,Tn),e(Tn,Fjr),e(Tn,sEe),e(sEe,Tjr),e(Tn,Mjr),e(Tn,lEe),e(lEe,Ejr),e(Tn,Cjr),e(Tn,iEe),e(iEe,wjr),e(Tn,Ajr),e(Vr,Ljr),e(Vr,oe),e(oe,KE),e(KE,dEe),e(dEe,yjr),e(KE,xjr),e(KE,VZ),e(VZ,$jr),e(KE,kjr),e(oe,Sjr),e(oe,ZE),e(ZE,cEe),e(cEe,Rjr),e(ZE,Pjr),e(ZE,XZ),e(XZ,Bjr),e(ZE,Njr),e(oe,Ijr),e(oe,eC),e(eC,fEe),e(fEe,qjr),e(eC,jjr),e(eC,zZ),e(zZ,Djr),e(eC,Gjr),e(oe,Ojr),e(oe,oC),e(oC,mEe),e(mEe,Vjr),e(oC,Xjr),e(oC,QZ),e(QZ,zjr),e(oC,Qjr),e(oe,Wjr),e(oe,rC),e(rC,gEe),e(gEe,Hjr),e(rC,Ujr),e(rC,WZ),e(WZ,Jjr),e(rC,Yjr),e(oe,Kjr),e(oe,tC),e(tC,hEe),e(hEe,Zjr),e(tC,eDr),e(tC,HZ),e(HZ,oDr),e(tC,rDr),e(oe,tDr),e(oe,aC),e(aC,pEe),e(pEe,aDr),e(aC,nDr),e(aC,UZ),e(UZ,sDr),e(aC,lDr),e(oe,iDr),e(oe,nC),e(nC,_Ee),e(_Ee,dDr),e(nC,cDr),e(nC,JZ),e(JZ,fDr),e(nC,mDr),e(oe,gDr),e(oe,sC),e(sC,uEe),e(uEe,hDr),e(sC,pDr),e(sC,YZ),e(YZ,_Dr),e(sC,uDr),e(oe,bDr),e(oe,lC),e(lC,bEe),e(bEe,vDr),e(lC,FDr),e(lC,KZ),e(KZ,TDr),e(lC,MDr),e(oe,EDr),e(oe,iC),e(iC,vEe),e(vEe,CDr),e(iC,wDr),e(iC,ZZ),e(ZZ,ADr),e(iC,LDr),e(oe,yDr),e(oe,dC),e(dC,FEe),e(FEe,xDr),e(dC,$Dr),e(dC,eee),e(eee,kDr),e(dC,SDr),e(oe,RDr),e(oe,cC),e(cC,TEe),e(TEe,PDr),e(cC,BDr),e(cC,oee),e(oee,NDr),e(cC,IDr),e(oe,qDr),e(oe,fC),e(fC,MEe),e(MEe,jDr),e(fC,DDr),e(fC,ree),e(ree,GDr),e(fC,ODr),e(oe,VDr),e(oe,mC),e(mC,EEe),e(EEe,XDr),e(mC,zDr),e(mC,tee),e(tee,QDr),e(mC,WDr),e(oe,HDr),e(oe,gC),e(gC,CEe),e(CEe,UDr),e(gC,JDr),e(gC,aee),e(aee,YDr),e(gC,KDr),e(oe,ZDr),e(oe,hC),e(hC,wEe),e(wEe,eGr),e(hC,oGr),e(hC,nee),e(nee,rGr),e(hC,tGr),e(oe,aGr),e(oe,pC),e(pC,AEe),e(AEe,nGr),e(pC,sGr),e(pC,see),e(see,lGr),e(pC,iGr),e(oe,dGr),e(oe,_C),e(_C,LEe),e(LEe,cGr),e(_C,fGr),e(_C,lee),e(lee,mGr),e(_C,gGr),e(oe,hGr),e(oe,uC),e(uC,yEe),e(yEe,pGr),e(uC,_Gr),e(uC,iee),e(iee,uGr),e(uC,bGr),e(oe,vGr),e(oe,bC),e(bC,xEe),e(xEe,FGr),e(bC,TGr),e(bC,dee),e(dee,MGr),e(bC,EGr),e(oe,CGr),e(oe,vC),e(vC,$Ee),e($Ee,wGr),e(vC,AGr),e(vC,cee),e(cee,LGr),e(vC,yGr),e(oe,xGr),e(oe,FC),e(FC,kEe),e(kEe,$Gr),e(FC,kGr),e(FC,fee),e(fee,SGr),e(FC,RGr),e(oe,PGr),e(oe,TC),e(TC,SEe),e(SEe,BGr),e(TC,NGr),e(TC,mee),e(mee,IGr),e(TC,qGr),e(oe,jGr),e(oe,MC),e(MC,REe),e(REe,DGr),e(MC,GGr),e(MC,gee),e(gee,OGr),e(MC,VGr),e(oe,XGr),e(oe,EC),e(EC,PEe),e(PEe,zGr),e(EC,QGr),e(EC,hee),e(hee,WGr),e(EC,HGr),e(oe,UGr),e(oe,CC),e(CC,BEe),e(BEe,JGr),e(CC,YGr),e(CC,pee),e(pee,KGr),e(CC,ZGr),e(Vr,eOr),M(wC,Vr,null),b(f,wze,u),b(f,Jc,u),e(Jc,AC),e(AC,NEe),M(c$,NEe,null),e(Jc,oOr),e(Jc,IEe),e(IEe,rOr),b(f,Aze,u),b(f,_r,u),M(f$,_r,null),e(_r,tOr),e(_r,Yc),e(Yc,aOr),e(Yc,_ee),e(_ee,nOr),e(Yc,sOr),e(Yc,uee),e(uee,lOr),e(Yc,iOr),e(_r,dOr),e(_r,m$),e(m$,cOr),e(m$,qEe),e(qEe,fOr),e(m$,mOr),e(_r,gOr),e(_r,Wt),M(g$,Wt,null),e(Wt,hOr),e(Wt,jEe),e(jEe,pOr),e(Wt,_Or),e(Wt,Kc),e(Kc,uOr),e(Kc,DEe),e(DEe,bOr),e(Kc,vOr),e(Kc,bee),e(bee,FOr),e(Kc,TOr),e(Wt,MOr),M(LC,Wt,null),e(_r,EOr),e(_r,Xr),M(h$,Xr,null),e(Xr,COr),e(Xr,GEe),e(GEe,wOr),e(Xr,AOr),e(Xr,Mn),e(Mn,LOr),e(Mn,OEe),e(OEe,yOr),e(Mn,xOr),e(Mn,VEe),e(VEe,$Or),e(Mn,kOr),e(Mn,XEe),e(XEe,SOr),e(Mn,ROr),e(Xr,POr),e(Xr,xe),e(xe,yC),e(yC,zEe),e(zEe,BOr),e(yC,NOr),e(yC,vee),e(vee,IOr),e(yC,qOr),e(xe,jOr),e(xe,xC),e(xC,QEe),e(QEe,DOr),e(xC,GOr),e(xC,Fee),e(Fee,OOr),e(xC,VOr),e(xe,XOr),e(xe,$C),e($C,WEe),e(WEe,zOr),e($C,QOr),e($C,Tee),e(Tee,WOr),e($C,HOr),e(xe,UOr),e(xe,kC),e(kC,HEe),e(HEe,JOr),e(kC,YOr),e(kC,Mee),e(Mee,KOr),e(kC,ZOr),e(xe,eVr),e(xe,SC),e(SC,UEe),e(UEe,oVr),e(SC,rVr),e(SC,Eee),e(Eee,tVr),e(SC,aVr),e(xe,nVr),e(xe,RC),e(RC,JEe),e(JEe,sVr),e(RC,lVr),e(RC,Cee),e(Cee,iVr),e(RC,dVr),e(xe,cVr),e(xe,PC),e(PC,YEe),e(YEe,fVr),e(PC,mVr),e(PC,wee),e(wee,gVr),e(PC,hVr),e(xe,pVr),e(xe,BC),e(BC,KEe),e(KEe,_Vr),e(BC,uVr),e(BC,Aee),e(Aee,bVr),e(BC,vVr),e(xe,FVr),e(xe,NC),e(NC,ZEe),e(ZEe,TVr),e(NC,MVr),e(NC,Lee),e(Lee,EVr),e(NC,CVr),e(xe,wVr),e(xe,IC),e(IC,eCe),e(eCe,AVr),e(IC,LVr),e(IC,yee),e(yee,yVr),e(IC,xVr),e(Xr,$Vr),M(qC,Xr,null),b(f,Lze,u),b(f,Zc,u),e(Zc,jC),e(jC,oCe),M(p$,oCe,null),e(Zc,kVr),e(Zc,rCe),e(rCe,SVr),b(f,yze,u),b(f,ur,u),M(_$,ur,null),e(ur,RVr),e(ur,ef),e(ef,PVr),e(ef,xee),e(xee,BVr),e(ef,NVr),e(ef,$ee),e($ee,IVr),e(ef,qVr),e(ur,jVr),e(ur,u$),e(u$,DVr),e(u$,tCe),e(tCe,GVr),e(u$,OVr),e(ur,VVr),e(ur,Ht),M(b$,Ht,null),e(Ht,XVr),e(Ht,aCe),e(aCe,zVr),e(Ht,QVr),e(Ht,of),e(of,WVr),e(of,nCe),e(nCe,HVr),e(of,UVr),e(of,kee),e(kee,JVr),e(of,YVr),e(Ht,KVr),M(DC,Ht,null),e(ur,ZVr),e(ur,zr),M(v$,zr,null),e(zr,eXr),e(zr,sCe),e(sCe,oXr),e(zr,rXr),e(zr,En),e(En,tXr),e(En,lCe),e(lCe,aXr),e(En,nXr),e(En,iCe),e(iCe,sXr),e(En,lXr),e(En,dCe),e(dCe,iXr),e(En,dXr),e(zr,cXr),e(zr,Ee),e(Ee,GC),e(GC,cCe),e(cCe,fXr),e(GC,mXr),e(GC,See),e(See,gXr),e(GC,hXr),e(Ee,pXr),e(Ee,OC),e(OC,fCe),e(fCe,_Xr),e(OC,uXr),e(OC,Ree),e(Ree,bXr),e(OC,vXr),e(Ee,FXr),e(Ee,VC),e(VC,mCe),e(mCe,TXr),e(VC,MXr),e(VC,Pee),e(Pee,EXr),e(VC,CXr),e(Ee,wXr),e(Ee,XC),e(XC,gCe),e(gCe,AXr),e(XC,LXr),e(XC,Bee),e(Bee,yXr),e(XC,xXr),e(Ee,$Xr),e(Ee,zC),e(zC,hCe),e(hCe,kXr),e(zC,SXr),e(zC,Nee),e(Nee,RXr),e(zC,PXr),e(Ee,BXr),e(Ee,QC),e(QC,pCe),e(pCe,NXr),e(QC,IXr),e(QC,Iee),e(Iee,qXr),e(QC,jXr),e(Ee,DXr),e(Ee,WC),e(WC,_Ce),e(_Ce,GXr),e(WC,OXr),e(WC,qee),e(qee,VXr),e(WC,XXr),e(Ee,zXr),e(Ee,HC),e(HC,uCe),e(uCe,QXr),e(HC,WXr),e(HC,jee),e(jee,HXr),e(HC,UXr),e(Ee,JXr),e(Ee,UC),e(UC,bCe),e(bCe,YXr),e(UC,KXr),e(UC,Dee),e(Dee,ZXr),e(UC,ezr),e(Ee,ozr),e(Ee,JC),e(JC,vCe),e(vCe,rzr),e(JC,tzr),e(JC,Gee),e(Gee,azr),e(JC,nzr),e(Ee,szr),e(Ee,YC),e(YC,FCe),e(FCe,lzr),e(YC,izr),e(YC,Oee),e(Oee,dzr),e(YC,czr),e(Ee,fzr),e(Ee,KC),e(KC,TCe),e(TCe,mzr),e(KC,gzr),e(KC,Vee),e(Vee,hzr),e(KC,pzr),e(Ee,_zr),e(Ee,ZC),e(ZC,MCe),e(MCe,uzr),e(ZC,bzr),e(ZC,Xee),e(Xee,vzr),e(ZC,Fzr),e(zr,Tzr),M(e3,zr,null),b(f,xze,u),b(f,rf,u),e(rf,o3),e(o3,ECe),M(F$,ECe,null),e(rf,Mzr),e(rf,CCe),e(CCe,Ezr),b(f,$ze,u),b(f,br,u),M(T$,br,null),e(br,Czr),e(br,tf),e(tf,wzr),e(tf,zee),e(zee,Azr),e(tf,Lzr),e(tf,Qee),e(Qee,yzr),e(tf,xzr),e(br,$zr),e(br,M$),e(M$,kzr),e(M$,wCe),e(wCe,Szr),e(M$,Rzr),e(br,Pzr),e(br,Ut),M(E$,Ut,null),e(Ut,Bzr),e(Ut,ACe),e(ACe,Nzr),e(Ut,Izr),e(Ut,af),e(af,qzr),e(af,LCe),e(LCe,jzr),e(af,Dzr),e(af,Wee),e(Wee,Gzr),e(af,Ozr),e(Ut,Vzr),M(r3,Ut,null),e(br,Xzr),e(br,Qr),M(C$,Qr,null),e(Qr,zzr),e(Qr,yCe),e(yCe,Qzr),e(Qr,Wzr),e(Qr,Cn),e(Cn,Hzr),e(Cn,xCe),e(xCe,Uzr),e(Cn,Jzr),e(Cn,$Ce),e($Ce,Yzr),e(Cn,Kzr),e(Cn,kCe),e(kCe,Zzr),e(Cn,eQr),e(Qr,oQr),e(Qr,$e),e($e,t3),e(t3,SCe),e(SCe,rQr),e(t3,tQr),e(t3,Hee),e(Hee,aQr),e(t3,nQr),e($e,sQr),e($e,a3),e(a3,RCe),e(RCe,lQr),e(a3,iQr),e(a3,Uee),e(Uee,dQr),e(a3,cQr),e($e,fQr),e($e,n3),e(n3,PCe),e(PCe,mQr),e(n3,gQr),e(n3,Jee),e(Jee,hQr),e(n3,pQr),e($e,_Qr),e($e,s3),e(s3,BCe),e(BCe,uQr),e(s3,bQr),e(s3,Yee),e(Yee,vQr),e(s3,FQr),e($e,TQr),e($e,l3),e(l3,NCe),e(NCe,MQr),e(l3,EQr),e(l3,Kee),e(Kee,CQr),e(l3,wQr),e($e,AQr),e($e,i3),e(i3,ICe),e(ICe,LQr),e(i3,yQr),e(i3,Zee),e(Zee,xQr),e(i3,$Qr),e($e,kQr),e($e,d3),e(d3,qCe),e(qCe,SQr),e(d3,RQr),e(d3,eoe),e(eoe,PQr),e(d3,BQr),e($e,NQr),e($e,c3),e(c3,jCe),e(jCe,IQr),e(c3,qQr),e(c3,ooe),e(ooe,jQr),e(c3,DQr),e($e,GQr),e($e,f3),e(f3,DCe),e(DCe,OQr),e(f3,VQr),e(f3,roe),e(roe,XQr),e(f3,zQr),e($e,QQr),e($e,m3),e(m3,GCe),e(GCe,WQr),e(m3,HQr),e(m3,toe),e(toe,UQr),e(m3,JQr),e(Qr,YQr),M(g3,Qr,null),b(f,kze,u),b(f,nf,u),e(nf,h3),e(h3,OCe),M(w$,OCe,null),e(nf,KQr),e(nf,VCe),e(VCe,ZQr),b(f,Sze,u),b(f,vr,u),M(A$,vr,null),e(vr,eWr),e(vr,sf),e(sf,oWr),e(sf,aoe),e(aoe,rWr),e(sf,tWr),e(sf,noe),e(noe,aWr),e(sf,nWr),e(vr,sWr),e(vr,L$),e(L$,lWr),e(L$,XCe),e(XCe,iWr),e(L$,dWr),e(vr,cWr),e(vr,Jt),M(y$,Jt,null),e(Jt,fWr),e(Jt,zCe),e(zCe,mWr),e(Jt,gWr),e(Jt,lf),e(lf,hWr),e(lf,QCe),e(QCe,pWr),e(lf,_Wr),e(lf,soe),e(soe,uWr),e(lf,bWr),e(Jt,vWr),M(p3,Jt,null),e(vr,FWr),e(vr,Wr),M(x$,Wr,null),e(Wr,TWr),e(Wr,WCe),e(WCe,MWr),e(Wr,EWr),e(Wr,wn),e(wn,CWr),e(wn,HCe),e(HCe,wWr),e(wn,AWr),e(wn,UCe),e(UCe,LWr),e(wn,yWr),e(wn,JCe),e(JCe,xWr),e(wn,$Wr),e(Wr,kWr),e(Wr,ke),e(ke,_3),e(_3,YCe),e(YCe,SWr),e(_3,RWr),e(_3,loe),e(loe,PWr),e(_3,BWr),e(ke,NWr),e(ke,u3),e(u3,KCe),e(KCe,IWr),e(u3,qWr),e(u3,ioe),e(ioe,jWr),e(u3,DWr),e(ke,GWr),e(ke,b3),e(b3,ZCe),e(ZCe,OWr),e(b3,VWr),e(b3,doe),e(doe,XWr),e(b3,zWr),e(ke,QWr),e(ke,v3),e(v3,e3e),e(e3e,WWr),e(v3,HWr),e(v3,coe),e(coe,UWr),e(v3,JWr),e(ke,YWr),e(ke,F3),e(F3,o3e),e(o3e,KWr),e(F3,ZWr),e(F3,foe),e(foe,eHr),e(F3,oHr),e(ke,rHr),e(ke,T3),e(T3,r3e),e(r3e,tHr),e(T3,aHr),e(T3,moe),e(moe,nHr),e(T3,sHr),e(ke,lHr),e(ke,M3),e(M3,t3e),e(t3e,iHr),e(M3,dHr),e(M3,goe),e(goe,cHr),e(M3,fHr),e(ke,mHr),e(ke,E3),e(E3,a3e),e(a3e,gHr),e(E3,hHr),e(E3,hoe),e(hoe,pHr),e(E3,_Hr),e(ke,uHr),e(ke,C3),e(C3,n3e),e(n3e,bHr),e(C3,vHr),e(C3,poe),e(poe,FHr),e(C3,THr),e(ke,MHr),e(ke,w3),e(w3,s3e),e(s3e,EHr),e(w3,CHr),e(w3,_oe),e(_oe,wHr),e(w3,AHr),e(Wr,LHr),M(A3,Wr,null),b(f,Rze,u),b(f,df,u),e(df,L3),e(L3,l3e),M($$,l3e,null),e(df,yHr),e(df,i3e),e(i3e,xHr),b(f,Pze,u),b(f,Fr,u),M(k$,Fr,null),e(Fr,$Hr),e(Fr,cf),e(cf,kHr),e(cf,uoe),e(uoe,SHr),e(cf,RHr),e(cf,boe),e(boe,PHr),e(cf,BHr),e(Fr,NHr),e(Fr,S$),e(S$,IHr),e(S$,d3e),e(d3e,qHr),e(S$,jHr),e(Fr,DHr),e(Fr,Yt),M(R$,Yt,null),e(Yt,GHr),e(Yt,c3e),e(c3e,OHr),e(Yt,VHr),e(Yt,ff),e(ff,XHr),e(ff,f3e),e(f3e,zHr),e(ff,QHr),e(ff,voe),e(voe,WHr),e(ff,HHr),e(Yt,UHr),M(y3,Yt,null),e(Fr,JHr),e(Fr,Hr),M(P$,Hr,null),e(Hr,YHr),e(Hr,m3e),e(m3e,KHr),e(Hr,ZHr),e(Hr,An),e(An,eUr),e(An,g3e),e(g3e,oUr),e(An,rUr),e(An,h3e),e(h3e,tUr),e(An,aUr),e(An,p3e),e(p3e,nUr),e(An,sUr),e(Hr,lUr),e(Hr,Se),e(Se,x3),e(x3,_3e),e(_3e,iUr),e(x3,dUr),e(x3,Foe),e(Foe,cUr),e(x3,fUr),e(Se,mUr),e(Se,$3),e($3,u3e),e(u3e,gUr),e($3,hUr),e($3,Toe),e(Toe,pUr),e($3,_Ur),e(Se,uUr),e(Se,k3),e(k3,b3e),e(b3e,bUr),e(k3,vUr),e(k3,Moe),e(Moe,FUr),e(k3,TUr),e(Se,MUr),e(Se,S3),e(S3,v3e),e(v3e,EUr),e(S3,CUr),e(S3,Eoe),e(Eoe,wUr),e(S3,AUr),e(Se,LUr),e(Se,R3),e(R3,F3e),e(F3e,yUr),e(R3,xUr),e(R3,Coe),e(Coe,$Ur),e(R3,kUr),e(Se,SUr),e(Se,P3),e(P3,T3e),e(T3e,RUr),e(P3,PUr),e(P3,woe),e(woe,BUr),e(P3,NUr),e(Se,IUr),e(Se,B3),e(B3,M3e),e(M3e,qUr),e(B3,jUr),e(B3,Aoe),e(Aoe,DUr),e(B3,GUr),e(Se,OUr),e(Se,N3),e(N3,E3e),e(E3e,VUr),e(N3,XUr),e(N3,Loe),e(Loe,zUr),e(N3,QUr),e(Se,WUr),e(Se,I3),e(I3,C3e),e(C3e,HUr),e(I3,UUr),e(I3,yoe),e(yoe,JUr),e(I3,YUr),e(Se,KUr),e(Se,q3),e(q3,w3e),e(w3e,ZUr),e(q3,eJr),e(q3,xoe),e(xoe,oJr),e(q3,rJr),e(Hr,tJr),M(j3,Hr,null),b(f,Bze,u),b(f,mf,u),e(mf,D3),e(D3,A3e),M(B$,A3e,null),e(mf,aJr),e(mf,L3e),e(L3e,nJr),b(f,Nze,u),b(f,Tr,u),M(N$,Tr,null),e(Tr,sJr),e(Tr,gf),e(gf,lJr),e(gf,$oe),e($oe,iJr),e(gf,dJr),e(gf,koe),e(koe,cJr),e(gf,fJr),e(Tr,mJr),e(Tr,I$),e(I$,gJr),e(I$,y3e),e(y3e,hJr),e(I$,pJr),e(Tr,_Jr),e(Tr,Kt),M(q$,Kt,null),e(Kt,uJr),e(Kt,x3e),e(x3e,bJr),e(Kt,vJr),e(Kt,hf),e(hf,FJr),e(hf,$3e),e($3e,TJr),e(hf,MJr),e(hf,Soe),e(Soe,EJr),e(hf,CJr),e(Kt,wJr),M(G3,Kt,null),e(Tr,AJr),e(Tr,Ur),M(j$,Ur,null),e(Ur,LJr),e(Ur,k3e),e(k3e,yJr),e(Ur,xJr),e(Ur,Ln),e(Ln,$Jr),e(Ln,S3e),e(S3e,kJr),e(Ln,SJr),e(Ln,R3e),e(R3e,RJr),e(Ln,PJr),e(Ln,P3e),e(P3e,BJr),e(Ln,NJr),e(Ur,IJr),e(Ur,Re),e(Re,O3),e(O3,B3e),e(B3e,qJr),e(O3,jJr),e(O3,Roe),e(Roe,DJr),e(O3,GJr),e(Re,OJr),e(Re,V3),e(V3,N3e),e(N3e,VJr),e(V3,XJr),e(V3,Poe),e(Poe,zJr),e(V3,QJr),e(Re,WJr),e(Re,X3),e(X3,I3e),e(I3e,HJr),e(X3,UJr),e(X3,Boe),e(Boe,JJr),e(X3,YJr),e(Re,KJr),e(Re,z3),e(z3,q3e),e(q3e,ZJr),e(z3,eYr),e(z3,Noe),e(Noe,oYr),e(z3,rYr),e(Re,tYr),e(Re,Q3),e(Q3,j3e),e(j3e,aYr),e(Q3,nYr),e(Q3,Ioe),e(Ioe,sYr),e(Q3,lYr),e(Re,iYr),e(Re,W3),e(W3,D3e),e(D3e,dYr),e(W3,cYr),e(W3,qoe),e(qoe,fYr),e(W3,mYr),e(Re,gYr),e(Re,H3),e(H3,G3e),e(G3e,hYr),e(H3,pYr),e(H3,joe),e(joe,_Yr),e(H3,uYr),e(Re,bYr),e(Re,U3),e(U3,O3e),e(O3e,vYr),e(U3,FYr),e(U3,Doe),e(Doe,TYr),e(U3,MYr),e(Re,EYr),e(Re,J3),e(J3,V3e),e(V3e,CYr),e(J3,wYr),e(J3,Goe),e(Goe,AYr),e(J3,LYr),e(Re,yYr),e(Re,Y3),e(Y3,X3e),e(X3e,xYr),e(Y3,$Yr),e(Y3,Ooe),e(Ooe,kYr),e(Y3,SYr),e(Ur,RYr),M(K3,Ur,null),b(f,Ize,u),b(f,pf,u),e(pf,Z3),e(Z3,z3e),M(D$,z3e,null),e(pf,PYr),e(pf,Q3e),e(Q3e,BYr),b(f,qze,u),b(f,Mr,u),M(G$,Mr,null),e(Mr,NYr),e(Mr,_f),e(_f,IYr),e(_f,Voe),e(Voe,qYr),e(_f,jYr),e(_f,Xoe),e(Xoe,DYr),e(_f,GYr),e(Mr,OYr),e(Mr,O$),e(O$,VYr),e(O$,W3e),e(W3e,XYr),e(O$,zYr),e(Mr,QYr),e(Mr,Zt),M(V$,Zt,null),e(Zt,WYr),e(Zt,H3e),e(H3e,HYr),e(Zt,UYr),e(Zt,uf),e(uf,JYr),e(uf,U3e),e(U3e,YYr),e(uf,KYr),e(uf,zoe),e(zoe,ZYr),e(uf,eKr),e(Zt,oKr),M(ew,Zt,null),e(Mr,rKr),e(Mr,Jr),M(X$,Jr,null),e(Jr,tKr),e(Jr,J3e),e(J3e,aKr),e(Jr,nKr),e(Jr,yn),e(yn,sKr),e(yn,Y3e),e(Y3e,lKr),e(yn,iKr),e(yn,K3e),e(K3e,dKr),e(yn,cKr),e(yn,Z3e),e(Z3e,fKr),e(yn,mKr),e(Jr,gKr),e(Jr,Ve),e(Ve,ow),e(ow,ewe),e(ewe,hKr),e(ow,pKr),e(ow,Qoe),e(Qoe,_Kr),e(ow,uKr),e(Ve,bKr),e(Ve,rw),e(rw,owe),e(owe,vKr),e(rw,FKr),e(rw,Woe),e(Woe,TKr),e(rw,MKr),e(Ve,EKr),e(Ve,tw),e(tw,rwe),e(rwe,CKr),e(tw,wKr),e(tw,Hoe),e(Hoe,AKr),e(tw,LKr),e(Ve,yKr),e(Ve,aw),e(aw,twe),e(twe,xKr),e(aw,$Kr),e(aw,Uoe),e(Uoe,kKr),e(aw,SKr),e(Ve,RKr),e(Ve,nw),e(nw,awe),e(awe,PKr),e(nw,BKr),e(nw,Joe),e(Joe,NKr),e(nw,IKr),e(Ve,qKr),e(Ve,sw),e(sw,nwe),e(nwe,jKr),e(sw,DKr),e(sw,Yoe),e(Yoe,GKr),e(sw,OKr),e(Ve,VKr),e(Ve,lw),e(lw,swe),e(swe,XKr),e(lw,zKr),e(lw,Koe),e(Koe,QKr),e(lw,WKr),e(Ve,HKr),e(Ve,iw),e(iw,lwe),e(lwe,UKr),e(iw,JKr),e(iw,Zoe),e(Zoe,YKr),e(iw,KKr),e(Jr,ZKr),M(dw,Jr,null),b(f,jze,u),b(f,bf,u),e(bf,cw),e(cw,iwe),M(z$,iwe,null),e(bf,eZr),e(bf,dwe),e(dwe,oZr),b(f,Dze,u),b(f,Er,u),M(Q$,Er,null),e(Er,rZr),e(Er,vf),e(vf,tZr),e(vf,ere),e(ere,aZr),e(vf,nZr),e(vf,ore),e(ore,sZr),e(vf,lZr),e(Er,iZr),e(Er,W$),e(W$,dZr),e(W$,cwe),e(cwe,cZr),e(W$,fZr),e(Er,mZr),e(Er,ea),M(H$,ea,null),e(ea,gZr),e(ea,fwe),e(fwe,hZr),e(ea,pZr),e(ea,Ff),e(Ff,_Zr),e(Ff,mwe),e(mwe,uZr),e(Ff,bZr),e(Ff,rre),e(rre,vZr),e(Ff,FZr),e(ea,TZr),M(fw,ea,null),e(Er,MZr),e(Er,Yr),M(U$,Yr,null),e(Yr,EZr),e(Yr,gwe),e(gwe,CZr),e(Yr,wZr),e(Yr,xn),e(xn,AZr),e(xn,hwe),e(hwe,LZr),e(xn,yZr),e(xn,pwe),e(pwe,xZr),e(xn,$Zr),e(xn,_we),e(_we,kZr),e(xn,SZr),e(Yr,RZr),e(Yr,Xe),e(Xe,mw),e(mw,uwe),e(uwe,PZr),e(mw,BZr),e(mw,tre),e(tre,NZr),e(mw,IZr),e(Xe,qZr),e(Xe,gw),e(gw,bwe),e(bwe,jZr),e(gw,DZr),e(gw,are),e(are,GZr),e(gw,OZr),e(Xe,VZr),e(Xe,hw),e(hw,vwe),e(vwe,XZr),e(hw,zZr),e(hw,nre),e(nre,QZr),e(hw,WZr),e(Xe,HZr),e(Xe,pw),e(pw,Fwe),e(Fwe,UZr),e(pw,JZr),e(pw,sre),e(sre,YZr),e(pw,KZr),e(Xe,ZZr),e(Xe,_w),e(_w,Twe),e(Twe,eet),e(_w,oet),e(_w,lre),e(lre,ret),e(_w,tet),e(Xe,aet),e(Xe,uw),e(uw,Mwe),e(Mwe,net),e(uw,set),e(uw,ire),e(ire,iet),e(uw,det),e(Xe,cet),e(Xe,bw),e(bw,Ewe),e(Ewe,fet),e(bw,met),e(bw,dre),e(dre,get),e(bw,het),e(Xe,pet),e(Xe,vw),e(vw,Cwe),e(Cwe,_et),e(vw,uet),e(vw,cre),e(cre,bet),e(vw,vet),e(Yr,Fet),M(Fw,Yr,null),b(f,Gze,u),b(f,Tf,u),e(Tf,Tw),e(Tw,wwe),M(J$,wwe,null),e(Tf,Tet),e(Tf,Awe),e(Awe,Met),b(f,Oze,u),b(f,Cr,u),M(Y$,Cr,null),e(Cr,Eet),e(Cr,Mf),e(Mf,Cet),e(Mf,fre),e(fre,wet),e(Mf,Aet),e(Mf,mre),e(mre,Let),e(Mf,yet),e(Cr,xet),e(Cr,K$),e(K$,$et),e(K$,Lwe),e(Lwe,ket),e(K$,Set),e(Cr,Ret),e(Cr,oa),M(Z$,oa,null),e(oa,Pet),e(oa,ywe),e(ywe,Bet),e(oa,Net),e(oa,Ef),e(Ef,Iet),e(Ef,xwe),e(xwe,qet),e(Ef,jet),e(Ef,gre),e(gre,Det),e(Ef,Get),e(oa,Oet),M(Mw,oa,null),e(Cr,Vet),e(Cr,Kr),M(ek,Kr,null),e(Kr,Xet),e(Kr,$we),e($we,zet),e(Kr,Qet),e(Kr,$n),e($n,Wet),e($n,kwe),e(kwe,Het),e($n,Uet),e($n,Swe),e(Swe,Jet),e($n,Yet),e($n,Rwe),e(Rwe,Ket),e($n,Zet),e(Kr,eot),e(Kr,Pwe),e(Pwe,Ew),e(Ew,Bwe),e(Bwe,oot),e(Ew,rot),e(Ew,hre),e(hre,tot),e(Ew,aot),e(Kr,not),M(Cw,Kr,null),b(f,Vze,u),b(f,Cf,u),e(Cf,ww),e(ww,Nwe),M(ok,Nwe,null),e(Cf,sot),e(Cf,Iwe),e(Iwe,lot),b(f,Xze,u),b(f,wr,u),M(rk,wr,null),e(wr,iot),e(wr,wf),e(wf,dot),e(wf,pre),e(pre,cot),e(wf,fot),e(wf,_re),e(_re,mot),e(wf,got),e(wr,hot),e(wr,tk),e(tk,pot),e(tk,qwe),e(qwe,_ot),e(tk,uot),e(wr,bot),e(wr,ra),M(ak,ra,null),e(ra,vot),e(ra,jwe),e(jwe,Fot),e(ra,Tot),e(ra,Af),e(Af,Mot),e(Af,Dwe),e(Dwe,Eot),e(Af,Cot),e(Af,ure),e(ure,wot),e(Af,Aot),e(ra,Lot),M(Aw,ra,null),e(wr,yot),e(wr,Zr),M(nk,Zr,null),e(Zr,xot),e(Zr,Gwe),e(Gwe,$ot),e(Zr,kot),e(Zr,kn),e(kn,Sot),e(kn,Owe),e(Owe,Rot),e(kn,Pot),e(kn,Vwe),e(Vwe,Bot),e(kn,Not),e(kn,Xwe),e(Xwe,Iot),e(kn,qot),e(Zr,jot),e(Zr,sk),e(sk,Lw),e(Lw,zwe),e(zwe,Dot),e(Lw,Got),e(Lw,bre),e(bre,Oot),e(Lw,Vot),e(sk,Xot),e(sk,yw),e(yw,Qwe),e(Qwe,zot),e(yw,Qot),e(yw,vre),e(vre,Wot),e(yw,Hot),e(Zr,Uot),M(xw,Zr,null),b(f,zze,u),b(f,Lf,u),e(Lf,$w),e($w,Wwe),M(lk,Wwe,null),e(Lf,Jot),e(Lf,Hwe),e(Hwe,Yot),b(f,Qze,u),b(f,Ar,u),M(ik,Ar,null),e(Ar,Kot),e(Ar,yf),e(yf,Zot),e(yf,Fre),e(Fre,ert),e(yf,ort),e(yf,Tre),e(Tre,rrt),e(yf,trt),e(Ar,art),e(Ar,dk),e(dk,nrt),e(dk,Uwe),e(Uwe,srt),e(dk,lrt),e(Ar,irt),e(Ar,ta),M(ck,ta,null),e(ta,drt),e(ta,Jwe),e(Jwe,crt),e(ta,frt),e(ta,xf),e(xf,mrt),e(xf,Ywe),e(Ywe,grt),e(xf,hrt),e(xf,Mre),e(Mre,prt),e(xf,_rt),e(ta,urt),M(kw,ta,null),e(Ar,brt),e(Ar,et),M(fk,et,null),e(et,vrt),e(et,Kwe),e(Kwe,Frt),e(et,Trt),e(et,Sn),e(Sn,Mrt),e(Sn,Zwe),e(Zwe,Ert),e(Sn,Crt),e(Sn,eAe),e(eAe,wrt),e(Sn,Art),e(Sn,oAe),e(oAe,Lrt),e(Sn,yrt),e(et,xrt),e(et,rAe),e(rAe,Sw),e(Sw,tAe),e(tAe,$rt),e(Sw,krt),e(Sw,Ere),e(Ere,Srt),e(Sw,Rrt),e(et,Prt),M(Rw,et,null),Wze=!0},p(f,[u]){const mk={};u&2&&(mk.$$scope={dirty:u,ctx:f}),qf.$set(mk);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),Jg.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),Sh.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),pp.$set(sAe);const gk={};u&2&&(gk.$$scope={dirty:u,ctx:f}),_p.$set(gk);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),Ip.$set(lAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),qp.$set(Rn);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),Gp.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),zu.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),Wu.$set(cAe);const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),D1.$set(hk);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),O1.$set(fAe);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),$2.$set(pk);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),S2.$set(mAe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),bb.$set(_k);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),Fb.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),Db.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),Ob.$set(pAe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Dv.$set($f);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),Ov.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),F5.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),M5.$set(bAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),$5.$set(uk);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),S5.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),_0.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),b0.$set(TAe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),iF.$set(at);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),cF.$set(bk);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),gF.$set(MAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),pF.$set(vk);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),$F.$set(EAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),SF.$set(nt);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),BF.$set(CAe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),IF.$set(kf);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),DF.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),OF.$set(AAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),ZF.$set(L);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),oT.$set(Pw);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),iT.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),cT.$set(yAe);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),MT.$set(Bw);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),CT.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),yT.$set($Ae);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),$T.$set(Nw);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),IT.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),jT.$set(SAe);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),XT.$set(Iw);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),QT.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),JT.$set(PAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),KT.$set(qw);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),o8.$set(BAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),t8.$set(NAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),c8.$set(jw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),m8.$set(IAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),p8.$set(qAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),u8.$set(Dw);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),m9.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),h9.$set(DAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),q9.$set(Gw);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),D9.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),eM.$set(OAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),rM.$set(Ow);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),dM.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),fM.$set(XAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),SM.$set(Vw);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),PM.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),zM.$set(QAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),WM.$set(Xw);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),F4.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),M4.$set(HAe);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),D4.$set(zw);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),O4.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),z4.$set(JAe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),W4.$set(Qw);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),U4.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),Y4.$set(KAe);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),bE.$set(Ww);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),FE.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),GE.$set(e6e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),VE.$set(Hw);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),zE.$set(o6e);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),WE.$set(r6e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),UE.$set(Uw);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),YE.$set(t6e);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),wC.$set(a6e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),LC.$set(Jw);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),qC.$set(n6e);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),DC.$set(s6e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),e3.$set(Yw);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),r3.$set(l6e);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),g3.$set(i6e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),p3.$set(Kw);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),A3.$set(d6e);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),y3.$set(c6e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),j3.$set(Zw);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),G3.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),K3.$set(m6e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),ew.$set(eA);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),dw.$set(g6e);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),fw.$set(h6e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),Fw.$set(oA);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),Mw.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),Cw.$set(_6e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),Aw.$set(rA);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),xw.$set(u6e);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),kw.$set(b6e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),Rw.$set(tA)},i(f){Wze||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(r7.$$.fragment,f),E(t7.$$.fragment,f),E(qf.$$.fragment,f),E(a7.$$.fragment,f),E(n7.$$.fragment,f),E(i7.$$.fragment,f),E(Jg.$$.fragment,f),E(d7.$$.fragment,f),E(c7.$$.fragment,f),E(f7.$$.fragment,f),E(h7.$$.fragment,f),E(Sh.$$.fragment,f),E(p7.$$.fragment,f),E(_7.$$.fragment,f),E(u7.$$.fragment,f),E(F7.$$.fragment,f),E(pp.$$.fragment,f),E(_p.$$.fragment,f),E(T7.$$.fragment,f),E(M7.$$.fragment,f),E(E7.$$.fragment,f),E(A7.$$.fragment,f),E(Ip.$$.fragment,f),E(qp.$$.fragment,f),E(L7.$$.fragment,f),E(y7.$$.fragment,f),E(x7.$$.fragment,f),E(k7.$$.fragment,f),E(Gp.$$.fragment,f),E(S7.$$.fragment,f),E(zu.$$.fragment,f),E(R7.$$.fragment,f),E(P7.$$.fragment,f),E(N7.$$.fragment,f),E(Wu.$$.fragment,f),E(I7.$$.fragment,f),E(D1.$$.fragment,f),E(q7.$$.fragment,f),E(j7.$$.fragment,f),E(G7.$$.fragment,f),E(O1.$$.fragment,f),E(O7.$$.fragment,f),E($2.$$.fragment,f),E(V7.$$.fragment,f),E(X7.$$.fragment,f),E(Q7.$$.fragment,f),E(S2.$$.fragment,f),E(W7.$$.fragment,f),E(bb.$$.fragment,f),E(H7.$$.fragment,f),E(U7.$$.fragment,f),E(Y7.$$.fragment,f),E(Fb.$$.fragment,f),E(K7.$$.fragment,f),E(Db.$$.fragment,f),E(Z7.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(Ob.$$.fragment,f),E(tL.$$.fragment,f),E(Dv.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Ov.$$.fragment,f),E(iL.$$.fragment,f),E(F5.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(M5.$$.fragment,f),E(gL.$$.fragment,f),E($5.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(S5.$$.fragment,f),E(bL.$$.fragment,f),E(_0.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(b0.$$.fragment,f),E(EL.$$.fragment,f),E(iF.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(cF.$$.fragment,f),E(yL.$$.fragment,f),E(gF.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(pF.$$.fragment,f),E(RL.$$.fragment,f),E($F.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(SF.$$.fragment,f),E(qL.$$.fragment,f),E(BF.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(IF.$$.fragment,f),E(VL.$$.fragment,f),E(DF.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(OF.$$.fragment,f),E(HL.$$.fragment,f),E(ZF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(oT.$$.fragment,f),E(ZL.$$.fragment,f),E(iT.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(cT.$$.fragment,f),E(ay.$$.fragment,f),E(MT.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(CT.$$.fragment,f),E(dy.$$.fragment,f),E(yT.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E($T.$$.fragment,f),E(py.$$.fragment,f),E(IT.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(jT.$$.fragment,f),E(Fy.$$.fragment,f),E(XT.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(QT.$$.fragment,f),E(wy.$$.fragment,f),E(JT.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(KT.$$.fragment,f),E(ky.$$.fragment,f),E(o8.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(t8.$$.fragment,f),E(Ny.$$.fragment,f),E(c8.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(m8.$$.fragment,f),E(Gy.$$.fragment,f),E(p8.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(u8.$$.fragment,f),E(Qy.$$.fragment,f),E(m9.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(h9.$$.fragment,f),E(Yy.$$.fragment,f),E(q9.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(ox.$$.fragment,f),E(D9.$$.fragment,f),E(rx.$$.fragment,f),E(eM.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(rM.$$.fragment,f),E(lx.$$.fragment,f),E(dM.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(fM.$$.fragment,f),E(mx.$$.fragment,f),E(SM.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(PM.$$.fragment,f),E(ux.$$.fragment,f),E(zM.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(WM.$$.fragment,f),E(Mx.$$.fragment,f),E(F4.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(M4.$$.fragment,f),E(Lx.$$.fragment,f),E(D4.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(O4.$$.fragment,f),E(Sx.$$.fragment,f),E(z4.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(W4.$$.fragment,f),E(qx.$$.fragment,f),E(U4.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(Y4.$$.fragment,f),E(Vx.$$.fragment,f),E(bE.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(FE.$$.fragment,f),E(Hx.$$.fragment,f),E(GE.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(VE.$$.fragment,f),E(Zx.$$.fragment,f),E(zE.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(WE.$$.fragment,f),E(a$.$$.fragment,f),E(UE.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(YE.$$.fragment,f),E(d$.$$.fragment,f),E(wC.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(LC.$$.fragment,f),E(h$.$$.fragment,f),E(qC.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(DC.$$.fragment,f),E(v$.$$.fragment,f),E(e3.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(r3.$$.fragment,f),E(C$.$$.fragment,f),E(g3.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(p3.$$.fragment,f),E(x$.$$.fragment,f),E(A3.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(y3.$$.fragment,f),E(P$.$$.fragment,f),E(j3.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(G3.$$.fragment,f),E(j$.$$.fragment,f),E(K3.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(ew.$$.fragment,f),E(X$.$$.fragment,f),E(dw.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(fw.$$.fragment,f),E(U$.$$.fragment,f),E(Fw.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(Mw.$$.fragment,f),E(ek.$$.fragment,f),E(Cw.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(Aw.$$.fragment,f),E(nk.$$.fragment,f),E(xw.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(kw.$$.fragment,f),E(fk.$$.fragment,f),E(Rw.$$.fragment,f),Wze=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(r7.$$.fragment,f),C(t7.$$.fragment,f),C(qf.$$.fragment,f),C(a7.$$.fragment,f),C(n7.$$.fragment,f),C(i7.$$.fragment,f),C(Jg.$$.fragment,f),C(d7.$$.fragment,f),C(c7.$$.fragment,f),C(f7.$$.fragment,f),C(h7.$$.fragment,f),C(Sh.$$.fragment,f),C(p7.$$.fragment,f),C(_7.$$.fragment,f),C(u7.$$.fragment,f),C(F7.$$.fragment,f),C(pp.$$.fragment,f),C(_p.$$.fragment,f),C(T7.$$.fragment,f),C(M7.$$.fragment,f),C(E7.$$.fragment,f),C(A7.$$.fragment,f),C(Ip.$$.fragment,f),C(qp.$$.fragment,f),C(L7.$$.fragment,f),C(y7.$$.fragment,f),C(x7.$$.fragment,f),C(k7.$$.fragment,f),C(Gp.$$.fragment,f),C(S7.$$.fragment,f),C(zu.$$.fragment,f),C(R7.$$.fragment,f),C(P7.$$.fragment,f),C(N7.$$.fragment,f),C(Wu.$$.fragment,f),C(I7.$$.fragment,f),C(D1.$$.fragment,f),C(q7.$$.fragment,f),C(j7.$$.fragment,f),C(G7.$$.fragment,f),C(O1.$$.fragment,f),C(O7.$$.fragment,f),C($2.$$.fragment,f),C(V7.$$.fragment,f),C(X7.$$.fragment,f),C(Q7.$$.fragment,f),C(S2.$$.fragment,f),C(W7.$$.fragment,f),C(bb.$$.fragment,f),C(H7.$$.fragment,f),C(U7.$$.fragment,f),C(Y7.$$.fragment,f),C(Fb.$$.fragment,f),C(K7.$$.fragment,f),C(Db.$$.fragment,f),C(Z7.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(Ob.$$.fragment,f),C(tL.$$.fragment,f),C(Dv.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Ov.$$.fragment,f),C(iL.$$.fragment,f),C(F5.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(M5.$$.fragment,f),C(gL.$$.fragment,f),C($5.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(S5.$$.fragment,f),C(bL.$$.fragment,f),C(_0.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(b0.$$.fragment,f),C(EL.$$.fragment,f),C(iF.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(cF.$$.fragment,f),C(yL.$$.fragment,f),C(gF.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(pF.$$.fragment,f),C(RL.$$.fragment,f),C($F.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(SF.$$.fragment,f),C(qL.$$.fragment,f),C(BF.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(IF.$$.fragment,f),C(VL.$$.fragment,f),C(DF.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(OF.$$.fragment,f),C(HL.$$.fragment,f),C(ZF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(oT.$$.fragment,f),C(ZL.$$.fragment,f),C(iT.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(cT.$$.fragment,f),C(ay.$$.fragment,f),C(MT.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(CT.$$.fragment,f),C(dy.$$.fragment,f),C(yT.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C($T.$$.fragment,f),C(py.$$.fragment,f),C(IT.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(jT.$$.fragment,f),C(Fy.$$.fragment,f),C(XT.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(QT.$$.fragment,f),C(wy.$$.fragment,f),C(JT.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(KT.$$.fragment,f),C(ky.$$.fragment,f),C(o8.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(t8.$$.fragment,f),C(Ny.$$.fragment,f),C(c8.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(m8.$$.fragment,f),C(Gy.$$.fragment,f),C(p8.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(u8.$$.fragment,f),C(Qy.$$.fragment,f),C(m9.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(h9.$$.fragment,f),C(Yy.$$.fragment,f),C(q9.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(ox.$$.fragment,f),C(D9.$$.fragment,f),C(rx.$$.fragment,f),C(eM.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(rM.$$.fragment,f),C(lx.$$.fragment,f),C(dM.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(fM.$$.fragment,f),C(mx.$$.fragment,f),C(SM.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(PM.$$.fragment,f),C(ux.$$.fragment,f),C(zM.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(WM.$$.fragment,f),C(Mx.$$.fragment,f),C(F4.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(M4.$$.fragment,f),C(Lx.$$.fragment,f),C(D4.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(O4.$$.fragment,f),C(Sx.$$.fragment,f),C(z4.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(W4.$$.fragment,f),C(qx.$$.fragment,f),C(U4.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(Y4.$$.fragment,f),C(Vx.$$.fragment,f),C(bE.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(FE.$$.fragment,f),C(Hx.$$.fragment,f),C(GE.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(VE.$$.fragment,f),C(Zx.$$.fragment,f),C(zE.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(WE.$$.fragment,f),C(a$.$$.fragment,f),C(UE.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(YE.$$.fragment,f),C(d$.$$.fragment,f),C(wC.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(LC.$$.fragment,f),C(h$.$$.fragment,f),C(qC.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(DC.$$.fragment,f),C(v$.$$.fragment,f),C(e3.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(r3.$$.fragment,f),C(C$.$$.fragment,f),C(g3.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(p3.$$.fragment,f),C(x$.$$.fragment,f),C(A3.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(y3.$$.fragment,f),C(P$.$$.fragment,f),C(j3.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(G3.$$.fragment,f),C(j$.$$.fragment,f),C(K3.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(ew.$$.fragment,f),C(X$.$$.fragment,f),C(dw.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(fw.$$.fragment,f),C(U$.$$.fragment,f),C(Fw.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(Mw.$$.fragment,f),C(ek.$$.fragment,f),C(Cw.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(Aw.$$.fragment,f),C(nk.$$.fragment,f),C(xw.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(kw.$$.fragment,f),C(fk.$$.fragment,f),C(Rw.$$.fragment,f),Wze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(OVe),f&&t(Ri),w(r7),f&&t(VVe),f&&t(qn),f&&t(XVe),w(t7,f),f&&t(zVe),f&&t(IS),f&&t(QVe),w(qf,f),f&&t(WVe),f&&t(Pi),w(a7),f&&t(HVe),f&&t(wo),w(n7),w(i7),w(Jg),w(d7),f&&t(UVe),f&&t(Ni),w(c7),f&&t(JVe),f&&t(Ao),w(f7),w(h7),w(Sh),w(p7),f&&t(YVe),f&&t(Ii),w(_7),f&&t(KVe),f&&t(Lo),w(u7),w(F7),w(pp),w(_p),w(T7),f&&t(ZVe),f&&t(qi),w(M7),f&&t(eXe),f&&t(yo),w(E7),w(A7),w(Ip),w(qp),w(L7),f&&t(oXe),f&&t(Di),w(y7),f&&t(rXe),f&&t(xo),w(x7),w(k7),w(Gp),w(S7),w(zu),f&&t(tXe),f&&t(Vi),w(R7),f&&t(aXe),f&&t($o),w(P7),w(N7),w(Wu),w(I7),w(D1),f&&t(nXe),f&&t(Qi),w(q7),f&&t(sXe),f&&t(ko),w(j7),w(G7),w(O1),w(O7),w($2),f&&t(lXe),f&&t(Ui),w(V7),f&&t(iXe),f&&t(So),w(X7),w(Q7),w(S2),w(W7),w(bb),f&&t(dXe),f&&t(Ki),w(H7),f&&t(cXe),f&&t(Ro),w(U7),w(Y7),w(Fb),w(K7),w(Db),f&&t(fXe),f&&t(od),w(Z7),f&&t(mXe),f&&t(Po),w(eL),w(rL),w(Ob),w(tL),w(Dv),f&&t(gXe),f&&t(ad),w(aL),f&&t(hXe),f&&t(Bo),w(nL),w(lL),w(Ov),w(iL),w(F5),f&&t(pXe),f&&t(ld),w(dL),f&&t(_Xe),f&&t(No),w(cL),w(mL),w(M5),w(gL),w($5),f&&t(uXe),f&&t(cd),w(hL),f&&t(bXe),f&&t(qo),w(pL),w(uL),w(S5),w(bL),w(_0),f&&t(vXe),f&&t(gd),w(vL),f&&t(FXe),f&&t(jo),w(FL),w(ML),w(b0),w(EL),w(iF),f&&t(TXe),f&&t(_d),w(CL),f&&t(MXe),f&&t(Do),w(wL),w(LL),w(cF),w(yL),w(gF),f&&t(EXe),f&&t(vd),w(xL),f&&t(CXe),f&&t(Go),w($L),w(SL),w(pF),w(RL),w($F),f&&t(wXe),f&&t(Md),w(PL),f&&t(AXe),f&&t(Oo),w(BL),w(IL),w(SF),w(qL),w(BF),f&&t(LXe),f&&t(wd),w(jL),f&&t(yXe),f&&t(Vo),w(DL),w(OL),w(IF),w(VL),w(DF),f&&t(xXe),f&&t(yd),w(XL),f&&t($Xe),f&&t(Xo),w(zL),w(WL),w(OF),w(HL),w(ZF),f&&t(kXe),f&&t(kd),w(UL),f&&t(SXe),f&&t(zo),w(JL),w(KL),w(oT),w(ZL),w(iT),f&&t(RXe),f&&t(Pd),w(ey),f&&t(PXe),f&&t(Qo),w(oy),w(ty),w(cT),w(ay),w(MT),f&&t(BXe),f&&t(Id),w(ny),f&&t(NXe),f&&t(Wo),w(sy),w(iy),w(CT),w(dy),w(yT),f&&t(IXe),f&&t(Dd),w(fy),f&&t(qXe),f&&t(Ho),w(my),w(hy),w($T),w(py),w(IT),f&&t(jXe),f&&t(Vd),w(_y),f&&t(DXe),f&&t(Uo),w(uy),w(vy),w(jT),w(Fy),w(XT),f&&t(GXe),f&&t(Wd),w(Ty),f&&t(OXe),f&&t(Jo),w(My),w(Cy),w(QT),w(wy),w(JT),f&&t(VXe),f&&t(Jd),w(Ly),f&&t(XXe),f&&t(Yo),w(yy),w($y),w(KT),w(ky),w(o8),f&&t(zXe),f&&t(Zd),w(Sy),f&&t(QXe),f&&t(Ko),w(Ry),w(By),w(t8),w(Ny),w(c8),f&&t(WXe),f&&t(rc),w(Iy),f&&t(HXe),f&&t(Zo),w(qy),w(Dy),w(m8),w(Gy),w(p8),f&&t(UXe),f&&t(nc),w(Oy),f&&t(JXe),f&&t(er),w(Vy),w(zy),w(u8),w(Qy),w(m9),f&&t(YXe),f&&t(ic),w(Wy),f&&t(KXe),f&&t(or),w(Hy),w(Jy),w(h9),w(Yy),w(q9),f&&t(ZXe),f&&t(fc),w(Ky),f&&t(eze),f&&t(rr),w(Zy),w(ox),w(D9),w(rx),w(eM),f&&t(oze),f&&t(hc),w(tx),f&&t(rze),f&&t(tr),w(ax),w(sx),w(rM),w(lx),w(dM),f&&t(tze),f&&t(uc),w(ix),f&&t(aze),f&&t(nr),w(dx),w(fx),w(fM),w(mx),w(SM),f&&t(nze),f&&t(Fc),w(gx),f&&t(sze),f&&t(sr),w(hx),w(_x),w(PM),w(ux),w(zM),f&&t(lze),f&&t(Ec),w(bx),f&&t(ize),f&&t(lr),w(vx),w(Tx),w(WM),w(Mx),w(F4),f&&t(dze),f&&t(Ac),w(Ex),f&&t(cze),f&&t(ir),w(Cx),w(Ax),w(M4),w(Lx),w(D4),f&&t(fze),f&&t(xc),w(yx),f&&t(mze),f&&t(dr),w(xx),w(kx),w(O4),w(Sx),w(z4),f&&t(gze),f&&t(Sc),w(Px),f&&t(hze),f&&t(cr),w(Bx),w(Ix),w(W4),w(qx),w(U4),f&&t(pze),f&&t(Bc),w(jx),f&&t(_ze),f&&t(fr),w(Dx),w(Ox),w(Y4),w(Vx),w(bE),f&&t(uze),f&&t(qc),w(Xx),f&&t(bze),f&&t(mr),w(zx),w(Wx),w(FE),w(Hx),w(GE),f&&t(vze),f&&t(Gc),w(Ux),f&&t(Fze),f&&t(gr),w(Jx),w(Kx),w(VE),w(Zx),w(zE),f&&t(Tze),f&&t(Xc),w(e$),f&&t(Mze),f&&t(hr),w(o$),w(t$),w(WE),w(a$),w(UE),f&&t(Eze),f&&t(Wc),w(n$),f&&t(Cze),f&&t(pr),w(s$),w(i$),w(YE),w(d$),w(wC),f&&t(wze),f&&t(Jc),w(c$),f&&t(Aze),f&&t(_r),w(f$),w(g$),w(LC),w(h$),w(qC),f&&t(Lze),f&&t(Zc),w(p$),f&&t(yze),f&&t(ur),w(_$),w(b$),w(DC),w(v$),w(e3),f&&t(xze),f&&t(rf),w(F$),f&&t($ze),f&&t(br),w(T$),w(E$),w(r3),w(C$),w(g3),f&&t(kze),f&&t(nf),w(w$),f&&t(Sze),f&&t(vr),w(A$),w(y$),w(p3),w(x$),w(A3),f&&t(Rze),f&&t(df),w($$),f&&t(Pze),f&&t(Fr),w(k$),w(R$),w(y3),w(P$),w(j3),f&&t(Bze),f&&t(mf),w(B$),f&&t(Nze),f&&t(Tr),w(N$),w(q$),w(G3),w(j$),w(K3),f&&t(Ize),f&&t(pf),w(D$),f&&t(qze),f&&t(Mr),w(G$),w(V$),w(ew),w(X$),w(dw),f&&t(jze),f&&t(bf),w(z$),f&&t(Dze),f&&t(Er),w(Q$),w(H$),w(fw),w(U$),w(Fw),f&&t(Gze),f&&t(Tf),w(J$),f&&t(Oze),f&&t(Cr),w(Y$),w(Z$),w(Mw),w(ek),w(Cw),f&&t(Vze),f&&t(Cf),w(ok),f&&t(Xze),f&&t(wr),w(rk),w(ak),w(Aw),w(nk),w(xw),f&&t(zze),f&&t(Lf),w(lk),f&&t(Qze),f&&t(Ar),w(ik),w(ck),w(kw),w(fk),w(Rw)}}}const dHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cHt($){return iQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class uHt extends aQt{constructor(g){super();nQt(this,g,cHt,iHt,sQt,{})}}export{uHt as default,dHt as metadata};
