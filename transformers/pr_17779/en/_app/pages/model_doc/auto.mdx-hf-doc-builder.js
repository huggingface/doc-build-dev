import{S as CGt,i as wGt,s as AGt,e as a,k as l,w as F,t as o,M as LGt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as yGt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as QKr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xGt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,$6,$f,Oe,Qe,wi,Rn,k6,Pn,Bn,S6,Ai,In,R6,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),$6=o(")."),$f=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),k6=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),S6=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),R6=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var iS=s(p);m=r(iS,"NewModelConfig"),iS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var dS=s(Mi);xf=r(dS,"model_type"),dS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var cS=s(Ei);Ci=r(cS,'"new-model"'),cS.forEach(t),$6=r(Ae,")."),Ae.forEach(t),$f=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),k6=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var fS=s(Pn);Bn=r(fS,"PreTrainedModel"),fS.forEach(t),S6=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);In=r(Sf,"config_class"),Sf.forEach(t),R6=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var mS=s(Li);kf=r(mS,"NewModelConfig"),mS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,at),e(g,Ei),e(Ei,Ci),e(g,$6),b(We,$f,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,k6),e(Oe,Pn),e(Pn,Bn),e(Oe,S6),e(Oe,Ai),e(Ai,In),e(Oe,R6),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(We){We&&t(g),We&&t($f),We&&t(Oe)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,$6,$f,Oe,Qe,wi,Rn,k6,Pn,Bn,S6,Ai,In,R6,Li,kf,xa,We,Ae,iS,yi,dS,cS,Co,$a,fS,Sf,mS,TQe,sOe,xi,Rf,Cte,P6,MQe,wte,EQe,lOe,Nn,CQe,Ate,wQe,AQe,Lte,LQe,yQe,iOe,B6,dOe,gS,xQe,cOe,Pf,fOe,$i,Bf,yte,I6,$Qe,xte,kQe,mOe,wo,N6,SQe,q6,RQe,hS,PQe,BQe,IQe,j6,NQe,$te,qQe,jQe,DQe,Ar,D6,GQe,kte,OQe,VQe,ki,XQe,Ste,zQe,QQe,Rte,WQe,HQe,UQe,A,If,Pte,JQe,YQe,pS,KQe,ZQe,eWe,Nf,Bte,oWe,rWe,_S,tWe,aWe,nWe,qf,Ite,sWe,lWe,uS,iWe,dWe,cWe,jf,Nte,fWe,mWe,bS,gWe,hWe,pWe,Df,qte,_We,uWe,vS,bWe,vWe,FWe,Gf,jte,TWe,MWe,FS,EWe,CWe,wWe,Of,Dte,AWe,LWe,TS,yWe,xWe,$We,Vf,Gte,kWe,SWe,MS,RWe,PWe,BWe,Xf,Ote,IWe,NWe,ES,qWe,jWe,DWe,zf,Vte,GWe,OWe,CS,VWe,XWe,zWe,Qf,Xte,QWe,WWe,wS,HWe,UWe,JWe,Wf,zte,YWe,KWe,AS,ZWe,eHe,oHe,Hf,Qte,rHe,tHe,LS,aHe,nHe,sHe,Uf,Wte,lHe,iHe,yS,dHe,cHe,fHe,Jf,Hte,mHe,gHe,xS,hHe,pHe,_He,Yf,Ute,uHe,bHe,$S,vHe,FHe,THe,Kf,Jte,MHe,EHe,kS,CHe,wHe,AHe,Zf,Yte,LHe,yHe,SS,xHe,$He,kHe,em,Kte,SHe,RHe,RS,PHe,BHe,IHe,om,Zte,NHe,qHe,PS,jHe,DHe,GHe,rm,eae,OHe,VHe,BS,XHe,zHe,QHe,tm,oae,WHe,HHe,IS,UHe,JHe,YHe,am,rae,KHe,ZHe,NS,eUe,oUe,rUe,nm,tae,tUe,aUe,qS,nUe,sUe,lUe,sm,aae,iUe,dUe,jS,cUe,fUe,mUe,lm,nae,gUe,hUe,DS,pUe,_Ue,uUe,im,sae,bUe,vUe,GS,FUe,TUe,MUe,dm,lae,EUe,CUe,OS,wUe,AUe,LUe,cm,iae,yUe,xUe,VS,$Ue,kUe,SUe,fm,dae,RUe,PUe,XS,BUe,IUe,NUe,mm,cae,qUe,jUe,zS,DUe,GUe,OUe,gm,fae,VUe,XUe,QS,zUe,QUe,WUe,hm,mae,HUe,UUe,WS,JUe,YUe,KUe,pm,gae,ZUe,eJe,HS,oJe,rJe,tJe,_m,hae,aJe,nJe,US,sJe,lJe,iJe,um,pae,dJe,cJe,JS,fJe,mJe,gJe,bm,_ae,hJe,pJe,YS,_Je,uJe,bJe,vm,uae,vJe,FJe,KS,TJe,MJe,EJe,Fm,bae,CJe,wJe,ZS,AJe,LJe,yJe,Tm,vae,xJe,$Je,eR,kJe,SJe,RJe,Mm,Fae,PJe,BJe,oR,IJe,NJe,qJe,Em,Tae,jJe,DJe,rR,GJe,OJe,VJe,Cm,Mae,XJe,zJe,tR,QJe,WJe,HJe,wm,Eae,UJe,JJe,aR,YJe,KJe,ZJe,Am,Cae,eYe,oYe,nR,rYe,tYe,aYe,Lm,wae,nYe,sYe,sR,lYe,iYe,dYe,ym,Aae,cYe,fYe,lR,mYe,gYe,hYe,xm,Lae,pYe,_Ye,iR,uYe,bYe,vYe,$m,yae,FYe,TYe,dR,MYe,EYe,CYe,km,xae,wYe,AYe,cR,LYe,yYe,xYe,Sm,$ae,$Ye,kYe,fR,SYe,RYe,PYe,Rm,kae,BYe,IYe,mR,NYe,qYe,jYe,Pm,Sae,DYe,GYe,gR,OYe,VYe,XYe,Bm,Rae,zYe,QYe,hR,WYe,HYe,UYe,Im,Pae,JYe,YYe,pR,KYe,ZYe,eKe,Nm,Bae,oKe,rKe,_R,tKe,aKe,nKe,qm,Iae,sKe,lKe,uR,iKe,dKe,cKe,jm,Nae,fKe,mKe,bR,gKe,hKe,pKe,Dm,qae,_Ke,uKe,vR,bKe,vKe,FKe,Gm,jae,TKe,MKe,FR,EKe,CKe,wKe,Om,Dae,AKe,LKe,TR,yKe,xKe,$Ke,Vm,Gae,kKe,SKe,MR,RKe,PKe,BKe,Xm,Oae,IKe,NKe,ER,qKe,jKe,DKe,zm,Vae,GKe,OKe,CR,VKe,XKe,zKe,Qm,Xae,QKe,WKe,wR,HKe,UKe,JKe,Wm,zae,YKe,KKe,AR,ZKe,eZe,oZe,Hm,Qae,rZe,tZe,LR,aZe,nZe,sZe,Um,Wae,lZe,iZe,yR,dZe,cZe,fZe,Jm,Hae,mZe,gZe,xR,hZe,pZe,_Ze,Ym,Uae,uZe,bZe,$R,vZe,FZe,TZe,Km,Jae,MZe,EZe,kR,CZe,wZe,AZe,Zm,Yae,LZe,yZe,SR,xZe,$Ze,kZe,eg,Kae,SZe,RZe,RR,PZe,BZe,IZe,og,Zae,NZe,qZe,PR,jZe,DZe,GZe,rg,ene,OZe,VZe,BR,XZe,zZe,QZe,tg,one,WZe,HZe,IR,UZe,JZe,YZe,ag,rne,KZe,ZZe,NR,eeo,oeo,reo,ng,tne,teo,aeo,qR,neo,seo,leo,sg,ane,ieo,deo,jR,ceo,feo,meo,lg,nne,geo,heo,DR,peo,_eo,ueo,ig,sne,beo,veo,GR,Feo,Teo,Meo,dg,lne,Eeo,Ceo,OR,weo,Aeo,Leo,cg,ine,yeo,xeo,VR,$eo,keo,Seo,fg,dne,Reo,Peo,XR,Beo,Ieo,Neo,mg,cne,qeo,jeo,zR,Deo,Geo,Oeo,gg,fne,Veo,Xeo,QR,zeo,Qeo,Weo,hg,mne,Heo,Ueo,WR,Jeo,Yeo,Keo,pg,gne,Zeo,eoo,HR,ooo,roo,too,_g,hne,aoo,noo,UR,soo,loo,ioo,ug,pne,doo,coo,JR,foo,moo,goo,bg,_ne,hoo,poo,YR,_oo,uoo,boo,vg,une,voo,Foo,KR,Too,Moo,Eoo,Fg,bne,Coo,woo,ZR,Aoo,Loo,yoo,Tg,vne,xoo,$oo,eP,koo,Soo,Roo,Mg,Fne,Poo,Boo,oP,Ioo,Noo,qoo,Eg,Tne,joo,Doo,rP,Goo,Ooo,Voo,Cg,Mne,Xoo,zoo,tP,Qoo,Woo,Hoo,wg,Ene,Uoo,Joo,aP,Yoo,Koo,Zoo,Ag,Cne,ero,oro,nP,rro,tro,aro,Lg,wne,nro,sro,sP,lro,iro,dro,yg,Ane,cro,fro,lP,mro,gro,hro,xg,Lne,pro,_ro,iP,uro,bro,vro,$g,yne,Fro,Tro,dP,Mro,Ero,Cro,kg,xne,wro,Aro,cP,Lro,yro,xro,Sg,$ne,$ro,kro,fP,Sro,Rro,Pro,Rg,kne,Bro,Iro,mP,Nro,qro,jro,Pg,Sne,Dro,Gro,gP,Oro,Vro,Xro,Bg,Rne,zro,Qro,hP,Wro,Hro,Uro,Ig,Pne,Jro,Yro,pP,Kro,Zro,eto,Ng,Bne,oto,rto,_P,tto,ato,nto,qg,Ine,sto,lto,uP,ito,dto,cto,jg,Nne,fto,mto,bP,gto,hto,pto,Dg,qne,_to,uto,vP,bto,vto,Fto,Gg,jne,Tto,Mto,FP,Eto,Cto,wto,Og,Dne,Ato,Lto,TP,yto,xto,$to,Vg,kto,Xg,G6,Sto,Gne,Rto,gOe,Si,zg,One,O6,Pto,Vne,Bto,hOe,Ao,V6,Ito,X6,Nto,MP,qto,jto,Dto,z6,Gto,Xne,Oto,Vto,Xto,Lr,Q6,zto,zne,Qto,Wto,ka,Hto,Qne,Uto,Jto,Wne,Yto,Kto,Hne,Zto,eao,oao,k,qn,Une,rao,tao,EP,aao,nao,CP,sao,lao,iao,jn,Jne,dao,cao,wP,fao,mao,AP,gao,hao,pao,Dn,Yne,_ao,uao,LP,bao,vao,yP,Fao,Tao,Mao,Qg,Kne,Eao,Cao,xP,wao,Aao,Lao,Gn,Zne,yao,xao,$P,$ao,kao,kP,Sao,Rao,Pao,Wg,ese,Bao,Iao,SP,Nao,qao,jao,Hg,ose,Dao,Gao,RP,Oao,Vao,Xao,Ug,rse,zao,Qao,PP,Wao,Hao,Uao,On,tse,Jao,Yao,BP,Kao,Zao,IP,eno,ono,rno,Vn,ase,tno,ano,NP,nno,sno,qP,lno,ino,dno,Xn,nse,cno,fno,jP,mno,gno,DP,hno,pno,_no,Jg,sse,uno,bno,GP,vno,Fno,Tno,Yg,lse,Mno,Eno,OP,Cno,wno,Ano,Kg,ise,Lno,yno,VP,xno,$no,kno,zn,dse,Sno,Rno,XP,Pno,Bno,zP,Ino,Nno,qno,Zg,cse,jno,Dno,QP,Gno,Ono,Vno,Qn,fse,Xno,zno,WP,Qno,Wno,HP,Hno,Uno,Jno,Wn,mse,Yno,Kno,UP,Zno,eso,JP,oso,rso,tso,Hn,gse,aso,nso,YP,sso,lso,KP,iso,dso,cso,Un,hse,fso,mso,ZP,gso,hso,eB,pso,_so,uso,eh,pse,bso,vso,oB,Fso,Tso,Mso,Jn,_se,Eso,Cso,rB,wso,Aso,tB,Lso,yso,xso,Yn,use,$so,kso,aB,Sso,Rso,nB,Pso,Bso,Iso,Kn,bse,Nso,qso,sB,jso,Dso,lB,Gso,Oso,Vso,Zn,vse,Xso,zso,iB,Qso,Wso,dB,Hso,Uso,Jso,es,Fse,Yso,Kso,cB,Zso,elo,fB,olo,rlo,tlo,os,Tse,alo,nlo,mB,slo,llo,gB,ilo,dlo,clo,oh,Mse,flo,mlo,hB,glo,hlo,plo,rs,Ese,_lo,ulo,pB,blo,vlo,_B,Flo,Tlo,Mlo,rh,Cse,Elo,Clo,uB,wlo,Alo,Llo,ts,wse,ylo,xlo,bB,$lo,klo,vB,Slo,Rlo,Plo,as,Ase,Blo,Ilo,FB,Nlo,qlo,TB,jlo,Dlo,Glo,ns,Lse,Olo,Vlo,MB,Xlo,zlo,EB,Qlo,Wlo,Hlo,th,yse,Ulo,Jlo,CB,Ylo,Klo,Zlo,ss,xse,eio,oio,wB,rio,tio,AB,aio,nio,sio,ls,$se,lio,iio,LB,dio,cio,yB,fio,mio,gio,ah,kse,hio,pio,xB,_io,uio,bio,is,Sse,vio,Fio,$B,Tio,Mio,kB,Eio,Cio,wio,ds,Rse,Aio,Lio,SB,yio,xio,RB,$io,kio,Sio,cs,Pse,Rio,Pio,PB,Bio,Iio,BB,Nio,qio,jio,fs,Bse,Dio,Gio,IB,Oio,Vio,NB,Xio,zio,Qio,ms,Ise,Wio,Hio,qB,Uio,Jio,jB,Yio,Kio,Zio,gs,Nse,edo,odo,DB,rdo,tdo,GB,ado,ndo,sdo,hs,qse,ldo,ido,OB,ddo,cdo,VB,fdo,mdo,gdo,ps,jse,hdo,pdo,XB,_do,udo,zB,bdo,vdo,Fdo,nh,Dse,Tdo,Mdo,QB,Edo,Cdo,wdo,_s,Gse,Ado,Ldo,WB,ydo,xdo,HB,$do,kdo,Sdo,sh,Ose,Rdo,Pdo,UB,Bdo,Ido,Ndo,lh,Vse,qdo,jdo,JB,Ddo,Gdo,Odo,us,Xse,Vdo,Xdo,YB,zdo,Qdo,KB,Wdo,Hdo,Udo,bs,zse,Jdo,Ydo,ZB,Kdo,Zdo,eI,eco,oco,rco,vs,Qse,tco,aco,oI,nco,sco,rI,lco,ico,dco,ih,Wse,cco,fco,tI,mco,gco,hco,Fs,Hse,pco,_co,aI,uco,bco,nI,vco,Fco,Tco,Ts,Use,Mco,Eco,sI,Cco,wco,lI,Aco,Lco,yco,Ms,Jse,xco,$co,iI,kco,Sco,dI,Rco,Pco,Bco,Es,Yse,Ico,Nco,cI,qco,jco,fI,Dco,Gco,Oco,Cs,Kse,Vco,Xco,mI,zco,Qco,gI,Wco,Hco,Uco,ws,Zse,Jco,Yco,hI,Kco,Zco,pI,efo,ofo,rfo,dh,ele,tfo,afo,_I,nfo,sfo,lfo,As,ole,ifo,dfo,uI,cfo,ffo,bI,mfo,gfo,hfo,ch,rle,pfo,_fo,vI,ufo,bfo,vfo,fh,tle,Ffo,Tfo,FI,Mfo,Efo,Cfo,mh,ale,wfo,Afo,TI,Lfo,yfo,xfo,gh,nle,$fo,kfo,MI,Sfo,Rfo,Pfo,Ls,sle,Bfo,Ifo,EI,Nfo,qfo,CI,jfo,Dfo,Gfo,hh,lle,Ofo,Vfo,wI,Xfo,zfo,Qfo,ys,ile,Wfo,Hfo,AI,Ufo,Jfo,LI,Yfo,Kfo,Zfo,xs,dle,emo,omo,yI,rmo,tmo,xI,amo,nmo,smo,$s,cle,lmo,imo,$I,dmo,cmo,kI,fmo,mmo,gmo,ks,fle,hmo,pmo,SI,_mo,umo,RI,bmo,vmo,Fmo,Ss,mle,Tmo,Mmo,PI,Emo,Cmo,BI,wmo,Amo,Lmo,Rs,gle,ymo,xmo,II,$mo,kmo,NI,Smo,Rmo,Pmo,ph,hle,Bmo,Imo,qI,Nmo,qmo,jmo,_h,ple,Dmo,Gmo,jI,Omo,Vmo,Xmo,Ps,_le,zmo,Qmo,DI,Wmo,Hmo,GI,Umo,Jmo,Ymo,Bs,ule,Kmo,Zmo,OI,ego,ogo,VI,rgo,tgo,ago,Is,ble,ngo,sgo,XI,lgo,igo,zI,dgo,cgo,fgo,uh,vle,mgo,ggo,QI,hgo,pgo,_go,bh,Fle,ugo,bgo,WI,vgo,Fgo,Tgo,vh,Tle,Mgo,Ego,HI,Cgo,wgo,Ago,Ns,Mle,Lgo,ygo,UI,xgo,$go,JI,kgo,Sgo,Rgo,qs,Ele,Pgo,Bgo,YI,Igo,Ngo,KI,qgo,jgo,Dgo,Fh,Cle,Ggo,Ogo,ZI,Vgo,Xgo,zgo,Th,wle,Qgo,Wgo,eN,Hgo,Ugo,Jgo,Mh,Ale,Ygo,Kgo,oN,Zgo,eho,oho,js,Lle,rho,tho,rN,aho,nho,tN,sho,lho,iho,Eh,yle,dho,cho,aN,fho,mho,gho,Ch,xle,hho,pho,nN,_ho,uho,bho,Ds,$le,vho,Fho,sN,Tho,Mho,lN,Eho,Cho,who,Gs,kle,Aho,Lho,iN,yho,xho,dN,$ho,kho,Sho,Os,Sle,Rho,Pho,cN,Bho,Iho,fN,Nho,qho,jho,Vs,Rle,Dho,Gho,mN,Oho,Vho,gN,Xho,zho,Qho,wh,Who,Ah,W6,Hho,Ple,Uho,pOe,Ri,Lh,Ble,H6,Jho,Ile,Yho,_Oe,Lo,U6,Kho,J6,Zho,hN,epo,opo,rpo,Y6,tpo,Nle,apo,npo,spo,He,K6,lpo,qle,ipo,dpo,Sa,cpo,jle,fpo,mpo,Dle,gpo,hpo,Gle,ppo,_po,upo,Y,yh,Ole,bpo,vpo,pN,Fpo,Tpo,Mpo,xh,Vle,Epo,Cpo,_N,wpo,Apo,Lpo,$h,Xle,ypo,xpo,uN,$po,kpo,Spo,kh,zle,Rpo,Ppo,bN,Bpo,Ipo,Npo,Sh,Qle,qpo,jpo,vN,Dpo,Gpo,Opo,Rh,Wle,Vpo,Xpo,FN,zpo,Qpo,Wpo,Ph,Hle,Hpo,Upo,TN,Jpo,Ypo,Kpo,Bh,Ule,Zpo,e_o,MN,o_o,r_o,t_o,Ih,Jle,a_o,n_o,EN,s_o,l_o,i_o,Nh,Yle,d_o,c_o,CN,f_o,m_o,g_o,qh,Kle,h_o,p_o,wN,__o,u_o,b_o,jh,Zle,v_o,F_o,AN,T_o,M_o,E_o,Dh,eie,C_o,w_o,LN,A_o,L_o,y_o,Gh,oie,x_o,$_o,yN,k_o,S_o,R_o,Oh,rie,P_o,B_o,xN,I_o,N_o,q_o,Vh,tie,j_o,D_o,$N,G_o,O_o,V_o,Xh,aie,X_o,z_o,kN,Q_o,W_o,H_o,zh,nie,U_o,J_o,SN,Y_o,K_o,Z_o,Qh,sie,euo,ouo,RN,ruo,tuo,auo,Wh,lie,nuo,suo,PN,luo,iuo,duo,Hh,iie,cuo,fuo,BN,muo,guo,huo,Uh,die,puo,_uo,IN,uuo,buo,vuo,Jh,cie,Fuo,Tuo,NN,Muo,Euo,Cuo,Yh,fie,wuo,Auo,qN,Luo,yuo,xuo,Kh,mie,$uo,kuo,jN,Suo,Ruo,Puo,Zh,gie,Buo,Iuo,DN,Nuo,quo,juo,ep,hie,Duo,Guo,GN,Ouo,Vuo,Xuo,op,pie,zuo,Quo,ON,Wuo,Huo,Uuo,rp,_ie,Juo,Yuo,VN,Kuo,Zuo,e7o,tp,uie,o7o,r7o,XN,t7o,a7o,n7o,ap,bie,s7o,l7o,zN,i7o,d7o,c7o,np,vie,f7o,m7o,QN,g7o,h7o,p7o,sp,_7o,lp,u7o,ip,Z6,b7o,Fie,v7o,uOe,Pi,dp,Tie,eL,F7o,Mie,T7o,bOe,yo,oL,M7o,rL,E7o,WN,C7o,w7o,A7o,tL,L7o,Eie,y7o,x7o,$7o,Ue,aL,k7o,Cie,S7o,R7o,Bi,P7o,wie,B7o,I7o,Aie,N7o,q7o,j7o,he,cp,Lie,D7o,G7o,HN,O7o,V7o,X7o,fp,yie,z7o,Q7o,xie,W7o,H7o,U7o,mp,$ie,J7o,Y7o,UN,K7o,Z7o,e1o,gp,kie,o1o,r1o,JN,t1o,a1o,n1o,hp,Sie,s1o,l1o,YN,i1o,d1o,c1o,pp,Rie,f1o,m1o,KN,g1o,h1o,p1o,_p,Pie,_1o,u1o,ZN,b1o,v1o,F1o,up,Bie,T1o,M1o,eq,E1o,C1o,w1o,bp,Iie,A1o,L1o,oq,y1o,x1o,$1o,vp,Nie,k1o,S1o,rq,R1o,P1o,B1o,Fp,qie,I1o,N1o,tq,q1o,j1o,D1o,Tp,jie,G1o,O1o,aq,V1o,X1o,z1o,Mp,Die,Q1o,W1o,nq,H1o,U1o,J1o,Ep,Gie,Y1o,K1o,sq,Z1o,e2o,o2o,Cp,Oie,r2o,t2o,lq,a2o,n2o,s2o,wp,Vie,l2o,i2o,iq,d2o,c2o,f2o,Ap,Xie,m2o,g2o,dq,h2o,p2o,_2o,Lp,u2o,yp,b2o,xp,nL,v2o,zie,F2o,vOe,Ii,$p,Qie,sL,T2o,Wie,M2o,FOe,xo,lL,E2o,Ni,C2o,cq,w2o,A2o,fq,L2o,y2o,x2o,iL,$2o,Hie,k2o,S2o,R2o,nt,dL,P2o,Uie,B2o,I2o,qi,N2o,Jie,q2o,j2o,mq,D2o,G2o,O2o,kp,V2o,Je,cL,X2o,Yie,z2o,Q2o,Ra,W2o,Kie,H2o,U2o,Zie,J2o,Y2o,ede,K2o,Z2o,ebo,y,Sp,ode,obo,rbo,gq,tbo,abo,nbo,Rp,rde,sbo,lbo,hq,ibo,dbo,cbo,Pp,tde,fbo,mbo,pq,gbo,hbo,pbo,Bp,ade,_bo,ubo,_q,bbo,vbo,Fbo,Ip,nde,Tbo,Mbo,uq,Ebo,Cbo,wbo,Np,sde,Abo,Lbo,bq,ybo,xbo,$bo,qp,lde,kbo,Sbo,vq,Rbo,Pbo,Bbo,jp,ide,Ibo,Nbo,Fq,qbo,jbo,Dbo,Dp,dde,Gbo,Obo,Tq,Vbo,Xbo,zbo,Gp,cde,Qbo,Wbo,Mq,Hbo,Ubo,Jbo,Op,fde,Ybo,Kbo,Eq,Zbo,evo,ovo,Vp,mde,rvo,tvo,Cq,avo,nvo,svo,Xp,gde,lvo,ivo,wq,dvo,cvo,fvo,zp,hde,mvo,gvo,Aq,hvo,pvo,_vo,Qp,pde,uvo,bvo,Lq,vvo,Fvo,Tvo,Wp,_de,Mvo,Evo,yq,Cvo,wvo,Avo,Hp,ude,Lvo,yvo,xq,xvo,$vo,kvo,Up,bde,Svo,Rvo,$q,Pvo,Bvo,Ivo,Jp,vde,Nvo,qvo,kq,jvo,Dvo,Gvo,Yp,Fde,Ovo,Vvo,Sq,Xvo,zvo,Qvo,Kp,Tde,Wvo,Hvo,Rq,Uvo,Jvo,Yvo,Zp,Mde,Kvo,Zvo,Pq,eFo,oFo,rFo,e_,Ede,tFo,aFo,Bq,nFo,sFo,lFo,o_,Cde,iFo,dFo,Iq,cFo,fFo,mFo,r_,wde,gFo,hFo,Nq,pFo,_Fo,uFo,t_,Ade,bFo,vFo,qq,FFo,TFo,MFo,a_,Lde,EFo,CFo,jq,wFo,AFo,LFo,n_,yde,yFo,xFo,Dq,$Fo,kFo,SFo,s_,xde,RFo,PFo,Gq,BFo,IFo,NFo,l_,$de,qFo,jFo,Oq,DFo,GFo,OFo,i_,kde,VFo,XFo,Vq,zFo,QFo,WFo,d_,Sde,HFo,UFo,Xq,JFo,YFo,KFo,c_,Rde,ZFo,eTo,zq,oTo,rTo,tTo,f_,Pde,aTo,nTo,Qq,sTo,lTo,iTo,Xs,Bde,dTo,cTo,Wq,fTo,mTo,Hq,gTo,hTo,pTo,m_,Ide,_To,uTo,Uq,bTo,vTo,FTo,g_,Nde,TTo,MTo,Jq,ETo,CTo,wTo,h_,qde,ATo,LTo,Yq,yTo,xTo,$To,p_,jde,kTo,STo,Kq,RTo,PTo,BTo,__,Dde,ITo,NTo,Zq,qTo,jTo,DTo,u_,Gde,GTo,OTo,ej,VTo,XTo,zTo,b_,Ode,QTo,WTo,oj,HTo,UTo,JTo,v_,Vde,YTo,KTo,rj,ZTo,e9o,o9o,F_,Xde,r9o,t9o,tj,a9o,n9o,s9o,T_,zde,l9o,i9o,aj,d9o,c9o,f9o,M_,Qde,m9o,g9o,nj,h9o,p9o,_9o,E_,Wde,u9o,b9o,sj,v9o,F9o,T9o,C_,Hde,M9o,E9o,lj,C9o,w9o,A9o,w_,Ude,L9o,y9o,ij,x9o,$9o,k9o,A_,Jde,S9o,R9o,dj,P9o,B9o,I9o,L_,Yde,N9o,q9o,cj,j9o,D9o,G9o,y_,Kde,O9o,V9o,fj,X9o,z9o,Q9o,x_,Zde,W9o,H9o,mj,U9o,J9o,Y9o,$_,ece,K9o,Z9o,gj,eMo,oMo,rMo,k_,oce,tMo,aMo,hj,nMo,sMo,lMo,S_,rce,iMo,dMo,pj,cMo,fMo,mMo,R_,tce,gMo,hMo,_j,pMo,_Mo,uMo,P_,ace,bMo,vMo,uj,FMo,TMo,MMo,B_,nce,EMo,CMo,bj,wMo,AMo,LMo,I_,sce,yMo,xMo,vj,$Mo,kMo,SMo,N_,lce,RMo,PMo,Fj,BMo,IMo,NMo,q_,ice,qMo,jMo,Tj,DMo,GMo,OMo,j_,dce,VMo,XMo,Mj,zMo,QMo,WMo,D_,cce,HMo,UMo,Ej,JMo,YMo,KMo,G_,fce,ZMo,eEo,Cj,oEo,rEo,tEo,O_,mce,aEo,nEo,wj,sEo,lEo,iEo,V_,gce,dEo,cEo,Aj,fEo,mEo,gEo,X_,hce,hEo,pEo,Lj,_Eo,uEo,bEo,z_,pce,vEo,FEo,yj,TEo,MEo,EEo,Q_,_ce,CEo,wEo,xj,AEo,LEo,yEo,W_,uce,xEo,$Eo,$j,kEo,SEo,REo,H_,bce,PEo,BEo,kj,IEo,NEo,qEo,U_,vce,jEo,DEo,Sj,GEo,OEo,VEo,J_,Fce,XEo,zEo,Rj,QEo,WEo,HEo,Y_,Tce,UEo,JEo,Pj,YEo,KEo,ZEo,K_,Mce,e4o,o4o,Bj,r4o,t4o,a4o,Z_,Ece,n4o,s4o,Ij,l4o,i4o,d4o,eu,Cce,c4o,f4o,Nj,m4o,g4o,h4o,ou,wce,p4o,_4o,qj,u4o,b4o,v4o,ru,Ace,F4o,T4o,jj,M4o,E4o,C4o,tu,Lce,w4o,A4o,Dj,L4o,y4o,x4o,au,yce,$4o,k4o,Gj,S4o,R4o,P4o,nu,xce,B4o,I4o,Oj,N4o,q4o,j4o,su,$ce,D4o,G4o,Vj,O4o,V4o,X4o,lu,kce,z4o,Q4o,Xj,W4o,H4o,U4o,iu,Sce,J4o,Y4o,zj,K4o,Z4o,eCo,du,Rce,oCo,rCo,Qj,tCo,aCo,nCo,cu,Pce,sCo,lCo,Wj,iCo,dCo,cCo,fu,Bce,fCo,mCo,Hj,gCo,hCo,pCo,mu,Ice,_Co,uCo,Uj,bCo,vCo,FCo,gu,Nce,TCo,MCo,Jj,ECo,CCo,wCo,hu,qce,ACo,LCo,Yj,yCo,xCo,$Co,pu,jce,kCo,SCo,Kj,RCo,PCo,BCo,_u,Dce,ICo,NCo,Zj,qCo,jCo,DCo,uu,Gce,GCo,OCo,eD,VCo,XCo,zCo,bu,Oce,QCo,WCo,oD,HCo,UCo,JCo,vu,Vce,YCo,KCo,rD,ZCo,e5o,o5o,Fu,Xce,r5o,t5o,tD,a5o,n5o,s5o,Tu,zce,l5o,i5o,aD,d5o,c5o,f5o,Mu,Qce,m5o,g5o,nD,h5o,p5o,_5o,Eu,Wce,u5o,b5o,sD,v5o,F5o,T5o,Cu,Hce,M5o,E5o,lD,C5o,w5o,A5o,wu,Uce,L5o,y5o,iD,x5o,$5o,k5o,Au,Jce,S5o,R5o,dD,P5o,B5o,I5o,Lu,Yce,N5o,q5o,cD,j5o,D5o,G5o,yu,Kce,O5o,V5o,fD,X5o,z5o,Q5o,xu,Zce,W5o,H5o,mD,U5o,J5o,Y5o,$u,efe,K5o,Z5o,gD,e3o,o3o,r3o,ku,t3o,ofe,a3o,n3o,rfe,s3o,l3o,Su,TOe,ji,Ru,tfe,fL,i3o,afe,d3o,MOe,$o,mL,c3o,Di,f3o,hD,m3o,g3o,pD,h3o,p3o,_3o,gL,u3o,nfe,b3o,v3o,F3o,st,hL,T3o,sfe,M3o,E3o,Gi,C3o,lfe,w3o,A3o,_D,L3o,y3o,x3o,Pu,$3o,Ye,pL,k3o,ife,S3o,R3o,Pa,P3o,dfe,B3o,I3o,cfe,N3o,q3o,ffe,j3o,D3o,G3o,G,Bu,mfe,O3o,V3o,uD,X3o,z3o,Q3o,Iu,gfe,W3o,H3o,bD,U3o,J3o,Y3o,Nu,hfe,K3o,Z3o,vD,e0o,o0o,r0o,qu,pfe,t0o,a0o,FD,n0o,s0o,l0o,ju,_fe,i0o,d0o,TD,c0o,f0o,m0o,Du,ufe,g0o,h0o,MD,p0o,_0o,u0o,Gu,bfe,b0o,v0o,ED,F0o,T0o,M0o,Ou,vfe,E0o,C0o,CD,w0o,A0o,L0o,Vu,Ffe,y0o,x0o,wD,$0o,k0o,S0o,Xu,Tfe,R0o,P0o,AD,B0o,I0o,N0o,zu,Mfe,q0o,j0o,LD,D0o,G0o,O0o,Qu,Efe,V0o,X0o,yD,z0o,Q0o,W0o,Wu,Cfe,H0o,U0o,xD,J0o,Y0o,K0o,Hu,wfe,Z0o,ewo,$D,owo,rwo,two,Uu,Afe,awo,nwo,kD,swo,lwo,iwo,Ju,Lfe,dwo,cwo,SD,fwo,mwo,gwo,Yu,yfe,hwo,pwo,RD,_wo,uwo,bwo,Ku,xfe,vwo,Fwo,PD,Two,Mwo,Ewo,Zu,$fe,Cwo,wwo,BD,Awo,Lwo,ywo,e7,kfe,xwo,$wo,ID,kwo,Swo,Rwo,o7,Sfe,Pwo,Bwo,ND,Iwo,Nwo,qwo,r7,Rfe,jwo,Dwo,qD,Gwo,Owo,Vwo,t7,Pfe,Xwo,zwo,jD,Qwo,Wwo,Hwo,a7,Bfe,Uwo,Jwo,DD,Ywo,Kwo,Zwo,n7,Ife,eAo,oAo,GD,rAo,tAo,aAo,s7,Nfe,nAo,sAo,OD,lAo,iAo,dAo,l7,qfe,cAo,fAo,VD,mAo,gAo,hAo,i7,jfe,pAo,_Ao,XD,uAo,bAo,vAo,d7,Dfe,FAo,TAo,zD,MAo,EAo,CAo,c7,Gfe,wAo,AAo,QD,LAo,yAo,xAo,f7,Ofe,$Ao,kAo,WD,SAo,RAo,PAo,m7,Vfe,BAo,IAo,HD,NAo,qAo,jAo,g7,Xfe,DAo,GAo,UD,OAo,VAo,XAo,h7,zfe,zAo,QAo,JD,WAo,HAo,UAo,p7,Qfe,JAo,YAo,YD,KAo,ZAo,e6o,_7,Wfe,o6o,r6o,KD,t6o,a6o,n6o,u7,Hfe,s6o,l6o,ZD,i6o,d6o,c6o,b7,Ufe,f6o,m6o,eG,g6o,h6o,p6o,v7,Jfe,_6o,u6o,oG,b6o,v6o,F6o,F7,Yfe,T6o,M6o,rG,E6o,C6o,w6o,T7,Kfe,A6o,L6o,tG,y6o,x6o,$6o,M7,Zfe,k6o,S6o,aG,R6o,P6o,B6o,E7,eme,I6o,N6o,nG,q6o,j6o,D6o,C7,ome,G6o,O6o,sG,V6o,X6o,z6o,w7,Q6o,rme,W6o,H6o,tme,U6o,J6o,A7,EOe,Oi,L7,ame,_L,Y6o,nme,K6o,COe,ko,uL,Z6o,Vi,eLo,lG,oLo,rLo,iG,tLo,aLo,nLo,bL,sLo,sme,lLo,iLo,dLo,lt,vL,cLo,lme,fLo,mLo,Xi,gLo,ime,hLo,pLo,dG,_Lo,uLo,bLo,y7,vLo,Ke,FL,FLo,dme,TLo,MLo,Ba,ELo,cme,CLo,wLo,fme,ALo,LLo,mme,yLo,xLo,$Lo,z,x7,gme,kLo,SLo,cG,RLo,PLo,BLo,$7,hme,ILo,NLo,fG,qLo,jLo,DLo,k7,pme,GLo,OLo,mG,VLo,XLo,zLo,S7,_me,QLo,WLo,gG,HLo,ULo,JLo,R7,ume,YLo,KLo,hG,ZLo,eyo,oyo,P7,bme,ryo,tyo,pG,ayo,nyo,syo,B7,vme,lyo,iyo,_G,dyo,cyo,fyo,I7,Fme,myo,gyo,uG,hyo,pyo,_yo,N7,Tme,uyo,byo,bG,vyo,Fyo,Tyo,q7,Mme,Myo,Eyo,vG,Cyo,wyo,Ayo,j7,Eme,Lyo,yyo,FG,xyo,$yo,kyo,D7,Cme,Syo,Ryo,TG,Pyo,Byo,Iyo,G7,wme,Nyo,qyo,MG,jyo,Dyo,Gyo,O7,Ame,Oyo,Vyo,EG,Xyo,zyo,Qyo,V7,Lme,Wyo,Hyo,CG,Uyo,Jyo,Yyo,X7,yme,Kyo,Zyo,wG,e8o,o8o,r8o,z7,xme,t8o,a8o,AG,n8o,s8o,l8o,Q7,$me,i8o,d8o,LG,c8o,f8o,m8o,W7,kme,g8o,h8o,yG,p8o,_8o,u8o,H7,Sme,b8o,v8o,xG,F8o,T8o,M8o,U7,Rme,E8o,C8o,$G,w8o,A8o,L8o,J7,Pme,y8o,x8o,kG,$8o,k8o,S8o,Y7,Bme,R8o,P8o,SG,B8o,I8o,N8o,K7,Ime,q8o,j8o,RG,D8o,G8o,O8o,Z7,Nme,V8o,X8o,PG,z8o,Q8o,W8o,e1,qme,H8o,U8o,BG,J8o,Y8o,K8o,o1,jme,Z8o,exo,IG,oxo,rxo,txo,r1,Dme,axo,nxo,NG,sxo,lxo,ixo,t1,Gme,dxo,cxo,qG,fxo,mxo,gxo,a1,Ome,hxo,pxo,jG,_xo,uxo,bxo,n1,Vme,vxo,Fxo,DG,Txo,Mxo,Exo,s1,Xme,Cxo,wxo,GG,Axo,Lxo,yxo,l1,zme,xxo,$xo,OG,kxo,Sxo,Rxo,i1,Qme,Pxo,Bxo,VG,Ixo,Nxo,qxo,d1,Wme,jxo,Dxo,XG,Gxo,Oxo,Vxo,c1,Hme,Xxo,zxo,zG,Qxo,Wxo,Hxo,f1,Ume,Uxo,Jxo,QG,Yxo,Kxo,Zxo,m1,Jme,e$o,o$o,WG,r$o,t$o,a$o,g1,Yme,n$o,s$o,HG,l$o,i$o,d$o,h1,c$o,Kme,f$o,m$o,Zme,g$o,h$o,p1,wOe,zi,_1,ege,TL,p$o,oge,_$o,AOe,So,ML,u$o,Qi,b$o,UG,v$o,F$o,JG,T$o,M$o,E$o,EL,C$o,rge,w$o,A$o,L$o,it,CL,y$o,tge,x$o,$$o,Wi,k$o,age,S$o,R$o,YG,P$o,B$o,I$o,u1,N$o,Ze,wL,q$o,nge,j$o,D$o,Ia,G$o,sge,O$o,V$o,lge,X$o,z$o,ige,Q$o,W$o,H$o,W,b1,dge,U$o,J$o,KG,Y$o,K$o,Z$o,v1,cge,eko,oko,ZG,rko,tko,ako,F1,fge,nko,sko,eO,lko,iko,dko,T1,mge,cko,fko,oO,mko,gko,hko,M1,gge,pko,_ko,rO,uko,bko,vko,E1,hge,Fko,Tko,tO,Mko,Eko,Cko,C1,pge,wko,Ako,aO,Lko,yko,xko,w1,_ge,$ko,kko,nO,Sko,Rko,Pko,A1,uge,Bko,Iko,sO,Nko,qko,jko,L1,bge,Dko,Gko,lO,Oko,Vko,Xko,y1,vge,zko,Qko,iO,Wko,Hko,Uko,x1,Fge,Jko,Yko,dO,Kko,Zko,eSo,$1,Tge,oSo,rSo,cO,tSo,aSo,nSo,k1,Mge,sSo,lSo,fO,iSo,dSo,cSo,S1,Ege,fSo,mSo,mO,gSo,hSo,pSo,R1,Cge,_So,uSo,gO,bSo,vSo,FSo,P1,wge,TSo,MSo,hO,ESo,CSo,wSo,B1,Age,ASo,LSo,pO,ySo,xSo,$So,I1,Lge,kSo,SSo,_O,RSo,PSo,BSo,N1,yge,ISo,NSo,uO,qSo,jSo,DSo,q1,xge,GSo,OSo,bO,VSo,XSo,zSo,j1,$ge,QSo,WSo,vO,HSo,USo,JSo,D1,kge,YSo,KSo,FO,ZSo,eRo,oRo,G1,Sge,rRo,tRo,TO,aRo,nRo,sRo,O1,Rge,lRo,iRo,MO,dRo,cRo,fRo,V1,Pge,mRo,gRo,EO,hRo,pRo,_Ro,X1,Bge,uRo,bRo,CO,vRo,FRo,TRo,z1,Ige,MRo,ERo,wO,CRo,wRo,ARo,Q1,Nge,LRo,yRo,AO,xRo,$Ro,kRo,W1,qge,SRo,RRo,LO,PRo,BRo,IRo,H1,jge,NRo,qRo,yO,jRo,DRo,GRo,U1,Dge,ORo,VRo,xO,XRo,zRo,QRo,J1,Gge,WRo,HRo,Oge,URo,JRo,YRo,Y1,Vge,KRo,ZRo,$O,ePo,oPo,rPo,K1,Xge,tPo,aPo,kO,nPo,sPo,lPo,Z1,zge,iPo,dPo,SO,cPo,fPo,mPo,e2,Qge,gPo,hPo,RO,pPo,_Po,uPo,o2,bPo,Wge,vPo,FPo,Hge,TPo,MPo,r2,LOe,Hi,t2,Uge,AL,EPo,Jge,CPo,yOe,Ro,LL,wPo,Ui,APo,PO,LPo,yPo,BO,xPo,$Po,kPo,yL,SPo,Yge,RPo,PPo,BPo,dt,xL,IPo,Kge,NPo,qPo,Ji,jPo,Zge,DPo,GPo,IO,OPo,VPo,XPo,a2,zPo,eo,$L,QPo,ehe,WPo,HPo,Na,UPo,ohe,JPo,YPo,rhe,KPo,ZPo,the,eBo,oBo,rBo,pe,n2,ahe,tBo,aBo,NO,nBo,sBo,lBo,s2,nhe,iBo,dBo,qO,cBo,fBo,mBo,l2,she,gBo,hBo,jO,pBo,_Bo,uBo,i2,lhe,bBo,vBo,DO,FBo,TBo,MBo,d2,ihe,EBo,CBo,GO,wBo,ABo,LBo,c2,dhe,yBo,xBo,OO,$Bo,kBo,SBo,f2,che,RBo,PBo,VO,BBo,IBo,NBo,m2,fhe,qBo,jBo,XO,DBo,GBo,OBo,g2,mhe,VBo,XBo,zO,zBo,QBo,WBo,h2,ghe,HBo,UBo,QO,JBo,YBo,KBo,p2,hhe,ZBo,eIo,WO,oIo,rIo,tIo,_2,phe,aIo,nIo,HO,sIo,lIo,iIo,u2,_he,dIo,cIo,UO,fIo,mIo,gIo,b2,uhe,hIo,pIo,JO,_Io,uIo,bIo,v2,bhe,vIo,FIo,YO,TIo,MIo,EIo,F2,vhe,CIo,wIo,KO,AIo,LIo,yIo,T2,Fhe,xIo,$Io,ZO,kIo,SIo,RIo,M2,PIo,The,BIo,IIo,Mhe,NIo,qIo,E2,xOe,Yi,C2,Ehe,kL,jIo,Che,DIo,$Oe,Po,SL,GIo,Ki,OIo,eV,VIo,XIo,oV,zIo,QIo,WIo,RL,HIo,whe,UIo,JIo,YIo,ct,PL,KIo,Ahe,ZIo,eNo,Zi,oNo,Lhe,rNo,tNo,rV,aNo,nNo,sNo,w2,lNo,oo,BL,iNo,yhe,dNo,cNo,qa,fNo,xhe,mNo,gNo,$he,hNo,pNo,khe,_No,uNo,bNo,N,A2,She,vNo,FNo,tV,TNo,MNo,ENo,L2,Rhe,CNo,wNo,aV,ANo,LNo,yNo,y2,Phe,xNo,$No,nV,kNo,SNo,RNo,x2,Bhe,PNo,BNo,sV,INo,NNo,qNo,$2,Ihe,jNo,DNo,lV,GNo,ONo,VNo,k2,Nhe,XNo,zNo,iV,QNo,WNo,HNo,S2,qhe,UNo,JNo,dV,YNo,KNo,ZNo,R2,jhe,eqo,oqo,cV,rqo,tqo,aqo,P2,Dhe,nqo,sqo,fV,lqo,iqo,dqo,B2,Ghe,cqo,fqo,mV,mqo,gqo,hqo,I2,Ohe,pqo,_qo,gV,uqo,bqo,vqo,N2,Vhe,Fqo,Tqo,hV,Mqo,Eqo,Cqo,q2,Xhe,wqo,Aqo,pV,Lqo,yqo,xqo,j2,zhe,$qo,kqo,_V,Sqo,Rqo,Pqo,D2,Qhe,Bqo,Iqo,uV,Nqo,qqo,jqo,G2,Whe,Dqo,Gqo,bV,Oqo,Vqo,Xqo,O2,Hhe,zqo,Qqo,vV,Wqo,Hqo,Uqo,V2,Uhe,Jqo,Yqo,FV,Kqo,Zqo,ejo,X2,Jhe,ojo,rjo,TV,tjo,ajo,njo,z2,Yhe,sjo,ljo,MV,ijo,djo,cjo,Q2,Khe,fjo,mjo,EV,gjo,hjo,pjo,W2,Zhe,_jo,ujo,CV,bjo,vjo,Fjo,H2,epe,Tjo,Mjo,wV,Ejo,Cjo,wjo,U2,ope,Ajo,Ljo,AV,yjo,xjo,$jo,J2,rpe,kjo,Sjo,LV,Rjo,Pjo,Bjo,Y2,tpe,Ijo,Njo,yV,qjo,jjo,Djo,K2,ape,Gjo,Ojo,xV,Vjo,Xjo,zjo,Z2,npe,Qjo,Wjo,$V,Hjo,Ujo,Jjo,eb,spe,Yjo,Kjo,kV,Zjo,eDo,oDo,ob,lpe,rDo,tDo,SV,aDo,nDo,sDo,rb,ipe,lDo,iDo,RV,dDo,cDo,fDo,tb,dpe,mDo,gDo,PV,hDo,pDo,_Do,ab,cpe,uDo,bDo,BV,vDo,FDo,TDo,nb,fpe,MDo,EDo,IV,CDo,wDo,ADo,sb,mpe,LDo,yDo,NV,xDo,$Do,kDo,lb,gpe,SDo,RDo,qV,PDo,BDo,IDo,ib,hpe,NDo,qDo,jV,jDo,DDo,GDo,db,ppe,ODo,VDo,DV,XDo,zDo,QDo,cb,_pe,WDo,HDo,GV,UDo,JDo,YDo,fb,upe,KDo,ZDo,OV,eGo,oGo,rGo,mb,bpe,tGo,aGo,VV,nGo,sGo,lGo,gb,vpe,iGo,dGo,XV,cGo,fGo,mGo,hb,Fpe,gGo,hGo,zV,pGo,_Go,uGo,pb,Tpe,bGo,vGo,QV,FGo,TGo,MGo,_b,Mpe,EGo,CGo,WV,wGo,AGo,LGo,ub,Epe,yGo,xGo,HV,$Go,kGo,SGo,bb,Cpe,RGo,PGo,UV,BGo,IGo,NGo,vb,wpe,qGo,jGo,JV,DGo,GGo,OGo,Fb,Ape,VGo,XGo,YV,zGo,QGo,WGo,Tb,HGo,Lpe,UGo,JGo,ype,YGo,KGo,Mb,kOe,ed,Eb,xpe,IL,ZGo,$pe,eOo,SOe,Bo,NL,oOo,od,rOo,KV,tOo,aOo,ZV,nOo,sOo,lOo,qL,iOo,kpe,dOo,cOo,fOo,ft,jL,mOo,Spe,gOo,hOo,rd,pOo,Rpe,_Oo,uOo,eX,bOo,vOo,FOo,Cb,TOo,ro,DL,MOo,Ppe,EOo,COo,ja,wOo,Bpe,AOo,LOo,Ipe,yOo,xOo,Npe,$Oo,kOo,SOo,Z,wb,qpe,ROo,POo,oX,BOo,IOo,NOo,Ab,jpe,qOo,jOo,rX,DOo,GOo,OOo,Lb,Dpe,VOo,XOo,tX,zOo,QOo,WOo,yb,Gpe,HOo,UOo,aX,JOo,YOo,KOo,xb,Ope,ZOo,eVo,nX,oVo,rVo,tVo,$b,Vpe,aVo,nVo,sX,sVo,lVo,iVo,kb,Xpe,dVo,cVo,lX,fVo,mVo,gVo,Sb,zpe,hVo,pVo,iX,_Vo,uVo,bVo,Rb,Qpe,vVo,FVo,dX,TVo,MVo,EVo,Pb,Wpe,CVo,wVo,cX,AVo,LVo,yVo,Bb,Hpe,xVo,$Vo,fX,kVo,SVo,RVo,Ib,Upe,PVo,BVo,mX,IVo,NVo,qVo,Nb,Jpe,jVo,DVo,gX,GVo,OVo,VVo,qb,Ype,XVo,zVo,hX,QVo,WVo,HVo,jb,Kpe,UVo,JVo,pX,YVo,KVo,ZVo,Db,Zpe,eXo,oXo,_X,rXo,tXo,aXo,Gb,e_e,nXo,sXo,uX,lXo,iXo,dXo,Ob,o_e,cXo,fXo,bX,mXo,gXo,hXo,Vb,r_e,pXo,_Xo,vX,uXo,bXo,vXo,Xb,t_e,FXo,TXo,FX,MXo,EXo,CXo,zb,a_e,wXo,AXo,TX,LXo,yXo,xXo,Qb,n_e,$Xo,kXo,MX,SXo,RXo,PXo,Wb,s_e,BXo,IXo,EX,NXo,qXo,jXo,Hb,l_e,DXo,GXo,CX,OXo,VXo,XXo,Ub,i_e,zXo,QXo,wX,WXo,HXo,UXo,Jb,d_e,JXo,YXo,AX,KXo,ZXo,ezo,Yb,c_e,ozo,rzo,LX,tzo,azo,nzo,Kb,f_e,szo,lzo,yX,izo,dzo,czo,Zb,m_e,fzo,mzo,xX,gzo,hzo,pzo,ev,g_e,_zo,uzo,$X,bzo,vzo,Fzo,ov,Tzo,h_e,Mzo,Ezo,p_e,Czo,wzo,rv,ROe,td,tv,__e,GL,Azo,u_e,Lzo,POe,Io,OL,yzo,ad,xzo,kX,$zo,kzo,SX,Szo,Rzo,Pzo,VL,Bzo,b_e,Izo,Nzo,qzo,mt,XL,jzo,v_e,Dzo,Gzo,nd,Ozo,F_e,Vzo,Xzo,RX,zzo,Qzo,Wzo,av,Hzo,to,zL,Uzo,T_e,Jzo,Yzo,Da,Kzo,M_e,Zzo,eQo,E_e,oQo,rQo,C_e,tQo,aQo,nQo,No,nv,w_e,sQo,lQo,PX,iQo,dQo,cQo,sv,A_e,fQo,mQo,BX,gQo,hQo,pQo,lv,L_e,_Qo,uQo,IX,bQo,vQo,FQo,iv,y_e,TQo,MQo,NX,EQo,CQo,wQo,dv,x_e,AQo,LQo,qX,yQo,xQo,$Qo,cv,$_e,kQo,SQo,jX,RQo,PQo,BQo,fv,IQo,k_e,NQo,qQo,S_e,jQo,DQo,mv,BOe,sd,gv,R_e,QL,GQo,P_e,OQo,IOe,qo,WL,VQo,ld,XQo,DX,zQo,QQo,GX,WQo,HQo,UQo,HL,JQo,B_e,YQo,KQo,ZQo,gt,UL,eWo,I_e,oWo,rWo,id,tWo,N_e,aWo,nWo,OX,sWo,lWo,iWo,hv,dWo,ao,JL,cWo,q_e,fWo,mWo,Ga,gWo,j_e,hWo,pWo,D_e,_Wo,uWo,G_e,bWo,vWo,FWo,H,pv,O_e,TWo,MWo,VX,EWo,CWo,wWo,_v,V_e,AWo,LWo,XX,yWo,xWo,$Wo,uv,X_e,kWo,SWo,zX,RWo,PWo,BWo,bv,z_e,IWo,NWo,QX,qWo,jWo,DWo,vv,Q_e,GWo,OWo,WX,VWo,XWo,zWo,Fv,W_e,QWo,WWo,HX,HWo,UWo,JWo,Tv,H_e,YWo,KWo,UX,ZWo,eHo,oHo,Mv,U_e,rHo,tHo,JX,aHo,nHo,sHo,Ev,J_e,lHo,iHo,YX,dHo,cHo,fHo,Cv,Y_e,mHo,gHo,KX,hHo,pHo,_Ho,wv,K_e,uHo,bHo,ZX,vHo,FHo,THo,Av,Z_e,MHo,EHo,ez,CHo,wHo,AHo,Lv,eue,LHo,yHo,oz,xHo,$Ho,kHo,yv,oue,SHo,RHo,rz,PHo,BHo,IHo,xv,rue,NHo,qHo,tz,jHo,DHo,GHo,$v,tue,OHo,VHo,az,XHo,zHo,QHo,kv,aue,WHo,HHo,nz,UHo,JHo,YHo,Sv,nue,KHo,ZHo,sz,eUo,oUo,rUo,Rv,sue,tUo,aUo,lz,nUo,sUo,lUo,Pv,lue,iUo,dUo,iz,cUo,fUo,mUo,Bv,iue,gUo,hUo,dz,pUo,_Uo,uUo,Iv,due,bUo,vUo,cz,FUo,TUo,MUo,Nv,cue,EUo,CUo,fz,wUo,AUo,LUo,qv,fue,yUo,xUo,mz,$Uo,kUo,SUo,jv,mue,RUo,PUo,gz,BUo,IUo,NUo,Dv,gue,qUo,jUo,hz,DUo,GUo,OUo,Gv,hue,VUo,XUo,pz,zUo,QUo,WUo,Ov,pue,HUo,UUo,_z,JUo,YUo,KUo,Vv,_ue,ZUo,eJo,uz,oJo,rJo,tJo,Xv,uue,aJo,nJo,bz,sJo,lJo,iJo,zv,bue,dJo,cJo,vz,fJo,mJo,gJo,Qv,vue,hJo,pJo,Fz,_Jo,uJo,bJo,Wv,Fue,vJo,FJo,Tz,TJo,MJo,EJo,Hv,Tue,CJo,wJo,Mz,AJo,LJo,yJo,Uv,Mue,xJo,$Jo,Ez,kJo,SJo,RJo,Jv,Eue,PJo,BJo,Cz,IJo,NJo,qJo,Yv,jJo,Cue,DJo,GJo,wue,OJo,VJo,Kv,NOe,dd,Zv,Aue,YL,XJo,Lue,zJo,qOe,jo,KL,QJo,cd,WJo,wz,HJo,UJo,Az,JJo,YJo,KJo,ZL,ZJo,yue,eYo,oYo,rYo,ht,ey,tYo,xue,aYo,nYo,fd,sYo,$ue,lYo,iYo,Lz,dYo,cYo,fYo,eF,mYo,no,oy,gYo,kue,hYo,pYo,Oa,_Yo,Sue,uYo,bYo,Rue,vYo,FYo,Pue,TYo,MYo,EYo,V,oF,Bue,CYo,wYo,yz,AYo,LYo,yYo,rF,Iue,xYo,$Yo,xz,kYo,SYo,RYo,tF,Nue,PYo,BYo,$z,IYo,NYo,qYo,aF,que,jYo,DYo,kz,GYo,OYo,VYo,nF,jue,XYo,zYo,Sz,QYo,WYo,HYo,sF,Due,UYo,JYo,Rz,YYo,KYo,ZYo,lF,Gue,eKo,oKo,Pz,rKo,tKo,aKo,iF,Oue,nKo,sKo,Bz,lKo,iKo,dKo,dF,Vue,cKo,fKo,Iz,mKo,gKo,hKo,cF,Xue,pKo,_Ko,Nz,uKo,bKo,vKo,fF,zue,FKo,TKo,qz,MKo,EKo,CKo,mF,Que,wKo,AKo,jz,LKo,yKo,xKo,gF,Wue,$Ko,kKo,Dz,SKo,RKo,PKo,hF,Hue,BKo,IKo,Gz,NKo,qKo,jKo,pF,Uue,DKo,GKo,Oz,OKo,VKo,XKo,_F,Jue,zKo,QKo,Vz,WKo,HKo,UKo,uF,Yue,JKo,YKo,Xz,KKo,ZKo,eZo,bF,Kue,oZo,rZo,zz,tZo,aZo,nZo,vF,Zue,sZo,lZo,Qz,iZo,dZo,cZo,FF,e7e,fZo,mZo,Wz,gZo,hZo,pZo,TF,o7e,_Zo,uZo,Hz,bZo,vZo,FZo,MF,r7e,TZo,MZo,Uz,EZo,CZo,wZo,EF,t7e,AZo,LZo,Jz,yZo,xZo,$Zo,CF,a7e,kZo,SZo,Yz,RZo,PZo,BZo,wF,n7e,IZo,NZo,Kz,qZo,jZo,DZo,AF,s7e,GZo,OZo,Zz,VZo,XZo,zZo,LF,l7e,QZo,WZo,eQ,HZo,UZo,JZo,yF,i7e,YZo,KZo,oQ,ZZo,eer,oer,xF,d7e,rer,ter,rQ,aer,ner,ser,$F,c7e,ler,ier,tQ,der,cer,fer,kF,f7e,mer,ger,aQ,her,per,_er,SF,m7e,uer,ber,nQ,ver,Fer,Ter,RF,g7e,Mer,Eer,sQ,Cer,wer,Aer,PF,h7e,Ler,yer,lQ,xer,$er,ker,BF,p7e,Ser,Rer,iQ,Per,Ber,Ier,IF,_7e,Ner,qer,dQ,jer,Der,Ger,NF,u7e,Oer,Ver,cQ,Xer,zer,Qer,qF,b7e,Wer,Her,fQ,Uer,Jer,Yer,jF,v7e,Ker,Zer,mQ,eor,oor,ror,DF,F7e,tor,aor,gQ,nor,sor,lor,GF,T7e,ior,dor,hQ,cor,mor,gor,OF,hor,M7e,por,_or,E7e,uor,bor,VF,jOe,md,XF,C7e,ry,vor,w7e,For,DOe,Do,ty,Tor,gd,Mor,pQ,Eor,Cor,_Q,wor,Aor,Lor,ay,yor,A7e,xor,$or,kor,pt,ny,Sor,L7e,Ror,Por,hd,Bor,y7e,Ior,Nor,uQ,qor,jor,Dor,zF,Gor,so,sy,Oor,x7e,Vor,Xor,Va,zor,$7e,Qor,Wor,k7e,Hor,Uor,S7e,Jor,Yor,Kor,R7e,QF,P7e,Zor,err,bQ,orr,rrr,trr,WF,arr,B7e,nrr,srr,I7e,lrr,irr,HF,GOe,pd,UF,N7e,ly,drr,q7e,crr,OOe,Go,iy,frr,_d,mrr,vQ,grr,hrr,FQ,prr,_rr,urr,dy,brr,j7e,vrr,Frr,Trr,_t,cy,Mrr,D7e,Err,Crr,ud,wrr,G7e,Arr,Lrr,TQ,yrr,xrr,$rr,JF,krr,lo,fy,Srr,O7e,Rrr,Prr,Xa,Brr,V7e,Irr,Nrr,X7e,qrr,jrr,z7e,Drr,Grr,Orr,Fe,YF,Q7e,Vrr,Xrr,MQ,zrr,Qrr,Wrr,KF,W7e,Hrr,Urr,EQ,Jrr,Yrr,Krr,ZF,H7e,Zrr,etr,CQ,otr,rtr,ttr,eT,U7e,atr,ntr,wQ,str,ltr,itr,zs,J7e,dtr,ctr,AQ,ftr,mtr,LQ,gtr,htr,ptr,oT,Y7e,_tr,utr,yQ,btr,vtr,Ftr,Qs,K7e,Ttr,Mtr,xQ,Etr,Ctr,$Q,wtr,Atr,Ltr,ut,Z7e,ytr,xtr,kQ,$tr,ktr,SQ,Str,Rtr,RQ,Ptr,Btr,Itr,rT,e1e,Ntr,qtr,PQ,jtr,Dtr,Gtr,tT,o1e,Otr,Vtr,BQ,Xtr,ztr,Qtr,aT,r1e,Wtr,Htr,IQ,Utr,Jtr,Ytr,nT,t1e,Ktr,Ztr,NQ,ear,oar,rar,sT,a1e,tar,aar,qQ,nar,sar,lar,lT,n1e,iar,dar,jQ,car,far,mar,iT,s1e,gar,har,DQ,par,_ar,uar,dT,bar,l1e,Far,Tar,i1e,Mar,Ear,cT,VOe,bd,fT,d1e,my,Car,c1e,war,XOe,Oo,gy,Aar,vd,Lar,GQ,yar,xar,OQ,$ar,kar,Sar,hy,Rar,f1e,Par,Bar,Iar,bt,py,Nar,m1e,qar,jar,Fd,Dar,g1e,Gar,Oar,VQ,Var,Xar,zar,mT,Qar,io,_y,War,h1e,Har,Uar,za,Jar,p1e,Yar,Kar,_1e,Zar,enr,u1e,onr,rnr,tnr,b1e,gT,v1e,anr,nnr,XQ,snr,lnr,inr,hT,dnr,F1e,cnr,fnr,T1e,mnr,gnr,pT,zOe,Td,_T,M1e,uy,hnr,E1e,pnr,QOe,Vo,by,_nr,Md,unr,zQ,bnr,vnr,QQ,Fnr,Tnr,Mnr,vy,Enr,C1e,Cnr,wnr,Anr,vt,Fy,Lnr,w1e,ynr,xnr,Ed,$nr,A1e,knr,Snr,WQ,Rnr,Pnr,Bnr,uT,Inr,co,Ty,Nnr,L1e,qnr,jnr,Qa,Dnr,y1e,Gnr,Onr,x1e,Vnr,Xnr,$1e,znr,Qnr,Wnr,k1e,bT,S1e,Hnr,Unr,HQ,Jnr,Ynr,Knr,vT,Znr,R1e,esr,osr,P1e,rsr,tsr,FT,WOe,Cd,TT,B1e,My,asr,I1e,nsr,HOe,Xo,Ey,ssr,wd,lsr,UQ,isr,dsr,JQ,csr,fsr,msr,Cy,gsr,N1e,hsr,psr,_sr,Ft,wy,usr,q1e,bsr,vsr,Ad,Fsr,j1e,Tsr,Msr,YQ,Esr,Csr,wsr,MT,Asr,fo,Ay,Lsr,D1e,ysr,xsr,Wa,$sr,G1e,ksr,Ssr,O1e,Rsr,Psr,V1e,Bsr,Isr,Nsr,Pe,ET,X1e,qsr,jsr,KQ,Dsr,Gsr,Osr,CT,z1e,Vsr,Xsr,ZQ,zsr,Qsr,Wsr,wT,Q1e,Hsr,Usr,eW,Jsr,Ysr,Ksr,AT,W1e,Zsr,elr,oW,olr,rlr,tlr,LT,H1e,alr,nlr,rW,slr,llr,ilr,yT,U1e,dlr,clr,tW,flr,mlr,glr,xT,J1e,hlr,plr,aW,_lr,ulr,blr,$T,Y1e,vlr,Flr,nW,Tlr,Mlr,Elr,kT,K1e,Clr,wlr,sW,Alr,Llr,ylr,ST,xlr,Z1e,$lr,klr,e2e,Slr,Rlr,RT,UOe,Ld,PT,o2e,Ly,Plr,r2e,Blr,JOe,zo,yy,Ilr,yd,Nlr,lW,qlr,jlr,iW,Dlr,Glr,Olr,xy,Vlr,t2e,Xlr,zlr,Qlr,Tt,$y,Wlr,a2e,Hlr,Ulr,xd,Jlr,n2e,Ylr,Klr,dW,Zlr,eir,oir,BT,rir,mo,ky,tir,s2e,air,nir,Ha,sir,l2e,lir,iir,i2e,dir,cir,d2e,fir,mir,gir,et,IT,c2e,hir,pir,cW,_ir,uir,bir,NT,f2e,vir,Fir,fW,Tir,Mir,Eir,qT,m2e,Cir,wir,mW,Air,Lir,yir,jT,g2e,xir,$ir,gW,kir,Sir,Rir,DT,h2e,Pir,Bir,hW,Iir,Nir,qir,GT,jir,p2e,Dir,Gir,_2e,Oir,Vir,OT,YOe,$d,VT,u2e,Sy,Xir,b2e,zir,KOe,Qo,Ry,Qir,kd,Wir,pW,Hir,Uir,_W,Jir,Yir,Kir,Py,Zir,v2e,edr,odr,rdr,Mt,By,tdr,F2e,adr,ndr,Sd,sdr,T2e,ldr,idr,uW,ddr,cdr,fdr,XT,mdr,go,Iy,gdr,M2e,hdr,pdr,Ua,_dr,E2e,udr,bdr,C2e,vdr,Fdr,w2e,Tdr,Mdr,Edr,Le,zT,A2e,Cdr,wdr,bW,Adr,Ldr,ydr,QT,L2e,xdr,$dr,vW,kdr,Sdr,Rdr,WT,y2e,Pdr,Bdr,FW,Idr,Ndr,qdr,HT,x2e,jdr,Ddr,TW,Gdr,Odr,Vdr,UT,$2e,Xdr,zdr,MW,Qdr,Wdr,Hdr,JT,k2e,Udr,Jdr,EW,Ydr,Kdr,Zdr,YT,S2e,ecr,ocr,CW,rcr,tcr,acr,KT,R2e,ncr,scr,wW,lcr,icr,dcr,ZT,P2e,ccr,fcr,AW,mcr,gcr,hcr,e9,B2e,pcr,_cr,LW,ucr,bcr,vcr,o9,Fcr,I2e,Tcr,Mcr,N2e,Ecr,Ccr,r9,ZOe,Rd,t9,q2e,Ny,wcr,j2e,Acr,eVe,Wo,qy,Lcr,Pd,ycr,yW,xcr,$cr,xW,kcr,Scr,Rcr,jy,Pcr,D2e,Bcr,Icr,Ncr,Et,Dy,qcr,G2e,jcr,Dcr,Bd,Gcr,O2e,Ocr,Vcr,$W,Xcr,zcr,Qcr,a9,Wcr,ho,Gy,Hcr,V2e,Ucr,Jcr,Ja,Ycr,X2e,Kcr,Zcr,z2e,efr,ofr,Q2e,rfr,tfr,afr,Oy,n9,W2e,nfr,sfr,kW,lfr,ifr,dfr,s9,H2e,cfr,ffr,SW,mfr,gfr,hfr,l9,pfr,U2e,_fr,ufr,J2e,bfr,vfr,i9,oVe,Id,d9,Y2e,Vy,Ffr,K2e,Tfr,rVe,Ho,Xy,Mfr,Nd,Efr,RW,Cfr,wfr,PW,Afr,Lfr,yfr,zy,xfr,Z2e,$fr,kfr,Sfr,Ct,Qy,Rfr,ebe,Pfr,Bfr,qd,Ifr,obe,Nfr,qfr,BW,jfr,Dfr,Gfr,c9,Ofr,po,Wy,Vfr,rbe,Xfr,zfr,Ya,Qfr,tbe,Wfr,Hfr,abe,Ufr,Jfr,nbe,Yfr,Kfr,Zfr,ot,f9,sbe,emr,omr,IW,rmr,tmr,amr,m9,lbe,nmr,smr,NW,lmr,imr,dmr,g9,ibe,cmr,fmr,qW,mmr,gmr,hmr,h9,dbe,pmr,_mr,jW,umr,bmr,vmr,p9,cbe,Fmr,Tmr,DW,Mmr,Emr,Cmr,_9,wmr,fbe,Amr,Lmr,mbe,ymr,xmr,u9,tVe,jd,b9,gbe,Hy,$mr,hbe,kmr,aVe,Uo,Uy,Smr,Dd,Rmr,GW,Pmr,Bmr,OW,Imr,Nmr,qmr,Jy,jmr,pbe,Dmr,Gmr,Omr,wt,Yy,Vmr,_be,Xmr,zmr,Gd,Qmr,ube,Wmr,Hmr,VW,Umr,Jmr,Ymr,v9,Kmr,_o,Ky,Zmr,bbe,egr,ogr,Ka,rgr,vbe,tgr,agr,Fbe,ngr,sgr,Tbe,lgr,igr,dgr,Od,F9,Mbe,cgr,fgr,XW,mgr,ggr,hgr,T9,Ebe,pgr,_gr,zW,ugr,bgr,vgr,M9,Cbe,Fgr,Tgr,QW,Mgr,Egr,Cgr,E9,wgr,wbe,Agr,Lgr,Abe,ygr,xgr,C9,nVe,Vd,w9,Lbe,Zy,$gr,ybe,kgr,sVe,Jo,e8,Sgr,Xd,Rgr,WW,Pgr,Bgr,HW,Igr,Ngr,qgr,o8,jgr,xbe,Dgr,Ggr,Ogr,At,r8,Vgr,$be,Xgr,zgr,zd,Qgr,kbe,Wgr,Hgr,UW,Ugr,Jgr,Ygr,A9,Kgr,uo,t8,Zgr,Sbe,ehr,ohr,Za,rhr,Rbe,thr,ahr,Pbe,nhr,shr,Bbe,lhr,ihr,dhr,a8,L9,Ibe,chr,fhr,JW,mhr,ghr,hhr,y9,Nbe,phr,_hr,YW,uhr,bhr,vhr,x9,Fhr,qbe,Thr,Mhr,jbe,Ehr,Chr,$9,lVe,Qd,k9,Dbe,n8,whr,Gbe,Ahr,iVe,Yo,s8,Lhr,Wd,yhr,KW,xhr,$hr,ZW,khr,Shr,Rhr,l8,Phr,Obe,Bhr,Ihr,Nhr,Lt,i8,qhr,Vbe,jhr,Dhr,Hd,Ghr,Xbe,Ohr,Vhr,eH,Xhr,zhr,Qhr,S9,Whr,bo,d8,Hhr,zbe,Uhr,Jhr,en,Yhr,Qbe,Khr,Zhr,Wbe,epr,opr,Hbe,rpr,tpr,apr,Ube,R9,Jbe,npr,spr,oH,lpr,ipr,dpr,P9,cpr,Ybe,fpr,mpr,Kbe,gpr,hpr,B9,dVe,Ud,I9,Zbe,c8,ppr,eve,_pr,cVe,Ko,f8,upr,Jd,bpr,rH,vpr,Fpr,tH,Tpr,Mpr,Epr,m8,Cpr,ove,wpr,Apr,Lpr,yt,g8,ypr,rve,xpr,$pr,Yd,kpr,tve,Spr,Rpr,aH,Ppr,Bpr,Ipr,N9,Npr,vo,h8,qpr,ave,jpr,Dpr,on,Gpr,nve,Opr,Vpr,sve,Xpr,zpr,lve,Qpr,Wpr,Hpr,rn,q9,ive,Upr,Jpr,nH,Ypr,Kpr,Zpr,j9,dve,e_r,o_r,sH,r_r,t_r,a_r,D9,cve,n_r,s_r,lH,l_r,i_r,d_r,G9,fve,c_r,f_r,iH,m_r,g_r,h_r,O9,p_r,mve,__r,u_r,gve,b_r,v_r,V9,fVe,Kd,X9,hve,p8,F_r,pve,T_r,mVe,Zo,_8,M_r,Zd,E_r,dH,C_r,w_r,cH,A_r,L_r,y_r,u8,x_r,_ve,$_r,k_r,S_r,xt,b8,R_r,uve,P_r,B_r,ec,I_r,bve,N_r,q_r,fH,j_r,D_r,G_r,z9,O_r,Fo,v8,V_r,vve,X_r,z_r,tn,Q_r,Fve,W_r,H_r,Tve,U_r,J_r,Mve,Y_r,K_r,Z_r,Eve,Q9,Cve,eur,our,mH,rur,tur,aur,W9,nur,wve,sur,lur,Ave,iur,dur,H9,gVe,oc,U9,Lve,F8,cur,yve,fur,hVe,er,T8,mur,rc,gur,gH,hur,pur,hH,_ur,uur,bur,M8,vur,xve,Fur,Tur,Mur,$t,E8,Eur,$ve,Cur,wur,tc,Aur,kve,Lur,yur,pH,xur,$ur,kur,J9,Sur,yr,C8,Rur,Sve,Pur,Bur,an,Iur,Rve,Nur,qur,Pve,jur,Dur,Bve,Gur,Our,Vur,j,Y9,Ive,Xur,zur,_H,Qur,Wur,Hur,K9,Nve,Uur,Jur,uH,Yur,Kur,Zur,Z9,qve,e7r,o7r,bH,r7r,t7r,a7r,eM,jve,n7r,s7r,vH,l7r,i7r,d7r,oM,Dve,c7r,f7r,FH,m7r,g7r,h7r,rM,Gve,p7r,_7r,TH,u7r,b7r,v7r,tM,Ove,F7r,T7r,MH,M7r,E7r,C7r,aM,Vve,w7r,A7r,EH,L7r,y7r,x7r,nM,Xve,$7r,k7r,CH,S7r,R7r,P7r,sM,zve,B7r,I7r,wH,N7r,q7r,j7r,lM,Qve,D7r,G7r,AH,O7r,V7r,X7r,iM,Wve,z7r,Q7r,LH,W7r,H7r,U7r,dM,Hve,J7r,Y7r,yH,K7r,Z7r,e1r,cM,Uve,o1r,r1r,xH,t1r,a1r,n1r,fM,Jve,s1r,l1r,$H,i1r,d1r,c1r,mM,Yve,f1r,m1r,kH,g1r,h1r,p1r,gM,Kve,_1r,u1r,SH,b1r,v1r,F1r,Ws,Zve,T1r,M1r,RH,E1r,C1r,PH,w1r,A1r,L1r,hM,eFe,y1r,x1r,BH,$1r,k1r,S1r,pM,oFe,R1r,P1r,IH,B1r,I1r,N1r,_M,rFe,q1r,j1r,NH,D1r,G1r,O1r,uM,tFe,V1r,X1r,qH,z1r,Q1r,W1r,bM,aFe,H1r,U1r,jH,J1r,Y1r,K1r,vM,nFe,Z1r,e2r,DH,o2r,r2r,t2r,FM,sFe,a2r,n2r,GH,s2r,l2r,i2r,TM,lFe,d2r,c2r,OH,f2r,m2r,g2r,MM,iFe,h2r,p2r,VH,_2r,u2r,b2r,EM,dFe,v2r,F2r,XH,T2r,M2r,E2r,CM,cFe,C2r,w2r,zH,A2r,L2r,y2r,wM,fFe,x2r,$2r,QH,k2r,S2r,R2r,AM,mFe,P2r,B2r,WH,I2r,N2r,q2r,LM,gFe,j2r,D2r,HH,G2r,O2r,V2r,yM,hFe,X2r,z2r,UH,Q2r,W2r,H2r,xM,pFe,U2r,J2r,JH,Y2r,K2r,Z2r,$M,_Fe,ebr,obr,YH,rbr,tbr,abr,kM,uFe,nbr,sbr,KH,lbr,ibr,dbr,SM,bFe,cbr,fbr,ZH,mbr,gbr,hbr,RM,vFe,pbr,_br,eU,ubr,bbr,vbr,PM,FFe,Fbr,Tbr,oU,Mbr,Ebr,Cbr,BM,TFe,wbr,Abr,rU,Lbr,ybr,xbr,IM,MFe,$br,kbr,tU,Sbr,Rbr,Pbr,NM,EFe,Bbr,Ibr,aU,Nbr,qbr,jbr,qM,CFe,Dbr,Gbr,nU,Obr,Vbr,Xbr,jM,wFe,zbr,Qbr,sU,Wbr,Hbr,Ubr,DM,AFe,Jbr,Ybr,lU,Kbr,Zbr,evr,GM,LFe,ovr,rvr,iU,tvr,avr,nvr,OM,yFe,svr,lvr,dU,ivr,dvr,cvr,VM,pVe,ac,XM,xFe,w8,fvr,$Fe,mvr,_Ve,or,A8,gvr,nc,hvr,cU,pvr,_vr,fU,uvr,bvr,vvr,L8,Fvr,kFe,Tvr,Mvr,Evr,kt,y8,Cvr,SFe,wvr,Avr,sc,Lvr,RFe,yvr,xvr,mU,$vr,kvr,Svr,zM,Rvr,xr,x8,Pvr,PFe,Bvr,Ivr,nn,Nvr,BFe,qvr,jvr,IFe,Dvr,Gvr,NFe,Ovr,Vvr,Xvr,se,QM,qFe,zvr,Qvr,gU,Wvr,Hvr,Uvr,WM,jFe,Jvr,Yvr,hU,Kvr,Zvr,eFr,HM,DFe,oFr,rFr,pU,tFr,aFr,nFr,UM,GFe,sFr,lFr,_U,iFr,dFr,cFr,JM,OFe,fFr,mFr,uU,gFr,hFr,pFr,YM,VFe,_Fr,uFr,bU,bFr,vFr,FFr,KM,XFe,TFr,MFr,vU,EFr,CFr,wFr,ZM,zFe,AFr,LFr,FU,yFr,xFr,$Fr,eE,QFe,kFr,SFr,TU,RFr,PFr,BFr,oE,WFe,IFr,NFr,MU,qFr,jFr,DFr,rE,HFe,GFr,OFr,EU,VFr,XFr,zFr,tE,UFe,QFr,WFr,CU,HFr,UFr,JFr,aE,JFe,YFr,KFr,wU,ZFr,eTr,oTr,nE,YFe,rTr,tTr,AU,aTr,nTr,sTr,sE,KFe,lTr,iTr,LU,dTr,cTr,fTr,lE,ZFe,mTr,gTr,yU,hTr,pTr,_Tr,iE,eTe,uTr,bTr,xU,vTr,FTr,TTr,dE,oTe,MTr,ETr,$U,CTr,wTr,ATr,cE,rTe,LTr,yTr,kU,xTr,$Tr,kTr,fE,tTe,STr,RTr,SU,PTr,BTr,ITr,mE,aTe,NTr,qTr,RU,jTr,DTr,GTr,gE,nTe,OTr,VTr,PU,XTr,zTr,QTr,hE,sTe,WTr,HTr,BU,UTr,JTr,YTr,pE,uVe,lc,_E,lTe,$8,KTr,iTe,ZTr,bVe,rr,k8,e9r,ic,o9r,IU,r9r,t9r,NU,a9r,n9r,s9r,S8,l9r,dTe,i9r,d9r,c9r,St,R8,f9r,cTe,m9r,g9r,dc,h9r,fTe,p9r,_9r,qU,u9r,b9r,v9r,uE,F9r,$r,P8,T9r,mTe,M9r,E9r,sn,C9r,gTe,w9r,A9r,hTe,L9r,y9r,pTe,x9r,$9r,k9r,Me,bE,_Te,S9r,R9r,jU,P9r,B9r,I9r,vE,uTe,N9r,q9r,DU,j9r,D9r,G9r,FE,bTe,O9r,V9r,GU,X9r,z9r,Q9r,TE,vTe,W9r,H9r,OU,U9r,J9r,Y9r,ME,FTe,K9r,Z9r,VU,eMr,oMr,rMr,EE,TTe,tMr,aMr,XU,nMr,sMr,lMr,CE,MTe,iMr,dMr,zU,cMr,fMr,mMr,wE,ETe,gMr,hMr,QU,pMr,_Mr,uMr,AE,CTe,bMr,vMr,WU,FMr,TMr,MMr,LE,wTe,EMr,CMr,HU,wMr,AMr,LMr,yE,ATe,yMr,xMr,UU,$Mr,kMr,SMr,xE,LTe,RMr,PMr,JU,BMr,IMr,NMr,$E,yTe,qMr,jMr,YU,DMr,GMr,OMr,kE,vVe,cc,SE,xTe,B8,VMr,$Te,XMr,FVe,tr,I8,zMr,fc,QMr,KU,WMr,HMr,ZU,UMr,JMr,YMr,N8,KMr,kTe,ZMr,eEr,oEr,Rt,q8,rEr,STe,tEr,aEr,mc,nEr,RTe,sEr,lEr,eJ,iEr,dEr,cEr,RE,fEr,kr,j8,mEr,PTe,gEr,hEr,ln,pEr,BTe,_Er,uEr,ITe,bEr,vEr,NTe,FEr,TEr,MEr,dn,PE,qTe,EEr,CEr,oJ,wEr,AEr,LEr,BE,jTe,yEr,xEr,rJ,$Er,kEr,SEr,IE,DTe,REr,PEr,tJ,BEr,IEr,NEr,NE,GTe,qEr,jEr,aJ,DEr,GEr,OEr,qE,TVe,gc,jE,OTe,D8,VEr,VTe,XEr,MVe,ar,G8,zEr,hc,QEr,nJ,WEr,HEr,sJ,UEr,JEr,YEr,O8,KEr,XTe,ZEr,e4r,o4r,Pt,V8,r4r,zTe,t4r,a4r,pc,n4r,QTe,s4r,l4r,lJ,i4r,d4r,c4r,DE,f4r,Sr,X8,m4r,WTe,g4r,h4r,cn,p4r,HTe,_4r,u4r,UTe,b4r,v4r,JTe,F4r,T4r,M4r,ie,GE,YTe,E4r,C4r,iJ,w4r,A4r,L4r,OE,KTe,y4r,x4r,dJ,$4r,k4r,S4r,VE,ZTe,R4r,P4r,cJ,B4r,I4r,N4r,XE,e9e,q4r,j4r,fJ,D4r,G4r,O4r,zE,o9e,V4r,X4r,mJ,z4r,Q4r,W4r,QE,r9e,H4r,U4r,gJ,J4r,Y4r,K4r,WE,t9e,Z4r,eCr,hJ,oCr,rCr,tCr,HE,a9e,aCr,nCr,pJ,sCr,lCr,iCr,UE,n9e,dCr,cCr,_J,fCr,mCr,gCr,JE,s9e,hCr,pCr,uJ,_Cr,uCr,bCr,YE,l9e,vCr,FCr,bJ,TCr,MCr,ECr,KE,i9e,CCr,wCr,vJ,ACr,LCr,yCr,ZE,d9e,xCr,$Cr,FJ,kCr,SCr,RCr,e4,c9e,PCr,BCr,TJ,ICr,NCr,qCr,o4,f9e,jCr,DCr,MJ,GCr,OCr,VCr,r4,m9e,XCr,zCr,EJ,QCr,WCr,HCr,t4,g9e,UCr,JCr,CJ,YCr,KCr,ZCr,a4,h9e,e5r,o5r,wJ,r5r,t5r,a5r,n4,p9e,n5r,s5r,AJ,l5r,i5r,d5r,s4,_9e,c5r,f5r,LJ,m5r,g5r,h5r,l4,EVe,_c,i4,u9e,z8,p5r,b9e,_5r,CVe,nr,Q8,u5r,uc,b5r,yJ,v5r,F5r,xJ,T5r,M5r,E5r,W8,C5r,v9e,w5r,A5r,L5r,Bt,H8,y5r,F9e,x5r,$5r,bc,k5r,T9e,S5r,R5r,$J,P5r,B5r,I5r,d4,N5r,Rr,U8,q5r,M9e,j5r,D5r,fn,G5r,E9e,O5r,V5r,C9e,X5r,z5r,w9e,Q5r,W5r,H5r,ye,c4,A9e,U5r,J5r,kJ,Y5r,K5r,Z5r,f4,L9e,e3r,o3r,SJ,r3r,t3r,a3r,m4,y9e,n3r,s3r,RJ,l3r,i3r,d3r,g4,x9e,c3r,f3r,PJ,m3r,g3r,h3r,h4,$9e,p3r,_3r,BJ,u3r,b3r,v3r,p4,k9e,F3r,T3r,IJ,M3r,E3r,C3r,_4,S9e,w3r,A3r,NJ,L3r,y3r,x3r,u4,R9e,$3r,k3r,qJ,S3r,R3r,P3r,b4,P9e,B3r,I3r,jJ,N3r,q3r,j3r,v4,B9e,D3r,G3r,DJ,O3r,V3r,X3r,F4,wVe,vc,T4,I9e,J8,z3r,N9e,Q3r,AVe,sr,Y8,W3r,Fc,H3r,GJ,U3r,J3r,OJ,Y3r,K3r,Z3r,K8,e0r,q9e,o0r,r0r,t0r,It,Z8,a0r,j9e,n0r,s0r,Tc,l0r,D9e,i0r,d0r,VJ,c0r,f0r,m0r,M4,g0r,Pr,ex,h0r,G9e,p0r,_0r,mn,u0r,O9e,b0r,v0r,V9e,F0r,T0r,X9e,M0r,E0r,C0r,ae,E4,z9e,w0r,A0r,XJ,L0r,y0r,x0r,C4,Q9e,$0r,k0r,zJ,S0r,R0r,P0r,w4,W9e,B0r,I0r,QJ,N0r,q0r,j0r,A4,H9e,D0r,G0r,WJ,O0r,V0r,X0r,L4,U9e,z0r,Q0r,HJ,W0r,H0r,U0r,y4,J9e,J0r,Y0r,UJ,K0r,Z0r,ewr,x4,Y9e,owr,rwr,JJ,twr,awr,nwr,$4,K9e,swr,lwr,YJ,iwr,dwr,cwr,k4,Z9e,fwr,mwr,KJ,gwr,hwr,pwr,S4,eMe,_wr,uwr,ZJ,bwr,vwr,Fwr,R4,oMe,Twr,Mwr,eY,Ewr,Cwr,wwr,P4,rMe,Awr,Lwr,oY,ywr,xwr,$wr,B4,tMe,kwr,Swr,rY,Rwr,Pwr,Bwr,I4,aMe,Iwr,Nwr,tY,qwr,jwr,Dwr,N4,nMe,Gwr,Owr,aY,Vwr,Xwr,zwr,q4,sMe,Qwr,Wwr,nY,Hwr,Uwr,Jwr,j4,lMe,Ywr,Kwr,sY,Zwr,eAr,oAr,D4,iMe,rAr,tAr,lY,aAr,nAr,sAr,G4,dMe,lAr,iAr,iY,dAr,cAr,fAr,O4,cMe,mAr,gAr,dY,hAr,pAr,_Ar,V4,fMe,uAr,bAr,cY,vAr,FAr,TAr,X4,mMe,MAr,EAr,fY,CAr,wAr,AAr,z4,gMe,LAr,yAr,mY,xAr,$Ar,kAr,Q4,hMe,SAr,RAr,gY,PAr,BAr,IAr,W4,pMe,NAr,qAr,hY,jAr,DAr,GAr,H4,_Me,OAr,VAr,pY,XAr,zAr,QAr,U4,LVe,Mc,J4,uMe,ox,WAr,bMe,HAr,yVe,lr,rx,UAr,Ec,JAr,_Y,YAr,KAr,uY,ZAr,e6r,o6r,tx,r6r,vMe,t6r,a6r,n6r,Nt,ax,s6r,FMe,l6r,i6r,Cc,d6r,TMe,c6r,f6r,bY,m6r,g6r,h6r,Y4,p6r,Br,nx,_6r,MMe,u6r,b6r,gn,v6r,EMe,F6r,T6r,CMe,M6r,E6r,wMe,C6r,w6r,A6r,_e,K4,AMe,L6r,y6r,vY,x6r,$6r,k6r,Z4,LMe,S6r,R6r,FY,P6r,B6r,I6r,eC,yMe,N6r,q6r,TY,j6r,D6r,G6r,oC,xMe,O6r,V6r,MY,X6r,z6r,Q6r,rC,$Me,W6r,H6r,EY,U6r,J6r,Y6r,tC,kMe,K6r,Z6r,CY,eLr,oLr,rLr,aC,SMe,tLr,aLr,wY,nLr,sLr,lLr,nC,RMe,iLr,dLr,AY,cLr,fLr,mLr,sC,PMe,gLr,hLr,LY,pLr,_Lr,uLr,lC,BMe,bLr,vLr,yY,FLr,TLr,MLr,iC,IMe,ELr,CLr,xY,wLr,ALr,LLr,dC,NMe,yLr,xLr,$Y,$Lr,kLr,SLr,cC,qMe,RLr,PLr,kY,BLr,ILr,NLr,fC,jMe,qLr,jLr,SY,DLr,GLr,OLr,mC,DMe,VLr,XLr,RY,zLr,QLr,WLr,gC,GMe,HLr,ULr,PY,JLr,YLr,KLr,hC,OMe,ZLr,eyr,BY,oyr,ryr,tyr,pC,xVe,wc,_C,VMe,sx,ayr,XMe,nyr,$Ve,ir,lx,syr,Ac,lyr,IY,iyr,dyr,NY,cyr,fyr,myr,ix,gyr,zMe,hyr,pyr,_yr,qt,dx,uyr,QMe,byr,vyr,Lc,Fyr,WMe,Tyr,Myr,qY,Eyr,Cyr,wyr,uC,Ayr,Ir,cx,Lyr,HMe,yyr,xyr,hn,$yr,UMe,kyr,Syr,JMe,Ryr,Pyr,YMe,Byr,Iyr,Nyr,fx,bC,KMe,qyr,jyr,jY,Dyr,Gyr,Oyr,vC,ZMe,Vyr,Xyr,DY,zyr,Qyr,Wyr,FC,kVe,yc,TC,eEe,mx,Hyr,oEe,Uyr,SVe,dr,gx,Jyr,xc,Yyr,GY,Kyr,Zyr,OY,e8r,o8r,r8r,hx,t8r,rEe,a8r,n8r,s8r,jt,px,l8r,tEe,i8r,d8r,$c,c8r,aEe,f8r,m8r,VY,g8r,h8r,p8r,MC,_8r,Nr,_x,u8r,nEe,b8r,v8r,pn,F8r,sEe,T8r,M8r,lEe,E8r,C8r,iEe,w8r,A8r,L8r,dEe,EC,cEe,y8r,x8r,XY,$8r,k8r,S8r,CC,RVe,kc,wC,fEe,ux,R8r,mEe,P8r,PVe,cr,bx,B8r,Sc,I8r,zY,N8r,q8r,QY,j8r,D8r,G8r,vx,O8r,gEe,V8r,X8r,z8r,Dt,Fx,Q8r,hEe,W8r,H8r,Rc,U8r,pEe,J8r,Y8r,WY,K8r,Z8r,exr,AC,oxr,qr,Tx,rxr,_Ee,txr,axr,_n,nxr,uEe,sxr,lxr,bEe,ixr,dxr,vEe,cxr,fxr,mxr,de,LC,FEe,gxr,hxr,HY,pxr,_xr,uxr,yC,TEe,bxr,vxr,UY,Fxr,Txr,Mxr,xC,MEe,Exr,Cxr,JY,wxr,Axr,Lxr,$C,EEe,yxr,xxr,YY,$xr,kxr,Sxr,kC,CEe,Rxr,Pxr,KY,Bxr,Ixr,Nxr,SC,wEe,qxr,jxr,ZY,Dxr,Gxr,Oxr,RC,AEe,Vxr,Xxr,eK,zxr,Qxr,Wxr,PC,LEe,Hxr,Uxr,oK,Jxr,Yxr,Kxr,BC,yEe,Zxr,e$r,rK,o$r,r$r,t$r,IC,xEe,a$r,n$r,tK,s$r,l$r,i$r,NC,$Ee,d$r,c$r,aK,f$r,m$r,g$r,qC,kEe,h$r,p$r,nK,_$r,u$r,b$r,jC,SEe,v$r,F$r,sK,T$r,M$r,E$r,DC,REe,C$r,w$r,lK,A$r,L$r,y$r,GC,PEe,x$r,$$r,iK,k$r,S$r,R$r,OC,BEe,P$r,B$r,dK,I$r,N$r,q$r,VC,IEe,j$r,D$r,cK,G$r,O$r,V$r,XC,NEe,X$r,z$r,fK,Q$r,W$r,H$r,zC,qEe,U$r,J$r,mK,Y$r,K$r,Z$r,QC,jEe,ekr,okr,gK,rkr,tkr,akr,WC,BVe,Pc,HC,DEe,Mx,nkr,GEe,skr,IVe,fr,Ex,lkr,Bc,ikr,hK,dkr,ckr,pK,fkr,mkr,gkr,Cx,hkr,OEe,pkr,_kr,ukr,Gt,wx,bkr,VEe,vkr,Fkr,Ic,Tkr,XEe,Mkr,Ekr,_K,Ckr,wkr,Akr,UC,Lkr,jr,Ax,ykr,zEe,xkr,$kr,un,kkr,QEe,Skr,Rkr,WEe,Pkr,Bkr,HEe,Ikr,Nkr,qkr,ce,JC,UEe,jkr,Dkr,uK,Gkr,Okr,Vkr,YC,JEe,Xkr,zkr,bK,Qkr,Wkr,Hkr,KC,YEe,Ukr,Jkr,vK,Ykr,Kkr,Zkr,ZC,KEe,eSr,oSr,FK,rSr,tSr,aSr,e5,ZEe,nSr,sSr,TK,lSr,iSr,dSr,o5,e4e,cSr,fSr,MK,mSr,gSr,hSr,r5,o4e,pSr,_Sr,EK,uSr,bSr,vSr,t5,r4e,FSr,TSr,CK,MSr,ESr,CSr,a5,t4e,wSr,ASr,wK,LSr,ySr,xSr,n5,a4e,$Sr,kSr,AK,SSr,RSr,PSr,s5,n4e,BSr,ISr,LK,NSr,qSr,jSr,l5,s4e,DSr,GSr,yK,OSr,VSr,XSr,i5,l4e,zSr,QSr,xK,WSr,HSr,USr,d5,i4e,JSr,YSr,$K,KSr,ZSr,eRr,c5,d4e,oRr,rRr,kK,tRr,aRr,nRr,f5,c4e,sRr,lRr,SK,iRr,dRr,cRr,m5,f4e,fRr,mRr,RK,gRr,hRr,pRr,g5,m4e,_Rr,uRr,PK,bRr,vRr,FRr,h5,g4e,TRr,MRr,BK,ERr,CRr,wRr,p5,h4e,ARr,LRr,IK,yRr,xRr,$Rr,_5,NVe,Nc,u5,p4e,Lx,kRr,_4e,SRr,qVe,mr,yx,RRr,qc,PRr,NK,BRr,IRr,qK,NRr,qRr,jRr,xx,DRr,u4e,GRr,ORr,VRr,Ot,$x,XRr,b4e,zRr,QRr,jc,WRr,v4e,HRr,URr,jK,JRr,YRr,KRr,b5,ZRr,Dr,kx,ePr,F4e,oPr,rPr,bn,tPr,T4e,aPr,nPr,M4e,sPr,lPr,E4e,iPr,dPr,cPr,C4e,v5,w4e,fPr,mPr,DK,gPr,hPr,pPr,F5,jVe,Dc,T5,A4e,Sx,_Pr,L4e,uPr,DVe,gr,Rx,bPr,Gc,vPr,GK,FPr,TPr,OK,MPr,EPr,CPr,Px,wPr,y4e,APr,LPr,yPr,Vt,Bx,xPr,x4e,$Pr,kPr,Oc,SPr,$4e,RPr,PPr,VK,BPr,IPr,NPr,M5,qPr,Gr,Ix,jPr,k4e,DPr,GPr,vn,OPr,S4e,VPr,XPr,R4e,zPr,QPr,P4e,WPr,HPr,UPr,B4e,E5,I4e,JPr,YPr,XK,KPr,ZPr,eBr,C5,GVe,Vc,w5,N4e,Nx,oBr,q4e,rBr,OVe,hr,qx,tBr,Xc,aBr,zK,nBr,sBr,QK,lBr,iBr,dBr,jx,cBr,j4e,fBr,mBr,gBr,Xt,Dx,hBr,D4e,pBr,_Br,zc,uBr,G4e,bBr,vBr,WK,FBr,TBr,MBr,A5,EBr,Or,Gx,CBr,O4e,wBr,ABr,Fn,LBr,V4e,yBr,xBr,X4e,$Br,kBr,z4e,SBr,RBr,PBr,oe,L5,Q4e,BBr,IBr,HK,NBr,qBr,jBr,y5,W4e,DBr,GBr,UK,OBr,VBr,XBr,x5,H4e,zBr,QBr,JK,WBr,HBr,UBr,$5,U4e,JBr,YBr,YK,KBr,ZBr,eIr,k5,J4e,oIr,rIr,KK,tIr,aIr,nIr,S5,Y4e,sIr,lIr,ZK,iIr,dIr,cIr,R5,K4e,fIr,mIr,eZ,gIr,hIr,pIr,P5,Z4e,_Ir,uIr,oZ,bIr,vIr,FIr,B5,eCe,TIr,MIr,rZ,EIr,CIr,wIr,I5,oCe,AIr,LIr,tZ,yIr,xIr,$Ir,N5,rCe,kIr,SIr,aZ,RIr,PIr,BIr,q5,tCe,IIr,NIr,nZ,qIr,jIr,DIr,j5,aCe,GIr,OIr,sZ,VIr,XIr,zIr,D5,nCe,QIr,WIr,lZ,HIr,UIr,JIr,G5,sCe,YIr,KIr,iZ,ZIr,eNr,oNr,O5,lCe,rNr,tNr,dZ,aNr,nNr,sNr,V5,iCe,lNr,iNr,cZ,dNr,cNr,fNr,X5,dCe,mNr,gNr,fZ,hNr,pNr,_Nr,z5,cCe,uNr,bNr,mZ,vNr,FNr,TNr,Q5,fCe,MNr,ENr,gZ,CNr,wNr,ANr,W5,mCe,LNr,yNr,hZ,xNr,$Nr,kNr,H5,gCe,SNr,RNr,pZ,PNr,BNr,INr,U5,hCe,NNr,qNr,_Z,jNr,DNr,GNr,J5,pCe,ONr,VNr,uZ,XNr,zNr,QNr,Y5,_Ce,WNr,HNr,bZ,UNr,JNr,YNr,K5,uCe,KNr,ZNr,vZ,eqr,oqr,rqr,Z5,bCe,tqr,aqr,FZ,nqr,sqr,lqr,e3,vCe,iqr,dqr,TZ,cqr,fqr,mqr,o3,VVe,Qc,r3,FCe,Ox,gqr,TCe,hqr,XVe,pr,Vx,pqr,Wc,_qr,MZ,uqr,bqr,EZ,vqr,Fqr,Tqr,Xx,Mqr,MCe,Eqr,Cqr,wqr,zt,zx,Aqr,ECe,Lqr,yqr,Hc,xqr,CCe,$qr,kqr,CZ,Sqr,Rqr,Pqr,t3,Bqr,Vr,Qx,Iqr,wCe,Nqr,qqr,Tn,jqr,ACe,Dqr,Gqr,LCe,Oqr,Vqr,yCe,Xqr,zqr,Qqr,xe,a3,xCe,Wqr,Hqr,wZ,Uqr,Jqr,Yqr,n3,$Ce,Kqr,Zqr,AZ,ejr,ojr,rjr,s3,kCe,tjr,ajr,LZ,njr,sjr,ljr,l3,SCe,ijr,djr,yZ,cjr,fjr,mjr,i3,RCe,gjr,hjr,xZ,pjr,_jr,ujr,d3,PCe,bjr,vjr,$Z,Fjr,Tjr,Mjr,c3,BCe,Ejr,Cjr,kZ,wjr,Ajr,Ljr,f3,ICe,yjr,xjr,SZ,$jr,kjr,Sjr,m3,NCe,Rjr,Pjr,RZ,Bjr,Ijr,Njr,g3,qCe,qjr,jjr,PZ,Djr,Gjr,Ojr,h3,zVe,Uc,p3,jCe,Wx,Vjr,DCe,Xjr,QVe,_r,Hx,zjr,Jc,Qjr,BZ,Wjr,Hjr,IZ,Ujr,Jjr,Yjr,Ux,Kjr,GCe,Zjr,eDr,oDr,Qt,Jx,rDr,OCe,tDr,aDr,Yc,nDr,VCe,sDr,lDr,NZ,iDr,dDr,cDr,_3,fDr,Xr,Yx,mDr,XCe,gDr,hDr,Mn,pDr,zCe,_Dr,uDr,QCe,bDr,vDr,WCe,FDr,TDr,MDr,Ee,u3,HCe,EDr,CDr,qZ,wDr,ADr,LDr,b3,UCe,yDr,xDr,jZ,$Dr,kDr,SDr,v3,JCe,RDr,PDr,DZ,BDr,IDr,NDr,F3,YCe,qDr,jDr,GZ,DDr,GDr,ODr,T3,KCe,VDr,XDr,OZ,zDr,QDr,WDr,M3,ZCe,HDr,UDr,VZ,JDr,YDr,KDr,E3,e5e,ZDr,eGr,XZ,oGr,rGr,tGr,C3,o5e,aGr,nGr,zZ,sGr,lGr,iGr,w3,r5e,dGr,cGr,QZ,fGr,mGr,gGr,A3,t5e,hGr,pGr,WZ,_Gr,uGr,bGr,L3,a5e,vGr,FGr,HZ,TGr,MGr,EGr,y3,n5e,CGr,wGr,UZ,AGr,LGr,yGr,x3,s5e,xGr,$Gr,JZ,kGr,SGr,RGr,$3,WVe,Kc,k3,l5e,Kx,PGr,i5e,BGr,HVe,ur,Zx,IGr,Zc,NGr,YZ,qGr,jGr,KZ,DGr,GGr,OGr,e$,VGr,d5e,XGr,zGr,QGr,Wt,o$,WGr,c5e,HGr,UGr,ef,JGr,f5e,YGr,KGr,ZZ,ZGr,eOr,oOr,S3,rOr,zr,r$,tOr,m5e,aOr,nOr,En,sOr,g5e,lOr,iOr,h5e,dOr,cOr,p5e,fOr,mOr,gOr,$e,R3,_5e,hOr,pOr,eee,_Or,uOr,bOr,P3,u5e,vOr,FOr,oee,TOr,MOr,EOr,B3,b5e,COr,wOr,ree,AOr,LOr,yOr,I3,v5e,xOr,$Or,tee,kOr,SOr,ROr,N3,F5e,POr,BOr,aee,IOr,NOr,qOr,q3,T5e,jOr,DOr,nee,GOr,OOr,VOr,j3,M5e,XOr,zOr,see,QOr,WOr,HOr,D3,E5e,UOr,JOr,lee,YOr,KOr,ZOr,G3,C5e,eVr,oVr,iee,rVr,tVr,aVr,O3,w5e,nVr,sVr,dee,lVr,iVr,dVr,V3,UVe,of,X3,A5e,t$,cVr,L5e,fVr,JVe,br,a$,mVr,rf,gVr,cee,hVr,pVr,fee,_Vr,uVr,bVr,n$,vVr,y5e,FVr,TVr,MVr,Ht,s$,EVr,x5e,CVr,wVr,tf,AVr,$5e,LVr,yVr,mee,xVr,$Vr,kVr,z3,SVr,Qr,l$,RVr,k5e,PVr,BVr,Cn,IVr,S5e,NVr,qVr,R5e,jVr,DVr,P5e,GVr,OVr,VVr,ke,Q3,B5e,XVr,zVr,gee,QVr,WVr,HVr,W3,I5e,UVr,JVr,hee,YVr,KVr,ZVr,H3,N5e,eXr,oXr,pee,rXr,tXr,aXr,U3,q5e,nXr,sXr,_ee,lXr,iXr,dXr,J3,j5e,cXr,fXr,uee,mXr,gXr,hXr,Y3,D5e,pXr,_Xr,bee,uXr,bXr,vXr,K3,G5e,FXr,TXr,vee,MXr,EXr,CXr,Z3,O5e,wXr,AXr,Fee,LXr,yXr,xXr,e0,V5e,$Xr,kXr,Tee,SXr,RXr,PXr,o0,X5e,BXr,IXr,Mee,NXr,qXr,jXr,r0,YVe,af,t0,z5e,i$,DXr,Q5e,GXr,KVe,vr,d$,OXr,nf,VXr,Eee,XXr,zXr,Cee,QXr,WXr,HXr,c$,UXr,W5e,JXr,YXr,KXr,Ut,f$,ZXr,H5e,ezr,ozr,sf,rzr,U5e,tzr,azr,wee,nzr,szr,lzr,a0,izr,Wr,m$,dzr,J5e,czr,fzr,wn,mzr,Y5e,gzr,hzr,K5e,pzr,_zr,Z5e,uzr,bzr,vzr,Se,n0,e3e,Fzr,Tzr,Aee,Mzr,Ezr,Czr,s0,o3e,wzr,Azr,Lee,Lzr,yzr,xzr,l0,r3e,$zr,kzr,yee,Szr,Rzr,Pzr,i0,t3e,Bzr,Izr,xee,Nzr,qzr,jzr,d0,a3e,Dzr,Gzr,$ee,Ozr,Vzr,Xzr,c0,n3e,zzr,Qzr,kee,Wzr,Hzr,Uzr,f0,s3e,Jzr,Yzr,See,Kzr,Zzr,eQr,m0,l3e,oQr,rQr,Ree,tQr,aQr,nQr,g0,i3e,sQr,lQr,Pee,iQr,dQr,cQr,h0,d3e,fQr,mQr,Bee,gQr,hQr,pQr,p0,ZVe,lf,_0,c3e,g$,_Qr,f3e,uQr,eXe,Fr,h$,bQr,df,vQr,Iee,FQr,TQr,Nee,MQr,EQr,CQr,p$,wQr,m3e,AQr,LQr,yQr,Jt,_$,xQr,g3e,$Qr,kQr,cf,SQr,h3e,RQr,PQr,qee,BQr,IQr,NQr,u0,qQr,Hr,u$,jQr,p3e,DQr,GQr,An,OQr,_3e,VQr,XQr,u3e,zQr,QQr,b3e,WQr,HQr,UQr,Re,b0,v3e,JQr,YQr,jee,KQr,ZQr,eWr,v0,F3e,oWr,rWr,Dee,tWr,aWr,nWr,F0,T3e,sWr,lWr,Gee,iWr,dWr,cWr,T0,M3e,fWr,mWr,Oee,gWr,hWr,pWr,M0,E3e,_Wr,uWr,Vee,bWr,vWr,FWr,E0,C3e,TWr,MWr,Xee,EWr,CWr,wWr,C0,w3e,AWr,LWr,zee,yWr,xWr,$Wr,w0,A3e,kWr,SWr,Qee,RWr,PWr,BWr,A0,L3e,IWr,NWr,Wee,qWr,jWr,DWr,L0,y3e,GWr,OWr,Hee,VWr,XWr,zWr,y0,oXe,ff,x0,x3e,b$,QWr,$3e,WWr,rXe,Tr,v$,HWr,mf,UWr,Uee,JWr,YWr,Jee,KWr,ZWr,eHr,F$,oHr,k3e,rHr,tHr,aHr,Yt,T$,nHr,S3e,sHr,lHr,gf,iHr,R3e,dHr,cHr,Yee,fHr,mHr,gHr,$0,hHr,Ur,M$,pHr,P3e,_Hr,uHr,Ln,bHr,B3e,vHr,FHr,I3e,THr,MHr,N3e,EHr,CHr,wHr,Ve,k0,q3e,AHr,LHr,Kee,yHr,xHr,$Hr,S0,j3e,kHr,SHr,Zee,RHr,PHr,BHr,R0,D3e,IHr,NHr,eoe,qHr,jHr,DHr,P0,G3e,GHr,OHr,ooe,VHr,XHr,zHr,B0,O3e,QHr,WHr,roe,HHr,UHr,JHr,I0,V3e,YHr,KHr,toe,ZHr,eUr,oUr,N0,X3e,rUr,tUr,aoe,aUr,nUr,sUr,q0,z3e,lUr,iUr,noe,dUr,cUr,fUr,j0,tXe,hf,D0,Q3e,E$,mUr,W3e,gUr,aXe,Mr,C$,hUr,pf,pUr,soe,_Ur,uUr,loe,bUr,vUr,FUr,w$,TUr,H3e,MUr,EUr,CUr,Kt,A$,wUr,U3e,AUr,LUr,_f,yUr,J3e,xUr,$Ur,ioe,kUr,SUr,RUr,G0,PUr,Jr,L$,BUr,Y3e,IUr,NUr,yn,qUr,K3e,jUr,DUr,Z3e,GUr,OUr,e0e,VUr,XUr,zUr,Xe,O0,o0e,QUr,WUr,doe,HUr,UUr,JUr,V0,r0e,YUr,KUr,coe,ZUr,eJr,oJr,X0,t0e,rJr,tJr,foe,aJr,nJr,sJr,z0,a0e,lJr,iJr,moe,dJr,cJr,fJr,Q0,n0e,mJr,gJr,goe,hJr,pJr,_Jr,W0,s0e,uJr,bJr,hoe,vJr,FJr,TJr,H0,l0e,MJr,EJr,poe,CJr,wJr,AJr,U0,i0e,LJr,yJr,_oe,xJr,$Jr,kJr,J0,nXe,uf,Y0,d0e,y$,SJr,c0e,RJr,sXe,Er,x$,PJr,bf,BJr,uoe,IJr,NJr,boe,qJr,jJr,DJr,$$,GJr,f0e,OJr,VJr,XJr,Zt,k$,zJr,m0e,QJr,WJr,vf,HJr,g0e,UJr,JJr,voe,YJr,KJr,ZJr,K0,eYr,Yr,S$,oYr,h0e,rYr,tYr,xn,aYr,p0e,nYr,sYr,_0e,lYr,iYr,u0e,dYr,cYr,fYr,b0e,Z0,v0e,mYr,gYr,Foe,hYr,pYr,_Yr,ew,lXe,Ff,ow,F0e,R$,uYr,T0e,bYr,iXe,Cr,P$,vYr,Tf,FYr,Toe,TYr,MYr,Moe,EYr,CYr,wYr,B$,AYr,M0e,LYr,yYr,xYr,ea,I$,$Yr,E0e,kYr,SYr,Mf,RYr,C0e,PYr,BYr,Eoe,IYr,NYr,qYr,rw,jYr,Kr,N$,DYr,w0e,GYr,OYr,$n,VYr,A0e,XYr,zYr,L0e,QYr,WYr,y0e,HYr,UYr,JYr,q$,tw,x0e,YYr,KYr,Coe,ZYr,eKr,oKr,aw,$0e,rKr,tKr,woe,aKr,nKr,sKr,nw,dXe,Ef,sw,k0e,j$,lKr,S0e,iKr,cXe,wr,D$,dKr,Cf,cKr,Aoe,fKr,mKr,Loe,gKr,hKr,pKr,G$,_Kr,R0e,uKr,bKr,vKr,oa,O$,FKr,P0e,TKr,MKr,wf,EKr,B0e,CKr,wKr,yoe,AKr,LKr,yKr,lw,xKr,Zr,V$,$Kr,I0e,kKr,SKr,kn,RKr,N0e,PKr,BKr,q0e,IKr,NKr,j0e,qKr,jKr,DKr,D0e,iw,G0e,GKr,OKr,xoe,VKr,XKr,zKr,dw,fXe;return d=new te({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),P6=new te({}),B6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new QKr({props:{warning:!0,$$slots:{default:[xGt]},$$scope:{ctx:x}}}),I6=new te({}),N6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/configuration_auto.py#L601"}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/configuration_auto.py#L624"}}),Vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),G6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/configuration_auto.py#L747"}}),O6=new te({}),V6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/tokenization_auto.py#L401"}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17779/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/tokenization_auto.py#L415"}}),wh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),W6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/tokenization_auto.py#L614"}}),H6=new te({}),U6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17779/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),sp=new QKr({props:{$$slots:{default:[SGt]},$$scope:{ctx:x}}}),lp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),Z6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/processing_auto.py#L88"}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/processing_auto.py#L102"}}),Lp=new QKr({props:{$$slots:{default:[PGt]},$$scope:{ctx:x}}}),yp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),nL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/processing_auto.py#L255"}}),sL=new te({}),lL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L770"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),kp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L777"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),_L=new te({}),uL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L792"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),y7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),p1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),TL=new te({}),ML=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L799"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),u1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),AL=new te({}),LL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L806"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),kL=new te({}),SL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L815"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),IL=new te({}),NL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L860"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),GL=new te({}),OL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L867"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),QL=new te({}),WL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L853"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),YL=new te({}),KL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L824"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L831"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),ly=new te({}),iy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L876"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),my=new te({}),gy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L915"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),uy=new te({}),by=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L842"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),My=new te({}),Ey=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L922"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),Ly=new te({}),yy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L945"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),Sy=new te({}),Ry=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L929"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),r9=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),Ny=new te({}),qy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L936"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),a9=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),i9=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L954"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),c9=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L961"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),v9=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),C9=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),Zy=new te({}),e8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L908"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),A9=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),$9=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),n8=new te({}),s8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L883"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),S9=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),B9=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),c8=new te({}),f8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L890"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),N9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),V9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),p8=new te({}),_8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_auto.py#L899"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),z9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),H9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),F8=new te({}),T8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),J9=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),w8=new te({}),A8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),$8=new te({}),k8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),B8=new te({}),I8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),D8=new te({}),G8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),z8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),J8=new te({}),Y8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),ox=new te({}),rx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),sx=new te({}),lx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),mx=new te({}),gx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:x}}}),ux=new te({}),bx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[JOt]},$$scope:{ctx:x}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:x}}}),Mx=new te({}),Ex=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:x}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:x}}}),Lx=new te({}),yx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:x}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:x}}}),Sx=new te({}),Rx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:x}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:x}}}),Nx=new te({}),qx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/dpt#transformers.FlaxDPTModel">FlaxDPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:x}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:x}}}),Ox=new te({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:x}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:x}}}),Wx=new te({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:x}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:x}}}),Kx=new te({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L285"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:x}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:x}}}),t$=new te({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:x}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:x}}}),i$=new te({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L301"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:x}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:x}}}),g$=new te({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:x}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:x}}}),b$=new te({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L317"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:x}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:x}}}),E$=new te({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L326"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:x}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:x}}}),y$=new te({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:x}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:x}}}),R$=new te({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L342"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:x}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:x}}}),j$=new te({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/modeling_flax_auto.py#L351"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:x}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17779/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17779/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17779/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),$6=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),k6=o("AutoConfig"),Pn=o(", "),Bn=a("a"),S6=o("AutoModel"),Ai=o(`, and
`),In=a("a"),R6=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),iS=o("will create a model that is an instance of "),yi=a("a"),dS=o("BertModel"),cS=o("."),Co=l(),$a=a("p"),fS=o("There is one class of "),Sf=a("code"),mS=o("AutoModel"),TQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sOe=l(),xi=a("h2"),Rf=a("a"),Cte=a("span"),F(P6.$$.fragment),MQe=l(),wte=a("span"),EQe=o("Extending the Auto Classes"),lOe=l(),Nn=a("p"),CQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ate=a("code"),wQe=o("NewModel"),AQe=o(", make sure you have a "),Lte=a("code"),LQe=o("NewModelConfig"),yQe=o(` then you can add those to the auto
classes like this:`),iOe=l(),F(B6.$$.fragment),dOe=l(),gS=a("p"),xQe=o("You will then be able to use the auto classes like you would usually do!"),cOe=l(),F(Pf.$$.fragment),fOe=l(),$i=a("h2"),Bf=a("a"),yte=a("span"),F(I6.$$.fragment),$Qe=l(),xte=a("span"),kQe=o("AutoConfig"),mOe=l(),wo=a("div"),F(N6.$$.fragment),SQe=l(),q6=a("p"),RQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),hS=a("a"),PQe=o("from_pretrained()"),BQe=o(" class method."),IQe=l(),j6=a("p"),NQe=o("This class cannot be instantiated directly using "),$te=a("code"),qQe=o("__init__()"),jQe=o(" (throws an error)."),DQe=l(),Ar=a("div"),F(D6.$$.fragment),GQe=l(),kte=a("p"),OQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),VQe=l(),ki=a("p"),XQe=o("The configuration class to instantiate is selected based on the "),Ste=a("code"),zQe=o("model_type"),QQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rte=a("code"),WQe=o("pretrained_model_name_or_path"),HQe=o(":"),UQe=l(),A=a("ul"),If=a("li"),Pte=a("strong"),JQe=o("albert"),YQe=o(" \u2014 "),pS=a("a"),KQe=o("AlbertConfig"),ZQe=o(" (ALBERT model)"),eWe=l(),Nf=a("li"),Bte=a("strong"),oWe=o("bart"),rWe=o(" \u2014 "),_S=a("a"),tWe=o("BartConfig"),aWe=o(" (BART model)"),nWe=l(),qf=a("li"),Ite=a("strong"),sWe=o("beit"),lWe=o(" \u2014 "),uS=a("a"),iWe=o("BeitConfig"),dWe=o(" (BEiT model)"),cWe=l(),jf=a("li"),Nte=a("strong"),fWe=o("bert"),mWe=o(" \u2014 "),bS=a("a"),gWe=o("BertConfig"),hWe=o(" (BERT model)"),pWe=l(),Df=a("li"),qte=a("strong"),_We=o("bert-generation"),uWe=o(" \u2014 "),vS=a("a"),bWe=o("BertGenerationConfig"),vWe=o(" (Bert Generation model)"),FWe=l(),Gf=a("li"),jte=a("strong"),TWe=o("big_bird"),MWe=o(" \u2014 "),FS=a("a"),EWe=o("BigBirdConfig"),CWe=o(" (BigBird model)"),wWe=l(),Of=a("li"),Dte=a("strong"),AWe=o("bigbird_pegasus"),LWe=o(" \u2014 "),TS=a("a"),yWe=o("BigBirdPegasusConfig"),xWe=o(" (BigBird-Pegasus model)"),$We=l(),Vf=a("li"),Gte=a("strong"),kWe=o("blenderbot"),SWe=o(" \u2014 "),MS=a("a"),RWe=o("BlenderbotConfig"),PWe=o(" (Blenderbot model)"),BWe=l(),Xf=a("li"),Ote=a("strong"),IWe=o("blenderbot-small"),NWe=o(" \u2014 "),ES=a("a"),qWe=o("BlenderbotSmallConfig"),jWe=o(" (BlenderbotSmall model)"),DWe=l(),zf=a("li"),Vte=a("strong"),GWe=o("bloom"),OWe=o(" \u2014 "),CS=a("a"),VWe=o("BloomConfig"),XWe=o(" (BLOOM model)"),zWe=l(),Qf=a("li"),Xte=a("strong"),QWe=o("camembert"),WWe=o(" \u2014 "),wS=a("a"),HWe=o("CamembertConfig"),UWe=o(" (CamemBERT model)"),JWe=l(),Wf=a("li"),zte=a("strong"),YWe=o("canine"),KWe=o(" \u2014 "),AS=a("a"),ZWe=o("CanineConfig"),eHe=o(" (CANINE model)"),oHe=l(),Hf=a("li"),Qte=a("strong"),rHe=o("clip"),tHe=o(" \u2014 "),LS=a("a"),aHe=o("CLIPConfig"),nHe=o(" (CLIP model)"),sHe=l(),Uf=a("li"),Wte=a("strong"),lHe=o("codegen"),iHe=o(" \u2014 "),yS=a("a"),dHe=o("CodeGenConfig"),cHe=o(" (CodeGen model)"),fHe=l(),Jf=a("li"),Hte=a("strong"),mHe=o("convbert"),gHe=o(" \u2014 "),xS=a("a"),hHe=o("ConvBertConfig"),pHe=o(" (ConvBERT model)"),_He=l(),Yf=a("li"),Ute=a("strong"),uHe=o("convnext"),bHe=o(" \u2014 "),$S=a("a"),vHe=o("ConvNextConfig"),FHe=o(" (ConvNeXT model)"),THe=l(),Kf=a("li"),Jte=a("strong"),MHe=o("ctrl"),EHe=o(" \u2014 "),kS=a("a"),CHe=o("CTRLConfig"),wHe=o(" (CTRL model)"),AHe=l(),Zf=a("li"),Yte=a("strong"),LHe=o("cvt"),yHe=o(" \u2014 "),SS=a("a"),xHe=o("CvtConfig"),$He=o(" (CvT model)"),kHe=l(),em=a("li"),Kte=a("strong"),SHe=o("data2vec-audio"),RHe=o(" \u2014 "),RS=a("a"),PHe=o("Data2VecAudioConfig"),BHe=o(" (Data2VecAudio model)"),IHe=l(),om=a("li"),Zte=a("strong"),NHe=o("data2vec-text"),qHe=o(" \u2014 "),PS=a("a"),jHe=o("Data2VecTextConfig"),DHe=o(" (Data2VecText model)"),GHe=l(),rm=a("li"),eae=a("strong"),OHe=o("data2vec-vision"),VHe=o(" \u2014 "),BS=a("a"),XHe=o("Data2VecVisionConfig"),zHe=o(" (Data2VecVision model)"),QHe=l(),tm=a("li"),oae=a("strong"),WHe=o("deberta"),HHe=o(" \u2014 "),IS=a("a"),UHe=o("DebertaConfig"),JHe=o(" (DeBERTa model)"),YHe=l(),am=a("li"),rae=a("strong"),KHe=o("deberta-v2"),ZHe=o(" \u2014 "),NS=a("a"),eUe=o("DebertaV2Config"),oUe=o(" (DeBERTa-v2 model)"),rUe=l(),nm=a("li"),tae=a("strong"),tUe=o("decision_transformer"),aUe=o(" \u2014 "),qS=a("a"),nUe=o("DecisionTransformerConfig"),sUe=o(" (Decision Transformer model)"),lUe=l(),sm=a("li"),aae=a("strong"),iUe=o("deit"),dUe=o(" \u2014 "),jS=a("a"),cUe=o("DeiTConfig"),fUe=o(" (DeiT model)"),mUe=l(),lm=a("li"),nae=a("strong"),gUe=o("detr"),hUe=o(" \u2014 "),DS=a("a"),pUe=o("DetrConfig"),_Ue=o(" (DETR model)"),uUe=l(),im=a("li"),sae=a("strong"),bUe=o("distilbert"),vUe=o(" \u2014 "),GS=a("a"),FUe=o("DistilBertConfig"),TUe=o(" (DistilBERT model)"),MUe=l(),dm=a("li"),lae=a("strong"),EUe=o("dpr"),CUe=o(" \u2014 "),OS=a("a"),wUe=o("DPRConfig"),AUe=o(" (DPR model)"),LUe=l(),cm=a("li"),iae=a("strong"),yUe=o("dpt"),xUe=o(" \u2014 "),VS=a("a"),$Ue=o("DPTConfig"),kUe=o(" (DPT model)"),SUe=l(),fm=a("li"),dae=a("strong"),RUe=o("electra"),PUe=o(" \u2014 "),XS=a("a"),BUe=o("ElectraConfig"),IUe=o(" (ELECTRA model)"),NUe=l(),mm=a("li"),cae=a("strong"),qUe=o("encoder-decoder"),jUe=o(" \u2014 "),zS=a("a"),DUe=o("EncoderDecoderConfig"),GUe=o(" (Encoder decoder model)"),OUe=l(),gm=a("li"),fae=a("strong"),VUe=o("flaubert"),XUe=o(" \u2014 "),QS=a("a"),zUe=o("FlaubertConfig"),QUe=o(" (FlauBERT model)"),WUe=l(),hm=a("li"),mae=a("strong"),HUe=o("flava"),UUe=o(" \u2014 "),WS=a("a"),JUe=o("FlavaConfig"),YUe=o(" (FLAVA model)"),KUe=l(),pm=a("li"),gae=a("strong"),ZUe=o("fnet"),eJe=o(" \u2014 "),HS=a("a"),oJe=o("FNetConfig"),rJe=o(" (FNet model)"),tJe=l(),_m=a("li"),hae=a("strong"),aJe=o("fsmt"),nJe=o(" \u2014 "),US=a("a"),sJe=o("FSMTConfig"),lJe=o(" (FairSeq Machine-Translation model)"),iJe=l(),um=a("li"),pae=a("strong"),dJe=o("funnel"),cJe=o(" \u2014 "),JS=a("a"),fJe=o("FunnelConfig"),mJe=o(" (Funnel Transformer model)"),gJe=l(),bm=a("li"),_ae=a("strong"),hJe=o("glpn"),pJe=o(" \u2014 "),YS=a("a"),_Je=o("GLPNConfig"),uJe=o(" (GLPN model)"),bJe=l(),vm=a("li"),uae=a("strong"),vJe=o("gpt2"),FJe=o(" \u2014 "),KS=a("a"),TJe=o("GPT2Config"),MJe=o(" (OpenAI GPT-2 model)"),EJe=l(),Fm=a("li"),bae=a("strong"),CJe=o("gpt_neo"),wJe=o(" \u2014 "),ZS=a("a"),AJe=o("GPTNeoConfig"),LJe=o(" (GPT Neo model)"),yJe=l(),Tm=a("li"),vae=a("strong"),xJe=o("gpt_neox"),$Je=o(" \u2014 "),eR=a("a"),kJe=o("GPTNeoXConfig"),SJe=o(" (GPT NeoX model)"),RJe=l(),Mm=a("li"),Fae=a("strong"),PJe=o("gptj"),BJe=o(" \u2014 "),oR=a("a"),IJe=o("GPTJConfig"),NJe=o(" (GPT-J model)"),qJe=l(),Em=a("li"),Tae=a("strong"),jJe=o("hubert"),DJe=o(" \u2014 "),rR=a("a"),GJe=o("HubertConfig"),OJe=o(" (Hubert model)"),VJe=l(),Cm=a("li"),Mae=a("strong"),XJe=o("ibert"),zJe=o(" \u2014 "),tR=a("a"),QJe=o("IBertConfig"),WJe=o(" (I-BERT model)"),HJe=l(),wm=a("li"),Eae=a("strong"),UJe=o("imagegpt"),JJe=o(" \u2014 "),aR=a("a"),YJe=o("ImageGPTConfig"),KJe=o(" (ImageGPT model)"),ZJe=l(),Am=a("li"),Cae=a("strong"),eYe=o("layoutlm"),oYe=o(" \u2014 "),nR=a("a"),rYe=o("LayoutLMConfig"),tYe=o(" (LayoutLM model)"),aYe=l(),Lm=a("li"),wae=a("strong"),nYe=o("layoutlmv2"),sYe=o(" \u2014 "),sR=a("a"),lYe=o("LayoutLMv2Config"),iYe=o(" (LayoutLMv2 model)"),dYe=l(),ym=a("li"),Aae=a("strong"),cYe=o("layoutlmv3"),fYe=o(" \u2014 "),lR=a("a"),mYe=o("LayoutLMv3Config"),gYe=o(" (LayoutLMv3 model)"),hYe=l(),xm=a("li"),Lae=a("strong"),pYe=o("led"),_Ye=o(" \u2014 "),iR=a("a"),uYe=o("LEDConfig"),bYe=o(" (LED model)"),vYe=l(),$m=a("li"),yae=a("strong"),FYe=o("levit"),TYe=o(" \u2014 "),dR=a("a"),MYe=o("LevitConfig"),EYe=o(" (LeViT model)"),CYe=l(),km=a("li"),xae=a("strong"),wYe=o("longformer"),AYe=o(" \u2014 "),cR=a("a"),LYe=o("LongformerConfig"),yYe=o(" (Longformer model)"),xYe=l(),Sm=a("li"),$ae=a("strong"),$Ye=o("longt5"),kYe=o(" \u2014 "),fR=a("a"),SYe=o("LongT5Config"),RYe=o(" (LongT5 model)"),PYe=l(),Rm=a("li"),kae=a("strong"),BYe=o("luke"),IYe=o(" \u2014 "),mR=a("a"),NYe=o("LukeConfig"),qYe=o(" (LUKE model)"),jYe=l(),Pm=a("li"),Sae=a("strong"),DYe=o("lxmert"),GYe=o(" \u2014 "),gR=a("a"),OYe=o("LxmertConfig"),VYe=o(" (LXMERT model)"),XYe=l(),Bm=a("li"),Rae=a("strong"),zYe=o("m2m_100"),QYe=o(" \u2014 "),hR=a("a"),WYe=o("M2M100Config"),HYe=o(" (M2M100 model)"),UYe=l(),Im=a("li"),Pae=a("strong"),JYe=o("marian"),YYe=o(" \u2014 "),pR=a("a"),KYe=o("MarianConfig"),ZYe=o(" (Marian model)"),eKe=l(),Nm=a("li"),Bae=a("strong"),oKe=o("maskformer"),rKe=o(" \u2014 "),_R=a("a"),tKe=o("MaskFormerConfig"),aKe=o(" (MaskFormer model)"),nKe=l(),qm=a("li"),Iae=a("strong"),sKe=o("mbart"),lKe=o(" \u2014 "),uR=a("a"),iKe=o("MBartConfig"),dKe=o(" (mBART model)"),cKe=l(),jm=a("li"),Nae=a("strong"),fKe=o("mctct"),mKe=o(" \u2014 "),bR=a("a"),gKe=o("MCTCTConfig"),hKe=o(" (M-CTC-T model)"),pKe=l(),Dm=a("li"),qae=a("strong"),_Ke=o("megatron-bert"),uKe=o(" \u2014 "),vR=a("a"),bKe=o("MegatronBertConfig"),vKe=o(" (Megatron-BERT model)"),FKe=l(),Gm=a("li"),jae=a("strong"),TKe=o("mobilebert"),MKe=o(" \u2014 "),FR=a("a"),EKe=o("MobileBertConfig"),CKe=o(" (MobileBERT model)"),wKe=l(),Om=a("li"),Dae=a("strong"),AKe=o("mpnet"),LKe=o(" \u2014 "),TR=a("a"),yKe=o("MPNetConfig"),xKe=o(" (MPNet model)"),$Ke=l(),Vm=a("li"),Gae=a("strong"),kKe=o("mt5"),SKe=o(" \u2014 "),MR=a("a"),RKe=o("MT5Config"),PKe=o(" (MT5 model)"),BKe=l(),Xm=a("li"),Oae=a("strong"),IKe=o("nezha"),NKe=o(" \u2014 "),ER=a("a"),qKe=o("NezhaConfig"),jKe=o(" (Nezha model)"),DKe=l(),zm=a("li"),Vae=a("strong"),GKe=o("nystromformer"),OKe=o(" \u2014 "),CR=a("a"),VKe=o("NystromformerConfig"),XKe=o(" (Nystr\xF6mformer model)"),zKe=l(),Qm=a("li"),Xae=a("strong"),QKe=o("openai-gpt"),WKe=o(" \u2014 "),wR=a("a"),HKe=o("OpenAIGPTConfig"),UKe=o(" (OpenAI GPT model)"),JKe=l(),Wm=a("li"),zae=a("strong"),YKe=o("opt"),KKe=o(" \u2014 "),AR=a("a"),ZKe=o("OPTConfig"),eZe=o(" (OPT model)"),oZe=l(),Hm=a("li"),Qae=a("strong"),rZe=o("pegasus"),tZe=o(" \u2014 "),LR=a("a"),aZe=o("PegasusConfig"),nZe=o(" (Pegasus model)"),sZe=l(),Um=a("li"),Wae=a("strong"),lZe=o("perceiver"),iZe=o(" \u2014 "),yR=a("a"),dZe=o("PerceiverConfig"),cZe=o(" (Perceiver model)"),fZe=l(),Jm=a("li"),Hae=a("strong"),mZe=o("plbart"),gZe=o(" \u2014 "),xR=a("a"),hZe=o("PLBartConfig"),pZe=o(" (PLBart model)"),_Ze=l(),Ym=a("li"),Uae=a("strong"),uZe=o("poolformer"),bZe=o(" \u2014 "),$R=a("a"),vZe=o("PoolFormerConfig"),FZe=o(" (PoolFormer model)"),TZe=l(),Km=a("li"),Jae=a("strong"),MZe=o("prophetnet"),EZe=o(" \u2014 "),kR=a("a"),CZe=o("ProphetNetConfig"),wZe=o(" (ProphetNet model)"),AZe=l(),Zm=a("li"),Yae=a("strong"),LZe=o("qdqbert"),yZe=o(" \u2014 "),SR=a("a"),xZe=o("QDQBertConfig"),$Ze=o(" (QDQBert model)"),kZe=l(),eg=a("li"),Kae=a("strong"),SZe=o("rag"),RZe=o(" \u2014 "),RR=a("a"),PZe=o("RagConfig"),BZe=o(" (RAG model)"),IZe=l(),og=a("li"),Zae=a("strong"),NZe=o("realm"),qZe=o(" \u2014 "),PR=a("a"),jZe=o("RealmConfig"),DZe=o(" (REALM model)"),GZe=l(),rg=a("li"),ene=a("strong"),OZe=o("reformer"),VZe=o(" \u2014 "),BR=a("a"),XZe=o("ReformerConfig"),zZe=o(" (Reformer model)"),QZe=l(),tg=a("li"),one=a("strong"),WZe=o("regnet"),HZe=o(" \u2014 "),IR=a("a"),UZe=o("RegNetConfig"),JZe=o(" (RegNet model)"),YZe=l(),ag=a("li"),rne=a("strong"),KZe=o("rembert"),ZZe=o(" \u2014 "),NR=a("a"),eeo=o("RemBertConfig"),oeo=o(" (RemBERT model)"),reo=l(),ng=a("li"),tne=a("strong"),teo=o("resnet"),aeo=o(" \u2014 "),qR=a("a"),neo=o("ResNetConfig"),seo=o(" (ResNet model)"),leo=l(),sg=a("li"),ane=a("strong"),ieo=o("retribert"),deo=o(" \u2014 "),jR=a("a"),ceo=o("RetriBertConfig"),feo=o(" (RetriBERT model)"),meo=l(),lg=a("li"),nne=a("strong"),geo=o("roberta"),heo=o(" \u2014 "),DR=a("a"),peo=o("RobertaConfig"),_eo=o(" (RoBERTa model)"),ueo=l(),ig=a("li"),sne=a("strong"),beo=o("roformer"),veo=o(" \u2014 "),GR=a("a"),Feo=o("RoFormerConfig"),Teo=o(" (RoFormer model)"),Meo=l(),dg=a("li"),lne=a("strong"),Eeo=o("segformer"),Ceo=o(" \u2014 "),OR=a("a"),weo=o("SegformerConfig"),Aeo=o(" (SegFormer model)"),Leo=l(),cg=a("li"),ine=a("strong"),yeo=o("sew"),xeo=o(" \u2014 "),VR=a("a"),$eo=o("SEWConfig"),keo=o(" (SEW model)"),Seo=l(),fg=a("li"),dne=a("strong"),Reo=o("sew-d"),Peo=o(" \u2014 "),XR=a("a"),Beo=o("SEWDConfig"),Ieo=o(" (SEW-D model)"),Neo=l(),mg=a("li"),cne=a("strong"),qeo=o("speech-encoder-decoder"),jeo=o(" \u2014 "),zR=a("a"),Deo=o("SpeechEncoderDecoderConfig"),Geo=o(" (Speech Encoder decoder model)"),Oeo=l(),gg=a("li"),fne=a("strong"),Veo=o("speech_to_text"),Xeo=o(" \u2014 "),QR=a("a"),zeo=o("Speech2TextConfig"),Qeo=o(" (Speech2Text model)"),Weo=l(),hg=a("li"),mne=a("strong"),Heo=o("speech_to_text_2"),Ueo=o(" \u2014 "),WR=a("a"),Jeo=o("Speech2Text2Config"),Yeo=o(" (Speech2Text2 model)"),Keo=l(),pg=a("li"),gne=a("strong"),Zeo=o("splinter"),eoo=o(" \u2014 "),HR=a("a"),ooo=o("SplinterConfig"),roo=o(" (Splinter model)"),too=l(),_g=a("li"),hne=a("strong"),aoo=o("squeezebert"),noo=o(" \u2014 "),UR=a("a"),soo=o("SqueezeBertConfig"),loo=o(" (SqueezeBERT model)"),ioo=l(),ug=a("li"),pne=a("strong"),doo=o("swin"),coo=o(" \u2014 "),JR=a("a"),foo=o("SwinConfig"),moo=o(" (Swin Transformer model)"),goo=l(),bg=a("li"),_ne=a("strong"),hoo=o("t5"),poo=o(" \u2014 "),YR=a("a"),_oo=o("T5Config"),uoo=o(" (T5 model)"),boo=l(),vg=a("li"),une=a("strong"),voo=o("tapas"),Foo=o(" \u2014 "),KR=a("a"),Too=o("TapasConfig"),Moo=o(" (TAPAS model)"),Eoo=l(),Fg=a("li"),bne=a("strong"),Coo=o("trajectory_transformer"),woo=o(" \u2014 "),ZR=a("a"),Aoo=o("TrajectoryTransformerConfig"),Loo=o(" (Trajectory Transformer model)"),yoo=l(),Tg=a("li"),vne=a("strong"),xoo=o("transfo-xl"),$oo=o(" \u2014 "),eP=a("a"),koo=o("TransfoXLConfig"),Soo=o(" (Transformer-XL model)"),Roo=l(),Mg=a("li"),Fne=a("strong"),Poo=o("trocr"),Boo=o(" \u2014 "),oP=a("a"),Ioo=o("TrOCRConfig"),Noo=o(" (TrOCR model)"),qoo=l(),Eg=a("li"),Tne=a("strong"),joo=o("unispeech"),Doo=o(" \u2014 "),rP=a("a"),Goo=o("UniSpeechConfig"),Ooo=o(" (UniSpeech model)"),Voo=l(),Cg=a("li"),Mne=a("strong"),Xoo=o("unispeech-sat"),zoo=o(" \u2014 "),tP=a("a"),Qoo=o("UniSpeechSatConfig"),Woo=o(" (UniSpeechSat model)"),Hoo=l(),wg=a("li"),Ene=a("strong"),Uoo=o("van"),Joo=o(" \u2014 "),aP=a("a"),Yoo=o("VanConfig"),Koo=o(" (VAN model)"),Zoo=l(),Ag=a("li"),Cne=a("strong"),ero=o("vilt"),oro=o(" \u2014 "),nP=a("a"),rro=o("ViltConfig"),tro=o(" (ViLT model)"),aro=l(),Lg=a("li"),wne=a("strong"),nro=o("vision-encoder-decoder"),sro=o(" \u2014 "),sP=a("a"),lro=o("VisionEncoderDecoderConfig"),iro=o(" (Vision Encoder decoder model)"),dro=l(),yg=a("li"),Ane=a("strong"),cro=o("vision-text-dual-encoder"),fro=o(" \u2014 "),lP=a("a"),mro=o("VisionTextDualEncoderConfig"),gro=o(" (VisionTextDualEncoder model)"),hro=l(),xg=a("li"),Lne=a("strong"),pro=o("visual_bert"),_ro=o(" \u2014 "),iP=a("a"),uro=o("VisualBertConfig"),bro=o(" (VisualBERT model)"),vro=l(),$g=a("li"),yne=a("strong"),Fro=o("vit"),Tro=o(" \u2014 "),dP=a("a"),Mro=o("ViTConfig"),Ero=o(" (ViT model)"),Cro=l(),kg=a("li"),xne=a("strong"),wro=o("vit_mae"),Aro=o(" \u2014 "),cP=a("a"),Lro=o("ViTMAEConfig"),yro=o(" (ViTMAE model)"),xro=l(),Sg=a("li"),$ne=a("strong"),$ro=o("wav2vec2"),kro=o(" \u2014 "),fP=a("a"),Sro=o("Wav2Vec2Config"),Rro=o(" (Wav2Vec2 model)"),Pro=l(),Rg=a("li"),kne=a("strong"),Bro=o("wav2vec2-conformer"),Iro=o(" \u2014 "),mP=a("a"),Nro=o("Wav2Vec2ConformerConfig"),qro=o(" (Wav2Vec2-Conformer model)"),jro=l(),Pg=a("li"),Sne=a("strong"),Dro=o("wavlm"),Gro=o(" \u2014 "),gP=a("a"),Oro=o("WavLMConfig"),Vro=o(" (WavLM model)"),Xro=l(),Bg=a("li"),Rne=a("strong"),zro=o("xglm"),Qro=o(" \u2014 "),hP=a("a"),Wro=o("XGLMConfig"),Hro=o(" (XGLM model)"),Uro=l(),Ig=a("li"),Pne=a("strong"),Jro=o("xlm"),Yro=o(" \u2014 "),pP=a("a"),Kro=o("XLMConfig"),Zro=o(" (XLM model)"),eto=l(),Ng=a("li"),Bne=a("strong"),oto=o("xlm-prophetnet"),rto=o(" \u2014 "),_P=a("a"),tto=o("XLMProphetNetConfig"),ato=o(" (XLM-ProphetNet model)"),nto=l(),qg=a("li"),Ine=a("strong"),sto=o("xlm-roberta"),lto=o(" \u2014 "),uP=a("a"),ito=o("XLMRobertaConfig"),dto=o(" (XLM-RoBERTa model)"),cto=l(),jg=a("li"),Nne=a("strong"),fto=o("xlm-roberta-xl"),mto=o(" \u2014 "),bP=a("a"),gto=o("XLMRobertaXLConfig"),hto=o(" (XLM-RoBERTa-XL model)"),pto=l(),Dg=a("li"),qne=a("strong"),_to=o("xlnet"),uto=o(" \u2014 "),vP=a("a"),bto=o("XLNetConfig"),vto=o(" (XLNet model)"),Fto=l(),Gg=a("li"),jne=a("strong"),Tto=o("yolos"),Mto=o(" \u2014 "),FP=a("a"),Eto=o("YolosConfig"),Cto=o(" (YOLOS model)"),wto=l(),Og=a("li"),Dne=a("strong"),Ato=o("yoso"),Lto=o(" \u2014 "),TP=a("a"),yto=o("YosoConfig"),xto=o(" (YOSO model)"),$to=l(),F(Vg.$$.fragment),kto=l(),Xg=a("div"),F(G6.$$.fragment),Sto=l(),Gne=a("p"),Rto=o("Register a new configuration for this class."),gOe=l(),Si=a("h2"),zg=a("a"),One=a("span"),F(O6.$$.fragment),Pto=l(),Vne=a("span"),Bto=o("AutoTokenizer"),hOe=l(),Ao=a("div"),F(V6.$$.fragment),Ito=l(),X6=a("p"),Nto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MP=a("a"),qto=o("AutoTokenizer.from_pretrained()"),jto=o(" class method."),Dto=l(),z6=a("p"),Gto=o("This class cannot be instantiated directly using "),Xne=a("code"),Oto=o("__init__()"),Vto=o(" (throws an error)."),Xto=l(),Lr=a("div"),F(Q6.$$.fragment),zto=l(),zne=a("p"),Qto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Wto=l(),ka=a("p"),Hto=o("The tokenizer class to instantiate is selected based on the "),Qne=a("code"),Uto=o("model_type"),Jto=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),Yto=o("pretrained_model_name_or_path"),Kto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=a("code"),Zto=o("pretrained_model_name_or_path"),eao=o(":"),oao=l(),k=a("ul"),qn=a("li"),Une=a("strong"),rao=o("albert"),tao=o(" \u2014 "),EP=a("a"),aao=o("AlbertTokenizer"),nao=o(" or "),CP=a("a"),sao=o("AlbertTokenizerFast"),lao=o(" (ALBERT model)"),iao=l(),jn=a("li"),Jne=a("strong"),dao=o("bart"),cao=o(" \u2014 "),wP=a("a"),fao=o("BartTokenizer"),mao=o(" or "),AP=a("a"),gao=o("BartTokenizerFast"),hao=o(" (BART model)"),pao=l(),Dn=a("li"),Yne=a("strong"),_ao=o("barthez"),uao=o(" \u2014 "),LP=a("a"),bao=o("BarthezTokenizer"),vao=o(" or "),yP=a("a"),Fao=o("BarthezTokenizerFast"),Tao=o(" (BARThez model)"),Mao=l(),Qg=a("li"),Kne=a("strong"),Eao=o("bartpho"),Cao=o(" \u2014 "),xP=a("a"),wao=o("BartphoTokenizer"),Aao=o(" (BARTpho model)"),Lao=l(),Gn=a("li"),Zne=a("strong"),yao=o("bert"),xao=o(" \u2014 "),$P=a("a"),$ao=o("BertTokenizer"),kao=o(" or "),kP=a("a"),Sao=o("BertTokenizerFast"),Rao=o(" (BERT model)"),Pao=l(),Wg=a("li"),ese=a("strong"),Bao=o("bert-generation"),Iao=o(" \u2014 "),SP=a("a"),Nao=o("BertGenerationTokenizer"),qao=o(" (Bert Generation model)"),jao=l(),Hg=a("li"),ose=a("strong"),Dao=o("bert-japanese"),Gao=o(" \u2014 "),RP=a("a"),Oao=o("BertJapaneseTokenizer"),Vao=o(" (BertJapanese model)"),Xao=l(),Ug=a("li"),rse=a("strong"),zao=o("bertweet"),Qao=o(" \u2014 "),PP=a("a"),Wao=o("BertweetTokenizer"),Hao=o(" (BERTweet model)"),Uao=l(),On=a("li"),tse=a("strong"),Jao=o("big_bird"),Yao=o(" \u2014 "),BP=a("a"),Kao=o("BigBirdTokenizer"),Zao=o(" or "),IP=a("a"),eno=o("BigBirdTokenizerFast"),ono=o(" (BigBird model)"),rno=l(),Vn=a("li"),ase=a("strong"),tno=o("bigbird_pegasus"),ano=o(" \u2014 "),NP=a("a"),nno=o("PegasusTokenizer"),sno=o(" or "),qP=a("a"),lno=o("PegasusTokenizerFast"),ino=o(" (BigBird-Pegasus model)"),dno=l(),Xn=a("li"),nse=a("strong"),cno=o("blenderbot"),fno=o(" \u2014 "),jP=a("a"),mno=o("BlenderbotTokenizer"),gno=o(" or "),DP=a("a"),hno=o("BlenderbotTokenizerFast"),pno=o(" (Blenderbot model)"),_no=l(),Jg=a("li"),sse=a("strong"),uno=o("blenderbot-small"),bno=o(" \u2014 "),GP=a("a"),vno=o("BlenderbotSmallTokenizer"),Fno=o(" (BlenderbotSmall model)"),Tno=l(),Yg=a("li"),lse=a("strong"),Mno=o("bloom"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("BloomTokenizerFast"),wno=o(" (BLOOM model)"),Ano=l(),Kg=a("li"),ise=a("strong"),Lno=o("byt5"),yno=o(" \u2014 "),VP=a("a"),xno=o("ByT5Tokenizer"),$no=o(" (ByT5 model)"),kno=l(),zn=a("li"),dse=a("strong"),Sno=o("camembert"),Rno=o(" \u2014 "),XP=a("a"),Pno=o("CamembertTokenizer"),Bno=o(" or "),zP=a("a"),Ino=o("CamembertTokenizerFast"),Nno=o(" (CamemBERT model)"),qno=l(),Zg=a("li"),cse=a("strong"),jno=o("canine"),Dno=o(" \u2014 "),QP=a("a"),Gno=o("CanineTokenizer"),Ono=o(" (CANINE model)"),Vno=l(),Qn=a("li"),fse=a("strong"),Xno=o("clip"),zno=o(" \u2014 "),WP=a("a"),Qno=o("CLIPTokenizer"),Wno=o(" or "),HP=a("a"),Hno=o("CLIPTokenizerFast"),Uno=o(" (CLIP model)"),Jno=l(),Wn=a("li"),mse=a("strong"),Yno=o("codegen"),Kno=o(" \u2014 "),UP=a("a"),Zno=o("CodeGenTokenizer"),eso=o(" or "),JP=a("a"),oso=o("CodeGenTokenizerFast"),rso=o(" (CodeGen model)"),tso=l(),Hn=a("li"),gse=a("strong"),aso=o("convbert"),nso=o(" \u2014 "),YP=a("a"),sso=o("ConvBertTokenizer"),lso=o(" or "),KP=a("a"),iso=o("ConvBertTokenizerFast"),dso=o(" (ConvBERT model)"),cso=l(),Un=a("li"),hse=a("strong"),fso=o("cpm"),mso=o(" \u2014 "),ZP=a("a"),gso=o("CpmTokenizer"),hso=o(" or "),eB=a("a"),pso=o("CpmTokenizerFast"),_so=o(" (CPM model)"),uso=l(),eh=a("li"),pse=a("strong"),bso=o("ctrl"),vso=o(" \u2014 "),oB=a("a"),Fso=o("CTRLTokenizer"),Tso=o(" (CTRL model)"),Mso=l(),Jn=a("li"),_se=a("strong"),Eso=o("data2vec-text"),Cso=o(" \u2014 "),rB=a("a"),wso=o("RobertaTokenizer"),Aso=o(" or "),tB=a("a"),Lso=o("RobertaTokenizerFast"),yso=o(" (Data2VecText model)"),xso=l(),Yn=a("li"),use=a("strong"),$so=o("deberta"),kso=o(" \u2014 "),aB=a("a"),Sso=o("DebertaTokenizer"),Rso=o(" or "),nB=a("a"),Pso=o("DebertaTokenizerFast"),Bso=o(" (DeBERTa model)"),Iso=l(),Kn=a("li"),bse=a("strong"),Nso=o("deberta-v2"),qso=o(" \u2014 "),sB=a("a"),jso=o("DebertaV2Tokenizer"),Dso=o(" or "),lB=a("a"),Gso=o("DebertaV2TokenizerFast"),Oso=o(" (DeBERTa-v2 model)"),Vso=l(),Zn=a("li"),vse=a("strong"),Xso=o("distilbert"),zso=o(" \u2014 "),iB=a("a"),Qso=o("DistilBertTokenizer"),Wso=o(" or "),dB=a("a"),Hso=o("DistilBertTokenizerFast"),Uso=o(" (DistilBERT model)"),Jso=l(),es=a("li"),Fse=a("strong"),Yso=o("dpr"),Kso=o(" \u2014 "),cB=a("a"),Zso=o("DPRQuestionEncoderTokenizer"),elo=o(" or "),fB=a("a"),olo=o("DPRQuestionEncoderTokenizerFast"),rlo=o(" (DPR model)"),tlo=l(),os=a("li"),Tse=a("strong"),alo=o("electra"),nlo=o(" \u2014 "),mB=a("a"),slo=o("ElectraTokenizer"),llo=o(" or "),gB=a("a"),ilo=o("ElectraTokenizerFast"),dlo=o(" (ELECTRA model)"),clo=l(),oh=a("li"),Mse=a("strong"),flo=o("flaubert"),mlo=o(" \u2014 "),hB=a("a"),glo=o("FlaubertTokenizer"),hlo=o(" (FlauBERT model)"),plo=l(),rs=a("li"),Ese=a("strong"),_lo=o("fnet"),ulo=o(" \u2014 "),pB=a("a"),blo=o("FNetTokenizer"),vlo=o(" or "),_B=a("a"),Flo=o("FNetTokenizerFast"),Tlo=o(" (FNet model)"),Mlo=l(),rh=a("li"),Cse=a("strong"),Elo=o("fsmt"),Clo=o(" \u2014 "),uB=a("a"),wlo=o("FSMTTokenizer"),Alo=o(" (FairSeq Machine-Translation model)"),Llo=l(),ts=a("li"),wse=a("strong"),ylo=o("funnel"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("FunnelTokenizer"),klo=o(" or "),vB=a("a"),Slo=o("FunnelTokenizerFast"),Rlo=o(" (Funnel Transformer model)"),Plo=l(),as=a("li"),Ase=a("strong"),Blo=o("gpt2"),Ilo=o(" \u2014 "),FB=a("a"),Nlo=o("GPT2Tokenizer"),qlo=o(" or "),TB=a("a"),jlo=o("GPT2TokenizerFast"),Dlo=o(" (OpenAI GPT-2 model)"),Glo=l(),ns=a("li"),Lse=a("strong"),Olo=o("gpt_neo"),Vlo=o(" \u2014 "),MB=a("a"),Xlo=o("GPT2Tokenizer"),zlo=o(" or "),EB=a("a"),Qlo=o("GPT2TokenizerFast"),Wlo=o(" (GPT Neo model)"),Hlo=l(),th=a("li"),yse=a("strong"),Ulo=o("gpt_neox"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("GPTNeoXTokenizerFast"),Klo=o(" (GPT NeoX model)"),Zlo=l(),ss=a("li"),xse=a("strong"),eio=o("gptj"),oio=o(" \u2014 "),wB=a("a"),rio=o("GPT2Tokenizer"),tio=o(" or "),AB=a("a"),aio=o("GPT2TokenizerFast"),nio=o(" (GPT-J model)"),sio=l(),ls=a("li"),$se=a("strong"),lio=o("herbert"),iio=o(" \u2014 "),LB=a("a"),dio=o("HerbertTokenizer"),cio=o(" or "),yB=a("a"),fio=o("HerbertTokenizerFast"),mio=o(" (HerBERT model)"),gio=l(),ah=a("li"),kse=a("strong"),hio=o("hubert"),pio=o(" \u2014 "),xB=a("a"),_io=o("Wav2Vec2CTCTokenizer"),uio=o(" (Hubert model)"),bio=l(),is=a("li"),Sse=a("strong"),vio=o("ibert"),Fio=o(" \u2014 "),$B=a("a"),Tio=o("RobertaTokenizer"),Mio=o(" or "),kB=a("a"),Eio=o("RobertaTokenizerFast"),Cio=o(" (I-BERT model)"),wio=l(),ds=a("li"),Rse=a("strong"),Aio=o("layoutlm"),Lio=o(" \u2014 "),SB=a("a"),yio=o("LayoutLMTokenizer"),xio=o(" or "),RB=a("a"),$io=o("LayoutLMTokenizerFast"),kio=o(" (LayoutLM model)"),Sio=l(),cs=a("li"),Pse=a("strong"),Rio=o("layoutlmv2"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("LayoutLMv2Tokenizer"),Iio=o(" or "),BB=a("a"),Nio=o("LayoutLMv2TokenizerFast"),qio=o(" (LayoutLMv2 model)"),jio=l(),fs=a("li"),Bse=a("strong"),Dio=o("layoutlmv3"),Gio=o(" \u2014 "),IB=a("a"),Oio=o("LayoutLMv3Tokenizer"),Vio=o(" or "),NB=a("a"),Xio=o("LayoutLMv3TokenizerFast"),zio=o(" (LayoutLMv3 model)"),Qio=l(),ms=a("li"),Ise=a("strong"),Wio=o("layoutxlm"),Hio=o(" \u2014 "),qB=a("a"),Uio=o("LayoutXLMTokenizer"),Jio=o(" or "),jB=a("a"),Yio=o("LayoutXLMTokenizerFast"),Kio=o(" (LayoutXLM model)"),Zio=l(),gs=a("li"),Nse=a("strong"),edo=o("led"),odo=o(" \u2014 "),DB=a("a"),rdo=o("LEDTokenizer"),tdo=o(" or "),GB=a("a"),ado=o("LEDTokenizerFast"),ndo=o(" (LED model)"),sdo=l(),hs=a("li"),qse=a("strong"),ldo=o("longformer"),ido=o(" \u2014 "),OB=a("a"),ddo=o("LongformerTokenizer"),cdo=o(" or "),VB=a("a"),fdo=o("LongformerTokenizerFast"),mdo=o(" (Longformer model)"),gdo=l(),ps=a("li"),jse=a("strong"),hdo=o("longt5"),pdo=o(" \u2014 "),XB=a("a"),_do=o("T5Tokenizer"),udo=o(" or "),zB=a("a"),bdo=o("T5TokenizerFast"),vdo=o(" (LongT5 model)"),Fdo=l(),nh=a("li"),Dse=a("strong"),Tdo=o("luke"),Mdo=o(" \u2014 "),QB=a("a"),Edo=o("LukeTokenizer"),Cdo=o(" (LUKE model)"),wdo=l(),_s=a("li"),Gse=a("strong"),Ado=o("lxmert"),Ldo=o(" \u2014 "),WB=a("a"),ydo=o("LxmertTokenizer"),xdo=o(" or "),HB=a("a"),$do=o("LxmertTokenizerFast"),kdo=o(" (LXMERT model)"),Sdo=l(),sh=a("li"),Ose=a("strong"),Rdo=o("m2m_100"),Pdo=o(" \u2014 "),UB=a("a"),Bdo=o("M2M100Tokenizer"),Ido=o(" (M2M100 model)"),Ndo=l(),lh=a("li"),Vse=a("strong"),qdo=o("marian"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("MarianTokenizer"),Gdo=o(" (Marian model)"),Odo=l(),us=a("li"),Xse=a("strong"),Vdo=o("mbart"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("MBartTokenizer"),Qdo=o(" or "),KB=a("a"),Wdo=o("MBartTokenizerFast"),Hdo=o(" (mBART model)"),Udo=l(),bs=a("li"),zse=a("strong"),Jdo=o("mbart50"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("MBart50Tokenizer"),Zdo=o(" or "),eI=a("a"),eco=o("MBart50TokenizerFast"),oco=o(" (mBART-50 model)"),rco=l(),vs=a("li"),Qse=a("strong"),tco=o("megatron-bert"),aco=o(" \u2014 "),oI=a("a"),nco=o("BertTokenizer"),sco=o(" or "),rI=a("a"),lco=o("BertTokenizerFast"),ico=o(" (Megatron-BERT model)"),dco=l(),ih=a("li"),Wse=a("strong"),cco=o("mluke"),fco=o(" \u2014 "),tI=a("a"),mco=o("MLukeTokenizer"),gco=o(" (mLUKE model)"),hco=l(),Fs=a("li"),Hse=a("strong"),pco=o("mobilebert"),_co=o(" \u2014 "),aI=a("a"),uco=o("MobileBertTokenizer"),bco=o(" or "),nI=a("a"),vco=o("MobileBertTokenizerFast"),Fco=o(" (MobileBERT model)"),Tco=l(),Ts=a("li"),Use=a("strong"),Mco=o("mpnet"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("MPNetTokenizer"),wco=o(" or "),lI=a("a"),Aco=o("MPNetTokenizerFast"),Lco=o(" (MPNet model)"),yco=l(),Ms=a("li"),Jse=a("strong"),xco=o("mt5"),$co=o(" \u2014 "),iI=a("a"),kco=o("MT5Tokenizer"),Sco=o(" or "),dI=a("a"),Rco=o("MT5TokenizerFast"),Pco=o(" (MT5 model)"),Bco=l(),Es=a("li"),Yse=a("strong"),Ico=o("nezha"),Nco=o(" \u2014 "),cI=a("a"),qco=o("BertTokenizer"),jco=o(" or "),fI=a("a"),Dco=o("BertTokenizerFast"),Gco=o(" (Nezha model)"),Oco=l(),Cs=a("li"),Kse=a("strong"),Vco=o("nystromformer"),Xco=o(" \u2014 "),mI=a("a"),zco=o("AlbertTokenizer"),Qco=o(" or "),gI=a("a"),Wco=o("AlbertTokenizerFast"),Hco=o(" (Nystr\xF6mformer model)"),Uco=l(),ws=a("li"),Zse=a("strong"),Jco=o("openai-gpt"),Yco=o(" \u2014 "),hI=a("a"),Kco=o("OpenAIGPTTokenizer"),Zco=o(" or "),pI=a("a"),efo=o("OpenAIGPTTokenizerFast"),ofo=o(" (OpenAI GPT model)"),rfo=l(),dh=a("li"),ele=a("strong"),tfo=o("opt"),afo=o(" \u2014 "),_I=a("a"),nfo=o("GPT2Tokenizer"),sfo=o(" (OPT model)"),lfo=l(),As=a("li"),ole=a("strong"),ifo=o("pegasus"),dfo=o(" \u2014 "),uI=a("a"),cfo=o("PegasusTokenizer"),ffo=o(" or "),bI=a("a"),mfo=o("PegasusTokenizerFast"),gfo=o(" (Pegasus model)"),hfo=l(),ch=a("li"),rle=a("strong"),pfo=o("perceiver"),_fo=o(" \u2014 "),vI=a("a"),ufo=o("PerceiverTokenizer"),bfo=o(" (Perceiver model)"),vfo=l(),fh=a("li"),tle=a("strong"),Ffo=o("phobert"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("PhobertTokenizer"),Efo=o(" (PhoBERT model)"),Cfo=l(),mh=a("li"),ale=a("strong"),wfo=o("plbart"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("PLBartTokenizer"),yfo=o(" (PLBart model)"),xfo=l(),gh=a("li"),nle=a("strong"),$fo=o("prophetnet"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("ProphetNetTokenizer"),Rfo=o(" (ProphetNet model)"),Pfo=l(),Ls=a("li"),sle=a("strong"),Bfo=o("qdqbert"),Ifo=o(" \u2014 "),EI=a("a"),Nfo=o("BertTokenizer"),qfo=o(" or "),CI=a("a"),jfo=o("BertTokenizerFast"),Dfo=o(" (QDQBert model)"),Gfo=l(),hh=a("li"),lle=a("strong"),Ofo=o("rag"),Vfo=o(" \u2014 "),wI=a("a"),Xfo=o("RagTokenizer"),zfo=o(" (RAG model)"),Qfo=l(),ys=a("li"),ile=a("strong"),Wfo=o("realm"),Hfo=o(" \u2014 "),AI=a("a"),Ufo=o("RealmTokenizer"),Jfo=o(" or "),LI=a("a"),Yfo=o("RealmTokenizerFast"),Kfo=o(" (REALM model)"),Zfo=l(),xs=a("li"),dle=a("strong"),emo=o("reformer"),omo=o(" \u2014 "),yI=a("a"),rmo=o("ReformerTokenizer"),tmo=o(" or "),xI=a("a"),amo=o("ReformerTokenizerFast"),nmo=o(" (Reformer model)"),smo=l(),$s=a("li"),cle=a("strong"),lmo=o("rembert"),imo=o(" \u2014 "),$I=a("a"),dmo=o("RemBertTokenizer"),cmo=o(" or "),kI=a("a"),fmo=o("RemBertTokenizerFast"),mmo=o(" (RemBERT model)"),gmo=l(),ks=a("li"),fle=a("strong"),hmo=o("retribert"),pmo=o(" \u2014 "),SI=a("a"),_mo=o("RetriBertTokenizer"),umo=o(" or "),RI=a("a"),bmo=o("RetriBertTokenizerFast"),vmo=o(" (RetriBERT model)"),Fmo=l(),Ss=a("li"),mle=a("strong"),Tmo=o("roberta"),Mmo=o(" \u2014 "),PI=a("a"),Emo=o("RobertaTokenizer"),Cmo=o(" or "),BI=a("a"),wmo=o("RobertaTokenizerFast"),Amo=o(" (RoBERTa model)"),Lmo=l(),Rs=a("li"),gle=a("strong"),ymo=o("roformer"),xmo=o(" \u2014 "),II=a("a"),$mo=o("RoFormerTokenizer"),kmo=o(" or "),NI=a("a"),Smo=o("RoFormerTokenizerFast"),Rmo=o(" (RoFormer model)"),Pmo=l(),ph=a("li"),hle=a("strong"),Bmo=o("speech_to_text"),Imo=o(" \u2014 "),qI=a("a"),Nmo=o("Speech2TextTokenizer"),qmo=o(" (Speech2Text model)"),jmo=l(),_h=a("li"),ple=a("strong"),Dmo=o("speech_to_text_2"),Gmo=o(" \u2014 "),jI=a("a"),Omo=o("Speech2Text2Tokenizer"),Vmo=o(" (Speech2Text2 model)"),Xmo=l(),Ps=a("li"),_le=a("strong"),zmo=o("splinter"),Qmo=o(" \u2014 "),DI=a("a"),Wmo=o("SplinterTokenizer"),Hmo=o(" or "),GI=a("a"),Umo=o("SplinterTokenizerFast"),Jmo=o(" (Splinter model)"),Ymo=l(),Bs=a("li"),ule=a("strong"),Kmo=o("squeezebert"),Zmo=o(" \u2014 "),OI=a("a"),ego=o("SqueezeBertTokenizer"),ogo=o(" or "),VI=a("a"),rgo=o("SqueezeBertTokenizerFast"),tgo=o(" (SqueezeBERT model)"),ago=l(),Is=a("li"),ble=a("strong"),ngo=o("t5"),sgo=o(" \u2014 "),XI=a("a"),lgo=o("T5Tokenizer"),igo=o(" or "),zI=a("a"),dgo=o("T5TokenizerFast"),cgo=o(" (T5 model)"),fgo=l(),uh=a("li"),vle=a("strong"),mgo=o("tapas"),ggo=o(" \u2014 "),QI=a("a"),hgo=o("TapasTokenizer"),pgo=o(" (TAPAS model)"),_go=l(),bh=a("li"),Fle=a("strong"),ugo=o("tapex"),bgo=o(" \u2014 "),WI=a("a"),vgo=o("TapexTokenizer"),Fgo=o(" (TAPEX model)"),Tgo=l(),vh=a("li"),Tle=a("strong"),Mgo=o("transfo-xl"),Ego=o(" \u2014 "),HI=a("a"),Cgo=o("TransfoXLTokenizer"),wgo=o(" (Transformer-XL model)"),Ago=l(),Ns=a("li"),Mle=a("strong"),Lgo=o("vilt"),ygo=o(" \u2014 "),UI=a("a"),xgo=o("BertTokenizer"),$go=o(" or "),JI=a("a"),kgo=o("BertTokenizerFast"),Sgo=o(" (ViLT model)"),Rgo=l(),qs=a("li"),Ele=a("strong"),Pgo=o("visual_bert"),Bgo=o(" \u2014 "),YI=a("a"),Igo=o("BertTokenizer"),Ngo=o(" or "),KI=a("a"),qgo=o("BertTokenizerFast"),jgo=o(" (VisualBERT model)"),Dgo=l(),Fh=a("li"),Cle=a("strong"),Ggo=o("wav2vec2"),Ogo=o(" \u2014 "),ZI=a("a"),Vgo=o("Wav2Vec2CTCTokenizer"),Xgo=o(" (Wav2Vec2 model)"),zgo=l(),Th=a("li"),wle=a("strong"),Qgo=o("wav2vec2-conformer"),Wgo=o(" \u2014 "),eN=a("a"),Hgo=o("Wav2Vec2CTCTokenizer"),Ugo=o(" (Wav2Vec2-Conformer model)"),Jgo=l(),Mh=a("li"),Ale=a("strong"),Ygo=o("wav2vec2_phoneme"),Kgo=o(" \u2014 "),oN=a("a"),Zgo=o("Wav2Vec2PhonemeCTCTokenizer"),eho=o(" (Wav2Vec2Phoneme model)"),oho=l(),js=a("li"),Lle=a("strong"),rho=o("xglm"),tho=o(" \u2014 "),rN=a("a"),aho=o("XGLMTokenizer"),nho=o(" or "),tN=a("a"),sho=o("XGLMTokenizerFast"),lho=o(" (XGLM model)"),iho=l(),Eh=a("li"),yle=a("strong"),dho=o("xlm"),cho=o(" \u2014 "),aN=a("a"),fho=o("XLMTokenizer"),mho=o(" (XLM model)"),gho=l(),Ch=a("li"),xle=a("strong"),hho=o("xlm-prophetnet"),pho=o(" \u2014 "),nN=a("a"),_ho=o("XLMProphetNetTokenizer"),uho=o(" (XLM-ProphetNet model)"),bho=l(),Ds=a("li"),$le=a("strong"),vho=o("xlm-roberta"),Fho=o(" \u2014 "),sN=a("a"),Tho=o("XLMRobertaTokenizer"),Mho=o(" or "),lN=a("a"),Eho=o("XLMRobertaTokenizerFast"),Cho=o(" (XLM-RoBERTa model)"),who=l(),Gs=a("li"),kle=a("strong"),Aho=o("xlm-roberta-xl"),Lho=o(" \u2014 "),iN=a("a"),yho=o("RobertaTokenizer"),xho=o(" or "),dN=a("a"),$ho=o("RobertaTokenizerFast"),kho=o(" (XLM-RoBERTa-XL model)"),Sho=l(),Os=a("li"),Sle=a("strong"),Rho=o("xlnet"),Pho=o(" \u2014 "),cN=a("a"),Bho=o("XLNetTokenizer"),Iho=o(" or "),fN=a("a"),Nho=o("XLNetTokenizerFast"),qho=o(" (XLNet model)"),jho=l(),Vs=a("li"),Rle=a("strong"),Dho=o("yoso"),Gho=o(" \u2014 "),mN=a("a"),Oho=o("AlbertTokenizer"),Vho=o(" or "),gN=a("a"),Xho=o("AlbertTokenizerFast"),zho=o(" (YOSO model)"),Qho=l(),F(wh.$$.fragment),Who=l(),Ah=a("div"),F(W6.$$.fragment),Hho=l(),Ple=a("p"),Uho=o("Register a new tokenizer in this mapping."),pOe=l(),Ri=a("h2"),Lh=a("a"),Ble=a("span"),F(H6.$$.fragment),Jho=l(),Ile=a("span"),Yho=o("AutoFeatureExtractor"),_Oe=l(),Lo=a("div"),F(U6.$$.fragment),Kho=l(),J6=a("p"),Zho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hN=a("a"),epo=o("AutoFeatureExtractor.from_pretrained()"),opo=o(" class method."),rpo=l(),Y6=a("p"),tpo=o("This class cannot be instantiated directly using "),Nle=a("code"),apo=o("__init__()"),npo=o(" (throws an error)."),spo=l(),He=a("div"),F(K6.$$.fragment),lpo=l(),qle=a("p"),ipo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dpo=l(),Sa=a("p"),cpo=o("The feature extractor class to instantiate is selected based on the "),jle=a("code"),fpo=o("model_type"),mpo=o(` property of the config object
(either passed as an argument or loaded from `),Dle=a("code"),gpo=o("pretrained_model_name_or_path"),hpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gle=a("code"),ppo=o("pretrained_model_name_or_path"),_po=o(":"),upo=l(),Y=a("ul"),yh=a("li"),Ole=a("strong"),bpo=o("beit"),vpo=o(" \u2014 "),pN=a("a"),Fpo=o("BeitFeatureExtractor"),Tpo=o(" (BEiT model)"),Mpo=l(),xh=a("li"),Vle=a("strong"),Epo=o("clip"),Cpo=o(" \u2014 "),_N=a("a"),wpo=o("CLIPFeatureExtractor"),Apo=o(" (CLIP model)"),Lpo=l(),$h=a("li"),Xle=a("strong"),ypo=o("convnext"),xpo=o(" \u2014 "),uN=a("a"),$po=o("ConvNextFeatureExtractor"),kpo=o(" (ConvNeXT model)"),Spo=l(),kh=a("li"),zle=a("strong"),Rpo=o("cvt"),Ppo=o(" \u2014 "),bN=a("a"),Bpo=o("ConvNextFeatureExtractor"),Ipo=o(" (CvT model)"),Npo=l(),Sh=a("li"),Qle=a("strong"),qpo=o("data2vec-audio"),jpo=o(" \u2014 "),vN=a("a"),Dpo=o("Wav2Vec2FeatureExtractor"),Gpo=o(" (Data2VecAudio model)"),Opo=l(),Rh=a("li"),Wle=a("strong"),Vpo=o("data2vec-vision"),Xpo=o(" \u2014 "),FN=a("a"),zpo=o("BeitFeatureExtractor"),Qpo=o(" (Data2VecVision model)"),Wpo=l(),Ph=a("li"),Hle=a("strong"),Hpo=o("deit"),Upo=o(" \u2014 "),TN=a("a"),Jpo=o("DeiTFeatureExtractor"),Ypo=o(" (DeiT model)"),Kpo=l(),Bh=a("li"),Ule=a("strong"),Zpo=o("detr"),e_o=o(" \u2014 "),MN=a("a"),o_o=o("DetrFeatureExtractor"),r_o=o(" (DETR model)"),t_o=l(),Ih=a("li"),Jle=a("strong"),a_o=o("dpt"),n_o=o(" \u2014 "),EN=a("a"),s_o=o("DPTFeatureExtractor"),l_o=o(" (DPT model)"),i_o=l(),Nh=a("li"),Yle=a("strong"),d_o=o("flava"),c_o=o(" \u2014 "),CN=a("a"),f_o=o("FlavaFeatureExtractor"),m_o=o(" (FLAVA model)"),g_o=l(),qh=a("li"),Kle=a("strong"),h_o=o("glpn"),p_o=o(" \u2014 "),wN=a("a"),__o=o("GLPNFeatureExtractor"),u_o=o(" (GLPN model)"),b_o=l(),jh=a("li"),Zle=a("strong"),v_o=o("hubert"),F_o=o(" \u2014 "),AN=a("a"),T_o=o("Wav2Vec2FeatureExtractor"),M_o=o(" (Hubert model)"),E_o=l(),Dh=a("li"),eie=a("strong"),C_o=o("imagegpt"),w_o=o(" \u2014 "),LN=a("a"),A_o=o("ImageGPTFeatureExtractor"),L_o=o(" (ImageGPT model)"),y_o=l(),Gh=a("li"),oie=a("strong"),x_o=o("layoutlmv2"),$_o=o(" \u2014 "),yN=a("a"),k_o=o("LayoutLMv2FeatureExtractor"),S_o=o(" (LayoutLMv2 model)"),R_o=l(),Oh=a("li"),rie=a("strong"),P_o=o("layoutlmv3"),B_o=o(" \u2014 "),xN=a("a"),I_o=o("LayoutLMv3FeatureExtractor"),N_o=o(" (LayoutLMv3 model)"),q_o=l(),Vh=a("li"),tie=a("strong"),j_o=o("levit"),D_o=o(" \u2014 "),$N=a("a"),G_o=o("LevitFeatureExtractor"),O_o=o(" (LeViT model)"),V_o=l(),Xh=a("li"),aie=a("strong"),X_o=o("maskformer"),z_o=o(" \u2014 "),kN=a("a"),Q_o=o("MaskFormerFeatureExtractor"),W_o=o(" (MaskFormer model)"),H_o=l(),zh=a("li"),nie=a("strong"),U_o=o("mctct"),J_o=o(" \u2014 "),SN=a("a"),Y_o=o("MCTCTFeatureExtractor"),K_o=o(" (M-CTC-T model)"),Z_o=l(),Qh=a("li"),sie=a("strong"),euo=o("perceiver"),ouo=o(" \u2014 "),RN=a("a"),ruo=o("PerceiverFeatureExtractor"),tuo=o(" (Perceiver model)"),auo=l(),Wh=a("li"),lie=a("strong"),nuo=o("poolformer"),suo=o(" \u2014 "),PN=a("a"),luo=o("PoolFormerFeatureExtractor"),iuo=o(" (PoolFormer model)"),duo=l(),Hh=a("li"),iie=a("strong"),cuo=o("regnet"),fuo=o(" \u2014 "),BN=a("a"),muo=o("ConvNextFeatureExtractor"),guo=o(" (RegNet model)"),huo=l(),Uh=a("li"),die=a("strong"),puo=o("resnet"),_uo=o(" \u2014 "),IN=a("a"),uuo=o("ConvNextFeatureExtractor"),buo=o(" (ResNet model)"),vuo=l(),Jh=a("li"),cie=a("strong"),Fuo=o("segformer"),Tuo=o(" \u2014 "),NN=a("a"),Muo=o("SegformerFeatureExtractor"),Euo=o(" (SegFormer model)"),Cuo=l(),Yh=a("li"),fie=a("strong"),wuo=o("speech_to_text"),Auo=o(" \u2014 "),qN=a("a"),Luo=o("Speech2TextFeatureExtractor"),yuo=o(" (Speech2Text model)"),xuo=l(),Kh=a("li"),mie=a("strong"),$uo=o("swin"),kuo=o(" \u2014 "),jN=a("a"),Suo=o("ViTFeatureExtractor"),Ruo=o(" (Swin Transformer model)"),Puo=l(),Zh=a("li"),gie=a("strong"),Buo=o("van"),Iuo=o(" \u2014 "),DN=a("a"),Nuo=o("ConvNextFeatureExtractor"),quo=o(" (VAN model)"),juo=l(),ep=a("li"),hie=a("strong"),Duo=o("vilt"),Guo=o(" \u2014 "),GN=a("a"),Ouo=o("ViltFeatureExtractor"),Vuo=o(" (ViLT model)"),Xuo=l(),op=a("li"),pie=a("strong"),zuo=o("vit"),Quo=o(" \u2014 "),ON=a("a"),Wuo=o("ViTFeatureExtractor"),Huo=o(" (ViT model)"),Uuo=l(),rp=a("li"),_ie=a("strong"),Juo=o("vit_mae"),Yuo=o(" \u2014 "),VN=a("a"),Kuo=o("ViTFeatureExtractor"),Zuo=o(" (ViTMAE model)"),e7o=l(),tp=a("li"),uie=a("strong"),o7o=o("wav2vec2"),r7o=o(" \u2014 "),XN=a("a"),t7o=o("Wav2Vec2FeatureExtractor"),a7o=o(" (Wav2Vec2 model)"),n7o=l(),ap=a("li"),bie=a("strong"),s7o=o("wav2vec2-conformer"),l7o=o(" \u2014 "),zN=a("a"),i7o=o("Wav2Vec2FeatureExtractor"),d7o=o(" (Wav2Vec2-Conformer model)"),c7o=l(),np=a("li"),vie=a("strong"),f7o=o("yolos"),m7o=o(" \u2014 "),QN=a("a"),g7o=o("YolosFeatureExtractor"),h7o=o(" (YOLOS model)"),p7o=l(),F(sp.$$.fragment),_7o=l(),F(lp.$$.fragment),u7o=l(),ip=a("div"),F(Z6.$$.fragment),b7o=l(),Fie=a("p"),v7o=o("Register a new feature extractor for this class."),uOe=l(),Pi=a("h2"),dp=a("a"),Tie=a("span"),F(eL.$$.fragment),F7o=l(),Mie=a("span"),T7o=o("AutoProcessor"),bOe=l(),yo=a("div"),F(oL.$$.fragment),M7o=l(),rL=a("p"),E7o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WN=a("a"),C7o=o("AutoProcessor.from_pretrained()"),w7o=o(" class method."),A7o=l(),tL=a("p"),L7o=o("This class cannot be instantiated directly using "),Eie=a("code"),y7o=o("__init__()"),x7o=o(" (throws an error)."),$7o=l(),Ue=a("div"),F(aL.$$.fragment),k7o=l(),Cie=a("p"),S7o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),R7o=l(),Bi=a("p"),P7o=o("The processor class to instantiate is selected based on the "),wie=a("code"),B7o=o("model_type"),I7o=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),N7o=o("pretrained_model_name_or_path"),q7o=o(" if possible):"),j7o=l(),he=a("ul"),cp=a("li"),Lie=a("strong"),D7o=o("clip"),G7o=o(" \u2014 "),HN=a("a"),O7o=o("CLIPProcessor"),V7o=o(" (CLIP model)"),X7o=l(),fp=a("li"),yie=a("strong"),z7o=o("flava"),Q7o=o(" \u2014 "),xie=a("code"),W7o=o("FLAVAProcessor"),H7o=o(" (FLAVA model)"),U7o=l(),mp=a("li"),$ie=a("strong"),J7o=o("layoutlmv2"),Y7o=o(" \u2014 "),UN=a("a"),K7o=o("LayoutLMv2Processor"),Z7o=o(" (LayoutLMv2 model)"),e1o=l(),gp=a("li"),kie=a("strong"),o1o=o("layoutlmv3"),r1o=o(" \u2014 "),JN=a("a"),t1o=o("LayoutLMv3Processor"),a1o=o(" (LayoutLMv3 model)"),n1o=l(),hp=a("li"),Sie=a("strong"),s1o=o("layoutxlm"),l1o=o(" \u2014 "),YN=a("a"),i1o=o("LayoutXLMProcessor"),d1o=o(" (LayoutXLM model)"),c1o=l(),pp=a("li"),Rie=a("strong"),f1o=o("sew"),m1o=o(" \u2014 "),KN=a("a"),g1o=o("Wav2Vec2Processor"),h1o=o(" (SEW model)"),p1o=l(),_p=a("li"),Pie=a("strong"),_1o=o("sew-d"),u1o=o(" \u2014 "),ZN=a("a"),b1o=o("Wav2Vec2Processor"),v1o=o(" (SEW-D model)"),F1o=l(),up=a("li"),Bie=a("strong"),T1o=o("speech_to_text"),M1o=o(" \u2014 "),eq=a("a"),E1o=o("Speech2TextProcessor"),C1o=o(" (Speech2Text model)"),w1o=l(),bp=a("li"),Iie=a("strong"),A1o=o("speech_to_text_2"),L1o=o(" \u2014 "),oq=a("a"),y1o=o("Speech2Text2Processor"),x1o=o(" (Speech2Text2 model)"),$1o=l(),vp=a("li"),Nie=a("strong"),k1o=o("trocr"),S1o=o(" \u2014 "),rq=a("a"),R1o=o("TrOCRProcessor"),P1o=o(" (TrOCR model)"),B1o=l(),Fp=a("li"),qie=a("strong"),I1o=o("unispeech"),N1o=o(" \u2014 "),tq=a("a"),q1o=o("Wav2Vec2Processor"),j1o=o(" (UniSpeech model)"),D1o=l(),Tp=a("li"),jie=a("strong"),G1o=o("unispeech-sat"),O1o=o(" \u2014 "),aq=a("a"),V1o=o("Wav2Vec2Processor"),X1o=o(" (UniSpeechSat model)"),z1o=l(),Mp=a("li"),Die=a("strong"),Q1o=o("vilt"),W1o=o(" \u2014 "),nq=a("a"),H1o=o("ViltProcessor"),U1o=o(" (ViLT model)"),J1o=l(),Ep=a("li"),Gie=a("strong"),Y1o=o("vision-text-dual-encoder"),K1o=o(" \u2014 "),sq=a("a"),Z1o=o("VisionTextDualEncoderProcessor"),e2o=o(" (VisionTextDualEncoder model)"),o2o=l(),Cp=a("li"),Oie=a("strong"),r2o=o("wav2vec2"),t2o=o(" \u2014 "),lq=a("a"),a2o=o("Wav2Vec2Processor"),n2o=o(" (Wav2Vec2 model)"),s2o=l(),wp=a("li"),Vie=a("strong"),l2o=o("wav2vec2-conformer"),i2o=o(" \u2014 "),iq=a("a"),d2o=o("Wav2Vec2Processor"),c2o=o(" (Wav2Vec2-Conformer model)"),f2o=l(),Ap=a("li"),Xie=a("strong"),m2o=o("wavlm"),g2o=o(" \u2014 "),dq=a("a"),h2o=o("Wav2Vec2Processor"),p2o=o(" (WavLM model)"),_2o=l(),F(Lp.$$.fragment),u2o=l(),F(yp.$$.fragment),b2o=l(),xp=a("div"),F(nL.$$.fragment),v2o=l(),zie=a("p"),F2o=o("Register a new processor for this class."),vOe=l(),Ii=a("h2"),$p=a("a"),Qie=a("span"),F(sL.$$.fragment),T2o=l(),Wie=a("span"),M2o=o("AutoModel"),FOe=l(),xo=a("div"),F(lL.$$.fragment),E2o=l(),Ni=a("p"),C2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cq=a("a"),w2o=o("from_pretrained()"),A2o=o(" class method or the "),fq=a("a"),L2o=o("from_config()"),y2o=o(` class
method.`),x2o=l(),iL=a("p"),$2o=o("This class cannot be instantiated directly using "),Hie=a("code"),k2o=o("__init__()"),S2o=o(" (throws an error)."),R2o=l(),nt=a("div"),F(dL.$$.fragment),P2o=l(),Uie=a("p"),B2o=o("Instantiates one of the base model classes of the library from a configuration."),I2o=l(),qi=a("p"),N2o=o(`Note:
Loading a model from its configuration file does `),Jie=a("strong"),q2o=o("not"),j2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=a("a"),D2o=o("from_pretrained()"),G2o=o(" to load the model weights."),O2o=l(),F(kp.$$.fragment),V2o=l(),Je=a("div"),F(cL.$$.fragment),X2o=l(),Yie=a("p"),z2o=o("Instantiate one of the base model classes of the library from a pretrained model."),Q2o=l(),Ra=a("p"),W2o=o("The model class to instantiate is selected based on the "),Kie=a("code"),H2o=o("model_type"),U2o=o(` property of the config object (either
passed as an argument or loaded from `),Zie=a("code"),J2o=o("pretrained_model_name_or_path"),Y2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=a("code"),K2o=o("pretrained_model_name_or_path"),Z2o=o(":"),ebo=l(),y=a("ul"),Sp=a("li"),ode=a("strong"),obo=o("albert"),rbo=o(" \u2014 "),gq=a("a"),tbo=o("AlbertModel"),abo=o(" (ALBERT model)"),nbo=l(),Rp=a("li"),rde=a("strong"),sbo=o("bart"),lbo=o(" \u2014 "),hq=a("a"),ibo=o("BartModel"),dbo=o(" (BART model)"),cbo=l(),Pp=a("li"),tde=a("strong"),fbo=o("beit"),mbo=o(" \u2014 "),pq=a("a"),gbo=o("BeitModel"),hbo=o(" (BEiT model)"),pbo=l(),Bp=a("li"),ade=a("strong"),_bo=o("bert"),ubo=o(" \u2014 "),_q=a("a"),bbo=o("BertModel"),vbo=o(" (BERT model)"),Fbo=l(),Ip=a("li"),nde=a("strong"),Tbo=o("bert-generation"),Mbo=o(" \u2014 "),uq=a("a"),Ebo=o("BertGenerationEncoder"),Cbo=o(" (Bert Generation model)"),wbo=l(),Np=a("li"),sde=a("strong"),Abo=o("big_bird"),Lbo=o(" \u2014 "),bq=a("a"),ybo=o("BigBirdModel"),xbo=o(" (BigBird model)"),$bo=l(),qp=a("li"),lde=a("strong"),kbo=o("bigbird_pegasus"),Sbo=o(" \u2014 "),vq=a("a"),Rbo=o("BigBirdPegasusModel"),Pbo=o(" (BigBird-Pegasus model)"),Bbo=l(),jp=a("li"),ide=a("strong"),Ibo=o("blenderbot"),Nbo=o(" \u2014 "),Fq=a("a"),qbo=o("BlenderbotModel"),jbo=o(" (Blenderbot model)"),Dbo=l(),Dp=a("li"),dde=a("strong"),Gbo=o("blenderbot-small"),Obo=o(" \u2014 "),Tq=a("a"),Vbo=o("BlenderbotSmallModel"),Xbo=o(" (BlenderbotSmall model)"),zbo=l(),Gp=a("li"),cde=a("strong"),Qbo=o("bloom"),Wbo=o(" \u2014 "),Mq=a("a"),Hbo=o("BloomModel"),Ubo=o(" (BLOOM model)"),Jbo=l(),Op=a("li"),fde=a("strong"),Ybo=o("camembert"),Kbo=o(" \u2014 "),Eq=a("a"),Zbo=o("CamembertModel"),evo=o(" (CamemBERT model)"),ovo=l(),Vp=a("li"),mde=a("strong"),rvo=o("canine"),tvo=o(" \u2014 "),Cq=a("a"),avo=o("CanineModel"),nvo=o(" (CANINE model)"),svo=l(),Xp=a("li"),gde=a("strong"),lvo=o("clip"),ivo=o(" \u2014 "),wq=a("a"),dvo=o("CLIPModel"),cvo=o(" (CLIP model)"),fvo=l(),zp=a("li"),hde=a("strong"),mvo=o("codegen"),gvo=o(" \u2014 "),Aq=a("a"),hvo=o("CodeGenModel"),pvo=o(" (CodeGen model)"),_vo=l(),Qp=a("li"),pde=a("strong"),uvo=o("convbert"),bvo=o(" \u2014 "),Lq=a("a"),vvo=o("ConvBertModel"),Fvo=o(" (ConvBERT model)"),Tvo=l(),Wp=a("li"),_de=a("strong"),Mvo=o("convnext"),Evo=o(" \u2014 "),yq=a("a"),Cvo=o("ConvNextModel"),wvo=o(" (ConvNeXT model)"),Avo=l(),Hp=a("li"),ude=a("strong"),Lvo=o("ctrl"),yvo=o(" \u2014 "),xq=a("a"),xvo=o("CTRLModel"),$vo=o(" (CTRL model)"),kvo=l(),Up=a("li"),bde=a("strong"),Svo=o("cvt"),Rvo=o(" \u2014 "),$q=a("a"),Pvo=o("CvtModel"),Bvo=o(" (CvT model)"),Ivo=l(),Jp=a("li"),vde=a("strong"),Nvo=o("data2vec-audio"),qvo=o(" \u2014 "),kq=a("a"),jvo=o("Data2VecAudioModel"),Dvo=o(" (Data2VecAudio model)"),Gvo=l(),Yp=a("li"),Fde=a("strong"),Ovo=o("data2vec-text"),Vvo=o(" \u2014 "),Sq=a("a"),Xvo=o("Data2VecTextModel"),zvo=o(" (Data2VecText model)"),Qvo=l(),Kp=a("li"),Tde=a("strong"),Wvo=o("data2vec-vision"),Hvo=o(" \u2014 "),Rq=a("a"),Uvo=o("Data2VecVisionModel"),Jvo=o(" (Data2VecVision model)"),Yvo=l(),Zp=a("li"),Mde=a("strong"),Kvo=o("deberta"),Zvo=o(" \u2014 "),Pq=a("a"),eFo=o("DebertaModel"),oFo=o(" (DeBERTa model)"),rFo=l(),e_=a("li"),Ede=a("strong"),tFo=o("deberta-v2"),aFo=o(" \u2014 "),Bq=a("a"),nFo=o("DebertaV2Model"),sFo=o(" (DeBERTa-v2 model)"),lFo=l(),o_=a("li"),Cde=a("strong"),iFo=o("decision_transformer"),dFo=o(" \u2014 "),Iq=a("a"),cFo=o("DecisionTransformerModel"),fFo=o(" (Decision Transformer model)"),mFo=l(),r_=a("li"),wde=a("strong"),gFo=o("deit"),hFo=o(" \u2014 "),Nq=a("a"),pFo=o("DeiTModel"),_Fo=o(" (DeiT model)"),uFo=l(),t_=a("li"),Ade=a("strong"),bFo=o("detr"),vFo=o(" \u2014 "),qq=a("a"),FFo=o("DetrModel"),TFo=o(" (DETR model)"),MFo=l(),a_=a("li"),Lde=a("strong"),EFo=o("distilbert"),CFo=o(" \u2014 "),jq=a("a"),wFo=o("DistilBertModel"),AFo=o(" (DistilBERT model)"),LFo=l(),n_=a("li"),yde=a("strong"),yFo=o("dpr"),xFo=o(" \u2014 "),Dq=a("a"),$Fo=o("DPRQuestionEncoder"),kFo=o(" (DPR model)"),SFo=l(),s_=a("li"),xde=a("strong"),RFo=o("dpt"),PFo=o(" \u2014 "),Gq=a("a"),BFo=o("DPTModel"),IFo=o(" (DPT model)"),NFo=l(),l_=a("li"),$de=a("strong"),qFo=o("electra"),jFo=o(" \u2014 "),Oq=a("a"),DFo=o("ElectraModel"),GFo=o(" (ELECTRA model)"),OFo=l(),i_=a("li"),kde=a("strong"),VFo=o("flaubert"),XFo=o(" \u2014 "),Vq=a("a"),zFo=o("FlaubertModel"),QFo=o(" (FlauBERT model)"),WFo=l(),d_=a("li"),Sde=a("strong"),HFo=o("flava"),UFo=o(" \u2014 "),Xq=a("a"),JFo=o("FlavaModel"),YFo=o(" (FLAVA model)"),KFo=l(),c_=a("li"),Rde=a("strong"),ZFo=o("fnet"),eTo=o(" \u2014 "),zq=a("a"),oTo=o("FNetModel"),rTo=o(" (FNet model)"),tTo=l(),f_=a("li"),Pde=a("strong"),aTo=o("fsmt"),nTo=o(" \u2014 "),Qq=a("a"),sTo=o("FSMTModel"),lTo=o(" (FairSeq Machine-Translation model)"),iTo=l(),Xs=a("li"),Bde=a("strong"),dTo=o("funnel"),cTo=o(" \u2014 "),Wq=a("a"),fTo=o("FunnelModel"),mTo=o(" or "),Hq=a("a"),gTo=o("FunnelBaseModel"),hTo=o(" (Funnel Transformer model)"),pTo=l(),m_=a("li"),Ide=a("strong"),_To=o("glpn"),uTo=o(" \u2014 "),Uq=a("a"),bTo=o("GLPNModel"),vTo=o(" (GLPN model)"),FTo=l(),g_=a("li"),Nde=a("strong"),TTo=o("gpt2"),MTo=o(" \u2014 "),Jq=a("a"),ETo=o("GPT2Model"),CTo=o(" (OpenAI GPT-2 model)"),wTo=l(),h_=a("li"),qde=a("strong"),ATo=o("gpt_neo"),LTo=o(" \u2014 "),Yq=a("a"),yTo=o("GPTNeoModel"),xTo=o(" (GPT Neo model)"),$To=l(),p_=a("li"),jde=a("strong"),kTo=o("gpt_neox"),STo=o(" \u2014 "),Kq=a("a"),RTo=o("GPTNeoXModel"),PTo=o(" (GPT NeoX model)"),BTo=l(),__=a("li"),Dde=a("strong"),ITo=o("gptj"),NTo=o(" \u2014 "),Zq=a("a"),qTo=o("GPTJModel"),jTo=o(" (GPT-J model)"),DTo=l(),u_=a("li"),Gde=a("strong"),GTo=o("hubert"),OTo=o(" \u2014 "),ej=a("a"),VTo=o("HubertModel"),XTo=o(" (Hubert model)"),zTo=l(),b_=a("li"),Ode=a("strong"),QTo=o("ibert"),WTo=o(" \u2014 "),oj=a("a"),HTo=o("IBertModel"),UTo=o(" (I-BERT model)"),JTo=l(),v_=a("li"),Vde=a("strong"),YTo=o("imagegpt"),KTo=o(" \u2014 "),rj=a("a"),ZTo=o("ImageGPTModel"),e9o=o(" (ImageGPT model)"),o9o=l(),F_=a("li"),Xde=a("strong"),r9o=o("layoutlm"),t9o=o(" \u2014 "),tj=a("a"),a9o=o("LayoutLMModel"),n9o=o(" (LayoutLM model)"),s9o=l(),T_=a("li"),zde=a("strong"),l9o=o("layoutlmv2"),i9o=o(" \u2014 "),aj=a("a"),d9o=o("LayoutLMv2Model"),c9o=o(" (LayoutLMv2 model)"),f9o=l(),M_=a("li"),Qde=a("strong"),m9o=o("layoutlmv3"),g9o=o(" \u2014 "),nj=a("a"),h9o=o("LayoutLMv3Model"),p9o=o(" (LayoutLMv3 model)"),_9o=l(),E_=a("li"),Wde=a("strong"),u9o=o("led"),b9o=o(" \u2014 "),sj=a("a"),v9o=o("LEDModel"),F9o=o(" (LED model)"),T9o=l(),C_=a("li"),Hde=a("strong"),M9o=o("levit"),E9o=o(" \u2014 "),lj=a("a"),C9o=o("LevitModel"),w9o=o(" (LeViT model)"),A9o=l(),w_=a("li"),Ude=a("strong"),L9o=o("longformer"),y9o=o(" \u2014 "),ij=a("a"),x9o=o("LongformerModel"),$9o=o(" (Longformer model)"),k9o=l(),A_=a("li"),Jde=a("strong"),S9o=o("longt5"),R9o=o(" \u2014 "),dj=a("a"),P9o=o("LongT5Model"),B9o=o(" (LongT5 model)"),I9o=l(),L_=a("li"),Yde=a("strong"),N9o=o("luke"),q9o=o(" \u2014 "),cj=a("a"),j9o=o("LukeModel"),D9o=o(" (LUKE model)"),G9o=l(),y_=a("li"),Kde=a("strong"),O9o=o("lxmert"),V9o=o(" \u2014 "),fj=a("a"),X9o=o("LxmertModel"),z9o=o(" (LXMERT model)"),Q9o=l(),x_=a("li"),Zde=a("strong"),W9o=o("m2m_100"),H9o=o(" \u2014 "),mj=a("a"),U9o=o("M2M100Model"),J9o=o(" (M2M100 model)"),Y9o=l(),$_=a("li"),ece=a("strong"),K9o=o("marian"),Z9o=o(" \u2014 "),gj=a("a"),eMo=o("MarianModel"),oMo=o(" (Marian model)"),rMo=l(),k_=a("li"),oce=a("strong"),tMo=o("maskformer"),aMo=o(" \u2014 "),hj=a("a"),nMo=o("MaskFormerModel"),sMo=o(" (MaskFormer model)"),lMo=l(),S_=a("li"),rce=a("strong"),iMo=o("mbart"),dMo=o(" \u2014 "),pj=a("a"),cMo=o("MBartModel"),fMo=o(" (mBART model)"),mMo=l(),R_=a("li"),tce=a("strong"),gMo=o("mctct"),hMo=o(" \u2014 "),_j=a("a"),pMo=o("MCTCTModel"),_Mo=o(" (M-CTC-T model)"),uMo=l(),P_=a("li"),ace=a("strong"),bMo=o("megatron-bert"),vMo=o(" \u2014 "),uj=a("a"),FMo=o("MegatronBertModel"),TMo=o(" (Megatron-BERT model)"),MMo=l(),B_=a("li"),nce=a("strong"),EMo=o("mobilebert"),CMo=o(" \u2014 "),bj=a("a"),wMo=o("MobileBertModel"),AMo=o(" (MobileBERT model)"),LMo=l(),I_=a("li"),sce=a("strong"),yMo=o("mpnet"),xMo=o(" \u2014 "),vj=a("a"),$Mo=o("MPNetModel"),kMo=o(" (MPNet model)"),SMo=l(),N_=a("li"),lce=a("strong"),RMo=o("mt5"),PMo=o(" \u2014 "),Fj=a("a"),BMo=o("MT5Model"),IMo=o(" (MT5 model)"),NMo=l(),q_=a("li"),ice=a("strong"),qMo=o("nezha"),jMo=o(" \u2014 "),Tj=a("a"),DMo=o("NezhaModel"),GMo=o(" (Nezha model)"),OMo=l(),j_=a("li"),dce=a("strong"),VMo=o("nystromformer"),XMo=o(" \u2014 "),Mj=a("a"),zMo=o("NystromformerModel"),QMo=o(" (Nystr\xF6mformer model)"),WMo=l(),D_=a("li"),cce=a("strong"),HMo=o("openai-gpt"),UMo=o(" \u2014 "),Ej=a("a"),JMo=o("OpenAIGPTModel"),YMo=o(" (OpenAI GPT model)"),KMo=l(),G_=a("li"),fce=a("strong"),ZMo=o("opt"),eEo=o(" \u2014 "),Cj=a("a"),oEo=o("OPTModel"),rEo=o(" (OPT model)"),tEo=l(),O_=a("li"),mce=a("strong"),aEo=o("pegasus"),nEo=o(" \u2014 "),wj=a("a"),sEo=o("PegasusModel"),lEo=o(" (Pegasus model)"),iEo=l(),V_=a("li"),gce=a("strong"),dEo=o("perceiver"),cEo=o(" \u2014 "),Aj=a("a"),fEo=o("PerceiverModel"),mEo=o(" (Perceiver model)"),gEo=l(),X_=a("li"),hce=a("strong"),hEo=o("plbart"),pEo=o(" \u2014 "),Lj=a("a"),_Eo=o("PLBartModel"),uEo=o(" (PLBart model)"),bEo=l(),z_=a("li"),pce=a("strong"),vEo=o("poolformer"),FEo=o(" \u2014 "),yj=a("a"),TEo=o("PoolFormerModel"),MEo=o(" (PoolFormer model)"),EEo=l(),Q_=a("li"),_ce=a("strong"),CEo=o("prophetnet"),wEo=o(" \u2014 "),xj=a("a"),AEo=o("ProphetNetModel"),LEo=o(" (ProphetNet model)"),yEo=l(),W_=a("li"),uce=a("strong"),xEo=o("qdqbert"),$Eo=o(" \u2014 "),$j=a("a"),kEo=o("QDQBertModel"),SEo=o(" (QDQBert model)"),REo=l(),H_=a("li"),bce=a("strong"),PEo=o("reformer"),BEo=o(" \u2014 "),kj=a("a"),IEo=o("ReformerModel"),NEo=o(" (Reformer model)"),qEo=l(),U_=a("li"),vce=a("strong"),jEo=o("regnet"),DEo=o(" \u2014 "),Sj=a("a"),GEo=o("RegNetModel"),OEo=o(" (RegNet model)"),VEo=l(),J_=a("li"),Fce=a("strong"),XEo=o("rembert"),zEo=o(" \u2014 "),Rj=a("a"),QEo=o("RemBertModel"),WEo=o(" (RemBERT model)"),HEo=l(),Y_=a("li"),Tce=a("strong"),UEo=o("resnet"),JEo=o(" \u2014 "),Pj=a("a"),YEo=o("ResNetModel"),KEo=o(" (ResNet model)"),ZEo=l(),K_=a("li"),Mce=a("strong"),e4o=o("retribert"),o4o=o(" \u2014 "),Bj=a("a"),r4o=o("RetriBertModel"),t4o=o(" (RetriBERT model)"),a4o=l(),Z_=a("li"),Ece=a("strong"),n4o=o("roberta"),s4o=o(" \u2014 "),Ij=a("a"),l4o=o("RobertaModel"),i4o=o(" (RoBERTa model)"),d4o=l(),eu=a("li"),Cce=a("strong"),c4o=o("roformer"),f4o=o(" \u2014 "),Nj=a("a"),m4o=o("RoFormerModel"),g4o=o(" (RoFormer model)"),h4o=l(),ou=a("li"),wce=a("strong"),p4o=o("segformer"),_4o=o(" \u2014 "),qj=a("a"),u4o=o("SegformerModel"),b4o=o(" (SegFormer model)"),v4o=l(),ru=a("li"),Ace=a("strong"),F4o=o("sew"),T4o=o(" \u2014 "),jj=a("a"),M4o=o("SEWModel"),E4o=o(" (SEW model)"),C4o=l(),tu=a("li"),Lce=a("strong"),w4o=o("sew-d"),A4o=o(" \u2014 "),Dj=a("a"),L4o=o("SEWDModel"),y4o=o(" (SEW-D model)"),x4o=l(),au=a("li"),yce=a("strong"),$4o=o("speech_to_text"),k4o=o(" \u2014 "),Gj=a("a"),S4o=o("Speech2TextModel"),R4o=o(" (Speech2Text model)"),P4o=l(),nu=a("li"),xce=a("strong"),B4o=o("splinter"),I4o=o(" \u2014 "),Oj=a("a"),N4o=o("SplinterModel"),q4o=o(" (Splinter model)"),j4o=l(),su=a("li"),$ce=a("strong"),D4o=o("squeezebert"),G4o=o(" \u2014 "),Vj=a("a"),O4o=o("SqueezeBertModel"),V4o=o(" (SqueezeBERT model)"),X4o=l(),lu=a("li"),kce=a("strong"),z4o=o("swin"),Q4o=o(" \u2014 "),Xj=a("a"),W4o=o("SwinModel"),H4o=o(" (Swin Transformer model)"),U4o=l(),iu=a("li"),Sce=a("strong"),J4o=o("t5"),Y4o=o(" \u2014 "),zj=a("a"),K4o=o("T5Model"),Z4o=o(" (T5 model)"),eCo=l(),du=a("li"),Rce=a("strong"),oCo=o("tapas"),rCo=o(" \u2014 "),Qj=a("a"),tCo=o("TapasModel"),aCo=o(" (TAPAS model)"),nCo=l(),cu=a("li"),Pce=a("strong"),sCo=o("trajectory_transformer"),lCo=o(" \u2014 "),Wj=a("a"),iCo=o("TrajectoryTransformerModel"),dCo=o(" (Trajectory Transformer model)"),cCo=l(),fu=a("li"),Bce=a("strong"),fCo=o("transfo-xl"),mCo=o(" \u2014 "),Hj=a("a"),gCo=o("TransfoXLModel"),hCo=o(" (Transformer-XL model)"),pCo=l(),mu=a("li"),Ice=a("strong"),_Co=o("unispeech"),uCo=o(" \u2014 "),Uj=a("a"),bCo=o("UniSpeechModel"),vCo=o(" (UniSpeech model)"),FCo=l(),gu=a("li"),Nce=a("strong"),TCo=o("unispeech-sat"),MCo=o(" \u2014 "),Jj=a("a"),ECo=o("UniSpeechSatModel"),CCo=o(" (UniSpeechSat model)"),wCo=l(),hu=a("li"),qce=a("strong"),ACo=o("van"),LCo=o(" \u2014 "),Yj=a("a"),yCo=o("VanModel"),xCo=o(" (VAN model)"),$Co=l(),pu=a("li"),jce=a("strong"),kCo=o("vilt"),SCo=o(" \u2014 "),Kj=a("a"),RCo=o("ViltModel"),PCo=o(" (ViLT model)"),BCo=l(),_u=a("li"),Dce=a("strong"),ICo=o("vision-text-dual-encoder"),NCo=o(" \u2014 "),Zj=a("a"),qCo=o("VisionTextDualEncoderModel"),jCo=o(" (VisionTextDualEncoder model)"),DCo=l(),uu=a("li"),Gce=a("strong"),GCo=o("visual_bert"),OCo=o(" \u2014 "),eD=a("a"),VCo=o("VisualBertModel"),XCo=o(" (VisualBERT model)"),zCo=l(),bu=a("li"),Oce=a("strong"),QCo=o("vit"),WCo=o(" \u2014 "),oD=a("a"),HCo=o("ViTModel"),UCo=o(" (ViT model)"),JCo=l(),vu=a("li"),Vce=a("strong"),YCo=o("vit_mae"),KCo=o(" \u2014 "),rD=a("a"),ZCo=o("ViTMAEModel"),e5o=o(" (ViTMAE model)"),o5o=l(),Fu=a("li"),Xce=a("strong"),r5o=o("wav2vec2"),t5o=o(" \u2014 "),tD=a("a"),a5o=o("Wav2Vec2Model"),n5o=o(" (Wav2Vec2 model)"),s5o=l(),Tu=a("li"),zce=a("strong"),l5o=o("wav2vec2-conformer"),i5o=o(" \u2014 "),aD=a("a"),d5o=o("Wav2Vec2ConformerModel"),c5o=o(" (Wav2Vec2-Conformer model)"),f5o=l(),Mu=a("li"),Qce=a("strong"),m5o=o("wavlm"),g5o=o(" \u2014 "),nD=a("a"),h5o=o("WavLMModel"),p5o=o(" (WavLM model)"),_5o=l(),Eu=a("li"),Wce=a("strong"),u5o=o("xglm"),b5o=o(" \u2014 "),sD=a("a"),v5o=o("XGLMModel"),F5o=o(" (XGLM model)"),T5o=l(),Cu=a("li"),Hce=a("strong"),M5o=o("xlm"),E5o=o(" \u2014 "),lD=a("a"),C5o=o("XLMModel"),w5o=o(" (XLM model)"),A5o=l(),wu=a("li"),Uce=a("strong"),L5o=o("xlm-prophetnet"),y5o=o(" \u2014 "),iD=a("a"),x5o=o("XLMProphetNetModel"),$5o=o(" (XLM-ProphetNet model)"),k5o=l(),Au=a("li"),Jce=a("strong"),S5o=o("xlm-roberta"),R5o=o(" \u2014 "),dD=a("a"),P5o=o("XLMRobertaModel"),B5o=o(" (XLM-RoBERTa model)"),I5o=l(),Lu=a("li"),Yce=a("strong"),N5o=o("xlm-roberta-xl"),q5o=o(" \u2014 "),cD=a("a"),j5o=o("XLMRobertaXLModel"),D5o=o(" (XLM-RoBERTa-XL model)"),G5o=l(),yu=a("li"),Kce=a("strong"),O5o=o("xlnet"),V5o=o(" \u2014 "),fD=a("a"),X5o=o("XLNetModel"),z5o=o(" (XLNet model)"),Q5o=l(),xu=a("li"),Zce=a("strong"),W5o=o("yolos"),H5o=o(" \u2014 "),mD=a("a"),U5o=o("YolosModel"),J5o=o(" (YOLOS model)"),Y5o=l(),$u=a("li"),efe=a("strong"),K5o=o("yoso"),Z5o=o(" \u2014 "),gD=a("a"),e3o=o("YosoModel"),o3o=o(" (YOSO model)"),r3o=l(),ku=a("p"),t3o=o("The model is set in evaluation mode by default using "),ofe=a("code"),a3o=o("model.eval()"),n3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=a("code"),s3o=o("model.train()"),l3o=l(),F(Su.$$.fragment),TOe=l(),ji=a("h2"),Ru=a("a"),tfe=a("span"),F(fL.$$.fragment),i3o=l(),afe=a("span"),d3o=o("AutoModelForPreTraining"),MOe=l(),$o=a("div"),F(mL.$$.fragment),c3o=l(),Di=a("p"),f3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hD=a("a"),m3o=o("from_pretrained()"),g3o=o(" class method or the "),pD=a("a"),h3o=o("from_config()"),p3o=o(` class
method.`),_3o=l(),gL=a("p"),u3o=o("This class cannot be instantiated directly using "),nfe=a("code"),b3o=o("__init__()"),v3o=o(" (throws an error)."),F3o=l(),st=a("div"),F(hL.$$.fragment),T3o=l(),sfe=a("p"),M3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E3o=l(),Gi=a("p"),C3o=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),w3o=o("not"),A3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),L3o=o("from_pretrained()"),y3o=o(" to load the model weights."),x3o=l(),F(Pu.$$.fragment),$3o=l(),Ye=a("div"),F(pL.$$.fragment),k3o=l(),ife=a("p"),S3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R3o=l(),Pa=a("p"),P3o=o("The model class to instantiate is selected based on the "),dfe=a("code"),B3o=o("model_type"),I3o=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),N3o=o("pretrained_model_name_or_path"),q3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),j3o=o("pretrained_model_name_or_path"),D3o=o(":"),G3o=l(),G=a("ul"),Bu=a("li"),mfe=a("strong"),O3o=o("albert"),V3o=o(" \u2014 "),uD=a("a"),X3o=o("AlbertForPreTraining"),z3o=o(" (ALBERT model)"),Q3o=l(),Iu=a("li"),gfe=a("strong"),W3o=o("bart"),H3o=o(" \u2014 "),bD=a("a"),U3o=o("BartForConditionalGeneration"),J3o=o(" (BART model)"),Y3o=l(),Nu=a("li"),hfe=a("strong"),K3o=o("bert"),Z3o=o(" \u2014 "),vD=a("a"),e0o=o("BertForPreTraining"),o0o=o(" (BERT model)"),r0o=l(),qu=a("li"),pfe=a("strong"),t0o=o("big_bird"),a0o=o(" \u2014 "),FD=a("a"),n0o=o("BigBirdForPreTraining"),s0o=o(" (BigBird model)"),l0o=l(),ju=a("li"),_fe=a("strong"),i0o=o("bloom"),d0o=o(" \u2014 "),TD=a("a"),c0o=o("BloomForCausalLM"),f0o=o(" (BLOOM model)"),m0o=l(),Du=a("li"),ufe=a("strong"),g0o=o("camembert"),h0o=o(" \u2014 "),MD=a("a"),p0o=o("CamembertForMaskedLM"),_0o=o(" (CamemBERT model)"),u0o=l(),Gu=a("li"),bfe=a("strong"),b0o=o("ctrl"),v0o=o(" \u2014 "),ED=a("a"),F0o=o("CTRLLMHeadModel"),T0o=o(" (CTRL model)"),M0o=l(),Ou=a("li"),vfe=a("strong"),E0o=o("data2vec-text"),C0o=o(" \u2014 "),CD=a("a"),w0o=o("Data2VecTextForMaskedLM"),A0o=o(" (Data2VecText model)"),L0o=l(),Vu=a("li"),Ffe=a("strong"),y0o=o("deberta"),x0o=o(" \u2014 "),wD=a("a"),$0o=o("DebertaForMaskedLM"),k0o=o(" (DeBERTa model)"),S0o=l(),Xu=a("li"),Tfe=a("strong"),R0o=o("deberta-v2"),P0o=o(" \u2014 "),AD=a("a"),B0o=o("DebertaV2ForMaskedLM"),I0o=o(" (DeBERTa-v2 model)"),N0o=l(),zu=a("li"),Mfe=a("strong"),q0o=o("distilbert"),j0o=o(" \u2014 "),LD=a("a"),D0o=o("DistilBertForMaskedLM"),G0o=o(" (DistilBERT model)"),O0o=l(),Qu=a("li"),Efe=a("strong"),V0o=o("electra"),X0o=o(" \u2014 "),yD=a("a"),z0o=o("ElectraForPreTraining"),Q0o=o(" (ELECTRA model)"),W0o=l(),Wu=a("li"),Cfe=a("strong"),H0o=o("flaubert"),U0o=o(" \u2014 "),xD=a("a"),J0o=o("FlaubertWithLMHeadModel"),Y0o=o(" (FlauBERT model)"),K0o=l(),Hu=a("li"),wfe=a("strong"),Z0o=o("flava"),ewo=o(" \u2014 "),$D=a("a"),owo=o("FlavaForPreTraining"),rwo=o(" (FLAVA model)"),two=l(),Uu=a("li"),Afe=a("strong"),awo=o("fnet"),nwo=o(" \u2014 "),kD=a("a"),swo=o("FNetForPreTraining"),lwo=o(" (FNet model)"),iwo=l(),Ju=a("li"),Lfe=a("strong"),dwo=o("fsmt"),cwo=o(" \u2014 "),SD=a("a"),fwo=o("FSMTForConditionalGeneration"),mwo=o(" (FairSeq Machine-Translation model)"),gwo=l(),Yu=a("li"),yfe=a("strong"),hwo=o("funnel"),pwo=o(" \u2014 "),RD=a("a"),_wo=o("FunnelForPreTraining"),uwo=o(" (Funnel Transformer model)"),bwo=l(),Ku=a("li"),xfe=a("strong"),vwo=o("gpt2"),Fwo=o(" \u2014 "),PD=a("a"),Two=o("GPT2LMHeadModel"),Mwo=o(" (OpenAI GPT-2 model)"),Ewo=l(),Zu=a("li"),$fe=a("strong"),Cwo=o("ibert"),wwo=o(" \u2014 "),BD=a("a"),Awo=o("IBertForMaskedLM"),Lwo=o(" (I-BERT model)"),ywo=l(),e7=a("li"),kfe=a("strong"),xwo=o("layoutlm"),$wo=o(" \u2014 "),ID=a("a"),kwo=o("LayoutLMForMaskedLM"),Swo=o(" (LayoutLM model)"),Rwo=l(),o7=a("li"),Sfe=a("strong"),Pwo=o("longformer"),Bwo=o(" \u2014 "),ND=a("a"),Iwo=o("LongformerForMaskedLM"),Nwo=o(" (Longformer model)"),qwo=l(),r7=a("li"),Rfe=a("strong"),jwo=o("lxmert"),Dwo=o(" \u2014 "),qD=a("a"),Gwo=o("LxmertForPreTraining"),Owo=o(" (LXMERT model)"),Vwo=l(),t7=a("li"),Pfe=a("strong"),Xwo=o("megatron-bert"),zwo=o(" \u2014 "),jD=a("a"),Qwo=o("MegatronBertForPreTraining"),Wwo=o(" (Megatron-BERT model)"),Hwo=l(),a7=a("li"),Bfe=a("strong"),Uwo=o("mobilebert"),Jwo=o(" \u2014 "),DD=a("a"),Ywo=o("MobileBertForPreTraining"),Kwo=o(" (MobileBERT model)"),Zwo=l(),n7=a("li"),Ife=a("strong"),eAo=o("mpnet"),oAo=o(" \u2014 "),GD=a("a"),rAo=o("MPNetForMaskedLM"),tAo=o(" (MPNet model)"),aAo=l(),s7=a("li"),Nfe=a("strong"),nAo=o("nezha"),sAo=o(" \u2014 "),OD=a("a"),lAo=o("NezhaForPreTraining"),iAo=o(" (Nezha model)"),dAo=l(),l7=a("li"),qfe=a("strong"),cAo=o("openai-gpt"),fAo=o(" \u2014 "),VD=a("a"),mAo=o("OpenAIGPTLMHeadModel"),gAo=o(" (OpenAI GPT model)"),hAo=l(),i7=a("li"),jfe=a("strong"),pAo=o("retribert"),_Ao=o(" \u2014 "),XD=a("a"),uAo=o("RetriBertModel"),bAo=o(" (RetriBERT model)"),vAo=l(),d7=a("li"),Dfe=a("strong"),FAo=o("roberta"),TAo=o(" \u2014 "),zD=a("a"),MAo=o("RobertaForMaskedLM"),EAo=o(" (RoBERTa model)"),CAo=l(),c7=a("li"),Gfe=a("strong"),wAo=o("splinter"),AAo=o(" \u2014 "),QD=a("a"),LAo=o("SplinterForPreTraining"),yAo=o(" (Splinter model)"),xAo=l(),f7=a("li"),Ofe=a("strong"),$Ao=o("squeezebert"),kAo=o(" \u2014 "),WD=a("a"),SAo=o("SqueezeBertForMaskedLM"),RAo=o(" (SqueezeBERT model)"),PAo=l(),m7=a("li"),Vfe=a("strong"),BAo=o("t5"),IAo=o(" \u2014 "),HD=a("a"),NAo=o("T5ForConditionalGeneration"),qAo=o(" (T5 model)"),jAo=l(),g7=a("li"),Xfe=a("strong"),DAo=o("tapas"),GAo=o(" \u2014 "),UD=a("a"),OAo=o("TapasForMaskedLM"),VAo=o(" (TAPAS model)"),XAo=l(),h7=a("li"),zfe=a("strong"),zAo=o("transfo-xl"),QAo=o(" \u2014 "),JD=a("a"),WAo=o("TransfoXLLMHeadModel"),HAo=o(" (Transformer-XL model)"),UAo=l(),p7=a("li"),Qfe=a("strong"),JAo=o("unispeech"),YAo=o(" \u2014 "),YD=a("a"),KAo=o("UniSpeechForPreTraining"),ZAo=o(" (UniSpeech model)"),e6o=l(),_7=a("li"),Wfe=a("strong"),o6o=o("unispeech-sat"),r6o=o(" \u2014 "),KD=a("a"),t6o=o("UniSpeechSatForPreTraining"),a6o=o(" (UniSpeechSat model)"),n6o=l(),u7=a("li"),Hfe=a("strong"),s6o=o("visual_bert"),l6o=o(" \u2014 "),ZD=a("a"),i6o=o("VisualBertForPreTraining"),d6o=o(" (VisualBERT model)"),c6o=l(),b7=a("li"),Ufe=a("strong"),f6o=o("vit_mae"),m6o=o(" \u2014 "),eG=a("a"),g6o=o("ViTMAEForPreTraining"),h6o=o(" (ViTMAE model)"),p6o=l(),v7=a("li"),Jfe=a("strong"),_6o=o("wav2vec2"),u6o=o(" \u2014 "),oG=a("a"),b6o=o("Wav2Vec2ForPreTraining"),v6o=o(" (Wav2Vec2 model)"),F6o=l(),F7=a("li"),Yfe=a("strong"),T6o=o("wav2vec2-conformer"),M6o=o(" \u2014 "),rG=a("a"),E6o=o("Wav2Vec2ConformerForPreTraining"),C6o=o(" (Wav2Vec2-Conformer model)"),w6o=l(),T7=a("li"),Kfe=a("strong"),A6o=o("xlm"),L6o=o(" \u2014 "),tG=a("a"),y6o=o("XLMWithLMHeadModel"),x6o=o(" (XLM model)"),$6o=l(),M7=a("li"),Zfe=a("strong"),k6o=o("xlm-roberta"),S6o=o(" \u2014 "),aG=a("a"),R6o=o("XLMRobertaForMaskedLM"),P6o=o(" (XLM-RoBERTa model)"),B6o=l(),E7=a("li"),eme=a("strong"),I6o=o("xlm-roberta-xl"),N6o=o(" \u2014 "),nG=a("a"),q6o=o("XLMRobertaXLForMaskedLM"),j6o=o(" (XLM-RoBERTa-XL model)"),D6o=l(),C7=a("li"),ome=a("strong"),G6o=o("xlnet"),O6o=o(" \u2014 "),sG=a("a"),V6o=o("XLNetLMHeadModel"),X6o=o(" (XLNet model)"),z6o=l(),w7=a("p"),Q6o=o("The model is set in evaluation mode by default using "),rme=a("code"),W6o=o("model.eval()"),H6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=a("code"),U6o=o("model.train()"),J6o=l(),F(A7.$$.fragment),EOe=l(),Oi=a("h2"),L7=a("a"),ame=a("span"),F(_L.$$.fragment),Y6o=l(),nme=a("span"),K6o=o("AutoModelForCausalLM"),COe=l(),ko=a("div"),F(uL.$$.fragment),Z6o=l(),Vi=a("p"),eLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lG=a("a"),oLo=o("from_pretrained()"),rLo=o(" class method or the "),iG=a("a"),tLo=o("from_config()"),aLo=o(` class
method.`),nLo=l(),bL=a("p"),sLo=o("This class cannot be instantiated directly using "),sme=a("code"),lLo=o("__init__()"),iLo=o(" (throws an error)."),dLo=l(),lt=a("div"),F(vL.$$.fragment),cLo=l(),lme=a("p"),fLo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mLo=l(),Xi=a("p"),gLo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),hLo=o("not"),pLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),_Lo=o("from_pretrained()"),uLo=o(" to load the model weights."),bLo=l(),F(y7.$$.fragment),vLo=l(),Ke=a("div"),F(FL.$$.fragment),FLo=l(),dme=a("p"),TLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MLo=l(),Ba=a("p"),ELo=o("The model class to instantiate is selected based on the "),cme=a("code"),CLo=o("model_type"),wLo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),ALo=o("pretrained_model_name_or_path"),LLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),yLo=o("pretrained_model_name_or_path"),xLo=o(":"),$Lo=l(),z=a("ul"),x7=a("li"),gme=a("strong"),kLo=o("bart"),SLo=o(" \u2014 "),cG=a("a"),RLo=o("BartForCausalLM"),PLo=o(" (BART model)"),BLo=l(),$7=a("li"),hme=a("strong"),ILo=o("bert"),NLo=o(" \u2014 "),fG=a("a"),qLo=o("BertLMHeadModel"),jLo=o(" (BERT model)"),DLo=l(),k7=a("li"),pme=a("strong"),GLo=o("bert-generation"),OLo=o(" \u2014 "),mG=a("a"),VLo=o("BertGenerationDecoder"),XLo=o(" (Bert Generation model)"),zLo=l(),S7=a("li"),_me=a("strong"),QLo=o("big_bird"),WLo=o(" \u2014 "),gG=a("a"),HLo=o("BigBirdForCausalLM"),ULo=o(" (BigBird model)"),JLo=l(),R7=a("li"),ume=a("strong"),YLo=o("bigbird_pegasus"),KLo=o(" \u2014 "),hG=a("a"),ZLo=o("BigBirdPegasusForCausalLM"),eyo=o(" (BigBird-Pegasus model)"),oyo=l(),P7=a("li"),bme=a("strong"),ryo=o("blenderbot"),tyo=o(" \u2014 "),pG=a("a"),ayo=o("BlenderbotForCausalLM"),nyo=o(" (Blenderbot model)"),syo=l(),B7=a("li"),vme=a("strong"),lyo=o("blenderbot-small"),iyo=o(" \u2014 "),_G=a("a"),dyo=o("BlenderbotSmallForCausalLM"),cyo=o(" (BlenderbotSmall model)"),fyo=l(),I7=a("li"),Fme=a("strong"),myo=o("bloom"),gyo=o(" \u2014 "),uG=a("a"),hyo=o("BloomForCausalLM"),pyo=o(" (BLOOM model)"),_yo=l(),N7=a("li"),Tme=a("strong"),uyo=o("camembert"),byo=o(" \u2014 "),bG=a("a"),vyo=o("CamembertForCausalLM"),Fyo=o(" (CamemBERT model)"),Tyo=l(),q7=a("li"),Mme=a("strong"),Myo=o("codegen"),Eyo=o(" \u2014 "),vG=a("a"),Cyo=o("CodeGenForCausalLM"),wyo=o(" (CodeGen model)"),Ayo=l(),j7=a("li"),Eme=a("strong"),Lyo=o("ctrl"),yyo=o(" \u2014 "),FG=a("a"),xyo=o("CTRLLMHeadModel"),$yo=o(" (CTRL model)"),kyo=l(),D7=a("li"),Cme=a("strong"),Syo=o("data2vec-text"),Ryo=o(" \u2014 "),TG=a("a"),Pyo=o("Data2VecTextForCausalLM"),Byo=o(" (Data2VecText model)"),Iyo=l(),G7=a("li"),wme=a("strong"),Nyo=o("electra"),qyo=o(" \u2014 "),MG=a("a"),jyo=o("ElectraForCausalLM"),Dyo=o(" (ELECTRA model)"),Gyo=l(),O7=a("li"),Ame=a("strong"),Oyo=o("gpt2"),Vyo=o(" \u2014 "),EG=a("a"),Xyo=o("GPT2LMHeadModel"),zyo=o(" (OpenAI GPT-2 model)"),Qyo=l(),V7=a("li"),Lme=a("strong"),Wyo=o("gpt_neo"),Hyo=o(" \u2014 "),CG=a("a"),Uyo=o("GPTNeoForCausalLM"),Jyo=o(" (GPT Neo model)"),Yyo=l(),X7=a("li"),yme=a("strong"),Kyo=o("gpt_neox"),Zyo=o(" \u2014 "),wG=a("a"),e8o=o("GPTNeoXForCausalLM"),o8o=o(" (GPT NeoX model)"),r8o=l(),z7=a("li"),xme=a("strong"),t8o=o("gptj"),a8o=o(" \u2014 "),AG=a("a"),n8o=o("GPTJForCausalLM"),s8o=o(" (GPT-J model)"),l8o=l(),Q7=a("li"),$me=a("strong"),i8o=o("marian"),d8o=o(" \u2014 "),LG=a("a"),c8o=o("MarianForCausalLM"),f8o=o(" (Marian model)"),m8o=l(),W7=a("li"),kme=a("strong"),g8o=o("mbart"),h8o=o(" \u2014 "),yG=a("a"),p8o=o("MBartForCausalLM"),_8o=o(" (mBART model)"),u8o=l(),H7=a("li"),Sme=a("strong"),b8o=o("megatron-bert"),v8o=o(" \u2014 "),xG=a("a"),F8o=o("MegatronBertForCausalLM"),T8o=o(" (Megatron-BERT model)"),M8o=l(),U7=a("li"),Rme=a("strong"),E8o=o("openai-gpt"),C8o=o(" \u2014 "),$G=a("a"),w8o=o("OpenAIGPTLMHeadModel"),A8o=o(" (OpenAI GPT model)"),L8o=l(),J7=a("li"),Pme=a("strong"),y8o=o("opt"),x8o=o(" \u2014 "),kG=a("a"),$8o=o("OPTForCausalLM"),k8o=o(" (OPT model)"),S8o=l(),Y7=a("li"),Bme=a("strong"),R8o=o("pegasus"),P8o=o(" \u2014 "),SG=a("a"),B8o=o("PegasusForCausalLM"),I8o=o(" (Pegasus model)"),N8o=l(),K7=a("li"),Ime=a("strong"),q8o=o("plbart"),j8o=o(" \u2014 "),RG=a("a"),D8o=o("PLBartForCausalLM"),G8o=o(" (PLBart model)"),O8o=l(),Z7=a("li"),Nme=a("strong"),V8o=o("prophetnet"),X8o=o(" \u2014 "),PG=a("a"),z8o=o("ProphetNetForCausalLM"),Q8o=o(" (ProphetNet model)"),W8o=l(),e1=a("li"),qme=a("strong"),H8o=o("qdqbert"),U8o=o(" \u2014 "),BG=a("a"),J8o=o("QDQBertLMHeadModel"),Y8o=o(" (QDQBert model)"),K8o=l(),o1=a("li"),jme=a("strong"),Z8o=o("reformer"),exo=o(" \u2014 "),IG=a("a"),oxo=o("ReformerModelWithLMHead"),rxo=o(" (Reformer model)"),txo=l(),r1=a("li"),Dme=a("strong"),axo=o("rembert"),nxo=o(" \u2014 "),NG=a("a"),sxo=o("RemBertForCausalLM"),lxo=o(" (RemBERT model)"),ixo=l(),t1=a("li"),Gme=a("strong"),dxo=o("roberta"),cxo=o(" \u2014 "),qG=a("a"),fxo=o("RobertaForCausalLM"),mxo=o(" (RoBERTa model)"),gxo=l(),a1=a("li"),Ome=a("strong"),hxo=o("roformer"),pxo=o(" \u2014 "),jG=a("a"),_xo=o("RoFormerForCausalLM"),uxo=o(" (RoFormer model)"),bxo=l(),n1=a("li"),Vme=a("strong"),vxo=o("speech_to_text_2"),Fxo=o(" \u2014 "),DG=a("a"),Txo=o("Speech2Text2ForCausalLM"),Mxo=o(" (Speech2Text2 model)"),Exo=l(),s1=a("li"),Xme=a("strong"),Cxo=o("transfo-xl"),wxo=o(" \u2014 "),GG=a("a"),Axo=o("TransfoXLLMHeadModel"),Lxo=o(" (Transformer-XL model)"),yxo=l(),l1=a("li"),zme=a("strong"),xxo=o("trocr"),$xo=o(" \u2014 "),OG=a("a"),kxo=o("TrOCRForCausalLM"),Sxo=o(" (TrOCR model)"),Rxo=l(),i1=a("li"),Qme=a("strong"),Pxo=o("xglm"),Bxo=o(" \u2014 "),VG=a("a"),Ixo=o("XGLMForCausalLM"),Nxo=o(" (XGLM model)"),qxo=l(),d1=a("li"),Wme=a("strong"),jxo=o("xlm"),Dxo=o(" \u2014 "),XG=a("a"),Gxo=o("XLMWithLMHeadModel"),Oxo=o(" (XLM model)"),Vxo=l(),c1=a("li"),Hme=a("strong"),Xxo=o("xlm-prophetnet"),zxo=o(" \u2014 "),zG=a("a"),Qxo=o("XLMProphetNetForCausalLM"),Wxo=o(" (XLM-ProphetNet model)"),Hxo=l(),f1=a("li"),Ume=a("strong"),Uxo=o("xlm-roberta"),Jxo=o(" \u2014 "),QG=a("a"),Yxo=o("XLMRobertaForCausalLM"),Kxo=o(" (XLM-RoBERTa model)"),Zxo=l(),m1=a("li"),Jme=a("strong"),e$o=o("xlm-roberta-xl"),o$o=o(" \u2014 "),WG=a("a"),r$o=o("XLMRobertaXLForCausalLM"),t$o=o(" (XLM-RoBERTa-XL model)"),a$o=l(),g1=a("li"),Yme=a("strong"),n$o=o("xlnet"),s$o=o(" \u2014 "),HG=a("a"),l$o=o("XLNetLMHeadModel"),i$o=o(" (XLNet model)"),d$o=l(),h1=a("p"),c$o=o("The model is set in evaluation mode by default using "),Kme=a("code"),f$o=o("model.eval()"),m$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=a("code"),g$o=o("model.train()"),h$o=l(),F(p1.$$.fragment),wOe=l(),zi=a("h2"),_1=a("a"),ege=a("span"),F(TL.$$.fragment),p$o=l(),oge=a("span"),_$o=o("AutoModelForMaskedLM"),AOe=l(),So=a("div"),F(ML.$$.fragment),u$o=l(),Qi=a("p"),b$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UG=a("a"),v$o=o("from_pretrained()"),F$o=o(" class method or the "),JG=a("a"),T$o=o("from_config()"),M$o=o(` class
method.`),E$o=l(),EL=a("p"),C$o=o("This class cannot be instantiated directly using "),rge=a("code"),w$o=o("__init__()"),A$o=o(" (throws an error)."),L$o=l(),it=a("div"),F(CL.$$.fragment),y$o=l(),tge=a("p"),x$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$$o=l(),Wi=a("p"),k$o=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),S$o=o("not"),R$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),P$o=o("from_pretrained()"),B$o=o(" to load the model weights."),I$o=l(),F(u1.$$.fragment),N$o=l(),Ze=a("div"),F(wL.$$.fragment),q$o=l(),nge=a("p"),j$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D$o=l(),Ia=a("p"),G$o=o("The model class to instantiate is selected based on the "),sge=a("code"),O$o=o("model_type"),V$o=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),X$o=o("pretrained_model_name_or_path"),z$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Q$o=o("pretrained_model_name_or_path"),W$o=o(":"),H$o=l(),W=a("ul"),b1=a("li"),dge=a("strong"),U$o=o("albert"),J$o=o(" \u2014 "),KG=a("a"),Y$o=o("AlbertForMaskedLM"),K$o=o(" (ALBERT model)"),Z$o=l(),v1=a("li"),cge=a("strong"),eko=o("bart"),oko=o(" \u2014 "),ZG=a("a"),rko=o("BartForConditionalGeneration"),tko=o(" (BART model)"),ako=l(),F1=a("li"),fge=a("strong"),nko=o("bert"),sko=o(" \u2014 "),eO=a("a"),lko=o("BertForMaskedLM"),iko=o(" (BERT model)"),dko=l(),T1=a("li"),mge=a("strong"),cko=o("big_bird"),fko=o(" \u2014 "),oO=a("a"),mko=o("BigBirdForMaskedLM"),gko=o(" (BigBird model)"),hko=l(),M1=a("li"),gge=a("strong"),pko=o("camembert"),_ko=o(" \u2014 "),rO=a("a"),uko=o("CamembertForMaskedLM"),bko=o(" (CamemBERT model)"),vko=l(),E1=a("li"),hge=a("strong"),Fko=o("convbert"),Tko=o(" \u2014 "),tO=a("a"),Mko=o("ConvBertForMaskedLM"),Eko=o(" (ConvBERT model)"),Cko=l(),C1=a("li"),pge=a("strong"),wko=o("data2vec-text"),Ako=o(" \u2014 "),aO=a("a"),Lko=o("Data2VecTextForMaskedLM"),yko=o(" (Data2VecText model)"),xko=l(),w1=a("li"),_ge=a("strong"),$ko=o("deberta"),kko=o(" \u2014 "),nO=a("a"),Sko=o("DebertaForMaskedLM"),Rko=o(" (DeBERTa model)"),Pko=l(),A1=a("li"),uge=a("strong"),Bko=o("deberta-v2"),Iko=o(" \u2014 "),sO=a("a"),Nko=o("DebertaV2ForMaskedLM"),qko=o(" (DeBERTa-v2 model)"),jko=l(),L1=a("li"),bge=a("strong"),Dko=o("distilbert"),Gko=o(" \u2014 "),lO=a("a"),Oko=o("DistilBertForMaskedLM"),Vko=o(" (DistilBERT model)"),Xko=l(),y1=a("li"),vge=a("strong"),zko=o("electra"),Qko=o(" \u2014 "),iO=a("a"),Wko=o("ElectraForMaskedLM"),Hko=o(" (ELECTRA model)"),Uko=l(),x1=a("li"),Fge=a("strong"),Jko=o("flaubert"),Yko=o(" \u2014 "),dO=a("a"),Kko=o("FlaubertWithLMHeadModel"),Zko=o(" (FlauBERT model)"),eSo=l(),$1=a("li"),Tge=a("strong"),oSo=o("fnet"),rSo=o(" \u2014 "),cO=a("a"),tSo=o("FNetForMaskedLM"),aSo=o(" (FNet model)"),nSo=l(),k1=a("li"),Mge=a("strong"),sSo=o("funnel"),lSo=o(" \u2014 "),fO=a("a"),iSo=o("FunnelForMaskedLM"),dSo=o(" (Funnel Transformer model)"),cSo=l(),S1=a("li"),Ege=a("strong"),fSo=o("ibert"),mSo=o(" \u2014 "),mO=a("a"),gSo=o("IBertForMaskedLM"),hSo=o(" (I-BERT model)"),pSo=l(),R1=a("li"),Cge=a("strong"),_So=o("layoutlm"),uSo=o(" \u2014 "),gO=a("a"),bSo=o("LayoutLMForMaskedLM"),vSo=o(" (LayoutLM model)"),FSo=l(),P1=a("li"),wge=a("strong"),TSo=o("longformer"),MSo=o(" \u2014 "),hO=a("a"),ESo=o("LongformerForMaskedLM"),CSo=o(" (Longformer model)"),wSo=l(),B1=a("li"),Age=a("strong"),ASo=o("luke"),LSo=o(" \u2014 "),pO=a("a"),ySo=o("LukeForMaskedLM"),xSo=o(" (LUKE model)"),$So=l(),I1=a("li"),Lge=a("strong"),kSo=o("mbart"),SSo=o(" \u2014 "),_O=a("a"),RSo=o("MBartForConditionalGeneration"),PSo=o(" (mBART model)"),BSo=l(),N1=a("li"),yge=a("strong"),ISo=o("megatron-bert"),NSo=o(" \u2014 "),uO=a("a"),qSo=o("MegatronBertForMaskedLM"),jSo=o(" (Megatron-BERT model)"),DSo=l(),q1=a("li"),xge=a("strong"),GSo=o("mobilebert"),OSo=o(" \u2014 "),bO=a("a"),VSo=o("MobileBertForMaskedLM"),XSo=o(" (MobileBERT model)"),zSo=l(),j1=a("li"),$ge=a("strong"),QSo=o("mpnet"),WSo=o(" \u2014 "),vO=a("a"),HSo=o("MPNetForMaskedLM"),USo=o(" (MPNet model)"),JSo=l(),D1=a("li"),kge=a("strong"),YSo=o("nezha"),KSo=o(" \u2014 "),FO=a("a"),ZSo=o("NezhaForMaskedLM"),eRo=o(" (Nezha model)"),oRo=l(),G1=a("li"),Sge=a("strong"),rRo=o("nystromformer"),tRo=o(" \u2014 "),TO=a("a"),aRo=o("NystromformerForMaskedLM"),nRo=o(" (Nystr\xF6mformer model)"),sRo=l(),O1=a("li"),Rge=a("strong"),lRo=o("perceiver"),iRo=o(" \u2014 "),MO=a("a"),dRo=o("PerceiverForMaskedLM"),cRo=o(" (Perceiver model)"),fRo=l(),V1=a("li"),Pge=a("strong"),mRo=o("qdqbert"),gRo=o(" \u2014 "),EO=a("a"),hRo=o("QDQBertForMaskedLM"),pRo=o(" (QDQBert model)"),_Ro=l(),X1=a("li"),Bge=a("strong"),uRo=o("reformer"),bRo=o(" \u2014 "),CO=a("a"),vRo=o("ReformerForMaskedLM"),FRo=o(" (Reformer model)"),TRo=l(),z1=a("li"),Ige=a("strong"),MRo=o("rembert"),ERo=o(" \u2014 "),wO=a("a"),CRo=o("RemBertForMaskedLM"),wRo=o(" (RemBERT model)"),ARo=l(),Q1=a("li"),Nge=a("strong"),LRo=o("roberta"),yRo=o(" \u2014 "),AO=a("a"),xRo=o("RobertaForMaskedLM"),$Ro=o(" (RoBERTa model)"),kRo=l(),W1=a("li"),qge=a("strong"),SRo=o("roformer"),RRo=o(" \u2014 "),LO=a("a"),PRo=o("RoFormerForMaskedLM"),BRo=o(" (RoFormer model)"),IRo=l(),H1=a("li"),jge=a("strong"),NRo=o("squeezebert"),qRo=o(" \u2014 "),yO=a("a"),jRo=o("SqueezeBertForMaskedLM"),DRo=o(" (SqueezeBERT model)"),GRo=l(),U1=a("li"),Dge=a("strong"),ORo=o("tapas"),VRo=o(" \u2014 "),xO=a("a"),XRo=o("TapasForMaskedLM"),zRo=o(" (TAPAS model)"),QRo=l(),J1=a("li"),Gge=a("strong"),WRo=o("wav2vec2"),HRo=o(" \u2014 "),Oge=a("code"),URo=o("Wav2Vec2ForMaskedLM"),JRo=o(" (Wav2Vec2 model)"),YRo=l(),Y1=a("li"),Vge=a("strong"),KRo=o("xlm"),ZRo=o(" \u2014 "),$O=a("a"),ePo=o("XLMWithLMHeadModel"),oPo=o(" (XLM model)"),rPo=l(),K1=a("li"),Xge=a("strong"),tPo=o("xlm-roberta"),aPo=o(" \u2014 "),kO=a("a"),nPo=o("XLMRobertaForMaskedLM"),sPo=o(" (XLM-RoBERTa model)"),lPo=l(),Z1=a("li"),zge=a("strong"),iPo=o("xlm-roberta-xl"),dPo=o(" \u2014 "),SO=a("a"),cPo=o("XLMRobertaXLForMaskedLM"),fPo=o(" (XLM-RoBERTa-XL model)"),mPo=l(),e2=a("li"),Qge=a("strong"),gPo=o("yoso"),hPo=o(" \u2014 "),RO=a("a"),pPo=o("YosoForMaskedLM"),_Po=o(" (YOSO model)"),uPo=l(),o2=a("p"),bPo=o("The model is set in evaluation mode by default using "),Wge=a("code"),vPo=o("model.eval()"),FPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),TPo=o("model.train()"),MPo=l(),F(r2.$$.fragment),LOe=l(),Hi=a("h2"),t2=a("a"),Uge=a("span"),F(AL.$$.fragment),EPo=l(),Jge=a("span"),CPo=o("AutoModelForSeq2SeqLM"),yOe=l(),Ro=a("div"),F(LL.$$.fragment),wPo=l(),Ui=a("p"),APo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PO=a("a"),LPo=o("from_pretrained()"),yPo=o(" class method or the "),BO=a("a"),xPo=o("from_config()"),$Po=o(` class
method.`),kPo=l(),yL=a("p"),SPo=o("This class cannot be instantiated directly using "),Yge=a("code"),RPo=o("__init__()"),PPo=o(" (throws an error)."),BPo=l(),dt=a("div"),F(xL.$$.fragment),IPo=l(),Kge=a("p"),NPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qPo=l(),Ji=a("p"),jPo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),DPo=o("not"),GPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),OPo=o("from_pretrained()"),VPo=o(" to load the model weights."),XPo=l(),F(a2.$$.fragment),zPo=l(),eo=a("div"),F($L.$$.fragment),QPo=l(),ehe=a("p"),WPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HPo=l(),Na=a("p"),UPo=o("The model class to instantiate is selected based on the "),ohe=a("code"),JPo=o("model_type"),YPo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),KPo=o("pretrained_model_name_or_path"),ZPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),eBo=o("pretrained_model_name_or_path"),oBo=o(":"),rBo=l(),pe=a("ul"),n2=a("li"),ahe=a("strong"),tBo=o("bart"),aBo=o(" \u2014 "),NO=a("a"),nBo=o("BartForConditionalGeneration"),sBo=o(" (BART model)"),lBo=l(),s2=a("li"),nhe=a("strong"),iBo=o("bigbird_pegasus"),dBo=o(" \u2014 "),qO=a("a"),cBo=o("BigBirdPegasusForConditionalGeneration"),fBo=o(" (BigBird-Pegasus model)"),mBo=l(),l2=a("li"),she=a("strong"),gBo=o("blenderbot"),hBo=o(" \u2014 "),jO=a("a"),pBo=o("BlenderbotForConditionalGeneration"),_Bo=o(" (Blenderbot model)"),uBo=l(),i2=a("li"),lhe=a("strong"),bBo=o("blenderbot-small"),vBo=o(" \u2014 "),DO=a("a"),FBo=o("BlenderbotSmallForConditionalGeneration"),TBo=o(" (BlenderbotSmall model)"),MBo=l(),d2=a("li"),ihe=a("strong"),EBo=o("encoder-decoder"),CBo=o(" \u2014 "),GO=a("a"),wBo=o("EncoderDecoderModel"),ABo=o(" (Encoder decoder model)"),LBo=l(),c2=a("li"),dhe=a("strong"),yBo=o("fsmt"),xBo=o(" \u2014 "),OO=a("a"),$Bo=o("FSMTForConditionalGeneration"),kBo=o(" (FairSeq Machine-Translation model)"),SBo=l(),f2=a("li"),che=a("strong"),RBo=o("led"),PBo=o(" \u2014 "),VO=a("a"),BBo=o("LEDForConditionalGeneration"),IBo=o(" (LED model)"),NBo=l(),m2=a("li"),fhe=a("strong"),qBo=o("longt5"),jBo=o(" \u2014 "),XO=a("a"),DBo=o("LongT5ForConditionalGeneration"),GBo=o(" (LongT5 model)"),OBo=l(),g2=a("li"),mhe=a("strong"),VBo=o("m2m_100"),XBo=o(" \u2014 "),zO=a("a"),zBo=o("M2M100ForConditionalGeneration"),QBo=o(" (M2M100 model)"),WBo=l(),h2=a("li"),ghe=a("strong"),HBo=o("marian"),UBo=o(" \u2014 "),QO=a("a"),JBo=o("MarianMTModel"),YBo=o(" (Marian model)"),KBo=l(),p2=a("li"),hhe=a("strong"),ZBo=o("mbart"),eIo=o(" \u2014 "),WO=a("a"),oIo=o("MBartForConditionalGeneration"),rIo=o(" (mBART model)"),tIo=l(),_2=a("li"),phe=a("strong"),aIo=o("mt5"),nIo=o(" \u2014 "),HO=a("a"),sIo=o("MT5ForConditionalGeneration"),lIo=o(" (MT5 model)"),iIo=l(),u2=a("li"),_he=a("strong"),dIo=o("pegasus"),cIo=o(" \u2014 "),UO=a("a"),fIo=o("PegasusForConditionalGeneration"),mIo=o(" (Pegasus model)"),gIo=l(),b2=a("li"),uhe=a("strong"),hIo=o("plbart"),pIo=o(" \u2014 "),JO=a("a"),_Io=o("PLBartForConditionalGeneration"),uIo=o(" (PLBart model)"),bIo=l(),v2=a("li"),bhe=a("strong"),vIo=o("prophetnet"),FIo=o(" \u2014 "),YO=a("a"),TIo=o("ProphetNetForConditionalGeneration"),MIo=o(" (ProphetNet model)"),EIo=l(),F2=a("li"),vhe=a("strong"),CIo=o("t5"),wIo=o(" \u2014 "),KO=a("a"),AIo=o("T5ForConditionalGeneration"),LIo=o(" (T5 model)"),yIo=l(),T2=a("li"),Fhe=a("strong"),xIo=o("xlm-prophetnet"),$Io=o(" \u2014 "),ZO=a("a"),kIo=o("XLMProphetNetForConditionalGeneration"),SIo=o(" (XLM-ProphetNet model)"),RIo=l(),M2=a("p"),PIo=o("The model is set in evaluation mode by default using "),The=a("code"),BIo=o("model.eval()"),IIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),NIo=o("model.train()"),qIo=l(),F(E2.$$.fragment),xOe=l(),Yi=a("h2"),C2=a("a"),Ehe=a("span"),F(kL.$$.fragment),jIo=l(),Che=a("span"),DIo=o("AutoModelForSequenceClassification"),$Oe=l(),Po=a("div"),F(SL.$$.fragment),GIo=l(),Ki=a("p"),OIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eV=a("a"),VIo=o("from_pretrained()"),XIo=o(" class method or the "),oV=a("a"),zIo=o("from_config()"),QIo=o(` class
method.`),WIo=l(),RL=a("p"),HIo=o("This class cannot be instantiated directly using "),whe=a("code"),UIo=o("__init__()"),JIo=o(" (throws an error)."),YIo=l(),ct=a("div"),F(PL.$$.fragment),KIo=l(),Ahe=a("p"),ZIo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eNo=l(),Zi=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),aNo=o("from_pretrained()"),nNo=o(" to load the model weights."),sNo=l(),F(w2.$$.fragment),lNo=l(),oo=a("div"),F(BL.$$.fragment),iNo=l(),yhe=a("p"),dNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cNo=l(),qa=a("p"),fNo=o("The model class to instantiate is selected based on the "),xhe=a("code"),mNo=o("model_type"),gNo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),hNo=o("pretrained_model_name_or_path"),pNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),_No=o("pretrained_model_name_or_path"),uNo=o(":"),bNo=l(),N=a("ul"),A2=a("li"),She=a("strong"),vNo=o("albert"),FNo=o(" \u2014 "),tV=a("a"),TNo=o("AlbertForSequenceClassification"),MNo=o(" (ALBERT model)"),ENo=l(),L2=a("li"),Rhe=a("strong"),CNo=o("bart"),wNo=o(" \u2014 "),aV=a("a"),ANo=o("BartForSequenceClassification"),LNo=o(" (BART model)"),yNo=l(),y2=a("li"),Phe=a("strong"),xNo=o("bert"),$No=o(" \u2014 "),nV=a("a"),kNo=o("BertForSequenceClassification"),SNo=o(" (BERT model)"),RNo=l(),x2=a("li"),Bhe=a("strong"),PNo=o("big_bird"),BNo=o(" \u2014 "),sV=a("a"),INo=o("BigBirdForSequenceClassification"),NNo=o(" (BigBird model)"),qNo=l(),$2=a("li"),Ihe=a("strong"),jNo=o("bigbird_pegasus"),DNo=o(" \u2014 "),lV=a("a"),GNo=o("BigBirdPegasusForSequenceClassification"),ONo=o(" (BigBird-Pegasus model)"),VNo=l(),k2=a("li"),Nhe=a("strong"),XNo=o("bloom"),zNo=o(" \u2014 "),iV=a("a"),QNo=o("BloomForSequenceClassification"),WNo=o(" (BLOOM model)"),HNo=l(),S2=a("li"),qhe=a("strong"),UNo=o("camembert"),JNo=o(" \u2014 "),dV=a("a"),YNo=o("CamembertForSequenceClassification"),KNo=o(" (CamemBERT model)"),ZNo=l(),R2=a("li"),jhe=a("strong"),eqo=o("canine"),oqo=o(" \u2014 "),cV=a("a"),rqo=o("CanineForSequenceClassification"),tqo=o(" (CANINE model)"),aqo=l(),P2=a("li"),Dhe=a("strong"),nqo=o("convbert"),sqo=o(" \u2014 "),fV=a("a"),lqo=o("ConvBertForSequenceClassification"),iqo=o(" (ConvBERT model)"),dqo=l(),B2=a("li"),Ghe=a("strong"),cqo=o("ctrl"),fqo=o(" \u2014 "),mV=a("a"),mqo=o("CTRLForSequenceClassification"),gqo=o(" (CTRL model)"),hqo=l(),I2=a("li"),Ohe=a("strong"),pqo=o("data2vec-text"),_qo=o(" \u2014 "),gV=a("a"),uqo=o("Data2VecTextForSequenceClassification"),bqo=o(" (Data2VecText model)"),vqo=l(),N2=a("li"),Vhe=a("strong"),Fqo=o("deberta"),Tqo=o(" \u2014 "),hV=a("a"),Mqo=o("DebertaForSequenceClassification"),Eqo=o(" (DeBERTa model)"),Cqo=l(),q2=a("li"),Xhe=a("strong"),wqo=o("deberta-v2"),Aqo=o(" \u2014 "),pV=a("a"),Lqo=o("DebertaV2ForSequenceClassification"),yqo=o(" (DeBERTa-v2 model)"),xqo=l(),j2=a("li"),zhe=a("strong"),$qo=o("distilbert"),kqo=o(" \u2014 "),_V=a("a"),Sqo=o("DistilBertForSequenceClassification"),Rqo=o(" (DistilBERT model)"),Pqo=l(),D2=a("li"),Qhe=a("strong"),Bqo=o("electra"),Iqo=o(" \u2014 "),uV=a("a"),Nqo=o("ElectraForSequenceClassification"),qqo=o(" (ELECTRA model)"),jqo=l(),G2=a("li"),Whe=a("strong"),Dqo=o("flaubert"),Gqo=o(" \u2014 "),bV=a("a"),Oqo=o("FlaubertForSequenceClassification"),Vqo=o(" (FlauBERT model)"),Xqo=l(),O2=a("li"),Hhe=a("strong"),zqo=o("fnet"),Qqo=o(" \u2014 "),vV=a("a"),Wqo=o("FNetForSequenceClassification"),Hqo=o(" (FNet model)"),Uqo=l(),V2=a("li"),Uhe=a("strong"),Jqo=o("funnel"),Yqo=o(" \u2014 "),FV=a("a"),Kqo=o("FunnelForSequenceClassification"),Zqo=o(" (Funnel Transformer model)"),ejo=l(),X2=a("li"),Jhe=a("strong"),ojo=o("gpt2"),rjo=o(" \u2014 "),TV=a("a"),tjo=o("GPT2ForSequenceClassification"),ajo=o(" (OpenAI GPT-2 model)"),njo=l(),z2=a("li"),Yhe=a("strong"),sjo=o("gpt_neo"),ljo=o(" \u2014 "),MV=a("a"),ijo=o("GPTNeoForSequenceClassification"),djo=o(" (GPT Neo model)"),cjo=l(),Q2=a("li"),Khe=a("strong"),fjo=o("gptj"),mjo=o(" \u2014 "),EV=a("a"),gjo=o("GPTJForSequenceClassification"),hjo=o(" (GPT-J model)"),pjo=l(),W2=a("li"),Zhe=a("strong"),_jo=o("ibert"),ujo=o(" \u2014 "),CV=a("a"),bjo=o("IBertForSequenceClassification"),vjo=o(" (I-BERT model)"),Fjo=l(),H2=a("li"),epe=a("strong"),Tjo=o("layoutlm"),Mjo=o(" \u2014 "),wV=a("a"),Ejo=o("LayoutLMForSequenceClassification"),Cjo=o(" (LayoutLM model)"),wjo=l(),U2=a("li"),ope=a("strong"),Ajo=o("layoutlmv2"),Ljo=o(" \u2014 "),AV=a("a"),yjo=o("LayoutLMv2ForSequenceClassification"),xjo=o(" (LayoutLMv2 model)"),$jo=l(),J2=a("li"),rpe=a("strong"),kjo=o("layoutlmv3"),Sjo=o(" \u2014 "),LV=a("a"),Rjo=o("LayoutLMv3ForSequenceClassification"),Pjo=o(" (LayoutLMv3 model)"),Bjo=l(),Y2=a("li"),tpe=a("strong"),Ijo=o("led"),Njo=o(" \u2014 "),yV=a("a"),qjo=o("LEDForSequenceClassification"),jjo=o(" (LED model)"),Djo=l(),K2=a("li"),ape=a("strong"),Gjo=o("longformer"),Ojo=o(" \u2014 "),xV=a("a"),Vjo=o("LongformerForSequenceClassification"),Xjo=o(" (Longformer model)"),zjo=l(),Z2=a("li"),npe=a("strong"),Qjo=o("mbart"),Wjo=o(" \u2014 "),$V=a("a"),Hjo=o("MBartForSequenceClassification"),Ujo=o(" (mBART model)"),Jjo=l(),eb=a("li"),spe=a("strong"),Yjo=o("megatron-bert"),Kjo=o(" \u2014 "),kV=a("a"),Zjo=o("MegatronBertForSequenceClassification"),eDo=o(" (Megatron-BERT model)"),oDo=l(),ob=a("li"),lpe=a("strong"),rDo=o("mobilebert"),tDo=o(" \u2014 "),SV=a("a"),aDo=o("MobileBertForSequenceClassification"),nDo=o(" (MobileBERT model)"),sDo=l(),rb=a("li"),ipe=a("strong"),lDo=o("mpnet"),iDo=o(" \u2014 "),RV=a("a"),dDo=o("MPNetForSequenceClassification"),cDo=o(" (MPNet model)"),fDo=l(),tb=a("li"),dpe=a("strong"),mDo=o("nezha"),gDo=o(" \u2014 "),PV=a("a"),hDo=o("NezhaForSequenceClassification"),pDo=o(" (Nezha model)"),_Do=l(),ab=a("li"),cpe=a("strong"),uDo=o("nystromformer"),bDo=o(" \u2014 "),BV=a("a"),vDo=o("NystromformerForSequenceClassification"),FDo=o(" (Nystr\xF6mformer model)"),TDo=l(),nb=a("li"),fpe=a("strong"),MDo=o("openai-gpt"),EDo=o(" \u2014 "),IV=a("a"),CDo=o("OpenAIGPTForSequenceClassification"),wDo=o(" (OpenAI GPT model)"),ADo=l(),sb=a("li"),mpe=a("strong"),LDo=o("perceiver"),yDo=o(" \u2014 "),NV=a("a"),xDo=o("PerceiverForSequenceClassification"),$Do=o(" (Perceiver model)"),kDo=l(),lb=a("li"),gpe=a("strong"),SDo=o("plbart"),RDo=o(" \u2014 "),qV=a("a"),PDo=o("PLBartForSequenceClassification"),BDo=o(" (PLBart model)"),IDo=l(),ib=a("li"),hpe=a("strong"),NDo=o("qdqbert"),qDo=o(" \u2014 "),jV=a("a"),jDo=o("QDQBertForSequenceClassification"),DDo=o(" (QDQBert model)"),GDo=l(),db=a("li"),ppe=a("strong"),ODo=o("reformer"),VDo=o(" \u2014 "),DV=a("a"),XDo=o("ReformerForSequenceClassification"),zDo=o(" (Reformer model)"),QDo=l(),cb=a("li"),_pe=a("strong"),WDo=o("rembert"),HDo=o(" \u2014 "),GV=a("a"),UDo=o("RemBertForSequenceClassification"),JDo=o(" (RemBERT model)"),YDo=l(),fb=a("li"),upe=a("strong"),KDo=o("roberta"),ZDo=o(" \u2014 "),OV=a("a"),eGo=o("RobertaForSequenceClassification"),oGo=o(" (RoBERTa model)"),rGo=l(),mb=a("li"),bpe=a("strong"),tGo=o("roformer"),aGo=o(" \u2014 "),VV=a("a"),nGo=o("RoFormerForSequenceClassification"),sGo=o(" (RoFormer model)"),lGo=l(),gb=a("li"),vpe=a("strong"),iGo=o("squeezebert"),dGo=o(" \u2014 "),XV=a("a"),cGo=o("SqueezeBertForSequenceClassification"),fGo=o(" (SqueezeBERT model)"),mGo=l(),hb=a("li"),Fpe=a("strong"),gGo=o("tapas"),hGo=o(" \u2014 "),zV=a("a"),pGo=o("TapasForSequenceClassification"),_Go=o(" (TAPAS model)"),uGo=l(),pb=a("li"),Tpe=a("strong"),bGo=o("transfo-xl"),vGo=o(" \u2014 "),QV=a("a"),FGo=o("TransfoXLForSequenceClassification"),TGo=o(" (Transformer-XL model)"),MGo=l(),_b=a("li"),Mpe=a("strong"),EGo=o("xlm"),CGo=o(" \u2014 "),WV=a("a"),wGo=o("XLMForSequenceClassification"),AGo=o(" (XLM model)"),LGo=l(),ub=a("li"),Epe=a("strong"),yGo=o("xlm-roberta"),xGo=o(" \u2014 "),HV=a("a"),$Go=o("XLMRobertaForSequenceClassification"),kGo=o(" (XLM-RoBERTa model)"),SGo=l(),bb=a("li"),Cpe=a("strong"),RGo=o("xlm-roberta-xl"),PGo=o(" \u2014 "),UV=a("a"),BGo=o("XLMRobertaXLForSequenceClassification"),IGo=o(" (XLM-RoBERTa-XL model)"),NGo=l(),vb=a("li"),wpe=a("strong"),qGo=o("xlnet"),jGo=o(" \u2014 "),JV=a("a"),DGo=o("XLNetForSequenceClassification"),GGo=o(" (XLNet model)"),OGo=l(),Fb=a("li"),Ape=a("strong"),VGo=o("yoso"),XGo=o(" \u2014 "),YV=a("a"),zGo=o("YosoForSequenceClassification"),QGo=o(" (YOSO model)"),WGo=l(),Tb=a("p"),HGo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),UGo=o("model.eval()"),JGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),YGo=o("model.train()"),KGo=l(),F(Mb.$$.fragment),kOe=l(),ed=a("h2"),Eb=a("a"),xpe=a("span"),F(IL.$$.fragment),ZGo=l(),$pe=a("span"),eOo=o("AutoModelForMultipleChoice"),SOe=l(),Bo=a("div"),F(NL.$$.fragment),oOo=l(),od=a("p"),rOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KV=a("a"),tOo=o("from_pretrained()"),aOo=o(" class method or the "),ZV=a("a"),nOo=o("from_config()"),sOo=o(` class
method.`),lOo=l(),qL=a("p"),iOo=o("This class cannot be instantiated directly using "),kpe=a("code"),dOo=o("__init__()"),cOo=o(" (throws an error)."),fOo=l(),ft=a("div"),F(jL.$$.fragment),mOo=l(),Spe=a("p"),gOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hOo=l(),rd=a("p"),pOo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),_Oo=o("not"),uOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),bOo=o("from_pretrained()"),vOo=o(" to load the model weights."),FOo=l(),F(Cb.$$.fragment),TOo=l(),ro=a("div"),F(DL.$$.fragment),MOo=l(),Ppe=a("p"),EOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),COo=l(),ja=a("p"),wOo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),AOo=o("model_type"),LOo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),yOo=o("pretrained_model_name_or_path"),xOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),$Oo=o("pretrained_model_name_or_path"),kOo=o(":"),SOo=l(),Z=a("ul"),wb=a("li"),qpe=a("strong"),ROo=o("albert"),POo=o(" \u2014 "),oX=a("a"),BOo=o("AlbertForMultipleChoice"),IOo=o(" (ALBERT model)"),NOo=l(),Ab=a("li"),jpe=a("strong"),qOo=o("bert"),jOo=o(" \u2014 "),rX=a("a"),DOo=o("BertForMultipleChoice"),GOo=o(" (BERT model)"),OOo=l(),Lb=a("li"),Dpe=a("strong"),VOo=o("big_bird"),XOo=o(" \u2014 "),tX=a("a"),zOo=o("BigBirdForMultipleChoice"),QOo=o(" (BigBird model)"),WOo=l(),yb=a("li"),Gpe=a("strong"),HOo=o("camembert"),UOo=o(" \u2014 "),aX=a("a"),JOo=o("CamembertForMultipleChoice"),YOo=o(" (CamemBERT model)"),KOo=l(),xb=a("li"),Ope=a("strong"),ZOo=o("canine"),eVo=o(" \u2014 "),nX=a("a"),oVo=o("CanineForMultipleChoice"),rVo=o(" (CANINE model)"),tVo=l(),$b=a("li"),Vpe=a("strong"),aVo=o("convbert"),nVo=o(" \u2014 "),sX=a("a"),sVo=o("ConvBertForMultipleChoice"),lVo=o(" (ConvBERT model)"),iVo=l(),kb=a("li"),Xpe=a("strong"),dVo=o("data2vec-text"),cVo=o(" \u2014 "),lX=a("a"),fVo=o("Data2VecTextForMultipleChoice"),mVo=o(" (Data2VecText model)"),gVo=l(),Sb=a("li"),zpe=a("strong"),hVo=o("deberta-v2"),pVo=o(" \u2014 "),iX=a("a"),_Vo=o("DebertaV2ForMultipleChoice"),uVo=o(" (DeBERTa-v2 model)"),bVo=l(),Rb=a("li"),Qpe=a("strong"),vVo=o("distilbert"),FVo=o(" \u2014 "),dX=a("a"),TVo=o("DistilBertForMultipleChoice"),MVo=o(" (DistilBERT model)"),EVo=l(),Pb=a("li"),Wpe=a("strong"),CVo=o("electra"),wVo=o(" \u2014 "),cX=a("a"),AVo=o("ElectraForMultipleChoice"),LVo=o(" (ELECTRA model)"),yVo=l(),Bb=a("li"),Hpe=a("strong"),xVo=o("flaubert"),$Vo=o(" \u2014 "),fX=a("a"),kVo=o("FlaubertForMultipleChoice"),SVo=o(" (FlauBERT model)"),RVo=l(),Ib=a("li"),Upe=a("strong"),PVo=o("fnet"),BVo=o(" \u2014 "),mX=a("a"),IVo=o("FNetForMultipleChoice"),NVo=o(" (FNet model)"),qVo=l(),Nb=a("li"),Jpe=a("strong"),jVo=o("funnel"),DVo=o(" \u2014 "),gX=a("a"),GVo=o("FunnelForMultipleChoice"),OVo=o(" (Funnel Transformer model)"),VVo=l(),qb=a("li"),Ype=a("strong"),XVo=o("ibert"),zVo=o(" \u2014 "),hX=a("a"),QVo=o("IBertForMultipleChoice"),WVo=o(" (I-BERT model)"),HVo=l(),jb=a("li"),Kpe=a("strong"),UVo=o("longformer"),JVo=o(" \u2014 "),pX=a("a"),YVo=o("LongformerForMultipleChoice"),KVo=o(" (Longformer model)"),ZVo=l(),Db=a("li"),Zpe=a("strong"),eXo=o("megatron-bert"),oXo=o(" \u2014 "),_X=a("a"),rXo=o("MegatronBertForMultipleChoice"),tXo=o(" (Megatron-BERT model)"),aXo=l(),Gb=a("li"),e_e=a("strong"),nXo=o("mobilebert"),sXo=o(" \u2014 "),uX=a("a"),lXo=o("MobileBertForMultipleChoice"),iXo=o(" (MobileBERT model)"),dXo=l(),Ob=a("li"),o_e=a("strong"),cXo=o("mpnet"),fXo=o(" \u2014 "),bX=a("a"),mXo=o("MPNetForMultipleChoice"),gXo=o(" (MPNet model)"),hXo=l(),Vb=a("li"),r_e=a("strong"),pXo=o("nezha"),_Xo=o(" \u2014 "),vX=a("a"),uXo=o("NezhaForMultipleChoice"),bXo=o(" (Nezha model)"),vXo=l(),Xb=a("li"),t_e=a("strong"),FXo=o("nystromformer"),TXo=o(" \u2014 "),FX=a("a"),MXo=o("NystromformerForMultipleChoice"),EXo=o(" (Nystr\xF6mformer model)"),CXo=l(),zb=a("li"),a_e=a("strong"),wXo=o("qdqbert"),AXo=o(" \u2014 "),TX=a("a"),LXo=o("QDQBertForMultipleChoice"),yXo=o(" (QDQBert model)"),xXo=l(),Qb=a("li"),n_e=a("strong"),$Xo=o("rembert"),kXo=o(" \u2014 "),MX=a("a"),SXo=o("RemBertForMultipleChoice"),RXo=o(" (RemBERT model)"),PXo=l(),Wb=a("li"),s_e=a("strong"),BXo=o("roberta"),IXo=o(" \u2014 "),EX=a("a"),NXo=o("RobertaForMultipleChoice"),qXo=o(" (RoBERTa model)"),jXo=l(),Hb=a("li"),l_e=a("strong"),DXo=o("roformer"),GXo=o(" \u2014 "),CX=a("a"),OXo=o("RoFormerForMultipleChoice"),VXo=o(" (RoFormer model)"),XXo=l(),Ub=a("li"),i_e=a("strong"),zXo=o("squeezebert"),QXo=o(" \u2014 "),wX=a("a"),WXo=o("SqueezeBertForMultipleChoice"),HXo=o(" (SqueezeBERT model)"),UXo=l(),Jb=a("li"),d_e=a("strong"),JXo=o("xlm"),YXo=o(" \u2014 "),AX=a("a"),KXo=o("XLMForMultipleChoice"),ZXo=o(" (XLM model)"),ezo=l(),Yb=a("li"),c_e=a("strong"),ozo=o("xlm-roberta"),rzo=o(" \u2014 "),LX=a("a"),tzo=o("XLMRobertaForMultipleChoice"),azo=o(" (XLM-RoBERTa model)"),nzo=l(),Kb=a("li"),f_e=a("strong"),szo=o("xlm-roberta-xl"),lzo=o(" \u2014 "),yX=a("a"),izo=o("XLMRobertaXLForMultipleChoice"),dzo=o(" (XLM-RoBERTa-XL model)"),czo=l(),Zb=a("li"),m_e=a("strong"),fzo=o("xlnet"),mzo=o(" \u2014 "),xX=a("a"),gzo=o("XLNetForMultipleChoice"),hzo=o(" (XLNet model)"),pzo=l(),ev=a("li"),g_e=a("strong"),_zo=o("yoso"),uzo=o(" \u2014 "),$X=a("a"),bzo=o("YosoForMultipleChoice"),vzo=o(" (YOSO model)"),Fzo=l(),ov=a("p"),Tzo=o("The model is set in evaluation mode by default using "),h_e=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),Czo=o("model.train()"),wzo=l(),F(rv.$$.fragment),ROe=l(),td=a("h2"),tv=a("a"),__e=a("span"),F(GL.$$.fragment),Azo=l(),u_e=a("span"),Lzo=o("AutoModelForNextSentencePrediction"),POe=l(),Io=a("div"),F(OL.$$.fragment),yzo=l(),ad=a("p"),xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kX=a("a"),$zo=o("from_pretrained()"),kzo=o(" class method or the "),SX=a("a"),Szo=o("from_config()"),Rzo=o(` class
method.`),Pzo=l(),VL=a("p"),Bzo=o("This class cannot be instantiated directly using "),b_e=a("code"),Izo=o("__init__()"),Nzo=o(" (throws an error)."),qzo=l(),mt=a("div"),F(XL.$$.fragment),jzo=l(),v_e=a("p"),Dzo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gzo=l(),nd=a("p"),Ozo=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),Vzo=o("not"),Xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),zzo=o("from_pretrained()"),Qzo=o(" to load the model weights."),Wzo=l(),F(av.$$.fragment),Hzo=l(),to=a("div"),F(zL.$$.fragment),Uzo=l(),T_e=a("p"),Jzo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yzo=l(),Da=a("p"),Kzo=o("The model class to instantiate is selected based on the "),M_e=a("code"),Zzo=o("model_type"),eQo=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(":"),nQo=l(),No=a("ul"),nv=a("li"),w_e=a("strong"),sQo=o("bert"),lQo=o(" \u2014 "),PX=a("a"),iQo=o("BertForNextSentencePrediction"),dQo=o(" (BERT model)"),cQo=l(),sv=a("li"),A_e=a("strong"),fQo=o("fnet"),mQo=o(" \u2014 "),BX=a("a"),gQo=o("FNetForNextSentencePrediction"),hQo=o(" (FNet model)"),pQo=l(),lv=a("li"),L_e=a("strong"),_Qo=o("megatron-bert"),uQo=o(" \u2014 "),IX=a("a"),bQo=o("MegatronBertForNextSentencePrediction"),vQo=o(" (Megatron-BERT model)"),FQo=l(),iv=a("li"),y_e=a("strong"),TQo=o("mobilebert"),MQo=o(" \u2014 "),NX=a("a"),EQo=o("MobileBertForNextSentencePrediction"),CQo=o(" (MobileBERT model)"),wQo=l(),dv=a("li"),x_e=a("strong"),AQo=o("nezha"),LQo=o(" \u2014 "),qX=a("a"),yQo=o("NezhaForNextSentencePrediction"),xQo=o(" (Nezha model)"),$Qo=l(),cv=a("li"),$_e=a("strong"),kQo=o("qdqbert"),SQo=o(" \u2014 "),jX=a("a"),RQo=o("QDQBertForNextSentencePrediction"),PQo=o(" (QDQBert model)"),BQo=l(),fv=a("p"),IQo=o("The model is set in evaluation mode by default using "),k_e=a("code"),NQo=o("model.eval()"),qQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),jQo=o("model.train()"),DQo=l(),F(mv.$$.fragment),BOe=l(),sd=a("h2"),gv=a("a"),R_e=a("span"),F(QL.$$.fragment),GQo=l(),P_e=a("span"),OQo=o("AutoModelForTokenClassification"),IOe=l(),qo=a("div"),F(WL.$$.fragment),VQo=l(),ld=a("p"),XQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DX=a("a"),zQo=o("from_pretrained()"),QQo=o(" class method or the "),GX=a("a"),WQo=o("from_config()"),HQo=o(` class
method.`),UQo=l(),HL=a("p"),JQo=o("This class cannot be instantiated directly using "),B_e=a("code"),YQo=o("__init__()"),KQo=o(" (throws an error)."),ZQo=l(),gt=a("div"),F(UL.$$.fragment),eWo=l(),I_e=a("p"),oWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rWo=l(),id=a("p"),tWo=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),aWo=o("not"),nWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),sWo=o("from_pretrained()"),lWo=o(" to load the model weights."),iWo=l(),F(hv.$$.fragment),dWo=l(),ao=a("div"),F(JL.$$.fragment),cWo=l(),q_e=a("p"),fWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mWo=l(),Ga=a("p"),gWo=o("The model class to instantiate is selected based on the "),j_e=a("code"),hWo=o("model_type"),pWo=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),_Wo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(":"),FWo=l(),H=a("ul"),pv=a("li"),O_e=a("strong"),TWo=o("albert"),MWo=o(" \u2014 "),VX=a("a"),EWo=o("AlbertForTokenClassification"),CWo=o(" (ALBERT model)"),wWo=l(),_v=a("li"),V_e=a("strong"),AWo=o("bert"),LWo=o(" \u2014 "),XX=a("a"),yWo=o("BertForTokenClassification"),xWo=o(" (BERT model)"),$Wo=l(),uv=a("li"),X_e=a("strong"),kWo=o("big_bird"),SWo=o(" \u2014 "),zX=a("a"),RWo=o("BigBirdForTokenClassification"),PWo=o(" (BigBird model)"),BWo=l(),bv=a("li"),z_e=a("strong"),IWo=o("bloom"),NWo=o(" \u2014 "),QX=a("a"),qWo=o("BloomForTokenClassification"),jWo=o(" (BLOOM model)"),DWo=l(),vv=a("li"),Q_e=a("strong"),GWo=o("camembert"),OWo=o(" \u2014 "),WX=a("a"),VWo=o("CamembertForTokenClassification"),XWo=o(" (CamemBERT model)"),zWo=l(),Fv=a("li"),W_e=a("strong"),QWo=o("canine"),WWo=o(" \u2014 "),HX=a("a"),HWo=o("CanineForTokenClassification"),UWo=o(" (CANINE model)"),JWo=l(),Tv=a("li"),H_e=a("strong"),YWo=o("convbert"),KWo=o(" \u2014 "),UX=a("a"),ZWo=o("ConvBertForTokenClassification"),eHo=o(" (ConvBERT model)"),oHo=l(),Mv=a("li"),U_e=a("strong"),rHo=o("data2vec-text"),tHo=o(" \u2014 "),JX=a("a"),aHo=o("Data2VecTextForTokenClassification"),nHo=o(" (Data2VecText model)"),sHo=l(),Ev=a("li"),J_e=a("strong"),lHo=o("deberta"),iHo=o(" \u2014 "),YX=a("a"),dHo=o("DebertaForTokenClassification"),cHo=o(" (DeBERTa model)"),fHo=l(),Cv=a("li"),Y_e=a("strong"),mHo=o("deberta-v2"),gHo=o(" \u2014 "),KX=a("a"),hHo=o("DebertaV2ForTokenClassification"),pHo=o(" (DeBERTa-v2 model)"),_Ho=l(),wv=a("li"),K_e=a("strong"),uHo=o("distilbert"),bHo=o(" \u2014 "),ZX=a("a"),vHo=o("DistilBertForTokenClassification"),FHo=o(" (DistilBERT model)"),THo=l(),Av=a("li"),Z_e=a("strong"),MHo=o("electra"),EHo=o(" \u2014 "),ez=a("a"),CHo=o("ElectraForTokenClassification"),wHo=o(" (ELECTRA model)"),AHo=l(),Lv=a("li"),eue=a("strong"),LHo=o("flaubert"),yHo=o(" \u2014 "),oz=a("a"),xHo=o("FlaubertForTokenClassification"),$Ho=o(" (FlauBERT model)"),kHo=l(),yv=a("li"),oue=a("strong"),SHo=o("fnet"),RHo=o(" \u2014 "),rz=a("a"),PHo=o("FNetForTokenClassification"),BHo=o(" (FNet model)"),IHo=l(),xv=a("li"),rue=a("strong"),NHo=o("funnel"),qHo=o(" \u2014 "),tz=a("a"),jHo=o("FunnelForTokenClassification"),DHo=o(" (Funnel Transformer model)"),GHo=l(),$v=a("li"),tue=a("strong"),OHo=o("gpt2"),VHo=o(" \u2014 "),az=a("a"),XHo=o("GPT2ForTokenClassification"),zHo=o(" (OpenAI GPT-2 model)"),QHo=l(),kv=a("li"),aue=a("strong"),WHo=o("ibert"),HHo=o(" \u2014 "),nz=a("a"),UHo=o("IBertForTokenClassification"),JHo=o(" (I-BERT model)"),YHo=l(),Sv=a("li"),nue=a("strong"),KHo=o("layoutlm"),ZHo=o(" \u2014 "),sz=a("a"),eUo=o("LayoutLMForTokenClassification"),oUo=o(" (LayoutLM model)"),rUo=l(),Rv=a("li"),sue=a("strong"),tUo=o("layoutlmv2"),aUo=o(" \u2014 "),lz=a("a"),nUo=o("LayoutLMv2ForTokenClassification"),sUo=o(" (LayoutLMv2 model)"),lUo=l(),Pv=a("li"),lue=a("strong"),iUo=o("layoutlmv3"),dUo=o(" \u2014 "),iz=a("a"),cUo=o("LayoutLMv3ForTokenClassification"),fUo=o(" (LayoutLMv3 model)"),mUo=l(),Bv=a("li"),iue=a("strong"),gUo=o("longformer"),hUo=o(" \u2014 "),dz=a("a"),pUo=o("LongformerForTokenClassification"),_Uo=o(" (Longformer model)"),uUo=l(),Iv=a("li"),due=a("strong"),bUo=o("megatron-bert"),vUo=o(" \u2014 "),cz=a("a"),FUo=o("MegatronBertForTokenClassification"),TUo=o(" (Megatron-BERT model)"),MUo=l(),Nv=a("li"),cue=a("strong"),EUo=o("mobilebert"),CUo=o(" \u2014 "),fz=a("a"),wUo=o("MobileBertForTokenClassification"),AUo=o(" (MobileBERT model)"),LUo=l(),qv=a("li"),fue=a("strong"),yUo=o("mpnet"),xUo=o(" \u2014 "),mz=a("a"),$Uo=o("MPNetForTokenClassification"),kUo=o(" (MPNet model)"),SUo=l(),jv=a("li"),mue=a("strong"),RUo=o("nezha"),PUo=o(" \u2014 "),gz=a("a"),BUo=o("NezhaForTokenClassification"),IUo=o(" (Nezha model)"),NUo=l(),Dv=a("li"),gue=a("strong"),qUo=o("nystromformer"),jUo=o(" \u2014 "),hz=a("a"),DUo=o("NystromformerForTokenClassification"),GUo=o(" (Nystr\xF6mformer model)"),OUo=l(),Gv=a("li"),hue=a("strong"),VUo=o("qdqbert"),XUo=o(" \u2014 "),pz=a("a"),zUo=o("QDQBertForTokenClassification"),QUo=o(" (QDQBert model)"),WUo=l(),Ov=a("li"),pue=a("strong"),HUo=o("rembert"),UUo=o(" \u2014 "),_z=a("a"),JUo=o("RemBertForTokenClassification"),YUo=o(" (RemBERT model)"),KUo=l(),Vv=a("li"),_ue=a("strong"),ZUo=o("roberta"),eJo=o(" \u2014 "),uz=a("a"),oJo=o("RobertaForTokenClassification"),rJo=o(" (RoBERTa model)"),tJo=l(),Xv=a("li"),uue=a("strong"),aJo=o("roformer"),nJo=o(" \u2014 "),bz=a("a"),sJo=o("RoFormerForTokenClassification"),lJo=o(" (RoFormer model)"),iJo=l(),zv=a("li"),bue=a("strong"),dJo=o("squeezebert"),cJo=o(" \u2014 "),vz=a("a"),fJo=o("SqueezeBertForTokenClassification"),mJo=o(" (SqueezeBERT model)"),gJo=l(),Qv=a("li"),vue=a("strong"),hJo=o("xlm"),pJo=o(" \u2014 "),Fz=a("a"),_Jo=o("XLMForTokenClassification"),uJo=o(" (XLM model)"),bJo=l(),Wv=a("li"),Fue=a("strong"),vJo=o("xlm-roberta"),FJo=o(" \u2014 "),Tz=a("a"),TJo=o("XLMRobertaForTokenClassification"),MJo=o(" (XLM-RoBERTa model)"),EJo=l(),Hv=a("li"),Tue=a("strong"),CJo=o("xlm-roberta-xl"),wJo=o(" \u2014 "),Mz=a("a"),AJo=o("XLMRobertaXLForTokenClassification"),LJo=o(" (XLM-RoBERTa-XL model)"),yJo=l(),Uv=a("li"),Mue=a("strong"),xJo=o("xlnet"),$Jo=o(" \u2014 "),Ez=a("a"),kJo=o("XLNetForTokenClassification"),SJo=o(" (XLNet model)"),RJo=l(),Jv=a("li"),Eue=a("strong"),PJo=o("yoso"),BJo=o(" \u2014 "),Cz=a("a"),IJo=o("YosoForTokenClassification"),NJo=o(" (YOSO model)"),qJo=l(),Yv=a("p"),jJo=o("The model is set in evaluation mode by default using "),Cue=a("code"),DJo=o("model.eval()"),GJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),OJo=o("model.train()"),VJo=l(),F(Kv.$$.fragment),NOe=l(),dd=a("h2"),Zv=a("a"),Aue=a("span"),F(YL.$$.fragment),XJo=l(),Lue=a("span"),zJo=o("AutoModelForQuestionAnswering"),qOe=l(),jo=a("div"),F(KL.$$.fragment),QJo=l(),cd=a("p"),WJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wz=a("a"),HJo=o("from_pretrained()"),UJo=o(" class method or the "),Az=a("a"),JJo=o("from_config()"),YJo=o(` class
method.`),KJo=l(),ZL=a("p"),ZJo=o("This class cannot be instantiated directly using "),yue=a("code"),eYo=o("__init__()"),oYo=o(" (throws an error)."),rYo=l(),ht=a("div"),F(ey.$$.fragment),tYo=l(),xue=a("p"),aYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nYo=l(),fd=a("p"),sYo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),lYo=o("not"),iYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),dYo=o("from_pretrained()"),cYo=o(" to load the model weights."),fYo=l(),F(eF.$$.fragment),mYo=l(),no=a("div"),F(oy.$$.fragment),gYo=l(),kue=a("p"),hYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pYo=l(),Oa=a("p"),_Yo=o("The model class to instantiate is selected based on the "),Sue=a("code"),uYo=o("model_type"),bYo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(":"),EYo=l(),V=a("ul"),oF=a("li"),Bue=a("strong"),CYo=o("albert"),wYo=o(" \u2014 "),yz=a("a"),AYo=o("AlbertForQuestionAnswering"),LYo=o(" (ALBERT model)"),yYo=l(),rF=a("li"),Iue=a("strong"),xYo=o("bart"),$Yo=o(" \u2014 "),xz=a("a"),kYo=o("BartForQuestionAnswering"),SYo=o(" (BART model)"),RYo=l(),tF=a("li"),Nue=a("strong"),PYo=o("bert"),BYo=o(" \u2014 "),$z=a("a"),IYo=o("BertForQuestionAnswering"),NYo=o(" (BERT model)"),qYo=l(),aF=a("li"),que=a("strong"),jYo=o("big_bird"),DYo=o(" \u2014 "),kz=a("a"),GYo=o("BigBirdForQuestionAnswering"),OYo=o(" (BigBird model)"),VYo=l(),nF=a("li"),jue=a("strong"),XYo=o("bigbird_pegasus"),zYo=o(" \u2014 "),Sz=a("a"),QYo=o("BigBirdPegasusForQuestionAnswering"),WYo=o(" (BigBird-Pegasus model)"),HYo=l(),sF=a("li"),Due=a("strong"),UYo=o("camembert"),JYo=o(" \u2014 "),Rz=a("a"),YYo=o("CamembertForQuestionAnswering"),KYo=o(" (CamemBERT model)"),ZYo=l(),lF=a("li"),Gue=a("strong"),eKo=o("canine"),oKo=o(" \u2014 "),Pz=a("a"),rKo=o("CanineForQuestionAnswering"),tKo=o(" (CANINE model)"),aKo=l(),iF=a("li"),Oue=a("strong"),nKo=o("convbert"),sKo=o(" \u2014 "),Bz=a("a"),lKo=o("ConvBertForQuestionAnswering"),iKo=o(" (ConvBERT model)"),dKo=l(),dF=a("li"),Vue=a("strong"),cKo=o("data2vec-text"),fKo=o(" \u2014 "),Iz=a("a"),mKo=o("Data2VecTextForQuestionAnswering"),gKo=o(" (Data2VecText model)"),hKo=l(),cF=a("li"),Xue=a("strong"),pKo=o("deberta"),_Ko=o(" \u2014 "),Nz=a("a"),uKo=o("DebertaForQuestionAnswering"),bKo=o(" (DeBERTa model)"),vKo=l(),fF=a("li"),zue=a("strong"),FKo=o("deberta-v2"),TKo=o(" \u2014 "),qz=a("a"),MKo=o("DebertaV2ForQuestionAnswering"),EKo=o(" (DeBERTa-v2 model)"),CKo=l(),mF=a("li"),Que=a("strong"),wKo=o("distilbert"),AKo=o(" \u2014 "),jz=a("a"),LKo=o("DistilBertForQuestionAnswering"),yKo=o(" (DistilBERT model)"),xKo=l(),gF=a("li"),Wue=a("strong"),$Ko=o("electra"),kKo=o(" \u2014 "),Dz=a("a"),SKo=o("ElectraForQuestionAnswering"),RKo=o(" (ELECTRA model)"),PKo=l(),hF=a("li"),Hue=a("strong"),BKo=o("flaubert"),IKo=o(" \u2014 "),Gz=a("a"),NKo=o("FlaubertForQuestionAnsweringSimple"),qKo=o(" (FlauBERT model)"),jKo=l(),pF=a("li"),Uue=a("strong"),DKo=o("fnet"),GKo=o(" \u2014 "),Oz=a("a"),OKo=o("FNetForQuestionAnswering"),VKo=o(" (FNet model)"),XKo=l(),_F=a("li"),Jue=a("strong"),zKo=o("funnel"),QKo=o(" \u2014 "),Vz=a("a"),WKo=o("FunnelForQuestionAnswering"),HKo=o(" (Funnel Transformer model)"),UKo=l(),uF=a("li"),Yue=a("strong"),JKo=o("gptj"),YKo=o(" \u2014 "),Xz=a("a"),KKo=o("GPTJForQuestionAnswering"),ZKo=o(" (GPT-J model)"),eZo=l(),bF=a("li"),Kue=a("strong"),oZo=o("ibert"),rZo=o(" \u2014 "),zz=a("a"),tZo=o("IBertForQuestionAnswering"),aZo=o(" (I-BERT model)"),nZo=l(),vF=a("li"),Zue=a("strong"),sZo=o("layoutlmv2"),lZo=o(" \u2014 "),Qz=a("a"),iZo=o("LayoutLMv2ForQuestionAnswering"),dZo=o(" (LayoutLMv2 model)"),cZo=l(),FF=a("li"),e7e=a("strong"),fZo=o("layoutlmv3"),mZo=o(" \u2014 "),Wz=a("a"),gZo=o("LayoutLMv3ForQuestionAnswering"),hZo=o(" (LayoutLMv3 model)"),pZo=l(),TF=a("li"),o7e=a("strong"),_Zo=o("led"),uZo=o(" \u2014 "),Hz=a("a"),bZo=o("LEDForQuestionAnswering"),vZo=o(" (LED model)"),FZo=l(),MF=a("li"),r7e=a("strong"),TZo=o("longformer"),MZo=o(" \u2014 "),Uz=a("a"),EZo=o("LongformerForQuestionAnswering"),CZo=o(" (Longformer model)"),wZo=l(),EF=a("li"),t7e=a("strong"),AZo=o("lxmert"),LZo=o(" \u2014 "),Jz=a("a"),yZo=o("LxmertForQuestionAnswering"),xZo=o(" (LXMERT model)"),$Zo=l(),CF=a("li"),a7e=a("strong"),kZo=o("mbart"),SZo=o(" \u2014 "),Yz=a("a"),RZo=o("MBartForQuestionAnswering"),PZo=o(" (mBART model)"),BZo=l(),wF=a("li"),n7e=a("strong"),IZo=o("megatron-bert"),NZo=o(" \u2014 "),Kz=a("a"),qZo=o("MegatronBertForQuestionAnswering"),jZo=o(" (Megatron-BERT model)"),DZo=l(),AF=a("li"),s7e=a("strong"),GZo=o("mobilebert"),OZo=o(" \u2014 "),Zz=a("a"),VZo=o("MobileBertForQuestionAnswering"),XZo=o(" (MobileBERT model)"),zZo=l(),LF=a("li"),l7e=a("strong"),QZo=o("mpnet"),WZo=o(" \u2014 "),eQ=a("a"),HZo=o("MPNetForQuestionAnswering"),UZo=o(" (MPNet model)"),JZo=l(),yF=a("li"),i7e=a("strong"),YZo=o("nezha"),KZo=o(" \u2014 "),oQ=a("a"),ZZo=o("NezhaForQuestionAnswering"),eer=o(" (Nezha model)"),oer=l(),xF=a("li"),d7e=a("strong"),rer=o("nystromformer"),ter=o(" \u2014 "),rQ=a("a"),aer=o("NystromformerForQuestionAnswering"),ner=o(" (Nystr\xF6mformer model)"),ser=l(),$F=a("li"),c7e=a("strong"),ler=o("qdqbert"),ier=o(" \u2014 "),tQ=a("a"),der=o("QDQBertForQuestionAnswering"),cer=o(" (QDQBert model)"),fer=l(),kF=a("li"),f7e=a("strong"),mer=o("reformer"),ger=o(" \u2014 "),aQ=a("a"),her=o("ReformerForQuestionAnswering"),per=o(" (Reformer model)"),_er=l(),SF=a("li"),m7e=a("strong"),uer=o("rembert"),ber=o(" \u2014 "),nQ=a("a"),ver=o("RemBertForQuestionAnswering"),Fer=o(" (RemBERT model)"),Ter=l(),RF=a("li"),g7e=a("strong"),Mer=o("roberta"),Eer=o(" \u2014 "),sQ=a("a"),Cer=o("RobertaForQuestionAnswering"),wer=o(" (RoBERTa model)"),Aer=l(),PF=a("li"),h7e=a("strong"),Ler=o("roformer"),yer=o(" \u2014 "),lQ=a("a"),xer=o("RoFormerForQuestionAnswering"),$er=o(" (RoFormer model)"),ker=l(),BF=a("li"),p7e=a("strong"),Ser=o("splinter"),Rer=o(" \u2014 "),iQ=a("a"),Per=o("SplinterForQuestionAnswering"),Ber=o(" (Splinter model)"),Ier=l(),IF=a("li"),_7e=a("strong"),Ner=o("squeezebert"),qer=o(" \u2014 "),dQ=a("a"),jer=o("SqueezeBertForQuestionAnswering"),Der=o(" (SqueezeBERT model)"),Ger=l(),NF=a("li"),u7e=a("strong"),Oer=o("xlm"),Ver=o(" \u2014 "),cQ=a("a"),Xer=o("XLMForQuestionAnsweringSimple"),zer=o(" (XLM model)"),Qer=l(),qF=a("li"),b7e=a("strong"),Wer=o("xlm-roberta"),Her=o(" \u2014 "),fQ=a("a"),Uer=o("XLMRobertaForQuestionAnswering"),Jer=o(" (XLM-RoBERTa model)"),Yer=l(),jF=a("li"),v7e=a("strong"),Ker=o("xlm-roberta-xl"),Zer=o(" \u2014 "),mQ=a("a"),eor=o("XLMRobertaXLForQuestionAnswering"),oor=o(" (XLM-RoBERTa-XL model)"),ror=l(),DF=a("li"),F7e=a("strong"),tor=o("xlnet"),aor=o(" \u2014 "),gQ=a("a"),nor=o("XLNetForQuestionAnsweringSimple"),sor=o(" (XLNet model)"),lor=l(),GF=a("li"),T7e=a("strong"),ior=o("yoso"),dor=o(" \u2014 "),hQ=a("a"),cor=o("YosoForQuestionAnswering"),mor=o(" (YOSO model)"),gor=l(),OF=a("p"),hor=o("The model is set in evaluation mode by default using "),M7e=a("code"),por=o("model.eval()"),_or=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E7e=a("code"),uor=o("model.train()"),bor=l(),F(VF.$$.fragment),jOe=l(),md=a("h2"),XF=a("a"),C7e=a("span"),F(ry.$$.fragment),vor=l(),w7e=a("span"),For=o("AutoModelForTableQuestionAnswering"),DOe=l(),Do=a("div"),F(ty.$$.fragment),Tor=l(),gd=a("p"),Mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pQ=a("a"),Eor=o("from_pretrained()"),Cor=o(" class method or the "),_Q=a("a"),wor=o("from_config()"),Aor=o(` class
method.`),Lor=l(),ay=a("p"),yor=o("This class cannot be instantiated directly using "),A7e=a("code"),xor=o("__init__()"),$or=o(" (throws an error)."),kor=l(),pt=a("div"),F(ny.$$.fragment),Sor=l(),L7e=a("p"),Ror=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Por=l(),hd=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),Ior=o("not"),Nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),qor=o("from_pretrained()"),jor=o(" to load the model weights."),Dor=l(),F(zF.$$.fragment),Gor=l(),so=a("div"),F(sy.$$.fragment),Oor=l(),x7e=a("p"),Vor=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xor=l(),Va=a("p"),zor=o("The model class to instantiate is selected based on the "),$7e=a("code"),Qor=o("model_type"),Wor=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),Hor=o("pretrained_model_name_or_path"),Uor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),Jor=o("pretrained_model_name_or_path"),Yor=o(":"),Kor=l(),R7e=a("ul"),QF=a("li"),P7e=a("strong"),Zor=o("tapas"),err=o(" \u2014 "),bQ=a("a"),orr=o("TapasForQuestionAnswering"),rrr=o(" (TAPAS model)"),trr=l(),WF=a("p"),arr=o("The model is set in evaluation mode by default using "),B7e=a("code"),nrr=o("model.eval()"),srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I7e=a("code"),lrr=o("model.train()"),irr=l(),F(HF.$$.fragment),GOe=l(),pd=a("h2"),UF=a("a"),N7e=a("span"),F(ly.$$.fragment),drr=l(),q7e=a("span"),crr=o("AutoModelForImageClassification"),OOe=l(),Go=a("div"),F(iy.$$.fragment),frr=l(),_d=a("p"),mrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vQ=a("a"),grr=o("from_pretrained()"),hrr=o(" class method or the "),FQ=a("a"),prr=o("from_config()"),_rr=o(` class
method.`),urr=l(),dy=a("p"),brr=o("This class cannot be instantiated directly using "),j7e=a("code"),vrr=o("__init__()"),Frr=o(" (throws an error)."),Trr=l(),_t=a("div"),F(cy.$$.fragment),Mrr=l(),D7e=a("p"),Err=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Crr=l(),ud=a("p"),wrr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),Arr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),yrr=o("from_pretrained()"),xrr=o(" to load the model weights."),$rr=l(),F(JF.$$.fragment),krr=l(),lo=a("div"),F(fy.$$.fragment),Srr=l(),O7e=a("p"),Rrr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Prr=l(),Xa=a("p"),Brr=o("The model class to instantiate is selected based on the "),V7e=a("code"),Irr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),qrr=o("pretrained_model_name_or_path"),jrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),Drr=o("pretrained_model_name_or_path"),Grr=o(":"),Orr=l(),Fe=a("ul"),YF=a("li"),Q7e=a("strong"),Vrr=o("beit"),Xrr=o(" \u2014 "),MQ=a("a"),zrr=o("BeitForImageClassification"),Qrr=o(" (BEiT model)"),Wrr=l(),KF=a("li"),W7e=a("strong"),Hrr=o("convnext"),Urr=o(" \u2014 "),EQ=a("a"),Jrr=o("ConvNextForImageClassification"),Yrr=o(" (ConvNeXT model)"),Krr=l(),ZF=a("li"),H7e=a("strong"),Zrr=o("cvt"),etr=o(" \u2014 "),CQ=a("a"),otr=o("CvtForImageClassification"),rtr=o(" (CvT model)"),ttr=l(),eT=a("li"),U7e=a("strong"),atr=o("data2vec-vision"),ntr=o(" \u2014 "),wQ=a("a"),str=o("Data2VecVisionForImageClassification"),ltr=o(" (Data2VecVision model)"),itr=l(),zs=a("li"),J7e=a("strong"),dtr=o("deit"),ctr=o(" \u2014 "),AQ=a("a"),ftr=o("DeiTForImageClassification"),mtr=o(" or "),LQ=a("a"),gtr=o("DeiTForImageClassificationWithTeacher"),htr=o(" (DeiT model)"),ptr=l(),oT=a("li"),Y7e=a("strong"),_tr=o("imagegpt"),utr=o(" \u2014 "),yQ=a("a"),btr=o("ImageGPTForImageClassification"),vtr=o(" (ImageGPT model)"),Ftr=l(),Qs=a("li"),K7e=a("strong"),Ttr=o("levit"),Mtr=o(" \u2014 "),xQ=a("a"),Etr=o("LevitForImageClassification"),Ctr=o(" or "),$Q=a("a"),wtr=o("LevitForImageClassificationWithTeacher"),Atr=o(" (LeViT model)"),Ltr=l(),ut=a("li"),Z7e=a("strong"),ytr=o("perceiver"),xtr=o(" \u2014 "),kQ=a("a"),$tr=o("PerceiverForImageClassificationLearned"),ktr=o(" or "),SQ=a("a"),Str=o("PerceiverForImageClassificationFourier"),Rtr=o(" or "),RQ=a("a"),Ptr=o("PerceiverForImageClassificationConvProcessing"),Btr=o(" (Perceiver model)"),Itr=l(),rT=a("li"),e1e=a("strong"),Ntr=o("poolformer"),qtr=o(" \u2014 "),PQ=a("a"),jtr=o("PoolFormerForImageClassification"),Dtr=o(" (PoolFormer model)"),Gtr=l(),tT=a("li"),o1e=a("strong"),Otr=o("regnet"),Vtr=o(" \u2014 "),BQ=a("a"),Xtr=o("RegNetForImageClassification"),ztr=o(" (RegNet model)"),Qtr=l(),aT=a("li"),r1e=a("strong"),Wtr=o("resnet"),Htr=o(" \u2014 "),IQ=a("a"),Utr=o("ResNetForImageClassification"),Jtr=o(" (ResNet model)"),Ytr=l(),nT=a("li"),t1e=a("strong"),Ktr=o("segformer"),Ztr=o(" \u2014 "),NQ=a("a"),ear=o("SegformerForImageClassification"),oar=o(" (SegFormer model)"),rar=l(),sT=a("li"),a1e=a("strong"),tar=o("swin"),aar=o(" \u2014 "),qQ=a("a"),nar=o("SwinForImageClassification"),sar=o(" (Swin Transformer model)"),lar=l(),lT=a("li"),n1e=a("strong"),iar=o("van"),dar=o(" \u2014 "),jQ=a("a"),car=o("VanForImageClassification"),far=o(" (VAN model)"),mar=l(),iT=a("li"),s1e=a("strong"),gar=o("vit"),har=o(" \u2014 "),DQ=a("a"),par=o("ViTForImageClassification"),_ar=o(" (ViT model)"),uar=l(),dT=a("p"),bar=o("The model is set in evaluation mode by default using "),l1e=a("code"),Far=o("model.eval()"),Tar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=a("code"),Mar=o("model.train()"),Ear=l(),F(cT.$$.fragment),VOe=l(),bd=a("h2"),fT=a("a"),d1e=a("span"),F(my.$$.fragment),Car=l(),c1e=a("span"),war=o("AutoModelForVision2Seq"),XOe=l(),Oo=a("div"),F(gy.$$.fragment),Aar=l(),vd=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GQ=a("a"),yar=o("from_pretrained()"),xar=o(" class method or the "),OQ=a("a"),$ar=o("from_config()"),kar=o(` class
method.`),Sar=l(),hy=a("p"),Rar=o("This class cannot be instantiated directly using "),f1e=a("code"),Par=o("__init__()"),Bar=o(" (throws an error)."),Iar=l(),bt=a("div"),F(py.$$.fragment),Nar=l(),m1e=a("p"),qar=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jar=l(),Fd=a("p"),Dar=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),Gar=o("not"),Oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),Var=o("from_pretrained()"),Xar=o(" to load the model weights."),zar=l(),F(mT.$$.fragment),Qar=l(),io=a("div"),F(_y.$$.fragment),War=l(),h1e=a("p"),Har=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uar=l(),za=a("p"),Jar=o("The model class to instantiate is selected based on the "),p1e=a("code"),Yar=o("model_type"),Kar=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Zar=o("pretrained_model_name_or_path"),enr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),onr=o("pretrained_model_name_or_path"),rnr=o(":"),tnr=l(),b1e=a("ul"),gT=a("li"),v1e=a("strong"),anr=o("vision-encoder-decoder"),nnr=o(" \u2014 "),XQ=a("a"),snr=o("VisionEncoderDecoderModel"),lnr=o(" (Vision Encoder decoder model)"),inr=l(),hT=a("p"),dnr=o("The model is set in evaluation mode by default using "),F1e=a("code"),cnr=o("model.eval()"),fnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),mnr=o("model.train()"),gnr=l(),F(pT.$$.fragment),zOe=l(),Td=a("h2"),_T=a("a"),M1e=a("span"),F(uy.$$.fragment),hnr=l(),E1e=a("span"),pnr=o("AutoModelForVisualQuestionAnswering"),QOe=l(),Vo=a("div"),F(by.$$.fragment),_nr=l(),Md=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zQ=a("a"),bnr=o("from_pretrained()"),vnr=o(" class method or the "),QQ=a("a"),Fnr=o("from_config()"),Tnr=o(` class
method.`),Mnr=l(),vy=a("p"),Enr=o("This class cannot be instantiated directly using "),C1e=a("code"),Cnr=o("__init__()"),wnr=o(" (throws an error)."),Anr=l(),vt=a("div"),F(Fy.$$.fragment),Lnr=l(),w1e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),xnr=l(),Ed=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" to load the model weights."),Bnr=l(),F(uT.$$.fragment),Inr=l(),co=a("div"),F(Ty.$$.fragment),Nnr=l(),L1e=a("p"),qnr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),jnr=l(),Qa=a("p"),Dnr=o("The model class to instantiate is selected based on the "),y1e=a("code"),Gnr=o("model_type"),Onr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),znr=o("pretrained_model_name_or_path"),Qnr=o(":"),Wnr=l(),k1e=a("ul"),bT=a("li"),S1e=a("strong"),Hnr=o("vilt"),Unr=o(" \u2014 "),HQ=a("a"),Jnr=o("ViltForQuestionAnswering"),Ynr=o(" (ViLT model)"),Knr=l(),vT=a("p"),Znr=o("The model is set in evaluation mode by default using "),R1e=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),rsr=o("model.train()"),tsr=l(),F(FT.$$.fragment),WOe=l(),Cd=a("h2"),TT=a("a"),B1e=a("span"),F(My.$$.fragment),asr=l(),I1e=a("span"),nsr=o("AutoModelForAudioClassification"),HOe=l(),Xo=a("div"),F(Ey.$$.fragment),ssr=l(),wd=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UQ=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),JQ=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),Cy=a("p"),gsr=o("This class cannot be instantiated directly using "),N1e=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),Ft=a("div"),F(wy.$$.fragment),usr=l(),q1e=a("p"),bsr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vsr=l(),Ad=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(MT.$$.fragment),Asr=l(),fo=a("div"),F(Ay.$$.fragment),Lsr=l(),D1e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xsr=l(),Wa=a("p"),$sr=o("The model class to instantiate is selected based on the "),G1e=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(":"),Nsr=l(),Pe=a("ul"),ET=a("li"),X1e=a("strong"),qsr=o("data2vec-audio"),jsr=o(" \u2014 "),KQ=a("a"),Dsr=o("Data2VecAudioForSequenceClassification"),Gsr=o(" (Data2VecAudio model)"),Osr=l(),CT=a("li"),z1e=a("strong"),Vsr=o("hubert"),Xsr=o(" \u2014 "),ZQ=a("a"),zsr=o("HubertForSequenceClassification"),Qsr=o(" (Hubert model)"),Wsr=l(),wT=a("li"),Q1e=a("strong"),Hsr=o("sew"),Usr=o(" \u2014 "),eW=a("a"),Jsr=o("SEWForSequenceClassification"),Ysr=o(" (SEW model)"),Ksr=l(),AT=a("li"),W1e=a("strong"),Zsr=o("sew-d"),elr=o(" \u2014 "),oW=a("a"),olr=o("SEWDForSequenceClassification"),rlr=o(" (SEW-D model)"),tlr=l(),LT=a("li"),H1e=a("strong"),alr=o("unispeech"),nlr=o(" \u2014 "),rW=a("a"),slr=o("UniSpeechForSequenceClassification"),llr=o(" (UniSpeech model)"),ilr=l(),yT=a("li"),U1e=a("strong"),dlr=o("unispeech-sat"),clr=o(" \u2014 "),tW=a("a"),flr=o("UniSpeechSatForSequenceClassification"),mlr=o(" (UniSpeechSat model)"),glr=l(),xT=a("li"),J1e=a("strong"),hlr=o("wav2vec2"),plr=o(" \u2014 "),aW=a("a"),_lr=o("Wav2Vec2ForSequenceClassification"),ulr=o(" (Wav2Vec2 model)"),blr=l(),$T=a("li"),Y1e=a("strong"),vlr=o("wav2vec2-conformer"),Flr=o(" \u2014 "),nW=a("a"),Tlr=o("Wav2Vec2ConformerForSequenceClassification"),Mlr=o(" (Wav2Vec2-Conformer model)"),Elr=l(),kT=a("li"),K1e=a("strong"),Clr=o("wavlm"),wlr=o(" \u2014 "),sW=a("a"),Alr=o("WavLMForSequenceClassification"),Llr=o(" (WavLM model)"),ylr=l(),ST=a("p"),xlr=o("The model is set in evaluation mode by default using "),Z1e=a("code"),$lr=o("model.eval()"),klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Slr=o("model.train()"),Rlr=l(),F(RT.$$.fragment),UOe=l(),Ld=a("h2"),PT=a("a"),o2e=a("span"),F(Ly.$$.fragment),Plr=l(),r2e=a("span"),Blr=o("AutoModelForAudioFrameClassification"),JOe=l(),zo=a("div"),F(yy.$$.fragment),Ilr=l(),yd=a("p"),Nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lW=a("a"),qlr=o("from_pretrained()"),jlr=o(" class method or the "),iW=a("a"),Dlr=o("from_config()"),Glr=o(` class
method.`),Olr=l(),xy=a("p"),Vlr=o("This class cannot be instantiated directly using "),t2e=a("code"),Xlr=o("__init__()"),zlr=o(" (throws an error)."),Qlr=l(),Tt=a("div"),F($y.$$.fragment),Wlr=l(),a2e=a("p"),Hlr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ulr=l(),xd=a("p"),Jlr=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),Ylr=o("not"),Klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Zlr=o("from_pretrained()"),eir=o(" to load the model weights."),oir=l(),F(BT.$$.fragment),rir=l(),mo=a("div"),F(ky.$$.fragment),tir=l(),s2e=a("p"),air=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nir=l(),Ha=a("p"),sir=o("The model class to instantiate is selected based on the "),l2e=a("code"),lir=o("model_type"),iir=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),dir=o("pretrained_model_name_or_path"),cir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),fir=o("pretrained_model_name_or_path"),mir=o(":"),gir=l(),et=a("ul"),IT=a("li"),c2e=a("strong"),hir=o("data2vec-audio"),pir=o(" \u2014 "),cW=a("a"),_ir=o("Data2VecAudioForAudioFrameClassification"),uir=o(" (Data2VecAudio model)"),bir=l(),NT=a("li"),f2e=a("strong"),vir=o("unispeech-sat"),Fir=o(" \u2014 "),fW=a("a"),Tir=o("UniSpeechSatForAudioFrameClassification"),Mir=o(" (UniSpeechSat model)"),Eir=l(),qT=a("li"),m2e=a("strong"),Cir=o("wav2vec2"),wir=o(" \u2014 "),mW=a("a"),Air=o("Wav2Vec2ForAudioFrameClassification"),Lir=o(" (Wav2Vec2 model)"),yir=l(),jT=a("li"),g2e=a("strong"),xir=o("wav2vec2-conformer"),$ir=o(" \u2014 "),gW=a("a"),kir=o("Wav2Vec2ConformerForAudioFrameClassification"),Sir=o(" (Wav2Vec2-Conformer model)"),Rir=l(),DT=a("li"),h2e=a("strong"),Pir=o("wavlm"),Bir=o(" \u2014 "),hW=a("a"),Iir=o("WavLMForAudioFrameClassification"),Nir=o(" (WavLM model)"),qir=l(),GT=a("p"),jir=o("The model is set in evaluation mode by default using "),p2e=a("code"),Dir=o("model.eval()"),Gir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),Oir=o("model.train()"),Vir=l(),F(OT.$$.fragment),YOe=l(),$d=a("h2"),VT=a("a"),u2e=a("span"),F(Sy.$$.fragment),Xir=l(),b2e=a("span"),zir=o("AutoModelForCTC"),KOe=l(),Qo=a("div"),F(Ry.$$.fragment),Qir=l(),kd=a("p"),Wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pW=a("a"),Hir=o("from_pretrained()"),Uir=o(" class method or the "),_W=a("a"),Jir=o("from_config()"),Yir=o(` class
method.`),Kir=l(),Py=a("p"),Zir=o("This class cannot be instantiated directly using "),v2e=a("code"),edr=o("__init__()"),odr=o(" (throws an error)."),rdr=l(),Mt=a("div"),F(By.$$.fragment),tdr=l(),F2e=a("p"),adr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ndr=l(),Sd=a("p"),sdr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),ldr=o("not"),idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),ddr=o("from_pretrained()"),cdr=o(" to load the model weights."),fdr=l(),F(XT.$$.fragment),mdr=l(),go=a("div"),F(Iy.$$.fragment),gdr=l(),M2e=a("p"),hdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pdr=l(),Ua=a("p"),_dr=o("The model class to instantiate is selected based on the "),E2e=a("code"),udr=o("model_type"),bdr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),vdr=o("pretrained_model_name_or_path"),Fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),Tdr=o("pretrained_model_name_or_path"),Mdr=o(":"),Edr=l(),Le=a("ul"),zT=a("li"),A2e=a("strong"),Cdr=o("data2vec-audio"),wdr=o(" \u2014 "),bW=a("a"),Adr=o("Data2VecAudioForCTC"),Ldr=o(" (Data2VecAudio model)"),ydr=l(),QT=a("li"),L2e=a("strong"),xdr=o("hubert"),$dr=o(" \u2014 "),vW=a("a"),kdr=o("HubertForCTC"),Sdr=o(" (Hubert model)"),Rdr=l(),WT=a("li"),y2e=a("strong"),Pdr=o("mctct"),Bdr=o(" \u2014 "),FW=a("a"),Idr=o("MCTCTForCTC"),Ndr=o(" (M-CTC-T model)"),qdr=l(),HT=a("li"),x2e=a("strong"),jdr=o("sew"),Ddr=o(" \u2014 "),TW=a("a"),Gdr=o("SEWForCTC"),Odr=o(" (SEW model)"),Vdr=l(),UT=a("li"),$2e=a("strong"),Xdr=o("sew-d"),zdr=o(" \u2014 "),MW=a("a"),Qdr=o("SEWDForCTC"),Wdr=o(" (SEW-D model)"),Hdr=l(),JT=a("li"),k2e=a("strong"),Udr=o("unispeech"),Jdr=o(" \u2014 "),EW=a("a"),Ydr=o("UniSpeechForCTC"),Kdr=o(" (UniSpeech model)"),Zdr=l(),YT=a("li"),S2e=a("strong"),ecr=o("unispeech-sat"),ocr=o(" \u2014 "),CW=a("a"),rcr=o("UniSpeechSatForCTC"),tcr=o(" (UniSpeechSat model)"),acr=l(),KT=a("li"),R2e=a("strong"),ncr=o("wav2vec2"),scr=o(" \u2014 "),wW=a("a"),lcr=o("Wav2Vec2ForCTC"),icr=o(" (Wav2Vec2 model)"),dcr=l(),ZT=a("li"),P2e=a("strong"),ccr=o("wav2vec2-conformer"),fcr=o(" \u2014 "),AW=a("a"),mcr=o("Wav2Vec2ConformerForCTC"),gcr=o(" (Wav2Vec2-Conformer model)"),hcr=l(),e9=a("li"),B2e=a("strong"),pcr=o("wavlm"),_cr=o(" \u2014 "),LW=a("a"),ucr=o("WavLMForCTC"),bcr=o(" (WavLM model)"),vcr=l(),o9=a("p"),Fcr=o("The model is set in evaluation mode by default using "),I2e=a("code"),Tcr=o("model.eval()"),Mcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=a("code"),Ecr=o("model.train()"),Ccr=l(),F(r9.$$.fragment),ZOe=l(),Rd=a("h2"),t9=a("a"),q2e=a("span"),F(Ny.$$.fragment),wcr=l(),j2e=a("span"),Acr=o("AutoModelForSpeechSeq2Seq"),eVe=l(),Wo=a("div"),F(qy.$$.fragment),Lcr=l(),Pd=a("p"),ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yW=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),xW=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),jy=a("p"),Pcr=o("This class cannot be instantiated directly using "),D2e=a("code"),Bcr=o("__init__()"),Icr=o(" (throws an error)."),Ncr=l(),Et=a("div"),F(Dy.$$.fragment),qcr=l(),G2e=a("p"),jcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dcr=l(),Bd=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Qcr=l(),F(a9.$$.fragment),Wcr=l(),ho=a("div"),F(Gy.$$.fragment),Hcr=l(),V2e=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jcr=l(),Ja=a("p"),Ycr=o("The model class to instantiate is selected based on the "),X2e=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(":"),afr=l(),Oy=a("ul"),n9=a("li"),W2e=a("strong"),nfr=o("speech-encoder-decoder"),sfr=o(" \u2014 "),kW=a("a"),lfr=o("SpeechEncoderDecoderModel"),ifr=o(" (Speech Encoder decoder model)"),dfr=l(),s9=a("li"),H2e=a("strong"),cfr=o("speech_to_text"),ffr=o(" \u2014 "),SW=a("a"),mfr=o("Speech2TextForConditionalGeneration"),gfr=o(" (Speech2Text model)"),hfr=l(),l9=a("p"),pfr=o("The model is set in evaluation mode by default using "),U2e=a("code"),_fr=o("model.eval()"),ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=a("code"),bfr=o("model.train()"),vfr=l(),F(i9.$$.fragment),oVe=l(),Id=a("h2"),d9=a("a"),Y2e=a("span"),F(Vy.$$.fragment),Ffr=l(),K2e=a("span"),Tfr=o("AutoModelForAudioXVector"),rVe=l(),Ho=a("div"),F(Xy.$$.fragment),Mfr=l(),Nd=a("p"),Efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RW=a("a"),Cfr=o("from_pretrained()"),wfr=o(" class method or the "),PW=a("a"),Afr=o("from_config()"),Lfr=o(` class
method.`),yfr=l(),zy=a("p"),xfr=o("This class cannot be instantiated directly using "),Z2e=a("code"),$fr=o("__init__()"),kfr=o(" (throws an error)."),Sfr=l(),Ct=a("div"),F(Qy.$$.fragment),Rfr=l(),ebe=a("p"),Pfr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bfr=l(),qd=a("p"),Ifr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Nfr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),jfr=o("from_pretrained()"),Dfr=o(" to load the model weights."),Gfr=l(),F(c9.$$.fragment),Ofr=l(),po=a("div"),F(Wy.$$.fragment),Vfr=l(),rbe=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),zfr=l(),Ya=a("p"),Qfr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Wfr=o("model_type"),Hfr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),ot=a("ul"),f9=a("li"),sbe=a("strong"),emr=o("data2vec-audio"),omr=o(" \u2014 "),IW=a("a"),rmr=o("Data2VecAudioForXVector"),tmr=o(" (Data2VecAudio model)"),amr=l(),m9=a("li"),lbe=a("strong"),nmr=o("unispeech-sat"),smr=o(" \u2014 "),NW=a("a"),lmr=o("UniSpeechSatForXVector"),imr=o(" (UniSpeechSat model)"),dmr=l(),g9=a("li"),ibe=a("strong"),cmr=o("wav2vec2"),fmr=o(" \u2014 "),qW=a("a"),mmr=o("Wav2Vec2ForXVector"),gmr=o(" (Wav2Vec2 model)"),hmr=l(),h9=a("li"),dbe=a("strong"),pmr=o("wav2vec2-conformer"),_mr=o(" \u2014 "),jW=a("a"),umr=o("Wav2Vec2ConformerForXVector"),bmr=o(" (Wav2Vec2-Conformer model)"),vmr=l(),p9=a("li"),cbe=a("strong"),Fmr=o("wavlm"),Tmr=o(" \u2014 "),DW=a("a"),Mmr=o("WavLMForXVector"),Emr=o(" (WavLM model)"),Cmr=l(),_9=a("p"),wmr=o("The model is set in evaluation mode by default using "),fbe=a("code"),Amr=o("model.eval()"),Lmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),ymr=o("model.train()"),xmr=l(),F(u9.$$.fragment),tVe=l(),jd=a("h2"),b9=a("a"),gbe=a("span"),F(Hy.$$.fragment),$mr=l(),hbe=a("span"),kmr=o("AutoModelForMaskedImageModeling"),aVe=l(),Uo=a("div"),F(Uy.$$.fragment),Smr=l(),Dd=a("p"),Rmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GW=a("a"),Pmr=o("from_pretrained()"),Bmr=o(" class method or the "),OW=a("a"),Imr=o("from_config()"),Nmr=o(` class
method.`),qmr=l(),Jy=a("p"),jmr=o("This class cannot be instantiated directly using "),pbe=a("code"),Dmr=o("__init__()"),Gmr=o(" (throws an error)."),Omr=l(),wt=a("div"),F(Yy.$$.fragment),Vmr=l(),_be=a("p"),Xmr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),zmr=l(),Gd=a("p"),Qmr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),Wmr=o("not"),Hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Umr=o("from_pretrained()"),Jmr=o(" to load the model weights."),Ymr=l(),F(v9.$$.fragment),Kmr=l(),_o=a("div"),F(Ky.$$.fragment),Zmr=l(),bbe=a("p"),egr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ogr=l(),Ka=a("p"),rgr=o("The model class to instantiate is selected based on the "),vbe=a("code"),tgr=o("model_type"),agr=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),ngr=o("pretrained_model_name_or_path"),sgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),lgr=o("pretrained_model_name_or_path"),igr=o(":"),dgr=l(),Od=a("ul"),F9=a("li"),Mbe=a("strong"),cgr=o("deit"),fgr=o(" \u2014 "),XW=a("a"),mgr=o("DeiTForMaskedImageModeling"),ggr=o(" (DeiT model)"),hgr=l(),T9=a("li"),Ebe=a("strong"),pgr=o("swin"),_gr=o(" \u2014 "),zW=a("a"),ugr=o("SwinForMaskedImageModeling"),bgr=o(" (Swin Transformer model)"),vgr=l(),M9=a("li"),Cbe=a("strong"),Fgr=o("vit"),Tgr=o(" \u2014 "),QW=a("a"),Mgr=o("ViTForMaskedImageModeling"),Egr=o(" (ViT model)"),Cgr=l(),E9=a("p"),wgr=o("The model is set in evaluation mode by default using "),wbe=a("code"),Agr=o("model.eval()"),Lgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),ygr=o("model.train()"),xgr=l(),F(C9.$$.fragment),nVe=l(),Vd=a("h2"),w9=a("a"),Lbe=a("span"),F(Zy.$$.fragment),$gr=l(),ybe=a("span"),kgr=o("AutoModelForObjectDetection"),sVe=l(),Jo=a("div"),F(e8.$$.fragment),Sgr=l(),Xd=a("p"),Rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),WW=a("a"),Pgr=o("from_pretrained()"),Bgr=o(" class method or the "),HW=a("a"),Igr=o("from_config()"),Ngr=o(` class
method.`),qgr=l(),o8=a("p"),jgr=o("This class cannot be instantiated directly using "),xbe=a("code"),Dgr=o("__init__()"),Ggr=o(" (throws an error)."),Ogr=l(),At=a("div"),F(r8.$$.fragment),Vgr=l(),$be=a("p"),Xgr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zgr=l(),zd=a("p"),Qgr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),Wgr=o("not"),Hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" to load the model weights."),Ygr=l(),F(A9.$$.fragment),Kgr=l(),uo=a("div"),F(t8.$$.fragment),Zgr=l(),Sbe=a("p"),ehr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ohr=l(),Za=a("p"),rhr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),thr=o("model_type"),ahr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(":"),dhr=l(),a8=a("ul"),L9=a("li"),Ibe=a("strong"),chr=o("detr"),fhr=o(" \u2014 "),JW=a("a"),mhr=o("DetrForObjectDetection"),ghr=o(" (DETR model)"),hhr=l(),y9=a("li"),Nbe=a("strong"),phr=o("yolos"),_hr=o(" \u2014 "),YW=a("a"),uhr=o("YolosForObjectDetection"),bhr=o(" (YOLOS model)"),vhr=l(),x9=a("p"),Fhr=o("The model is set in evaluation mode by default using "),qbe=a("code"),Thr=o("model.eval()"),Mhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),Ehr=o("model.train()"),Chr=l(),F($9.$$.fragment),lVe=l(),Qd=a("h2"),k9=a("a"),Dbe=a("span"),F(n8.$$.fragment),whr=l(),Gbe=a("span"),Ahr=o("AutoModelForImageSegmentation"),iVe=l(),Yo=a("div"),F(s8.$$.fragment),Lhr=l(),Wd=a("p"),yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KW=a("a"),xhr=o("from_pretrained()"),$hr=o(" class method or the "),ZW=a("a"),khr=o("from_config()"),Shr=o(` class
method.`),Rhr=l(),l8=a("p"),Phr=o("This class cannot be instantiated directly using "),Obe=a("code"),Bhr=o("__init__()"),Ihr=o(" (throws an error)."),Nhr=l(),Lt=a("div"),F(i8.$$.fragment),qhr=l(),Vbe=a("p"),jhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Dhr=l(),Hd=a("p"),Ghr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),Ohr=o("not"),Vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),Xhr=o("from_pretrained()"),zhr=o(" to load the model weights."),Qhr=l(),F(S9.$$.fragment),Whr=l(),bo=a("div"),F(d8.$$.fragment),Hhr=l(),zbe=a("p"),Uhr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jhr=l(),en=a("p"),Yhr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),Khr=o("model_type"),Zhr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(":"),apr=l(),Ube=a("ul"),R9=a("li"),Jbe=a("strong"),npr=o("detr"),spr=o(" \u2014 "),oH=a("a"),lpr=o("DetrForSegmentation"),ipr=o(" (DETR model)"),dpr=l(),P9=a("p"),cpr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),fpr=o("model.eval()"),mpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),gpr=o("model.train()"),hpr=l(),F(B9.$$.fragment),dVe=l(),Ud=a("h2"),I9=a("a"),Zbe=a("span"),F(c8.$$.fragment),ppr=l(),eve=a("span"),_pr=o("AutoModelForSemanticSegmentation"),cVe=l(),Ko=a("div"),F(f8.$$.fragment),upr=l(),Jd=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rH=a("a"),vpr=o("from_pretrained()"),Fpr=o(" class method or the "),tH=a("a"),Tpr=o("from_config()"),Mpr=o(` class
method.`),Epr=l(),m8=a("p"),Cpr=o("This class cannot be instantiated directly using "),ove=a("code"),wpr=o("__init__()"),Apr=o(" (throws an error)."),Lpr=l(),yt=a("div"),F(g8.$$.fragment),ypr=l(),rve=a("p"),xpr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$pr=l(),Yd=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Spr=o("not"),Rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),Ppr=o("from_pretrained()"),Bpr=o(" to load the model weights."),Ipr=l(),F(N9.$$.fragment),Npr=l(),vo=a("div"),F(h8.$$.fragment),qpr=l(),ave=a("p"),jpr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dpr=l(),on=a("p"),Gpr=o("The model class to instantiate is selected based on the "),nve=a("code"),Opr=o("model_type"),Vpr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),Qpr=o("pretrained_model_name_or_path"),Wpr=o(":"),Hpr=l(),rn=a("ul"),q9=a("li"),ive=a("strong"),Upr=o("beit"),Jpr=o(" \u2014 "),nH=a("a"),Ypr=o("BeitForSemanticSegmentation"),Kpr=o(" (BEiT model)"),Zpr=l(),j9=a("li"),dve=a("strong"),e_r=o("data2vec-vision"),o_r=o(" \u2014 "),sH=a("a"),r_r=o("Data2VecVisionForSemanticSegmentation"),t_r=o(" (Data2VecVision model)"),a_r=l(),D9=a("li"),cve=a("strong"),n_r=o("dpt"),s_r=o(" \u2014 "),lH=a("a"),l_r=o("DPTForSemanticSegmentation"),i_r=o(" (DPT model)"),d_r=l(),G9=a("li"),fve=a("strong"),c_r=o("segformer"),f_r=o(" \u2014 "),iH=a("a"),m_r=o("SegformerForSemanticSegmentation"),g_r=o(" (SegFormer model)"),h_r=l(),O9=a("p"),p_r=o("The model is set in evaluation mode by default using "),mve=a("code"),__r=o("model.eval()"),u_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=a("code"),b_r=o("model.train()"),v_r=l(),F(V9.$$.fragment),fVe=l(),Kd=a("h2"),X9=a("a"),hve=a("span"),F(p8.$$.fragment),F_r=l(),pve=a("span"),T_r=o("AutoModelForInstanceSegmentation"),mVe=l(),Zo=a("div"),F(_8.$$.fragment),M_r=l(),Zd=a("p"),E_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),dH=a("a"),C_r=o("from_pretrained()"),w_r=o(" class method or the "),cH=a("a"),A_r=o("from_config()"),L_r=o(` class
method.`),y_r=l(),u8=a("p"),x_r=o("This class cannot be instantiated directly using "),_ve=a("code"),$_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),xt=a("div"),F(b8.$$.fragment),R_r=l(),uve=a("p"),P_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),B_r=l(),ec=a("p"),I_r=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),N_r=o("not"),q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),j_r=o("from_pretrained()"),D_r=o(" to load the model weights."),G_r=l(),F(z9.$$.fragment),O_r=l(),Fo=a("div"),F(v8.$$.fragment),V_r=l(),vve=a("p"),X_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z_r=l(),tn=a("p"),Q_r=o("The model class to instantiate is selected based on the "),Fve=a("code"),W_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(":"),Z_r=l(),Eve=a("ul"),Q9=a("li"),Cve=a("strong"),eur=o("maskformer"),our=o(" \u2014 "),mH=a("a"),rur=o("MaskFormerForInstanceSegmentation"),tur=o(" (MaskFormer model)"),aur=l(),W9=a("p"),nur=o("The model is set in evaluation mode by default using "),wve=a("code"),sur=o("model.eval()"),lur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),iur=o("model.train()"),dur=l(),F(H9.$$.fragment),gVe=l(),oc=a("h2"),U9=a("a"),Lve=a("span"),F(F8.$$.fragment),cur=l(),yve=a("span"),fur=o("TFAutoModel"),hVe=l(),er=a("div"),F(T8.$$.fragment),mur=l(),rc=a("p"),gur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gH=a("a"),hur=o("from_pretrained()"),pur=o(" class method or the "),hH=a("a"),_ur=o("from_config()"),uur=o(` class
method.`),bur=l(),M8=a("p"),vur=o("This class cannot be instantiated directly using "),xve=a("code"),Fur=o("__init__()"),Tur=o(" (throws an error)."),Mur=l(),$t=a("div"),F(E8.$$.fragment),Eur=l(),$ve=a("p"),Cur=o("Instantiates one of the base model classes of the library from a configuration."),wur=l(),tc=a("p"),Aur=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Lur=o("not"),yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),xur=o("from_pretrained()"),$ur=o(" to load the model weights."),kur=l(),F(J9.$$.fragment),Sur=l(),yr=a("div"),F(C8.$$.fragment),Rur=l(),Sve=a("p"),Pur=o("Instantiate one of the base model classes of the library from a pretrained model."),Bur=l(),an=a("p"),Iur=o("The model class to instantiate is selected based on the "),Rve=a("code"),Nur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Gur=o("pretrained_model_name_or_path"),Our=o(":"),Vur=l(),j=a("ul"),Y9=a("li"),Ive=a("strong"),Xur=o("albert"),zur=o(" \u2014 "),_H=a("a"),Qur=o("TFAlbertModel"),Wur=o(" (ALBERT model)"),Hur=l(),K9=a("li"),Nve=a("strong"),Uur=o("bart"),Jur=o(" \u2014 "),uH=a("a"),Yur=o("TFBartModel"),Kur=o(" (BART model)"),Zur=l(),Z9=a("li"),qve=a("strong"),e7r=o("bert"),o7r=o(" \u2014 "),bH=a("a"),r7r=o("TFBertModel"),t7r=o(" (BERT model)"),a7r=l(),eM=a("li"),jve=a("strong"),n7r=o("blenderbot"),s7r=o(" \u2014 "),vH=a("a"),l7r=o("TFBlenderbotModel"),i7r=o(" (Blenderbot model)"),d7r=l(),oM=a("li"),Dve=a("strong"),c7r=o("blenderbot-small"),f7r=o(" \u2014 "),FH=a("a"),m7r=o("TFBlenderbotSmallModel"),g7r=o(" (BlenderbotSmall model)"),h7r=l(),rM=a("li"),Gve=a("strong"),p7r=o("camembert"),_7r=o(" \u2014 "),TH=a("a"),u7r=o("TFCamembertModel"),b7r=o(" (CamemBERT model)"),v7r=l(),tM=a("li"),Ove=a("strong"),F7r=o("clip"),T7r=o(" \u2014 "),MH=a("a"),M7r=o("TFCLIPModel"),E7r=o(" (CLIP model)"),C7r=l(),aM=a("li"),Vve=a("strong"),w7r=o("convbert"),A7r=o(" \u2014 "),EH=a("a"),L7r=o("TFConvBertModel"),y7r=o(" (ConvBERT model)"),x7r=l(),nM=a("li"),Xve=a("strong"),$7r=o("convnext"),k7r=o(" \u2014 "),CH=a("a"),S7r=o("TFConvNextModel"),R7r=o(" (ConvNeXT model)"),P7r=l(),sM=a("li"),zve=a("strong"),B7r=o("ctrl"),I7r=o(" \u2014 "),wH=a("a"),N7r=o("TFCTRLModel"),q7r=o(" (CTRL model)"),j7r=l(),lM=a("li"),Qve=a("strong"),D7r=o("data2vec-vision"),G7r=o(" \u2014 "),AH=a("a"),O7r=o("TFData2VecVisionModel"),V7r=o(" (Data2VecVision model)"),X7r=l(),iM=a("li"),Wve=a("strong"),z7r=o("deberta"),Q7r=o(" \u2014 "),LH=a("a"),W7r=o("TFDebertaModel"),H7r=o(" (DeBERTa model)"),U7r=l(),dM=a("li"),Hve=a("strong"),J7r=o("deberta-v2"),Y7r=o(" \u2014 "),yH=a("a"),K7r=o("TFDebertaV2Model"),Z7r=o(" (DeBERTa-v2 model)"),e1r=l(),cM=a("li"),Uve=a("strong"),o1r=o("distilbert"),r1r=o(" \u2014 "),xH=a("a"),t1r=o("TFDistilBertModel"),a1r=o(" (DistilBERT model)"),n1r=l(),fM=a("li"),Jve=a("strong"),s1r=o("dpr"),l1r=o(" \u2014 "),$H=a("a"),i1r=o("TFDPRQuestionEncoder"),d1r=o(" (DPR model)"),c1r=l(),mM=a("li"),Yve=a("strong"),f1r=o("electra"),m1r=o(" \u2014 "),kH=a("a"),g1r=o("TFElectraModel"),h1r=o(" (ELECTRA model)"),p1r=l(),gM=a("li"),Kve=a("strong"),_1r=o("flaubert"),u1r=o(" \u2014 "),SH=a("a"),b1r=o("TFFlaubertModel"),v1r=o(" (FlauBERT model)"),F1r=l(),Ws=a("li"),Zve=a("strong"),T1r=o("funnel"),M1r=o(" \u2014 "),RH=a("a"),E1r=o("TFFunnelModel"),C1r=o(" or "),PH=a("a"),w1r=o("TFFunnelBaseModel"),A1r=o(" (Funnel Transformer model)"),L1r=l(),hM=a("li"),eFe=a("strong"),y1r=o("gpt2"),x1r=o(" \u2014 "),BH=a("a"),$1r=o("TFGPT2Model"),k1r=o(" (OpenAI GPT-2 model)"),S1r=l(),pM=a("li"),oFe=a("strong"),R1r=o("gptj"),P1r=o(" \u2014 "),IH=a("a"),B1r=o("TFGPTJModel"),I1r=o(" (GPT-J model)"),N1r=l(),_M=a("li"),rFe=a("strong"),q1r=o("hubert"),j1r=o(" \u2014 "),NH=a("a"),D1r=o("TFHubertModel"),G1r=o(" (Hubert model)"),O1r=l(),uM=a("li"),tFe=a("strong"),V1r=o("layoutlm"),X1r=o(" \u2014 "),qH=a("a"),z1r=o("TFLayoutLMModel"),Q1r=o(" (LayoutLM model)"),W1r=l(),bM=a("li"),aFe=a("strong"),H1r=o("led"),U1r=o(" \u2014 "),jH=a("a"),J1r=o("TFLEDModel"),Y1r=o(" (LED model)"),K1r=l(),vM=a("li"),nFe=a("strong"),Z1r=o("longformer"),e2r=o(" \u2014 "),DH=a("a"),o2r=o("TFLongformerModel"),r2r=o(" (Longformer model)"),t2r=l(),FM=a("li"),sFe=a("strong"),a2r=o("lxmert"),n2r=o(" \u2014 "),GH=a("a"),s2r=o("TFLxmertModel"),l2r=o(" (LXMERT model)"),i2r=l(),TM=a("li"),lFe=a("strong"),d2r=o("marian"),c2r=o(" \u2014 "),OH=a("a"),f2r=o("TFMarianModel"),m2r=o(" (Marian model)"),g2r=l(),MM=a("li"),iFe=a("strong"),h2r=o("mbart"),p2r=o(" \u2014 "),VH=a("a"),_2r=o("TFMBartModel"),u2r=o(" (mBART model)"),b2r=l(),EM=a("li"),dFe=a("strong"),v2r=o("mobilebert"),F2r=o(" \u2014 "),XH=a("a"),T2r=o("TFMobileBertModel"),M2r=o(" (MobileBERT model)"),E2r=l(),CM=a("li"),cFe=a("strong"),C2r=o("mpnet"),w2r=o(" \u2014 "),zH=a("a"),A2r=o("TFMPNetModel"),L2r=o(" (MPNet model)"),y2r=l(),wM=a("li"),fFe=a("strong"),x2r=o("mt5"),$2r=o(" \u2014 "),QH=a("a"),k2r=o("TFMT5Model"),S2r=o(" (MT5 model)"),R2r=l(),AM=a("li"),mFe=a("strong"),P2r=o("openai-gpt"),B2r=o(" \u2014 "),WH=a("a"),I2r=o("TFOpenAIGPTModel"),N2r=o(" (OpenAI GPT model)"),q2r=l(),LM=a("li"),gFe=a("strong"),j2r=o("opt"),D2r=o(" \u2014 "),HH=a("a"),G2r=o("TFOPTModel"),O2r=o(" (OPT model)"),V2r=l(),yM=a("li"),hFe=a("strong"),X2r=o("pegasus"),z2r=o(" \u2014 "),UH=a("a"),Q2r=o("TFPegasusModel"),W2r=o(" (Pegasus model)"),H2r=l(),xM=a("li"),pFe=a("strong"),U2r=o("rembert"),J2r=o(" \u2014 "),JH=a("a"),Y2r=o("TFRemBertModel"),K2r=o(" (RemBERT model)"),Z2r=l(),$M=a("li"),_Fe=a("strong"),ebr=o("roberta"),obr=o(" \u2014 "),YH=a("a"),rbr=o("TFRobertaModel"),tbr=o(" (RoBERTa model)"),abr=l(),kM=a("li"),uFe=a("strong"),nbr=o("roformer"),sbr=o(" \u2014 "),KH=a("a"),lbr=o("TFRoFormerModel"),ibr=o(" (RoFormer model)"),dbr=l(),SM=a("li"),bFe=a("strong"),cbr=o("speech_to_text"),fbr=o(" \u2014 "),ZH=a("a"),mbr=o("TFSpeech2TextModel"),gbr=o(" (Speech2Text model)"),hbr=l(),RM=a("li"),vFe=a("strong"),pbr=o("swin"),_br=o(" \u2014 "),eU=a("a"),ubr=o("TFSwinModel"),bbr=o(" (Swin Transformer model)"),vbr=l(),PM=a("li"),FFe=a("strong"),Fbr=o("t5"),Tbr=o(" \u2014 "),oU=a("a"),Mbr=o("TFT5Model"),Ebr=o(" (T5 model)"),Cbr=l(),BM=a("li"),TFe=a("strong"),wbr=o("tapas"),Abr=o(" \u2014 "),rU=a("a"),Lbr=o("TFTapasModel"),ybr=o(" (TAPAS model)"),xbr=l(),IM=a("li"),MFe=a("strong"),$br=o("transfo-xl"),kbr=o(" \u2014 "),tU=a("a"),Sbr=o("TFTransfoXLModel"),Rbr=o(" (Transformer-XL model)"),Pbr=l(),NM=a("li"),EFe=a("strong"),Bbr=o("vit"),Ibr=o(" \u2014 "),aU=a("a"),Nbr=o("TFViTModel"),qbr=o(" (ViT model)"),jbr=l(),qM=a("li"),CFe=a("strong"),Dbr=o("vit_mae"),Gbr=o(" \u2014 "),nU=a("a"),Obr=o("TFViTMAEModel"),Vbr=o(" (ViTMAE model)"),Xbr=l(),jM=a("li"),wFe=a("strong"),zbr=o("wav2vec2"),Qbr=o(" \u2014 "),sU=a("a"),Wbr=o("TFWav2Vec2Model"),Hbr=o(" (Wav2Vec2 model)"),Ubr=l(),DM=a("li"),AFe=a("strong"),Jbr=o("xlm"),Ybr=o(" \u2014 "),lU=a("a"),Kbr=o("TFXLMModel"),Zbr=o(" (XLM model)"),evr=l(),GM=a("li"),LFe=a("strong"),ovr=o("xlm-roberta"),rvr=o(" \u2014 "),iU=a("a"),tvr=o("TFXLMRobertaModel"),avr=o(" (XLM-RoBERTa model)"),nvr=l(),OM=a("li"),yFe=a("strong"),svr=o("xlnet"),lvr=o(" \u2014 "),dU=a("a"),ivr=o("TFXLNetModel"),dvr=o(" (XLNet model)"),cvr=l(),F(VM.$$.fragment),pVe=l(),ac=a("h2"),XM=a("a"),xFe=a("span"),F(w8.$$.fragment),fvr=l(),$Fe=a("span"),mvr=o("TFAutoModelForPreTraining"),_Ve=l(),or=a("div"),F(A8.$$.fragment),gvr=l(),nc=a("p"),hvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cU=a("a"),pvr=o("from_pretrained()"),_vr=o(" class method or the "),fU=a("a"),uvr=o("from_config()"),bvr=o(` class
method.`),vvr=l(),L8=a("p"),Fvr=o("This class cannot be instantiated directly using "),kFe=a("code"),Tvr=o("__init__()"),Mvr=o(" (throws an error)."),Evr=l(),kt=a("div"),F(y8.$$.fragment),Cvr=l(),SFe=a("p"),wvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Avr=l(),sc=a("p"),Lvr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),yvr=o("not"),xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),$vr=o("from_pretrained()"),kvr=o(" to load the model weights."),Svr=l(),F(zM.$$.fragment),Rvr=l(),xr=a("div"),F(x8.$$.fragment),Pvr=l(),PFe=a("p"),Bvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ivr=l(),nn=a("p"),Nvr=o("The model class to instantiate is selected based on the "),BFe=a("code"),qvr=o("model_type"),jvr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),Dvr=o("pretrained_model_name_or_path"),Gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(":"),Xvr=l(),se=a("ul"),QM=a("li"),qFe=a("strong"),zvr=o("albert"),Qvr=o(" \u2014 "),gU=a("a"),Wvr=o("TFAlbertForPreTraining"),Hvr=o(" (ALBERT model)"),Uvr=l(),WM=a("li"),jFe=a("strong"),Jvr=o("bart"),Yvr=o(" \u2014 "),hU=a("a"),Kvr=o("TFBartForConditionalGeneration"),Zvr=o(" (BART model)"),eFr=l(),HM=a("li"),DFe=a("strong"),oFr=o("bert"),rFr=o(" \u2014 "),pU=a("a"),tFr=o("TFBertForPreTraining"),aFr=o(" (BERT model)"),nFr=l(),UM=a("li"),GFe=a("strong"),sFr=o("camembert"),lFr=o(" \u2014 "),_U=a("a"),iFr=o("TFCamembertForMaskedLM"),dFr=o(" (CamemBERT model)"),cFr=l(),JM=a("li"),OFe=a("strong"),fFr=o("ctrl"),mFr=o(" \u2014 "),uU=a("a"),gFr=o("TFCTRLLMHeadModel"),hFr=o(" (CTRL model)"),pFr=l(),YM=a("li"),VFe=a("strong"),_Fr=o("distilbert"),uFr=o(" \u2014 "),bU=a("a"),bFr=o("TFDistilBertForMaskedLM"),vFr=o(" (DistilBERT model)"),FFr=l(),KM=a("li"),XFe=a("strong"),TFr=o("electra"),MFr=o(" \u2014 "),vU=a("a"),EFr=o("TFElectraForPreTraining"),CFr=o(" (ELECTRA model)"),wFr=l(),ZM=a("li"),zFe=a("strong"),AFr=o("flaubert"),LFr=o(" \u2014 "),FU=a("a"),yFr=o("TFFlaubertWithLMHeadModel"),xFr=o(" (FlauBERT model)"),$Fr=l(),eE=a("li"),QFe=a("strong"),kFr=o("funnel"),SFr=o(" \u2014 "),TU=a("a"),RFr=o("TFFunnelForPreTraining"),PFr=o(" (Funnel Transformer model)"),BFr=l(),oE=a("li"),WFe=a("strong"),IFr=o("gpt2"),NFr=o(" \u2014 "),MU=a("a"),qFr=o("TFGPT2LMHeadModel"),jFr=o(" (OpenAI GPT-2 model)"),DFr=l(),rE=a("li"),HFe=a("strong"),GFr=o("layoutlm"),OFr=o(" \u2014 "),EU=a("a"),VFr=o("TFLayoutLMForMaskedLM"),XFr=o(" (LayoutLM model)"),zFr=l(),tE=a("li"),UFe=a("strong"),QFr=o("lxmert"),WFr=o(" \u2014 "),CU=a("a"),HFr=o("TFLxmertForPreTraining"),UFr=o(" (LXMERT model)"),JFr=l(),aE=a("li"),JFe=a("strong"),YFr=o("mobilebert"),KFr=o(" \u2014 "),wU=a("a"),ZFr=o("TFMobileBertForPreTraining"),eTr=o(" (MobileBERT model)"),oTr=l(),nE=a("li"),YFe=a("strong"),rTr=o("mpnet"),tTr=o(" \u2014 "),AU=a("a"),aTr=o("TFMPNetForMaskedLM"),nTr=o(" (MPNet model)"),sTr=l(),sE=a("li"),KFe=a("strong"),lTr=o("openai-gpt"),iTr=o(" \u2014 "),LU=a("a"),dTr=o("TFOpenAIGPTLMHeadModel"),cTr=o(" (OpenAI GPT model)"),fTr=l(),lE=a("li"),ZFe=a("strong"),mTr=o("roberta"),gTr=o(" \u2014 "),yU=a("a"),hTr=o("TFRobertaForMaskedLM"),pTr=o(" (RoBERTa model)"),_Tr=l(),iE=a("li"),eTe=a("strong"),uTr=o("t5"),bTr=o(" \u2014 "),xU=a("a"),vTr=o("TFT5ForConditionalGeneration"),FTr=o(" (T5 model)"),TTr=l(),dE=a("li"),oTe=a("strong"),MTr=o("tapas"),ETr=o(" \u2014 "),$U=a("a"),CTr=o("TFTapasForMaskedLM"),wTr=o(" (TAPAS model)"),ATr=l(),cE=a("li"),rTe=a("strong"),LTr=o("transfo-xl"),yTr=o(" \u2014 "),kU=a("a"),xTr=o("TFTransfoXLLMHeadModel"),$Tr=o(" (Transformer-XL model)"),kTr=l(),fE=a("li"),tTe=a("strong"),STr=o("vit_mae"),RTr=o(" \u2014 "),SU=a("a"),PTr=o("TFViTMAEForPreTraining"),BTr=o(" (ViTMAE model)"),ITr=l(),mE=a("li"),aTe=a("strong"),NTr=o("xlm"),qTr=o(" \u2014 "),RU=a("a"),jTr=o("TFXLMWithLMHeadModel"),DTr=o(" (XLM model)"),GTr=l(),gE=a("li"),nTe=a("strong"),OTr=o("xlm-roberta"),VTr=o(" \u2014 "),PU=a("a"),XTr=o("TFXLMRobertaForMaskedLM"),zTr=o(" (XLM-RoBERTa model)"),QTr=l(),hE=a("li"),sTe=a("strong"),WTr=o("xlnet"),HTr=o(" \u2014 "),BU=a("a"),UTr=o("TFXLNetLMHeadModel"),JTr=o(" (XLNet model)"),YTr=l(),F(pE.$$.fragment),uVe=l(),lc=a("h2"),_E=a("a"),lTe=a("span"),F($8.$$.fragment),KTr=l(),iTe=a("span"),ZTr=o("TFAutoModelForCausalLM"),bVe=l(),rr=a("div"),F(k8.$$.fragment),e9r=l(),ic=a("p"),o9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IU=a("a"),r9r=o("from_pretrained()"),t9r=o(" class method or the "),NU=a("a"),a9r=o("from_config()"),n9r=o(` class
method.`),s9r=l(),S8=a("p"),l9r=o("This class cannot be instantiated directly using "),dTe=a("code"),i9r=o("__init__()"),d9r=o(" (throws an error)."),c9r=l(),St=a("div"),F(R8.$$.fragment),f9r=l(),cTe=a("p"),m9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g9r=l(),dc=a("p"),h9r=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),p9r=o("not"),_9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),u9r=o("from_pretrained()"),b9r=o(" to load the model weights."),v9r=l(),F(uE.$$.fragment),F9r=l(),$r=a("div"),F(P8.$$.fragment),T9r=l(),mTe=a("p"),M9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E9r=l(),sn=a("p"),C9r=o("The model class to instantiate is selected based on the "),gTe=a("code"),w9r=o("model_type"),A9r=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),L9r=o("pretrained_model_name_or_path"),y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),x9r=o("pretrained_model_name_or_path"),$9r=o(":"),k9r=l(),Me=a("ul"),bE=a("li"),_Te=a("strong"),S9r=o("bert"),R9r=o(" \u2014 "),jU=a("a"),P9r=o("TFBertLMHeadModel"),B9r=o(" (BERT model)"),I9r=l(),vE=a("li"),uTe=a("strong"),N9r=o("camembert"),q9r=o(" \u2014 "),DU=a("a"),j9r=o("TFCamembertForCausalLM"),D9r=o(" (CamemBERT model)"),G9r=l(),FE=a("li"),bTe=a("strong"),O9r=o("ctrl"),V9r=o(" \u2014 "),GU=a("a"),X9r=o("TFCTRLLMHeadModel"),z9r=o(" (CTRL model)"),Q9r=l(),TE=a("li"),vTe=a("strong"),W9r=o("gpt2"),H9r=o(" \u2014 "),OU=a("a"),U9r=o("TFGPT2LMHeadModel"),J9r=o(" (OpenAI GPT-2 model)"),Y9r=l(),ME=a("li"),FTe=a("strong"),K9r=o("gptj"),Z9r=o(" \u2014 "),VU=a("a"),eMr=o("TFGPTJForCausalLM"),oMr=o(" (GPT-J model)"),rMr=l(),EE=a("li"),TTe=a("strong"),tMr=o("openai-gpt"),aMr=o(" \u2014 "),XU=a("a"),nMr=o("TFOpenAIGPTLMHeadModel"),sMr=o(" (OpenAI GPT model)"),lMr=l(),CE=a("li"),MTe=a("strong"),iMr=o("opt"),dMr=o(" \u2014 "),zU=a("a"),cMr=o("TFOPTForCausalLM"),fMr=o(" (OPT model)"),mMr=l(),wE=a("li"),ETe=a("strong"),gMr=o("rembert"),hMr=o(" \u2014 "),QU=a("a"),pMr=o("TFRemBertForCausalLM"),_Mr=o(" (RemBERT model)"),uMr=l(),AE=a("li"),CTe=a("strong"),bMr=o("roberta"),vMr=o(" \u2014 "),WU=a("a"),FMr=o("TFRobertaForCausalLM"),TMr=o(" (RoBERTa model)"),MMr=l(),LE=a("li"),wTe=a("strong"),EMr=o("roformer"),CMr=o(" \u2014 "),HU=a("a"),wMr=o("TFRoFormerForCausalLM"),AMr=o(" (RoFormer model)"),LMr=l(),yE=a("li"),ATe=a("strong"),yMr=o("transfo-xl"),xMr=o(" \u2014 "),UU=a("a"),$Mr=o("TFTransfoXLLMHeadModel"),kMr=o(" (Transformer-XL model)"),SMr=l(),xE=a("li"),LTe=a("strong"),RMr=o("xlm"),PMr=o(" \u2014 "),JU=a("a"),BMr=o("TFXLMWithLMHeadModel"),IMr=o(" (XLM model)"),NMr=l(),$E=a("li"),yTe=a("strong"),qMr=o("xlnet"),jMr=o(" \u2014 "),YU=a("a"),DMr=o("TFXLNetLMHeadModel"),GMr=o(" (XLNet model)"),OMr=l(),F(kE.$$.fragment),vVe=l(),cc=a("h2"),SE=a("a"),xTe=a("span"),F(B8.$$.fragment),VMr=l(),$Te=a("span"),XMr=o("TFAutoModelForImageClassification"),FVe=l(),tr=a("div"),F(I8.$$.fragment),zMr=l(),fc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KU=a("a"),WMr=o("from_pretrained()"),HMr=o(" class method or the "),ZU=a("a"),UMr=o("from_config()"),JMr=o(` class
method.`),YMr=l(),N8=a("p"),KMr=o("This class cannot be instantiated directly using "),kTe=a("code"),ZMr=o("__init__()"),eEr=o(" (throws an error)."),oEr=l(),Rt=a("div"),F(q8.$$.fragment),rEr=l(),STe=a("p"),tEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aEr=l(),mc=a("p"),nEr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),sEr=o("not"),lEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),iEr=o("from_pretrained()"),dEr=o(" to load the model weights."),cEr=l(),F(RE.$$.fragment),fEr=l(),kr=a("div"),F(j8.$$.fragment),mEr=l(),PTe=a("p"),gEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hEr=l(),ln=a("p"),pEr=o("The model class to instantiate is selected based on the "),BTe=a("code"),_Er=o("model_type"),uEr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),FEr=o("pretrained_model_name_or_path"),TEr=o(":"),MEr=l(),dn=a("ul"),PE=a("li"),qTe=a("strong"),EEr=o("convnext"),CEr=o(" \u2014 "),oJ=a("a"),wEr=o("TFConvNextForImageClassification"),AEr=o(" (ConvNeXT model)"),LEr=l(),BE=a("li"),jTe=a("strong"),yEr=o("data2vec-vision"),xEr=o(" \u2014 "),rJ=a("a"),$Er=o("TFData2VecVisionForImageClassification"),kEr=o(" (Data2VecVision model)"),SEr=l(),IE=a("li"),DTe=a("strong"),REr=o("swin"),PEr=o(" \u2014 "),tJ=a("a"),BEr=o("TFSwinForImageClassification"),IEr=o(" (Swin Transformer model)"),NEr=l(),NE=a("li"),GTe=a("strong"),qEr=o("vit"),jEr=o(" \u2014 "),aJ=a("a"),DEr=o("TFViTForImageClassification"),GEr=o(" (ViT model)"),OEr=l(),F(qE.$$.fragment),TVe=l(),gc=a("h2"),jE=a("a"),OTe=a("span"),F(D8.$$.fragment),VEr=l(),VTe=a("span"),XEr=o("TFAutoModelForMaskedLM"),MVe=l(),ar=a("div"),F(G8.$$.fragment),zEr=l(),hc=a("p"),QEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nJ=a("a"),WEr=o("from_pretrained()"),HEr=o(" class method or the "),sJ=a("a"),UEr=o("from_config()"),JEr=o(` class
method.`),YEr=l(),O8=a("p"),KEr=o("This class cannot be instantiated directly using "),XTe=a("code"),ZEr=o("__init__()"),e4r=o(" (throws an error)."),o4r=l(),Pt=a("div"),F(V8.$$.fragment),r4r=l(),zTe=a("p"),t4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a4r=l(),pc=a("p"),n4r=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),s4r=o("not"),l4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),i4r=o("from_pretrained()"),d4r=o(" to load the model weights."),c4r=l(),F(DE.$$.fragment),f4r=l(),Sr=a("div"),F(X8.$$.fragment),m4r=l(),WTe=a("p"),g4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h4r=l(),cn=a("p"),p4r=o("The model class to instantiate is selected based on the "),HTe=a("code"),_4r=o("model_type"),u4r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),b4r=o("pretrained_model_name_or_path"),v4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(":"),M4r=l(),ie=a("ul"),GE=a("li"),YTe=a("strong"),E4r=o("albert"),C4r=o(" \u2014 "),iJ=a("a"),w4r=o("TFAlbertForMaskedLM"),A4r=o(" (ALBERT model)"),L4r=l(),OE=a("li"),KTe=a("strong"),y4r=o("bert"),x4r=o(" \u2014 "),dJ=a("a"),$4r=o("TFBertForMaskedLM"),k4r=o(" (BERT model)"),S4r=l(),VE=a("li"),ZTe=a("strong"),R4r=o("camembert"),P4r=o(" \u2014 "),cJ=a("a"),B4r=o("TFCamembertForMaskedLM"),I4r=o(" (CamemBERT model)"),N4r=l(),XE=a("li"),e9e=a("strong"),q4r=o("convbert"),j4r=o(" \u2014 "),fJ=a("a"),D4r=o("TFConvBertForMaskedLM"),G4r=o(" (ConvBERT model)"),O4r=l(),zE=a("li"),o9e=a("strong"),V4r=o("deberta"),X4r=o(" \u2014 "),mJ=a("a"),z4r=o("TFDebertaForMaskedLM"),Q4r=o(" (DeBERTa model)"),W4r=l(),QE=a("li"),r9e=a("strong"),H4r=o("deberta-v2"),U4r=o(" \u2014 "),gJ=a("a"),J4r=o("TFDebertaV2ForMaskedLM"),Y4r=o(" (DeBERTa-v2 model)"),K4r=l(),WE=a("li"),t9e=a("strong"),Z4r=o("distilbert"),eCr=o(" \u2014 "),hJ=a("a"),oCr=o("TFDistilBertForMaskedLM"),rCr=o(" (DistilBERT model)"),tCr=l(),HE=a("li"),a9e=a("strong"),aCr=o("electra"),nCr=o(" \u2014 "),pJ=a("a"),sCr=o("TFElectraForMaskedLM"),lCr=o(" (ELECTRA model)"),iCr=l(),UE=a("li"),n9e=a("strong"),dCr=o("flaubert"),cCr=o(" \u2014 "),_J=a("a"),fCr=o("TFFlaubertWithLMHeadModel"),mCr=o(" (FlauBERT model)"),gCr=l(),JE=a("li"),s9e=a("strong"),hCr=o("funnel"),pCr=o(" \u2014 "),uJ=a("a"),_Cr=o("TFFunnelForMaskedLM"),uCr=o(" (Funnel Transformer model)"),bCr=l(),YE=a("li"),l9e=a("strong"),vCr=o("layoutlm"),FCr=o(" \u2014 "),bJ=a("a"),TCr=o("TFLayoutLMForMaskedLM"),MCr=o(" (LayoutLM model)"),ECr=l(),KE=a("li"),i9e=a("strong"),CCr=o("longformer"),wCr=o(" \u2014 "),vJ=a("a"),ACr=o("TFLongformerForMaskedLM"),LCr=o(" (Longformer model)"),yCr=l(),ZE=a("li"),d9e=a("strong"),xCr=o("mobilebert"),$Cr=o(" \u2014 "),FJ=a("a"),kCr=o("TFMobileBertForMaskedLM"),SCr=o(" (MobileBERT model)"),RCr=l(),e4=a("li"),c9e=a("strong"),PCr=o("mpnet"),BCr=o(" \u2014 "),TJ=a("a"),ICr=o("TFMPNetForMaskedLM"),NCr=o(" (MPNet model)"),qCr=l(),o4=a("li"),f9e=a("strong"),jCr=o("rembert"),DCr=o(" \u2014 "),MJ=a("a"),GCr=o("TFRemBertForMaskedLM"),OCr=o(" (RemBERT model)"),VCr=l(),r4=a("li"),m9e=a("strong"),XCr=o("roberta"),zCr=o(" \u2014 "),EJ=a("a"),QCr=o("TFRobertaForMaskedLM"),WCr=o(" (RoBERTa model)"),HCr=l(),t4=a("li"),g9e=a("strong"),UCr=o("roformer"),JCr=o(" \u2014 "),CJ=a("a"),YCr=o("TFRoFormerForMaskedLM"),KCr=o(" (RoFormer model)"),ZCr=l(),a4=a("li"),h9e=a("strong"),e5r=o("tapas"),o5r=o(" \u2014 "),wJ=a("a"),r5r=o("TFTapasForMaskedLM"),t5r=o(" (TAPAS model)"),a5r=l(),n4=a("li"),p9e=a("strong"),n5r=o("xlm"),s5r=o(" \u2014 "),AJ=a("a"),l5r=o("TFXLMWithLMHeadModel"),i5r=o(" (XLM model)"),d5r=l(),s4=a("li"),_9e=a("strong"),c5r=o("xlm-roberta"),f5r=o(" \u2014 "),LJ=a("a"),m5r=o("TFXLMRobertaForMaskedLM"),g5r=o(" (XLM-RoBERTa model)"),h5r=l(),F(l4.$$.fragment),EVe=l(),_c=a("h2"),i4=a("a"),u9e=a("span"),F(z8.$$.fragment),p5r=l(),b9e=a("span"),_5r=o("TFAutoModelForSeq2SeqLM"),CVe=l(),nr=a("div"),F(Q8.$$.fragment),u5r=l(),uc=a("p"),b5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yJ=a("a"),v5r=o("from_pretrained()"),F5r=o(" class method or the "),xJ=a("a"),T5r=o("from_config()"),M5r=o(` class
method.`),E5r=l(),W8=a("p"),C5r=o("This class cannot be instantiated directly using "),v9e=a("code"),w5r=o("__init__()"),A5r=o(" (throws an error)."),L5r=l(),Bt=a("div"),F(H8.$$.fragment),y5r=l(),F9e=a("p"),x5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$5r=l(),bc=a("p"),k5r=o(`Note:
Loading a model from its configuration file does `),T9e=a("strong"),S5r=o("not"),R5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),P5r=o("from_pretrained()"),B5r=o(" to load the model weights."),I5r=l(),F(d4.$$.fragment),N5r=l(),Rr=a("div"),F(U8.$$.fragment),q5r=l(),M9e=a("p"),j5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D5r=l(),fn=a("p"),G5r=o("The model class to instantiate is selected based on the "),E9e=a("code"),O5r=o("model_type"),V5r=o(` property of the config object (either
passed as an argument or loaded from `),C9e=a("code"),X5r=o("pretrained_model_name_or_path"),z5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=a("code"),Q5r=o("pretrained_model_name_or_path"),W5r=o(":"),H5r=l(),ye=a("ul"),c4=a("li"),A9e=a("strong"),U5r=o("bart"),J5r=o(" \u2014 "),kJ=a("a"),Y5r=o("TFBartForConditionalGeneration"),K5r=o(" (BART model)"),Z5r=l(),f4=a("li"),L9e=a("strong"),e3r=o("blenderbot"),o3r=o(" \u2014 "),SJ=a("a"),r3r=o("TFBlenderbotForConditionalGeneration"),t3r=o(" (Blenderbot model)"),a3r=l(),m4=a("li"),y9e=a("strong"),n3r=o("blenderbot-small"),s3r=o(" \u2014 "),RJ=a("a"),l3r=o("TFBlenderbotSmallForConditionalGeneration"),i3r=o(" (BlenderbotSmall model)"),d3r=l(),g4=a("li"),x9e=a("strong"),c3r=o("encoder-decoder"),f3r=o(" \u2014 "),PJ=a("a"),m3r=o("TFEncoderDecoderModel"),g3r=o(" (Encoder decoder model)"),h3r=l(),h4=a("li"),$9e=a("strong"),p3r=o("led"),_3r=o(" \u2014 "),BJ=a("a"),u3r=o("TFLEDForConditionalGeneration"),b3r=o(" (LED model)"),v3r=l(),p4=a("li"),k9e=a("strong"),F3r=o("marian"),T3r=o(" \u2014 "),IJ=a("a"),M3r=o("TFMarianMTModel"),E3r=o(" (Marian model)"),C3r=l(),_4=a("li"),S9e=a("strong"),w3r=o("mbart"),A3r=o(" \u2014 "),NJ=a("a"),L3r=o("TFMBartForConditionalGeneration"),y3r=o(" (mBART model)"),x3r=l(),u4=a("li"),R9e=a("strong"),$3r=o("mt5"),k3r=o(" \u2014 "),qJ=a("a"),S3r=o("TFMT5ForConditionalGeneration"),R3r=o(" (MT5 model)"),P3r=l(),b4=a("li"),P9e=a("strong"),B3r=o("pegasus"),I3r=o(" \u2014 "),jJ=a("a"),N3r=o("TFPegasusForConditionalGeneration"),q3r=o(" (Pegasus model)"),j3r=l(),v4=a("li"),B9e=a("strong"),D3r=o("t5"),G3r=o(" \u2014 "),DJ=a("a"),O3r=o("TFT5ForConditionalGeneration"),V3r=o(" (T5 model)"),X3r=l(),F(F4.$$.fragment),wVe=l(),vc=a("h2"),T4=a("a"),I9e=a("span"),F(J8.$$.fragment),z3r=l(),N9e=a("span"),Q3r=o("TFAutoModelForSequenceClassification"),AVe=l(),sr=a("div"),F(Y8.$$.fragment),W3r=l(),Fc=a("p"),H3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GJ=a("a"),U3r=o("from_pretrained()"),J3r=o(" class method or the "),OJ=a("a"),Y3r=o("from_config()"),K3r=o(` class
method.`),Z3r=l(),K8=a("p"),e0r=o("This class cannot be instantiated directly using "),q9e=a("code"),o0r=o("__init__()"),r0r=o(" (throws an error)."),t0r=l(),It=a("div"),F(Z8.$$.fragment),a0r=l(),j9e=a("p"),n0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s0r=l(),Tc=a("p"),l0r=o(`Note:
Loading a model from its configuration file does `),D9e=a("strong"),i0r=o("not"),d0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),c0r=o("from_pretrained()"),f0r=o(" to load the model weights."),m0r=l(),F(M4.$$.fragment),g0r=l(),Pr=a("div"),F(ex.$$.fragment),h0r=l(),G9e=a("p"),p0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_0r=l(),mn=a("p"),u0r=o("The model class to instantiate is selected based on the "),O9e=a("code"),b0r=o("model_type"),v0r=o(` property of the config object (either
passed as an argument or loaded from `),V9e=a("code"),F0r=o("pretrained_model_name_or_path"),T0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),C0r=l(),ae=a("ul"),E4=a("li"),z9e=a("strong"),w0r=o("albert"),A0r=o(" \u2014 "),XJ=a("a"),L0r=o("TFAlbertForSequenceClassification"),y0r=o(" (ALBERT model)"),x0r=l(),C4=a("li"),Q9e=a("strong"),$0r=o("bert"),k0r=o(" \u2014 "),zJ=a("a"),S0r=o("TFBertForSequenceClassification"),R0r=o(" (BERT model)"),P0r=l(),w4=a("li"),W9e=a("strong"),B0r=o("camembert"),I0r=o(" \u2014 "),QJ=a("a"),N0r=o("TFCamembertForSequenceClassification"),q0r=o(" (CamemBERT model)"),j0r=l(),A4=a("li"),H9e=a("strong"),D0r=o("convbert"),G0r=o(" \u2014 "),WJ=a("a"),O0r=o("TFConvBertForSequenceClassification"),V0r=o(" (ConvBERT model)"),X0r=l(),L4=a("li"),U9e=a("strong"),z0r=o("ctrl"),Q0r=o(" \u2014 "),HJ=a("a"),W0r=o("TFCTRLForSequenceClassification"),H0r=o(" (CTRL model)"),U0r=l(),y4=a("li"),J9e=a("strong"),J0r=o("deberta"),Y0r=o(" \u2014 "),UJ=a("a"),K0r=o("TFDebertaForSequenceClassification"),Z0r=o(" (DeBERTa model)"),ewr=l(),x4=a("li"),Y9e=a("strong"),owr=o("deberta-v2"),rwr=o(" \u2014 "),JJ=a("a"),twr=o("TFDebertaV2ForSequenceClassification"),awr=o(" (DeBERTa-v2 model)"),nwr=l(),$4=a("li"),K9e=a("strong"),swr=o("distilbert"),lwr=o(" \u2014 "),YJ=a("a"),iwr=o("TFDistilBertForSequenceClassification"),dwr=o(" (DistilBERT model)"),cwr=l(),k4=a("li"),Z9e=a("strong"),fwr=o("electra"),mwr=o(" \u2014 "),KJ=a("a"),gwr=o("TFElectraForSequenceClassification"),hwr=o(" (ELECTRA model)"),pwr=l(),S4=a("li"),eMe=a("strong"),_wr=o("flaubert"),uwr=o(" \u2014 "),ZJ=a("a"),bwr=o("TFFlaubertForSequenceClassification"),vwr=o(" (FlauBERT model)"),Fwr=l(),R4=a("li"),oMe=a("strong"),Twr=o("funnel"),Mwr=o(" \u2014 "),eY=a("a"),Ewr=o("TFFunnelForSequenceClassification"),Cwr=o(" (Funnel Transformer model)"),wwr=l(),P4=a("li"),rMe=a("strong"),Awr=o("gpt2"),Lwr=o(" \u2014 "),oY=a("a"),ywr=o("TFGPT2ForSequenceClassification"),xwr=o(" (OpenAI GPT-2 model)"),$wr=l(),B4=a("li"),tMe=a("strong"),kwr=o("gptj"),Swr=o(" \u2014 "),rY=a("a"),Rwr=o("TFGPTJForSequenceClassification"),Pwr=o(" (GPT-J model)"),Bwr=l(),I4=a("li"),aMe=a("strong"),Iwr=o("layoutlm"),Nwr=o(" \u2014 "),tY=a("a"),qwr=o("TFLayoutLMForSequenceClassification"),jwr=o(" (LayoutLM model)"),Dwr=l(),N4=a("li"),nMe=a("strong"),Gwr=o("longformer"),Owr=o(" \u2014 "),aY=a("a"),Vwr=o("TFLongformerForSequenceClassification"),Xwr=o(" (Longformer model)"),zwr=l(),q4=a("li"),sMe=a("strong"),Qwr=o("mobilebert"),Wwr=o(" \u2014 "),nY=a("a"),Hwr=o("TFMobileBertForSequenceClassification"),Uwr=o(" (MobileBERT model)"),Jwr=l(),j4=a("li"),lMe=a("strong"),Ywr=o("mpnet"),Kwr=o(" \u2014 "),sY=a("a"),Zwr=o("TFMPNetForSequenceClassification"),eAr=o(" (MPNet model)"),oAr=l(),D4=a("li"),iMe=a("strong"),rAr=o("openai-gpt"),tAr=o(" \u2014 "),lY=a("a"),aAr=o("TFOpenAIGPTForSequenceClassification"),nAr=o(" (OpenAI GPT model)"),sAr=l(),G4=a("li"),dMe=a("strong"),lAr=o("rembert"),iAr=o(" \u2014 "),iY=a("a"),dAr=o("TFRemBertForSequenceClassification"),cAr=o(" (RemBERT model)"),fAr=l(),O4=a("li"),cMe=a("strong"),mAr=o("roberta"),gAr=o(" \u2014 "),dY=a("a"),hAr=o("TFRobertaForSequenceClassification"),pAr=o(" (RoBERTa model)"),_Ar=l(),V4=a("li"),fMe=a("strong"),uAr=o("roformer"),bAr=o(" \u2014 "),cY=a("a"),vAr=o("TFRoFormerForSequenceClassification"),FAr=o(" (RoFormer model)"),TAr=l(),X4=a("li"),mMe=a("strong"),MAr=o("tapas"),EAr=o(" \u2014 "),fY=a("a"),CAr=o("TFTapasForSequenceClassification"),wAr=o(" (TAPAS model)"),AAr=l(),z4=a("li"),gMe=a("strong"),LAr=o("transfo-xl"),yAr=o(" \u2014 "),mY=a("a"),xAr=o("TFTransfoXLForSequenceClassification"),$Ar=o(" (Transformer-XL model)"),kAr=l(),Q4=a("li"),hMe=a("strong"),SAr=o("xlm"),RAr=o(" \u2014 "),gY=a("a"),PAr=o("TFXLMForSequenceClassification"),BAr=o(" (XLM model)"),IAr=l(),W4=a("li"),pMe=a("strong"),NAr=o("xlm-roberta"),qAr=o(" \u2014 "),hY=a("a"),jAr=o("TFXLMRobertaForSequenceClassification"),DAr=o(" (XLM-RoBERTa model)"),GAr=l(),H4=a("li"),_Me=a("strong"),OAr=o("xlnet"),VAr=o(" \u2014 "),pY=a("a"),XAr=o("TFXLNetForSequenceClassification"),zAr=o(" (XLNet model)"),QAr=l(),F(U4.$$.fragment),LVe=l(),Mc=a("h2"),J4=a("a"),uMe=a("span"),F(ox.$$.fragment),WAr=l(),bMe=a("span"),HAr=o("TFAutoModelForMultipleChoice"),yVe=l(),lr=a("div"),F(rx.$$.fragment),UAr=l(),Ec=a("p"),JAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_Y=a("a"),YAr=o("from_pretrained()"),KAr=o(" class method or the "),uY=a("a"),ZAr=o("from_config()"),e6r=o(` class
method.`),o6r=l(),tx=a("p"),r6r=o("This class cannot be instantiated directly using "),vMe=a("code"),t6r=o("__init__()"),a6r=o(" (throws an error)."),n6r=l(),Nt=a("div"),F(ax.$$.fragment),s6r=l(),FMe=a("p"),l6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),i6r=l(),Cc=a("p"),d6r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),c6r=o("not"),f6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),m6r=o("from_pretrained()"),g6r=o(" to load the model weights."),h6r=l(),F(Y4.$$.fragment),p6r=l(),Br=a("div"),F(nx.$$.fragment),_6r=l(),MMe=a("p"),u6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b6r=l(),gn=a("p"),v6r=o("The model class to instantiate is selected based on the "),EMe=a("code"),F6r=o("model_type"),T6r=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),C6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),_e=a("ul"),K4=a("li"),AMe=a("strong"),L6r=o("albert"),y6r=o(" \u2014 "),vY=a("a"),x6r=o("TFAlbertForMultipleChoice"),$6r=o(" (ALBERT model)"),k6r=l(),Z4=a("li"),LMe=a("strong"),S6r=o("bert"),R6r=o(" \u2014 "),FY=a("a"),P6r=o("TFBertForMultipleChoice"),B6r=o(" (BERT model)"),I6r=l(),eC=a("li"),yMe=a("strong"),N6r=o("camembert"),q6r=o(" \u2014 "),TY=a("a"),j6r=o("TFCamembertForMultipleChoice"),D6r=o(" (CamemBERT model)"),G6r=l(),oC=a("li"),xMe=a("strong"),O6r=o("convbert"),V6r=o(" \u2014 "),MY=a("a"),X6r=o("TFConvBertForMultipleChoice"),z6r=o(" (ConvBERT model)"),Q6r=l(),rC=a("li"),$Me=a("strong"),W6r=o("distilbert"),H6r=o(" \u2014 "),EY=a("a"),U6r=o("TFDistilBertForMultipleChoice"),J6r=o(" (DistilBERT model)"),Y6r=l(),tC=a("li"),kMe=a("strong"),K6r=o("electra"),Z6r=o(" \u2014 "),CY=a("a"),eLr=o("TFElectraForMultipleChoice"),oLr=o(" (ELECTRA model)"),rLr=l(),aC=a("li"),SMe=a("strong"),tLr=o("flaubert"),aLr=o(" \u2014 "),wY=a("a"),nLr=o("TFFlaubertForMultipleChoice"),sLr=o(" (FlauBERT model)"),lLr=l(),nC=a("li"),RMe=a("strong"),iLr=o("funnel"),dLr=o(" \u2014 "),AY=a("a"),cLr=o("TFFunnelForMultipleChoice"),fLr=o(" (Funnel Transformer model)"),mLr=l(),sC=a("li"),PMe=a("strong"),gLr=o("longformer"),hLr=o(" \u2014 "),LY=a("a"),pLr=o("TFLongformerForMultipleChoice"),_Lr=o(" (Longformer model)"),uLr=l(),lC=a("li"),BMe=a("strong"),bLr=o("mobilebert"),vLr=o(" \u2014 "),yY=a("a"),FLr=o("TFMobileBertForMultipleChoice"),TLr=o(" (MobileBERT model)"),MLr=l(),iC=a("li"),IMe=a("strong"),ELr=o("mpnet"),CLr=o(" \u2014 "),xY=a("a"),wLr=o("TFMPNetForMultipleChoice"),ALr=o(" (MPNet model)"),LLr=l(),dC=a("li"),NMe=a("strong"),yLr=o("rembert"),xLr=o(" \u2014 "),$Y=a("a"),$Lr=o("TFRemBertForMultipleChoice"),kLr=o(" (RemBERT model)"),SLr=l(),cC=a("li"),qMe=a("strong"),RLr=o("roberta"),PLr=o(" \u2014 "),kY=a("a"),BLr=o("TFRobertaForMultipleChoice"),ILr=o(" (RoBERTa model)"),NLr=l(),fC=a("li"),jMe=a("strong"),qLr=o("roformer"),jLr=o(" \u2014 "),SY=a("a"),DLr=o("TFRoFormerForMultipleChoice"),GLr=o(" (RoFormer model)"),OLr=l(),mC=a("li"),DMe=a("strong"),VLr=o("xlm"),XLr=o(" \u2014 "),RY=a("a"),zLr=o("TFXLMForMultipleChoice"),QLr=o(" (XLM model)"),WLr=l(),gC=a("li"),GMe=a("strong"),HLr=o("xlm-roberta"),ULr=o(" \u2014 "),PY=a("a"),JLr=o("TFXLMRobertaForMultipleChoice"),YLr=o(" (XLM-RoBERTa model)"),KLr=l(),hC=a("li"),OMe=a("strong"),ZLr=o("xlnet"),eyr=o(" \u2014 "),BY=a("a"),oyr=o("TFXLNetForMultipleChoice"),ryr=o(" (XLNet model)"),tyr=l(),F(pC.$$.fragment),xVe=l(),wc=a("h2"),_C=a("a"),VMe=a("span"),F(sx.$$.fragment),ayr=l(),XMe=a("span"),nyr=o("TFAutoModelForNextSentencePrediction"),$Ve=l(),ir=a("div"),F(lx.$$.fragment),syr=l(),Ac=a("p"),lyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IY=a("a"),iyr=o("from_pretrained()"),dyr=o(" class method or the "),NY=a("a"),cyr=o("from_config()"),fyr=o(` class
method.`),myr=l(),ix=a("p"),gyr=o("This class cannot be instantiated directly using "),zMe=a("code"),hyr=o("__init__()"),pyr=o(" (throws an error)."),_yr=l(),qt=a("div"),F(dx.$$.fragment),uyr=l(),QMe=a("p"),byr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vyr=l(),Lc=a("p"),Fyr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),Tyr=o("not"),Myr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),Eyr=o("from_pretrained()"),Cyr=o(" to load the model weights."),wyr=l(),F(uC.$$.fragment),Ayr=l(),Ir=a("div"),F(cx.$$.fragment),Lyr=l(),HMe=a("p"),yyr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xyr=l(),hn=a("p"),$yr=o("The model class to instantiate is selected based on the "),UMe=a("code"),kyr=o("model_type"),Syr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),Ryr=o("pretrained_model_name_or_path"),Pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),Byr=o("pretrained_model_name_or_path"),Iyr=o(":"),Nyr=l(),fx=a("ul"),bC=a("li"),KMe=a("strong"),qyr=o("bert"),jyr=o(" \u2014 "),jY=a("a"),Dyr=o("TFBertForNextSentencePrediction"),Gyr=o(" (BERT model)"),Oyr=l(),vC=a("li"),ZMe=a("strong"),Vyr=o("mobilebert"),Xyr=o(" \u2014 "),DY=a("a"),zyr=o("TFMobileBertForNextSentencePrediction"),Qyr=o(" (MobileBERT model)"),Wyr=l(),F(FC.$$.fragment),kVe=l(),yc=a("h2"),TC=a("a"),eEe=a("span"),F(mx.$$.fragment),Hyr=l(),oEe=a("span"),Uyr=o("TFAutoModelForTableQuestionAnswering"),SVe=l(),dr=a("div"),F(gx.$$.fragment),Jyr=l(),xc=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GY=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),OY=a("a"),e8r=o("from_config()"),o8r=o(` class
method.`),r8r=l(),hx=a("p"),t8r=o("This class cannot be instantiated directly using "),rEe=a("code"),a8r=o("__init__()"),n8r=o(" (throws an error)."),s8r=l(),jt=a("div"),F(px.$$.fragment),l8r=l(),tEe=a("p"),i8r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),d8r=l(),$c=a("p"),c8r=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),f8r=o("not"),m8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),g8r=o("from_pretrained()"),h8r=o(" to load the model weights."),p8r=l(),F(MC.$$.fragment),_8r=l(),Nr=a("div"),F(_x.$$.fragment),u8r=l(),nEe=a("p"),b8r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v8r=l(),pn=a("p"),F8r=o("The model class to instantiate is selected based on the "),sEe=a("code"),T8r=o("model_type"),M8r=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),E8r=o("pretrained_model_name_or_path"),C8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),w8r=o("pretrained_model_name_or_path"),A8r=o(":"),L8r=l(),dEe=a("ul"),EC=a("li"),cEe=a("strong"),y8r=o("tapas"),x8r=o(" \u2014 "),XY=a("a"),$8r=o("TFTapasForQuestionAnswering"),k8r=o(" (TAPAS model)"),S8r=l(),F(CC.$$.fragment),RVe=l(),kc=a("h2"),wC=a("a"),fEe=a("span"),F(ux.$$.fragment),R8r=l(),mEe=a("span"),P8r=o("TFAutoModelForTokenClassification"),PVe=l(),cr=a("div"),F(bx.$$.fragment),B8r=l(),Sc=a("p"),I8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=a("a"),N8r=o("from_pretrained()"),q8r=o(" class method or the "),QY=a("a"),j8r=o("from_config()"),D8r=o(` class
method.`),G8r=l(),vx=a("p"),O8r=o("This class cannot be instantiated directly using "),gEe=a("code"),V8r=o("__init__()"),X8r=o(" (throws an error)."),z8r=l(),Dt=a("div"),F(Fx.$$.fragment),Q8r=l(),hEe=a("p"),W8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),H8r=l(),Rc=a("p"),U8r=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),J8r=o("not"),Y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),K8r=o("from_pretrained()"),Z8r=o(" to load the model weights."),exr=l(),F(AC.$$.fragment),oxr=l(),qr=a("div"),F(Tx.$$.fragment),rxr=l(),_Ee=a("p"),txr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),axr=l(),_n=a("p"),nxr=o("The model class to instantiate is selected based on the "),uEe=a("code"),sxr=o("model_type"),lxr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(":"),mxr=l(),de=a("ul"),LC=a("li"),FEe=a("strong"),gxr=o("albert"),hxr=o(" \u2014 "),HY=a("a"),pxr=o("TFAlbertForTokenClassification"),_xr=o(" (ALBERT model)"),uxr=l(),yC=a("li"),TEe=a("strong"),bxr=o("bert"),vxr=o(" \u2014 "),UY=a("a"),Fxr=o("TFBertForTokenClassification"),Txr=o(" (BERT model)"),Mxr=l(),xC=a("li"),MEe=a("strong"),Exr=o("camembert"),Cxr=o(" \u2014 "),JY=a("a"),wxr=o("TFCamembertForTokenClassification"),Axr=o(" (CamemBERT model)"),Lxr=l(),$C=a("li"),EEe=a("strong"),yxr=o("convbert"),xxr=o(" \u2014 "),YY=a("a"),$xr=o("TFConvBertForTokenClassification"),kxr=o(" (ConvBERT model)"),Sxr=l(),kC=a("li"),CEe=a("strong"),Rxr=o("deberta"),Pxr=o(" \u2014 "),KY=a("a"),Bxr=o("TFDebertaForTokenClassification"),Ixr=o(" (DeBERTa model)"),Nxr=l(),SC=a("li"),wEe=a("strong"),qxr=o("deberta-v2"),jxr=o(" \u2014 "),ZY=a("a"),Dxr=o("TFDebertaV2ForTokenClassification"),Gxr=o(" (DeBERTa-v2 model)"),Oxr=l(),RC=a("li"),AEe=a("strong"),Vxr=o("distilbert"),Xxr=o(" \u2014 "),eK=a("a"),zxr=o("TFDistilBertForTokenClassification"),Qxr=o(" (DistilBERT model)"),Wxr=l(),PC=a("li"),LEe=a("strong"),Hxr=o("electra"),Uxr=o(" \u2014 "),oK=a("a"),Jxr=o("TFElectraForTokenClassification"),Yxr=o(" (ELECTRA model)"),Kxr=l(),BC=a("li"),yEe=a("strong"),Zxr=o("flaubert"),e$r=o(" \u2014 "),rK=a("a"),o$r=o("TFFlaubertForTokenClassification"),r$r=o(" (FlauBERT model)"),t$r=l(),IC=a("li"),xEe=a("strong"),a$r=o("funnel"),n$r=o(" \u2014 "),tK=a("a"),s$r=o("TFFunnelForTokenClassification"),l$r=o(" (Funnel Transformer model)"),i$r=l(),NC=a("li"),$Ee=a("strong"),d$r=o("layoutlm"),c$r=o(" \u2014 "),aK=a("a"),f$r=o("TFLayoutLMForTokenClassification"),m$r=o(" (LayoutLM model)"),g$r=l(),qC=a("li"),kEe=a("strong"),h$r=o("longformer"),p$r=o(" \u2014 "),nK=a("a"),_$r=o("TFLongformerForTokenClassification"),u$r=o(" (Longformer model)"),b$r=l(),jC=a("li"),SEe=a("strong"),v$r=o("mobilebert"),F$r=o(" \u2014 "),sK=a("a"),T$r=o("TFMobileBertForTokenClassification"),M$r=o(" (MobileBERT model)"),E$r=l(),DC=a("li"),REe=a("strong"),C$r=o("mpnet"),w$r=o(" \u2014 "),lK=a("a"),A$r=o("TFMPNetForTokenClassification"),L$r=o(" (MPNet model)"),y$r=l(),GC=a("li"),PEe=a("strong"),x$r=o("rembert"),$$r=o(" \u2014 "),iK=a("a"),k$r=o("TFRemBertForTokenClassification"),S$r=o(" (RemBERT model)"),R$r=l(),OC=a("li"),BEe=a("strong"),P$r=o("roberta"),B$r=o(" \u2014 "),dK=a("a"),I$r=o("TFRobertaForTokenClassification"),N$r=o(" (RoBERTa model)"),q$r=l(),VC=a("li"),IEe=a("strong"),j$r=o("roformer"),D$r=o(" \u2014 "),cK=a("a"),G$r=o("TFRoFormerForTokenClassification"),O$r=o(" (RoFormer model)"),V$r=l(),XC=a("li"),NEe=a("strong"),X$r=o("xlm"),z$r=o(" \u2014 "),fK=a("a"),Q$r=o("TFXLMForTokenClassification"),W$r=o(" (XLM model)"),H$r=l(),zC=a("li"),qEe=a("strong"),U$r=o("xlm-roberta"),J$r=o(" \u2014 "),mK=a("a"),Y$r=o("TFXLMRobertaForTokenClassification"),K$r=o(" (XLM-RoBERTa model)"),Z$r=l(),QC=a("li"),jEe=a("strong"),ekr=o("xlnet"),okr=o(" \u2014 "),gK=a("a"),rkr=o("TFXLNetForTokenClassification"),tkr=o(" (XLNet model)"),akr=l(),F(WC.$$.fragment),BVe=l(),Pc=a("h2"),HC=a("a"),DEe=a("span"),F(Mx.$$.fragment),nkr=l(),GEe=a("span"),skr=o("TFAutoModelForQuestionAnswering"),IVe=l(),fr=a("div"),F(Ex.$$.fragment),lkr=l(),Bc=a("p"),ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hK=a("a"),dkr=o("from_pretrained()"),ckr=o(" class method or the "),pK=a("a"),fkr=o("from_config()"),mkr=o(` class
method.`),gkr=l(),Cx=a("p"),hkr=o("This class cannot be instantiated directly using "),OEe=a("code"),pkr=o("__init__()"),_kr=o(" (throws an error)."),ukr=l(),Gt=a("div"),F(wx.$$.fragment),bkr=l(),VEe=a("p"),vkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fkr=l(),Ic=a("p"),Tkr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),Mkr=o("not"),Ekr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),Ckr=o("from_pretrained()"),wkr=o(" to load the model weights."),Akr=l(),F(UC.$$.fragment),Lkr=l(),jr=a("div"),F(Ax.$$.fragment),ykr=l(),zEe=a("p"),xkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$kr=l(),un=a("p"),kkr=o("The model class to instantiate is selected based on the "),QEe=a("code"),Skr=o("model_type"),Rkr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),Ikr=o("pretrained_model_name_or_path"),Nkr=o(":"),qkr=l(),ce=a("ul"),JC=a("li"),UEe=a("strong"),jkr=o("albert"),Dkr=o(" \u2014 "),uK=a("a"),Gkr=o("TFAlbertForQuestionAnswering"),Okr=o(" (ALBERT model)"),Vkr=l(),YC=a("li"),JEe=a("strong"),Xkr=o("bert"),zkr=o(" \u2014 "),bK=a("a"),Qkr=o("TFBertForQuestionAnswering"),Wkr=o(" (BERT model)"),Hkr=l(),KC=a("li"),YEe=a("strong"),Ukr=o("camembert"),Jkr=o(" \u2014 "),vK=a("a"),Ykr=o("TFCamembertForQuestionAnswering"),Kkr=o(" (CamemBERT model)"),Zkr=l(),ZC=a("li"),KEe=a("strong"),eSr=o("convbert"),oSr=o(" \u2014 "),FK=a("a"),rSr=o("TFConvBertForQuestionAnswering"),tSr=o(" (ConvBERT model)"),aSr=l(),e5=a("li"),ZEe=a("strong"),nSr=o("deberta"),sSr=o(" \u2014 "),TK=a("a"),lSr=o("TFDebertaForQuestionAnswering"),iSr=o(" (DeBERTa model)"),dSr=l(),o5=a("li"),e4e=a("strong"),cSr=o("deberta-v2"),fSr=o(" \u2014 "),MK=a("a"),mSr=o("TFDebertaV2ForQuestionAnswering"),gSr=o(" (DeBERTa-v2 model)"),hSr=l(),r5=a("li"),o4e=a("strong"),pSr=o("distilbert"),_Sr=o(" \u2014 "),EK=a("a"),uSr=o("TFDistilBertForQuestionAnswering"),bSr=o(" (DistilBERT model)"),vSr=l(),t5=a("li"),r4e=a("strong"),FSr=o("electra"),TSr=o(" \u2014 "),CK=a("a"),MSr=o("TFElectraForQuestionAnswering"),ESr=o(" (ELECTRA model)"),CSr=l(),a5=a("li"),t4e=a("strong"),wSr=o("flaubert"),ASr=o(" \u2014 "),wK=a("a"),LSr=o("TFFlaubertForQuestionAnsweringSimple"),ySr=o(" (FlauBERT model)"),xSr=l(),n5=a("li"),a4e=a("strong"),$Sr=o("funnel"),kSr=o(" \u2014 "),AK=a("a"),SSr=o("TFFunnelForQuestionAnswering"),RSr=o(" (Funnel Transformer model)"),PSr=l(),s5=a("li"),n4e=a("strong"),BSr=o("gptj"),ISr=o(" \u2014 "),LK=a("a"),NSr=o("TFGPTJForQuestionAnswering"),qSr=o(" (GPT-J model)"),jSr=l(),l5=a("li"),s4e=a("strong"),DSr=o("longformer"),GSr=o(" \u2014 "),yK=a("a"),OSr=o("TFLongformerForQuestionAnswering"),VSr=o(" (Longformer model)"),XSr=l(),i5=a("li"),l4e=a("strong"),zSr=o("mobilebert"),QSr=o(" \u2014 "),xK=a("a"),WSr=o("TFMobileBertForQuestionAnswering"),HSr=o(" (MobileBERT model)"),USr=l(),d5=a("li"),i4e=a("strong"),JSr=o("mpnet"),YSr=o(" \u2014 "),$K=a("a"),KSr=o("TFMPNetForQuestionAnswering"),ZSr=o(" (MPNet model)"),eRr=l(),c5=a("li"),d4e=a("strong"),oRr=o("rembert"),rRr=o(" \u2014 "),kK=a("a"),tRr=o("TFRemBertForQuestionAnswering"),aRr=o(" (RemBERT model)"),nRr=l(),f5=a("li"),c4e=a("strong"),sRr=o("roberta"),lRr=o(" \u2014 "),SK=a("a"),iRr=o("TFRobertaForQuestionAnswering"),dRr=o(" (RoBERTa model)"),cRr=l(),m5=a("li"),f4e=a("strong"),fRr=o("roformer"),mRr=o(" \u2014 "),RK=a("a"),gRr=o("TFRoFormerForQuestionAnswering"),hRr=o(" (RoFormer model)"),pRr=l(),g5=a("li"),m4e=a("strong"),_Rr=o("xlm"),uRr=o(" \u2014 "),PK=a("a"),bRr=o("TFXLMForQuestionAnsweringSimple"),vRr=o(" (XLM model)"),FRr=l(),h5=a("li"),g4e=a("strong"),TRr=o("xlm-roberta"),MRr=o(" \u2014 "),BK=a("a"),ERr=o("TFXLMRobertaForQuestionAnswering"),CRr=o(" (XLM-RoBERTa model)"),wRr=l(),p5=a("li"),h4e=a("strong"),ARr=o("xlnet"),LRr=o(" \u2014 "),IK=a("a"),yRr=o("TFXLNetForQuestionAnsweringSimple"),xRr=o(" (XLNet model)"),$Rr=l(),F(_5.$$.fragment),NVe=l(),Nc=a("h2"),u5=a("a"),p4e=a("span"),F(Lx.$$.fragment),kRr=l(),_4e=a("span"),SRr=o("TFAutoModelForVision2Seq"),qVe=l(),mr=a("div"),F(yx.$$.fragment),RRr=l(),qc=a("p"),PRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=a("a"),BRr=o("from_pretrained()"),IRr=o(" class method or the "),qK=a("a"),NRr=o("from_config()"),qRr=o(` class
method.`),jRr=l(),xx=a("p"),DRr=o("This class cannot be instantiated directly using "),u4e=a("code"),GRr=o("__init__()"),ORr=o(" (throws an error)."),VRr=l(),Ot=a("div"),F($x.$$.fragment),XRr=l(),b4e=a("p"),zRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QRr=l(),jc=a("p"),WRr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),HRr=o("not"),URr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),JRr=o("from_pretrained()"),YRr=o(" to load the model weights."),KRr=l(),F(b5.$$.fragment),ZRr=l(),Dr=a("div"),F(kx.$$.fragment),ePr=l(),F4e=a("p"),oPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rPr=l(),bn=a("p"),tPr=o("The model class to instantiate is selected based on the "),T4e=a("code"),aPr=o("model_type"),nPr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),sPr=o("pretrained_model_name_or_path"),lPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(":"),cPr=l(),C4e=a("ul"),v5=a("li"),w4e=a("strong"),fPr=o("vision-encoder-decoder"),mPr=o(" \u2014 "),DK=a("a"),gPr=o("TFVisionEncoderDecoderModel"),hPr=o(" (Vision Encoder decoder model)"),pPr=l(),F(F5.$$.fragment),jVe=l(),Dc=a("h2"),T5=a("a"),A4e=a("span"),F(Sx.$$.fragment),_Pr=l(),L4e=a("span"),uPr=o("TFAutoModelForSpeechSeq2Seq"),DVe=l(),gr=a("div"),F(Rx.$$.fragment),bPr=l(),Gc=a("p"),vPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GK=a("a"),FPr=o("from_pretrained()"),TPr=o(" class method or the "),OK=a("a"),MPr=o("from_config()"),EPr=o(` class
method.`),CPr=l(),Px=a("p"),wPr=o("This class cannot be instantiated directly using "),y4e=a("code"),APr=o("__init__()"),LPr=o(" (throws an error)."),yPr=l(),Vt=a("div"),F(Bx.$$.fragment),xPr=l(),x4e=a("p"),$Pr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kPr=l(),Oc=a("p"),SPr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),RPr=o("not"),PPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),BPr=o("from_pretrained()"),IPr=o(" to load the model weights."),NPr=l(),F(M5.$$.fragment),qPr=l(),Gr=a("div"),F(Ix.$$.fragment),jPr=l(),k4e=a("p"),DPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),GPr=l(),vn=a("p"),OPr=o("The model class to instantiate is selected based on the "),S4e=a("code"),VPr=o("model_type"),XPr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),zPr=o("pretrained_model_name_or_path"),QPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),WPr=o("pretrained_model_name_or_path"),HPr=o(":"),UPr=l(),B4e=a("ul"),E5=a("li"),I4e=a("strong"),JPr=o("speech_to_text"),YPr=o(" \u2014 "),XK=a("a"),KPr=o("TFSpeech2TextForConditionalGeneration"),ZPr=o(" (Speech2Text model)"),eBr=l(),F(C5.$$.fragment),GVe=l(),Vc=a("h2"),w5=a("a"),N4e=a("span"),F(Nx.$$.fragment),oBr=l(),q4e=a("span"),rBr=o("FlaxAutoModel"),OVe=l(),hr=a("div"),F(qx.$$.fragment),tBr=l(),Xc=a("p"),aBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zK=a("a"),nBr=o("from_pretrained()"),sBr=o(" class method or the "),QK=a("a"),lBr=o("from_config()"),iBr=o(` class
method.`),dBr=l(),jx=a("p"),cBr=o("This class cannot be instantiated directly using "),j4e=a("code"),fBr=o("__init__()"),mBr=o(" (throws an error)."),gBr=l(),Xt=a("div"),F(Dx.$$.fragment),hBr=l(),D4e=a("p"),pBr=o("Instantiates one of the base model classes of the library from a configuration."),_Br=l(),zc=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),bBr=o("not"),vBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),FBr=o("from_pretrained()"),TBr=o(" to load the model weights."),MBr=l(),F(A5.$$.fragment),EBr=l(),Or=a("div"),F(Gx.$$.fragment),CBr=l(),O4e=a("p"),wBr=o("Instantiate one of the base model classes of the library from a pretrained model."),ABr=l(),Fn=a("p"),LBr=o("The model class to instantiate is selected based on the "),V4e=a("code"),yBr=o("model_type"),xBr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),$Br=o("pretrained_model_name_or_path"),kBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(":"),PBr=l(),oe=a("ul"),L5=a("li"),Q4e=a("strong"),BBr=o("albert"),IBr=o(" \u2014 "),HK=a("a"),NBr=o("FlaxAlbertModel"),qBr=o(" (ALBERT model)"),jBr=l(),y5=a("li"),W4e=a("strong"),DBr=o("bart"),GBr=o(" \u2014 "),UK=a("a"),OBr=o("FlaxBartModel"),VBr=o(" (BART model)"),XBr=l(),x5=a("li"),H4e=a("strong"),zBr=o("beit"),QBr=o(" \u2014 "),JK=a("a"),WBr=o("FlaxBeitModel"),HBr=o(" (BEiT model)"),UBr=l(),$5=a("li"),U4e=a("strong"),JBr=o("bert"),YBr=o(" \u2014 "),YK=a("a"),KBr=o("FlaxBertModel"),ZBr=o(" (BERT model)"),eIr=l(),k5=a("li"),J4e=a("strong"),oIr=o("big_bird"),rIr=o(" \u2014 "),KK=a("a"),tIr=o("FlaxBigBirdModel"),aIr=o(" (BigBird model)"),nIr=l(),S5=a("li"),Y4e=a("strong"),sIr=o("blenderbot"),lIr=o(" \u2014 "),ZK=a("a"),iIr=o("FlaxBlenderbotModel"),dIr=o(" (Blenderbot model)"),cIr=l(),R5=a("li"),K4e=a("strong"),fIr=o("blenderbot-small"),mIr=o(" \u2014 "),eZ=a("a"),gIr=o("FlaxBlenderbotSmallModel"),hIr=o(" (BlenderbotSmall model)"),pIr=l(),P5=a("li"),Z4e=a("strong"),_Ir=o("clip"),uIr=o(" \u2014 "),oZ=a("a"),bIr=o("FlaxCLIPModel"),vIr=o(" (CLIP model)"),FIr=l(),B5=a("li"),eCe=a("strong"),TIr=o("distilbert"),MIr=o(" \u2014 "),rZ=a("a"),EIr=o("FlaxDistilBertModel"),CIr=o(" (DistilBERT model)"),wIr=l(),I5=a("li"),oCe=a("strong"),AIr=o("dpt"),LIr=o(" \u2014 "),tZ=a("a"),yIr=o("FlaxDPTModel"),xIr=o(" (DPT model)"),$Ir=l(),N5=a("li"),rCe=a("strong"),kIr=o("electra"),SIr=o(" \u2014 "),aZ=a("a"),RIr=o("FlaxElectraModel"),PIr=o(" (ELECTRA model)"),BIr=l(),q5=a("li"),tCe=a("strong"),IIr=o("gpt2"),NIr=o(" \u2014 "),nZ=a("a"),qIr=o("FlaxGPT2Model"),jIr=o(" (OpenAI GPT-2 model)"),DIr=l(),j5=a("li"),aCe=a("strong"),GIr=o("gpt_neo"),OIr=o(" \u2014 "),sZ=a("a"),VIr=o("FlaxGPTNeoModel"),XIr=o(" (GPT Neo model)"),zIr=l(),D5=a("li"),nCe=a("strong"),QIr=o("gptj"),WIr=o(" \u2014 "),lZ=a("a"),HIr=o("FlaxGPTJModel"),UIr=o(" (GPT-J model)"),JIr=l(),G5=a("li"),sCe=a("strong"),YIr=o("longt5"),KIr=o(" \u2014 "),iZ=a("a"),ZIr=o("FlaxLongT5Model"),eNr=o(" (LongT5 model)"),oNr=l(),O5=a("li"),lCe=a("strong"),rNr=o("marian"),tNr=o(" \u2014 "),dZ=a("a"),aNr=o("FlaxMarianModel"),nNr=o(" (Marian model)"),sNr=l(),V5=a("li"),iCe=a("strong"),lNr=o("mbart"),iNr=o(" \u2014 "),cZ=a("a"),dNr=o("FlaxMBartModel"),cNr=o(" (mBART model)"),fNr=l(),X5=a("li"),dCe=a("strong"),mNr=o("mt5"),gNr=o(" \u2014 "),fZ=a("a"),hNr=o("FlaxMT5Model"),pNr=o(" (MT5 model)"),_Nr=l(),z5=a("li"),cCe=a("strong"),uNr=o("opt"),bNr=o(" \u2014 "),mZ=a("a"),vNr=o("FlaxOPTModel"),FNr=o(" (OPT model)"),TNr=l(),Q5=a("li"),fCe=a("strong"),MNr=o("pegasus"),ENr=o(" \u2014 "),gZ=a("a"),CNr=o("FlaxPegasusModel"),wNr=o(" (Pegasus model)"),ANr=l(),W5=a("li"),mCe=a("strong"),LNr=o("roberta"),yNr=o(" \u2014 "),hZ=a("a"),xNr=o("FlaxRobertaModel"),$Nr=o(" (RoBERTa model)"),kNr=l(),H5=a("li"),gCe=a("strong"),SNr=o("roformer"),RNr=o(" \u2014 "),pZ=a("a"),PNr=o("FlaxRoFormerModel"),BNr=o(" (RoFormer model)"),INr=l(),U5=a("li"),hCe=a("strong"),NNr=o("t5"),qNr=o(" \u2014 "),_Z=a("a"),jNr=o("FlaxT5Model"),DNr=o(" (T5 model)"),GNr=l(),J5=a("li"),pCe=a("strong"),ONr=o("vision-text-dual-encoder"),VNr=o(" \u2014 "),uZ=a("a"),XNr=o("FlaxVisionTextDualEncoderModel"),zNr=o(" (VisionTextDualEncoder model)"),QNr=l(),Y5=a("li"),_Ce=a("strong"),WNr=o("vit"),HNr=o(" \u2014 "),bZ=a("a"),UNr=o("FlaxViTModel"),JNr=o(" (ViT model)"),YNr=l(),K5=a("li"),uCe=a("strong"),KNr=o("wav2vec2"),ZNr=o(" \u2014 "),vZ=a("a"),eqr=o("FlaxWav2Vec2Model"),oqr=o(" (Wav2Vec2 model)"),rqr=l(),Z5=a("li"),bCe=a("strong"),tqr=o("xglm"),aqr=o(" \u2014 "),FZ=a("a"),nqr=o("FlaxXGLMModel"),sqr=o(" (XGLM model)"),lqr=l(),e3=a("li"),vCe=a("strong"),iqr=o("xlm-roberta"),dqr=o(" \u2014 "),TZ=a("a"),cqr=o("FlaxXLMRobertaModel"),fqr=o(" (XLM-RoBERTa model)"),mqr=l(),F(o3.$$.fragment),VVe=l(),Qc=a("h2"),r3=a("a"),FCe=a("span"),F(Ox.$$.fragment),gqr=l(),TCe=a("span"),hqr=o("FlaxAutoModelForCausalLM"),XVe=l(),pr=a("div"),F(Vx.$$.fragment),pqr=l(),Wc=a("p"),_qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MZ=a("a"),uqr=o("from_pretrained()"),bqr=o(" class method or the "),EZ=a("a"),vqr=o("from_config()"),Fqr=o(` class
method.`),Tqr=l(),Xx=a("p"),Mqr=o("This class cannot be instantiated directly using "),MCe=a("code"),Eqr=o("__init__()"),Cqr=o(" (throws an error)."),wqr=l(),zt=a("div"),F(zx.$$.fragment),Aqr=l(),ECe=a("p"),Lqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yqr=l(),Hc=a("p"),xqr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),$qr=o("not"),kqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),Sqr=o("from_pretrained()"),Rqr=o(" to load the model weights."),Pqr=l(),F(t3.$$.fragment),Bqr=l(),Vr=a("div"),F(Qx.$$.fragment),Iqr=l(),wCe=a("p"),Nqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qqr=l(),Tn=a("p"),jqr=o("The model class to instantiate is selected based on the "),ACe=a("code"),Dqr=o("model_type"),Gqr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),Oqr=o("pretrained_model_name_or_path"),Vqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(":"),Qqr=l(),xe=a("ul"),a3=a("li"),xCe=a("strong"),Wqr=o("bart"),Hqr=o(" \u2014 "),wZ=a("a"),Uqr=o("FlaxBartForCausalLM"),Jqr=o(" (BART model)"),Yqr=l(),n3=a("li"),$Ce=a("strong"),Kqr=o("bert"),Zqr=o(" \u2014 "),AZ=a("a"),ejr=o("FlaxBertForCausalLM"),ojr=o(" (BERT model)"),rjr=l(),s3=a("li"),kCe=a("strong"),tjr=o("big_bird"),ajr=o(" \u2014 "),LZ=a("a"),njr=o("FlaxBigBirdForCausalLM"),sjr=o(" (BigBird model)"),ljr=l(),l3=a("li"),SCe=a("strong"),ijr=o("electra"),djr=o(" \u2014 "),yZ=a("a"),cjr=o("FlaxElectraForCausalLM"),fjr=o(" (ELECTRA model)"),mjr=l(),i3=a("li"),RCe=a("strong"),gjr=o("gpt2"),hjr=o(" \u2014 "),xZ=a("a"),pjr=o("FlaxGPT2LMHeadModel"),_jr=o(" (OpenAI GPT-2 model)"),ujr=l(),d3=a("li"),PCe=a("strong"),bjr=o("gpt_neo"),vjr=o(" \u2014 "),$Z=a("a"),Fjr=o("FlaxGPTNeoForCausalLM"),Tjr=o(" (GPT Neo model)"),Mjr=l(),c3=a("li"),BCe=a("strong"),Ejr=o("gptj"),Cjr=o(" \u2014 "),kZ=a("a"),wjr=o("FlaxGPTJForCausalLM"),Ajr=o(" (GPT-J model)"),Ljr=l(),f3=a("li"),ICe=a("strong"),yjr=o("opt"),xjr=o(" \u2014 "),SZ=a("a"),$jr=o("FlaxOPTForCausalLM"),kjr=o(" (OPT model)"),Sjr=l(),m3=a("li"),NCe=a("strong"),Rjr=o("roberta"),Pjr=o(" \u2014 "),RZ=a("a"),Bjr=o("FlaxRobertaForCausalLM"),Ijr=o(" (RoBERTa model)"),Njr=l(),g3=a("li"),qCe=a("strong"),qjr=o("xglm"),jjr=o(" \u2014 "),PZ=a("a"),Djr=o("FlaxXGLMForCausalLM"),Gjr=o(" (XGLM model)"),Ojr=l(),F(h3.$$.fragment),zVe=l(),Uc=a("h2"),p3=a("a"),jCe=a("span"),F(Wx.$$.fragment),Vjr=l(),DCe=a("span"),Xjr=o("FlaxAutoModelForPreTraining"),QVe=l(),_r=a("div"),F(Hx.$$.fragment),zjr=l(),Jc=a("p"),Qjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BZ=a("a"),Wjr=o("from_pretrained()"),Hjr=o(" class method or the "),IZ=a("a"),Ujr=o("from_config()"),Jjr=o(` class
method.`),Yjr=l(),Ux=a("p"),Kjr=o("This class cannot be instantiated directly using "),GCe=a("code"),Zjr=o("__init__()"),eDr=o(" (throws an error)."),oDr=l(),Qt=a("div"),F(Jx.$$.fragment),rDr=l(),OCe=a("p"),tDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aDr=l(),Yc=a("p"),nDr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),sDr=o("not"),lDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),iDr=o("from_pretrained()"),dDr=o(" to load the model weights."),cDr=l(),F(_3.$$.fragment),fDr=l(),Xr=a("div"),F(Yx.$$.fragment),mDr=l(),XCe=a("p"),gDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hDr=l(),Mn=a("p"),pDr=o("The model class to instantiate is selected based on the "),zCe=a("code"),_Dr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(":"),MDr=l(),Ee=a("ul"),u3=a("li"),HCe=a("strong"),EDr=o("albert"),CDr=o(" \u2014 "),qZ=a("a"),wDr=o("FlaxAlbertForPreTraining"),ADr=o(" (ALBERT model)"),LDr=l(),b3=a("li"),UCe=a("strong"),yDr=o("bart"),xDr=o(" \u2014 "),jZ=a("a"),$Dr=o("FlaxBartForConditionalGeneration"),kDr=o(" (BART model)"),SDr=l(),v3=a("li"),JCe=a("strong"),RDr=o("bert"),PDr=o(" \u2014 "),DZ=a("a"),BDr=o("FlaxBertForPreTraining"),IDr=o(" (BERT model)"),NDr=l(),F3=a("li"),YCe=a("strong"),qDr=o("big_bird"),jDr=o(" \u2014 "),GZ=a("a"),DDr=o("FlaxBigBirdForPreTraining"),GDr=o(" (BigBird model)"),ODr=l(),T3=a("li"),KCe=a("strong"),VDr=o("electra"),XDr=o(" \u2014 "),OZ=a("a"),zDr=o("FlaxElectraForPreTraining"),QDr=o(" (ELECTRA model)"),WDr=l(),M3=a("li"),ZCe=a("strong"),HDr=o("longt5"),UDr=o(" \u2014 "),VZ=a("a"),JDr=o("FlaxLongT5ForConditionalGeneration"),YDr=o(" (LongT5 model)"),KDr=l(),E3=a("li"),e5e=a("strong"),ZDr=o("mbart"),eGr=o(" \u2014 "),XZ=a("a"),oGr=o("FlaxMBartForConditionalGeneration"),rGr=o(" (mBART model)"),tGr=l(),C3=a("li"),o5e=a("strong"),aGr=o("mt5"),nGr=o(" \u2014 "),zZ=a("a"),sGr=o("FlaxMT5ForConditionalGeneration"),lGr=o(" (MT5 model)"),iGr=l(),w3=a("li"),r5e=a("strong"),dGr=o("roberta"),cGr=o(" \u2014 "),QZ=a("a"),fGr=o("FlaxRobertaForMaskedLM"),mGr=o(" (RoBERTa model)"),gGr=l(),A3=a("li"),t5e=a("strong"),hGr=o("roformer"),pGr=o(" \u2014 "),WZ=a("a"),_Gr=o("FlaxRoFormerForMaskedLM"),uGr=o(" (RoFormer model)"),bGr=l(),L3=a("li"),a5e=a("strong"),vGr=o("t5"),FGr=o(" \u2014 "),HZ=a("a"),TGr=o("FlaxT5ForConditionalGeneration"),MGr=o(" (T5 model)"),EGr=l(),y3=a("li"),n5e=a("strong"),CGr=o("wav2vec2"),wGr=o(" \u2014 "),UZ=a("a"),AGr=o("FlaxWav2Vec2ForPreTraining"),LGr=o(" (Wav2Vec2 model)"),yGr=l(),x3=a("li"),s5e=a("strong"),xGr=o("xlm-roberta"),$Gr=o(" \u2014 "),JZ=a("a"),kGr=o("FlaxXLMRobertaForMaskedLM"),SGr=o(" (XLM-RoBERTa model)"),RGr=l(),F($3.$$.fragment),WVe=l(),Kc=a("h2"),k3=a("a"),l5e=a("span"),F(Kx.$$.fragment),PGr=l(),i5e=a("span"),BGr=o("FlaxAutoModelForMaskedLM"),HVe=l(),ur=a("div"),F(Zx.$$.fragment),IGr=l(),Zc=a("p"),NGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YZ=a("a"),qGr=o("from_pretrained()"),jGr=o(" class method or the "),KZ=a("a"),DGr=o("from_config()"),GGr=o(` class
method.`),OGr=l(),e$=a("p"),VGr=o("This class cannot be instantiated directly using "),d5e=a("code"),XGr=o("__init__()"),zGr=o(" (throws an error)."),QGr=l(),Wt=a("div"),F(o$.$$.fragment),WGr=l(),c5e=a("p"),HGr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UGr=l(),ef=a("p"),JGr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),YGr=o("not"),KGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),ZGr=o("from_pretrained()"),eOr=o(" to load the model weights."),oOr=l(),F(S3.$$.fragment),rOr=l(),zr=a("div"),F(r$.$$.fragment),tOr=l(),m5e=a("p"),aOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nOr=l(),En=a("p"),sOr=o("The model class to instantiate is selected based on the "),g5e=a("code"),lOr=o("model_type"),iOr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),dOr=o("pretrained_model_name_or_path"),cOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),fOr=o("pretrained_model_name_or_path"),mOr=o(":"),gOr=l(),$e=a("ul"),R3=a("li"),_5e=a("strong"),hOr=o("albert"),pOr=o(" \u2014 "),eee=a("a"),_Or=o("FlaxAlbertForMaskedLM"),uOr=o(" (ALBERT model)"),bOr=l(),P3=a("li"),u5e=a("strong"),vOr=o("bart"),FOr=o(" \u2014 "),oee=a("a"),TOr=o("FlaxBartForConditionalGeneration"),MOr=o(" (BART model)"),EOr=l(),B3=a("li"),b5e=a("strong"),COr=o("bert"),wOr=o(" \u2014 "),ree=a("a"),AOr=o("FlaxBertForMaskedLM"),LOr=o(" (BERT model)"),yOr=l(),I3=a("li"),v5e=a("strong"),xOr=o("big_bird"),$Or=o(" \u2014 "),tee=a("a"),kOr=o("FlaxBigBirdForMaskedLM"),SOr=o(" (BigBird model)"),ROr=l(),N3=a("li"),F5e=a("strong"),POr=o("distilbert"),BOr=o(" \u2014 "),aee=a("a"),IOr=o("FlaxDistilBertForMaskedLM"),NOr=o(" (DistilBERT model)"),qOr=l(),q3=a("li"),T5e=a("strong"),jOr=o("electra"),DOr=o(" \u2014 "),nee=a("a"),GOr=o("FlaxElectraForMaskedLM"),OOr=o(" (ELECTRA model)"),VOr=l(),j3=a("li"),M5e=a("strong"),XOr=o("mbart"),zOr=o(" \u2014 "),see=a("a"),QOr=o("FlaxMBartForConditionalGeneration"),WOr=o(" (mBART model)"),HOr=l(),D3=a("li"),E5e=a("strong"),UOr=o("roberta"),JOr=o(" \u2014 "),lee=a("a"),YOr=o("FlaxRobertaForMaskedLM"),KOr=o(" (RoBERTa model)"),ZOr=l(),G3=a("li"),C5e=a("strong"),eVr=o("roformer"),oVr=o(" \u2014 "),iee=a("a"),rVr=o("FlaxRoFormerForMaskedLM"),tVr=o(" (RoFormer model)"),aVr=l(),O3=a("li"),w5e=a("strong"),nVr=o("xlm-roberta"),sVr=o(" \u2014 "),dee=a("a"),lVr=o("FlaxXLMRobertaForMaskedLM"),iVr=o(" (XLM-RoBERTa model)"),dVr=l(),F(V3.$$.fragment),UVe=l(),of=a("h2"),X3=a("a"),A5e=a("span"),F(t$.$$.fragment),cVr=l(),L5e=a("span"),fVr=o("FlaxAutoModelForSeq2SeqLM"),JVe=l(),br=a("div"),F(a$.$$.fragment),mVr=l(),rf=a("p"),gVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cee=a("a"),hVr=o("from_pretrained()"),pVr=o(" class method or the "),fee=a("a"),_Vr=o("from_config()"),uVr=o(` class
method.`),bVr=l(),n$=a("p"),vVr=o("This class cannot be instantiated directly using "),y5e=a("code"),FVr=o("__init__()"),TVr=o(" (throws an error)."),MVr=l(),Ht=a("div"),F(s$.$$.fragment),EVr=l(),x5e=a("p"),CVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wVr=l(),tf=a("p"),AVr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),LVr=o("not"),yVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),xVr=o("from_pretrained()"),$Vr=o(" to load the model weights."),kVr=l(),F(z3.$$.fragment),SVr=l(),Qr=a("div"),F(l$.$$.fragment),RVr=l(),k5e=a("p"),PVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BVr=l(),Cn=a("p"),IVr=o("The model class to instantiate is selected based on the "),S5e=a("code"),NVr=o("model_type"),qVr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),jVr=o("pretrained_model_name_or_path"),DVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=a("code"),GVr=o("pretrained_model_name_or_path"),OVr=o(":"),VVr=l(),ke=a("ul"),Q3=a("li"),B5e=a("strong"),XVr=o("bart"),zVr=o(" \u2014 "),gee=a("a"),QVr=o("FlaxBartForConditionalGeneration"),WVr=o(" (BART model)"),HVr=l(),W3=a("li"),I5e=a("strong"),UVr=o("blenderbot"),JVr=o(" \u2014 "),hee=a("a"),YVr=o("FlaxBlenderbotForConditionalGeneration"),KVr=o(" (Blenderbot model)"),ZVr=l(),H3=a("li"),N5e=a("strong"),eXr=o("blenderbot-small"),oXr=o(" \u2014 "),pee=a("a"),rXr=o("FlaxBlenderbotSmallForConditionalGeneration"),tXr=o(" (BlenderbotSmall model)"),aXr=l(),U3=a("li"),q5e=a("strong"),nXr=o("encoder-decoder"),sXr=o(" \u2014 "),_ee=a("a"),lXr=o("FlaxEncoderDecoderModel"),iXr=o(" (Encoder decoder model)"),dXr=l(),J3=a("li"),j5e=a("strong"),cXr=o("longt5"),fXr=o(" \u2014 "),uee=a("a"),mXr=o("FlaxLongT5ForConditionalGeneration"),gXr=o(" (LongT5 model)"),hXr=l(),Y3=a("li"),D5e=a("strong"),pXr=o("marian"),_Xr=o(" \u2014 "),bee=a("a"),uXr=o("FlaxMarianMTModel"),bXr=o(" (Marian model)"),vXr=l(),K3=a("li"),G5e=a("strong"),FXr=o("mbart"),TXr=o(" \u2014 "),vee=a("a"),MXr=o("FlaxMBartForConditionalGeneration"),EXr=o(" (mBART model)"),CXr=l(),Z3=a("li"),O5e=a("strong"),wXr=o("mt5"),AXr=o(" \u2014 "),Fee=a("a"),LXr=o("FlaxMT5ForConditionalGeneration"),yXr=o(" (MT5 model)"),xXr=l(),e0=a("li"),V5e=a("strong"),$Xr=o("pegasus"),kXr=o(" \u2014 "),Tee=a("a"),SXr=o("FlaxPegasusForConditionalGeneration"),RXr=o(" (Pegasus model)"),PXr=l(),o0=a("li"),X5e=a("strong"),BXr=o("t5"),IXr=o(" \u2014 "),Mee=a("a"),NXr=o("FlaxT5ForConditionalGeneration"),qXr=o(" (T5 model)"),jXr=l(),F(r0.$$.fragment),YVe=l(),af=a("h2"),t0=a("a"),z5e=a("span"),F(i$.$$.fragment),DXr=l(),Q5e=a("span"),GXr=o("FlaxAutoModelForSequenceClassification"),KVe=l(),vr=a("div"),F(d$.$$.fragment),OXr=l(),nf=a("p"),VXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eee=a("a"),XXr=o("from_pretrained()"),zXr=o(" class method or the "),Cee=a("a"),QXr=o("from_config()"),WXr=o(` class
method.`),HXr=l(),c$=a("p"),UXr=o("This class cannot be instantiated directly using "),W5e=a("code"),JXr=o("__init__()"),YXr=o(" (throws an error)."),KXr=l(),Ut=a("div"),F(f$.$$.fragment),ZXr=l(),H5e=a("p"),ezr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ozr=l(),sf=a("p"),rzr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),tzr=o("not"),azr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),nzr=o("from_pretrained()"),szr=o(" to load the model weights."),lzr=l(),F(a0.$$.fragment),izr=l(),Wr=a("div"),F(m$.$$.fragment),dzr=l(),J5e=a("p"),czr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fzr=l(),wn=a("p"),mzr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),gzr=o("model_type"),hzr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),pzr=o("pretrained_model_name_or_path"),_zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),uzr=o("pretrained_model_name_or_path"),bzr=o(":"),vzr=l(),Se=a("ul"),n0=a("li"),e3e=a("strong"),Fzr=o("albert"),Tzr=o(" \u2014 "),Aee=a("a"),Mzr=o("FlaxAlbertForSequenceClassification"),Ezr=o(" (ALBERT model)"),Czr=l(),s0=a("li"),o3e=a("strong"),wzr=o("bart"),Azr=o(" \u2014 "),Lee=a("a"),Lzr=o("FlaxBartForSequenceClassification"),yzr=o(" (BART model)"),xzr=l(),l0=a("li"),r3e=a("strong"),$zr=o("bert"),kzr=o(" \u2014 "),yee=a("a"),Szr=o("FlaxBertForSequenceClassification"),Rzr=o(" (BERT model)"),Pzr=l(),i0=a("li"),t3e=a("strong"),Bzr=o("big_bird"),Izr=o(" \u2014 "),xee=a("a"),Nzr=o("FlaxBigBirdForSequenceClassification"),qzr=o(" (BigBird model)"),jzr=l(),d0=a("li"),a3e=a("strong"),Dzr=o("distilbert"),Gzr=o(" \u2014 "),$ee=a("a"),Ozr=o("FlaxDistilBertForSequenceClassification"),Vzr=o(" (DistilBERT model)"),Xzr=l(),c0=a("li"),n3e=a("strong"),zzr=o("electra"),Qzr=o(" \u2014 "),kee=a("a"),Wzr=o("FlaxElectraForSequenceClassification"),Hzr=o(" (ELECTRA model)"),Uzr=l(),f0=a("li"),s3e=a("strong"),Jzr=o("mbart"),Yzr=o(" \u2014 "),See=a("a"),Kzr=o("FlaxMBartForSequenceClassification"),Zzr=o(" (mBART model)"),eQr=l(),m0=a("li"),l3e=a("strong"),oQr=o("roberta"),rQr=o(" \u2014 "),Ree=a("a"),tQr=o("FlaxRobertaForSequenceClassification"),aQr=o(" (RoBERTa model)"),nQr=l(),g0=a("li"),i3e=a("strong"),sQr=o("roformer"),lQr=o(" \u2014 "),Pee=a("a"),iQr=o("FlaxRoFormerForSequenceClassification"),dQr=o(" (RoFormer model)"),cQr=l(),h0=a("li"),d3e=a("strong"),fQr=o("xlm-roberta"),mQr=o(" \u2014 "),Bee=a("a"),gQr=o("FlaxXLMRobertaForSequenceClassification"),hQr=o(" (XLM-RoBERTa model)"),pQr=l(),F(p0.$$.fragment),ZVe=l(),lf=a("h2"),_0=a("a"),c3e=a("span"),F(g$.$$.fragment),_Qr=l(),f3e=a("span"),uQr=o("FlaxAutoModelForQuestionAnswering"),eXe=l(),Fr=a("div"),F(h$.$$.fragment),bQr=l(),df=a("p"),vQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iee=a("a"),FQr=o("from_pretrained()"),TQr=o(" class method or the "),Nee=a("a"),MQr=o("from_config()"),EQr=o(` class
method.`),CQr=l(),p$=a("p"),wQr=o("This class cannot be instantiated directly using "),m3e=a("code"),AQr=o("__init__()"),LQr=o(" (throws an error)."),yQr=l(),Jt=a("div"),F(_$.$$.fragment),xQr=l(),g3e=a("p"),$Qr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kQr=l(),cf=a("p"),SQr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),RQr=o("not"),PQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),BQr=o("from_pretrained()"),IQr=o(" to load the model weights."),NQr=l(),F(u0.$$.fragment),qQr=l(),Hr=a("div"),F(u$.$$.fragment),jQr=l(),p3e=a("p"),DQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GQr=l(),An=a("p"),OQr=o("The model class to instantiate is selected based on the "),_3e=a("code"),VQr=o("model_type"),XQr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),zQr=o("pretrained_model_name_or_path"),QQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),WQr=o("pretrained_model_name_or_path"),HQr=o(":"),UQr=l(),Re=a("ul"),b0=a("li"),v3e=a("strong"),JQr=o("albert"),YQr=o(" \u2014 "),jee=a("a"),KQr=o("FlaxAlbertForQuestionAnswering"),ZQr=o(" (ALBERT model)"),eWr=l(),v0=a("li"),F3e=a("strong"),oWr=o("bart"),rWr=o(" \u2014 "),Dee=a("a"),tWr=o("FlaxBartForQuestionAnswering"),aWr=o(" (BART model)"),nWr=l(),F0=a("li"),T3e=a("strong"),sWr=o("bert"),lWr=o(" \u2014 "),Gee=a("a"),iWr=o("FlaxBertForQuestionAnswering"),dWr=o(" (BERT model)"),cWr=l(),T0=a("li"),M3e=a("strong"),fWr=o("big_bird"),mWr=o(" \u2014 "),Oee=a("a"),gWr=o("FlaxBigBirdForQuestionAnswering"),hWr=o(" (BigBird model)"),pWr=l(),M0=a("li"),E3e=a("strong"),_Wr=o("distilbert"),uWr=o(" \u2014 "),Vee=a("a"),bWr=o("FlaxDistilBertForQuestionAnswering"),vWr=o(" (DistilBERT model)"),FWr=l(),E0=a("li"),C3e=a("strong"),TWr=o("electra"),MWr=o(" \u2014 "),Xee=a("a"),EWr=o("FlaxElectraForQuestionAnswering"),CWr=o(" (ELECTRA model)"),wWr=l(),C0=a("li"),w3e=a("strong"),AWr=o("mbart"),LWr=o(" \u2014 "),zee=a("a"),yWr=o("FlaxMBartForQuestionAnswering"),xWr=o(" (mBART model)"),$Wr=l(),w0=a("li"),A3e=a("strong"),kWr=o("roberta"),SWr=o(" \u2014 "),Qee=a("a"),RWr=o("FlaxRobertaForQuestionAnswering"),PWr=o(" (RoBERTa model)"),BWr=l(),A0=a("li"),L3e=a("strong"),IWr=o("roformer"),NWr=o(" \u2014 "),Wee=a("a"),qWr=o("FlaxRoFormerForQuestionAnswering"),jWr=o(" (RoFormer model)"),DWr=l(),L0=a("li"),y3e=a("strong"),GWr=o("xlm-roberta"),OWr=o(" \u2014 "),Hee=a("a"),VWr=o("FlaxXLMRobertaForQuestionAnswering"),XWr=o(" (XLM-RoBERTa model)"),zWr=l(),F(y0.$$.fragment),oXe=l(),ff=a("h2"),x0=a("a"),x3e=a("span"),F(b$.$$.fragment),QWr=l(),$3e=a("span"),WWr=o("FlaxAutoModelForTokenClassification"),rXe=l(),Tr=a("div"),F(v$.$$.fragment),HWr=l(),mf=a("p"),UWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uee=a("a"),JWr=o("from_pretrained()"),YWr=o(" class method or the "),Jee=a("a"),KWr=o("from_config()"),ZWr=o(` class
method.`),eHr=l(),F$=a("p"),oHr=o("This class cannot be instantiated directly using "),k3e=a("code"),rHr=o("__init__()"),tHr=o(" (throws an error)."),aHr=l(),Yt=a("div"),F(T$.$$.fragment),nHr=l(),S3e=a("p"),sHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lHr=l(),gf=a("p"),iHr=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),dHr=o("not"),cHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),fHr=o("from_pretrained()"),mHr=o(" to load the model weights."),gHr=l(),F($0.$$.fragment),hHr=l(),Ur=a("div"),F(M$.$$.fragment),pHr=l(),P3e=a("p"),_Hr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uHr=l(),Ln=a("p"),bHr=o("The model class to instantiate is selected based on the "),B3e=a("code"),vHr=o("model_type"),FHr=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),THr=o("pretrained_model_name_or_path"),MHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=a("code"),EHr=o("pretrained_model_name_or_path"),CHr=o(":"),wHr=l(),Ve=a("ul"),k0=a("li"),q3e=a("strong"),AHr=o("albert"),LHr=o(" \u2014 "),Kee=a("a"),yHr=o("FlaxAlbertForTokenClassification"),xHr=o(" (ALBERT model)"),$Hr=l(),S0=a("li"),j3e=a("strong"),kHr=o("bert"),SHr=o(" \u2014 "),Zee=a("a"),RHr=o("FlaxBertForTokenClassification"),PHr=o(" (BERT model)"),BHr=l(),R0=a("li"),D3e=a("strong"),IHr=o("big_bird"),NHr=o(" \u2014 "),eoe=a("a"),qHr=o("FlaxBigBirdForTokenClassification"),jHr=o(" (BigBird model)"),DHr=l(),P0=a("li"),G3e=a("strong"),GHr=o("distilbert"),OHr=o(" \u2014 "),ooe=a("a"),VHr=o("FlaxDistilBertForTokenClassification"),XHr=o(" (DistilBERT model)"),zHr=l(),B0=a("li"),O3e=a("strong"),QHr=o("electra"),WHr=o(" \u2014 "),roe=a("a"),HHr=o("FlaxElectraForTokenClassification"),UHr=o(" (ELECTRA model)"),JHr=l(),I0=a("li"),V3e=a("strong"),YHr=o("roberta"),KHr=o(" \u2014 "),toe=a("a"),ZHr=o("FlaxRobertaForTokenClassification"),eUr=o(" (RoBERTa model)"),oUr=l(),N0=a("li"),X3e=a("strong"),rUr=o("roformer"),tUr=o(" \u2014 "),aoe=a("a"),aUr=o("FlaxRoFormerForTokenClassification"),nUr=o(" (RoFormer model)"),sUr=l(),q0=a("li"),z3e=a("strong"),lUr=o("xlm-roberta"),iUr=o(" \u2014 "),noe=a("a"),dUr=o("FlaxXLMRobertaForTokenClassification"),cUr=o(" (XLM-RoBERTa model)"),fUr=l(),F(j0.$$.fragment),tXe=l(),hf=a("h2"),D0=a("a"),Q3e=a("span"),F(E$.$$.fragment),mUr=l(),W3e=a("span"),gUr=o("FlaxAutoModelForMultipleChoice"),aXe=l(),Mr=a("div"),F(C$.$$.fragment),hUr=l(),pf=a("p"),pUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),soe=a("a"),_Ur=o("from_pretrained()"),uUr=o(" class method or the "),loe=a("a"),bUr=o("from_config()"),vUr=o(` class
method.`),FUr=l(),w$=a("p"),TUr=o("This class cannot be instantiated directly using "),H3e=a("code"),MUr=o("__init__()"),EUr=o(" (throws an error)."),CUr=l(),Kt=a("div"),F(A$.$$.fragment),wUr=l(),U3e=a("p"),AUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LUr=l(),_f=a("p"),yUr=o(`Note:
Loading a model from its configuration file does `),J3e=a("strong"),xUr=o("not"),$Ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),kUr=o("from_pretrained()"),SUr=o(" to load the model weights."),RUr=l(),F(G0.$$.fragment),PUr=l(),Jr=a("div"),F(L$.$$.fragment),BUr=l(),Y3e=a("p"),IUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NUr=l(),yn=a("p"),qUr=o("The model class to instantiate is selected based on the "),K3e=a("code"),jUr=o("model_type"),DUr=o(` property of the config object (either
passed as an argument or loaded from `),Z3e=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),VUr=o("pretrained_model_name_or_path"),XUr=o(":"),zUr=l(),Xe=a("ul"),O0=a("li"),o0e=a("strong"),QUr=o("albert"),WUr=o(" \u2014 "),doe=a("a"),HUr=o("FlaxAlbertForMultipleChoice"),UUr=o(" (ALBERT model)"),JUr=l(),V0=a("li"),r0e=a("strong"),YUr=o("bert"),KUr=o(" \u2014 "),coe=a("a"),ZUr=o("FlaxBertForMultipleChoice"),eJr=o(" (BERT model)"),oJr=l(),X0=a("li"),t0e=a("strong"),rJr=o("big_bird"),tJr=o(" \u2014 "),foe=a("a"),aJr=o("FlaxBigBirdForMultipleChoice"),nJr=o(" (BigBird model)"),sJr=l(),z0=a("li"),a0e=a("strong"),lJr=o("distilbert"),iJr=o(" \u2014 "),moe=a("a"),dJr=o("FlaxDistilBertForMultipleChoice"),cJr=o(" (DistilBERT model)"),fJr=l(),Q0=a("li"),n0e=a("strong"),mJr=o("electra"),gJr=o(" \u2014 "),goe=a("a"),hJr=o("FlaxElectraForMultipleChoice"),pJr=o(" (ELECTRA model)"),_Jr=l(),W0=a("li"),s0e=a("strong"),uJr=o("roberta"),bJr=o(" \u2014 "),hoe=a("a"),vJr=o("FlaxRobertaForMultipleChoice"),FJr=o(" (RoBERTa model)"),TJr=l(),H0=a("li"),l0e=a("strong"),MJr=o("roformer"),EJr=o(" \u2014 "),poe=a("a"),CJr=o("FlaxRoFormerForMultipleChoice"),wJr=o(" (RoFormer model)"),AJr=l(),U0=a("li"),i0e=a("strong"),LJr=o("xlm-roberta"),yJr=o(" \u2014 "),_oe=a("a"),xJr=o("FlaxXLMRobertaForMultipleChoice"),$Jr=o(" (XLM-RoBERTa model)"),kJr=l(),F(J0.$$.fragment),nXe=l(),uf=a("h2"),Y0=a("a"),d0e=a("span"),F(y$.$$.fragment),SJr=l(),c0e=a("span"),RJr=o("FlaxAutoModelForNextSentencePrediction"),sXe=l(),Er=a("div"),F(x$.$$.fragment),PJr=l(),bf=a("p"),BJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uoe=a("a"),IJr=o("from_pretrained()"),NJr=o(" class method or the "),boe=a("a"),qJr=o("from_config()"),jJr=o(` class
method.`),DJr=l(),$$=a("p"),GJr=o("This class cannot be instantiated directly using "),f0e=a("code"),OJr=o("__init__()"),VJr=o(" (throws an error)."),XJr=l(),Zt=a("div"),F(k$.$$.fragment),zJr=l(),m0e=a("p"),QJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WJr=l(),vf=a("p"),HJr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),UJr=o("not"),JJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),YJr=o("from_pretrained()"),KJr=o(" to load the model weights."),ZJr=l(),F(K0.$$.fragment),eYr=l(),Yr=a("div"),F(S$.$$.fragment),oYr=l(),h0e=a("p"),rYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tYr=l(),xn=a("p"),aYr=o("The model class to instantiate is selected based on the "),p0e=a("code"),nYr=o("model_type"),sYr=o(` property of the config object (either
passed as an argument or loaded from `),_0e=a("code"),lYr=o("pretrained_model_name_or_path"),iYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),dYr=o("pretrained_model_name_or_path"),cYr=o(":"),fYr=l(),b0e=a("ul"),Z0=a("li"),v0e=a("strong"),mYr=o("bert"),gYr=o(" \u2014 "),Foe=a("a"),hYr=o("FlaxBertForNextSentencePrediction"),pYr=o(" (BERT model)"),_Yr=l(),F(ew.$$.fragment),lXe=l(),Ff=a("h2"),ow=a("a"),F0e=a("span"),F(R$.$$.fragment),uYr=l(),T0e=a("span"),bYr=o("FlaxAutoModelForImageClassification"),iXe=l(),Cr=a("div"),F(P$.$$.fragment),vYr=l(),Tf=a("p"),FYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Toe=a("a"),TYr=o("from_pretrained()"),MYr=o(" class method or the "),Moe=a("a"),EYr=o("from_config()"),CYr=o(` class
method.`),wYr=l(),B$=a("p"),AYr=o("This class cannot be instantiated directly using "),M0e=a("code"),LYr=o("__init__()"),yYr=o(" (throws an error)."),xYr=l(),ea=a("div"),F(I$.$$.fragment),$Yr=l(),E0e=a("p"),kYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SYr=l(),Mf=a("p"),RYr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),PYr=o("not"),BYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),IYr=o("from_pretrained()"),NYr=o(" to load the model weights."),qYr=l(),F(rw.$$.fragment),jYr=l(),Kr=a("div"),F(N$.$$.fragment),DYr=l(),w0e=a("p"),GYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OYr=l(),$n=a("p"),VYr=o("The model class to instantiate is selected based on the "),A0e=a("code"),XYr=o("model_type"),zYr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),QYr=o("pretrained_model_name_or_path"),WYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(":"),JYr=l(),q$=a("ul"),tw=a("li"),x0e=a("strong"),YYr=o("beit"),KYr=o(" \u2014 "),Coe=a("a"),ZYr=o("FlaxBeitForImageClassification"),eKr=o(" (BEiT model)"),oKr=l(),aw=a("li"),$0e=a("strong"),rKr=o("vit"),tKr=o(" \u2014 "),woe=a("a"),aKr=o("FlaxViTForImageClassification"),nKr=o(" (ViT model)"),sKr=l(),F(nw.$$.fragment),dXe=l(),Ef=a("h2"),sw=a("a"),k0e=a("span"),F(j$.$$.fragment),lKr=l(),S0e=a("span"),iKr=o("FlaxAutoModelForVision2Seq"),cXe=l(),wr=a("div"),F(D$.$$.fragment),dKr=l(),Cf=a("p"),cKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aoe=a("a"),fKr=o("from_pretrained()"),mKr=o(" class method or the "),Loe=a("a"),gKr=o("from_config()"),hKr=o(` class
method.`),pKr=l(),G$=a("p"),_Kr=o("This class cannot be instantiated directly using "),R0e=a("code"),uKr=o("__init__()"),bKr=o(" (throws an error)."),vKr=l(),oa=a("div"),F(O$.$$.fragment),FKr=l(),P0e=a("p"),TKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MKr=l(),wf=a("p"),EKr=o(`Note:
Loading a model from its configuration file does `),B0e=a("strong"),CKr=o("not"),wKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=a("a"),AKr=o("from_pretrained()"),LKr=o(" to load the model weights."),yKr=l(),F(lw.$$.fragment),xKr=l(),Zr=a("div"),F(V$.$$.fragment),$Kr=l(),I0e=a("p"),kKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SKr=l(),kn=a("p"),RKr=o("The model class to instantiate is selected based on the "),N0e=a("code"),PKr=o("model_type"),BKr=o(` property of the config object (either
passed as an argument or loaded from `),q0e=a("code"),IKr=o("pretrained_model_name_or_path"),NKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=a("code"),qKr=o("pretrained_model_name_or_path"),jKr=o(":"),DKr=l(),D0e=a("ul"),iw=a("li"),G0e=a("strong"),GKr=o("vision-encoder-decoder"),OKr=o(" \u2014 "),xoe=a("a"),VKr=o("FlaxVisionEncoderDecoderModel"),XKr=o(" (Vision Encoder decoder model)"),zKr=l(),F(dw.$$.fragment),this.h()},l(f){const u=LGt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var X$=s(p);m=n(X$,"A",{id:!0,class:!0,href:!0});var O0e=s(m);_=n(O0e,"SPAN",{});var V0e=s(_);T(d.$$.fragment,V0e),V0e.forEach(t),O0e.forEach(t),h=i(X$),Eo=n(X$,"SPAN",{});var X0e=s(Eo);Mi=r(X0e,"Auto Classes"),X0e.forEach(t),X$.forEach(t),xf=i(f),at=n(f,"P",{});var z$=s(at);Ei=r(z$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(z$,"CODE",{});var z0e=s(Ci);$6=r(z0e,"from_pretrained()"),z0e.forEach(t),$f=r(z$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),z$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var Q0e=s(Rn);k6=r(Q0e,"AutoConfig"),Q0e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var W0e=s(Bn);S6=r(W0e,"AutoModel"),W0e.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var H0e=s(In);R6=r(H0e,"AutoTokenizer"),H0e.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),kf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var Q$=s(Ae);iS=r(Q$,"will create a model that is an instance of "),yi=n(Q$,"A",{href:!0});var U0e=s(yi);dS=r(U0e,"BertModel"),U0e.forEach(t),cS=r(Q$,"."),Q$.forEach(t),Co=i(f),$a=n(f,"P",{});var W$=s($a);fS=r(W$,"There is one class of "),Sf=n(W$,"CODE",{});var J0e=s(Sf);mS=r(J0e,"AutoModel"),J0e.forEach(t),TQe=r(W$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),W$.forEach(t),sOe=i(f),xi=n(f,"H2",{class:!0});var H$=s(xi);Rf=n(H$,"A",{id:!0,class:!0,href:!0});var Y0e=s(Rf);Cte=n(Y0e,"SPAN",{});var K0e=s(Cte);T(P6.$$.fragment,K0e),K0e.forEach(t),Y0e.forEach(t),MQe=i(H$),wte=n(H$,"SPAN",{});var Z0e=s(wte);EQe=r(Z0e,"Extending the Auto Classes"),Z0e.forEach(t),H$.forEach(t),lOe=i(f),Nn=n(f,"P",{});var Af=s(Nn);CQe=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ate=n(Af,"CODE",{});var ewe=s(Ate);wQe=r(ewe,"NewModel"),ewe.forEach(t),AQe=r(Af,", make sure you have a "),Lte=n(Af,"CODE",{});var owe=s(Lte);LQe=r(owe,"NewModelConfig"),owe.forEach(t),yQe=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),iOe=i(f),T(B6.$$.fragment,f),dOe=i(f),gS=n(f,"P",{});var rwe=s(gS);xQe=r(rwe,"You will then be able to use the auto classes like you would usually do!"),rwe.forEach(t),cOe=i(f),T(Pf.$$.fragment,f),fOe=i(f),$i=n(f,"H2",{class:!0});var U$=s($i);Bf=n(U$,"A",{id:!0,class:!0,href:!0});var twe=s(Bf);yte=n(twe,"SPAN",{});var awe=s(yte);T(I6.$$.fragment,awe),awe.forEach(t),twe.forEach(t),$Qe=i(U$),xte=n(U$,"SPAN",{});var nwe=s(xte);kQe=r(nwe,"AutoConfig"),nwe.forEach(t),U$.forEach(t),mOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(N6.$$.fragment,rt),SQe=i(rt),q6=n(rt,"P",{});var J$=s(q6);RQe=r(J$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),hS=n(J$,"A",{href:!0});var swe=s(hS);PQe=r(swe,"from_pretrained()"),swe.forEach(t),BQe=r(J$," class method."),J$.forEach(t),IQe=i(rt),j6=n(rt,"P",{});var Y$=s(j6);NQe=r(Y$,"This class cannot be instantiated directly using "),$te=n(Y$,"CODE",{});var lwe=s($te);qQe=r(lwe,"__init__()"),lwe.forEach(t),jQe=r(Y$," (throws an error)."),Y$.forEach(t),DQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(D6.$$.fragment,tt),GQe=i(tt),kte=n(tt,"P",{});var iwe=s(kte);OQe=r(iwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),iwe.forEach(t),VQe=i(tt),ki=n(tt,"P",{});var Lf=s(ki);XQe=r(Lf,"The configuration class to instantiate is selected based on the "),Ste=n(Lf,"CODE",{});var dwe=s(Ste);zQe=r(dwe,"model_type"),dwe.forEach(t),QQe=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rte=n(Lf,"CODE",{});var cwe=s(Rte);WQe=r(cwe,"pretrained_model_name_or_path"),cwe.forEach(t),HQe=r(Lf,":"),Lf.forEach(t),UQe=i(tt),A=n(tt,"UL",{});var L=s(A);If=n(L,"LI",{});var cw=s(If);Pte=n(cw,"STRONG",{});var fwe=s(Pte);JQe=r(fwe,"albert"),fwe.forEach(t),YQe=r(cw," \u2014 "),pS=n(cw,"A",{href:!0});var mwe=s(pS);KQe=r(mwe,"AlbertConfig"),mwe.forEach(t),ZQe=r(cw," (ALBERT model)"),cw.forEach(t),eWe=i(L),Nf=n(L,"LI",{});var fw=s(Nf);Bte=n(fw,"STRONG",{});var gwe=s(Bte);oWe=r(gwe,"bart"),gwe.forEach(t),rWe=r(fw," \u2014 "),_S=n(fw,"A",{href:!0});var hwe=s(_S);tWe=r(hwe,"BartConfig"),hwe.forEach(t),aWe=r(fw," (BART model)"),fw.forEach(t),nWe=i(L),qf=n(L,"LI",{});var mw=s(qf);Ite=n(mw,"STRONG",{});var pwe=s(Ite);sWe=r(pwe,"beit"),pwe.forEach(t),lWe=r(mw," \u2014 "),uS=n(mw,"A",{href:!0});var _we=s(uS);iWe=r(_we,"BeitConfig"),_we.forEach(t),dWe=r(mw," (BEiT model)"),mw.forEach(t),cWe=i(L),jf=n(L,"LI",{});var gw=s(jf);Nte=n(gw,"STRONG",{});var uwe=s(Nte);fWe=r(uwe,"bert"),uwe.forEach(t),mWe=r(gw," \u2014 "),bS=n(gw,"A",{href:!0});var bwe=s(bS);gWe=r(bwe,"BertConfig"),bwe.forEach(t),hWe=r(gw," (BERT model)"),gw.forEach(t),pWe=i(L),Df=n(L,"LI",{});var hw=s(Df);qte=n(hw,"STRONG",{});var vwe=s(qte);_We=r(vwe,"bert-generation"),vwe.forEach(t),uWe=r(hw," \u2014 "),vS=n(hw,"A",{href:!0});var Fwe=s(vS);bWe=r(Fwe,"BertGenerationConfig"),Fwe.forEach(t),vWe=r(hw," (Bert Generation model)"),hw.forEach(t),FWe=i(L),Gf=n(L,"LI",{});var pw=s(Gf);jte=n(pw,"STRONG",{});var Twe=s(jte);TWe=r(Twe,"big_bird"),Twe.forEach(t),MWe=r(pw," \u2014 "),FS=n(pw,"A",{href:!0});var Mwe=s(FS);EWe=r(Mwe,"BigBirdConfig"),Mwe.forEach(t),CWe=r(pw," (BigBird model)"),pw.forEach(t),wWe=i(L),Of=n(L,"LI",{});var _w=s(Of);Dte=n(_w,"STRONG",{});var Ewe=s(Dte);AWe=r(Ewe,"bigbird_pegasus"),Ewe.forEach(t),LWe=r(_w," \u2014 "),TS=n(_w,"A",{href:!0});var Cwe=s(TS);yWe=r(Cwe,"BigBirdPegasusConfig"),Cwe.forEach(t),xWe=r(_w," (BigBird-Pegasus model)"),_w.forEach(t),$We=i(L),Vf=n(L,"LI",{});var uw=s(Vf);Gte=n(uw,"STRONG",{});var wwe=s(Gte);kWe=r(wwe,"blenderbot"),wwe.forEach(t),SWe=r(uw," \u2014 "),MS=n(uw,"A",{href:!0});var Awe=s(MS);RWe=r(Awe,"BlenderbotConfig"),Awe.forEach(t),PWe=r(uw," (Blenderbot model)"),uw.forEach(t),BWe=i(L),Xf=n(L,"LI",{});var bw=s(Xf);Ote=n(bw,"STRONG",{});var Lwe=s(Ote);IWe=r(Lwe,"blenderbot-small"),Lwe.forEach(t),NWe=r(bw," \u2014 "),ES=n(bw,"A",{href:!0});var ywe=s(ES);qWe=r(ywe,"BlenderbotSmallConfig"),ywe.forEach(t),jWe=r(bw," (BlenderbotSmall model)"),bw.forEach(t),DWe=i(L),zf=n(L,"LI",{});var vw=s(zf);Vte=n(vw,"STRONG",{});var xwe=s(Vte);GWe=r(xwe,"bloom"),xwe.forEach(t),OWe=r(vw," \u2014 "),CS=n(vw,"A",{href:!0});var $we=s(CS);VWe=r($we,"BloomConfig"),$we.forEach(t),XWe=r(vw," (BLOOM model)"),vw.forEach(t),zWe=i(L),Qf=n(L,"LI",{});var Fw=s(Qf);Xte=n(Fw,"STRONG",{});var kwe=s(Xte);QWe=r(kwe,"camembert"),kwe.forEach(t),WWe=r(Fw," \u2014 "),wS=n(Fw,"A",{href:!0});var Swe=s(wS);HWe=r(Swe,"CamembertConfig"),Swe.forEach(t),UWe=r(Fw," (CamemBERT model)"),Fw.forEach(t),JWe=i(L),Wf=n(L,"LI",{});var Tw=s(Wf);zte=n(Tw,"STRONG",{});var Rwe=s(zte);YWe=r(Rwe,"canine"),Rwe.forEach(t),KWe=r(Tw," \u2014 "),AS=n(Tw,"A",{href:!0});var Pwe=s(AS);ZWe=r(Pwe,"CanineConfig"),Pwe.forEach(t),eHe=r(Tw," (CANINE model)"),Tw.forEach(t),oHe=i(L),Hf=n(L,"LI",{});var Mw=s(Hf);Qte=n(Mw,"STRONG",{});var Bwe=s(Qte);rHe=r(Bwe,"clip"),Bwe.forEach(t),tHe=r(Mw," \u2014 "),LS=n(Mw,"A",{href:!0});var Iwe=s(LS);aHe=r(Iwe,"CLIPConfig"),Iwe.forEach(t),nHe=r(Mw," (CLIP model)"),Mw.forEach(t),sHe=i(L),Uf=n(L,"LI",{});var Ew=s(Uf);Wte=n(Ew,"STRONG",{});var Nwe=s(Wte);lHe=r(Nwe,"codegen"),Nwe.forEach(t),iHe=r(Ew," \u2014 "),yS=n(Ew,"A",{href:!0});var qwe=s(yS);dHe=r(qwe,"CodeGenConfig"),qwe.forEach(t),cHe=r(Ew," (CodeGen model)"),Ew.forEach(t),fHe=i(L),Jf=n(L,"LI",{});var Cw=s(Jf);Hte=n(Cw,"STRONG",{});var jwe=s(Hte);mHe=r(jwe,"convbert"),jwe.forEach(t),gHe=r(Cw," \u2014 "),xS=n(Cw,"A",{href:!0});var Dwe=s(xS);hHe=r(Dwe,"ConvBertConfig"),Dwe.forEach(t),pHe=r(Cw," (ConvBERT model)"),Cw.forEach(t),_He=i(L),Yf=n(L,"LI",{});var ww=s(Yf);Ute=n(ww,"STRONG",{});var Gwe=s(Ute);uHe=r(Gwe,"convnext"),Gwe.forEach(t),bHe=r(ww," \u2014 "),$S=n(ww,"A",{href:!0});var Owe=s($S);vHe=r(Owe,"ConvNextConfig"),Owe.forEach(t),FHe=r(ww," (ConvNeXT model)"),ww.forEach(t),THe=i(L),Kf=n(L,"LI",{});var Aw=s(Kf);Jte=n(Aw,"STRONG",{});var Vwe=s(Jte);MHe=r(Vwe,"ctrl"),Vwe.forEach(t),EHe=r(Aw," \u2014 "),kS=n(Aw,"A",{href:!0});var Xwe=s(kS);CHe=r(Xwe,"CTRLConfig"),Xwe.forEach(t),wHe=r(Aw," (CTRL model)"),Aw.forEach(t),AHe=i(L),Zf=n(L,"LI",{});var Lw=s(Zf);Yte=n(Lw,"STRONG",{});var zwe=s(Yte);LHe=r(zwe,"cvt"),zwe.forEach(t),yHe=r(Lw," \u2014 "),SS=n(Lw,"A",{href:!0});var Qwe=s(SS);xHe=r(Qwe,"CvtConfig"),Qwe.forEach(t),$He=r(Lw," (CvT model)"),Lw.forEach(t),kHe=i(L),em=n(L,"LI",{});var yw=s(em);Kte=n(yw,"STRONG",{});var Wwe=s(Kte);SHe=r(Wwe,"data2vec-audio"),Wwe.forEach(t),RHe=r(yw," \u2014 "),RS=n(yw,"A",{href:!0});var Hwe=s(RS);PHe=r(Hwe,"Data2VecAudioConfig"),Hwe.forEach(t),BHe=r(yw," (Data2VecAudio model)"),yw.forEach(t),IHe=i(L),om=n(L,"LI",{});var xw=s(om);Zte=n(xw,"STRONG",{});var Uwe=s(Zte);NHe=r(Uwe,"data2vec-text"),Uwe.forEach(t),qHe=r(xw," \u2014 "),PS=n(xw,"A",{href:!0});var Jwe=s(PS);jHe=r(Jwe,"Data2VecTextConfig"),Jwe.forEach(t),DHe=r(xw," (Data2VecText model)"),xw.forEach(t),GHe=i(L),rm=n(L,"LI",{});var $w=s(rm);eae=n($w,"STRONG",{});var Ywe=s(eae);OHe=r(Ywe,"data2vec-vision"),Ywe.forEach(t),VHe=r($w," \u2014 "),BS=n($w,"A",{href:!0});var Kwe=s(BS);XHe=r(Kwe,"Data2VecVisionConfig"),Kwe.forEach(t),zHe=r($w," (Data2VecVision model)"),$w.forEach(t),QHe=i(L),tm=n(L,"LI",{});var kw=s(tm);oae=n(kw,"STRONG",{});var Zwe=s(oae);WHe=r(Zwe,"deberta"),Zwe.forEach(t),HHe=r(kw," \u2014 "),IS=n(kw,"A",{href:!0});var eAe=s(IS);UHe=r(eAe,"DebertaConfig"),eAe.forEach(t),JHe=r(kw," (DeBERTa model)"),kw.forEach(t),YHe=i(L),am=n(L,"LI",{});var Sw=s(am);rae=n(Sw,"STRONG",{});var oAe=s(rae);KHe=r(oAe,"deberta-v2"),oAe.forEach(t),ZHe=r(Sw," \u2014 "),NS=n(Sw,"A",{href:!0});var rAe=s(NS);eUe=r(rAe,"DebertaV2Config"),rAe.forEach(t),oUe=r(Sw," (DeBERTa-v2 model)"),Sw.forEach(t),rUe=i(L),nm=n(L,"LI",{});var Rw=s(nm);tae=n(Rw,"STRONG",{});var WKr=s(tae);tUe=r(WKr,"decision_transformer"),WKr.forEach(t),aUe=r(Rw," \u2014 "),qS=n(Rw,"A",{href:!0});var HKr=s(qS);nUe=r(HKr,"DecisionTransformerConfig"),HKr.forEach(t),sUe=r(Rw," (Decision Transformer model)"),Rw.forEach(t),lUe=i(L),sm=n(L,"LI",{});var tAe=s(sm);aae=n(tAe,"STRONG",{});var UKr=s(aae);iUe=r(UKr,"deit"),UKr.forEach(t),dUe=r(tAe," \u2014 "),jS=n(tAe,"A",{href:!0});var JKr=s(jS);cUe=r(JKr,"DeiTConfig"),JKr.forEach(t),fUe=r(tAe," (DeiT model)"),tAe.forEach(t),mUe=i(L),lm=n(L,"LI",{});var aAe=s(lm);nae=n(aAe,"STRONG",{});var YKr=s(nae);gUe=r(YKr,"detr"),YKr.forEach(t),hUe=r(aAe," \u2014 "),DS=n(aAe,"A",{href:!0});var KKr=s(DS);pUe=r(KKr,"DetrConfig"),KKr.forEach(t),_Ue=r(aAe," (DETR model)"),aAe.forEach(t),uUe=i(L),im=n(L,"LI",{});var nAe=s(im);sae=n(nAe,"STRONG",{});var ZKr=s(sae);bUe=r(ZKr,"distilbert"),ZKr.forEach(t),vUe=r(nAe," \u2014 "),GS=n(nAe,"A",{href:!0});var eZr=s(GS);FUe=r(eZr,"DistilBertConfig"),eZr.forEach(t),TUe=r(nAe," (DistilBERT model)"),nAe.forEach(t),MUe=i(L),dm=n(L,"LI",{});var sAe=s(dm);lae=n(sAe,"STRONG",{});var oZr=s(lae);EUe=r(oZr,"dpr"),oZr.forEach(t),CUe=r(sAe," \u2014 "),OS=n(sAe,"A",{href:!0});var rZr=s(OS);wUe=r(rZr,"DPRConfig"),rZr.forEach(t),AUe=r(sAe," (DPR model)"),sAe.forEach(t),LUe=i(L),cm=n(L,"LI",{});var lAe=s(cm);iae=n(lAe,"STRONG",{});var tZr=s(iae);yUe=r(tZr,"dpt"),tZr.forEach(t),xUe=r(lAe," \u2014 "),VS=n(lAe,"A",{href:!0});var aZr=s(VS);$Ue=r(aZr,"DPTConfig"),aZr.forEach(t),kUe=r(lAe," (DPT model)"),lAe.forEach(t),SUe=i(L),fm=n(L,"LI",{});var iAe=s(fm);dae=n(iAe,"STRONG",{});var nZr=s(dae);RUe=r(nZr,"electra"),nZr.forEach(t),PUe=r(iAe," \u2014 "),XS=n(iAe,"A",{href:!0});var sZr=s(XS);BUe=r(sZr,"ElectraConfig"),sZr.forEach(t),IUe=r(iAe," (ELECTRA model)"),iAe.forEach(t),NUe=i(L),mm=n(L,"LI",{});var dAe=s(mm);cae=n(dAe,"STRONG",{});var lZr=s(cae);qUe=r(lZr,"encoder-decoder"),lZr.forEach(t),jUe=r(dAe," \u2014 "),zS=n(dAe,"A",{href:!0});var iZr=s(zS);DUe=r(iZr,"EncoderDecoderConfig"),iZr.forEach(t),GUe=r(dAe," (Encoder decoder model)"),dAe.forEach(t),OUe=i(L),gm=n(L,"LI",{});var cAe=s(gm);fae=n(cAe,"STRONG",{});var dZr=s(fae);VUe=r(dZr,"flaubert"),dZr.forEach(t),XUe=r(cAe," \u2014 "),QS=n(cAe,"A",{href:!0});var cZr=s(QS);zUe=r(cZr,"FlaubertConfig"),cZr.forEach(t),QUe=r(cAe," (FlauBERT model)"),cAe.forEach(t),WUe=i(L),hm=n(L,"LI",{});var fAe=s(hm);mae=n(fAe,"STRONG",{});var fZr=s(mae);HUe=r(fZr,"flava"),fZr.forEach(t),UUe=r(fAe," \u2014 "),WS=n(fAe,"A",{href:!0});var mZr=s(WS);JUe=r(mZr,"FlavaConfig"),mZr.forEach(t),YUe=r(fAe," (FLAVA model)"),fAe.forEach(t),KUe=i(L),pm=n(L,"LI",{});var mAe=s(pm);gae=n(mAe,"STRONG",{});var gZr=s(gae);ZUe=r(gZr,"fnet"),gZr.forEach(t),eJe=r(mAe," \u2014 "),HS=n(mAe,"A",{href:!0});var hZr=s(HS);oJe=r(hZr,"FNetConfig"),hZr.forEach(t),rJe=r(mAe," (FNet model)"),mAe.forEach(t),tJe=i(L),_m=n(L,"LI",{});var gAe=s(_m);hae=n(gAe,"STRONG",{});var pZr=s(hae);aJe=r(pZr,"fsmt"),pZr.forEach(t),nJe=r(gAe," \u2014 "),US=n(gAe,"A",{href:!0});var _Zr=s(US);sJe=r(_Zr,"FSMTConfig"),_Zr.forEach(t),lJe=r(gAe," (FairSeq Machine-Translation model)"),gAe.forEach(t),iJe=i(L),um=n(L,"LI",{});var hAe=s(um);pae=n(hAe,"STRONG",{});var uZr=s(pae);dJe=r(uZr,"funnel"),uZr.forEach(t),cJe=r(hAe," \u2014 "),JS=n(hAe,"A",{href:!0});var bZr=s(JS);fJe=r(bZr,"FunnelConfig"),bZr.forEach(t),mJe=r(hAe," (Funnel Transformer model)"),hAe.forEach(t),gJe=i(L),bm=n(L,"LI",{});var pAe=s(bm);_ae=n(pAe,"STRONG",{});var vZr=s(_ae);hJe=r(vZr,"glpn"),vZr.forEach(t),pJe=r(pAe," \u2014 "),YS=n(pAe,"A",{href:!0});var FZr=s(YS);_Je=r(FZr,"GLPNConfig"),FZr.forEach(t),uJe=r(pAe," (GLPN model)"),pAe.forEach(t),bJe=i(L),vm=n(L,"LI",{});var _Ae=s(vm);uae=n(_Ae,"STRONG",{});var TZr=s(uae);vJe=r(TZr,"gpt2"),TZr.forEach(t),FJe=r(_Ae," \u2014 "),KS=n(_Ae,"A",{href:!0});var MZr=s(KS);TJe=r(MZr,"GPT2Config"),MZr.forEach(t),MJe=r(_Ae," (OpenAI GPT-2 model)"),_Ae.forEach(t),EJe=i(L),Fm=n(L,"LI",{});var uAe=s(Fm);bae=n(uAe,"STRONG",{});var EZr=s(bae);CJe=r(EZr,"gpt_neo"),EZr.forEach(t),wJe=r(uAe," \u2014 "),ZS=n(uAe,"A",{href:!0});var CZr=s(ZS);AJe=r(CZr,"GPTNeoConfig"),CZr.forEach(t),LJe=r(uAe," (GPT Neo model)"),uAe.forEach(t),yJe=i(L),Tm=n(L,"LI",{});var bAe=s(Tm);vae=n(bAe,"STRONG",{});var wZr=s(vae);xJe=r(wZr,"gpt_neox"),wZr.forEach(t),$Je=r(bAe," \u2014 "),eR=n(bAe,"A",{href:!0});var AZr=s(eR);kJe=r(AZr,"GPTNeoXConfig"),AZr.forEach(t),SJe=r(bAe," (GPT NeoX model)"),bAe.forEach(t),RJe=i(L),Mm=n(L,"LI",{});var vAe=s(Mm);Fae=n(vAe,"STRONG",{});var LZr=s(Fae);PJe=r(LZr,"gptj"),LZr.forEach(t),BJe=r(vAe," \u2014 "),oR=n(vAe,"A",{href:!0});var yZr=s(oR);IJe=r(yZr,"GPTJConfig"),yZr.forEach(t),NJe=r(vAe," (GPT-J model)"),vAe.forEach(t),qJe=i(L),Em=n(L,"LI",{});var FAe=s(Em);Tae=n(FAe,"STRONG",{});var xZr=s(Tae);jJe=r(xZr,"hubert"),xZr.forEach(t),DJe=r(FAe," \u2014 "),rR=n(FAe,"A",{href:!0});var $Zr=s(rR);GJe=r($Zr,"HubertConfig"),$Zr.forEach(t),OJe=r(FAe," (Hubert model)"),FAe.forEach(t),VJe=i(L),Cm=n(L,"LI",{});var TAe=s(Cm);Mae=n(TAe,"STRONG",{});var kZr=s(Mae);XJe=r(kZr,"ibert"),kZr.forEach(t),zJe=r(TAe," \u2014 "),tR=n(TAe,"A",{href:!0});var SZr=s(tR);QJe=r(SZr,"IBertConfig"),SZr.forEach(t),WJe=r(TAe," (I-BERT model)"),TAe.forEach(t),HJe=i(L),wm=n(L,"LI",{});var MAe=s(wm);Eae=n(MAe,"STRONG",{});var RZr=s(Eae);UJe=r(RZr,"imagegpt"),RZr.forEach(t),JJe=r(MAe," \u2014 "),aR=n(MAe,"A",{href:!0});var PZr=s(aR);YJe=r(PZr,"ImageGPTConfig"),PZr.forEach(t),KJe=r(MAe," (ImageGPT model)"),MAe.forEach(t),ZJe=i(L),Am=n(L,"LI",{});var EAe=s(Am);Cae=n(EAe,"STRONG",{});var BZr=s(Cae);eYe=r(BZr,"layoutlm"),BZr.forEach(t),oYe=r(EAe," \u2014 "),nR=n(EAe,"A",{href:!0});var IZr=s(nR);rYe=r(IZr,"LayoutLMConfig"),IZr.forEach(t),tYe=r(EAe," (LayoutLM model)"),EAe.forEach(t),aYe=i(L),Lm=n(L,"LI",{});var CAe=s(Lm);wae=n(CAe,"STRONG",{});var NZr=s(wae);nYe=r(NZr,"layoutlmv2"),NZr.forEach(t),sYe=r(CAe," \u2014 "),sR=n(CAe,"A",{href:!0});var qZr=s(sR);lYe=r(qZr,"LayoutLMv2Config"),qZr.forEach(t),iYe=r(CAe," (LayoutLMv2 model)"),CAe.forEach(t),dYe=i(L),ym=n(L,"LI",{});var wAe=s(ym);Aae=n(wAe,"STRONG",{});var jZr=s(Aae);cYe=r(jZr,"layoutlmv3"),jZr.forEach(t),fYe=r(wAe," \u2014 "),lR=n(wAe,"A",{href:!0});var DZr=s(lR);mYe=r(DZr,"LayoutLMv3Config"),DZr.forEach(t),gYe=r(wAe," (LayoutLMv3 model)"),wAe.forEach(t),hYe=i(L),xm=n(L,"LI",{});var AAe=s(xm);Lae=n(AAe,"STRONG",{});var GZr=s(Lae);pYe=r(GZr,"led"),GZr.forEach(t),_Ye=r(AAe," \u2014 "),iR=n(AAe,"A",{href:!0});var OZr=s(iR);uYe=r(OZr,"LEDConfig"),OZr.forEach(t),bYe=r(AAe," (LED model)"),AAe.forEach(t),vYe=i(L),$m=n(L,"LI",{});var LAe=s($m);yae=n(LAe,"STRONG",{});var VZr=s(yae);FYe=r(VZr,"levit"),VZr.forEach(t),TYe=r(LAe," \u2014 "),dR=n(LAe,"A",{href:!0});var XZr=s(dR);MYe=r(XZr,"LevitConfig"),XZr.forEach(t),EYe=r(LAe," (LeViT model)"),LAe.forEach(t),CYe=i(L),km=n(L,"LI",{});var yAe=s(km);xae=n(yAe,"STRONG",{});var zZr=s(xae);wYe=r(zZr,"longformer"),zZr.forEach(t),AYe=r(yAe," \u2014 "),cR=n(yAe,"A",{href:!0});var QZr=s(cR);LYe=r(QZr,"LongformerConfig"),QZr.forEach(t),yYe=r(yAe," (Longformer model)"),yAe.forEach(t),xYe=i(L),Sm=n(L,"LI",{});var xAe=s(Sm);$ae=n(xAe,"STRONG",{});var WZr=s($ae);$Ye=r(WZr,"longt5"),WZr.forEach(t),kYe=r(xAe," \u2014 "),fR=n(xAe,"A",{href:!0});var HZr=s(fR);SYe=r(HZr,"LongT5Config"),HZr.forEach(t),RYe=r(xAe," (LongT5 model)"),xAe.forEach(t),PYe=i(L),Rm=n(L,"LI",{});var $Ae=s(Rm);kae=n($Ae,"STRONG",{});var UZr=s(kae);BYe=r(UZr,"luke"),UZr.forEach(t),IYe=r($Ae," \u2014 "),mR=n($Ae,"A",{href:!0});var JZr=s(mR);NYe=r(JZr,"LukeConfig"),JZr.forEach(t),qYe=r($Ae," (LUKE model)"),$Ae.forEach(t),jYe=i(L),Pm=n(L,"LI",{});var kAe=s(Pm);Sae=n(kAe,"STRONG",{});var YZr=s(Sae);DYe=r(YZr,"lxmert"),YZr.forEach(t),GYe=r(kAe," \u2014 "),gR=n(kAe,"A",{href:!0});var KZr=s(gR);OYe=r(KZr,"LxmertConfig"),KZr.forEach(t),VYe=r(kAe," (LXMERT model)"),kAe.forEach(t),XYe=i(L),Bm=n(L,"LI",{});var SAe=s(Bm);Rae=n(SAe,"STRONG",{});var ZZr=s(Rae);zYe=r(ZZr,"m2m_100"),ZZr.forEach(t),QYe=r(SAe," \u2014 "),hR=n(SAe,"A",{href:!0});var eet=s(hR);WYe=r(eet,"M2M100Config"),eet.forEach(t),HYe=r(SAe," (M2M100 model)"),SAe.forEach(t),UYe=i(L),Im=n(L,"LI",{});var RAe=s(Im);Pae=n(RAe,"STRONG",{});var oet=s(Pae);JYe=r(oet,"marian"),oet.forEach(t),YYe=r(RAe," \u2014 "),pR=n(RAe,"A",{href:!0});var ret=s(pR);KYe=r(ret,"MarianConfig"),ret.forEach(t),ZYe=r(RAe," (Marian model)"),RAe.forEach(t),eKe=i(L),Nm=n(L,"LI",{});var PAe=s(Nm);Bae=n(PAe,"STRONG",{});var tet=s(Bae);oKe=r(tet,"maskformer"),tet.forEach(t),rKe=r(PAe," \u2014 "),_R=n(PAe,"A",{href:!0});var aet=s(_R);tKe=r(aet,"MaskFormerConfig"),aet.forEach(t),aKe=r(PAe," (MaskFormer model)"),PAe.forEach(t),nKe=i(L),qm=n(L,"LI",{});var BAe=s(qm);Iae=n(BAe,"STRONG",{});var net=s(Iae);sKe=r(net,"mbart"),net.forEach(t),lKe=r(BAe," \u2014 "),uR=n(BAe,"A",{href:!0});var set=s(uR);iKe=r(set,"MBartConfig"),set.forEach(t),dKe=r(BAe," (mBART model)"),BAe.forEach(t),cKe=i(L),jm=n(L,"LI",{});var IAe=s(jm);Nae=n(IAe,"STRONG",{});var iet=s(Nae);fKe=r(iet,"mctct"),iet.forEach(t),mKe=r(IAe," \u2014 "),bR=n(IAe,"A",{href:!0});var det=s(bR);gKe=r(det,"MCTCTConfig"),det.forEach(t),hKe=r(IAe," (M-CTC-T model)"),IAe.forEach(t),pKe=i(L),Dm=n(L,"LI",{});var NAe=s(Dm);qae=n(NAe,"STRONG",{});var cet=s(qae);_Ke=r(cet,"megatron-bert"),cet.forEach(t),uKe=r(NAe," \u2014 "),vR=n(NAe,"A",{href:!0});var fet=s(vR);bKe=r(fet,"MegatronBertConfig"),fet.forEach(t),vKe=r(NAe," (Megatron-BERT model)"),NAe.forEach(t),FKe=i(L),Gm=n(L,"LI",{});var qAe=s(Gm);jae=n(qAe,"STRONG",{});var met=s(jae);TKe=r(met,"mobilebert"),met.forEach(t),MKe=r(qAe," \u2014 "),FR=n(qAe,"A",{href:!0});var get=s(FR);EKe=r(get,"MobileBertConfig"),get.forEach(t),CKe=r(qAe," (MobileBERT model)"),qAe.forEach(t),wKe=i(L),Om=n(L,"LI",{});var jAe=s(Om);Dae=n(jAe,"STRONG",{});var het=s(Dae);AKe=r(het,"mpnet"),het.forEach(t),LKe=r(jAe," \u2014 "),TR=n(jAe,"A",{href:!0});var pet=s(TR);yKe=r(pet,"MPNetConfig"),pet.forEach(t),xKe=r(jAe," (MPNet model)"),jAe.forEach(t),$Ke=i(L),Vm=n(L,"LI",{});var DAe=s(Vm);Gae=n(DAe,"STRONG",{});var _et=s(Gae);kKe=r(_et,"mt5"),_et.forEach(t),SKe=r(DAe," \u2014 "),MR=n(DAe,"A",{href:!0});var uet=s(MR);RKe=r(uet,"MT5Config"),uet.forEach(t),PKe=r(DAe," (MT5 model)"),DAe.forEach(t),BKe=i(L),Xm=n(L,"LI",{});var GAe=s(Xm);Oae=n(GAe,"STRONG",{});var bet=s(Oae);IKe=r(bet,"nezha"),bet.forEach(t),NKe=r(GAe," \u2014 "),ER=n(GAe,"A",{href:!0});var vet=s(ER);qKe=r(vet,"NezhaConfig"),vet.forEach(t),jKe=r(GAe," (Nezha model)"),GAe.forEach(t),DKe=i(L),zm=n(L,"LI",{});var OAe=s(zm);Vae=n(OAe,"STRONG",{});var Fet=s(Vae);GKe=r(Fet,"nystromformer"),Fet.forEach(t),OKe=r(OAe," \u2014 "),CR=n(OAe,"A",{href:!0});var Tet=s(CR);VKe=r(Tet,"NystromformerConfig"),Tet.forEach(t),XKe=r(OAe," (Nystr\xF6mformer model)"),OAe.forEach(t),zKe=i(L),Qm=n(L,"LI",{});var VAe=s(Qm);Xae=n(VAe,"STRONG",{});var Met=s(Xae);QKe=r(Met,"openai-gpt"),Met.forEach(t),WKe=r(VAe," \u2014 "),wR=n(VAe,"A",{href:!0});var Eet=s(wR);HKe=r(Eet,"OpenAIGPTConfig"),Eet.forEach(t),UKe=r(VAe," (OpenAI GPT model)"),VAe.forEach(t),JKe=i(L),Wm=n(L,"LI",{});var XAe=s(Wm);zae=n(XAe,"STRONG",{});var Cet=s(zae);YKe=r(Cet,"opt"),Cet.forEach(t),KKe=r(XAe," \u2014 "),AR=n(XAe,"A",{href:!0});var wet=s(AR);ZKe=r(wet,"OPTConfig"),wet.forEach(t),eZe=r(XAe," (OPT model)"),XAe.forEach(t),oZe=i(L),Hm=n(L,"LI",{});var zAe=s(Hm);Qae=n(zAe,"STRONG",{});var Aet=s(Qae);rZe=r(Aet,"pegasus"),Aet.forEach(t),tZe=r(zAe," \u2014 "),LR=n(zAe,"A",{href:!0});var Let=s(LR);aZe=r(Let,"PegasusConfig"),Let.forEach(t),nZe=r(zAe," (Pegasus model)"),zAe.forEach(t),sZe=i(L),Um=n(L,"LI",{});var QAe=s(Um);Wae=n(QAe,"STRONG",{});var yet=s(Wae);lZe=r(yet,"perceiver"),yet.forEach(t),iZe=r(QAe," \u2014 "),yR=n(QAe,"A",{href:!0});var xet=s(yR);dZe=r(xet,"PerceiverConfig"),xet.forEach(t),cZe=r(QAe," (Perceiver model)"),QAe.forEach(t),fZe=i(L),Jm=n(L,"LI",{});var WAe=s(Jm);Hae=n(WAe,"STRONG",{});var $et=s(Hae);mZe=r($et,"plbart"),$et.forEach(t),gZe=r(WAe," \u2014 "),xR=n(WAe,"A",{href:!0});var ket=s(xR);hZe=r(ket,"PLBartConfig"),ket.forEach(t),pZe=r(WAe," (PLBart model)"),WAe.forEach(t),_Ze=i(L),Ym=n(L,"LI",{});var HAe=s(Ym);Uae=n(HAe,"STRONG",{});var Set=s(Uae);uZe=r(Set,"poolformer"),Set.forEach(t),bZe=r(HAe," \u2014 "),$R=n(HAe,"A",{href:!0});var Ret=s($R);vZe=r(Ret,"PoolFormerConfig"),Ret.forEach(t),FZe=r(HAe," (PoolFormer model)"),HAe.forEach(t),TZe=i(L),Km=n(L,"LI",{});var UAe=s(Km);Jae=n(UAe,"STRONG",{});var Pet=s(Jae);MZe=r(Pet,"prophetnet"),Pet.forEach(t),EZe=r(UAe," \u2014 "),kR=n(UAe,"A",{href:!0});var Bet=s(kR);CZe=r(Bet,"ProphetNetConfig"),Bet.forEach(t),wZe=r(UAe," (ProphetNet model)"),UAe.forEach(t),AZe=i(L),Zm=n(L,"LI",{});var JAe=s(Zm);Yae=n(JAe,"STRONG",{});var Iet=s(Yae);LZe=r(Iet,"qdqbert"),Iet.forEach(t),yZe=r(JAe," \u2014 "),SR=n(JAe,"A",{href:!0});var Net=s(SR);xZe=r(Net,"QDQBertConfig"),Net.forEach(t),$Ze=r(JAe," (QDQBert model)"),JAe.forEach(t),kZe=i(L),eg=n(L,"LI",{});var YAe=s(eg);Kae=n(YAe,"STRONG",{});var qet=s(Kae);SZe=r(qet,"rag"),qet.forEach(t),RZe=r(YAe," \u2014 "),RR=n(YAe,"A",{href:!0});var jet=s(RR);PZe=r(jet,"RagConfig"),jet.forEach(t),BZe=r(YAe," (RAG model)"),YAe.forEach(t),IZe=i(L),og=n(L,"LI",{});var KAe=s(og);Zae=n(KAe,"STRONG",{});var Det=s(Zae);NZe=r(Det,"realm"),Det.forEach(t),qZe=r(KAe," \u2014 "),PR=n(KAe,"A",{href:!0});var Get=s(PR);jZe=r(Get,"RealmConfig"),Get.forEach(t),DZe=r(KAe," (REALM model)"),KAe.forEach(t),GZe=i(L),rg=n(L,"LI",{});var ZAe=s(rg);ene=n(ZAe,"STRONG",{});var Oet=s(ene);OZe=r(Oet,"reformer"),Oet.forEach(t),VZe=r(ZAe," \u2014 "),BR=n(ZAe,"A",{href:!0});var Vet=s(BR);XZe=r(Vet,"ReformerConfig"),Vet.forEach(t),zZe=r(ZAe," (Reformer model)"),ZAe.forEach(t),QZe=i(L),tg=n(L,"LI",{});var e6e=s(tg);one=n(e6e,"STRONG",{});var Xet=s(one);WZe=r(Xet,"regnet"),Xet.forEach(t),HZe=r(e6e," \u2014 "),IR=n(e6e,"A",{href:!0});var zet=s(IR);UZe=r(zet,"RegNetConfig"),zet.forEach(t),JZe=r(e6e," (RegNet model)"),e6e.forEach(t),YZe=i(L),ag=n(L,"LI",{});var o6e=s(ag);rne=n(o6e,"STRONG",{});var Qet=s(rne);KZe=r(Qet,"rembert"),Qet.forEach(t),ZZe=r(o6e," \u2014 "),NR=n(o6e,"A",{href:!0});var Wet=s(NR);eeo=r(Wet,"RemBertConfig"),Wet.forEach(t),oeo=r(o6e," (RemBERT model)"),o6e.forEach(t),reo=i(L),ng=n(L,"LI",{});var r6e=s(ng);tne=n(r6e,"STRONG",{});var Het=s(tne);teo=r(Het,"resnet"),Het.forEach(t),aeo=r(r6e," \u2014 "),qR=n(r6e,"A",{href:!0});var Uet=s(qR);neo=r(Uet,"ResNetConfig"),Uet.forEach(t),seo=r(r6e," (ResNet model)"),r6e.forEach(t),leo=i(L),sg=n(L,"LI",{});var t6e=s(sg);ane=n(t6e,"STRONG",{});var Jet=s(ane);ieo=r(Jet,"retribert"),Jet.forEach(t),deo=r(t6e," \u2014 "),jR=n(t6e,"A",{href:!0});var Yet=s(jR);ceo=r(Yet,"RetriBertConfig"),Yet.forEach(t),feo=r(t6e," (RetriBERT model)"),t6e.forEach(t),meo=i(L),lg=n(L,"LI",{});var a6e=s(lg);nne=n(a6e,"STRONG",{});var Ket=s(nne);geo=r(Ket,"roberta"),Ket.forEach(t),heo=r(a6e," \u2014 "),DR=n(a6e,"A",{href:!0});var Zet=s(DR);peo=r(Zet,"RobertaConfig"),Zet.forEach(t),_eo=r(a6e," (RoBERTa model)"),a6e.forEach(t),ueo=i(L),ig=n(L,"LI",{});var n6e=s(ig);sne=n(n6e,"STRONG",{});var eot=s(sne);beo=r(eot,"roformer"),eot.forEach(t),veo=r(n6e," \u2014 "),GR=n(n6e,"A",{href:!0});var oot=s(GR);Feo=r(oot,"RoFormerConfig"),oot.forEach(t),Teo=r(n6e," (RoFormer model)"),n6e.forEach(t),Meo=i(L),dg=n(L,"LI",{});var s6e=s(dg);lne=n(s6e,"STRONG",{});var rot=s(lne);Eeo=r(rot,"segformer"),rot.forEach(t),Ceo=r(s6e," \u2014 "),OR=n(s6e,"A",{href:!0});var tot=s(OR);weo=r(tot,"SegformerConfig"),tot.forEach(t),Aeo=r(s6e," (SegFormer model)"),s6e.forEach(t),Leo=i(L),cg=n(L,"LI",{});var l6e=s(cg);ine=n(l6e,"STRONG",{});var aot=s(ine);yeo=r(aot,"sew"),aot.forEach(t),xeo=r(l6e," \u2014 "),VR=n(l6e,"A",{href:!0});var not=s(VR);$eo=r(not,"SEWConfig"),not.forEach(t),keo=r(l6e," (SEW model)"),l6e.forEach(t),Seo=i(L),fg=n(L,"LI",{});var i6e=s(fg);dne=n(i6e,"STRONG",{});var sot=s(dne);Reo=r(sot,"sew-d"),sot.forEach(t),Peo=r(i6e," \u2014 "),XR=n(i6e,"A",{href:!0});var lot=s(XR);Beo=r(lot,"SEWDConfig"),lot.forEach(t),Ieo=r(i6e," (SEW-D model)"),i6e.forEach(t),Neo=i(L),mg=n(L,"LI",{});var d6e=s(mg);cne=n(d6e,"STRONG",{});var iot=s(cne);qeo=r(iot,"speech-encoder-decoder"),iot.forEach(t),jeo=r(d6e," \u2014 "),zR=n(d6e,"A",{href:!0});var dot=s(zR);Deo=r(dot,"SpeechEncoderDecoderConfig"),dot.forEach(t),Geo=r(d6e," (Speech Encoder decoder model)"),d6e.forEach(t),Oeo=i(L),gg=n(L,"LI",{});var c6e=s(gg);fne=n(c6e,"STRONG",{});var cot=s(fne);Veo=r(cot,"speech_to_text"),cot.forEach(t),Xeo=r(c6e," \u2014 "),QR=n(c6e,"A",{href:!0});var fot=s(QR);zeo=r(fot,"Speech2TextConfig"),fot.forEach(t),Qeo=r(c6e," (Speech2Text model)"),c6e.forEach(t),Weo=i(L),hg=n(L,"LI",{});var f6e=s(hg);mne=n(f6e,"STRONG",{});var mot=s(mne);Heo=r(mot,"speech_to_text_2"),mot.forEach(t),Ueo=r(f6e," \u2014 "),WR=n(f6e,"A",{href:!0});var got=s(WR);Jeo=r(got,"Speech2Text2Config"),got.forEach(t),Yeo=r(f6e," (Speech2Text2 model)"),f6e.forEach(t),Keo=i(L),pg=n(L,"LI",{});var m6e=s(pg);gne=n(m6e,"STRONG",{});var hot=s(gne);Zeo=r(hot,"splinter"),hot.forEach(t),eoo=r(m6e," \u2014 "),HR=n(m6e,"A",{href:!0});var pot=s(HR);ooo=r(pot,"SplinterConfig"),pot.forEach(t),roo=r(m6e," (Splinter model)"),m6e.forEach(t),too=i(L),_g=n(L,"LI",{});var g6e=s(_g);hne=n(g6e,"STRONG",{});var _ot=s(hne);aoo=r(_ot,"squeezebert"),_ot.forEach(t),noo=r(g6e," \u2014 "),UR=n(g6e,"A",{href:!0});var uot=s(UR);soo=r(uot,"SqueezeBertConfig"),uot.forEach(t),loo=r(g6e," (SqueezeBERT model)"),g6e.forEach(t),ioo=i(L),ug=n(L,"LI",{});var h6e=s(ug);pne=n(h6e,"STRONG",{});var bot=s(pne);doo=r(bot,"swin"),bot.forEach(t),coo=r(h6e," \u2014 "),JR=n(h6e,"A",{href:!0});var vot=s(JR);foo=r(vot,"SwinConfig"),vot.forEach(t),moo=r(h6e," (Swin Transformer model)"),h6e.forEach(t),goo=i(L),bg=n(L,"LI",{});var p6e=s(bg);_ne=n(p6e,"STRONG",{});var Fot=s(_ne);hoo=r(Fot,"t5"),Fot.forEach(t),poo=r(p6e," \u2014 "),YR=n(p6e,"A",{href:!0});var Tot=s(YR);_oo=r(Tot,"T5Config"),Tot.forEach(t),uoo=r(p6e," (T5 model)"),p6e.forEach(t),boo=i(L),vg=n(L,"LI",{});var _6e=s(vg);une=n(_6e,"STRONG",{});var Mot=s(une);voo=r(Mot,"tapas"),Mot.forEach(t),Foo=r(_6e," \u2014 "),KR=n(_6e,"A",{href:!0});var Eot=s(KR);Too=r(Eot,"TapasConfig"),Eot.forEach(t),Moo=r(_6e," (TAPAS model)"),_6e.forEach(t),Eoo=i(L),Fg=n(L,"LI",{});var u6e=s(Fg);bne=n(u6e,"STRONG",{});var Cot=s(bne);Coo=r(Cot,"trajectory_transformer"),Cot.forEach(t),woo=r(u6e," \u2014 "),ZR=n(u6e,"A",{href:!0});var wot=s(ZR);Aoo=r(wot,"TrajectoryTransformerConfig"),wot.forEach(t),Loo=r(u6e," (Trajectory Transformer model)"),u6e.forEach(t),yoo=i(L),Tg=n(L,"LI",{});var b6e=s(Tg);vne=n(b6e,"STRONG",{});var Aot=s(vne);xoo=r(Aot,"transfo-xl"),Aot.forEach(t),$oo=r(b6e," \u2014 "),eP=n(b6e,"A",{href:!0});var Lot=s(eP);koo=r(Lot,"TransfoXLConfig"),Lot.forEach(t),Soo=r(b6e," (Transformer-XL model)"),b6e.forEach(t),Roo=i(L),Mg=n(L,"LI",{});var v6e=s(Mg);Fne=n(v6e,"STRONG",{});var yot=s(Fne);Poo=r(yot,"trocr"),yot.forEach(t),Boo=r(v6e," \u2014 "),oP=n(v6e,"A",{href:!0});var xot=s(oP);Ioo=r(xot,"TrOCRConfig"),xot.forEach(t),Noo=r(v6e," (TrOCR model)"),v6e.forEach(t),qoo=i(L),Eg=n(L,"LI",{});var F6e=s(Eg);Tne=n(F6e,"STRONG",{});var $ot=s(Tne);joo=r($ot,"unispeech"),$ot.forEach(t),Doo=r(F6e," \u2014 "),rP=n(F6e,"A",{href:!0});var kot=s(rP);Goo=r(kot,"UniSpeechConfig"),kot.forEach(t),Ooo=r(F6e," (UniSpeech model)"),F6e.forEach(t),Voo=i(L),Cg=n(L,"LI",{});var T6e=s(Cg);Mne=n(T6e,"STRONG",{});var Sot=s(Mne);Xoo=r(Sot,"unispeech-sat"),Sot.forEach(t),zoo=r(T6e," \u2014 "),tP=n(T6e,"A",{href:!0});var Rot=s(tP);Qoo=r(Rot,"UniSpeechSatConfig"),Rot.forEach(t),Woo=r(T6e," (UniSpeechSat model)"),T6e.forEach(t),Hoo=i(L),wg=n(L,"LI",{});var M6e=s(wg);Ene=n(M6e,"STRONG",{});var Pot=s(Ene);Uoo=r(Pot,"van"),Pot.forEach(t),Joo=r(M6e," \u2014 "),aP=n(M6e,"A",{href:!0});var Bot=s(aP);Yoo=r(Bot,"VanConfig"),Bot.forEach(t),Koo=r(M6e," (VAN model)"),M6e.forEach(t),Zoo=i(L),Ag=n(L,"LI",{});var E6e=s(Ag);Cne=n(E6e,"STRONG",{});var Iot=s(Cne);ero=r(Iot,"vilt"),Iot.forEach(t),oro=r(E6e," \u2014 "),nP=n(E6e,"A",{href:!0});var Not=s(nP);rro=r(Not,"ViltConfig"),Not.forEach(t),tro=r(E6e," (ViLT model)"),E6e.forEach(t),aro=i(L),Lg=n(L,"LI",{});var C6e=s(Lg);wne=n(C6e,"STRONG",{});var qot=s(wne);nro=r(qot,"vision-encoder-decoder"),qot.forEach(t),sro=r(C6e," \u2014 "),sP=n(C6e,"A",{href:!0});var jot=s(sP);lro=r(jot,"VisionEncoderDecoderConfig"),jot.forEach(t),iro=r(C6e," (Vision Encoder decoder model)"),C6e.forEach(t),dro=i(L),yg=n(L,"LI",{});var w6e=s(yg);Ane=n(w6e,"STRONG",{});var Dot=s(Ane);cro=r(Dot,"vision-text-dual-encoder"),Dot.forEach(t),fro=r(w6e," \u2014 "),lP=n(w6e,"A",{href:!0});var Got=s(lP);mro=r(Got,"VisionTextDualEncoderConfig"),Got.forEach(t),gro=r(w6e," (VisionTextDualEncoder model)"),w6e.forEach(t),hro=i(L),xg=n(L,"LI",{});var A6e=s(xg);Lne=n(A6e,"STRONG",{});var Oot=s(Lne);pro=r(Oot,"visual_bert"),Oot.forEach(t),_ro=r(A6e," \u2014 "),iP=n(A6e,"A",{href:!0});var Vot=s(iP);uro=r(Vot,"VisualBertConfig"),Vot.forEach(t),bro=r(A6e," (VisualBERT model)"),A6e.forEach(t),vro=i(L),$g=n(L,"LI",{});var L6e=s($g);yne=n(L6e,"STRONG",{});var Xot=s(yne);Fro=r(Xot,"vit"),Xot.forEach(t),Tro=r(L6e," \u2014 "),dP=n(L6e,"A",{href:!0});var zot=s(dP);Mro=r(zot,"ViTConfig"),zot.forEach(t),Ero=r(L6e," (ViT model)"),L6e.forEach(t),Cro=i(L),kg=n(L,"LI",{});var y6e=s(kg);xne=n(y6e,"STRONG",{});var Qot=s(xne);wro=r(Qot,"vit_mae"),Qot.forEach(t),Aro=r(y6e," \u2014 "),cP=n(y6e,"A",{href:!0});var Wot=s(cP);Lro=r(Wot,"ViTMAEConfig"),Wot.forEach(t),yro=r(y6e," (ViTMAE model)"),y6e.forEach(t),xro=i(L),Sg=n(L,"LI",{});var x6e=s(Sg);$ne=n(x6e,"STRONG",{});var Hot=s($ne);$ro=r(Hot,"wav2vec2"),Hot.forEach(t),kro=r(x6e," \u2014 "),fP=n(x6e,"A",{href:!0});var Uot=s(fP);Sro=r(Uot,"Wav2Vec2Config"),Uot.forEach(t),Rro=r(x6e," (Wav2Vec2 model)"),x6e.forEach(t),Pro=i(L),Rg=n(L,"LI",{});var $6e=s(Rg);kne=n($6e,"STRONG",{});var Jot=s(kne);Bro=r(Jot,"wav2vec2-conformer"),Jot.forEach(t),Iro=r($6e," \u2014 "),mP=n($6e,"A",{href:!0});var Yot=s(mP);Nro=r(Yot,"Wav2Vec2ConformerConfig"),Yot.forEach(t),qro=r($6e," (Wav2Vec2-Conformer model)"),$6e.forEach(t),jro=i(L),Pg=n(L,"LI",{});var k6e=s(Pg);Sne=n(k6e,"STRONG",{});var Kot=s(Sne);Dro=r(Kot,"wavlm"),Kot.forEach(t),Gro=r(k6e," \u2014 "),gP=n(k6e,"A",{href:!0});var Zot=s(gP);Oro=r(Zot,"WavLMConfig"),Zot.forEach(t),Vro=r(k6e," (WavLM model)"),k6e.forEach(t),Xro=i(L),Bg=n(L,"LI",{});var S6e=s(Bg);Rne=n(S6e,"STRONG",{});var ert=s(Rne);zro=r(ert,"xglm"),ert.forEach(t),Qro=r(S6e," \u2014 "),hP=n(S6e,"A",{href:!0});var ort=s(hP);Wro=r(ort,"XGLMConfig"),ort.forEach(t),Hro=r(S6e," (XGLM model)"),S6e.forEach(t),Uro=i(L),Ig=n(L,"LI",{});var R6e=s(Ig);Pne=n(R6e,"STRONG",{});var rrt=s(Pne);Jro=r(rrt,"xlm"),rrt.forEach(t),Yro=r(R6e," \u2014 "),pP=n(R6e,"A",{href:!0});var trt=s(pP);Kro=r(trt,"XLMConfig"),trt.forEach(t),Zro=r(R6e," (XLM model)"),R6e.forEach(t),eto=i(L),Ng=n(L,"LI",{});var P6e=s(Ng);Bne=n(P6e,"STRONG",{});var art=s(Bne);oto=r(art,"xlm-prophetnet"),art.forEach(t),rto=r(P6e," \u2014 "),_P=n(P6e,"A",{href:!0});var nrt=s(_P);tto=r(nrt,"XLMProphetNetConfig"),nrt.forEach(t),ato=r(P6e," (XLM-ProphetNet model)"),P6e.forEach(t),nto=i(L),qg=n(L,"LI",{});var B6e=s(qg);Ine=n(B6e,"STRONG",{});var srt=s(Ine);sto=r(srt,"xlm-roberta"),srt.forEach(t),lto=r(B6e," \u2014 "),uP=n(B6e,"A",{href:!0});var lrt=s(uP);ito=r(lrt,"XLMRobertaConfig"),lrt.forEach(t),dto=r(B6e," (XLM-RoBERTa model)"),B6e.forEach(t),cto=i(L),jg=n(L,"LI",{});var I6e=s(jg);Nne=n(I6e,"STRONG",{});var irt=s(Nne);fto=r(irt,"xlm-roberta-xl"),irt.forEach(t),mto=r(I6e," \u2014 "),bP=n(I6e,"A",{href:!0});var drt=s(bP);gto=r(drt,"XLMRobertaXLConfig"),drt.forEach(t),hto=r(I6e," (XLM-RoBERTa-XL model)"),I6e.forEach(t),pto=i(L),Dg=n(L,"LI",{});var N6e=s(Dg);qne=n(N6e,"STRONG",{});var crt=s(qne);_to=r(crt,"xlnet"),crt.forEach(t),uto=r(N6e," \u2014 "),vP=n(N6e,"A",{href:!0});var frt=s(vP);bto=r(frt,"XLNetConfig"),frt.forEach(t),vto=r(N6e," (XLNet model)"),N6e.forEach(t),Fto=i(L),Gg=n(L,"LI",{});var q6e=s(Gg);jne=n(q6e,"STRONG",{});var mrt=s(jne);Tto=r(mrt,"yolos"),mrt.forEach(t),Mto=r(q6e," \u2014 "),FP=n(q6e,"A",{href:!0});var grt=s(FP);Eto=r(grt,"YolosConfig"),grt.forEach(t),Cto=r(q6e," (YOLOS model)"),q6e.forEach(t),wto=i(L),Og=n(L,"LI",{});var j6e=s(Og);Dne=n(j6e,"STRONG",{});var hrt=s(Dne);Ato=r(hrt,"yoso"),hrt.forEach(t),Lto=r(j6e," \u2014 "),TP=n(j6e,"A",{href:!0});var prt=s(TP);yto=r(prt,"YosoConfig"),prt.forEach(t),xto=r(j6e," (YOSO model)"),j6e.forEach(t),L.forEach(t),$to=i(tt),T(Vg.$$.fragment,tt),tt.forEach(t),kto=i(rt),Xg=n(rt,"DIV",{class:!0});var mXe=s(Xg);T(G6.$$.fragment,mXe),Sto=i(mXe),Gne=n(mXe,"P",{});var _rt=s(Gne);Rto=r(_rt,"Register a new configuration for this class."),_rt.forEach(t),mXe.forEach(t),rt.forEach(t),gOe=i(f),Si=n(f,"H2",{class:!0});var gXe=s(Si);zg=n(gXe,"A",{id:!0,class:!0,href:!0});var urt=s(zg);One=n(urt,"SPAN",{});var brt=s(One);T(O6.$$.fragment,brt),brt.forEach(t),urt.forEach(t),Pto=i(gXe),Vne=n(gXe,"SPAN",{});var vrt=s(Vne);Bto=r(vrt,"AutoTokenizer"),vrt.forEach(t),gXe.forEach(t),hOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(V6.$$.fragment,Hs),Ito=i(Hs),X6=n(Hs,"P",{});var hXe=s(X6);Nto=r(hXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),MP=n(hXe,"A",{href:!0});var Frt=s(MP);qto=r(Frt,"AutoTokenizer.from_pretrained()"),Frt.forEach(t),jto=r(hXe," class method."),hXe.forEach(t),Dto=i(Hs),z6=n(Hs,"P",{});var pXe=s(z6);Gto=r(pXe,"This class cannot be instantiated directly using "),Xne=n(pXe,"CODE",{});var Trt=s(Xne);Oto=r(Trt,"__init__()"),Trt.forEach(t),Vto=r(pXe," (throws an error)."),pXe.forEach(t),Xto=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(Q6.$$.fragment,Us),zto=i(Us),zne=n(Us,"P",{});var Mrt=s(zne);Qto=r(Mrt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mrt.forEach(t),Wto=i(Us),ka=n(Us,"P",{});var Pw=s(ka);Hto=r(Pw,"The tokenizer class to instantiate is selected based on the "),Qne=n(Pw,"CODE",{});var Ert=s(Qne);Uto=r(Ert,"model_type"),Ert.forEach(t),Jto=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Wne=n(Pw,"CODE",{});var Crt=s(Wne);Yto=r(Crt,"pretrained_model_name_or_path"),Crt.forEach(t),Kto=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=n(Pw,"CODE",{});var wrt=s(Hne);Zto=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),eao=r(Pw,":"),Pw.forEach(t),oao=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var K$=s(qn);Une=n(K$,"STRONG",{});var Art=s(Une);rao=r(Art,"albert"),Art.forEach(t),tao=r(K$," \u2014 "),EP=n(K$,"A",{href:!0});var Lrt=s(EP);aao=r(Lrt,"AlbertTokenizer"),Lrt.forEach(t),nao=r(K$," or "),CP=n(K$,"A",{href:!0});var yrt=s(CP);sao=r(yrt,"AlbertTokenizerFast"),yrt.forEach(t),lao=r(K$," (ALBERT model)"),K$.forEach(t),iao=i(S),jn=n(S,"LI",{});var Z$=s(jn);Jne=n(Z$,"STRONG",{});var xrt=s(Jne);dao=r(xrt,"bart"),xrt.forEach(t),cao=r(Z$," \u2014 "),wP=n(Z$,"A",{href:!0});var $rt=s(wP);fao=r($rt,"BartTokenizer"),$rt.forEach(t),mao=r(Z$," or "),AP=n(Z$,"A",{href:!0});var krt=s(AP);gao=r(krt,"BartTokenizerFast"),krt.forEach(t),hao=r(Z$," (BART model)"),Z$.forEach(t),pao=i(S),Dn=n(S,"LI",{});var ek=s(Dn);Yne=n(ek,"STRONG",{});var Srt=s(Yne);_ao=r(Srt,"barthez"),Srt.forEach(t),uao=r(ek," \u2014 "),LP=n(ek,"A",{href:!0});var Rrt=s(LP);bao=r(Rrt,"BarthezTokenizer"),Rrt.forEach(t),vao=r(ek," or "),yP=n(ek,"A",{href:!0});var Prt=s(yP);Fao=r(Prt,"BarthezTokenizerFast"),Prt.forEach(t),Tao=r(ek," (BARThez model)"),ek.forEach(t),Mao=i(S),Qg=n(S,"LI",{});var D6e=s(Qg);Kne=n(D6e,"STRONG",{});var Brt=s(Kne);Eao=r(Brt,"bartpho"),Brt.forEach(t),Cao=r(D6e," \u2014 "),xP=n(D6e,"A",{href:!0});var Irt=s(xP);wao=r(Irt,"BartphoTokenizer"),Irt.forEach(t),Aao=r(D6e," (BARTpho model)"),D6e.forEach(t),Lao=i(S),Gn=n(S,"LI",{});var ok=s(Gn);Zne=n(ok,"STRONG",{});var Nrt=s(Zne);yao=r(Nrt,"bert"),Nrt.forEach(t),xao=r(ok," \u2014 "),$P=n(ok,"A",{href:!0});var qrt=s($P);$ao=r(qrt,"BertTokenizer"),qrt.forEach(t),kao=r(ok," or "),kP=n(ok,"A",{href:!0});var jrt=s(kP);Sao=r(jrt,"BertTokenizerFast"),jrt.forEach(t),Rao=r(ok," (BERT model)"),ok.forEach(t),Pao=i(S),Wg=n(S,"LI",{});var G6e=s(Wg);ese=n(G6e,"STRONG",{});var Drt=s(ese);Bao=r(Drt,"bert-generation"),Drt.forEach(t),Iao=r(G6e," \u2014 "),SP=n(G6e,"A",{href:!0});var Grt=s(SP);Nao=r(Grt,"BertGenerationTokenizer"),Grt.forEach(t),qao=r(G6e," (Bert Generation model)"),G6e.forEach(t),jao=i(S),Hg=n(S,"LI",{});var O6e=s(Hg);ose=n(O6e,"STRONG",{});var Ort=s(ose);Dao=r(Ort,"bert-japanese"),Ort.forEach(t),Gao=r(O6e," \u2014 "),RP=n(O6e,"A",{href:!0});var Vrt=s(RP);Oao=r(Vrt,"BertJapaneseTokenizer"),Vrt.forEach(t),Vao=r(O6e," (BertJapanese model)"),O6e.forEach(t),Xao=i(S),Ug=n(S,"LI",{});var V6e=s(Ug);rse=n(V6e,"STRONG",{});var Xrt=s(rse);zao=r(Xrt,"bertweet"),Xrt.forEach(t),Qao=r(V6e," \u2014 "),PP=n(V6e,"A",{href:!0});var zrt=s(PP);Wao=r(zrt,"BertweetTokenizer"),zrt.forEach(t),Hao=r(V6e," (BERTweet model)"),V6e.forEach(t),Uao=i(S),On=n(S,"LI",{});var rk=s(On);tse=n(rk,"STRONG",{});var Qrt=s(tse);Jao=r(Qrt,"big_bird"),Qrt.forEach(t),Yao=r(rk," \u2014 "),BP=n(rk,"A",{href:!0});var Wrt=s(BP);Kao=r(Wrt,"BigBirdTokenizer"),Wrt.forEach(t),Zao=r(rk," or "),IP=n(rk,"A",{href:!0});var Hrt=s(IP);eno=r(Hrt,"BigBirdTokenizerFast"),Hrt.forEach(t),ono=r(rk," (BigBird model)"),rk.forEach(t),rno=i(S),Vn=n(S,"LI",{});var tk=s(Vn);ase=n(tk,"STRONG",{});var Urt=s(ase);tno=r(Urt,"bigbird_pegasus"),Urt.forEach(t),ano=r(tk," \u2014 "),NP=n(tk,"A",{href:!0});var Jrt=s(NP);nno=r(Jrt,"PegasusTokenizer"),Jrt.forEach(t),sno=r(tk," or "),qP=n(tk,"A",{href:!0});var Yrt=s(qP);lno=r(Yrt,"PegasusTokenizerFast"),Yrt.forEach(t),ino=r(tk," (BigBird-Pegasus model)"),tk.forEach(t),dno=i(S),Xn=n(S,"LI",{});var ak=s(Xn);nse=n(ak,"STRONG",{});var Krt=s(nse);cno=r(Krt,"blenderbot"),Krt.forEach(t),fno=r(ak," \u2014 "),jP=n(ak,"A",{href:!0});var Zrt=s(jP);mno=r(Zrt,"BlenderbotTokenizer"),Zrt.forEach(t),gno=r(ak," or "),DP=n(ak,"A",{href:!0});var ett=s(DP);hno=r(ett,"BlenderbotTokenizerFast"),ett.forEach(t),pno=r(ak," (Blenderbot model)"),ak.forEach(t),_no=i(S),Jg=n(S,"LI",{});var X6e=s(Jg);sse=n(X6e,"STRONG",{});var ott=s(sse);uno=r(ott,"blenderbot-small"),ott.forEach(t),bno=r(X6e," \u2014 "),GP=n(X6e,"A",{href:!0});var rtt=s(GP);vno=r(rtt,"BlenderbotSmallTokenizer"),rtt.forEach(t),Fno=r(X6e," (BlenderbotSmall model)"),X6e.forEach(t),Tno=i(S),Yg=n(S,"LI",{});var z6e=s(Yg);lse=n(z6e,"STRONG",{});var ttt=s(lse);Mno=r(ttt,"bloom"),ttt.forEach(t),Eno=r(z6e," \u2014 "),OP=n(z6e,"A",{href:!0});var att=s(OP);Cno=r(att,"BloomTokenizerFast"),att.forEach(t),wno=r(z6e," (BLOOM model)"),z6e.forEach(t),Ano=i(S),Kg=n(S,"LI",{});var Q6e=s(Kg);ise=n(Q6e,"STRONG",{});var ntt=s(ise);Lno=r(ntt,"byt5"),ntt.forEach(t),yno=r(Q6e," \u2014 "),VP=n(Q6e,"A",{href:!0});var stt=s(VP);xno=r(stt,"ByT5Tokenizer"),stt.forEach(t),$no=r(Q6e," (ByT5 model)"),Q6e.forEach(t),kno=i(S),zn=n(S,"LI",{});var nk=s(zn);dse=n(nk,"STRONG",{});var ltt=s(dse);Sno=r(ltt,"camembert"),ltt.forEach(t),Rno=r(nk," \u2014 "),XP=n(nk,"A",{href:!0});var itt=s(XP);Pno=r(itt,"CamembertTokenizer"),itt.forEach(t),Bno=r(nk," or "),zP=n(nk,"A",{href:!0});var dtt=s(zP);Ino=r(dtt,"CamembertTokenizerFast"),dtt.forEach(t),Nno=r(nk," (CamemBERT model)"),nk.forEach(t),qno=i(S),Zg=n(S,"LI",{});var W6e=s(Zg);cse=n(W6e,"STRONG",{});var ctt=s(cse);jno=r(ctt,"canine"),ctt.forEach(t),Dno=r(W6e," \u2014 "),QP=n(W6e,"A",{href:!0});var ftt=s(QP);Gno=r(ftt,"CanineTokenizer"),ftt.forEach(t),Ono=r(W6e," (CANINE model)"),W6e.forEach(t),Vno=i(S),Qn=n(S,"LI",{});var sk=s(Qn);fse=n(sk,"STRONG",{});var mtt=s(fse);Xno=r(mtt,"clip"),mtt.forEach(t),zno=r(sk," \u2014 "),WP=n(sk,"A",{href:!0});var gtt=s(WP);Qno=r(gtt,"CLIPTokenizer"),gtt.forEach(t),Wno=r(sk," or "),HP=n(sk,"A",{href:!0});var htt=s(HP);Hno=r(htt,"CLIPTokenizerFast"),htt.forEach(t),Uno=r(sk," (CLIP model)"),sk.forEach(t),Jno=i(S),Wn=n(S,"LI",{});var lk=s(Wn);mse=n(lk,"STRONG",{});var ptt=s(mse);Yno=r(ptt,"codegen"),ptt.forEach(t),Kno=r(lk," \u2014 "),UP=n(lk,"A",{href:!0});var _tt=s(UP);Zno=r(_tt,"CodeGenTokenizer"),_tt.forEach(t),eso=r(lk," or "),JP=n(lk,"A",{href:!0});var utt=s(JP);oso=r(utt,"CodeGenTokenizerFast"),utt.forEach(t),rso=r(lk," (CodeGen model)"),lk.forEach(t),tso=i(S),Hn=n(S,"LI",{});var ik=s(Hn);gse=n(ik,"STRONG",{});var btt=s(gse);aso=r(btt,"convbert"),btt.forEach(t),nso=r(ik," \u2014 "),YP=n(ik,"A",{href:!0});var vtt=s(YP);sso=r(vtt,"ConvBertTokenizer"),vtt.forEach(t),lso=r(ik," or "),KP=n(ik,"A",{href:!0});var Ftt=s(KP);iso=r(Ftt,"ConvBertTokenizerFast"),Ftt.forEach(t),dso=r(ik," (ConvBERT model)"),ik.forEach(t),cso=i(S),Un=n(S,"LI",{});var dk=s(Un);hse=n(dk,"STRONG",{});var Ttt=s(hse);fso=r(Ttt,"cpm"),Ttt.forEach(t),mso=r(dk," \u2014 "),ZP=n(dk,"A",{href:!0});var Mtt=s(ZP);gso=r(Mtt,"CpmTokenizer"),Mtt.forEach(t),hso=r(dk," or "),eB=n(dk,"A",{href:!0});var Ett=s(eB);pso=r(Ett,"CpmTokenizerFast"),Ett.forEach(t),_so=r(dk," (CPM model)"),dk.forEach(t),uso=i(S),eh=n(S,"LI",{});var H6e=s(eh);pse=n(H6e,"STRONG",{});var Ctt=s(pse);bso=r(Ctt,"ctrl"),Ctt.forEach(t),vso=r(H6e," \u2014 "),oB=n(H6e,"A",{href:!0});var wtt=s(oB);Fso=r(wtt,"CTRLTokenizer"),wtt.forEach(t),Tso=r(H6e," (CTRL model)"),H6e.forEach(t),Mso=i(S),Jn=n(S,"LI",{});var ck=s(Jn);_se=n(ck,"STRONG",{});var Att=s(_se);Eso=r(Att,"data2vec-text"),Att.forEach(t),Cso=r(ck," \u2014 "),rB=n(ck,"A",{href:!0});var Ltt=s(rB);wso=r(Ltt,"RobertaTokenizer"),Ltt.forEach(t),Aso=r(ck," or "),tB=n(ck,"A",{href:!0});var ytt=s(tB);Lso=r(ytt,"RobertaTokenizerFast"),ytt.forEach(t),yso=r(ck," (Data2VecText model)"),ck.forEach(t),xso=i(S),Yn=n(S,"LI",{});var fk=s(Yn);use=n(fk,"STRONG",{});var xtt=s(use);$so=r(xtt,"deberta"),xtt.forEach(t),kso=r(fk," \u2014 "),aB=n(fk,"A",{href:!0});var $tt=s(aB);Sso=r($tt,"DebertaTokenizer"),$tt.forEach(t),Rso=r(fk," or "),nB=n(fk,"A",{href:!0});var ktt=s(nB);Pso=r(ktt,"DebertaTokenizerFast"),ktt.forEach(t),Bso=r(fk," (DeBERTa model)"),fk.forEach(t),Iso=i(S),Kn=n(S,"LI",{});var mk=s(Kn);bse=n(mk,"STRONG",{});var Stt=s(bse);Nso=r(Stt,"deberta-v2"),Stt.forEach(t),qso=r(mk," \u2014 "),sB=n(mk,"A",{href:!0});var Rtt=s(sB);jso=r(Rtt,"DebertaV2Tokenizer"),Rtt.forEach(t),Dso=r(mk," or "),lB=n(mk,"A",{href:!0});var Ptt=s(lB);Gso=r(Ptt,"DebertaV2TokenizerFast"),Ptt.forEach(t),Oso=r(mk," (DeBERTa-v2 model)"),mk.forEach(t),Vso=i(S),Zn=n(S,"LI",{});var gk=s(Zn);vse=n(gk,"STRONG",{});var Btt=s(vse);Xso=r(Btt,"distilbert"),Btt.forEach(t),zso=r(gk," \u2014 "),iB=n(gk,"A",{href:!0});var Itt=s(iB);Qso=r(Itt,"DistilBertTokenizer"),Itt.forEach(t),Wso=r(gk," or "),dB=n(gk,"A",{href:!0});var Ntt=s(dB);Hso=r(Ntt,"DistilBertTokenizerFast"),Ntt.forEach(t),Uso=r(gk," (DistilBERT model)"),gk.forEach(t),Jso=i(S),es=n(S,"LI",{});var hk=s(es);Fse=n(hk,"STRONG",{});var qtt=s(Fse);Yso=r(qtt,"dpr"),qtt.forEach(t),Kso=r(hk," \u2014 "),cB=n(hk,"A",{href:!0});var jtt=s(cB);Zso=r(jtt,"DPRQuestionEncoderTokenizer"),jtt.forEach(t),elo=r(hk," or "),fB=n(hk,"A",{href:!0});var Dtt=s(fB);olo=r(Dtt,"DPRQuestionEncoderTokenizerFast"),Dtt.forEach(t),rlo=r(hk," (DPR model)"),hk.forEach(t),tlo=i(S),os=n(S,"LI",{});var pk=s(os);Tse=n(pk,"STRONG",{});var Gtt=s(Tse);alo=r(Gtt,"electra"),Gtt.forEach(t),nlo=r(pk," \u2014 "),mB=n(pk,"A",{href:!0});var Ott=s(mB);slo=r(Ott,"ElectraTokenizer"),Ott.forEach(t),llo=r(pk," or "),gB=n(pk,"A",{href:!0});var Vtt=s(gB);ilo=r(Vtt,"ElectraTokenizerFast"),Vtt.forEach(t),dlo=r(pk," (ELECTRA model)"),pk.forEach(t),clo=i(S),oh=n(S,"LI",{});var U6e=s(oh);Mse=n(U6e,"STRONG",{});var Xtt=s(Mse);flo=r(Xtt,"flaubert"),Xtt.forEach(t),mlo=r(U6e," \u2014 "),hB=n(U6e,"A",{href:!0});var ztt=s(hB);glo=r(ztt,"FlaubertTokenizer"),ztt.forEach(t),hlo=r(U6e," (FlauBERT model)"),U6e.forEach(t),plo=i(S),rs=n(S,"LI",{});var _k=s(rs);Ese=n(_k,"STRONG",{});var Qtt=s(Ese);_lo=r(Qtt,"fnet"),Qtt.forEach(t),ulo=r(_k," \u2014 "),pB=n(_k,"A",{href:!0});var Wtt=s(pB);blo=r(Wtt,"FNetTokenizer"),Wtt.forEach(t),vlo=r(_k," or "),_B=n(_k,"A",{href:!0});var Htt=s(_B);Flo=r(Htt,"FNetTokenizerFast"),Htt.forEach(t),Tlo=r(_k," (FNet model)"),_k.forEach(t),Mlo=i(S),rh=n(S,"LI",{});var J6e=s(rh);Cse=n(J6e,"STRONG",{});var Utt=s(Cse);Elo=r(Utt,"fsmt"),Utt.forEach(t),Clo=r(J6e," \u2014 "),uB=n(J6e,"A",{href:!0});var Jtt=s(uB);wlo=r(Jtt,"FSMTTokenizer"),Jtt.forEach(t),Alo=r(J6e," (FairSeq Machine-Translation model)"),J6e.forEach(t),Llo=i(S),ts=n(S,"LI",{});var uk=s(ts);wse=n(uk,"STRONG",{});var Ytt=s(wse);ylo=r(Ytt,"funnel"),Ytt.forEach(t),xlo=r(uk," \u2014 "),bB=n(uk,"A",{href:!0});var Ktt=s(bB);$lo=r(Ktt,"FunnelTokenizer"),Ktt.forEach(t),klo=r(uk," or "),vB=n(uk,"A",{href:!0});var Ztt=s(vB);Slo=r(Ztt,"FunnelTokenizerFast"),Ztt.forEach(t),Rlo=r(uk," (Funnel Transformer model)"),uk.forEach(t),Plo=i(S),as=n(S,"LI",{});var bk=s(as);Ase=n(bk,"STRONG",{});var eat=s(Ase);Blo=r(eat,"gpt2"),eat.forEach(t),Ilo=r(bk," \u2014 "),FB=n(bk,"A",{href:!0});var oat=s(FB);Nlo=r(oat,"GPT2Tokenizer"),oat.forEach(t),qlo=r(bk," or "),TB=n(bk,"A",{href:!0});var rat=s(TB);jlo=r(rat,"GPT2TokenizerFast"),rat.forEach(t),Dlo=r(bk," (OpenAI GPT-2 model)"),bk.forEach(t),Glo=i(S),ns=n(S,"LI",{});var vk=s(ns);Lse=n(vk,"STRONG",{});var tat=s(Lse);Olo=r(tat,"gpt_neo"),tat.forEach(t),Vlo=r(vk," \u2014 "),MB=n(vk,"A",{href:!0});var aat=s(MB);Xlo=r(aat,"GPT2Tokenizer"),aat.forEach(t),zlo=r(vk," or "),EB=n(vk,"A",{href:!0});var nat=s(EB);Qlo=r(nat,"GPT2TokenizerFast"),nat.forEach(t),Wlo=r(vk," (GPT Neo model)"),vk.forEach(t),Hlo=i(S),th=n(S,"LI",{});var Y6e=s(th);yse=n(Y6e,"STRONG",{});var sat=s(yse);Ulo=r(sat,"gpt_neox"),sat.forEach(t),Jlo=r(Y6e," \u2014 "),CB=n(Y6e,"A",{href:!0});var lat=s(CB);Ylo=r(lat,"GPTNeoXTokenizerFast"),lat.forEach(t),Klo=r(Y6e," (GPT NeoX model)"),Y6e.forEach(t),Zlo=i(S),ss=n(S,"LI",{});var Fk=s(ss);xse=n(Fk,"STRONG",{});var iat=s(xse);eio=r(iat,"gptj"),iat.forEach(t),oio=r(Fk," \u2014 "),wB=n(Fk,"A",{href:!0});var dat=s(wB);rio=r(dat,"GPT2Tokenizer"),dat.forEach(t),tio=r(Fk," or "),AB=n(Fk,"A",{href:!0});var cat=s(AB);aio=r(cat,"GPT2TokenizerFast"),cat.forEach(t),nio=r(Fk," (GPT-J model)"),Fk.forEach(t),sio=i(S),ls=n(S,"LI",{});var Tk=s(ls);$se=n(Tk,"STRONG",{});var fat=s($se);lio=r(fat,"herbert"),fat.forEach(t),iio=r(Tk," \u2014 "),LB=n(Tk,"A",{href:!0});var mat=s(LB);dio=r(mat,"HerbertTokenizer"),mat.forEach(t),cio=r(Tk," or "),yB=n(Tk,"A",{href:!0});var gat=s(yB);fio=r(gat,"HerbertTokenizerFast"),gat.forEach(t),mio=r(Tk," (HerBERT model)"),Tk.forEach(t),gio=i(S),ah=n(S,"LI",{});var K6e=s(ah);kse=n(K6e,"STRONG",{});var hat=s(kse);hio=r(hat,"hubert"),hat.forEach(t),pio=r(K6e," \u2014 "),xB=n(K6e,"A",{href:!0});var pat=s(xB);_io=r(pat,"Wav2Vec2CTCTokenizer"),pat.forEach(t),uio=r(K6e," (Hubert model)"),K6e.forEach(t),bio=i(S),is=n(S,"LI",{});var Mk=s(is);Sse=n(Mk,"STRONG",{});var _at=s(Sse);vio=r(_at,"ibert"),_at.forEach(t),Fio=r(Mk," \u2014 "),$B=n(Mk,"A",{href:!0});var uat=s($B);Tio=r(uat,"RobertaTokenizer"),uat.forEach(t),Mio=r(Mk," or "),kB=n(Mk,"A",{href:!0});var bat=s(kB);Eio=r(bat,"RobertaTokenizerFast"),bat.forEach(t),Cio=r(Mk," (I-BERT model)"),Mk.forEach(t),wio=i(S),ds=n(S,"LI",{});var Ek=s(ds);Rse=n(Ek,"STRONG",{});var vat=s(Rse);Aio=r(vat,"layoutlm"),vat.forEach(t),Lio=r(Ek," \u2014 "),SB=n(Ek,"A",{href:!0});var Fat=s(SB);yio=r(Fat,"LayoutLMTokenizer"),Fat.forEach(t),xio=r(Ek," or "),RB=n(Ek,"A",{href:!0});var Tat=s(RB);$io=r(Tat,"LayoutLMTokenizerFast"),Tat.forEach(t),kio=r(Ek," (LayoutLM model)"),Ek.forEach(t),Sio=i(S),cs=n(S,"LI",{});var Ck=s(cs);Pse=n(Ck,"STRONG",{});var Mat=s(Pse);Rio=r(Mat,"layoutlmv2"),Mat.forEach(t),Pio=r(Ck," \u2014 "),PB=n(Ck,"A",{href:!0});var Eat=s(PB);Bio=r(Eat,"LayoutLMv2Tokenizer"),Eat.forEach(t),Iio=r(Ck," or "),BB=n(Ck,"A",{href:!0});var Cat=s(BB);Nio=r(Cat,"LayoutLMv2TokenizerFast"),Cat.forEach(t),qio=r(Ck," (LayoutLMv2 model)"),Ck.forEach(t),jio=i(S),fs=n(S,"LI",{});var wk=s(fs);Bse=n(wk,"STRONG",{});var wat=s(Bse);Dio=r(wat,"layoutlmv3"),wat.forEach(t),Gio=r(wk," \u2014 "),IB=n(wk,"A",{href:!0});var Aat=s(IB);Oio=r(Aat,"LayoutLMv3Tokenizer"),Aat.forEach(t),Vio=r(wk," or "),NB=n(wk,"A",{href:!0});var Lat=s(NB);Xio=r(Lat,"LayoutLMv3TokenizerFast"),Lat.forEach(t),zio=r(wk," (LayoutLMv3 model)"),wk.forEach(t),Qio=i(S),ms=n(S,"LI",{});var Ak=s(ms);Ise=n(Ak,"STRONG",{});var yat=s(Ise);Wio=r(yat,"layoutxlm"),yat.forEach(t),Hio=r(Ak," \u2014 "),qB=n(Ak,"A",{href:!0});var xat=s(qB);Uio=r(xat,"LayoutXLMTokenizer"),xat.forEach(t),Jio=r(Ak," or "),jB=n(Ak,"A",{href:!0});var $at=s(jB);Yio=r($at,"LayoutXLMTokenizerFast"),$at.forEach(t),Kio=r(Ak," (LayoutXLM model)"),Ak.forEach(t),Zio=i(S),gs=n(S,"LI",{});var Lk=s(gs);Nse=n(Lk,"STRONG",{});var kat=s(Nse);edo=r(kat,"led"),kat.forEach(t),odo=r(Lk," \u2014 "),DB=n(Lk,"A",{href:!0});var Sat=s(DB);rdo=r(Sat,"LEDTokenizer"),Sat.forEach(t),tdo=r(Lk," or "),GB=n(Lk,"A",{href:!0});var Rat=s(GB);ado=r(Rat,"LEDTokenizerFast"),Rat.forEach(t),ndo=r(Lk," (LED model)"),Lk.forEach(t),sdo=i(S),hs=n(S,"LI",{});var yk=s(hs);qse=n(yk,"STRONG",{});var Pat=s(qse);ldo=r(Pat,"longformer"),Pat.forEach(t),ido=r(yk," \u2014 "),OB=n(yk,"A",{href:!0});var Bat=s(OB);ddo=r(Bat,"LongformerTokenizer"),Bat.forEach(t),cdo=r(yk," or "),VB=n(yk,"A",{href:!0});var Iat=s(VB);fdo=r(Iat,"LongformerTokenizerFast"),Iat.forEach(t),mdo=r(yk," (Longformer model)"),yk.forEach(t),gdo=i(S),ps=n(S,"LI",{});var xk=s(ps);jse=n(xk,"STRONG",{});var Nat=s(jse);hdo=r(Nat,"longt5"),Nat.forEach(t),pdo=r(xk," \u2014 "),XB=n(xk,"A",{href:!0});var qat=s(XB);_do=r(qat,"T5Tokenizer"),qat.forEach(t),udo=r(xk," or "),zB=n(xk,"A",{href:!0});var jat=s(zB);bdo=r(jat,"T5TokenizerFast"),jat.forEach(t),vdo=r(xk," (LongT5 model)"),xk.forEach(t),Fdo=i(S),nh=n(S,"LI",{});var Z6e=s(nh);Dse=n(Z6e,"STRONG",{});var Dat=s(Dse);Tdo=r(Dat,"luke"),Dat.forEach(t),Mdo=r(Z6e," \u2014 "),QB=n(Z6e,"A",{href:!0});var Gat=s(QB);Edo=r(Gat,"LukeTokenizer"),Gat.forEach(t),Cdo=r(Z6e," (LUKE model)"),Z6e.forEach(t),wdo=i(S),_s=n(S,"LI",{});var $k=s(_s);Gse=n($k,"STRONG",{});var Oat=s(Gse);Ado=r(Oat,"lxmert"),Oat.forEach(t),Ldo=r($k," \u2014 "),WB=n($k,"A",{href:!0});var Vat=s(WB);ydo=r(Vat,"LxmertTokenizer"),Vat.forEach(t),xdo=r($k," or "),HB=n($k,"A",{href:!0});var Xat=s(HB);$do=r(Xat,"LxmertTokenizerFast"),Xat.forEach(t),kdo=r($k," (LXMERT model)"),$k.forEach(t),Sdo=i(S),sh=n(S,"LI",{});var eLe=s(sh);Ose=n(eLe,"STRONG",{});var zat=s(Ose);Rdo=r(zat,"m2m_100"),zat.forEach(t),Pdo=r(eLe," \u2014 "),UB=n(eLe,"A",{href:!0});var Qat=s(UB);Bdo=r(Qat,"M2M100Tokenizer"),Qat.forEach(t),Ido=r(eLe," (M2M100 model)"),eLe.forEach(t),Ndo=i(S),lh=n(S,"LI",{});var oLe=s(lh);Vse=n(oLe,"STRONG",{});var Wat=s(Vse);qdo=r(Wat,"marian"),Wat.forEach(t),jdo=r(oLe," \u2014 "),JB=n(oLe,"A",{href:!0});var Hat=s(JB);Ddo=r(Hat,"MarianTokenizer"),Hat.forEach(t),Gdo=r(oLe," (Marian model)"),oLe.forEach(t),Odo=i(S),us=n(S,"LI",{});var kk=s(us);Xse=n(kk,"STRONG",{});var Uat=s(Xse);Vdo=r(Uat,"mbart"),Uat.forEach(t),Xdo=r(kk," \u2014 "),YB=n(kk,"A",{href:!0});var Jat=s(YB);zdo=r(Jat,"MBartTokenizer"),Jat.forEach(t),Qdo=r(kk," or "),KB=n(kk,"A",{href:!0});var Yat=s(KB);Wdo=r(Yat,"MBartTokenizerFast"),Yat.forEach(t),Hdo=r(kk," (mBART model)"),kk.forEach(t),Udo=i(S),bs=n(S,"LI",{});var Sk=s(bs);zse=n(Sk,"STRONG",{});var Kat=s(zse);Jdo=r(Kat,"mbart50"),Kat.forEach(t),Ydo=r(Sk," \u2014 "),ZB=n(Sk,"A",{href:!0});var Zat=s(ZB);Kdo=r(Zat,"MBart50Tokenizer"),Zat.forEach(t),Zdo=r(Sk," or "),eI=n(Sk,"A",{href:!0});var ent=s(eI);eco=r(ent,"MBart50TokenizerFast"),ent.forEach(t),oco=r(Sk," (mBART-50 model)"),Sk.forEach(t),rco=i(S),vs=n(S,"LI",{});var Rk=s(vs);Qse=n(Rk,"STRONG",{});var ont=s(Qse);tco=r(ont,"megatron-bert"),ont.forEach(t),aco=r(Rk," \u2014 "),oI=n(Rk,"A",{href:!0});var rnt=s(oI);nco=r(rnt,"BertTokenizer"),rnt.forEach(t),sco=r(Rk," or "),rI=n(Rk,"A",{href:!0});var tnt=s(rI);lco=r(tnt,"BertTokenizerFast"),tnt.forEach(t),ico=r(Rk," (Megatron-BERT model)"),Rk.forEach(t),dco=i(S),ih=n(S,"LI",{});var rLe=s(ih);Wse=n(rLe,"STRONG",{});var ant=s(Wse);cco=r(ant,"mluke"),ant.forEach(t),fco=r(rLe," \u2014 "),tI=n(rLe,"A",{href:!0});var nnt=s(tI);mco=r(nnt,"MLukeTokenizer"),nnt.forEach(t),gco=r(rLe," (mLUKE model)"),rLe.forEach(t),hco=i(S),Fs=n(S,"LI",{});var Pk=s(Fs);Hse=n(Pk,"STRONG",{});var snt=s(Hse);pco=r(snt,"mobilebert"),snt.forEach(t),_co=r(Pk," \u2014 "),aI=n(Pk,"A",{href:!0});var lnt=s(aI);uco=r(lnt,"MobileBertTokenizer"),lnt.forEach(t),bco=r(Pk," or "),nI=n(Pk,"A",{href:!0});var int=s(nI);vco=r(int,"MobileBertTokenizerFast"),int.forEach(t),Fco=r(Pk," (MobileBERT model)"),Pk.forEach(t),Tco=i(S),Ts=n(S,"LI",{});var Bk=s(Ts);Use=n(Bk,"STRONG",{});var dnt=s(Use);Mco=r(dnt,"mpnet"),dnt.forEach(t),Eco=r(Bk," \u2014 "),sI=n(Bk,"A",{href:!0});var cnt=s(sI);Cco=r(cnt,"MPNetTokenizer"),cnt.forEach(t),wco=r(Bk," or "),lI=n(Bk,"A",{href:!0});var fnt=s(lI);Aco=r(fnt,"MPNetTokenizerFast"),fnt.forEach(t),Lco=r(Bk," (MPNet model)"),Bk.forEach(t),yco=i(S),Ms=n(S,"LI",{});var Ik=s(Ms);Jse=n(Ik,"STRONG",{});var mnt=s(Jse);xco=r(mnt,"mt5"),mnt.forEach(t),$co=r(Ik," \u2014 "),iI=n(Ik,"A",{href:!0});var gnt=s(iI);kco=r(gnt,"MT5Tokenizer"),gnt.forEach(t),Sco=r(Ik," or "),dI=n(Ik,"A",{href:!0});var hnt=s(dI);Rco=r(hnt,"MT5TokenizerFast"),hnt.forEach(t),Pco=r(Ik," (MT5 model)"),Ik.forEach(t),Bco=i(S),Es=n(S,"LI",{});var Nk=s(Es);Yse=n(Nk,"STRONG",{});var pnt=s(Yse);Ico=r(pnt,"nezha"),pnt.forEach(t),Nco=r(Nk," \u2014 "),cI=n(Nk,"A",{href:!0});var _nt=s(cI);qco=r(_nt,"BertTokenizer"),_nt.forEach(t),jco=r(Nk," or "),fI=n(Nk,"A",{href:!0});var unt=s(fI);Dco=r(unt,"BertTokenizerFast"),unt.forEach(t),Gco=r(Nk," (Nezha model)"),Nk.forEach(t),Oco=i(S),Cs=n(S,"LI",{});var qk=s(Cs);Kse=n(qk,"STRONG",{});var bnt=s(Kse);Vco=r(bnt,"nystromformer"),bnt.forEach(t),Xco=r(qk," \u2014 "),mI=n(qk,"A",{href:!0});var vnt=s(mI);zco=r(vnt,"AlbertTokenizer"),vnt.forEach(t),Qco=r(qk," or "),gI=n(qk,"A",{href:!0});var Fnt=s(gI);Wco=r(Fnt,"AlbertTokenizerFast"),Fnt.forEach(t),Hco=r(qk," (Nystr\xF6mformer model)"),qk.forEach(t),Uco=i(S),ws=n(S,"LI",{});var jk=s(ws);Zse=n(jk,"STRONG",{});var Tnt=s(Zse);Jco=r(Tnt,"openai-gpt"),Tnt.forEach(t),Yco=r(jk," \u2014 "),hI=n(jk,"A",{href:!0});var Mnt=s(hI);Kco=r(Mnt,"OpenAIGPTTokenizer"),Mnt.forEach(t),Zco=r(jk," or "),pI=n(jk,"A",{href:!0});var Ent=s(pI);efo=r(Ent,"OpenAIGPTTokenizerFast"),Ent.forEach(t),ofo=r(jk," (OpenAI GPT model)"),jk.forEach(t),rfo=i(S),dh=n(S,"LI",{});var tLe=s(dh);ele=n(tLe,"STRONG",{});var Cnt=s(ele);tfo=r(Cnt,"opt"),Cnt.forEach(t),afo=r(tLe," \u2014 "),_I=n(tLe,"A",{href:!0});var wnt=s(_I);nfo=r(wnt,"GPT2Tokenizer"),wnt.forEach(t),sfo=r(tLe," (OPT model)"),tLe.forEach(t),lfo=i(S),As=n(S,"LI",{});var Dk=s(As);ole=n(Dk,"STRONG",{});var Ant=s(ole);ifo=r(Ant,"pegasus"),Ant.forEach(t),dfo=r(Dk," \u2014 "),uI=n(Dk,"A",{href:!0});var Lnt=s(uI);cfo=r(Lnt,"PegasusTokenizer"),Lnt.forEach(t),ffo=r(Dk," or "),bI=n(Dk,"A",{href:!0});var ynt=s(bI);mfo=r(ynt,"PegasusTokenizerFast"),ynt.forEach(t),gfo=r(Dk," (Pegasus model)"),Dk.forEach(t),hfo=i(S),ch=n(S,"LI",{});var aLe=s(ch);rle=n(aLe,"STRONG",{});var xnt=s(rle);pfo=r(xnt,"perceiver"),xnt.forEach(t),_fo=r(aLe," \u2014 "),vI=n(aLe,"A",{href:!0});var $nt=s(vI);ufo=r($nt,"PerceiverTokenizer"),$nt.forEach(t),bfo=r(aLe," (Perceiver model)"),aLe.forEach(t),vfo=i(S),fh=n(S,"LI",{});var nLe=s(fh);tle=n(nLe,"STRONG",{});var knt=s(tle);Ffo=r(knt,"phobert"),knt.forEach(t),Tfo=r(nLe," \u2014 "),FI=n(nLe,"A",{href:!0});var Snt=s(FI);Mfo=r(Snt,"PhobertTokenizer"),Snt.forEach(t),Efo=r(nLe," (PhoBERT model)"),nLe.forEach(t),Cfo=i(S),mh=n(S,"LI",{});var sLe=s(mh);ale=n(sLe,"STRONG",{});var Rnt=s(ale);wfo=r(Rnt,"plbart"),Rnt.forEach(t),Afo=r(sLe," \u2014 "),TI=n(sLe,"A",{href:!0});var Pnt=s(TI);Lfo=r(Pnt,"PLBartTokenizer"),Pnt.forEach(t),yfo=r(sLe," (PLBart model)"),sLe.forEach(t),xfo=i(S),gh=n(S,"LI",{});var lLe=s(gh);nle=n(lLe,"STRONG",{});var Bnt=s(nle);$fo=r(Bnt,"prophetnet"),Bnt.forEach(t),kfo=r(lLe," \u2014 "),MI=n(lLe,"A",{href:!0});var Int=s(MI);Sfo=r(Int,"ProphetNetTokenizer"),Int.forEach(t),Rfo=r(lLe," (ProphetNet model)"),lLe.forEach(t),Pfo=i(S),Ls=n(S,"LI",{});var Gk=s(Ls);sle=n(Gk,"STRONG",{});var Nnt=s(sle);Bfo=r(Nnt,"qdqbert"),Nnt.forEach(t),Ifo=r(Gk," \u2014 "),EI=n(Gk,"A",{href:!0});var qnt=s(EI);Nfo=r(qnt,"BertTokenizer"),qnt.forEach(t),qfo=r(Gk," or "),CI=n(Gk,"A",{href:!0});var jnt=s(CI);jfo=r(jnt,"BertTokenizerFast"),jnt.forEach(t),Dfo=r(Gk," (QDQBert model)"),Gk.forEach(t),Gfo=i(S),hh=n(S,"LI",{});var iLe=s(hh);lle=n(iLe,"STRONG",{});var Dnt=s(lle);Ofo=r(Dnt,"rag"),Dnt.forEach(t),Vfo=r(iLe," \u2014 "),wI=n(iLe,"A",{href:!0});var Gnt=s(wI);Xfo=r(Gnt,"RagTokenizer"),Gnt.forEach(t),zfo=r(iLe," (RAG model)"),iLe.forEach(t),Qfo=i(S),ys=n(S,"LI",{});var Ok=s(ys);ile=n(Ok,"STRONG",{});var Ont=s(ile);Wfo=r(Ont,"realm"),Ont.forEach(t),Hfo=r(Ok," \u2014 "),AI=n(Ok,"A",{href:!0});var Vnt=s(AI);Ufo=r(Vnt,"RealmTokenizer"),Vnt.forEach(t),Jfo=r(Ok," or "),LI=n(Ok,"A",{href:!0});var Xnt=s(LI);Yfo=r(Xnt,"RealmTokenizerFast"),Xnt.forEach(t),Kfo=r(Ok," (REALM model)"),Ok.forEach(t),Zfo=i(S),xs=n(S,"LI",{});var Vk=s(xs);dle=n(Vk,"STRONG",{});var znt=s(dle);emo=r(znt,"reformer"),znt.forEach(t),omo=r(Vk," \u2014 "),yI=n(Vk,"A",{href:!0});var Qnt=s(yI);rmo=r(Qnt,"ReformerTokenizer"),Qnt.forEach(t),tmo=r(Vk," or "),xI=n(Vk,"A",{href:!0});var Wnt=s(xI);amo=r(Wnt,"ReformerTokenizerFast"),Wnt.forEach(t),nmo=r(Vk," (Reformer model)"),Vk.forEach(t),smo=i(S),$s=n(S,"LI",{});var Xk=s($s);cle=n(Xk,"STRONG",{});var Hnt=s(cle);lmo=r(Hnt,"rembert"),Hnt.forEach(t),imo=r(Xk," \u2014 "),$I=n(Xk,"A",{href:!0});var Unt=s($I);dmo=r(Unt,"RemBertTokenizer"),Unt.forEach(t),cmo=r(Xk," or "),kI=n(Xk,"A",{href:!0});var Jnt=s(kI);fmo=r(Jnt,"RemBertTokenizerFast"),Jnt.forEach(t),mmo=r(Xk," (RemBERT model)"),Xk.forEach(t),gmo=i(S),ks=n(S,"LI",{});var zk=s(ks);fle=n(zk,"STRONG",{});var Ynt=s(fle);hmo=r(Ynt,"retribert"),Ynt.forEach(t),pmo=r(zk," \u2014 "),SI=n(zk,"A",{href:!0});var Knt=s(SI);_mo=r(Knt,"RetriBertTokenizer"),Knt.forEach(t),umo=r(zk," or "),RI=n(zk,"A",{href:!0});var Znt=s(RI);bmo=r(Znt,"RetriBertTokenizerFast"),Znt.forEach(t),vmo=r(zk," (RetriBERT model)"),zk.forEach(t),Fmo=i(S),Ss=n(S,"LI",{});var Qk=s(Ss);mle=n(Qk,"STRONG",{});var est=s(mle);Tmo=r(est,"roberta"),est.forEach(t),Mmo=r(Qk," \u2014 "),PI=n(Qk,"A",{href:!0});var ost=s(PI);Emo=r(ost,"RobertaTokenizer"),ost.forEach(t),Cmo=r(Qk," or "),BI=n(Qk,"A",{href:!0});var rst=s(BI);wmo=r(rst,"RobertaTokenizerFast"),rst.forEach(t),Amo=r(Qk," (RoBERTa model)"),Qk.forEach(t),Lmo=i(S),Rs=n(S,"LI",{});var Wk=s(Rs);gle=n(Wk,"STRONG",{});var tst=s(gle);ymo=r(tst,"roformer"),tst.forEach(t),xmo=r(Wk," \u2014 "),II=n(Wk,"A",{href:!0});var ast=s(II);$mo=r(ast,"RoFormerTokenizer"),ast.forEach(t),kmo=r(Wk," or "),NI=n(Wk,"A",{href:!0});var nst=s(NI);Smo=r(nst,"RoFormerTokenizerFast"),nst.forEach(t),Rmo=r(Wk," (RoFormer model)"),Wk.forEach(t),Pmo=i(S),ph=n(S,"LI",{});var dLe=s(ph);hle=n(dLe,"STRONG",{});var sst=s(hle);Bmo=r(sst,"speech_to_text"),sst.forEach(t),Imo=r(dLe," \u2014 "),qI=n(dLe,"A",{href:!0});var lst=s(qI);Nmo=r(lst,"Speech2TextTokenizer"),lst.forEach(t),qmo=r(dLe," (Speech2Text model)"),dLe.forEach(t),jmo=i(S),_h=n(S,"LI",{});var cLe=s(_h);ple=n(cLe,"STRONG",{});var ist=s(ple);Dmo=r(ist,"speech_to_text_2"),ist.forEach(t),Gmo=r(cLe," \u2014 "),jI=n(cLe,"A",{href:!0});var dst=s(jI);Omo=r(dst,"Speech2Text2Tokenizer"),dst.forEach(t),Vmo=r(cLe," (Speech2Text2 model)"),cLe.forEach(t),Xmo=i(S),Ps=n(S,"LI",{});var Hk=s(Ps);_le=n(Hk,"STRONG",{});var cst=s(_le);zmo=r(cst,"splinter"),cst.forEach(t),Qmo=r(Hk," \u2014 "),DI=n(Hk,"A",{href:!0});var fst=s(DI);Wmo=r(fst,"SplinterTokenizer"),fst.forEach(t),Hmo=r(Hk," or "),GI=n(Hk,"A",{href:!0});var mst=s(GI);Umo=r(mst,"SplinterTokenizerFast"),mst.forEach(t),Jmo=r(Hk," (Splinter model)"),Hk.forEach(t),Ymo=i(S),Bs=n(S,"LI",{});var Uk=s(Bs);ule=n(Uk,"STRONG",{});var gst=s(ule);Kmo=r(gst,"squeezebert"),gst.forEach(t),Zmo=r(Uk," \u2014 "),OI=n(Uk,"A",{href:!0});var hst=s(OI);ego=r(hst,"SqueezeBertTokenizer"),hst.forEach(t),ogo=r(Uk," or "),VI=n(Uk,"A",{href:!0});var pst=s(VI);rgo=r(pst,"SqueezeBertTokenizerFast"),pst.forEach(t),tgo=r(Uk," (SqueezeBERT model)"),Uk.forEach(t),ago=i(S),Is=n(S,"LI",{});var Jk=s(Is);ble=n(Jk,"STRONG",{});var _st=s(ble);ngo=r(_st,"t5"),_st.forEach(t),sgo=r(Jk," \u2014 "),XI=n(Jk,"A",{href:!0});var ust=s(XI);lgo=r(ust,"T5Tokenizer"),ust.forEach(t),igo=r(Jk," or "),zI=n(Jk,"A",{href:!0});var bst=s(zI);dgo=r(bst,"T5TokenizerFast"),bst.forEach(t),cgo=r(Jk," (T5 model)"),Jk.forEach(t),fgo=i(S),uh=n(S,"LI",{});var fLe=s(uh);vle=n(fLe,"STRONG",{});var vst=s(vle);mgo=r(vst,"tapas"),vst.forEach(t),ggo=r(fLe," \u2014 "),QI=n(fLe,"A",{href:!0});var Fst=s(QI);hgo=r(Fst,"TapasTokenizer"),Fst.forEach(t),pgo=r(fLe," (TAPAS model)"),fLe.forEach(t),_go=i(S),bh=n(S,"LI",{});var mLe=s(bh);Fle=n(mLe,"STRONG",{});var Tst=s(Fle);ugo=r(Tst,"tapex"),Tst.forEach(t),bgo=r(mLe," \u2014 "),WI=n(mLe,"A",{href:!0});var Mst=s(WI);vgo=r(Mst,"TapexTokenizer"),Mst.forEach(t),Fgo=r(mLe," (TAPEX model)"),mLe.forEach(t),Tgo=i(S),vh=n(S,"LI",{});var gLe=s(vh);Tle=n(gLe,"STRONG",{});var Est=s(Tle);Mgo=r(Est,"transfo-xl"),Est.forEach(t),Ego=r(gLe," \u2014 "),HI=n(gLe,"A",{href:!0});var Cst=s(HI);Cgo=r(Cst,"TransfoXLTokenizer"),Cst.forEach(t),wgo=r(gLe," (Transformer-XL model)"),gLe.forEach(t),Ago=i(S),Ns=n(S,"LI",{});var Yk=s(Ns);Mle=n(Yk,"STRONG",{});var wst=s(Mle);Lgo=r(wst,"vilt"),wst.forEach(t),ygo=r(Yk," \u2014 "),UI=n(Yk,"A",{href:!0});var Ast=s(UI);xgo=r(Ast,"BertTokenizer"),Ast.forEach(t),$go=r(Yk," or "),JI=n(Yk,"A",{href:!0});var Lst=s(JI);kgo=r(Lst,"BertTokenizerFast"),Lst.forEach(t),Sgo=r(Yk," (ViLT model)"),Yk.forEach(t),Rgo=i(S),qs=n(S,"LI",{});var Kk=s(qs);Ele=n(Kk,"STRONG",{});var yst=s(Ele);Pgo=r(yst,"visual_bert"),yst.forEach(t),Bgo=r(Kk," \u2014 "),YI=n(Kk,"A",{href:!0});var xst=s(YI);Igo=r(xst,"BertTokenizer"),xst.forEach(t),Ngo=r(Kk," or "),KI=n(Kk,"A",{href:!0});var $st=s(KI);qgo=r($st,"BertTokenizerFast"),$st.forEach(t),jgo=r(Kk," (VisualBERT model)"),Kk.forEach(t),Dgo=i(S),Fh=n(S,"LI",{});var hLe=s(Fh);Cle=n(hLe,"STRONG",{});var kst=s(Cle);Ggo=r(kst,"wav2vec2"),kst.forEach(t),Ogo=r(hLe," \u2014 "),ZI=n(hLe,"A",{href:!0});var Sst=s(ZI);Vgo=r(Sst,"Wav2Vec2CTCTokenizer"),Sst.forEach(t),Xgo=r(hLe," (Wav2Vec2 model)"),hLe.forEach(t),zgo=i(S),Th=n(S,"LI",{});var pLe=s(Th);wle=n(pLe,"STRONG",{});var Rst=s(wle);Qgo=r(Rst,"wav2vec2-conformer"),Rst.forEach(t),Wgo=r(pLe," \u2014 "),eN=n(pLe,"A",{href:!0});var Pst=s(eN);Hgo=r(Pst,"Wav2Vec2CTCTokenizer"),Pst.forEach(t),Ugo=r(pLe," (Wav2Vec2-Conformer model)"),pLe.forEach(t),Jgo=i(S),Mh=n(S,"LI",{});var _Le=s(Mh);Ale=n(_Le,"STRONG",{});var Bst=s(Ale);Ygo=r(Bst,"wav2vec2_phoneme"),Bst.forEach(t),Kgo=r(_Le," \u2014 "),oN=n(_Le,"A",{href:!0});var Ist=s(oN);Zgo=r(Ist,"Wav2Vec2PhonemeCTCTokenizer"),Ist.forEach(t),eho=r(_Le," (Wav2Vec2Phoneme model)"),_Le.forEach(t),oho=i(S),js=n(S,"LI",{});var Zk=s(js);Lle=n(Zk,"STRONG",{});var Nst=s(Lle);rho=r(Nst,"xglm"),Nst.forEach(t),tho=r(Zk," \u2014 "),rN=n(Zk,"A",{href:!0});var qst=s(rN);aho=r(qst,"XGLMTokenizer"),qst.forEach(t),nho=r(Zk," or "),tN=n(Zk,"A",{href:!0});var jst=s(tN);sho=r(jst,"XGLMTokenizerFast"),jst.forEach(t),lho=r(Zk," (XGLM model)"),Zk.forEach(t),iho=i(S),Eh=n(S,"LI",{});var uLe=s(Eh);yle=n(uLe,"STRONG",{});var Dst=s(yle);dho=r(Dst,"xlm"),Dst.forEach(t),cho=r(uLe," \u2014 "),aN=n(uLe,"A",{href:!0});var Gst=s(aN);fho=r(Gst,"XLMTokenizer"),Gst.forEach(t),mho=r(uLe," (XLM model)"),uLe.forEach(t),gho=i(S),Ch=n(S,"LI",{});var bLe=s(Ch);xle=n(bLe,"STRONG",{});var Ost=s(xle);hho=r(Ost,"xlm-prophetnet"),Ost.forEach(t),pho=r(bLe," \u2014 "),nN=n(bLe,"A",{href:!0});var Vst=s(nN);_ho=r(Vst,"XLMProphetNetTokenizer"),Vst.forEach(t),uho=r(bLe," (XLM-ProphetNet model)"),bLe.forEach(t),bho=i(S),Ds=n(S,"LI",{});var eS=s(Ds);$le=n(eS,"STRONG",{});var Xst=s($le);vho=r(Xst,"xlm-roberta"),Xst.forEach(t),Fho=r(eS," \u2014 "),sN=n(eS,"A",{href:!0});var zst=s(sN);Tho=r(zst,"XLMRobertaTokenizer"),zst.forEach(t),Mho=r(eS," or "),lN=n(eS,"A",{href:!0});var Qst=s(lN);Eho=r(Qst,"XLMRobertaTokenizerFast"),Qst.forEach(t),Cho=r(eS," (XLM-RoBERTa model)"),eS.forEach(t),who=i(S),Gs=n(S,"LI",{});var oS=s(Gs);kle=n(oS,"STRONG",{});var Wst=s(kle);Aho=r(Wst,"xlm-roberta-xl"),Wst.forEach(t),Lho=r(oS," \u2014 "),iN=n(oS,"A",{href:!0});var Hst=s(iN);yho=r(Hst,"RobertaTokenizer"),Hst.forEach(t),xho=r(oS," or "),dN=n(oS,"A",{href:!0});var Ust=s(dN);$ho=r(Ust,"RobertaTokenizerFast"),Ust.forEach(t),kho=r(oS," (XLM-RoBERTa-XL model)"),oS.forEach(t),Sho=i(S),Os=n(S,"LI",{});var rS=s(Os);Sle=n(rS,"STRONG",{});var Jst=s(Sle);Rho=r(Jst,"xlnet"),Jst.forEach(t),Pho=r(rS," \u2014 "),cN=n(rS,"A",{href:!0});var Yst=s(cN);Bho=r(Yst,"XLNetTokenizer"),Yst.forEach(t),Iho=r(rS," or "),fN=n(rS,"A",{href:!0});var Kst=s(fN);Nho=r(Kst,"XLNetTokenizerFast"),Kst.forEach(t),qho=r(rS," (XLNet model)"),rS.forEach(t),jho=i(S),Vs=n(S,"LI",{});var tS=s(Vs);Rle=n(tS,"STRONG",{});var Zst=s(Rle);Dho=r(Zst,"yoso"),Zst.forEach(t),Gho=r(tS," \u2014 "),mN=n(tS,"A",{href:!0});var elt=s(mN);Oho=r(elt,"AlbertTokenizer"),elt.forEach(t),Vho=r(tS," or "),gN=n(tS,"A",{href:!0});var olt=s(gN);Xho=r(olt,"AlbertTokenizerFast"),olt.forEach(t),zho=r(tS," (YOSO model)"),tS.forEach(t),S.forEach(t),Qho=i(Us),T(wh.$$.fragment,Us),Us.forEach(t),Who=i(Hs),Ah=n(Hs,"DIV",{class:!0});var _Xe=s(Ah);T(W6.$$.fragment,_Xe),Hho=i(_Xe),Ple=n(_Xe,"P",{});var rlt=s(Ple);Uho=r(rlt,"Register a new tokenizer in this mapping."),rlt.forEach(t),_Xe.forEach(t),Hs.forEach(t),pOe=i(f),Ri=n(f,"H2",{class:!0});var uXe=s(Ri);Lh=n(uXe,"A",{id:!0,class:!0,href:!0});var tlt=s(Lh);Ble=n(tlt,"SPAN",{});var alt=s(Ble);T(H6.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),Jho=i(uXe),Ile=n(uXe,"SPAN",{});var nlt=s(Ile);Yho=r(nlt,"AutoFeatureExtractor"),nlt.forEach(t),uXe.forEach(t),_Oe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(U6.$$.fragment,Js),Kho=i(Js),J6=n(Js,"P",{});var bXe=s(J6);Zho=r(bXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hN=n(bXe,"A",{href:!0});var slt=s(hN);epo=r(slt,"AutoFeatureExtractor.from_pretrained()"),slt.forEach(t),opo=r(bXe," class method."),bXe.forEach(t),rpo=i(Js),Y6=n(Js,"P",{});var vXe=s(Y6);tpo=r(vXe,"This class cannot be instantiated directly using "),Nle=n(vXe,"CODE",{});var llt=s(Nle);apo=r(llt,"__init__()"),llt.forEach(t),npo=r(vXe," (throws an error)."),vXe.forEach(t),spo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(K6.$$.fragment,ra),lpo=i(ra),qle=n(ra,"P",{});var ilt=s(qle);ipo=r(ilt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ilt.forEach(t),dpo=i(ra),Sa=n(ra,"P",{});var Bw=s(Sa);cpo=r(Bw,"The feature extractor class to instantiate is selected based on the "),jle=n(Bw,"CODE",{});var dlt=s(jle);fpo=r(dlt,"model_type"),dlt.forEach(t),mpo=r(Bw,` property of the config object
(either passed as an argument or loaded from `),Dle=n(Bw,"CODE",{});var clt=s(Dle);gpo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),hpo=r(Bw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gle=n(Bw,"CODE",{});var flt=s(Gle);ppo=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),_po=r(Bw,":"),Bw.forEach(t),upo=i(ra),Y=n(ra,"UL",{});var K=s(Y);yh=n(K,"LI",{});var vLe=s(yh);Ole=n(vLe,"STRONG",{});var mlt=s(Ole);bpo=r(mlt,"beit"),mlt.forEach(t),vpo=r(vLe," \u2014 "),pN=n(vLe,"A",{href:!0});var glt=s(pN);Fpo=r(glt,"BeitFeatureExtractor"),glt.forEach(t),Tpo=r(vLe," (BEiT model)"),vLe.forEach(t),Mpo=i(K),xh=n(K,"LI",{});var FLe=s(xh);Vle=n(FLe,"STRONG",{});var hlt=s(Vle);Epo=r(hlt,"clip"),hlt.forEach(t),Cpo=r(FLe," \u2014 "),_N=n(FLe,"A",{href:!0});var plt=s(_N);wpo=r(plt,"CLIPFeatureExtractor"),plt.forEach(t),Apo=r(FLe," (CLIP model)"),FLe.forEach(t),Lpo=i(K),$h=n(K,"LI",{});var TLe=s($h);Xle=n(TLe,"STRONG",{});var _lt=s(Xle);ypo=r(_lt,"convnext"),_lt.forEach(t),xpo=r(TLe," \u2014 "),uN=n(TLe,"A",{href:!0});var ult=s(uN);$po=r(ult,"ConvNextFeatureExtractor"),ult.forEach(t),kpo=r(TLe," (ConvNeXT model)"),TLe.forEach(t),Spo=i(K),kh=n(K,"LI",{});var MLe=s(kh);zle=n(MLe,"STRONG",{});var blt=s(zle);Rpo=r(blt,"cvt"),blt.forEach(t),Ppo=r(MLe," \u2014 "),bN=n(MLe,"A",{href:!0});var vlt=s(bN);Bpo=r(vlt,"ConvNextFeatureExtractor"),vlt.forEach(t),Ipo=r(MLe," (CvT model)"),MLe.forEach(t),Npo=i(K),Sh=n(K,"LI",{});var ELe=s(Sh);Qle=n(ELe,"STRONG",{});var Flt=s(Qle);qpo=r(Flt,"data2vec-audio"),Flt.forEach(t),jpo=r(ELe," \u2014 "),vN=n(ELe,"A",{href:!0});var Tlt=s(vN);Dpo=r(Tlt,"Wav2Vec2FeatureExtractor"),Tlt.forEach(t),Gpo=r(ELe," (Data2VecAudio model)"),ELe.forEach(t),Opo=i(K),Rh=n(K,"LI",{});var CLe=s(Rh);Wle=n(CLe,"STRONG",{});var Mlt=s(Wle);Vpo=r(Mlt,"data2vec-vision"),Mlt.forEach(t),Xpo=r(CLe," \u2014 "),FN=n(CLe,"A",{href:!0});var Elt=s(FN);zpo=r(Elt,"BeitFeatureExtractor"),Elt.forEach(t),Qpo=r(CLe," (Data2VecVision model)"),CLe.forEach(t),Wpo=i(K),Ph=n(K,"LI",{});var wLe=s(Ph);Hle=n(wLe,"STRONG",{});var Clt=s(Hle);Hpo=r(Clt,"deit"),Clt.forEach(t),Upo=r(wLe," \u2014 "),TN=n(wLe,"A",{href:!0});var wlt=s(TN);Jpo=r(wlt,"DeiTFeatureExtractor"),wlt.forEach(t),Ypo=r(wLe," (DeiT model)"),wLe.forEach(t),Kpo=i(K),Bh=n(K,"LI",{});var ALe=s(Bh);Ule=n(ALe,"STRONG",{});var Alt=s(Ule);Zpo=r(Alt,"detr"),Alt.forEach(t),e_o=r(ALe," \u2014 "),MN=n(ALe,"A",{href:!0});var Llt=s(MN);o_o=r(Llt,"DetrFeatureExtractor"),Llt.forEach(t),r_o=r(ALe," (DETR model)"),ALe.forEach(t),t_o=i(K),Ih=n(K,"LI",{});var LLe=s(Ih);Jle=n(LLe,"STRONG",{});var ylt=s(Jle);a_o=r(ylt,"dpt"),ylt.forEach(t),n_o=r(LLe," \u2014 "),EN=n(LLe,"A",{href:!0});var xlt=s(EN);s_o=r(xlt,"DPTFeatureExtractor"),xlt.forEach(t),l_o=r(LLe," (DPT model)"),LLe.forEach(t),i_o=i(K),Nh=n(K,"LI",{});var yLe=s(Nh);Yle=n(yLe,"STRONG",{});var $lt=s(Yle);d_o=r($lt,"flava"),$lt.forEach(t),c_o=r(yLe," \u2014 "),CN=n(yLe,"A",{href:!0});var klt=s(CN);f_o=r(klt,"FlavaFeatureExtractor"),klt.forEach(t),m_o=r(yLe," (FLAVA model)"),yLe.forEach(t),g_o=i(K),qh=n(K,"LI",{});var xLe=s(qh);Kle=n(xLe,"STRONG",{});var Slt=s(Kle);h_o=r(Slt,"glpn"),Slt.forEach(t),p_o=r(xLe," \u2014 "),wN=n(xLe,"A",{href:!0});var Rlt=s(wN);__o=r(Rlt,"GLPNFeatureExtractor"),Rlt.forEach(t),u_o=r(xLe," (GLPN model)"),xLe.forEach(t),b_o=i(K),jh=n(K,"LI",{});var $Le=s(jh);Zle=n($Le,"STRONG",{});var Plt=s(Zle);v_o=r(Plt,"hubert"),Plt.forEach(t),F_o=r($Le," \u2014 "),AN=n($Le,"A",{href:!0});var Blt=s(AN);T_o=r(Blt,"Wav2Vec2FeatureExtractor"),Blt.forEach(t),M_o=r($Le," (Hubert model)"),$Le.forEach(t),E_o=i(K),Dh=n(K,"LI",{});var kLe=s(Dh);eie=n(kLe,"STRONG",{});var Ilt=s(eie);C_o=r(Ilt,"imagegpt"),Ilt.forEach(t),w_o=r(kLe," \u2014 "),LN=n(kLe,"A",{href:!0});var Nlt=s(LN);A_o=r(Nlt,"ImageGPTFeatureExtractor"),Nlt.forEach(t),L_o=r(kLe," (ImageGPT model)"),kLe.forEach(t),y_o=i(K),Gh=n(K,"LI",{});var SLe=s(Gh);oie=n(SLe,"STRONG",{});var qlt=s(oie);x_o=r(qlt,"layoutlmv2"),qlt.forEach(t),$_o=r(SLe," \u2014 "),yN=n(SLe,"A",{href:!0});var jlt=s(yN);k_o=r(jlt,"LayoutLMv2FeatureExtractor"),jlt.forEach(t),S_o=r(SLe," (LayoutLMv2 model)"),SLe.forEach(t),R_o=i(K),Oh=n(K,"LI",{});var RLe=s(Oh);rie=n(RLe,"STRONG",{});var Dlt=s(rie);P_o=r(Dlt,"layoutlmv3"),Dlt.forEach(t),B_o=r(RLe," \u2014 "),xN=n(RLe,"A",{href:!0});var Glt=s(xN);I_o=r(Glt,"LayoutLMv3FeatureExtractor"),Glt.forEach(t),N_o=r(RLe," (LayoutLMv3 model)"),RLe.forEach(t),q_o=i(K),Vh=n(K,"LI",{});var PLe=s(Vh);tie=n(PLe,"STRONG",{});var Olt=s(tie);j_o=r(Olt,"levit"),Olt.forEach(t),D_o=r(PLe," \u2014 "),$N=n(PLe,"A",{href:!0});var Vlt=s($N);G_o=r(Vlt,"LevitFeatureExtractor"),Vlt.forEach(t),O_o=r(PLe," (LeViT model)"),PLe.forEach(t),V_o=i(K),Xh=n(K,"LI",{});var BLe=s(Xh);aie=n(BLe,"STRONG",{});var Xlt=s(aie);X_o=r(Xlt,"maskformer"),Xlt.forEach(t),z_o=r(BLe," \u2014 "),kN=n(BLe,"A",{href:!0});var zlt=s(kN);Q_o=r(zlt,"MaskFormerFeatureExtractor"),zlt.forEach(t),W_o=r(BLe," (MaskFormer model)"),BLe.forEach(t),H_o=i(K),zh=n(K,"LI",{});var ILe=s(zh);nie=n(ILe,"STRONG",{});var Qlt=s(nie);U_o=r(Qlt,"mctct"),Qlt.forEach(t),J_o=r(ILe," \u2014 "),SN=n(ILe,"A",{href:!0});var Wlt=s(SN);Y_o=r(Wlt,"MCTCTFeatureExtractor"),Wlt.forEach(t),K_o=r(ILe," (M-CTC-T model)"),ILe.forEach(t),Z_o=i(K),Qh=n(K,"LI",{});var NLe=s(Qh);sie=n(NLe,"STRONG",{});var Hlt=s(sie);euo=r(Hlt,"perceiver"),Hlt.forEach(t),ouo=r(NLe," \u2014 "),RN=n(NLe,"A",{href:!0});var Ult=s(RN);ruo=r(Ult,"PerceiverFeatureExtractor"),Ult.forEach(t),tuo=r(NLe," (Perceiver model)"),NLe.forEach(t),auo=i(K),Wh=n(K,"LI",{});var qLe=s(Wh);lie=n(qLe,"STRONG",{});var Jlt=s(lie);nuo=r(Jlt,"poolformer"),Jlt.forEach(t),suo=r(qLe," \u2014 "),PN=n(qLe,"A",{href:!0});var Ylt=s(PN);luo=r(Ylt,"PoolFormerFeatureExtractor"),Ylt.forEach(t),iuo=r(qLe," (PoolFormer model)"),qLe.forEach(t),duo=i(K),Hh=n(K,"LI",{});var jLe=s(Hh);iie=n(jLe,"STRONG",{});var Klt=s(iie);cuo=r(Klt,"regnet"),Klt.forEach(t),fuo=r(jLe," \u2014 "),BN=n(jLe,"A",{href:!0});var Zlt=s(BN);muo=r(Zlt,"ConvNextFeatureExtractor"),Zlt.forEach(t),guo=r(jLe," (RegNet model)"),jLe.forEach(t),huo=i(K),Uh=n(K,"LI",{});var DLe=s(Uh);die=n(DLe,"STRONG",{});var eit=s(die);puo=r(eit,"resnet"),eit.forEach(t),_uo=r(DLe," \u2014 "),IN=n(DLe,"A",{href:!0});var oit=s(IN);uuo=r(oit,"ConvNextFeatureExtractor"),oit.forEach(t),buo=r(DLe," (ResNet model)"),DLe.forEach(t),vuo=i(K),Jh=n(K,"LI",{});var GLe=s(Jh);cie=n(GLe,"STRONG",{});var rit=s(cie);Fuo=r(rit,"segformer"),rit.forEach(t),Tuo=r(GLe," \u2014 "),NN=n(GLe,"A",{href:!0});var tit=s(NN);Muo=r(tit,"SegformerFeatureExtractor"),tit.forEach(t),Euo=r(GLe," (SegFormer model)"),GLe.forEach(t),Cuo=i(K),Yh=n(K,"LI",{});var OLe=s(Yh);fie=n(OLe,"STRONG",{});var ait=s(fie);wuo=r(ait,"speech_to_text"),ait.forEach(t),Auo=r(OLe," \u2014 "),qN=n(OLe,"A",{href:!0});var nit=s(qN);Luo=r(nit,"Speech2TextFeatureExtractor"),nit.forEach(t),yuo=r(OLe," (Speech2Text model)"),OLe.forEach(t),xuo=i(K),Kh=n(K,"LI",{});var VLe=s(Kh);mie=n(VLe,"STRONG",{});var sit=s(mie);$uo=r(sit,"swin"),sit.forEach(t),kuo=r(VLe," \u2014 "),jN=n(VLe,"A",{href:!0});var lit=s(jN);Suo=r(lit,"ViTFeatureExtractor"),lit.forEach(t),Ruo=r(VLe," (Swin Transformer model)"),VLe.forEach(t),Puo=i(K),Zh=n(K,"LI",{});var XLe=s(Zh);gie=n(XLe,"STRONG",{});var iit=s(gie);Buo=r(iit,"van"),iit.forEach(t),Iuo=r(XLe," \u2014 "),DN=n(XLe,"A",{href:!0});var dit=s(DN);Nuo=r(dit,"ConvNextFeatureExtractor"),dit.forEach(t),quo=r(XLe," (VAN model)"),XLe.forEach(t),juo=i(K),ep=n(K,"LI",{});var zLe=s(ep);hie=n(zLe,"STRONG",{});var cit=s(hie);Duo=r(cit,"vilt"),cit.forEach(t),Guo=r(zLe," \u2014 "),GN=n(zLe,"A",{href:!0});var fit=s(GN);Ouo=r(fit,"ViltFeatureExtractor"),fit.forEach(t),Vuo=r(zLe," (ViLT model)"),zLe.forEach(t),Xuo=i(K),op=n(K,"LI",{});var QLe=s(op);pie=n(QLe,"STRONG",{});var mit=s(pie);zuo=r(mit,"vit"),mit.forEach(t),Quo=r(QLe," \u2014 "),ON=n(QLe,"A",{href:!0});var git=s(ON);Wuo=r(git,"ViTFeatureExtractor"),git.forEach(t),Huo=r(QLe," (ViT model)"),QLe.forEach(t),Uuo=i(K),rp=n(K,"LI",{});var WLe=s(rp);_ie=n(WLe,"STRONG",{});var hit=s(_ie);Juo=r(hit,"vit_mae"),hit.forEach(t),Yuo=r(WLe," \u2014 "),VN=n(WLe,"A",{href:!0});var pit=s(VN);Kuo=r(pit,"ViTFeatureExtractor"),pit.forEach(t),Zuo=r(WLe," (ViTMAE model)"),WLe.forEach(t),e7o=i(K),tp=n(K,"LI",{});var HLe=s(tp);uie=n(HLe,"STRONG",{});var _it=s(uie);o7o=r(_it,"wav2vec2"),_it.forEach(t),r7o=r(HLe," \u2014 "),XN=n(HLe,"A",{href:!0});var uit=s(XN);t7o=r(uit,"Wav2Vec2FeatureExtractor"),uit.forEach(t),a7o=r(HLe," (Wav2Vec2 model)"),HLe.forEach(t),n7o=i(K),ap=n(K,"LI",{});var ULe=s(ap);bie=n(ULe,"STRONG",{});var bit=s(bie);s7o=r(bit,"wav2vec2-conformer"),bit.forEach(t),l7o=r(ULe," \u2014 "),zN=n(ULe,"A",{href:!0});var vit=s(zN);i7o=r(vit,"Wav2Vec2FeatureExtractor"),vit.forEach(t),d7o=r(ULe," (Wav2Vec2-Conformer model)"),ULe.forEach(t),c7o=i(K),np=n(K,"LI",{});var JLe=s(np);vie=n(JLe,"STRONG",{});var Fit=s(vie);f7o=r(Fit,"yolos"),Fit.forEach(t),m7o=r(JLe," \u2014 "),QN=n(JLe,"A",{href:!0});var Tit=s(QN);g7o=r(Tit,"YolosFeatureExtractor"),Tit.forEach(t),h7o=r(JLe," (YOLOS model)"),JLe.forEach(t),K.forEach(t),p7o=i(ra),T(sp.$$.fragment,ra),_7o=i(ra),T(lp.$$.fragment,ra),ra.forEach(t),u7o=i(Js),ip=n(Js,"DIV",{class:!0});var FXe=s(ip);T(Z6.$$.fragment,FXe),b7o=i(FXe),Fie=n(FXe,"P",{});var Mit=s(Fie);v7o=r(Mit,"Register a new feature extractor for this class."),Mit.forEach(t),FXe.forEach(t),Js.forEach(t),uOe=i(f),Pi=n(f,"H2",{class:!0});var TXe=s(Pi);dp=n(TXe,"A",{id:!0,class:!0,href:!0});var Eit=s(dp);Tie=n(Eit,"SPAN",{});var Cit=s(Tie);T(eL.$$.fragment,Cit),Cit.forEach(t),Eit.forEach(t),F7o=i(TXe),Mie=n(TXe,"SPAN",{});var wit=s(Mie);T7o=r(wit,"AutoProcessor"),wit.forEach(t),TXe.forEach(t),bOe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(oL.$$.fragment,Ys),M7o=i(Ys),rL=n(Ys,"P",{});var MXe=s(rL);E7o=r(MXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WN=n(MXe,"A",{href:!0});var Ait=s(WN);C7o=r(Ait,"AutoProcessor.from_pretrained()"),Ait.forEach(t),w7o=r(MXe," class method."),MXe.forEach(t),A7o=i(Ys),tL=n(Ys,"P",{});var EXe=s(tL);L7o=r(EXe,"This class cannot be instantiated directly using "),Eie=n(EXe,"CODE",{});var Lit=s(Eie);y7o=r(Lit,"__init__()"),Lit.forEach(t),x7o=r(EXe," (throws an error)."),EXe.forEach(t),$7o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(aL.$$.fragment,ta),k7o=i(ta),Cie=n(ta,"P",{});var yit=s(Cie);S7o=r(yit,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yit.forEach(t),R7o=i(ta),Bi=n(ta,"P",{});var $oe=s(Bi);P7o=r($oe,"The processor class to instantiate is selected based on the "),wie=n($oe,"CODE",{});var xit=s(wie);B7o=r(xit,"model_type"),xit.forEach(t),I7o=r($oe,` property of the config object (either
passed as an argument or loaded from `),Aie=n($oe,"CODE",{});var $it=s(Aie);N7o=r($it,"pretrained_model_name_or_path"),$it.forEach(t),q7o=r($oe," if possible):"),$oe.forEach(t),j7o=i(ta),he=n(ta,"UL",{});var ue=s(he);cp=n(ue,"LI",{});var YLe=s(cp);Lie=n(YLe,"STRONG",{});var kit=s(Lie);D7o=r(kit,"clip"),kit.forEach(t),G7o=r(YLe," \u2014 "),HN=n(YLe,"A",{href:!0});var Sit=s(HN);O7o=r(Sit,"CLIPProcessor"),Sit.forEach(t),V7o=r(YLe," (CLIP model)"),YLe.forEach(t),X7o=i(ue),fp=n(ue,"LI",{});var KLe=s(fp);yie=n(KLe,"STRONG",{});var Rit=s(yie);z7o=r(Rit,"flava"),Rit.forEach(t),Q7o=r(KLe," \u2014 "),xie=n(KLe,"CODE",{});var Pit=s(xie);W7o=r(Pit,"FLAVAProcessor"),Pit.forEach(t),H7o=r(KLe," (FLAVA model)"),KLe.forEach(t),U7o=i(ue),mp=n(ue,"LI",{});var ZLe=s(mp);$ie=n(ZLe,"STRONG",{});var Bit=s($ie);J7o=r(Bit,"layoutlmv2"),Bit.forEach(t),Y7o=r(ZLe," \u2014 "),UN=n(ZLe,"A",{href:!0});var Iit=s(UN);K7o=r(Iit,"LayoutLMv2Processor"),Iit.forEach(t),Z7o=r(ZLe," (LayoutLMv2 model)"),ZLe.forEach(t),e1o=i(ue),gp=n(ue,"LI",{});var eye=s(gp);kie=n(eye,"STRONG",{});var Nit=s(kie);o1o=r(Nit,"layoutlmv3"),Nit.forEach(t),r1o=r(eye," \u2014 "),JN=n(eye,"A",{href:!0});var qit=s(JN);t1o=r(qit,"LayoutLMv3Processor"),qit.forEach(t),a1o=r(eye," (LayoutLMv3 model)"),eye.forEach(t),n1o=i(ue),hp=n(ue,"LI",{});var oye=s(hp);Sie=n(oye,"STRONG",{});var jit=s(Sie);s1o=r(jit,"layoutxlm"),jit.forEach(t),l1o=r(oye," \u2014 "),YN=n(oye,"A",{href:!0});var Dit=s(YN);i1o=r(Dit,"LayoutXLMProcessor"),Dit.forEach(t),d1o=r(oye," (LayoutXLM model)"),oye.forEach(t),c1o=i(ue),pp=n(ue,"LI",{});var rye=s(pp);Rie=n(rye,"STRONG",{});var Git=s(Rie);f1o=r(Git,"sew"),Git.forEach(t),m1o=r(rye," \u2014 "),KN=n(rye,"A",{href:!0});var Oit=s(KN);g1o=r(Oit,"Wav2Vec2Processor"),Oit.forEach(t),h1o=r(rye," (SEW model)"),rye.forEach(t),p1o=i(ue),_p=n(ue,"LI",{});var tye=s(_p);Pie=n(tye,"STRONG",{});var Vit=s(Pie);_1o=r(Vit,"sew-d"),Vit.forEach(t),u1o=r(tye," \u2014 "),ZN=n(tye,"A",{href:!0});var Xit=s(ZN);b1o=r(Xit,"Wav2Vec2Processor"),Xit.forEach(t),v1o=r(tye," (SEW-D model)"),tye.forEach(t),F1o=i(ue),up=n(ue,"LI",{});var aye=s(up);Bie=n(aye,"STRONG",{});var zit=s(Bie);T1o=r(zit,"speech_to_text"),zit.forEach(t),M1o=r(aye," \u2014 "),eq=n(aye,"A",{href:!0});var Qit=s(eq);E1o=r(Qit,"Speech2TextProcessor"),Qit.forEach(t),C1o=r(aye," (Speech2Text model)"),aye.forEach(t),w1o=i(ue),bp=n(ue,"LI",{});var nye=s(bp);Iie=n(nye,"STRONG",{});var Wit=s(Iie);A1o=r(Wit,"speech_to_text_2"),Wit.forEach(t),L1o=r(nye," \u2014 "),oq=n(nye,"A",{href:!0});var Hit=s(oq);y1o=r(Hit,"Speech2Text2Processor"),Hit.forEach(t),x1o=r(nye," (Speech2Text2 model)"),nye.forEach(t),$1o=i(ue),vp=n(ue,"LI",{});var sye=s(vp);Nie=n(sye,"STRONG",{});var Uit=s(Nie);k1o=r(Uit,"trocr"),Uit.forEach(t),S1o=r(sye," \u2014 "),rq=n(sye,"A",{href:!0});var Jit=s(rq);R1o=r(Jit,"TrOCRProcessor"),Jit.forEach(t),P1o=r(sye," (TrOCR model)"),sye.forEach(t),B1o=i(ue),Fp=n(ue,"LI",{});var lye=s(Fp);qie=n(lye,"STRONG",{});var Yit=s(qie);I1o=r(Yit,"unispeech"),Yit.forEach(t),N1o=r(lye," \u2014 "),tq=n(lye,"A",{href:!0});var Kit=s(tq);q1o=r(Kit,"Wav2Vec2Processor"),Kit.forEach(t),j1o=r(lye," (UniSpeech model)"),lye.forEach(t),D1o=i(ue),Tp=n(ue,"LI",{});var iye=s(Tp);jie=n(iye,"STRONG",{});var Zit=s(jie);G1o=r(Zit,"unispeech-sat"),Zit.forEach(t),O1o=r(iye," \u2014 "),aq=n(iye,"A",{href:!0});var edt=s(aq);V1o=r(edt,"Wav2Vec2Processor"),edt.forEach(t),X1o=r(iye," (UniSpeechSat model)"),iye.forEach(t),z1o=i(ue),Mp=n(ue,"LI",{});var dye=s(Mp);Die=n(dye,"STRONG",{});var odt=s(Die);Q1o=r(odt,"vilt"),odt.forEach(t),W1o=r(dye," \u2014 "),nq=n(dye,"A",{href:!0});var rdt=s(nq);H1o=r(rdt,"ViltProcessor"),rdt.forEach(t),U1o=r(dye," (ViLT model)"),dye.forEach(t),J1o=i(ue),Ep=n(ue,"LI",{});var cye=s(Ep);Gie=n(cye,"STRONG",{});var tdt=s(Gie);Y1o=r(tdt,"vision-text-dual-encoder"),tdt.forEach(t),K1o=r(cye," \u2014 "),sq=n(cye,"A",{href:!0});var adt=s(sq);Z1o=r(adt,"VisionTextDualEncoderProcessor"),adt.forEach(t),e2o=r(cye," (VisionTextDualEncoder model)"),cye.forEach(t),o2o=i(ue),Cp=n(ue,"LI",{});var fye=s(Cp);Oie=n(fye,"STRONG",{});var ndt=s(Oie);r2o=r(ndt,"wav2vec2"),ndt.forEach(t),t2o=r(fye," \u2014 "),lq=n(fye,"A",{href:!0});var sdt=s(lq);a2o=r(sdt,"Wav2Vec2Processor"),sdt.forEach(t),n2o=r(fye," (Wav2Vec2 model)"),fye.forEach(t),s2o=i(ue),wp=n(ue,"LI",{});var mye=s(wp);Vie=n(mye,"STRONG",{});var ldt=s(Vie);l2o=r(ldt,"wav2vec2-conformer"),ldt.forEach(t),i2o=r(mye," \u2014 "),iq=n(mye,"A",{href:!0});var idt=s(iq);d2o=r(idt,"Wav2Vec2Processor"),idt.forEach(t),c2o=r(mye," (Wav2Vec2-Conformer model)"),mye.forEach(t),f2o=i(ue),Ap=n(ue,"LI",{});var gye=s(Ap);Xie=n(gye,"STRONG",{});var ddt=s(Xie);m2o=r(ddt,"wavlm"),ddt.forEach(t),g2o=r(gye," \u2014 "),dq=n(gye,"A",{href:!0});var cdt=s(dq);h2o=r(cdt,"Wav2Vec2Processor"),cdt.forEach(t),p2o=r(gye," (WavLM model)"),gye.forEach(t),ue.forEach(t),_2o=i(ta),T(Lp.$$.fragment,ta),u2o=i(ta),T(yp.$$.fragment,ta),ta.forEach(t),b2o=i(Ys),xp=n(Ys,"DIV",{class:!0});var CXe=s(xp);T(nL.$$.fragment,CXe),v2o=i(CXe),zie=n(CXe,"P",{});var fdt=s(zie);F2o=r(fdt,"Register a new processor for this class."),fdt.forEach(t),CXe.forEach(t),Ys.forEach(t),vOe=i(f),Ii=n(f,"H2",{class:!0});var wXe=s(Ii);$p=n(wXe,"A",{id:!0,class:!0,href:!0});var mdt=s($p);Qie=n(mdt,"SPAN",{});var gdt=s(Qie);T(sL.$$.fragment,gdt),gdt.forEach(t),mdt.forEach(t),T2o=i(wXe),Wie=n(wXe,"SPAN",{});var hdt=s(Wie);M2o=r(hdt,"AutoModel"),hdt.forEach(t),wXe.forEach(t),FOe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(lL.$$.fragment,Ks),E2o=i(Ks),Ni=n(Ks,"P",{});var koe=s(Ni);C2o=r(koe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cq=n(koe,"A",{href:!0});var pdt=s(cq);w2o=r(pdt,"from_pretrained()"),pdt.forEach(t),A2o=r(koe," class method or the "),fq=n(koe,"A",{href:!0});var _dt=s(fq);L2o=r(_dt,"from_config()"),_dt.forEach(t),y2o=r(koe,` class
method.`),koe.forEach(t),x2o=i(Ks),iL=n(Ks,"P",{});var AXe=s(iL);$2o=r(AXe,"This class cannot be instantiated directly using "),Hie=n(AXe,"CODE",{});var udt=s(Hie);k2o=r(udt,"__init__()"),udt.forEach(t),S2o=r(AXe," (throws an error)."),AXe.forEach(t),R2o=i(Ks),nt=n(Ks,"DIV",{class:!0});var Iw=s(nt);T(dL.$$.fragment,Iw),P2o=i(Iw),Uie=n(Iw,"P",{});var bdt=s(Uie);B2o=r(bdt,"Instantiates one of the base model classes of the library from a configuration."),bdt.forEach(t),I2o=i(Iw),qi=n(Iw,"P",{});var Soe=s(qi);N2o=r(Soe,`Note:
Loading a model from its configuration file does `),Jie=n(Soe,"STRONG",{});var vdt=s(Jie);q2o=r(vdt,"not"),vdt.forEach(t),j2o=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=n(Soe,"A",{href:!0});var Fdt=s(mq);D2o=r(Fdt,"from_pretrained()"),Fdt.forEach(t),G2o=r(Soe," to load the model weights."),Soe.forEach(t),O2o=i(Iw),T(kp.$$.fragment,Iw),Iw.forEach(t),V2o=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(cL.$$.fragment,aa),X2o=i(aa),Yie=n(aa,"P",{});var Tdt=s(Yie);z2o=r(Tdt,"Instantiate one of the base model classes of the library from a pretrained model."),Tdt.forEach(t),Q2o=i(aa),Ra=n(aa,"P",{});var Nw=s(Ra);W2o=r(Nw,"The model class to instantiate is selected based on the "),Kie=n(Nw,"CODE",{});var Mdt=s(Kie);H2o=r(Mdt,"model_type"),Mdt.forEach(t),U2o=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Zie=n(Nw,"CODE",{});var Edt=s(Zie);J2o=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),Y2o=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=n(Nw,"CODE",{});var Cdt=s(ede);K2o=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),Z2o=r(Nw,":"),Nw.forEach(t),ebo=i(aa),y=n(aa,"UL",{});var $=s(y);Sp=n($,"LI",{});var hye=s(Sp);ode=n(hye,"STRONG",{});var wdt=s(ode);obo=r(wdt,"albert"),wdt.forEach(t),rbo=r(hye," \u2014 "),gq=n(hye,"A",{href:!0});var Adt=s(gq);tbo=r(Adt,"AlbertModel"),Adt.forEach(t),abo=r(hye," (ALBERT model)"),hye.forEach(t),nbo=i($),Rp=n($,"LI",{});var pye=s(Rp);rde=n(pye,"STRONG",{});var Ldt=s(rde);sbo=r(Ldt,"bart"),Ldt.forEach(t),lbo=r(pye," \u2014 "),hq=n(pye,"A",{href:!0});var ydt=s(hq);ibo=r(ydt,"BartModel"),ydt.forEach(t),dbo=r(pye," (BART model)"),pye.forEach(t),cbo=i($),Pp=n($,"LI",{});var _ye=s(Pp);tde=n(_ye,"STRONG",{});var xdt=s(tde);fbo=r(xdt,"beit"),xdt.forEach(t),mbo=r(_ye," \u2014 "),pq=n(_ye,"A",{href:!0});var $dt=s(pq);gbo=r($dt,"BeitModel"),$dt.forEach(t),hbo=r(_ye," (BEiT model)"),_ye.forEach(t),pbo=i($),Bp=n($,"LI",{});var uye=s(Bp);ade=n(uye,"STRONG",{});var kdt=s(ade);_bo=r(kdt,"bert"),kdt.forEach(t),ubo=r(uye," \u2014 "),_q=n(uye,"A",{href:!0});var Sdt=s(_q);bbo=r(Sdt,"BertModel"),Sdt.forEach(t),vbo=r(uye," (BERT model)"),uye.forEach(t),Fbo=i($),Ip=n($,"LI",{});var bye=s(Ip);nde=n(bye,"STRONG",{});var Rdt=s(nde);Tbo=r(Rdt,"bert-generation"),Rdt.forEach(t),Mbo=r(bye," \u2014 "),uq=n(bye,"A",{href:!0});var Pdt=s(uq);Ebo=r(Pdt,"BertGenerationEncoder"),Pdt.forEach(t),Cbo=r(bye," (Bert Generation model)"),bye.forEach(t),wbo=i($),Np=n($,"LI",{});var vye=s(Np);sde=n(vye,"STRONG",{});var Bdt=s(sde);Abo=r(Bdt,"big_bird"),Bdt.forEach(t),Lbo=r(vye," \u2014 "),bq=n(vye,"A",{href:!0});var Idt=s(bq);ybo=r(Idt,"BigBirdModel"),Idt.forEach(t),xbo=r(vye," (BigBird model)"),vye.forEach(t),$bo=i($),qp=n($,"LI",{});var Fye=s(qp);lde=n(Fye,"STRONG",{});var Ndt=s(lde);kbo=r(Ndt,"bigbird_pegasus"),Ndt.forEach(t),Sbo=r(Fye," \u2014 "),vq=n(Fye,"A",{href:!0});var qdt=s(vq);Rbo=r(qdt,"BigBirdPegasusModel"),qdt.forEach(t),Pbo=r(Fye," (BigBird-Pegasus model)"),Fye.forEach(t),Bbo=i($),jp=n($,"LI",{});var Tye=s(jp);ide=n(Tye,"STRONG",{});var jdt=s(ide);Ibo=r(jdt,"blenderbot"),jdt.forEach(t),Nbo=r(Tye," \u2014 "),Fq=n(Tye,"A",{href:!0});var Ddt=s(Fq);qbo=r(Ddt,"BlenderbotModel"),Ddt.forEach(t),jbo=r(Tye," (Blenderbot model)"),Tye.forEach(t),Dbo=i($),Dp=n($,"LI",{});var Mye=s(Dp);dde=n(Mye,"STRONG",{});var Gdt=s(dde);Gbo=r(Gdt,"blenderbot-small"),Gdt.forEach(t),Obo=r(Mye," \u2014 "),Tq=n(Mye,"A",{href:!0});var Odt=s(Tq);Vbo=r(Odt,"BlenderbotSmallModel"),Odt.forEach(t),Xbo=r(Mye," (BlenderbotSmall model)"),Mye.forEach(t),zbo=i($),Gp=n($,"LI",{});var Eye=s(Gp);cde=n(Eye,"STRONG",{});var Vdt=s(cde);Qbo=r(Vdt,"bloom"),Vdt.forEach(t),Wbo=r(Eye," \u2014 "),Mq=n(Eye,"A",{href:!0});var Xdt=s(Mq);Hbo=r(Xdt,"BloomModel"),Xdt.forEach(t),Ubo=r(Eye," (BLOOM model)"),Eye.forEach(t),Jbo=i($),Op=n($,"LI",{});var Cye=s(Op);fde=n(Cye,"STRONG",{});var zdt=s(fde);Ybo=r(zdt,"camembert"),zdt.forEach(t),Kbo=r(Cye," \u2014 "),Eq=n(Cye,"A",{href:!0});var Qdt=s(Eq);Zbo=r(Qdt,"CamembertModel"),Qdt.forEach(t),evo=r(Cye," (CamemBERT model)"),Cye.forEach(t),ovo=i($),Vp=n($,"LI",{});var wye=s(Vp);mde=n(wye,"STRONG",{});var Wdt=s(mde);rvo=r(Wdt,"canine"),Wdt.forEach(t),tvo=r(wye," \u2014 "),Cq=n(wye,"A",{href:!0});var Hdt=s(Cq);avo=r(Hdt,"CanineModel"),Hdt.forEach(t),nvo=r(wye," (CANINE model)"),wye.forEach(t),svo=i($),Xp=n($,"LI",{});var Aye=s(Xp);gde=n(Aye,"STRONG",{});var Udt=s(gde);lvo=r(Udt,"clip"),Udt.forEach(t),ivo=r(Aye," \u2014 "),wq=n(Aye,"A",{href:!0});var Jdt=s(wq);dvo=r(Jdt,"CLIPModel"),Jdt.forEach(t),cvo=r(Aye," (CLIP model)"),Aye.forEach(t),fvo=i($),zp=n($,"LI",{});var Lye=s(zp);hde=n(Lye,"STRONG",{});var Ydt=s(hde);mvo=r(Ydt,"codegen"),Ydt.forEach(t),gvo=r(Lye," \u2014 "),Aq=n(Lye,"A",{href:!0});var Kdt=s(Aq);hvo=r(Kdt,"CodeGenModel"),Kdt.forEach(t),pvo=r(Lye," (CodeGen model)"),Lye.forEach(t),_vo=i($),Qp=n($,"LI",{});var yye=s(Qp);pde=n(yye,"STRONG",{});var Zdt=s(pde);uvo=r(Zdt,"convbert"),Zdt.forEach(t),bvo=r(yye," \u2014 "),Lq=n(yye,"A",{href:!0});var ect=s(Lq);vvo=r(ect,"ConvBertModel"),ect.forEach(t),Fvo=r(yye," (ConvBERT model)"),yye.forEach(t),Tvo=i($),Wp=n($,"LI",{});var xye=s(Wp);_de=n(xye,"STRONG",{});var oct=s(_de);Mvo=r(oct,"convnext"),oct.forEach(t),Evo=r(xye," \u2014 "),yq=n(xye,"A",{href:!0});var rct=s(yq);Cvo=r(rct,"ConvNextModel"),rct.forEach(t),wvo=r(xye," (ConvNeXT model)"),xye.forEach(t),Avo=i($),Hp=n($,"LI",{});var $ye=s(Hp);ude=n($ye,"STRONG",{});var tct=s(ude);Lvo=r(tct,"ctrl"),tct.forEach(t),yvo=r($ye," \u2014 "),xq=n($ye,"A",{href:!0});var act=s(xq);xvo=r(act,"CTRLModel"),act.forEach(t),$vo=r($ye," (CTRL model)"),$ye.forEach(t),kvo=i($),Up=n($,"LI",{});var kye=s(Up);bde=n(kye,"STRONG",{});var nct=s(bde);Svo=r(nct,"cvt"),nct.forEach(t),Rvo=r(kye," \u2014 "),$q=n(kye,"A",{href:!0});var sct=s($q);Pvo=r(sct,"CvtModel"),sct.forEach(t),Bvo=r(kye," (CvT model)"),kye.forEach(t),Ivo=i($),Jp=n($,"LI",{});var Sye=s(Jp);vde=n(Sye,"STRONG",{});var lct=s(vde);Nvo=r(lct,"data2vec-audio"),lct.forEach(t),qvo=r(Sye," \u2014 "),kq=n(Sye,"A",{href:!0});var ict=s(kq);jvo=r(ict,"Data2VecAudioModel"),ict.forEach(t),Dvo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),Gvo=i($),Yp=n($,"LI",{});var Rye=s(Yp);Fde=n(Rye,"STRONG",{});var dct=s(Fde);Ovo=r(dct,"data2vec-text"),dct.forEach(t),Vvo=r(Rye," \u2014 "),Sq=n(Rye,"A",{href:!0});var cct=s(Sq);Xvo=r(cct,"Data2VecTextModel"),cct.forEach(t),zvo=r(Rye," (Data2VecText model)"),Rye.forEach(t),Qvo=i($),Kp=n($,"LI",{});var Pye=s(Kp);Tde=n(Pye,"STRONG",{});var fct=s(Tde);Wvo=r(fct,"data2vec-vision"),fct.forEach(t),Hvo=r(Pye," \u2014 "),Rq=n(Pye,"A",{href:!0});var mct=s(Rq);Uvo=r(mct,"Data2VecVisionModel"),mct.forEach(t),Jvo=r(Pye," (Data2VecVision model)"),Pye.forEach(t),Yvo=i($),Zp=n($,"LI",{});var Bye=s(Zp);Mde=n(Bye,"STRONG",{});var gct=s(Mde);Kvo=r(gct,"deberta"),gct.forEach(t),Zvo=r(Bye," \u2014 "),Pq=n(Bye,"A",{href:!0});var hct=s(Pq);eFo=r(hct,"DebertaModel"),hct.forEach(t),oFo=r(Bye," (DeBERTa model)"),Bye.forEach(t),rFo=i($),e_=n($,"LI",{});var Iye=s(e_);Ede=n(Iye,"STRONG",{});var pct=s(Ede);tFo=r(pct,"deberta-v2"),pct.forEach(t),aFo=r(Iye," \u2014 "),Bq=n(Iye,"A",{href:!0});var _ct=s(Bq);nFo=r(_ct,"DebertaV2Model"),_ct.forEach(t),sFo=r(Iye," (DeBERTa-v2 model)"),Iye.forEach(t),lFo=i($),o_=n($,"LI",{});var Nye=s(o_);Cde=n(Nye,"STRONG",{});var uct=s(Cde);iFo=r(uct,"decision_transformer"),uct.forEach(t),dFo=r(Nye," \u2014 "),Iq=n(Nye,"A",{href:!0});var bct=s(Iq);cFo=r(bct,"DecisionTransformerModel"),bct.forEach(t),fFo=r(Nye," (Decision Transformer model)"),Nye.forEach(t),mFo=i($),r_=n($,"LI",{});var qye=s(r_);wde=n(qye,"STRONG",{});var vct=s(wde);gFo=r(vct,"deit"),vct.forEach(t),hFo=r(qye," \u2014 "),Nq=n(qye,"A",{href:!0});var Fct=s(Nq);pFo=r(Fct,"DeiTModel"),Fct.forEach(t),_Fo=r(qye," (DeiT model)"),qye.forEach(t),uFo=i($),t_=n($,"LI",{});var jye=s(t_);Ade=n(jye,"STRONG",{});var Tct=s(Ade);bFo=r(Tct,"detr"),Tct.forEach(t),vFo=r(jye," \u2014 "),qq=n(jye,"A",{href:!0});var Mct=s(qq);FFo=r(Mct,"DetrModel"),Mct.forEach(t),TFo=r(jye," (DETR model)"),jye.forEach(t),MFo=i($),a_=n($,"LI",{});var Dye=s(a_);Lde=n(Dye,"STRONG",{});var Ect=s(Lde);EFo=r(Ect,"distilbert"),Ect.forEach(t),CFo=r(Dye," \u2014 "),jq=n(Dye,"A",{href:!0});var Cct=s(jq);wFo=r(Cct,"DistilBertModel"),Cct.forEach(t),AFo=r(Dye," (DistilBERT model)"),Dye.forEach(t),LFo=i($),n_=n($,"LI",{});var Gye=s(n_);yde=n(Gye,"STRONG",{});var wct=s(yde);yFo=r(wct,"dpr"),wct.forEach(t),xFo=r(Gye," \u2014 "),Dq=n(Gye,"A",{href:!0});var Act=s(Dq);$Fo=r(Act,"DPRQuestionEncoder"),Act.forEach(t),kFo=r(Gye," (DPR model)"),Gye.forEach(t),SFo=i($),s_=n($,"LI",{});var Oye=s(s_);xde=n(Oye,"STRONG",{});var Lct=s(xde);RFo=r(Lct,"dpt"),Lct.forEach(t),PFo=r(Oye," \u2014 "),Gq=n(Oye,"A",{href:!0});var yct=s(Gq);BFo=r(yct,"DPTModel"),yct.forEach(t),IFo=r(Oye," (DPT model)"),Oye.forEach(t),NFo=i($),l_=n($,"LI",{});var Vye=s(l_);$de=n(Vye,"STRONG",{});var xct=s($de);qFo=r(xct,"electra"),xct.forEach(t),jFo=r(Vye," \u2014 "),Oq=n(Vye,"A",{href:!0});var $ct=s(Oq);DFo=r($ct,"ElectraModel"),$ct.forEach(t),GFo=r(Vye," (ELECTRA model)"),Vye.forEach(t),OFo=i($),i_=n($,"LI",{});var Xye=s(i_);kde=n(Xye,"STRONG",{});var kct=s(kde);VFo=r(kct,"flaubert"),kct.forEach(t),XFo=r(Xye," \u2014 "),Vq=n(Xye,"A",{href:!0});var Sct=s(Vq);zFo=r(Sct,"FlaubertModel"),Sct.forEach(t),QFo=r(Xye," (FlauBERT model)"),Xye.forEach(t),WFo=i($),d_=n($,"LI",{});var zye=s(d_);Sde=n(zye,"STRONG",{});var Rct=s(Sde);HFo=r(Rct,"flava"),Rct.forEach(t),UFo=r(zye," \u2014 "),Xq=n(zye,"A",{href:!0});var Pct=s(Xq);JFo=r(Pct,"FlavaModel"),Pct.forEach(t),YFo=r(zye," (FLAVA model)"),zye.forEach(t),KFo=i($),c_=n($,"LI",{});var Qye=s(c_);Rde=n(Qye,"STRONG",{});var Bct=s(Rde);ZFo=r(Bct,"fnet"),Bct.forEach(t),eTo=r(Qye," \u2014 "),zq=n(Qye,"A",{href:!0});var Ict=s(zq);oTo=r(Ict,"FNetModel"),Ict.forEach(t),rTo=r(Qye," (FNet model)"),Qye.forEach(t),tTo=i($),f_=n($,"LI",{});var Wye=s(f_);Pde=n(Wye,"STRONG",{});var Nct=s(Pde);aTo=r(Nct,"fsmt"),Nct.forEach(t),nTo=r(Wye," \u2014 "),Qq=n(Wye,"A",{href:!0});var qct=s(Qq);sTo=r(qct,"FSMTModel"),qct.forEach(t),lTo=r(Wye," (FairSeq Machine-Translation model)"),Wye.forEach(t),iTo=i($),Xs=n($,"LI",{});var aS=s(Xs);Bde=n(aS,"STRONG",{});var jct=s(Bde);dTo=r(jct,"funnel"),jct.forEach(t),cTo=r(aS," \u2014 "),Wq=n(aS,"A",{href:!0});var Dct=s(Wq);fTo=r(Dct,"FunnelModel"),Dct.forEach(t),mTo=r(aS," or "),Hq=n(aS,"A",{href:!0});var Gct=s(Hq);gTo=r(Gct,"FunnelBaseModel"),Gct.forEach(t),hTo=r(aS," (Funnel Transformer model)"),aS.forEach(t),pTo=i($),m_=n($,"LI",{});var Hye=s(m_);Ide=n(Hye,"STRONG",{});var Oct=s(Ide);_To=r(Oct,"glpn"),Oct.forEach(t),uTo=r(Hye," \u2014 "),Uq=n(Hye,"A",{href:!0});var Vct=s(Uq);bTo=r(Vct,"GLPNModel"),Vct.forEach(t),vTo=r(Hye," (GLPN model)"),Hye.forEach(t),FTo=i($),g_=n($,"LI",{});var Uye=s(g_);Nde=n(Uye,"STRONG",{});var Xct=s(Nde);TTo=r(Xct,"gpt2"),Xct.forEach(t),MTo=r(Uye," \u2014 "),Jq=n(Uye,"A",{href:!0});var zct=s(Jq);ETo=r(zct,"GPT2Model"),zct.forEach(t),CTo=r(Uye," (OpenAI GPT-2 model)"),Uye.forEach(t),wTo=i($),h_=n($,"LI",{});var Jye=s(h_);qde=n(Jye,"STRONG",{});var Qct=s(qde);ATo=r(Qct,"gpt_neo"),Qct.forEach(t),LTo=r(Jye," \u2014 "),Yq=n(Jye,"A",{href:!0});var Wct=s(Yq);yTo=r(Wct,"GPTNeoModel"),Wct.forEach(t),xTo=r(Jye," (GPT Neo model)"),Jye.forEach(t),$To=i($),p_=n($,"LI",{});var Yye=s(p_);jde=n(Yye,"STRONG",{});var Hct=s(jde);kTo=r(Hct,"gpt_neox"),Hct.forEach(t),STo=r(Yye," \u2014 "),Kq=n(Yye,"A",{href:!0});var Uct=s(Kq);RTo=r(Uct,"GPTNeoXModel"),Uct.forEach(t),PTo=r(Yye," (GPT NeoX model)"),Yye.forEach(t),BTo=i($),__=n($,"LI",{});var Kye=s(__);Dde=n(Kye,"STRONG",{});var Jct=s(Dde);ITo=r(Jct,"gptj"),Jct.forEach(t),NTo=r(Kye," \u2014 "),Zq=n(Kye,"A",{href:!0});var Yct=s(Zq);qTo=r(Yct,"GPTJModel"),Yct.forEach(t),jTo=r(Kye," (GPT-J model)"),Kye.forEach(t),DTo=i($),u_=n($,"LI",{});var Zye=s(u_);Gde=n(Zye,"STRONG",{});var Kct=s(Gde);GTo=r(Kct,"hubert"),Kct.forEach(t),OTo=r(Zye," \u2014 "),ej=n(Zye,"A",{href:!0});var Zct=s(ej);VTo=r(Zct,"HubertModel"),Zct.forEach(t),XTo=r(Zye," (Hubert model)"),Zye.forEach(t),zTo=i($),b_=n($,"LI",{});var e8e=s(b_);Ode=n(e8e,"STRONG",{});var eft=s(Ode);QTo=r(eft,"ibert"),eft.forEach(t),WTo=r(e8e," \u2014 "),oj=n(e8e,"A",{href:!0});var oft=s(oj);HTo=r(oft,"IBertModel"),oft.forEach(t),UTo=r(e8e," (I-BERT model)"),e8e.forEach(t),JTo=i($),v_=n($,"LI",{});var o8e=s(v_);Vde=n(o8e,"STRONG",{});var rft=s(Vde);YTo=r(rft,"imagegpt"),rft.forEach(t),KTo=r(o8e," \u2014 "),rj=n(o8e,"A",{href:!0});var tft=s(rj);ZTo=r(tft,"ImageGPTModel"),tft.forEach(t),e9o=r(o8e," (ImageGPT model)"),o8e.forEach(t),o9o=i($),F_=n($,"LI",{});var r8e=s(F_);Xde=n(r8e,"STRONG",{});var aft=s(Xde);r9o=r(aft,"layoutlm"),aft.forEach(t),t9o=r(r8e," \u2014 "),tj=n(r8e,"A",{href:!0});var nft=s(tj);a9o=r(nft,"LayoutLMModel"),nft.forEach(t),n9o=r(r8e," (LayoutLM model)"),r8e.forEach(t),s9o=i($),T_=n($,"LI",{});var t8e=s(T_);zde=n(t8e,"STRONG",{});var sft=s(zde);l9o=r(sft,"layoutlmv2"),sft.forEach(t),i9o=r(t8e," \u2014 "),aj=n(t8e,"A",{href:!0});var lft=s(aj);d9o=r(lft,"LayoutLMv2Model"),lft.forEach(t),c9o=r(t8e," (LayoutLMv2 model)"),t8e.forEach(t),f9o=i($),M_=n($,"LI",{});var a8e=s(M_);Qde=n(a8e,"STRONG",{});var ift=s(Qde);m9o=r(ift,"layoutlmv3"),ift.forEach(t),g9o=r(a8e," \u2014 "),nj=n(a8e,"A",{href:!0});var dft=s(nj);h9o=r(dft,"LayoutLMv3Model"),dft.forEach(t),p9o=r(a8e," (LayoutLMv3 model)"),a8e.forEach(t),_9o=i($),E_=n($,"LI",{});var n8e=s(E_);Wde=n(n8e,"STRONG",{});var cft=s(Wde);u9o=r(cft,"led"),cft.forEach(t),b9o=r(n8e," \u2014 "),sj=n(n8e,"A",{href:!0});var fft=s(sj);v9o=r(fft,"LEDModel"),fft.forEach(t),F9o=r(n8e," (LED model)"),n8e.forEach(t),T9o=i($),C_=n($,"LI",{});var s8e=s(C_);Hde=n(s8e,"STRONG",{});var mft=s(Hde);M9o=r(mft,"levit"),mft.forEach(t),E9o=r(s8e," \u2014 "),lj=n(s8e,"A",{href:!0});var gft=s(lj);C9o=r(gft,"LevitModel"),gft.forEach(t),w9o=r(s8e," (LeViT model)"),s8e.forEach(t),A9o=i($),w_=n($,"LI",{});var l8e=s(w_);Ude=n(l8e,"STRONG",{});var hft=s(Ude);L9o=r(hft,"longformer"),hft.forEach(t),y9o=r(l8e," \u2014 "),ij=n(l8e,"A",{href:!0});var pft=s(ij);x9o=r(pft,"LongformerModel"),pft.forEach(t),$9o=r(l8e," (Longformer model)"),l8e.forEach(t),k9o=i($),A_=n($,"LI",{});var i8e=s(A_);Jde=n(i8e,"STRONG",{});var _ft=s(Jde);S9o=r(_ft,"longt5"),_ft.forEach(t),R9o=r(i8e," \u2014 "),dj=n(i8e,"A",{href:!0});var uft=s(dj);P9o=r(uft,"LongT5Model"),uft.forEach(t),B9o=r(i8e," (LongT5 model)"),i8e.forEach(t),I9o=i($),L_=n($,"LI",{});var d8e=s(L_);Yde=n(d8e,"STRONG",{});var bft=s(Yde);N9o=r(bft,"luke"),bft.forEach(t),q9o=r(d8e," \u2014 "),cj=n(d8e,"A",{href:!0});var vft=s(cj);j9o=r(vft,"LukeModel"),vft.forEach(t),D9o=r(d8e," (LUKE model)"),d8e.forEach(t),G9o=i($),y_=n($,"LI",{});var c8e=s(y_);Kde=n(c8e,"STRONG",{});var Fft=s(Kde);O9o=r(Fft,"lxmert"),Fft.forEach(t),V9o=r(c8e," \u2014 "),fj=n(c8e,"A",{href:!0});var Tft=s(fj);X9o=r(Tft,"LxmertModel"),Tft.forEach(t),z9o=r(c8e," (LXMERT model)"),c8e.forEach(t),Q9o=i($),x_=n($,"LI",{});var f8e=s(x_);Zde=n(f8e,"STRONG",{});var Mft=s(Zde);W9o=r(Mft,"m2m_100"),Mft.forEach(t),H9o=r(f8e," \u2014 "),mj=n(f8e,"A",{href:!0});var Eft=s(mj);U9o=r(Eft,"M2M100Model"),Eft.forEach(t),J9o=r(f8e," (M2M100 model)"),f8e.forEach(t),Y9o=i($),$_=n($,"LI",{});var m8e=s($_);ece=n(m8e,"STRONG",{});var Cft=s(ece);K9o=r(Cft,"marian"),Cft.forEach(t),Z9o=r(m8e," \u2014 "),gj=n(m8e,"A",{href:!0});var wft=s(gj);eMo=r(wft,"MarianModel"),wft.forEach(t),oMo=r(m8e," (Marian model)"),m8e.forEach(t),rMo=i($),k_=n($,"LI",{});var g8e=s(k_);oce=n(g8e,"STRONG",{});var Aft=s(oce);tMo=r(Aft,"maskformer"),Aft.forEach(t),aMo=r(g8e," \u2014 "),hj=n(g8e,"A",{href:!0});var Lft=s(hj);nMo=r(Lft,"MaskFormerModel"),Lft.forEach(t),sMo=r(g8e," (MaskFormer model)"),g8e.forEach(t),lMo=i($),S_=n($,"LI",{});var h8e=s(S_);rce=n(h8e,"STRONG",{});var yft=s(rce);iMo=r(yft,"mbart"),yft.forEach(t),dMo=r(h8e," \u2014 "),pj=n(h8e,"A",{href:!0});var xft=s(pj);cMo=r(xft,"MBartModel"),xft.forEach(t),fMo=r(h8e," (mBART model)"),h8e.forEach(t),mMo=i($),R_=n($,"LI",{});var p8e=s(R_);tce=n(p8e,"STRONG",{});var $ft=s(tce);gMo=r($ft,"mctct"),$ft.forEach(t),hMo=r(p8e," \u2014 "),_j=n(p8e,"A",{href:!0});var kft=s(_j);pMo=r(kft,"MCTCTModel"),kft.forEach(t),_Mo=r(p8e," (M-CTC-T model)"),p8e.forEach(t),uMo=i($),P_=n($,"LI",{});var _8e=s(P_);ace=n(_8e,"STRONG",{});var Sft=s(ace);bMo=r(Sft,"megatron-bert"),Sft.forEach(t),vMo=r(_8e," \u2014 "),uj=n(_8e,"A",{href:!0});var Rft=s(uj);FMo=r(Rft,"MegatronBertModel"),Rft.forEach(t),TMo=r(_8e," (Megatron-BERT model)"),_8e.forEach(t),MMo=i($),B_=n($,"LI",{});var u8e=s(B_);nce=n(u8e,"STRONG",{});var Pft=s(nce);EMo=r(Pft,"mobilebert"),Pft.forEach(t),CMo=r(u8e," \u2014 "),bj=n(u8e,"A",{href:!0});var Bft=s(bj);wMo=r(Bft,"MobileBertModel"),Bft.forEach(t),AMo=r(u8e," (MobileBERT model)"),u8e.forEach(t),LMo=i($),I_=n($,"LI",{});var b8e=s(I_);sce=n(b8e,"STRONG",{});var Ift=s(sce);yMo=r(Ift,"mpnet"),Ift.forEach(t),xMo=r(b8e," \u2014 "),vj=n(b8e,"A",{href:!0});var Nft=s(vj);$Mo=r(Nft,"MPNetModel"),Nft.forEach(t),kMo=r(b8e," (MPNet model)"),b8e.forEach(t),SMo=i($),N_=n($,"LI",{});var v8e=s(N_);lce=n(v8e,"STRONG",{});var qft=s(lce);RMo=r(qft,"mt5"),qft.forEach(t),PMo=r(v8e," \u2014 "),Fj=n(v8e,"A",{href:!0});var jft=s(Fj);BMo=r(jft,"MT5Model"),jft.forEach(t),IMo=r(v8e," (MT5 model)"),v8e.forEach(t),NMo=i($),q_=n($,"LI",{});var F8e=s(q_);ice=n(F8e,"STRONG",{});var Dft=s(ice);qMo=r(Dft,"nezha"),Dft.forEach(t),jMo=r(F8e," \u2014 "),Tj=n(F8e,"A",{href:!0});var Gft=s(Tj);DMo=r(Gft,"NezhaModel"),Gft.forEach(t),GMo=r(F8e," (Nezha model)"),F8e.forEach(t),OMo=i($),j_=n($,"LI",{});var T8e=s(j_);dce=n(T8e,"STRONG",{});var Oft=s(dce);VMo=r(Oft,"nystromformer"),Oft.forEach(t),XMo=r(T8e," \u2014 "),Mj=n(T8e,"A",{href:!0});var Vft=s(Mj);zMo=r(Vft,"NystromformerModel"),Vft.forEach(t),QMo=r(T8e," (Nystr\xF6mformer model)"),T8e.forEach(t),WMo=i($),D_=n($,"LI",{});var M8e=s(D_);cce=n(M8e,"STRONG",{});var Xft=s(cce);HMo=r(Xft,"openai-gpt"),Xft.forEach(t),UMo=r(M8e," \u2014 "),Ej=n(M8e,"A",{href:!0});var zft=s(Ej);JMo=r(zft,"OpenAIGPTModel"),zft.forEach(t),YMo=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),KMo=i($),G_=n($,"LI",{});var E8e=s(G_);fce=n(E8e,"STRONG",{});var Qft=s(fce);ZMo=r(Qft,"opt"),Qft.forEach(t),eEo=r(E8e," \u2014 "),Cj=n(E8e,"A",{href:!0});var Wft=s(Cj);oEo=r(Wft,"OPTModel"),Wft.forEach(t),rEo=r(E8e," (OPT model)"),E8e.forEach(t),tEo=i($),O_=n($,"LI",{});var C8e=s(O_);mce=n(C8e,"STRONG",{});var Hft=s(mce);aEo=r(Hft,"pegasus"),Hft.forEach(t),nEo=r(C8e," \u2014 "),wj=n(C8e,"A",{href:!0});var Uft=s(wj);sEo=r(Uft,"PegasusModel"),Uft.forEach(t),lEo=r(C8e," (Pegasus model)"),C8e.forEach(t),iEo=i($),V_=n($,"LI",{});var w8e=s(V_);gce=n(w8e,"STRONG",{});var Jft=s(gce);dEo=r(Jft,"perceiver"),Jft.forEach(t),cEo=r(w8e," \u2014 "),Aj=n(w8e,"A",{href:!0});var Yft=s(Aj);fEo=r(Yft,"PerceiverModel"),Yft.forEach(t),mEo=r(w8e," (Perceiver model)"),w8e.forEach(t),gEo=i($),X_=n($,"LI",{});var A8e=s(X_);hce=n(A8e,"STRONG",{});var Kft=s(hce);hEo=r(Kft,"plbart"),Kft.forEach(t),pEo=r(A8e," \u2014 "),Lj=n(A8e,"A",{href:!0});var Zft=s(Lj);_Eo=r(Zft,"PLBartModel"),Zft.forEach(t),uEo=r(A8e," (PLBart model)"),A8e.forEach(t),bEo=i($),z_=n($,"LI",{});var L8e=s(z_);pce=n(L8e,"STRONG",{});var emt=s(pce);vEo=r(emt,"poolformer"),emt.forEach(t),FEo=r(L8e," \u2014 "),yj=n(L8e,"A",{href:!0});var omt=s(yj);TEo=r(omt,"PoolFormerModel"),omt.forEach(t),MEo=r(L8e," (PoolFormer model)"),L8e.forEach(t),EEo=i($),Q_=n($,"LI",{});var y8e=s(Q_);_ce=n(y8e,"STRONG",{});var rmt=s(_ce);CEo=r(rmt,"prophetnet"),rmt.forEach(t),wEo=r(y8e," \u2014 "),xj=n(y8e,"A",{href:!0});var tmt=s(xj);AEo=r(tmt,"ProphetNetModel"),tmt.forEach(t),LEo=r(y8e," (ProphetNet model)"),y8e.forEach(t),yEo=i($),W_=n($,"LI",{});var x8e=s(W_);uce=n(x8e,"STRONG",{});var amt=s(uce);xEo=r(amt,"qdqbert"),amt.forEach(t),$Eo=r(x8e," \u2014 "),$j=n(x8e,"A",{href:!0});var nmt=s($j);kEo=r(nmt,"QDQBertModel"),nmt.forEach(t),SEo=r(x8e," (QDQBert model)"),x8e.forEach(t),REo=i($),H_=n($,"LI",{});var $8e=s(H_);bce=n($8e,"STRONG",{});var smt=s(bce);PEo=r(smt,"reformer"),smt.forEach(t),BEo=r($8e," \u2014 "),kj=n($8e,"A",{href:!0});var lmt=s(kj);IEo=r(lmt,"ReformerModel"),lmt.forEach(t),NEo=r($8e," (Reformer model)"),$8e.forEach(t),qEo=i($),U_=n($,"LI",{});var k8e=s(U_);vce=n(k8e,"STRONG",{});var imt=s(vce);jEo=r(imt,"regnet"),imt.forEach(t),DEo=r(k8e," \u2014 "),Sj=n(k8e,"A",{href:!0});var dmt=s(Sj);GEo=r(dmt,"RegNetModel"),dmt.forEach(t),OEo=r(k8e," (RegNet model)"),k8e.forEach(t),VEo=i($),J_=n($,"LI",{});var S8e=s(J_);Fce=n(S8e,"STRONG",{});var cmt=s(Fce);XEo=r(cmt,"rembert"),cmt.forEach(t),zEo=r(S8e," \u2014 "),Rj=n(S8e,"A",{href:!0});var fmt=s(Rj);QEo=r(fmt,"RemBertModel"),fmt.forEach(t),WEo=r(S8e," (RemBERT model)"),S8e.forEach(t),HEo=i($),Y_=n($,"LI",{});var R8e=s(Y_);Tce=n(R8e,"STRONG",{});var mmt=s(Tce);UEo=r(mmt,"resnet"),mmt.forEach(t),JEo=r(R8e," \u2014 "),Pj=n(R8e,"A",{href:!0});var gmt=s(Pj);YEo=r(gmt,"ResNetModel"),gmt.forEach(t),KEo=r(R8e," (ResNet model)"),R8e.forEach(t),ZEo=i($),K_=n($,"LI",{});var P8e=s(K_);Mce=n(P8e,"STRONG",{});var hmt=s(Mce);e4o=r(hmt,"retribert"),hmt.forEach(t),o4o=r(P8e," \u2014 "),Bj=n(P8e,"A",{href:!0});var pmt=s(Bj);r4o=r(pmt,"RetriBertModel"),pmt.forEach(t),t4o=r(P8e," (RetriBERT model)"),P8e.forEach(t),a4o=i($),Z_=n($,"LI",{});var B8e=s(Z_);Ece=n(B8e,"STRONG",{});var _mt=s(Ece);n4o=r(_mt,"roberta"),_mt.forEach(t),s4o=r(B8e," \u2014 "),Ij=n(B8e,"A",{href:!0});var umt=s(Ij);l4o=r(umt,"RobertaModel"),umt.forEach(t),i4o=r(B8e," (RoBERTa model)"),B8e.forEach(t),d4o=i($),eu=n($,"LI",{});var I8e=s(eu);Cce=n(I8e,"STRONG",{});var bmt=s(Cce);c4o=r(bmt,"roformer"),bmt.forEach(t),f4o=r(I8e," \u2014 "),Nj=n(I8e,"A",{href:!0});var vmt=s(Nj);m4o=r(vmt,"RoFormerModel"),vmt.forEach(t),g4o=r(I8e," (RoFormer model)"),I8e.forEach(t),h4o=i($),ou=n($,"LI",{});var N8e=s(ou);wce=n(N8e,"STRONG",{});var Fmt=s(wce);p4o=r(Fmt,"segformer"),Fmt.forEach(t),_4o=r(N8e," \u2014 "),qj=n(N8e,"A",{href:!0});var Tmt=s(qj);u4o=r(Tmt,"SegformerModel"),Tmt.forEach(t),b4o=r(N8e," (SegFormer model)"),N8e.forEach(t),v4o=i($),ru=n($,"LI",{});var q8e=s(ru);Ace=n(q8e,"STRONG",{});var Mmt=s(Ace);F4o=r(Mmt,"sew"),Mmt.forEach(t),T4o=r(q8e," \u2014 "),jj=n(q8e,"A",{href:!0});var Emt=s(jj);M4o=r(Emt,"SEWModel"),Emt.forEach(t),E4o=r(q8e," (SEW model)"),q8e.forEach(t),C4o=i($),tu=n($,"LI",{});var j8e=s(tu);Lce=n(j8e,"STRONG",{});var Cmt=s(Lce);w4o=r(Cmt,"sew-d"),Cmt.forEach(t),A4o=r(j8e," \u2014 "),Dj=n(j8e,"A",{href:!0});var wmt=s(Dj);L4o=r(wmt,"SEWDModel"),wmt.forEach(t),y4o=r(j8e," (SEW-D model)"),j8e.forEach(t),x4o=i($),au=n($,"LI",{});var D8e=s(au);yce=n(D8e,"STRONG",{});var Amt=s(yce);$4o=r(Amt,"speech_to_text"),Amt.forEach(t),k4o=r(D8e," \u2014 "),Gj=n(D8e,"A",{href:!0});var Lmt=s(Gj);S4o=r(Lmt,"Speech2TextModel"),Lmt.forEach(t),R4o=r(D8e," (Speech2Text model)"),D8e.forEach(t),P4o=i($),nu=n($,"LI",{});var G8e=s(nu);xce=n(G8e,"STRONG",{});var ymt=s(xce);B4o=r(ymt,"splinter"),ymt.forEach(t),I4o=r(G8e," \u2014 "),Oj=n(G8e,"A",{href:!0});var xmt=s(Oj);N4o=r(xmt,"SplinterModel"),xmt.forEach(t),q4o=r(G8e," (Splinter model)"),G8e.forEach(t),j4o=i($),su=n($,"LI",{});var O8e=s(su);$ce=n(O8e,"STRONG",{});var $mt=s($ce);D4o=r($mt,"squeezebert"),$mt.forEach(t),G4o=r(O8e," \u2014 "),Vj=n(O8e,"A",{href:!0});var kmt=s(Vj);O4o=r(kmt,"SqueezeBertModel"),kmt.forEach(t),V4o=r(O8e," (SqueezeBERT model)"),O8e.forEach(t),X4o=i($),lu=n($,"LI",{});var V8e=s(lu);kce=n(V8e,"STRONG",{});var Smt=s(kce);z4o=r(Smt,"swin"),Smt.forEach(t),Q4o=r(V8e," \u2014 "),Xj=n(V8e,"A",{href:!0});var Rmt=s(Xj);W4o=r(Rmt,"SwinModel"),Rmt.forEach(t),H4o=r(V8e," (Swin Transformer model)"),V8e.forEach(t),U4o=i($),iu=n($,"LI",{});var X8e=s(iu);Sce=n(X8e,"STRONG",{});var Pmt=s(Sce);J4o=r(Pmt,"t5"),Pmt.forEach(t),Y4o=r(X8e," \u2014 "),zj=n(X8e,"A",{href:!0});var Bmt=s(zj);K4o=r(Bmt,"T5Model"),Bmt.forEach(t),Z4o=r(X8e," (T5 model)"),X8e.forEach(t),eCo=i($),du=n($,"LI",{});var z8e=s(du);Rce=n(z8e,"STRONG",{});var Imt=s(Rce);oCo=r(Imt,"tapas"),Imt.forEach(t),rCo=r(z8e," \u2014 "),Qj=n(z8e,"A",{href:!0});var Nmt=s(Qj);tCo=r(Nmt,"TapasModel"),Nmt.forEach(t),aCo=r(z8e," (TAPAS model)"),z8e.forEach(t),nCo=i($),cu=n($,"LI",{});var Q8e=s(cu);Pce=n(Q8e,"STRONG",{});var qmt=s(Pce);sCo=r(qmt,"trajectory_transformer"),qmt.forEach(t),lCo=r(Q8e," \u2014 "),Wj=n(Q8e,"A",{href:!0});var jmt=s(Wj);iCo=r(jmt,"TrajectoryTransformerModel"),jmt.forEach(t),dCo=r(Q8e," (Trajectory Transformer model)"),Q8e.forEach(t),cCo=i($),fu=n($,"LI",{});var W8e=s(fu);Bce=n(W8e,"STRONG",{});var Dmt=s(Bce);fCo=r(Dmt,"transfo-xl"),Dmt.forEach(t),mCo=r(W8e," \u2014 "),Hj=n(W8e,"A",{href:!0});var Gmt=s(Hj);gCo=r(Gmt,"TransfoXLModel"),Gmt.forEach(t),hCo=r(W8e," (Transformer-XL model)"),W8e.forEach(t),pCo=i($),mu=n($,"LI",{});var H8e=s(mu);Ice=n(H8e,"STRONG",{});var Omt=s(Ice);_Co=r(Omt,"unispeech"),Omt.forEach(t),uCo=r(H8e," \u2014 "),Uj=n(H8e,"A",{href:!0});var Vmt=s(Uj);bCo=r(Vmt,"UniSpeechModel"),Vmt.forEach(t),vCo=r(H8e," (UniSpeech model)"),H8e.forEach(t),FCo=i($),gu=n($,"LI",{});var U8e=s(gu);Nce=n(U8e,"STRONG",{});var Xmt=s(Nce);TCo=r(Xmt,"unispeech-sat"),Xmt.forEach(t),MCo=r(U8e," \u2014 "),Jj=n(U8e,"A",{href:!0});var zmt=s(Jj);ECo=r(zmt,"UniSpeechSatModel"),zmt.forEach(t),CCo=r(U8e," (UniSpeechSat model)"),U8e.forEach(t),wCo=i($),hu=n($,"LI",{});var J8e=s(hu);qce=n(J8e,"STRONG",{});var Qmt=s(qce);ACo=r(Qmt,"van"),Qmt.forEach(t),LCo=r(J8e," \u2014 "),Yj=n(J8e,"A",{href:!0});var Wmt=s(Yj);yCo=r(Wmt,"VanModel"),Wmt.forEach(t),xCo=r(J8e," (VAN model)"),J8e.forEach(t),$Co=i($),pu=n($,"LI",{});var Y8e=s(pu);jce=n(Y8e,"STRONG",{});var Hmt=s(jce);kCo=r(Hmt,"vilt"),Hmt.forEach(t),SCo=r(Y8e," \u2014 "),Kj=n(Y8e,"A",{href:!0});var Umt=s(Kj);RCo=r(Umt,"ViltModel"),Umt.forEach(t),PCo=r(Y8e," (ViLT model)"),Y8e.forEach(t),BCo=i($),_u=n($,"LI",{});var K8e=s(_u);Dce=n(K8e,"STRONG",{});var Jmt=s(Dce);ICo=r(Jmt,"vision-text-dual-encoder"),Jmt.forEach(t),NCo=r(K8e," \u2014 "),Zj=n(K8e,"A",{href:!0});var Ymt=s(Zj);qCo=r(Ymt,"VisionTextDualEncoderModel"),Ymt.forEach(t),jCo=r(K8e," (VisionTextDualEncoder model)"),K8e.forEach(t),DCo=i($),uu=n($,"LI",{});var Z8e=s(uu);Gce=n(Z8e,"STRONG",{});var Kmt=s(Gce);GCo=r(Kmt,"visual_bert"),Kmt.forEach(t),OCo=r(Z8e," \u2014 "),eD=n(Z8e,"A",{href:!0});var Zmt=s(eD);VCo=r(Zmt,"VisualBertModel"),Zmt.forEach(t),XCo=r(Z8e," (VisualBERT model)"),Z8e.forEach(t),zCo=i($),bu=n($,"LI",{});var exe=s(bu);Oce=n(exe,"STRONG",{});var egt=s(Oce);QCo=r(egt,"vit"),egt.forEach(t),WCo=r(exe," \u2014 "),oD=n(exe,"A",{href:!0});var ogt=s(oD);HCo=r(ogt,"ViTModel"),ogt.forEach(t),UCo=r(exe," (ViT model)"),exe.forEach(t),JCo=i($),vu=n($,"LI",{});var oxe=s(vu);Vce=n(oxe,"STRONG",{});var rgt=s(Vce);YCo=r(rgt,"vit_mae"),rgt.forEach(t),KCo=r(oxe," \u2014 "),rD=n(oxe,"A",{href:!0});var tgt=s(rD);ZCo=r(tgt,"ViTMAEModel"),tgt.forEach(t),e5o=r(oxe," (ViTMAE model)"),oxe.forEach(t),o5o=i($),Fu=n($,"LI",{});var rxe=s(Fu);Xce=n(rxe,"STRONG",{});var agt=s(Xce);r5o=r(agt,"wav2vec2"),agt.forEach(t),t5o=r(rxe," \u2014 "),tD=n(rxe,"A",{href:!0});var ngt=s(tD);a5o=r(ngt,"Wav2Vec2Model"),ngt.forEach(t),n5o=r(rxe," (Wav2Vec2 model)"),rxe.forEach(t),s5o=i($),Tu=n($,"LI",{});var txe=s(Tu);zce=n(txe,"STRONG",{});var sgt=s(zce);l5o=r(sgt,"wav2vec2-conformer"),sgt.forEach(t),i5o=r(txe," \u2014 "),aD=n(txe,"A",{href:!0});var lgt=s(aD);d5o=r(lgt,"Wav2Vec2ConformerModel"),lgt.forEach(t),c5o=r(txe," (Wav2Vec2-Conformer model)"),txe.forEach(t),f5o=i($),Mu=n($,"LI",{});var axe=s(Mu);Qce=n(axe,"STRONG",{});var igt=s(Qce);m5o=r(igt,"wavlm"),igt.forEach(t),g5o=r(axe," \u2014 "),nD=n(axe,"A",{href:!0});var dgt=s(nD);h5o=r(dgt,"WavLMModel"),dgt.forEach(t),p5o=r(axe," (WavLM model)"),axe.forEach(t),_5o=i($),Eu=n($,"LI",{});var nxe=s(Eu);Wce=n(nxe,"STRONG",{});var cgt=s(Wce);u5o=r(cgt,"xglm"),cgt.forEach(t),b5o=r(nxe," \u2014 "),sD=n(nxe,"A",{href:!0});var fgt=s(sD);v5o=r(fgt,"XGLMModel"),fgt.forEach(t),F5o=r(nxe," (XGLM model)"),nxe.forEach(t),T5o=i($),Cu=n($,"LI",{});var sxe=s(Cu);Hce=n(sxe,"STRONG",{});var mgt=s(Hce);M5o=r(mgt,"xlm"),mgt.forEach(t),E5o=r(sxe," \u2014 "),lD=n(sxe,"A",{href:!0});var ggt=s(lD);C5o=r(ggt,"XLMModel"),ggt.forEach(t),w5o=r(sxe," (XLM model)"),sxe.forEach(t),A5o=i($),wu=n($,"LI",{});var lxe=s(wu);Uce=n(lxe,"STRONG",{});var hgt=s(Uce);L5o=r(hgt,"xlm-prophetnet"),hgt.forEach(t),y5o=r(lxe," \u2014 "),iD=n(lxe,"A",{href:!0});var pgt=s(iD);x5o=r(pgt,"XLMProphetNetModel"),pgt.forEach(t),$5o=r(lxe," (XLM-ProphetNet model)"),lxe.forEach(t),k5o=i($),Au=n($,"LI",{});var ixe=s(Au);Jce=n(ixe,"STRONG",{});var _gt=s(Jce);S5o=r(_gt,"xlm-roberta"),_gt.forEach(t),R5o=r(ixe," \u2014 "),dD=n(ixe,"A",{href:!0});var ugt=s(dD);P5o=r(ugt,"XLMRobertaModel"),ugt.forEach(t),B5o=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),I5o=i($),Lu=n($,"LI",{});var dxe=s(Lu);Yce=n(dxe,"STRONG",{});var bgt=s(Yce);N5o=r(bgt,"xlm-roberta-xl"),bgt.forEach(t),q5o=r(dxe," \u2014 "),cD=n(dxe,"A",{href:!0});var vgt=s(cD);j5o=r(vgt,"XLMRobertaXLModel"),vgt.forEach(t),D5o=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),G5o=i($),yu=n($,"LI",{});var cxe=s(yu);Kce=n(cxe,"STRONG",{});var Fgt=s(Kce);O5o=r(Fgt,"xlnet"),Fgt.forEach(t),V5o=r(cxe," \u2014 "),fD=n(cxe,"A",{href:!0});var Tgt=s(fD);X5o=r(Tgt,"XLNetModel"),Tgt.forEach(t),z5o=r(cxe," (XLNet model)"),cxe.forEach(t),Q5o=i($),xu=n($,"LI",{});var fxe=s(xu);Zce=n(fxe,"STRONG",{});var Mgt=s(Zce);W5o=r(Mgt,"yolos"),Mgt.forEach(t),H5o=r(fxe," \u2014 "),mD=n(fxe,"A",{href:!0});var Egt=s(mD);U5o=r(Egt,"YolosModel"),Egt.forEach(t),J5o=r(fxe," (YOLOS model)"),fxe.forEach(t),Y5o=i($),$u=n($,"LI",{});var mxe=s($u);efe=n(mxe,"STRONG",{});var Cgt=s(efe);K5o=r(Cgt,"yoso"),Cgt.forEach(t),Z5o=r(mxe," \u2014 "),gD=n(mxe,"A",{href:!0});var wgt=s(gD);e3o=r(wgt,"YosoModel"),wgt.forEach(t),o3o=r(mxe," (YOSO model)"),mxe.forEach(t),$.forEach(t),r3o=i(aa),ku=n(aa,"P",{});var gxe=s(ku);t3o=r(gxe,"The model is set in evaluation mode by default using "),ofe=n(gxe,"CODE",{});var Agt=s(ofe);a3o=r(Agt,"model.eval()"),Agt.forEach(t),n3o=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rfe=n(gxe,"CODE",{});var Lgt=s(rfe);s3o=r(Lgt,"model.train()"),Lgt.forEach(t),gxe.forEach(t),l3o=i(aa),T(Su.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),TOe=i(f),ji=n(f,"H2",{class:!0});var LXe=s(ji);Ru=n(LXe,"A",{id:!0,class:!0,href:!0});var ygt=s(Ru);tfe=n(ygt,"SPAN",{});var xgt=s(tfe);T(fL.$$.fragment,xgt),xgt.forEach(t),ygt.forEach(t),i3o=i(LXe),afe=n(LXe,"SPAN",{});var $gt=s(afe);d3o=r($gt,"AutoModelForPreTraining"),$gt.forEach(t),LXe.forEach(t),MOe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(mL.$$.fragment,Zs),c3o=i(Zs),Di=n(Zs,"P",{});var Roe=s(Di);f3o=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hD=n(Roe,"A",{href:!0});var kgt=s(hD);m3o=r(kgt,"from_pretrained()"),kgt.forEach(t),g3o=r(Roe," class method or the "),pD=n(Roe,"A",{href:!0});var Sgt=s(pD);h3o=r(Sgt,"from_config()"),Sgt.forEach(t),p3o=r(Roe,` class
method.`),Roe.forEach(t),_3o=i(Zs),gL=n(Zs,"P",{});var yXe=s(gL);u3o=r(yXe,"This class cannot be instantiated directly using "),nfe=n(yXe,"CODE",{});var Rgt=s(nfe);b3o=r(Rgt,"__init__()"),Rgt.forEach(t),v3o=r(yXe," (throws an error)."),yXe.forEach(t),F3o=i(Zs),st=n(Zs,"DIV",{class:!0});var qw=s(st);T(hL.$$.fragment,qw),T3o=i(qw),sfe=n(qw,"P",{});var Pgt=s(sfe);M3o=r(Pgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pgt.forEach(t),E3o=i(qw),Gi=n(qw,"P",{});var Poe=s(Gi);C3o=r(Poe,`Note:
Loading a model from its configuration file does `),lfe=n(Poe,"STRONG",{});var Bgt=s(lfe);w3o=r(Bgt,"not"),Bgt.forEach(t),A3o=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(Poe,"A",{href:!0});var Igt=s(_D);L3o=r(Igt,"from_pretrained()"),Igt.forEach(t),y3o=r(Poe," to load the model weights."),Poe.forEach(t),x3o=i(qw),T(Pu.$$.fragment,qw),qw.forEach(t),$3o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(pL.$$.fragment,na),k3o=i(na),ife=n(na,"P",{});var Ngt=s(ife);S3o=r(Ngt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ngt.forEach(t),R3o=i(na),Pa=n(na,"P",{});var jw=s(Pa);P3o=r(jw,"The model class to instantiate is selected based on the "),dfe=n(jw,"CODE",{});var qgt=s(dfe);B3o=r(qgt,"model_type"),qgt.forEach(t),I3o=r(jw,` property of the config object (either
passed as an argument or loaded from `),cfe=n(jw,"CODE",{});var jgt=s(cfe);N3o=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),q3o=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(jw,"CODE",{});var Dgt=s(ffe);j3o=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),D3o=r(jw,":"),jw.forEach(t),G3o=i(na),G=n(na,"UL",{});var O=s(G);Bu=n(O,"LI",{});var hxe=s(Bu);mfe=n(hxe,"STRONG",{});var Ggt=s(mfe);O3o=r(Ggt,"albert"),Ggt.forEach(t),V3o=r(hxe," \u2014 "),uD=n(hxe,"A",{href:!0});var Ogt=s(uD);X3o=r(Ogt,"AlbertForPreTraining"),Ogt.forEach(t),z3o=r(hxe," (ALBERT model)"),hxe.forEach(t),Q3o=i(O),Iu=n(O,"LI",{});var pxe=s(Iu);gfe=n(pxe,"STRONG",{});var Vgt=s(gfe);W3o=r(Vgt,"bart"),Vgt.forEach(t),H3o=r(pxe," \u2014 "),bD=n(pxe,"A",{href:!0});var Xgt=s(bD);U3o=r(Xgt,"BartForConditionalGeneration"),Xgt.forEach(t),J3o=r(pxe," (BART model)"),pxe.forEach(t),Y3o=i(O),Nu=n(O,"LI",{});var _xe=s(Nu);hfe=n(_xe,"STRONG",{});var zgt=s(hfe);K3o=r(zgt,"bert"),zgt.forEach(t),Z3o=r(_xe," \u2014 "),vD=n(_xe,"A",{href:!0});var Qgt=s(vD);e0o=r(Qgt,"BertForPreTraining"),Qgt.forEach(t),o0o=r(_xe," (BERT model)"),_xe.forEach(t),r0o=i(O),qu=n(O,"LI",{});var uxe=s(qu);pfe=n(uxe,"STRONG",{});var Wgt=s(pfe);t0o=r(Wgt,"big_bird"),Wgt.forEach(t),a0o=r(uxe," \u2014 "),FD=n(uxe,"A",{href:!0});var Hgt=s(FD);n0o=r(Hgt,"BigBirdForPreTraining"),Hgt.forEach(t),s0o=r(uxe," (BigBird model)"),uxe.forEach(t),l0o=i(O),ju=n(O,"LI",{});var bxe=s(ju);_fe=n(bxe,"STRONG",{});var Ugt=s(_fe);i0o=r(Ugt,"bloom"),Ugt.forEach(t),d0o=r(bxe," \u2014 "),TD=n(bxe,"A",{href:!0});var Jgt=s(TD);c0o=r(Jgt,"BloomForCausalLM"),Jgt.forEach(t),f0o=r(bxe," (BLOOM model)"),bxe.forEach(t),m0o=i(O),Du=n(O,"LI",{});var vxe=s(Du);ufe=n(vxe,"STRONG",{});var Ygt=s(ufe);g0o=r(Ygt,"camembert"),Ygt.forEach(t),h0o=r(vxe," \u2014 "),MD=n(vxe,"A",{href:!0});var Kgt=s(MD);p0o=r(Kgt,"CamembertForMaskedLM"),Kgt.forEach(t),_0o=r(vxe," (CamemBERT model)"),vxe.forEach(t),u0o=i(O),Gu=n(O,"LI",{});var Fxe=s(Gu);bfe=n(Fxe,"STRONG",{});var Zgt=s(bfe);b0o=r(Zgt,"ctrl"),Zgt.forEach(t),v0o=r(Fxe," \u2014 "),ED=n(Fxe,"A",{href:!0});var eht=s(ED);F0o=r(eht,"CTRLLMHeadModel"),eht.forEach(t),T0o=r(Fxe," (CTRL model)"),Fxe.forEach(t),M0o=i(O),Ou=n(O,"LI",{});var Txe=s(Ou);vfe=n(Txe,"STRONG",{});var oht=s(vfe);E0o=r(oht,"data2vec-text"),oht.forEach(t),C0o=r(Txe," \u2014 "),CD=n(Txe,"A",{href:!0});var rht=s(CD);w0o=r(rht,"Data2VecTextForMaskedLM"),rht.forEach(t),A0o=r(Txe," (Data2VecText model)"),Txe.forEach(t),L0o=i(O),Vu=n(O,"LI",{});var Mxe=s(Vu);Ffe=n(Mxe,"STRONG",{});var tht=s(Ffe);y0o=r(tht,"deberta"),tht.forEach(t),x0o=r(Mxe," \u2014 "),wD=n(Mxe,"A",{href:!0});var aht=s(wD);$0o=r(aht,"DebertaForMaskedLM"),aht.forEach(t),k0o=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),S0o=i(O),Xu=n(O,"LI",{});var Exe=s(Xu);Tfe=n(Exe,"STRONG",{});var nht=s(Tfe);R0o=r(nht,"deberta-v2"),nht.forEach(t),P0o=r(Exe," \u2014 "),AD=n(Exe,"A",{href:!0});var sht=s(AD);B0o=r(sht,"DebertaV2ForMaskedLM"),sht.forEach(t),I0o=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),N0o=i(O),zu=n(O,"LI",{});var Cxe=s(zu);Mfe=n(Cxe,"STRONG",{});var lht=s(Mfe);q0o=r(lht,"distilbert"),lht.forEach(t),j0o=r(Cxe," \u2014 "),LD=n(Cxe,"A",{href:!0});var iht=s(LD);D0o=r(iht,"DistilBertForMaskedLM"),iht.forEach(t),G0o=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),O0o=i(O),Qu=n(O,"LI",{});var wxe=s(Qu);Efe=n(wxe,"STRONG",{});var dht=s(Efe);V0o=r(dht,"electra"),dht.forEach(t),X0o=r(wxe," \u2014 "),yD=n(wxe,"A",{href:!0});var cht=s(yD);z0o=r(cht,"ElectraForPreTraining"),cht.forEach(t),Q0o=r(wxe," (ELECTRA model)"),wxe.forEach(t),W0o=i(O),Wu=n(O,"LI",{});var Axe=s(Wu);Cfe=n(Axe,"STRONG",{});var fht=s(Cfe);H0o=r(fht,"flaubert"),fht.forEach(t),U0o=r(Axe," \u2014 "),xD=n(Axe,"A",{href:!0});var mht=s(xD);J0o=r(mht,"FlaubertWithLMHeadModel"),mht.forEach(t),Y0o=r(Axe," (FlauBERT model)"),Axe.forEach(t),K0o=i(O),Hu=n(O,"LI",{});var Lxe=s(Hu);wfe=n(Lxe,"STRONG",{});var ght=s(wfe);Z0o=r(ght,"flava"),ght.forEach(t),ewo=r(Lxe," \u2014 "),$D=n(Lxe,"A",{href:!0});var hht=s($D);owo=r(hht,"FlavaForPreTraining"),hht.forEach(t),rwo=r(Lxe," (FLAVA model)"),Lxe.forEach(t),two=i(O),Uu=n(O,"LI",{});var yxe=s(Uu);Afe=n(yxe,"STRONG",{});var pht=s(Afe);awo=r(pht,"fnet"),pht.forEach(t),nwo=r(yxe," \u2014 "),kD=n(yxe,"A",{href:!0});var _ht=s(kD);swo=r(_ht,"FNetForPreTraining"),_ht.forEach(t),lwo=r(yxe," (FNet model)"),yxe.forEach(t),iwo=i(O),Ju=n(O,"LI",{});var xxe=s(Ju);Lfe=n(xxe,"STRONG",{});var uht=s(Lfe);dwo=r(uht,"fsmt"),uht.forEach(t),cwo=r(xxe," \u2014 "),SD=n(xxe,"A",{href:!0});var bht=s(SD);fwo=r(bht,"FSMTForConditionalGeneration"),bht.forEach(t),mwo=r(xxe," (FairSeq Machine-Translation model)"),xxe.forEach(t),gwo=i(O),Yu=n(O,"LI",{});var $xe=s(Yu);yfe=n($xe,"STRONG",{});var vht=s(yfe);hwo=r(vht,"funnel"),vht.forEach(t),pwo=r($xe," \u2014 "),RD=n($xe,"A",{href:!0});var Fht=s(RD);_wo=r(Fht,"FunnelForPreTraining"),Fht.forEach(t),uwo=r($xe," (Funnel Transformer model)"),$xe.forEach(t),bwo=i(O),Ku=n(O,"LI",{});var kxe=s(Ku);xfe=n(kxe,"STRONG",{});var Tht=s(xfe);vwo=r(Tht,"gpt2"),Tht.forEach(t),Fwo=r(kxe," \u2014 "),PD=n(kxe,"A",{href:!0});var Mht=s(PD);Two=r(Mht,"GPT2LMHeadModel"),Mht.forEach(t),Mwo=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),Ewo=i(O),Zu=n(O,"LI",{});var Sxe=s(Zu);$fe=n(Sxe,"STRONG",{});var Eht=s($fe);Cwo=r(Eht,"ibert"),Eht.forEach(t),wwo=r(Sxe," \u2014 "),BD=n(Sxe,"A",{href:!0});var Cht=s(BD);Awo=r(Cht,"IBertForMaskedLM"),Cht.forEach(t),Lwo=r(Sxe," (I-BERT model)"),Sxe.forEach(t),ywo=i(O),e7=n(O,"LI",{});var Rxe=s(e7);kfe=n(Rxe,"STRONG",{});var wht=s(kfe);xwo=r(wht,"layoutlm"),wht.forEach(t),$wo=r(Rxe," \u2014 "),ID=n(Rxe,"A",{href:!0});var Aht=s(ID);kwo=r(Aht,"LayoutLMForMaskedLM"),Aht.forEach(t),Swo=r(Rxe," (LayoutLM model)"),Rxe.forEach(t),Rwo=i(O),o7=n(O,"LI",{});var Pxe=s(o7);Sfe=n(Pxe,"STRONG",{});var Lht=s(Sfe);Pwo=r(Lht,"longformer"),Lht.forEach(t),Bwo=r(Pxe," \u2014 "),ND=n(Pxe,"A",{href:!0});var yht=s(ND);Iwo=r(yht,"LongformerForMaskedLM"),yht.forEach(t),Nwo=r(Pxe," (Longformer model)"),Pxe.forEach(t),qwo=i(O),r7=n(O,"LI",{});var Bxe=s(r7);Rfe=n(Bxe,"STRONG",{});var xht=s(Rfe);jwo=r(xht,"lxmert"),xht.forEach(t),Dwo=r(Bxe," \u2014 "),qD=n(Bxe,"A",{href:!0});var $ht=s(qD);Gwo=r($ht,"LxmertForPreTraining"),$ht.forEach(t),Owo=r(Bxe," (LXMERT model)"),Bxe.forEach(t),Vwo=i(O),t7=n(O,"LI",{});var Ixe=s(t7);Pfe=n(Ixe,"STRONG",{});var kht=s(Pfe);Xwo=r(kht,"megatron-bert"),kht.forEach(t),zwo=r(Ixe," \u2014 "),jD=n(Ixe,"A",{href:!0});var Sht=s(jD);Qwo=r(Sht,"MegatronBertForPreTraining"),Sht.forEach(t),Wwo=r(Ixe," (Megatron-BERT model)"),Ixe.forEach(t),Hwo=i(O),a7=n(O,"LI",{});var Nxe=s(a7);Bfe=n(Nxe,"STRONG",{});var Rht=s(Bfe);Uwo=r(Rht,"mobilebert"),Rht.forEach(t),Jwo=r(Nxe," \u2014 "),DD=n(Nxe,"A",{href:!0});var Pht=s(DD);Ywo=r(Pht,"MobileBertForPreTraining"),Pht.forEach(t),Kwo=r(Nxe," (MobileBERT model)"),Nxe.forEach(t),Zwo=i(O),n7=n(O,"LI",{});var qxe=s(n7);Ife=n(qxe,"STRONG",{});var Bht=s(Ife);eAo=r(Bht,"mpnet"),Bht.forEach(t),oAo=r(qxe," \u2014 "),GD=n(qxe,"A",{href:!0});var Iht=s(GD);rAo=r(Iht,"MPNetForMaskedLM"),Iht.forEach(t),tAo=r(qxe," (MPNet model)"),qxe.forEach(t),aAo=i(O),s7=n(O,"LI",{});var jxe=s(s7);Nfe=n(jxe,"STRONG",{});var Nht=s(Nfe);nAo=r(Nht,"nezha"),Nht.forEach(t),sAo=r(jxe," \u2014 "),OD=n(jxe,"A",{href:!0});var qht=s(OD);lAo=r(qht,"NezhaForPreTraining"),qht.forEach(t),iAo=r(jxe," (Nezha model)"),jxe.forEach(t),dAo=i(O),l7=n(O,"LI",{});var Dxe=s(l7);qfe=n(Dxe,"STRONG",{});var jht=s(qfe);cAo=r(jht,"openai-gpt"),jht.forEach(t),fAo=r(Dxe," \u2014 "),VD=n(Dxe,"A",{href:!0});var Dht=s(VD);mAo=r(Dht,"OpenAIGPTLMHeadModel"),Dht.forEach(t),gAo=r(Dxe," (OpenAI GPT model)"),Dxe.forEach(t),hAo=i(O),i7=n(O,"LI",{});var Gxe=s(i7);jfe=n(Gxe,"STRONG",{});var Ght=s(jfe);pAo=r(Ght,"retribert"),Ght.forEach(t),_Ao=r(Gxe," \u2014 "),XD=n(Gxe,"A",{href:!0});var Oht=s(XD);uAo=r(Oht,"RetriBertModel"),Oht.forEach(t),bAo=r(Gxe," (RetriBERT model)"),Gxe.forEach(t),vAo=i(O),d7=n(O,"LI",{});var Oxe=s(d7);Dfe=n(Oxe,"STRONG",{});var Vht=s(Dfe);FAo=r(Vht,"roberta"),Vht.forEach(t),TAo=r(Oxe," \u2014 "),zD=n(Oxe,"A",{href:!0});var Xht=s(zD);MAo=r(Xht,"RobertaForMaskedLM"),Xht.forEach(t),EAo=r(Oxe," (RoBERTa model)"),Oxe.forEach(t),CAo=i(O),c7=n(O,"LI",{});var Vxe=s(c7);Gfe=n(Vxe,"STRONG",{});var zht=s(Gfe);wAo=r(zht,"splinter"),zht.forEach(t),AAo=r(Vxe," \u2014 "),QD=n(Vxe,"A",{href:!0});var Qht=s(QD);LAo=r(Qht,"SplinterForPreTraining"),Qht.forEach(t),yAo=r(Vxe," (Splinter model)"),Vxe.forEach(t),xAo=i(O),f7=n(O,"LI",{});var Xxe=s(f7);Ofe=n(Xxe,"STRONG",{});var Wht=s(Ofe);$Ao=r(Wht,"squeezebert"),Wht.forEach(t),kAo=r(Xxe," \u2014 "),WD=n(Xxe,"A",{href:!0});var Hht=s(WD);SAo=r(Hht,"SqueezeBertForMaskedLM"),Hht.forEach(t),RAo=r(Xxe," (SqueezeBERT model)"),Xxe.forEach(t),PAo=i(O),m7=n(O,"LI",{});var zxe=s(m7);Vfe=n(zxe,"STRONG",{});var Uht=s(Vfe);BAo=r(Uht,"t5"),Uht.forEach(t),IAo=r(zxe," \u2014 "),HD=n(zxe,"A",{href:!0});var Jht=s(HD);NAo=r(Jht,"T5ForConditionalGeneration"),Jht.forEach(t),qAo=r(zxe," (T5 model)"),zxe.forEach(t),jAo=i(O),g7=n(O,"LI",{});var Qxe=s(g7);Xfe=n(Qxe,"STRONG",{});var Yht=s(Xfe);DAo=r(Yht,"tapas"),Yht.forEach(t),GAo=r(Qxe," \u2014 "),UD=n(Qxe,"A",{href:!0});var Kht=s(UD);OAo=r(Kht,"TapasForMaskedLM"),Kht.forEach(t),VAo=r(Qxe," (TAPAS model)"),Qxe.forEach(t),XAo=i(O),h7=n(O,"LI",{});var Wxe=s(h7);zfe=n(Wxe,"STRONG",{});var Zht=s(zfe);zAo=r(Zht,"transfo-xl"),Zht.forEach(t),QAo=r(Wxe," \u2014 "),JD=n(Wxe,"A",{href:!0});var ept=s(JD);WAo=r(ept,"TransfoXLLMHeadModel"),ept.forEach(t),HAo=r(Wxe," (Transformer-XL model)"),Wxe.forEach(t),UAo=i(O),p7=n(O,"LI",{});var Hxe=s(p7);Qfe=n(Hxe,"STRONG",{});var opt=s(Qfe);JAo=r(opt,"unispeech"),opt.forEach(t),YAo=r(Hxe," \u2014 "),YD=n(Hxe,"A",{href:!0});var rpt=s(YD);KAo=r(rpt,"UniSpeechForPreTraining"),rpt.forEach(t),ZAo=r(Hxe," (UniSpeech model)"),Hxe.forEach(t),e6o=i(O),_7=n(O,"LI",{});var Uxe=s(_7);Wfe=n(Uxe,"STRONG",{});var tpt=s(Wfe);o6o=r(tpt,"unispeech-sat"),tpt.forEach(t),r6o=r(Uxe," \u2014 "),KD=n(Uxe,"A",{href:!0});var apt=s(KD);t6o=r(apt,"UniSpeechSatForPreTraining"),apt.forEach(t),a6o=r(Uxe," (UniSpeechSat model)"),Uxe.forEach(t),n6o=i(O),u7=n(O,"LI",{});var Jxe=s(u7);Hfe=n(Jxe,"STRONG",{});var npt=s(Hfe);s6o=r(npt,"visual_bert"),npt.forEach(t),l6o=r(Jxe," \u2014 "),ZD=n(Jxe,"A",{href:!0});var spt=s(ZD);i6o=r(spt,"VisualBertForPreTraining"),spt.forEach(t),d6o=r(Jxe," (VisualBERT model)"),Jxe.forEach(t),c6o=i(O),b7=n(O,"LI",{});var Yxe=s(b7);Ufe=n(Yxe,"STRONG",{});var lpt=s(Ufe);f6o=r(lpt,"vit_mae"),lpt.forEach(t),m6o=r(Yxe," \u2014 "),eG=n(Yxe,"A",{href:!0});var ipt=s(eG);g6o=r(ipt,"ViTMAEForPreTraining"),ipt.forEach(t),h6o=r(Yxe," (ViTMAE model)"),Yxe.forEach(t),p6o=i(O),v7=n(O,"LI",{});var Kxe=s(v7);Jfe=n(Kxe,"STRONG",{});var dpt=s(Jfe);_6o=r(dpt,"wav2vec2"),dpt.forEach(t),u6o=r(Kxe," \u2014 "),oG=n(Kxe,"A",{href:!0});var cpt=s(oG);b6o=r(cpt,"Wav2Vec2ForPreTraining"),cpt.forEach(t),v6o=r(Kxe," (Wav2Vec2 model)"),Kxe.forEach(t),F6o=i(O),F7=n(O,"LI",{});var Zxe=s(F7);Yfe=n(Zxe,"STRONG",{});var fpt=s(Yfe);T6o=r(fpt,"wav2vec2-conformer"),fpt.forEach(t),M6o=r(Zxe," \u2014 "),rG=n(Zxe,"A",{href:!0});var mpt=s(rG);E6o=r(mpt,"Wav2Vec2ConformerForPreTraining"),mpt.forEach(t),C6o=r(Zxe," (Wav2Vec2-Conformer model)"),Zxe.forEach(t),w6o=i(O),T7=n(O,"LI",{});var e$e=s(T7);Kfe=n(e$e,"STRONG",{});var gpt=s(Kfe);A6o=r(gpt,"xlm"),gpt.forEach(t),L6o=r(e$e," \u2014 "),tG=n(e$e,"A",{href:!0});var hpt=s(tG);y6o=r(hpt,"XLMWithLMHeadModel"),hpt.forEach(t),x6o=r(e$e," (XLM model)"),e$e.forEach(t),$6o=i(O),M7=n(O,"LI",{});var o$e=s(M7);Zfe=n(o$e,"STRONG",{});var ppt=s(Zfe);k6o=r(ppt,"xlm-roberta"),ppt.forEach(t),S6o=r(o$e," \u2014 "),aG=n(o$e,"A",{href:!0});var _pt=s(aG);R6o=r(_pt,"XLMRobertaForMaskedLM"),_pt.forEach(t),P6o=r(o$e," (XLM-RoBERTa model)"),o$e.forEach(t),B6o=i(O),E7=n(O,"LI",{});var r$e=s(E7);eme=n(r$e,"STRONG",{});var upt=s(eme);I6o=r(upt,"xlm-roberta-xl"),upt.forEach(t),N6o=r(r$e," \u2014 "),nG=n(r$e,"A",{href:!0});var bpt=s(nG);q6o=r(bpt,"XLMRobertaXLForMaskedLM"),bpt.forEach(t),j6o=r(r$e," (XLM-RoBERTa-XL model)"),r$e.forEach(t),D6o=i(O),C7=n(O,"LI",{});var t$e=s(C7);ome=n(t$e,"STRONG",{});var vpt=s(ome);G6o=r(vpt,"xlnet"),vpt.forEach(t),O6o=r(t$e," \u2014 "),sG=n(t$e,"A",{href:!0});var Fpt=s(sG);V6o=r(Fpt,"XLNetLMHeadModel"),Fpt.forEach(t),X6o=r(t$e," (XLNet model)"),t$e.forEach(t),O.forEach(t),z6o=i(na),w7=n(na,"P",{});var a$e=s(w7);Q6o=r(a$e,"The model is set in evaluation mode by default using "),rme=n(a$e,"CODE",{});var Tpt=s(rme);W6o=r(Tpt,"model.eval()"),Tpt.forEach(t),H6o=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=n(a$e,"CODE",{});var Mpt=s(tme);U6o=r(Mpt,"model.train()"),Mpt.forEach(t),a$e.forEach(t),J6o=i(na),T(A7.$$.fragment,na),na.forEach(t),Zs.forEach(t),EOe=i(f),Oi=n(f,"H2",{class:!0});var xXe=s(Oi);L7=n(xXe,"A",{id:!0,class:!0,href:!0});var Ept=s(L7);ame=n(Ept,"SPAN",{});var Cpt=s(ame);T(_L.$$.fragment,Cpt),Cpt.forEach(t),Ept.forEach(t),Y6o=i(xXe),nme=n(xXe,"SPAN",{});var wpt=s(nme);K6o=r(wpt,"AutoModelForCausalLM"),wpt.forEach(t),xXe.forEach(t),COe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(uL.$$.fragment,el),Z6o=i(el),Vi=n(el,"P",{});var Boe=s(Vi);eLo=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lG=n(Boe,"A",{href:!0});var Apt=s(lG);oLo=r(Apt,"from_pretrained()"),Apt.forEach(t),rLo=r(Boe," class method or the "),iG=n(Boe,"A",{href:!0});var Lpt=s(iG);tLo=r(Lpt,"from_config()"),Lpt.forEach(t),aLo=r(Boe,` class
method.`),Boe.forEach(t),nLo=i(el),bL=n(el,"P",{});var $Xe=s(bL);sLo=r($Xe,"This class cannot be instantiated directly using "),sme=n($Xe,"CODE",{});var ypt=s(sme);lLo=r(ypt,"__init__()"),ypt.forEach(t),iLo=r($Xe," (throws an error)."),$Xe.forEach(t),dLo=i(el),lt=n(el,"DIV",{class:!0});var Dw=s(lt);T(vL.$$.fragment,Dw),cLo=i(Dw),lme=n(Dw,"P",{});var xpt=s(lme);fLo=r(xpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xpt.forEach(t),mLo=i(Dw),Xi=n(Dw,"P",{});var Ioe=s(Xi);gLo=r(Ioe,`Note:
Loading a model from its configuration file does `),ime=n(Ioe,"STRONG",{});var $pt=s(ime);hLo=r($pt,"not"),$pt.forEach(t),pLo=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(Ioe,"A",{href:!0});var kpt=s(dG);_Lo=r(kpt,"from_pretrained()"),kpt.forEach(t),uLo=r(Ioe," to load the model weights."),Ioe.forEach(t),bLo=i(Dw),T(y7.$$.fragment,Dw),Dw.forEach(t),vLo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(FL.$$.fragment,sa),FLo=i(sa),dme=n(sa,"P",{});var Spt=s(dme);TLo=r(Spt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Spt.forEach(t),MLo=i(sa),Ba=n(sa,"P",{});var Gw=s(Ba);ELo=r(Gw,"The model class to instantiate is selected based on the "),cme=n(Gw,"CODE",{});var Rpt=s(cme);CLo=r(Rpt,"model_type"),Rpt.forEach(t),wLo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),fme=n(Gw,"CODE",{});var Ppt=s(fme);ALo=r(Ppt,"pretrained_model_name_or_path"),Ppt.forEach(t),LLo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(Gw,"CODE",{});var Bpt=s(mme);yLo=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),xLo=r(Gw,":"),Gw.forEach(t),$Lo=i(sa),z=n(sa,"UL",{});var Q=s(z);x7=n(Q,"LI",{});var n$e=s(x7);gme=n(n$e,"STRONG",{});var Ipt=s(gme);kLo=r(Ipt,"bart"),Ipt.forEach(t),SLo=r(n$e," \u2014 "),cG=n(n$e,"A",{href:!0});var Npt=s(cG);RLo=r(Npt,"BartForCausalLM"),Npt.forEach(t),PLo=r(n$e," (BART model)"),n$e.forEach(t),BLo=i(Q),$7=n(Q,"LI",{});var s$e=s($7);hme=n(s$e,"STRONG",{});var qpt=s(hme);ILo=r(qpt,"bert"),qpt.forEach(t),NLo=r(s$e," \u2014 "),fG=n(s$e,"A",{href:!0});var jpt=s(fG);qLo=r(jpt,"BertLMHeadModel"),jpt.forEach(t),jLo=r(s$e," (BERT model)"),s$e.forEach(t),DLo=i(Q),k7=n(Q,"LI",{});var l$e=s(k7);pme=n(l$e,"STRONG",{});var Dpt=s(pme);GLo=r(Dpt,"bert-generation"),Dpt.forEach(t),OLo=r(l$e," \u2014 "),mG=n(l$e,"A",{href:!0});var Gpt=s(mG);VLo=r(Gpt,"BertGenerationDecoder"),Gpt.forEach(t),XLo=r(l$e," (Bert Generation model)"),l$e.forEach(t),zLo=i(Q),S7=n(Q,"LI",{});var i$e=s(S7);_me=n(i$e,"STRONG",{});var Opt=s(_me);QLo=r(Opt,"big_bird"),Opt.forEach(t),WLo=r(i$e," \u2014 "),gG=n(i$e,"A",{href:!0});var Vpt=s(gG);HLo=r(Vpt,"BigBirdForCausalLM"),Vpt.forEach(t),ULo=r(i$e," (BigBird model)"),i$e.forEach(t),JLo=i(Q),R7=n(Q,"LI",{});var d$e=s(R7);ume=n(d$e,"STRONG",{});var Xpt=s(ume);YLo=r(Xpt,"bigbird_pegasus"),Xpt.forEach(t),KLo=r(d$e," \u2014 "),hG=n(d$e,"A",{href:!0});var zpt=s(hG);ZLo=r(zpt,"BigBirdPegasusForCausalLM"),zpt.forEach(t),eyo=r(d$e," (BigBird-Pegasus model)"),d$e.forEach(t),oyo=i(Q),P7=n(Q,"LI",{});var c$e=s(P7);bme=n(c$e,"STRONG",{});var Qpt=s(bme);ryo=r(Qpt,"blenderbot"),Qpt.forEach(t),tyo=r(c$e," \u2014 "),pG=n(c$e,"A",{href:!0});var Wpt=s(pG);ayo=r(Wpt,"BlenderbotForCausalLM"),Wpt.forEach(t),nyo=r(c$e," (Blenderbot model)"),c$e.forEach(t),syo=i(Q),B7=n(Q,"LI",{});var f$e=s(B7);vme=n(f$e,"STRONG",{});var Hpt=s(vme);lyo=r(Hpt,"blenderbot-small"),Hpt.forEach(t),iyo=r(f$e," \u2014 "),_G=n(f$e,"A",{href:!0});var Upt=s(_G);dyo=r(Upt,"BlenderbotSmallForCausalLM"),Upt.forEach(t),cyo=r(f$e," (BlenderbotSmall model)"),f$e.forEach(t),fyo=i(Q),I7=n(Q,"LI",{});var m$e=s(I7);Fme=n(m$e,"STRONG",{});var Jpt=s(Fme);myo=r(Jpt,"bloom"),Jpt.forEach(t),gyo=r(m$e," \u2014 "),uG=n(m$e,"A",{href:!0});var Ypt=s(uG);hyo=r(Ypt,"BloomForCausalLM"),Ypt.forEach(t),pyo=r(m$e," (BLOOM model)"),m$e.forEach(t),_yo=i(Q),N7=n(Q,"LI",{});var g$e=s(N7);Tme=n(g$e,"STRONG",{});var Kpt=s(Tme);uyo=r(Kpt,"camembert"),Kpt.forEach(t),byo=r(g$e," \u2014 "),bG=n(g$e,"A",{href:!0});var Zpt=s(bG);vyo=r(Zpt,"CamembertForCausalLM"),Zpt.forEach(t),Fyo=r(g$e," (CamemBERT model)"),g$e.forEach(t),Tyo=i(Q),q7=n(Q,"LI",{});var h$e=s(q7);Mme=n(h$e,"STRONG",{});var e_t=s(Mme);Myo=r(e_t,"codegen"),e_t.forEach(t),Eyo=r(h$e," \u2014 "),vG=n(h$e,"A",{href:!0});var o_t=s(vG);Cyo=r(o_t,"CodeGenForCausalLM"),o_t.forEach(t),wyo=r(h$e," (CodeGen model)"),h$e.forEach(t),Ayo=i(Q),j7=n(Q,"LI",{});var p$e=s(j7);Eme=n(p$e,"STRONG",{});var r_t=s(Eme);Lyo=r(r_t,"ctrl"),r_t.forEach(t),yyo=r(p$e," \u2014 "),FG=n(p$e,"A",{href:!0});var t_t=s(FG);xyo=r(t_t,"CTRLLMHeadModel"),t_t.forEach(t),$yo=r(p$e," (CTRL model)"),p$e.forEach(t),kyo=i(Q),D7=n(Q,"LI",{});var _$e=s(D7);Cme=n(_$e,"STRONG",{});var a_t=s(Cme);Syo=r(a_t,"data2vec-text"),a_t.forEach(t),Ryo=r(_$e," \u2014 "),TG=n(_$e,"A",{href:!0});var n_t=s(TG);Pyo=r(n_t,"Data2VecTextForCausalLM"),n_t.forEach(t),Byo=r(_$e," (Data2VecText model)"),_$e.forEach(t),Iyo=i(Q),G7=n(Q,"LI",{});var u$e=s(G7);wme=n(u$e,"STRONG",{});var s_t=s(wme);Nyo=r(s_t,"electra"),s_t.forEach(t),qyo=r(u$e," \u2014 "),MG=n(u$e,"A",{href:!0});var l_t=s(MG);jyo=r(l_t,"ElectraForCausalLM"),l_t.forEach(t),Dyo=r(u$e," (ELECTRA model)"),u$e.forEach(t),Gyo=i(Q),O7=n(Q,"LI",{});var b$e=s(O7);Ame=n(b$e,"STRONG",{});var i_t=s(Ame);Oyo=r(i_t,"gpt2"),i_t.forEach(t),Vyo=r(b$e," \u2014 "),EG=n(b$e,"A",{href:!0});var d_t=s(EG);Xyo=r(d_t,"GPT2LMHeadModel"),d_t.forEach(t),zyo=r(b$e," (OpenAI GPT-2 model)"),b$e.forEach(t),Qyo=i(Q),V7=n(Q,"LI",{});var v$e=s(V7);Lme=n(v$e,"STRONG",{});var c_t=s(Lme);Wyo=r(c_t,"gpt_neo"),c_t.forEach(t),Hyo=r(v$e," \u2014 "),CG=n(v$e,"A",{href:!0});var f_t=s(CG);Uyo=r(f_t,"GPTNeoForCausalLM"),f_t.forEach(t),Jyo=r(v$e," (GPT Neo model)"),v$e.forEach(t),Yyo=i(Q),X7=n(Q,"LI",{});var F$e=s(X7);yme=n(F$e,"STRONG",{});var m_t=s(yme);Kyo=r(m_t,"gpt_neox"),m_t.forEach(t),Zyo=r(F$e," \u2014 "),wG=n(F$e,"A",{href:!0});var g_t=s(wG);e8o=r(g_t,"GPTNeoXForCausalLM"),g_t.forEach(t),o8o=r(F$e," (GPT NeoX model)"),F$e.forEach(t),r8o=i(Q),z7=n(Q,"LI",{});var T$e=s(z7);xme=n(T$e,"STRONG",{});var h_t=s(xme);t8o=r(h_t,"gptj"),h_t.forEach(t),a8o=r(T$e," \u2014 "),AG=n(T$e,"A",{href:!0});var p_t=s(AG);n8o=r(p_t,"GPTJForCausalLM"),p_t.forEach(t),s8o=r(T$e," (GPT-J model)"),T$e.forEach(t),l8o=i(Q),Q7=n(Q,"LI",{});var M$e=s(Q7);$me=n(M$e,"STRONG",{});var __t=s($me);i8o=r(__t,"marian"),__t.forEach(t),d8o=r(M$e," \u2014 "),LG=n(M$e,"A",{href:!0});var u_t=s(LG);c8o=r(u_t,"MarianForCausalLM"),u_t.forEach(t),f8o=r(M$e," (Marian model)"),M$e.forEach(t),m8o=i(Q),W7=n(Q,"LI",{});var E$e=s(W7);kme=n(E$e,"STRONG",{});var b_t=s(kme);g8o=r(b_t,"mbart"),b_t.forEach(t),h8o=r(E$e," \u2014 "),yG=n(E$e,"A",{href:!0});var v_t=s(yG);p8o=r(v_t,"MBartForCausalLM"),v_t.forEach(t),_8o=r(E$e," (mBART model)"),E$e.forEach(t),u8o=i(Q),H7=n(Q,"LI",{});var C$e=s(H7);Sme=n(C$e,"STRONG",{});var F_t=s(Sme);b8o=r(F_t,"megatron-bert"),F_t.forEach(t),v8o=r(C$e," \u2014 "),xG=n(C$e,"A",{href:!0});var T_t=s(xG);F8o=r(T_t,"MegatronBertForCausalLM"),T_t.forEach(t),T8o=r(C$e," (Megatron-BERT model)"),C$e.forEach(t),M8o=i(Q),U7=n(Q,"LI",{});var w$e=s(U7);Rme=n(w$e,"STRONG",{});var M_t=s(Rme);E8o=r(M_t,"openai-gpt"),M_t.forEach(t),C8o=r(w$e," \u2014 "),$G=n(w$e,"A",{href:!0});var E_t=s($G);w8o=r(E_t,"OpenAIGPTLMHeadModel"),E_t.forEach(t),A8o=r(w$e," (OpenAI GPT model)"),w$e.forEach(t),L8o=i(Q),J7=n(Q,"LI",{});var A$e=s(J7);Pme=n(A$e,"STRONG",{});var C_t=s(Pme);y8o=r(C_t,"opt"),C_t.forEach(t),x8o=r(A$e," \u2014 "),kG=n(A$e,"A",{href:!0});var w_t=s(kG);$8o=r(w_t,"OPTForCausalLM"),w_t.forEach(t),k8o=r(A$e," (OPT model)"),A$e.forEach(t),S8o=i(Q),Y7=n(Q,"LI",{});var L$e=s(Y7);Bme=n(L$e,"STRONG",{});var A_t=s(Bme);R8o=r(A_t,"pegasus"),A_t.forEach(t),P8o=r(L$e," \u2014 "),SG=n(L$e,"A",{href:!0});var L_t=s(SG);B8o=r(L_t,"PegasusForCausalLM"),L_t.forEach(t),I8o=r(L$e," (Pegasus model)"),L$e.forEach(t),N8o=i(Q),K7=n(Q,"LI",{});var y$e=s(K7);Ime=n(y$e,"STRONG",{});var y_t=s(Ime);q8o=r(y_t,"plbart"),y_t.forEach(t),j8o=r(y$e," \u2014 "),RG=n(y$e,"A",{href:!0});var x_t=s(RG);D8o=r(x_t,"PLBartForCausalLM"),x_t.forEach(t),G8o=r(y$e," (PLBart model)"),y$e.forEach(t),O8o=i(Q),Z7=n(Q,"LI",{});var x$e=s(Z7);Nme=n(x$e,"STRONG",{});var $_t=s(Nme);V8o=r($_t,"prophetnet"),$_t.forEach(t),X8o=r(x$e," \u2014 "),PG=n(x$e,"A",{href:!0});var k_t=s(PG);z8o=r(k_t,"ProphetNetForCausalLM"),k_t.forEach(t),Q8o=r(x$e," (ProphetNet model)"),x$e.forEach(t),W8o=i(Q),e1=n(Q,"LI",{});var $$e=s(e1);qme=n($$e,"STRONG",{});var S_t=s(qme);H8o=r(S_t,"qdqbert"),S_t.forEach(t),U8o=r($$e," \u2014 "),BG=n($$e,"A",{href:!0});var R_t=s(BG);J8o=r(R_t,"QDQBertLMHeadModel"),R_t.forEach(t),Y8o=r($$e," (QDQBert model)"),$$e.forEach(t),K8o=i(Q),o1=n(Q,"LI",{});var k$e=s(o1);jme=n(k$e,"STRONG",{});var P_t=s(jme);Z8o=r(P_t,"reformer"),P_t.forEach(t),exo=r(k$e," \u2014 "),IG=n(k$e,"A",{href:!0});var B_t=s(IG);oxo=r(B_t,"ReformerModelWithLMHead"),B_t.forEach(t),rxo=r(k$e," (Reformer model)"),k$e.forEach(t),txo=i(Q),r1=n(Q,"LI",{});var S$e=s(r1);Dme=n(S$e,"STRONG",{});var I_t=s(Dme);axo=r(I_t,"rembert"),I_t.forEach(t),nxo=r(S$e," \u2014 "),NG=n(S$e,"A",{href:!0});var N_t=s(NG);sxo=r(N_t,"RemBertForCausalLM"),N_t.forEach(t),lxo=r(S$e," (RemBERT model)"),S$e.forEach(t),ixo=i(Q),t1=n(Q,"LI",{});var R$e=s(t1);Gme=n(R$e,"STRONG",{});var q_t=s(Gme);dxo=r(q_t,"roberta"),q_t.forEach(t),cxo=r(R$e," \u2014 "),qG=n(R$e,"A",{href:!0});var j_t=s(qG);fxo=r(j_t,"RobertaForCausalLM"),j_t.forEach(t),mxo=r(R$e," (RoBERTa model)"),R$e.forEach(t),gxo=i(Q),a1=n(Q,"LI",{});var P$e=s(a1);Ome=n(P$e,"STRONG",{});var D_t=s(Ome);hxo=r(D_t,"roformer"),D_t.forEach(t),pxo=r(P$e," \u2014 "),jG=n(P$e,"A",{href:!0});var G_t=s(jG);_xo=r(G_t,"RoFormerForCausalLM"),G_t.forEach(t),uxo=r(P$e," (RoFormer model)"),P$e.forEach(t),bxo=i(Q),n1=n(Q,"LI",{});var B$e=s(n1);Vme=n(B$e,"STRONG",{});var O_t=s(Vme);vxo=r(O_t,"speech_to_text_2"),O_t.forEach(t),Fxo=r(B$e," \u2014 "),DG=n(B$e,"A",{href:!0});var V_t=s(DG);Txo=r(V_t,"Speech2Text2ForCausalLM"),V_t.forEach(t),Mxo=r(B$e," (Speech2Text2 model)"),B$e.forEach(t),Exo=i(Q),s1=n(Q,"LI",{});var I$e=s(s1);Xme=n(I$e,"STRONG",{});var X_t=s(Xme);Cxo=r(X_t,"transfo-xl"),X_t.forEach(t),wxo=r(I$e," \u2014 "),GG=n(I$e,"A",{href:!0});var z_t=s(GG);Axo=r(z_t,"TransfoXLLMHeadModel"),z_t.forEach(t),Lxo=r(I$e," (Transformer-XL model)"),I$e.forEach(t),yxo=i(Q),l1=n(Q,"LI",{});var N$e=s(l1);zme=n(N$e,"STRONG",{});var Q_t=s(zme);xxo=r(Q_t,"trocr"),Q_t.forEach(t),$xo=r(N$e," \u2014 "),OG=n(N$e,"A",{href:!0});var W_t=s(OG);kxo=r(W_t,"TrOCRForCausalLM"),W_t.forEach(t),Sxo=r(N$e," (TrOCR model)"),N$e.forEach(t),Rxo=i(Q),i1=n(Q,"LI",{});var q$e=s(i1);Qme=n(q$e,"STRONG",{});var H_t=s(Qme);Pxo=r(H_t,"xglm"),H_t.forEach(t),Bxo=r(q$e," \u2014 "),VG=n(q$e,"A",{href:!0});var U_t=s(VG);Ixo=r(U_t,"XGLMForCausalLM"),U_t.forEach(t),Nxo=r(q$e," (XGLM model)"),q$e.forEach(t),qxo=i(Q),d1=n(Q,"LI",{});var j$e=s(d1);Wme=n(j$e,"STRONG",{});var J_t=s(Wme);jxo=r(J_t,"xlm"),J_t.forEach(t),Dxo=r(j$e," \u2014 "),XG=n(j$e,"A",{href:!0});var Y_t=s(XG);Gxo=r(Y_t,"XLMWithLMHeadModel"),Y_t.forEach(t),Oxo=r(j$e," (XLM model)"),j$e.forEach(t),Vxo=i(Q),c1=n(Q,"LI",{});var D$e=s(c1);Hme=n(D$e,"STRONG",{});var K_t=s(Hme);Xxo=r(K_t,"xlm-prophetnet"),K_t.forEach(t),zxo=r(D$e," \u2014 "),zG=n(D$e,"A",{href:!0});var Z_t=s(zG);Qxo=r(Z_t,"XLMProphetNetForCausalLM"),Z_t.forEach(t),Wxo=r(D$e," (XLM-ProphetNet model)"),D$e.forEach(t),Hxo=i(Q),f1=n(Q,"LI",{});var G$e=s(f1);Ume=n(G$e,"STRONG",{});var eut=s(Ume);Uxo=r(eut,"xlm-roberta"),eut.forEach(t),Jxo=r(G$e," \u2014 "),QG=n(G$e,"A",{href:!0});var out=s(QG);Yxo=r(out,"XLMRobertaForCausalLM"),out.forEach(t),Kxo=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),Zxo=i(Q),m1=n(Q,"LI",{});var O$e=s(m1);Jme=n(O$e,"STRONG",{});var rut=s(Jme);e$o=r(rut,"xlm-roberta-xl"),rut.forEach(t),o$o=r(O$e," \u2014 "),WG=n(O$e,"A",{href:!0});var tut=s(WG);r$o=r(tut,"XLMRobertaXLForCausalLM"),tut.forEach(t),t$o=r(O$e," (XLM-RoBERTa-XL model)"),O$e.forEach(t),a$o=i(Q),g1=n(Q,"LI",{});var V$e=s(g1);Yme=n(V$e,"STRONG",{});var aut=s(Yme);n$o=r(aut,"xlnet"),aut.forEach(t),s$o=r(V$e," \u2014 "),HG=n(V$e,"A",{href:!0});var nut=s(HG);l$o=r(nut,"XLNetLMHeadModel"),nut.forEach(t),i$o=r(V$e," (XLNet model)"),V$e.forEach(t),Q.forEach(t),d$o=i(sa),h1=n(sa,"P",{});var X$e=s(h1);c$o=r(X$e,"The model is set in evaluation mode by default using "),Kme=n(X$e,"CODE",{});var sut=s(Kme);f$o=r(sut,"model.eval()"),sut.forEach(t),m$o=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zme=n(X$e,"CODE",{});var lut=s(Zme);g$o=r(lut,"model.train()"),lut.forEach(t),X$e.forEach(t),h$o=i(sa),T(p1.$$.fragment,sa),sa.forEach(t),el.forEach(t),wOe=i(f),zi=n(f,"H2",{class:!0});var kXe=s(zi);_1=n(kXe,"A",{id:!0,class:!0,href:!0});var iut=s(_1);ege=n(iut,"SPAN",{});var dut=s(ege);T(TL.$$.fragment,dut),dut.forEach(t),iut.forEach(t),p$o=i(kXe),oge=n(kXe,"SPAN",{});var cut=s(oge);_$o=r(cut,"AutoModelForMaskedLM"),cut.forEach(t),kXe.forEach(t),AOe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(ML.$$.fragment,ol),u$o=i(ol),Qi=n(ol,"P",{});var Noe=s(Qi);b$o=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UG=n(Noe,"A",{href:!0});var fut=s(UG);v$o=r(fut,"from_pretrained()"),fut.forEach(t),F$o=r(Noe," class method or the "),JG=n(Noe,"A",{href:!0});var mut=s(JG);T$o=r(mut,"from_config()"),mut.forEach(t),M$o=r(Noe,` class
method.`),Noe.forEach(t),E$o=i(ol),EL=n(ol,"P",{});var SXe=s(EL);C$o=r(SXe,"This class cannot be instantiated directly using "),rge=n(SXe,"CODE",{});var gut=s(rge);w$o=r(gut,"__init__()"),gut.forEach(t),A$o=r(SXe," (throws an error)."),SXe.forEach(t),L$o=i(ol),it=n(ol,"DIV",{class:!0});var Ow=s(it);T(CL.$$.fragment,Ow),y$o=i(Ow),tge=n(Ow,"P",{});var hut=s(tge);x$o=r(hut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hut.forEach(t),$$o=i(Ow),Wi=n(Ow,"P",{});var qoe=s(Wi);k$o=r(qoe,`Note:
Loading a model from its configuration file does `),age=n(qoe,"STRONG",{});var put=s(age);S$o=r(put,"not"),put.forEach(t),R$o=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(qoe,"A",{href:!0});var _ut=s(YG);P$o=r(_ut,"from_pretrained()"),_ut.forEach(t),B$o=r(qoe," to load the model weights."),qoe.forEach(t),I$o=i(Ow),T(u1.$$.fragment,Ow),Ow.forEach(t),N$o=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(wL.$$.fragment,la),q$o=i(la),nge=n(la,"P",{});var uut=s(nge);j$o=r(uut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uut.forEach(t),D$o=i(la),Ia=n(la,"P",{});var Vw=s(Ia);G$o=r(Vw,"The model class to instantiate is selected based on the "),sge=n(Vw,"CODE",{});var but=s(sge);O$o=r(but,"model_type"),but.forEach(t),V$o=r(Vw,` property of the config object (either
passed as an argument or loaded from `),lge=n(Vw,"CODE",{});var vut=s(lge);X$o=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),z$o=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(Vw,"CODE",{});var Fut=s(ige);Q$o=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),W$o=r(Vw,":"),Vw.forEach(t),H$o=i(la),W=n(la,"UL",{});var U=s(W);b1=n(U,"LI",{});var z$e=s(b1);dge=n(z$e,"STRONG",{});var Tut=s(dge);U$o=r(Tut,"albert"),Tut.forEach(t),J$o=r(z$e," \u2014 "),KG=n(z$e,"A",{href:!0});var Mut=s(KG);Y$o=r(Mut,"AlbertForMaskedLM"),Mut.forEach(t),K$o=r(z$e," (ALBERT model)"),z$e.forEach(t),Z$o=i(U),v1=n(U,"LI",{});var Q$e=s(v1);cge=n(Q$e,"STRONG",{});var Eut=s(cge);eko=r(Eut,"bart"),Eut.forEach(t),oko=r(Q$e," \u2014 "),ZG=n(Q$e,"A",{href:!0});var Cut=s(ZG);rko=r(Cut,"BartForConditionalGeneration"),Cut.forEach(t),tko=r(Q$e," (BART model)"),Q$e.forEach(t),ako=i(U),F1=n(U,"LI",{});var W$e=s(F1);fge=n(W$e,"STRONG",{});var wut=s(fge);nko=r(wut,"bert"),wut.forEach(t),sko=r(W$e," \u2014 "),eO=n(W$e,"A",{href:!0});var Aut=s(eO);lko=r(Aut,"BertForMaskedLM"),Aut.forEach(t),iko=r(W$e," (BERT model)"),W$e.forEach(t),dko=i(U),T1=n(U,"LI",{});var H$e=s(T1);mge=n(H$e,"STRONG",{});var Lut=s(mge);cko=r(Lut,"big_bird"),Lut.forEach(t),fko=r(H$e," \u2014 "),oO=n(H$e,"A",{href:!0});var yut=s(oO);mko=r(yut,"BigBirdForMaskedLM"),yut.forEach(t),gko=r(H$e," (BigBird model)"),H$e.forEach(t),hko=i(U),M1=n(U,"LI",{});var U$e=s(M1);gge=n(U$e,"STRONG",{});var xut=s(gge);pko=r(xut,"camembert"),xut.forEach(t),_ko=r(U$e," \u2014 "),rO=n(U$e,"A",{href:!0});var $ut=s(rO);uko=r($ut,"CamembertForMaskedLM"),$ut.forEach(t),bko=r(U$e," (CamemBERT model)"),U$e.forEach(t),vko=i(U),E1=n(U,"LI",{});var J$e=s(E1);hge=n(J$e,"STRONG",{});var kut=s(hge);Fko=r(kut,"convbert"),kut.forEach(t),Tko=r(J$e," \u2014 "),tO=n(J$e,"A",{href:!0});var Sut=s(tO);Mko=r(Sut,"ConvBertForMaskedLM"),Sut.forEach(t),Eko=r(J$e," (ConvBERT model)"),J$e.forEach(t),Cko=i(U),C1=n(U,"LI",{});var Y$e=s(C1);pge=n(Y$e,"STRONG",{});var Rut=s(pge);wko=r(Rut,"data2vec-text"),Rut.forEach(t),Ako=r(Y$e," \u2014 "),aO=n(Y$e,"A",{href:!0});var Put=s(aO);Lko=r(Put,"Data2VecTextForMaskedLM"),Put.forEach(t),yko=r(Y$e," (Data2VecText model)"),Y$e.forEach(t),xko=i(U),w1=n(U,"LI",{});var K$e=s(w1);_ge=n(K$e,"STRONG",{});var But=s(_ge);$ko=r(But,"deberta"),But.forEach(t),kko=r(K$e," \u2014 "),nO=n(K$e,"A",{href:!0});var Iut=s(nO);Sko=r(Iut,"DebertaForMaskedLM"),Iut.forEach(t),Rko=r(K$e," (DeBERTa model)"),K$e.forEach(t),Pko=i(U),A1=n(U,"LI",{});var Z$e=s(A1);uge=n(Z$e,"STRONG",{});var Nut=s(uge);Bko=r(Nut,"deberta-v2"),Nut.forEach(t),Iko=r(Z$e," \u2014 "),sO=n(Z$e,"A",{href:!0});var qut=s(sO);Nko=r(qut,"DebertaV2ForMaskedLM"),qut.forEach(t),qko=r(Z$e," (DeBERTa-v2 model)"),Z$e.forEach(t),jko=i(U),L1=n(U,"LI",{});var eke=s(L1);bge=n(eke,"STRONG",{});var jut=s(bge);Dko=r(jut,"distilbert"),jut.forEach(t),Gko=r(eke," \u2014 "),lO=n(eke,"A",{href:!0});var Dut=s(lO);Oko=r(Dut,"DistilBertForMaskedLM"),Dut.forEach(t),Vko=r(eke," (DistilBERT model)"),eke.forEach(t),Xko=i(U),y1=n(U,"LI",{});var oke=s(y1);vge=n(oke,"STRONG",{});var Gut=s(vge);zko=r(Gut,"electra"),Gut.forEach(t),Qko=r(oke," \u2014 "),iO=n(oke,"A",{href:!0});var Out=s(iO);Wko=r(Out,"ElectraForMaskedLM"),Out.forEach(t),Hko=r(oke," (ELECTRA model)"),oke.forEach(t),Uko=i(U),x1=n(U,"LI",{});var rke=s(x1);Fge=n(rke,"STRONG",{});var Vut=s(Fge);Jko=r(Vut,"flaubert"),Vut.forEach(t),Yko=r(rke," \u2014 "),dO=n(rke,"A",{href:!0});var Xut=s(dO);Kko=r(Xut,"FlaubertWithLMHeadModel"),Xut.forEach(t),Zko=r(rke," (FlauBERT model)"),rke.forEach(t),eSo=i(U),$1=n(U,"LI",{});var tke=s($1);Tge=n(tke,"STRONG",{});var zut=s(Tge);oSo=r(zut,"fnet"),zut.forEach(t),rSo=r(tke," \u2014 "),cO=n(tke,"A",{href:!0});var Qut=s(cO);tSo=r(Qut,"FNetForMaskedLM"),Qut.forEach(t),aSo=r(tke," (FNet model)"),tke.forEach(t),nSo=i(U),k1=n(U,"LI",{});var ake=s(k1);Mge=n(ake,"STRONG",{});var Wut=s(Mge);sSo=r(Wut,"funnel"),Wut.forEach(t),lSo=r(ake," \u2014 "),fO=n(ake,"A",{href:!0});var Hut=s(fO);iSo=r(Hut,"FunnelForMaskedLM"),Hut.forEach(t),dSo=r(ake," (Funnel Transformer model)"),ake.forEach(t),cSo=i(U),S1=n(U,"LI",{});var nke=s(S1);Ege=n(nke,"STRONG",{});var Uut=s(Ege);fSo=r(Uut,"ibert"),Uut.forEach(t),mSo=r(nke," \u2014 "),mO=n(nke,"A",{href:!0});var Jut=s(mO);gSo=r(Jut,"IBertForMaskedLM"),Jut.forEach(t),hSo=r(nke," (I-BERT model)"),nke.forEach(t),pSo=i(U),R1=n(U,"LI",{});var ske=s(R1);Cge=n(ske,"STRONG",{});var Yut=s(Cge);_So=r(Yut,"layoutlm"),Yut.forEach(t),uSo=r(ske," \u2014 "),gO=n(ske,"A",{href:!0});var Kut=s(gO);bSo=r(Kut,"LayoutLMForMaskedLM"),Kut.forEach(t),vSo=r(ske," (LayoutLM model)"),ske.forEach(t),FSo=i(U),P1=n(U,"LI",{});var lke=s(P1);wge=n(lke,"STRONG",{});var Zut=s(wge);TSo=r(Zut,"longformer"),Zut.forEach(t),MSo=r(lke," \u2014 "),hO=n(lke,"A",{href:!0});var e7t=s(hO);ESo=r(e7t,"LongformerForMaskedLM"),e7t.forEach(t),CSo=r(lke," (Longformer model)"),lke.forEach(t),wSo=i(U),B1=n(U,"LI",{});var ike=s(B1);Age=n(ike,"STRONG",{});var o7t=s(Age);ASo=r(o7t,"luke"),o7t.forEach(t),LSo=r(ike," \u2014 "),pO=n(ike,"A",{href:!0});var r7t=s(pO);ySo=r(r7t,"LukeForMaskedLM"),r7t.forEach(t),xSo=r(ike," (LUKE model)"),ike.forEach(t),$So=i(U),I1=n(U,"LI",{});var dke=s(I1);Lge=n(dke,"STRONG",{});var t7t=s(Lge);kSo=r(t7t,"mbart"),t7t.forEach(t),SSo=r(dke," \u2014 "),_O=n(dke,"A",{href:!0});var a7t=s(_O);RSo=r(a7t,"MBartForConditionalGeneration"),a7t.forEach(t),PSo=r(dke," (mBART model)"),dke.forEach(t),BSo=i(U),N1=n(U,"LI",{});var cke=s(N1);yge=n(cke,"STRONG",{});var n7t=s(yge);ISo=r(n7t,"megatron-bert"),n7t.forEach(t),NSo=r(cke," \u2014 "),uO=n(cke,"A",{href:!0});var s7t=s(uO);qSo=r(s7t,"MegatronBertForMaskedLM"),s7t.forEach(t),jSo=r(cke," (Megatron-BERT model)"),cke.forEach(t),DSo=i(U),q1=n(U,"LI",{});var fke=s(q1);xge=n(fke,"STRONG",{});var l7t=s(xge);GSo=r(l7t,"mobilebert"),l7t.forEach(t),OSo=r(fke," \u2014 "),bO=n(fke,"A",{href:!0});var i7t=s(bO);VSo=r(i7t,"MobileBertForMaskedLM"),i7t.forEach(t),XSo=r(fke," (MobileBERT model)"),fke.forEach(t),zSo=i(U),j1=n(U,"LI",{});var mke=s(j1);$ge=n(mke,"STRONG",{});var d7t=s($ge);QSo=r(d7t,"mpnet"),d7t.forEach(t),WSo=r(mke," \u2014 "),vO=n(mke,"A",{href:!0});var c7t=s(vO);HSo=r(c7t,"MPNetForMaskedLM"),c7t.forEach(t),USo=r(mke," (MPNet model)"),mke.forEach(t),JSo=i(U),D1=n(U,"LI",{});var gke=s(D1);kge=n(gke,"STRONG",{});var f7t=s(kge);YSo=r(f7t,"nezha"),f7t.forEach(t),KSo=r(gke," \u2014 "),FO=n(gke,"A",{href:!0});var m7t=s(FO);ZSo=r(m7t,"NezhaForMaskedLM"),m7t.forEach(t),eRo=r(gke," (Nezha model)"),gke.forEach(t),oRo=i(U),G1=n(U,"LI",{});var hke=s(G1);Sge=n(hke,"STRONG",{});var g7t=s(Sge);rRo=r(g7t,"nystromformer"),g7t.forEach(t),tRo=r(hke," \u2014 "),TO=n(hke,"A",{href:!0});var h7t=s(TO);aRo=r(h7t,"NystromformerForMaskedLM"),h7t.forEach(t),nRo=r(hke," (Nystr\xF6mformer model)"),hke.forEach(t),sRo=i(U),O1=n(U,"LI",{});var pke=s(O1);Rge=n(pke,"STRONG",{});var p7t=s(Rge);lRo=r(p7t,"perceiver"),p7t.forEach(t),iRo=r(pke," \u2014 "),MO=n(pke,"A",{href:!0});var _7t=s(MO);dRo=r(_7t,"PerceiverForMaskedLM"),_7t.forEach(t),cRo=r(pke," (Perceiver model)"),pke.forEach(t),fRo=i(U),V1=n(U,"LI",{});var _ke=s(V1);Pge=n(_ke,"STRONG",{});var u7t=s(Pge);mRo=r(u7t,"qdqbert"),u7t.forEach(t),gRo=r(_ke," \u2014 "),EO=n(_ke,"A",{href:!0});var b7t=s(EO);hRo=r(b7t,"QDQBertForMaskedLM"),b7t.forEach(t),pRo=r(_ke," (QDQBert model)"),_ke.forEach(t),_Ro=i(U),X1=n(U,"LI",{});var uke=s(X1);Bge=n(uke,"STRONG",{});var v7t=s(Bge);uRo=r(v7t,"reformer"),v7t.forEach(t),bRo=r(uke," \u2014 "),CO=n(uke,"A",{href:!0});var F7t=s(CO);vRo=r(F7t,"ReformerForMaskedLM"),F7t.forEach(t),FRo=r(uke," (Reformer model)"),uke.forEach(t),TRo=i(U),z1=n(U,"LI",{});var bke=s(z1);Ige=n(bke,"STRONG",{});var T7t=s(Ige);MRo=r(T7t,"rembert"),T7t.forEach(t),ERo=r(bke," \u2014 "),wO=n(bke,"A",{href:!0});var M7t=s(wO);CRo=r(M7t,"RemBertForMaskedLM"),M7t.forEach(t),wRo=r(bke," (RemBERT model)"),bke.forEach(t),ARo=i(U),Q1=n(U,"LI",{});var vke=s(Q1);Nge=n(vke,"STRONG",{});var E7t=s(Nge);LRo=r(E7t,"roberta"),E7t.forEach(t),yRo=r(vke," \u2014 "),AO=n(vke,"A",{href:!0});var C7t=s(AO);xRo=r(C7t,"RobertaForMaskedLM"),C7t.forEach(t),$Ro=r(vke," (RoBERTa model)"),vke.forEach(t),kRo=i(U),W1=n(U,"LI",{});var Fke=s(W1);qge=n(Fke,"STRONG",{});var w7t=s(qge);SRo=r(w7t,"roformer"),w7t.forEach(t),RRo=r(Fke," \u2014 "),LO=n(Fke,"A",{href:!0});var A7t=s(LO);PRo=r(A7t,"RoFormerForMaskedLM"),A7t.forEach(t),BRo=r(Fke," (RoFormer model)"),Fke.forEach(t),IRo=i(U),H1=n(U,"LI",{});var Tke=s(H1);jge=n(Tke,"STRONG",{});var L7t=s(jge);NRo=r(L7t,"squeezebert"),L7t.forEach(t),qRo=r(Tke," \u2014 "),yO=n(Tke,"A",{href:!0});var y7t=s(yO);jRo=r(y7t,"SqueezeBertForMaskedLM"),y7t.forEach(t),DRo=r(Tke," (SqueezeBERT model)"),Tke.forEach(t),GRo=i(U),U1=n(U,"LI",{});var Mke=s(U1);Dge=n(Mke,"STRONG",{});var x7t=s(Dge);ORo=r(x7t,"tapas"),x7t.forEach(t),VRo=r(Mke," \u2014 "),xO=n(Mke,"A",{href:!0});var $7t=s(xO);XRo=r($7t,"TapasForMaskedLM"),$7t.forEach(t),zRo=r(Mke," (TAPAS model)"),Mke.forEach(t),QRo=i(U),J1=n(U,"LI",{});var Eke=s(J1);Gge=n(Eke,"STRONG",{});var k7t=s(Gge);WRo=r(k7t,"wav2vec2"),k7t.forEach(t),HRo=r(Eke," \u2014 "),Oge=n(Eke,"CODE",{});var S7t=s(Oge);URo=r(S7t,"Wav2Vec2ForMaskedLM"),S7t.forEach(t),JRo=r(Eke," (Wav2Vec2 model)"),Eke.forEach(t),YRo=i(U),Y1=n(U,"LI",{});var Cke=s(Y1);Vge=n(Cke,"STRONG",{});var R7t=s(Vge);KRo=r(R7t,"xlm"),R7t.forEach(t),ZRo=r(Cke," \u2014 "),$O=n(Cke,"A",{href:!0});var P7t=s($O);ePo=r(P7t,"XLMWithLMHeadModel"),P7t.forEach(t),oPo=r(Cke," (XLM model)"),Cke.forEach(t),rPo=i(U),K1=n(U,"LI",{});var wke=s(K1);Xge=n(wke,"STRONG",{});var B7t=s(Xge);tPo=r(B7t,"xlm-roberta"),B7t.forEach(t),aPo=r(wke," \u2014 "),kO=n(wke,"A",{href:!0});var I7t=s(kO);nPo=r(I7t,"XLMRobertaForMaskedLM"),I7t.forEach(t),sPo=r(wke," (XLM-RoBERTa model)"),wke.forEach(t),lPo=i(U),Z1=n(U,"LI",{});var Ake=s(Z1);zge=n(Ake,"STRONG",{});var N7t=s(zge);iPo=r(N7t,"xlm-roberta-xl"),N7t.forEach(t),dPo=r(Ake," \u2014 "),SO=n(Ake,"A",{href:!0});var q7t=s(SO);cPo=r(q7t,"XLMRobertaXLForMaskedLM"),q7t.forEach(t),fPo=r(Ake," (XLM-RoBERTa-XL model)"),Ake.forEach(t),mPo=i(U),e2=n(U,"LI",{});var Lke=s(e2);Qge=n(Lke,"STRONG",{});var j7t=s(Qge);gPo=r(j7t,"yoso"),j7t.forEach(t),hPo=r(Lke," \u2014 "),RO=n(Lke,"A",{href:!0});var D7t=s(RO);pPo=r(D7t,"YosoForMaskedLM"),D7t.forEach(t),_Po=r(Lke," (YOSO model)"),Lke.forEach(t),U.forEach(t),uPo=i(la),o2=n(la,"P",{});var yke=s(o2);bPo=r(yke,"The model is set in evaluation mode by default using "),Wge=n(yke,"CODE",{});var G7t=s(Wge);vPo=r(G7t,"model.eval()"),G7t.forEach(t),FPo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(yke,"CODE",{});var O7t=s(Hge);TPo=r(O7t,"model.train()"),O7t.forEach(t),yke.forEach(t),MPo=i(la),T(r2.$$.fragment,la),la.forEach(t),ol.forEach(t),LOe=i(f),Hi=n(f,"H2",{class:!0});var RXe=s(Hi);t2=n(RXe,"A",{id:!0,class:!0,href:!0});var V7t=s(t2);Uge=n(V7t,"SPAN",{});var X7t=s(Uge);T(AL.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),EPo=i(RXe),Jge=n(RXe,"SPAN",{});var z7t=s(Jge);CPo=r(z7t,"AutoModelForSeq2SeqLM"),z7t.forEach(t),RXe.forEach(t),yOe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(LL.$$.fragment,rl),wPo=i(rl),Ui=n(rl,"P",{});var joe=s(Ui);APo=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PO=n(joe,"A",{href:!0});var Q7t=s(PO);LPo=r(Q7t,"from_pretrained()"),Q7t.forEach(t),yPo=r(joe," class method or the "),BO=n(joe,"A",{href:!0});var W7t=s(BO);xPo=r(W7t,"from_config()"),W7t.forEach(t),$Po=r(joe,` class
method.`),joe.forEach(t),kPo=i(rl),yL=n(rl,"P",{});var PXe=s(yL);SPo=r(PXe,"This class cannot be instantiated directly using "),Yge=n(PXe,"CODE",{});var H7t=s(Yge);RPo=r(H7t,"__init__()"),H7t.forEach(t),PPo=r(PXe," (throws an error)."),PXe.forEach(t),BPo=i(rl),dt=n(rl,"DIV",{class:!0});var Xw=s(dt);T(xL.$$.fragment,Xw),IPo=i(Xw),Kge=n(Xw,"P",{});var U7t=s(Kge);NPo=r(U7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U7t.forEach(t),qPo=i(Xw),Ji=n(Xw,"P",{});var Doe=s(Ji);jPo=r(Doe,`Note:
Loading a model from its configuration file does `),Zge=n(Doe,"STRONG",{});var J7t=s(Zge);DPo=r(J7t,"not"),J7t.forEach(t),GPo=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(Doe,"A",{href:!0});var Y7t=s(IO);OPo=r(Y7t,"from_pretrained()"),Y7t.forEach(t),VPo=r(Doe," to load the model weights."),Doe.forEach(t),XPo=i(Xw),T(a2.$$.fragment,Xw),Xw.forEach(t),zPo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T($L.$$.fragment,ia),QPo=i(ia),ehe=n(ia,"P",{});var K7t=s(ehe);WPo=r(K7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K7t.forEach(t),HPo=i(ia),Na=n(ia,"P",{});var zw=s(Na);UPo=r(zw,"The model class to instantiate is selected based on the "),ohe=n(zw,"CODE",{});var Z7t=s(ohe);JPo=r(Z7t,"model_type"),Z7t.forEach(t),YPo=r(zw,` property of the config object (either
passed as an argument or loaded from `),rhe=n(zw,"CODE",{});var e1t=s(rhe);KPo=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),ZPo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(zw,"CODE",{});var o1t=s(the);eBo=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),oBo=r(zw,":"),zw.forEach(t),rBo=i(ia),pe=n(ia,"UL",{});var be=s(pe);n2=n(be,"LI",{});var xke=s(n2);ahe=n(xke,"STRONG",{});var r1t=s(ahe);tBo=r(r1t,"bart"),r1t.forEach(t),aBo=r(xke," \u2014 "),NO=n(xke,"A",{href:!0});var t1t=s(NO);nBo=r(t1t,"BartForConditionalGeneration"),t1t.forEach(t),sBo=r(xke," (BART model)"),xke.forEach(t),lBo=i(be),s2=n(be,"LI",{});var $ke=s(s2);nhe=n($ke,"STRONG",{});var a1t=s(nhe);iBo=r(a1t,"bigbird_pegasus"),a1t.forEach(t),dBo=r($ke," \u2014 "),qO=n($ke,"A",{href:!0});var n1t=s(qO);cBo=r(n1t,"BigBirdPegasusForConditionalGeneration"),n1t.forEach(t),fBo=r($ke," (BigBird-Pegasus model)"),$ke.forEach(t),mBo=i(be),l2=n(be,"LI",{});var kke=s(l2);she=n(kke,"STRONG",{});var s1t=s(she);gBo=r(s1t,"blenderbot"),s1t.forEach(t),hBo=r(kke," \u2014 "),jO=n(kke,"A",{href:!0});var l1t=s(jO);pBo=r(l1t,"BlenderbotForConditionalGeneration"),l1t.forEach(t),_Bo=r(kke," (Blenderbot model)"),kke.forEach(t),uBo=i(be),i2=n(be,"LI",{});var Ske=s(i2);lhe=n(Ske,"STRONG",{});var i1t=s(lhe);bBo=r(i1t,"blenderbot-small"),i1t.forEach(t),vBo=r(Ske," \u2014 "),DO=n(Ske,"A",{href:!0});var d1t=s(DO);FBo=r(d1t,"BlenderbotSmallForConditionalGeneration"),d1t.forEach(t),TBo=r(Ske," (BlenderbotSmall model)"),Ske.forEach(t),MBo=i(be),d2=n(be,"LI",{});var Rke=s(d2);ihe=n(Rke,"STRONG",{});var c1t=s(ihe);EBo=r(c1t,"encoder-decoder"),c1t.forEach(t),CBo=r(Rke," \u2014 "),GO=n(Rke,"A",{href:!0});var f1t=s(GO);wBo=r(f1t,"EncoderDecoderModel"),f1t.forEach(t),ABo=r(Rke," (Encoder decoder model)"),Rke.forEach(t),LBo=i(be),c2=n(be,"LI",{});var Pke=s(c2);dhe=n(Pke,"STRONG",{});var m1t=s(dhe);yBo=r(m1t,"fsmt"),m1t.forEach(t),xBo=r(Pke," \u2014 "),OO=n(Pke,"A",{href:!0});var g1t=s(OO);$Bo=r(g1t,"FSMTForConditionalGeneration"),g1t.forEach(t),kBo=r(Pke," (FairSeq Machine-Translation model)"),Pke.forEach(t),SBo=i(be),f2=n(be,"LI",{});var Bke=s(f2);che=n(Bke,"STRONG",{});var h1t=s(che);RBo=r(h1t,"led"),h1t.forEach(t),PBo=r(Bke," \u2014 "),VO=n(Bke,"A",{href:!0});var p1t=s(VO);BBo=r(p1t,"LEDForConditionalGeneration"),p1t.forEach(t),IBo=r(Bke," (LED model)"),Bke.forEach(t),NBo=i(be),m2=n(be,"LI",{});var Ike=s(m2);fhe=n(Ike,"STRONG",{});var _1t=s(fhe);qBo=r(_1t,"longt5"),_1t.forEach(t),jBo=r(Ike," \u2014 "),XO=n(Ike,"A",{href:!0});var u1t=s(XO);DBo=r(u1t,"LongT5ForConditionalGeneration"),u1t.forEach(t),GBo=r(Ike," (LongT5 model)"),Ike.forEach(t),OBo=i(be),g2=n(be,"LI",{});var Nke=s(g2);mhe=n(Nke,"STRONG",{});var b1t=s(mhe);VBo=r(b1t,"m2m_100"),b1t.forEach(t),XBo=r(Nke," \u2014 "),zO=n(Nke,"A",{href:!0});var v1t=s(zO);zBo=r(v1t,"M2M100ForConditionalGeneration"),v1t.forEach(t),QBo=r(Nke," (M2M100 model)"),Nke.forEach(t),WBo=i(be),h2=n(be,"LI",{});var qke=s(h2);ghe=n(qke,"STRONG",{});var F1t=s(ghe);HBo=r(F1t,"marian"),F1t.forEach(t),UBo=r(qke," \u2014 "),QO=n(qke,"A",{href:!0});var T1t=s(QO);JBo=r(T1t,"MarianMTModel"),T1t.forEach(t),YBo=r(qke," (Marian model)"),qke.forEach(t),KBo=i(be),p2=n(be,"LI",{});var jke=s(p2);hhe=n(jke,"STRONG",{});var M1t=s(hhe);ZBo=r(M1t,"mbart"),M1t.forEach(t),eIo=r(jke," \u2014 "),WO=n(jke,"A",{href:!0});var E1t=s(WO);oIo=r(E1t,"MBartForConditionalGeneration"),E1t.forEach(t),rIo=r(jke," (mBART model)"),jke.forEach(t),tIo=i(be),_2=n(be,"LI",{});var Dke=s(_2);phe=n(Dke,"STRONG",{});var C1t=s(phe);aIo=r(C1t,"mt5"),C1t.forEach(t),nIo=r(Dke," \u2014 "),HO=n(Dke,"A",{href:!0});var w1t=s(HO);sIo=r(w1t,"MT5ForConditionalGeneration"),w1t.forEach(t),lIo=r(Dke," (MT5 model)"),Dke.forEach(t),iIo=i(be),u2=n(be,"LI",{});var Gke=s(u2);_he=n(Gke,"STRONG",{});var A1t=s(_he);dIo=r(A1t,"pegasus"),A1t.forEach(t),cIo=r(Gke," \u2014 "),UO=n(Gke,"A",{href:!0});var L1t=s(UO);fIo=r(L1t,"PegasusForConditionalGeneration"),L1t.forEach(t),mIo=r(Gke," (Pegasus model)"),Gke.forEach(t),gIo=i(be),b2=n(be,"LI",{});var Oke=s(b2);uhe=n(Oke,"STRONG",{});var y1t=s(uhe);hIo=r(y1t,"plbart"),y1t.forEach(t),pIo=r(Oke," \u2014 "),JO=n(Oke,"A",{href:!0});var x1t=s(JO);_Io=r(x1t,"PLBartForConditionalGeneration"),x1t.forEach(t),uIo=r(Oke," (PLBart model)"),Oke.forEach(t),bIo=i(be),v2=n(be,"LI",{});var Vke=s(v2);bhe=n(Vke,"STRONG",{});var $1t=s(bhe);vIo=r($1t,"prophetnet"),$1t.forEach(t),FIo=r(Vke," \u2014 "),YO=n(Vke,"A",{href:!0});var k1t=s(YO);TIo=r(k1t,"ProphetNetForConditionalGeneration"),k1t.forEach(t),MIo=r(Vke," (ProphetNet model)"),Vke.forEach(t),EIo=i(be),F2=n(be,"LI",{});var Xke=s(F2);vhe=n(Xke,"STRONG",{});var S1t=s(vhe);CIo=r(S1t,"t5"),S1t.forEach(t),wIo=r(Xke," \u2014 "),KO=n(Xke,"A",{href:!0});var R1t=s(KO);AIo=r(R1t,"T5ForConditionalGeneration"),R1t.forEach(t),LIo=r(Xke," (T5 model)"),Xke.forEach(t),yIo=i(be),T2=n(be,"LI",{});var zke=s(T2);Fhe=n(zke,"STRONG",{});var P1t=s(Fhe);xIo=r(P1t,"xlm-prophetnet"),P1t.forEach(t),$Io=r(zke," \u2014 "),ZO=n(zke,"A",{href:!0});var B1t=s(ZO);kIo=r(B1t,"XLMProphetNetForConditionalGeneration"),B1t.forEach(t),SIo=r(zke," (XLM-ProphetNet model)"),zke.forEach(t),be.forEach(t),RIo=i(ia),M2=n(ia,"P",{});var Qke=s(M2);PIo=r(Qke,"The model is set in evaluation mode by default using "),The=n(Qke,"CODE",{});var I1t=s(The);BIo=r(I1t,"model.eval()"),I1t.forEach(t),IIo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(Qke,"CODE",{});var N1t=s(Mhe);NIo=r(N1t,"model.train()"),N1t.forEach(t),Qke.forEach(t),qIo=i(ia),T(E2.$$.fragment,ia),ia.forEach(t),rl.forEach(t),xOe=i(f),Yi=n(f,"H2",{class:!0});var BXe=s(Yi);C2=n(BXe,"A",{id:!0,class:!0,href:!0});var q1t=s(C2);Ehe=n(q1t,"SPAN",{});var j1t=s(Ehe);T(kL.$$.fragment,j1t),j1t.forEach(t),q1t.forEach(t),jIo=i(BXe),Che=n(BXe,"SPAN",{});var D1t=s(Che);DIo=r(D1t,"AutoModelForSequenceClassification"),D1t.forEach(t),BXe.forEach(t),$Oe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(SL.$$.fragment,tl),GIo=i(tl),Ki=n(tl,"P",{});var Goe=s(Ki);OIo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eV=n(Goe,"A",{href:!0});var G1t=s(eV);VIo=r(G1t,"from_pretrained()"),G1t.forEach(t),XIo=r(Goe," class method or the "),oV=n(Goe,"A",{href:!0});var O1t=s(oV);zIo=r(O1t,"from_config()"),O1t.forEach(t),QIo=r(Goe,` class
method.`),Goe.forEach(t),WIo=i(tl),RL=n(tl,"P",{});var IXe=s(RL);HIo=r(IXe,"This class cannot be instantiated directly using "),whe=n(IXe,"CODE",{});var V1t=s(whe);UIo=r(V1t,"__init__()"),V1t.forEach(t),JIo=r(IXe," (throws an error)."),IXe.forEach(t),YIo=i(tl),ct=n(tl,"DIV",{class:!0});var Qw=s(ct);T(PL.$$.fragment,Qw),KIo=i(Qw),Ahe=n(Qw,"P",{});var X1t=s(Ahe);ZIo=r(X1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X1t.forEach(t),eNo=i(Qw),Zi=n(Qw,"P",{});var Ooe=s(Zi);oNo=r(Ooe,`Note:
Loading a model from its configuration file does `),Lhe=n(Ooe,"STRONG",{});var z1t=s(Lhe);rNo=r(z1t,"not"),z1t.forEach(t),tNo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(Ooe,"A",{href:!0});var Q1t=s(rV);aNo=r(Q1t,"from_pretrained()"),Q1t.forEach(t),nNo=r(Ooe," to load the model weights."),Ooe.forEach(t),sNo=i(Qw),T(w2.$$.fragment,Qw),Qw.forEach(t),lNo=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(BL.$$.fragment,da),iNo=i(da),yhe=n(da,"P",{});var W1t=s(yhe);dNo=r(W1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W1t.forEach(t),cNo=i(da),qa=n(da,"P",{});var Ww=s(qa);fNo=r(Ww,"The model class to instantiate is selected based on the "),xhe=n(Ww,"CODE",{});var H1t=s(xhe);mNo=r(H1t,"model_type"),H1t.forEach(t),gNo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),$he=n(Ww,"CODE",{});var U1t=s($he);hNo=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),pNo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(Ww,"CODE",{});var J1t=s(khe);_No=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),uNo=r(Ww,":"),Ww.forEach(t),bNo=i(da),N=n(da,"UL",{});var q=s(N);A2=n(q,"LI",{});var Wke=s(A2);She=n(Wke,"STRONG",{});var Y1t=s(She);vNo=r(Y1t,"albert"),Y1t.forEach(t),FNo=r(Wke," \u2014 "),tV=n(Wke,"A",{href:!0});var K1t=s(tV);TNo=r(K1t,"AlbertForSequenceClassification"),K1t.forEach(t),MNo=r(Wke," (ALBERT model)"),Wke.forEach(t),ENo=i(q),L2=n(q,"LI",{});var Hke=s(L2);Rhe=n(Hke,"STRONG",{});var Z1t=s(Rhe);CNo=r(Z1t,"bart"),Z1t.forEach(t),wNo=r(Hke," \u2014 "),aV=n(Hke,"A",{href:!0});var e2t=s(aV);ANo=r(e2t,"BartForSequenceClassification"),e2t.forEach(t),LNo=r(Hke," (BART model)"),Hke.forEach(t),yNo=i(q),y2=n(q,"LI",{});var Uke=s(y2);Phe=n(Uke,"STRONG",{});var o2t=s(Phe);xNo=r(o2t,"bert"),o2t.forEach(t),$No=r(Uke," \u2014 "),nV=n(Uke,"A",{href:!0});var r2t=s(nV);kNo=r(r2t,"BertForSequenceClassification"),r2t.forEach(t),SNo=r(Uke," (BERT model)"),Uke.forEach(t),RNo=i(q),x2=n(q,"LI",{});var Jke=s(x2);Bhe=n(Jke,"STRONG",{});var t2t=s(Bhe);PNo=r(t2t,"big_bird"),t2t.forEach(t),BNo=r(Jke," \u2014 "),sV=n(Jke,"A",{href:!0});var a2t=s(sV);INo=r(a2t,"BigBirdForSequenceClassification"),a2t.forEach(t),NNo=r(Jke," (BigBird model)"),Jke.forEach(t),qNo=i(q),$2=n(q,"LI",{});var Yke=s($2);Ihe=n(Yke,"STRONG",{});var n2t=s(Ihe);jNo=r(n2t,"bigbird_pegasus"),n2t.forEach(t),DNo=r(Yke," \u2014 "),lV=n(Yke,"A",{href:!0});var s2t=s(lV);GNo=r(s2t,"BigBirdPegasusForSequenceClassification"),s2t.forEach(t),ONo=r(Yke," (BigBird-Pegasus model)"),Yke.forEach(t),VNo=i(q),k2=n(q,"LI",{});var Kke=s(k2);Nhe=n(Kke,"STRONG",{});var l2t=s(Nhe);XNo=r(l2t,"bloom"),l2t.forEach(t),zNo=r(Kke," \u2014 "),iV=n(Kke,"A",{href:!0});var i2t=s(iV);QNo=r(i2t,"BloomForSequenceClassification"),i2t.forEach(t),WNo=r(Kke," (BLOOM model)"),Kke.forEach(t),HNo=i(q),S2=n(q,"LI",{});var Zke=s(S2);qhe=n(Zke,"STRONG",{});var d2t=s(qhe);UNo=r(d2t,"camembert"),d2t.forEach(t),JNo=r(Zke," \u2014 "),dV=n(Zke,"A",{href:!0});var c2t=s(dV);YNo=r(c2t,"CamembertForSequenceClassification"),c2t.forEach(t),KNo=r(Zke," (CamemBERT model)"),Zke.forEach(t),ZNo=i(q),R2=n(q,"LI",{});var eSe=s(R2);jhe=n(eSe,"STRONG",{});var f2t=s(jhe);eqo=r(f2t,"canine"),f2t.forEach(t),oqo=r(eSe," \u2014 "),cV=n(eSe,"A",{href:!0});var m2t=s(cV);rqo=r(m2t,"CanineForSequenceClassification"),m2t.forEach(t),tqo=r(eSe," (CANINE model)"),eSe.forEach(t),aqo=i(q),P2=n(q,"LI",{});var oSe=s(P2);Dhe=n(oSe,"STRONG",{});var g2t=s(Dhe);nqo=r(g2t,"convbert"),g2t.forEach(t),sqo=r(oSe," \u2014 "),fV=n(oSe,"A",{href:!0});var h2t=s(fV);lqo=r(h2t,"ConvBertForSequenceClassification"),h2t.forEach(t),iqo=r(oSe," (ConvBERT model)"),oSe.forEach(t),dqo=i(q),B2=n(q,"LI",{});var rSe=s(B2);Ghe=n(rSe,"STRONG",{});var p2t=s(Ghe);cqo=r(p2t,"ctrl"),p2t.forEach(t),fqo=r(rSe," \u2014 "),mV=n(rSe,"A",{href:!0});var _2t=s(mV);mqo=r(_2t,"CTRLForSequenceClassification"),_2t.forEach(t),gqo=r(rSe," (CTRL model)"),rSe.forEach(t),hqo=i(q),I2=n(q,"LI",{});var tSe=s(I2);Ohe=n(tSe,"STRONG",{});var u2t=s(Ohe);pqo=r(u2t,"data2vec-text"),u2t.forEach(t),_qo=r(tSe," \u2014 "),gV=n(tSe,"A",{href:!0});var b2t=s(gV);uqo=r(b2t,"Data2VecTextForSequenceClassification"),b2t.forEach(t),bqo=r(tSe," (Data2VecText model)"),tSe.forEach(t),vqo=i(q),N2=n(q,"LI",{});var aSe=s(N2);Vhe=n(aSe,"STRONG",{});var v2t=s(Vhe);Fqo=r(v2t,"deberta"),v2t.forEach(t),Tqo=r(aSe," \u2014 "),hV=n(aSe,"A",{href:!0});var F2t=s(hV);Mqo=r(F2t,"DebertaForSequenceClassification"),F2t.forEach(t),Eqo=r(aSe," (DeBERTa model)"),aSe.forEach(t),Cqo=i(q),q2=n(q,"LI",{});var nSe=s(q2);Xhe=n(nSe,"STRONG",{});var T2t=s(Xhe);wqo=r(T2t,"deberta-v2"),T2t.forEach(t),Aqo=r(nSe," \u2014 "),pV=n(nSe,"A",{href:!0});var M2t=s(pV);Lqo=r(M2t,"DebertaV2ForSequenceClassification"),M2t.forEach(t),yqo=r(nSe," (DeBERTa-v2 model)"),nSe.forEach(t),xqo=i(q),j2=n(q,"LI",{});var sSe=s(j2);zhe=n(sSe,"STRONG",{});var E2t=s(zhe);$qo=r(E2t,"distilbert"),E2t.forEach(t),kqo=r(sSe," \u2014 "),_V=n(sSe,"A",{href:!0});var C2t=s(_V);Sqo=r(C2t,"DistilBertForSequenceClassification"),C2t.forEach(t),Rqo=r(sSe," (DistilBERT model)"),sSe.forEach(t),Pqo=i(q),D2=n(q,"LI",{});var lSe=s(D2);Qhe=n(lSe,"STRONG",{});var w2t=s(Qhe);Bqo=r(w2t,"electra"),w2t.forEach(t),Iqo=r(lSe," \u2014 "),uV=n(lSe,"A",{href:!0});var A2t=s(uV);Nqo=r(A2t,"ElectraForSequenceClassification"),A2t.forEach(t),qqo=r(lSe," (ELECTRA model)"),lSe.forEach(t),jqo=i(q),G2=n(q,"LI",{});var iSe=s(G2);Whe=n(iSe,"STRONG",{});var L2t=s(Whe);Dqo=r(L2t,"flaubert"),L2t.forEach(t),Gqo=r(iSe," \u2014 "),bV=n(iSe,"A",{href:!0});var y2t=s(bV);Oqo=r(y2t,"FlaubertForSequenceClassification"),y2t.forEach(t),Vqo=r(iSe," (FlauBERT model)"),iSe.forEach(t),Xqo=i(q),O2=n(q,"LI",{});var dSe=s(O2);Hhe=n(dSe,"STRONG",{});var x2t=s(Hhe);zqo=r(x2t,"fnet"),x2t.forEach(t),Qqo=r(dSe," \u2014 "),vV=n(dSe,"A",{href:!0});var $2t=s(vV);Wqo=r($2t,"FNetForSequenceClassification"),$2t.forEach(t),Hqo=r(dSe," (FNet model)"),dSe.forEach(t),Uqo=i(q),V2=n(q,"LI",{});var cSe=s(V2);Uhe=n(cSe,"STRONG",{});var k2t=s(Uhe);Jqo=r(k2t,"funnel"),k2t.forEach(t),Yqo=r(cSe," \u2014 "),FV=n(cSe,"A",{href:!0});var S2t=s(FV);Kqo=r(S2t,"FunnelForSequenceClassification"),S2t.forEach(t),Zqo=r(cSe," (Funnel Transformer model)"),cSe.forEach(t),ejo=i(q),X2=n(q,"LI",{});var fSe=s(X2);Jhe=n(fSe,"STRONG",{});var R2t=s(Jhe);ojo=r(R2t,"gpt2"),R2t.forEach(t),rjo=r(fSe," \u2014 "),TV=n(fSe,"A",{href:!0});var P2t=s(TV);tjo=r(P2t,"GPT2ForSequenceClassification"),P2t.forEach(t),ajo=r(fSe," (OpenAI GPT-2 model)"),fSe.forEach(t),njo=i(q),z2=n(q,"LI",{});var mSe=s(z2);Yhe=n(mSe,"STRONG",{});var B2t=s(Yhe);sjo=r(B2t,"gpt_neo"),B2t.forEach(t),ljo=r(mSe," \u2014 "),MV=n(mSe,"A",{href:!0});var I2t=s(MV);ijo=r(I2t,"GPTNeoForSequenceClassification"),I2t.forEach(t),djo=r(mSe," (GPT Neo model)"),mSe.forEach(t),cjo=i(q),Q2=n(q,"LI",{});var gSe=s(Q2);Khe=n(gSe,"STRONG",{});var N2t=s(Khe);fjo=r(N2t,"gptj"),N2t.forEach(t),mjo=r(gSe," \u2014 "),EV=n(gSe,"A",{href:!0});var q2t=s(EV);gjo=r(q2t,"GPTJForSequenceClassification"),q2t.forEach(t),hjo=r(gSe," (GPT-J model)"),gSe.forEach(t),pjo=i(q),W2=n(q,"LI",{});var hSe=s(W2);Zhe=n(hSe,"STRONG",{});var j2t=s(Zhe);_jo=r(j2t,"ibert"),j2t.forEach(t),ujo=r(hSe," \u2014 "),CV=n(hSe,"A",{href:!0});var D2t=s(CV);bjo=r(D2t,"IBertForSequenceClassification"),D2t.forEach(t),vjo=r(hSe," (I-BERT model)"),hSe.forEach(t),Fjo=i(q),H2=n(q,"LI",{});var pSe=s(H2);epe=n(pSe,"STRONG",{});var G2t=s(epe);Tjo=r(G2t,"layoutlm"),G2t.forEach(t),Mjo=r(pSe," \u2014 "),wV=n(pSe,"A",{href:!0});var O2t=s(wV);Ejo=r(O2t,"LayoutLMForSequenceClassification"),O2t.forEach(t),Cjo=r(pSe," (LayoutLM model)"),pSe.forEach(t),wjo=i(q),U2=n(q,"LI",{});var _Se=s(U2);ope=n(_Se,"STRONG",{});var V2t=s(ope);Ajo=r(V2t,"layoutlmv2"),V2t.forEach(t),Ljo=r(_Se," \u2014 "),AV=n(_Se,"A",{href:!0});var X2t=s(AV);yjo=r(X2t,"LayoutLMv2ForSequenceClassification"),X2t.forEach(t),xjo=r(_Se," (LayoutLMv2 model)"),_Se.forEach(t),$jo=i(q),J2=n(q,"LI",{});var uSe=s(J2);rpe=n(uSe,"STRONG",{});var z2t=s(rpe);kjo=r(z2t,"layoutlmv3"),z2t.forEach(t),Sjo=r(uSe," \u2014 "),LV=n(uSe,"A",{href:!0});var Q2t=s(LV);Rjo=r(Q2t,"LayoutLMv3ForSequenceClassification"),Q2t.forEach(t),Pjo=r(uSe," (LayoutLMv3 model)"),uSe.forEach(t),Bjo=i(q),Y2=n(q,"LI",{});var bSe=s(Y2);tpe=n(bSe,"STRONG",{});var W2t=s(tpe);Ijo=r(W2t,"led"),W2t.forEach(t),Njo=r(bSe," \u2014 "),yV=n(bSe,"A",{href:!0});var H2t=s(yV);qjo=r(H2t,"LEDForSequenceClassification"),H2t.forEach(t),jjo=r(bSe," (LED model)"),bSe.forEach(t),Djo=i(q),K2=n(q,"LI",{});var vSe=s(K2);ape=n(vSe,"STRONG",{});var U2t=s(ape);Gjo=r(U2t,"longformer"),U2t.forEach(t),Ojo=r(vSe," \u2014 "),xV=n(vSe,"A",{href:!0});var J2t=s(xV);Vjo=r(J2t,"LongformerForSequenceClassification"),J2t.forEach(t),Xjo=r(vSe," (Longformer model)"),vSe.forEach(t),zjo=i(q),Z2=n(q,"LI",{});var FSe=s(Z2);npe=n(FSe,"STRONG",{});var Y2t=s(npe);Qjo=r(Y2t,"mbart"),Y2t.forEach(t),Wjo=r(FSe," \u2014 "),$V=n(FSe,"A",{href:!0});var K2t=s($V);Hjo=r(K2t,"MBartForSequenceClassification"),K2t.forEach(t),Ujo=r(FSe," (mBART model)"),FSe.forEach(t),Jjo=i(q),eb=n(q,"LI",{});var TSe=s(eb);spe=n(TSe,"STRONG",{});var Z2t=s(spe);Yjo=r(Z2t,"megatron-bert"),Z2t.forEach(t),Kjo=r(TSe," \u2014 "),kV=n(TSe,"A",{href:!0});var ebt=s(kV);Zjo=r(ebt,"MegatronBertForSequenceClassification"),ebt.forEach(t),eDo=r(TSe," (Megatron-BERT model)"),TSe.forEach(t),oDo=i(q),ob=n(q,"LI",{});var MSe=s(ob);lpe=n(MSe,"STRONG",{});var obt=s(lpe);rDo=r(obt,"mobilebert"),obt.forEach(t),tDo=r(MSe," \u2014 "),SV=n(MSe,"A",{href:!0});var rbt=s(SV);aDo=r(rbt,"MobileBertForSequenceClassification"),rbt.forEach(t),nDo=r(MSe," (MobileBERT model)"),MSe.forEach(t),sDo=i(q),rb=n(q,"LI",{});var ESe=s(rb);ipe=n(ESe,"STRONG",{});var tbt=s(ipe);lDo=r(tbt,"mpnet"),tbt.forEach(t),iDo=r(ESe," \u2014 "),RV=n(ESe,"A",{href:!0});var abt=s(RV);dDo=r(abt,"MPNetForSequenceClassification"),abt.forEach(t),cDo=r(ESe," (MPNet model)"),ESe.forEach(t),fDo=i(q),tb=n(q,"LI",{});var CSe=s(tb);dpe=n(CSe,"STRONG",{});var nbt=s(dpe);mDo=r(nbt,"nezha"),nbt.forEach(t),gDo=r(CSe," \u2014 "),PV=n(CSe,"A",{href:!0});var sbt=s(PV);hDo=r(sbt,"NezhaForSequenceClassification"),sbt.forEach(t),pDo=r(CSe," (Nezha model)"),CSe.forEach(t),_Do=i(q),ab=n(q,"LI",{});var wSe=s(ab);cpe=n(wSe,"STRONG",{});var lbt=s(cpe);uDo=r(lbt,"nystromformer"),lbt.forEach(t),bDo=r(wSe," \u2014 "),BV=n(wSe,"A",{href:!0});var ibt=s(BV);vDo=r(ibt,"NystromformerForSequenceClassification"),ibt.forEach(t),FDo=r(wSe," (Nystr\xF6mformer model)"),wSe.forEach(t),TDo=i(q),nb=n(q,"LI",{});var ASe=s(nb);fpe=n(ASe,"STRONG",{});var dbt=s(fpe);MDo=r(dbt,"openai-gpt"),dbt.forEach(t),EDo=r(ASe," \u2014 "),IV=n(ASe,"A",{href:!0});var cbt=s(IV);CDo=r(cbt,"OpenAIGPTForSequenceClassification"),cbt.forEach(t),wDo=r(ASe," (OpenAI GPT model)"),ASe.forEach(t),ADo=i(q),sb=n(q,"LI",{});var LSe=s(sb);mpe=n(LSe,"STRONG",{});var fbt=s(mpe);LDo=r(fbt,"perceiver"),fbt.forEach(t),yDo=r(LSe," \u2014 "),NV=n(LSe,"A",{href:!0});var mbt=s(NV);xDo=r(mbt,"PerceiverForSequenceClassification"),mbt.forEach(t),$Do=r(LSe," (Perceiver model)"),LSe.forEach(t),kDo=i(q),lb=n(q,"LI",{});var ySe=s(lb);gpe=n(ySe,"STRONG",{});var gbt=s(gpe);SDo=r(gbt,"plbart"),gbt.forEach(t),RDo=r(ySe," \u2014 "),qV=n(ySe,"A",{href:!0});var hbt=s(qV);PDo=r(hbt,"PLBartForSequenceClassification"),hbt.forEach(t),BDo=r(ySe," (PLBart model)"),ySe.forEach(t),IDo=i(q),ib=n(q,"LI",{});var xSe=s(ib);hpe=n(xSe,"STRONG",{});var pbt=s(hpe);NDo=r(pbt,"qdqbert"),pbt.forEach(t),qDo=r(xSe," \u2014 "),jV=n(xSe,"A",{href:!0});var _bt=s(jV);jDo=r(_bt,"QDQBertForSequenceClassification"),_bt.forEach(t),DDo=r(xSe," (QDQBert model)"),xSe.forEach(t),GDo=i(q),db=n(q,"LI",{});var $Se=s(db);ppe=n($Se,"STRONG",{});var ubt=s(ppe);ODo=r(ubt,"reformer"),ubt.forEach(t),VDo=r($Se," \u2014 "),DV=n($Se,"A",{href:!0});var bbt=s(DV);XDo=r(bbt,"ReformerForSequenceClassification"),bbt.forEach(t),zDo=r($Se," (Reformer model)"),$Se.forEach(t),QDo=i(q),cb=n(q,"LI",{});var kSe=s(cb);_pe=n(kSe,"STRONG",{});var vbt=s(_pe);WDo=r(vbt,"rembert"),vbt.forEach(t),HDo=r(kSe," \u2014 "),GV=n(kSe,"A",{href:!0});var Fbt=s(GV);UDo=r(Fbt,"RemBertForSequenceClassification"),Fbt.forEach(t),JDo=r(kSe," (RemBERT model)"),kSe.forEach(t),YDo=i(q),fb=n(q,"LI",{});var SSe=s(fb);upe=n(SSe,"STRONG",{});var Tbt=s(upe);KDo=r(Tbt,"roberta"),Tbt.forEach(t),ZDo=r(SSe," \u2014 "),OV=n(SSe,"A",{href:!0});var Mbt=s(OV);eGo=r(Mbt,"RobertaForSequenceClassification"),Mbt.forEach(t),oGo=r(SSe," (RoBERTa model)"),SSe.forEach(t),rGo=i(q),mb=n(q,"LI",{});var RSe=s(mb);bpe=n(RSe,"STRONG",{});var Ebt=s(bpe);tGo=r(Ebt,"roformer"),Ebt.forEach(t),aGo=r(RSe," \u2014 "),VV=n(RSe,"A",{href:!0});var Cbt=s(VV);nGo=r(Cbt,"RoFormerForSequenceClassification"),Cbt.forEach(t),sGo=r(RSe," (RoFormer model)"),RSe.forEach(t),lGo=i(q),gb=n(q,"LI",{});var PSe=s(gb);vpe=n(PSe,"STRONG",{});var wbt=s(vpe);iGo=r(wbt,"squeezebert"),wbt.forEach(t),dGo=r(PSe," \u2014 "),XV=n(PSe,"A",{href:!0});var Abt=s(XV);cGo=r(Abt,"SqueezeBertForSequenceClassification"),Abt.forEach(t),fGo=r(PSe," (SqueezeBERT model)"),PSe.forEach(t),mGo=i(q),hb=n(q,"LI",{});var BSe=s(hb);Fpe=n(BSe,"STRONG",{});var Lbt=s(Fpe);gGo=r(Lbt,"tapas"),Lbt.forEach(t),hGo=r(BSe," \u2014 "),zV=n(BSe,"A",{href:!0});var ybt=s(zV);pGo=r(ybt,"TapasForSequenceClassification"),ybt.forEach(t),_Go=r(BSe," (TAPAS model)"),BSe.forEach(t),uGo=i(q),pb=n(q,"LI",{});var ISe=s(pb);Tpe=n(ISe,"STRONG",{});var xbt=s(Tpe);bGo=r(xbt,"transfo-xl"),xbt.forEach(t),vGo=r(ISe," \u2014 "),QV=n(ISe,"A",{href:!0});var $bt=s(QV);FGo=r($bt,"TransfoXLForSequenceClassification"),$bt.forEach(t),TGo=r(ISe," (Transformer-XL model)"),ISe.forEach(t),MGo=i(q),_b=n(q,"LI",{});var NSe=s(_b);Mpe=n(NSe,"STRONG",{});var kbt=s(Mpe);EGo=r(kbt,"xlm"),kbt.forEach(t),CGo=r(NSe," \u2014 "),WV=n(NSe,"A",{href:!0});var Sbt=s(WV);wGo=r(Sbt,"XLMForSequenceClassification"),Sbt.forEach(t),AGo=r(NSe," (XLM model)"),NSe.forEach(t),LGo=i(q),ub=n(q,"LI",{});var qSe=s(ub);Epe=n(qSe,"STRONG",{});var Rbt=s(Epe);yGo=r(Rbt,"xlm-roberta"),Rbt.forEach(t),xGo=r(qSe," \u2014 "),HV=n(qSe,"A",{href:!0});var Pbt=s(HV);$Go=r(Pbt,"XLMRobertaForSequenceClassification"),Pbt.forEach(t),kGo=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),SGo=i(q),bb=n(q,"LI",{});var jSe=s(bb);Cpe=n(jSe,"STRONG",{});var Bbt=s(Cpe);RGo=r(Bbt,"xlm-roberta-xl"),Bbt.forEach(t),PGo=r(jSe," \u2014 "),UV=n(jSe,"A",{href:!0});var Ibt=s(UV);BGo=r(Ibt,"XLMRobertaXLForSequenceClassification"),Ibt.forEach(t),IGo=r(jSe," (XLM-RoBERTa-XL model)"),jSe.forEach(t),NGo=i(q),vb=n(q,"LI",{});var DSe=s(vb);wpe=n(DSe,"STRONG",{});var Nbt=s(wpe);qGo=r(Nbt,"xlnet"),Nbt.forEach(t),jGo=r(DSe," \u2014 "),JV=n(DSe,"A",{href:!0});var qbt=s(JV);DGo=r(qbt,"XLNetForSequenceClassification"),qbt.forEach(t),GGo=r(DSe," (XLNet model)"),DSe.forEach(t),OGo=i(q),Fb=n(q,"LI",{});var GSe=s(Fb);Ape=n(GSe,"STRONG",{});var jbt=s(Ape);VGo=r(jbt,"yoso"),jbt.forEach(t),XGo=r(GSe," \u2014 "),YV=n(GSe,"A",{href:!0});var Dbt=s(YV);zGo=r(Dbt,"YosoForSequenceClassification"),Dbt.forEach(t),QGo=r(GSe," (YOSO model)"),GSe.forEach(t),q.forEach(t),WGo=i(da),Tb=n(da,"P",{});var OSe=s(Tb);HGo=r(OSe,"The model is set in evaluation mode by default using "),Lpe=n(OSe,"CODE",{});var Gbt=s(Lpe);UGo=r(Gbt,"model.eval()"),Gbt.forEach(t),JGo=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(OSe,"CODE",{});var Obt=s(ype);YGo=r(Obt,"model.train()"),Obt.forEach(t),OSe.forEach(t),KGo=i(da),T(Mb.$$.fragment,da),da.forEach(t),tl.forEach(t),kOe=i(f),ed=n(f,"H2",{class:!0});var NXe=s(ed);Eb=n(NXe,"A",{id:!0,class:!0,href:!0});var Vbt=s(Eb);xpe=n(Vbt,"SPAN",{});var Xbt=s(xpe);T(IL.$$.fragment,Xbt),Xbt.forEach(t),Vbt.forEach(t),ZGo=i(NXe),$pe=n(NXe,"SPAN",{});var zbt=s($pe);eOo=r(zbt,"AutoModelForMultipleChoice"),zbt.forEach(t),NXe.forEach(t),SOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(NL.$$.fragment,al),oOo=i(al),od=n(al,"P",{});var Voe=s(od);rOo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KV=n(Voe,"A",{href:!0});var Qbt=s(KV);tOo=r(Qbt,"from_pretrained()"),Qbt.forEach(t),aOo=r(Voe," class method or the "),ZV=n(Voe,"A",{href:!0});var Wbt=s(ZV);nOo=r(Wbt,"from_config()"),Wbt.forEach(t),sOo=r(Voe,` class
method.`),Voe.forEach(t),lOo=i(al),qL=n(al,"P",{});var qXe=s(qL);iOo=r(qXe,"This class cannot be instantiated directly using "),kpe=n(qXe,"CODE",{});var Hbt=s(kpe);dOo=r(Hbt,"__init__()"),Hbt.forEach(t),cOo=r(qXe," (throws an error)."),qXe.forEach(t),fOo=i(al),ft=n(al,"DIV",{class:!0});var Hw=s(ft);T(jL.$$.fragment,Hw),mOo=i(Hw),Spe=n(Hw,"P",{});var Ubt=s(Spe);gOo=r(Ubt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ubt.forEach(t),hOo=i(Hw),rd=n(Hw,"P",{});var Xoe=s(rd);pOo=r(Xoe,`Note:
Loading a model from its configuration file does `),Rpe=n(Xoe,"STRONG",{});var Jbt=s(Rpe);_Oo=r(Jbt,"not"),Jbt.forEach(t),uOo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(Xoe,"A",{href:!0});var Ybt=s(eX);bOo=r(Ybt,"from_pretrained()"),Ybt.forEach(t),vOo=r(Xoe," to load the model weights."),Xoe.forEach(t),FOo=i(Hw),T(Cb.$$.fragment,Hw),Hw.forEach(t),TOo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(DL.$$.fragment,ca),MOo=i(ca),Ppe=n(ca,"P",{});var Kbt=s(Ppe);EOo=r(Kbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kbt.forEach(t),COo=i(ca),ja=n(ca,"P",{});var Uw=s(ja);wOo=r(Uw,"The model class to instantiate is selected based on the "),Bpe=n(Uw,"CODE",{});var Zbt=s(Bpe);AOo=r(Zbt,"model_type"),Zbt.forEach(t),LOo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(Uw,"CODE",{});var evt=s(Ipe);yOo=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),xOo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(Uw,"CODE",{});var ovt=s(Npe);$Oo=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),kOo=r(Uw,":"),Uw.forEach(t),SOo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);wb=n(ee,"LI",{});var VSe=s(wb);qpe=n(VSe,"STRONG",{});var rvt=s(qpe);ROo=r(rvt,"albert"),rvt.forEach(t),POo=r(VSe," \u2014 "),oX=n(VSe,"A",{href:!0});var tvt=s(oX);BOo=r(tvt,"AlbertForMultipleChoice"),tvt.forEach(t),IOo=r(VSe," (ALBERT model)"),VSe.forEach(t),NOo=i(ee),Ab=n(ee,"LI",{});var XSe=s(Ab);jpe=n(XSe,"STRONG",{});var avt=s(jpe);qOo=r(avt,"bert"),avt.forEach(t),jOo=r(XSe," \u2014 "),rX=n(XSe,"A",{href:!0});var nvt=s(rX);DOo=r(nvt,"BertForMultipleChoice"),nvt.forEach(t),GOo=r(XSe," (BERT model)"),XSe.forEach(t),OOo=i(ee),Lb=n(ee,"LI",{});var zSe=s(Lb);Dpe=n(zSe,"STRONG",{});var svt=s(Dpe);VOo=r(svt,"big_bird"),svt.forEach(t),XOo=r(zSe," \u2014 "),tX=n(zSe,"A",{href:!0});var lvt=s(tX);zOo=r(lvt,"BigBirdForMultipleChoice"),lvt.forEach(t),QOo=r(zSe," (BigBird model)"),zSe.forEach(t),WOo=i(ee),yb=n(ee,"LI",{});var QSe=s(yb);Gpe=n(QSe,"STRONG",{});var ivt=s(Gpe);HOo=r(ivt,"camembert"),ivt.forEach(t),UOo=r(QSe," \u2014 "),aX=n(QSe,"A",{href:!0});var dvt=s(aX);JOo=r(dvt,"CamembertForMultipleChoice"),dvt.forEach(t),YOo=r(QSe," (CamemBERT model)"),QSe.forEach(t),KOo=i(ee),xb=n(ee,"LI",{});var WSe=s(xb);Ope=n(WSe,"STRONG",{});var cvt=s(Ope);ZOo=r(cvt,"canine"),cvt.forEach(t),eVo=r(WSe," \u2014 "),nX=n(WSe,"A",{href:!0});var fvt=s(nX);oVo=r(fvt,"CanineForMultipleChoice"),fvt.forEach(t),rVo=r(WSe," (CANINE model)"),WSe.forEach(t),tVo=i(ee),$b=n(ee,"LI",{});var HSe=s($b);Vpe=n(HSe,"STRONG",{});var mvt=s(Vpe);aVo=r(mvt,"convbert"),mvt.forEach(t),nVo=r(HSe," \u2014 "),sX=n(HSe,"A",{href:!0});var gvt=s(sX);sVo=r(gvt,"ConvBertForMultipleChoice"),gvt.forEach(t),lVo=r(HSe," (ConvBERT model)"),HSe.forEach(t),iVo=i(ee),kb=n(ee,"LI",{});var USe=s(kb);Xpe=n(USe,"STRONG",{});var hvt=s(Xpe);dVo=r(hvt,"data2vec-text"),hvt.forEach(t),cVo=r(USe," \u2014 "),lX=n(USe,"A",{href:!0});var pvt=s(lX);fVo=r(pvt,"Data2VecTextForMultipleChoice"),pvt.forEach(t),mVo=r(USe," (Data2VecText model)"),USe.forEach(t),gVo=i(ee),Sb=n(ee,"LI",{});var JSe=s(Sb);zpe=n(JSe,"STRONG",{});var _vt=s(zpe);hVo=r(_vt,"deberta-v2"),_vt.forEach(t),pVo=r(JSe," \u2014 "),iX=n(JSe,"A",{href:!0});var uvt=s(iX);_Vo=r(uvt,"DebertaV2ForMultipleChoice"),uvt.forEach(t),uVo=r(JSe," (DeBERTa-v2 model)"),JSe.forEach(t),bVo=i(ee),Rb=n(ee,"LI",{});var YSe=s(Rb);Qpe=n(YSe,"STRONG",{});var bvt=s(Qpe);vVo=r(bvt,"distilbert"),bvt.forEach(t),FVo=r(YSe," \u2014 "),dX=n(YSe,"A",{href:!0});var vvt=s(dX);TVo=r(vvt,"DistilBertForMultipleChoice"),vvt.forEach(t),MVo=r(YSe," (DistilBERT model)"),YSe.forEach(t),EVo=i(ee),Pb=n(ee,"LI",{});var KSe=s(Pb);Wpe=n(KSe,"STRONG",{});var Fvt=s(Wpe);CVo=r(Fvt,"electra"),Fvt.forEach(t),wVo=r(KSe," \u2014 "),cX=n(KSe,"A",{href:!0});var Tvt=s(cX);AVo=r(Tvt,"ElectraForMultipleChoice"),Tvt.forEach(t),LVo=r(KSe," (ELECTRA model)"),KSe.forEach(t),yVo=i(ee),Bb=n(ee,"LI",{});var ZSe=s(Bb);Hpe=n(ZSe,"STRONG",{});var Mvt=s(Hpe);xVo=r(Mvt,"flaubert"),Mvt.forEach(t),$Vo=r(ZSe," \u2014 "),fX=n(ZSe,"A",{href:!0});var Evt=s(fX);kVo=r(Evt,"FlaubertForMultipleChoice"),Evt.forEach(t),SVo=r(ZSe," (FlauBERT model)"),ZSe.forEach(t),RVo=i(ee),Ib=n(ee,"LI",{});var eRe=s(Ib);Upe=n(eRe,"STRONG",{});var Cvt=s(Upe);PVo=r(Cvt,"fnet"),Cvt.forEach(t),BVo=r(eRe," \u2014 "),mX=n(eRe,"A",{href:!0});var wvt=s(mX);IVo=r(wvt,"FNetForMultipleChoice"),wvt.forEach(t),NVo=r(eRe," (FNet model)"),eRe.forEach(t),qVo=i(ee),Nb=n(ee,"LI",{});var oRe=s(Nb);Jpe=n(oRe,"STRONG",{});var Avt=s(Jpe);jVo=r(Avt,"funnel"),Avt.forEach(t),DVo=r(oRe," \u2014 "),gX=n(oRe,"A",{href:!0});var Lvt=s(gX);GVo=r(Lvt,"FunnelForMultipleChoice"),Lvt.forEach(t),OVo=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),VVo=i(ee),qb=n(ee,"LI",{});var rRe=s(qb);Ype=n(rRe,"STRONG",{});var yvt=s(Ype);XVo=r(yvt,"ibert"),yvt.forEach(t),zVo=r(rRe," \u2014 "),hX=n(rRe,"A",{href:!0});var xvt=s(hX);QVo=r(xvt,"IBertForMultipleChoice"),xvt.forEach(t),WVo=r(rRe," (I-BERT model)"),rRe.forEach(t),HVo=i(ee),jb=n(ee,"LI",{});var tRe=s(jb);Kpe=n(tRe,"STRONG",{});var $vt=s(Kpe);UVo=r($vt,"longformer"),$vt.forEach(t),JVo=r(tRe," \u2014 "),pX=n(tRe,"A",{href:!0});var kvt=s(pX);YVo=r(kvt,"LongformerForMultipleChoice"),kvt.forEach(t),KVo=r(tRe," (Longformer model)"),tRe.forEach(t),ZVo=i(ee),Db=n(ee,"LI",{});var aRe=s(Db);Zpe=n(aRe,"STRONG",{});var Svt=s(Zpe);eXo=r(Svt,"megatron-bert"),Svt.forEach(t),oXo=r(aRe," \u2014 "),_X=n(aRe,"A",{href:!0});var Rvt=s(_X);rXo=r(Rvt,"MegatronBertForMultipleChoice"),Rvt.forEach(t),tXo=r(aRe," (Megatron-BERT model)"),aRe.forEach(t),aXo=i(ee),Gb=n(ee,"LI",{});var nRe=s(Gb);e_e=n(nRe,"STRONG",{});var Pvt=s(e_e);nXo=r(Pvt,"mobilebert"),Pvt.forEach(t),sXo=r(nRe," \u2014 "),uX=n(nRe,"A",{href:!0});var Bvt=s(uX);lXo=r(Bvt,"MobileBertForMultipleChoice"),Bvt.forEach(t),iXo=r(nRe," (MobileBERT model)"),nRe.forEach(t),dXo=i(ee),Ob=n(ee,"LI",{});var sRe=s(Ob);o_e=n(sRe,"STRONG",{});var Ivt=s(o_e);cXo=r(Ivt,"mpnet"),Ivt.forEach(t),fXo=r(sRe," \u2014 "),bX=n(sRe,"A",{href:!0});var Nvt=s(bX);mXo=r(Nvt,"MPNetForMultipleChoice"),Nvt.forEach(t),gXo=r(sRe," (MPNet model)"),sRe.forEach(t),hXo=i(ee),Vb=n(ee,"LI",{});var lRe=s(Vb);r_e=n(lRe,"STRONG",{});var qvt=s(r_e);pXo=r(qvt,"nezha"),qvt.forEach(t),_Xo=r(lRe," \u2014 "),vX=n(lRe,"A",{href:!0});var jvt=s(vX);uXo=r(jvt,"NezhaForMultipleChoice"),jvt.forEach(t),bXo=r(lRe," (Nezha model)"),lRe.forEach(t),vXo=i(ee),Xb=n(ee,"LI",{});var iRe=s(Xb);t_e=n(iRe,"STRONG",{});var Dvt=s(t_e);FXo=r(Dvt,"nystromformer"),Dvt.forEach(t),TXo=r(iRe," \u2014 "),FX=n(iRe,"A",{href:!0});var Gvt=s(FX);MXo=r(Gvt,"NystromformerForMultipleChoice"),Gvt.forEach(t),EXo=r(iRe," (Nystr\xF6mformer model)"),iRe.forEach(t),CXo=i(ee),zb=n(ee,"LI",{});var dRe=s(zb);a_e=n(dRe,"STRONG",{});var Ovt=s(a_e);wXo=r(Ovt,"qdqbert"),Ovt.forEach(t),AXo=r(dRe," \u2014 "),TX=n(dRe,"A",{href:!0});var Vvt=s(TX);LXo=r(Vvt,"QDQBertForMultipleChoice"),Vvt.forEach(t),yXo=r(dRe," (QDQBert model)"),dRe.forEach(t),xXo=i(ee),Qb=n(ee,"LI",{});var cRe=s(Qb);n_e=n(cRe,"STRONG",{});var Xvt=s(n_e);$Xo=r(Xvt,"rembert"),Xvt.forEach(t),kXo=r(cRe," \u2014 "),MX=n(cRe,"A",{href:!0});var zvt=s(MX);SXo=r(zvt,"RemBertForMultipleChoice"),zvt.forEach(t),RXo=r(cRe," (RemBERT model)"),cRe.forEach(t),PXo=i(ee),Wb=n(ee,"LI",{});var fRe=s(Wb);s_e=n(fRe,"STRONG",{});var Qvt=s(s_e);BXo=r(Qvt,"roberta"),Qvt.forEach(t),IXo=r(fRe," \u2014 "),EX=n(fRe,"A",{href:!0});var Wvt=s(EX);NXo=r(Wvt,"RobertaForMultipleChoice"),Wvt.forEach(t),qXo=r(fRe," (RoBERTa model)"),fRe.forEach(t),jXo=i(ee),Hb=n(ee,"LI",{});var mRe=s(Hb);l_e=n(mRe,"STRONG",{});var Hvt=s(l_e);DXo=r(Hvt,"roformer"),Hvt.forEach(t),GXo=r(mRe," \u2014 "),CX=n(mRe,"A",{href:!0});var Uvt=s(CX);OXo=r(Uvt,"RoFormerForMultipleChoice"),Uvt.forEach(t),VXo=r(mRe," (RoFormer model)"),mRe.forEach(t),XXo=i(ee),Ub=n(ee,"LI",{});var gRe=s(Ub);i_e=n(gRe,"STRONG",{});var Jvt=s(i_e);zXo=r(Jvt,"squeezebert"),Jvt.forEach(t),QXo=r(gRe," \u2014 "),wX=n(gRe,"A",{href:!0});var Yvt=s(wX);WXo=r(Yvt,"SqueezeBertForMultipleChoice"),Yvt.forEach(t),HXo=r(gRe," (SqueezeBERT model)"),gRe.forEach(t),UXo=i(ee),Jb=n(ee,"LI",{});var hRe=s(Jb);d_e=n(hRe,"STRONG",{});var Kvt=s(d_e);JXo=r(Kvt,"xlm"),Kvt.forEach(t),YXo=r(hRe," \u2014 "),AX=n(hRe,"A",{href:!0});var Zvt=s(AX);KXo=r(Zvt,"XLMForMultipleChoice"),Zvt.forEach(t),ZXo=r(hRe," (XLM model)"),hRe.forEach(t),ezo=i(ee),Yb=n(ee,"LI",{});var pRe=s(Yb);c_e=n(pRe,"STRONG",{});var eFt=s(c_e);ozo=r(eFt,"xlm-roberta"),eFt.forEach(t),rzo=r(pRe," \u2014 "),LX=n(pRe,"A",{href:!0});var oFt=s(LX);tzo=r(oFt,"XLMRobertaForMultipleChoice"),oFt.forEach(t),azo=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),nzo=i(ee),Kb=n(ee,"LI",{});var _Re=s(Kb);f_e=n(_Re,"STRONG",{});var rFt=s(f_e);szo=r(rFt,"xlm-roberta-xl"),rFt.forEach(t),lzo=r(_Re," \u2014 "),yX=n(_Re,"A",{href:!0});var tFt=s(yX);izo=r(tFt,"XLMRobertaXLForMultipleChoice"),tFt.forEach(t),dzo=r(_Re," (XLM-RoBERTa-XL model)"),_Re.forEach(t),czo=i(ee),Zb=n(ee,"LI",{});var uRe=s(Zb);m_e=n(uRe,"STRONG",{});var aFt=s(m_e);fzo=r(aFt,"xlnet"),aFt.forEach(t),mzo=r(uRe," \u2014 "),xX=n(uRe,"A",{href:!0});var nFt=s(xX);gzo=r(nFt,"XLNetForMultipleChoice"),nFt.forEach(t),hzo=r(uRe," (XLNet model)"),uRe.forEach(t),pzo=i(ee),ev=n(ee,"LI",{});var bRe=s(ev);g_e=n(bRe,"STRONG",{});var sFt=s(g_e);_zo=r(sFt,"yoso"),sFt.forEach(t),uzo=r(bRe," \u2014 "),$X=n(bRe,"A",{href:!0});var lFt=s($X);bzo=r(lFt,"YosoForMultipleChoice"),lFt.forEach(t),vzo=r(bRe," (YOSO model)"),bRe.forEach(t),ee.forEach(t),Fzo=i(ca),ov=n(ca,"P",{});var vRe=s(ov);Tzo=r(vRe,"The model is set in evaluation mode by default using "),h_e=n(vRe,"CODE",{});var iFt=s(h_e);Mzo=r(iFt,"model.eval()"),iFt.forEach(t),Ezo=r(vRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(vRe,"CODE",{});var dFt=s(p_e);Czo=r(dFt,"model.train()"),dFt.forEach(t),vRe.forEach(t),wzo=i(ca),T(rv.$$.fragment,ca),ca.forEach(t),al.forEach(t),ROe=i(f),td=n(f,"H2",{class:!0});var jXe=s(td);tv=n(jXe,"A",{id:!0,class:!0,href:!0});var cFt=s(tv);__e=n(cFt,"SPAN",{});var fFt=s(__e);T(GL.$$.fragment,fFt),fFt.forEach(t),cFt.forEach(t),Azo=i(jXe),u_e=n(jXe,"SPAN",{});var mFt=s(u_e);Lzo=r(mFt,"AutoModelForNextSentencePrediction"),mFt.forEach(t),jXe.forEach(t),POe=i(f),Io=n(f,"DIV",{class:!0});var nl=s(Io);T(OL.$$.fragment,nl),yzo=i(nl),ad=n(nl,"P",{});var zoe=s(ad);xzo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kX=n(zoe,"A",{href:!0});var gFt=s(kX);$zo=r(gFt,"from_pretrained()"),gFt.forEach(t),kzo=r(zoe," class method or the "),SX=n(zoe,"A",{href:!0});var hFt=s(SX);Szo=r(hFt,"from_config()"),hFt.forEach(t),Rzo=r(zoe,` class
method.`),zoe.forEach(t),Pzo=i(nl),VL=n(nl,"P",{});var DXe=s(VL);Bzo=r(DXe,"This class cannot be instantiated directly using "),b_e=n(DXe,"CODE",{});var pFt=s(b_e);Izo=r(pFt,"__init__()"),pFt.forEach(t),Nzo=r(DXe," (throws an error)."),DXe.forEach(t),qzo=i(nl),mt=n(nl,"DIV",{class:!0});var Jw=s(mt);T(XL.$$.fragment,Jw),jzo=i(Jw),v_e=n(Jw,"P",{});var _Ft=s(v_e);Dzo=r(_Ft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Ft.forEach(t),Gzo=i(Jw),nd=n(Jw,"P",{});var Qoe=s(nd);Ozo=r(Qoe,`Note:
Loading a model from its configuration file does `),F_e=n(Qoe,"STRONG",{});var uFt=s(F_e);Vzo=r(uFt,"not"),uFt.forEach(t),Xzo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(Qoe,"A",{href:!0});var bFt=s(RX);zzo=r(bFt,"from_pretrained()"),bFt.forEach(t),Qzo=r(Qoe," to load the model weights."),Qoe.forEach(t),Wzo=i(Jw),T(av.$$.fragment,Jw),Jw.forEach(t),Hzo=i(nl),to=n(nl,"DIV",{class:!0});var fa=s(to);T(zL.$$.fragment,fa),Uzo=i(fa),T_e=n(fa,"P",{});var vFt=s(T_e);Jzo=r(vFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vFt.forEach(t),Yzo=i(fa),Da=n(fa,"P",{});var Yw=s(Da);Kzo=r(Yw,"The model class to instantiate is selected based on the "),M_e=n(Yw,"CODE",{});var FFt=s(M_e);Zzo=r(FFt,"model_type"),FFt.forEach(t),eQo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),E_e=n(Yw,"CODE",{});var TFt=s(E_e);oQo=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),rQo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(Yw,"CODE",{});var MFt=s(C_e);tQo=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),aQo=r(Yw,":"),Yw.forEach(t),nQo=i(fa),No=n(fa,"UL",{});var ma=s(No);nv=n(ma,"LI",{});var FRe=s(nv);w_e=n(FRe,"STRONG",{});var EFt=s(w_e);sQo=r(EFt,"bert"),EFt.forEach(t),lQo=r(FRe," \u2014 "),PX=n(FRe,"A",{href:!0});var CFt=s(PX);iQo=r(CFt,"BertForNextSentencePrediction"),CFt.forEach(t),dQo=r(FRe," (BERT model)"),FRe.forEach(t),cQo=i(ma),sv=n(ma,"LI",{});var TRe=s(sv);A_e=n(TRe,"STRONG",{});var wFt=s(A_e);fQo=r(wFt,"fnet"),wFt.forEach(t),mQo=r(TRe," \u2014 "),BX=n(TRe,"A",{href:!0});var AFt=s(BX);gQo=r(AFt,"FNetForNextSentencePrediction"),AFt.forEach(t),hQo=r(TRe," (FNet model)"),TRe.forEach(t),pQo=i(ma),lv=n(ma,"LI",{});var MRe=s(lv);L_e=n(MRe,"STRONG",{});var LFt=s(L_e);_Qo=r(LFt,"megatron-bert"),LFt.forEach(t),uQo=r(MRe," \u2014 "),IX=n(MRe,"A",{href:!0});var yFt=s(IX);bQo=r(yFt,"MegatronBertForNextSentencePrediction"),yFt.forEach(t),vQo=r(MRe," (Megatron-BERT model)"),MRe.forEach(t),FQo=i(ma),iv=n(ma,"LI",{});var ERe=s(iv);y_e=n(ERe,"STRONG",{});var xFt=s(y_e);TQo=r(xFt,"mobilebert"),xFt.forEach(t),MQo=r(ERe," \u2014 "),NX=n(ERe,"A",{href:!0});var $Ft=s(NX);EQo=r($Ft,"MobileBertForNextSentencePrediction"),$Ft.forEach(t),CQo=r(ERe," (MobileBERT model)"),ERe.forEach(t),wQo=i(ma),dv=n(ma,"LI",{});var CRe=s(dv);x_e=n(CRe,"STRONG",{});var kFt=s(x_e);AQo=r(kFt,"nezha"),kFt.forEach(t),LQo=r(CRe," \u2014 "),qX=n(CRe,"A",{href:!0});var SFt=s(qX);yQo=r(SFt,"NezhaForNextSentencePrediction"),SFt.forEach(t),xQo=r(CRe," (Nezha model)"),CRe.forEach(t),$Qo=i(ma),cv=n(ma,"LI",{});var wRe=s(cv);$_e=n(wRe,"STRONG",{});var RFt=s($_e);kQo=r(RFt,"qdqbert"),RFt.forEach(t),SQo=r(wRe," \u2014 "),jX=n(wRe,"A",{href:!0});var PFt=s(jX);RQo=r(PFt,"QDQBertForNextSentencePrediction"),PFt.forEach(t),PQo=r(wRe," (QDQBert model)"),wRe.forEach(t),ma.forEach(t),BQo=i(fa),fv=n(fa,"P",{});var ARe=s(fv);IQo=r(ARe,"The model is set in evaluation mode by default using "),k_e=n(ARe,"CODE",{});var BFt=s(k_e);NQo=r(BFt,"model.eval()"),BFt.forEach(t),qQo=r(ARe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(ARe,"CODE",{});var IFt=s(S_e);jQo=r(IFt,"model.train()"),IFt.forEach(t),ARe.forEach(t),DQo=i(fa),T(mv.$$.fragment,fa),fa.forEach(t),nl.forEach(t),BOe=i(f),sd=n(f,"H2",{class:!0});var GXe=s(sd);gv=n(GXe,"A",{id:!0,class:!0,href:!0});var NFt=s(gv);R_e=n(NFt,"SPAN",{});var qFt=s(R_e);T(QL.$$.fragment,qFt),qFt.forEach(t),NFt.forEach(t),GQo=i(GXe),P_e=n(GXe,"SPAN",{});var jFt=s(P_e);OQo=r(jFt,"AutoModelForTokenClassification"),jFt.forEach(t),GXe.forEach(t),IOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(WL.$$.fragment,sl),VQo=i(sl),ld=n(sl,"P",{});var Woe=s(ld);XQo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DX=n(Woe,"A",{href:!0});var DFt=s(DX);zQo=r(DFt,"from_pretrained()"),DFt.forEach(t),QQo=r(Woe," class method or the "),GX=n(Woe,"A",{href:!0});var GFt=s(GX);WQo=r(GFt,"from_config()"),GFt.forEach(t),HQo=r(Woe,` class
method.`),Woe.forEach(t),UQo=i(sl),HL=n(sl,"P",{});var OXe=s(HL);JQo=r(OXe,"This class cannot be instantiated directly using "),B_e=n(OXe,"CODE",{});var OFt=s(B_e);YQo=r(OFt,"__init__()"),OFt.forEach(t),KQo=r(OXe," (throws an error)."),OXe.forEach(t),ZQo=i(sl),gt=n(sl,"DIV",{class:!0});var Kw=s(gt);T(UL.$$.fragment,Kw),eWo=i(Kw),I_e=n(Kw,"P",{});var VFt=s(I_e);oWo=r(VFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VFt.forEach(t),rWo=i(Kw),id=n(Kw,"P",{});var Hoe=s(id);tWo=r(Hoe,`Note:
Loading a model from its configuration file does `),N_e=n(Hoe,"STRONG",{});var XFt=s(N_e);aWo=r(XFt,"not"),XFt.forEach(t),nWo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(Hoe,"A",{href:!0});var zFt=s(OX);sWo=r(zFt,"from_pretrained()"),zFt.forEach(t),lWo=r(Hoe," to load the model weights."),Hoe.forEach(t),iWo=i(Kw),T(hv.$$.fragment,Kw),Kw.forEach(t),dWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(JL.$$.fragment,ga),cWo=i(ga),q_e=n(ga,"P",{});var QFt=s(q_e);fWo=r(QFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QFt.forEach(t),mWo=i(ga),Ga=n(ga,"P",{});var Zw=s(Ga);gWo=r(Zw,"The model class to instantiate is selected based on the "),j_e=n(Zw,"CODE",{});var WFt=s(j_e);hWo=r(WFt,"model_type"),WFt.forEach(t),pWo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),D_e=n(Zw,"CODE",{});var HFt=s(D_e);_Wo=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),uWo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(Zw,"CODE",{});var UFt=s(G_e);bWo=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),vWo=r(Zw,":"),Zw.forEach(t),FWo=i(ga),H=n(ga,"UL",{});var J=s(H);pv=n(J,"LI",{});var LRe=s(pv);O_e=n(LRe,"STRONG",{});var JFt=s(O_e);TWo=r(JFt,"albert"),JFt.forEach(t),MWo=r(LRe," \u2014 "),VX=n(LRe,"A",{href:!0});var YFt=s(VX);EWo=r(YFt,"AlbertForTokenClassification"),YFt.forEach(t),CWo=r(LRe," (ALBERT model)"),LRe.forEach(t),wWo=i(J),_v=n(J,"LI",{});var yRe=s(_v);V_e=n(yRe,"STRONG",{});var KFt=s(V_e);AWo=r(KFt,"bert"),KFt.forEach(t),LWo=r(yRe," \u2014 "),XX=n(yRe,"A",{href:!0});var ZFt=s(XX);yWo=r(ZFt,"BertForTokenClassification"),ZFt.forEach(t),xWo=r(yRe," (BERT model)"),yRe.forEach(t),$Wo=i(J),uv=n(J,"LI",{});var xRe=s(uv);X_e=n(xRe,"STRONG",{});var eTt=s(X_e);kWo=r(eTt,"big_bird"),eTt.forEach(t),SWo=r(xRe," \u2014 "),zX=n(xRe,"A",{href:!0});var oTt=s(zX);RWo=r(oTt,"BigBirdForTokenClassification"),oTt.forEach(t),PWo=r(xRe," (BigBird model)"),xRe.forEach(t),BWo=i(J),bv=n(J,"LI",{});var $Re=s(bv);z_e=n($Re,"STRONG",{});var rTt=s(z_e);IWo=r(rTt,"bloom"),rTt.forEach(t),NWo=r($Re," \u2014 "),QX=n($Re,"A",{href:!0});var tTt=s(QX);qWo=r(tTt,"BloomForTokenClassification"),tTt.forEach(t),jWo=r($Re," (BLOOM model)"),$Re.forEach(t),DWo=i(J),vv=n(J,"LI",{});var kRe=s(vv);Q_e=n(kRe,"STRONG",{});var aTt=s(Q_e);GWo=r(aTt,"camembert"),aTt.forEach(t),OWo=r(kRe," \u2014 "),WX=n(kRe,"A",{href:!0});var nTt=s(WX);VWo=r(nTt,"CamembertForTokenClassification"),nTt.forEach(t),XWo=r(kRe," (CamemBERT model)"),kRe.forEach(t),zWo=i(J),Fv=n(J,"LI",{});var SRe=s(Fv);W_e=n(SRe,"STRONG",{});var sTt=s(W_e);QWo=r(sTt,"canine"),sTt.forEach(t),WWo=r(SRe," \u2014 "),HX=n(SRe,"A",{href:!0});var lTt=s(HX);HWo=r(lTt,"CanineForTokenClassification"),lTt.forEach(t),UWo=r(SRe," (CANINE model)"),SRe.forEach(t),JWo=i(J),Tv=n(J,"LI",{});var RRe=s(Tv);H_e=n(RRe,"STRONG",{});var iTt=s(H_e);YWo=r(iTt,"convbert"),iTt.forEach(t),KWo=r(RRe," \u2014 "),UX=n(RRe,"A",{href:!0});var dTt=s(UX);ZWo=r(dTt,"ConvBertForTokenClassification"),dTt.forEach(t),eHo=r(RRe," (ConvBERT model)"),RRe.forEach(t),oHo=i(J),Mv=n(J,"LI",{});var PRe=s(Mv);U_e=n(PRe,"STRONG",{});var cTt=s(U_e);rHo=r(cTt,"data2vec-text"),cTt.forEach(t),tHo=r(PRe," \u2014 "),JX=n(PRe,"A",{href:!0});var fTt=s(JX);aHo=r(fTt,"Data2VecTextForTokenClassification"),fTt.forEach(t),nHo=r(PRe," (Data2VecText model)"),PRe.forEach(t),sHo=i(J),Ev=n(J,"LI",{});var BRe=s(Ev);J_e=n(BRe,"STRONG",{});var mTt=s(J_e);lHo=r(mTt,"deberta"),mTt.forEach(t),iHo=r(BRe," \u2014 "),YX=n(BRe,"A",{href:!0});var gTt=s(YX);dHo=r(gTt,"DebertaForTokenClassification"),gTt.forEach(t),cHo=r(BRe," (DeBERTa model)"),BRe.forEach(t),fHo=i(J),Cv=n(J,"LI",{});var IRe=s(Cv);Y_e=n(IRe,"STRONG",{});var hTt=s(Y_e);mHo=r(hTt,"deberta-v2"),hTt.forEach(t),gHo=r(IRe," \u2014 "),KX=n(IRe,"A",{href:!0});var pTt=s(KX);hHo=r(pTt,"DebertaV2ForTokenClassification"),pTt.forEach(t),pHo=r(IRe," (DeBERTa-v2 model)"),IRe.forEach(t),_Ho=i(J),wv=n(J,"LI",{});var NRe=s(wv);K_e=n(NRe,"STRONG",{});var _Tt=s(K_e);uHo=r(_Tt,"distilbert"),_Tt.forEach(t),bHo=r(NRe," \u2014 "),ZX=n(NRe,"A",{href:!0});var uTt=s(ZX);vHo=r(uTt,"DistilBertForTokenClassification"),uTt.forEach(t),FHo=r(NRe," (DistilBERT model)"),NRe.forEach(t),THo=i(J),Av=n(J,"LI",{});var qRe=s(Av);Z_e=n(qRe,"STRONG",{});var bTt=s(Z_e);MHo=r(bTt,"electra"),bTt.forEach(t),EHo=r(qRe," \u2014 "),ez=n(qRe,"A",{href:!0});var vTt=s(ez);CHo=r(vTt,"ElectraForTokenClassification"),vTt.forEach(t),wHo=r(qRe," (ELECTRA model)"),qRe.forEach(t),AHo=i(J),Lv=n(J,"LI",{});var jRe=s(Lv);eue=n(jRe,"STRONG",{});var FTt=s(eue);LHo=r(FTt,"flaubert"),FTt.forEach(t),yHo=r(jRe," \u2014 "),oz=n(jRe,"A",{href:!0});var TTt=s(oz);xHo=r(TTt,"FlaubertForTokenClassification"),TTt.forEach(t),$Ho=r(jRe," (FlauBERT model)"),jRe.forEach(t),kHo=i(J),yv=n(J,"LI",{});var DRe=s(yv);oue=n(DRe,"STRONG",{});var MTt=s(oue);SHo=r(MTt,"fnet"),MTt.forEach(t),RHo=r(DRe," \u2014 "),rz=n(DRe,"A",{href:!0});var ETt=s(rz);PHo=r(ETt,"FNetForTokenClassification"),ETt.forEach(t),BHo=r(DRe," (FNet model)"),DRe.forEach(t),IHo=i(J),xv=n(J,"LI",{});var GRe=s(xv);rue=n(GRe,"STRONG",{});var CTt=s(rue);NHo=r(CTt,"funnel"),CTt.forEach(t),qHo=r(GRe," \u2014 "),tz=n(GRe,"A",{href:!0});var wTt=s(tz);jHo=r(wTt,"FunnelForTokenClassification"),wTt.forEach(t),DHo=r(GRe," (Funnel Transformer model)"),GRe.forEach(t),GHo=i(J),$v=n(J,"LI",{});var ORe=s($v);tue=n(ORe,"STRONG",{});var ATt=s(tue);OHo=r(ATt,"gpt2"),ATt.forEach(t),VHo=r(ORe," \u2014 "),az=n(ORe,"A",{href:!0});var LTt=s(az);XHo=r(LTt,"GPT2ForTokenClassification"),LTt.forEach(t),zHo=r(ORe," (OpenAI GPT-2 model)"),ORe.forEach(t),QHo=i(J),kv=n(J,"LI",{});var VRe=s(kv);aue=n(VRe,"STRONG",{});var yTt=s(aue);WHo=r(yTt,"ibert"),yTt.forEach(t),HHo=r(VRe," \u2014 "),nz=n(VRe,"A",{href:!0});var xTt=s(nz);UHo=r(xTt,"IBertForTokenClassification"),xTt.forEach(t),JHo=r(VRe," (I-BERT model)"),VRe.forEach(t),YHo=i(J),Sv=n(J,"LI",{});var XRe=s(Sv);nue=n(XRe,"STRONG",{});var $Tt=s(nue);KHo=r($Tt,"layoutlm"),$Tt.forEach(t),ZHo=r(XRe," \u2014 "),sz=n(XRe,"A",{href:!0});var kTt=s(sz);eUo=r(kTt,"LayoutLMForTokenClassification"),kTt.forEach(t),oUo=r(XRe," (LayoutLM model)"),XRe.forEach(t),rUo=i(J),Rv=n(J,"LI",{});var zRe=s(Rv);sue=n(zRe,"STRONG",{});var STt=s(sue);tUo=r(STt,"layoutlmv2"),STt.forEach(t),aUo=r(zRe," \u2014 "),lz=n(zRe,"A",{href:!0});var RTt=s(lz);nUo=r(RTt,"LayoutLMv2ForTokenClassification"),RTt.forEach(t),sUo=r(zRe," (LayoutLMv2 model)"),zRe.forEach(t),lUo=i(J),Pv=n(J,"LI",{});var QRe=s(Pv);lue=n(QRe,"STRONG",{});var PTt=s(lue);iUo=r(PTt,"layoutlmv3"),PTt.forEach(t),dUo=r(QRe," \u2014 "),iz=n(QRe,"A",{href:!0});var BTt=s(iz);cUo=r(BTt,"LayoutLMv3ForTokenClassification"),BTt.forEach(t),fUo=r(QRe," (LayoutLMv3 model)"),QRe.forEach(t),mUo=i(J),Bv=n(J,"LI",{});var WRe=s(Bv);iue=n(WRe,"STRONG",{});var ITt=s(iue);gUo=r(ITt,"longformer"),ITt.forEach(t),hUo=r(WRe," \u2014 "),dz=n(WRe,"A",{href:!0});var NTt=s(dz);pUo=r(NTt,"LongformerForTokenClassification"),NTt.forEach(t),_Uo=r(WRe," (Longformer model)"),WRe.forEach(t),uUo=i(J),Iv=n(J,"LI",{});var HRe=s(Iv);due=n(HRe,"STRONG",{});var qTt=s(due);bUo=r(qTt,"megatron-bert"),qTt.forEach(t),vUo=r(HRe," \u2014 "),cz=n(HRe,"A",{href:!0});var jTt=s(cz);FUo=r(jTt,"MegatronBertForTokenClassification"),jTt.forEach(t),TUo=r(HRe," (Megatron-BERT model)"),HRe.forEach(t),MUo=i(J),Nv=n(J,"LI",{});var URe=s(Nv);cue=n(URe,"STRONG",{});var DTt=s(cue);EUo=r(DTt,"mobilebert"),DTt.forEach(t),CUo=r(URe," \u2014 "),fz=n(URe,"A",{href:!0});var GTt=s(fz);wUo=r(GTt,"MobileBertForTokenClassification"),GTt.forEach(t),AUo=r(URe," (MobileBERT model)"),URe.forEach(t),LUo=i(J),qv=n(J,"LI",{});var JRe=s(qv);fue=n(JRe,"STRONG",{});var OTt=s(fue);yUo=r(OTt,"mpnet"),OTt.forEach(t),xUo=r(JRe," \u2014 "),mz=n(JRe,"A",{href:!0});var VTt=s(mz);$Uo=r(VTt,"MPNetForTokenClassification"),VTt.forEach(t),kUo=r(JRe," (MPNet model)"),JRe.forEach(t),SUo=i(J),jv=n(J,"LI",{});var YRe=s(jv);mue=n(YRe,"STRONG",{});var XTt=s(mue);RUo=r(XTt,"nezha"),XTt.forEach(t),PUo=r(YRe," \u2014 "),gz=n(YRe,"A",{href:!0});var zTt=s(gz);BUo=r(zTt,"NezhaForTokenClassification"),zTt.forEach(t),IUo=r(YRe," (Nezha model)"),YRe.forEach(t),NUo=i(J),Dv=n(J,"LI",{});var KRe=s(Dv);gue=n(KRe,"STRONG",{});var QTt=s(gue);qUo=r(QTt,"nystromformer"),QTt.forEach(t),jUo=r(KRe," \u2014 "),hz=n(KRe,"A",{href:!0});var WTt=s(hz);DUo=r(WTt,"NystromformerForTokenClassification"),WTt.forEach(t),GUo=r(KRe," (Nystr\xF6mformer model)"),KRe.forEach(t),OUo=i(J),Gv=n(J,"LI",{});var ZRe=s(Gv);hue=n(ZRe,"STRONG",{});var HTt=s(hue);VUo=r(HTt,"qdqbert"),HTt.forEach(t),XUo=r(ZRe," \u2014 "),pz=n(ZRe,"A",{href:!0});var UTt=s(pz);zUo=r(UTt,"QDQBertForTokenClassification"),UTt.forEach(t),QUo=r(ZRe," (QDQBert model)"),ZRe.forEach(t),WUo=i(J),Ov=n(J,"LI",{});var ePe=s(Ov);pue=n(ePe,"STRONG",{});var JTt=s(pue);HUo=r(JTt,"rembert"),JTt.forEach(t),UUo=r(ePe," \u2014 "),_z=n(ePe,"A",{href:!0});var YTt=s(_z);JUo=r(YTt,"RemBertForTokenClassification"),YTt.forEach(t),YUo=r(ePe," (RemBERT model)"),ePe.forEach(t),KUo=i(J),Vv=n(J,"LI",{});var oPe=s(Vv);_ue=n(oPe,"STRONG",{});var KTt=s(_ue);ZUo=r(KTt,"roberta"),KTt.forEach(t),eJo=r(oPe," \u2014 "),uz=n(oPe,"A",{href:!0});var ZTt=s(uz);oJo=r(ZTt,"RobertaForTokenClassification"),ZTt.forEach(t),rJo=r(oPe," (RoBERTa model)"),oPe.forEach(t),tJo=i(J),Xv=n(J,"LI",{});var rPe=s(Xv);uue=n(rPe,"STRONG",{});var e9t=s(uue);aJo=r(e9t,"roformer"),e9t.forEach(t),nJo=r(rPe," \u2014 "),bz=n(rPe,"A",{href:!0});var o9t=s(bz);sJo=r(o9t,"RoFormerForTokenClassification"),o9t.forEach(t),lJo=r(rPe," (RoFormer model)"),rPe.forEach(t),iJo=i(J),zv=n(J,"LI",{});var tPe=s(zv);bue=n(tPe,"STRONG",{});var r9t=s(bue);dJo=r(r9t,"squeezebert"),r9t.forEach(t),cJo=r(tPe," \u2014 "),vz=n(tPe,"A",{href:!0});var t9t=s(vz);fJo=r(t9t,"SqueezeBertForTokenClassification"),t9t.forEach(t),mJo=r(tPe," (SqueezeBERT model)"),tPe.forEach(t),gJo=i(J),Qv=n(J,"LI",{});var aPe=s(Qv);vue=n(aPe,"STRONG",{});var a9t=s(vue);hJo=r(a9t,"xlm"),a9t.forEach(t),pJo=r(aPe," \u2014 "),Fz=n(aPe,"A",{href:!0});var n9t=s(Fz);_Jo=r(n9t,"XLMForTokenClassification"),n9t.forEach(t),uJo=r(aPe," (XLM model)"),aPe.forEach(t),bJo=i(J),Wv=n(J,"LI",{});var nPe=s(Wv);Fue=n(nPe,"STRONG",{});var s9t=s(Fue);vJo=r(s9t,"xlm-roberta"),s9t.forEach(t),FJo=r(nPe," \u2014 "),Tz=n(nPe,"A",{href:!0});var l9t=s(Tz);TJo=r(l9t,"XLMRobertaForTokenClassification"),l9t.forEach(t),MJo=r(nPe," (XLM-RoBERTa model)"),nPe.forEach(t),EJo=i(J),Hv=n(J,"LI",{});var sPe=s(Hv);Tue=n(sPe,"STRONG",{});var i9t=s(Tue);CJo=r(i9t,"xlm-roberta-xl"),i9t.forEach(t),wJo=r(sPe," \u2014 "),Mz=n(sPe,"A",{href:!0});var d9t=s(Mz);AJo=r(d9t,"XLMRobertaXLForTokenClassification"),d9t.forEach(t),LJo=r(sPe," (XLM-RoBERTa-XL model)"),sPe.forEach(t),yJo=i(J),Uv=n(J,"LI",{});var lPe=s(Uv);Mue=n(lPe,"STRONG",{});var c9t=s(Mue);xJo=r(c9t,"xlnet"),c9t.forEach(t),$Jo=r(lPe," \u2014 "),Ez=n(lPe,"A",{href:!0});var f9t=s(Ez);kJo=r(f9t,"XLNetForTokenClassification"),f9t.forEach(t),SJo=r(lPe," (XLNet model)"),lPe.forEach(t),RJo=i(J),Jv=n(J,"LI",{});var iPe=s(Jv);Eue=n(iPe,"STRONG",{});var m9t=s(Eue);PJo=r(m9t,"yoso"),m9t.forEach(t),BJo=r(iPe," \u2014 "),Cz=n(iPe,"A",{href:!0});var g9t=s(Cz);IJo=r(g9t,"YosoForTokenClassification"),g9t.forEach(t),NJo=r(iPe," (YOSO model)"),iPe.forEach(t),J.forEach(t),qJo=i(ga),Yv=n(ga,"P",{});var dPe=s(Yv);jJo=r(dPe,"The model is set in evaluation mode by default using "),Cue=n(dPe,"CODE",{});var h9t=s(Cue);DJo=r(h9t,"model.eval()"),h9t.forEach(t),GJo=r(dPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(dPe,"CODE",{});var p9t=s(wue);OJo=r(p9t,"model.train()"),p9t.forEach(t),dPe.forEach(t),VJo=i(ga),T(Kv.$$.fragment,ga),ga.forEach(t),sl.forEach(t),NOe=i(f),dd=n(f,"H2",{class:!0});var VXe=s(dd);Zv=n(VXe,"A",{id:!0,class:!0,href:!0});var _9t=s(Zv);Aue=n(_9t,"SPAN",{});var u9t=s(Aue);T(YL.$$.fragment,u9t),u9t.forEach(t),_9t.forEach(t),XJo=i(VXe),Lue=n(VXe,"SPAN",{});var b9t=s(Lue);zJo=r(b9t,"AutoModelForQuestionAnswering"),b9t.forEach(t),VXe.forEach(t),qOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(KL.$$.fragment,ll),QJo=i(ll),cd=n(ll,"P",{});var Uoe=s(cd);WJo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wz=n(Uoe,"A",{href:!0});var v9t=s(wz);HJo=r(v9t,"from_pretrained()"),v9t.forEach(t),UJo=r(Uoe," class method or the "),Az=n(Uoe,"A",{href:!0});var F9t=s(Az);JJo=r(F9t,"from_config()"),F9t.forEach(t),YJo=r(Uoe,` class
method.`),Uoe.forEach(t),KJo=i(ll),ZL=n(ll,"P",{});var XXe=s(ZL);ZJo=r(XXe,"This class cannot be instantiated directly using "),yue=n(XXe,"CODE",{});var T9t=s(yue);eYo=r(T9t,"__init__()"),T9t.forEach(t),oYo=r(XXe," (throws an error)."),XXe.forEach(t),rYo=i(ll),ht=n(ll,"DIV",{class:!0});var eA=s(ht);T(ey.$$.fragment,eA),tYo=i(eA),xue=n(eA,"P",{});var M9t=s(xue);aYo=r(M9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M9t.forEach(t),nYo=i(eA),fd=n(eA,"P",{});var Joe=s(fd);sYo=r(Joe,`Note:
Loading a model from its configuration file does `),$ue=n(Joe,"STRONG",{});var E9t=s($ue);lYo=r(E9t,"not"),E9t.forEach(t),iYo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(Joe,"A",{href:!0});var C9t=s(Lz);dYo=r(C9t,"from_pretrained()"),C9t.forEach(t),cYo=r(Joe," to load the model weights."),Joe.forEach(t),fYo=i(eA),T(eF.$$.fragment,eA),eA.forEach(t),mYo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(oy.$$.fragment,ha),gYo=i(ha),kue=n(ha,"P",{});var w9t=s(kue);hYo=r(w9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w9t.forEach(t),pYo=i(ha),Oa=n(ha,"P",{});var oA=s(Oa);_Yo=r(oA,"The model class to instantiate is selected based on the "),Sue=n(oA,"CODE",{});var A9t=s(Sue);uYo=r(A9t,"model_type"),A9t.forEach(t),bYo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Rue=n(oA,"CODE",{});var L9t=s(Rue);vYo=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),FYo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(oA,"CODE",{});var y9t=s(Pue);TYo=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),MYo=r(oA,":"),oA.forEach(t),EYo=i(ha),V=n(ha,"UL",{});var X=s(V);oF=n(X,"LI",{});var cPe=s(oF);Bue=n(cPe,"STRONG",{});var x9t=s(Bue);CYo=r(x9t,"albert"),x9t.forEach(t),wYo=r(cPe," \u2014 "),yz=n(cPe,"A",{href:!0});var $9t=s(yz);AYo=r($9t,"AlbertForQuestionAnswering"),$9t.forEach(t),LYo=r(cPe," (ALBERT model)"),cPe.forEach(t),yYo=i(X),rF=n(X,"LI",{});var fPe=s(rF);Iue=n(fPe,"STRONG",{});var k9t=s(Iue);xYo=r(k9t,"bart"),k9t.forEach(t),$Yo=r(fPe," \u2014 "),xz=n(fPe,"A",{href:!0});var S9t=s(xz);kYo=r(S9t,"BartForQuestionAnswering"),S9t.forEach(t),SYo=r(fPe," (BART model)"),fPe.forEach(t),RYo=i(X),tF=n(X,"LI",{});var mPe=s(tF);Nue=n(mPe,"STRONG",{});var R9t=s(Nue);PYo=r(R9t,"bert"),R9t.forEach(t),BYo=r(mPe," \u2014 "),$z=n(mPe,"A",{href:!0});var P9t=s($z);IYo=r(P9t,"BertForQuestionAnswering"),P9t.forEach(t),NYo=r(mPe," (BERT model)"),mPe.forEach(t),qYo=i(X),aF=n(X,"LI",{});var gPe=s(aF);que=n(gPe,"STRONG",{});var B9t=s(que);jYo=r(B9t,"big_bird"),B9t.forEach(t),DYo=r(gPe," \u2014 "),kz=n(gPe,"A",{href:!0});var I9t=s(kz);GYo=r(I9t,"BigBirdForQuestionAnswering"),I9t.forEach(t),OYo=r(gPe," (BigBird model)"),gPe.forEach(t),VYo=i(X),nF=n(X,"LI",{});var hPe=s(nF);jue=n(hPe,"STRONG",{});var N9t=s(jue);XYo=r(N9t,"bigbird_pegasus"),N9t.forEach(t),zYo=r(hPe," \u2014 "),Sz=n(hPe,"A",{href:!0});var q9t=s(Sz);QYo=r(q9t,"BigBirdPegasusForQuestionAnswering"),q9t.forEach(t),WYo=r(hPe," (BigBird-Pegasus model)"),hPe.forEach(t),HYo=i(X),sF=n(X,"LI",{});var pPe=s(sF);Due=n(pPe,"STRONG",{});var j9t=s(Due);UYo=r(j9t,"camembert"),j9t.forEach(t),JYo=r(pPe," \u2014 "),Rz=n(pPe,"A",{href:!0});var D9t=s(Rz);YYo=r(D9t,"CamembertForQuestionAnswering"),D9t.forEach(t),KYo=r(pPe," (CamemBERT model)"),pPe.forEach(t),ZYo=i(X),lF=n(X,"LI",{});var _Pe=s(lF);Gue=n(_Pe,"STRONG",{});var G9t=s(Gue);eKo=r(G9t,"canine"),G9t.forEach(t),oKo=r(_Pe," \u2014 "),Pz=n(_Pe,"A",{href:!0});var O9t=s(Pz);rKo=r(O9t,"CanineForQuestionAnswering"),O9t.forEach(t),tKo=r(_Pe," (CANINE model)"),_Pe.forEach(t),aKo=i(X),iF=n(X,"LI",{});var uPe=s(iF);Oue=n(uPe,"STRONG",{});var V9t=s(Oue);nKo=r(V9t,"convbert"),V9t.forEach(t),sKo=r(uPe," \u2014 "),Bz=n(uPe,"A",{href:!0});var X9t=s(Bz);lKo=r(X9t,"ConvBertForQuestionAnswering"),X9t.forEach(t),iKo=r(uPe," (ConvBERT model)"),uPe.forEach(t),dKo=i(X),dF=n(X,"LI",{});var bPe=s(dF);Vue=n(bPe,"STRONG",{});var z9t=s(Vue);cKo=r(z9t,"data2vec-text"),z9t.forEach(t),fKo=r(bPe," \u2014 "),Iz=n(bPe,"A",{href:!0});var Q9t=s(Iz);mKo=r(Q9t,"Data2VecTextForQuestionAnswering"),Q9t.forEach(t),gKo=r(bPe," (Data2VecText model)"),bPe.forEach(t),hKo=i(X),cF=n(X,"LI",{});var vPe=s(cF);Xue=n(vPe,"STRONG",{});var W9t=s(Xue);pKo=r(W9t,"deberta"),W9t.forEach(t),_Ko=r(vPe," \u2014 "),Nz=n(vPe,"A",{href:!0});var H9t=s(Nz);uKo=r(H9t,"DebertaForQuestionAnswering"),H9t.forEach(t),bKo=r(vPe," (DeBERTa model)"),vPe.forEach(t),vKo=i(X),fF=n(X,"LI",{});var FPe=s(fF);zue=n(FPe,"STRONG",{});var U9t=s(zue);FKo=r(U9t,"deberta-v2"),U9t.forEach(t),TKo=r(FPe," \u2014 "),qz=n(FPe,"A",{href:!0});var J9t=s(qz);MKo=r(J9t,"DebertaV2ForQuestionAnswering"),J9t.forEach(t),EKo=r(FPe," (DeBERTa-v2 model)"),FPe.forEach(t),CKo=i(X),mF=n(X,"LI",{});var TPe=s(mF);Que=n(TPe,"STRONG",{});var Y9t=s(Que);wKo=r(Y9t,"distilbert"),Y9t.forEach(t),AKo=r(TPe," \u2014 "),jz=n(TPe,"A",{href:!0});var K9t=s(jz);LKo=r(K9t,"DistilBertForQuestionAnswering"),K9t.forEach(t),yKo=r(TPe," (DistilBERT model)"),TPe.forEach(t),xKo=i(X),gF=n(X,"LI",{});var MPe=s(gF);Wue=n(MPe,"STRONG",{});var Z9t=s(Wue);$Ko=r(Z9t,"electra"),Z9t.forEach(t),kKo=r(MPe," \u2014 "),Dz=n(MPe,"A",{href:!0});var eMt=s(Dz);SKo=r(eMt,"ElectraForQuestionAnswering"),eMt.forEach(t),RKo=r(MPe," (ELECTRA model)"),MPe.forEach(t),PKo=i(X),hF=n(X,"LI",{});var EPe=s(hF);Hue=n(EPe,"STRONG",{});var oMt=s(Hue);BKo=r(oMt,"flaubert"),oMt.forEach(t),IKo=r(EPe," \u2014 "),Gz=n(EPe,"A",{href:!0});var rMt=s(Gz);NKo=r(rMt,"FlaubertForQuestionAnsweringSimple"),rMt.forEach(t),qKo=r(EPe," (FlauBERT model)"),EPe.forEach(t),jKo=i(X),pF=n(X,"LI",{});var CPe=s(pF);Uue=n(CPe,"STRONG",{});var tMt=s(Uue);DKo=r(tMt,"fnet"),tMt.forEach(t),GKo=r(CPe," \u2014 "),Oz=n(CPe,"A",{href:!0});var aMt=s(Oz);OKo=r(aMt,"FNetForQuestionAnswering"),aMt.forEach(t),VKo=r(CPe," (FNet model)"),CPe.forEach(t),XKo=i(X),_F=n(X,"LI",{});var wPe=s(_F);Jue=n(wPe,"STRONG",{});var nMt=s(Jue);zKo=r(nMt,"funnel"),nMt.forEach(t),QKo=r(wPe," \u2014 "),Vz=n(wPe,"A",{href:!0});var sMt=s(Vz);WKo=r(sMt,"FunnelForQuestionAnswering"),sMt.forEach(t),HKo=r(wPe," (Funnel Transformer model)"),wPe.forEach(t),UKo=i(X),uF=n(X,"LI",{});var APe=s(uF);Yue=n(APe,"STRONG",{});var lMt=s(Yue);JKo=r(lMt,"gptj"),lMt.forEach(t),YKo=r(APe," \u2014 "),Xz=n(APe,"A",{href:!0});var iMt=s(Xz);KKo=r(iMt,"GPTJForQuestionAnswering"),iMt.forEach(t),ZKo=r(APe," (GPT-J model)"),APe.forEach(t),eZo=i(X),bF=n(X,"LI",{});var LPe=s(bF);Kue=n(LPe,"STRONG",{});var dMt=s(Kue);oZo=r(dMt,"ibert"),dMt.forEach(t),rZo=r(LPe," \u2014 "),zz=n(LPe,"A",{href:!0});var cMt=s(zz);tZo=r(cMt,"IBertForQuestionAnswering"),cMt.forEach(t),aZo=r(LPe," (I-BERT model)"),LPe.forEach(t),nZo=i(X),vF=n(X,"LI",{});var yPe=s(vF);Zue=n(yPe,"STRONG",{});var fMt=s(Zue);sZo=r(fMt,"layoutlmv2"),fMt.forEach(t),lZo=r(yPe," \u2014 "),Qz=n(yPe,"A",{href:!0});var mMt=s(Qz);iZo=r(mMt,"LayoutLMv2ForQuestionAnswering"),mMt.forEach(t),dZo=r(yPe," (LayoutLMv2 model)"),yPe.forEach(t),cZo=i(X),FF=n(X,"LI",{});var xPe=s(FF);e7e=n(xPe,"STRONG",{});var gMt=s(e7e);fZo=r(gMt,"layoutlmv3"),gMt.forEach(t),mZo=r(xPe," \u2014 "),Wz=n(xPe,"A",{href:!0});var hMt=s(Wz);gZo=r(hMt,"LayoutLMv3ForQuestionAnswering"),hMt.forEach(t),hZo=r(xPe," (LayoutLMv3 model)"),xPe.forEach(t),pZo=i(X),TF=n(X,"LI",{});var $Pe=s(TF);o7e=n($Pe,"STRONG",{});var pMt=s(o7e);_Zo=r(pMt,"led"),pMt.forEach(t),uZo=r($Pe," \u2014 "),Hz=n($Pe,"A",{href:!0});var _Mt=s(Hz);bZo=r(_Mt,"LEDForQuestionAnswering"),_Mt.forEach(t),vZo=r($Pe," (LED model)"),$Pe.forEach(t),FZo=i(X),MF=n(X,"LI",{});var kPe=s(MF);r7e=n(kPe,"STRONG",{});var uMt=s(r7e);TZo=r(uMt,"longformer"),uMt.forEach(t),MZo=r(kPe," \u2014 "),Uz=n(kPe,"A",{href:!0});var bMt=s(Uz);EZo=r(bMt,"LongformerForQuestionAnswering"),bMt.forEach(t),CZo=r(kPe," (Longformer model)"),kPe.forEach(t),wZo=i(X),EF=n(X,"LI",{});var SPe=s(EF);t7e=n(SPe,"STRONG",{});var vMt=s(t7e);AZo=r(vMt,"lxmert"),vMt.forEach(t),LZo=r(SPe," \u2014 "),Jz=n(SPe,"A",{href:!0});var FMt=s(Jz);yZo=r(FMt,"LxmertForQuestionAnswering"),FMt.forEach(t),xZo=r(SPe," (LXMERT model)"),SPe.forEach(t),$Zo=i(X),CF=n(X,"LI",{});var RPe=s(CF);a7e=n(RPe,"STRONG",{});var TMt=s(a7e);kZo=r(TMt,"mbart"),TMt.forEach(t),SZo=r(RPe," \u2014 "),Yz=n(RPe,"A",{href:!0});var MMt=s(Yz);RZo=r(MMt,"MBartForQuestionAnswering"),MMt.forEach(t),PZo=r(RPe," (mBART model)"),RPe.forEach(t),BZo=i(X),wF=n(X,"LI",{});var PPe=s(wF);n7e=n(PPe,"STRONG",{});var EMt=s(n7e);IZo=r(EMt,"megatron-bert"),EMt.forEach(t),NZo=r(PPe," \u2014 "),Kz=n(PPe,"A",{href:!0});var CMt=s(Kz);qZo=r(CMt,"MegatronBertForQuestionAnswering"),CMt.forEach(t),jZo=r(PPe," (Megatron-BERT model)"),PPe.forEach(t),DZo=i(X),AF=n(X,"LI",{});var BPe=s(AF);s7e=n(BPe,"STRONG",{});var wMt=s(s7e);GZo=r(wMt,"mobilebert"),wMt.forEach(t),OZo=r(BPe," \u2014 "),Zz=n(BPe,"A",{href:!0});var AMt=s(Zz);VZo=r(AMt,"MobileBertForQuestionAnswering"),AMt.forEach(t),XZo=r(BPe," (MobileBERT model)"),BPe.forEach(t),zZo=i(X),LF=n(X,"LI",{});var IPe=s(LF);l7e=n(IPe,"STRONG",{});var LMt=s(l7e);QZo=r(LMt,"mpnet"),LMt.forEach(t),WZo=r(IPe," \u2014 "),eQ=n(IPe,"A",{href:!0});var yMt=s(eQ);HZo=r(yMt,"MPNetForQuestionAnswering"),yMt.forEach(t),UZo=r(IPe," (MPNet model)"),IPe.forEach(t),JZo=i(X),yF=n(X,"LI",{});var NPe=s(yF);i7e=n(NPe,"STRONG",{});var xMt=s(i7e);YZo=r(xMt,"nezha"),xMt.forEach(t),KZo=r(NPe," \u2014 "),oQ=n(NPe,"A",{href:!0});var $Mt=s(oQ);ZZo=r($Mt,"NezhaForQuestionAnswering"),$Mt.forEach(t),eer=r(NPe," (Nezha model)"),NPe.forEach(t),oer=i(X),xF=n(X,"LI",{});var qPe=s(xF);d7e=n(qPe,"STRONG",{});var kMt=s(d7e);rer=r(kMt,"nystromformer"),kMt.forEach(t),ter=r(qPe," \u2014 "),rQ=n(qPe,"A",{href:!0});var SMt=s(rQ);aer=r(SMt,"NystromformerForQuestionAnswering"),SMt.forEach(t),ner=r(qPe," (Nystr\xF6mformer model)"),qPe.forEach(t),ser=i(X),$F=n(X,"LI",{});var jPe=s($F);c7e=n(jPe,"STRONG",{});var RMt=s(c7e);ler=r(RMt,"qdqbert"),RMt.forEach(t),ier=r(jPe," \u2014 "),tQ=n(jPe,"A",{href:!0});var PMt=s(tQ);der=r(PMt,"QDQBertForQuestionAnswering"),PMt.forEach(t),cer=r(jPe," (QDQBert model)"),jPe.forEach(t),fer=i(X),kF=n(X,"LI",{});var DPe=s(kF);f7e=n(DPe,"STRONG",{});var BMt=s(f7e);mer=r(BMt,"reformer"),BMt.forEach(t),ger=r(DPe," \u2014 "),aQ=n(DPe,"A",{href:!0});var IMt=s(aQ);her=r(IMt,"ReformerForQuestionAnswering"),IMt.forEach(t),per=r(DPe," (Reformer model)"),DPe.forEach(t),_er=i(X),SF=n(X,"LI",{});var GPe=s(SF);m7e=n(GPe,"STRONG",{});var NMt=s(m7e);uer=r(NMt,"rembert"),NMt.forEach(t),ber=r(GPe," \u2014 "),nQ=n(GPe,"A",{href:!0});var qMt=s(nQ);ver=r(qMt,"RemBertForQuestionAnswering"),qMt.forEach(t),Fer=r(GPe," (RemBERT model)"),GPe.forEach(t),Ter=i(X),RF=n(X,"LI",{});var OPe=s(RF);g7e=n(OPe,"STRONG",{});var jMt=s(g7e);Mer=r(jMt,"roberta"),jMt.forEach(t),Eer=r(OPe," \u2014 "),sQ=n(OPe,"A",{href:!0});var DMt=s(sQ);Cer=r(DMt,"RobertaForQuestionAnswering"),DMt.forEach(t),wer=r(OPe," (RoBERTa model)"),OPe.forEach(t),Aer=i(X),PF=n(X,"LI",{});var VPe=s(PF);h7e=n(VPe,"STRONG",{});var GMt=s(h7e);Ler=r(GMt,"roformer"),GMt.forEach(t),yer=r(VPe," \u2014 "),lQ=n(VPe,"A",{href:!0});var OMt=s(lQ);xer=r(OMt,"RoFormerForQuestionAnswering"),OMt.forEach(t),$er=r(VPe," (RoFormer model)"),VPe.forEach(t),ker=i(X),BF=n(X,"LI",{});var XPe=s(BF);p7e=n(XPe,"STRONG",{});var VMt=s(p7e);Ser=r(VMt,"splinter"),VMt.forEach(t),Rer=r(XPe," \u2014 "),iQ=n(XPe,"A",{href:!0});var XMt=s(iQ);Per=r(XMt,"SplinterForQuestionAnswering"),XMt.forEach(t),Ber=r(XPe," (Splinter model)"),XPe.forEach(t),Ier=i(X),IF=n(X,"LI",{});var zPe=s(IF);_7e=n(zPe,"STRONG",{});var zMt=s(_7e);Ner=r(zMt,"squeezebert"),zMt.forEach(t),qer=r(zPe," \u2014 "),dQ=n(zPe,"A",{href:!0});var QMt=s(dQ);jer=r(QMt,"SqueezeBertForQuestionAnswering"),QMt.forEach(t),Der=r(zPe," (SqueezeBERT model)"),zPe.forEach(t),Ger=i(X),NF=n(X,"LI",{});var QPe=s(NF);u7e=n(QPe,"STRONG",{});var WMt=s(u7e);Oer=r(WMt,"xlm"),WMt.forEach(t),Ver=r(QPe," \u2014 "),cQ=n(QPe,"A",{href:!0});var HMt=s(cQ);Xer=r(HMt,"XLMForQuestionAnsweringSimple"),HMt.forEach(t),zer=r(QPe," (XLM model)"),QPe.forEach(t),Qer=i(X),qF=n(X,"LI",{});var WPe=s(qF);b7e=n(WPe,"STRONG",{});var UMt=s(b7e);Wer=r(UMt,"xlm-roberta"),UMt.forEach(t),Her=r(WPe," \u2014 "),fQ=n(WPe,"A",{href:!0});var JMt=s(fQ);Uer=r(JMt,"XLMRobertaForQuestionAnswering"),JMt.forEach(t),Jer=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),Yer=i(X),jF=n(X,"LI",{});var HPe=s(jF);v7e=n(HPe,"STRONG",{});var YMt=s(v7e);Ker=r(YMt,"xlm-roberta-xl"),YMt.forEach(t),Zer=r(HPe," \u2014 "),mQ=n(HPe,"A",{href:!0});var KMt=s(mQ);eor=r(KMt,"XLMRobertaXLForQuestionAnswering"),KMt.forEach(t),oor=r(HPe," (XLM-RoBERTa-XL model)"),HPe.forEach(t),ror=i(X),DF=n(X,"LI",{});var UPe=s(DF);F7e=n(UPe,"STRONG",{});var ZMt=s(F7e);tor=r(ZMt,"xlnet"),ZMt.forEach(t),aor=r(UPe," \u2014 "),gQ=n(UPe,"A",{href:!0});var eEt=s(gQ);nor=r(eEt,"XLNetForQuestionAnsweringSimple"),eEt.forEach(t),sor=r(UPe," (XLNet model)"),UPe.forEach(t),lor=i(X),GF=n(X,"LI",{});var JPe=s(GF);T7e=n(JPe,"STRONG",{});var oEt=s(T7e);ior=r(oEt,"yoso"),oEt.forEach(t),dor=r(JPe," \u2014 "),hQ=n(JPe,"A",{href:!0});var rEt=s(hQ);cor=r(rEt,"YosoForQuestionAnswering"),rEt.forEach(t),mor=r(JPe," (YOSO model)"),JPe.forEach(t),X.forEach(t),gor=i(ha),OF=n(ha,"P",{});var YPe=s(OF);hor=r(YPe,"The model is set in evaluation mode by default using "),M7e=n(YPe,"CODE",{});var tEt=s(M7e);por=r(tEt,"model.eval()"),tEt.forEach(t),_or=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E7e=n(YPe,"CODE",{});var aEt=s(E7e);uor=r(aEt,"model.train()"),aEt.forEach(t),YPe.forEach(t),bor=i(ha),T(VF.$$.fragment,ha),ha.forEach(t),ll.forEach(t),jOe=i(f),md=n(f,"H2",{class:!0});var zXe=s(md);XF=n(zXe,"A",{id:!0,class:!0,href:!0});var nEt=s(XF);C7e=n(nEt,"SPAN",{});var sEt=s(C7e);T(ry.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),vor=i(zXe),w7e=n(zXe,"SPAN",{});var lEt=s(w7e);For=r(lEt,"AutoModelForTableQuestionAnswering"),lEt.forEach(t),zXe.forEach(t),DOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(ty.$$.fragment,il),Tor=i(il),gd=n(il,"P",{});var Yoe=s(gd);Mor=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pQ=n(Yoe,"A",{href:!0});var iEt=s(pQ);Eor=r(iEt,"from_pretrained()"),iEt.forEach(t),Cor=r(Yoe," class method or the "),_Q=n(Yoe,"A",{href:!0});var dEt=s(_Q);wor=r(dEt,"from_config()"),dEt.forEach(t),Aor=r(Yoe,` class
method.`),Yoe.forEach(t),Lor=i(il),ay=n(il,"P",{});var QXe=s(ay);yor=r(QXe,"This class cannot be instantiated directly using "),A7e=n(QXe,"CODE",{});var cEt=s(A7e);xor=r(cEt,"__init__()"),cEt.forEach(t),$or=r(QXe," (throws an error)."),QXe.forEach(t),kor=i(il),pt=n(il,"DIV",{class:!0});var rA=s(pt);T(ny.$$.fragment,rA),Sor=i(rA),L7e=n(rA,"P",{});var fEt=s(L7e);Ror=r(fEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fEt.forEach(t),Por=i(rA),hd=n(rA,"P",{});var Koe=s(hd);Bor=r(Koe,`Note:
Loading a model from its configuration file does `),y7e=n(Koe,"STRONG",{});var mEt=s(y7e);Ior=r(mEt,"not"),mEt.forEach(t),Nor=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(Koe,"A",{href:!0});var gEt=s(uQ);qor=r(gEt,"from_pretrained()"),gEt.forEach(t),jor=r(Koe," to load the model weights."),Koe.forEach(t),Dor=i(rA),T(zF.$$.fragment,rA),rA.forEach(t),Gor=i(il),so=n(il,"DIV",{class:!0});var pa=s(so);T(sy.$$.fragment,pa),Oor=i(pa),x7e=n(pa,"P",{});var hEt=s(x7e);Vor=r(hEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hEt.forEach(t),Xor=i(pa),Va=n(pa,"P",{});var tA=s(Va);zor=r(tA,"The model class to instantiate is selected based on the "),$7e=n(tA,"CODE",{});var pEt=s($7e);Qor=r(pEt,"model_type"),pEt.forEach(t),Wor=r(tA,` property of the config object (either
passed as an argument or loaded from `),k7e=n(tA,"CODE",{});var _Et=s(k7e);Hor=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),Uor=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(tA,"CODE",{});var uEt=s(S7e);Jor=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),Yor=r(tA,":"),tA.forEach(t),Kor=i(pa),R7e=n(pa,"UL",{});var bEt=s(R7e);QF=n(bEt,"LI",{});var KPe=s(QF);P7e=n(KPe,"STRONG",{});var vEt=s(P7e);Zor=r(vEt,"tapas"),vEt.forEach(t),err=r(KPe," \u2014 "),bQ=n(KPe,"A",{href:!0});var FEt=s(bQ);orr=r(FEt,"TapasForQuestionAnswering"),FEt.forEach(t),rrr=r(KPe," (TAPAS model)"),KPe.forEach(t),bEt.forEach(t),trr=i(pa),WF=n(pa,"P",{});var ZPe=s(WF);arr=r(ZPe,"The model is set in evaluation mode by default using "),B7e=n(ZPe,"CODE",{});var TEt=s(B7e);nrr=r(TEt,"model.eval()"),TEt.forEach(t),srr=r(ZPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I7e=n(ZPe,"CODE",{});var MEt=s(I7e);lrr=r(MEt,"model.train()"),MEt.forEach(t),ZPe.forEach(t),irr=i(pa),T(HF.$$.fragment,pa),pa.forEach(t),il.forEach(t),GOe=i(f),pd=n(f,"H2",{class:!0});var WXe=s(pd);UF=n(WXe,"A",{id:!0,class:!0,href:!0});var EEt=s(UF);N7e=n(EEt,"SPAN",{});var CEt=s(N7e);T(ly.$$.fragment,CEt),CEt.forEach(t),EEt.forEach(t),drr=i(WXe),q7e=n(WXe,"SPAN",{});var wEt=s(q7e);crr=r(wEt,"AutoModelForImageClassification"),wEt.forEach(t),WXe.forEach(t),OOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(iy.$$.fragment,dl),frr=i(dl),_d=n(dl,"P",{});var Zoe=s(_d);mrr=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vQ=n(Zoe,"A",{href:!0});var AEt=s(vQ);grr=r(AEt,"from_pretrained()"),AEt.forEach(t),hrr=r(Zoe," class method or the "),FQ=n(Zoe,"A",{href:!0});var LEt=s(FQ);prr=r(LEt,"from_config()"),LEt.forEach(t),_rr=r(Zoe,` class
method.`),Zoe.forEach(t),urr=i(dl),dy=n(dl,"P",{});var HXe=s(dy);brr=r(HXe,"This class cannot be instantiated directly using "),j7e=n(HXe,"CODE",{});var yEt=s(j7e);vrr=r(yEt,"__init__()"),yEt.forEach(t),Frr=r(HXe," (throws an error)."),HXe.forEach(t),Trr=i(dl),_t=n(dl,"DIV",{class:!0});var aA=s(_t);T(cy.$$.fragment,aA),Mrr=i(aA),D7e=n(aA,"P",{});var xEt=s(D7e);Err=r(xEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xEt.forEach(t),Crr=i(aA),ud=n(aA,"P",{});var ere=s(ud);wrr=r(ere,`Note:
Loading a model from its configuration file does `),G7e=n(ere,"STRONG",{});var $Et=s(G7e);Arr=r($Et,"not"),$Et.forEach(t),Lrr=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(ere,"A",{href:!0});var kEt=s(TQ);yrr=r(kEt,"from_pretrained()"),kEt.forEach(t),xrr=r(ere," to load the model weights."),ere.forEach(t),$rr=i(aA),T(JF.$$.fragment,aA),aA.forEach(t),krr=i(dl),lo=n(dl,"DIV",{class:!0});var _a=s(lo);T(fy.$$.fragment,_a),Srr=i(_a),O7e=n(_a,"P",{});var SEt=s(O7e);Rrr=r(SEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SEt.forEach(t),Prr=i(_a),Xa=n(_a,"P",{});var nA=s(Xa);Brr=r(nA,"The model class to instantiate is selected based on the "),V7e=n(nA,"CODE",{});var REt=s(V7e);Irr=r(REt,"model_type"),REt.forEach(t),Nrr=r(nA,` property of the config object (either
passed as an argument or loaded from `),X7e=n(nA,"CODE",{});var PEt=s(X7e);qrr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),jrr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(nA,"CODE",{});var BEt=s(z7e);Drr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),Grr=r(nA,":"),nA.forEach(t),Orr=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);YF=n(Te,"LI",{});var eBe=s(YF);Q7e=n(eBe,"STRONG",{});var IEt=s(Q7e);Vrr=r(IEt,"beit"),IEt.forEach(t),Xrr=r(eBe," \u2014 "),MQ=n(eBe,"A",{href:!0});var NEt=s(MQ);zrr=r(NEt,"BeitForImageClassification"),NEt.forEach(t),Qrr=r(eBe," (BEiT model)"),eBe.forEach(t),Wrr=i(Te),KF=n(Te,"LI",{});var oBe=s(KF);W7e=n(oBe,"STRONG",{});var qEt=s(W7e);Hrr=r(qEt,"convnext"),qEt.forEach(t),Urr=r(oBe," \u2014 "),EQ=n(oBe,"A",{href:!0});var jEt=s(EQ);Jrr=r(jEt,"ConvNextForImageClassification"),jEt.forEach(t),Yrr=r(oBe," (ConvNeXT model)"),oBe.forEach(t),Krr=i(Te),ZF=n(Te,"LI",{});var rBe=s(ZF);H7e=n(rBe,"STRONG",{});var DEt=s(H7e);Zrr=r(DEt,"cvt"),DEt.forEach(t),etr=r(rBe," \u2014 "),CQ=n(rBe,"A",{href:!0});var GEt=s(CQ);otr=r(GEt,"CvtForImageClassification"),GEt.forEach(t),rtr=r(rBe," (CvT model)"),rBe.forEach(t),ttr=i(Te),eT=n(Te,"LI",{});var tBe=s(eT);U7e=n(tBe,"STRONG",{});var OEt=s(U7e);atr=r(OEt,"data2vec-vision"),OEt.forEach(t),ntr=r(tBe," \u2014 "),wQ=n(tBe,"A",{href:!0});var VEt=s(wQ);str=r(VEt,"Data2VecVisionForImageClassification"),VEt.forEach(t),ltr=r(tBe," (Data2VecVision model)"),tBe.forEach(t),itr=i(Te),zs=n(Te,"LI",{});var nS=s(zs);J7e=n(nS,"STRONG",{});var XEt=s(J7e);dtr=r(XEt,"deit"),XEt.forEach(t),ctr=r(nS," \u2014 "),AQ=n(nS,"A",{href:!0});var zEt=s(AQ);ftr=r(zEt,"DeiTForImageClassification"),zEt.forEach(t),mtr=r(nS," or "),LQ=n(nS,"A",{href:!0});var QEt=s(LQ);gtr=r(QEt,"DeiTForImageClassificationWithTeacher"),QEt.forEach(t),htr=r(nS," (DeiT model)"),nS.forEach(t),ptr=i(Te),oT=n(Te,"LI",{});var aBe=s(oT);Y7e=n(aBe,"STRONG",{});var WEt=s(Y7e);_tr=r(WEt,"imagegpt"),WEt.forEach(t),utr=r(aBe," \u2014 "),yQ=n(aBe,"A",{href:!0});var HEt=s(yQ);btr=r(HEt,"ImageGPTForImageClassification"),HEt.forEach(t),vtr=r(aBe," (ImageGPT model)"),aBe.forEach(t),Ftr=i(Te),Qs=n(Te,"LI",{});var sS=s(Qs);K7e=n(sS,"STRONG",{});var UEt=s(K7e);Ttr=r(UEt,"levit"),UEt.forEach(t),Mtr=r(sS," \u2014 "),xQ=n(sS,"A",{href:!0});var JEt=s(xQ);Etr=r(JEt,"LevitForImageClassification"),JEt.forEach(t),Ctr=r(sS," or "),$Q=n(sS,"A",{href:!0});var YEt=s($Q);wtr=r(YEt,"LevitForImageClassificationWithTeacher"),YEt.forEach(t),Atr=r(sS," (LeViT model)"),sS.forEach(t),Ltr=i(Te),ut=n(Te,"LI",{});var yf=s(ut);Z7e=n(yf,"STRONG",{});var KEt=s(Z7e);ytr=r(KEt,"perceiver"),KEt.forEach(t),xtr=r(yf," \u2014 "),kQ=n(yf,"A",{href:!0});var ZEt=s(kQ);$tr=r(ZEt,"PerceiverForImageClassificationLearned"),ZEt.forEach(t),ktr=r(yf," or "),SQ=n(yf,"A",{href:!0});var e4t=s(SQ);Str=r(e4t,"PerceiverForImageClassificationFourier"),e4t.forEach(t),Rtr=r(yf," or "),RQ=n(yf,"A",{href:!0});var o4t=s(RQ);Ptr=r(o4t,"PerceiverForImageClassificationConvProcessing"),o4t.forEach(t),Btr=r(yf," (Perceiver model)"),yf.forEach(t),Itr=i(Te),rT=n(Te,"LI",{});var nBe=s(rT);e1e=n(nBe,"STRONG",{});var r4t=s(e1e);Ntr=r(r4t,"poolformer"),r4t.forEach(t),qtr=r(nBe," \u2014 "),PQ=n(nBe,"A",{href:!0});var t4t=s(PQ);jtr=r(t4t,"PoolFormerForImageClassification"),t4t.forEach(t),Dtr=r(nBe," (PoolFormer model)"),nBe.forEach(t),Gtr=i(Te),tT=n(Te,"LI",{});var sBe=s(tT);o1e=n(sBe,"STRONG",{});var a4t=s(o1e);Otr=r(a4t,"regnet"),a4t.forEach(t),Vtr=r(sBe," \u2014 "),BQ=n(sBe,"A",{href:!0});var n4t=s(BQ);Xtr=r(n4t,"RegNetForImageClassification"),n4t.forEach(t),ztr=r(sBe," (RegNet model)"),sBe.forEach(t),Qtr=i(Te),aT=n(Te,"LI",{});var lBe=s(aT);r1e=n(lBe,"STRONG",{});var s4t=s(r1e);Wtr=r(s4t,"resnet"),s4t.forEach(t),Htr=r(lBe," \u2014 "),IQ=n(lBe,"A",{href:!0});var l4t=s(IQ);Utr=r(l4t,"ResNetForImageClassification"),l4t.forEach(t),Jtr=r(lBe," (ResNet model)"),lBe.forEach(t),Ytr=i(Te),nT=n(Te,"LI",{});var iBe=s(nT);t1e=n(iBe,"STRONG",{});var i4t=s(t1e);Ktr=r(i4t,"segformer"),i4t.forEach(t),Ztr=r(iBe," \u2014 "),NQ=n(iBe,"A",{href:!0});var d4t=s(NQ);ear=r(d4t,"SegformerForImageClassification"),d4t.forEach(t),oar=r(iBe," (SegFormer model)"),iBe.forEach(t),rar=i(Te),sT=n(Te,"LI",{});var dBe=s(sT);a1e=n(dBe,"STRONG",{});var c4t=s(a1e);tar=r(c4t,"swin"),c4t.forEach(t),aar=r(dBe," \u2014 "),qQ=n(dBe,"A",{href:!0});var f4t=s(qQ);nar=r(f4t,"SwinForImageClassification"),f4t.forEach(t),sar=r(dBe," (Swin Transformer model)"),dBe.forEach(t),lar=i(Te),lT=n(Te,"LI",{});var cBe=s(lT);n1e=n(cBe,"STRONG",{});var m4t=s(n1e);iar=r(m4t,"van"),m4t.forEach(t),dar=r(cBe," \u2014 "),jQ=n(cBe,"A",{href:!0});var g4t=s(jQ);car=r(g4t,"VanForImageClassification"),g4t.forEach(t),far=r(cBe," (VAN model)"),cBe.forEach(t),mar=i(Te),iT=n(Te,"LI",{});var fBe=s(iT);s1e=n(fBe,"STRONG",{});var h4t=s(s1e);gar=r(h4t,"vit"),h4t.forEach(t),har=r(fBe," \u2014 "),DQ=n(fBe,"A",{href:!0});var p4t=s(DQ);par=r(p4t,"ViTForImageClassification"),p4t.forEach(t),_ar=r(fBe," (ViT model)"),fBe.forEach(t),Te.forEach(t),uar=i(_a),dT=n(_a,"P",{});var mBe=s(dT);bar=r(mBe,"The model is set in evaluation mode by default using "),l1e=n(mBe,"CODE",{});var _4t=s(l1e);Far=r(_4t,"model.eval()"),_4t.forEach(t),Tar=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i1e=n(mBe,"CODE",{});var u4t=s(i1e);Mar=r(u4t,"model.train()"),u4t.forEach(t),mBe.forEach(t),Ear=i(_a),T(cT.$$.fragment,_a),_a.forEach(t),dl.forEach(t),VOe=i(f),bd=n(f,"H2",{class:!0});var UXe=s(bd);fT=n(UXe,"A",{id:!0,class:!0,href:!0});var b4t=s(fT);d1e=n(b4t,"SPAN",{});var v4t=s(d1e);T(my.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Car=i(UXe),c1e=n(UXe,"SPAN",{});var F4t=s(c1e);war=r(F4t,"AutoModelForVision2Seq"),F4t.forEach(t),UXe.forEach(t),XOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(gy.$$.fragment,cl),Aar=i(cl),vd=n(cl,"P",{});var ore=s(vd);Lar=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GQ=n(ore,"A",{href:!0});var T4t=s(GQ);yar=r(T4t,"from_pretrained()"),T4t.forEach(t),xar=r(ore," class method or the "),OQ=n(ore,"A",{href:!0});var M4t=s(OQ);$ar=r(M4t,"from_config()"),M4t.forEach(t),kar=r(ore,` class
method.`),ore.forEach(t),Sar=i(cl),hy=n(cl,"P",{});var JXe=s(hy);Rar=r(JXe,"This class cannot be instantiated directly using "),f1e=n(JXe,"CODE",{});var E4t=s(f1e);Par=r(E4t,"__init__()"),E4t.forEach(t),Bar=r(JXe," (throws an error)."),JXe.forEach(t),Iar=i(cl),bt=n(cl,"DIV",{class:!0});var sA=s(bt);T(py.$$.fragment,sA),Nar=i(sA),m1e=n(sA,"P",{});var C4t=s(m1e);qar=r(C4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),C4t.forEach(t),jar=i(sA),Fd=n(sA,"P",{});var rre=s(Fd);Dar=r(rre,`Note:
Loading a model from its configuration file does `),g1e=n(rre,"STRONG",{});var w4t=s(g1e);Gar=r(w4t,"not"),w4t.forEach(t),Oar=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(rre,"A",{href:!0});var A4t=s(VQ);Var=r(A4t,"from_pretrained()"),A4t.forEach(t),Xar=r(rre," to load the model weights."),rre.forEach(t),zar=i(sA),T(mT.$$.fragment,sA),sA.forEach(t),Qar=i(cl),io=n(cl,"DIV",{class:!0});var ua=s(io);T(_y.$$.fragment,ua),War=i(ua),h1e=n(ua,"P",{});var L4t=s(h1e);Har=r(L4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L4t.forEach(t),Uar=i(ua),za=n(ua,"P",{});var lA=s(za);Jar=r(lA,"The model class to instantiate is selected based on the "),p1e=n(lA,"CODE",{});var y4t=s(p1e);Yar=r(y4t,"model_type"),y4t.forEach(t),Kar=r(lA,` property of the config object (either
passed as an argument or loaded from `),_1e=n(lA,"CODE",{});var x4t=s(_1e);Zar=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),enr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(lA,"CODE",{});var $4t=s(u1e);onr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),rnr=r(lA,":"),lA.forEach(t),tnr=i(ua),b1e=n(ua,"UL",{});var k4t=s(b1e);gT=n(k4t,"LI",{});var gBe=s(gT);v1e=n(gBe,"STRONG",{});var S4t=s(v1e);anr=r(S4t,"vision-encoder-decoder"),S4t.forEach(t),nnr=r(gBe," \u2014 "),XQ=n(gBe,"A",{href:!0});var R4t=s(XQ);snr=r(R4t,"VisionEncoderDecoderModel"),R4t.forEach(t),lnr=r(gBe," (Vision Encoder decoder model)"),gBe.forEach(t),k4t.forEach(t),inr=i(ua),hT=n(ua,"P",{});var hBe=s(hT);dnr=r(hBe,"The model is set in evaluation mode by default using "),F1e=n(hBe,"CODE",{});var P4t=s(F1e);cnr=r(P4t,"model.eval()"),P4t.forEach(t),fnr=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(hBe,"CODE",{});var B4t=s(T1e);mnr=r(B4t,"model.train()"),B4t.forEach(t),hBe.forEach(t),gnr=i(ua),T(pT.$$.fragment,ua),ua.forEach(t),cl.forEach(t),zOe=i(f),Td=n(f,"H2",{class:!0});var YXe=s(Td);_T=n(YXe,"A",{id:!0,class:!0,href:!0});var I4t=s(_T);M1e=n(I4t,"SPAN",{});var N4t=s(M1e);T(uy.$$.fragment,N4t),N4t.forEach(t),I4t.forEach(t),hnr=i(YXe),E1e=n(YXe,"SPAN",{});var q4t=s(E1e);pnr=r(q4t,"AutoModelForVisualQuestionAnswering"),q4t.forEach(t),YXe.forEach(t),QOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(by.$$.fragment,fl),_nr=i(fl),Md=n(fl,"P",{});var tre=s(Md);unr=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zQ=n(tre,"A",{href:!0});var j4t=s(zQ);bnr=r(j4t,"from_pretrained()"),j4t.forEach(t),vnr=r(tre," class method or the "),QQ=n(tre,"A",{href:!0});var D4t=s(QQ);Fnr=r(D4t,"from_config()"),D4t.forEach(t),Tnr=r(tre,` class
method.`),tre.forEach(t),Mnr=i(fl),vy=n(fl,"P",{});var KXe=s(vy);Enr=r(KXe,"This class cannot be instantiated directly using "),C1e=n(KXe,"CODE",{});var G4t=s(C1e);Cnr=r(G4t,"__init__()"),G4t.forEach(t),wnr=r(KXe," (throws an error)."),KXe.forEach(t),Anr=i(fl),vt=n(fl,"DIV",{class:!0});var iA=s(vt);T(Fy.$$.fragment,iA),Lnr=i(iA),w1e=n(iA,"P",{});var O4t=s(w1e);ynr=r(O4t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),O4t.forEach(t),xnr=i(iA),Ed=n(iA,"P",{});var are=s(Ed);$nr=r(are,`Note:
Loading a model from its configuration file does `),A1e=n(are,"STRONG",{});var V4t=s(A1e);knr=r(V4t,"not"),V4t.forEach(t),Snr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(are,"A",{href:!0});var X4t=s(WQ);Rnr=r(X4t,"from_pretrained()"),X4t.forEach(t),Pnr=r(are," to load the model weights."),are.forEach(t),Bnr=i(iA),T(uT.$$.fragment,iA),iA.forEach(t),Inr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(Ty.$$.fragment,ba),Nnr=i(ba),L1e=n(ba,"P",{});var z4t=s(L1e);qnr=r(z4t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),z4t.forEach(t),jnr=i(ba),Qa=n(ba,"P",{});var dA=s(Qa);Dnr=r(dA,"The model class to instantiate is selected based on the "),y1e=n(dA,"CODE",{});var Q4t=s(y1e);Gnr=r(Q4t,"model_type"),Q4t.forEach(t),Onr=r(dA,` property of the config object (either
passed as an argument or loaded from `),x1e=n(dA,"CODE",{});var W4t=s(x1e);Vnr=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),Xnr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(dA,"CODE",{});var H4t=s($1e);znr=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),Qnr=r(dA,":"),dA.forEach(t),Wnr=i(ba),k1e=n(ba,"UL",{});var U4t=s(k1e);bT=n(U4t,"LI",{});var pBe=s(bT);S1e=n(pBe,"STRONG",{});var J4t=s(S1e);Hnr=r(J4t,"vilt"),J4t.forEach(t),Unr=r(pBe," \u2014 "),HQ=n(pBe,"A",{href:!0});var Y4t=s(HQ);Jnr=r(Y4t,"ViltForQuestionAnswering"),Y4t.forEach(t),Ynr=r(pBe," (ViLT model)"),pBe.forEach(t),U4t.forEach(t),Knr=i(ba),vT=n(ba,"P",{});var _Be=s(vT);Znr=r(_Be,"The model is set in evaluation mode by default using "),R1e=n(_Be,"CODE",{});var K4t=s(R1e);esr=r(K4t,"model.eval()"),K4t.forEach(t),osr=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(_Be,"CODE",{});var Z4t=s(P1e);rsr=r(Z4t,"model.train()"),Z4t.forEach(t),_Be.forEach(t),tsr=i(ba),T(FT.$$.fragment,ba),ba.forEach(t),fl.forEach(t),WOe=i(f),Cd=n(f,"H2",{class:!0});var ZXe=s(Cd);TT=n(ZXe,"A",{id:!0,class:!0,href:!0});var eCt=s(TT);B1e=n(eCt,"SPAN",{});var oCt=s(B1e);T(My.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),asr=i(ZXe),I1e=n(ZXe,"SPAN",{});var rCt=s(I1e);nsr=r(rCt,"AutoModelForAudioClassification"),rCt.forEach(t),ZXe.forEach(t),HOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(Ey.$$.fragment,ml),ssr=i(ml),wd=n(ml,"P",{});var nre=s(wd);lsr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UQ=n(nre,"A",{href:!0});var tCt=s(UQ);isr=r(tCt,"from_pretrained()"),tCt.forEach(t),dsr=r(nre," class method or the "),JQ=n(nre,"A",{href:!0});var aCt=s(JQ);csr=r(aCt,"from_config()"),aCt.forEach(t),fsr=r(nre,` class
method.`),nre.forEach(t),msr=i(ml),Cy=n(ml,"P",{});var eze=s(Cy);gsr=r(eze,"This class cannot be instantiated directly using "),N1e=n(eze,"CODE",{});var nCt=s(N1e);hsr=r(nCt,"__init__()"),nCt.forEach(t),psr=r(eze," (throws an error)."),eze.forEach(t),_sr=i(ml),Ft=n(ml,"DIV",{class:!0});var cA=s(Ft);T(wy.$$.fragment,cA),usr=i(cA),q1e=n(cA,"P",{});var sCt=s(q1e);bsr=r(sCt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sCt.forEach(t),vsr=i(cA),Ad=n(cA,"P",{});var sre=s(Ad);Fsr=r(sre,`Note:
Loading a model from its configuration file does `),j1e=n(sre,"STRONG",{});var lCt=s(j1e);Tsr=r(lCt,"not"),lCt.forEach(t),Msr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(sre,"A",{href:!0});var iCt=s(YQ);Esr=r(iCt,"from_pretrained()"),iCt.forEach(t),Csr=r(sre," to load the model weights."),sre.forEach(t),wsr=i(cA),T(MT.$$.fragment,cA),cA.forEach(t),Asr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(Ay.$$.fragment,va),Lsr=i(va),D1e=n(va,"P",{});var dCt=s(D1e);ysr=r(dCt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dCt.forEach(t),xsr=i(va),Wa=n(va,"P",{});var fA=s(Wa);$sr=r(fA,"The model class to instantiate is selected based on the "),G1e=n(fA,"CODE",{});var cCt=s(G1e);ksr=r(cCt,"model_type"),cCt.forEach(t),Ssr=r(fA,` property of the config object (either
passed as an argument or loaded from `),O1e=n(fA,"CODE",{});var fCt=s(O1e);Rsr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),Psr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(fA,"CODE",{});var mCt=s(V1e);Bsr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),Isr=r(fA,":"),fA.forEach(t),Nsr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);ET=n(ze,"LI",{});var uBe=s(ET);X1e=n(uBe,"STRONG",{});var gCt=s(X1e);qsr=r(gCt,"data2vec-audio"),gCt.forEach(t),jsr=r(uBe," \u2014 "),KQ=n(uBe,"A",{href:!0});var hCt=s(KQ);Dsr=r(hCt,"Data2VecAudioForSequenceClassification"),hCt.forEach(t),Gsr=r(uBe," (Data2VecAudio model)"),uBe.forEach(t),Osr=i(ze),CT=n(ze,"LI",{});var bBe=s(CT);z1e=n(bBe,"STRONG",{});var pCt=s(z1e);Vsr=r(pCt,"hubert"),pCt.forEach(t),Xsr=r(bBe," \u2014 "),ZQ=n(bBe,"A",{href:!0});var _Ct=s(ZQ);zsr=r(_Ct,"HubertForSequenceClassification"),_Ct.forEach(t),Qsr=r(bBe," (Hubert model)"),bBe.forEach(t),Wsr=i(ze),wT=n(ze,"LI",{});var vBe=s(wT);Q1e=n(vBe,"STRONG",{});var uCt=s(Q1e);Hsr=r(uCt,"sew"),uCt.forEach(t),Usr=r(vBe," \u2014 "),eW=n(vBe,"A",{href:!0});var bCt=s(eW);Jsr=r(bCt,"SEWForSequenceClassification"),bCt.forEach(t),Ysr=r(vBe," (SEW model)"),vBe.forEach(t),Ksr=i(ze),AT=n(ze,"LI",{});var FBe=s(AT);W1e=n(FBe,"STRONG",{});var vCt=s(W1e);Zsr=r(vCt,"sew-d"),vCt.forEach(t),elr=r(FBe," \u2014 "),oW=n(FBe,"A",{href:!0});var FCt=s(oW);olr=r(FCt,"SEWDForSequenceClassification"),FCt.forEach(t),rlr=r(FBe," (SEW-D model)"),FBe.forEach(t),tlr=i(ze),LT=n(ze,"LI",{});var TBe=s(LT);H1e=n(TBe,"STRONG",{});var TCt=s(H1e);alr=r(TCt,"unispeech"),TCt.forEach(t),nlr=r(TBe," \u2014 "),rW=n(TBe,"A",{href:!0});var MCt=s(rW);slr=r(MCt,"UniSpeechForSequenceClassification"),MCt.forEach(t),llr=r(TBe," (UniSpeech model)"),TBe.forEach(t),ilr=i(ze),yT=n(ze,"LI",{});var MBe=s(yT);U1e=n(MBe,"STRONG",{});var ECt=s(U1e);dlr=r(ECt,"unispeech-sat"),ECt.forEach(t),clr=r(MBe," \u2014 "),tW=n(MBe,"A",{href:!0});var CCt=s(tW);flr=r(CCt,"UniSpeechSatForSequenceClassification"),CCt.forEach(t),mlr=r(MBe," (UniSpeechSat model)"),MBe.forEach(t),glr=i(ze),xT=n(ze,"LI",{});var EBe=s(xT);J1e=n(EBe,"STRONG",{});var wCt=s(J1e);hlr=r(wCt,"wav2vec2"),wCt.forEach(t),plr=r(EBe," \u2014 "),aW=n(EBe,"A",{href:!0});var ACt=s(aW);_lr=r(ACt,"Wav2Vec2ForSequenceClassification"),ACt.forEach(t),ulr=r(EBe," (Wav2Vec2 model)"),EBe.forEach(t),blr=i(ze),$T=n(ze,"LI",{});var CBe=s($T);Y1e=n(CBe,"STRONG",{});var LCt=s(Y1e);vlr=r(LCt,"wav2vec2-conformer"),LCt.forEach(t),Flr=r(CBe," \u2014 "),nW=n(CBe,"A",{href:!0});var yCt=s(nW);Tlr=r(yCt,"Wav2Vec2ConformerForSequenceClassification"),yCt.forEach(t),Mlr=r(CBe," (Wav2Vec2-Conformer model)"),CBe.forEach(t),Elr=i(ze),kT=n(ze,"LI",{});var wBe=s(kT);K1e=n(wBe,"STRONG",{});var xCt=s(K1e);Clr=r(xCt,"wavlm"),xCt.forEach(t),wlr=r(wBe," \u2014 "),sW=n(wBe,"A",{href:!0});var $Ct=s(sW);Alr=r($Ct,"WavLMForSequenceClassification"),$Ct.forEach(t),Llr=r(wBe," (WavLM model)"),wBe.forEach(t),ze.forEach(t),ylr=i(va),ST=n(va,"P",{});var ABe=s(ST);xlr=r(ABe,"The model is set in evaluation mode by default using "),Z1e=n(ABe,"CODE",{});var kCt=s(Z1e);$lr=r(kCt,"model.eval()"),kCt.forEach(t),klr=r(ABe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(ABe,"CODE",{});var SCt=s(e2e);Slr=r(SCt,"model.train()"),SCt.forEach(t),ABe.forEach(t),Rlr=i(va),T(RT.$$.fragment,va),va.forEach(t),ml.forEach(t),UOe=i(f),Ld=n(f,"H2",{class:!0});var oze=s(Ld);PT=n(oze,"A",{id:!0,class:!0,href:!0});var RCt=s(PT);o2e=n(RCt,"SPAN",{});var PCt=s(o2e);T(Ly.$$.fragment,PCt),PCt.forEach(t),RCt.forEach(t),Plr=i(oze),r2e=n(oze,"SPAN",{});var BCt=s(r2e);Blr=r(BCt,"AutoModelForAudioFrameClassification"),BCt.forEach(t),oze.forEach(t),JOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(yy.$$.fragment,gl),Ilr=i(gl),yd=n(gl,"P",{});var lre=s(yd);Nlr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lW=n(lre,"A",{href:!0});var ICt=s(lW);qlr=r(ICt,"from_pretrained()"),ICt.forEach(t),jlr=r(lre," class method or the "),iW=n(lre,"A",{href:!0});var NCt=s(iW);Dlr=r(NCt,"from_config()"),NCt.forEach(t),Glr=r(lre,` class
method.`),lre.forEach(t),Olr=i(gl),xy=n(gl,"P",{});var rze=s(xy);Vlr=r(rze,"This class cannot be instantiated directly using "),t2e=n(rze,"CODE",{});var qCt=s(t2e);Xlr=r(qCt,"__init__()"),qCt.forEach(t),zlr=r(rze," (throws an error)."),rze.forEach(t),Qlr=i(gl),Tt=n(gl,"DIV",{class:!0});var mA=s(Tt);T($y.$$.fragment,mA),Wlr=i(mA),a2e=n(mA,"P",{});var jCt=s(a2e);Hlr=r(jCt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jCt.forEach(t),Ulr=i(mA),xd=n(mA,"P",{});var ire=s(xd);Jlr=r(ire,`Note:
Loading a model from its configuration file does `),n2e=n(ire,"STRONG",{});var DCt=s(n2e);Ylr=r(DCt,"not"),DCt.forEach(t),Klr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(ire,"A",{href:!0});var GCt=s(dW);Zlr=r(GCt,"from_pretrained()"),GCt.forEach(t),eir=r(ire," to load the model weights."),ire.forEach(t),oir=i(mA),T(BT.$$.fragment,mA),mA.forEach(t),rir=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T(ky.$$.fragment,Fa),tir=i(Fa),s2e=n(Fa,"P",{});var OCt=s(s2e);air=r(OCt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OCt.forEach(t),nir=i(Fa),Ha=n(Fa,"P",{});var gA=s(Ha);sir=r(gA,"The model class to instantiate is selected based on the "),l2e=n(gA,"CODE",{});var VCt=s(l2e);lir=r(VCt,"model_type"),VCt.forEach(t),iir=r(gA,` property of the config object (either
passed as an argument or loaded from `),i2e=n(gA,"CODE",{});var XCt=s(i2e);dir=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),cir=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(gA,"CODE",{});var zCt=s(d2e);fir=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),mir=r(gA,":"),gA.forEach(t),gir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);IT=n(hl,"LI",{});var LBe=s(IT);c2e=n(LBe,"STRONG",{});var QCt=s(c2e);hir=r(QCt,"data2vec-audio"),QCt.forEach(t),pir=r(LBe," \u2014 "),cW=n(LBe,"A",{href:!0});var WCt=s(cW);_ir=r(WCt,"Data2VecAudioForAudioFrameClassification"),WCt.forEach(t),uir=r(LBe," (Data2VecAudio model)"),LBe.forEach(t),bir=i(hl),NT=n(hl,"LI",{});var yBe=s(NT);f2e=n(yBe,"STRONG",{});var HCt=s(f2e);vir=r(HCt,"unispeech-sat"),HCt.forEach(t),Fir=r(yBe," \u2014 "),fW=n(yBe,"A",{href:!0});var UCt=s(fW);Tir=r(UCt,"UniSpeechSatForAudioFrameClassification"),UCt.forEach(t),Mir=r(yBe," (UniSpeechSat model)"),yBe.forEach(t),Eir=i(hl),qT=n(hl,"LI",{});var xBe=s(qT);m2e=n(xBe,"STRONG",{});var JCt=s(m2e);Cir=r(JCt,"wav2vec2"),JCt.forEach(t),wir=r(xBe," \u2014 "),mW=n(xBe,"A",{href:!0});var YCt=s(mW);Air=r(YCt,"Wav2Vec2ForAudioFrameClassification"),YCt.forEach(t),Lir=r(xBe," (Wav2Vec2 model)"),xBe.forEach(t),yir=i(hl),jT=n(hl,"LI",{});var $Be=s(jT);g2e=n($Be,"STRONG",{});var KCt=s(g2e);xir=r(KCt,"wav2vec2-conformer"),KCt.forEach(t),$ir=r($Be," \u2014 "),gW=n($Be,"A",{href:!0});var ZCt=s(gW);kir=r(ZCt,"Wav2Vec2ConformerForAudioFrameClassification"),ZCt.forEach(t),Sir=r($Be," (Wav2Vec2-Conformer model)"),$Be.forEach(t),Rir=i(hl),DT=n(hl,"LI",{});var kBe=s(DT);h2e=n(kBe,"STRONG",{});var e5t=s(h2e);Pir=r(e5t,"wavlm"),e5t.forEach(t),Bir=r(kBe," \u2014 "),hW=n(kBe,"A",{href:!0});var o5t=s(hW);Iir=r(o5t,"WavLMForAudioFrameClassification"),o5t.forEach(t),Nir=r(kBe," (WavLM model)"),kBe.forEach(t),hl.forEach(t),qir=i(Fa),GT=n(Fa,"P",{});var SBe=s(GT);jir=r(SBe,"The model is set in evaluation mode by default using "),p2e=n(SBe,"CODE",{});var r5t=s(p2e);Dir=r(r5t,"model.eval()"),r5t.forEach(t),Gir=r(SBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(SBe,"CODE",{});var t5t=s(_2e);Oir=r(t5t,"model.train()"),t5t.forEach(t),SBe.forEach(t),Vir=i(Fa),T(OT.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),YOe=i(f),$d=n(f,"H2",{class:!0});var tze=s($d);VT=n(tze,"A",{id:!0,class:!0,href:!0});var a5t=s(VT);u2e=n(a5t,"SPAN",{});var n5t=s(u2e);T(Sy.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),Xir=i(tze),b2e=n(tze,"SPAN",{});var s5t=s(b2e);zir=r(s5t,"AutoModelForCTC"),s5t.forEach(t),tze.forEach(t),KOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Ry.$$.fragment,pl),Qir=i(pl),kd=n(pl,"P",{});var dre=s(kd);Wir=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pW=n(dre,"A",{href:!0});var l5t=s(pW);Hir=r(l5t,"from_pretrained()"),l5t.forEach(t),Uir=r(dre," class method or the "),_W=n(dre,"A",{href:!0});var i5t=s(_W);Jir=r(i5t,"from_config()"),i5t.forEach(t),Yir=r(dre,` class
method.`),dre.forEach(t),Kir=i(pl),Py=n(pl,"P",{});var aze=s(Py);Zir=r(aze,"This class cannot be instantiated directly using "),v2e=n(aze,"CODE",{});var d5t=s(v2e);edr=r(d5t,"__init__()"),d5t.forEach(t),odr=r(aze," (throws an error)."),aze.forEach(t),rdr=i(pl),Mt=n(pl,"DIV",{class:!0});var hA=s(Mt);T(By.$$.fragment,hA),tdr=i(hA),F2e=n(hA,"P",{});var c5t=s(F2e);adr=r(c5t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),c5t.forEach(t),ndr=i(hA),Sd=n(hA,"P",{});var cre=s(Sd);sdr=r(cre,`Note:
Loading a model from its configuration file does `),T2e=n(cre,"STRONG",{});var f5t=s(T2e);ldr=r(f5t,"not"),f5t.forEach(t),idr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(cre,"A",{href:!0});var m5t=s(uW);ddr=r(m5t,"from_pretrained()"),m5t.forEach(t),cdr=r(cre," to load the model weights."),cre.forEach(t),fdr=i(hA),T(XT.$$.fragment,hA),hA.forEach(t),mdr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(Iy.$$.fragment,Ta),gdr=i(Ta),M2e=n(Ta,"P",{});var g5t=s(M2e);hdr=r(g5t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),g5t.forEach(t),pdr=i(Ta),Ua=n(Ta,"P",{});var pA=s(Ua);_dr=r(pA,"The model class to instantiate is selected based on the "),E2e=n(pA,"CODE",{});var h5t=s(E2e);udr=r(h5t,"model_type"),h5t.forEach(t),bdr=r(pA,` property of the config object (either
passed as an argument or loaded from `),C2e=n(pA,"CODE",{});var p5t=s(C2e);vdr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),Fdr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(pA,"CODE",{});var _5t=s(w2e);Tdr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),Mdr=r(pA,":"),pA.forEach(t),Edr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);zT=n(Be,"LI",{});var RBe=s(zT);A2e=n(RBe,"STRONG",{});var u5t=s(A2e);Cdr=r(u5t,"data2vec-audio"),u5t.forEach(t),wdr=r(RBe," \u2014 "),bW=n(RBe,"A",{href:!0});var b5t=s(bW);Adr=r(b5t,"Data2VecAudioForCTC"),b5t.forEach(t),Ldr=r(RBe," (Data2VecAudio model)"),RBe.forEach(t),ydr=i(Be),QT=n(Be,"LI",{});var PBe=s(QT);L2e=n(PBe,"STRONG",{});var v5t=s(L2e);xdr=r(v5t,"hubert"),v5t.forEach(t),$dr=r(PBe," \u2014 "),vW=n(PBe,"A",{href:!0});var F5t=s(vW);kdr=r(F5t,"HubertForCTC"),F5t.forEach(t),Sdr=r(PBe," (Hubert model)"),PBe.forEach(t),Rdr=i(Be),WT=n(Be,"LI",{});var BBe=s(WT);y2e=n(BBe,"STRONG",{});var T5t=s(y2e);Pdr=r(T5t,"mctct"),T5t.forEach(t),Bdr=r(BBe," \u2014 "),FW=n(BBe,"A",{href:!0});var M5t=s(FW);Idr=r(M5t,"MCTCTForCTC"),M5t.forEach(t),Ndr=r(BBe," (M-CTC-T model)"),BBe.forEach(t),qdr=i(Be),HT=n(Be,"LI",{});var IBe=s(HT);x2e=n(IBe,"STRONG",{});var E5t=s(x2e);jdr=r(E5t,"sew"),E5t.forEach(t),Ddr=r(IBe," \u2014 "),TW=n(IBe,"A",{href:!0});var C5t=s(TW);Gdr=r(C5t,"SEWForCTC"),C5t.forEach(t),Odr=r(IBe," (SEW model)"),IBe.forEach(t),Vdr=i(Be),UT=n(Be,"LI",{});var NBe=s(UT);$2e=n(NBe,"STRONG",{});var w5t=s($2e);Xdr=r(w5t,"sew-d"),w5t.forEach(t),zdr=r(NBe," \u2014 "),MW=n(NBe,"A",{href:!0});var A5t=s(MW);Qdr=r(A5t,"SEWDForCTC"),A5t.forEach(t),Wdr=r(NBe," (SEW-D model)"),NBe.forEach(t),Hdr=i(Be),JT=n(Be,"LI",{});var qBe=s(JT);k2e=n(qBe,"STRONG",{});var L5t=s(k2e);Udr=r(L5t,"unispeech"),L5t.forEach(t),Jdr=r(qBe," \u2014 "),EW=n(qBe,"A",{href:!0});var y5t=s(EW);Ydr=r(y5t,"UniSpeechForCTC"),y5t.forEach(t),Kdr=r(qBe," (UniSpeech model)"),qBe.forEach(t),Zdr=i(Be),YT=n(Be,"LI",{});var jBe=s(YT);S2e=n(jBe,"STRONG",{});var x5t=s(S2e);ecr=r(x5t,"unispeech-sat"),x5t.forEach(t),ocr=r(jBe," \u2014 "),CW=n(jBe,"A",{href:!0});var $5t=s(CW);rcr=r($5t,"UniSpeechSatForCTC"),$5t.forEach(t),tcr=r(jBe," (UniSpeechSat model)"),jBe.forEach(t),acr=i(Be),KT=n(Be,"LI",{});var DBe=s(KT);R2e=n(DBe,"STRONG",{});var k5t=s(R2e);ncr=r(k5t,"wav2vec2"),k5t.forEach(t),scr=r(DBe," \u2014 "),wW=n(DBe,"A",{href:!0});var S5t=s(wW);lcr=r(S5t,"Wav2Vec2ForCTC"),S5t.forEach(t),icr=r(DBe," (Wav2Vec2 model)"),DBe.forEach(t),dcr=i(Be),ZT=n(Be,"LI",{});var GBe=s(ZT);P2e=n(GBe,"STRONG",{});var R5t=s(P2e);ccr=r(R5t,"wav2vec2-conformer"),R5t.forEach(t),fcr=r(GBe," \u2014 "),AW=n(GBe,"A",{href:!0});var P5t=s(AW);mcr=r(P5t,"Wav2Vec2ConformerForCTC"),P5t.forEach(t),gcr=r(GBe," (Wav2Vec2-Conformer model)"),GBe.forEach(t),hcr=i(Be),e9=n(Be,"LI",{});var OBe=s(e9);B2e=n(OBe,"STRONG",{});var B5t=s(B2e);pcr=r(B5t,"wavlm"),B5t.forEach(t),_cr=r(OBe," \u2014 "),LW=n(OBe,"A",{href:!0});var I5t=s(LW);ucr=r(I5t,"WavLMForCTC"),I5t.forEach(t),bcr=r(OBe," (WavLM model)"),OBe.forEach(t),Be.forEach(t),vcr=i(Ta),o9=n(Ta,"P",{});var VBe=s(o9);Fcr=r(VBe,"The model is set in evaluation mode by default using "),I2e=n(VBe,"CODE",{});var N5t=s(I2e);Tcr=r(N5t,"model.eval()"),N5t.forEach(t),Mcr=r(VBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=n(VBe,"CODE",{});var q5t=s(N2e);Ecr=r(q5t,"model.train()"),q5t.forEach(t),VBe.forEach(t),Ccr=i(Ta),T(r9.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),ZOe=i(f),Rd=n(f,"H2",{class:!0});var nze=s(Rd);t9=n(nze,"A",{id:!0,class:!0,href:!0});var j5t=s(t9);q2e=n(j5t,"SPAN",{});var D5t=s(q2e);T(Ny.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),wcr=i(nze),j2e=n(nze,"SPAN",{});var G5t=s(j2e);Acr=r(G5t,"AutoModelForSpeechSeq2Seq"),G5t.forEach(t),nze.forEach(t),eVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(qy.$$.fragment,_l),Lcr=i(_l),Pd=n(_l,"P",{});var fre=s(Pd);ycr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yW=n(fre,"A",{href:!0});var O5t=s(yW);xcr=r(O5t,"from_pretrained()"),O5t.forEach(t),$cr=r(fre," class method or the "),xW=n(fre,"A",{href:!0});var V5t=s(xW);kcr=r(V5t,"from_config()"),V5t.forEach(t),Scr=r(fre,` class
method.`),fre.forEach(t),Rcr=i(_l),jy=n(_l,"P",{});var sze=s(jy);Pcr=r(sze,"This class cannot be instantiated directly using "),D2e=n(sze,"CODE",{});var X5t=s(D2e);Bcr=r(X5t,"__init__()"),X5t.forEach(t),Icr=r(sze," (throws an error)."),sze.forEach(t),Ncr=i(_l),Et=n(_l,"DIV",{class:!0});var _A=s(Et);T(Dy.$$.fragment,_A),qcr=i(_A),G2e=n(_A,"P",{});var z5t=s(G2e);jcr=r(z5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z5t.forEach(t),Dcr=i(_A),Bd=n(_A,"P",{});var mre=s(Bd);Gcr=r(mre,`Note:
Loading a model from its configuration file does `),O2e=n(mre,"STRONG",{});var Q5t=s(O2e);Ocr=r(Q5t,"not"),Q5t.forEach(t),Vcr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(mre,"A",{href:!0});var W5t=s($W);Xcr=r(W5t,"from_pretrained()"),W5t.forEach(t),zcr=r(mre," to load the model weights."),mre.forEach(t),Qcr=i(_A),T(a9.$$.fragment,_A),_A.forEach(t),Wcr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(Gy.$$.fragment,Ma),Hcr=i(Ma),V2e=n(Ma,"P",{});var H5t=s(V2e);Ucr=r(H5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),H5t.forEach(t),Jcr=i(Ma),Ja=n(Ma,"P",{});var uA=s(Ja);Ycr=r(uA,"The model class to instantiate is selected based on the "),X2e=n(uA,"CODE",{});var U5t=s(X2e);Kcr=r(U5t,"model_type"),U5t.forEach(t),Zcr=r(uA,` property of the config object (either
passed as an argument or loaded from `),z2e=n(uA,"CODE",{});var J5t=s(z2e);efr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),ofr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(uA,"CODE",{});var Y5t=s(Q2e);rfr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),tfr=r(uA,":"),uA.forEach(t),afr=i(Ma),Oy=n(Ma,"UL",{});var lze=s(Oy);n9=n(lze,"LI",{});var XBe=s(n9);W2e=n(XBe,"STRONG",{});var K5t=s(W2e);nfr=r(K5t,"speech-encoder-decoder"),K5t.forEach(t),sfr=r(XBe," \u2014 "),kW=n(XBe,"A",{href:!0});var Z5t=s(kW);lfr=r(Z5t,"SpeechEncoderDecoderModel"),Z5t.forEach(t),ifr=r(XBe," (Speech Encoder decoder model)"),XBe.forEach(t),dfr=i(lze),s9=n(lze,"LI",{});var zBe=s(s9);H2e=n(zBe,"STRONG",{});var e3t=s(H2e);cfr=r(e3t,"speech_to_text"),e3t.forEach(t),ffr=r(zBe," \u2014 "),SW=n(zBe,"A",{href:!0});var o3t=s(SW);mfr=r(o3t,"Speech2TextForConditionalGeneration"),o3t.forEach(t),gfr=r(zBe," (Speech2Text model)"),zBe.forEach(t),lze.forEach(t),hfr=i(Ma),l9=n(Ma,"P",{});var QBe=s(l9);pfr=r(QBe,"The model is set in evaluation mode by default using "),U2e=n(QBe,"CODE",{});var r3t=s(U2e);_fr=r(r3t,"model.eval()"),r3t.forEach(t),ufr=r(QBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=n(QBe,"CODE",{});var t3t=s(J2e);bfr=r(t3t,"model.train()"),t3t.forEach(t),QBe.forEach(t),vfr=i(Ma),T(i9.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),oVe=i(f),Id=n(f,"H2",{class:!0});var ize=s(Id);d9=n(ize,"A",{id:!0,class:!0,href:!0});var a3t=s(d9);Y2e=n(a3t,"SPAN",{});var n3t=s(Y2e);T(Vy.$$.fragment,n3t),n3t.forEach(t),a3t.forEach(t),Ffr=i(ize),K2e=n(ize,"SPAN",{});var s3t=s(K2e);Tfr=r(s3t,"AutoModelForAudioXVector"),s3t.forEach(t),ize.forEach(t),rVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(Xy.$$.fragment,ul),Mfr=i(ul),Nd=n(ul,"P",{});var gre=s(Nd);Efr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RW=n(gre,"A",{href:!0});var l3t=s(RW);Cfr=r(l3t,"from_pretrained()"),l3t.forEach(t),wfr=r(gre," class method or the "),PW=n(gre,"A",{href:!0});var i3t=s(PW);Afr=r(i3t,"from_config()"),i3t.forEach(t),Lfr=r(gre,` class
method.`),gre.forEach(t),yfr=i(ul),zy=n(ul,"P",{});var dze=s(zy);xfr=r(dze,"This class cannot be instantiated directly using "),Z2e=n(dze,"CODE",{});var d3t=s(Z2e);$fr=r(d3t,"__init__()"),d3t.forEach(t),kfr=r(dze," (throws an error)."),dze.forEach(t),Sfr=i(ul),Ct=n(ul,"DIV",{class:!0});var bA=s(Ct);T(Qy.$$.fragment,bA),Rfr=i(bA),ebe=n(bA,"P",{});var c3t=s(ebe);Pfr=r(c3t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),c3t.forEach(t),Bfr=i(bA),qd=n(bA,"P",{});var hre=s(qd);Ifr=r(hre,`Note:
Loading a model from its configuration file does `),obe=n(hre,"STRONG",{});var f3t=s(obe);Nfr=r(f3t,"not"),f3t.forEach(t),qfr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(hre,"A",{href:!0});var m3t=s(BW);jfr=r(m3t,"from_pretrained()"),m3t.forEach(t),Dfr=r(hre," to load the model weights."),hre.forEach(t),Gfr=i(bA),T(c9.$$.fragment,bA),bA.forEach(t),Ofr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(Wy.$$.fragment,Ea),Vfr=i(Ea),rbe=n(Ea,"P",{});var g3t=s(rbe);Xfr=r(g3t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),g3t.forEach(t),zfr=i(Ea),Ya=n(Ea,"P",{});var vA=s(Ya);Qfr=r(vA,"The model class to instantiate is selected based on the "),tbe=n(vA,"CODE",{});var h3t=s(tbe);Wfr=r(h3t,"model_type"),h3t.forEach(t),Hfr=r(vA,` property of the config object (either
passed as an argument or loaded from `),abe=n(vA,"CODE",{});var p3t=s(abe);Ufr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),Jfr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(vA,"CODE",{});var _3t=s(nbe);Yfr=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),Kfr=r(vA,":"),vA.forEach(t),Zfr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);f9=n(bl,"LI",{});var WBe=s(f9);sbe=n(WBe,"STRONG",{});var u3t=s(sbe);emr=r(u3t,"data2vec-audio"),u3t.forEach(t),omr=r(WBe," \u2014 "),IW=n(WBe,"A",{href:!0});var b3t=s(IW);rmr=r(b3t,"Data2VecAudioForXVector"),b3t.forEach(t),tmr=r(WBe," (Data2VecAudio model)"),WBe.forEach(t),amr=i(bl),m9=n(bl,"LI",{});var HBe=s(m9);lbe=n(HBe,"STRONG",{});var v3t=s(lbe);nmr=r(v3t,"unispeech-sat"),v3t.forEach(t),smr=r(HBe," \u2014 "),NW=n(HBe,"A",{href:!0});var F3t=s(NW);lmr=r(F3t,"UniSpeechSatForXVector"),F3t.forEach(t),imr=r(HBe," (UniSpeechSat model)"),HBe.forEach(t),dmr=i(bl),g9=n(bl,"LI",{});var UBe=s(g9);ibe=n(UBe,"STRONG",{});var T3t=s(ibe);cmr=r(T3t,"wav2vec2"),T3t.forEach(t),fmr=r(UBe," \u2014 "),qW=n(UBe,"A",{href:!0});var M3t=s(qW);mmr=r(M3t,"Wav2Vec2ForXVector"),M3t.forEach(t),gmr=r(UBe," (Wav2Vec2 model)"),UBe.forEach(t),hmr=i(bl),h9=n(bl,"LI",{});var JBe=s(h9);dbe=n(JBe,"STRONG",{});var E3t=s(dbe);pmr=r(E3t,"wav2vec2-conformer"),E3t.forEach(t),_mr=r(JBe," \u2014 "),jW=n(JBe,"A",{href:!0});var C3t=s(jW);umr=r(C3t,"Wav2Vec2ConformerForXVector"),C3t.forEach(t),bmr=r(JBe," (Wav2Vec2-Conformer model)"),JBe.forEach(t),vmr=i(bl),p9=n(bl,"LI",{});var YBe=s(p9);cbe=n(YBe,"STRONG",{});var w3t=s(cbe);Fmr=r(w3t,"wavlm"),w3t.forEach(t),Tmr=r(YBe," \u2014 "),DW=n(YBe,"A",{href:!0});var A3t=s(DW);Mmr=r(A3t,"WavLMForXVector"),A3t.forEach(t),Emr=r(YBe," (WavLM model)"),YBe.forEach(t),bl.forEach(t),Cmr=i(Ea),_9=n(Ea,"P",{});var KBe=s(_9);wmr=r(KBe,"The model is set in evaluation mode by default using "),fbe=n(KBe,"CODE",{});var L3t=s(fbe);Amr=r(L3t,"model.eval()"),L3t.forEach(t),Lmr=r(KBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(KBe,"CODE",{});var y3t=s(mbe);ymr=r(y3t,"model.train()"),y3t.forEach(t),KBe.forEach(t),xmr=i(Ea),T(u9.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),tVe=i(f),jd=n(f,"H2",{class:!0});var cze=s(jd);b9=n(cze,"A",{id:!0,class:!0,href:!0});var x3t=s(b9);gbe=n(x3t,"SPAN",{});var $3t=s(gbe);T(Hy.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),$mr=i(cze),hbe=n(cze,"SPAN",{});var k3t=s(hbe);kmr=r(k3t,"AutoModelForMaskedImageModeling"),k3t.forEach(t),cze.forEach(t),aVe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Uy.$$.fragment,vl),Smr=i(vl),Dd=n(vl,"P",{});var pre=s(Dd);Rmr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GW=n(pre,"A",{href:!0});var S3t=s(GW);Pmr=r(S3t,"from_pretrained()"),S3t.forEach(t),Bmr=r(pre," class method or the "),OW=n(pre,"A",{href:!0});var R3t=s(OW);Imr=r(R3t,"from_config()"),R3t.forEach(t),Nmr=r(pre,` class
method.`),pre.forEach(t),qmr=i(vl),Jy=n(vl,"P",{});var fze=s(Jy);jmr=r(fze,"This class cannot be instantiated directly using "),pbe=n(fze,"CODE",{});var P3t=s(pbe);Dmr=r(P3t,"__init__()"),P3t.forEach(t),Gmr=r(fze," (throws an error)."),fze.forEach(t),Omr=i(vl),wt=n(vl,"DIV",{class:!0});var FA=s(wt);T(Yy.$$.fragment,FA),Vmr=i(FA),_be=n(FA,"P",{});var B3t=s(_be);Xmr=r(B3t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),B3t.forEach(t),zmr=i(FA),Gd=n(FA,"P",{});var _re=s(Gd);Qmr=r(_re,`Note:
Loading a model from its configuration file does `),ube=n(_re,"STRONG",{});var I3t=s(ube);Wmr=r(I3t,"not"),I3t.forEach(t),Hmr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(_re,"A",{href:!0});var N3t=s(VW);Umr=r(N3t,"from_pretrained()"),N3t.forEach(t),Jmr=r(_re," to load the model weights."),_re.forEach(t),Ymr=i(FA),T(v9.$$.fragment,FA),FA.forEach(t),Kmr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(Ky.$$.fragment,Ca),Zmr=i(Ca),bbe=n(Ca,"P",{});var q3t=s(bbe);egr=r(q3t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),q3t.forEach(t),ogr=i(Ca),Ka=n(Ca,"P",{});var TA=s(Ka);rgr=r(TA,"The model class to instantiate is selected based on the "),vbe=n(TA,"CODE",{});var j3t=s(vbe);tgr=r(j3t,"model_type"),j3t.forEach(t),agr=r(TA,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(TA,"CODE",{});var D3t=s(Fbe);ngr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),sgr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(TA,"CODE",{});var G3t=s(Tbe);lgr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),igr=r(TA,":"),TA.forEach(t),dgr=i(Ca),Od=n(Ca,"UL",{});var ure=s(Od);F9=n(ure,"LI",{});var ZBe=s(F9);Mbe=n(ZBe,"STRONG",{});var O3t=s(Mbe);cgr=r(O3t,"deit"),O3t.forEach(t),fgr=r(ZBe," \u2014 "),XW=n(ZBe,"A",{href:!0});var V3t=s(XW);mgr=r(V3t,"DeiTForMaskedImageModeling"),V3t.forEach(t),ggr=r(ZBe," (DeiT model)"),ZBe.forEach(t),hgr=i(ure),T9=n(ure,"LI",{});var eIe=s(T9);Ebe=n(eIe,"STRONG",{});var X3t=s(Ebe);pgr=r(X3t,"swin"),X3t.forEach(t),_gr=r(eIe," \u2014 "),zW=n(eIe,"A",{href:!0});var z3t=s(zW);ugr=r(z3t,"SwinForMaskedImageModeling"),z3t.forEach(t),bgr=r(eIe," (Swin Transformer model)"),eIe.forEach(t),vgr=i(ure),M9=n(ure,"LI",{});var oIe=s(M9);Cbe=n(oIe,"STRONG",{});var Q3t=s(Cbe);Fgr=r(Q3t,"vit"),Q3t.forEach(t),Tgr=r(oIe," \u2014 "),QW=n(oIe,"A",{href:!0});var W3t=s(QW);Mgr=r(W3t,"ViTForMaskedImageModeling"),W3t.forEach(t),Egr=r(oIe," (ViT model)"),oIe.forEach(t),ure.forEach(t),Cgr=i(Ca),E9=n(Ca,"P",{});var rIe=s(E9);wgr=r(rIe,"The model is set in evaluation mode by default using "),wbe=n(rIe,"CODE",{});var H3t=s(wbe);Agr=r(H3t,"model.eval()"),H3t.forEach(t),Lgr=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(rIe,"CODE",{});var U3t=s(Abe);ygr=r(U3t,"model.train()"),U3t.forEach(t),rIe.forEach(t),xgr=i(Ca),T(C9.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),nVe=i(f),Vd=n(f,"H2",{class:!0});var mze=s(Vd);w9=n(mze,"A",{id:!0,class:!0,href:!0});var J3t=s(w9);Lbe=n(J3t,"SPAN",{});var Y3t=s(Lbe);T(Zy.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),$gr=i(mze),ybe=n(mze,"SPAN",{});var K3t=s(ybe);kgr=r(K3t,"AutoModelForObjectDetection"),K3t.forEach(t),mze.forEach(t),sVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(e8.$$.fragment,Fl),Sgr=i(Fl),Xd=n(Fl,"P",{});var bre=s(Xd);Rgr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),WW=n(bre,"A",{href:!0});var Z3t=s(WW);Pgr=r(Z3t,"from_pretrained()"),Z3t.forEach(t),Bgr=r(bre," class method or the "),HW=n(bre,"A",{href:!0});var e0t=s(HW);Igr=r(e0t,"from_config()"),e0t.forEach(t),Ngr=r(bre,` class
method.`),bre.forEach(t),qgr=i(Fl),o8=n(Fl,"P",{});var gze=s(o8);jgr=r(gze,"This class cannot be instantiated directly using "),xbe=n(gze,"CODE",{});var o0t=s(xbe);Dgr=r(o0t,"__init__()"),o0t.forEach(t),Ggr=r(gze," (throws an error)."),gze.forEach(t),Ogr=i(Fl),At=n(Fl,"DIV",{class:!0});var MA=s(At);T(r8.$$.fragment,MA),Vgr=i(MA),$be=n(MA,"P",{});var r0t=s($be);Xgr=r(r0t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),r0t.forEach(t),zgr=i(MA),zd=n(MA,"P",{});var vre=s(zd);Qgr=r(vre,`Note:
Loading a model from its configuration file does `),kbe=n(vre,"STRONG",{});var t0t=s(kbe);Wgr=r(t0t,"not"),t0t.forEach(t),Hgr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(vre,"A",{href:!0});var a0t=s(UW);Ugr=r(a0t,"from_pretrained()"),a0t.forEach(t),Jgr=r(vre," to load the model weights."),vre.forEach(t),Ygr=i(MA),T(A9.$$.fragment,MA),MA.forEach(t),Kgr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(t8.$$.fragment,wa),Zgr=i(wa),Sbe=n(wa,"P",{});var n0t=s(Sbe);ehr=r(n0t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),n0t.forEach(t),ohr=i(wa),Za=n(wa,"P",{});var EA=s(Za);rhr=r(EA,"The model class to instantiate is selected based on the "),Rbe=n(EA,"CODE",{});var s0t=s(Rbe);thr=r(s0t,"model_type"),s0t.forEach(t),ahr=r(EA,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(EA,"CODE",{});var l0t=s(Pbe);nhr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),shr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(EA,"CODE",{});var i0t=s(Bbe);lhr=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),ihr=r(EA,":"),EA.forEach(t),dhr=i(wa),a8=n(wa,"UL",{});var hze=s(a8);L9=n(hze,"LI",{});var tIe=s(L9);Ibe=n(tIe,"STRONG",{});var d0t=s(Ibe);chr=r(d0t,"detr"),d0t.forEach(t),fhr=r(tIe," \u2014 "),JW=n(tIe,"A",{href:!0});var c0t=s(JW);mhr=r(c0t,"DetrForObjectDetection"),c0t.forEach(t),ghr=r(tIe," (DETR model)"),tIe.forEach(t),hhr=i(hze),y9=n(hze,"LI",{});var aIe=s(y9);Nbe=n(aIe,"STRONG",{});var f0t=s(Nbe);phr=r(f0t,"yolos"),f0t.forEach(t),_hr=r(aIe," \u2014 "),YW=n(aIe,"A",{href:!0});var m0t=s(YW);uhr=r(m0t,"YolosForObjectDetection"),m0t.forEach(t),bhr=r(aIe," (YOLOS model)"),aIe.forEach(t),hze.forEach(t),vhr=i(wa),x9=n(wa,"P",{});var nIe=s(x9);Fhr=r(nIe,"The model is set in evaluation mode by default using "),qbe=n(nIe,"CODE",{});var g0t=s(qbe);Thr=r(g0t,"model.eval()"),g0t.forEach(t),Mhr=r(nIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(nIe,"CODE",{});var h0t=s(jbe);Ehr=r(h0t,"model.train()"),h0t.forEach(t),nIe.forEach(t),Chr=i(wa),T($9.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),lVe=i(f),Qd=n(f,"H2",{class:!0});var pze=s(Qd);k9=n(pze,"A",{id:!0,class:!0,href:!0});var p0t=s(k9);Dbe=n(p0t,"SPAN",{});var _0t=s(Dbe);T(n8.$$.fragment,_0t),_0t.forEach(t),p0t.forEach(t),whr=i(pze),Gbe=n(pze,"SPAN",{});var u0t=s(Gbe);Ahr=r(u0t,"AutoModelForImageSegmentation"),u0t.forEach(t),pze.forEach(t),iVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(s8.$$.fragment,Tl),Lhr=i(Tl),Wd=n(Tl,"P",{});var Fre=s(Wd);yhr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),KW=n(Fre,"A",{href:!0});var b0t=s(KW);xhr=r(b0t,"from_pretrained()"),b0t.forEach(t),$hr=r(Fre," class method or the "),ZW=n(Fre,"A",{href:!0});var v0t=s(ZW);khr=r(v0t,"from_config()"),v0t.forEach(t),Shr=r(Fre,` class
method.`),Fre.forEach(t),Rhr=i(Tl),l8=n(Tl,"P",{});var _ze=s(l8);Phr=r(_ze,"This class cannot be instantiated directly using "),Obe=n(_ze,"CODE",{});var F0t=s(Obe);Bhr=r(F0t,"__init__()"),F0t.forEach(t),Ihr=r(_ze," (throws an error)."),_ze.forEach(t),Nhr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var CA=s(Lt);T(i8.$$.fragment,CA),qhr=i(CA),Vbe=n(CA,"P",{});var T0t=s(Vbe);jhr=r(T0t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),T0t.forEach(t),Dhr=i(CA),Hd=n(CA,"P",{});var Tre=s(Hd);Ghr=r(Tre,`Note:
Loading a model from its configuration file does `),Xbe=n(Tre,"STRONG",{});var M0t=s(Xbe);Ohr=r(M0t,"not"),M0t.forEach(t),Vhr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(Tre,"A",{href:!0});var E0t=s(eH);Xhr=r(E0t,"from_pretrained()"),E0t.forEach(t),zhr=r(Tre," to load the model weights."),Tre.forEach(t),Qhr=i(CA),T(S9.$$.fragment,CA),CA.forEach(t),Whr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(d8.$$.fragment,Aa),Hhr=i(Aa),zbe=n(Aa,"P",{});var C0t=s(zbe);Uhr=r(C0t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),C0t.forEach(t),Jhr=i(Aa),en=n(Aa,"P",{});var wA=s(en);Yhr=r(wA,"The model class to instantiate is selected based on the "),Qbe=n(wA,"CODE",{});var w0t=s(Qbe);Khr=r(w0t,"model_type"),w0t.forEach(t),Zhr=r(wA,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(wA,"CODE",{});var A0t=s(Wbe);epr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),opr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(wA,"CODE",{});var L0t=s(Hbe);rpr=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),tpr=r(wA,":"),wA.forEach(t),apr=i(Aa),Ube=n(Aa,"UL",{});var y0t=s(Ube);R9=n(y0t,"LI",{});var sIe=s(R9);Jbe=n(sIe,"STRONG",{});var x0t=s(Jbe);npr=r(x0t,"detr"),x0t.forEach(t),spr=r(sIe," \u2014 "),oH=n(sIe,"A",{href:!0});var $0t=s(oH);lpr=r($0t,"DetrForSegmentation"),$0t.forEach(t),ipr=r(sIe," (DETR model)"),sIe.forEach(t),y0t.forEach(t),dpr=i(Aa),P9=n(Aa,"P",{});var lIe=s(P9);cpr=r(lIe,"The model is set in evaluation mode by default using "),Ybe=n(lIe,"CODE",{});var k0t=s(Ybe);fpr=r(k0t,"model.eval()"),k0t.forEach(t),mpr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(lIe,"CODE",{});var S0t=s(Kbe);gpr=r(S0t,"model.train()"),S0t.forEach(t),lIe.forEach(t),hpr=i(Aa),T(B9.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),dVe=i(f),Ud=n(f,"H2",{class:!0});var uze=s(Ud);I9=n(uze,"A",{id:!0,class:!0,href:!0});var R0t=s(I9);Zbe=n(R0t,"SPAN",{});var P0t=s(Zbe);T(c8.$$.fragment,P0t),P0t.forEach(t),R0t.forEach(t),ppr=i(uze),eve=n(uze,"SPAN",{});var B0t=s(eve);_pr=r(B0t,"AutoModelForSemanticSegmentation"),B0t.forEach(t),uze.forEach(t),cVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(f8.$$.fragment,Ml),upr=i(Ml),Jd=n(Ml,"P",{});var Mre=s(Jd);bpr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),rH=n(Mre,"A",{href:!0});var I0t=s(rH);vpr=r(I0t,"from_pretrained()"),I0t.forEach(t),Fpr=r(Mre," class method or the "),tH=n(Mre,"A",{href:!0});var N0t=s(tH);Tpr=r(N0t,"from_config()"),N0t.forEach(t),Mpr=r(Mre,` class
method.`),Mre.forEach(t),Epr=i(Ml),m8=n(Ml,"P",{});var bze=s(m8);Cpr=r(bze,"This class cannot be instantiated directly using "),ove=n(bze,"CODE",{});var q0t=s(ove);wpr=r(q0t,"__init__()"),q0t.forEach(t),Apr=r(bze," (throws an error)."),bze.forEach(t),Lpr=i(Ml),yt=n(Ml,"DIV",{class:!0});var AA=s(yt);T(g8.$$.fragment,AA),ypr=i(AA),rve=n(AA,"P",{});var j0t=s(rve);xpr=r(j0t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),j0t.forEach(t),$pr=i(AA),Yd=n(AA,"P",{});var Ere=s(Yd);kpr=r(Ere,`Note:
Loading a model from its configuration file does `),tve=n(Ere,"STRONG",{});var D0t=s(tve);Spr=r(D0t,"not"),D0t.forEach(t),Rpr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(Ere,"A",{href:!0});var G0t=s(aH);Ppr=r(G0t,"from_pretrained()"),G0t.forEach(t),Bpr=r(Ere," to load the model weights."),Ere.forEach(t),Ipr=i(AA),T(N9.$$.fragment,AA),AA.forEach(t),Npr=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(h8.$$.fragment,La),qpr=i(La),ave=n(La,"P",{});var O0t=s(ave);jpr=r(O0t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),O0t.forEach(t),Dpr=i(La),on=n(La,"P",{});var LA=s(on);Gpr=r(LA,"The model class to instantiate is selected based on the "),nve=n(LA,"CODE",{});var V0t=s(nve);Opr=r(V0t,"model_type"),V0t.forEach(t),Vpr=r(LA,` property of the config object (either
passed as an argument or loaded from `),sve=n(LA,"CODE",{});var X0t=s(sve);Xpr=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),zpr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(LA,"CODE",{});var z0t=s(lve);Qpr=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),Wpr=r(LA,":"),LA.forEach(t),Hpr=i(La),rn=n(La,"UL",{});var yA=s(rn);q9=n(yA,"LI",{});var iIe=s(q9);ive=n(iIe,"STRONG",{});var Q0t=s(ive);Upr=r(Q0t,"beit"),Q0t.forEach(t),Jpr=r(iIe," \u2014 "),nH=n(iIe,"A",{href:!0});var W0t=s(nH);Ypr=r(W0t,"BeitForSemanticSegmentation"),W0t.forEach(t),Kpr=r(iIe," (BEiT model)"),iIe.forEach(t),Zpr=i(yA),j9=n(yA,"LI",{});var dIe=s(j9);dve=n(dIe,"STRONG",{});var H0t=s(dve);e_r=r(H0t,"data2vec-vision"),H0t.forEach(t),o_r=r(dIe," \u2014 "),sH=n(dIe,"A",{href:!0});var U0t=s(sH);r_r=r(U0t,"Data2VecVisionForSemanticSegmentation"),U0t.forEach(t),t_r=r(dIe," (Data2VecVision model)"),dIe.forEach(t),a_r=i(yA),D9=n(yA,"LI",{});var cIe=s(D9);cve=n(cIe,"STRONG",{});var J0t=s(cve);n_r=r(J0t,"dpt"),J0t.forEach(t),s_r=r(cIe," \u2014 "),lH=n(cIe,"A",{href:!0});var Y0t=s(lH);l_r=r(Y0t,"DPTForSemanticSegmentation"),Y0t.forEach(t),i_r=r(cIe," (DPT model)"),cIe.forEach(t),d_r=i(yA),G9=n(yA,"LI",{});var fIe=s(G9);fve=n(fIe,"STRONG",{});var K0t=s(fve);c_r=r(K0t,"segformer"),K0t.forEach(t),f_r=r(fIe," \u2014 "),iH=n(fIe,"A",{href:!0});var Z0t=s(iH);m_r=r(Z0t,"SegformerForSemanticSegmentation"),Z0t.forEach(t),g_r=r(fIe," (SegFormer model)"),fIe.forEach(t),yA.forEach(t),h_r=i(La),O9=n(La,"P",{});var mIe=s(O9);p_r=r(mIe,"The model is set in evaluation mode by default using "),mve=n(mIe,"CODE",{});var ewt=s(mve);__r=r(ewt,"model.eval()"),ewt.forEach(t),u_r=r(mIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=n(mIe,"CODE",{});var owt=s(gve);b_r=r(owt,"model.train()"),owt.forEach(t),mIe.forEach(t),v_r=i(La),T(V9.$$.fragment,La),La.forEach(t),Ml.forEach(t),fVe=i(f),Kd=n(f,"H2",{class:!0});var vze=s(Kd);X9=n(vze,"A",{id:!0,class:!0,href:!0});var rwt=s(X9);hve=n(rwt,"SPAN",{});var twt=s(hve);T(p8.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),F_r=i(vze),pve=n(vze,"SPAN",{});var awt=s(pve);T_r=r(awt,"AutoModelForInstanceSegmentation"),awt.forEach(t),vze.forEach(t),mVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(_8.$$.fragment,El),M_r=i(El),Zd=n(El,"P",{});var Cre=s(Zd);E_r=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),dH=n(Cre,"A",{href:!0});var nwt=s(dH);C_r=r(nwt,"from_pretrained()"),nwt.forEach(t),w_r=r(Cre," class method or the "),cH=n(Cre,"A",{href:!0});var swt=s(cH);A_r=r(swt,"from_config()"),swt.forEach(t),L_r=r(Cre,` class
method.`),Cre.forEach(t),y_r=i(El),u8=n(El,"P",{});var Fze=s(u8);x_r=r(Fze,"This class cannot be instantiated directly using "),_ve=n(Fze,"CODE",{});var lwt=s(_ve);$_r=r(lwt,"__init__()"),lwt.forEach(t),k_r=r(Fze," (throws an error)."),Fze.forEach(t),S_r=i(El),xt=n(El,"DIV",{class:!0});var xA=s(xt);T(b8.$$.fragment,xA),R_r=i(xA),uve=n(xA,"P",{});var iwt=s(uve);P_r=r(iwt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),iwt.forEach(t),B_r=i(xA),ec=n(xA,"P",{});var wre=s(ec);I_r=r(wre,`Note:
Loading a model from its configuration file does `),bve=n(wre,"STRONG",{});var dwt=s(bve);N_r=r(dwt,"not"),dwt.forEach(t),q_r=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(wre,"A",{href:!0});var cwt=s(fH);j_r=r(cwt,"from_pretrained()"),cwt.forEach(t),D_r=r(wre," to load the model weights."),wre.forEach(t),G_r=i(xA),T(z9.$$.fragment,xA),xA.forEach(t),O_r=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(v8.$$.fragment,ya),V_r=i(ya),vve=n(ya,"P",{});var fwt=s(vve);X_r=r(fwt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fwt.forEach(t),z_r=i(ya),tn=n(ya,"P",{});var $A=s(tn);Q_r=r($A,"The model class to instantiate is selected based on the "),Fve=n($A,"CODE",{});var mwt=s(Fve);W_r=r(mwt,"model_type"),mwt.forEach(t),H_r=r($A,` property of the config object (either
passed as an argument or loaded from `),Tve=n($A,"CODE",{});var gwt=s(Tve);U_r=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),J_r=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n($A,"CODE",{});var hwt=s(Mve);Y_r=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),K_r=r($A,":"),$A.forEach(t),Z_r=i(ya),Eve=n(ya,"UL",{});var pwt=s(Eve);Q9=n(pwt,"LI",{});var gIe=s(Q9);Cve=n(gIe,"STRONG",{});var _wt=s(Cve);eur=r(_wt,"maskformer"),_wt.forEach(t),our=r(gIe," \u2014 "),mH=n(gIe,"A",{href:!0});var uwt=s(mH);rur=r(uwt,"MaskFormerForInstanceSegmentation"),uwt.forEach(t),tur=r(gIe," (MaskFormer model)"),gIe.forEach(t),pwt.forEach(t),aur=i(ya),W9=n(ya,"P",{});var hIe=s(W9);nur=r(hIe,"The model is set in evaluation mode by default using "),wve=n(hIe,"CODE",{});var bwt=s(wve);sur=r(bwt,"model.eval()"),bwt.forEach(t),lur=r(hIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(hIe,"CODE",{});var vwt=s(Ave);iur=r(vwt,"model.train()"),vwt.forEach(t),hIe.forEach(t),dur=i(ya),T(H9.$$.fragment,ya),ya.forEach(t),El.forEach(t),gVe=i(f),oc=n(f,"H2",{class:!0});var Tze=s(oc);U9=n(Tze,"A",{id:!0,class:!0,href:!0});var Fwt=s(U9);Lve=n(Fwt,"SPAN",{});var Twt=s(Lve);T(F8.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),cur=i(Tze),yve=n(Tze,"SPAN",{});var Mwt=s(yve);fur=r(Mwt,"TFAutoModel"),Mwt.forEach(t),Tze.forEach(t),hVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(T8.$$.fragment,Cl),mur=i(Cl),rc=n(Cl,"P",{});var Are=s(rc);gur=r(Are,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gH=n(Are,"A",{href:!0});var Ewt=s(gH);hur=r(Ewt,"from_pretrained()"),Ewt.forEach(t),pur=r(Are," class method or the "),hH=n(Are,"A",{href:!0});var Cwt=s(hH);_ur=r(Cwt,"from_config()"),Cwt.forEach(t),uur=r(Are,` class
method.`),Are.forEach(t),bur=i(Cl),M8=n(Cl,"P",{});var Mze=s(M8);vur=r(Mze,"This class cannot be instantiated directly using "),xve=n(Mze,"CODE",{});var wwt=s(xve);Fur=r(wwt,"__init__()"),wwt.forEach(t),Tur=r(Mze," (throws an error)."),Mze.forEach(t),Mur=i(Cl),$t=n(Cl,"DIV",{class:!0});var kA=s($t);T(E8.$$.fragment,kA),Eur=i(kA),$ve=n(kA,"P",{});var Awt=s($ve);Cur=r(Awt,"Instantiates one of the base model classes of the library from a configuration."),Awt.forEach(t),wur=i(kA),tc=n(kA,"P",{});var Lre=s(tc);Aur=r(Lre,`Note:
Loading a model from its configuration file does `),kve=n(Lre,"STRONG",{});var Lwt=s(kve);Lur=r(Lwt,"not"),Lwt.forEach(t),yur=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Lre,"A",{href:!0});var ywt=s(pH);xur=r(ywt,"from_pretrained()"),ywt.forEach(t),$ur=r(Lre," to load the model weights."),Lre.forEach(t),kur=i(kA),T(J9.$$.fragment,kA),kA.forEach(t),Sur=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(C8.$$.fragment,wl),Rur=i(wl),Sve=n(wl,"P",{});var xwt=s(Sve);Pur=r(xwt,"Instantiate one of the base model classes of the library from a pretrained model."),xwt.forEach(t),Bur=i(wl),an=n(wl,"P",{});var SA=s(an);Iur=r(SA,"The model class to instantiate is selected based on the "),Rve=n(SA,"CODE",{});var $wt=s(Rve);Nur=r($wt,"model_type"),$wt.forEach(t),qur=r(SA,` property of the config object (either
passed as an argument or loaded from `),Pve=n(SA,"CODE",{});var kwt=s(Pve);jur=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),Dur=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(SA,"CODE",{});var Swt=s(Bve);Gur=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),Our=r(SA,":"),SA.forEach(t),Vur=i(wl),j=n(wl,"UL",{});var D=s(j);Y9=n(D,"LI",{});var pIe=s(Y9);Ive=n(pIe,"STRONG",{});var Rwt=s(Ive);Xur=r(Rwt,"albert"),Rwt.forEach(t),zur=r(pIe," \u2014 "),_H=n(pIe,"A",{href:!0});var Pwt=s(_H);Qur=r(Pwt,"TFAlbertModel"),Pwt.forEach(t),Wur=r(pIe," (ALBERT model)"),pIe.forEach(t),Hur=i(D),K9=n(D,"LI",{});var _Ie=s(K9);Nve=n(_Ie,"STRONG",{});var Bwt=s(Nve);Uur=r(Bwt,"bart"),Bwt.forEach(t),Jur=r(_Ie," \u2014 "),uH=n(_Ie,"A",{href:!0});var Iwt=s(uH);Yur=r(Iwt,"TFBartModel"),Iwt.forEach(t),Kur=r(_Ie," (BART model)"),_Ie.forEach(t),Zur=i(D),Z9=n(D,"LI",{});var uIe=s(Z9);qve=n(uIe,"STRONG",{});var Nwt=s(qve);e7r=r(Nwt,"bert"),Nwt.forEach(t),o7r=r(uIe," \u2014 "),bH=n(uIe,"A",{href:!0});var qwt=s(bH);r7r=r(qwt,"TFBertModel"),qwt.forEach(t),t7r=r(uIe," (BERT model)"),uIe.forEach(t),a7r=i(D),eM=n(D,"LI",{});var bIe=s(eM);jve=n(bIe,"STRONG",{});var jwt=s(jve);n7r=r(jwt,"blenderbot"),jwt.forEach(t),s7r=r(bIe," \u2014 "),vH=n(bIe,"A",{href:!0});var Dwt=s(vH);l7r=r(Dwt,"TFBlenderbotModel"),Dwt.forEach(t),i7r=r(bIe," (Blenderbot model)"),bIe.forEach(t),d7r=i(D),oM=n(D,"LI",{});var vIe=s(oM);Dve=n(vIe,"STRONG",{});var Gwt=s(Dve);c7r=r(Gwt,"blenderbot-small"),Gwt.forEach(t),f7r=r(vIe," \u2014 "),FH=n(vIe,"A",{href:!0});var Owt=s(FH);m7r=r(Owt,"TFBlenderbotSmallModel"),Owt.forEach(t),g7r=r(vIe," (BlenderbotSmall model)"),vIe.forEach(t),h7r=i(D),rM=n(D,"LI",{});var FIe=s(rM);Gve=n(FIe,"STRONG",{});var Vwt=s(Gve);p7r=r(Vwt,"camembert"),Vwt.forEach(t),_7r=r(FIe," \u2014 "),TH=n(FIe,"A",{href:!0});var Xwt=s(TH);u7r=r(Xwt,"TFCamembertModel"),Xwt.forEach(t),b7r=r(FIe," (CamemBERT model)"),FIe.forEach(t),v7r=i(D),tM=n(D,"LI",{});var TIe=s(tM);Ove=n(TIe,"STRONG",{});var zwt=s(Ove);F7r=r(zwt,"clip"),zwt.forEach(t),T7r=r(TIe," \u2014 "),MH=n(TIe,"A",{href:!0});var Qwt=s(MH);M7r=r(Qwt,"TFCLIPModel"),Qwt.forEach(t),E7r=r(TIe," (CLIP model)"),TIe.forEach(t),C7r=i(D),aM=n(D,"LI",{});var MIe=s(aM);Vve=n(MIe,"STRONG",{});var Wwt=s(Vve);w7r=r(Wwt,"convbert"),Wwt.forEach(t),A7r=r(MIe," \u2014 "),EH=n(MIe,"A",{href:!0});var Hwt=s(EH);L7r=r(Hwt,"TFConvBertModel"),Hwt.forEach(t),y7r=r(MIe," (ConvBERT model)"),MIe.forEach(t),x7r=i(D),nM=n(D,"LI",{});var EIe=s(nM);Xve=n(EIe,"STRONG",{});var Uwt=s(Xve);$7r=r(Uwt,"convnext"),Uwt.forEach(t),k7r=r(EIe," \u2014 "),CH=n(EIe,"A",{href:!0});var Jwt=s(CH);S7r=r(Jwt,"TFConvNextModel"),Jwt.forEach(t),R7r=r(EIe," (ConvNeXT model)"),EIe.forEach(t),P7r=i(D),sM=n(D,"LI",{});var CIe=s(sM);zve=n(CIe,"STRONG",{});var Ywt=s(zve);B7r=r(Ywt,"ctrl"),Ywt.forEach(t),I7r=r(CIe," \u2014 "),wH=n(CIe,"A",{href:!0});var Kwt=s(wH);N7r=r(Kwt,"TFCTRLModel"),Kwt.forEach(t),q7r=r(CIe," (CTRL model)"),CIe.forEach(t),j7r=i(D),lM=n(D,"LI",{});var wIe=s(lM);Qve=n(wIe,"STRONG",{});var Zwt=s(Qve);D7r=r(Zwt,"data2vec-vision"),Zwt.forEach(t),G7r=r(wIe," \u2014 "),AH=n(wIe,"A",{href:!0});var eAt=s(AH);O7r=r(eAt,"TFData2VecVisionModel"),eAt.forEach(t),V7r=r(wIe," (Data2VecVision model)"),wIe.forEach(t),X7r=i(D),iM=n(D,"LI",{});var AIe=s(iM);Wve=n(AIe,"STRONG",{});var oAt=s(Wve);z7r=r(oAt,"deberta"),oAt.forEach(t),Q7r=r(AIe," \u2014 "),LH=n(AIe,"A",{href:!0});var rAt=s(LH);W7r=r(rAt,"TFDebertaModel"),rAt.forEach(t),H7r=r(AIe," (DeBERTa model)"),AIe.forEach(t),U7r=i(D),dM=n(D,"LI",{});var LIe=s(dM);Hve=n(LIe,"STRONG",{});var tAt=s(Hve);J7r=r(tAt,"deberta-v2"),tAt.forEach(t),Y7r=r(LIe," \u2014 "),yH=n(LIe,"A",{href:!0});var aAt=s(yH);K7r=r(aAt,"TFDebertaV2Model"),aAt.forEach(t),Z7r=r(LIe," (DeBERTa-v2 model)"),LIe.forEach(t),e1r=i(D),cM=n(D,"LI",{});var yIe=s(cM);Uve=n(yIe,"STRONG",{});var nAt=s(Uve);o1r=r(nAt,"distilbert"),nAt.forEach(t),r1r=r(yIe," \u2014 "),xH=n(yIe,"A",{href:!0});var sAt=s(xH);t1r=r(sAt,"TFDistilBertModel"),sAt.forEach(t),a1r=r(yIe," (DistilBERT model)"),yIe.forEach(t),n1r=i(D),fM=n(D,"LI",{});var xIe=s(fM);Jve=n(xIe,"STRONG",{});var lAt=s(Jve);s1r=r(lAt,"dpr"),lAt.forEach(t),l1r=r(xIe," \u2014 "),$H=n(xIe,"A",{href:!0});var iAt=s($H);i1r=r(iAt,"TFDPRQuestionEncoder"),iAt.forEach(t),d1r=r(xIe," (DPR model)"),xIe.forEach(t),c1r=i(D),mM=n(D,"LI",{});var $Ie=s(mM);Yve=n($Ie,"STRONG",{});var dAt=s(Yve);f1r=r(dAt,"electra"),dAt.forEach(t),m1r=r($Ie," \u2014 "),kH=n($Ie,"A",{href:!0});var cAt=s(kH);g1r=r(cAt,"TFElectraModel"),cAt.forEach(t),h1r=r($Ie," (ELECTRA model)"),$Ie.forEach(t),p1r=i(D),gM=n(D,"LI",{});var kIe=s(gM);Kve=n(kIe,"STRONG",{});var fAt=s(Kve);_1r=r(fAt,"flaubert"),fAt.forEach(t),u1r=r(kIe," \u2014 "),SH=n(kIe,"A",{href:!0});var mAt=s(SH);b1r=r(mAt,"TFFlaubertModel"),mAt.forEach(t),v1r=r(kIe," (FlauBERT model)"),kIe.forEach(t),F1r=i(D),Ws=n(D,"LI",{});var lS=s(Ws);Zve=n(lS,"STRONG",{});var gAt=s(Zve);T1r=r(gAt,"funnel"),gAt.forEach(t),M1r=r(lS," \u2014 "),RH=n(lS,"A",{href:!0});var hAt=s(RH);E1r=r(hAt,"TFFunnelModel"),hAt.forEach(t),C1r=r(lS," or "),PH=n(lS,"A",{href:!0});var pAt=s(PH);w1r=r(pAt,"TFFunnelBaseModel"),pAt.forEach(t),A1r=r(lS," (Funnel Transformer model)"),lS.forEach(t),L1r=i(D),hM=n(D,"LI",{});var SIe=s(hM);eFe=n(SIe,"STRONG",{});var _At=s(eFe);y1r=r(_At,"gpt2"),_At.forEach(t),x1r=r(SIe," \u2014 "),BH=n(SIe,"A",{href:!0});var uAt=s(BH);$1r=r(uAt,"TFGPT2Model"),uAt.forEach(t),k1r=r(SIe," (OpenAI GPT-2 model)"),SIe.forEach(t),S1r=i(D),pM=n(D,"LI",{});var RIe=s(pM);oFe=n(RIe,"STRONG",{});var bAt=s(oFe);R1r=r(bAt,"gptj"),bAt.forEach(t),P1r=r(RIe," \u2014 "),IH=n(RIe,"A",{href:!0});var vAt=s(IH);B1r=r(vAt,"TFGPTJModel"),vAt.forEach(t),I1r=r(RIe," (GPT-J model)"),RIe.forEach(t),N1r=i(D),_M=n(D,"LI",{});var PIe=s(_M);rFe=n(PIe,"STRONG",{});var FAt=s(rFe);q1r=r(FAt,"hubert"),FAt.forEach(t),j1r=r(PIe," \u2014 "),NH=n(PIe,"A",{href:!0});var TAt=s(NH);D1r=r(TAt,"TFHubertModel"),TAt.forEach(t),G1r=r(PIe," (Hubert model)"),PIe.forEach(t),O1r=i(D),uM=n(D,"LI",{});var BIe=s(uM);tFe=n(BIe,"STRONG",{});var MAt=s(tFe);V1r=r(MAt,"layoutlm"),MAt.forEach(t),X1r=r(BIe," \u2014 "),qH=n(BIe,"A",{href:!0});var EAt=s(qH);z1r=r(EAt,"TFLayoutLMModel"),EAt.forEach(t),Q1r=r(BIe," (LayoutLM model)"),BIe.forEach(t),W1r=i(D),bM=n(D,"LI",{});var IIe=s(bM);aFe=n(IIe,"STRONG",{});var CAt=s(aFe);H1r=r(CAt,"led"),CAt.forEach(t),U1r=r(IIe," \u2014 "),jH=n(IIe,"A",{href:!0});var wAt=s(jH);J1r=r(wAt,"TFLEDModel"),wAt.forEach(t),Y1r=r(IIe," (LED model)"),IIe.forEach(t),K1r=i(D),vM=n(D,"LI",{});var NIe=s(vM);nFe=n(NIe,"STRONG",{});var AAt=s(nFe);Z1r=r(AAt,"longformer"),AAt.forEach(t),e2r=r(NIe," \u2014 "),DH=n(NIe,"A",{href:!0});var LAt=s(DH);o2r=r(LAt,"TFLongformerModel"),LAt.forEach(t),r2r=r(NIe," (Longformer model)"),NIe.forEach(t),t2r=i(D),FM=n(D,"LI",{});var qIe=s(FM);sFe=n(qIe,"STRONG",{});var yAt=s(sFe);a2r=r(yAt,"lxmert"),yAt.forEach(t),n2r=r(qIe," \u2014 "),GH=n(qIe,"A",{href:!0});var xAt=s(GH);s2r=r(xAt,"TFLxmertModel"),xAt.forEach(t),l2r=r(qIe," (LXMERT model)"),qIe.forEach(t),i2r=i(D),TM=n(D,"LI",{});var jIe=s(TM);lFe=n(jIe,"STRONG",{});var $At=s(lFe);d2r=r($At,"marian"),$At.forEach(t),c2r=r(jIe," \u2014 "),OH=n(jIe,"A",{href:!0});var kAt=s(OH);f2r=r(kAt,"TFMarianModel"),kAt.forEach(t),m2r=r(jIe," (Marian model)"),jIe.forEach(t),g2r=i(D),MM=n(D,"LI",{});var DIe=s(MM);iFe=n(DIe,"STRONG",{});var SAt=s(iFe);h2r=r(SAt,"mbart"),SAt.forEach(t),p2r=r(DIe," \u2014 "),VH=n(DIe,"A",{href:!0});var RAt=s(VH);_2r=r(RAt,"TFMBartModel"),RAt.forEach(t),u2r=r(DIe," (mBART model)"),DIe.forEach(t),b2r=i(D),EM=n(D,"LI",{});var GIe=s(EM);dFe=n(GIe,"STRONG",{});var PAt=s(dFe);v2r=r(PAt,"mobilebert"),PAt.forEach(t),F2r=r(GIe," \u2014 "),XH=n(GIe,"A",{href:!0});var BAt=s(XH);T2r=r(BAt,"TFMobileBertModel"),BAt.forEach(t),M2r=r(GIe," (MobileBERT model)"),GIe.forEach(t),E2r=i(D),CM=n(D,"LI",{});var OIe=s(CM);cFe=n(OIe,"STRONG",{});var IAt=s(cFe);C2r=r(IAt,"mpnet"),IAt.forEach(t),w2r=r(OIe," \u2014 "),zH=n(OIe,"A",{href:!0});var NAt=s(zH);A2r=r(NAt,"TFMPNetModel"),NAt.forEach(t),L2r=r(OIe," (MPNet model)"),OIe.forEach(t),y2r=i(D),wM=n(D,"LI",{});var VIe=s(wM);fFe=n(VIe,"STRONG",{});var qAt=s(fFe);x2r=r(qAt,"mt5"),qAt.forEach(t),$2r=r(VIe," \u2014 "),QH=n(VIe,"A",{href:!0});var jAt=s(QH);k2r=r(jAt,"TFMT5Model"),jAt.forEach(t),S2r=r(VIe," (MT5 model)"),VIe.forEach(t),R2r=i(D),AM=n(D,"LI",{});var XIe=s(AM);mFe=n(XIe,"STRONG",{});var DAt=s(mFe);P2r=r(DAt,"openai-gpt"),DAt.forEach(t),B2r=r(XIe," \u2014 "),WH=n(XIe,"A",{href:!0});var GAt=s(WH);I2r=r(GAt,"TFOpenAIGPTModel"),GAt.forEach(t),N2r=r(XIe," (OpenAI GPT model)"),XIe.forEach(t),q2r=i(D),LM=n(D,"LI",{});var zIe=s(LM);gFe=n(zIe,"STRONG",{});var OAt=s(gFe);j2r=r(OAt,"opt"),OAt.forEach(t),D2r=r(zIe," \u2014 "),HH=n(zIe,"A",{href:!0});var VAt=s(HH);G2r=r(VAt,"TFOPTModel"),VAt.forEach(t),O2r=r(zIe," (OPT model)"),zIe.forEach(t),V2r=i(D),yM=n(D,"LI",{});var QIe=s(yM);hFe=n(QIe,"STRONG",{});var XAt=s(hFe);X2r=r(XAt,"pegasus"),XAt.forEach(t),z2r=r(QIe," \u2014 "),UH=n(QIe,"A",{href:!0});var zAt=s(UH);Q2r=r(zAt,"TFPegasusModel"),zAt.forEach(t),W2r=r(QIe," (Pegasus model)"),QIe.forEach(t),H2r=i(D),xM=n(D,"LI",{});var WIe=s(xM);pFe=n(WIe,"STRONG",{});var QAt=s(pFe);U2r=r(QAt,"rembert"),QAt.forEach(t),J2r=r(WIe," \u2014 "),JH=n(WIe,"A",{href:!0});var WAt=s(JH);Y2r=r(WAt,"TFRemBertModel"),WAt.forEach(t),K2r=r(WIe," (RemBERT model)"),WIe.forEach(t),Z2r=i(D),$M=n(D,"LI",{});var HIe=s($M);_Fe=n(HIe,"STRONG",{});var HAt=s(_Fe);ebr=r(HAt,"roberta"),HAt.forEach(t),obr=r(HIe," \u2014 "),YH=n(HIe,"A",{href:!0});var UAt=s(YH);rbr=r(UAt,"TFRobertaModel"),UAt.forEach(t),tbr=r(HIe," (RoBERTa model)"),HIe.forEach(t),abr=i(D),kM=n(D,"LI",{});var UIe=s(kM);uFe=n(UIe,"STRONG",{});var JAt=s(uFe);nbr=r(JAt,"roformer"),JAt.forEach(t),sbr=r(UIe," \u2014 "),KH=n(UIe,"A",{href:!0});var YAt=s(KH);lbr=r(YAt,"TFRoFormerModel"),YAt.forEach(t),ibr=r(UIe," (RoFormer model)"),UIe.forEach(t),dbr=i(D),SM=n(D,"LI",{});var JIe=s(SM);bFe=n(JIe,"STRONG",{});var KAt=s(bFe);cbr=r(KAt,"speech_to_text"),KAt.forEach(t),fbr=r(JIe," \u2014 "),ZH=n(JIe,"A",{href:!0});var ZAt=s(ZH);mbr=r(ZAt,"TFSpeech2TextModel"),ZAt.forEach(t),gbr=r(JIe," (Speech2Text model)"),JIe.forEach(t),hbr=i(D),RM=n(D,"LI",{});var YIe=s(RM);vFe=n(YIe,"STRONG",{});var e6t=s(vFe);pbr=r(e6t,"swin"),e6t.forEach(t),_br=r(YIe," \u2014 "),eU=n(YIe,"A",{href:!0});var o6t=s(eU);ubr=r(o6t,"TFSwinModel"),o6t.forEach(t),bbr=r(YIe," (Swin Transformer model)"),YIe.forEach(t),vbr=i(D),PM=n(D,"LI",{});var KIe=s(PM);FFe=n(KIe,"STRONG",{});var r6t=s(FFe);Fbr=r(r6t,"t5"),r6t.forEach(t),Tbr=r(KIe," \u2014 "),oU=n(KIe,"A",{href:!0});var t6t=s(oU);Mbr=r(t6t,"TFT5Model"),t6t.forEach(t),Ebr=r(KIe," (T5 model)"),KIe.forEach(t),Cbr=i(D),BM=n(D,"LI",{});var ZIe=s(BM);TFe=n(ZIe,"STRONG",{});var a6t=s(TFe);wbr=r(a6t,"tapas"),a6t.forEach(t),Abr=r(ZIe," \u2014 "),rU=n(ZIe,"A",{href:!0});var n6t=s(rU);Lbr=r(n6t,"TFTapasModel"),n6t.forEach(t),ybr=r(ZIe," (TAPAS model)"),ZIe.forEach(t),xbr=i(D),IM=n(D,"LI",{});var eNe=s(IM);MFe=n(eNe,"STRONG",{});var s6t=s(MFe);$br=r(s6t,"transfo-xl"),s6t.forEach(t),kbr=r(eNe," \u2014 "),tU=n(eNe,"A",{href:!0});var l6t=s(tU);Sbr=r(l6t,"TFTransfoXLModel"),l6t.forEach(t),Rbr=r(eNe," (Transformer-XL model)"),eNe.forEach(t),Pbr=i(D),NM=n(D,"LI",{});var oNe=s(NM);EFe=n(oNe,"STRONG",{});var i6t=s(EFe);Bbr=r(i6t,"vit"),i6t.forEach(t),Ibr=r(oNe," \u2014 "),aU=n(oNe,"A",{href:!0});var d6t=s(aU);Nbr=r(d6t,"TFViTModel"),d6t.forEach(t),qbr=r(oNe," (ViT model)"),oNe.forEach(t),jbr=i(D),qM=n(D,"LI",{});var rNe=s(qM);CFe=n(rNe,"STRONG",{});var c6t=s(CFe);Dbr=r(c6t,"vit_mae"),c6t.forEach(t),Gbr=r(rNe," \u2014 "),nU=n(rNe,"A",{href:!0});var f6t=s(nU);Obr=r(f6t,"TFViTMAEModel"),f6t.forEach(t),Vbr=r(rNe," (ViTMAE model)"),rNe.forEach(t),Xbr=i(D),jM=n(D,"LI",{});var tNe=s(jM);wFe=n(tNe,"STRONG",{});var m6t=s(wFe);zbr=r(m6t,"wav2vec2"),m6t.forEach(t),Qbr=r(tNe," \u2014 "),sU=n(tNe,"A",{href:!0});var g6t=s(sU);Wbr=r(g6t,"TFWav2Vec2Model"),g6t.forEach(t),Hbr=r(tNe," (Wav2Vec2 model)"),tNe.forEach(t),Ubr=i(D),DM=n(D,"LI",{});var aNe=s(DM);AFe=n(aNe,"STRONG",{});var h6t=s(AFe);Jbr=r(h6t,"xlm"),h6t.forEach(t),Ybr=r(aNe," \u2014 "),lU=n(aNe,"A",{href:!0});var p6t=s(lU);Kbr=r(p6t,"TFXLMModel"),p6t.forEach(t),Zbr=r(aNe," (XLM model)"),aNe.forEach(t),evr=i(D),GM=n(D,"LI",{});var nNe=s(GM);LFe=n(nNe,"STRONG",{});var _6t=s(LFe);ovr=r(_6t,"xlm-roberta"),_6t.forEach(t),rvr=r(nNe," \u2014 "),iU=n(nNe,"A",{href:!0});var u6t=s(iU);tvr=r(u6t,"TFXLMRobertaModel"),u6t.forEach(t),avr=r(nNe," (XLM-RoBERTa model)"),nNe.forEach(t),nvr=i(D),OM=n(D,"LI",{});var sNe=s(OM);yFe=n(sNe,"STRONG",{});var b6t=s(yFe);svr=r(b6t,"xlnet"),b6t.forEach(t),lvr=r(sNe," \u2014 "),dU=n(sNe,"A",{href:!0});var v6t=s(dU);ivr=r(v6t,"TFXLNetModel"),v6t.forEach(t),dvr=r(sNe," (XLNet model)"),sNe.forEach(t),D.forEach(t),cvr=i(wl),T(VM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),pVe=i(f),ac=n(f,"H2",{class:!0});var Eze=s(ac);XM=n(Eze,"A",{id:!0,class:!0,href:!0});var F6t=s(XM);xFe=n(F6t,"SPAN",{});var T6t=s(xFe);T(w8.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),fvr=i(Eze),$Fe=n(Eze,"SPAN",{});var M6t=s($Fe);mvr=r(M6t,"TFAutoModelForPreTraining"),M6t.forEach(t),Eze.forEach(t),_Ve=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(A8.$$.fragment,Al),gvr=i(Al),nc=n(Al,"P",{});var yre=s(nc);hvr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cU=n(yre,"A",{href:!0});var E6t=s(cU);pvr=r(E6t,"from_pretrained()"),E6t.forEach(t),_vr=r(yre," class method or the "),fU=n(yre,"A",{href:!0});var C6t=s(fU);uvr=r(C6t,"from_config()"),C6t.forEach(t),bvr=r(yre,` class
method.`),yre.forEach(t),vvr=i(Al),L8=n(Al,"P",{});var Cze=s(L8);Fvr=r(Cze,"This class cannot be instantiated directly using "),kFe=n(Cze,"CODE",{});var w6t=s(kFe);Tvr=r(w6t,"__init__()"),w6t.forEach(t),Mvr=r(Cze," (throws an error)."),Cze.forEach(t),Evr=i(Al),kt=n(Al,"DIV",{class:!0});var RA=s(kt);T(y8.$$.fragment,RA),Cvr=i(RA),SFe=n(RA,"P",{});var A6t=s(SFe);wvr=r(A6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),A6t.forEach(t),Avr=i(RA),sc=n(RA,"P",{});var xre=s(sc);Lvr=r(xre,`Note:
Loading a model from its configuration file does `),RFe=n(xre,"STRONG",{});var L6t=s(RFe);yvr=r(L6t,"not"),L6t.forEach(t),xvr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(xre,"A",{href:!0});var y6t=s(mU);$vr=r(y6t,"from_pretrained()"),y6t.forEach(t),kvr=r(xre," to load the model weights."),xre.forEach(t),Svr=i(RA),T(zM.$$.fragment,RA),RA.forEach(t),Rvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(x8.$$.fragment,Ll),Pvr=i(Ll),PFe=n(Ll,"P",{});var x6t=s(PFe);Bvr=r(x6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x6t.forEach(t),Ivr=i(Ll),nn=n(Ll,"P",{});var PA=s(nn);Nvr=r(PA,"The model class to instantiate is selected based on the "),BFe=n(PA,"CODE",{});var $6t=s(BFe);qvr=r($6t,"model_type"),$6t.forEach(t),jvr=r(PA,` property of the config object (either
passed as an argument or loaded from `),IFe=n(PA,"CODE",{});var k6t=s(IFe);Dvr=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),Gvr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(PA,"CODE",{});var S6t=s(NFe);Ovr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),Vvr=r(PA,":"),PA.forEach(t),Xvr=i(Ll),se=n(Ll,"UL",{});var le=s(se);QM=n(le,"LI",{});var lNe=s(QM);qFe=n(lNe,"STRONG",{});var R6t=s(qFe);zvr=r(R6t,"albert"),R6t.forEach(t),Qvr=r(lNe," \u2014 "),gU=n(lNe,"A",{href:!0});var P6t=s(gU);Wvr=r(P6t,"TFAlbertForPreTraining"),P6t.forEach(t),Hvr=r(lNe," (ALBERT model)"),lNe.forEach(t),Uvr=i(le),WM=n(le,"LI",{});var iNe=s(WM);jFe=n(iNe,"STRONG",{});var B6t=s(jFe);Jvr=r(B6t,"bart"),B6t.forEach(t),Yvr=r(iNe," \u2014 "),hU=n(iNe,"A",{href:!0});var I6t=s(hU);Kvr=r(I6t,"TFBartForConditionalGeneration"),I6t.forEach(t),Zvr=r(iNe," (BART model)"),iNe.forEach(t),eFr=i(le),HM=n(le,"LI",{});var dNe=s(HM);DFe=n(dNe,"STRONG",{});var N6t=s(DFe);oFr=r(N6t,"bert"),N6t.forEach(t),rFr=r(dNe," \u2014 "),pU=n(dNe,"A",{href:!0});var q6t=s(pU);tFr=r(q6t,"TFBertForPreTraining"),q6t.forEach(t),aFr=r(dNe," (BERT model)"),dNe.forEach(t),nFr=i(le),UM=n(le,"LI",{});var cNe=s(UM);GFe=n(cNe,"STRONG",{});var j6t=s(GFe);sFr=r(j6t,"camembert"),j6t.forEach(t),lFr=r(cNe," \u2014 "),_U=n(cNe,"A",{href:!0});var D6t=s(_U);iFr=r(D6t,"TFCamembertForMaskedLM"),D6t.forEach(t),dFr=r(cNe," (CamemBERT model)"),cNe.forEach(t),cFr=i(le),JM=n(le,"LI",{});var fNe=s(JM);OFe=n(fNe,"STRONG",{});var G6t=s(OFe);fFr=r(G6t,"ctrl"),G6t.forEach(t),mFr=r(fNe," \u2014 "),uU=n(fNe,"A",{href:!0});var O6t=s(uU);gFr=r(O6t,"TFCTRLLMHeadModel"),O6t.forEach(t),hFr=r(fNe," (CTRL model)"),fNe.forEach(t),pFr=i(le),YM=n(le,"LI",{});var mNe=s(YM);VFe=n(mNe,"STRONG",{});var V6t=s(VFe);_Fr=r(V6t,"distilbert"),V6t.forEach(t),uFr=r(mNe," \u2014 "),bU=n(mNe,"A",{href:!0});var X6t=s(bU);bFr=r(X6t,"TFDistilBertForMaskedLM"),X6t.forEach(t),vFr=r(mNe," (DistilBERT model)"),mNe.forEach(t),FFr=i(le),KM=n(le,"LI",{});var gNe=s(KM);XFe=n(gNe,"STRONG",{});var z6t=s(XFe);TFr=r(z6t,"electra"),z6t.forEach(t),MFr=r(gNe," \u2014 "),vU=n(gNe,"A",{href:!0});var Q6t=s(vU);EFr=r(Q6t,"TFElectraForPreTraining"),Q6t.forEach(t),CFr=r(gNe," (ELECTRA model)"),gNe.forEach(t),wFr=i(le),ZM=n(le,"LI",{});var hNe=s(ZM);zFe=n(hNe,"STRONG",{});var W6t=s(zFe);AFr=r(W6t,"flaubert"),W6t.forEach(t),LFr=r(hNe," \u2014 "),FU=n(hNe,"A",{href:!0});var H6t=s(FU);yFr=r(H6t,"TFFlaubertWithLMHeadModel"),H6t.forEach(t),xFr=r(hNe," (FlauBERT model)"),hNe.forEach(t),$Fr=i(le),eE=n(le,"LI",{});var pNe=s(eE);QFe=n(pNe,"STRONG",{});var U6t=s(QFe);kFr=r(U6t,"funnel"),U6t.forEach(t),SFr=r(pNe," \u2014 "),TU=n(pNe,"A",{href:!0});var J6t=s(TU);RFr=r(J6t,"TFFunnelForPreTraining"),J6t.forEach(t),PFr=r(pNe," (Funnel Transformer model)"),pNe.forEach(t),BFr=i(le),oE=n(le,"LI",{});var _Ne=s(oE);WFe=n(_Ne,"STRONG",{});var Y6t=s(WFe);IFr=r(Y6t,"gpt2"),Y6t.forEach(t),NFr=r(_Ne," \u2014 "),MU=n(_Ne,"A",{href:!0});var K6t=s(MU);qFr=r(K6t,"TFGPT2LMHeadModel"),K6t.forEach(t),jFr=r(_Ne," (OpenAI GPT-2 model)"),_Ne.forEach(t),DFr=i(le),rE=n(le,"LI",{});var uNe=s(rE);HFe=n(uNe,"STRONG",{});var Z6t=s(HFe);GFr=r(Z6t,"layoutlm"),Z6t.forEach(t),OFr=r(uNe," \u2014 "),EU=n(uNe,"A",{href:!0});var eLt=s(EU);VFr=r(eLt,"TFLayoutLMForMaskedLM"),eLt.forEach(t),XFr=r(uNe," (LayoutLM model)"),uNe.forEach(t),zFr=i(le),tE=n(le,"LI",{});var bNe=s(tE);UFe=n(bNe,"STRONG",{});var oLt=s(UFe);QFr=r(oLt,"lxmert"),oLt.forEach(t),WFr=r(bNe," \u2014 "),CU=n(bNe,"A",{href:!0});var rLt=s(CU);HFr=r(rLt,"TFLxmertForPreTraining"),rLt.forEach(t),UFr=r(bNe," (LXMERT model)"),bNe.forEach(t),JFr=i(le),aE=n(le,"LI",{});var vNe=s(aE);JFe=n(vNe,"STRONG",{});var tLt=s(JFe);YFr=r(tLt,"mobilebert"),tLt.forEach(t),KFr=r(vNe," \u2014 "),wU=n(vNe,"A",{href:!0});var aLt=s(wU);ZFr=r(aLt,"TFMobileBertForPreTraining"),aLt.forEach(t),eTr=r(vNe," (MobileBERT model)"),vNe.forEach(t),oTr=i(le),nE=n(le,"LI",{});var FNe=s(nE);YFe=n(FNe,"STRONG",{});var nLt=s(YFe);rTr=r(nLt,"mpnet"),nLt.forEach(t),tTr=r(FNe," \u2014 "),AU=n(FNe,"A",{href:!0});var sLt=s(AU);aTr=r(sLt,"TFMPNetForMaskedLM"),sLt.forEach(t),nTr=r(FNe," (MPNet model)"),FNe.forEach(t),sTr=i(le),sE=n(le,"LI",{});var TNe=s(sE);KFe=n(TNe,"STRONG",{});var lLt=s(KFe);lTr=r(lLt,"openai-gpt"),lLt.forEach(t),iTr=r(TNe," \u2014 "),LU=n(TNe,"A",{href:!0});var iLt=s(LU);dTr=r(iLt,"TFOpenAIGPTLMHeadModel"),iLt.forEach(t),cTr=r(TNe," (OpenAI GPT model)"),TNe.forEach(t),fTr=i(le),lE=n(le,"LI",{});var MNe=s(lE);ZFe=n(MNe,"STRONG",{});var dLt=s(ZFe);mTr=r(dLt,"roberta"),dLt.forEach(t),gTr=r(MNe," \u2014 "),yU=n(MNe,"A",{href:!0});var cLt=s(yU);hTr=r(cLt,"TFRobertaForMaskedLM"),cLt.forEach(t),pTr=r(MNe," (RoBERTa model)"),MNe.forEach(t),_Tr=i(le),iE=n(le,"LI",{});var ENe=s(iE);eTe=n(ENe,"STRONG",{});var fLt=s(eTe);uTr=r(fLt,"t5"),fLt.forEach(t),bTr=r(ENe," \u2014 "),xU=n(ENe,"A",{href:!0});var mLt=s(xU);vTr=r(mLt,"TFT5ForConditionalGeneration"),mLt.forEach(t),FTr=r(ENe," (T5 model)"),ENe.forEach(t),TTr=i(le),dE=n(le,"LI",{});var CNe=s(dE);oTe=n(CNe,"STRONG",{});var gLt=s(oTe);MTr=r(gLt,"tapas"),gLt.forEach(t),ETr=r(CNe," \u2014 "),$U=n(CNe,"A",{href:!0});var hLt=s($U);CTr=r(hLt,"TFTapasForMaskedLM"),hLt.forEach(t),wTr=r(CNe," (TAPAS model)"),CNe.forEach(t),ATr=i(le),cE=n(le,"LI",{});var wNe=s(cE);rTe=n(wNe,"STRONG",{});var pLt=s(rTe);LTr=r(pLt,"transfo-xl"),pLt.forEach(t),yTr=r(wNe," \u2014 "),kU=n(wNe,"A",{href:!0});var _Lt=s(kU);xTr=r(_Lt,"TFTransfoXLLMHeadModel"),_Lt.forEach(t),$Tr=r(wNe," (Transformer-XL model)"),wNe.forEach(t),kTr=i(le),fE=n(le,"LI",{});var ANe=s(fE);tTe=n(ANe,"STRONG",{});var uLt=s(tTe);STr=r(uLt,"vit_mae"),uLt.forEach(t),RTr=r(ANe," \u2014 "),SU=n(ANe,"A",{href:!0});var bLt=s(SU);PTr=r(bLt,"TFViTMAEForPreTraining"),bLt.forEach(t),BTr=r(ANe," (ViTMAE model)"),ANe.forEach(t),ITr=i(le),mE=n(le,"LI",{});var LNe=s(mE);aTe=n(LNe,"STRONG",{});var vLt=s(aTe);NTr=r(vLt,"xlm"),vLt.forEach(t),qTr=r(LNe," \u2014 "),RU=n(LNe,"A",{href:!0});var FLt=s(RU);jTr=r(FLt,"TFXLMWithLMHeadModel"),FLt.forEach(t),DTr=r(LNe," (XLM model)"),LNe.forEach(t),GTr=i(le),gE=n(le,"LI",{});var yNe=s(gE);nTe=n(yNe,"STRONG",{});var TLt=s(nTe);OTr=r(TLt,"xlm-roberta"),TLt.forEach(t),VTr=r(yNe," \u2014 "),PU=n(yNe,"A",{href:!0});var MLt=s(PU);XTr=r(MLt,"TFXLMRobertaForMaskedLM"),MLt.forEach(t),zTr=r(yNe," (XLM-RoBERTa model)"),yNe.forEach(t),QTr=i(le),hE=n(le,"LI",{});var xNe=s(hE);sTe=n(xNe,"STRONG",{});var ELt=s(sTe);WTr=r(ELt,"xlnet"),ELt.forEach(t),HTr=r(xNe," \u2014 "),BU=n(xNe,"A",{href:!0});var CLt=s(BU);UTr=r(CLt,"TFXLNetLMHeadModel"),CLt.forEach(t),JTr=r(xNe," (XLNet model)"),xNe.forEach(t),le.forEach(t),YTr=i(Ll),T(pE.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),uVe=i(f),lc=n(f,"H2",{class:!0});var wze=s(lc);_E=n(wze,"A",{id:!0,class:!0,href:!0});var wLt=s(_E);lTe=n(wLt,"SPAN",{});var ALt=s(lTe);T($8.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),KTr=i(wze),iTe=n(wze,"SPAN",{});var LLt=s(iTe);ZTr=r(LLt,"TFAutoModelForCausalLM"),LLt.forEach(t),wze.forEach(t),bVe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(k8.$$.fragment,yl),e9r=i(yl),ic=n(yl,"P",{});var $re=s(ic);o9r=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IU=n($re,"A",{href:!0});var yLt=s(IU);r9r=r(yLt,"from_pretrained()"),yLt.forEach(t),t9r=r($re," class method or the "),NU=n($re,"A",{href:!0});var xLt=s(NU);a9r=r(xLt,"from_config()"),xLt.forEach(t),n9r=r($re,` class
method.`),$re.forEach(t),s9r=i(yl),S8=n(yl,"P",{});var Aze=s(S8);l9r=r(Aze,"This class cannot be instantiated directly using "),dTe=n(Aze,"CODE",{});var $Lt=s(dTe);i9r=r($Lt,"__init__()"),$Lt.forEach(t),d9r=r(Aze," (throws an error)."),Aze.forEach(t),c9r=i(yl),St=n(yl,"DIV",{class:!0});var BA=s(St);T(R8.$$.fragment,BA),f9r=i(BA),cTe=n(BA,"P",{});var kLt=s(cTe);m9r=r(kLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kLt.forEach(t),g9r=i(BA),dc=n(BA,"P",{});var kre=s(dc);h9r=r(kre,`Note:
Loading a model from its configuration file does `),fTe=n(kre,"STRONG",{});var SLt=s(fTe);p9r=r(SLt,"not"),SLt.forEach(t),_9r=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(kre,"A",{href:!0});var RLt=s(qU);u9r=r(RLt,"from_pretrained()"),RLt.forEach(t),b9r=r(kre," to load the model weights."),kre.forEach(t),v9r=i(BA),T(uE.$$.fragment,BA),BA.forEach(t),F9r=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(P8.$$.fragment,xl),T9r=i(xl),mTe=n(xl,"P",{});var PLt=s(mTe);M9r=r(PLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PLt.forEach(t),E9r=i(xl),sn=n(xl,"P",{});var IA=s(sn);C9r=r(IA,"The model class to instantiate is selected based on the "),gTe=n(IA,"CODE",{});var BLt=s(gTe);w9r=r(BLt,"model_type"),BLt.forEach(t),A9r=r(IA,` property of the config object (either
passed as an argument or loaded from `),hTe=n(IA,"CODE",{});var ILt=s(hTe);L9r=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),y9r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(IA,"CODE",{});var NLt=s(pTe);x9r=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),$9r=r(IA,":"),IA.forEach(t),k9r=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);bE=n(Ce,"LI",{});var $Ne=s(bE);_Te=n($Ne,"STRONG",{});var qLt=s(_Te);S9r=r(qLt,"bert"),qLt.forEach(t),R9r=r($Ne," \u2014 "),jU=n($Ne,"A",{href:!0});var jLt=s(jU);P9r=r(jLt,"TFBertLMHeadModel"),jLt.forEach(t),B9r=r($Ne," (BERT model)"),$Ne.forEach(t),I9r=i(Ce),vE=n(Ce,"LI",{});var kNe=s(vE);uTe=n(kNe,"STRONG",{});var DLt=s(uTe);N9r=r(DLt,"camembert"),DLt.forEach(t),q9r=r(kNe," \u2014 "),DU=n(kNe,"A",{href:!0});var GLt=s(DU);j9r=r(GLt,"TFCamembertForCausalLM"),GLt.forEach(t),D9r=r(kNe," (CamemBERT model)"),kNe.forEach(t),G9r=i(Ce),FE=n(Ce,"LI",{});var SNe=s(FE);bTe=n(SNe,"STRONG",{});var OLt=s(bTe);O9r=r(OLt,"ctrl"),OLt.forEach(t),V9r=r(SNe," \u2014 "),GU=n(SNe,"A",{href:!0});var VLt=s(GU);X9r=r(VLt,"TFCTRLLMHeadModel"),VLt.forEach(t),z9r=r(SNe," (CTRL model)"),SNe.forEach(t),Q9r=i(Ce),TE=n(Ce,"LI",{});var RNe=s(TE);vTe=n(RNe,"STRONG",{});var XLt=s(vTe);W9r=r(XLt,"gpt2"),XLt.forEach(t),H9r=r(RNe," \u2014 "),OU=n(RNe,"A",{href:!0});var zLt=s(OU);U9r=r(zLt,"TFGPT2LMHeadModel"),zLt.forEach(t),J9r=r(RNe," (OpenAI GPT-2 model)"),RNe.forEach(t),Y9r=i(Ce),ME=n(Ce,"LI",{});var PNe=s(ME);FTe=n(PNe,"STRONG",{});var QLt=s(FTe);K9r=r(QLt,"gptj"),QLt.forEach(t),Z9r=r(PNe," \u2014 "),VU=n(PNe,"A",{href:!0});var WLt=s(VU);eMr=r(WLt,"TFGPTJForCausalLM"),WLt.forEach(t),oMr=r(PNe," (GPT-J model)"),PNe.forEach(t),rMr=i(Ce),EE=n(Ce,"LI",{});var BNe=s(EE);TTe=n(BNe,"STRONG",{});var HLt=s(TTe);tMr=r(HLt,"openai-gpt"),HLt.forEach(t),aMr=r(BNe," \u2014 "),XU=n(BNe,"A",{href:!0});var ULt=s(XU);nMr=r(ULt,"TFOpenAIGPTLMHeadModel"),ULt.forEach(t),sMr=r(BNe," (OpenAI GPT model)"),BNe.forEach(t),lMr=i(Ce),CE=n(Ce,"LI",{});var INe=s(CE);MTe=n(INe,"STRONG",{});var JLt=s(MTe);iMr=r(JLt,"opt"),JLt.forEach(t),dMr=r(INe," \u2014 "),zU=n(INe,"A",{href:!0});var YLt=s(zU);cMr=r(YLt,"TFOPTForCausalLM"),YLt.forEach(t),fMr=r(INe," (OPT model)"),INe.forEach(t),mMr=i(Ce),wE=n(Ce,"LI",{});var NNe=s(wE);ETe=n(NNe,"STRONG",{});var KLt=s(ETe);gMr=r(KLt,"rembert"),KLt.forEach(t),hMr=r(NNe," \u2014 "),QU=n(NNe,"A",{href:!0});var ZLt=s(QU);pMr=r(ZLt,"TFRemBertForCausalLM"),ZLt.forEach(t),_Mr=r(NNe," (RemBERT model)"),NNe.forEach(t),uMr=i(Ce),AE=n(Ce,"LI",{});var qNe=s(AE);CTe=n(qNe,"STRONG",{});var eyt=s(CTe);bMr=r(eyt,"roberta"),eyt.forEach(t),vMr=r(qNe," \u2014 "),WU=n(qNe,"A",{href:!0});var oyt=s(WU);FMr=r(oyt,"TFRobertaForCausalLM"),oyt.forEach(t),TMr=r(qNe," (RoBERTa model)"),qNe.forEach(t),MMr=i(Ce),LE=n(Ce,"LI",{});var jNe=s(LE);wTe=n(jNe,"STRONG",{});var ryt=s(wTe);EMr=r(ryt,"roformer"),ryt.forEach(t),CMr=r(jNe," \u2014 "),HU=n(jNe,"A",{href:!0});var tyt=s(HU);wMr=r(tyt,"TFRoFormerForCausalLM"),tyt.forEach(t),AMr=r(jNe," (RoFormer model)"),jNe.forEach(t),LMr=i(Ce),yE=n(Ce,"LI",{});var DNe=s(yE);ATe=n(DNe,"STRONG",{});var ayt=s(ATe);yMr=r(ayt,"transfo-xl"),ayt.forEach(t),xMr=r(DNe," \u2014 "),UU=n(DNe,"A",{href:!0});var nyt=s(UU);$Mr=r(nyt,"TFTransfoXLLMHeadModel"),nyt.forEach(t),kMr=r(DNe," (Transformer-XL model)"),DNe.forEach(t),SMr=i(Ce),xE=n(Ce,"LI",{});var GNe=s(xE);LTe=n(GNe,"STRONG",{});var syt=s(LTe);RMr=r(syt,"xlm"),syt.forEach(t),PMr=r(GNe," \u2014 "),JU=n(GNe,"A",{href:!0});var lyt=s(JU);BMr=r(lyt,"TFXLMWithLMHeadModel"),lyt.forEach(t),IMr=r(GNe," (XLM model)"),GNe.forEach(t),NMr=i(Ce),$E=n(Ce,"LI",{});var ONe=s($E);yTe=n(ONe,"STRONG",{});var iyt=s(yTe);qMr=r(iyt,"xlnet"),iyt.forEach(t),jMr=r(ONe," \u2014 "),YU=n(ONe,"A",{href:!0});var dyt=s(YU);DMr=r(dyt,"TFXLNetLMHeadModel"),dyt.forEach(t),GMr=r(ONe," (XLNet model)"),ONe.forEach(t),Ce.forEach(t),OMr=i(xl),T(kE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),vVe=i(f),cc=n(f,"H2",{class:!0});var Lze=s(cc);SE=n(Lze,"A",{id:!0,class:!0,href:!0});var cyt=s(SE);xTe=n(cyt,"SPAN",{});var fyt=s(xTe);T(B8.$$.fragment,fyt),fyt.forEach(t),cyt.forEach(t),VMr=i(Lze),$Te=n(Lze,"SPAN",{});var myt=s($Te);XMr=r(myt,"TFAutoModelForImageClassification"),myt.forEach(t),Lze.forEach(t),FVe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(I8.$$.fragment,$l),zMr=i($l),fc=n($l,"P",{});var Sre=s(fc);QMr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KU=n(Sre,"A",{href:!0});var gyt=s(KU);WMr=r(gyt,"from_pretrained()"),gyt.forEach(t),HMr=r(Sre," class method or the "),ZU=n(Sre,"A",{href:!0});var hyt=s(ZU);UMr=r(hyt,"from_config()"),hyt.forEach(t),JMr=r(Sre,` class
method.`),Sre.forEach(t),YMr=i($l),N8=n($l,"P",{});var yze=s(N8);KMr=r(yze,"This class cannot be instantiated directly using "),kTe=n(yze,"CODE",{});var pyt=s(kTe);ZMr=r(pyt,"__init__()"),pyt.forEach(t),eEr=r(yze," (throws an error)."),yze.forEach(t),oEr=i($l),Rt=n($l,"DIV",{class:!0});var NA=s(Rt);T(q8.$$.fragment,NA),rEr=i(NA),STe=n(NA,"P",{});var _yt=s(STe);tEr=r(_yt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_yt.forEach(t),aEr=i(NA),mc=n(NA,"P",{});var Rre=s(mc);nEr=r(Rre,`Note:
Loading a model from its configuration file does `),RTe=n(Rre,"STRONG",{});var uyt=s(RTe);sEr=r(uyt,"not"),uyt.forEach(t),lEr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(Rre,"A",{href:!0});var byt=s(eJ);iEr=r(byt,"from_pretrained()"),byt.forEach(t),dEr=r(Rre," to load the model weights."),Rre.forEach(t),cEr=i(NA),T(RE.$$.fragment,NA),NA.forEach(t),fEr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(j8.$$.fragment,kl),mEr=i(kl),PTe=n(kl,"P",{});var vyt=s(PTe);gEr=r(vyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vyt.forEach(t),hEr=i(kl),ln=n(kl,"P",{});var qA=s(ln);pEr=r(qA,"The model class to instantiate is selected based on the "),BTe=n(qA,"CODE",{});var Fyt=s(BTe);_Er=r(Fyt,"model_type"),Fyt.forEach(t),uEr=r(qA,` property of the config object (either
passed as an argument or loaded from `),ITe=n(qA,"CODE",{});var Tyt=s(ITe);bEr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),vEr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(qA,"CODE",{});var Myt=s(NTe);FEr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),TEr=r(qA,":"),qA.forEach(t),MEr=i(kl),dn=n(kl,"UL",{});var jA=s(dn);PE=n(jA,"LI",{});var VNe=s(PE);qTe=n(VNe,"STRONG",{});var Eyt=s(qTe);EEr=r(Eyt,"convnext"),Eyt.forEach(t),CEr=r(VNe," \u2014 "),oJ=n(VNe,"A",{href:!0});var Cyt=s(oJ);wEr=r(Cyt,"TFConvNextForImageClassification"),Cyt.forEach(t),AEr=r(VNe," (ConvNeXT model)"),VNe.forEach(t),LEr=i(jA),BE=n(jA,"LI",{});var XNe=s(BE);jTe=n(XNe,"STRONG",{});var wyt=s(jTe);yEr=r(wyt,"data2vec-vision"),wyt.forEach(t),xEr=r(XNe," \u2014 "),rJ=n(XNe,"A",{href:!0});var Ayt=s(rJ);$Er=r(Ayt,"TFData2VecVisionForImageClassification"),Ayt.forEach(t),kEr=r(XNe," (Data2VecVision model)"),XNe.forEach(t),SEr=i(jA),IE=n(jA,"LI",{});var zNe=s(IE);DTe=n(zNe,"STRONG",{});var Lyt=s(DTe);REr=r(Lyt,"swin"),Lyt.forEach(t),PEr=r(zNe," \u2014 "),tJ=n(zNe,"A",{href:!0});var yyt=s(tJ);BEr=r(yyt,"TFSwinForImageClassification"),yyt.forEach(t),IEr=r(zNe," (Swin Transformer model)"),zNe.forEach(t),NEr=i(jA),NE=n(jA,"LI",{});var QNe=s(NE);GTe=n(QNe,"STRONG",{});var xyt=s(GTe);qEr=r(xyt,"vit"),xyt.forEach(t),jEr=r(QNe," \u2014 "),aJ=n(QNe,"A",{href:!0});var $yt=s(aJ);DEr=r($yt,"TFViTForImageClassification"),$yt.forEach(t),GEr=r(QNe," (ViT model)"),QNe.forEach(t),jA.forEach(t),OEr=i(kl),T(qE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),TVe=i(f),gc=n(f,"H2",{class:!0});var xze=s(gc);jE=n(xze,"A",{id:!0,class:!0,href:!0});var kyt=s(jE);OTe=n(kyt,"SPAN",{});var Syt=s(OTe);T(D8.$$.fragment,Syt),Syt.forEach(t),kyt.forEach(t),VEr=i(xze),VTe=n(xze,"SPAN",{});var Ryt=s(VTe);XEr=r(Ryt,"TFAutoModelForMaskedLM"),Ryt.forEach(t),xze.forEach(t),MVe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(G8.$$.fragment,Sl),zEr=i(Sl),hc=n(Sl,"P",{});var Pre=s(hc);QEr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nJ=n(Pre,"A",{href:!0});var Pyt=s(nJ);WEr=r(Pyt,"from_pretrained()"),Pyt.forEach(t),HEr=r(Pre," class method or the "),sJ=n(Pre,"A",{href:!0});var Byt=s(sJ);UEr=r(Byt,"from_config()"),Byt.forEach(t),JEr=r(Pre,` class
method.`),Pre.forEach(t),YEr=i(Sl),O8=n(Sl,"P",{});var $ze=s(O8);KEr=r($ze,"This class cannot be instantiated directly using "),XTe=n($ze,"CODE",{});var Iyt=s(XTe);ZEr=r(Iyt,"__init__()"),Iyt.forEach(t),e4r=r($ze," (throws an error)."),$ze.forEach(t),o4r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var DA=s(Pt);T(V8.$$.fragment,DA),r4r=i(DA),zTe=n(DA,"P",{});var Nyt=s(zTe);t4r=r(Nyt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nyt.forEach(t),a4r=i(DA),pc=n(DA,"P",{});var Bre=s(pc);n4r=r(Bre,`Note:
Loading a model from its configuration file does `),QTe=n(Bre,"STRONG",{});var qyt=s(QTe);s4r=r(qyt,"not"),qyt.forEach(t),l4r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(Bre,"A",{href:!0});var jyt=s(lJ);i4r=r(jyt,"from_pretrained()"),jyt.forEach(t),d4r=r(Bre," to load the model weights."),Bre.forEach(t),c4r=i(DA),T(DE.$$.fragment,DA),DA.forEach(t),f4r=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(X8.$$.fragment,Rl),m4r=i(Rl),WTe=n(Rl,"P",{});var Dyt=s(WTe);g4r=r(Dyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dyt.forEach(t),h4r=i(Rl),cn=n(Rl,"P",{});var GA=s(cn);p4r=r(GA,"The model class to instantiate is selected based on the "),HTe=n(GA,"CODE",{});var Gyt=s(HTe);_4r=r(Gyt,"model_type"),Gyt.forEach(t),u4r=r(GA,` property of the config object (either
passed as an argument or loaded from `),UTe=n(GA,"CODE",{});var Oyt=s(UTe);b4r=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),v4r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(GA,"CODE",{});var Vyt=s(JTe);F4r=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),T4r=r(GA,":"),GA.forEach(t),M4r=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);GE=n(fe,"LI",{});var WNe=s(GE);YTe=n(WNe,"STRONG",{});var Xyt=s(YTe);E4r=r(Xyt,"albert"),Xyt.forEach(t),C4r=r(WNe," \u2014 "),iJ=n(WNe,"A",{href:!0});var zyt=s(iJ);w4r=r(zyt,"TFAlbertForMaskedLM"),zyt.forEach(t),A4r=r(WNe," (ALBERT model)"),WNe.forEach(t),L4r=i(fe),OE=n(fe,"LI",{});var HNe=s(OE);KTe=n(HNe,"STRONG",{});var Qyt=s(KTe);y4r=r(Qyt,"bert"),Qyt.forEach(t),x4r=r(HNe," \u2014 "),dJ=n(HNe,"A",{href:!0});var Wyt=s(dJ);$4r=r(Wyt,"TFBertForMaskedLM"),Wyt.forEach(t),k4r=r(HNe," (BERT model)"),HNe.forEach(t),S4r=i(fe),VE=n(fe,"LI",{});var UNe=s(VE);ZTe=n(UNe,"STRONG",{});var Hyt=s(ZTe);R4r=r(Hyt,"camembert"),Hyt.forEach(t),P4r=r(UNe," \u2014 "),cJ=n(UNe,"A",{href:!0});var Uyt=s(cJ);B4r=r(Uyt,"TFCamembertForMaskedLM"),Uyt.forEach(t),I4r=r(UNe," (CamemBERT model)"),UNe.forEach(t),N4r=i(fe),XE=n(fe,"LI",{});var JNe=s(XE);e9e=n(JNe,"STRONG",{});var Jyt=s(e9e);q4r=r(Jyt,"convbert"),Jyt.forEach(t),j4r=r(JNe," \u2014 "),fJ=n(JNe,"A",{href:!0});var Yyt=s(fJ);D4r=r(Yyt,"TFConvBertForMaskedLM"),Yyt.forEach(t),G4r=r(JNe," (ConvBERT model)"),JNe.forEach(t),O4r=i(fe),zE=n(fe,"LI",{});var YNe=s(zE);o9e=n(YNe,"STRONG",{});var Kyt=s(o9e);V4r=r(Kyt,"deberta"),Kyt.forEach(t),X4r=r(YNe," \u2014 "),mJ=n(YNe,"A",{href:!0});var Zyt=s(mJ);z4r=r(Zyt,"TFDebertaForMaskedLM"),Zyt.forEach(t),Q4r=r(YNe," (DeBERTa model)"),YNe.forEach(t),W4r=i(fe),QE=n(fe,"LI",{});var KNe=s(QE);r9e=n(KNe,"STRONG",{});var e8t=s(r9e);H4r=r(e8t,"deberta-v2"),e8t.forEach(t),U4r=r(KNe," \u2014 "),gJ=n(KNe,"A",{href:!0});var o8t=s(gJ);J4r=r(o8t,"TFDebertaV2ForMaskedLM"),o8t.forEach(t),Y4r=r(KNe," (DeBERTa-v2 model)"),KNe.forEach(t),K4r=i(fe),WE=n(fe,"LI",{});var ZNe=s(WE);t9e=n(ZNe,"STRONG",{});var r8t=s(t9e);Z4r=r(r8t,"distilbert"),r8t.forEach(t),eCr=r(ZNe," \u2014 "),hJ=n(ZNe,"A",{href:!0});var t8t=s(hJ);oCr=r(t8t,"TFDistilBertForMaskedLM"),t8t.forEach(t),rCr=r(ZNe," (DistilBERT model)"),ZNe.forEach(t),tCr=i(fe),HE=n(fe,"LI",{});var eqe=s(HE);a9e=n(eqe,"STRONG",{});var a8t=s(a9e);aCr=r(a8t,"electra"),a8t.forEach(t),nCr=r(eqe," \u2014 "),pJ=n(eqe,"A",{href:!0});var n8t=s(pJ);sCr=r(n8t,"TFElectraForMaskedLM"),n8t.forEach(t),lCr=r(eqe," (ELECTRA model)"),eqe.forEach(t),iCr=i(fe),UE=n(fe,"LI",{});var oqe=s(UE);n9e=n(oqe,"STRONG",{});var s8t=s(n9e);dCr=r(s8t,"flaubert"),s8t.forEach(t),cCr=r(oqe," \u2014 "),_J=n(oqe,"A",{href:!0});var l8t=s(_J);fCr=r(l8t,"TFFlaubertWithLMHeadModel"),l8t.forEach(t),mCr=r(oqe," (FlauBERT model)"),oqe.forEach(t),gCr=i(fe),JE=n(fe,"LI",{});var rqe=s(JE);s9e=n(rqe,"STRONG",{});var i8t=s(s9e);hCr=r(i8t,"funnel"),i8t.forEach(t),pCr=r(rqe," \u2014 "),uJ=n(rqe,"A",{href:!0});var d8t=s(uJ);_Cr=r(d8t,"TFFunnelForMaskedLM"),d8t.forEach(t),uCr=r(rqe," (Funnel Transformer model)"),rqe.forEach(t),bCr=i(fe),YE=n(fe,"LI",{});var tqe=s(YE);l9e=n(tqe,"STRONG",{});var c8t=s(l9e);vCr=r(c8t,"layoutlm"),c8t.forEach(t),FCr=r(tqe," \u2014 "),bJ=n(tqe,"A",{href:!0});var f8t=s(bJ);TCr=r(f8t,"TFLayoutLMForMaskedLM"),f8t.forEach(t),MCr=r(tqe," (LayoutLM model)"),tqe.forEach(t),ECr=i(fe),KE=n(fe,"LI",{});var aqe=s(KE);i9e=n(aqe,"STRONG",{});var m8t=s(i9e);CCr=r(m8t,"longformer"),m8t.forEach(t),wCr=r(aqe," \u2014 "),vJ=n(aqe,"A",{href:!0});var g8t=s(vJ);ACr=r(g8t,"TFLongformerForMaskedLM"),g8t.forEach(t),LCr=r(aqe," (Longformer model)"),aqe.forEach(t),yCr=i(fe),ZE=n(fe,"LI",{});var nqe=s(ZE);d9e=n(nqe,"STRONG",{});var h8t=s(d9e);xCr=r(h8t,"mobilebert"),h8t.forEach(t),$Cr=r(nqe," \u2014 "),FJ=n(nqe,"A",{href:!0});var p8t=s(FJ);kCr=r(p8t,"TFMobileBertForMaskedLM"),p8t.forEach(t),SCr=r(nqe," (MobileBERT model)"),nqe.forEach(t),RCr=i(fe),e4=n(fe,"LI",{});var sqe=s(e4);c9e=n(sqe,"STRONG",{});var _8t=s(c9e);PCr=r(_8t,"mpnet"),_8t.forEach(t),BCr=r(sqe," \u2014 "),TJ=n(sqe,"A",{href:!0});var u8t=s(TJ);ICr=r(u8t,"TFMPNetForMaskedLM"),u8t.forEach(t),NCr=r(sqe," (MPNet model)"),sqe.forEach(t),qCr=i(fe),o4=n(fe,"LI",{});var lqe=s(o4);f9e=n(lqe,"STRONG",{});var b8t=s(f9e);jCr=r(b8t,"rembert"),b8t.forEach(t),DCr=r(lqe," \u2014 "),MJ=n(lqe,"A",{href:!0});var v8t=s(MJ);GCr=r(v8t,"TFRemBertForMaskedLM"),v8t.forEach(t),OCr=r(lqe," (RemBERT model)"),lqe.forEach(t),VCr=i(fe),r4=n(fe,"LI",{});var iqe=s(r4);m9e=n(iqe,"STRONG",{});var F8t=s(m9e);XCr=r(F8t,"roberta"),F8t.forEach(t),zCr=r(iqe," \u2014 "),EJ=n(iqe,"A",{href:!0});var T8t=s(EJ);QCr=r(T8t,"TFRobertaForMaskedLM"),T8t.forEach(t),WCr=r(iqe," (RoBERTa model)"),iqe.forEach(t),HCr=i(fe),t4=n(fe,"LI",{});var dqe=s(t4);g9e=n(dqe,"STRONG",{});var M8t=s(g9e);UCr=r(M8t,"roformer"),M8t.forEach(t),JCr=r(dqe," \u2014 "),CJ=n(dqe,"A",{href:!0});var E8t=s(CJ);YCr=r(E8t,"TFRoFormerForMaskedLM"),E8t.forEach(t),KCr=r(dqe," (RoFormer model)"),dqe.forEach(t),ZCr=i(fe),a4=n(fe,"LI",{});var cqe=s(a4);h9e=n(cqe,"STRONG",{});var C8t=s(h9e);e5r=r(C8t,"tapas"),C8t.forEach(t),o5r=r(cqe," \u2014 "),wJ=n(cqe,"A",{href:!0});var w8t=s(wJ);r5r=r(w8t,"TFTapasForMaskedLM"),w8t.forEach(t),t5r=r(cqe," (TAPAS model)"),cqe.forEach(t),a5r=i(fe),n4=n(fe,"LI",{});var fqe=s(n4);p9e=n(fqe,"STRONG",{});var A8t=s(p9e);n5r=r(A8t,"xlm"),A8t.forEach(t),s5r=r(fqe," \u2014 "),AJ=n(fqe,"A",{href:!0});var L8t=s(AJ);l5r=r(L8t,"TFXLMWithLMHeadModel"),L8t.forEach(t),i5r=r(fqe," (XLM model)"),fqe.forEach(t),d5r=i(fe),s4=n(fe,"LI",{});var mqe=s(s4);_9e=n(mqe,"STRONG",{});var y8t=s(_9e);c5r=r(y8t,"xlm-roberta"),y8t.forEach(t),f5r=r(mqe," \u2014 "),LJ=n(mqe,"A",{href:!0});var x8t=s(LJ);m5r=r(x8t,"TFXLMRobertaForMaskedLM"),x8t.forEach(t),g5r=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),fe.forEach(t),h5r=i(Rl),T(l4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),EVe=i(f),_c=n(f,"H2",{class:!0});var kze=s(_c);i4=n(kze,"A",{id:!0,class:!0,href:!0});var $8t=s(i4);u9e=n($8t,"SPAN",{});var k8t=s(u9e);T(z8.$$.fragment,k8t),k8t.forEach(t),$8t.forEach(t),p5r=i(kze),b9e=n(kze,"SPAN",{});var S8t=s(b9e);_5r=r(S8t,"TFAutoModelForSeq2SeqLM"),S8t.forEach(t),kze.forEach(t),CVe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(Q8.$$.fragment,Pl),u5r=i(Pl),uc=n(Pl,"P",{});var Ire=s(uc);b5r=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yJ=n(Ire,"A",{href:!0});var R8t=s(yJ);v5r=r(R8t,"from_pretrained()"),R8t.forEach(t),F5r=r(Ire," class method or the "),xJ=n(Ire,"A",{href:!0});var P8t=s(xJ);T5r=r(P8t,"from_config()"),P8t.forEach(t),M5r=r(Ire,` class
method.`),Ire.forEach(t),E5r=i(Pl),W8=n(Pl,"P",{});var Sze=s(W8);C5r=r(Sze,"This class cannot be instantiated directly using "),v9e=n(Sze,"CODE",{});var B8t=s(v9e);w5r=r(B8t,"__init__()"),B8t.forEach(t),A5r=r(Sze," (throws an error)."),Sze.forEach(t),L5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var OA=s(Bt);T(H8.$$.fragment,OA),y5r=i(OA),F9e=n(OA,"P",{});var I8t=s(F9e);x5r=r(I8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I8t.forEach(t),$5r=i(OA),bc=n(OA,"P",{});var Nre=s(bc);k5r=r(Nre,`Note:
Loading a model from its configuration file does `),T9e=n(Nre,"STRONG",{});var N8t=s(T9e);S5r=r(N8t,"not"),N8t.forEach(t),R5r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(Nre,"A",{href:!0});var q8t=s($J);P5r=r(q8t,"from_pretrained()"),q8t.forEach(t),B5r=r(Nre," to load the model weights."),Nre.forEach(t),I5r=i(OA),T(d4.$$.fragment,OA),OA.forEach(t),N5r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(U8.$$.fragment,Bl),q5r=i(Bl),M9e=n(Bl,"P",{});var j8t=s(M9e);j5r=r(j8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j8t.forEach(t),D5r=i(Bl),fn=n(Bl,"P",{});var VA=s(fn);G5r=r(VA,"The model class to instantiate is selected based on the "),E9e=n(VA,"CODE",{});var D8t=s(E9e);O5r=r(D8t,"model_type"),D8t.forEach(t),V5r=r(VA,` property of the config object (either
passed as an argument or loaded from `),C9e=n(VA,"CODE",{});var G8t=s(C9e);X5r=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),z5r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=n(VA,"CODE",{});var O8t=s(w9e);Q5r=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),W5r=r(VA,":"),VA.forEach(t),H5r=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);c4=n(Ie,"LI",{});var gqe=s(c4);A9e=n(gqe,"STRONG",{});var V8t=s(A9e);U5r=r(V8t,"bart"),V8t.forEach(t),J5r=r(gqe," \u2014 "),kJ=n(gqe,"A",{href:!0});var X8t=s(kJ);Y5r=r(X8t,"TFBartForConditionalGeneration"),X8t.forEach(t),K5r=r(gqe," (BART model)"),gqe.forEach(t),Z5r=i(Ie),f4=n(Ie,"LI",{});var hqe=s(f4);L9e=n(hqe,"STRONG",{});var z8t=s(L9e);e3r=r(z8t,"blenderbot"),z8t.forEach(t),o3r=r(hqe," \u2014 "),SJ=n(hqe,"A",{href:!0});var Q8t=s(SJ);r3r=r(Q8t,"TFBlenderbotForConditionalGeneration"),Q8t.forEach(t),t3r=r(hqe," (Blenderbot model)"),hqe.forEach(t),a3r=i(Ie),m4=n(Ie,"LI",{});var pqe=s(m4);y9e=n(pqe,"STRONG",{});var W8t=s(y9e);n3r=r(W8t,"blenderbot-small"),W8t.forEach(t),s3r=r(pqe," \u2014 "),RJ=n(pqe,"A",{href:!0});var H8t=s(RJ);l3r=r(H8t,"TFBlenderbotSmallForConditionalGeneration"),H8t.forEach(t),i3r=r(pqe," (BlenderbotSmall model)"),pqe.forEach(t),d3r=i(Ie),g4=n(Ie,"LI",{});var _qe=s(g4);x9e=n(_qe,"STRONG",{});var U8t=s(x9e);c3r=r(U8t,"encoder-decoder"),U8t.forEach(t),f3r=r(_qe," \u2014 "),PJ=n(_qe,"A",{href:!0});var J8t=s(PJ);m3r=r(J8t,"TFEncoderDecoderModel"),J8t.forEach(t),g3r=r(_qe," (Encoder decoder model)"),_qe.forEach(t),h3r=i(Ie),h4=n(Ie,"LI",{});var uqe=s(h4);$9e=n(uqe,"STRONG",{});var Y8t=s($9e);p3r=r(Y8t,"led"),Y8t.forEach(t),_3r=r(uqe," \u2014 "),BJ=n(uqe,"A",{href:!0});var K8t=s(BJ);u3r=r(K8t,"TFLEDForConditionalGeneration"),K8t.forEach(t),b3r=r(uqe," (LED model)"),uqe.forEach(t),v3r=i(Ie),p4=n(Ie,"LI",{});var bqe=s(p4);k9e=n(bqe,"STRONG",{});var Z8t=s(k9e);F3r=r(Z8t,"marian"),Z8t.forEach(t),T3r=r(bqe," \u2014 "),IJ=n(bqe,"A",{href:!0});var ext=s(IJ);M3r=r(ext,"TFMarianMTModel"),ext.forEach(t),E3r=r(bqe," (Marian model)"),bqe.forEach(t),C3r=i(Ie),_4=n(Ie,"LI",{});var vqe=s(_4);S9e=n(vqe,"STRONG",{});var oxt=s(S9e);w3r=r(oxt,"mbart"),oxt.forEach(t),A3r=r(vqe," \u2014 "),NJ=n(vqe,"A",{href:!0});var rxt=s(NJ);L3r=r(rxt,"TFMBartForConditionalGeneration"),rxt.forEach(t),y3r=r(vqe," (mBART model)"),vqe.forEach(t),x3r=i(Ie),u4=n(Ie,"LI",{});var Fqe=s(u4);R9e=n(Fqe,"STRONG",{});var txt=s(R9e);$3r=r(txt,"mt5"),txt.forEach(t),k3r=r(Fqe," \u2014 "),qJ=n(Fqe,"A",{href:!0});var axt=s(qJ);S3r=r(axt,"TFMT5ForConditionalGeneration"),axt.forEach(t),R3r=r(Fqe," (MT5 model)"),Fqe.forEach(t),P3r=i(Ie),b4=n(Ie,"LI",{});var Tqe=s(b4);P9e=n(Tqe,"STRONG",{});var nxt=s(P9e);B3r=r(nxt,"pegasus"),nxt.forEach(t),I3r=r(Tqe," \u2014 "),jJ=n(Tqe,"A",{href:!0});var sxt=s(jJ);N3r=r(sxt,"TFPegasusForConditionalGeneration"),sxt.forEach(t),q3r=r(Tqe," (Pegasus model)"),Tqe.forEach(t),j3r=i(Ie),v4=n(Ie,"LI",{});var Mqe=s(v4);B9e=n(Mqe,"STRONG",{});var lxt=s(B9e);D3r=r(lxt,"t5"),lxt.forEach(t),G3r=r(Mqe," \u2014 "),DJ=n(Mqe,"A",{href:!0});var ixt=s(DJ);O3r=r(ixt,"TFT5ForConditionalGeneration"),ixt.forEach(t),V3r=r(Mqe," (T5 model)"),Mqe.forEach(t),Ie.forEach(t),X3r=i(Bl),T(F4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),wVe=i(f),vc=n(f,"H2",{class:!0});var Rze=s(vc);T4=n(Rze,"A",{id:!0,class:!0,href:!0});var dxt=s(T4);I9e=n(dxt,"SPAN",{});var cxt=s(I9e);T(J8.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),z3r=i(Rze),N9e=n(Rze,"SPAN",{});var fxt=s(N9e);Q3r=r(fxt,"TFAutoModelForSequenceClassification"),fxt.forEach(t),Rze.forEach(t),AVe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(Y8.$$.fragment,Il),W3r=i(Il),Fc=n(Il,"P",{});var qre=s(Fc);H3r=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GJ=n(qre,"A",{href:!0});var mxt=s(GJ);U3r=r(mxt,"from_pretrained()"),mxt.forEach(t),J3r=r(qre," class method or the "),OJ=n(qre,"A",{href:!0});var gxt=s(OJ);Y3r=r(gxt,"from_config()"),gxt.forEach(t),K3r=r(qre,` class
method.`),qre.forEach(t),Z3r=i(Il),K8=n(Il,"P",{});var Pze=s(K8);e0r=r(Pze,"This class cannot be instantiated directly using "),q9e=n(Pze,"CODE",{});var hxt=s(q9e);o0r=r(hxt,"__init__()"),hxt.forEach(t),r0r=r(Pze," (throws an error)."),Pze.forEach(t),t0r=i(Il),It=n(Il,"DIV",{class:!0});var XA=s(It);T(Z8.$$.fragment,XA),a0r=i(XA),j9e=n(XA,"P",{});var pxt=s(j9e);n0r=r(pxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pxt.forEach(t),s0r=i(XA),Tc=n(XA,"P",{});var jre=s(Tc);l0r=r(jre,`Note:
Loading a model from its configuration file does `),D9e=n(jre,"STRONG",{});var _xt=s(D9e);i0r=r(_xt,"not"),_xt.forEach(t),d0r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jre,"A",{href:!0});var uxt=s(VJ);c0r=r(uxt,"from_pretrained()"),uxt.forEach(t),f0r=r(jre," to load the model weights."),jre.forEach(t),m0r=i(XA),T(M4.$$.fragment,XA),XA.forEach(t),g0r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(ex.$$.fragment,Nl),h0r=i(Nl),G9e=n(Nl,"P",{});var bxt=s(G9e);p0r=r(bxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bxt.forEach(t),_0r=i(Nl),mn=n(Nl,"P",{});var zA=s(mn);u0r=r(zA,"The model class to instantiate is selected based on the "),O9e=n(zA,"CODE",{});var vxt=s(O9e);b0r=r(vxt,"model_type"),vxt.forEach(t),v0r=r(zA,` property of the config object (either
passed as an argument or loaded from `),V9e=n(zA,"CODE",{});var Fxt=s(V9e);F0r=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),T0r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=n(zA,"CODE",{});var Txt=s(X9e);M0r=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),E0r=r(zA,":"),zA.forEach(t),C0r=i(Nl),ae=n(Nl,"UL",{});var ne=s(ae);E4=n(ne,"LI",{});var Eqe=s(E4);z9e=n(Eqe,"STRONG",{});var Mxt=s(z9e);w0r=r(Mxt,"albert"),Mxt.forEach(t),A0r=r(Eqe," \u2014 "),XJ=n(Eqe,"A",{href:!0});var Ext=s(XJ);L0r=r(Ext,"TFAlbertForSequenceClassification"),Ext.forEach(t),y0r=r(Eqe," (ALBERT model)"),Eqe.forEach(t),x0r=i(ne),C4=n(ne,"LI",{});var Cqe=s(C4);Q9e=n(Cqe,"STRONG",{});var Cxt=s(Q9e);$0r=r(Cxt,"bert"),Cxt.forEach(t),k0r=r(Cqe," \u2014 "),zJ=n(Cqe,"A",{href:!0});var wxt=s(zJ);S0r=r(wxt,"TFBertForSequenceClassification"),wxt.forEach(t),R0r=r(Cqe," (BERT model)"),Cqe.forEach(t),P0r=i(ne),w4=n(ne,"LI",{});var wqe=s(w4);W9e=n(wqe,"STRONG",{});var Axt=s(W9e);B0r=r(Axt,"camembert"),Axt.forEach(t),I0r=r(wqe," \u2014 "),QJ=n(wqe,"A",{href:!0});var Lxt=s(QJ);N0r=r(Lxt,"TFCamembertForSequenceClassification"),Lxt.forEach(t),q0r=r(wqe," (CamemBERT model)"),wqe.forEach(t),j0r=i(ne),A4=n(ne,"LI",{});var Aqe=s(A4);H9e=n(Aqe,"STRONG",{});var yxt=s(H9e);D0r=r(yxt,"convbert"),yxt.forEach(t),G0r=r(Aqe," \u2014 "),WJ=n(Aqe,"A",{href:!0});var xxt=s(WJ);O0r=r(xxt,"TFConvBertForSequenceClassification"),xxt.forEach(t),V0r=r(Aqe," (ConvBERT model)"),Aqe.forEach(t),X0r=i(ne),L4=n(ne,"LI",{});var Lqe=s(L4);U9e=n(Lqe,"STRONG",{});var $xt=s(U9e);z0r=r($xt,"ctrl"),$xt.forEach(t),Q0r=r(Lqe," \u2014 "),HJ=n(Lqe,"A",{href:!0});var kxt=s(HJ);W0r=r(kxt,"TFCTRLForSequenceClassification"),kxt.forEach(t),H0r=r(Lqe," (CTRL model)"),Lqe.forEach(t),U0r=i(ne),y4=n(ne,"LI",{});var yqe=s(y4);J9e=n(yqe,"STRONG",{});var Sxt=s(J9e);J0r=r(Sxt,"deberta"),Sxt.forEach(t),Y0r=r(yqe," \u2014 "),UJ=n(yqe,"A",{href:!0});var Rxt=s(UJ);K0r=r(Rxt,"TFDebertaForSequenceClassification"),Rxt.forEach(t),Z0r=r(yqe," (DeBERTa model)"),yqe.forEach(t),ewr=i(ne),x4=n(ne,"LI",{});var xqe=s(x4);Y9e=n(xqe,"STRONG",{});var Pxt=s(Y9e);owr=r(Pxt,"deberta-v2"),Pxt.forEach(t),rwr=r(xqe," \u2014 "),JJ=n(xqe,"A",{href:!0});var Bxt=s(JJ);twr=r(Bxt,"TFDebertaV2ForSequenceClassification"),Bxt.forEach(t),awr=r(xqe," (DeBERTa-v2 model)"),xqe.forEach(t),nwr=i(ne),$4=n(ne,"LI",{});var $qe=s($4);K9e=n($qe,"STRONG",{});var Ixt=s(K9e);swr=r(Ixt,"distilbert"),Ixt.forEach(t),lwr=r($qe," \u2014 "),YJ=n($qe,"A",{href:!0});var Nxt=s(YJ);iwr=r(Nxt,"TFDistilBertForSequenceClassification"),Nxt.forEach(t),dwr=r($qe," (DistilBERT model)"),$qe.forEach(t),cwr=i(ne),k4=n(ne,"LI",{});var kqe=s(k4);Z9e=n(kqe,"STRONG",{});var qxt=s(Z9e);fwr=r(qxt,"electra"),qxt.forEach(t),mwr=r(kqe," \u2014 "),KJ=n(kqe,"A",{href:!0});var jxt=s(KJ);gwr=r(jxt,"TFElectraForSequenceClassification"),jxt.forEach(t),hwr=r(kqe," (ELECTRA model)"),kqe.forEach(t),pwr=i(ne),S4=n(ne,"LI",{});var Sqe=s(S4);eMe=n(Sqe,"STRONG",{});var Dxt=s(eMe);_wr=r(Dxt,"flaubert"),Dxt.forEach(t),uwr=r(Sqe," \u2014 "),ZJ=n(Sqe,"A",{href:!0});var Gxt=s(ZJ);bwr=r(Gxt,"TFFlaubertForSequenceClassification"),Gxt.forEach(t),vwr=r(Sqe," (FlauBERT model)"),Sqe.forEach(t),Fwr=i(ne),R4=n(ne,"LI",{});var Rqe=s(R4);oMe=n(Rqe,"STRONG",{});var Oxt=s(oMe);Twr=r(Oxt,"funnel"),Oxt.forEach(t),Mwr=r(Rqe," \u2014 "),eY=n(Rqe,"A",{href:!0});var Vxt=s(eY);Ewr=r(Vxt,"TFFunnelForSequenceClassification"),Vxt.forEach(t),Cwr=r(Rqe," (Funnel Transformer model)"),Rqe.forEach(t),wwr=i(ne),P4=n(ne,"LI",{});var Pqe=s(P4);rMe=n(Pqe,"STRONG",{});var Xxt=s(rMe);Awr=r(Xxt,"gpt2"),Xxt.forEach(t),Lwr=r(Pqe," \u2014 "),oY=n(Pqe,"A",{href:!0});var zxt=s(oY);ywr=r(zxt,"TFGPT2ForSequenceClassification"),zxt.forEach(t),xwr=r(Pqe," (OpenAI GPT-2 model)"),Pqe.forEach(t),$wr=i(ne),B4=n(ne,"LI",{});var Bqe=s(B4);tMe=n(Bqe,"STRONG",{});var Qxt=s(tMe);kwr=r(Qxt,"gptj"),Qxt.forEach(t),Swr=r(Bqe," \u2014 "),rY=n(Bqe,"A",{href:!0});var Wxt=s(rY);Rwr=r(Wxt,"TFGPTJForSequenceClassification"),Wxt.forEach(t),Pwr=r(Bqe," (GPT-J model)"),Bqe.forEach(t),Bwr=i(ne),I4=n(ne,"LI",{});var Iqe=s(I4);aMe=n(Iqe,"STRONG",{});var Hxt=s(aMe);Iwr=r(Hxt,"layoutlm"),Hxt.forEach(t),Nwr=r(Iqe," \u2014 "),tY=n(Iqe,"A",{href:!0});var Uxt=s(tY);qwr=r(Uxt,"TFLayoutLMForSequenceClassification"),Uxt.forEach(t),jwr=r(Iqe," (LayoutLM model)"),Iqe.forEach(t),Dwr=i(ne),N4=n(ne,"LI",{});var Nqe=s(N4);nMe=n(Nqe,"STRONG",{});var Jxt=s(nMe);Gwr=r(Jxt,"longformer"),Jxt.forEach(t),Owr=r(Nqe," \u2014 "),aY=n(Nqe,"A",{href:!0});var Yxt=s(aY);Vwr=r(Yxt,"TFLongformerForSequenceClassification"),Yxt.forEach(t),Xwr=r(Nqe," (Longformer model)"),Nqe.forEach(t),zwr=i(ne),q4=n(ne,"LI",{});var qqe=s(q4);sMe=n(qqe,"STRONG",{});var Kxt=s(sMe);Qwr=r(Kxt,"mobilebert"),Kxt.forEach(t),Wwr=r(qqe," \u2014 "),nY=n(qqe,"A",{href:!0});var Zxt=s(nY);Hwr=r(Zxt,"TFMobileBertForSequenceClassification"),Zxt.forEach(t),Uwr=r(qqe," (MobileBERT model)"),qqe.forEach(t),Jwr=i(ne),j4=n(ne,"LI",{});var jqe=s(j4);lMe=n(jqe,"STRONG",{});var e$t=s(lMe);Ywr=r(e$t,"mpnet"),e$t.forEach(t),Kwr=r(jqe," \u2014 "),sY=n(jqe,"A",{href:!0});var o$t=s(sY);Zwr=r(o$t,"TFMPNetForSequenceClassification"),o$t.forEach(t),eAr=r(jqe," (MPNet model)"),jqe.forEach(t),oAr=i(ne),D4=n(ne,"LI",{});var Dqe=s(D4);iMe=n(Dqe,"STRONG",{});var r$t=s(iMe);rAr=r(r$t,"openai-gpt"),r$t.forEach(t),tAr=r(Dqe," \u2014 "),lY=n(Dqe,"A",{href:!0});var t$t=s(lY);aAr=r(t$t,"TFOpenAIGPTForSequenceClassification"),t$t.forEach(t),nAr=r(Dqe," (OpenAI GPT model)"),Dqe.forEach(t),sAr=i(ne),G4=n(ne,"LI",{});var Gqe=s(G4);dMe=n(Gqe,"STRONG",{});var a$t=s(dMe);lAr=r(a$t,"rembert"),a$t.forEach(t),iAr=r(Gqe," \u2014 "),iY=n(Gqe,"A",{href:!0});var n$t=s(iY);dAr=r(n$t,"TFRemBertForSequenceClassification"),n$t.forEach(t),cAr=r(Gqe," (RemBERT model)"),Gqe.forEach(t),fAr=i(ne),O4=n(ne,"LI",{});var Oqe=s(O4);cMe=n(Oqe,"STRONG",{});var s$t=s(cMe);mAr=r(s$t,"roberta"),s$t.forEach(t),gAr=r(Oqe," \u2014 "),dY=n(Oqe,"A",{href:!0});var l$t=s(dY);hAr=r(l$t,"TFRobertaForSequenceClassification"),l$t.forEach(t),pAr=r(Oqe," (RoBERTa model)"),Oqe.forEach(t),_Ar=i(ne),V4=n(ne,"LI",{});var Vqe=s(V4);fMe=n(Vqe,"STRONG",{});var i$t=s(fMe);uAr=r(i$t,"roformer"),i$t.forEach(t),bAr=r(Vqe," \u2014 "),cY=n(Vqe,"A",{href:!0});var d$t=s(cY);vAr=r(d$t,"TFRoFormerForSequenceClassification"),d$t.forEach(t),FAr=r(Vqe," (RoFormer model)"),Vqe.forEach(t),TAr=i(ne),X4=n(ne,"LI",{});var Xqe=s(X4);mMe=n(Xqe,"STRONG",{});var c$t=s(mMe);MAr=r(c$t,"tapas"),c$t.forEach(t),EAr=r(Xqe," \u2014 "),fY=n(Xqe,"A",{href:!0});var f$t=s(fY);CAr=r(f$t,"TFTapasForSequenceClassification"),f$t.forEach(t),wAr=r(Xqe," (TAPAS model)"),Xqe.forEach(t),AAr=i(ne),z4=n(ne,"LI",{});var zqe=s(z4);gMe=n(zqe,"STRONG",{});var m$t=s(gMe);LAr=r(m$t,"transfo-xl"),m$t.forEach(t),yAr=r(zqe," \u2014 "),mY=n(zqe,"A",{href:!0});var g$t=s(mY);xAr=r(g$t,"TFTransfoXLForSequenceClassification"),g$t.forEach(t),$Ar=r(zqe," (Transformer-XL model)"),zqe.forEach(t),kAr=i(ne),Q4=n(ne,"LI",{});var Qqe=s(Q4);hMe=n(Qqe,"STRONG",{});var h$t=s(hMe);SAr=r(h$t,"xlm"),h$t.forEach(t),RAr=r(Qqe," \u2014 "),gY=n(Qqe,"A",{href:!0});var p$t=s(gY);PAr=r(p$t,"TFXLMForSequenceClassification"),p$t.forEach(t),BAr=r(Qqe," (XLM model)"),Qqe.forEach(t),IAr=i(ne),W4=n(ne,"LI",{});var Wqe=s(W4);pMe=n(Wqe,"STRONG",{});var _$t=s(pMe);NAr=r(_$t,"xlm-roberta"),_$t.forEach(t),qAr=r(Wqe," \u2014 "),hY=n(Wqe,"A",{href:!0});var u$t=s(hY);jAr=r(u$t,"TFXLMRobertaForSequenceClassification"),u$t.forEach(t),DAr=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),GAr=i(ne),H4=n(ne,"LI",{});var Hqe=s(H4);_Me=n(Hqe,"STRONG",{});var b$t=s(_Me);OAr=r(b$t,"xlnet"),b$t.forEach(t),VAr=r(Hqe," \u2014 "),pY=n(Hqe,"A",{href:!0});var v$t=s(pY);XAr=r(v$t,"TFXLNetForSequenceClassification"),v$t.forEach(t),zAr=r(Hqe," (XLNet model)"),Hqe.forEach(t),ne.forEach(t),QAr=i(Nl),T(U4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),LVe=i(f),Mc=n(f,"H2",{class:!0});var Bze=s(Mc);J4=n(Bze,"A",{id:!0,class:!0,href:!0});var F$t=s(J4);uMe=n(F$t,"SPAN",{});var T$t=s(uMe);T(ox.$$.fragment,T$t),T$t.forEach(t),F$t.forEach(t),WAr=i(Bze),bMe=n(Bze,"SPAN",{});var M$t=s(bMe);HAr=r(M$t,"TFAutoModelForMultipleChoice"),M$t.forEach(t),Bze.forEach(t),yVe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(rx.$$.fragment,ql),UAr=i(ql),Ec=n(ql,"P",{});var Dre=s(Ec);JAr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_Y=n(Dre,"A",{href:!0});var E$t=s(_Y);YAr=r(E$t,"from_pretrained()"),E$t.forEach(t),KAr=r(Dre," class method or the "),uY=n(Dre,"A",{href:!0});var C$t=s(uY);ZAr=r(C$t,"from_config()"),C$t.forEach(t),e6r=r(Dre,` class
method.`),Dre.forEach(t),o6r=i(ql),tx=n(ql,"P",{});var Ize=s(tx);r6r=r(Ize,"This class cannot be instantiated directly using "),vMe=n(Ize,"CODE",{});var w$t=s(vMe);t6r=r(w$t,"__init__()"),w$t.forEach(t),a6r=r(Ize," (throws an error)."),Ize.forEach(t),n6r=i(ql),Nt=n(ql,"DIV",{class:!0});var QA=s(Nt);T(ax.$$.fragment,QA),s6r=i(QA),FMe=n(QA,"P",{});var A$t=s(FMe);l6r=r(A$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A$t.forEach(t),i6r=i(QA),Cc=n(QA,"P",{});var Gre=s(Cc);d6r=r(Gre,`Note:
Loading a model from its configuration file does `),TMe=n(Gre,"STRONG",{});var L$t=s(TMe);c6r=r(L$t,"not"),L$t.forEach(t),f6r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Gre,"A",{href:!0});var y$t=s(bY);m6r=r(y$t,"from_pretrained()"),y$t.forEach(t),g6r=r(Gre," to load the model weights."),Gre.forEach(t),h6r=i(QA),T(Y4.$$.fragment,QA),QA.forEach(t),p6r=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(nx.$$.fragment,jl),_6r=i(jl),MMe=n(jl,"P",{});var x$t=s(MMe);u6r=r(x$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x$t.forEach(t),b6r=i(jl),gn=n(jl,"P",{});var WA=s(gn);v6r=r(WA,"The model class to instantiate is selected based on the "),EMe=n(WA,"CODE",{});var $$t=s(EMe);F6r=r($$t,"model_type"),$$t.forEach(t),T6r=r(WA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(WA,"CODE",{});var k$t=s(CMe);M6r=r(k$t,"pretrained_model_name_or_path"),k$t.forEach(t),E6r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(WA,"CODE",{});var S$t=s(wMe);C6r=r(S$t,"pretrained_model_name_or_path"),S$t.forEach(t),w6r=r(WA,":"),WA.forEach(t),A6r=i(jl),_e=n(jl,"UL",{});var ve=s(_e);K4=n(ve,"LI",{});var Uqe=s(K4);AMe=n(Uqe,"STRONG",{});var R$t=s(AMe);L6r=r(R$t,"albert"),R$t.forEach(t),y6r=r(Uqe," \u2014 "),vY=n(Uqe,"A",{href:!0});var P$t=s(vY);x6r=r(P$t,"TFAlbertForMultipleChoice"),P$t.forEach(t),$6r=r(Uqe," (ALBERT model)"),Uqe.forEach(t),k6r=i(ve),Z4=n(ve,"LI",{});var Jqe=s(Z4);LMe=n(Jqe,"STRONG",{});var B$t=s(LMe);S6r=r(B$t,"bert"),B$t.forEach(t),R6r=r(Jqe," \u2014 "),FY=n(Jqe,"A",{href:!0});var I$t=s(FY);P6r=r(I$t,"TFBertForMultipleChoice"),I$t.forEach(t),B6r=r(Jqe," (BERT model)"),Jqe.forEach(t),I6r=i(ve),eC=n(ve,"LI",{});var Yqe=s(eC);yMe=n(Yqe,"STRONG",{});var N$t=s(yMe);N6r=r(N$t,"camembert"),N$t.forEach(t),q6r=r(Yqe," \u2014 "),TY=n(Yqe,"A",{href:!0});var q$t=s(TY);j6r=r(q$t,"TFCamembertForMultipleChoice"),q$t.forEach(t),D6r=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),G6r=i(ve),oC=n(ve,"LI",{});var Kqe=s(oC);xMe=n(Kqe,"STRONG",{});var j$t=s(xMe);O6r=r(j$t,"convbert"),j$t.forEach(t),V6r=r(Kqe," \u2014 "),MY=n(Kqe,"A",{href:!0});var D$t=s(MY);X6r=r(D$t,"TFConvBertForMultipleChoice"),D$t.forEach(t),z6r=r(Kqe," (ConvBERT model)"),Kqe.forEach(t),Q6r=i(ve),rC=n(ve,"LI",{});var Zqe=s(rC);$Me=n(Zqe,"STRONG",{});var G$t=s($Me);W6r=r(G$t,"distilbert"),G$t.forEach(t),H6r=r(Zqe," \u2014 "),EY=n(Zqe,"A",{href:!0});var O$t=s(EY);U6r=r(O$t,"TFDistilBertForMultipleChoice"),O$t.forEach(t),J6r=r(Zqe," (DistilBERT model)"),Zqe.forEach(t),Y6r=i(ve),tC=n(ve,"LI",{});var eje=s(tC);kMe=n(eje,"STRONG",{});var V$t=s(kMe);K6r=r(V$t,"electra"),V$t.forEach(t),Z6r=r(eje," \u2014 "),CY=n(eje,"A",{href:!0});var X$t=s(CY);eLr=r(X$t,"TFElectraForMultipleChoice"),X$t.forEach(t),oLr=r(eje," (ELECTRA model)"),eje.forEach(t),rLr=i(ve),aC=n(ve,"LI",{});var oje=s(aC);SMe=n(oje,"STRONG",{});var z$t=s(SMe);tLr=r(z$t,"flaubert"),z$t.forEach(t),aLr=r(oje," \u2014 "),wY=n(oje,"A",{href:!0});var Q$t=s(wY);nLr=r(Q$t,"TFFlaubertForMultipleChoice"),Q$t.forEach(t),sLr=r(oje," (FlauBERT model)"),oje.forEach(t),lLr=i(ve),nC=n(ve,"LI",{});var rje=s(nC);RMe=n(rje,"STRONG",{});var W$t=s(RMe);iLr=r(W$t,"funnel"),W$t.forEach(t),dLr=r(rje," \u2014 "),AY=n(rje,"A",{href:!0});var H$t=s(AY);cLr=r(H$t,"TFFunnelForMultipleChoice"),H$t.forEach(t),fLr=r(rje," (Funnel Transformer model)"),rje.forEach(t),mLr=i(ve),sC=n(ve,"LI",{});var tje=s(sC);PMe=n(tje,"STRONG",{});var U$t=s(PMe);gLr=r(U$t,"longformer"),U$t.forEach(t),hLr=r(tje," \u2014 "),LY=n(tje,"A",{href:!0});var J$t=s(LY);pLr=r(J$t,"TFLongformerForMultipleChoice"),J$t.forEach(t),_Lr=r(tje," (Longformer model)"),tje.forEach(t),uLr=i(ve),lC=n(ve,"LI",{});var aje=s(lC);BMe=n(aje,"STRONG",{});var Y$t=s(BMe);bLr=r(Y$t,"mobilebert"),Y$t.forEach(t),vLr=r(aje," \u2014 "),yY=n(aje,"A",{href:!0});var K$t=s(yY);FLr=r(K$t,"TFMobileBertForMultipleChoice"),K$t.forEach(t),TLr=r(aje," (MobileBERT model)"),aje.forEach(t),MLr=i(ve),iC=n(ve,"LI",{});var nje=s(iC);IMe=n(nje,"STRONG",{});var Z$t=s(IMe);ELr=r(Z$t,"mpnet"),Z$t.forEach(t),CLr=r(nje," \u2014 "),xY=n(nje,"A",{href:!0});var ekt=s(xY);wLr=r(ekt,"TFMPNetForMultipleChoice"),ekt.forEach(t),ALr=r(nje," (MPNet model)"),nje.forEach(t),LLr=i(ve),dC=n(ve,"LI",{});var sje=s(dC);NMe=n(sje,"STRONG",{});var okt=s(NMe);yLr=r(okt,"rembert"),okt.forEach(t),xLr=r(sje," \u2014 "),$Y=n(sje,"A",{href:!0});var rkt=s($Y);$Lr=r(rkt,"TFRemBertForMultipleChoice"),rkt.forEach(t),kLr=r(sje," (RemBERT model)"),sje.forEach(t),SLr=i(ve),cC=n(ve,"LI",{});var lje=s(cC);qMe=n(lje,"STRONG",{});var tkt=s(qMe);RLr=r(tkt,"roberta"),tkt.forEach(t),PLr=r(lje," \u2014 "),kY=n(lje,"A",{href:!0});var akt=s(kY);BLr=r(akt,"TFRobertaForMultipleChoice"),akt.forEach(t),ILr=r(lje," (RoBERTa model)"),lje.forEach(t),NLr=i(ve),fC=n(ve,"LI",{});var ije=s(fC);jMe=n(ije,"STRONG",{});var nkt=s(jMe);qLr=r(nkt,"roformer"),nkt.forEach(t),jLr=r(ije," \u2014 "),SY=n(ije,"A",{href:!0});var skt=s(SY);DLr=r(skt,"TFRoFormerForMultipleChoice"),skt.forEach(t),GLr=r(ije," (RoFormer model)"),ije.forEach(t),OLr=i(ve),mC=n(ve,"LI",{});var dje=s(mC);DMe=n(dje,"STRONG",{});var lkt=s(DMe);VLr=r(lkt,"xlm"),lkt.forEach(t),XLr=r(dje," \u2014 "),RY=n(dje,"A",{href:!0});var ikt=s(RY);zLr=r(ikt,"TFXLMForMultipleChoice"),ikt.forEach(t),QLr=r(dje," (XLM model)"),dje.forEach(t),WLr=i(ve),gC=n(ve,"LI",{});var cje=s(gC);GMe=n(cje,"STRONG",{});var dkt=s(GMe);HLr=r(dkt,"xlm-roberta"),dkt.forEach(t),ULr=r(cje," \u2014 "),PY=n(cje,"A",{href:!0});var ckt=s(PY);JLr=r(ckt,"TFXLMRobertaForMultipleChoice"),ckt.forEach(t),YLr=r(cje," (XLM-RoBERTa model)"),cje.forEach(t),KLr=i(ve),hC=n(ve,"LI",{});var fje=s(hC);OMe=n(fje,"STRONG",{});var fkt=s(OMe);ZLr=r(fkt,"xlnet"),fkt.forEach(t),eyr=r(fje," \u2014 "),BY=n(fje,"A",{href:!0});var mkt=s(BY);oyr=r(mkt,"TFXLNetForMultipleChoice"),mkt.forEach(t),ryr=r(fje," (XLNet model)"),fje.forEach(t),ve.forEach(t),tyr=i(jl),T(pC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),xVe=i(f),wc=n(f,"H2",{class:!0});var Nze=s(wc);_C=n(Nze,"A",{id:!0,class:!0,href:!0});var gkt=s(_C);VMe=n(gkt,"SPAN",{});var hkt=s(VMe);T(sx.$$.fragment,hkt),hkt.forEach(t),gkt.forEach(t),ayr=i(Nze),XMe=n(Nze,"SPAN",{});var pkt=s(XMe);nyr=r(pkt,"TFAutoModelForNextSentencePrediction"),pkt.forEach(t),Nze.forEach(t),$Ve=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(lx.$$.fragment,Dl),syr=i(Dl),Ac=n(Dl,"P",{});var Ore=s(Ac);lyr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IY=n(Ore,"A",{href:!0});var _kt=s(IY);iyr=r(_kt,"from_pretrained()"),_kt.forEach(t),dyr=r(Ore," class method or the "),NY=n(Ore,"A",{href:!0});var ukt=s(NY);cyr=r(ukt,"from_config()"),ukt.forEach(t),fyr=r(Ore,` class
method.`),Ore.forEach(t),myr=i(Dl),ix=n(Dl,"P",{});var qze=s(ix);gyr=r(qze,"This class cannot be instantiated directly using "),zMe=n(qze,"CODE",{});var bkt=s(zMe);hyr=r(bkt,"__init__()"),bkt.forEach(t),pyr=r(qze," (throws an error)."),qze.forEach(t),_yr=i(Dl),qt=n(Dl,"DIV",{class:!0});var HA=s(qt);T(dx.$$.fragment,HA),uyr=i(HA),QMe=n(HA,"P",{});var vkt=s(QMe);byr=r(vkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vkt.forEach(t),vyr=i(HA),Lc=n(HA,"P",{});var Vre=s(Lc);Fyr=r(Vre,`Note:
Loading a model from its configuration file does `),WMe=n(Vre,"STRONG",{});var Fkt=s(WMe);Tyr=r(Fkt,"not"),Fkt.forEach(t),Myr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Vre,"A",{href:!0});var Tkt=s(qY);Eyr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),Cyr=r(Vre," to load the model weights."),Vre.forEach(t),wyr=i(HA),T(uC.$$.fragment,HA),HA.forEach(t),Ayr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(cx.$$.fragment,Gl),Lyr=i(Gl),HMe=n(Gl,"P",{});var Mkt=s(HMe);yyr=r(Mkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mkt.forEach(t),xyr=i(Gl),hn=n(Gl,"P",{});var UA=s(hn);$yr=r(UA,"The model class to instantiate is selected based on the "),UMe=n(UA,"CODE",{});var Ekt=s(UMe);kyr=r(Ekt,"model_type"),Ekt.forEach(t),Syr=r(UA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(UA,"CODE",{});var Ckt=s(JMe);Ryr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),Pyr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(UA,"CODE",{});var wkt=s(YMe);Byr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),Iyr=r(UA,":"),UA.forEach(t),Nyr=i(Gl),fx=n(Gl,"UL",{});var jze=s(fx);bC=n(jze,"LI",{});var mje=s(bC);KMe=n(mje,"STRONG",{});var Akt=s(KMe);qyr=r(Akt,"bert"),Akt.forEach(t),jyr=r(mje," \u2014 "),jY=n(mje,"A",{href:!0});var Lkt=s(jY);Dyr=r(Lkt,"TFBertForNextSentencePrediction"),Lkt.forEach(t),Gyr=r(mje," (BERT model)"),mje.forEach(t),Oyr=i(jze),vC=n(jze,"LI",{});var gje=s(vC);ZMe=n(gje,"STRONG",{});var ykt=s(ZMe);Vyr=r(ykt,"mobilebert"),ykt.forEach(t),Xyr=r(gje," \u2014 "),DY=n(gje,"A",{href:!0});var xkt=s(DY);zyr=r(xkt,"TFMobileBertForNextSentencePrediction"),xkt.forEach(t),Qyr=r(gje," (MobileBERT model)"),gje.forEach(t),jze.forEach(t),Wyr=i(Gl),T(FC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),kVe=i(f),yc=n(f,"H2",{class:!0});var Dze=s(yc);TC=n(Dze,"A",{id:!0,class:!0,href:!0});var $kt=s(TC);eEe=n($kt,"SPAN",{});var kkt=s(eEe);T(mx.$$.fragment,kkt),kkt.forEach(t),$kt.forEach(t),Hyr=i(Dze),oEe=n(Dze,"SPAN",{});var Skt=s(oEe);Uyr=r(Skt,"TFAutoModelForTableQuestionAnswering"),Skt.forEach(t),Dze.forEach(t),SVe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(gx.$$.fragment,Ol),Jyr=i(Ol),xc=n(Ol,"P",{});var Xre=s(xc);Yyr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GY=n(Xre,"A",{href:!0});var Rkt=s(GY);Kyr=r(Rkt,"from_pretrained()"),Rkt.forEach(t),Zyr=r(Xre," class method or the "),OY=n(Xre,"A",{href:!0});var Pkt=s(OY);e8r=r(Pkt,"from_config()"),Pkt.forEach(t),o8r=r(Xre,` class
method.`),Xre.forEach(t),r8r=i(Ol),hx=n(Ol,"P",{});var Gze=s(hx);t8r=r(Gze,"This class cannot be instantiated directly using "),rEe=n(Gze,"CODE",{});var Bkt=s(rEe);a8r=r(Bkt,"__init__()"),Bkt.forEach(t),n8r=r(Gze," (throws an error)."),Gze.forEach(t),s8r=i(Ol),jt=n(Ol,"DIV",{class:!0});var JA=s(jt);T(px.$$.fragment,JA),l8r=i(JA),tEe=n(JA,"P",{});var Ikt=s(tEe);i8r=r(Ikt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ikt.forEach(t),d8r=i(JA),$c=n(JA,"P",{});var zre=s($c);c8r=r(zre,`Note:
Loading a model from its configuration file does `),aEe=n(zre,"STRONG",{});var Nkt=s(aEe);f8r=r(Nkt,"not"),Nkt.forEach(t),m8r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(zre,"A",{href:!0});var qkt=s(VY);g8r=r(qkt,"from_pretrained()"),qkt.forEach(t),h8r=r(zre," to load the model weights."),zre.forEach(t),p8r=i(JA),T(MC.$$.fragment,JA),JA.forEach(t),_8r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(_x.$$.fragment,Vl),u8r=i(Vl),nEe=n(Vl,"P",{});var jkt=s(nEe);b8r=r(jkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jkt.forEach(t),v8r=i(Vl),pn=n(Vl,"P",{});var YA=s(pn);F8r=r(YA,"The model class to instantiate is selected based on the "),sEe=n(YA,"CODE",{});var Dkt=s(sEe);T8r=r(Dkt,"model_type"),Dkt.forEach(t),M8r=r(YA,` property of the config object (either
passed as an argument or loaded from `),lEe=n(YA,"CODE",{});var Gkt=s(lEe);E8r=r(Gkt,"pretrained_model_name_or_path"),Gkt.forEach(t),C8r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(YA,"CODE",{});var Okt=s(iEe);w8r=r(Okt,"pretrained_model_name_or_path"),Okt.forEach(t),A8r=r(YA,":"),YA.forEach(t),L8r=i(Vl),dEe=n(Vl,"UL",{});var Vkt=s(dEe);EC=n(Vkt,"LI",{});var hje=s(EC);cEe=n(hje,"STRONG",{});var Xkt=s(cEe);y8r=r(Xkt,"tapas"),Xkt.forEach(t),x8r=r(hje," \u2014 "),XY=n(hje,"A",{href:!0});var zkt=s(XY);$8r=r(zkt,"TFTapasForQuestionAnswering"),zkt.forEach(t),k8r=r(hje," (TAPAS model)"),hje.forEach(t),Vkt.forEach(t),S8r=i(Vl),T(CC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),RVe=i(f),kc=n(f,"H2",{class:!0});var Oze=s(kc);wC=n(Oze,"A",{id:!0,class:!0,href:!0});var Qkt=s(wC);fEe=n(Qkt,"SPAN",{});var Wkt=s(fEe);T(ux.$$.fragment,Wkt),Wkt.forEach(t),Qkt.forEach(t),R8r=i(Oze),mEe=n(Oze,"SPAN",{});var Hkt=s(mEe);P8r=r(Hkt,"TFAutoModelForTokenClassification"),Hkt.forEach(t),Oze.forEach(t),PVe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(bx.$$.fragment,Xl),B8r=i(Xl),Sc=n(Xl,"P",{});var Qre=s(Sc);I8r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zY=n(Qre,"A",{href:!0});var Ukt=s(zY);N8r=r(Ukt,"from_pretrained()"),Ukt.forEach(t),q8r=r(Qre," class method or the "),QY=n(Qre,"A",{href:!0});var Jkt=s(QY);j8r=r(Jkt,"from_config()"),Jkt.forEach(t),D8r=r(Qre,` class
method.`),Qre.forEach(t),G8r=i(Xl),vx=n(Xl,"P",{});var Vze=s(vx);O8r=r(Vze,"This class cannot be instantiated directly using "),gEe=n(Vze,"CODE",{});var Ykt=s(gEe);V8r=r(Ykt,"__init__()"),Ykt.forEach(t),X8r=r(Vze," (throws an error)."),Vze.forEach(t),z8r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var KA=s(Dt);T(Fx.$$.fragment,KA),Q8r=i(KA),hEe=n(KA,"P",{});var Kkt=s(hEe);W8r=r(Kkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kkt.forEach(t),H8r=i(KA),Rc=n(KA,"P",{});var Wre=s(Rc);U8r=r(Wre,`Note:
Loading a model from its configuration file does `),pEe=n(Wre,"STRONG",{});var Zkt=s(pEe);J8r=r(Zkt,"not"),Zkt.forEach(t),Y8r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(Wre,"A",{href:!0});var eSt=s(WY);K8r=r(eSt,"from_pretrained()"),eSt.forEach(t),Z8r=r(Wre," to load the model weights."),Wre.forEach(t),exr=i(KA),T(AC.$$.fragment,KA),KA.forEach(t),oxr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Tx.$$.fragment,zl),rxr=i(zl),_Ee=n(zl,"P",{});var oSt=s(_Ee);txr=r(oSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oSt.forEach(t),axr=i(zl),_n=n(zl,"P",{});var ZA=s(_n);nxr=r(ZA,"The model class to instantiate is selected based on the "),uEe=n(ZA,"CODE",{});var rSt=s(uEe);sxr=r(rSt,"model_type"),rSt.forEach(t),lxr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),bEe=n(ZA,"CODE",{});var tSt=s(bEe);ixr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),dxr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(ZA,"CODE",{});var aSt=s(vEe);cxr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),fxr=r(ZA,":"),ZA.forEach(t),mxr=i(zl),de=n(zl,"UL",{});var me=s(de);LC=n(me,"LI",{});var pje=s(LC);FEe=n(pje,"STRONG",{});var nSt=s(FEe);gxr=r(nSt,"albert"),nSt.forEach(t),hxr=r(pje," \u2014 "),HY=n(pje,"A",{href:!0});var sSt=s(HY);pxr=r(sSt,"TFAlbertForTokenClassification"),sSt.forEach(t),_xr=r(pje," (ALBERT model)"),pje.forEach(t),uxr=i(me),yC=n(me,"LI",{});var _je=s(yC);TEe=n(_je,"STRONG",{});var lSt=s(TEe);bxr=r(lSt,"bert"),lSt.forEach(t),vxr=r(_je," \u2014 "),UY=n(_je,"A",{href:!0});var iSt=s(UY);Fxr=r(iSt,"TFBertForTokenClassification"),iSt.forEach(t),Txr=r(_je," (BERT model)"),_je.forEach(t),Mxr=i(me),xC=n(me,"LI",{});var uje=s(xC);MEe=n(uje,"STRONG",{});var dSt=s(MEe);Exr=r(dSt,"camembert"),dSt.forEach(t),Cxr=r(uje," \u2014 "),JY=n(uje,"A",{href:!0});var cSt=s(JY);wxr=r(cSt,"TFCamembertForTokenClassification"),cSt.forEach(t),Axr=r(uje," (CamemBERT model)"),uje.forEach(t),Lxr=i(me),$C=n(me,"LI",{});var bje=s($C);EEe=n(bje,"STRONG",{});var fSt=s(EEe);yxr=r(fSt,"convbert"),fSt.forEach(t),xxr=r(bje," \u2014 "),YY=n(bje,"A",{href:!0});var mSt=s(YY);$xr=r(mSt,"TFConvBertForTokenClassification"),mSt.forEach(t),kxr=r(bje," (ConvBERT model)"),bje.forEach(t),Sxr=i(me),kC=n(me,"LI",{});var vje=s(kC);CEe=n(vje,"STRONG",{});var gSt=s(CEe);Rxr=r(gSt,"deberta"),gSt.forEach(t),Pxr=r(vje," \u2014 "),KY=n(vje,"A",{href:!0});var hSt=s(KY);Bxr=r(hSt,"TFDebertaForTokenClassification"),hSt.forEach(t),Ixr=r(vje," (DeBERTa model)"),vje.forEach(t),Nxr=i(me),SC=n(me,"LI",{});var Fje=s(SC);wEe=n(Fje,"STRONG",{});var pSt=s(wEe);qxr=r(pSt,"deberta-v2"),pSt.forEach(t),jxr=r(Fje," \u2014 "),ZY=n(Fje,"A",{href:!0});var _St=s(ZY);Dxr=r(_St,"TFDebertaV2ForTokenClassification"),_St.forEach(t),Gxr=r(Fje," (DeBERTa-v2 model)"),Fje.forEach(t),Oxr=i(me),RC=n(me,"LI",{});var Tje=s(RC);AEe=n(Tje,"STRONG",{});var uSt=s(AEe);Vxr=r(uSt,"distilbert"),uSt.forEach(t),Xxr=r(Tje," \u2014 "),eK=n(Tje,"A",{href:!0});var bSt=s(eK);zxr=r(bSt,"TFDistilBertForTokenClassification"),bSt.forEach(t),Qxr=r(Tje," (DistilBERT model)"),Tje.forEach(t),Wxr=i(me),PC=n(me,"LI",{});var Mje=s(PC);LEe=n(Mje,"STRONG",{});var vSt=s(LEe);Hxr=r(vSt,"electra"),vSt.forEach(t),Uxr=r(Mje," \u2014 "),oK=n(Mje,"A",{href:!0});var FSt=s(oK);Jxr=r(FSt,"TFElectraForTokenClassification"),FSt.forEach(t),Yxr=r(Mje," (ELECTRA model)"),Mje.forEach(t),Kxr=i(me),BC=n(me,"LI",{});var Eje=s(BC);yEe=n(Eje,"STRONG",{});var TSt=s(yEe);Zxr=r(TSt,"flaubert"),TSt.forEach(t),e$r=r(Eje," \u2014 "),rK=n(Eje,"A",{href:!0});var MSt=s(rK);o$r=r(MSt,"TFFlaubertForTokenClassification"),MSt.forEach(t),r$r=r(Eje," (FlauBERT model)"),Eje.forEach(t),t$r=i(me),IC=n(me,"LI",{});var Cje=s(IC);xEe=n(Cje,"STRONG",{});var ESt=s(xEe);a$r=r(ESt,"funnel"),ESt.forEach(t),n$r=r(Cje," \u2014 "),tK=n(Cje,"A",{href:!0});var CSt=s(tK);s$r=r(CSt,"TFFunnelForTokenClassification"),CSt.forEach(t),l$r=r(Cje," (Funnel Transformer model)"),Cje.forEach(t),i$r=i(me),NC=n(me,"LI",{});var wje=s(NC);$Ee=n(wje,"STRONG",{});var wSt=s($Ee);d$r=r(wSt,"layoutlm"),wSt.forEach(t),c$r=r(wje," \u2014 "),aK=n(wje,"A",{href:!0});var ASt=s(aK);f$r=r(ASt,"TFLayoutLMForTokenClassification"),ASt.forEach(t),m$r=r(wje," (LayoutLM model)"),wje.forEach(t),g$r=i(me),qC=n(me,"LI",{});var Aje=s(qC);kEe=n(Aje,"STRONG",{});var LSt=s(kEe);h$r=r(LSt,"longformer"),LSt.forEach(t),p$r=r(Aje," \u2014 "),nK=n(Aje,"A",{href:!0});var ySt=s(nK);_$r=r(ySt,"TFLongformerForTokenClassification"),ySt.forEach(t),u$r=r(Aje," (Longformer model)"),Aje.forEach(t),b$r=i(me),jC=n(me,"LI",{});var Lje=s(jC);SEe=n(Lje,"STRONG",{});var xSt=s(SEe);v$r=r(xSt,"mobilebert"),xSt.forEach(t),F$r=r(Lje," \u2014 "),sK=n(Lje,"A",{href:!0});var $St=s(sK);T$r=r($St,"TFMobileBertForTokenClassification"),$St.forEach(t),M$r=r(Lje," (MobileBERT model)"),Lje.forEach(t),E$r=i(me),DC=n(me,"LI",{});var yje=s(DC);REe=n(yje,"STRONG",{});var kSt=s(REe);C$r=r(kSt,"mpnet"),kSt.forEach(t),w$r=r(yje," \u2014 "),lK=n(yje,"A",{href:!0});var SSt=s(lK);A$r=r(SSt,"TFMPNetForTokenClassification"),SSt.forEach(t),L$r=r(yje," (MPNet model)"),yje.forEach(t),y$r=i(me),GC=n(me,"LI",{});var xje=s(GC);PEe=n(xje,"STRONG",{});var RSt=s(PEe);x$r=r(RSt,"rembert"),RSt.forEach(t),$$r=r(xje," \u2014 "),iK=n(xje,"A",{href:!0});var PSt=s(iK);k$r=r(PSt,"TFRemBertForTokenClassification"),PSt.forEach(t),S$r=r(xje," (RemBERT model)"),xje.forEach(t),R$r=i(me),OC=n(me,"LI",{});var $je=s(OC);BEe=n($je,"STRONG",{});var BSt=s(BEe);P$r=r(BSt,"roberta"),BSt.forEach(t),B$r=r($je," \u2014 "),dK=n($je,"A",{href:!0});var ISt=s(dK);I$r=r(ISt,"TFRobertaForTokenClassification"),ISt.forEach(t),N$r=r($je," (RoBERTa model)"),$je.forEach(t),q$r=i(me),VC=n(me,"LI",{});var kje=s(VC);IEe=n(kje,"STRONG",{});var NSt=s(IEe);j$r=r(NSt,"roformer"),NSt.forEach(t),D$r=r(kje," \u2014 "),cK=n(kje,"A",{href:!0});var qSt=s(cK);G$r=r(qSt,"TFRoFormerForTokenClassification"),qSt.forEach(t),O$r=r(kje," (RoFormer model)"),kje.forEach(t),V$r=i(me),XC=n(me,"LI",{});var Sje=s(XC);NEe=n(Sje,"STRONG",{});var jSt=s(NEe);X$r=r(jSt,"xlm"),jSt.forEach(t),z$r=r(Sje," \u2014 "),fK=n(Sje,"A",{href:!0});var DSt=s(fK);Q$r=r(DSt,"TFXLMForTokenClassification"),DSt.forEach(t),W$r=r(Sje," (XLM model)"),Sje.forEach(t),H$r=i(me),zC=n(me,"LI",{});var Rje=s(zC);qEe=n(Rje,"STRONG",{});var GSt=s(qEe);U$r=r(GSt,"xlm-roberta"),GSt.forEach(t),J$r=r(Rje," \u2014 "),mK=n(Rje,"A",{href:!0});var OSt=s(mK);Y$r=r(OSt,"TFXLMRobertaForTokenClassification"),OSt.forEach(t),K$r=r(Rje," (XLM-RoBERTa model)"),Rje.forEach(t),Z$r=i(me),QC=n(me,"LI",{});var Pje=s(QC);jEe=n(Pje,"STRONG",{});var VSt=s(jEe);ekr=r(VSt,"xlnet"),VSt.forEach(t),okr=r(Pje," \u2014 "),gK=n(Pje,"A",{href:!0});var XSt=s(gK);rkr=r(XSt,"TFXLNetForTokenClassification"),XSt.forEach(t),tkr=r(Pje," (XLNet model)"),Pje.forEach(t),me.forEach(t),akr=i(zl),T(WC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),BVe=i(f),Pc=n(f,"H2",{class:!0});var Xze=s(Pc);HC=n(Xze,"A",{id:!0,class:!0,href:!0});var zSt=s(HC);DEe=n(zSt,"SPAN",{});var QSt=s(DEe);T(Mx.$$.fragment,QSt),QSt.forEach(t),zSt.forEach(t),nkr=i(Xze),GEe=n(Xze,"SPAN",{});var WSt=s(GEe);skr=r(WSt,"TFAutoModelForQuestionAnswering"),WSt.forEach(t),Xze.forEach(t),IVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Ex.$$.fragment,Ql),lkr=i(Ql),Bc=n(Ql,"P",{});var Hre=s(Bc);ikr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hK=n(Hre,"A",{href:!0});var HSt=s(hK);dkr=r(HSt,"from_pretrained()"),HSt.forEach(t),ckr=r(Hre," class method or the "),pK=n(Hre,"A",{href:!0});var USt=s(pK);fkr=r(USt,"from_config()"),USt.forEach(t),mkr=r(Hre,` class
method.`),Hre.forEach(t),gkr=i(Ql),Cx=n(Ql,"P",{});var zze=s(Cx);hkr=r(zze,"This class cannot be instantiated directly using "),OEe=n(zze,"CODE",{});var JSt=s(OEe);pkr=r(JSt,"__init__()"),JSt.forEach(t),_kr=r(zze," (throws an error)."),zze.forEach(t),ukr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var e6=s(Gt);T(wx.$$.fragment,e6),bkr=i(e6),VEe=n(e6,"P",{});var YSt=s(VEe);vkr=r(YSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YSt.forEach(t),Fkr=i(e6),Ic=n(e6,"P",{});var Ure=s(Ic);Tkr=r(Ure,`Note:
Loading a model from its configuration file does `),XEe=n(Ure,"STRONG",{});var KSt=s(XEe);Mkr=r(KSt,"not"),KSt.forEach(t),Ekr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(Ure,"A",{href:!0});var ZSt=s(_K);Ckr=r(ZSt,"from_pretrained()"),ZSt.forEach(t),wkr=r(Ure," to load the model weights."),Ure.forEach(t),Akr=i(e6),T(UC.$$.fragment,e6),e6.forEach(t),Lkr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(Ax.$$.fragment,Wl),ykr=i(Wl),zEe=n(Wl,"P",{});var eRt=s(zEe);xkr=r(eRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eRt.forEach(t),$kr=i(Wl),un=n(Wl,"P",{});var o6=s(un);kkr=r(o6,"The model class to instantiate is selected based on the "),QEe=n(o6,"CODE",{});var oRt=s(QEe);Skr=r(oRt,"model_type"),oRt.forEach(t),Rkr=r(o6,` property of the config object (either
passed as an argument or loaded from `),WEe=n(o6,"CODE",{});var rRt=s(WEe);Pkr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),Bkr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(o6,"CODE",{});var tRt=s(HEe);Ikr=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),Nkr=r(o6,":"),o6.forEach(t),qkr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);JC=n(ge,"LI",{});var Bje=s(JC);UEe=n(Bje,"STRONG",{});var aRt=s(UEe);jkr=r(aRt,"albert"),aRt.forEach(t),Dkr=r(Bje," \u2014 "),uK=n(Bje,"A",{href:!0});var nRt=s(uK);Gkr=r(nRt,"TFAlbertForQuestionAnswering"),nRt.forEach(t),Okr=r(Bje," (ALBERT model)"),Bje.forEach(t),Vkr=i(ge),YC=n(ge,"LI",{});var Ije=s(YC);JEe=n(Ije,"STRONG",{});var sRt=s(JEe);Xkr=r(sRt,"bert"),sRt.forEach(t),zkr=r(Ije," \u2014 "),bK=n(Ije,"A",{href:!0});var lRt=s(bK);Qkr=r(lRt,"TFBertForQuestionAnswering"),lRt.forEach(t),Wkr=r(Ije," (BERT model)"),Ije.forEach(t),Hkr=i(ge),KC=n(ge,"LI",{});var Nje=s(KC);YEe=n(Nje,"STRONG",{});var iRt=s(YEe);Ukr=r(iRt,"camembert"),iRt.forEach(t),Jkr=r(Nje," \u2014 "),vK=n(Nje,"A",{href:!0});var dRt=s(vK);Ykr=r(dRt,"TFCamembertForQuestionAnswering"),dRt.forEach(t),Kkr=r(Nje," (CamemBERT model)"),Nje.forEach(t),Zkr=i(ge),ZC=n(ge,"LI",{});var qje=s(ZC);KEe=n(qje,"STRONG",{});var cRt=s(KEe);eSr=r(cRt,"convbert"),cRt.forEach(t),oSr=r(qje," \u2014 "),FK=n(qje,"A",{href:!0});var fRt=s(FK);rSr=r(fRt,"TFConvBertForQuestionAnswering"),fRt.forEach(t),tSr=r(qje," (ConvBERT model)"),qje.forEach(t),aSr=i(ge),e5=n(ge,"LI",{});var jje=s(e5);ZEe=n(jje,"STRONG",{});var mRt=s(ZEe);nSr=r(mRt,"deberta"),mRt.forEach(t),sSr=r(jje," \u2014 "),TK=n(jje,"A",{href:!0});var gRt=s(TK);lSr=r(gRt,"TFDebertaForQuestionAnswering"),gRt.forEach(t),iSr=r(jje," (DeBERTa model)"),jje.forEach(t),dSr=i(ge),o5=n(ge,"LI",{});var Dje=s(o5);e4e=n(Dje,"STRONG",{});var hRt=s(e4e);cSr=r(hRt,"deberta-v2"),hRt.forEach(t),fSr=r(Dje," \u2014 "),MK=n(Dje,"A",{href:!0});var pRt=s(MK);mSr=r(pRt,"TFDebertaV2ForQuestionAnswering"),pRt.forEach(t),gSr=r(Dje," (DeBERTa-v2 model)"),Dje.forEach(t),hSr=i(ge),r5=n(ge,"LI",{});var Gje=s(r5);o4e=n(Gje,"STRONG",{});var _Rt=s(o4e);pSr=r(_Rt,"distilbert"),_Rt.forEach(t),_Sr=r(Gje," \u2014 "),EK=n(Gje,"A",{href:!0});var uRt=s(EK);uSr=r(uRt,"TFDistilBertForQuestionAnswering"),uRt.forEach(t),bSr=r(Gje," (DistilBERT model)"),Gje.forEach(t),vSr=i(ge),t5=n(ge,"LI",{});var Oje=s(t5);r4e=n(Oje,"STRONG",{});var bRt=s(r4e);FSr=r(bRt,"electra"),bRt.forEach(t),TSr=r(Oje," \u2014 "),CK=n(Oje,"A",{href:!0});var vRt=s(CK);MSr=r(vRt,"TFElectraForQuestionAnswering"),vRt.forEach(t),ESr=r(Oje," (ELECTRA model)"),Oje.forEach(t),CSr=i(ge),a5=n(ge,"LI",{});var Vje=s(a5);t4e=n(Vje,"STRONG",{});var FRt=s(t4e);wSr=r(FRt,"flaubert"),FRt.forEach(t),ASr=r(Vje," \u2014 "),wK=n(Vje,"A",{href:!0});var TRt=s(wK);LSr=r(TRt,"TFFlaubertForQuestionAnsweringSimple"),TRt.forEach(t),ySr=r(Vje," (FlauBERT model)"),Vje.forEach(t),xSr=i(ge),n5=n(ge,"LI",{});var Xje=s(n5);a4e=n(Xje,"STRONG",{});var MRt=s(a4e);$Sr=r(MRt,"funnel"),MRt.forEach(t),kSr=r(Xje," \u2014 "),AK=n(Xje,"A",{href:!0});var ERt=s(AK);SSr=r(ERt,"TFFunnelForQuestionAnswering"),ERt.forEach(t),RSr=r(Xje," (Funnel Transformer model)"),Xje.forEach(t),PSr=i(ge),s5=n(ge,"LI",{});var zje=s(s5);n4e=n(zje,"STRONG",{});var CRt=s(n4e);BSr=r(CRt,"gptj"),CRt.forEach(t),ISr=r(zje," \u2014 "),LK=n(zje,"A",{href:!0});var wRt=s(LK);NSr=r(wRt,"TFGPTJForQuestionAnswering"),wRt.forEach(t),qSr=r(zje," (GPT-J model)"),zje.forEach(t),jSr=i(ge),l5=n(ge,"LI",{});var Qje=s(l5);s4e=n(Qje,"STRONG",{});var ARt=s(s4e);DSr=r(ARt,"longformer"),ARt.forEach(t),GSr=r(Qje," \u2014 "),yK=n(Qje,"A",{href:!0});var LRt=s(yK);OSr=r(LRt,"TFLongformerForQuestionAnswering"),LRt.forEach(t),VSr=r(Qje," (Longformer model)"),Qje.forEach(t),XSr=i(ge),i5=n(ge,"LI",{});var Wje=s(i5);l4e=n(Wje,"STRONG",{});var yRt=s(l4e);zSr=r(yRt,"mobilebert"),yRt.forEach(t),QSr=r(Wje," \u2014 "),xK=n(Wje,"A",{href:!0});var xRt=s(xK);WSr=r(xRt,"TFMobileBertForQuestionAnswering"),xRt.forEach(t),HSr=r(Wje," (MobileBERT model)"),Wje.forEach(t),USr=i(ge),d5=n(ge,"LI",{});var Hje=s(d5);i4e=n(Hje,"STRONG",{});var $Rt=s(i4e);JSr=r($Rt,"mpnet"),$Rt.forEach(t),YSr=r(Hje," \u2014 "),$K=n(Hje,"A",{href:!0});var kRt=s($K);KSr=r(kRt,"TFMPNetForQuestionAnswering"),kRt.forEach(t),ZSr=r(Hje," (MPNet model)"),Hje.forEach(t),eRr=i(ge),c5=n(ge,"LI",{});var Uje=s(c5);d4e=n(Uje,"STRONG",{});var SRt=s(d4e);oRr=r(SRt,"rembert"),SRt.forEach(t),rRr=r(Uje," \u2014 "),kK=n(Uje,"A",{href:!0});var RRt=s(kK);tRr=r(RRt,"TFRemBertForQuestionAnswering"),RRt.forEach(t),aRr=r(Uje," (RemBERT model)"),Uje.forEach(t),nRr=i(ge),f5=n(ge,"LI",{});var Jje=s(f5);c4e=n(Jje,"STRONG",{});var PRt=s(c4e);sRr=r(PRt,"roberta"),PRt.forEach(t),lRr=r(Jje," \u2014 "),SK=n(Jje,"A",{href:!0});var BRt=s(SK);iRr=r(BRt,"TFRobertaForQuestionAnswering"),BRt.forEach(t),dRr=r(Jje," (RoBERTa model)"),Jje.forEach(t),cRr=i(ge),m5=n(ge,"LI",{});var Yje=s(m5);f4e=n(Yje,"STRONG",{});var IRt=s(f4e);fRr=r(IRt,"roformer"),IRt.forEach(t),mRr=r(Yje," \u2014 "),RK=n(Yje,"A",{href:!0});var NRt=s(RK);gRr=r(NRt,"TFRoFormerForQuestionAnswering"),NRt.forEach(t),hRr=r(Yje," (RoFormer model)"),Yje.forEach(t),pRr=i(ge),g5=n(ge,"LI",{});var Kje=s(g5);m4e=n(Kje,"STRONG",{});var qRt=s(m4e);_Rr=r(qRt,"xlm"),qRt.forEach(t),uRr=r(Kje," \u2014 "),PK=n(Kje,"A",{href:!0});var jRt=s(PK);bRr=r(jRt,"TFXLMForQuestionAnsweringSimple"),jRt.forEach(t),vRr=r(Kje," (XLM model)"),Kje.forEach(t),FRr=i(ge),h5=n(ge,"LI",{});var Zje=s(h5);g4e=n(Zje,"STRONG",{});var DRt=s(g4e);TRr=r(DRt,"xlm-roberta"),DRt.forEach(t),MRr=r(Zje," \u2014 "),BK=n(Zje,"A",{href:!0});var GRt=s(BK);ERr=r(GRt,"TFXLMRobertaForQuestionAnswering"),GRt.forEach(t),CRr=r(Zje," (XLM-RoBERTa model)"),Zje.forEach(t),wRr=i(ge),p5=n(ge,"LI",{});var eDe=s(p5);h4e=n(eDe,"STRONG",{});var ORt=s(h4e);ARr=r(ORt,"xlnet"),ORt.forEach(t),LRr=r(eDe," \u2014 "),IK=n(eDe,"A",{href:!0});var VRt=s(IK);yRr=r(VRt,"TFXLNetForQuestionAnsweringSimple"),VRt.forEach(t),xRr=r(eDe," (XLNet model)"),eDe.forEach(t),ge.forEach(t),$Rr=i(Wl),T(_5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),NVe=i(f),Nc=n(f,"H2",{class:!0});var Qze=s(Nc);u5=n(Qze,"A",{id:!0,class:!0,href:!0});var XRt=s(u5);p4e=n(XRt,"SPAN",{});var zRt=s(p4e);T(Lx.$$.fragment,zRt),zRt.forEach(t),XRt.forEach(t),kRr=i(Qze),_4e=n(Qze,"SPAN",{});var QRt=s(_4e);SRr=r(QRt,"TFAutoModelForVision2Seq"),QRt.forEach(t),Qze.forEach(t),qVe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(yx.$$.fragment,Hl),RRr=i(Hl),qc=n(Hl,"P",{});var Jre=s(qc);PRr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NK=n(Jre,"A",{href:!0});var WRt=s(NK);BRr=r(WRt,"from_pretrained()"),WRt.forEach(t),IRr=r(Jre," class method or the "),qK=n(Jre,"A",{href:!0});var HRt=s(qK);NRr=r(HRt,"from_config()"),HRt.forEach(t),qRr=r(Jre,` class
method.`),Jre.forEach(t),jRr=i(Hl),xx=n(Hl,"P",{});var Wze=s(xx);DRr=r(Wze,"This class cannot be instantiated directly using "),u4e=n(Wze,"CODE",{});var URt=s(u4e);GRr=r(URt,"__init__()"),URt.forEach(t),ORr=r(Wze," (throws an error)."),Wze.forEach(t),VRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var r6=s(Ot);T($x.$$.fragment,r6),XRr=i(r6),b4e=n(r6,"P",{});var JRt=s(b4e);zRr=r(JRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JRt.forEach(t),QRr=i(r6),jc=n(r6,"P",{});var Yre=s(jc);WRr=r(Yre,`Note:
Loading a model from its configuration file does `),v4e=n(Yre,"STRONG",{});var YRt=s(v4e);HRr=r(YRt,"not"),YRt.forEach(t),URr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Yre,"A",{href:!0});var KRt=s(jK);JRr=r(KRt,"from_pretrained()"),KRt.forEach(t),YRr=r(Yre," to load the model weights."),Yre.forEach(t),KRr=i(r6),T(b5.$$.fragment,r6),r6.forEach(t),ZRr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(kx.$$.fragment,Ul),ePr=i(Ul),F4e=n(Ul,"P",{});var ZRt=s(F4e);oPr=r(ZRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZRt.forEach(t),rPr=i(Ul),bn=n(Ul,"P",{});var t6=s(bn);tPr=r(t6,"The model class to instantiate is selected based on the "),T4e=n(t6,"CODE",{});var ePt=s(T4e);aPr=r(ePt,"model_type"),ePt.forEach(t),nPr=r(t6,` property of the config object (either
passed as an argument or loaded from `),M4e=n(t6,"CODE",{});var oPt=s(M4e);sPr=r(oPt,"pretrained_model_name_or_path"),oPt.forEach(t),lPr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(t6,"CODE",{});var rPt=s(E4e);iPr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),dPr=r(t6,":"),t6.forEach(t),cPr=i(Ul),C4e=n(Ul,"UL",{});var tPt=s(C4e);v5=n(tPt,"LI",{});var oDe=s(v5);w4e=n(oDe,"STRONG",{});var aPt=s(w4e);fPr=r(aPt,"vision-encoder-decoder"),aPt.forEach(t),mPr=r(oDe," \u2014 "),DK=n(oDe,"A",{href:!0});var nPt=s(DK);gPr=r(nPt,"TFVisionEncoderDecoderModel"),nPt.forEach(t),hPr=r(oDe," (Vision Encoder decoder model)"),oDe.forEach(t),tPt.forEach(t),pPr=i(Ul),T(F5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),jVe=i(f),Dc=n(f,"H2",{class:!0});var Hze=s(Dc);T5=n(Hze,"A",{id:!0,class:!0,href:!0});var sPt=s(T5);A4e=n(sPt,"SPAN",{});var lPt=s(A4e);T(Sx.$$.fragment,lPt),lPt.forEach(t),sPt.forEach(t),_Pr=i(Hze),L4e=n(Hze,"SPAN",{});var iPt=s(L4e);uPr=r(iPt,"TFAutoModelForSpeechSeq2Seq"),iPt.forEach(t),Hze.forEach(t),DVe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Rx.$$.fragment,Jl),bPr=i(Jl),Gc=n(Jl,"P",{});var Kre=s(Gc);vPr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GK=n(Kre,"A",{href:!0});var dPt=s(GK);FPr=r(dPt,"from_pretrained()"),dPt.forEach(t),TPr=r(Kre," class method or the "),OK=n(Kre,"A",{href:!0});var cPt=s(OK);MPr=r(cPt,"from_config()"),cPt.forEach(t),EPr=r(Kre,` class
method.`),Kre.forEach(t),CPr=i(Jl),Px=n(Jl,"P",{});var Uze=s(Px);wPr=r(Uze,"This class cannot be instantiated directly using "),y4e=n(Uze,"CODE",{});var fPt=s(y4e);APr=r(fPt,"__init__()"),fPt.forEach(t),LPr=r(Uze," (throws an error)."),Uze.forEach(t),yPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var a6=s(Vt);T(Bx.$$.fragment,a6),xPr=i(a6),x4e=n(a6,"P",{});var mPt=s(x4e);$Pr=r(mPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mPt.forEach(t),kPr=i(a6),Oc=n(a6,"P",{});var Zre=s(Oc);SPr=r(Zre,`Note:
Loading a model from its configuration file does `),$4e=n(Zre,"STRONG",{});var gPt=s($4e);RPr=r(gPt,"not"),gPt.forEach(t),PPr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Zre,"A",{href:!0});var hPt=s(VK);BPr=r(hPt,"from_pretrained()"),hPt.forEach(t),IPr=r(Zre," to load the model weights."),Zre.forEach(t),NPr=i(a6),T(M5.$$.fragment,a6),a6.forEach(t),qPr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Ix.$$.fragment,Yl),jPr=i(Yl),k4e=n(Yl,"P",{});var pPt=s(k4e);DPr=r(pPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pPt.forEach(t),GPr=i(Yl),vn=n(Yl,"P",{});var n6=s(vn);OPr=r(n6,"The model class to instantiate is selected based on the "),S4e=n(n6,"CODE",{});var _Pt=s(S4e);VPr=r(_Pt,"model_type"),_Pt.forEach(t),XPr=r(n6,` property of the config object (either
passed as an argument or loaded from `),R4e=n(n6,"CODE",{});var uPt=s(R4e);zPr=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),QPr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(n6,"CODE",{});var bPt=s(P4e);WPr=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),HPr=r(n6,":"),n6.forEach(t),UPr=i(Yl),B4e=n(Yl,"UL",{});var vPt=s(B4e);E5=n(vPt,"LI",{});var rDe=s(E5);I4e=n(rDe,"STRONG",{});var FPt=s(I4e);JPr=r(FPt,"speech_to_text"),FPt.forEach(t),YPr=r(rDe," \u2014 "),XK=n(rDe,"A",{href:!0});var TPt=s(XK);KPr=r(TPt,"TFSpeech2TextForConditionalGeneration"),TPt.forEach(t),ZPr=r(rDe," (Speech2Text model)"),rDe.forEach(t),vPt.forEach(t),eBr=i(Yl),T(C5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),GVe=i(f),Vc=n(f,"H2",{class:!0});var Jze=s(Vc);w5=n(Jze,"A",{id:!0,class:!0,href:!0});var MPt=s(w5);N4e=n(MPt,"SPAN",{});var EPt=s(N4e);T(Nx.$$.fragment,EPt),EPt.forEach(t),MPt.forEach(t),oBr=i(Jze),q4e=n(Jze,"SPAN",{});var CPt=s(q4e);rBr=r(CPt,"FlaxAutoModel"),CPt.forEach(t),Jze.forEach(t),OVe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(qx.$$.fragment,Kl),tBr=i(Kl),Xc=n(Kl,"P",{});var ete=s(Xc);aBr=r(ete,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zK=n(ete,"A",{href:!0});var wPt=s(zK);nBr=r(wPt,"from_pretrained()"),wPt.forEach(t),sBr=r(ete," class method or the "),QK=n(ete,"A",{href:!0});var APt=s(QK);lBr=r(APt,"from_config()"),APt.forEach(t),iBr=r(ete,` class
method.`),ete.forEach(t),dBr=i(Kl),jx=n(Kl,"P",{});var Yze=s(jx);cBr=r(Yze,"This class cannot be instantiated directly using "),j4e=n(Yze,"CODE",{});var LPt=s(j4e);fBr=r(LPt,"__init__()"),LPt.forEach(t),mBr=r(Yze," (throws an error)."),Yze.forEach(t),gBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var s6=s(Xt);T(Dx.$$.fragment,s6),hBr=i(s6),D4e=n(s6,"P",{});var yPt=s(D4e);pBr=r(yPt,"Instantiates one of the base model classes of the library from a configuration."),yPt.forEach(t),_Br=i(s6),zc=n(s6,"P",{});var ote=s(zc);uBr=r(ote,`Note:
Loading a model from its configuration file does `),G4e=n(ote,"STRONG",{});var xPt=s(G4e);bBr=r(xPt,"not"),xPt.forEach(t),vBr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(ote,"A",{href:!0});var $Pt=s(WK);FBr=r($Pt,"from_pretrained()"),$Pt.forEach(t),TBr=r(ote," to load the model weights."),ote.forEach(t),MBr=i(s6),T(A5.$$.fragment,s6),s6.forEach(t),EBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Gx.$$.fragment,Zl),CBr=i(Zl),O4e=n(Zl,"P",{});var kPt=s(O4e);wBr=r(kPt,"Instantiate one of the base model classes of the library from a pretrained model."),kPt.forEach(t),ABr=i(Zl),Fn=n(Zl,"P",{});var l6=s(Fn);LBr=r(l6,"The model class to instantiate is selected based on the "),V4e=n(l6,"CODE",{});var SPt=s(V4e);yBr=r(SPt,"model_type"),SPt.forEach(t),xBr=r(l6,` property of the config object (either
passed as an argument or loaded from `),X4e=n(l6,"CODE",{});var RPt=s(X4e);$Br=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),kBr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(l6,"CODE",{});var PPt=s(z4e);SBr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),RBr=r(l6,":"),l6.forEach(t),PBr=i(Zl),oe=n(Zl,"UL",{});var re=s(oe);L5=n(re,"LI",{});var tDe=s(L5);Q4e=n(tDe,"STRONG",{});var BPt=s(Q4e);BBr=r(BPt,"albert"),BPt.forEach(t),IBr=r(tDe," \u2014 "),HK=n(tDe,"A",{href:!0});var IPt=s(HK);NBr=r(IPt,"FlaxAlbertModel"),IPt.forEach(t),qBr=r(tDe," (ALBERT model)"),tDe.forEach(t),jBr=i(re),y5=n(re,"LI",{});var aDe=s(y5);W4e=n(aDe,"STRONG",{});var NPt=s(W4e);DBr=r(NPt,"bart"),NPt.forEach(t),GBr=r(aDe," \u2014 "),UK=n(aDe,"A",{href:!0});var qPt=s(UK);OBr=r(qPt,"FlaxBartModel"),qPt.forEach(t),VBr=r(aDe," (BART model)"),aDe.forEach(t),XBr=i(re),x5=n(re,"LI",{});var nDe=s(x5);H4e=n(nDe,"STRONG",{});var jPt=s(H4e);zBr=r(jPt,"beit"),jPt.forEach(t),QBr=r(nDe," \u2014 "),JK=n(nDe,"A",{href:!0});var DPt=s(JK);WBr=r(DPt,"FlaxBeitModel"),DPt.forEach(t),HBr=r(nDe," (BEiT model)"),nDe.forEach(t),UBr=i(re),$5=n(re,"LI",{});var sDe=s($5);U4e=n(sDe,"STRONG",{});var GPt=s(U4e);JBr=r(GPt,"bert"),GPt.forEach(t),YBr=r(sDe," \u2014 "),YK=n(sDe,"A",{href:!0});var OPt=s(YK);KBr=r(OPt,"FlaxBertModel"),OPt.forEach(t),ZBr=r(sDe," (BERT model)"),sDe.forEach(t),eIr=i(re),k5=n(re,"LI",{});var lDe=s(k5);J4e=n(lDe,"STRONG",{});var VPt=s(J4e);oIr=r(VPt,"big_bird"),VPt.forEach(t),rIr=r(lDe," \u2014 "),KK=n(lDe,"A",{href:!0});var XPt=s(KK);tIr=r(XPt,"FlaxBigBirdModel"),XPt.forEach(t),aIr=r(lDe," (BigBird model)"),lDe.forEach(t),nIr=i(re),S5=n(re,"LI",{});var iDe=s(S5);Y4e=n(iDe,"STRONG",{});var zPt=s(Y4e);sIr=r(zPt,"blenderbot"),zPt.forEach(t),lIr=r(iDe," \u2014 "),ZK=n(iDe,"A",{href:!0});var QPt=s(ZK);iIr=r(QPt,"FlaxBlenderbotModel"),QPt.forEach(t),dIr=r(iDe," (Blenderbot model)"),iDe.forEach(t),cIr=i(re),R5=n(re,"LI",{});var dDe=s(R5);K4e=n(dDe,"STRONG",{});var WPt=s(K4e);fIr=r(WPt,"blenderbot-small"),WPt.forEach(t),mIr=r(dDe," \u2014 "),eZ=n(dDe,"A",{href:!0});var HPt=s(eZ);gIr=r(HPt,"FlaxBlenderbotSmallModel"),HPt.forEach(t),hIr=r(dDe," (BlenderbotSmall model)"),dDe.forEach(t),pIr=i(re),P5=n(re,"LI",{});var cDe=s(P5);Z4e=n(cDe,"STRONG",{});var UPt=s(Z4e);_Ir=r(UPt,"clip"),UPt.forEach(t),uIr=r(cDe," \u2014 "),oZ=n(cDe,"A",{href:!0});var JPt=s(oZ);bIr=r(JPt,"FlaxCLIPModel"),JPt.forEach(t),vIr=r(cDe," (CLIP model)"),cDe.forEach(t),FIr=i(re),B5=n(re,"LI",{});var fDe=s(B5);eCe=n(fDe,"STRONG",{});var YPt=s(eCe);TIr=r(YPt,"distilbert"),YPt.forEach(t),MIr=r(fDe," \u2014 "),rZ=n(fDe,"A",{href:!0});var KPt=s(rZ);EIr=r(KPt,"FlaxDistilBertModel"),KPt.forEach(t),CIr=r(fDe," (DistilBERT model)"),fDe.forEach(t),wIr=i(re),I5=n(re,"LI",{});var mDe=s(I5);oCe=n(mDe,"STRONG",{});var ZPt=s(oCe);AIr=r(ZPt,"dpt"),ZPt.forEach(t),LIr=r(mDe," \u2014 "),tZ=n(mDe,"A",{href:!0});var eBt=s(tZ);yIr=r(eBt,"FlaxDPTModel"),eBt.forEach(t),xIr=r(mDe," (DPT model)"),mDe.forEach(t),$Ir=i(re),N5=n(re,"LI",{});var gDe=s(N5);rCe=n(gDe,"STRONG",{});var oBt=s(rCe);kIr=r(oBt,"electra"),oBt.forEach(t),SIr=r(gDe," \u2014 "),aZ=n(gDe,"A",{href:!0});var rBt=s(aZ);RIr=r(rBt,"FlaxElectraModel"),rBt.forEach(t),PIr=r(gDe," (ELECTRA model)"),gDe.forEach(t),BIr=i(re),q5=n(re,"LI",{});var hDe=s(q5);tCe=n(hDe,"STRONG",{});var tBt=s(tCe);IIr=r(tBt,"gpt2"),tBt.forEach(t),NIr=r(hDe," \u2014 "),nZ=n(hDe,"A",{href:!0});var aBt=s(nZ);qIr=r(aBt,"FlaxGPT2Model"),aBt.forEach(t),jIr=r(hDe," (OpenAI GPT-2 model)"),hDe.forEach(t),DIr=i(re),j5=n(re,"LI",{});var pDe=s(j5);aCe=n(pDe,"STRONG",{});var nBt=s(aCe);GIr=r(nBt,"gpt_neo"),nBt.forEach(t),OIr=r(pDe," \u2014 "),sZ=n(pDe,"A",{href:!0});var sBt=s(sZ);VIr=r(sBt,"FlaxGPTNeoModel"),sBt.forEach(t),XIr=r(pDe," (GPT Neo model)"),pDe.forEach(t),zIr=i(re),D5=n(re,"LI",{});var _De=s(D5);nCe=n(_De,"STRONG",{});var lBt=s(nCe);QIr=r(lBt,"gptj"),lBt.forEach(t),WIr=r(_De," \u2014 "),lZ=n(_De,"A",{href:!0});var iBt=s(lZ);HIr=r(iBt,"FlaxGPTJModel"),iBt.forEach(t),UIr=r(_De," (GPT-J model)"),_De.forEach(t),JIr=i(re),G5=n(re,"LI",{});var uDe=s(G5);sCe=n(uDe,"STRONG",{});var dBt=s(sCe);YIr=r(dBt,"longt5"),dBt.forEach(t),KIr=r(uDe," \u2014 "),iZ=n(uDe,"A",{href:!0});var cBt=s(iZ);ZIr=r(cBt,"FlaxLongT5Model"),cBt.forEach(t),eNr=r(uDe," (LongT5 model)"),uDe.forEach(t),oNr=i(re),O5=n(re,"LI",{});var bDe=s(O5);lCe=n(bDe,"STRONG",{});var fBt=s(lCe);rNr=r(fBt,"marian"),fBt.forEach(t),tNr=r(bDe," \u2014 "),dZ=n(bDe,"A",{href:!0});var mBt=s(dZ);aNr=r(mBt,"FlaxMarianModel"),mBt.forEach(t),nNr=r(bDe," (Marian model)"),bDe.forEach(t),sNr=i(re),V5=n(re,"LI",{});var vDe=s(V5);iCe=n(vDe,"STRONG",{});var gBt=s(iCe);lNr=r(gBt,"mbart"),gBt.forEach(t),iNr=r(vDe," \u2014 "),cZ=n(vDe,"A",{href:!0});var hBt=s(cZ);dNr=r(hBt,"FlaxMBartModel"),hBt.forEach(t),cNr=r(vDe," (mBART model)"),vDe.forEach(t),fNr=i(re),X5=n(re,"LI",{});var FDe=s(X5);dCe=n(FDe,"STRONG",{});var pBt=s(dCe);mNr=r(pBt,"mt5"),pBt.forEach(t),gNr=r(FDe," \u2014 "),fZ=n(FDe,"A",{href:!0});var _Bt=s(fZ);hNr=r(_Bt,"FlaxMT5Model"),_Bt.forEach(t),pNr=r(FDe," (MT5 model)"),FDe.forEach(t),_Nr=i(re),z5=n(re,"LI",{});var TDe=s(z5);cCe=n(TDe,"STRONG",{});var uBt=s(cCe);uNr=r(uBt,"opt"),uBt.forEach(t),bNr=r(TDe," \u2014 "),mZ=n(TDe,"A",{href:!0});var bBt=s(mZ);vNr=r(bBt,"FlaxOPTModel"),bBt.forEach(t),FNr=r(TDe," (OPT model)"),TDe.forEach(t),TNr=i(re),Q5=n(re,"LI",{});var MDe=s(Q5);fCe=n(MDe,"STRONG",{});var vBt=s(fCe);MNr=r(vBt,"pegasus"),vBt.forEach(t),ENr=r(MDe," \u2014 "),gZ=n(MDe,"A",{href:!0});var FBt=s(gZ);CNr=r(FBt,"FlaxPegasusModel"),FBt.forEach(t),wNr=r(MDe," (Pegasus model)"),MDe.forEach(t),ANr=i(re),W5=n(re,"LI",{});var EDe=s(W5);mCe=n(EDe,"STRONG",{});var TBt=s(mCe);LNr=r(TBt,"roberta"),TBt.forEach(t),yNr=r(EDe," \u2014 "),hZ=n(EDe,"A",{href:!0});var MBt=s(hZ);xNr=r(MBt,"FlaxRobertaModel"),MBt.forEach(t),$Nr=r(EDe," (RoBERTa model)"),EDe.forEach(t),kNr=i(re),H5=n(re,"LI",{});var CDe=s(H5);gCe=n(CDe,"STRONG",{});var EBt=s(gCe);SNr=r(EBt,"roformer"),EBt.forEach(t),RNr=r(CDe," \u2014 "),pZ=n(CDe,"A",{href:!0});var CBt=s(pZ);PNr=r(CBt,"FlaxRoFormerModel"),CBt.forEach(t),BNr=r(CDe," (RoFormer model)"),CDe.forEach(t),INr=i(re),U5=n(re,"LI",{});var wDe=s(U5);hCe=n(wDe,"STRONG",{});var wBt=s(hCe);NNr=r(wBt,"t5"),wBt.forEach(t),qNr=r(wDe," \u2014 "),_Z=n(wDe,"A",{href:!0});var ABt=s(_Z);jNr=r(ABt,"FlaxT5Model"),ABt.forEach(t),DNr=r(wDe," (T5 model)"),wDe.forEach(t),GNr=i(re),J5=n(re,"LI",{});var ADe=s(J5);pCe=n(ADe,"STRONG",{});var LBt=s(pCe);ONr=r(LBt,"vision-text-dual-encoder"),LBt.forEach(t),VNr=r(ADe," \u2014 "),uZ=n(ADe,"A",{href:!0});var yBt=s(uZ);XNr=r(yBt,"FlaxVisionTextDualEncoderModel"),yBt.forEach(t),zNr=r(ADe," (VisionTextDualEncoder model)"),ADe.forEach(t),QNr=i(re),Y5=n(re,"LI",{});var LDe=s(Y5);_Ce=n(LDe,"STRONG",{});var xBt=s(_Ce);WNr=r(xBt,"vit"),xBt.forEach(t),HNr=r(LDe," \u2014 "),bZ=n(LDe,"A",{href:!0});var $Bt=s(bZ);UNr=r($Bt,"FlaxViTModel"),$Bt.forEach(t),JNr=r(LDe," (ViT model)"),LDe.forEach(t),YNr=i(re),K5=n(re,"LI",{});var yDe=s(K5);uCe=n(yDe,"STRONG",{});var kBt=s(uCe);KNr=r(kBt,"wav2vec2"),kBt.forEach(t),ZNr=r(yDe," \u2014 "),vZ=n(yDe,"A",{href:!0});var SBt=s(vZ);eqr=r(SBt,"FlaxWav2Vec2Model"),SBt.forEach(t),oqr=r(yDe," (Wav2Vec2 model)"),yDe.forEach(t),rqr=i(re),Z5=n(re,"LI",{});var xDe=s(Z5);bCe=n(xDe,"STRONG",{});var RBt=s(bCe);tqr=r(RBt,"xglm"),RBt.forEach(t),aqr=r(xDe," \u2014 "),FZ=n(xDe,"A",{href:!0});var PBt=s(FZ);nqr=r(PBt,"FlaxXGLMModel"),PBt.forEach(t),sqr=r(xDe," (XGLM model)"),xDe.forEach(t),lqr=i(re),e3=n(re,"LI",{});var $De=s(e3);vCe=n($De,"STRONG",{});var BBt=s(vCe);iqr=r(BBt,"xlm-roberta"),BBt.forEach(t),dqr=r($De," \u2014 "),TZ=n($De,"A",{href:!0});var IBt=s(TZ);cqr=r(IBt,"FlaxXLMRobertaModel"),IBt.forEach(t),fqr=r($De," (XLM-RoBERTa model)"),$De.forEach(t),re.forEach(t),mqr=i(Zl),T(o3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),VVe=i(f),Qc=n(f,"H2",{class:!0});var Kze=s(Qc);r3=n(Kze,"A",{id:!0,class:!0,href:!0});var NBt=s(r3);FCe=n(NBt,"SPAN",{});var qBt=s(FCe);T(Ox.$$.fragment,qBt),qBt.forEach(t),NBt.forEach(t),gqr=i(Kze),TCe=n(Kze,"SPAN",{});var jBt=s(TCe);hqr=r(jBt,"FlaxAutoModelForCausalLM"),jBt.forEach(t),Kze.forEach(t),XVe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Vx.$$.fragment,ei),pqr=i(ei),Wc=n(ei,"P",{});var rte=s(Wc);_qr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MZ=n(rte,"A",{href:!0});var DBt=s(MZ);uqr=r(DBt,"from_pretrained()"),DBt.forEach(t),bqr=r(rte," class method or the "),EZ=n(rte,"A",{href:!0});var GBt=s(EZ);vqr=r(GBt,"from_config()"),GBt.forEach(t),Fqr=r(rte,` class
method.`),rte.forEach(t),Tqr=i(ei),Xx=n(ei,"P",{});var Zze=s(Xx);Mqr=r(Zze,"This class cannot be instantiated directly using "),MCe=n(Zze,"CODE",{});var OBt=s(MCe);Eqr=r(OBt,"__init__()"),OBt.forEach(t),Cqr=r(Zze," (throws an error)."),Zze.forEach(t),wqr=i(ei),zt=n(ei,"DIV",{class:!0});var i6=s(zt);T(zx.$$.fragment,i6),Aqr=i(i6),ECe=n(i6,"P",{});var VBt=s(ECe);Lqr=r(VBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VBt.forEach(t),yqr=i(i6),Hc=n(i6,"P",{});var tte=s(Hc);xqr=r(tte,`Note:
Loading a model from its configuration file does `),CCe=n(tte,"STRONG",{});var XBt=s(CCe);$qr=r(XBt,"not"),XBt.forEach(t),kqr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(tte,"A",{href:!0});var zBt=s(CZ);Sqr=r(zBt,"from_pretrained()"),zBt.forEach(t),Rqr=r(tte," to load the model weights."),tte.forEach(t),Pqr=i(i6),T(t3.$$.fragment,i6),i6.forEach(t),Bqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Qx.$$.fragment,oi),Iqr=i(oi),wCe=n(oi,"P",{});var QBt=s(wCe);Nqr=r(QBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QBt.forEach(t),qqr=i(oi),Tn=n(oi,"P",{});var d6=s(Tn);jqr=r(d6,"The model class to instantiate is selected based on the "),ACe=n(d6,"CODE",{});var WBt=s(ACe);Dqr=r(WBt,"model_type"),WBt.forEach(t),Gqr=r(d6,` property of the config object (either
passed as an argument or loaded from `),LCe=n(d6,"CODE",{});var HBt=s(LCe);Oqr=r(HBt,"pretrained_model_name_or_path"),HBt.forEach(t),Vqr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yCe=n(d6,"CODE",{});var UBt=s(yCe);Xqr=r(UBt,"pretrained_model_name_or_path"),UBt.forEach(t),zqr=r(d6,":"),d6.forEach(t),Qqr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);a3=n(Ne,"LI",{});var kDe=s(a3);xCe=n(kDe,"STRONG",{});var JBt=s(xCe);Wqr=r(JBt,"bart"),JBt.forEach(t),Hqr=r(kDe," \u2014 "),wZ=n(kDe,"A",{href:!0});var YBt=s(wZ);Uqr=r(YBt,"FlaxBartForCausalLM"),YBt.forEach(t),Jqr=r(kDe," (BART model)"),kDe.forEach(t),Yqr=i(Ne),n3=n(Ne,"LI",{});var SDe=s(n3);$Ce=n(SDe,"STRONG",{});var KBt=s($Ce);Kqr=r(KBt,"bert"),KBt.forEach(t),Zqr=r(SDe," \u2014 "),AZ=n(SDe,"A",{href:!0});var ZBt=s(AZ);ejr=r(ZBt,"FlaxBertForCausalLM"),ZBt.forEach(t),ojr=r(SDe," (BERT model)"),SDe.forEach(t),rjr=i(Ne),s3=n(Ne,"LI",{});var RDe=s(s3);kCe=n(RDe,"STRONG",{});var eIt=s(kCe);tjr=r(eIt,"big_bird"),eIt.forEach(t),ajr=r(RDe," \u2014 "),LZ=n(RDe,"A",{href:!0});var oIt=s(LZ);njr=r(oIt,"FlaxBigBirdForCausalLM"),oIt.forEach(t),sjr=r(RDe," (BigBird model)"),RDe.forEach(t),ljr=i(Ne),l3=n(Ne,"LI",{});var PDe=s(l3);SCe=n(PDe,"STRONG",{});var rIt=s(SCe);ijr=r(rIt,"electra"),rIt.forEach(t),djr=r(PDe," \u2014 "),yZ=n(PDe,"A",{href:!0});var tIt=s(yZ);cjr=r(tIt,"FlaxElectraForCausalLM"),tIt.forEach(t),fjr=r(PDe," (ELECTRA model)"),PDe.forEach(t),mjr=i(Ne),i3=n(Ne,"LI",{});var BDe=s(i3);RCe=n(BDe,"STRONG",{});var aIt=s(RCe);gjr=r(aIt,"gpt2"),aIt.forEach(t),hjr=r(BDe," \u2014 "),xZ=n(BDe,"A",{href:!0});var nIt=s(xZ);pjr=r(nIt,"FlaxGPT2LMHeadModel"),nIt.forEach(t),_jr=r(BDe," (OpenAI GPT-2 model)"),BDe.forEach(t),ujr=i(Ne),d3=n(Ne,"LI",{});var IDe=s(d3);PCe=n(IDe,"STRONG",{});var sIt=s(PCe);bjr=r(sIt,"gpt_neo"),sIt.forEach(t),vjr=r(IDe," \u2014 "),$Z=n(IDe,"A",{href:!0});var lIt=s($Z);Fjr=r(lIt,"FlaxGPTNeoForCausalLM"),lIt.forEach(t),Tjr=r(IDe," (GPT Neo model)"),IDe.forEach(t),Mjr=i(Ne),c3=n(Ne,"LI",{});var NDe=s(c3);BCe=n(NDe,"STRONG",{});var iIt=s(BCe);Ejr=r(iIt,"gptj"),iIt.forEach(t),Cjr=r(NDe," \u2014 "),kZ=n(NDe,"A",{href:!0});var dIt=s(kZ);wjr=r(dIt,"FlaxGPTJForCausalLM"),dIt.forEach(t),Ajr=r(NDe," (GPT-J model)"),NDe.forEach(t),Ljr=i(Ne),f3=n(Ne,"LI",{});var qDe=s(f3);ICe=n(qDe,"STRONG",{});var cIt=s(ICe);yjr=r(cIt,"opt"),cIt.forEach(t),xjr=r(qDe," \u2014 "),SZ=n(qDe,"A",{href:!0});var fIt=s(SZ);$jr=r(fIt,"FlaxOPTForCausalLM"),fIt.forEach(t),kjr=r(qDe," (OPT model)"),qDe.forEach(t),Sjr=i(Ne),m3=n(Ne,"LI",{});var jDe=s(m3);NCe=n(jDe,"STRONG",{});var mIt=s(NCe);Rjr=r(mIt,"roberta"),mIt.forEach(t),Pjr=r(jDe," \u2014 "),RZ=n(jDe,"A",{href:!0});var gIt=s(RZ);Bjr=r(gIt,"FlaxRobertaForCausalLM"),gIt.forEach(t),Ijr=r(jDe," (RoBERTa model)"),jDe.forEach(t),Njr=i(Ne),g3=n(Ne,"LI",{});var DDe=s(g3);qCe=n(DDe,"STRONG",{});var hIt=s(qCe);qjr=r(hIt,"xglm"),hIt.forEach(t),jjr=r(DDe," \u2014 "),PZ=n(DDe,"A",{href:!0});var pIt=s(PZ);Djr=r(pIt,"FlaxXGLMForCausalLM"),pIt.forEach(t),Gjr=r(DDe," (XGLM model)"),DDe.forEach(t),Ne.forEach(t),Ojr=i(oi),T(h3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),zVe=i(f),Uc=n(f,"H2",{class:!0});var eQe=s(Uc);p3=n(eQe,"A",{id:!0,class:!0,href:!0});var _It=s(p3);jCe=n(_It,"SPAN",{});var uIt=s(jCe);T(Wx.$$.fragment,uIt),uIt.forEach(t),_It.forEach(t),Vjr=i(eQe),DCe=n(eQe,"SPAN",{});var bIt=s(DCe);Xjr=r(bIt,"FlaxAutoModelForPreTraining"),bIt.forEach(t),eQe.forEach(t),QVe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Hx.$$.fragment,ri),zjr=i(ri),Jc=n(ri,"P",{});var ate=s(Jc);Qjr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BZ=n(ate,"A",{href:!0});var vIt=s(BZ);Wjr=r(vIt,"from_pretrained()"),vIt.forEach(t),Hjr=r(ate," class method or the "),IZ=n(ate,"A",{href:!0});var FIt=s(IZ);Ujr=r(FIt,"from_config()"),FIt.forEach(t),Jjr=r(ate,` class
method.`),ate.forEach(t),Yjr=i(ri),Ux=n(ri,"P",{});var oQe=s(Ux);Kjr=r(oQe,"This class cannot be instantiated directly using "),GCe=n(oQe,"CODE",{});var TIt=s(GCe);Zjr=r(TIt,"__init__()"),TIt.forEach(t),eDr=r(oQe," (throws an error)."),oQe.forEach(t),oDr=i(ri),Qt=n(ri,"DIV",{class:!0});var c6=s(Qt);T(Jx.$$.fragment,c6),rDr=i(c6),OCe=n(c6,"P",{});var MIt=s(OCe);tDr=r(MIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MIt.forEach(t),aDr=i(c6),Yc=n(c6,"P",{});var nte=s(Yc);nDr=r(nte,`Note:
Loading a model from its configuration file does `),VCe=n(nte,"STRONG",{});var EIt=s(VCe);sDr=r(EIt,"not"),EIt.forEach(t),lDr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(nte,"A",{href:!0});var CIt=s(NZ);iDr=r(CIt,"from_pretrained()"),CIt.forEach(t),dDr=r(nte," to load the model weights."),nte.forEach(t),cDr=i(c6),T(_3.$$.fragment,c6),c6.forEach(t),fDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Yx.$$.fragment,ti),mDr=i(ti),XCe=n(ti,"P",{});var wIt=s(XCe);gDr=r(wIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wIt.forEach(t),hDr=i(ti),Mn=n(ti,"P",{});var f6=s(Mn);pDr=r(f6,"The model class to instantiate is selected based on the "),zCe=n(f6,"CODE",{});var AIt=s(zCe);_Dr=r(AIt,"model_type"),AIt.forEach(t),uDr=r(f6,` property of the config object (either
passed as an argument or loaded from `),QCe=n(f6,"CODE",{});var LIt=s(QCe);bDr=r(LIt,"pretrained_model_name_or_path"),LIt.forEach(t),vDr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(f6,"CODE",{});var yIt=s(WCe);FDr=r(yIt,"pretrained_model_name_or_path"),yIt.forEach(t),TDr=r(f6,":"),f6.forEach(t),MDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);u3=n(we,"LI",{});var GDe=s(u3);HCe=n(GDe,"STRONG",{});var xIt=s(HCe);EDr=r(xIt,"albert"),xIt.forEach(t),CDr=r(GDe," \u2014 "),qZ=n(GDe,"A",{href:!0});var $It=s(qZ);wDr=r($It,"FlaxAlbertForPreTraining"),$It.forEach(t),ADr=r(GDe," (ALBERT model)"),GDe.forEach(t),LDr=i(we),b3=n(we,"LI",{});var ODe=s(b3);UCe=n(ODe,"STRONG",{});var kIt=s(UCe);yDr=r(kIt,"bart"),kIt.forEach(t),xDr=r(ODe," \u2014 "),jZ=n(ODe,"A",{href:!0});var SIt=s(jZ);$Dr=r(SIt,"FlaxBartForConditionalGeneration"),SIt.forEach(t),kDr=r(ODe," (BART model)"),ODe.forEach(t),SDr=i(we),v3=n(we,"LI",{});var VDe=s(v3);JCe=n(VDe,"STRONG",{});var RIt=s(JCe);RDr=r(RIt,"bert"),RIt.forEach(t),PDr=r(VDe," \u2014 "),DZ=n(VDe,"A",{href:!0});var PIt=s(DZ);BDr=r(PIt,"FlaxBertForPreTraining"),PIt.forEach(t),IDr=r(VDe," (BERT model)"),VDe.forEach(t),NDr=i(we),F3=n(we,"LI",{});var XDe=s(F3);YCe=n(XDe,"STRONG",{});var BIt=s(YCe);qDr=r(BIt,"big_bird"),BIt.forEach(t),jDr=r(XDe," \u2014 "),GZ=n(XDe,"A",{href:!0});var IIt=s(GZ);DDr=r(IIt,"FlaxBigBirdForPreTraining"),IIt.forEach(t),GDr=r(XDe," (BigBird model)"),XDe.forEach(t),ODr=i(we),T3=n(we,"LI",{});var zDe=s(T3);KCe=n(zDe,"STRONG",{});var NIt=s(KCe);VDr=r(NIt,"electra"),NIt.forEach(t),XDr=r(zDe," \u2014 "),OZ=n(zDe,"A",{href:!0});var qIt=s(OZ);zDr=r(qIt,"FlaxElectraForPreTraining"),qIt.forEach(t),QDr=r(zDe," (ELECTRA model)"),zDe.forEach(t),WDr=i(we),M3=n(we,"LI",{});var QDe=s(M3);ZCe=n(QDe,"STRONG",{});var jIt=s(ZCe);HDr=r(jIt,"longt5"),jIt.forEach(t),UDr=r(QDe," \u2014 "),VZ=n(QDe,"A",{href:!0});var DIt=s(VZ);JDr=r(DIt,"FlaxLongT5ForConditionalGeneration"),DIt.forEach(t),YDr=r(QDe," (LongT5 model)"),QDe.forEach(t),KDr=i(we),E3=n(we,"LI",{});var WDe=s(E3);e5e=n(WDe,"STRONG",{});var GIt=s(e5e);ZDr=r(GIt,"mbart"),GIt.forEach(t),eGr=r(WDe," \u2014 "),XZ=n(WDe,"A",{href:!0});var OIt=s(XZ);oGr=r(OIt,"FlaxMBartForConditionalGeneration"),OIt.forEach(t),rGr=r(WDe," (mBART model)"),WDe.forEach(t),tGr=i(we),C3=n(we,"LI",{});var HDe=s(C3);o5e=n(HDe,"STRONG",{});var VIt=s(o5e);aGr=r(VIt,"mt5"),VIt.forEach(t),nGr=r(HDe," \u2014 "),zZ=n(HDe,"A",{href:!0});var XIt=s(zZ);sGr=r(XIt,"FlaxMT5ForConditionalGeneration"),XIt.forEach(t),lGr=r(HDe," (MT5 model)"),HDe.forEach(t),iGr=i(we),w3=n(we,"LI",{});var UDe=s(w3);r5e=n(UDe,"STRONG",{});var zIt=s(r5e);dGr=r(zIt,"roberta"),zIt.forEach(t),cGr=r(UDe," \u2014 "),QZ=n(UDe,"A",{href:!0});var QIt=s(QZ);fGr=r(QIt,"FlaxRobertaForMaskedLM"),QIt.forEach(t),mGr=r(UDe," (RoBERTa model)"),UDe.forEach(t),gGr=i(we),A3=n(we,"LI",{});var JDe=s(A3);t5e=n(JDe,"STRONG",{});var WIt=s(t5e);hGr=r(WIt,"roformer"),WIt.forEach(t),pGr=r(JDe," \u2014 "),WZ=n(JDe,"A",{href:!0});var HIt=s(WZ);_Gr=r(HIt,"FlaxRoFormerForMaskedLM"),HIt.forEach(t),uGr=r(JDe," (RoFormer model)"),JDe.forEach(t),bGr=i(we),L3=n(we,"LI",{});var YDe=s(L3);a5e=n(YDe,"STRONG",{});var UIt=s(a5e);vGr=r(UIt,"t5"),UIt.forEach(t),FGr=r(YDe," \u2014 "),HZ=n(YDe,"A",{href:!0});var JIt=s(HZ);TGr=r(JIt,"FlaxT5ForConditionalGeneration"),JIt.forEach(t),MGr=r(YDe," (T5 model)"),YDe.forEach(t),EGr=i(we),y3=n(we,"LI",{});var KDe=s(y3);n5e=n(KDe,"STRONG",{});var YIt=s(n5e);CGr=r(YIt,"wav2vec2"),YIt.forEach(t),wGr=r(KDe," \u2014 "),UZ=n(KDe,"A",{href:!0});var KIt=s(UZ);AGr=r(KIt,"FlaxWav2Vec2ForPreTraining"),KIt.forEach(t),LGr=r(KDe," (Wav2Vec2 model)"),KDe.forEach(t),yGr=i(we),x3=n(we,"LI",{});var ZDe=s(x3);s5e=n(ZDe,"STRONG",{});var ZIt=s(s5e);xGr=r(ZIt,"xlm-roberta"),ZIt.forEach(t),$Gr=r(ZDe," \u2014 "),JZ=n(ZDe,"A",{href:!0});var eNt=s(JZ);kGr=r(eNt,"FlaxXLMRobertaForMaskedLM"),eNt.forEach(t),SGr=r(ZDe," (XLM-RoBERTa model)"),ZDe.forEach(t),we.forEach(t),RGr=i(ti),T($3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),WVe=i(f),Kc=n(f,"H2",{class:!0});var rQe=s(Kc);k3=n(rQe,"A",{id:!0,class:!0,href:!0});var oNt=s(k3);l5e=n(oNt,"SPAN",{});var rNt=s(l5e);T(Kx.$$.fragment,rNt),rNt.forEach(t),oNt.forEach(t),PGr=i(rQe),i5e=n(rQe,"SPAN",{});var tNt=s(i5e);BGr=r(tNt,"FlaxAutoModelForMaskedLM"),tNt.forEach(t),rQe.forEach(t),HVe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(Zx.$$.fragment,ai),IGr=i(ai),Zc=n(ai,"P",{});var ste=s(Zc);NGr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YZ=n(ste,"A",{href:!0});var aNt=s(YZ);qGr=r(aNt,"from_pretrained()"),aNt.forEach(t),jGr=r(ste," class method or the "),KZ=n(ste,"A",{href:!0});var nNt=s(KZ);DGr=r(nNt,"from_config()"),nNt.forEach(t),GGr=r(ste,` class
method.`),ste.forEach(t),OGr=i(ai),e$=n(ai,"P",{});var tQe=s(e$);VGr=r(tQe,"This class cannot be instantiated directly using "),d5e=n(tQe,"CODE",{});var sNt=s(d5e);XGr=r(sNt,"__init__()"),sNt.forEach(t),zGr=r(tQe," (throws an error)."),tQe.forEach(t),QGr=i(ai),Wt=n(ai,"DIV",{class:!0});var m6=s(Wt);T(o$.$$.fragment,m6),WGr=i(m6),c5e=n(m6,"P",{});var lNt=s(c5e);HGr=r(lNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lNt.forEach(t),UGr=i(m6),ef=n(m6,"P",{});var lte=s(ef);JGr=r(lte,`Note:
Loading a model from its configuration file does `),f5e=n(lte,"STRONG",{});var iNt=s(f5e);YGr=r(iNt,"not"),iNt.forEach(t),KGr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(lte,"A",{href:!0});var dNt=s(ZZ);ZGr=r(dNt,"from_pretrained()"),dNt.forEach(t),eOr=r(lte," to load the model weights."),lte.forEach(t),oOr=i(m6),T(S3.$$.fragment,m6),m6.forEach(t),rOr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(r$.$$.fragment,ni),tOr=i(ni),m5e=n(ni,"P",{});var cNt=s(m5e);aOr=r(cNt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cNt.forEach(t),nOr=i(ni),En=n(ni,"P",{});var g6=s(En);sOr=r(g6,"The model class to instantiate is selected based on the "),g5e=n(g6,"CODE",{});var fNt=s(g5e);lOr=r(fNt,"model_type"),fNt.forEach(t),iOr=r(g6,` property of the config object (either
passed as an argument or loaded from `),h5e=n(g6,"CODE",{});var mNt=s(h5e);dOr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),cOr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(g6,"CODE",{});var gNt=s(p5e);fOr=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),mOr=r(g6,":"),g6.forEach(t),gOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);R3=n(qe,"LI",{});var eGe=s(R3);_5e=n(eGe,"STRONG",{});var hNt=s(_5e);hOr=r(hNt,"albert"),hNt.forEach(t),pOr=r(eGe," \u2014 "),eee=n(eGe,"A",{href:!0});var pNt=s(eee);_Or=r(pNt,"FlaxAlbertForMaskedLM"),pNt.forEach(t),uOr=r(eGe," (ALBERT model)"),eGe.forEach(t),bOr=i(qe),P3=n(qe,"LI",{});var oGe=s(P3);u5e=n(oGe,"STRONG",{});var _Nt=s(u5e);vOr=r(_Nt,"bart"),_Nt.forEach(t),FOr=r(oGe," \u2014 "),oee=n(oGe,"A",{href:!0});var uNt=s(oee);TOr=r(uNt,"FlaxBartForConditionalGeneration"),uNt.forEach(t),MOr=r(oGe," (BART model)"),oGe.forEach(t),EOr=i(qe),B3=n(qe,"LI",{});var rGe=s(B3);b5e=n(rGe,"STRONG",{});var bNt=s(b5e);COr=r(bNt,"bert"),bNt.forEach(t),wOr=r(rGe," \u2014 "),ree=n(rGe,"A",{href:!0});var vNt=s(ree);AOr=r(vNt,"FlaxBertForMaskedLM"),vNt.forEach(t),LOr=r(rGe," (BERT model)"),rGe.forEach(t),yOr=i(qe),I3=n(qe,"LI",{});var tGe=s(I3);v5e=n(tGe,"STRONG",{});var FNt=s(v5e);xOr=r(FNt,"big_bird"),FNt.forEach(t),$Or=r(tGe," \u2014 "),tee=n(tGe,"A",{href:!0});var TNt=s(tee);kOr=r(TNt,"FlaxBigBirdForMaskedLM"),TNt.forEach(t),SOr=r(tGe," (BigBird model)"),tGe.forEach(t),ROr=i(qe),N3=n(qe,"LI",{});var aGe=s(N3);F5e=n(aGe,"STRONG",{});var MNt=s(F5e);POr=r(MNt,"distilbert"),MNt.forEach(t),BOr=r(aGe," \u2014 "),aee=n(aGe,"A",{href:!0});var ENt=s(aee);IOr=r(ENt,"FlaxDistilBertForMaskedLM"),ENt.forEach(t),NOr=r(aGe," (DistilBERT model)"),aGe.forEach(t),qOr=i(qe),q3=n(qe,"LI",{});var nGe=s(q3);T5e=n(nGe,"STRONG",{});var CNt=s(T5e);jOr=r(CNt,"electra"),CNt.forEach(t),DOr=r(nGe," \u2014 "),nee=n(nGe,"A",{href:!0});var wNt=s(nee);GOr=r(wNt,"FlaxElectraForMaskedLM"),wNt.forEach(t),OOr=r(nGe," (ELECTRA model)"),nGe.forEach(t),VOr=i(qe),j3=n(qe,"LI",{});var sGe=s(j3);M5e=n(sGe,"STRONG",{});var ANt=s(M5e);XOr=r(ANt,"mbart"),ANt.forEach(t),zOr=r(sGe," \u2014 "),see=n(sGe,"A",{href:!0});var LNt=s(see);QOr=r(LNt,"FlaxMBartForConditionalGeneration"),LNt.forEach(t),WOr=r(sGe," (mBART model)"),sGe.forEach(t),HOr=i(qe),D3=n(qe,"LI",{});var lGe=s(D3);E5e=n(lGe,"STRONG",{});var yNt=s(E5e);UOr=r(yNt,"roberta"),yNt.forEach(t),JOr=r(lGe," \u2014 "),lee=n(lGe,"A",{href:!0});var xNt=s(lee);YOr=r(xNt,"FlaxRobertaForMaskedLM"),xNt.forEach(t),KOr=r(lGe," (RoBERTa model)"),lGe.forEach(t),ZOr=i(qe),G3=n(qe,"LI",{});var iGe=s(G3);C5e=n(iGe,"STRONG",{});var $Nt=s(C5e);eVr=r($Nt,"roformer"),$Nt.forEach(t),oVr=r(iGe," \u2014 "),iee=n(iGe,"A",{href:!0});var kNt=s(iee);rVr=r(kNt,"FlaxRoFormerForMaskedLM"),kNt.forEach(t),tVr=r(iGe," (RoFormer model)"),iGe.forEach(t),aVr=i(qe),O3=n(qe,"LI",{});var dGe=s(O3);w5e=n(dGe,"STRONG",{});var SNt=s(w5e);nVr=r(SNt,"xlm-roberta"),SNt.forEach(t),sVr=r(dGe," \u2014 "),dee=n(dGe,"A",{href:!0});var RNt=s(dee);lVr=r(RNt,"FlaxXLMRobertaForMaskedLM"),RNt.forEach(t),iVr=r(dGe," (XLM-RoBERTa model)"),dGe.forEach(t),qe.forEach(t),dVr=i(ni),T(V3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),UVe=i(f),of=n(f,"H2",{class:!0});var aQe=s(of);X3=n(aQe,"A",{id:!0,class:!0,href:!0});var PNt=s(X3);A5e=n(PNt,"SPAN",{});var BNt=s(A5e);T(t$.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),cVr=i(aQe),L5e=n(aQe,"SPAN",{});var INt=s(L5e);fVr=r(INt,"FlaxAutoModelForSeq2SeqLM"),INt.forEach(t),aQe.forEach(t),JVe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(a$.$$.fragment,si),mVr=i(si),rf=n(si,"P",{});var ite=s(rf);gVr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cee=n(ite,"A",{href:!0});var NNt=s(cee);hVr=r(NNt,"from_pretrained()"),NNt.forEach(t),pVr=r(ite," class method or the "),fee=n(ite,"A",{href:!0});var qNt=s(fee);_Vr=r(qNt,"from_config()"),qNt.forEach(t),uVr=r(ite,` class
method.`),ite.forEach(t),bVr=i(si),n$=n(si,"P",{});var nQe=s(n$);vVr=r(nQe,"This class cannot be instantiated directly using "),y5e=n(nQe,"CODE",{});var jNt=s(y5e);FVr=r(jNt,"__init__()"),jNt.forEach(t),TVr=r(nQe," (throws an error)."),nQe.forEach(t),MVr=i(si),Ht=n(si,"DIV",{class:!0});var h6=s(Ht);T(s$.$$.fragment,h6),EVr=i(h6),x5e=n(h6,"P",{});var DNt=s(x5e);CVr=r(DNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DNt.forEach(t),wVr=i(h6),tf=n(h6,"P",{});var dte=s(tf);AVr=r(dte,`Note:
Loading a model from its configuration file does `),$5e=n(dte,"STRONG",{});var GNt=s($5e);LVr=r(GNt,"not"),GNt.forEach(t),yVr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(dte,"A",{href:!0});var ONt=s(mee);xVr=r(ONt,"from_pretrained()"),ONt.forEach(t),$Vr=r(dte," to load the model weights."),dte.forEach(t),kVr=i(h6),T(z3.$$.fragment,h6),h6.forEach(t),SVr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(l$.$$.fragment,li),RVr=i(li),k5e=n(li,"P",{});var VNt=s(k5e);PVr=r(VNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VNt.forEach(t),BVr=i(li),Cn=n(li,"P",{});var p6=s(Cn);IVr=r(p6,"The model class to instantiate is selected based on the "),S5e=n(p6,"CODE",{});var XNt=s(S5e);NVr=r(XNt,"model_type"),XNt.forEach(t),qVr=r(p6,` property of the config object (either
passed as an argument or loaded from `),R5e=n(p6,"CODE",{});var zNt=s(R5e);jVr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),DVr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=n(p6,"CODE",{});var QNt=s(P5e);GVr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),OVr=r(p6,":"),p6.forEach(t),VVr=i(li),ke=n(li,"UL",{});var je=s(ke);Q3=n(je,"LI",{});var cGe=s(Q3);B5e=n(cGe,"STRONG",{});var WNt=s(B5e);XVr=r(WNt,"bart"),WNt.forEach(t),zVr=r(cGe," \u2014 "),gee=n(cGe,"A",{href:!0});var HNt=s(gee);QVr=r(HNt,"FlaxBartForConditionalGeneration"),HNt.forEach(t),WVr=r(cGe," (BART model)"),cGe.forEach(t),HVr=i(je),W3=n(je,"LI",{});var fGe=s(W3);I5e=n(fGe,"STRONG",{});var UNt=s(I5e);UVr=r(UNt,"blenderbot"),UNt.forEach(t),JVr=r(fGe," \u2014 "),hee=n(fGe,"A",{href:!0});var JNt=s(hee);YVr=r(JNt,"FlaxBlenderbotForConditionalGeneration"),JNt.forEach(t),KVr=r(fGe," (Blenderbot model)"),fGe.forEach(t),ZVr=i(je),H3=n(je,"LI",{});var mGe=s(H3);N5e=n(mGe,"STRONG",{});var YNt=s(N5e);eXr=r(YNt,"blenderbot-small"),YNt.forEach(t),oXr=r(mGe," \u2014 "),pee=n(mGe,"A",{href:!0});var KNt=s(pee);rXr=r(KNt,"FlaxBlenderbotSmallForConditionalGeneration"),KNt.forEach(t),tXr=r(mGe," (BlenderbotSmall model)"),mGe.forEach(t),aXr=i(je),U3=n(je,"LI",{});var gGe=s(U3);q5e=n(gGe,"STRONG",{});var ZNt=s(q5e);nXr=r(ZNt,"encoder-decoder"),ZNt.forEach(t),sXr=r(gGe," \u2014 "),_ee=n(gGe,"A",{href:!0});var eqt=s(_ee);lXr=r(eqt,"FlaxEncoderDecoderModel"),eqt.forEach(t),iXr=r(gGe," (Encoder decoder model)"),gGe.forEach(t),dXr=i(je),J3=n(je,"LI",{});var hGe=s(J3);j5e=n(hGe,"STRONG",{});var oqt=s(j5e);cXr=r(oqt,"longt5"),oqt.forEach(t),fXr=r(hGe," \u2014 "),uee=n(hGe,"A",{href:!0});var rqt=s(uee);mXr=r(rqt,"FlaxLongT5ForConditionalGeneration"),rqt.forEach(t),gXr=r(hGe," (LongT5 model)"),hGe.forEach(t),hXr=i(je),Y3=n(je,"LI",{});var pGe=s(Y3);D5e=n(pGe,"STRONG",{});var tqt=s(D5e);pXr=r(tqt,"marian"),tqt.forEach(t),_Xr=r(pGe," \u2014 "),bee=n(pGe,"A",{href:!0});var aqt=s(bee);uXr=r(aqt,"FlaxMarianMTModel"),aqt.forEach(t),bXr=r(pGe," (Marian model)"),pGe.forEach(t),vXr=i(je),K3=n(je,"LI",{});var _Ge=s(K3);G5e=n(_Ge,"STRONG",{});var nqt=s(G5e);FXr=r(nqt,"mbart"),nqt.forEach(t),TXr=r(_Ge," \u2014 "),vee=n(_Ge,"A",{href:!0});var sqt=s(vee);MXr=r(sqt,"FlaxMBartForConditionalGeneration"),sqt.forEach(t),EXr=r(_Ge," (mBART model)"),_Ge.forEach(t),CXr=i(je),Z3=n(je,"LI",{});var uGe=s(Z3);O5e=n(uGe,"STRONG",{});var lqt=s(O5e);wXr=r(lqt,"mt5"),lqt.forEach(t),AXr=r(uGe," \u2014 "),Fee=n(uGe,"A",{href:!0});var iqt=s(Fee);LXr=r(iqt,"FlaxMT5ForConditionalGeneration"),iqt.forEach(t),yXr=r(uGe," (MT5 model)"),uGe.forEach(t),xXr=i(je),e0=n(je,"LI",{});var bGe=s(e0);V5e=n(bGe,"STRONG",{});var dqt=s(V5e);$Xr=r(dqt,"pegasus"),dqt.forEach(t),kXr=r(bGe," \u2014 "),Tee=n(bGe,"A",{href:!0});var cqt=s(Tee);SXr=r(cqt,"FlaxPegasusForConditionalGeneration"),cqt.forEach(t),RXr=r(bGe," (Pegasus model)"),bGe.forEach(t),PXr=i(je),o0=n(je,"LI",{});var vGe=s(o0);X5e=n(vGe,"STRONG",{});var fqt=s(X5e);BXr=r(fqt,"t5"),fqt.forEach(t),IXr=r(vGe," \u2014 "),Mee=n(vGe,"A",{href:!0});var mqt=s(Mee);NXr=r(mqt,"FlaxT5ForConditionalGeneration"),mqt.forEach(t),qXr=r(vGe," (T5 model)"),vGe.forEach(t),je.forEach(t),jXr=i(li),T(r0.$$.fragment,li),li.forEach(t),si.forEach(t),YVe=i(f),af=n(f,"H2",{class:!0});var sQe=s(af);t0=n(sQe,"A",{id:!0,class:!0,href:!0});var gqt=s(t0);z5e=n(gqt,"SPAN",{});var hqt=s(z5e);T(i$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),DXr=i(sQe),Q5e=n(sQe,"SPAN",{});var pqt=s(Q5e);GXr=r(pqt,"FlaxAutoModelForSequenceClassification"),pqt.forEach(t),sQe.forEach(t),KVe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(d$.$$.fragment,ii),OXr=i(ii),nf=n(ii,"P",{});var cte=s(nf);VXr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eee=n(cte,"A",{href:!0});var _qt=s(Eee);XXr=r(_qt,"from_pretrained()"),_qt.forEach(t),zXr=r(cte," class method or the "),Cee=n(cte,"A",{href:!0});var uqt=s(Cee);QXr=r(uqt,"from_config()"),uqt.forEach(t),WXr=r(cte,` class
method.`),cte.forEach(t),HXr=i(ii),c$=n(ii,"P",{});var lQe=s(c$);UXr=r(lQe,"This class cannot be instantiated directly using "),W5e=n(lQe,"CODE",{});var bqt=s(W5e);JXr=r(bqt,"__init__()"),bqt.forEach(t),YXr=r(lQe," (throws an error)."),lQe.forEach(t),KXr=i(ii),Ut=n(ii,"DIV",{class:!0});var _6=s(Ut);T(f$.$$.fragment,_6),ZXr=i(_6),H5e=n(_6,"P",{});var vqt=s(H5e);ezr=r(vqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vqt.forEach(t),ozr=i(_6),sf=n(_6,"P",{});var fte=s(sf);rzr=r(fte,`Note:
Loading a model from its configuration file does `),U5e=n(fte,"STRONG",{});var Fqt=s(U5e);tzr=r(Fqt,"not"),Fqt.forEach(t),azr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(fte,"A",{href:!0});var Tqt=s(wee);nzr=r(Tqt,"from_pretrained()"),Tqt.forEach(t),szr=r(fte," to load the model weights."),fte.forEach(t),lzr=i(_6),T(a0.$$.fragment,_6),_6.forEach(t),izr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(m$.$$.fragment,di),dzr=i(di),J5e=n(di,"P",{});var Mqt=s(J5e);czr=r(Mqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mqt.forEach(t),fzr=i(di),wn=n(di,"P",{});var u6=s(wn);mzr=r(u6,"The model class to instantiate is selected based on the "),Y5e=n(u6,"CODE",{});var Eqt=s(Y5e);gzr=r(Eqt,"model_type"),Eqt.forEach(t),hzr=r(u6,` property of the config object (either
passed as an argument or loaded from `),K5e=n(u6,"CODE",{});var Cqt=s(K5e);pzr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),_zr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(u6,"CODE",{});var wqt=s(Z5e);uzr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),bzr=r(u6,":"),u6.forEach(t),vzr=i(di),Se=n(di,"UL",{});var De=s(Se);n0=n(De,"LI",{});var FGe=s(n0);e3e=n(FGe,"STRONG",{});var Aqt=s(e3e);Fzr=r(Aqt,"albert"),Aqt.forEach(t),Tzr=r(FGe," \u2014 "),Aee=n(FGe,"A",{href:!0});var Lqt=s(Aee);Mzr=r(Lqt,"FlaxAlbertForSequenceClassification"),Lqt.forEach(t),Ezr=r(FGe," (ALBERT model)"),FGe.forEach(t),Czr=i(De),s0=n(De,"LI",{});var TGe=s(s0);o3e=n(TGe,"STRONG",{});var yqt=s(o3e);wzr=r(yqt,"bart"),yqt.forEach(t),Azr=r(TGe," \u2014 "),Lee=n(TGe,"A",{href:!0});var xqt=s(Lee);Lzr=r(xqt,"FlaxBartForSequenceClassification"),xqt.forEach(t),yzr=r(TGe," (BART model)"),TGe.forEach(t),xzr=i(De),l0=n(De,"LI",{});var MGe=s(l0);r3e=n(MGe,"STRONG",{});var $qt=s(r3e);$zr=r($qt,"bert"),$qt.forEach(t),kzr=r(MGe," \u2014 "),yee=n(MGe,"A",{href:!0});var kqt=s(yee);Szr=r(kqt,"FlaxBertForSequenceClassification"),kqt.forEach(t),Rzr=r(MGe," (BERT model)"),MGe.forEach(t),Pzr=i(De),i0=n(De,"LI",{});var EGe=s(i0);t3e=n(EGe,"STRONG",{});var Sqt=s(t3e);Bzr=r(Sqt,"big_bird"),Sqt.forEach(t),Izr=r(EGe," \u2014 "),xee=n(EGe,"A",{href:!0});var Rqt=s(xee);Nzr=r(Rqt,"FlaxBigBirdForSequenceClassification"),Rqt.forEach(t),qzr=r(EGe," (BigBird model)"),EGe.forEach(t),jzr=i(De),d0=n(De,"LI",{});var CGe=s(d0);a3e=n(CGe,"STRONG",{});var Pqt=s(a3e);Dzr=r(Pqt,"distilbert"),Pqt.forEach(t),Gzr=r(CGe," \u2014 "),$ee=n(CGe,"A",{href:!0});var Bqt=s($ee);Ozr=r(Bqt,"FlaxDistilBertForSequenceClassification"),Bqt.forEach(t),Vzr=r(CGe," (DistilBERT model)"),CGe.forEach(t),Xzr=i(De),c0=n(De,"LI",{});var wGe=s(c0);n3e=n(wGe,"STRONG",{});var Iqt=s(n3e);zzr=r(Iqt,"electra"),Iqt.forEach(t),Qzr=r(wGe," \u2014 "),kee=n(wGe,"A",{href:!0});var Nqt=s(kee);Wzr=r(Nqt,"FlaxElectraForSequenceClassification"),Nqt.forEach(t),Hzr=r(wGe," (ELECTRA model)"),wGe.forEach(t),Uzr=i(De),f0=n(De,"LI",{});var AGe=s(f0);s3e=n(AGe,"STRONG",{});var qqt=s(s3e);Jzr=r(qqt,"mbart"),qqt.forEach(t),Yzr=r(AGe," \u2014 "),See=n(AGe,"A",{href:!0});var jqt=s(See);Kzr=r(jqt,"FlaxMBartForSequenceClassification"),jqt.forEach(t),Zzr=r(AGe," (mBART model)"),AGe.forEach(t),eQr=i(De),m0=n(De,"LI",{});var LGe=s(m0);l3e=n(LGe,"STRONG",{});var Dqt=s(l3e);oQr=r(Dqt,"roberta"),Dqt.forEach(t),rQr=r(LGe," \u2014 "),Ree=n(LGe,"A",{href:!0});var Gqt=s(Ree);tQr=r(Gqt,"FlaxRobertaForSequenceClassification"),Gqt.forEach(t),aQr=r(LGe," (RoBERTa model)"),LGe.forEach(t),nQr=i(De),g0=n(De,"LI",{});var yGe=s(g0);i3e=n(yGe,"STRONG",{});var Oqt=s(i3e);sQr=r(Oqt,"roformer"),Oqt.forEach(t),lQr=r(yGe," \u2014 "),Pee=n(yGe,"A",{href:!0});var Vqt=s(Pee);iQr=r(Vqt,"FlaxRoFormerForSequenceClassification"),Vqt.forEach(t),dQr=r(yGe," (RoFormer model)"),yGe.forEach(t),cQr=i(De),h0=n(De,"LI",{});var xGe=s(h0);d3e=n(xGe,"STRONG",{});var Xqt=s(d3e);fQr=r(Xqt,"xlm-roberta"),Xqt.forEach(t),mQr=r(xGe," \u2014 "),Bee=n(xGe,"A",{href:!0});var zqt=s(Bee);gQr=r(zqt,"FlaxXLMRobertaForSequenceClassification"),zqt.forEach(t),hQr=r(xGe," (XLM-RoBERTa model)"),xGe.forEach(t),De.forEach(t),pQr=i(di),T(p0.$$.fragment,di),di.forEach(t),ii.forEach(t),ZVe=i(f),lf=n(f,"H2",{class:!0});var iQe=s(lf);_0=n(iQe,"A",{id:!0,class:!0,href:!0});var Qqt=s(_0);c3e=n(Qqt,"SPAN",{});var Wqt=s(c3e);T(g$.$$.fragment,Wqt),Wqt.forEach(t),Qqt.forEach(t),_Qr=i(iQe),f3e=n(iQe,"SPAN",{});var Hqt=s(f3e);uQr=r(Hqt,"FlaxAutoModelForQuestionAnswering"),Hqt.forEach(t),iQe.forEach(t),eXe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(h$.$$.fragment,ci),bQr=i(ci),df=n(ci,"P",{});var mte=s(df);vQr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iee=n(mte,"A",{href:!0});var Uqt=s(Iee);FQr=r(Uqt,"from_pretrained()"),Uqt.forEach(t),TQr=r(mte," class method or the "),Nee=n(mte,"A",{href:!0});var Jqt=s(Nee);MQr=r(Jqt,"from_config()"),Jqt.forEach(t),EQr=r(mte,` class
method.`),mte.forEach(t),CQr=i(ci),p$=n(ci,"P",{});var dQe=s(p$);wQr=r(dQe,"This class cannot be instantiated directly using "),m3e=n(dQe,"CODE",{});var Yqt=s(m3e);AQr=r(Yqt,"__init__()"),Yqt.forEach(t),LQr=r(dQe," (throws an error)."),dQe.forEach(t),yQr=i(ci),Jt=n(ci,"DIV",{class:!0});var b6=s(Jt);T(_$.$$.fragment,b6),xQr=i(b6),g3e=n(b6,"P",{});var Kqt=s(g3e);$Qr=r(Kqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kqt.forEach(t),kQr=i(b6),cf=n(b6,"P",{});var gte=s(cf);SQr=r(gte,`Note:
Loading a model from its configuration file does `),h3e=n(gte,"STRONG",{});var Zqt=s(h3e);RQr=r(Zqt,"not"),Zqt.forEach(t),PQr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(gte,"A",{href:!0});var ejt=s(qee);BQr=r(ejt,"from_pretrained()"),ejt.forEach(t),IQr=r(gte," to load the model weights."),gte.forEach(t),NQr=i(b6),T(u0.$$.fragment,b6),b6.forEach(t),qQr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(u$.$$.fragment,fi),jQr=i(fi),p3e=n(fi,"P",{});var ojt=s(p3e);DQr=r(ojt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ojt.forEach(t),GQr=i(fi),An=n(fi,"P",{});var v6=s(An);OQr=r(v6,"The model class to instantiate is selected based on the "),_3e=n(v6,"CODE",{});var rjt=s(_3e);VQr=r(rjt,"model_type"),rjt.forEach(t),XQr=r(v6,` property of the config object (either
passed as an argument or loaded from `),u3e=n(v6,"CODE",{});var tjt=s(u3e);zQr=r(tjt,"pretrained_model_name_or_path"),tjt.forEach(t),QQr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(v6,"CODE",{});var ajt=s(b3e);WQr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),HQr=r(v6,":"),v6.forEach(t),UQr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);b0=n(Ge,"LI",{});var $Ge=s(b0);v3e=n($Ge,"STRONG",{});var njt=s(v3e);JQr=r(njt,"albert"),njt.forEach(t),YQr=r($Ge," \u2014 "),jee=n($Ge,"A",{href:!0});var sjt=s(jee);KQr=r(sjt,"FlaxAlbertForQuestionAnswering"),sjt.forEach(t),ZQr=r($Ge," (ALBERT model)"),$Ge.forEach(t),eWr=i(Ge),v0=n(Ge,"LI",{});var kGe=s(v0);F3e=n(kGe,"STRONG",{});var ljt=s(F3e);oWr=r(ljt,"bart"),ljt.forEach(t),rWr=r(kGe," \u2014 "),Dee=n(kGe,"A",{href:!0});var ijt=s(Dee);tWr=r(ijt,"FlaxBartForQuestionAnswering"),ijt.forEach(t),aWr=r(kGe," (BART model)"),kGe.forEach(t),nWr=i(Ge),F0=n(Ge,"LI",{});var SGe=s(F0);T3e=n(SGe,"STRONG",{});var djt=s(T3e);sWr=r(djt,"bert"),djt.forEach(t),lWr=r(SGe," \u2014 "),Gee=n(SGe,"A",{href:!0});var cjt=s(Gee);iWr=r(cjt,"FlaxBertForQuestionAnswering"),cjt.forEach(t),dWr=r(SGe," (BERT model)"),SGe.forEach(t),cWr=i(Ge),T0=n(Ge,"LI",{});var RGe=s(T0);M3e=n(RGe,"STRONG",{});var fjt=s(M3e);fWr=r(fjt,"big_bird"),fjt.forEach(t),mWr=r(RGe," \u2014 "),Oee=n(RGe,"A",{href:!0});var mjt=s(Oee);gWr=r(mjt,"FlaxBigBirdForQuestionAnswering"),mjt.forEach(t),hWr=r(RGe," (BigBird model)"),RGe.forEach(t),pWr=i(Ge),M0=n(Ge,"LI",{});var PGe=s(M0);E3e=n(PGe,"STRONG",{});var gjt=s(E3e);_Wr=r(gjt,"distilbert"),gjt.forEach(t),uWr=r(PGe," \u2014 "),Vee=n(PGe,"A",{href:!0});var hjt=s(Vee);bWr=r(hjt,"FlaxDistilBertForQuestionAnswering"),hjt.forEach(t),vWr=r(PGe," (DistilBERT model)"),PGe.forEach(t),FWr=i(Ge),E0=n(Ge,"LI",{});var BGe=s(E0);C3e=n(BGe,"STRONG",{});var pjt=s(C3e);TWr=r(pjt,"electra"),pjt.forEach(t),MWr=r(BGe," \u2014 "),Xee=n(BGe,"A",{href:!0});var _jt=s(Xee);EWr=r(_jt,"FlaxElectraForQuestionAnswering"),_jt.forEach(t),CWr=r(BGe," (ELECTRA model)"),BGe.forEach(t),wWr=i(Ge),C0=n(Ge,"LI",{});var IGe=s(C0);w3e=n(IGe,"STRONG",{});var ujt=s(w3e);AWr=r(ujt,"mbart"),ujt.forEach(t),LWr=r(IGe," \u2014 "),zee=n(IGe,"A",{href:!0});var bjt=s(zee);yWr=r(bjt,"FlaxMBartForQuestionAnswering"),bjt.forEach(t),xWr=r(IGe," (mBART model)"),IGe.forEach(t),$Wr=i(Ge),w0=n(Ge,"LI",{});var NGe=s(w0);A3e=n(NGe,"STRONG",{});var vjt=s(A3e);kWr=r(vjt,"roberta"),vjt.forEach(t),SWr=r(NGe," \u2014 "),Qee=n(NGe,"A",{href:!0});var Fjt=s(Qee);RWr=r(Fjt,"FlaxRobertaForQuestionAnswering"),Fjt.forEach(t),PWr=r(NGe," (RoBERTa model)"),NGe.forEach(t),BWr=i(Ge),A0=n(Ge,"LI",{});var qGe=s(A0);L3e=n(qGe,"STRONG",{});var Tjt=s(L3e);IWr=r(Tjt,"roformer"),Tjt.forEach(t),NWr=r(qGe," \u2014 "),Wee=n(qGe,"A",{href:!0});var Mjt=s(Wee);qWr=r(Mjt,"FlaxRoFormerForQuestionAnswering"),Mjt.forEach(t),jWr=r(qGe," (RoFormer model)"),qGe.forEach(t),DWr=i(Ge),L0=n(Ge,"LI",{});var jGe=s(L0);y3e=n(jGe,"STRONG",{});var Ejt=s(y3e);GWr=r(Ejt,"xlm-roberta"),Ejt.forEach(t),OWr=r(jGe," \u2014 "),Hee=n(jGe,"A",{href:!0});var Cjt=s(Hee);VWr=r(Cjt,"FlaxXLMRobertaForQuestionAnswering"),Cjt.forEach(t),XWr=r(jGe," (XLM-RoBERTa model)"),jGe.forEach(t),Ge.forEach(t),zWr=i(fi),T(y0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),oXe=i(f),ff=n(f,"H2",{class:!0});var cQe=s(ff);x0=n(cQe,"A",{id:!0,class:!0,href:!0});var wjt=s(x0);x3e=n(wjt,"SPAN",{});var Ajt=s(x3e);T(b$.$$.fragment,Ajt),Ajt.forEach(t),wjt.forEach(t),QWr=i(cQe),$3e=n(cQe,"SPAN",{});var Ljt=s($3e);WWr=r(Ljt,"FlaxAutoModelForTokenClassification"),Ljt.forEach(t),cQe.forEach(t),rXe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(v$.$$.fragment,mi),HWr=i(mi),mf=n(mi,"P",{});var hte=s(mf);UWr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uee=n(hte,"A",{href:!0});var yjt=s(Uee);JWr=r(yjt,"from_pretrained()"),yjt.forEach(t),YWr=r(hte," class method or the "),Jee=n(hte,"A",{href:!0});var xjt=s(Jee);KWr=r(xjt,"from_config()"),xjt.forEach(t),ZWr=r(hte,` class
method.`),hte.forEach(t),eHr=i(mi),F$=n(mi,"P",{});var fQe=s(F$);oHr=r(fQe,"This class cannot be instantiated directly using "),k3e=n(fQe,"CODE",{});var $jt=s(k3e);rHr=r($jt,"__init__()"),$jt.forEach(t),tHr=r(fQe," (throws an error)."),fQe.forEach(t),aHr=i(mi),Yt=n(mi,"DIV",{class:!0});var F6=s(Yt);T(T$.$$.fragment,F6),nHr=i(F6),S3e=n(F6,"P",{});var kjt=s(S3e);sHr=r(kjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kjt.forEach(t),lHr=i(F6),gf=n(F6,"P",{});var pte=s(gf);iHr=r(pte,`Note:
Loading a model from its configuration file does `),R3e=n(pte,"STRONG",{});var Sjt=s(R3e);dHr=r(Sjt,"not"),Sjt.forEach(t),cHr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(pte,"A",{href:!0});var Rjt=s(Yee);fHr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),mHr=r(pte," to load the model weights."),pte.forEach(t),gHr=i(F6),T($0.$$.fragment,F6),F6.forEach(t),hHr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(M$.$$.fragment,gi),pHr=i(gi),P3e=n(gi,"P",{});var Pjt=s(P3e);_Hr=r(Pjt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pjt.forEach(t),uHr=i(gi),Ln=n(gi,"P",{});var T6=s(Ln);bHr=r(T6,"The model class to instantiate is selected based on the "),B3e=n(T6,"CODE",{});var Bjt=s(B3e);vHr=r(Bjt,"model_type"),Bjt.forEach(t),FHr=r(T6,` property of the config object (either
passed as an argument or loaded from `),I3e=n(T6,"CODE",{});var Ijt=s(I3e);THr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),MHr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=n(T6,"CODE",{});var Njt=s(N3e);EHr=r(Njt,"pretrained_model_name_or_path"),Njt.forEach(t),CHr=r(T6,":"),T6.forEach(t),wHr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);k0=n(To,"LI",{});var DGe=s(k0);q3e=n(DGe,"STRONG",{});var qjt=s(q3e);AHr=r(qjt,"albert"),qjt.forEach(t),LHr=r(DGe," \u2014 "),Kee=n(DGe,"A",{href:!0});var jjt=s(Kee);yHr=r(jjt,"FlaxAlbertForTokenClassification"),jjt.forEach(t),xHr=r(DGe," (ALBERT model)"),DGe.forEach(t),$Hr=i(To),S0=n(To,"LI",{});var GGe=s(S0);j3e=n(GGe,"STRONG",{});var Djt=s(j3e);kHr=r(Djt,"bert"),Djt.forEach(t),SHr=r(GGe," \u2014 "),Zee=n(GGe,"A",{href:!0});var Gjt=s(Zee);RHr=r(Gjt,"FlaxBertForTokenClassification"),Gjt.forEach(t),PHr=r(GGe," (BERT model)"),GGe.forEach(t),BHr=i(To),R0=n(To,"LI",{});var OGe=s(R0);D3e=n(OGe,"STRONG",{});var Ojt=s(D3e);IHr=r(Ojt,"big_bird"),Ojt.forEach(t),NHr=r(OGe," \u2014 "),eoe=n(OGe,"A",{href:!0});var Vjt=s(eoe);qHr=r(Vjt,"FlaxBigBirdForTokenClassification"),Vjt.forEach(t),jHr=r(OGe," (BigBird model)"),OGe.forEach(t),DHr=i(To),P0=n(To,"LI",{});var VGe=s(P0);G3e=n(VGe,"STRONG",{});var Xjt=s(G3e);GHr=r(Xjt,"distilbert"),Xjt.forEach(t),OHr=r(VGe," \u2014 "),ooe=n(VGe,"A",{href:!0});var zjt=s(ooe);VHr=r(zjt,"FlaxDistilBertForTokenClassification"),zjt.forEach(t),XHr=r(VGe," (DistilBERT model)"),VGe.forEach(t),zHr=i(To),B0=n(To,"LI",{});var XGe=s(B0);O3e=n(XGe,"STRONG",{});var Qjt=s(O3e);QHr=r(Qjt,"electra"),Qjt.forEach(t),WHr=r(XGe," \u2014 "),roe=n(XGe,"A",{href:!0});var Wjt=s(roe);HHr=r(Wjt,"FlaxElectraForTokenClassification"),Wjt.forEach(t),UHr=r(XGe," (ELECTRA model)"),XGe.forEach(t),JHr=i(To),I0=n(To,"LI",{});var zGe=s(I0);V3e=n(zGe,"STRONG",{});var Hjt=s(V3e);YHr=r(Hjt,"roberta"),Hjt.forEach(t),KHr=r(zGe," \u2014 "),toe=n(zGe,"A",{href:!0});var Ujt=s(toe);ZHr=r(Ujt,"FlaxRobertaForTokenClassification"),Ujt.forEach(t),eUr=r(zGe," (RoBERTa model)"),zGe.forEach(t),oUr=i(To),N0=n(To,"LI",{});var QGe=s(N0);X3e=n(QGe,"STRONG",{});var Jjt=s(X3e);rUr=r(Jjt,"roformer"),Jjt.forEach(t),tUr=r(QGe," \u2014 "),aoe=n(QGe,"A",{href:!0});var Yjt=s(aoe);aUr=r(Yjt,"FlaxRoFormerForTokenClassification"),Yjt.forEach(t),nUr=r(QGe," (RoFormer model)"),QGe.forEach(t),sUr=i(To),q0=n(To,"LI",{});var WGe=s(q0);z3e=n(WGe,"STRONG",{});var Kjt=s(z3e);lUr=r(Kjt,"xlm-roberta"),Kjt.forEach(t),iUr=r(WGe," \u2014 "),noe=n(WGe,"A",{href:!0});var Zjt=s(noe);dUr=r(Zjt,"FlaxXLMRobertaForTokenClassification"),Zjt.forEach(t),cUr=r(WGe," (XLM-RoBERTa model)"),WGe.forEach(t),To.forEach(t),fUr=i(gi),T(j0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),tXe=i(f),hf=n(f,"H2",{class:!0});var mQe=s(hf);D0=n(mQe,"A",{id:!0,class:!0,href:!0});var eDt=s(D0);Q3e=n(eDt,"SPAN",{});var oDt=s(Q3e);T(E$.$$.fragment,oDt),oDt.forEach(t),eDt.forEach(t),mUr=i(mQe),W3e=n(mQe,"SPAN",{});var rDt=s(W3e);gUr=r(rDt,"FlaxAutoModelForMultipleChoice"),rDt.forEach(t),mQe.forEach(t),aXe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(C$.$$.fragment,hi),hUr=i(hi),pf=n(hi,"P",{});var _te=s(pf);pUr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),soe=n(_te,"A",{href:!0});var tDt=s(soe);_Ur=r(tDt,"from_pretrained()"),tDt.forEach(t),uUr=r(_te," class method or the "),loe=n(_te,"A",{href:!0});var aDt=s(loe);bUr=r(aDt,"from_config()"),aDt.forEach(t),vUr=r(_te,` class
method.`),_te.forEach(t),FUr=i(hi),w$=n(hi,"P",{});var gQe=s(w$);TUr=r(gQe,"This class cannot be instantiated directly using "),H3e=n(gQe,"CODE",{});var nDt=s(H3e);MUr=r(nDt,"__init__()"),nDt.forEach(t),EUr=r(gQe," (throws an error)."),gQe.forEach(t),CUr=i(hi),Kt=n(hi,"DIV",{class:!0});var M6=s(Kt);T(A$.$$.fragment,M6),wUr=i(M6),U3e=n(M6,"P",{});var sDt=s(U3e);AUr=r(sDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sDt.forEach(t),LUr=i(M6),_f=n(M6,"P",{});var ute=s(_f);yUr=r(ute,`Note:
Loading a model from its configuration file does `),J3e=n(ute,"STRONG",{});var lDt=s(J3e);xUr=r(lDt,"not"),lDt.forEach(t),$Ur=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(ute,"A",{href:!0});var iDt=s(ioe);kUr=r(iDt,"from_pretrained()"),iDt.forEach(t),SUr=r(ute," to load the model weights."),ute.forEach(t),RUr=i(M6),T(G0.$$.fragment,M6),M6.forEach(t),PUr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(L$.$$.fragment,pi),BUr=i(pi),Y3e=n(pi,"P",{});var dDt=s(Y3e);IUr=r(dDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dDt.forEach(t),NUr=i(pi),yn=n(pi,"P",{});var E6=s(yn);qUr=r(E6,"The model class to instantiate is selected based on the "),K3e=n(E6,"CODE",{});var cDt=s(K3e);jUr=r(cDt,"model_type"),cDt.forEach(t),DUr=r(E6,` property of the config object (either
passed as an argument or loaded from `),Z3e=n(E6,"CODE",{});var fDt=s(Z3e);GUr=r(fDt,"pretrained_model_name_or_path"),fDt.forEach(t),OUr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(E6,"CODE",{});var mDt=s(e0e);VUr=r(mDt,"pretrained_model_name_or_path"),mDt.forEach(t),XUr=r(E6,":"),E6.forEach(t),zUr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);O0=n(Mo,"LI",{});var HGe=s(O0);o0e=n(HGe,"STRONG",{});var gDt=s(o0e);QUr=r(gDt,"albert"),gDt.forEach(t),WUr=r(HGe," \u2014 "),doe=n(HGe,"A",{href:!0});var hDt=s(doe);HUr=r(hDt,"FlaxAlbertForMultipleChoice"),hDt.forEach(t),UUr=r(HGe," (ALBERT model)"),HGe.forEach(t),JUr=i(Mo),V0=n(Mo,"LI",{});var UGe=s(V0);r0e=n(UGe,"STRONG",{});var pDt=s(r0e);YUr=r(pDt,"bert"),pDt.forEach(t),KUr=r(UGe," \u2014 "),coe=n(UGe,"A",{href:!0});var _Dt=s(coe);ZUr=r(_Dt,"FlaxBertForMultipleChoice"),_Dt.forEach(t),eJr=r(UGe," (BERT model)"),UGe.forEach(t),oJr=i(Mo),X0=n(Mo,"LI",{});var JGe=s(X0);t0e=n(JGe,"STRONG",{});var uDt=s(t0e);rJr=r(uDt,"big_bird"),uDt.forEach(t),tJr=r(JGe," \u2014 "),foe=n(JGe,"A",{href:!0});var bDt=s(foe);aJr=r(bDt,"FlaxBigBirdForMultipleChoice"),bDt.forEach(t),nJr=r(JGe," (BigBird model)"),JGe.forEach(t),sJr=i(Mo),z0=n(Mo,"LI",{});var YGe=s(z0);a0e=n(YGe,"STRONG",{});var vDt=s(a0e);lJr=r(vDt,"distilbert"),vDt.forEach(t),iJr=r(YGe," \u2014 "),moe=n(YGe,"A",{href:!0});var FDt=s(moe);dJr=r(FDt,"FlaxDistilBertForMultipleChoice"),FDt.forEach(t),cJr=r(YGe," (DistilBERT model)"),YGe.forEach(t),fJr=i(Mo),Q0=n(Mo,"LI",{});var KGe=s(Q0);n0e=n(KGe,"STRONG",{});var TDt=s(n0e);mJr=r(TDt,"electra"),TDt.forEach(t),gJr=r(KGe," \u2014 "),goe=n(KGe,"A",{href:!0});var MDt=s(goe);hJr=r(MDt,"FlaxElectraForMultipleChoice"),MDt.forEach(t),pJr=r(KGe," (ELECTRA model)"),KGe.forEach(t),_Jr=i(Mo),W0=n(Mo,"LI",{});var ZGe=s(W0);s0e=n(ZGe,"STRONG",{});var EDt=s(s0e);uJr=r(EDt,"roberta"),EDt.forEach(t),bJr=r(ZGe," \u2014 "),hoe=n(ZGe,"A",{href:!0});var CDt=s(hoe);vJr=r(CDt,"FlaxRobertaForMultipleChoice"),CDt.forEach(t),FJr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),TJr=i(Mo),H0=n(Mo,"LI",{});var eOe=s(H0);l0e=n(eOe,"STRONG",{});var wDt=s(l0e);MJr=r(wDt,"roformer"),wDt.forEach(t),EJr=r(eOe," \u2014 "),poe=n(eOe,"A",{href:!0});var ADt=s(poe);CJr=r(ADt,"FlaxRoFormerForMultipleChoice"),ADt.forEach(t),wJr=r(eOe," (RoFormer model)"),eOe.forEach(t),AJr=i(Mo),U0=n(Mo,"LI",{});var oOe=s(U0);i0e=n(oOe,"STRONG",{});var LDt=s(i0e);LJr=r(LDt,"xlm-roberta"),LDt.forEach(t),yJr=r(oOe," \u2014 "),_oe=n(oOe,"A",{href:!0});var yDt=s(_oe);xJr=r(yDt,"FlaxXLMRobertaForMultipleChoice"),yDt.forEach(t),$Jr=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),Mo.forEach(t),kJr=i(pi),T(J0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),nXe=i(f),uf=n(f,"H2",{class:!0});var hQe=s(uf);Y0=n(hQe,"A",{id:!0,class:!0,href:!0});var xDt=s(Y0);d0e=n(xDt,"SPAN",{});var $Dt=s(d0e);T(y$.$$.fragment,$Dt),$Dt.forEach(t),xDt.forEach(t),SJr=i(hQe),c0e=n(hQe,"SPAN",{});var kDt=s(c0e);RJr=r(kDt,"FlaxAutoModelForNextSentencePrediction"),kDt.forEach(t),hQe.forEach(t),sXe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(x$.$$.fragment,_i),PJr=i(_i),bf=n(_i,"P",{});var bte=s(bf);BJr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uoe=n(bte,"A",{href:!0});var SDt=s(uoe);IJr=r(SDt,"from_pretrained()"),SDt.forEach(t),NJr=r(bte," class method or the "),boe=n(bte,"A",{href:!0});var RDt=s(boe);qJr=r(RDt,"from_config()"),RDt.forEach(t),jJr=r(bte,` class
method.`),bte.forEach(t),DJr=i(_i),$$=n(_i,"P",{});var pQe=s($$);GJr=r(pQe,"This class cannot be instantiated directly using "),f0e=n(pQe,"CODE",{});var PDt=s(f0e);OJr=r(PDt,"__init__()"),PDt.forEach(t),VJr=r(pQe," (throws an error)."),pQe.forEach(t),XJr=i(_i),Zt=n(_i,"DIV",{class:!0});var C6=s(Zt);T(k$.$$.fragment,C6),zJr=i(C6),m0e=n(C6,"P",{});var BDt=s(m0e);QJr=r(BDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BDt.forEach(t),WJr=i(C6),vf=n(C6,"P",{});var vte=s(vf);HJr=r(vte,`Note:
Loading a model from its configuration file does `),g0e=n(vte,"STRONG",{});var IDt=s(g0e);UJr=r(IDt,"not"),IDt.forEach(t),JJr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(vte,"A",{href:!0});var NDt=s(voe);YJr=r(NDt,"from_pretrained()"),NDt.forEach(t),KJr=r(vte," to load the model weights."),vte.forEach(t),ZJr=i(C6),T(K0.$$.fragment,C6),C6.forEach(t),eYr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(S$.$$.fragment,ui),oYr=i(ui),h0e=n(ui,"P",{});var qDt=s(h0e);rYr=r(qDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qDt.forEach(t),tYr=i(ui),xn=n(ui,"P",{});var w6=s(xn);aYr=r(w6,"The model class to instantiate is selected based on the "),p0e=n(w6,"CODE",{});var jDt=s(p0e);nYr=r(jDt,"model_type"),jDt.forEach(t),sYr=r(w6,` property of the config object (either
passed as an argument or loaded from `),_0e=n(w6,"CODE",{});var DDt=s(_0e);lYr=r(DDt,"pretrained_model_name_or_path"),DDt.forEach(t),iYr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(w6,"CODE",{});var GDt=s(u0e);dYr=r(GDt,"pretrained_model_name_or_path"),GDt.forEach(t),cYr=r(w6,":"),w6.forEach(t),fYr=i(ui),b0e=n(ui,"UL",{});var ODt=s(b0e);Z0=n(ODt,"LI",{});var rOe=s(Z0);v0e=n(rOe,"STRONG",{});var VDt=s(v0e);mYr=r(VDt,"bert"),VDt.forEach(t),gYr=r(rOe," \u2014 "),Foe=n(rOe,"A",{href:!0});var XDt=s(Foe);hYr=r(XDt,"FlaxBertForNextSentencePrediction"),XDt.forEach(t),pYr=r(rOe," (BERT model)"),rOe.forEach(t),ODt.forEach(t),_Yr=i(ui),T(ew.$$.fragment,ui),ui.forEach(t),_i.forEach(t),lXe=i(f),Ff=n(f,"H2",{class:!0});var _Qe=s(Ff);ow=n(_Qe,"A",{id:!0,class:!0,href:!0});var zDt=s(ow);F0e=n(zDt,"SPAN",{});var QDt=s(F0e);T(R$.$$.fragment,QDt),QDt.forEach(t),zDt.forEach(t),uYr=i(_Qe),T0e=n(_Qe,"SPAN",{});var WDt=s(T0e);bYr=r(WDt,"FlaxAutoModelForImageClassification"),WDt.forEach(t),_Qe.forEach(t),iXe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(P$.$$.fragment,bi),vYr=i(bi),Tf=n(bi,"P",{});var Fte=s(Tf);FYr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Toe=n(Fte,"A",{href:!0});var HDt=s(Toe);TYr=r(HDt,"from_pretrained()"),HDt.forEach(t),MYr=r(Fte," class method or the "),Moe=n(Fte,"A",{href:!0});var UDt=s(Moe);EYr=r(UDt,"from_config()"),UDt.forEach(t),CYr=r(Fte,` class
method.`),Fte.forEach(t),wYr=i(bi),B$=n(bi,"P",{});var uQe=s(B$);AYr=r(uQe,"This class cannot be instantiated directly using "),M0e=n(uQe,"CODE",{});var JDt=s(M0e);LYr=r(JDt,"__init__()"),JDt.forEach(t),yYr=r(uQe," (throws an error)."),uQe.forEach(t),xYr=i(bi),ea=n(bi,"DIV",{class:!0});var A6=s(ea);T(I$.$$.fragment,A6),$Yr=i(A6),E0e=n(A6,"P",{});var YDt=s(E0e);kYr=r(YDt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YDt.forEach(t),SYr=i(A6),Mf=n(A6,"P",{});var Tte=s(Mf);RYr=r(Tte,`Note:
Loading a model from its configuration file does `),C0e=n(Tte,"STRONG",{});var KDt=s(C0e);PYr=r(KDt,"not"),KDt.forEach(t),BYr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(Tte,"A",{href:!0});var ZDt=s(Eoe);IYr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),NYr=r(Tte," to load the model weights."),Tte.forEach(t),qYr=i(A6),T(rw.$$.fragment,A6),A6.forEach(t),jYr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(N$.$$.fragment,vi),DYr=i(vi),w0e=n(vi,"P",{});var eGt=s(w0e);GYr=r(eGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),eGt.forEach(t),OYr=i(vi),$n=n(vi,"P",{});var L6=s($n);VYr=r(L6,"The model class to instantiate is selected based on the "),A0e=n(L6,"CODE",{});var oGt=s(A0e);XYr=r(oGt,"model_type"),oGt.forEach(t),zYr=r(L6,` property of the config object (either
passed as an argument or loaded from `),L0e=n(L6,"CODE",{});var rGt=s(L0e);QYr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),WYr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(L6,"CODE",{});var tGt=s(y0e);HYr=r(tGt,"pretrained_model_name_or_path"),tGt.forEach(t),UYr=r(L6,":"),L6.forEach(t),JYr=i(vi),q$=n(vi,"UL",{});var bQe=s(q$);tw=n(bQe,"LI",{});var tOe=s(tw);x0e=n(tOe,"STRONG",{});var aGt=s(x0e);YYr=r(aGt,"beit"),aGt.forEach(t),KYr=r(tOe," \u2014 "),Coe=n(tOe,"A",{href:!0});var nGt=s(Coe);ZYr=r(nGt,"FlaxBeitForImageClassification"),nGt.forEach(t),eKr=r(tOe," (BEiT model)"),tOe.forEach(t),oKr=i(bQe),aw=n(bQe,"LI",{});var aOe=s(aw);$0e=n(aOe,"STRONG",{});var sGt=s($0e);rKr=r(sGt,"vit"),sGt.forEach(t),tKr=r(aOe," \u2014 "),woe=n(aOe,"A",{href:!0});var lGt=s(woe);aKr=r(lGt,"FlaxViTForImageClassification"),lGt.forEach(t),nKr=r(aOe," (ViT model)"),aOe.forEach(t),bQe.forEach(t),sKr=i(vi),T(nw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),dXe=i(f),Ef=n(f,"H2",{class:!0});var vQe=s(Ef);sw=n(vQe,"A",{id:!0,class:!0,href:!0});var iGt=s(sw);k0e=n(iGt,"SPAN",{});var dGt=s(k0e);T(j$.$$.fragment,dGt),dGt.forEach(t),iGt.forEach(t),lKr=i(vQe),S0e=n(vQe,"SPAN",{});var cGt=s(S0e);iKr=r(cGt,"FlaxAutoModelForVision2Seq"),cGt.forEach(t),vQe.forEach(t),cXe=i(f),wr=n(f,"DIV",{class:!0});var Fi=s(wr);T(D$.$$.fragment,Fi),dKr=i(Fi),Cf=n(Fi,"P",{});var Mte=s(Cf);cKr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aoe=n(Mte,"A",{href:!0});var fGt=s(Aoe);fKr=r(fGt,"from_pretrained()"),fGt.forEach(t),mKr=r(Mte," class method or the "),Loe=n(Mte,"A",{href:!0});var mGt=s(Loe);gKr=r(mGt,"from_config()"),mGt.forEach(t),hKr=r(Mte,` class
method.`),Mte.forEach(t),pKr=i(Fi),G$=n(Fi,"P",{});var FQe=s(G$);_Kr=r(FQe,"This class cannot be instantiated directly using "),R0e=n(FQe,"CODE",{});var gGt=s(R0e);uKr=r(gGt,"__init__()"),gGt.forEach(t),bKr=r(FQe," (throws an error)."),FQe.forEach(t),vKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var y6=s(oa);T(O$.$$.fragment,y6),FKr=i(y6),P0e=n(y6,"P",{});var hGt=s(P0e);TKr=r(hGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hGt.forEach(t),MKr=i(y6),wf=n(y6,"P",{});var Ete=s(wf);EKr=r(Ete,`Note:
Loading a model from its configuration file does `),B0e=n(Ete,"STRONG",{});var pGt=s(B0e);CKr=r(pGt,"not"),pGt.forEach(t),wKr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),yoe=n(Ete,"A",{href:!0});var _Gt=s(yoe);AKr=r(_Gt,"from_pretrained()"),_Gt.forEach(t),LKr=r(Ete," to load the model weights."),Ete.forEach(t),yKr=i(y6),T(lw.$$.fragment,y6),y6.forEach(t),xKr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(V$.$$.fragment,Ti),$Kr=i(Ti),I0e=n(Ti,"P",{});var uGt=s(I0e);kKr=r(uGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uGt.forEach(t),SKr=i(Ti),kn=n(Ti,"P",{});var x6=s(kn);RKr=r(x6,"The model class to instantiate is selected based on the "),N0e=n(x6,"CODE",{});var bGt=s(N0e);PKr=r(bGt,"model_type"),bGt.forEach(t),BKr=r(x6,` property of the config object (either
passed as an argument or loaded from `),q0e=n(x6,"CODE",{});var vGt=s(q0e);IKr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),NKr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j0e=n(x6,"CODE",{});var FGt=s(j0e);qKr=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),jKr=r(x6,":"),x6.forEach(t),DKr=i(Ti),D0e=n(Ti,"UL",{});var TGt=s(D0e);iw=n(TGt,"LI",{});var nOe=s(iw);G0e=n(nOe,"STRONG",{});var MGt=s(G0e);GKr=r(MGt,"vision-encoder-decoder"),MGt.forEach(t),OKr=r(nOe," \u2014 "),xoe=n(nOe,"A",{href:!0});var EGt=s(xoe);VKr=r(EGt,"FlaxVisionEncoderDecoderModel"),EGt.forEach(t),XKr=r(nOe," (Vision Encoder decoder model)"),nOe.forEach(t),TGt.forEach(t),zKr=i(Ti),T(dw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(xVt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(hS,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(pS,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertConfig"),c(_S,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartConfig"),c(uS,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitConfig"),c(bS,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertConfig"),c(vS,"href","/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(FS,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdConfig"),c(TS,"href","/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(MS,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ES,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(CS,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomConfig"),c(wS,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertConfig"),c(AS,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineConfig"),c(LS,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPConfig"),c(yS,"href","/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenConfig"),c(xS,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertConfig"),c($S,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextConfig"),c(kS,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLConfig"),c(SS,"href","/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtConfig"),c(RS,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(PS,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(BS,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(IS,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaConfig"),c(NS,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(qS,"href","/docs/transformers/pr_17779/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(jS,"href","/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTConfig"),c(DS,"href","/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrConfig"),c(GS,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertConfig"),c(OS,"href","/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRConfig"),c(VS,"href","/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTConfig"),c(XS,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraConfig"),c(zS,"href","/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(QS,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertConfig"),c(WS,"href","/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaConfig"),c(HS,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetConfig"),c(US,"href","/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTConfig"),c(JS,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelConfig"),c(YS,"href","/docs/transformers/pr_17779/en/model_doc/glpn#transformers.GLPNConfig"),c(KS,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Config"),c(ZS,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(eR,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(oR,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJConfig"),c(rR,"href","/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertConfig"),c(tR,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertConfig"),c(aR,"href","/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nR,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sR,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lR,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(iR,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDConfig"),c(dR,"href","/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitConfig"),c(cR,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerConfig"),c(fR,"href","/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Config"),c(mR,"href","/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeConfig"),c(gR,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertConfig"),c(hR,"href","/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100Config"),c(pR,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianConfig"),c(_R,"href","/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uR,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartConfig"),c(bR,"href","/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTConfig"),c(vR,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FR,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TR,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetConfig"),c(MR,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Config"),c(ER,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaConfig"),c(CR,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(wR,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(AR,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTConfig"),c(LR,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusConfig"),c(yR,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverConfig"),c(xR,"href","/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartConfig"),c($R,"href","/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(kR,"href","/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(SR,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(RR,"href","/docs/transformers/pr_17779/en/model_doc/rag#transformers.RagConfig"),c(PR,"href","/docs/transformers/pr_17779/en/model_doc/realm#transformers.RealmConfig"),c(BR,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerConfig"),c(IR,"href","/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetConfig"),c(NR,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertConfig"),c(qR,"href","/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetConfig"),c(jR,"href","/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertConfig"),c(DR,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaConfig"),c(GR,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerConfig"),c(OR,"href","/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerConfig"),c(VR,"href","/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWConfig"),c(XR,"href","/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDConfig"),c(zR,"href","/docs/transformers/pr_17779/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(QR,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(WR,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(HR,"href","/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterConfig"),c(UR,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(JR,"href","/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinConfig"),c(YR,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Config"),c(KR,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasConfig"),c(ZR,"href","/docs/transformers/pr_17779/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(eP,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(oP,"href","/docs/transformers/pr_17779/en/model_doc/trocr#transformers.TrOCRConfig"),c(rP,"href","/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(tP,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(aP,"href","/docs/transformers/pr_17779/en/model_doc/van#transformers.VanConfig"),c(nP,"href","/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltConfig"),c(sP,"href","/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(lP,"href","/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(iP,"href","/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(dP,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTConfig"),c(cP,"href","/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(fP,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mP,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(gP,"href","/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMConfig"),c(hP,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMConfig"),c(pP,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMConfig"),c(_P,"href","/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(uP,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(bP,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(vP,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetConfig"),c(FP,"href","/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosConfig"),c(TP,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"id","transformers.AutoTokenizer"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(MP,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(EP,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertTokenizer"),c(CP,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartTokenizer"),c(AP,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartTokenizerFast"),c(LP,"href","/docs/transformers/pr_17779/en/model_doc/barthez#transformers.BarthezTokenizer"),c(yP,"href","/docs/transformers/pr_17779/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(xP,"href","/docs/transformers/pr_17779/en/model_doc/bartpho#transformers.BartphoTokenizer"),c($P,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizer"),c(kP,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(RP,"href","/docs/transformers/pr_17779/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(PP,"href","/docs/transformers/pr_17779/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(BP,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(IP,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(NP,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qP,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(jP,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(DP,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(GP,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(OP,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(VP,"href","/docs/transformers/pr_17779/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(XP,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertTokenizer"),c(zP,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineTokenizer"),c(WP,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPTokenizer"),c(HP,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(UP,"href","/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(JP,"href","/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(YP,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(KP,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17779/en/model_doc/cpm#transformers.CpmTokenizer"),c(eB,"href","/docs/transformers/pr_17779/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(oB,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(rB,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tB,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaTokenizer"),c(nB,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(lB,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(iB,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(dB,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(fB,"href","/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mB,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraTokenizer"),c(gB,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(hB,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(pB,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetTokenizer"),c(_B,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(uB,"href","/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(bB,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelTokenizer"),c(vB,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(FB,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TB,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MB,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EB,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CB,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(wB,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AB,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LB,"href","/docs/transformers/pr_17779/en/model_doc/herbert#transformers.HerbertTokenizer"),c(yB,"href","/docs/transformers/pr_17779/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($B,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(RB,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(BB,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IB,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(NB,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(qB,"href","/docs/transformers/pr_17779/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jB,"href","/docs/transformers/pr_17779/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(DB,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDTokenizer"),c(GB,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDTokenizerFast"),c(OB,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerTokenizer"),c(VB,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(XB,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Tokenizer"),c(zB,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5TokenizerFast"),c(QB,"href","/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeTokenizer"),c(WB,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(HB,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(UB,"href","/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(JB,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianTokenizer"),c(YB,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartTokenizer"),c(KB,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(eI,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(oI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizer"),c(rI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizerFast"),c(tI,"href","/docs/transformers/pr_17779/en/model_doc/mluke#transformers.MLukeTokenizer"),c(aI,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(nI,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(lI,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(iI,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Tokenizer"),c(dI,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5TokenizerFast"),c(cI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizer"),c(fI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertTokenizer"),c(gI,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(pI,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(_I,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uI,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bI,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vI,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(FI,"href","/docs/transformers/pr_17779/en/model_doc/phobert#transformers.PhobertTokenizer"),c(TI,"href","/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartTokenizer"),c(MI,"href","/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(EI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizer"),c(CI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizerFast"),c(wI,"href","/docs/transformers/pr_17779/en/model_doc/rag#transformers.RagTokenizer"),c(AI,"href","/docs/transformers/pr_17779/en/model_doc/realm#transformers.RealmTokenizer"),c(LI,"href","/docs/transformers/pr_17779/en/model_doc/realm#transformers.RealmTokenizerFast"),c(yI,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerTokenizer"),c(xI,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c($I,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertTokenizer"),c(kI,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(SI,"href","/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(RI,"href","/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BI,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(II,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(NI,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(qI,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(jI,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(DI,"href","/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterTokenizer"),c(GI,"href","/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(OI,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(VI,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Tokenizer"),c(zI,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5TokenizerFast"),c(QI,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasTokenizer"),c(WI,"href","/docs/transformers/pr_17779/en/model_doc/tapex#transformers.TapexTokenizer"),c(HI,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(UI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizer"),c(JI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizerFast"),c(YI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizer"),c(KI,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(rN,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMTokenizer"),c(tN,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(aN,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMTokenizer"),c(nN,"href","/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(sN,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(lN,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dN,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cN,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(fN,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mN,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertTokenizer"),c(gN,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoFeatureExtractor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(hN,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(pN,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FN,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17779/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LN,"href","/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(xN,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c($N,"href","/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QN,"href","/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoProcessor"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(WN,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(HN,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPProcessor"),c(UN,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(JN,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(YN,"href","/docs/transformers/pr_17779/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(KN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZN,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eq,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(oq,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(rq,"href","/docs/transformers/pr_17779/en/model_doc/trocr#transformers.TrOCRProcessor"),c(tq,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aq,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nq,"href","/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltProcessor"),c(sq,"href","/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(lq,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iq,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dq,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoModel"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(cq,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fq,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mq,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gq,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertModel"),c(hq,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartModel"),c(pq,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitModel"),c(_q,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertModel"),c(uq,"href","/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(bq,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdModel"),c(vq,"href","/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Fq,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Tq,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Mq,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomModel"),c(Eq,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertModel"),c(Cq,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineModel"),c(wq,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.CLIPModel"),c(Aq,"href","/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenModel"),c(Lq,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertModel"),c(yq,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextModel"),c(xq,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLModel"),c($q,"href","/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtModel"),c(kq,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Sq,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Rq,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Pq,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaModel"),c(Bq,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Iq,"href","/docs/transformers/pr_17779/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Nq,"href","/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTModel"),c(qq,"href","/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrModel"),c(jq,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertModel"),c(Dq,"href","/docs/transformers/pr_17779/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Gq,"href","/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTModel"),c(Oq,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraModel"),c(Vq,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertModel"),c(Xq,"href","/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaModel"),c(zq,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetModel"),c(Qq,"href","/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTModel"),c(Wq,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelModel"),c(Hq,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Uq,"href","/docs/transformers/pr_17779/en/model_doc/glpn#transformers.GLPNModel"),c(Jq,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2Model"),c(Yq,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Kq,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Zq,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJModel"),c(ej,"href","/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertModel"),c(oj,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertModel"),c(rj,"href","/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(tj,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(aj,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(nj,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(sj,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDModel"),c(lj,"href","/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitModel"),c(ij,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerModel"),c(dj,"href","/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5Model"),c(cj,"href","/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeModel"),c(fj,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertModel"),c(mj,"href","/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100Model"),c(gj,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianModel"),c(hj,"href","/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerModel"),c(pj,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartModel"),c(_j,"href","/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTModel"),c(uj,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(bj,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertModel"),c(vj,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetModel"),c(Fj,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5Model"),c(Tj,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaModel"),c(Mj,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Ej,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Cj,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTModel"),c(wj,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusModel"),c(Aj,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverModel"),c(Lj,"href","/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartModel"),c(yj,"href","/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerModel"),c(xj,"href","/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetModel"),c($j,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertModel"),c(kj,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerModel"),c(Sj,"href","/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetModel"),c(Rj,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertModel"),c(Pj,"href","/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetModel"),c(Bj,"href","/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertModel"),c(Ij,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaModel"),c(Nj,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerModel"),c(qj,"href","/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerModel"),c(jj,"href","/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWModel"),c(Dj,"href","/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDModel"),c(Gj,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Oj,"href","/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterModel"),c(Vj,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Xj,"href","/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinModel"),c(zj,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5Model"),c(Qj,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasModel"),c(Wj,"href","/docs/transformers/pr_17779/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Hj,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Uj,"href","/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Jj,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Yj,"href","/docs/transformers/pr_17779/en/model_doc/van#transformers.VanModel"),c(Kj,"href","/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltModel"),c(Zj,"href","/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(eD,"href","/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertModel"),c(oD,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTModel"),c(rD,"href","/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(tD,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(aD,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(nD,"href","/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMModel"),c(sD,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMModel"),c(lD,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMModel"),c(iD,"href","/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(dD,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(cD,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(fD,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetModel"),c(mD,"href","/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosModel"),c(gD,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(hD,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pD,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uD,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForPreTraining"),c(bD,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForPreTraining"),c(FD,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(TD,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForCausalLM"),c(MD,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CD,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wD,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(AD,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LD,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xD,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($D,"href","/docs/transformers/pr_17779/en/model_doc/flava#transformers.FlavaForPreTraining"),c(kD,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForPreTraining"),c(SD,"href","/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(PD,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BD,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ND,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qD,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jD,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(DD,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(GD,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OD,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(VD,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XD,"href","/docs/transformers/pr_17779/en/model_doc/retribert#transformers.RetriBertModel"),c(zD,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(QD,"href","/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(WD,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HD,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(JD,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(YD,"href","/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(KD,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ZD,"href","/docs/transformers/pr_17779/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(eG,"href","/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(oG,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(rG,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(tG,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aG,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(nG,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(sG,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.AutoModelForCausalLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(lG,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iG,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dG,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cG,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForCausalLM"),c(fG,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertLMHeadModel"),c(mG,"href","/docs/transformers/pr_17779/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(gG,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(hG,"href","/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(pG,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(_G,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(uG,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForCausalLM"),c(bG,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(vG,"href","/docs/transformers/pr_17779/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(FG,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TG,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(MG,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForCausalLM"),c(EG,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(CG,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(wG,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(AG,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(LG,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianForCausalLM"),c(yG,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForCausalLM"),c(xG,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c($G,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kG,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.OPTForCausalLM"),c(SG,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(RG,"href","/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(PG,"href","/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(BG,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(IG,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(NG,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qG,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(jG,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(DG,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(GG,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(OG,"href","/docs/transformers/pr_17779/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(VG,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(XG,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zG,"href","/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(QG,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(WG,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(HG,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_1,"id","transformers.AutoModelForMaskedLM"),c(_1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_1,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(UG,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eO,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(rO,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tO,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nO,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sO,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lO,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iO,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(dO,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cO,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(fO,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(mO,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gO,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hO,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pO,"href","/docs/transformers/pr_17779/en/model_doc/luke#transformers.LukeForMaskedLM"),c(_O,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bO,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vO,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FO,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(TO,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(MO,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(EO,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(CO,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(wO,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LO,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yO,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xO,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForMaskedLM"),c($O,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kO,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(SO,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(RO,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t2,"id","transformers.AutoModelForSeq2SeqLM"),c(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(PO,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(OO,"href","/docs/transformers/pr_17779/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17779/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17779/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.MarianMTModel"),c(WO,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17779/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17779/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForSequenceClassification"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(eV,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c($V,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17779/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForMultipleChoice"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(KV,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($X,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForNextSentencePrediction"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(kX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(BX,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(IX,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(NX,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qX,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(jX,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForTokenClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(XX,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(QX,"href","/docs/transformers/pr_17779/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(WX,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(HX,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForTokenClassification"),c(UX,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(YX,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(KX,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(ez,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oz,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rz,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tz,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(az,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nz,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sz,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lz,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iz,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(dz,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(cz,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(fz,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(mz,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(gz,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(hz,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pz,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_z,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(uz,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bz,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vz,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForQuestionAnswering"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17779/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17779/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Oz,"href","/docs/transformers/pr_17779/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17779/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17779/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17779/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17779/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17779/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17779/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17779/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17779/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17779/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(fQ,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(hQ,"href","/docs/transformers/pr_17779/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForTableQuestionAnswering"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForImageClassification"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitForImageClassification"),c(EQ,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CQ,"href","/docs/transformers/pr_17779/en/model_doc/cvt#transformers.CvtForImageClassification"),c(wQ,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(AQ,"href","/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LQ,"href","/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yQ,"href","/docs/transformers/pr_17779/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xQ,"href","/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitForImageClassification"),c($Q,"href","/docs/transformers/pr_17779/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(kQ,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(SQ,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(RQ,"href","/docs/transformers/pr_17779/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(PQ,"href","/docs/transformers/pr_17779/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(BQ,"href","/docs/transformers/pr_17779/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(IQ,"href","/docs/transformers/pr_17779/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(NQ,"href","/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(qQ,"href","/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinForImageClassification"),c(jQ,"href","/docs/transformers/pr_17779/en/model_doc/van#transformers.VanForImageClassification"),c(DQ,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForVision2Seq"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForVisualQuestionAnswering"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(zQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_17779/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForAudioClassification"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForAudioFrameClassification"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(lW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(fW,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(mW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(gW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(hW,"href","/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForCTC"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(pW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vW,"href","/docs/transformers/pr_17779/en/model_doc/hubert#transformers.HubertForCTC"),c(FW,"href","/docs/transformers/pr_17779/en/model_doc/mctct#transformers.MCTCTForCTC"),c(TW,"href","/docs/transformers/pr_17779/en/model_doc/sew#transformers.SEWForCTC"),c(MW,"href","/docs/transformers/pr_17779/en/model_doc/sew-d#transformers.SEWDForCTC"),c(EW,"href","/docs/transformers/pr_17779/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(CW,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(wW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(AW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(LW,"href","/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t9,"id","transformers.AutoModelForSpeechSeq2Seq"),c(t9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t9,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17779/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SW,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d9,"id","transformers.AutoModelForAudioXVector"),c(d9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d9,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(RW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(NW,"href","/docs/transformers/pr_17779/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(qW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jW,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(DW,"href","/docs/transformers/pr_17779/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b9,"id","transformers.AutoModelForMaskedImageModeling"),c(b9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b9,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17779/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zW,"href","/docs/transformers/pr_17779/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(QW,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w9,"id","transformers.AutoModelForObjectDetection"),c(w9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w9,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(WW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrForObjectDetection"),c(YW,"href","/docs/transformers/pr_17779/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k9,"id","transformers.AutoModelForImageSegmentation"),c(k9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k9,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(KW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17779/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I9,"id","transformers.AutoModelForSemanticSegmentation"),c(I9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I9,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(rH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(sH,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(lH,"href","/docs/transformers/pr_17779/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(iH,"href","/docs/transformers/pr_17779/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X9,"id","transformers.AutoModelForInstanceSegmentation"),c(X9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X9,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17779/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U9,"id","transformers.TFAutoModel"),c(U9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U9,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(gH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertModel"),c(uH,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.TFBartModel"),c(bH,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertModel"),c(vH,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(FH,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(TH,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertModel"),c(MH,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.TFCLIPModel"),c(EH,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertModel"),c(CH,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.TFConvNextModel"),c(wH,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLModel"),c(AH,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(LH,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaModel"),c(yH,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(xH,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertModel"),c($H,"href","/docs/transformers/pr_17779/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(kH,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraModel"),c(SH,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(RH,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelModel"),c(PH,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(BH,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2Model"),c(IH,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJModel"),c(NH,"href","/docs/transformers/pr_17779/en/model_doc/hubert#transformers.TFHubertModel"),c(qH,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(jH,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.TFLEDModel"),c(DH,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerModel"),c(GH,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.TFLxmertModel"),c(OH,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.TFMarianModel"),c(VH,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.TFMBartModel"),c(XH,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(zH,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetModel"),c(QH,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.TFMT5Model"),c(WH,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(HH,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.TFOPTModel"),c(UH,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.TFPegasusModel"),c(JH,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertModel"),c(YH,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaModel"),c(KH,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerModel"),c(ZH,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(eU,"href","/docs/transformers/pr_17779/en/model_doc/swin#transformers.TFSwinModel"),c(oU,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.TFT5Model"),c(rU,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasModel"),c(tU,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(aU,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.TFViTModel"),c(nU,"href","/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(sU,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(lU,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMModel"),c(iU,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(dU,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForPreTraining"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(cU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(hU,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForPreTraining"),c(_U,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uU,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bU,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vU,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(FU,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TU,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(MU,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EU,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CU,"href","/docs/transformers/pr_17779/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(wU,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(AU,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LU,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yU,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xU,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($U,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kU,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SU,"href","/docs/transformers/pr_17779/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(RU,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PU,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(BU,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForCausalLM"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(DU,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(GU,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OU,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VU,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(XU,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zU,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(QU,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(WU,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(HU,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(UU,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JU,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YU,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForImageClassification"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(KU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_17779/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rJ,"href","/docs/transformers/pr_17779/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tJ,"href","/docs/transformers/pr_17779/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(aJ,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForMaskedLM"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(_J,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uJ,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LJ,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(BJ,"href","/docs/transformers/pr_17779/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.TFMarianMTModel"),c(NJ,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForSequenceClassification"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17779/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17779/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17779/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForMultipleChoice"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(FY,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(TY,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(MY,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(EY,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.TFAutoModelForNextSentencePrediction"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(DY,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17779/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForTokenClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(UY,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(YY,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(KY,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(eK,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(oK,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(rK,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(tK,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(aK,"href","/docs/transformers/pr_17779/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(nK,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(sK,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(lK,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(iK,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(dK,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(cK,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(fK,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(mK,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(gK,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForQuestionAnswering"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(hK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17779/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17779/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17779/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17779/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17779/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(AK,"href","/docs/transformers/pr_17779/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17779/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17779/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17779/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17779/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17779/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(BK,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17779/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.TFAutoModelForVision2Seq"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(GK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17779/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModel"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(zK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertModel"),c(UK,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartModel"),c(JK,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.FlaxBeitModel"),c(YK,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertModel"),c(KK,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ZK,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(eZ,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(oZ,"href","/docs/transformers/pr_17779/en/model_doc/clip#transformers.FlaxCLIPModel"),c(rZ,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(tZ,"href","/docs/transformers/pr_17779/en/model_doc/dpt#transformers.FlaxDPTModel"),c(aZ,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraModel"),c(nZ,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(sZ,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(lZ,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(iZ,"href","/docs/transformers/pr_17779/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(dZ,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.FlaxMarianModel"),c(cZ,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fZ,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mZ,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.FlaxOPTModel"),c(gZ,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(hZ,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(pZ,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_Z,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.FlaxT5Model"),c(uZ,"href","/docs/transformers/pr_17779/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(bZ,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.FlaxViTModel"),c(vZ,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(FZ,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(TZ,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.FlaxAutoModelForCausalLM"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(AZ,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LZ,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yZ,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(xZ,"href","/docs/transformers/pr_17779/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c($Z,"href","/docs/transformers/pr_17779/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(kZ,"href","/docs/transformers/pr_17779/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(SZ,"href","/docs/transformers/pr_17779/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(RZ,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PZ,"href","/docs/transformers/pr_17779/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForPreTraining"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(BZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qZ,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jZ,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GZ,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OZ,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VZ,"href","/docs/transformers/pr_17779/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zZ,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WZ,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HZ,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17779/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(JZ,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForMaskedLM"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(YZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(oee,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(tee,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(aee,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(nee,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(see,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lee,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iee,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dee,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(cee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hee,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pee,"href","/docs/transformers/pr_17779/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17779/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uee,"href","/docs/transformers/pr_17779/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_17779/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vee,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17779/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_17779/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_17779/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(Eee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aee,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(yee,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xee,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($ee,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kee,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(See,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(Iee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Dee,"href","/docs/transformers/pr_17779/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Gee,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Oee,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Vee,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Xee,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zee,"href","/docs/transformers/pr_17779/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.FlaxAutoModelForTokenClassification"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Zee,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eoe,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ooe,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(roe,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(toe,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aoe,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(noe,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(soe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(loe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ioe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(doe,"href","/docs/transformers/pr_17779/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(coe,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(foe,"href","/docs/transformers/pr_17779/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(moe,"href","/docs/transformers/pr_17779/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(goe,"href","/docs/transformers/pr_17779/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_17779/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(poe,"href","/docs/transformers/pr_17779/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_17779/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(uoe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/pr_17779/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForImageClassification"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(Toe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_17779/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(woe,"href","/docs/transformers/pr_17779/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForVision2Seq"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(Aoe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Loe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yoe,"href","/docs/transformers/pr_17779/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xoe,"href","/docs/transformers/pr_17779/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,u),b(f,at,u),e(at,Ei),e(at,Ci),e(Ci,$6),e(at,$f),b(f,Oe,u),b(f,Qe,u),e(Qe,wi),e(Qe,Rn),e(Rn,k6),e(Qe,Pn),e(Qe,Bn),e(Bn,S6),e(Qe,Ai),e(Qe,In),e(In,R6),e(Qe,Li),b(f,kf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,iS),e(Ae,yi),e(yi,dS),e(Ae,cS),b(f,Co,u),b(f,$a,u),e($a,fS),e($a,Sf),e(Sf,mS),e($a,TQe),b(f,sOe,u),b(f,xi,u),e(xi,Rf),e(Rf,Cte),M(P6,Cte,null),e(xi,MQe),e(xi,wte),e(wte,EQe),b(f,lOe,u),b(f,Nn,u),e(Nn,CQe),e(Nn,Ate),e(Ate,wQe),e(Nn,AQe),e(Nn,Lte),e(Lte,LQe),e(Nn,yQe),b(f,iOe,u),M(B6,f,u),b(f,dOe,u),b(f,gS,u),e(gS,xQe),b(f,cOe,u),M(Pf,f,u),b(f,fOe,u),b(f,$i,u),e($i,Bf),e(Bf,yte),M(I6,yte,null),e($i,$Qe),e($i,xte),e(xte,kQe),b(f,mOe,u),b(f,wo,u),M(N6,wo,null),e(wo,SQe),e(wo,q6),e(q6,RQe),e(q6,hS),e(hS,PQe),e(q6,BQe),e(wo,IQe),e(wo,j6),e(j6,NQe),e(j6,$te),e($te,qQe),e(j6,jQe),e(wo,DQe),e(wo,Ar),M(D6,Ar,null),e(Ar,GQe),e(Ar,kte),e(kte,OQe),e(Ar,VQe),e(Ar,ki),e(ki,XQe),e(ki,Ste),e(Ste,zQe),e(ki,QQe),e(ki,Rte),e(Rte,WQe),e(ki,HQe),e(Ar,UQe),e(Ar,A),e(A,If),e(If,Pte),e(Pte,JQe),e(If,YQe),e(If,pS),e(pS,KQe),e(If,ZQe),e(A,eWe),e(A,Nf),e(Nf,Bte),e(Bte,oWe),e(Nf,rWe),e(Nf,_S),e(_S,tWe),e(Nf,aWe),e(A,nWe),e(A,qf),e(qf,Ite),e(Ite,sWe),e(qf,lWe),e(qf,uS),e(uS,iWe),e(qf,dWe),e(A,cWe),e(A,jf),e(jf,Nte),e(Nte,fWe),e(jf,mWe),e(jf,bS),e(bS,gWe),e(jf,hWe),e(A,pWe),e(A,Df),e(Df,qte),e(qte,_We),e(Df,uWe),e(Df,vS),e(vS,bWe),e(Df,vWe),e(A,FWe),e(A,Gf),e(Gf,jte),e(jte,TWe),e(Gf,MWe),e(Gf,FS),e(FS,EWe),e(Gf,CWe),e(A,wWe),e(A,Of),e(Of,Dte),e(Dte,AWe),e(Of,LWe),e(Of,TS),e(TS,yWe),e(Of,xWe),e(A,$We),e(A,Vf),e(Vf,Gte),e(Gte,kWe),e(Vf,SWe),e(Vf,MS),e(MS,RWe),e(Vf,PWe),e(A,BWe),e(A,Xf),e(Xf,Ote),e(Ote,IWe),e(Xf,NWe),e(Xf,ES),e(ES,qWe),e(Xf,jWe),e(A,DWe),e(A,zf),e(zf,Vte),e(Vte,GWe),e(zf,OWe),e(zf,CS),e(CS,VWe),e(zf,XWe),e(A,zWe),e(A,Qf),e(Qf,Xte),e(Xte,QWe),e(Qf,WWe),e(Qf,wS),e(wS,HWe),e(Qf,UWe),e(A,JWe),e(A,Wf),e(Wf,zte),e(zte,YWe),e(Wf,KWe),e(Wf,AS),e(AS,ZWe),e(Wf,eHe),e(A,oHe),e(A,Hf),e(Hf,Qte),e(Qte,rHe),e(Hf,tHe),e(Hf,LS),e(LS,aHe),e(Hf,nHe),e(A,sHe),e(A,Uf),e(Uf,Wte),e(Wte,lHe),e(Uf,iHe),e(Uf,yS),e(yS,dHe),e(Uf,cHe),e(A,fHe),e(A,Jf),e(Jf,Hte),e(Hte,mHe),e(Jf,gHe),e(Jf,xS),e(xS,hHe),e(Jf,pHe),e(A,_He),e(A,Yf),e(Yf,Ute),e(Ute,uHe),e(Yf,bHe),e(Yf,$S),e($S,vHe),e(Yf,FHe),e(A,THe),e(A,Kf),e(Kf,Jte),e(Jte,MHe),e(Kf,EHe),e(Kf,kS),e(kS,CHe),e(Kf,wHe),e(A,AHe),e(A,Zf),e(Zf,Yte),e(Yte,LHe),e(Zf,yHe),e(Zf,SS),e(SS,xHe),e(Zf,$He),e(A,kHe),e(A,em),e(em,Kte),e(Kte,SHe),e(em,RHe),e(em,RS),e(RS,PHe),e(em,BHe),e(A,IHe),e(A,om),e(om,Zte),e(Zte,NHe),e(om,qHe),e(om,PS),e(PS,jHe),e(om,DHe),e(A,GHe),e(A,rm),e(rm,eae),e(eae,OHe),e(rm,VHe),e(rm,BS),e(BS,XHe),e(rm,zHe),e(A,QHe),e(A,tm),e(tm,oae),e(oae,WHe),e(tm,HHe),e(tm,IS),e(IS,UHe),e(tm,JHe),e(A,YHe),e(A,am),e(am,rae),e(rae,KHe),e(am,ZHe),e(am,NS),e(NS,eUe),e(am,oUe),e(A,rUe),e(A,nm),e(nm,tae),e(tae,tUe),e(nm,aUe),e(nm,qS),e(qS,nUe),e(nm,sUe),e(A,lUe),e(A,sm),e(sm,aae),e(aae,iUe),e(sm,dUe),e(sm,jS),e(jS,cUe),e(sm,fUe),e(A,mUe),e(A,lm),e(lm,nae),e(nae,gUe),e(lm,hUe),e(lm,DS),e(DS,pUe),e(lm,_Ue),e(A,uUe),e(A,im),e(im,sae),e(sae,bUe),e(im,vUe),e(im,GS),e(GS,FUe),e(im,TUe),e(A,MUe),e(A,dm),e(dm,lae),e(lae,EUe),e(dm,CUe),e(dm,OS),e(OS,wUe),e(dm,AUe),e(A,LUe),e(A,cm),e(cm,iae),e(iae,yUe),e(cm,xUe),e(cm,VS),e(VS,$Ue),e(cm,kUe),e(A,SUe),e(A,fm),e(fm,dae),e(dae,RUe),e(fm,PUe),e(fm,XS),e(XS,BUe),e(fm,IUe),e(A,NUe),e(A,mm),e(mm,cae),e(cae,qUe),e(mm,jUe),e(mm,zS),e(zS,DUe),e(mm,GUe),e(A,OUe),e(A,gm),e(gm,fae),e(fae,VUe),e(gm,XUe),e(gm,QS),e(QS,zUe),e(gm,QUe),e(A,WUe),e(A,hm),e(hm,mae),e(mae,HUe),e(hm,UUe),e(hm,WS),e(WS,JUe),e(hm,YUe),e(A,KUe),e(A,pm),e(pm,gae),e(gae,ZUe),e(pm,eJe),e(pm,HS),e(HS,oJe),e(pm,rJe),e(A,tJe),e(A,_m),e(_m,hae),e(hae,aJe),e(_m,nJe),e(_m,US),e(US,sJe),e(_m,lJe),e(A,iJe),e(A,um),e(um,pae),e(pae,dJe),e(um,cJe),e(um,JS),e(JS,fJe),e(um,mJe),e(A,gJe),e(A,bm),e(bm,_ae),e(_ae,hJe),e(bm,pJe),e(bm,YS),e(YS,_Je),e(bm,uJe),e(A,bJe),e(A,vm),e(vm,uae),e(uae,vJe),e(vm,FJe),e(vm,KS),e(KS,TJe),e(vm,MJe),e(A,EJe),e(A,Fm),e(Fm,bae),e(bae,CJe),e(Fm,wJe),e(Fm,ZS),e(ZS,AJe),e(Fm,LJe),e(A,yJe),e(A,Tm),e(Tm,vae),e(vae,xJe),e(Tm,$Je),e(Tm,eR),e(eR,kJe),e(Tm,SJe),e(A,RJe),e(A,Mm),e(Mm,Fae),e(Fae,PJe),e(Mm,BJe),e(Mm,oR),e(oR,IJe),e(Mm,NJe),e(A,qJe),e(A,Em),e(Em,Tae),e(Tae,jJe),e(Em,DJe),e(Em,rR),e(rR,GJe),e(Em,OJe),e(A,VJe),e(A,Cm),e(Cm,Mae),e(Mae,XJe),e(Cm,zJe),e(Cm,tR),e(tR,QJe),e(Cm,WJe),e(A,HJe),e(A,wm),e(wm,Eae),e(Eae,UJe),e(wm,JJe),e(wm,aR),e(aR,YJe),e(wm,KJe),e(A,ZJe),e(A,Am),e(Am,Cae),e(Cae,eYe),e(Am,oYe),e(Am,nR),e(nR,rYe),e(Am,tYe),e(A,aYe),e(A,Lm),e(Lm,wae),e(wae,nYe),e(Lm,sYe),e(Lm,sR),e(sR,lYe),e(Lm,iYe),e(A,dYe),e(A,ym),e(ym,Aae),e(Aae,cYe),e(ym,fYe),e(ym,lR),e(lR,mYe),e(ym,gYe),e(A,hYe),e(A,xm),e(xm,Lae),e(Lae,pYe),e(xm,_Ye),e(xm,iR),e(iR,uYe),e(xm,bYe),e(A,vYe),e(A,$m),e($m,yae),e(yae,FYe),e($m,TYe),e($m,dR),e(dR,MYe),e($m,EYe),e(A,CYe),e(A,km),e(km,xae),e(xae,wYe),e(km,AYe),e(km,cR),e(cR,LYe),e(km,yYe),e(A,xYe),e(A,Sm),e(Sm,$ae),e($ae,$Ye),e(Sm,kYe),e(Sm,fR),e(fR,SYe),e(Sm,RYe),e(A,PYe),e(A,Rm),e(Rm,kae),e(kae,BYe),e(Rm,IYe),e(Rm,mR),e(mR,NYe),e(Rm,qYe),e(A,jYe),e(A,Pm),e(Pm,Sae),e(Sae,DYe),e(Pm,GYe),e(Pm,gR),e(gR,OYe),e(Pm,VYe),e(A,XYe),e(A,Bm),e(Bm,Rae),e(Rae,zYe),e(Bm,QYe),e(Bm,hR),e(hR,WYe),e(Bm,HYe),e(A,UYe),e(A,Im),e(Im,Pae),e(Pae,JYe),e(Im,YYe),e(Im,pR),e(pR,KYe),e(Im,ZYe),e(A,eKe),e(A,Nm),e(Nm,Bae),e(Bae,oKe),e(Nm,rKe),e(Nm,_R),e(_R,tKe),e(Nm,aKe),e(A,nKe),e(A,qm),e(qm,Iae),e(Iae,sKe),e(qm,lKe),e(qm,uR),e(uR,iKe),e(qm,dKe),e(A,cKe),e(A,jm),e(jm,Nae),e(Nae,fKe),e(jm,mKe),e(jm,bR),e(bR,gKe),e(jm,hKe),e(A,pKe),e(A,Dm),e(Dm,qae),e(qae,_Ke),e(Dm,uKe),e(Dm,vR),e(vR,bKe),e(Dm,vKe),e(A,FKe),e(A,Gm),e(Gm,jae),e(jae,TKe),e(Gm,MKe),e(Gm,FR),e(FR,EKe),e(Gm,CKe),e(A,wKe),e(A,Om),e(Om,Dae),e(Dae,AKe),e(Om,LKe),e(Om,TR),e(TR,yKe),e(Om,xKe),e(A,$Ke),e(A,Vm),e(Vm,Gae),e(Gae,kKe),e(Vm,SKe),e(Vm,MR),e(MR,RKe),e(Vm,PKe),e(A,BKe),e(A,Xm),e(Xm,Oae),e(Oae,IKe),e(Xm,NKe),e(Xm,ER),e(ER,qKe),e(Xm,jKe),e(A,DKe),e(A,zm),e(zm,Vae),e(Vae,GKe),e(zm,OKe),e(zm,CR),e(CR,VKe),e(zm,XKe),e(A,zKe),e(A,Qm),e(Qm,Xae),e(Xae,QKe),e(Qm,WKe),e(Qm,wR),e(wR,HKe),e(Qm,UKe),e(A,JKe),e(A,Wm),e(Wm,zae),e(zae,YKe),e(Wm,KKe),e(Wm,AR),e(AR,ZKe),e(Wm,eZe),e(A,oZe),e(A,Hm),e(Hm,Qae),e(Qae,rZe),e(Hm,tZe),e(Hm,LR),e(LR,aZe),e(Hm,nZe),e(A,sZe),e(A,Um),e(Um,Wae),e(Wae,lZe),e(Um,iZe),e(Um,yR),e(yR,dZe),e(Um,cZe),e(A,fZe),e(A,Jm),e(Jm,Hae),e(Hae,mZe),e(Jm,gZe),e(Jm,xR),e(xR,hZe),e(Jm,pZe),e(A,_Ze),e(A,Ym),e(Ym,Uae),e(Uae,uZe),e(Ym,bZe),e(Ym,$R),e($R,vZe),e(Ym,FZe),e(A,TZe),e(A,Km),e(Km,Jae),e(Jae,MZe),e(Km,EZe),e(Km,kR),e(kR,CZe),e(Km,wZe),e(A,AZe),e(A,Zm),e(Zm,Yae),e(Yae,LZe),e(Zm,yZe),e(Zm,SR),e(SR,xZe),e(Zm,$Ze),e(A,kZe),e(A,eg),e(eg,Kae),e(Kae,SZe),e(eg,RZe),e(eg,RR),e(RR,PZe),e(eg,BZe),e(A,IZe),e(A,og),e(og,Zae),e(Zae,NZe),e(og,qZe),e(og,PR),e(PR,jZe),e(og,DZe),e(A,GZe),e(A,rg),e(rg,ene),e(ene,OZe),e(rg,VZe),e(rg,BR),e(BR,XZe),e(rg,zZe),e(A,QZe),e(A,tg),e(tg,one),e(one,WZe),e(tg,HZe),e(tg,IR),e(IR,UZe),e(tg,JZe),e(A,YZe),e(A,ag),e(ag,rne),e(rne,KZe),e(ag,ZZe),e(ag,NR),e(NR,eeo),e(ag,oeo),e(A,reo),e(A,ng),e(ng,tne),e(tne,teo),e(ng,aeo),e(ng,qR),e(qR,neo),e(ng,seo),e(A,leo),e(A,sg),e(sg,ane),e(ane,ieo),e(sg,deo),e(sg,jR),e(jR,ceo),e(sg,feo),e(A,meo),e(A,lg),e(lg,nne),e(nne,geo),e(lg,heo),e(lg,DR),e(DR,peo),e(lg,_eo),e(A,ueo),e(A,ig),e(ig,sne),e(sne,beo),e(ig,veo),e(ig,GR),e(GR,Feo),e(ig,Teo),e(A,Meo),e(A,dg),e(dg,lne),e(lne,Eeo),e(dg,Ceo),e(dg,OR),e(OR,weo),e(dg,Aeo),e(A,Leo),e(A,cg),e(cg,ine),e(ine,yeo),e(cg,xeo),e(cg,VR),e(VR,$eo),e(cg,keo),e(A,Seo),e(A,fg),e(fg,dne),e(dne,Reo),e(fg,Peo),e(fg,XR),e(XR,Beo),e(fg,Ieo),e(A,Neo),e(A,mg),e(mg,cne),e(cne,qeo),e(mg,jeo),e(mg,zR),e(zR,Deo),e(mg,Geo),e(A,Oeo),e(A,gg),e(gg,fne),e(fne,Veo),e(gg,Xeo),e(gg,QR),e(QR,zeo),e(gg,Qeo),e(A,Weo),e(A,hg),e(hg,mne),e(mne,Heo),e(hg,Ueo),e(hg,WR),e(WR,Jeo),e(hg,Yeo),e(A,Keo),e(A,pg),e(pg,gne),e(gne,Zeo),e(pg,eoo),e(pg,HR),e(HR,ooo),e(pg,roo),e(A,too),e(A,_g),e(_g,hne),e(hne,aoo),e(_g,noo),e(_g,UR),e(UR,soo),e(_g,loo),e(A,ioo),e(A,ug),e(ug,pne),e(pne,doo),e(ug,coo),e(ug,JR),e(JR,foo),e(ug,moo),e(A,goo),e(A,bg),e(bg,_ne),e(_ne,hoo),e(bg,poo),e(bg,YR),e(YR,_oo),e(bg,uoo),e(A,boo),e(A,vg),e(vg,une),e(une,voo),e(vg,Foo),e(vg,KR),e(KR,Too),e(vg,Moo),e(A,Eoo),e(A,Fg),e(Fg,bne),e(bne,Coo),e(Fg,woo),e(Fg,ZR),e(ZR,Aoo),e(Fg,Loo),e(A,yoo),e(A,Tg),e(Tg,vne),e(vne,xoo),e(Tg,$oo),e(Tg,eP),e(eP,koo),e(Tg,Soo),e(A,Roo),e(A,Mg),e(Mg,Fne),e(Fne,Poo),e(Mg,Boo),e(Mg,oP),e(oP,Ioo),e(Mg,Noo),e(A,qoo),e(A,Eg),e(Eg,Tne),e(Tne,joo),e(Eg,Doo),e(Eg,rP),e(rP,Goo),e(Eg,Ooo),e(A,Voo),e(A,Cg),e(Cg,Mne),e(Mne,Xoo),e(Cg,zoo),e(Cg,tP),e(tP,Qoo),e(Cg,Woo),e(A,Hoo),e(A,wg),e(wg,Ene),e(Ene,Uoo),e(wg,Joo),e(wg,aP),e(aP,Yoo),e(wg,Koo),e(A,Zoo),e(A,Ag),e(Ag,Cne),e(Cne,ero),e(Ag,oro),e(Ag,nP),e(nP,rro),e(Ag,tro),e(A,aro),e(A,Lg),e(Lg,wne),e(wne,nro),e(Lg,sro),e(Lg,sP),e(sP,lro),e(Lg,iro),e(A,dro),e(A,yg),e(yg,Ane),e(Ane,cro),e(yg,fro),e(yg,lP),e(lP,mro),e(yg,gro),e(A,hro),e(A,xg),e(xg,Lne),e(Lne,pro),e(xg,_ro),e(xg,iP),e(iP,uro),e(xg,bro),e(A,vro),e(A,$g),e($g,yne),e(yne,Fro),e($g,Tro),e($g,dP),e(dP,Mro),e($g,Ero),e(A,Cro),e(A,kg),e(kg,xne),e(xne,wro),e(kg,Aro),e(kg,cP),e(cP,Lro),e(kg,yro),e(A,xro),e(A,Sg),e(Sg,$ne),e($ne,$ro),e(Sg,kro),e(Sg,fP),e(fP,Sro),e(Sg,Rro),e(A,Pro),e(A,Rg),e(Rg,kne),e(kne,Bro),e(Rg,Iro),e(Rg,mP),e(mP,Nro),e(Rg,qro),e(A,jro),e(A,Pg),e(Pg,Sne),e(Sne,Dro),e(Pg,Gro),e(Pg,gP),e(gP,Oro),e(Pg,Vro),e(A,Xro),e(A,Bg),e(Bg,Rne),e(Rne,zro),e(Bg,Qro),e(Bg,hP),e(hP,Wro),e(Bg,Hro),e(A,Uro),e(A,Ig),e(Ig,Pne),e(Pne,Jro),e(Ig,Yro),e(Ig,pP),e(pP,Kro),e(Ig,Zro),e(A,eto),e(A,Ng),e(Ng,Bne),e(Bne,oto),e(Ng,rto),e(Ng,_P),e(_P,tto),e(Ng,ato),e(A,nto),e(A,qg),e(qg,Ine),e(Ine,sto),e(qg,lto),e(qg,uP),e(uP,ito),e(qg,dto),e(A,cto),e(A,jg),e(jg,Nne),e(Nne,fto),e(jg,mto),e(jg,bP),e(bP,gto),e(jg,hto),e(A,pto),e(A,Dg),e(Dg,qne),e(qne,_to),e(Dg,uto),e(Dg,vP),e(vP,bto),e(Dg,vto),e(A,Fto),e(A,Gg),e(Gg,jne),e(jne,Tto),e(Gg,Mto),e(Gg,FP),e(FP,Eto),e(Gg,Cto),e(A,wto),e(A,Og),e(Og,Dne),e(Dne,Ato),e(Og,Lto),e(Og,TP),e(TP,yto),e(Og,xto),e(Ar,$to),M(Vg,Ar,null),e(wo,kto),e(wo,Xg),M(G6,Xg,null),e(Xg,Sto),e(Xg,Gne),e(Gne,Rto),b(f,gOe,u),b(f,Si,u),e(Si,zg),e(zg,One),M(O6,One,null),e(Si,Pto),e(Si,Vne),e(Vne,Bto),b(f,hOe,u),b(f,Ao,u),M(V6,Ao,null),e(Ao,Ito),e(Ao,X6),e(X6,Nto),e(X6,MP),e(MP,qto),e(X6,jto),e(Ao,Dto),e(Ao,z6),e(z6,Gto),e(z6,Xne),e(Xne,Oto),e(z6,Vto),e(Ao,Xto),e(Ao,Lr),M(Q6,Lr,null),e(Lr,zto),e(Lr,zne),e(zne,Qto),e(Lr,Wto),e(Lr,ka),e(ka,Hto),e(ka,Qne),e(Qne,Uto),e(ka,Jto),e(ka,Wne),e(Wne,Yto),e(ka,Kto),e(ka,Hne),e(Hne,Zto),e(ka,eao),e(Lr,oao),e(Lr,k),e(k,qn),e(qn,Une),e(Une,rao),e(qn,tao),e(qn,EP),e(EP,aao),e(qn,nao),e(qn,CP),e(CP,sao),e(qn,lao),e(k,iao),e(k,jn),e(jn,Jne),e(Jne,dao),e(jn,cao),e(jn,wP),e(wP,fao),e(jn,mao),e(jn,AP),e(AP,gao),e(jn,hao),e(k,pao),e(k,Dn),e(Dn,Yne),e(Yne,_ao),e(Dn,uao),e(Dn,LP),e(LP,bao),e(Dn,vao),e(Dn,yP),e(yP,Fao),e(Dn,Tao),e(k,Mao),e(k,Qg),e(Qg,Kne),e(Kne,Eao),e(Qg,Cao),e(Qg,xP),e(xP,wao),e(Qg,Aao),e(k,Lao),e(k,Gn),e(Gn,Zne),e(Zne,yao),e(Gn,xao),e(Gn,$P),e($P,$ao),e(Gn,kao),e(Gn,kP),e(kP,Sao),e(Gn,Rao),e(k,Pao),e(k,Wg),e(Wg,ese),e(ese,Bao),e(Wg,Iao),e(Wg,SP),e(SP,Nao),e(Wg,qao),e(k,jao),e(k,Hg),e(Hg,ose),e(ose,Dao),e(Hg,Gao),e(Hg,RP),e(RP,Oao),e(Hg,Vao),e(k,Xao),e(k,Ug),e(Ug,rse),e(rse,zao),e(Ug,Qao),e(Ug,PP),e(PP,Wao),e(Ug,Hao),e(k,Uao),e(k,On),e(On,tse),e(tse,Jao),e(On,Yao),e(On,BP),e(BP,Kao),e(On,Zao),e(On,IP),e(IP,eno),e(On,ono),e(k,rno),e(k,Vn),e(Vn,ase),e(ase,tno),e(Vn,ano),e(Vn,NP),e(NP,nno),e(Vn,sno),e(Vn,qP),e(qP,lno),e(Vn,ino),e(k,dno),e(k,Xn),e(Xn,nse),e(nse,cno),e(Xn,fno),e(Xn,jP),e(jP,mno),e(Xn,gno),e(Xn,DP),e(DP,hno),e(Xn,pno),e(k,_no),e(k,Jg),e(Jg,sse),e(sse,uno),e(Jg,bno),e(Jg,GP),e(GP,vno),e(Jg,Fno),e(k,Tno),e(k,Yg),e(Yg,lse),e(lse,Mno),e(Yg,Eno),e(Yg,OP),e(OP,Cno),e(Yg,wno),e(k,Ano),e(k,Kg),e(Kg,ise),e(ise,Lno),e(Kg,yno),e(Kg,VP),e(VP,xno),e(Kg,$no),e(k,kno),e(k,zn),e(zn,dse),e(dse,Sno),e(zn,Rno),e(zn,XP),e(XP,Pno),e(zn,Bno),e(zn,zP),e(zP,Ino),e(zn,Nno),e(k,qno),e(k,Zg),e(Zg,cse),e(cse,jno),e(Zg,Dno),e(Zg,QP),e(QP,Gno),e(Zg,Ono),e(k,Vno),e(k,Qn),e(Qn,fse),e(fse,Xno),e(Qn,zno),e(Qn,WP),e(WP,Qno),e(Qn,Wno),e(Qn,HP),e(HP,Hno),e(Qn,Uno),e(k,Jno),e(k,Wn),e(Wn,mse),e(mse,Yno),e(Wn,Kno),e(Wn,UP),e(UP,Zno),e(Wn,eso),e(Wn,JP),e(JP,oso),e(Wn,rso),e(k,tso),e(k,Hn),e(Hn,gse),e(gse,aso),e(Hn,nso),e(Hn,YP),e(YP,sso),e(Hn,lso),e(Hn,KP),e(KP,iso),e(Hn,dso),e(k,cso),e(k,Un),e(Un,hse),e(hse,fso),e(Un,mso),e(Un,ZP),e(ZP,gso),e(Un,hso),e(Un,eB),e(eB,pso),e(Un,_so),e(k,uso),e(k,eh),e(eh,pse),e(pse,bso),e(eh,vso),e(eh,oB),e(oB,Fso),e(eh,Tso),e(k,Mso),e(k,Jn),e(Jn,_se),e(_se,Eso),e(Jn,Cso),e(Jn,rB),e(rB,wso),e(Jn,Aso),e(Jn,tB),e(tB,Lso),e(Jn,yso),e(k,xso),e(k,Yn),e(Yn,use),e(use,$so),e(Yn,kso),e(Yn,aB),e(aB,Sso),e(Yn,Rso),e(Yn,nB),e(nB,Pso),e(Yn,Bso),e(k,Iso),e(k,Kn),e(Kn,bse),e(bse,Nso),e(Kn,qso),e(Kn,sB),e(sB,jso),e(Kn,Dso),e(Kn,lB),e(lB,Gso),e(Kn,Oso),e(k,Vso),e(k,Zn),e(Zn,vse),e(vse,Xso),e(Zn,zso),e(Zn,iB),e(iB,Qso),e(Zn,Wso),e(Zn,dB),e(dB,Hso),e(Zn,Uso),e(k,Jso),e(k,es),e(es,Fse),e(Fse,Yso),e(es,Kso),e(es,cB),e(cB,Zso),e(es,elo),e(es,fB),e(fB,olo),e(es,rlo),e(k,tlo),e(k,os),e(os,Tse),e(Tse,alo),e(os,nlo),e(os,mB),e(mB,slo),e(os,llo),e(os,gB),e(gB,ilo),e(os,dlo),e(k,clo),e(k,oh),e(oh,Mse),e(Mse,flo),e(oh,mlo),e(oh,hB),e(hB,glo),e(oh,hlo),e(k,plo),e(k,rs),e(rs,Ese),e(Ese,_lo),e(rs,ulo),e(rs,pB),e(pB,blo),e(rs,vlo),e(rs,_B),e(_B,Flo),e(rs,Tlo),e(k,Mlo),e(k,rh),e(rh,Cse),e(Cse,Elo),e(rh,Clo),e(rh,uB),e(uB,wlo),e(rh,Alo),e(k,Llo),e(k,ts),e(ts,wse),e(wse,ylo),e(ts,xlo),e(ts,bB),e(bB,$lo),e(ts,klo),e(ts,vB),e(vB,Slo),e(ts,Rlo),e(k,Plo),e(k,as),e(as,Ase),e(Ase,Blo),e(as,Ilo),e(as,FB),e(FB,Nlo),e(as,qlo),e(as,TB),e(TB,jlo),e(as,Dlo),e(k,Glo),e(k,ns),e(ns,Lse),e(Lse,Olo),e(ns,Vlo),e(ns,MB),e(MB,Xlo),e(ns,zlo),e(ns,EB),e(EB,Qlo),e(ns,Wlo),e(k,Hlo),e(k,th),e(th,yse),e(yse,Ulo),e(th,Jlo),e(th,CB),e(CB,Ylo),e(th,Klo),e(k,Zlo),e(k,ss),e(ss,xse),e(xse,eio),e(ss,oio),e(ss,wB),e(wB,rio),e(ss,tio),e(ss,AB),e(AB,aio),e(ss,nio),e(k,sio),e(k,ls),e(ls,$se),e($se,lio),e(ls,iio),e(ls,LB),e(LB,dio),e(ls,cio),e(ls,yB),e(yB,fio),e(ls,mio),e(k,gio),e(k,ah),e(ah,kse),e(kse,hio),e(ah,pio),e(ah,xB),e(xB,_io),e(ah,uio),e(k,bio),e(k,is),e(is,Sse),e(Sse,vio),e(is,Fio),e(is,$B),e($B,Tio),e(is,Mio),e(is,kB),e(kB,Eio),e(is,Cio),e(k,wio),e(k,ds),e(ds,Rse),e(Rse,Aio),e(ds,Lio),e(ds,SB),e(SB,yio),e(ds,xio),e(ds,RB),e(RB,$io),e(ds,kio),e(k,Sio),e(k,cs),e(cs,Pse),e(Pse,Rio),e(cs,Pio),e(cs,PB),e(PB,Bio),e(cs,Iio),e(cs,BB),e(BB,Nio),e(cs,qio),e(k,jio),e(k,fs),e(fs,Bse),e(Bse,Dio),e(fs,Gio),e(fs,IB),e(IB,Oio),e(fs,Vio),e(fs,NB),e(NB,Xio),e(fs,zio),e(k,Qio),e(k,ms),e(ms,Ise),e(Ise,Wio),e(ms,Hio),e(ms,qB),e(qB,Uio),e(ms,Jio),e(ms,jB),e(jB,Yio),e(ms,Kio),e(k,Zio),e(k,gs),e(gs,Nse),e(Nse,edo),e(gs,odo),e(gs,DB),e(DB,rdo),e(gs,tdo),e(gs,GB),e(GB,ado),e(gs,ndo),e(k,sdo),e(k,hs),e(hs,qse),e(qse,ldo),e(hs,ido),e(hs,OB),e(OB,ddo),e(hs,cdo),e(hs,VB),e(VB,fdo),e(hs,mdo),e(k,gdo),e(k,ps),e(ps,jse),e(jse,hdo),e(ps,pdo),e(ps,XB),e(XB,_do),e(ps,udo),e(ps,zB),e(zB,bdo),e(ps,vdo),e(k,Fdo),e(k,nh),e(nh,Dse),e(Dse,Tdo),e(nh,Mdo),e(nh,QB),e(QB,Edo),e(nh,Cdo),e(k,wdo),e(k,_s),e(_s,Gse),e(Gse,Ado),e(_s,Ldo),e(_s,WB),e(WB,ydo),e(_s,xdo),e(_s,HB),e(HB,$do),e(_s,kdo),e(k,Sdo),e(k,sh),e(sh,Ose),e(Ose,Rdo),e(sh,Pdo),e(sh,UB),e(UB,Bdo),e(sh,Ido),e(k,Ndo),e(k,lh),e(lh,Vse),e(Vse,qdo),e(lh,jdo),e(lh,JB),e(JB,Ddo),e(lh,Gdo),e(k,Odo),e(k,us),e(us,Xse),e(Xse,Vdo),e(us,Xdo),e(us,YB),e(YB,zdo),e(us,Qdo),e(us,KB),e(KB,Wdo),e(us,Hdo),e(k,Udo),e(k,bs),e(bs,zse),e(zse,Jdo),e(bs,Ydo),e(bs,ZB),e(ZB,Kdo),e(bs,Zdo),e(bs,eI),e(eI,eco),e(bs,oco),e(k,rco),e(k,vs),e(vs,Qse),e(Qse,tco),e(vs,aco),e(vs,oI),e(oI,nco),e(vs,sco),e(vs,rI),e(rI,lco),e(vs,ico),e(k,dco),e(k,ih),e(ih,Wse),e(Wse,cco),e(ih,fco),e(ih,tI),e(tI,mco),e(ih,gco),e(k,hco),e(k,Fs),e(Fs,Hse),e(Hse,pco),e(Fs,_co),e(Fs,aI),e(aI,uco),e(Fs,bco),e(Fs,nI),e(nI,vco),e(Fs,Fco),e(k,Tco),e(k,Ts),e(Ts,Use),e(Use,Mco),e(Ts,Eco),e(Ts,sI),e(sI,Cco),e(Ts,wco),e(Ts,lI),e(lI,Aco),e(Ts,Lco),e(k,yco),e(k,Ms),e(Ms,Jse),e(Jse,xco),e(Ms,$co),e(Ms,iI),e(iI,kco),e(Ms,Sco),e(Ms,dI),e(dI,Rco),e(Ms,Pco),e(k,Bco),e(k,Es),e(Es,Yse),e(Yse,Ico),e(Es,Nco),e(Es,cI),e(cI,qco),e(Es,jco),e(Es,fI),e(fI,Dco),e(Es,Gco),e(k,Oco),e(k,Cs),e(Cs,Kse),e(Kse,Vco),e(Cs,Xco),e(Cs,mI),e(mI,zco),e(Cs,Qco),e(Cs,gI),e(gI,Wco),e(Cs,Hco),e(k,Uco),e(k,ws),e(ws,Zse),e(Zse,Jco),e(ws,Yco),e(ws,hI),e(hI,Kco),e(ws,Zco),e(ws,pI),e(pI,efo),e(ws,ofo),e(k,rfo),e(k,dh),e(dh,ele),e(ele,tfo),e(dh,afo),e(dh,_I),e(_I,nfo),e(dh,sfo),e(k,lfo),e(k,As),e(As,ole),e(ole,ifo),e(As,dfo),e(As,uI),e(uI,cfo),e(As,ffo),e(As,bI),e(bI,mfo),e(As,gfo),e(k,hfo),e(k,ch),e(ch,rle),e(rle,pfo),e(ch,_fo),e(ch,vI),e(vI,ufo),e(ch,bfo),e(k,vfo),e(k,fh),e(fh,tle),e(tle,Ffo),e(fh,Tfo),e(fh,FI),e(FI,Mfo),e(fh,Efo),e(k,Cfo),e(k,mh),e(mh,ale),e(ale,wfo),e(mh,Afo),e(mh,TI),e(TI,Lfo),e(mh,yfo),e(k,xfo),e(k,gh),e(gh,nle),e(nle,$fo),e(gh,kfo),e(gh,MI),e(MI,Sfo),e(gh,Rfo),e(k,Pfo),e(k,Ls),e(Ls,sle),e(sle,Bfo),e(Ls,Ifo),e(Ls,EI),e(EI,Nfo),e(Ls,qfo),e(Ls,CI),e(CI,jfo),e(Ls,Dfo),e(k,Gfo),e(k,hh),e(hh,lle),e(lle,Ofo),e(hh,Vfo),e(hh,wI),e(wI,Xfo),e(hh,zfo),e(k,Qfo),e(k,ys),e(ys,ile),e(ile,Wfo),e(ys,Hfo),e(ys,AI),e(AI,Ufo),e(ys,Jfo),e(ys,LI),e(LI,Yfo),e(ys,Kfo),e(k,Zfo),e(k,xs),e(xs,dle),e(dle,emo),e(xs,omo),e(xs,yI),e(yI,rmo),e(xs,tmo),e(xs,xI),e(xI,amo),e(xs,nmo),e(k,smo),e(k,$s),e($s,cle),e(cle,lmo),e($s,imo),e($s,$I),e($I,dmo),e($s,cmo),e($s,kI),e(kI,fmo),e($s,mmo),e(k,gmo),e(k,ks),e(ks,fle),e(fle,hmo),e(ks,pmo),e(ks,SI),e(SI,_mo),e(ks,umo),e(ks,RI),e(RI,bmo),e(ks,vmo),e(k,Fmo),e(k,Ss),e(Ss,mle),e(mle,Tmo),e(Ss,Mmo),e(Ss,PI),e(PI,Emo),e(Ss,Cmo),e(Ss,BI),e(BI,wmo),e(Ss,Amo),e(k,Lmo),e(k,Rs),e(Rs,gle),e(gle,ymo),e(Rs,xmo),e(Rs,II),e(II,$mo),e(Rs,kmo),e(Rs,NI),e(NI,Smo),e(Rs,Rmo),e(k,Pmo),e(k,ph),e(ph,hle),e(hle,Bmo),e(ph,Imo),e(ph,qI),e(qI,Nmo),e(ph,qmo),e(k,jmo),e(k,_h),e(_h,ple),e(ple,Dmo),e(_h,Gmo),e(_h,jI),e(jI,Omo),e(_h,Vmo),e(k,Xmo),e(k,Ps),e(Ps,_le),e(_le,zmo),e(Ps,Qmo),e(Ps,DI),e(DI,Wmo),e(Ps,Hmo),e(Ps,GI),e(GI,Umo),e(Ps,Jmo),e(k,Ymo),e(k,Bs),e(Bs,ule),e(ule,Kmo),e(Bs,Zmo),e(Bs,OI),e(OI,ego),e(Bs,ogo),e(Bs,VI),e(VI,rgo),e(Bs,tgo),e(k,ago),e(k,Is),e(Is,ble),e(ble,ngo),e(Is,sgo),e(Is,XI),e(XI,lgo),e(Is,igo),e(Is,zI),e(zI,dgo),e(Is,cgo),e(k,fgo),e(k,uh),e(uh,vle),e(vle,mgo),e(uh,ggo),e(uh,QI),e(QI,hgo),e(uh,pgo),e(k,_go),e(k,bh),e(bh,Fle),e(Fle,ugo),e(bh,bgo),e(bh,WI),e(WI,vgo),e(bh,Fgo),e(k,Tgo),e(k,vh),e(vh,Tle),e(Tle,Mgo),e(vh,Ego),e(vh,HI),e(HI,Cgo),e(vh,wgo),e(k,Ago),e(k,Ns),e(Ns,Mle),e(Mle,Lgo),e(Ns,ygo),e(Ns,UI),e(UI,xgo),e(Ns,$go),e(Ns,JI),e(JI,kgo),e(Ns,Sgo),e(k,Rgo),e(k,qs),e(qs,Ele),e(Ele,Pgo),e(qs,Bgo),e(qs,YI),e(YI,Igo),e(qs,Ngo),e(qs,KI),e(KI,qgo),e(qs,jgo),e(k,Dgo),e(k,Fh),e(Fh,Cle),e(Cle,Ggo),e(Fh,Ogo),e(Fh,ZI),e(ZI,Vgo),e(Fh,Xgo),e(k,zgo),e(k,Th),e(Th,wle),e(wle,Qgo),e(Th,Wgo),e(Th,eN),e(eN,Hgo),e(Th,Ugo),e(k,Jgo),e(k,Mh),e(Mh,Ale),e(Ale,Ygo),e(Mh,Kgo),e(Mh,oN),e(oN,Zgo),e(Mh,eho),e(k,oho),e(k,js),e(js,Lle),e(Lle,rho),e(js,tho),e(js,rN),e(rN,aho),e(js,nho),e(js,tN),e(tN,sho),e(js,lho),e(k,iho),e(k,Eh),e(Eh,yle),e(yle,dho),e(Eh,cho),e(Eh,aN),e(aN,fho),e(Eh,mho),e(k,gho),e(k,Ch),e(Ch,xle),e(xle,hho),e(Ch,pho),e(Ch,nN),e(nN,_ho),e(Ch,uho),e(k,bho),e(k,Ds),e(Ds,$le),e($le,vho),e(Ds,Fho),e(Ds,sN),e(sN,Tho),e(Ds,Mho),e(Ds,lN),e(lN,Eho),e(Ds,Cho),e(k,who),e(k,Gs),e(Gs,kle),e(kle,Aho),e(Gs,Lho),e(Gs,iN),e(iN,yho),e(Gs,xho),e(Gs,dN),e(dN,$ho),e(Gs,kho),e(k,Sho),e(k,Os),e(Os,Sle),e(Sle,Rho),e(Os,Pho),e(Os,cN),e(cN,Bho),e(Os,Iho),e(Os,fN),e(fN,Nho),e(Os,qho),e(k,jho),e(k,Vs),e(Vs,Rle),e(Rle,Dho),e(Vs,Gho),e(Vs,mN),e(mN,Oho),e(Vs,Vho),e(Vs,gN),e(gN,Xho),e(Vs,zho),e(Lr,Qho),M(wh,Lr,null),e(Ao,Who),e(Ao,Ah),M(W6,Ah,null),e(Ah,Hho),e(Ah,Ple),e(Ple,Uho),b(f,pOe,u),b(f,Ri,u),e(Ri,Lh),e(Lh,Ble),M(H6,Ble,null),e(Ri,Jho),e(Ri,Ile),e(Ile,Yho),b(f,_Oe,u),b(f,Lo,u),M(U6,Lo,null),e(Lo,Kho),e(Lo,J6),e(J6,Zho),e(J6,hN),e(hN,epo),e(J6,opo),e(Lo,rpo),e(Lo,Y6),e(Y6,tpo),e(Y6,Nle),e(Nle,apo),e(Y6,npo),e(Lo,spo),e(Lo,He),M(K6,He,null),e(He,lpo),e(He,qle),e(qle,ipo),e(He,dpo),e(He,Sa),e(Sa,cpo),e(Sa,jle),e(jle,fpo),e(Sa,mpo),e(Sa,Dle),e(Dle,gpo),e(Sa,hpo),e(Sa,Gle),e(Gle,ppo),e(Sa,_po),e(He,upo),e(He,Y),e(Y,yh),e(yh,Ole),e(Ole,bpo),e(yh,vpo),e(yh,pN),e(pN,Fpo),e(yh,Tpo),e(Y,Mpo),e(Y,xh),e(xh,Vle),e(Vle,Epo),e(xh,Cpo),e(xh,_N),e(_N,wpo),e(xh,Apo),e(Y,Lpo),e(Y,$h),e($h,Xle),e(Xle,ypo),e($h,xpo),e($h,uN),e(uN,$po),e($h,kpo),e(Y,Spo),e(Y,kh),e(kh,zle),e(zle,Rpo),e(kh,Ppo),e(kh,bN),e(bN,Bpo),e(kh,Ipo),e(Y,Npo),e(Y,Sh),e(Sh,Qle),e(Qle,qpo),e(Sh,jpo),e(Sh,vN),e(vN,Dpo),e(Sh,Gpo),e(Y,Opo),e(Y,Rh),e(Rh,Wle),e(Wle,Vpo),e(Rh,Xpo),e(Rh,FN),e(FN,zpo),e(Rh,Qpo),e(Y,Wpo),e(Y,Ph),e(Ph,Hle),e(Hle,Hpo),e(Ph,Upo),e(Ph,TN),e(TN,Jpo),e(Ph,Ypo),e(Y,Kpo),e(Y,Bh),e(Bh,Ule),e(Ule,Zpo),e(Bh,e_o),e(Bh,MN),e(MN,o_o),e(Bh,r_o),e(Y,t_o),e(Y,Ih),e(Ih,Jle),e(Jle,a_o),e(Ih,n_o),e(Ih,EN),e(EN,s_o),e(Ih,l_o),e(Y,i_o),e(Y,Nh),e(Nh,Yle),e(Yle,d_o),e(Nh,c_o),e(Nh,CN),e(CN,f_o),e(Nh,m_o),e(Y,g_o),e(Y,qh),e(qh,Kle),e(Kle,h_o),e(qh,p_o),e(qh,wN),e(wN,__o),e(qh,u_o),e(Y,b_o),e(Y,jh),e(jh,Zle),e(Zle,v_o),e(jh,F_o),e(jh,AN),e(AN,T_o),e(jh,M_o),e(Y,E_o),e(Y,Dh),e(Dh,eie),e(eie,C_o),e(Dh,w_o),e(Dh,LN),e(LN,A_o),e(Dh,L_o),e(Y,y_o),e(Y,Gh),e(Gh,oie),e(oie,x_o),e(Gh,$_o),e(Gh,yN),e(yN,k_o),e(Gh,S_o),e(Y,R_o),e(Y,Oh),e(Oh,rie),e(rie,P_o),e(Oh,B_o),e(Oh,xN),e(xN,I_o),e(Oh,N_o),e(Y,q_o),e(Y,Vh),e(Vh,tie),e(tie,j_o),e(Vh,D_o),e(Vh,$N),e($N,G_o),e(Vh,O_o),e(Y,V_o),e(Y,Xh),e(Xh,aie),e(aie,X_o),e(Xh,z_o),e(Xh,kN),e(kN,Q_o),e(Xh,W_o),e(Y,H_o),e(Y,zh),e(zh,nie),e(nie,U_o),e(zh,J_o),e(zh,SN),e(SN,Y_o),e(zh,K_o),e(Y,Z_o),e(Y,Qh),e(Qh,sie),e(sie,euo),e(Qh,ouo),e(Qh,RN),e(RN,ruo),e(Qh,tuo),e(Y,auo),e(Y,Wh),e(Wh,lie),e(lie,nuo),e(Wh,suo),e(Wh,PN),e(PN,luo),e(Wh,iuo),e(Y,duo),e(Y,Hh),e(Hh,iie),e(iie,cuo),e(Hh,fuo),e(Hh,BN),e(BN,muo),e(Hh,guo),e(Y,huo),e(Y,Uh),e(Uh,die),e(die,puo),e(Uh,_uo),e(Uh,IN),e(IN,uuo),e(Uh,buo),e(Y,vuo),e(Y,Jh),e(Jh,cie),e(cie,Fuo),e(Jh,Tuo),e(Jh,NN),e(NN,Muo),e(Jh,Euo),e(Y,Cuo),e(Y,Yh),e(Yh,fie),e(fie,wuo),e(Yh,Auo),e(Yh,qN),e(qN,Luo),e(Yh,yuo),e(Y,xuo),e(Y,Kh),e(Kh,mie),e(mie,$uo),e(Kh,kuo),e(Kh,jN),e(jN,Suo),e(Kh,Ruo),e(Y,Puo),e(Y,Zh),e(Zh,gie),e(gie,Buo),e(Zh,Iuo),e(Zh,DN),e(DN,Nuo),e(Zh,quo),e(Y,juo),e(Y,ep),e(ep,hie),e(hie,Duo),e(ep,Guo),e(ep,GN),e(GN,Ouo),e(ep,Vuo),e(Y,Xuo),e(Y,op),e(op,pie),e(pie,zuo),e(op,Quo),e(op,ON),e(ON,Wuo),e(op,Huo),e(Y,Uuo),e(Y,rp),e(rp,_ie),e(_ie,Juo),e(rp,Yuo),e(rp,VN),e(VN,Kuo),e(rp,Zuo),e(Y,e7o),e(Y,tp),e(tp,uie),e(uie,o7o),e(tp,r7o),e(tp,XN),e(XN,t7o),e(tp,a7o),e(Y,n7o),e(Y,ap),e(ap,bie),e(bie,s7o),e(ap,l7o),e(ap,zN),e(zN,i7o),e(ap,d7o),e(Y,c7o),e(Y,np),e(np,vie),e(vie,f7o),e(np,m7o),e(np,QN),e(QN,g7o),e(np,h7o),e(He,p7o),M(sp,He,null),e(He,_7o),M(lp,He,null),e(Lo,u7o),e(Lo,ip),M(Z6,ip,null),e(ip,b7o),e(ip,Fie),e(Fie,v7o),b(f,uOe,u),b(f,Pi,u),e(Pi,dp),e(dp,Tie),M(eL,Tie,null),e(Pi,F7o),e(Pi,Mie),e(Mie,T7o),b(f,bOe,u),b(f,yo,u),M(oL,yo,null),e(yo,M7o),e(yo,rL),e(rL,E7o),e(rL,WN),e(WN,C7o),e(rL,w7o),e(yo,A7o),e(yo,tL),e(tL,L7o),e(tL,Eie),e(Eie,y7o),e(tL,x7o),e(yo,$7o),e(yo,Ue),M(aL,Ue,null),e(Ue,k7o),e(Ue,Cie),e(Cie,S7o),e(Ue,R7o),e(Ue,Bi),e(Bi,P7o),e(Bi,wie),e(wie,B7o),e(Bi,I7o),e(Bi,Aie),e(Aie,N7o),e(Bi,q7o),e(Ue,j7o),e(Ue,he),e(he,cp),e(cp,Lie),e(Lie,D7o),e(cp,G7o),e(cp,HN),e(HN,O7o),e(cp,V7o),e(he,X7o),e(he,fp),e(fp,yie),e(yie,z7o),e(fp,Q7o),e(fp,xie),e(xie,W7o),e(fp,H7o),e(he,U7o),e(he,mp),e(mp,$ie),e($ie,J7o),e(mp,Y7o),e(mp,UN),e(UN,K7o),e(mp,Z7o),e(he,e1o),e(he,gp),e(gp,kie),e(kie,o1o),e(gp,r1o),e(gp,JN),e(JN,t1o),e(gp,a1o),e(he,n1o),e(he,hp),e(hp,Sie),e(Sie,s1o),e(hp,l1o),e(hp,YN),e(YN,i1o),e(hp,d1o),e(he,c1o),e(he,pp),e(pp,Rie),e(Rie,f1o),e(pp,m1o),e(pp,KN),e(KN,g1o),e(pp,h1o),e(he,p1o),e(he,_p),e(_p,Pie),e(Pie,_1o),e(_p,u1o),e(_p,ZN),e(ZN,b1o),e(_p,v1o),e(he,F1o),e(he,up),e(up,Bie),e(Bie,T1o),e(up,M1o),e(up,eq),e(eq,E1o),e(up,C1o),e(he,w1o),e(he,bp),e(bp,Iie),e(Iie,A1o),e(bp,L1o),e(bp,oq),e(oq,y1o),e(bp,x1o),e(he,$1o),e(he,vp),e(vp,Nie),e(Nie,k1o),e(vp,S1o),e(vp,rq),e(rq,R1o),e(vp,P1o),e(he,B1o),e(he,Fp),e(Fp,qie),e(qie,I1o),e(Fp,N1o),e(Fp,tq),e(tq,q1o),e(Fp,j1o),e(he,D1o),e(he,Tp),e(Tp,jie),e(jie,G1o),e(Tp,O1o),e(Tp,aq),e(aq,V1o),e(Tp,X1o),e(he,z1o),e(he,Mp),e(Mp,Die),e(Die,Q1o),e(Mp,W1o),e(Mp,nq),e(nq,H1o),e(Mp,U1o),e(he,J1o),e(he,Ep),e(Ep,Gie),e(Gie,Y1o),e(Ep,K1o),e(Ep,sq),e(sq,Z1o),e(Ep,e2o),e(he,o2o),e(he,Cp),e(Cp,Oie),e(Oie,r2o),e(Cp,t2o),e(Cp,lq),e(lq,a2o),e(Cp,n2o),e(he,s2o),e(he,wp),e(wp,Vie),e(Vie,l2o),e(wp,i2o),e(wp,iq),e(iq,d2o),e(wp,c2o),e(he,f2o),e(he,Ap),e(Ap,Xie),e(Xie,m2o),e(Ap,g2o),e(Ap,dq),e(dq,h2o),e(Ap,p2o),e(Ue,_2o),M(Lp,Ue,null),e(Ue,u2o),M(yp,Ue,null),e(yo,b2o),e(yo,xp),M(nL,xp,null),e(xp,v2o),e(xp,zie),e(zie,F2o),b(f,vOe,u),b(f,Ii,u),e(Ii,$p),e($p,Qie),M(sL,Qie,null),e(Ii,T2o),e(Ii,Wie),e(Wie,M2o),b(f,FOe,u),b(f,xo,u),M(lL,xo,null),e(xo,E2o),e(xo,Ni),e(Ni,C2o),e(Ni,cq),e(cq,w2o),e(Ni,A2o),e(Ni,fq),e(fq,L2o),e(Ni,y2o),e(xo,x2o),e(xo,iL),e(iL,$2o),e(iL,Hie),e(Hie,k2o),e(iL,S2o),e(xo,R2o),e(xo,nt),M(dL,nt,null),e(nt,P2o),e(nt,Uie),e(Uie,B2o),e(nt,I2o),e(nt,qi),e(qi,N2o),e(qi,Jie),e(Jie,q2o),e(qi,j2o),e(qi,mq),e(mq,D2o),e(qi,G2o),e(nt,O2o),M(kp,nt,null),e(xo,V2o),e(xo,Je),M(cL,Je,null),e(Je,X2o),e(Je,Yie),e(Yie,z2o),e(Je,Q2o),e(Je,Ra),e(Ra,W2o),e(Ra,Kie),e(Kie,H2o),e(Ra,U2o),e(Ra,Zie),e(Zie,J2o),e(Ra,Y2o),e(Ra,ede),e(ede,K2o),e(Ra,Z2o),e(Je,ebo),e(Je,y),e(y,Sp),e(Sp,ode),e(ode,obo),e(Sp,rbo),e(Sp,gq),e(gq,tbo),e(Sp,abo),e(y,nbo),e(y,Rp),e(Rp,rde),e(rde,sbo),e(Rp,lbo),e(Rp,hq),e(hq,ibo),e(Rp,dbo),e(y,cbo),e(y,Pp),e(Pp,tde),e(tde,fbo),e(Pp,mbo),e(Pp,pq),e(pq,gbo),e(Pp,hbo),e(y,pbo),e(y,Bp),e(Bp,ade),e(ade,_bo),e(Bp,ubo),e(Bp,_q),e(_q,bbo),e(Bp,vbo),e(y,Fbo),e(y,Ip),e(Ip,nde),e(nde,Tbo),e(Ip,Mbo),e(Ip,uq),e(uq,Ebo),e(Ip,Cbo),e(y,wbo),e(y,Np),e(Np,sde),e(sde,Abo),e(Np,Lbo),e(Np,bq),e(bq,ybo),e(Np,xbo),e(y,$bo),e(y,qp),e(qp,lde),e(lde,kbo),e(qp,Sbo),e(qp,vq),e(vq,Rbo),e(qp,Pbo),e(y,Bbo),e(y,jp),e(jp,ide),e(ide,Ibo),e(jp,Nbo),e(jp,Fq),e(Fq,qbo),e(jp,jbo),e(y,Dbo),e(y,Dp),e(Dp,dde),e(dde,Gbo),e(Dp,Obo),e(Dp,Tq),e(Tq,Vbo),e(Dp,Xbo),e(y,zbo),e(y,Gp),e(Gp,cde),e(cde,Qbo),e(Gp,Wbo),e(Gp,Mq),e(Mq,Hbo),e(Gp,Ubo),e(y,Jbo),e(y,Op),e(Op,fde),e(fde,Ybo),e(Op,Kbo),e(Op,Eq),e(Eq,Zbo),e(Op,evo),e(y,ovo),e(y,Vp),e(Vp,mde),e(mde,rvo),e(Vp,tvo),e(Vp,Cq),e(Cq,avo),e(Vp,nvo),e(y,svo),e(y,Xp),e(Xp,gde),e(gde,lvo),e(Xp,ivo),e(Xp,wq),e(wq,dvo),e(Xp,cvo),e(y,fvo),e(y,zp),e(zp,hde),e(hde,mvo),e(zp,gvo),e(zp,Aq),e(Aq,hvo),e(zp,pvo),e(y,_vo),e(y,Qp),e(Qp,pde),e(pde,uvo),e(Qp,bvo),e(Qp,Lq),e(Lq,vvo),e(Qp,Fvo),e(y,Tvo),e(y,Wp),e(Wp,_de),e(_de,Mvo),e(Wp,Evo),e(Wp,yq),e(yq,Cvo),e(Wp,wvo),e(y,Avo),e(y,Hp),e(Hp,ude),e(ude,Lvo),e(Hp,yvo),e(Hp,xq),e(xq,xvo),e(Hp,$vo),e(y,kvo),e(y,Up),e(Up,bde),e(bde,Svo),e(Up,Rvo),e(Up,$q),e($q,Pvo),e(Up,Bvo),e(y,Ivo),e(y,Jp),e(Jp,vde),e(vde,Nvo),e(Jp,qvo),e(Jp,kq),e(kq,jvo),e(Jp,Dvo),e(y,Gvo),e(y,Yp),e(Yp,Fde),e(Fde,Ovo),e(Yp,Vvo),e(Yp,Sq),e(Sq,Xvo),e(Yp,zvo),e(y,Qvo),e(y,Kp),e(Kp,Tde),e(Tde,Wvo),e(Kp,Hvo),e(Kp,Rq),e(Rq,Uvo),e(Kp,Jvo),e(y,Yvo),e(y,Zp),e(Zp,Mde),e(Mde,Kvo),e(Zp,Zvo),e(Zp,Pq),e(Pq,eFo),e(Zp,oFo),e(y,rFo),e(y,e_),e(e_,Ede),e(Ede,tFo),e(e_,aFo),e(e_,Bq),e(Bq,nFo),e(e_,sFo),e(y,lFo),e(y,o_),e(o_,Cde),e(Cde,iFo),e(o_,dFo),e(o_,Iq),e(Iq,cFo),e(o_,fFo),e(y,mFo),e(y,r_),e(r_,wde),e(wde,gFo),e(r_,hFo),e(r_,Nq),e(Nq,pFo),e(r_,_Fo),e(y,uFo),e(y,t_),e(t_,Ade),e(Ade,bFo),e(t_,vFo),e(t_,qq),e(qq,FFo),e(t_,TFo),e(y,MFo),e(y,a_),e(a_,Lde),e(Lde,EFo),e(a_,CFo),e(a_,jq),e(jq,wFo),e(a_,AFo),e(y,LFo),e(y,n_),e(n_,yde),e(yde,yFo),e(n_,xFo),e(n_,Dq),e(Dq,$Fo),e(n_,kFo),e(y,SFo),e(y,s_),e(s_,xde),e(xde,RFo),e(s_,PFo),e(s_,Gq),e(Gq,BFo),e(s_,IFo),e(y,NFo),e(y,l_),e(l_,$de),e($de,qFo),e(l_,jFo),e(l_,Oq),e(Oq,DFo),e(l_,GFo),e(y,OFo),e(y,i_),e(i_,kde),e(kde,VFo),e(i_,XFo),e(i_,Vq),e(Vq,zFo),e(i_,QFo),e(y,WFo),e(y,d_),e(d_,Sde),e(Sde,HFo),e(d_,UFo),e(d_,Xq),e(Xq,JFo),e(d_,YFo),e(y,KFo),e(y,c_),e(c_,Rde),e(Rde,ZFo),e(c_,eTo),e(c_,zq),e(zq,oTo),e(c_,rTo),e(y,tTo),e(y,f_),e(f_,Pde),e(Pde,aTo),e(f_,nTo),e(f_,Qq),e(Qq,sTo),e(f_,lTo),e(y,iTo),e(y,Xs),e(Xs,Bde),e(Bde,dTo),e(Xs,cTo),e(Xs,Wq),e(Wq,fTo),e(Xs,mTo),e(Xs,Hq),e(Hq,gTo),e(Xs,hTo),e(y,pTo),e(y,m_),e(m_,Ide),e(Ide,_To),e(m_,uTo),e(m_,Uq),e(Uq,bTo),e(m_,vTo),e(y,FTo),e(y,g_),e(g_,Nde),e(Nde,TTo),e(g_,MTo),e(g_,Jq),e(Jq,ETo),e(g_,CTo),e(y,wTo),e(y,h_),e(h_,qde),e(qde,ATo),e(h_,LTo),e(h_,Yq),e(Yq,yTo),e(h_,xTo),e(y,$To),e(y,p_),e(p_,jde),e(jde,kTo),e(p_,STo),e(p_,Kq),e(Kq,RTo),e(p_,PTo),e(y,BTo),e(y,__),e(__,Dde),e(Dde,ITo),e(__,NTo),e(__,Zq),e(Zq,qTo),e(__,jTo),e(y,DTo),e(y,u_),e(u_,Gde),e(Gde,GTo),e(u_,OTo),e(u_,ej),e(ej,VTo),e(u_,XTo),e(y,zTo),e(y,b_),e(b_,Ode),e(Ode,QTo),e(b_,WTo),e(b_,oj),e(oj,HTo),e(b_,UTo),e(y,JTo),e(y,v_),e(v_,Vde),e(Vde,YTo),e(v_,KTo),e(v_,rj),e(rj,ZTo),e(v_,e9o),e(y,o9o),e(y,F_),e(F_,Xde),e(Xde,r9o),e(F_,t9o),e(F_,tj),e(tj,a9o),e(F_,n9o),e(y,s9o),e(y,T_),e(T_,zde),e(zde,l9o),e(T_,i9o),e(T_,aj),e(aj,d9o),e(T_,c9o),e(y,f9o),e(y,M_),e(M_,Qde),e(Qde,m9o),e(M_,g9o),e(M_,nj),e(nj,h9o),e(M_,p9o),e(y,_9o),e(y,E_),e(E_,Wde),e(Wde,u9o),e(E_,b9o),e(E_,sj),e(sj,v9o),e(E_,F9o),e(y,T9o),e(y,C_),e(C_,Hde),e(Hde,M9o),e(C_,E9o),e(C_,lj),e(lj,C9o),e(C_,w9o),e(y,A9o),e(y,w_),e(w_,Ude),e(Ude,L9o),e(w_,y9o),e(w_,ij),e(ij,x9o),e(w_,$9o),e(y,k9o),e(y,A_),e(A_,Jde),e(Jde,S9o),e(A_,R9o),e(A_,dj),e(dj,P9o),e(A_,B9o),e(y,I9o),e(y,L_),e(L_,Yde),e(Yde,N9o),e(L_,q9o),e(L_,cj),e(cj,j9o),e(L_,D9o),e(y,G9o),e(y,y_),e(y_,Kde),e(Kde,O9o),e(y_,V9o),e(y_,fj),e(fj,X9o),e(y_,z9o),e(y,Q9o),e(y,x_),e(x_,Zde),e(Zde,W9o),e(x_,H9o),e(x_,mj),e(mj,U9o),e(x_,J9o),e(y,Y9o),e(y,$_),e($_,ece),e(ece,K9o),e($_,Z9o),e($_,gj),e(gj,eMo),e($_,oMo),e(y,rMo),e(y,k_),e(k_,oce),e(oce,tMo),e(k_,aMo),e(k_,hj),e(hj,nMo),e(k_,sMo),e(y,lMo),e(y,S_),e(S_,rce),e(rce,iMo),e(S_,dMo),e(S_,pj),e(pj,cMo),e(S_,fMo),e(y,mMo),e(y,R_),e(R_,tce),e(tce,gMo),e(R_,hMo),e(R_,_j),e(_j,pMo),e(R_,_Mo),e(y,uMo),e(y,P_),e(P_,ace),e(ace,bMo),e(P_,vMo),e(P_,uj),e(uj,FMo),e(P_,TMo),e(y,MMo),e(y,B_),e(B_,nce),e(nce,EMo),e(B_,CMo),e(B_,bj),e(bj,wMo),e(B_,AMo),e(y,LMo),e(y,I_),e(I_,sce),e(sce,yMo),e(I_,xMo),e(I_,vj),e(vj,$Mo),e(I_,kMo),e(y,SMo),e(y,N_),e(N_,lce),e(lce,RMo),e(N_,PMo),e(N_,Fj),e(Fj,BMo),e(N_,IMo),e(y,NMo),e(y,q_),e(q_,ice),e(ice,qMo),e(q_,jMo),e(q_,Tj),e(Tj,DMo),e(q_,GMo),e(y,OMo),e(y,j_),e(j_,dce),e(dce,VMo),e(j_,XMo),e(j_,Mj),e(Mj,zMo),e(j_,QMo),e(y,WMo),e(y,D_),e(D_,cce),e(cce,HMo),e(D_,UMo),e(D_,Ej),e(Ej,JMo),e(D_,YMo),e(y,KMo),e(y,G_),e(G_,fce),e(fce,ZMo),e(G_,eEo),e(G_,Cj),e(Cj,oEo),e(G_,rEo),e(y,tEo),e(y,O_),e(O_,mce),e(mce,aEo),e(O_,nEo),e(O_,wj),e(wj,sEo),e(O_,lEo),e(y,iEo),e(y,V_),e(V_,gce),e(gce,dEo),e(V_,cEo),e(V_,Aj),e(Aj,fEo),e(V_,mEo),e(y,gEo),e(y,X_),e(X_,hce),e(hce,hEo),e(X_,pEo),e(X_,Lj),e(Lj,_Eo),e(X_,uEo),e(y,bEo),e(y,z_),e(z_,pce),e(pce,vEo),e(z_,FEo),e(z_,yj),e(yj,TEo),e(z_,MEo),e(y,EEo),e(y,Q_),e(Q_,_ce),e(_ce,CEo),e(Q_,wEo),e(Q_,xj),e(xj,AEo),e(Q_,LEo),e(y,yEo),e(y,W_),e(W_,uce),e(uce,xEo),e(W_,$Eo),e(W_,$j),e($j,kEo),e(W_,SEo),e(y,REo),e(y,H_),e(H_,bce),e(bce,PEo),e(H_,BEo),e(H_,kj),e(kj,IEo),e(H_,NEo),e(y,qEo),e(y,U_),e(U_,vce),e(vce,jEo),e(U_,DEo),e(U_,Sj),e(Sj,GEo),e(U_,OEo),e(y,VEo),e(y,J_),e(J_,Fce),e(Fce,XEo),e(J_,zEo),e(J_,Rj),e(Rj,QEo),e(J_,WEo),e(y,HEo),e(y,Y_),e(Y_,Tce),e(Tce,UEo),e(Y_,JEo),e(Y_,Pj),e(Pj,YEo),e(Y_,KEo),e(y,ZEo),e(y,K_),e(K_,Mce),e(Mce,e4o),e(K_,o4o),e(K_,Bj),e(Bj,r4o),e(K_,t4o),e(y,a4o),e(y,Z_),e(Z_,Ece),e(Ece,n4o),e(Z_,s4o),e(Z_,Ij),e(Ij,l4o),e(Z_,i4o),e(y,d4o),e(y,eu),e(eu,Cce),e(Cce,c4o),e(eu,f4o),e(eu,Nj),e(Nj,m4o),e(eu,g4o),e(y,h4o),e(y,ou),e(ou,wce),e(wce,p4o),e(ou,_4o),e(ou,qj),e(qj,u4o),e(ou,b4o),e(y,v4o),e(y,ru),e(ru,Ace),e(Ace,F4o),e(ru,T4o),e(ru,jj),e(jj,M4o),e(ru,E4o),e(y,C4o),e(y,tu),e(tu,Lce),e(Lce,w4o),e(tu,A4o),e(tu,Dj),e(Dj,L4o),e(tu,y4o),e(y,x4o),e(y,au),e(au,yce),e(yce,$4o),e(au,k4o),e(au,Gj),e(Gj,S4o),e(au,R4o),e(y,P4o),e(y,nu),e(nu,xce),e(xce,B4o),e(nu,I4o),e(nu,Oj),e(Oj,N4o),e(nu,q4o),e(y,j4o),e(y,su),e(su,$ce),e($ce,D4o),e(su,G4o),e(su,Vj),e(Vj,O4o),e(su,V4o),e(y,X4o),e(y,lu),e(lu,kce),e(kce,z4o),e(lu,Q4o),e(lu,Xj),e(Xj,W4o),e(lu,H4o),e(y,U4o),e(y,iu),e(iu,Sce),e(Sce,J4o),e(iu,Y4o),e(iu,zj),e(zj,K4o),e(iu,Z4o),e(y,eCo),e(y,du),e(du,Rce),e(Rce,oCo),e(du,rCo),e(du,Qj),e(Qj,tCo),e(du,aCo),e(y,nCo),e(y,cu),e(cu,Pce),e(Pce,sCo),e(cu,lCo),e(cu,Wj),e(Wj,iCo),e(cu,dCo),e(y,cCo),e(y,fu),e(fu,Bce),e(Bce,fCo),e(fu,mCo),e(fu,Hj),e(Hj,gCo),e(fu,hCo),e(y,pCo),e(y,mu),e(mu,Ice),e(Ice,_Co),e(mu,uCo),e(mu,Uj),e(Uj,bCo),e(mu,vCo),e(y,FCo),e(y,gu),e(gu,Nce),e(Nce,TCo),e(gu,MCo),e(gu,Jj),e(Jj,ECo),e(gu,CCo),e(y,wCo),e(y,hu),e(hu,qce),e(qce,ACo),e(hu,LCo),e(hu,Yj),e(Yj,yCo),e(hu,xCo),e(y,$Co),e(y,pu),e(pu,jce),e(jce,kCo),e(pu,SCo),e(pu,Kj),e(Kj,RCo),e(pu,PCo),e(y,BCo),e(y,_u),e(_u,Dce),e(Dce,ICo),e(_u,NCo),e(_u,Zj),e(Zj,qCo),e(_u,jCo),e(y,DCo),e(y,uu),e(uu,Gce),e(Gce,GCo),e(uu,OCo),e(uu,eD),e(eD,VCo),e(uu,XCo),e(y,zCo),e(y,bu),e(bu,Oce),e(Oce,QCo),e(bu,WCo),e(bu,oD),e(oD,HCo),e(bu,UCo),e(y,JCo),e(y,vu),e(vu,Vce),e(Vce,YCo),e(vu,KCo),e(vu,rD),e(rD,ZCo),e(vu,e5o),e(y,o5o),e(y,Fu),e(Fu,Xce),e(Xce,r5o),e(Fu,t5o),e(Fu,tD),e(tD,a5o),e(Fu,n5o),e(y,s5o),e(y,Tu),e(Tu,zce),e(zce,l5o),e(Tu,i5o),e(Tu,aD),e(aD,d5o),e(Tu,c5o),e(y,f5o),e(y,Mu),e(Mu,Qce),e(Qce,m5o),e(Mu,g5o),e(Mu,nD),e(nD,h5o),e(Mu,p5o),e(y,_5o),e(y,Eu),e(Eu,Wce),e(Wce,u5o),e(Eu,b5o),e(Eu,sD),e(sD,v5o),e(Eu,F5o),e(y,T5o),e(y,Cu),e(Cu,Hce),e(Hce,M5o),e(Cu,E5o),e(Cu,lD),e(lD,C5o),e(Cu,w5o),e(y,A5o),e(y,wu),e(wu,Uce),e(Uce,L5o),e(wu,y5o),e(wu,iD),e(iD,x5o),e(wu,$5o),e(y,k5o),e(y,Au),e(Au,Jce),e(Jce,S5o),e(Au,R5o),e(Au,dD),e(dD,P5o),e(Au,B5o),e(y,I5o),e(y,Lu),e(Lu,Yce),e(Yce,N5o),e(Lu,q5o),e(Lu,cD),e(cD,j5o),e(Lu,D5o),e(y,G5o),e(y,yu),e(yu,Kce),e(Kce,O5o),e(yu,V5o),e(yu,fD),e(fD,X5o),e(yu,z5o),e(y,Q5o),e(y,xu),e(xu,Zce),e(Zce,W5o),e(xu,H5o),e(xu,mD),e(mD,U5o),e(xu,J5o),e(y,Y5o),e(y,$u),e($u,efe),e(efe,K5o),e($u,Z5o),e($u,gD),e(gD,e3o),e($u,o3o),e(Je,r3o),e(Je,ku),e(ku,t3o),e(ku,ofe),e(ofe,a3o),e(ku,n3o),e(ku,rfe),e(rfe,s3o),e(Je,l3o),M(Su,Je,null),b(f,TOe,u),b(f,ji,u),e(ji,Ru),e(Ru,tfe),M(fL,tfe,null),e(ji,i3o),e(ji,afe),e(afe,d3o),b(f,MOe,u),b(f,$o,u),M(mL,$o,null),e($o,c3o),e($o,Di),e(Di,f3o),e(Di,hD),e(hD,m3o),e(Di,g3o),e(Di,pD),e(pD,h3o),e(Di,p3o),e($o,_3o),e($o,gL),e(gL,u3o),e(gL,nfe),e(nfe,b3o),e(gL,v3o),e($o,F3o),e($o,st),M(hL,st,null),e(st,T3o),e(st,sfe),e(sfe,M3o),e(st,E3o),e(st,Gi),e(Gi,C3o),e(Gi,lfe),e(lfe,w3o),e(Gi,A3o),e(Gi,_D),e(_D,L3o),e(Gi,y3o),e(st,x3o),M(Pu,st,null),e($o,$3o),e($o,Ye),M(pL,Ye,null),e(Ye,k3o),e(Ye,ife),e(ife,S3o),e(Ye,R3o),e(Ye,Pa),e(Pa,P3o),e(Pa,dfe),e(dfe,B3o),e(Pa,I3o),e(Pa,cfe),e(cfe,N3o),e(Pa,q3o),e(Pa,ffe),e(ffe,j3o),e(Pa,D3o),e(Ye,G3o),e(Ye,G),e(G,Bu),e(Bu,mfe),e(mfe,O3o),e(Bu,V3o),e(Bu,uD),e(uD,X3o),e(Bu,z3o),e(G,Q3o),e(G,Iu),e(Iu,gfe),e(gfe,W3o),e(Iu,H3o),e(Iu,bD),e(bD,U3o),e(Iu,J3o),e(G,Y3o),e(G,Nu),e(Nu,hfe),e(hfe,K3o),e(Nu,Z3o),e(Nu,vD),e(vD,e0o),e(Nu,o0o),e(G,r0o),e(G,qu),e(qu,pfe),e(pfe,t0o),e(qu,a0o),e(qu,FD),e(FD,n0o),e(qu,s0o),e(G,l0o),e(G,ju),e(ju,_fe),e(_fe,i0o),e(ju,d0o),e(ju,TD),e(TD,c0o),e(ju,f0o),e(G,m0o),e(G,Du),e(Du,ufe),e(ufe,g0o),e(Du,h0o),e(Du,MD),e(MD,p0o),e(Du,_0o),e(G,u0o),e(G,Gu),e(Gu,bfe),e(bfe,b0o),e(Gu,v0o),e(Gu,ED),e(ED,F0o),e(Gu,T0o),e(G,M0o),e(G,Ou),e(Ou,vfe),e(vfe,E0o),e(Ou,C0o),e(Ou,CD),e(CD,w0o),e(Ou,A0o),e(G,L0o),e(G,Vu),e(Vu,Ffe),e(Ffe,y0o),e(Vu,x0o),e(Vu,wD),e(wD,$0o),e(Vu,k0o),e(G,S0o),e(G,Xu),e(Xu,Tfe),e(Tfe,R0o),e(Xu,P0o),e(Xu,AD),e(AD,B0o),e(Xu,I0o),e(G,N0o),e(G,zu),e(zu,Mfe),e(Mfe,q0o),e(zu,j0o),e(zu,LD),e(LD,D0o),e(zu,G0o),e(G,O0o),e(G,Qu),e(Qu,Efe),e(Efe,V0o),e(Qu,X0o),e(Qu,yD),e(yD,z0o),e(Qu,Q0o),e(G,W0o),e(G,Wu),e(Wu,Cfe),e(Cfe,H0o),e(Wu,U0o),e(Wu,xD),e(xD,J0o),e(Wu,Y0o),e(G,K0o),e(G,Hu),e(Hu,wfe),e(wfe,Z0o),e(Hu,ewo),e(Hu,$D),e($D,owo),e(Hu,rwo),e(G,two),e(G,Uu),e(Uu,Afe),e(Afe,awo),e(Uu,nwo),e(Uu,kD),e(kD,swo),e(Uu,lwo),e(G,iwo),e(G,Ju),e(Ju,Lfe),e(Lfe,dwo),e(Ju,cwo),e(Ju,SD),e(SD,fwo),e(Ju,mwo),e(G,gwo),e(G,Yu),e(Yu,yfe),e(yfe,hwo),e(Yu,pwo),e(Yu,RD),e(RD,_wo),e(Yu,uwo),e(G,bwo),e(G,Ku),e(Ku,xfe),e(xfe,vwo),e(Ku,Fwo),e(Ku,PD),e(PD,Two),e(Ku,Mwo),e(G,Ewo),e(G,Zu),e(Zu,$fe),e($fe,Cwo),e(Zu,wwo),e(Zu,BD),e(BD,Awo),e(Zu,Lwo),e(G,ywo),e(G,e7),e(e7,kfe),e(kfe,xwo),e(e7,$wo),e(e7,ID),e(ID,kwo),e(e7,Swo),e(G,Rwo),e(G,o7),e(o7,Sfe),e(Sfe,Pwo),e(o7,Bwo),e(o7,ND),e(ND,Iwo),e(o7,Nwo),e(G,qwo),e(G,r7),e(r7,Rfe),e(Rfe,jwo),e(r7,Dwo),e(r7,qD),e(qD,Gwo),e(r7,Owo),e(G,Vwo),e(G,t7),e(t7,Pfe),e(Pfe,Xwo),e(t7,zwo),e(t7,jD),e(jD,Qwo),e(t7,Wwo),e(G,Hwo),e(G,a7),e(a7,Bfe),e(Bfe,Uwo),e(a7,Jwo),e(a7,DD),e(DD,Ywo),e(a7,Kwo),e(G,Zwo),e(G,n7),e(n7,Ife),e(Ife,eAo),e(n7,oAo),e(n7,GD),e(GD,rAo),e(n7,tAo),e(G,aAo),e(G,s7),e(s7,Nfe),e(Nfe,nAo),e(s7,sAo),e(s7,OD),e(OD,lAo),e(s7,iAo),e(G,dAo),e(G,l7),e(l7,qfe),e(qfe,cAo),e(l7,fAo),e(l7,VD),e(VD,mAo),e(l7,gAo),e(G,hAo),e(G,i7),e(i7,jfe),e(jfe,pAo),e(i7,_Ao),e(i7,XD),e(XD,uAo),e(i7,bAo),e(G,vAo),e(G,d7),e(d7,Dfe),e(Dfe,FAo),e(d7,TAo),e(d7,zD),e(zD,MAo),e(d7,EAo),e(G,CAo),e(G,c7),e(c7,Gfe),e(Gfe,wAo),e(c7,AAo),e(c7,QD),e(QD,LAo),e(c7,yAo),e(G,xAo),e(G,f7),e(f7,Ofe),e(Ofe,$Ao),e(f7,kAo),e(f7,WD),e(WD,SAo),e(f7,RAo),e(G,PAo),e(G,m7),e(m7,Vfe),e(Vfe,BAo),e(m7,IAo),e(m7,HD),e(HD,NAo),e(m7,qAo),e(G,jAo),e(G,g7),e(g7,Xfe),e(Xfe,DAo),e(g7,GAo),e(g7,UD),e(UD,OAo),e(g7,VAo),e(G,XAo),e(G,h7),e(h7,zfe),e(zfe,zAo),e(h7,QAo),e(h7,JD),e(JD,WAo),e(h7,HAo),e(G,UAo),e(G,p7),e(p7,Qfe),e(Qfe,JAo),e(p7,YAo),e(p7,YD),e(YD,KAo),e(p7,ZAo),e(G,e6o),e(G,_7),e(_7,Wfe),e(Wfe,o6o),e(_7,r6o),e(_7,KD),e(KD,t6o),e(_7,a6o),e(G,n6o),e(G,u7),e(u7,Hfe),e(Hfe,s6o),e(u7,l6o),e(u7,ZD),e(ZD,i6o),e(u7,d6o),e(G,c6o),e(G,b7),e(b7,Ufe),e(Ufe,f6o),e(b7,m6o),e(b7,eG),e(eG,g6o),e(b7,h6o),e(G,p6o),e(G,v7),e(v7,Jfe),e(Jfe,_6o),e(v7,u6o),e(v7,oG),e(oG,b6o),e(v7,v6o),e(G,F6o),e(G,F7),e(F7,Yfe),e(Yfe,T6o),e(F7,M6o),e(F7,rG),e(rG,E6o),e(F7,C6o),e(G,w6o),e(G,T7),e(T7,Kfe),e(Kfe,A6o),e(T7,L6o),e(T7,tG),e(tG,y6o),e(T7,x6o),e(G,$6o),e(G,M7),e(M7,Zfe),e(Zfe,k6o),e(M7,S6o),e(M7,aG),e(aG,R6o),e(M7,P6o),e(G,B6o),e(G,E7),e(E7,eme),e(eme,I6o),e(E7,N6o),e(E7,nG),e(nG,q6o),e(E7,j6o),e(G,D6o),e(G,C7),e(C7,ome),e(ome,G6o),e(C7,O6o),e(C7,sG),e(sG,V6o),e(C7,X6o),e(Ye,z6o),e(Ye,w7),e(w7,Q6o),e(w7,rme),e(rme,W6o),e(w7,H6o),e(w7,tme),e(tme,U6o),e(Ye,J6o),M(A7,Ye,null),b(f,EOe,u),b(f,Oi,u),e(Oi,L7),e(L7,ame),M(_L,ame,null),e(Oi,Y6o),e(Oi,nme),e(nme,K6o),b(f,COe,u),b(f,ko,u),M(uL,ko,null),e(ko,Z6o),e(ko,Vi),e(Vi,eLo),e(Vi,lG),e(lG,oLo),e(Vi,rLo),e(Vi,iG),e(iG,tLo),e(Vi,aLo),e(ko,nLo),e(ko,bL),e(bL,sLo),e(bL,sme),e(sme,lLo),e(bL,iLo),e(ko,dLo),e(ko,lt),M(vL,lt,null),e(lt,cLo),e(lt,lme),e(lme,fLo),e(lt,mLo),e(lt,Xi),e(Xi,gLo),e(Xi,ime),e(ime,hLo),e(Xi,pLo),e(Xi,dG),e(dG,_Lo),e(Xi,uLo),e(lt,bLo),M(y7,lt,null),e(ko,vLo),e(ko,Ke),M(FL,Ke,null),e(Ke,FLo),e(Ke,dme),e(dme,TLo),e(Ke,MLo),e(Ke,Ba),e(Ba,ELo),e(Ba,cme),e(cme,CLo),e(Ba,wLo),e(Ba,fme),e(fme,ALo),e(Ba,LLo),e(Ba,mme),e(mme,yLo),e(Ba,xLo),e(Ke,$Lo),e(Ke,z),e(z,x7),e(x7,gme),e(gme,kLo),e(x7,SLo),e(x7,cG),e(cG,RLo),e(x7,PLo),e(z,BLo),e(z,$7),e($7,hme),e(hme,ILo),e($7,NLo),e($7,fG),e(fG,qLo),e($7,jLo),e(z,DLo),e(z,k7),e(k7,pme),e(pme,GLo),e(k7,OLo),e(k7,mG),e(mG,VLo),e(k7,XLo),e(z,zLo),e(z,S7),e(S7,_me),e(_me,QLo),e(S7,WLo),e(S7,gG),e(gG,HLo),e(S7,ULo),e(z,JLo),e(z,R7),e(R7,ume),e(ume,YLo),e(R7,KLo),e(R7,hG),e(hG,ZLo),e(R7,eyo),e(z,oyo),e(z,P7),e(P7,bme),e(bme,ryo),e(P7,tyo),e(P7,pG),e(pG,ayo),e(P7,nyo),e(z,syo),e(z,B7),e(B7,vme),e(vme,lyo),e(B7,iyo),e(B7,_G),e(_G,dyo),e(B7,cyo),e(z,fyo),e(z,I7),e(I7,Fme),e(Fme,myo),e(I7,gyo),e(I7,uG),e(uG,hyo),e(I7,pyo),e(z,_yo),e(z,N7),e(N7,Tme),e(Tme,uyo),e(N7,byo),e(N7,bG),e(bG,vyo),e(N7,Fyo),e(z,Tyo),e(z,q7),e(q7,Mme),e(Mme,Myo),e(q7,Eyo),e(q7,vG),e(vG,Cyo),e(q7,wyo),e(z,Ayo),e(z,j7),e(j7,Eme),e(Eme,Lyo),e(j7,yyo),e(j7,FG),e(FG,xyo),e(j7,$yo),e(z,kyo),e(z,D7),e(D7,Cme),e(Cme,Syo),e(D7,Ryo),e(D7,TG),e(TG,Pyo),e(D7,Byo),e(z,Iyo),e(z,G7),e(G7,wme),e(wme,Nyo),e(G7,qyo),e(G7,MG),e(MG,jyo),e(G7,Dyo),e(z,Gyo),e(z,O7),e(O7,Ame),e(Ame,Oyo),e(O7,Vyo),e(O7,EG),e(EG,Xyo),e(O7,zyo),e(z,Qyo),e(z,V7),e(V7,Lme),e(Lme,Wyo),e(V7,Hyo),e(V7,CG),e(CG,Uyo),e(V7,Jyo),e(z,Yyo),e(z,X7),e(X7,yme),e(yme,Kyo),e(X7,Zyo),e(X7,wG),e(wG,e8o),e(X7,o8o),e(z,r8o),e(z,z7),e(z7,xme),e(xme,t8o),e(z7,a8o),e(z7,AG),e(AG,n8o),e(z7,s8o),e(z,l8o),e(z,Q7),e(Q7,$me),e($me,i8o),e(Q7,d8o),e(Q7,LG),e(LG,c8o),e(Q7,f8o),e(z,m8o),e(z,W7),e(W7,kme),e(kme,g8o),e(W7,h8o),e(W7,yG),e(yG,p8o),e(W7,_8o),e(z,u8o),e(z,H7),e(H7,Sme),e(Sme,b8o),e(H7,v8o),e(H7,xG),e(xG,F8o),e(H7,T8o),e(z,M8o),e(z,U7),e(U7,Rme),e(Rme,E8o),e(U7,C8o),e(U7,$G),e($G,w8o),e(U7,A8o),e(z,L8o),e(z,J7),e(J7,Pme),e(Pme,y8o),e(J7,x8o),e(J7,kG),e(kG,$8o),e(J7,k8o),e(z,S8o),e(z,Y7),e(Y7,Bme),e(Bme,R8o),e(Y7,P8o),e(Y7,SG),e(SG,B8o),e(Y7,I8o),e(z,N8o),e(z,K7),e(K7,Ime),e(Ime,q8o),e(K7,j8o),e(K7,RG),e(RG,D8o),e(K7,G8o),e(z,O8o),e(z,Z7),e(Z7,Nme),e(Nme,V8o),e(Z7,X8o),e(Z7,PG),e(PG,z8o),e(Z7,Q8o),e(z,W8o),e(z,e1),e(e1,qme),e(qme,H8o),e(e1,U8o),e(e1,BG),e(BG,J8o),e(e1,Y8o),e(z,K8o),e(z,o1),e(o1,jme),e(jme,Z8o),e(o1,exo),e(o1,IG),e(IG,oxo),e(o1,rxo),e(z,txo),e(z,r1),e(r1,Dme),e(Dme,axo),e(r1,nxo),e(r1,NG),e(NG,sxo),e(r1,lxo),e(z,ixo),e(z,t1),e(t1,Gme),e(Gme,dxo),e(t1,cxo),e(t1,qG),e(qG,fxo),e(t1,mxo),e(z,gxo),e(z,a1),e(a1,Ome),e(Ome,hxo),e(a1,pxo),e(a1,jG),e(jG,_xo),e(a1,uxo),e(z,bxo),e(z,n1),e(n1,Vme),e(Vme,vxo),e(n1,Fxo),e(n1,DG),e(DG,Txo),e(n1,Mxo),e(z,Exo),e(z,s1),e(s1,Xme),e(Xme,Cxo),e(s1,wxo),e(s1,GG),e(GG,Axo),e(s1,Lxo),e(z,yxo),e(z,l1),e(l1,zme),e(zme,xxo),e(l1,$xo),e(l1,OG),e(OG,kxo),e(l1,Sxo),e(z,Rxo),e(z,i1),e(i1,Qme),e(Qme,Pxo),e(i1,Bxo),e(i1,VG),e(VG,Ixo),e(i1,Nxo),e(z,qxo),e(z,d1),e(d1,Wme),e(Wme,jxo),e(d1,Dxo),e(d1,XG),e(XG,Gxo),e(d1,Oxo),e(z,Vxo),e(z,c1),e(c1,Hme),e(Hme,Xxo),e(c1,zxo),e(c1,zG),e(zG,Qxo),e(c1,Wxo),e(z,Hxo),e(z,f1),e(f1,Ume),e(Ume,Uxo),e(f1,Jxo),e(f1,QG),e(QG,Yxo),e(f1,Kxo),e(z,Zxo),e(z,m1),e(m1,Jme),e(Jme,e$o),e(m1,o$o),e(m1,WG),e(WG,r$o),e(m1,t$o),e(z,a$o),e(z,g1),e(g1,Yme),e(Yme,n$o),e(g1,s$o),e(g1,HG),e(HG,l$o),e(g1,i$o),e(Ke,d$o),e(Ke,h1),e(h1,c$o),e(h1,Kme),e(Kme,f$o),e(h1,m$o),e(h1,Zme),e(Zme,g$o),e(Ke,h$o),M(p1,Ke,null),b(f,wOe,u),b(f,zi,u),e(zi,_1),e(_1,ege),M(TL,ege,null),e(zi,p$o),e(zi,oge),e(oge,_$o),b(f,AOe,u),b(f,So,u),M(ML,So,null),e(So,u$o),e(So,Qi),e(Qi,b$o),e(Qi,UG),e(UG,v$o),e(Qi,F$o),e(Qi,JG),e(JG,T$o),e(Qi,M$o),e(So,E$o),e(So,EL),e(EL,C$o),e(EL,rge),e(rge,w$o),e(EL,A$o),e(So,L$o),e(So,it),M(CL,it,null),e(it,y$o),e(it,tge),e(tge,x$o),e(it,$$o),e(it,Wi),e(Wi,k$o),e(Wi,age),e(age,S$o),e(Wi,R$o),e(Wi,YG),e(YG,P$o),e(Wi,B$o),e(it,I$o),M(u1,it,null),e(So,N$o),e(So,Ze),M(wL,Ze,null),e(Ze,q$o),e(Ze,nge),e(nge,j$o),e(Ze,D$o),e(Ze,Ia),e(Ia,G$o),e(Ia,sge),e(sge,O$o),e(Ia,V$o),e(Ia,lge),e(lge,X$o),e(Ia,z$o),e(Ia,ige),e(ige,Q$o),e(Ia,W$o),e(Ze,H$o),e(Ze,W),e(W,b1),e(b1,dge),e(dge,U$o),e(b1,J$o),e(b1,KG),e(KG,Y$o),e(b1,K$o),e(W,Z$o),e(W,v1),e(v1,cge),e(cge,eko),e(v1,oko),e(v1,ZG),e(ZG,rko),e(v1,tko),e(W,ako),e(W,F1),e(F1,fge),e(fge,nko),e(F1,sko),e(F1,eO),e(eO,lko),e(F1,iko),e(W,dko),e(W,T1),e(T1,mge),e(mge,cko),e(T1,fko),e(T1,oO),e(oO,mko),e(T1,gko),e(W,hko),e(W,M1),e(M1,gge),e(gge,pko),e(M1,_ko),e(M1,rO),e(rO,uko),e(M1,bko),e(W,vko),e(W,E1),e(E1,hge),e(hge,Fko),e(E1,Tko),e(E1,tO),e(tO,Mko),e(E1,Eko),e(W,Cko),e(W,C1),e(C1,pge),e(pge,wko),e(C1,Ako),e(C1,aO),e(aO,Lko),e(C1,yko),e(W,xko),e(W,w1),e(w1,_ge),e(_ge,$ko),e(w1,kko),e(w1,nO),e(nO,Sko),e(w1,Rko),e(W,Pko),e(W,A1),e(A1,uge),e(uge,Bko),e(A1,Iko),e(A1,sO),e(sO,Nko),e(A1,qko),e(W,jko),e(W,L1),e(L1,bge),e(bge,Dko),e(L1,Gko),e(L1,lO),e(lO,Oko),e(L1,Vko),e(W,Xko),e(W,y1),e(y1,vge),e(vge,zko),e(y1,Qko),e(y1,iO),e(iO,Wko),e(y1,Hko),e(W,Uko),e(W,x1),e(x1,Fge),e(Fge,Jko),e(x1,Yko),e(x1,dO),e(dO,Kko),e(x1,Zko),e(W,eSo),e(W,$1),e($1,Tge),e(Tge,oSo),e($1,rSo),e($1,cO),e(cO,tSo),e($1,aSo),e(W,nSo),e(W,k1),e(k1,Mge),e(Mge,sSo),e(k1,lSo),e(k1,fO),e(fO,iSo),e(k1,dSo),e(W,cSo),e(W,S1),e(S1,Ege),e(Ege,fSo),e(S1,mSo),e(S1,mO),e(mO,gSo),e(S1,hSo),e(W,pSo),e(W,R1),e(R1,Cge),e(Cge,_So),e(R1,uSo),e(R1,gO),e(gO,bSo),e(R1,vSo),e(W,FSo),e(W,P1),e(P1,wge),e(wge,TSo),e(P1,MSo),e(P1,hO),e(hO,ESo),e(P1,CSo),e(W,wSo),e(W,B1),e(B1,Age),e(Age,ASo),e(B1,LSo),e(B1,pO),e(pO,ySo),e(B1,xSo),e(W,$So),e(W,I1),e(I1,Lge),e(Lge,kSo),e(I1,SSo),e(I1,_O),e(_O,RSo),e(I1,PSo),e(W,BSo),e(W,N1),e(N1,yge),e(yge,ISo),e(N1,NSo),e(N1,uO),e(uO,qSo),e(N1,jSo),e(W,DSo),e(W,q1),e(q1,xge),e(xge,GSo),e(q1,OSo),e(q1,bO),e(bO,VSo),e(q1,XSo),e(W,zSo),e(W,j1),e(j1,$ge),e($ge,QSo),e(j1,WSo),e(j1,vO),e(vO,HSo),e(j1,USo),e(W,JSo),e(W,D1),e(D1,kge),e(kge,YSo),e(D1,KSo),e(D1,FO),e(FO,ZSo),e(D1,eRo),e(W,oRo),e(W,G1),e(G1,Sge),e(Sge,rRo),e(G1,tRo),e(G1,TO),e(TO,aRo),e(G1,nRo),e(W,sRo),e(W,O1),e(O1,Rge),e(Rge,lRo),e(O1,iRo),e(O1,MO),e(MO,dRo),e(O1,cRo),e(W,fRo),e(W,V1),e(V1,Pge),e(Pge,mRo),e(V1,gRo),e(V1,EO),e(EO,hRo),e(V1,pRo),e(W,_Ro),e(W,X1),e(X1,Bge),e(Bge,uRo),e(X1,bRo),e(X1,CO),e(CO,vRo),e(X1,FRo),e(W,TRo),e(W,z1),e(z1,Ige),e(Ige,MRo),e(z1,ERo),e(z1,wO),e(wO,CRo),e(z1,wRo),e(W,ARo),e(W,Q1),e(Q1,Nge),e(Nge,LRo),e(Q1,yRo),e(Q1,AO),e(AO,xRo),e(Q1,$Ro),e(W,kRo),e(W,W1),e(W1,qge),e(qge,SRo),e(W1,RRo),e(W1,LO),e(LO,PRo),e(W1,BRo),e(W,IRo),e(W,H1),e(H1,jge),e(jge,NRo),e(H1,qRo),e(H1,yO),e(yO,jRo),e(H1,DRo),e(W,GRo),e(W,U1),e(U1,Dge),e(Dge,ORo),e(U1,VRo),e(U1,xO),e(xO,XRo),e(U1,zRo),e(W,QRo),e(W,J1),e(J1,Gge),e(Gge,WRo),e(J1,HRo),e(J1,Oge),e(Oge,URo),e(J1,JRo),e(W,YRo),e(W,Y1),e(Y1,Vge),e(Vge,KRo),e(Y1,ZRo),e(Y1,$O),e($O,ePo),e(Y1,oPo),e(W,rPo),e(W,K1),e(K1,Xge),e(Xge,tPo),e(K1,aPo),e(K1,kO),e(kO,nPo),e(K1,sPo),e(W,lPo),e(W,Z1),e(Z1,zge),e(zge,iPo),e(Z1,dPo),e(Z1,SO),e(SO,cPo),e(Z1,fPo),e(W,mPo),e(W,e2),e(e2,Qge),e(Qge,gPo),e(e2,hPo),e(e2,RO),e(RO,pPo),e(e2,_Po),e(Ze,uPo),e(Ze,o2),e(o2,bPo),e(o2,Wge),e(Wge,vPo),e(o2,FPo),e(o2,Hge),e(Hge,TPo),e(Ze,MPo),M(r2,Ze,null),b(f,LOe,u),b(f,Hi,u),e(Hi,t2),e(t2,Uge),M(AL,Uge,null),e(Hi,EPo),e(Hi,Jge),e(Jge,CPo),b(f,yOe,u),b(f,Ro,u),M(LL,Ro,null),e(Ro,wPo),e(Ro,Ui),e(Ui,APo),e(Ui,PO),e(PO,LPo),e(Ui,yPo),e(Ui,BO),e(BO,xPo),e(Ui,$Po),e(Ro,kPo),e(Ro,yL),e(yL,SPo),e(yL,Yge),e(Yge,RPo),e(yL,PPo),e(Ro,BPo),e(Ro,dt),M(xL,dt,null),e(dt,IPo),e(dt,Kge),e(Kge,NPo),e(dt,qPo),e(dt,Ji),e(Ji,jPo),e(Ji,Zge),e(Zge,DPo),e(Ji,GPo),e(Ji,IO),e(IO,OPo),e(Ji,VPo),e(dt,XPo),M(a2,dt,null),e(Ro,zPo),e(Ro,eo),M($L,eo,null),e(eo,QPo),e(eo,ehe),e(ehe,WPo),e(eo,HPo),e(eo,Na),e(Na,UPo),e(Na,ohe),e(ohe,JPo),e(Na,YPo),e(Na,rhe),e(rhe,KPo),e(Na,ZPo),e(Na,the),e(the,eBo),e(Na,oBo),e(eo,rBo),e(eo,pe),e(pe,n2),e(n2,ahe),e(ahe,tBo),e(n2,aBo),e(n2,NO),e(NO,nBo),e(n2,sBo),e(pe,lBo),e(pe,s2),e(s2,nhe),e(nhe,iBo),e(s2,dBo),e(s2,qO),e(qO,cBo),e(s2,fBo),e(pe,mBo),e(pe,l2),e(l2,she),e(she,gBo),e(l2,hBo),e(l2,jO),e(jO,pBo),e(l2,_Bo),e(pe,uBo),e(pe,i2),e(i2,lhe),e(lhe,bBo),e(i2,vBo),e(i2,DO),e(DO,FBo),e(i2,TBo),e(pe,MBo),e(pe,d2),e(d2,ihe),e(ihe,EBo),e(d2,CBo),e(d2,GO),e(GO,wBo),e(d2,ABo),e(pe,LBo),e(pe,c2),e(c2,dhe),e(dhe,yBo),e(c2,xBo),e(c2,OO),e(OO,$Bo),e(c2,kBo),e(pe,SBo),e(pe,f2),e(f2,che),e(che,RBo),e(f2,PBo),e(f2,VO),e(VO,BBo),e(f2,IBo),e(pe,NBo),e(pe,m2),e(m2,fhe),e(fhe,qBo),e(m2,jBo),e(m2,XO),e(XO,DBo),e(m2,GBo),e(pe,OBo),e(pe,g2),e(g2,mhe),e(mhe,VBo),e(g2,XBo),e(g2,zO),e(zO,zBo),e(g2,QBo),e(pe,WBo),e(pe,h2),e(h2,ghe),e(ghe,HBo),e(h2,UBo),e(h2,QO),e(QO,JBo),e(h2,YBo),e(pe,KBo),e(pe,p2),e(p2,hhe),e(hhe,ZBo),e(p2,eIo),e(p2,WO),e(WO,oIo),e(p2,rIo),e(pe,tIo),e(pe,_2),e(_2,phe),e(phe,aIo),e(_2,nIo),e(_2,HO),e(HO,sIo),e(_2,lIo),e(pe,iIo),e(pe,u2),e(u2,_he),e(_he,dIo),e(u2,cIo),e(u2,UO),e(UO,fIo),e(u2,mIo),e(pe,gIo),e(pe,b2),e(b2,uhe),e(uhe,hIo),e(b2,pIo),e(b2,JO),e(JO,_Io),e(b2,uIo),e(pe,bIo),e(pe,v2),e(v2,bhe),e(bhe,vIo),e(v2,FIo),e(v2,YO),e(YO,TIo),e(v2,MIo),e(pe,EIo),e(pe,F2),e(F2,vhe),e(vhe,CIo),e(F2,wIo),e(F2,KO),e(KO,AIo),e(F2,LIo),e(pe,yIo),e(pe,T2),e(T2,Fhe),e(Fhe,xIo),e(T2,$Io),e(T2,ZO),e(ZO,kIo),e(T2,SIo),e(eo,RIo),e(eo,M2),e(M2,PIo),e(M2,The),e(The,BIo),e(M2,IIo),e(M2,Mhe),e(Mhe,NIo),e(eo,qIo),M(E2,eo,null),b(f,xOe,u),b(f,Yi,u),e(Yi,C2),e(C2,Ehe),M(kL,Ehe,null),e(Yi,jIo),e(Yi,Che),e(Che,DIo),b(f,$Oe,u),b(f,Po,u),M(SL,Po,null),e(Po,GIo),e(Po,Ki),e(Ki,OIo),e(Ki,eV),e(eV,VIo),e(Ki,XIo),e(Ki,oV),e(oV,zIo),e(Ki,QIo),e(Po,WIo),e(Po,RL),e(RL,HIo),e(RL,whe),e(whe,UIo),e(RL,JIo),e(Po,YIo),e(Po,ct),M(PL,ct,null),e(ct,KIo),e(ct,Ahe),e(Ahe,ZIo),e(ct,eNo),e(ct,Zi),e(Zi,oNo),e(Zi,Lhe),e(Lhe,rNo),e(Zi,tNo),e(Zi,rV),e(rV,aNo),e(Zi,nNo),e(ct,sNo),M(w2,ct,null),e(Po,lNo),e(Po,oo),M(BL,oo,null),e(oo,iNo),e(oo,yhe),e(yhe,dNo),e(oo,cNo),e(oo,qa),e(qa,fNo),e(qa,xhe),e(xhe,mNo),e(qa,gNo),e(qa,$he),e($he,hNo),e(qa,pNo),e(qa,khe),e(khe,_No),e(qa,uNo),e(oo,bNo),e(oo,N),e(N,A2),e(A2,She),e(She,vNo),e(A2,FNo),e(A2,tV),e(tV,TNo),e(A2,MNo),e(N,ENo),e(N,L2),e(L2,Rhe),e(Rhe,CNo),e(L2,wNo),e(L2,aV),e(aV,ANo),e(L2,LNo),e(N,yNo),e(N,y2),e(y2,Phe),e(Phe,xNo),e(y2,$No),e(y2,nV),e(nV,kNo),e(y2,SNo),e(N,RNo),e(N,x2),e(x2,Bhe),e(Bhe,PNo),e(x2,BNo),e(x2,sV),e(sV,INo),e(x2,NNo),e(N,qNo),e(N,$2),e($2,Ihe),e(Ihe,jNo),e($2,DNo),e($2,lV),e(lV,GNo),e($2,ONo),e(N,VNo),e(N,k2),e(k2,Nhe),e(Nhe,XNo),e(k2,zNo),e(k2,iV),e(iV,QNo),e(k2,WNo),e(N,HNo),e(N,S2),e(S2,qhe),e(qhe,UNo),e(S2,JNo),e(S2,dV),e(dV,YNo),e(S2,KNo),e(N,ZNo),e(N,R2),e(R2,jhe),e(jhe,eqo),e(R2,oqo),e(R2,cV),e(cV,rqo),e(R2,tqo),e(N,aqo),e(N,P2),e(P2,Dhe),e(Dhe,nqo),e(P2,sqo),e(P2,fV),e(fV,lqo),e(P2,iqo),e(N,dqo),e(N,B2),e(B2,Ghe),e(Ghe,cqo),e(B2,fqo),e(B2,mV),e(mV,mqo),e(B2,gqo),e(N,hqo),e(N,I2),e(I2,Ohe),e(Ohe,pqo),e(I2,_qo),e(I2,gV),e(gV,uqo),e(I2,bqo),e(N,vqo),e(N,N2),e(N2,Vhe),e(Vhe,Fqo),e(N2,Tqo),e(N2,hV),e(hV,Mqo),e(N2,Eqo),e(N,Cqo),e(N,q2),e(q2,Xhe),e(Xhe,wqo),e(q2,Aqo),e(q2,pV),e(pV,Lqo),e(q2,yqo),e(N,xqo),e(N,j2),e(j2,zhe),e(zhe,$qo),e(j2,kqo),e(j2,_V),e(_V,Sqo),e(j2,Rqo),e(N,Pqo),e(N,D2),e(D2,Qhe),e(Qhe,Bqo),e(D2,Iqo),e(D2,uV),e(uV,Nqo),e(D2,qqo),e(N,jqo),e(N,G2),e(G2,Whe),e(Whe,Dqo),e(G2,Gqo),e(G2,bV),e(bV,Oqo),e(G2,Vqo),e(N,Xqo),e(N,O2),e(O2,Hhe),e(Hhe,zqo),e(O2,Qqo),e(O2,vV),e(vV,Wqo),e(O2,Hqo),e(N,Uqo),e(N,V2),e(V2,Uhe),e(Uhe,Jqo),e(V2,Yqo),e(V2,FV),e(FV,Kqo),e(V2,Zqo),e(N,ejo),e(N,X2),e(X2,Jhe),e(Jhe,ojo),e(X2,rjo),e(X2,TV),e(TV,tjo),e(X2,ajo),e(N,njo),e(N,z2),e(z2,Yhe),e(Yhe,sjo),e(z2,ljo),e(z2,MV),e(MV,ijo),e(z2,djo),e(N,cjo),e(N,Q2),e(Q2,Khe),e(Khe,fjo),e(Q2,mjo),e(Q2,EV),e(EV,gjo),e(Q2,hjo),e(N,pjo),e(N,W2),e(W2,Zhe),e(Zhe,_jo),e(W2,ujo),e(W2,CV),e(CV,bjo),e(W2,vjo),e(N,Fjo),e(N,H2),e(H2,epe),e(epe,Tjo),e(H2,Mjo),e(H2,wV),e(wV,Ejo),e(H2,Cjo),e(N,wjo),e(N,U2),e(U2,ope),e(ope,Ajo),e(U2,Ljo),e(U2,AV),e(AV,yjo),e(U2,xjo),e(N,$jo),e(N,J2),e(J2,rpe),e(rpe,kjo),e(J2,Sjo),e(J2,LV),e(LV,Rjo),e(J2,Pjo),e(N,Bjo),e(N,Y2),e(Y2,tpe),e(tpe,Ijo),e(Y2,Njo),e(Y2,yV),e(yV,qjo),e(Y2,jjo),e(N,Djo),e(N,K2),e(K2,ape),e(ape,Gjo),e(K2,Ojo),e(K2,xV),e(xV,Vjo),e(K2,Xjo),e(N,zjo),e(N,Z2),e(Z2,npe),e(npe,Qjo),e(Z2,Wjo),e(Z2,$V),e($V,Hjo),e(Z2,Ujo),e(N,Jjo),e(N,eb),e(eb,spe),e(spe,Yjo),e(eb,Kjo),e(eb,kV),e(kV,Zjo),e(eb,eDo),e(N,oDo),e(N,ob),e(ob,lpe),e(lpe,rDo),e(ob,tDo),e(ob,SV),e(SV,aDo),e(ob,nDo),e(N,sDo),e(N,rb),e(rb,ipe),e(ipe,lDo),e(rb,iDo),e(rb,RV),e(RV,dDo),e(rb,cDo),e(N,fDo),e(N,tb),e(tb,dpe),e(dpe,mDo),e(tb,gDo),e(tb,PV),e(PV,hDo),e(tb,pDo),e(N,_Do),e(N,ab),e(ab,cpe),e(cpe,uDo),e(ab,bDo),e(ab,BV),e(BV,vDo),e(ab,FDo),e(N,TDo),e(N,nb),e(nb,fpe),e(fpe,MDo),e(nb,EDo),e(nb,IV),e(IV,CDo),e(nb,wDo),e(N,ADo),e(N,sb),e(sb,mpe),e(mpe,LDo),e(sb,yDo),e(sb,NV),e(NV,xDo),e(sb,$Do),e(N,kDo),e(N,lb),e(lb,gpe),e(gpe,SDo),e(lb,RDo),e(lb,qV),e(qV,PDo),e(lb,BDo),e(N,IDo),e(N,ib),e(ib,hpe),e(hpe,NDo),e(ib,qDo),e(ib,jV),e(jV,jDo),e(ib,DDo),e(N,GDo),e(N,db),e(db,ppe),e(ppe,ODo),e(db,VDo),e(db,DV),e(DV,XDo),e(db,zDo),e(N,QDo),e(N,cb),e(cb,_pe),e(_pe,WDo),e(cb,HDo),e(cb,GV),e(GV,UDo),e(cb,JDo),e(N,YDo),e(N,fb),e(fb,upe),e(upe,KDo),e(fb,ZDo),e(fb,OV),e(OV,eGo),e(fb,oGo),e(N,rGo),e(N,mb),e(mb,bpe),e(bpe,tGo),e(mb,aGo),e(mb,VV),e(VV,nGo),e(mb,sGo),e(N,lGo),e(N,gb),e(gb,vpe),e(vpe,iGo),e(gb,dGo),e(gb,XV),e(XV,cGo),e(gb,fGo),e(N,mGo),e(N,hb),e(hb,Fpe),e(Fpe,gGo),e(hb,hGo),e(hb,zV),e(zV,pGo),e(hb,_Go),e(N,uGo),e(N,pb),e(pb,Tpe),e(Tpe,bGo),e(pb,vGo),e(pb,QV),e(QV,FGo),e(pb,TGo),e(N,MGo),e(N,_b),e(_b,Mpe),e(Mpe,EGo),e(_b,CGo),e(_b,WV),e(WV,wGo),e(_b,AGo),e(N,LGo),e(N,ub),e(ub,Epe),e(Epe,yGo),e(ub,xGo),e(ub,HV),e(HV,$Go),e(ub,kGo),e(N,SGo),e(N,bb),e(bb,Cpe),e(Cpe,RGo),e(bb,PGo),e(bb,UV),e(UV,BGo),e(bb,IGo),e(N,NGo),e(N,vb),e(vb,wpe),e(wpe,qGo),e(vb,jGo),e(vb,JV),e(JV,DGo),e(vb,GGo),e(N,OGo),e(N,Fb),e(Fb,Ape),e(Ape,VGo),e(Fb,XGo),e(Fb,YV),e(YV,zGo),e(Fb,QGo),e(oo,WGo),e(oo,Tb),e(Tb,HGo),e(Tb,Lpe),e(Lpe,UGo),e(Tb,JGo),e(Tb,ype),e(ype,YGo),e(oo,KGo),M(Mb,oo,null),b(f,kOe,u),b(f,ed,u),e(ed,Eb),e(Eb,xpe),M(IL,xpe,null),e(ed,ZGo),e(ed,$pe),e($pe,eOo),b(f,SOe,u),b(f,Bo,u),M(NL,Bo,null),e(Bo,oOo),e(Bo,od),e(od,rOo),e(od,KV),e(KV,tOo),e(od,aOo),e(od,ZV),e(ZV,nOo),e(od,sOo),e(Bo,lOo),e(Bo,qL),e(qL,iOo),e(qL,kpe),e(kpe,dOo),e(qL,cOo),e(Bo,fOo),e(Bo,ft),M(jL,ft,null),e(ft,mOo),e(ft,Spe),e(Spe,gOo),e(ft,hOo),e(ft,rd),e(rd,pOo),e(rd,Rpe),e(Rpe,_Oo),e(rd,uOo),e(rd,eX),e(eX,bOo),e(rd,vOo),e(ft,FOo),M(Cb,ft,null),e(Bo,TOo),e(Bo,ro),M(DL,ro,null),e(ro,MOo),e(ro,Ppe),e(Ppe,EOo),e(ro,COo),e(ro,ja),e(ja,wOo),e(ja,Bpe),e(Bpe,AOo),e(ja,LOo),e(ja,Ipe),e(Ipe,yOo),e(ja,xOo),e(ja,Npe),e(Npe,$Oo),e(ja,kOo),e(ro,SOo),e(ro,Z),e(Z,wb),e(wb,qpe),e(qpe,ROo),e(wb,POo),e(wb,oX),e(oX,BOo),e(wb,IOo),e(Z,NOo),e(Z,Ab),e(Ab,jpe),e(jpe,qOo),e(Ab,jOo),e(Ab,rX),e(rX,DOo),e(Ab,GOo),e(Z,OOo),e(Z,Lb),e(Lb,Dpe),e(Dpe,VOo),e(Lb,XOo),e(Lb,tX),e(tX,zOo),e(Lb,QOo),e(Z,WOo),e(Z,yb),e(yb,Gpe),e(Gpe,HOo),e(yb,UOo),e(yb,aX),e(aX,JOo),e(yb,YOo),e(Z,KOo),e(Z,xb),e(xb,Ope),e(Ope,ZOo),e(xb,eVo),e(xb,nX),e(nX,oVo),e(xb,rVo),e(Z,tVo),e(Z,$b),e($b,Vpe),e(Vpe,aVo),e($b,nVo),e($b,sX),e(sX,sVo),e($b,lVo),e(Z,iVo),e(Z,kb),e(kb,Xpe),e(Xpe,dVo),e(kb,cVo),e(kb,lX),e(lX,fVo),e(kb,mVo),e(Z,gVo),e(Z,Sb),e(Sb,zpe),e(zpe,hVo),e(Sb,pVo),e(Sb,iX),e(iX,_Vo),e(Sb,uVo),e(Z,bVo),e(Z,Rb),e(Rb,Qpe),e(Qpe,vVo),e(Rb,FVo),e(Rb,dX),e(dX,TVo),e(Rb,MVo),e(Z,EVo),e(Z,Pb),e(Pb,Wpe),e(Wpe,CVo),e(Pb,wVo),e(Pb,cX),e(cX,AVo),e(Pb,LVo),e(Z,yVo),e(Z,Bb),e(Bb,Hpe),e(Hpe,xVo),e(Bb,$Vo),e(Bb,fX),e(fX,kVo),e(Bb,SVo),e(Z,RVo),e(Z,Ib),e(Ib,Upe),e(Upe,PVo),e(Ib,BVo),e(Ib,mX),e(mX,IVo),e(Ib,NVo),e(Z,qVo),e(Z,Nb),e(Nb,Jpe),e(Jpe,jVo),e(Nb,DVo),e(Nb,gX),e(gX,GVo),e(Nb,OVo),e(Z,VVo),e(Z,qb),e(qb,Ype),e(Ype,XVo),e(qb,zVo),e(qb,hX),e(hX,QVo),e(qb,WVo),e(Z,HVo),e(Z,jb),e(jb,Kpe),e(Kpe,UVo),e(jb,JVo),e(jb,pX),e(pX,YVo),e(jb,KVo),e(Z,ZVo),e(Z,Db),e(Db,Zpe),e(Zpe,eXo),e(Db,oXo),e(Db,_X),e(_X,rXo),e(Db,tXo),e(Z,aXo),e(Z,Gb),e(Gb,e_e),e(e_e,nXo),e(Gb,sXo),e(Gb,uX),e(uX,lXo),e(Gb,iXo),e(Z,dXo),e(Z,Ob),e(Ob,o_e),e(o_e,cXo),e(Ob,fXo),e(Ob,bX),e(bX,mXo),e(Ob,gXo),e(Z,hXo),e(Z,Vb),e(Vb,r_e),e(r_e,pXo),e(Vb,_Xo),e(Vb,vX),e(vX,uXo),e(Vb,bXo),e(Z,vXo),e(Z,Xb),e(Xb,t_e),e(t_e,FXo),e(Xb,TXo),e(Xb,FX),e(FX,MXo),e(Xb,EXo),e(Z,CXo),e(Z,zb),e(zb,a_e),e(a_e,wXo),e(zb,AXo),e(zb,TX),e(TX,LXo),e(zb,yXo),e(Z,xXo),e(Z,Qb),e(Qb,n_e),e(n_e,$Xo),e(Qb,kXo),e(Qb,MX),e(MX,SXo),e(Qb,RXo),e(Z,PXo),e(Z,Wb),e(Wb,s_e),e(s_e,BXo),e(Wb,IXo),e(Wb,EX),e(EX,NXo),e(Wb,qXo),e(Z,jXo),e(Z,Hb),e(Hb,l_e),e(l_e,DXo),e(Hb,GXo),e(Hb,CX),e(CX,OXo),e(Hb,VXo),e(Z,XXo),e(Z,Ub),e(Ub,i_e),e(i_e,zXo),e(Ub,QXo),e(Ub,wX),e(wX,WXo),e(Ub,HXo),e(Z,UXo),e(Z,Jb),e(Jb,d_e),e(d_e,JXo),e(Jb,YXo),e(Jb,AX),e(AX,KXo),e(Jb,ZXo),e(Z,ezo),e(Z,Yb),e(Yb,c_e),e(c_e,ozo),e(Yb,rzo),e(Yb,LX),e(LX,tzo),e(Yb,azo),e(Z,nzo),e(Z,Kb),e(Kb,f_e),e(f_e,szo),e(Kb,lzo),e(Kb,yX),e(yX,izo),e(Kb,dzo),e(Z,czo),e(Z,Zb),e(Zb,m_e),e(m_e,fzo),e(Zb,mzo),e(Zb,xX),e(xX,gzo),e(Zb,hzo),e(Z,pzo),e(Z,ev),e(ev,g_e),e(g_e,_zo),e(ev,uzo),e(ev,$X),e($X,bzo),e(ev,vzo),e(ro,Fzo),e(ro,ov),e(ov,Tzo),e(ov,h_e),e(h_e,Mzo),e(ov,Ezo),e(ov,p_e),e(p_e,Czo),e(ro,wzo),M(rv,ro,null),b(f,ROe,u),b(f,td,u),e(td,tv),e(tv,__e),M(GL,__e,null),e(td,Azo),e(td,u_e),e(u_e,Lzo),b(f,POe,u),b(f,Io,u),M(OL,Io,null),e(Io,yzo),e(Io,ad),e(ad,xzo),e(ad,kX),e(kX,$zo),e(ad,kzo),e(ad,SX),e(SX,Szo),e(ad,Rzo),e(Io,Pzo),e(Io,VL),e(VL,Bzo),e(VL,b_e),e(b_e,Izo),e(VL,Nzo),e(Io,qzo),e(Io,mt),M(XL,mt,null),e(mt,jzo),e(mt,v_e),e(v_e,Dzo),e(mt,Gzo),e(mt,nd),e(nd,Ozo),e(nd,F_e),e(F_e,Vzo),e(nd,Xzo),e(nd,RX),e(RX,zzo),e(nd,Qzo),e(mt,Wzo),M(av,mt,null),e(Io,Hzo),e(Io,to),M(zL,to,null),e(to,Uzo),e(to,T_e),e(T_e,Jzo),e(to,Yzo),e(to,Da),e(Da,Kzo),e(Da,M_e),e(M_e,Zzo),e(Da,eQo),e(Da,E_e),e(E_e,oQo),e(Da,rQo),e(Da,C_e),e(C_e,tQo),e(Da,aQo),e(to,nQo),e(to,No),e(No,nv),e(nv,w_e),e(w_e,sQo),e(nv,lQo),e(nv,PX),e(PX,iQo),e(nv,dQo),e(No,cQo),e(No,sv),e(sv,A_e),e(A_e,fQo),e(sv,mQo),e(sv,BX),e(BX,gQo),e(sv,hQo),e(No,pQo),e(No,lv),e(lv,L_e),e(L_e,_Qo),e(lv,uQo),e(lv,IX),e(IX,bQo),e(lv,vQo),e(No,FQo),e(No,iv),e(iv,y_e),e(y_e,TQo),e(iv,MQo),e(iv,NX),e(NX,EQo),e(iv,CQo),e(No,wQo),e(No,dv),e(dv,x_e),e(x_e,AQo),e(dv,LQo),e(dv,qX),e(qX,yQo),e(dv,xQo),e(No,$Qo),e(No,cv),e(cv,$_e),e($_e,kQo),e(cv,SQo),e(cv,jX),e(jX,RQo),e(cv,PQo),e(to,BQo),e(to,fv),e(fv,IQo),e(fv,k_e),e(k_e,NQo),e(fv,qQo),e(fv,S_e),e(S_e,jQo),e(to,DQo),M(mv,to,null),b(f,BOe,u),b(f,sd,u),e(sd,gv),e(gv,R_e),M(QL,R_e,null),e(sd,GQo),e(sd,P_e),e(P_e,OQo),b(f,IOe,u),b(f,qo,u),M(WL,qo,null),e(qo,VQo),e(qo,ld),e(ld,XQo),e(ld,DX),e(DX,zQo),e(ld,QQo),e(ld,GX),e(GX,WQo),e(ld,HQo),e(qo,UQo),e(qo,HL),e(HL,JQo),e(HL,B_e),e(B_e,YQo),e(HL,KQo),e(qo,ZQo),e(qo,gt),M(UL,gt,null),e(gt,eWo),e(gt,I_e),e(I_e,oWo),e(gt,rWo),e(gt,id),e(id,tWo),e(id,N_e),e(N_e,aWo),e(id,nWo),e(id,OX),e(OX,sWo),e(id,lWo),e(gt,iWo),M(hv,gt,null),e(qo,dWo),e(qo,ao),M(JL,ao,null),e(ao,cWo),e(ao,q_e),e(q_e,fWo),e(ao,mWo),e(ao,Ga),e(Ga,gWo),e(Ga,j_e),e(j_e,hWo),e(Ga,pWo),e(Ga,D_e),e(D_e,_Wo),e(Ga,uWo),e(Ga,G_e),e(G_e,bWo),e(Ga,vWo),e(ao,FWo),e(ao,H),e(H,pv),e(pv,O_e),e(O_e,TWo),e(pv,MWo),e(pv,VX),e(VX,EWo),e(pv,CWo),e(H,wWo),e(H,_v),e(_v,V_e),e(V_e,AWo),e(_v,LWo),e(_v,XX),e(XX,yWo),e(_v,xWo),e(H,$Wo),e(H,uv),e(uv,X_e),e(X_e,kWo),e(uv,SWo),e(uv,zX),e(zX,RWo),e(uv,PWo),e(H,BWo),e(H,bv),e(bv,z_e),e(z_e,IWo),e(bv,NWo),e(bv,QX),e(QX,qWo),e(bv,jWo),e(H,DWo),e(H,vv),e(vv,Q_e),e(Q_e,GWo),e(vv,OWo),e(vv,WX),e(WX,VWo),e(vv,XWo),e(H,zWo),e(H,Fv),e(Fv,W_e),e(W_e,QWo),e(Fv,WWo),e(Fv,HX),e(HX,HWo),e(Fv,UWo),e(H,JWo),e(H,Tv),e(Tv,H_e),e(H_e,YWo),e(Tv,KWo),e(Tv,UX),e(UX,ZWo),e(Tv,eHo),e(H,oHo),e(H,Mv),e(Mv,U_e),e(U_e,rHo),e(Mv,tHo),e(Mv,JX),e(JX,aHo),e(Mv,nHo),e(H,sHo),e(H,Ev),e(Ev,J_e),e(J_e,lHo),e(Ev,iHo),e(Ev,YX),e(YX,dHo),e(Ev,cHo),e(H,fHo),e(H,Cv),e(Cv,Y_e),e(Y_e,mHo),e(Cv,gHo),e(Cv,KX),e(KX,hHo),e(Cv,pHo),e(H,_Ho),e(H,wv),e(wv,K_e),e(K_e,uHo),e(wv,bHo),e(wv,ZX),e(ZX,vHo),e(wv,FHo),e(H,THo),e(H,Av),e(Av,Z_e),e(Z_e,MHo),e(Av,EHo),e(Av,ez),e(ez,CHo),e(Av,wHo),e(H,AHo),e(H,Lv),e(Lv,eue),e(eue,LHo),e(Lv,yHo),e(Lv,oz),e(oz,xHo),e(Lv,$Ho),e(H,kHo),e(H,yv),e(yv,oue),e(oue,SHo),e(yv,RHo),e(yv,rz),e(rz,PHo),e(yv,BHo),e(H,IHo),e(H,xv),e(xv,rue),e(rue,NHo),e(xv,qHo),e(xv,tz),e(tz,jHo),e(xv,DHo),e(H,GHo),e(H,$v),e($v,tue),e(tue,OHo),e($v,VHo),e($v,az),e(az,XHo),e($v,zHo),e(H,QHo),e(H,kv),e(kv,aue),e(aue,WHo),e(kv,HHo),e(kv,nz),e(nz,UHo),e(kv,JHo),e(H,YHo),e(H,Sv),e(Sv,nue),e(nue,KHo),e(Sv,ZHo),e(Sv,sz),e(sz,eUo),e(Sv,oUo),e(H,rUo),e(H,Rv),e(Rv,sue),e(sue,tUo),e(Rv,aUo),e(Rv,lz),e(lz,nUo),e(Rv,sUo),e(H,lUo),e(H,Pv),e(Pv,lue),e(lue,iUo),e(Pv,dUo),e(Pv,iz),e(iz,cUo),e(Pv,fUo),e(H,mUo),e(H,Bv),e(Bv,iue),e(iue,gUo),e(Bv,hUo),e(Bv,dz),e(dz,pUo),e(Bv,_Uo),e(H,uUo),e(H,Iv),e(Iv,due),e(due,bUo),e(Iv,vUo),e(Iv,cz),e(cz,FUo),e(Iv,TUo),e(H,MUo),e(H,Nv),e(Nv,cue),e(cue,EUo),e(Nv,CUo),e(Nv,fz),e(fz,wUo),e(Nv,AUo),e(H,LUo),e(H,qv),e(qv,fue),e(fue,yUo),e(qv,xUo),e(qv,mz),e(mz,$Uo),e(qv,kUo),e(H,SUo),e(H,jv),e(jv,mue),e(mue,RUo),e(jv,PUo),e(jv,gz),e(gz,BUo),e(jv,IUo),e(H,NUo),e(H,Dv),e(Dv,gue),e(gue,qUo),e(Dv,jUo),e(Dv,hz),e(hz,DUo),e(Dv,GUo),e(H,OUo),e(H,Gv),e(Gv,hue),e(hue,VUo),e(Gv,XUo),e(Gv,pz),e(pz,zUo),e(Gv,QUo),e(H,WUo),e(H,Ov),e(Ov,pue),e(pue,HUo),e(Ov,UUo),e(Ov,_z),e(_z,JUo),e(Ov,YUo),e(H,KUo),e(H,Vv),e(Vv,_ue),e(_ue,ZUo),e(Vv,eJo),e(Vv,uz),e(uz,oJo),e(Vv,rJo),e(H,tJo),e(H,Xv),e(Xv,uue),e(uue,aJo),e(Xv,nJo),e(Xv,bz),e(bz,sJo),e(Xv,lJo),e(H,iJo),e(H,zv),e(zv,bue),e(bue,dJo),e(zv,cJo),e(zv,vz),e(vz,fJo),e(zv,mJo),e(H,gJo),e(H,Qv),e(Qv,vue),e(vue,hJo),e(Qv,pJo),e(Qv,Fz),e(Fz,_Jo),e(Qv,uJo),e(H,bJo),e(H,Wv),e(Wv,Fue),e(Fue,vJo),e(Wv,FJo),e(Wv,Tz),e(Tz,TJo),e(Wv,MJo),e(H,EJo),e(H,Hv),e(Hv,Tue),e(Tue,CJo),e(Hv,wJo),e(Hv,Mz),e(Mz,AJo),e(Hv,LJo),e(H,yJo),e(H,Uv),e(Uv,Mue),e(Mue,xJo),e(Uv,$Jo),e(Uv,Ez),e(Ez,kJo),e(Uv,SJo),e(H,RJo),e(H,Jv),e(Jv,Eue),e(Eue,PJo),e(Jv,BJo),e(Jv,Cz),e(Cz,IJo),e(Jv,NJo),e(ao,qJo),e(ao,Yv),e(Yv,jJo),e(Yv,Cue),e(Cue,DJo),e(Yv,GJo),e(Yv,wue),e(wue,OJo),e(ao,VJo),M(Kv,ao,null),b(f,NOe,u),b(f,dd,u),e(dd,Zv),e(Zv,Aue),M(YL,Aue,null),e(dd,XJo),e(dd,Lue),e(Lue,zJo),b(f,qOe,u),b(f,jo,u),M(KL,jo,null),e(jo,QJo),e(jo,cd),e(cd,WJo),e(cd,wz),e(wz,HJo),e(cd,UJo),e(cd,Az),e(Az,JJo),e(cd,YJo),e(jo,KJo),e(jo,ZL),e(ZL,ZJo),e(ZL,yue),e(yue,eYo),e(ZL,oYo),e(jo,rYo),e(jo,ht),M(ey,ht,null),e(ht,tYo),e(ht,xue),e(xue,aYo),e(ht,nYo),e(ht,fd),e(fd,sYo),e(fd,$ue),e($ue,lYo),e(fd,iYo),e(fd,Lz),e(Lz,dYo),e(fd,cYo),e(ht,fYo),M(eF,ht,null),e(jo,mYo),e(jo,no),M(oy,no,null),e(no,gYo),e(no,kue),e(kue,hYo),e(no,pYo),e(no,Oa),e(Oa,_Yo),e(Oa,Sue),e(Sue,uYo),e(Oa,bYo),e(Oa,Rue),e(Rue,vYo),e(Oa,FYo),e(Oa,Pue),e(Pue,TYo),e(Oa,MYo),e(no,EYo),e(no,V),e(V,oF),e(oF,Bue),e(Bue,CYo),e(oF,wYo),e(oF,yz),e(yz,AYo),e(oF,LYo),e(V,yYo),e(V,rF),e(rF,Iue),e(Iue,xYo),e(rF,$Yo),e(rF,xz),e(xz,kYo),e(rF,SYo),e(V,RYo),e(V,tF),e(tF,Nue),e(Nue,PYo),e(tF,BYo),e(tF,$z),e($z,IYo),e(tF,NYo),e(V,qYo),e(V,aF),e(aF,que),e(que,jYo),e(aF,DYo),e(aF,kz),e(kz,GYo),e(aF,OYo),e(V,VYo),e(V,nF),e(nF,jue),e(jue,XYo),e(nF,zYo),e(nF,Sz),e(Sz,QYo),e(nF,WYo),e(V,HYo),e(V,sF),e(sF,Due),e(Due,UYo),e(sF,JYo),e(sF,Rz),e(Rz,YYo),e(sF,KYo),e(V,ZYo),e(V,lF),e(lF,Gue),e(Gue,eKo),e(lF,oKo),e(lF,Pz),e(Pz,rKo),e(lF,tKo),e(V,aKo),e(V,iF),e(iF,Oue),e(Oue,nKo),e(iF,sKo),e(iF,Bz),e(Bz,lKo),e(iF,iKo),e(V,dKo),e(V,dF),e(dF,Vue),e(Vue,cKo),e(dF,fKo),e(dF,Iz),e(Iz,mKo),e(dF,gKo),e(V,hKo),e(V,cF),e(cF,Xue),e(Xue,pKo),e(cF,_Ko),e(cF,Nz),e(Nz,uKo),e(cF,bKo),e(V,vKo),e(V,fF),e(fF,zue),e(zue,FKo),e(fF,TKo),e(fF,qz),e(qz,MKo),e(fF,EKo),e(V,CKo),e(V,mF),e(mF,Que),e(Que,wKo),e(mF,AKo),e(mF,jz),e(jz,LKo),e(mF,yKo),e(V,xKo),e(V,gF),e(gF,Wue),e(Wue,$Ko),e(gF,kKo),e(gF,Dz),e(Dz,SKo),e(gF,RKo),e(V,PKo),e(V,hF),e(hF,Hue),e(Hue,BKo),e(hF,IKo),e(hF,Gz),e(Gz,NKo),e(hF,qKo),e(V,jKo),e(V,pF),e(pF,Uue),e(Uue,DKo),e(pF,GKo),e(pF,Oz),e(Oz,OKo),e(pF,VKo),e(V,XKo),e(V,_F),e(_F,Jue),e(Jue,zKo),e(_F,QKo),e(_F,Vz),e(Vz,WKo),e(_F,HKo),e(V,UKo),e(V,uF),e(uF,Yue),e(Yue,JKo),e(uF,YKo),e(uF,Xz),e(Xz,KKo),e(uF,ZKo),e(V,eZo),e(V,bF),e(bF,Kue),e(Kue,oZo),e(bF,rZo),e(bF,zz),e(zz,tZo),e(bF,aZo),e(V,nZo),e(V,vF),e(vF,Zue),e(Zue,sZo),e(vF,lZo),e(vF,Qz),e(Qz,iZo),e(vF,dZo),e(V,cZo),e(V,FF),e(FF,e7e),e(e7e,fZo),e(FF,mZo),e(FF,Wz),e(Wz,gZo),e(FF,hZo),e(V,pZo),e(V,TF),e(TF,o7e),e(o7e,_Zo),e(TF,uZo),e(TF,Hz),e(Hz,bZo),e(TF,vZo),e(V,FZo),e(V,MF),e(MF,r7e),e(r7e,TZo),e(MF,MZo),e(MF,Uz),e(Uz,EZo),e(MF,CZo),e(V,wZo),e(V,EF),e(EF,t7e),e(t7e,AZo),e(EF,LZo),e(EF,Jz),e(Jz,yZo),e(EF,xZo),e(V,$Zo),e(V,CF),e(CF,a7e),e(a7e,kZo),e(CF,SZo),e(CF,Yz),e(Yz,RZo),e(CF,PZo),e(V,BZo),e(V,wF),e(wF,n7e),e(n7e,IZo),e(wF,NZo),e(wF,Kz),e(Kz,qZo),e(wF,jZo),e(V,DZo),e(V,AF),e(AF,s7e),e(s7e,GZo),e(AF,OZo),e(AF,Zz),e(Zz,VZo),e(AF,XZo),e(V,zZo),e(V,LF),e(LF,l7e),e(l7e,QZo),e(LF,WZo),e(LF,eQ),e(eQ,HZo),e(LF,UZo),e(V,JZo),e(V,yF),e(yF,i7e),e(i7e,YZo),e(yF,KZo),e(yF,oQ),e(oQ,ZZo),e(yF,eer),e(V,oer),e(V,xF),e(xF,d7e),e(d7e,rer),e(xF,ter),e(xF,rQ),e(rQ,aer),e(xF,ner),e(V,ser),e(V,$F),e($F,c7e),e(c7e,ler),e($F,ier),e($F,tQ),e(tQ,der),e($F,cer),e(V,fer),e(V,kF),e(kF,f7e),e(f7e,mer),e(kF,ger),e(kF,aQ),e(aQ,her),e(kF,per),e(V,_er),e(V,SF),e(SF,m7e),e(m7e,uer),e(SF,ber),e(SF,nQ),e(nQ,ver),e(SF,Fer),e(V,Ter),e(V,RF),e(RF,g7e),e(g7e,Mer),e(RF,Eer),e(RF,sQ),e(sQ,Cer),e(RF,wer),e(V,Aer),e(V,PF),e(PF,h7e),e(h7e,Ler),e(PF,yer),e(PF,lQ),e(lQ,xer),e(PF,$er),e(V,ker),e(V,BF),e(BF,p7e),e(p7e,Ser),e(BF,Rer),e(BF,iQ),e(iQ,Per),e(BF,Ber),e(V,Ier),e(V,IF),e(IF,_7e),e(_7e,Ner),e(IF,qer),e(IF,dQ),e(dQ,jer),e(IF,Der),e(V,Ger),e(V,NF),e(NF,u7e),e(u7e,Oer),e(NF,Ver),e(NF,cQ),e(cQ,Xer),e(NF,zer),e(V,Qer),e(V,qF),e(qF,b7e),e(b7e,Wer),e(qF,Her),e(qF,fQ),e(fQ,Uer),e(qF,Jer),e(V,Yer),e(V,jF),e(jF,v7e),e(v7e,Ker),e(jF,Zer),e(jF,mQ),e(mQ,eor),e(jF,oor),e(V,ror),e(V,DF),e(DF,F7e),e(F7e,tor),e(DF,aor),e(DF,gQ),e(gQ,nor),e(DF,sor),e(V,lor),e(V,GF),e(GF,T7e),e(T7e,ior),e(GF,dor),e(GF,hQ),e(hQ,cor),e(GF,mor),e(no,gor),e(no,OF),e(OF,hor),e(OF,M7e),e(M7e,por),e(OF,_or),e(OF,E7e),e(E7e,uor),e(no,bor),M(VF,no,null),b(f,jOe,u),b(f,md,u),e(md,XF),e(XF,C7e),M(ry,C7e,null),e(md,vor),e(md,w7e),e(w7e,For),b(f,DOe,u),b(f,Do,u),M(ty,Do,null),e(Do,Tor),e(Do,gd),e(gd,Mor),e(gd,pQ),e(pQ,Eor),e(gd,Cor),e(gd,_Q),e(_Q,wor),e(gd,Aor),e(Do,Lor),e(Do,ay),e(ay,yor),e(ay,A7e),e(A7e,xor),e(ay,$or),e(Do,kor),e(Do,pt),M(ny,pt,null),e(pt,Sor),e(pt,L7e),e(L7e,Ror),e(pt,Por),e(pt,hd),e(hd,Bor),e(hd,y7e),e(y7e,Ior),e(hd,Nor),e(hd,uQ),e(uQ,qor),e(hd,jor),e(pt,Dor),M(zF,pt,null),e(Do,Gor),e(Do,so),M(sy,so,null),e(so,Oor),e(so,x7e),e(x7e,Vor),e(so,Xor),e(so,Va),e(Va,zor),e(Va,$7e),e($7e,Qor),e(Va,Wor),e(Va,k7e),e(k7e,Hor),e(Va,Uor),e(Va,S7e),e(S7e,Jor),e(Va,Yor),e(so,Kor),e(so,R7e),e(R7e,QF),e(QF,P7e),e(P7e,Zor),e(QF,err),e(QF,bQ),e(bQ,orr),e(QF,rrr),e(so,trr),e(so,WF),e(WF,arr),e(WF,B7e),e(B7e,nrr),e(WF,srr),e(WF,I7e),e(I7e,lrr),e(so,irr),M(HF,so,null),b(f,GOe,u),b(f,pd,u),e(pd,UF),e(UF,N7e),M(ly,N7e,null),e(pd,drr),e(pd,q7e),e(q7e,crr),b(f,OOe,u),b(f,Go,u),M(iy,Go,null),e(Go,frr),e(Go,_d),e(_d,mrr),e(_d,vQ),e(vQ,grr),e(_d,hrr),e(_d,FQ),e(FQ,prr),e(_d,_rr),e(Go,urr),e(Go,dy),e(dy,brr),e(dy,j7e),e(j7e,vrr),e(dy,Frr),e(Go,Trr),e(Go,_t),M(cy,_t,null),e(_t,Mrr),e(_t,D7e),e(D7e,Err),e(_t,Crr),e(_t,ud),e(ud,wrr),e(ud,G7e),e(G7e,Arr),e(ud,Lrr),e(ud,TQ),e(TQ,yrr),e(ud,xrr),e(_t,$rr),M(JF,_t,null),e(Go,krr),e(Go,lo),M(fy,lo,null),e(lo,Srr),e(lo,O7e),e(O7e,Rrr),e(lo,Prr),e(lo,Xa),e(Xa,Brr),e(Xa,V7e),e(V7e,Irr),e(Xa,Nrr),e(Xa,X7e),e(X7e,qrr),e(Xa,jrr),e(Xa,z7e),e(z7e,Drr),e(Xa,Grr),e(lo,Orr),e(lo,Fe),e(Fe,YF),e(YF,Q7e),e(Q7e,Vrr),e(YF,Xrr),e(YF,MQ),e(MQ,zrr),e(YF,Qrr),e(Fe,Wrr),e(Fe,KF),e(KF,W7e),e(W7e,Hrr),e(KF,Urr),e(KF,EQ),e(EQ,Jrr),e(KF,Yrr),e(Fe,Krr),e(Fe,ZF),e(ZF,H7e),e(H7e,Zrr),e(ZF,etr),e(ZF,CQ),e(CQ,otr),e(ZF,rtr),e(Fe,ttr),e(Fe,eT),e(eT,U7e),e(U7e,atr),e(eT,ntr),e(eT,wQ),e(wQ,str),e(eT,ltr),e(Fe,itr),e(Fe,zs),e(zs,J7e),e(J7e,dtr),e(zs,ctr),e(zs,AQ),e(AQ,ftr),e(zs,mtr),e(zs,LQ),e(LQ,gtr),e(zs,htr),e(Fe,ptr),e(Fe,oT),e(oT,Y7e),e(Y7e,_tr),e(oT,utr),e(oT,yQ),e(yQ,btr),e(oT,vtr),e(Fe,Ftr),e(Fe,Qs),e(Qs,K7e),e(K7e,Ttr),e(Qs,Mtr),e(Qs,xQ),e(xQ,Etr),e(Qs,Ctr),e(Qs,$Q),e($Q,wtr),e(Qs,Atr),e(Fe,Ltr),e(Fe,ut),e(ut,Z7e),e(Z7e,ytr),e(ut,xtr),e(ut,kQ),e(kQ,$tr),e(ut,ktr),e(ut,SQ),e(SQ,Str),e(ut,Rtr),e(ut,RQ),e(RQ,Ptr),e(ut,Btr),e(Fe,Itr),e(Fe,rT),e(rT,e1e),e(e1e,Ntr),e(rT,qtr),e(rT,PQ),e(PQ,jtr),e(rT,Dtr),e(Fe,Gtr),e(Fe,tT),e(tT,o1e),e(o1e,Otr),e(tT,Vtr),e(tT,BQ),e(BQ,Xtr),e(tT,ztr),e(Fe,Qtr),e(Fe,aT),e(aT,r1e),e(r1e,Wtr),e(aT,Htr),e(aT,IQ),e(IQ,Utr),e(aT,Jtr),e(Fe,Ytr),e(Fe,nT),e(nT,t1e),e(t1e,Ktr),e(nT,Ztr),e(nT,NQ),e(NQ,ear),e(nT,oar),e(Fe,rar),e(Fe,sT),e(sT,a1e),e(a1e,tar),e(sT,aar),e(sT,qQ),e(qQ,nar),e(sT,sar),e(Fe,lar),e(Fe,lT),e(lT,n1e),e(n1e,iar),e(lT,dar),e(lT,jQ),e(jQ,car),e(lT,far),e(Fe,mar),e(Fe,iT),e(iT,s1e),e(s1e,gar),e(iT,har),e(iT,DQ),e(DQ,par),e(iT,_ar),e(lo,uar),e(lo,dT),e(dT,bar),e(dT,l1e),e(l1e,Far),e(dT,Tar),e(dT,i1e),e(i1e,Mar),e(lo,Ear),M(cT,lo,null),b(f,VOe,u),b(f,bd,u),e(bd,fT),e(fT,d1e),M(my,d1e,null),e(bd,Car),e(bd,c1e),e(c1e,war),b(f,XOe,u),b(f,Oo,u),M(gy,Oo,null),e(Oo,Aar),e(Oo,vd),e(vd,Lar),e(vd,GQ),e(GQ,yar),e(vd,xar),e(vd,OQ),e(OQ,$ar),e(vd,kar),e(Oo,Sar),e(Oo,hy),e(hy,Rar),e(hy,f1e),e(f1e,Par),e(hy,Bar),e(Oo,Iar),e(Oo,bt),M(py,bt,null),e(bt,Nar),e(bt,m1e),e(m1e,qar),e(bt,jar),e(bt,Fd),e(Fd,Dar),e(Fd,g1e),e(g1e,Gar),e(Fd,Oar),e(Fd,VQ),e(VQ,Var),e(Fd,Xar),e(bt,zar),M(mT,bt,null),e(Oo,Qar),e(Oo,io),M(_y,io,null),e(io,War),e(io,h1e),e(h1e,Har),e(io,Uar),e(io,za),e(za,Jar),e(za,p1e),e(p1e,Yar),e(za,Kar),e(za,_1e),e(_1e,Zar),e(za,enr),e(za,u1e),e(u1e,onr),e(za,rnr),e(io,tnr),e(io,b1e),e(b1e,gT),e(gT,v1e),e(v1e,anr),e(gT,nnr),e(gT,XQ),e(XQ,snr),e(gT,lnr),e(io,inr),e(io,hT),e(hT,dnr),e(hT,F1e),e(F1e,cnr),e(hT,fnr),e(hT,T1e),e(T1e,mnr),e(io,gnr),M(pT,io,null),b(f,zOe,u),b(f,Td,u),e(Td,_T),e(_T,M1e),M(uy,M1e,null),e(Td,hnr),e(Td,E1e),e(E1e,pnr),b(f,QOe,u),b(f,Vo,u),M(by,Vo,null),e(Vo,_nr),e(Vo,Md),e(Md,unr),e(Md,zQ),e(zQ,bnr),e(Md,vnr),e(Md,QQ),e(QQ,Fnr),e(Md,Tnr),e(Vo,Mnr),e(Vo,vy),e(vy,Enr),e(vy,C1e),e(C1e,Cnr),e(vy,wnr),e(Vo,Anr),e(Vo,vt),M(Fy,vt,null),e(vt,Lnr),e(vt,w1e),e(w1e,ynr),e(vt,xnr),e(vt,Ed),e(Ed,$nr),e(Ed,A1e),e(A1e,knr),e(Ed,Snr),e(Ed,WQ),e(WQ,Rnr),e(Ed,Pnr),e(vt,Bnr),M(uT,vt,null),e(Vo,Inr),e(Vo,co),M(Ty,co,null),e(co,Nnr),e(co,L1e),e(L1e,qnr),e(co,jnr),e(co,Qa),e(Qa,Dnr),e(Qa,y1e),e(y1e,Gnr),e(Qa,Onr),e(Qa,x1e),e(x1e,Vnr),e(Qa,Xnr),e(Qa,$1e),e($1e,znr),e(Qa,Qnr),e(co,Wnr),e(co,k1e),e(k1e,bT),e(bT,S1e),e(S1e,Hnr),e(bT,Unr),e(bT,HQ),e(HQ,Jnr),e(bT,Ynr),e(co,Knr),e(co,vT),e(vT,Znr),e(vT,R1e),e(R1e,esr),e(vT,osr),e(vT,P1e),e(P1e,rsr),e(co,tsr),M(FT,co,null),b(f,WOe,u),b(f,Cd,u),e(Cd,TT),e(TT,B1e),M(My,B1e,null),e(Cd,asr),e(Cd,I1e),e(I1e,nsr),b(f,HOe,u),b(f,Xo,u),M(Ey,Xo,null),e(Xo,ssr),e(Xo,wd),e(wd,lsr),e(wd,UQ),e(UQ,isr),e(wd,dsr),e(wd,JQ),e(JQ,csr),e(wd,fsr),e(Xo,msr),e(Xo,Cy),e(Cy,gsr),e(Cy,N1e),e(N1e,hsr),e(Cy,psr),e(Xo,_sr),e(Xo,Ft),M(wy,Ft,null),e(Ft,usr),e(Ft,q1e),e(q1e,bsr),e(Ft,vsr),e(Ft,Ad),e(Ad,Fsr),e(Ad,j1e),e(j1e,Tsr),e(Ad,Msr),e(Ad,YQ),e(YQ,Esr),e(Ad,Csr),e(Ft,wsr),M(MT,Ft,null),e(Xo,Asr),e(Xo,fo),M(Ay,fo,null),e(fo,Lsr),e(fo,D1e),e(D1e,ysr),e(fo,xsr),e(fo,Wa),e(Wa,$sr),e(Wa,G1e),e(G1e,ksr),e(Wa,Ssr),e(Wa,O1e),e(O1e,Rsr),e(Wa,Psr),e(Wa,V1e),e(V1e,Bsr),e(Wa,Isr),e(fo,Nsr),e(fo,Pe),e(Pe,ET),e(ET,X1e),e(X1e,qsr),e(ET,jsr),e(ET,KQ),e(KQ,Dsr),e(ET,Gsr),e(Pe,Osr),e(Pe,CT),e(CT,z1e),e(z1e,Vsr),e(CT,Xsr),e(CT,ZQ),e(ZQ,zsr),e(CT,Qsr),e(Pe,Wsr),e(Pe,wT),e(wT,Q1e),e(Q1e,Hsr),e(wT,Usr),e(wT,eW),e(eW,Jsr),e(wT,Ysr),e(Pe,Ksr),e(Pe,AT),e(AT,W1e),e(W1e,Zsr),e(AT,elr),e(AT,oW),e(oW,olr),e(AT,rlr),e(Pe,tlr),e(Pe,LT),e(LT,H1e),e(H1e,alr),e(LT,nlr),e(LT,rW),e(rW,slr),e(LT,llr),e(Pe,ilr),e(Pe,yT),e(yT,U1e),e(U1e,dlr),e(yT,clr),e(yT,tW),e(tW,flr),e(yT,mlr),e(Pe,glr),e(Pe,xT),e(xT,J1e),e(J1e,hlr),e(xT,plr),e(xT,aW),e(aW,_lr),e(xT,ulr),e(Pe,blr),e(Pe,$T),e($T,Y1e),e(Y1e,vlr),e($T,Flr),e($T,nW),e(nW,Tlr),e($T,Mlr),e(Pe,Elr),e(Pe,kT),e(kT,K1e),e(K1e,Clr),e(kT,wlr),e(kT,sW),e(sW,Alr),e(kT,Llr),e(fo,ylr),e(fo,ST),e(ST,xlr),e(ST,Z1e),e(Z1e,$lr),e(ST,klr),e(ST,e2e),e(e2e,Slr),e(fo,Rlr),M(RT,fo,null),b(f,UOe,u),b(f,Ld,u),e(Ld,PT),e(PT,o2e),M(Ly,o2e,null),e(Ld,Plr),e(Ld,r2e),e(r2e,Blr),b(f,JOe,u),b(f,zo,u),M(yy,zo,null),e(zo,Ilr),e(zo,yd),e(yd,Nlr),e(yd,lW),e(lW,qlr),e(yd,jlr),e(yd,iW),e(iW,Dlr),e(yd,Glr),e(zo,Olr),e(zo,xy),e(xy,Vlr),e(xy,t2e),e(t2e,Xlr),e(xy,zlr),e(zo,Qlr),e(zo,Tt),M($y,Tt,null),e(Tt,Wlr),e(Tt,a2e),e(a2e,Hlr),e(Tt,Ulr),e(Tt,xd),e(xd,Jlr),e(xd,n2e),e(n2e,Ylr),e(xd,Klr),e(xd,dW),e(dW,Zlr),e(xd,eir),e(Tt,oir),M(BT,Tt,null),e(zo,rir),e(zo,mo),M(ky,mo,null),e(mo,tir),e(mo,s2e),e(s2e,air),e(mo,nir),e(mo,Ha),e(Ha,sir),e(Ha,l2e),e(l2e,lir),e(Ha,iir),e(Ha,i2e),e(i2e,dir),e(Ha,cir),e(Ha,d2e),e(d2e,fir),e(Ha,mir),e(mo,gir),e(mo,et),e(et,IT),e(IT,c2e),e(c2e,hir),e(IT,pir),e(IT,cW),e(cW,_ir),e(IT,uir),e(et,bir),e(et,NT),e(NT,f2e),e(f2e,vir),e(NT,Fir),e(NT,fW),e(fW,Tir),e(NT,Mir),e(et,Eir),e(et,qT),e(qT,m2e),e(m2e,Cir),e(qT,wir),e(qT,mW),e(mW,Air),e(qT,Lir),e(et,yir),e(et,jT),e(jT,g2e),e(g2e,xir),e(jT,$ir),e(jT,gW),e(gW,kir),e(jT,Sir),e(et,Rir),e(et,DT),e(DT,h2e),e(h2e,Pir),e(DT,Bir),e(DT,hW),e(hW,Iir),e(DT,Nir),e(mo,qir),e(mo,GT),e(GT,jir),e(GT,p2e),e(p2e,Dir),e(GT,Gir),e(GT,_2e),e(_2e,Oir),e(mo,Vir),M(OT,mo,null),b(f,YOe,u),b(f,$d,u),e($d,VT),e(VT,u2e),M(Sy,u2e,null),e($d,Xir),e($d,b2e),e(b2e,zir),b(f,KOe,u),b(f,Qo,u),M(Ry,Qo,null),e(Qo,Qir),e(Qo,kd),e(kd,Wir),e(kd,pW),e(pW,Hir),e(kd,Uir),e(kd,_W),e(_W,Jir),e(kd,Yir),e(Qo,Kir),e(Qo,Py),e(Py,Zir),e(Py,v2e),e(v2e,edr),e(Py,odr),e(Qo,rdr),e(Qo,Mt),M(By,Mt,null),e(Mt,tdr),e(Mt,F2e),e(F2e,adr),e(Mt,ndr),e(Mt,Sd),e(Sd,sdr),e(Sd,T2e),e(T2e,ldr),e(Sd,idr),e(Sd,uW),e(uW,ddr),e(Sd,cdr),e(Mt,fdr),M(XT,Mt,null),e(Qo,mdr),e(Qo,go),M(Iy,go,null),e(go,gdr),e(go,M2e),e(M2e,hdr),e(go,pdr),e(go,Ua),e(Ua,_dr),e(Ua,E2e),e(E2e,udr),e(Ua,bdr),e(Ua,C2e),e(C2e,vdr),e(Ua,Fdr),e(Ua,w2e),e(w2e,Tdr),e(Ua,Mdr),e(go,Edr),e(go,Le),e(Le,zT),e(zT,A2e),e(A2e,Cdr),e(zT,wdr),e(zT,bW),e(bW,Adr),e(zT,Ldr),e(Le,ydr),e(Le,QT),e(QT,L2e),e(L2e,xdr),e(QT,$dr),e(QT,vW),e(vW,kdr),e(QT,Sdr),e(Le,Rdr),e(Le,WT),e(WT,y2e),e(y2e,Pdr),e(WT,Bdr),e(WT,FW),e(FW,Idr),e(WT,Ndr),e(Le,qdr),e(Le,HT),e(HT,x2e),e(x2e,jdr),e(HT,Ddr),e(HT,TW),e(TW,Gdr),e(HT,Odr),e(Le,Vdr),e(Le,UT),e(UT,$2e),e($2e,Xdr),e(UT,zdr),e(UT,MW),e(MW,Qdr),e(UT,Wdr),e(Le,Hdr),e(Le,JT),e(JT,k2e),e(k2e,Udr),e(JT,Jdr),e(JT,EW),e(EW,Ydr),e(JT,Kdr),e(Le,Zdr),e(Le,YT),e(YT,S2e),e(S2e,ecr),e(YT,ocr),e(YT,CW),e(CW,rcr),e(YT,tcr),e(Le,acr),e(Le,KT),e(KT,R2e),e(R2e,ncr),e(KT,scr),e(KT,wW),e(wW,lcr),e(KT,icr),e(Le,dcr),e(Le,ZT),e(ZT,P2e),e(P2e,ccr),e(ZT,fcr),e(ZT,AW),e(AW,mcr),e(ZT,gcr),e(Le,hcr),e(Le,e9),e(e9,B2e),e(B2e,pcr),e(e9,_cr),e(e9,LW),e(LW,ucr),e(e9,bcr),e(go,vcr),e(go,o9),e(o9,Fcr),e(o9,I2e),e(I2e,Tcr),e(o9,Mcr),e(o9,N2e),e(N2e,Ecr),e(go,Ccr),M(r9,go,null),b(f,ZOe,u),b(f,Rd,u),e(Rd,t9),e(t9,q2e),M(Ny,q2e,null),e(Rd,wcr),e(Rd,j2e),e(j2e,Acr),b(f,eVe,u),b(f,Wo,u),M(qy,Wo,null),e(Wo,Lcr),e(Wo,Pd),e(Pd,ycr),e(Pd,yW),e(yW,xcr),e(Pd,$cr),e(Pd,xW),e(xW,kcr),e(Pd,Scr),e(Wo,Rcr),e(Wo,jy),e(jy,Pcr),e(jy,D2e),e(D2e,Bcr),e(jy,Icr),e(Wo,Ncr),e(Wo,Et),M(Dy,Et,null),e(Et,qcr),e(Et,G2e),e(G2e,jcr),e(Et,Dcr),e(Et,Bd),e(Bd,Gcr),e(Bd,O2e),e(O2e,Ocr),e(Bd,Vcr),e(Bd,$W),e($W,Xcr),e(Bd,zcr),e(Et,Qcr),M(a9,Et,null),e(Wo,Wcr),e(Wo,ho),M(Gy,ho,null),e(ho,Hcr),e(ho,V2e),e(V2e,Ucr),e(ho,Jcr),e(ho,Ja),e(Ja,Ycr),e(Ja,X2e),e(X2e,Kcr),e(Ja,Zcr),e(Ja,z2e),e(z2e,efr),e(Ja,ofr),e(Ja,Q2e),e(Q2e,rfr),e(Ja,tfr),e(ho,afr),e(ho,Oy),e(Oy,n9),e(n9,W2e),e(W2e,nfr),e(n9,sfr),e(n9,kW),e(kW,lfr),e(n9,ifr),e(Oy,dfr),e(Oy,s9),e(s9,H2e),e(H2e,cfr),e(s9,ffr),e(s9,SW),e(SW,mfr),e(s9,gfr),e(ho,hfr),e(ho,l9),e(l9,pfr),e(l9,U2e),e(U2e,_fr),e(l9,ufr),e(l9,J2e),e(J2e,bfr),e(ho,vfr),M(i9,ho,null),b(f,oVe,u),b(f,Id,u),e(Id,d9),e(d9,Y2e),M(Vy,Y2e,null),e(Id,Ffr),e(Id,K2e),e(K2e,Tfr),b(f,rVe,u),b(f,Ho,u),M(Xy,Ho,null),e(Ho,Mfr),e(Ho,Nd),e(Nd,Efr),e(Nd,RW),e(RW,Cfr),e(Nd,wfr),e(Nd,PW),e(PW,Afr),e(Nd,Lfr),e(Ho,yfr),e(Ho,zy),e(zy,xfr),e(zy,Z2e),e(Z2e,$fr),e(zy,kfr),e(Ho,Sfr),e(Ho,Ct),M(Qy,Ct,null),e(Ct,Rfr),e(Ct,ebe),e(ebe,Pfr),e(Ct,Bfr),e(Ct,qd),e(qd,Ifr),e(qd,obe),e(obe,Nfr),e(qd,qfr),e(qd,BW),e(BW,jfr),e(qd,Dfr),e(Ct,Gfr),M(c9,Ct,null),e(Ho,Ofr),e(Ho,po),M(Wy,po,null),e(po,Vfr),e(po,rbe),e(rbe,Xfr),e(po,zfr),e(po,Ya),e(Ya,Qfr),e(Ya,tbe),e(tbe,Wfr),e(Ya,Hfr),e(Ya,abe),e(abe,Ufr),e(Ya,Jfr),e(Ya,nbe),e(nbe,Yfr),e(Ya,Kfr),e(po,Zfr),e(po,ot),e(ot,f9),e(f9,sbe),e(sbe,emr),e(f9,omr),e(f9,IW),e(IW,rmr),e(f9,tmr),e(ot,amr),e(ot,m9),e(m9,lbe),e(lbe,nmr),e(m9,smr),e(m9,NW),e(NW,lmr),e(m9,imr),e(ot,dmr),e(ot,g9),e(g9,ibe),e(ibe,cmr),e(g9,fmr),e(g9,qW),e(qW,mmr),e(g9,gmr),e(ot,hmr),e(ot,h9),e(h9,dbe),e(dbe,pmr),e(h9,_mr),e(h9,jW),e(jW,umr),e(h9,bmr),e(ot,vmr),e(ot,p9),e(p9,cbe),e(cbe,Fmr),e(p9,Tmr),e(p9,DW),e(DW,Mmr),e(p9,Emr),e(po,Cmr),e(po,_9),e(_9,wmr),e(_9,fbe),e(fbe,Amr),e(_9,Lmr),e(_9,mbe),e(mbe,ymr),e(po,xmr),M(u9,po,null),b(f,tVe,u),b(f,jd,u),e(jd,b9),e(b9,gbe),M(Hy,gbe,null),e(jd,$mr),e(jd,hbe),e(hbe,kmr),b(f,aVe,u),b(f,Uo,u),M(Uy,Uo,null),e(Uo,Smr),e(Uo,Dd),e(Dd,Rmr),e(Dd,GW),e(GW,Pmr),e(Dd,Bmr),e(Dd,OW),e(OW,Imr),e(Dd,Nmr),e(Uo,qmr),e(Uo,Jy),e(Jy,jmr),e(Jy,pbe),e(pbe,Dmr),e(Jy,Gmr),e(Uo,Omr),e(Uo,wt),M(Yy,wt,null),e(wt,Vmr),e(wt,_be),e(_be,Xmr),e(wt,zmr),e(wt,Gd),e(Gd,Qmr),e(Gd,ube),e(ube,Wmr),e(Gd,Hmr),e(Gd,VW),e(VW,Umr),e(Gd,Jmr),e(wt,Ymr),M(v9,wt,null),e(Uo,Kmr),e(Uo,_o),M(Ky,_o,null),e(_o,Zmr),e(_o,bbe),e(bbe,egr),e(_o,ogr),e(_o,Ka),e(Ka,rgr),e(Ka,vbe),e(vbe,tgr),e(Ka,agr),e(Ka,Fbe),e(Fbe,ngr),e(Ka,sgr),e(Ka,Tbe),e(Tbe,lgr),e(Ka,igr),e(_o,dgr),e(_o,Od),e(Od,F9),e(F9,Mbe),e(Mbe,cgr),e(F9,fgr),e(F9,XW),e(XW,mgr),e(F9,ggr),e(Od,hgr),e(Od,T9),e(T9,Ebe),e(Ebe,pgr),e(T9,_gr),e(T9,zW),e(zW,ugr),e(T9,bgr),e(Od,vgr),e(Od,M9),e(M9,Cbe),e(Cbe,Fgr),e(M9,Tgr),e(M9,QW),e(QW,Mgr),e(M9,Egr),e(_o,Cgr),e(_o,E9),e(E9,wgr),e(E9,wbe),e(wbe,Agr),e(E9,Lgr),e(E9,Abe),e(Abe,ygr),e(_o,xgr),M(C9,_o,null),b(f,nVe,u),b(f,Vd,u),e(Vd,w9),e(w9,Lbe),M(Zy,Lbe,null),e(Vd,$gr),e(Vd,ybe),e(ybe,kgr),b(f,sVe,u),b(f,Jo,u),M(e8,Jo,null),e(Jo,Sgr),e(Jo,Xd),e(Xd,Rgr),e(Xd,WW),e(WW,Pgr),e(Xd,Bgr),e(Xd,HW),e(HW,Igr),e(Xd,Ngr),e(Jo,qgr),e(Jo,o8),e(o8,jgr),e(o8,xbe),e(xbe,Dgr),e(o8,Ggr),e(Jo,Ogr),e(Jo,At),M(r8,At,null),e(At,Vgr),e(At,$be),e($be,Xgr),e(At,zgr),e(At,zd),e(zd,Qgr),e(zd,kbe),e(kbe,Wgr),e(zd,Hgr),e(zd,UW),e(UW,Ugr),e(zd,Jgr),e(At,Ygr),M(A9,At,null),e(Jo,Kgr),e(Jo,uo),M(t8,uo,null),e(uo,Zgr),e(uo,Sbe),e(Sbe,ehr),e(uo,ohr),e(uo,Za),e(Za,rhr),e(Za,Rbe),e(Rbe,thr),e(Za,ahr),e(Za,Pbe),e(Pbe,nhr),e(Za,shr),e(Za,Bbe),e(Bbe,lhr),e(Za,ihr),e(uo,dhr),e(uo,a8),e(a8,L9),e(L9,Ibe),e(Ibe,chr),e(L9,fhr),e(L9,JW),e(JW,mhr),e(L9,ghr),e(a8,hhr),e(a8,y9),e(y9,Nbe),e(Nbe,phr),e(y9,_hr),e(y9,YW),e(YW,uhr),e(y9,bhr),e(uo,vhr),e(uo,x9),e(x9,Fhr),e(x9,qbe),e(qbe,Thr),e(x9,Mhr),e(x9,jbe),e(jbe,Ehr),e(uo,Chr),M($9,uo,null),b(f,lVe,u),b(f,Qd,u),e(Qd,k9),e(k9,Dbe),M(n8,Dbe,null),e(Qd,whr),e(Qd,Gbe),e(Gbe,Ahr),b(f,iVe,u),b(f,Yo,u),M(s8,Yo,null),e(Yo,Lhr),e(Yo,Wd),e(Wd,yhr),e(Wd,KW),e(KW,xhr),e(Wd,$hr),e(Wd,ZW),e(ZW,khr),e(Wd,Shr),e(Yo,Rhr),e(Yo,l8),e(l8,Phr),e(l8,Obe),e(Obe,Bhr),e(l8,Ihr),e(Yo,Nhr),e(Yo,Lt),M(i8,Lt,null),e(Lt,qhr),e(Lt,Vbe),e(Vbe,jhr),e(Lt,Dhr),e(Lt,Hd),e(Hd,Ghr),e(Hd,Xbe),e(Xbe,Ohr),e(Hd,Vhr),e(Hd,eH),e(eH,Xhr),e(Hd,zhr),e(Lt,Qhr),M(S9,Lt,null),e(Yo,Whr),e(Yo,bo),M(d8,bo,null),e(bo,Hhr),e(bo,zbe),e(zbe,Uhr),e(bo,Jhr),e(bo,en),e(en,Yhr),e(en,Qbe),e(Qbe,Khr),e(en,Zhr),e(en,Wbe),e(Wbe,epr),e(en,opr),e(en,Hbe),e(Hbe,rpr),e(en,tpr),e(bo,apr),e(bo,Ube),e(Ube,R9),e(R9,Jbe),e(Jbe,npr),e(R9,spr),e(R9,oH),e(oH,lpr),e(R9,ipr),e(bo,dpr),e(bo,P9),e(P9,cpr),e(P9,Ybe),e(Ybe,fpr),e(P9,mpr),e(P9,Kbe),e(Kbe,gpr),e(bo,hpr),M(B9,bo,null),b(f,dVe,u),b(f,Ud,u),e(Ud,I9),e(I9,Zbe),M(c8,Zbe,null),e(Ud,ppr),e(Ud,eve),e(eve,_pr),b(f,cVe,u),b(f,Ko,u),M(f8,Ko,null),e(Ko,upr),e(Ko,Jd),e(Jd,bpr),e(Jd,rH),e(rH,vpr),e(Jd,Fpr),e(Jd,tH),e(tH,Tpr),e(Jd,Mpr),e(Ko,Epr),e(Ko,m8),e(m8,Cpr),e(m8,ove),e(ove,wpr),e(m8,Apr),e(Ko,Lpr),e(Ko,yt),M(g8,yt,null),e(yt,ypr),e(yt,rve),e(rve,xpr),e(yt,$pr),e(yt,Yd),e(Yd,kpr),e(Yd,tve),e(tve,Spr),e(Yd,Rpr),e(Yd,aH),e(aH,Ppr),e(Yd,Bpr),e(yt,Ipr),M(N9,yt,null),e(Ko,Npr),e(Ko,vo),M(h8,vo,null),e(vo,qpr),e(vo,ave),e(ave,jpr),e(vo,Dpr),e(vo,on),e(on,Gpr),e(on,nve),e(nve,Opr),e(on,Vpr),e(on,sve),e(sve,Xpr),e(on,zpr),e(on,lve),e(lve,Qpr),e(on,Wpr),e(vo,Hpr),e(vo,rn),e(rn,q9),e(q9,ive),e(ive,Upr),e(q9,Jpr),e(q9,nH),e(nH,Ypr),e(q9,Kpr),e(rn,Zpr),e(rn,j9),e(j9,dve),e(dve,e_r),e(j9,o_r),e(j9,sH),e(sH,r_r),e(j9,t_r),e(rn,a_r),e(rn,D9),e(D9,cve),e(cve,n_r),e(D9,s_r),e(D9,lH),e(lH,l_r),e(D9,i_r),e(rn,d_r),e(rn,G9),e(G9,fve),e(fve,c_r),e(G9,f_r),e(G9,iH),e(iH,m_r),e(G9,g_r),e(vo,h_r),e(vo,O9),e(O9,p_r),e(O9,mve),e(mve,__r),e(O9,u_r),e(O9,gve),e(gve,b_r),e(vo,v_r),M(V9,vo,null),b(f,fVe,u),b(f,Kd,u),e(Kd,X9),e(X9,hve),M(p8,hve,null),e(Kd,F_r),e(Kd,pve),e(pve,T_r),b(f,mVe,u),b(f,Zo,u),M(_8,Zo,null),e(Zo,M_r),e(Zo,Zd),e(Zd,E_r),e(Zd,dH),e(dH,C_r),e(Zd,w_r),e(Zd,cH),e(cH,A_r),e(Zd,L_r),e(Zo,y_r),e(Zo,u8),e(u8,x_r),e(u8,_ve),e(_ve,$_r),e(u8,k_r),e(Zo,S_r),e(Zo,xt),M(b8,xt,null),e(xt,R_r),e(xt,uve),e(uve,P_r),e(xt,B_r),e(xt,ec),e(ec,I_r),e(ec,bve),e(bve,N_r),e(ec,q_r),e(ec,fH),e(fH,j_r),e(ec,D_r),e(xt,G_r),M(z9,xt,null),e(Zo,O_r),e(Zo,Fo),M(v8,Fo,null),e(Fo,V_r),e(Fo,vve),e(vve,X_r),e(Fo,z_r),e(Fo,tn),e(tn,Q_r),e(tn,Fve),e(Fve,W_r),e(tn,H_r),e(tn,Tve),e(Tve,U_r),e(tn,J_r),e(tn,Mve),e(Mve,Y_r),e(tn,K_r),e(Fo,Z_r),e(Fo,Eve),e(Eve,Q9),e(Q9,Cve),e(Cve,eur),e(Q9,our),e(Q9,mH),e(mH,rur),e(Q9,tur),e(Fo,aur),e(Fo,W9),e(W9,nur),e(W9,wve),e(wve,sur),e(W9,lur),e(W9,Ave),e(Ave,iur),e(Fo,dur),M(H9,Fo,null),b(f,gVe,u),b(f,oc,u),e(oc,U9),e(U9,Lve),M(F8,Lve,null),e(oc,cur),e(oc,yve),e(yve,fur),b(f,hVe,u),b(f,er,u),M(T8,er,null),e(er,mur),e(er,rc),e(rc,gur),e(rc,gH),e(gH,hur),e(rc,pur),e(rc,hH),e(hH,_ur),e(rc,uur),e(er,bur),e(er,M8),e(M8,vur),e(M8,xve),e(xve,Fur),e(M8,Tur),e(er,Mur),e(er,$t),M(E8,$t,null),e($t,Eur),e($t,$ve),e($ve,Cur),e($t,wur),e($t,tc),e(tc,Aur),e(tc,kve),e(kve,Lur),e(tc,yur),e(tc,pH),e(pH,xur),e(tc,$ur),e($t,kur),M(J9,$t,null),e(er,Sur),e(er,yr),M(C8,yr,null),e(yr,Rur),e(yr,Sve),e(Sve,Pur),e(yr,Bur),e(yr,an),e(an,Iur),e(an,Rve),e(Rve,Nur),e(an,qur),e(an,Pve),e(Pve,jur),e(an,Dur),e(an,Bve),e(Bve,Gur),e(an,Our),e(yr,Vur),e(yr,j),e(j,Y9),e(Y9,Ive),e(Ive,Xur),e(Y9,zur),e(Y9,_H),e(_H,Qur),e(Y9,Wur),e(j,Hur),e(j,K9),e(K9,Nve),e(Nve,Uur),e(K9,Jur),e(K9,uH),e(uH,Yur),e(K9,Kur),e(j,Zur),e(j,Z9),e(Z9,qve),e(qve,e7r),e(Z9,o7r),e(Z9,bH),e(bH,r7r),e(Z9,t7r),e(j,a7r),e(j,eM),e(eM,jve),e(jve,n7r),e(eM,s7r),e(eM,vH),e(vH,l7r),e(eM,i7r),e(j,d7r),e(j,oM),e(oM,Dve),e(Dve,c7r),e(oM,f7r),e(oM,FH),e(FH,m7r),e(oM,g7r),e(j,h7r),e(j,rM),e(rM,Gve),e(Gve,p7r),e(rM,_7r),e(rM,TH),e(TH,u7r),e(rM,b7r),e(j,v7r),e(j,tM),e(tM,Ove),e(Ove,F7r),e(tM,T7r),e(tM,MH),e(MH,M7r),e(tM,E7r),e(j,C7r),e(j,aM),e(aM,Vve),e(Vve,w7r),e(aM,A7r),e(aM,EH),e(EH,L7r),e(aM,y7r),e(j,x7r),e(j,nM),e(nM,Xve),e(Xve,$7r),e(nM,k7r),e(nM,CH),e(CH,S7r),e(nM,R7r),e(j,P7r),e(j,sM),e(sM,zve),e(zve,B7r),e(sM,I7r),e(sM,wH),e(wH,N7r),e(sM,q7r),e(j,j7r),e(j,lM),e(lM,Qve),e(Qve,D7r),e(lM,G7r),e(lM,AH),e(AH,O7r),e(lM,V7r),e(j,X7r),e(j,iM),e(iM,Wve),e(Wve,z7r),e(iM,Q7r),e(iM,LH),e(LH,W7r),e(iM,H7r),e(j,U7r),e(j,dM),e(dM,Hve),e(Hve,J7r),e(dM,Y7r),e(dM,yH),e(yH,K7r),e(dM,Z7r),e(j,e1r),e(j,cM),e(cM,Uve),e(Uve,o1r),e(cM,r1r),e(cM,xH),e(xH,t1r),e(cM,a1r),e(j,n1r),e(j,fM),e(fM,Jve),e(Jve,s1r),e(fM,l1r),e(fM,$H),e($H,i1r),e(fM,d1r),e(j,c1r),e(j,mM),e(mM,Yve),e(Yve,f1r),e(mM,m1r),e(mM,kH),e(kH,g1r),e(mM,h1r),e(j,p1r),e(j,gM),e(gM,Kve),e(Kve,_1r),e(gM,u1r),e(gM,SH),e(SH,b1r),e(gM,v1r),e(j,F1r),e(j,Ws),e(Ws,Zve),e(Zve,T1r),e(Ws,M1r),e(Ws,RH),e(RH,E1r),e(Ws,C1r),e(Ws,PH),e(PH,w1r),e(Ws,A1r),e(j,L1r),e(j,hM),e(hM,eFe),e(eFe,y1r),e(hM,x1r),e(hM,BH),e(BH,$1r),e(hM,k1r),e(j,S1r),e(j,pM),e(pM,oFe),e(oFe,R1r),e(pM,P1r),e(pM,IH),e(IH,B1r),e(pM,I1r),e(j,N1r),e(j,_M),e(_M,rFe),e(rFe,q1r),e(_M,j1r),e(_M,NH),e(NH,D1r),e(_M,G1r),e(j,O1r),e(j,uM),e(uM,tFe),e(tFe,V1r),e(uM,X1r),e(uM,qH),e(qH,z1r),e(uM,Q1r),e(j,W1r),e(j,bM),e(bM,aFe),e(aFe,H1r),e(bM,U1r),e(bM,jH),e(jH,J1r),e(bM,Y1r),e(j,K1r),e(j,vM),e(vM,nFe),e(nFe,Z1r),e(vM,e2r),e(vM,DH),e(DH,o2r),e(vM,r2r),e(j,t2r),e(j,FM),e(FM,sFe),e(sFe,a2r),e(FM,n2r),e(FM,GH),e(GH,s2r),e(FM,l2r),e(j,i2r),e(j,TM),e(TM,lFe),e(lFe,d2r),e(TM,c2r),e(TM,OH),e(OH,f2r),e(TM,m2r),e(j,g2r),e(j,MM),e(MM,iFe),e(iFe,h2r),e(MM,p2r),e(MM,VH),e(VH,_2r),e(MM,u2r),e(j,b2r),e(j,EM),e(EM,dFe),e(dFe,v2r),e(EM,F2r),e(EM,XH),e(XH,T2r),e(EM,M2r),e(j,E2r),e(j,CM),e(CM,cFe),e(cFe,C2r),e(CM,w2r),e(CM,zH),e(zH,A2r),e(CM,L2r),e(j,y2r),e(j,wM),e(wM,fFe),e(fFe,x2r),e(wM,$2r),e(wM,QH),e(QH,k2r),e(wM,S2r),e(j,R2r),e(j,AM),e(AM,mFe),e(mFe,P2r),e(AM,B2r),e(AM,WH),e(WH,I2r),e(AM,N2r),e(j,q2r),e(j,LM),e(LM,gFe),e(gFe,j2r),e(LM,D2r),e(LM,HH),e(HH,G2r),e(LM,O2r),e(j,V2r),e(j,yM),e(yM,hFe),e(hFe,X2r),e(yM,z2r),e(yM,UH),e(UH,Q2r),e(yM,W2r),e(j,H2r),e(j,xM),e(xM,pFe),e(pFe,U2r),e(xM,J2r),e(xM,JH),e(JH,Y2r),e(xM,K2r),e(j,Z2r),e(j,$M),e($M,_Fe),e(_Fe,ebr),e($M,obr),e($M,YH),e(YH,rbr),e($M,tbr),e(j,abr),e(j,kM),e(kM,uFe),e(uFe,nbr),e(kM,sbr),e(kM,KH),e(KH,lbr),e(kM,ibr),e(j,dbr),e(j,SM),e(SM,bFe),e(bFe,cbr),e(SM,fbr),e(SM,ZH),e(ZH,mbr),e(SM,gbr),e(j,hbr),e(j,RM),e(RM,vFe),e(vFe,pbr),e(RM,_br),e(RM,eU),e(eU,ubr),e(RM,bbr),e(j,vbr),e(j,PM),e(PM,FFe),e(FFe,Fbr),e(PM,Tbr),e(PM,oU),e(oU,Mbr),e(PM,Ebr),e(j,Cbr),e(j,BM),e(BM,TFe),e(TFe,wbr),e(BM,Abr),e(BM,rU),e(rU,Lbr),e(BM,ybr),e(j,xbr),e(j,IM),e(IM,MFe),e(MFe,$br),e(IM,kbr),e(IM,tU),e(tU,Sbr),e(IM,Rbr),e(j,Pbr),e(j,NM),e(NM,EFe),e(EFe,Bbr),e(NM,Ibr),e(NM,aU),e(aU,Nbr),e(NM,qbr),e(j,jbr),e(j,qM),e(qM,CFe),e(CFe,Dbr),e(qM,Gbr),e(qM,nU),e(nU,Obr),e(qM,Vbr),e(j,Xbr),e(j,jM),e(jM,wFe),e(wFe,zbr),e(jM,Qbr),e(jM,sU),e(sU,Wbr),e(jM,Hbr),e(j,Ubr),e(j,DM),e(DM,AFe),e(AFe,Jbr),e(DM,Ybr),e(DM,lU),e(lU,Kbr),e(DM,Zbr),e(j,evr),e(j,GM),e(GM,LFe),e(LFe,ovr),e(GM,rvr),e(GM,iU),e(iU,tvr),e(GM,avr),e(j,nvr),e(j,OM),e(OM,yFe),e(yFe,svr),e(OM,lvr),e(OM,dU),e(dU,ivr),e(OM,dvr),e(yr,cvr),M(VM,yr,null),b(f,pVe,u),b(f,ac,u),e(ac,XM),e(XM,xFe),M(w8,xFe,null),e(ac,fvr),e(ac,$Fe),e($Fe,mvr),b(f,_Ve,u),b(f,or,u),M(A8,or,null),e(or,gvr),e(or,nc),e(nc,hvr),e(nc,cU),e(cU,pvr),e(nc,_vr),e(nc,fU),e(fU,uvr),e(nc,bvr),e(or,vvr),e(or,L8),e(L8,Fvr),e(L8,kFe),e(kFe,Tvr),e(L8,Mvr),e(or,Evr),e(or,kt),M(y8,kt,null),e(kt,Cvr),e(kt,SFe),e(SFe,wvr),e(kt,Avr),e(kt,sc),e(sc,Lvr),e(sc,RFe),e(RFe,yvr),e(sc,xvr),e(sc,mU),e(mU,$vr),e(sc,kvr),e(kt,Svr),M(zM,kt,null),e(or,Rvr),e(or,xr),M(x8,xr,null),e(xr,Pvr),e(xr,PFe),e(PFe,Bvr),e(xr,Ivr),e(xr,nn),e(nn,Nvr),e(nn,BFe),e(BFe,qvr),e(nn,jvr),e(nn,IFe),e(IFe,Dvr),e(nn,Gvr),e(nn,NFe),e(NFe,Ovr),e(nn,Vvr),e(xr,Xvr),e(xr,se),e(se,QM),e(QM,qFe),e(qFe,zvr),e(QM,Qvr),e(QM,gU),e(gU,Wvr),e(QM,Hvr),e(se,Uvr),e(se,WM),e(WM,jFe),e(jFe,Jvr),e(WM,Yvr),e(WM,hU),e(hU,Kvr),e(WM,Zvr),e(se,eFr),e(se,HM),e(HM,DFe),e(DFe,oFr),e(HM,rFr),e(HM,pU),e(pU,tFr),e(HM,aFr),e(se,nFr),e(se,UM),e(UM,GFe),e(GFe,sFr),e(UM,lFr),e(UM,_U),e(_U,iFr),e(UM,dFr),e(se,cFr),e(se,JM),e(JM,OFe),e(OFe,fFr),e(JM,mFr),e(JM,uU),e(uU,gFr),e(JM,hFr),e(se,pFr),e(se,YM),e(YM,VFe),e(VFe,_Fr),e(YM,uFr),e(YM,bU),e(bU,bFr),e(YM,vFr),e(se,FFr),e(se,KM),e(KM,XFe),e(XFe,TFr),e(KM,MFr),e(KM,vU),e(vU,EFr),e(KM,CFr),e(se,wFr),e(se,ZM),e(ZM,zFe),e(zFe,AFr),e(ZM,LFr),e(ZM,FU),e(FU,yFr),e(ZM,xFr),e(se,$Fr),e(se,eE),e(eE,QFe),e(QFe,kFr),e(eE,SFr),e(eE,TU),e(TU,RFr),e(eE,PFr),e(se,BFr),e(se,oE),e(oE,WFe),e(WFe,IFr),e(oE,NFr),e(oE,MU),e(MU,qFr),e(oE,jFr),e(se,DFr),e(se,rE),e(rE,HFe),e(HFe,GFr),e(rE,OFr),e(rE,EU),e(EU,VFr),e(rE,XFr),e(se,zFr),e(se,tE),e(tE,UFe),e(UFe,QFr),e(tE,WFr),e(tE,CU),e(CU,HFr),e(tE,UFr),e(se,JFr),e(se,aE),e(aE,JFe),e(JFe,YFr),e(aE,KFr),e(aE,wU),e(wU,ZFr),e(aE,eTr),e(se,oTr),e(se,nE),e(nE,YFe),e(YFe,rTr),e(nE,tTr),e(nE,AU),e(AU,aTr),e(nE,nTr),e(se,sTr),e(se,sE),e(sE,KFe),e(KFe,lTr),e(sE,iTr),e(sE,LU),e(LU,dTr),e(sE,cTr),e(se,fTr),e(se,lE),e(lE,ZFe),e(ZFe,mTr),e(lE,gTr),e(lE,yU),e(yU,hTr),e(lE,pTr),e(se,_Tr),e(se,iE),e(iE,eTe),e(eTe,uTr),e(iE,bTr),e(iE,xU),e(xU,vTr),e(iE,FTr),e(se,TTr),e(se,dE),e(dE,oTe),e(oTe,MTr),e(dE,ETr),e(dE,$U),e($U,CTr),e(dE,wTr),e(se,ATr),e(se,cE),e(cE,rTe),e(rTe,LTr),e(cE,yTr),e(cE,kU),e(kU,xTr),e(cE,$Tr),e(se,kTr),e(se,fE),e(fE,tTe),e(tTe,STr),e(fE,RTr),e(fE,SU),e(SU,PTr),e(fE,BTr),e(se,ITr),e(se,mE),e(mE,aTe),e(aTe,NTr),e(mE,qTr),e(mE,RU),e(RU,jTr),e(mE,DTr),e(se,GTr),e(se,gE),e(gE,nTe),e(nTe,OTr),e(gE,VTr),e(gE,PU),e(PU,XTr),e(gE,zTr),e(se,QTr),e(se,hE),e(hE,sTe),e(sTe,WTr),e(hE,HTr),e(hE,BU),e(BU,UTr),e(hE,JTr),e(xr,YTr),M(pE,xr,null),b(f,uVe,u),b(f,lc,u),e(lc,_E),e(_E,lTe),M($8,lTe,null),e(lc,KTr),e(lc,iTe),e(iTe,ZTr),b(f,bVe,u),b(f,rr,u),M(k8,rr,null),e(rr,e9r),e(rr,ic),e(ic,o9r),e(ic,IU),e(IU,r9r),e(ic,t9r),e(ic,NU),e(NU,a9r),e(ic,n9r),e(rr,s9r),e(rr,S8),e(S8,l9r),e(S8,dTe),e(dTe,i9r),e(S8,d9r),e(rr,c9r),e(rr,St),M(R8,St,null),e(St,f9r),e(St,cTe),e(cTe,m9r),e(St,g9r),e(St,dc),e(dc,h9r),e(dc,fTe),e(fTe,p9r),e(dc,_9r),e(dc,qU),e(qU,u9r),e(dc,b9r),e(St,v9r),M(uE,St,null),e(rr,F9r),e(rr,$r),M(P8,$r,null),e($r,T9r),e($r,mTe),e(mTe,M9r),e($r,E9r),e($r,sn),e(sn,C9r),e(sn,gTe),e(gTe,w9r),e(sn,A9r),e(sn,hTe),e(hTe,L9r),e(sn,y9r),e(sn,pTe),e(pTe,x9r),e(sn,$9r),e($r,k9r),e($r,Me),e(Me,bE),e(bE,_Te),e(_Te,S9r),e(bE,R9r),e(bE,jU),e(jU,P9r),e(bE,B9r),e(Me,I9r),e(Me,vE),e(vE,uTe),e(uTe,N9r),e(vE,q9r),e(vE,DU),e(DU,j9r),e(vE,D9r),e(Me,G9r),e(Me,FE),e(FE,bTe),e(bTe,O9r),e(FE,V9r),e(FE,GU),e(GU,X9r),e(FE,z9r),e(Me,Q9r),e(Me,TE),e(TE,vTe),e(vTe,W9r),e(TE,H9r),e(TE,OU),e(OU,U9r),e(TE,J9r),e(Me,Y9r),e(Me,ME),e(ME,FTe),e(FTe,K9r),e(ME,Z9r),e(ME,VU),e(VU,eMr),e(ME,oMr),e(Me,rMr),e(Me,EE),e(EE,TTe),e(TTe,tMr),e(EE,aMr),e(EE,XU),e(XU,nMr),e(EE,sMr),e(Me,lMr),e(Me,CE),e(CE,MTe),e(MTe,iMr),e(CE,dMr),e(CE,zU),e(zU,cMr),e(CE,fMr),e(Me,mMr),e(Me,wE),e(wE,ETe),e(ETe,gMr),e(wE,hMr),e(wE,QU),e(QU,pMr),e(wE,_Mr),e(Me,uMr),e(Me,AE),e(AE,CTe),e(CTe,bMr),e(AE,vMr),e(AE,WU),e(WU,FMr),e(AE,TMr),e(Me,MMr),e(Me,LE),e(LE,wTe),e(wTe,EMr),e(LE,CMr),e(LE,HU),e(HU,wMr),e(LE,AMr),e(Me,LMr),e(Me,yE),e(yE,ATe),e(ATe,yMr),e(yE,xMr),e(yE,UU),e(UU,$Mr),e(yE,kMr),e(Me,SMr),e(Me,xE),e(xE,LTe),e(LTe,RMr),e(xE,PMr),e(xE,JU),e(JU,BMr),e(xE,IMr),e(Me,NMr),e(Me,$E),e($E,yTe),e(yTe,qMr),e($E,jMr),e($E,YU),e(YU,DMr),e($E,GMr),e($r,OMr),M(kE,$r,null),b(f,vVe,u),b(f,cc,u),e(cc,SE),e(SE,xTe),M(B8,xTe,null),e(cc,VMr),e(cc,$Te),e($Te,XMr),b(f,FVe,u),b(f,tr,u),M(I8,tr,null),e(tr,zMr),e(tr,fc),e(fc,QMr),e(fc,KU),e(KU,WMr),e(fc,HMr),e(fc,ZU),e(ZU,UMr),e(fc,JMr),e(tr,YMr),e(tr,N8),e(N8,KMr),e(N8,kTe),e(kTe,ZMr),e(N8,eEr),e(tr,oEr),e(tr,Rt),M(q8,Rt,null),e(Rt,rEr),e(Rt,STe),e(STe,tEr),e(Rt,aEr),e(Rt,mc),e(mc,nEr),e(mc,RTe),e(RTe,sEr),e(mc,lEr),e(mc,eJ),e(eJ,iEr),e(mc,dEr),e(Rt,cEr),M(RE,Rt,null),e(tr,fEr),e(tr,kr),M(j8,kr,null),e(kr,mEr),e(kr,PTe),e(PTe,gEr),e(kr,hEr),e(kr,ln),e(ln,pEr),e(ln,BTe),e(BTe,_Er),e(ln,uEr),e(ln,ITe),e(ITe,bEr),e(ln,vEr),e(ln,NTe),e(NTe,FEr),e(ln,TEr),e(kr,MEr),e(kr,dn),e(dn,PE),e(PE,qTe),e(qTe,EEr),e(PE,CEr),e(PE,oJ),e(oJ,wEr),e(PE,AEr),e(dn,LEr),e(dn,BE),e(BE,jTe),e(jTe,yEr),e(BE,xEr),e(BE,rJ),e(rJ,$Er),e(BE,kEr),e(dn,SEr),e(dn,IE),e(IE,DTe),e(DTe,REr),e(IE,PEr),e(IE,tJ),e(tJ,BEr),e(IE,IEr),e(dn,NEr),e(dn,NE),e(NE,GTe),e(GTe,qEr),e(NE,jEr),e(NE,aJ),e(aJ,DEr),e(NE,GEr),e(kr,OEr),M(qE,kr,null),b(f,TVe,u),b(f,gc,u),e(gc,jE),e(jE,OTe),M(D8,OTe,null),e(gc,VEr),e(gc,VTe),e(VTe,XEr),b(f,MVe,u),b(f,ar,u),M(G8,ar,null),e(ar,zEr),e(ar,hc),e(hc,QEr),e(hc,nJ),e(nJ,WEr),e(hc,HEr),e(hc,sJ),e(sJ,UEr),e(hc,JEr),e(ar,YEr),e(ar,O8),e(O8,KEr),e(O8,XTe),e(XTe,ZEr),e(O8,e4r),e(ar,o4r),e(ar,Pt),M(V8,Pt,null),e(Pt,r4r),e(Pt,zTe),e(zTe,t4r),e(Pt,a4r),e(Pt,pc),e(pc,n4r),e(pc,QTe),e(QTe,s4r),e(pc,l4r),e(pc,lJ),e(lJ,i4r),e(pc,d4r),e(Pt,c4r),M(DE,Pt,null),e(ar,f4r),e(ar,Sr),M(X8,Sr,null),e(Sr,m4r),e(Sr,WTe),e(WTe,g4r),e(Sr,h4r),e(Sr,cn),e(cn,p4r),e(cn,HTe),e(HTe,_4r),e(cn,u4r),e(cn,UTe),e(UTe,b4r),e(cn,v4r),e(cn,JTe),e(JTe,F4r),e(cn,T4r),e(Sr,M4r),e(Sr,ie),e(ie,GE),e(GE,YTe),e(YTe,E4r),e(GE,C4r),e(GE,iJ),e(iJ,w4r),e(GE,A4r),e(ie,L4r),e(ie,OE),e(OE,KTe),e(KTe,y4r),e(OE,x4r),e(OE,dJ),e(dJ,$4r),e(OE,k4r),e(ie,S4r),e(ie,VE),e(VE,ZTe),e(ZTe,R4r),e(VE,P4r),e(VE,cJ),e(cJ,B4r),e(VE,I4r),e(ie,N4r),e(ie,XE),e(XE,e9e),e(e9e,q4r),e(XE,j4r),e(XE,fJ),e(fJ,D4r),e(XE,G4r),e(ie,O4r),e(ie,zE),e(zE,o9e),e(o9e,V4r),e(zE,X4r),e(zE,mJ),e(mJ,z4r),e(zE,Q4r),e(ie,W4r),e(ie,QE),e(QE,r9e),e(r9e,H4r),e(QE,U4r),e(QE,gJ),e(gJ,J4r),e(QE,Y4r),e(ie,K4r),e(ie,WE),e(WE,t9e),e(t9e,Z4r),e(WE,eCr),e(WE,hJ),e(hJ,oCr),e(WE,rCr),e(ie,tCr),e(ie,HE),e(HE,a9e),e(a9e,aCr),e(HE,nCr),e(HE,pJ),e(pJ,sCr),e(HE,lCr),e(ie,iCr),e(ie,UE),e(UE,n9e),e(n9e,dCr),e(UE,cCr),e(UE,_J),e(_J,fCr),e(UE,mCr),e(ie,gCr),e(ie,JE),e(JE,s9e),e(s9e,hCr),e(JE,pCr),e(JE,uJ),e(uJ,_Cr),e(JE,uCr),e(ie,bCr),e(ie,YE),e(YE,l9e),e(l9e,vCr),e(YE,FCr),e(YE,bJ),e(bJ,TCr),e(YE,MCr),e(ie,ECr),e(ie,KE),e(KE,i9e),e(i9e,CCr),e(KE,wCr),e(KE,vJ),e(vJ,ACr),e(KE,LCr),e(ie,yCr),e(ie,ZE),e(ZE,d9e),e(d9e,xCr),e(ZE,$Cr),e(ZE,FJ),e(FJ,kCr),e(ZE,SCr),e(ie,RCr),e(ie,e4),e(e4,c9e),e(c9e,PCr),e(e4,BCr),e(e4,TJ),e(TJ,ICr),e(e4,NCr),e(ie,qCr),e(ie,o4),e(o4,f9e),e(f9e,jCr),e(o4,DCr),e(o4,MJ),e(MJ,GCr),e(o4,OCr),e(ie,VCr),e(ie,r4),e(r4,m9e),e(m9e,XCr),e(r4,zCr),e(r4,EJ),e(EJ,QCr),e(r4,WCr),e(ie,HCr),e(ie,t4),e(t4,g9e),e(g9e,UCr),e(t4,JCr),e(t4,CJ),e(CJ,YCr),e(t4,KCr),e(ie,ZCr),e(ie,a4),e(a4,h9e),e(h9e,e5r),e(a4,o5r),e(a4,wJ),e(wJ,r5r),e(a4,t5r),e(ie,a5r),e(ie,n4),e(n4,p9e),e(p9e,n5r),e(n4,s5r),e(n4,AJ),e(AJ,l5r),e(n4,i5r),e(ie,d5r),e(ie,s4),e(s4,_9e),e(_9e,c5r),e(s4,f5r),e(s4,LJ),e(LJ,m5r),e(s4,g5r),e(Sr,h5r),M(l4,Sr,null),b(f,EVe,u),b(f,_c,u),e(_c,i4),e(i4,u9e),M(z8,u9e,null),e(_c,p5r),e(_c,b9e),e(b9e,_5r),b(f,CVe,u),b(f,nr,u),M(Q8,nr,null),e(nr,u5r),e(nr,uc),e(uc,b5r),e(uc,yJ),e(yJ,v5r),e(uc,F5r),e(uc,xJ),e(xJ,T5r),e(uc,M5r),e(nr,E5r),e(nr,W8),e(W8,C5r),e(W8,v9e),e(v9e,w5r),e(W8,A5r),e(nr,L5r),e(nr,Bt),M(H8,Bt,null),e(Bt,y5r),e(Bt,F9e),e(F9e,x5r),e(Bt,$5r),e(Bt,bc),e(bc,k5r),e(bc,T9e),e(T9e,S5r),e(bc,R5r),e(bc,$J),e($J,P5r),e(bc,B5r),e(Bt,I5r),M(d4,Bt,null),e(nr,N5r),e(nr,Rr),M(U8,Rr,null),e(Rr,q5r),e(Rr,M9e),e(M9e,j5r),e(Rr,D5r),e(Rr,fn),e(fn,G5r),e(fn,E9e),e(E9e,O5r),e(fn,V5r),e(fn,C9e),e(C9e,X5r),e(fn,z5r),e(fn,w9e),e(w9e,Q5r),e(fn,W5r),e(Rr,H5r),e(Rr,ye),e(ye,c4),e(c4,A9e),e(A9e,U5r),e(c4,J5r),e(c4,kJ),e(kJ,Y5r),e(c4,K5r),e(ye,Z5r),e(ye,f4),e(f4,L9e),e(L9e,e3r),e(f4,o3r),e(f4,SJ),e(SJ,r3r),e(f4,t3r),e(ye,a3r),e(ye,m4),e(m4,y9e),e(y9e,n3r),e(m4,s3r),e(m4,RJ),e(RJ,l3r),e(m4,i3r),e(ye,d3r),e(ye,g4),e(g4,x9e),e(x9e,c3r),e(g4,f3r),e(g4,PJ),e(PJ,m3r),e(g4,g3r),e(ye,h3r),e(ye,h4),e(h4,$9e),e($9e,p3r),e(h4,_3r),e(h4,BJ),e(BJ,u3r),e(h4,b3r),e(ye,v3r),e(ye,p4),e(p4,k9e),e(k9e,F3r),e(p4,T3r),e(p4,IJ),e(IJ,M3r),e(p4,E3r),e(ye,C3r),e(ye,_4),e(_4,S9e),e(S9e,w3r),e(_4,A3r),e(_4,NJ),e(NJ,L3r),e(_4,y3r),e(ye,x3r),e(ye,u4),e(u4,R9e),e(R9e,$3r),e(u4,k3r),e(u4,qJ),e(qJ,S3r),e(u4,R3r),e(ye,P3r),e(ye,b4),e(b4,P9e),e(P9e,B3r),e(b4,I3r),e(b4,jJ),e(jJ,N3r),e(b4,q3r),e(ye,j3r),e(ye,v4),e(v4,B9e),e(B9e,D3r),e(v4,G3r),e(v4,DJ),e(DJ,O3r),e(v4,V3r),e(Rr,X3r),M(F4,Rr,null),b(f,wVe,u),b(f,vc,u),e(vc,T4),e(T4,I9e),M(J8,I9e,null),e(vc,z3r),e(vc,N9e),e(N9e,Q3r),b(f,AVe,u),b(f,sr,u),M(Y8,sr,null),e(sr,W3r),e(sr,Fc),e(Fc,H3r),e(Fc,GJ),e(GJ,U3r),e(Fc,J3r),e(Fc,OJ),e(OJ,Y3r),e(Fc,K3r),e(sr,Z3r),e(sr,K8),e(K8,e0r),e(K8,q9e),e(q9e,o0r),e(K8,r0r),e(sr,t0r),e(sr,It),M(Z8,It,null),e(It,a0r),e(It,j9e),e(j9e,n0r),e(It,s0r),e(It,Tc),e(Tc,l0r),e(Tc,D9e),e(D9e,i0r),e(Tc,d0r),e(Tc,VJ),e(VJ,c0r),e(Tc,f0r),e(It,m0r),M(M4,It,null),e(sr,g0r),e(sr,Pr),M(ex,Pr,null),e(Pr,h0r),e(Pr,G9e),e(G9e,p0r),e(Pr,_0r),e(Pr,mn),e(mn,u0r),e(mn,O9e),e(O9e,b0r),e(mn,v0r),e(mn,V9e),e(V9e,F0r),e(mn,T0r),e(mn,X9e),e(X9e,M0r),e(mn,E0r),e(Pr,C0r),e(Pr,ae),e(ae,E4),e(E4,z9e),e(z9e,w0r),e(E4,A0r),e(E4,XJ),e(XJ,L0r),e(E4,y0r),e(ae,x0r),e(ae,C4),e(C4,Q9e),e(Q9e,$0r),e(C4,k0r),e(C4,zJ),e(zJ,S0r),e(C4,R0r),e(ae,P0r),e(ae,w4),e(w4,W9e),e(W9e,B0r),e(w4,I0r),e(w4,QJ),e(QJ,N0r),e(w4,q0r),e(ae,j0r),e(ae,A4),e(A4,H9e),e(H9e,D0r),e(A4,G0r),e(A4,WJ),e(WJ,O0r),e(A4,V0r),e(ae,X0r),e(ae,L4),e(L4,U9e),e(U9e,z0r),e(L4,Q0r),e(L4,HJ),e(HJ,W0r),e(L4,H0r),e(ae,U0r),e(ae,y4),e(y4,J9e),e(J9e,J0r),e(y4,Y0r),e(y4,UJ),e(UJ,K0r),e(y4,Z0r),e(ae,ewr),e(ae,x4),e(x4,Y9e),e(Y9e,owr),e(x4,rwr),e(x4,JJ),e(JJ,twr),e(x4,awr),e(ae,nwr),e(ae,$4),e($4,K9e),e(K9e,swr),e($4,lwr),e($4,YJ),e(YJ,iwr),e($4,dwr),e(ae,cwr),e(ae,k4),e(k4,Z9e),e(Z9e,fwr),e(k4,mwr),e(k4,KJ),e(KJ,gwr),e(k4,hwr),e(ae,pwr),e(ae,S4),e(S4,eMe),e(eMe,_wr),e(S4,uwr),e(S4,ZJ),e(ZJ,bwr),e(S4,vwr),e(ae,Fwr),e(ae,R4),e(R4,oMe),e(oMe,Twr),e(R4,Mwr),e(R4,eY),e(eY,Ewr),e(R4,Cwr),e(ae,wwr),e(ae,P4),e(P4,rMe),e(rMe,Awr),e(P4,Lwr),e(P4,oY),e(oY,ywr),e(P4,xwr),e(ae,$wr),e(ae,B4),e(B4,tMe),e(tMe,kwr),e(B4,Swr),e(B4,rY),e(rY,Rwr),e(B4,Pwr),e(ae,Bwr),e(ae,I4),e(I4,aMe),e(aMe,Iwr),e(I4,Nwr),e(I4,tY),e(tY,qwr),e(I4,jwr),e(ae,Dwr),e(ae,N4),e(N4,nMe),e(nMe,Gwr),e(N4,Owr),e(N4,aY),e(aY,Vwr),e(N4,Xwr),e(ae,zwr),e(ae,q4),e(q4,sMe),e(sMe,Qwr),e(q4,Wwr),e(q4,nY),e(nY,Hwr),e(q4,Uwr),e(ae,Jwr),e(ae,j4),e(j4,lMe),e(lMe,Ywr),e(j4,Kwr),e(j4,sY),e(sY,Zwr),e(j4,eAr),e(ae,oAr),e(ae,D4),e(D4,iMe),e(iMe,rAr),e(D4,tAr),e(D4,lY),e(lY,aAr),e(D4,nAr),e(ae,sAr),e(ae,G4),e(G4,dMe),e(dMe,lAr),e(G4,iAr),e(G4,iY),e(iY,dAr),e(G4,cAr),e(ae,fAr),e(ae,O4),e(O4,cMe),e(cMe,mAr),e(O4,gAr),e(O4,dY),e(dY,hAr),e(O4,pAr),e(ae,_Ar),e(ae,V4),e(V4,fMe),e(fMe,uAr),e(V4,bAr),e(V4,cY),e(cY,vAr),e(V4,FAr),e(ae,TAr),e(ae,X4),e(X4,mMe),e(mMe,MAr),e(X4,EAr),e(X4,fY),e(fY,CAr),e(X4,wAr),e(ae,AAr),e(ae,z4),e(z4,gMe),e(gMe,LAr),e(z4,yAr),e(z4,mY),e(mY,xAr),e(z4,$Ar),e(ae,kAr),e(ae,Q4),e(Q4,hMe),e(hMe,SAr),e(Q4,RAr),e(Q4,gY),e(gY,PAr),e(Q4,BAr),e(ae,IAr),e(ae,W4),e(W4,pMe),e(pMe,NAr),e(W4,qAr),e(W4,hY),e(hY,jAr),e(W4,DAr),e(ae,GAr),e(ae,H4),e(H4,_Me),e(_Me,OAr),e(H4,VAr),e(H4,pY),e(pY,XAr),e(H4,zAr),e(Pr,QAr),M(U4,Pr,null),b(f,LVe,u),b(f,Mc,u),e(Mc,J4),e(J4,uMe),M(ox,uMe,null),e(Mc,WAr),e(Mc,bMe),e(bMe,HAr),b(f,yVe,u),b(f,lr,u),M(rx,lr,null),e(lr,UAr),e(lr,Ec),e(Ec,JAr),e(Ec,_Y),e(_Y,YAr),e(Ec,KAr),e(Ec,uY),e(uY,ZAr),e(Ec,e6r),e(lr,o6r),e(lr,tx),e(tx,r6r),e(tx,vMe),e(vMe,t6r),e(tx,a6r),e(lr,n6r),e(lr,Nt),M(ax,Nt,null),e(Nt,s6r),e(Nt,FMe),e(FMe,l6r),e(Nt,i6r),e(Nt,Cc),e(Cc,d6r),e(Cc,TMe),e(TMe,c6r),e(Cc,f6r),e(Cc,bY),e(bY,m6r),e(Cc,g6r),e(Nt,h6r),M(Y4,Nt,null),e(lr,p6r),e(lr,Br),M(nx,Br,null),e(Br,_6r),e(Br,MMe),e(MMe,u6r),e(Br,b6r),e(Br,gn),e(gn,v6r),e(gn,EMe),e(EMe,F6r),e(gn,T6r),e(gn,CMe),e(CMe,M6r),e(gn,E6r),e(gn,wMe),e(wMe,C6r),e(gn,w6r),e(Br,A6r),e(Br,_e),e(_e,K4),e(K4,AMe),e(AMe,L6r),e(K4,y6r),e(K4,vY),e(vY,x6r),e(K4,$6r),e(_e,k6r),e(_e,Z4),e(Z4,LMe),e(LMe,S6r),e(Z4,R6r),e(Z4,FY),e(FY,P6r),e(Z4,B6r),e(_e,I6r),e(_e,eC),e(eC,yMe),e(yMe,N6r),e(eC,q6r),e(eC,TY),e(TY,j6r),e(eC,D6r),e(_e,G6r),e(_e,oC),e(oC,xMe),e(xMe,O6r),e(oC,V6r),e(oC,MY),e(MY,X6r),e(oC,z6r),e(_e,Q6r),e(_e,rC),e(rC,$Me),e($Me,W6r),e(rC,H6r),e(rC,EY),e(EY,U6r),e(rC,J6r),e(_e,Y6r),e(_e,tC),e(tC,kMe),e(kMe,K6r),e(tC,Z6r),e(tC,CY),e(CY,eLr),e(tC,oLr),e(_e,rLr),e(_e,aC),e(aC,SMe),e(SMe,tLr),e(aC,aLr),e(aC,wY),e(wY,nLr),e(aC,sLr),e(_e,lLr),e(_e,nC),e(nC,RMe),e(RMe,iLr),e(nC,dLr),e(nC,AY),e(AY,cLr),e(nC,fLr),e(_e,mLr),e(_e,sC),e(sC,PMe),e(PMe,gLr),e(sC,hLr),e(sC,LY),e(LY,pLr),e(sC,_Lr),e(_e,uLr),e(_e,lC),e(lC,BMe),e(BMe,bLr),e(lC,vLr),e(lC,yY),e(yY,FLr),e(lC,TLr),e(_e,MLr),e(_e,iC),e(iC,IMe),e(IMe,ELr),e(iC,CLr),e(iC,xY),e(xY,wLr),e(iC,ALr),e(_e,LLr),e(_e,dC),e(dC,NMe),e(NMe,yLr),e(dC,xLr),e(dC,$Y),e($Y,$Lr),e(dC,kLr),e(_e,SLr),e(_e,cC),e(cC,qMe),e(qMe,RLr),e(cC,PLr),e(cC,kY),e(kY,BLr),e(cC,ILr),e(_e,NLr),e(_e,fC),e(fC,jMe),e(jMe,qLr),e(fC,jLr),e(fC,SY),e(SY,DLr),e(fC,GLr),e(_e,OLr),e(_e,mC),e(mC,DMe),e(DMe,VLr),e(mC,XLr),e(mC,RY),e(RY,zLr),e(mC,QLr),e(_e,WLr),e(_e,gC),e(gC,GMe),e(GMe,HLr),e(gC,ULr),e(gC,PY),e(PY,JLr),e(gC,YLr),e(_e,KLr),e(_e,hC),e(hC,OMe),e(OMe,ZLr),e(hC,eyr),e(hC,BY),e(BY,oyr),e(hC,ryr),e(Br,tyr),M(pC,Br,null),b(f,xVe,u),b(f,wc,u),e(wc,_C),e(_C,VMe),M(sx,VMe,null),e(wc,ayr),e(wc,XMe),e(XMe,nyr),b(f,$Ve,u),b(f,ir,u),M(lx,ir,null),e(ir,syr),e(ir,Ac),e(Ac,lyr),e(Ac,IY),e(IY,iyr),e(Ac,dyr),e(Ac,NY),e(NY,cyr),e(Ac,fyr),e(ir,myr),e(ir,ix),e(ix,gyr),e(ix,zMe),e(zMe,hyr),e(ix,pyr),e(ir,_yr),e(ir,qt),M(dx,qt,null),e(qt,uyr),e(qt,QMe),e(QMe,byr),e(qt,vyr),e(qt,Lc),e(Lc,Fyr),e(Lc,WMe),e(WMe,Tyr),e(Lc,Myr),e(Lc,qY),e(qY,Eyr),e(Lc,Cyr),e(qt,wyr),M(uC,qt,null),e(ir,Ayr),e(ir,Ir),M(cx,Ir,null),e(Ir,Lyr),e(Ir,HMe),e(HMe,yyr),e(Ir,xyr),e(Ir,hn),e(hn,$yr),e(hn,UMe),e(UMe,kyr),e(hn,Syr),e(hn,JMe),e(JMe,Ryr),e(hn,Pyr),e(hn,YMe),e(YMe,Byr),e(hn,Iyr),e(Ir,Nyr),e(Ir,fx),e(fx,bC),e(bC,KMe),e(KMe,qyr),e(bC,jyr),e(bC,jY),e(jY,Dyr),e(bC,Gyr),e(fx,Oyr),e(fx,vC),e(vC,ZMe),e(ZMe,Vyr),e(vC,Xyr),e(vC,DY),e(DY,zyr),e(vC,Qyr),e(Ir,Wyr),M(FC,Ir,null),b(f,kVe,u),b(f,yc,u),e(yc,TC),e(TC,eEe),M(mx,eEe,null),e(yc,Hyr),e(yc,oEe),e(oEe,Uyr),b(f,SVe,u),b(f,dr,u),M(gx,dr,null),e(dr,Jyr),e(dr,xc),e(xc,Yyr),e(xc,GY),e(GY,Kyr),e(xc,Zyr),e(xc,OY),e(OY,e8r),e(xc,o8r),e(dr,r8r),e(dr,hx),e(hx,t8r),e(hx,rEe),e(rEe,a8r),e(hx,n8r),e(dr,s8r),e(dr,jt),M(px,jt,null),e(jt,l8r),e(jt,tEe),e(tEe,i8r),e(jt,d8r),e(jt,$c),e($c,c8r),e($c,aEe),e(aEe,f8r),e($c,m8r),e($c,VY),e(VY,g8r),e($c,h8r),e(jt,p8r),M(MC,jt,null),e(dr,_8r),e(dr,Nr),M(_x,Nr,null),e(Nr,u8r),e(Nr,nEe),e(nEe,b8r),e(Nr,v8r),e(Nr,pn),e(pn,F8r),e(pn,sEe),e(sEe,T8r),e(pn,M8r),e(pn,lEe),e(lEe,E8r),e(pn,C8r),e(pn,iEe),e(iEe,w8r),e(pn,A8r),e(Nr,L8r),e(Nr,dEe),e(dEe,EC),e(EC,cEe),e(cEe,y8r),e(EC,x8r),e(EC,XY),e(XY,$8r),e(EC,k8r),e(Nr,S8r),M(CC,Nr,null),b(f,RVe,u),b(f,kc,u),e(kc,wC),e(wC,fEe),M(ux,fEe,null),e(kc,R8r),e(kc,mEe),e(mEe,P8r),b(f,PVe,u),b(f,cr,u),M(bx,cr,null),e(cr,B8r),e(cr,Sc),e(Sc,I8r),e(Sc,zY),e(zY,N8r),e(Sc,q8r),e(Sc,QY),e(QY,j8r),e(Sc,D8r),e(cr,G8r),e(cr,vx),e(vx,O8r),e(vx,gEe),e(gEe,V8r),e(vx,X8r),e(cr,z8r),e(cr,Dt),M(Fx,Dt,null),e(Dt,Q8r),e(Dt,hEe),e(hEe,W8r),e(Dt,H8r),e(Dt,Rc),e(Rc,U8r),e(Rc,pEe),e(pEe,J8r),e(Rc,Y8r),e(Rc,WY),e(WY,K8r),e(Rc,Z8r),e(Dt,exr),M(AC,Dt,null),e(cr,oxr),e(cr,qr),M(Tx,qr,null),e(qr,rxr),e(qr,_Ee),e(_Ee,txr),e(qr,axr),e(qr,_n),e(_n,nxr),e(_n,uEe),e(uEe,sxr),e(_n,lxr),e(_n,bEe),e(bEe,ixr),e(_n,dxr),e(_n,vEe),e(vEe,cxr),e(_n,fxr),e(qr,mxr),e(qr,de),e(de,LC),e(LC,FEe),e(FEe,gxr),e(LC,hxr),e(LC,HY),e(HY,pxr),e(LC,_xr),e(de,uxr),e(de,yC),e(yC,TEe),e(TEe,bxr),e(yC,vxr),e(yC,UY),e(UY,Fxr),e(yC,Txr),e(de,Mxr),e(de,xC),e(xC,MEe),e(MEe,Exr),e(xC,Cxr),e(xC,JY),e(JY,wxr),e(xC,Axr),e(de,Lxr),e(de,$C),e($C,EEe),e(EEe,yxr),e($C,xxr),e($C,YY),e(YY,$xr),e($C,kxr),e(de,Sxr),e(de,kC),e(kC,CEe),e(CEe,Rxr),e(kC,Pxr),e(kC,KY),e(KY,Bxr),e(kC,Ixr),e(de,Nxr),e(de,SC),e(SC,wEe),e(wEe,qxr),e(SC,jxr),e(SC,ZY),e(ZY,Dxr),e(SC,Gxr),e(de,Oxr),e(de,RC),e(RC,AEe),e(AEe,Vxr),e(RC,Xxr),e(RC,eK),e(eK,zxr),e(RC,Qxr),e(de,Wxr),e(de,PC),e(PC,LEe),e(LEe,Hxr),e(PC,Uxr),e(PC,oK),e(oK,Jxr),e(PC,Yxr),e(de,Kxr),e(de,BC),e(BC,yEe),e(yEe,Zxr),e(BC,e$r),e(BC,rK),e(rK,o$r),e(BC,r$r),e(de,t$r),e(de,IC),e(IC,xEe),e(xEe,a$r),e(IC,n$r),e(IC,tK),e(tK,s$r),e(IC,l$r),e(de,i$r),e(de,NC),e(NC,$Ee),e($Ee,d$r),e(NC,c$r),e(NC,aK),e(aK,f$r),e(NC,m$r),e(de,g$r),e(de,qC),e(qC,kEe),e(kEe,h$r),e(qC,p$r),e(qC,nK),e(nK,_$r),e(qC,u$r),e(de,b$r),e(de,jC),e(jC,SEe),e(SEe,v$r),e(jC,F$r),e(jC,sK),e(sK,T$r),e(jC,M$r),e(de,E$r),e(de,DC),e(DC,REe),e(REe,C$r),e(DC,w$r),e(DC,lK),e(lK,A$r),e(DC,L$r),e(de,y$r),e(de,GC),e(GC,PEe),e(PEe,x$r),e(GC,$$r),e(GC,iK),e(iK,k$r),e(GC,S$r),e(de,R$r),e(de,OC),e(OC,BEe),e(BEe,P$r),e(OC,B$r),e(OC,dK),e(dK,I$r),e(OC,N$r),e(de,q$r),e(de,VC),e(VC,IEe),e(IEe,j$r),e(VC,D$r),e(VC,cK),e(cK,G$r),e(VC,O$r),e(de,V$r),e(de,XC),e(XC,NEe),e(NEe,X$r),e(XC,z$r),e(XC,fK),e(fK,Q$r),e(XC,W$r),e(de,H$r),e(de,zC),e(zC,qEe),e(qEe,U$r),e(zC,J$r),e(zC,mK),e(mK,Y$r),e(zC,K$r),e(de,Z$r),e(de,QC),e(QC,jEe),e(jEe,ekr),e(QC,okr),e(QC,gK),e(gK,rkr),e(QC,tkr),e(qr,akr),M(WC,qr,null),b(f,BVe,u),b(f,Pc,u),e(Pc,HC),e(HC,DEe),M(Mx,DEe,null),e(Pc,nkr),e(Pc,GEe),e(GEe,skr),b(f,IVe,u),b(f,fr,u),M(Ex,fr,null),e(fr,lkr),e(fr,Bc),e(Bc,ikr),e(Bc,hK),e(hK,dkr),e(Bc,ckr),e(Bc,pK),e(pK,fkr),e(Bc,mkr),e(fr,gkr),e(fr,Cx),e(Cx,hkr),e(Cx,OEe),e(OEe,pkr),e(Cx,_kr),e(fr,ukr),e(fr,Gt),M(wx,Gt,null),e(Gt,bkr),e(Gt,VEe),e(VEe,vkr),e(Gt,Fkr),e(Gt,Ic),e(Ic,Tkr),e(Ic,XEe),e(XEe,Mkr),e(Ic,Ekr),e(Ic,_K),e(_K,Ckr),e(Ic,wkr),e(Gt,Akr),M(UC,Gt,null),e(fr,Lkr),e(fr,jr),M(Ax,jr,null),e(jr,ykr),e(jr,zEe),e(zEe,xkr),e(jr,$kr),e(jr,un),e(un,kkr),e(un,QEe),e(QEe,Skr),e(un,Rkr),e(un,WEe),e(WEe,Pkr),e(un,Bkr),e(un,HEe),e(HEe,Ikr),e(un,Nkr),e(jr,qkr),e(jr,ce),e(ce,JC),e(JC,UEe),e(UEe,jkr),e(JC,Dkr),e(JC,uK),e(uK,Gkr),e(JC,Okr),e(ce,Vkr),e(ce,YC),e(YC,JEe),e(JEe,Xkr),e(YC,zkr),e(YC,bK),e(bK,Qkr),e(YC,Wkr),e(ce,Hkr),e(ce,KC),e(KC,YEe),e(YEe,Ukr),e(KC,Jkr),e(KC,vK),e(vK,Ykr),e(KC,Kkr),e(ce,Zkr),e(ce,ZC),e(ZC,KEe),e(KEe,eSr),e(ZC,oSr),e(ZC,FK),e(FK,rSr),e(ZC,tSr),e(ce,aSr),e(ce,e5),e(e5,ZEe),e(ZEe,nSr),e(e5,sSr),e(e5,TK),e(TK,lSr),e(e5,iSr),e(ce,dSr),e(ce,o5),e(o5,e4e),e(e4e,cSr),e(o5,fSr),e(o5,MK),e(MK,mSr),e(o5,gSr),e(ce,hSr),e(ce,r5),e(r5,o4e),e(o4e,pSr),e(r5,_Sr),e(r5,EK),e(EK,uSr),e(r5,bSr),e(ce,vSr),e(ce,t5),e(t5,r4e),e(r4e,FSr),e(t5,TSr),e(t5,CK),e(CK,MSr),e(t5,ESr),e(ce,CSr),e(ce,a5),e(a5,t4e),e(t4e,wSr),e(a5,ASr),e(a5,wK),e(wK,LSr),e(a5,ySr),e(ce,xSr),e(ce,n5),e(n5,a4e),e(a4e,$Sr),e(n5,kSr),e(n5,AK),e(AK,SSr),e(n5,RSr),e(ce,PSr),e(ce,s5),e(s5,n4e),e(n4e,BSr),e(s5,ISr),e(s5,LK),e(LK,NSr),e(s5,qSr),e(ce,jSr),e(ce,l5),e(l5,s4e),e(s4e,DSr),e(l5,GSr),e(l5,yK),e(yK,OSr),e(l5,VSr),e(ce,XSr),e(ce,i5),e(i5,l4e),e(l4e,zSr),e(i5,QSr),e(i5,xK),e(xK,WSr),e(i5,HSr),e(ce,USr),e(ce,d5),e(d5,i4e),e(i4e,JSr),e(d5,YSr),e(d5,$K),e($K,KSr),e(d5,ZSr),e(ce,eRr),e(ce,c5),e(c5,d4e),e(d4e,oRr),e(c5,rRr),e(c5,kK),e(kK,tRr),e(c5,aRr),e(ce,nRr),e(ce,f5),e(f5,c4e),e(c4e,sRr),e(f5,lRr),e(f5,SK),e(SK,iRr),e(f5,dRr),e(ce,cRr),e(ce,m5),e(m5,f4e),e(f4e,fRr),e(m5,mRr),e(m5,RK),e(RK,gRr),e(m5,hRr),e(ce,pRr),e(ce,g5),e(g5,m4e),e(m4e,_Rr),e(g5,uRr),e(g5,PK),e(PK,bRr),e(g5,vRr),e(ce,FRr),e(ce,h5),e(h5,g4e),e(g4e,TRr),e(h5,MRr),e(h5,BK),e(BK,ERr),e(h5,CRr),e(ce,wRr),e(ce,p5),e(p5,h4e),e(h4e,ARr),e(p5,LRr),e(p5,IK),e(IK,yRr),e(p5,xRr),e(jr,$Rr),M(_5,jr,null),b(f,NVe,u),b(f,Nc,u),e(Nc,u5),e(u5,p4e),M(Lx,p4e,null),e(Nc,kRr),e(Nc,_4e),e(_4e,SRr),b(f,qVe,u),b(f,mr,u),M(yx,mr,null),e(mr,RRr),e(mr,qc),e(qc,PRr),e(qc,NK),e(NK,BRr),e(qc,IRr),e(qc,qK),e(qK,NRr),e(qc,qRr),e(mr,jRr),e(mr,xx),e(xx,DRr),e(xx,u4e),e(u4e,GRr),e(xx,ORr),e(mr,VRr),e(mr,Ot),M($x,Ot,null),e(Ot,XRr),e(Ot,b4e),e(b4e,zRr),e(Ot,QRr),e(Ot,jc),e(jc,WRr),e(jc,v4e),e(v4e,HRr),e(jc,URr),e(jc,jK),e(jK,JRr),e(jc,YRr),e(Ot,KRr),M(b5,Ot,null),e(mr,ZRr),e(mr,Dr),M(kx,Dr,null),e(Dr,ePr),e(Dr,F4e),e(F4e,oPr),e(Dr,rPr),e(Dr,bn),e(bn,tPr),e(bn,T4e),e(T4e,aPr),e(bn,nPr),e(bn,M4e),e(M4e,sPr),e(bn,lPr),e(bn,E4e),e(E4e,iPr),e(bn,dPr),e(Dr,cPr),e(Dr,C4e),e(C4e,v5),e(v5,w4e),e(w4e,fPr),e(v5,mPr),e(v5,DK),e(DK,gPr),e(v5,hPr),e(Dr,pPr),M(F5,Dr,null),b(f,jVe,u),b(f,Dc,u),e(Dc,T5),e(T5,A4e),M(Sx,A4e,null),e(Dc,_Pr),e(Dc,L4e),e(L4e,uPr),b(f,DVe,u),b(f,gr,u),M(Rx,gr,null),e(gr,bPr),e(gr,Gc),e(Gc,vPr),e(Gc,GK),e(GK,FPr),e(Gc,TPr),e(Gc,OK),e(OK,MPr),e(Gc,EPr),e(gr,CPr),e(gr,Px),e(Px,wPr),e(Px,y4e),e(y4e,APr),e(Px,LPr),e(gr,yPr),e(gr,Vt),M(Bx,Vt,null),e(Vt,xPr),e(Vt,x4e),e(x4e,$Pr),e(Vt,kPr),e(Vt,Oc),e(Oc,SPr),e(Oc,$4e),e($4e,RPr),e(Oc,PPr),e(Oc,VK),e(VK,BPr),e(Oc,IPr),e(Vt,NPr),M(M5,Vt,null),e(gr,qPr),e(gr,Gr),M(Ix,Gr,null),e(Gr,jPr),e(Gr,k4e),e(k4e,DPr),e(Gr,GPr),e(Gr,vn),e(vn,OPr),e(vn,S4e),e(S4e,VPr),e(vn,XPr),e(vn,R4e),e(R4e,zPr),e(vn,QPr),e(vn,P4e),e(P4e,WPr),e(vn,HPr),e(Gr,UPr),e(Gr,B4e),e(B4e,E5),e(E5,I4e),e(I4e,JPr),e(E5,YPr),e(E5,XK),e(XK,KPr),e(E5,ZPr),e(Gr,eBr),M(C5,Gr,null),b(f,GVe,u),b(f,Vc,u),e(Vc,w5),e(w5,N4e),M(Nx,N4e,null),e(Vc,oBr),e(Vc,q4e),e(q4e,rBr),b(f,OVe,u),b(f,hr,u),M(qx,hr,null),e(hr,tBr),e(hr,Xc),e(Xc,aBr),e(Xc,zK),e(zK,nBr),e(Xc,sBr),e(Xc,QK),e(QK,lBr),e(Xc,iBr),e(hr,dBr),e(hr,jx),e(jx,cBr),e(jx,j4e),e(j4e,fBr),e(jx,mBr),e(hr,gBr),e(hr,Xt),M(Dx,Xt,null),e(Xt,hBr),e(Xt,D4e),e(D4e,pBr),e(Xt,_Br),e(Xt,zc),e(zc,uBr),e(zc,G4e),e(G4e,bBr),e(zc,vBr),e(zc,WK),e(WK,FBr),e(zc,TBr),e(Xt,MBr),M(A5,Xt,null),e(hr,EBr),e(hr,Or),M(Gx,Or,null),e(Or,CBr),e(Or,O4e),e(O4e,wBr),e(Or,ABr),e(Or,Fn),e(Fn,LBr),e(Fn,V4e),e(V4e,yBr),e(Fn,xBr),e(Fn,X4e),e(X4e,$Br),e(Fn,kBr),e(Fn,z4e),e(z4e,SBr),e(Fn,RBr),e(Or,PBr),e(Or,oe),e(oe,L5),e(L5,Q4e),e(Q4e,BBr),e(L5,IBr),e(L5,HK),e(HK,NBr),e(L5,qBr),e(oe,jBr),e(oe,y5),e(y5,W4e),e(W4e,DBr),e(y5,GBr),e(y5,UK),e(UK,OBr),e(y5,VBr),e(oe,XBr),e(oe,x5),e(x5,H4e),e(H4e,zBr),e(x5,QBr),e(x5,JK),e(JK,WBr),e(x5,HBr),e(oe,UBr),e(oe,$5),e($5,U4e),e(U4e,JBr),e($5,YBr),e($5,YK),e(YK,KBr),e($5,ZBr),e(oe,eIr),e(oe,k5),e(k5,J4e),e(J4e,oIr),e(k5,rIr),e(k5,KK),e(KK,tIr),e(k5,aIr),e(oe,nIr),e(oe,S5),e(S5,Y4e),e(Y4e,sIr),e(S5,lIr),e(S5,ZK),e(ZK,iIr),e(S5,dIr),e(oe,cIr),e(oe,R5),e(R5,K4e),e(K4e,fIr),e(R5,mIr),e(R5,eZ),e(eZ,gIr),e(R5,hIr),e(oe,pIr),e(oe,P5),e(P5,Z4e),e(Z4e,_Ir),e(P5,uIr),e(P5,oZ),e(oZ,bIr),e(P5,vIr),e(oe,FIr),e(oe,B5),e(B5,eCe),e(eCe,TIr),e(B5,MIr),e(B5,rZ),e(rZ,EIr),e(B5,CIr),e(oe,wIr),e(oe,I5),e(I5,oCe),e(oCe,AIr),e(I5,LIr),e(I5,tZ),e(tZ,yIr),e(I5,xIr),e(oe,$Ir),e(oe,N5),e(N5,rCe),e(rCe,kIr),e(N5,SIr),e(N5,aZ),e(aZ,RIr),e(N5,PIr),e(oe,BIr),e(oe,q5),e(q5,tCe),e(tCe,IIr),e(q5,NIr),e(q5,nZ),e(nZ,qIr),e(q5,jIr),e(oe,DIr),e(oe,j5),e(j5,aCe),e(aCe,GIr),e(j5,OIr),e(j5,sZ),e(sZ,VIr),e(j5,XIr),e(oe,zIr),e(oe,D5),e(D5,nCe),e(nCe,QIr),e(D5,WIr),e(D5,lZ),e(lZ,HIr),e(D5,UIr),e(oe,JIr),e(oe,G5),e(G5,sCe),e(sCe,YIr),e(G5,KIr),e(G5,iZ),e(iZ,ZIr),e(G5,eNr),e(oe,oNr),e(oe,O5),e(O5,lCe),e(lCe,rNr),e(O5,tNr),e(O5,dZ),e(dZ,aNr),e(O5,nNr),e(oe,sNr),e(oe,V5),e(V5,iCe),e(iCe,lNr),e(V5,iNr),e(V5,cZ),e(cZ,dNr),e(V5,cNr),e(oe,fNr),e(oe,X5),e(X5,dCe),e(dCe,mNr),e(X5,gNr),e(X5,fZ),e(fZ,hNr),e(X5,pNr),e(oe,_Nr),e(oe,z5),e(z5,cCe),e(cCe,uNr),e(z5,bNr),e(z5,mZ),e(mZ,vNr),e(z5,FNr),e(oe,TNr),e(oe,Q5),e(Q5,fCe),e(fCe,MNr),e(Q5,ENr),e(Q5,gZ),e(gZ,CNr),e(Q5,wNr),e(oe,ANr),e(oe,W5),e(W5,mCe),e(mCe,LNr),e(W5,yNr),e(W5,hZ),e(hZ,xNr),e(W5,$Nr),e(oe,kNr),e(oe,H5),e(H5,gCe),e(gCe,SNr),e(H5,RNr),e(H5,pZ),e(pZ,PNr),e(H5,BNr),e(oe,INr),e(oe,U5),e(U5,hCe),e(hCe,NNr),e(U5,qNr),e(U5,_Z),e(_Z,jNr),e(U5,DNr),e(oe,GNr),e(oe,J5),e(J5,pCe),e(pCe,ONr),e(J5,VNr),e(J5,uZ),e(uZ,XNr),e(J5,zNr),e(oe,QNr),e(oe,Y5),e(Y5,_Ce),e(_Ce,WNr),e(Y5,HNr),e(Y5,bZ),e(bZ,UNr),e(Y5,JNr),e(oe,YNr),e(oe,K5),e(K5,uCe),e(uCe,KNr),e(K5,ZNr),e(K5,vZ),e(vZ,eqr),e(K5,oqr),e(oe,rqr),e(oe,Z5),e(Z5,bCe),e(bCe,tqr),e(Z5,aqr),e(Z5,FZ),e(FZ,nqr),e(Z5,sqr),e(oe,lqr),e(oe,e3),e(e3,vCe),e(vCe,iqr),e(e3,dqr),e(e3,TZ),e(TZ,cqr),e(e3,fqr),e(Or,mqr),M(o3,Or,null),b(f,VVe,u),b(f,Qc,u),e(Qc,r3),e(r3,FCe),M(Ox,FCe,null),e(Qc,gqr),e(Qc,TCe),e(TCe,hqr),b(f,XVe,u),b(f,pr,u),M(Vx,pr,null),e(pr,pqr),e(pr,Wc),e(Wc,_qr),e(Wc,MZ),e(MZ,uqr),e(Wc,bqr),e(Wc,EZ),e(EZ,vqr),e(Wc,Fqr),e(pr,Tqr),e(pr,Xx),e(Xx,Mqr),e(Xx,MCe),e(MCe,Eqr),e(Xx,Cqr),e(pr,wqr),e(pr,zt),M(zx,zt,null),e(zt,Aqr),e(zt,ECe),e(ECe,Lqr),e(zt,yqr),e(zt,Hc),e(Hc,xqr),e(Hc,CCe),e(CCe,$qr),e(Hc,kqr),e(Hc,CZ),e(CZ,Sqr),e(Hc,Rqr),e(zt,Pqr),M(t3,zt,null),e(pr,Bqr),e(pr,Vr),M(Qx,Vr,null),e(Vr,Iqr),e(Vr,wCe),e(wCe,Nqr),e(Vr,qqr),e(Vr,Tn),e(Tn,jqr),e(Tn,ACe),e(ACe,Dqr),e(Tn,Gqr),e(Tn,LCe),e(LCe,Oqr),e(Tn,Vqr),e(Tn,yCe),e(yCe,Xqr),e(Tn,zqr),e(Vr,Qqr),e(Vr,xe),e(xe,a3),e(a3,xCe),e(xCe,Wqr),e(a3,Hqr),e(a3,wZ),e(wZ,Uqr),e(a3,Jqr),e(xe,Yqr),e(xe,n3),e(n3,$Ce),e($Ce,Kqr),e(n3,Zqr),e(n3,AZ),e(AZ,ejr),e(n3,ojr),e(xe,rjr),e(xe,s3),e(s3,kCe),e(kCe,tjr),e(s3,ajr),e(s3,LZ),e(LZ,njr),e(s3,sjr),e(xe,ljr),e(xe,l3),e(l3,SCe),e(SCe,ijr),e(l3,djr),e(l3,yZ),e(yZ,cjr),e(l3,fjr),e(xe,mjr),e(xe,i3),e(i3,RCe),e(RCe,gjr),e(i3,hjr),e(i3,xZ),e(xZ,pjr),e(i3,_jr),e(xe,ujr),e(xe,d3),e(d3,PCe),e(PCe,bjr),e(d3,vjr),e(d3,$Z),e($Z,Fjr),e(d3,Tjr),e(xe,Mjr),e(xe,c3),e(c3,BCe),e(BCe,Ejr),e(c3,Cjr),e(c3,kZ),e(kZ,wjr),e(c3,Ajr),e(xe,Ljr),e(xe,f3),e(f3,ICe),e(ICe,yjr),e(f3,xjr),e(f3,SZ),e(SZ,$jr),e(f3,kjr),e(xe,Sjr),e(xe,m3),e(m3,NCe),e(NCe,Rjr),e(m3,Pjr),e(m3,RZ),e(RZ,Bjr),e(m3,Ijr),e(xe,Njr),e(xe,g3),e(g3,qCe),e(qCe,qjr),e(g3,jjr),e(g3,PZ),e(PZ,Djr),e(g3,Gjr),e(Vr,Ojr),M(h3,Vr,null),b(f,zVe,u),b(f,Uc,u),e(Uc,p3),e(p3,jCe),M(Wx,jCe,null),e(Uc,Vjr),e(Uc,DCe),e(DCe,Xjr),b(f,QVe,u),b(f,_r,u),M(Hx,_r,null),e(_r,zjr),e(_r,Jc),e(Jc,Qjr),e(Jc,BZ),e(BZ,Wjr),e(Jc,Hjr),e(Jc,IZ),e(IZ,Ujr),e(Jc,Jjr),e(_r,Yjr),e(_r,Ux),e(Ux,Kjr),e(Ux,GCe),e(GCe,Zjr),e(Ux,eDr),e(_r,oDr),e(_r,Qt),M(Jx,Qt,null),e(Qt,rDr),e(Qt,OCe),e(OCe,tDr),e(Qt,aDr),e(Qt,Yc),e(Yc,nDr),e(Yc,VCe),e(VCe,sDr),e(Yc,lDr),e(Yc,NZ),e(NZ,iDr),e(Yc,dDr),e(Qt,cDr),M(_3,Qt,null),e(_r,fDr),e(_r,Xr),M(Yx,Xr,null),e(Xr,mDr),e(Xr,XCe),e(XCe,gDr),e(Xr,hDr),e(Xr,Mn),e(Mn,pDr),e(Mn,zCe),e(zCe,_Dr),e(Mn,uDr),e(Mn,QCe),e(QCe,bDr),e(Mn,vDr),e(Mn,WCe),e(WCe,FDr),e(Mn,TDr),e(Xr,MDr),e(Xr,Ee),e(Ee,u3),e(u3,HCe),e(HCe,EDr),e(u3,CDr),e(u3,qZ),e(qZ,wDr),e(u3,ADr),e(Ee,LDr),e(Ee,b3),e(b3,UCe),e(UCe,yDr),e(b3,xDr),e(b3,jZ),e(jZ,$Dr),e(b3,kDr),e(Ee,SDr),e(Ee,v3),e(v3,JCe),e(JCe,RDr),e(v3,PDr),e(v3,DZ),e(DZ,BDr),e(v3,IDr),e(Ee,NDr),e(Ee,F3),e(F3,YCe),e(YCe,qDr),e(F3,jDr),e(F3,GZ),e(GZ,DDr),e(F3,GDr),e(Ee,ODr),e(Ee,T3),e(T3,KCe),e(KCe,VDr),e(T3,XDr),e(T3,OZ),e(OZ,zDr),e(T3,QDr),e(Ee,WDr),e(Ee,M3),e(M3,ZCe),e(ZCe,HDr),e(M3,UDr),e(M3,VZ),e(VZ,JDr),e(M3,YDr),e(Ee,KDr),e(Ee,E3),e(E3,e5e),e(e5e,ZDr),e(E3,eGr),e(E3,XZ),e(XZ,oGr),e(E3,rGr),e(Ee,tGr),e(Ee,C3),e(C3,o5e),e(o5e,aGr),e(C3,nGr),e(C3,zZ),e(zZ,sGr),e(C3,lGr),e(Ee,iGr),e(Ee,w3),e(w3,r5e),e(r5e,dGr),e(w3,cGr),e(w3,QZ),e(QZ,fGr),e(w3,mGr),e(Ee,gGr),e(Ee,A3),e(A3,t5e),e(t5e,hGr),e(A3,pGr),e(A3,WZ),e(WZ,_Gr),e(A3,uGr),e(Ee,bGr),e(Ee,L3),e(L3,a5e),e(a5e,vGr),e(L3,FGr),e(L3,HZ),e(HZ,TGr),e(L3,MGr),e(Ee,EGr),e(Ee,y3),e(y3,n5e),e(n5e,CGr),e(y3,wGr),e(y3,UZ),e(UZ,AGr),e(y3,LGr),e(Ee,yGr),e(Ee,x3),e(x3,s5e),e(s5e,xGr),e(x3,$Gr),e(x3,JZ),e(JZ,kGr),e(x3,SGr),e(Xr,RGr),M($3,Xr,null),b(f,WVe,u),b(f,Kc,u),e(Kc,k3),e(k3,l5e),M(Kx,l5e,null),e(Kc,PGr),e(Kc,i5e),e(i5e,BGr),b(f,HVe,u),b(f,ur,u),M(Zx,ur,null),e(ur,IGr),e(ur,Zc),e(Zc,NGr),e(Zc,YZ),e(YZ,qGr),e(Zc,jGr),e(Zc,KZ),e(KZ,DGr),e(Zc,GGr),e(ur,OGr),e(ur,e$),e(e$,VGr),e(e$,d5e),e(d5e,XGr),e(e$,zGr),e(ur,QGr),e(ur,Wt),M(o$,Wt,null),e(Wt,WGr),e(Wt,c5e),e(c5e,HGr),e(Wt,UGr),e(Wt,ef),e(ef,JGr),e(ef,f5e),e(f5e,YGr),e(ef,KGr),e(ef,ZZ),e(ZZ,ZGr),e(ef,eOr),e(Wt,oOr),M(S3,Wt,null),e(ur,rOr),e(ur,zr),M(r$,zr,null),e(zr,tOr),e(zr,m5e),e(m5e,aOr),e(zr,nOr),e(zr,En),e(En,sOr),e(En,g5e),e(g5e,lOr),e(En,iOr),e(En,h5e),e(h5e,dOr),e(En,cOr),e(En,p5e),e(p5e,fOr),e(En,mOr),e(zr,gOr),e(zr,$e),e($e,R3),e(R3,_5e),e(_5e,hOr),e(R3,pOr),e(R3,eee),e(eee,_Or),e(R3,uOr),e($e,bOr),e($e,P3),e(P3,u5e),e(u5e,vOr),e(P3,FOr),e(P3,oee),e(oee,TOr),e(P3,MOr),e($e,EOr),e($e,B3),e(B3,b5e),e(b5e,COr),e(B3,wOr),e(B3,ree),e(ree,AOr),e(B3,LOr),e($e,yOr),e($e,I3),e(I3,v5e),e(v5e,xOr),e(I3,$Or),e(I3,tee),e(tee,kOr),e(I3,SOr),e($e,ROr),e($e,N3),e(N3,F5e),e(F5e,POr),e(N3,BOr),e(N3,aee),e(aee,IOr),e(N3,NOr),e($e,qOr),e($e,q3),e(q3,T5e),e(T5e,jOr),e(q3,DOr),e(q3,nee),e(nee,GOr),e(q3,OOr),e($e,VOr),e($e,j3),e(j3,M5e),e(M5e,XOr),e(j3,zOr),e(j3,see),e(see,QOr),e(j3,WOr),e($e,HOr),e($e,D3),e(D3,E5e),e(E5e,UOr),e(D3,JOr),e(D3,lee),e(lee,YOr),e(D3,KOr),e($e,ZOr),e($e,G3),e(G3,C5e),e(C5e,eVr),e(G3,oVr),e(G3,iee),e(iee,rVr),e(G3,tVr),e($e,aVr),e($e,O3),e(O3,w5e),e(w5e,nVr),e(O3,sVr),e(O3,dee),e(dee,lVr),e(O3,iVr),e(zr,dVr),M(V3,zr,null),b(f,UVe,u),b(f,of,u),e(of,X3),e(X3,A5e),M(t$,A5e,null),e(of,cVr),e(of,L5e),e(L5e,fVr),b(f,JVe,u),b(f,br,u),M(a$,br,null),e(br,mVr),e(br,rf),e(rf,gVr),e(rf,cee),e(cee,hVr),e(rf,pVr),e(rf,fee),e(fee,_Vr),e(rf,uVr),e(br,bVr),e(br,n$),e(n$,vVr),e(n$,y5e),e(y5e,FVr),e(n$,TVr),e(br,MVr),e(br,Ht),M(s$,Ht,null),e(Ht,EVr),e(Ht,x5e),e(x5e,CVr),e(Ht,wVr),e(Ht,tf),e(tf,AVr),e(tf,$5e),e($5e,LVr),e(tf,yVr),e(tf,mee),e(mee,xVr),e(tf,$Vr),e(Ht,kVr),M(z3,Ht,null),e(br,SVr),e(br,Qr),M(l$,Qr,null),e(Qr,RVr),e(Qr,k5e),e(k5e,PVr),e(Qr,BVr),e(Qr,Cn),e(Cn,IVr),e(Cn,S5e),e(S5e,NVr),e(Cn,qVr),e(Cn,R5e),e(R5e,jVr),e(Cn,DVr),e(Cn,P5e),e(P5e,GVr),e(Cn,OVr),e(Qr,VVr),e(Qr,ke),e(ke,Q3),e(Q3,B5e),e(B5e,XVr),e(Q3,zVr),e(Q3,gee),e(gee,QVr),e(Q3,WVr),e(ke,HVr),e(ke,W3),e(W3,I5e),e(I5e,UVr),e(W3,JVr),e(W3,hee),e(hee,YVr),e(W3,KVr),e(ke,ZVr),e(ke,H3),e(H3,N5e),e(N5e,eXr),e(H3,oXr),e(H3,pee),e(pee,rXr),e(H3,tXr),e(ke,aXr),e(ke,U3),e(U3,q5e),e(q5e,nXr),e(U3,sXr),e(U3,_ee),e(_ee,lXr),e(U3,iXr),e(ke,dXr),e(ke,J3),e(J3,j5e),e(j5e,cXr),e(J3,fXr),e(J3,uee),e(uee,mXr),e(J3,gXr),e(ke,hXr),e(ke,Y3),e(Y3,D5e),e(D5e,pXr),e(Y3,_Xr),e(Y3,bee),e(bee,uXr),e(Y3,bXr),e(ke,vXr),e(ke,K3),e(K3,G5e),e(G5e,FXr),e(K3,TXr),e(K3,vee),e(vee,MXr),e(K3,EXr),e(ke,CXr),e(ke,Z3),e(Z3,O5e),e(O5e,wXr),e(Z3,AXr),e(Z3,Fee),e(Fee,LXr),e(Z3,yXr),e(ke,xXr),e(ke,e0),e(e0,V5e),e(V5e,$Xr),e(e0,kXr),e(e0,Tee),e(Tee,SXr),e(e0,RXr),e(ke,PXr),e(ke,o0),e(o0,X5e),e(X5e,BXr),e(o0,IXr),e(o0,Mee),e(Mee,NXr),e(o0,qXr),e(Qr,jXr),M(r0,Qr,null),b(f,YVe,u),b(f,af,u),e(af,t0),e(t0,z5e),M(i$,z5e,null),e(af,DXr),e(af,Q5e),e(Q5e,GXr),b(f,KVe,u),b(f,vr,u),M(d$,vr,null),e(vr,OXr),e(vr,nf),e(nf,VXr),e(nf,Eee),e(Eee,XXr),e(nf,zXr),e(nf,Cee),e(Cee,QXr),e(nf,WXr),e(vr,HXr),e(vr,c$),e(c$,UXr),e(c$,W5e),e(W5e,JXr),e(c$,YXr),e(vr,KXr),e(vr,Ut),M(f$,Ut,null),e(Ut,ZXr),e(Ut,H5e),e(H5e,ezr),e(Ut,ozr),e(Ut,sf),e(sf,rzr),e(sf,U5e),e(U5e,tzr),e(sf,azr),e(sf,wee),e(wee,nzr),e(sf,szr),e(Ut,lzr),M(a0,Ut,null),e(vr,izr),e(vr,Wr),M(m$,Wr,null),e(Wr,dzr),e(Wr,J5e),e(J5e,czr),e(Wr,fzr),e(Wr,wn),e(wn,mzr),e(wn,Y5e),e(Y5e,gzr),e(wn,hzr),e(wn,K5e),e(K5e,pzr),e(wn,_zr),e(wn,Z5e),e(Z5e,uzr),e(wn,bzr),e(Wr,vzr),e(Wr,Se),e(Se,n0),e(n0,e3e),e(e3e,Fzr),e(n0,Tzr),e(n0,Aee),e(Aee,Mzr),e(n0,Ezr),e(Se,Czr),e(Se,s0),e(s0,o3e),e(o3e,wzr),e(s0,Azr),e(s0,Lee),e(Lee,Lzr),e(s0,yzr),e(Se,xzr),e(Se,l0),e(l0,r3e),e(r3e,$zr),e(l0,kzr),e(l0,yee),e(yee,Szr),e(l0,Rzr),e(Se,Pzr),e(Se,i0),e(i0,t3e),e(t3e,Bzr),e(i0,Izr),e(i0,xee),e(xee,Nzr),e(i0,qzr),e(Se,jzr),e(Se,d0),e(d0,a3e),e(a3e,Dzr),e(d0,Gzr),e(d0,$ee),e($ee,Ozr),e(d0,Vzr),e(Se,Xzr),e(Se,c0),e(c0,n3e),e(n3e,zzr),e(c0,Qzr),e(c0,kee),e(kee,Wzr),e(c0,Hzr),e(Se,Uzr),e(Se,f0),e(f0,s3e),e(s3e,Jzr),e(f0,Yzr),e(f0,See),e(See,Kzr),e(f0,Zzr),e(Se,eQr),e(Se,m0),e(m0,l3e),e(l3e,oQr),e(m0,rQr),e(m0,Ree),e(Ree,tQr),e(m0,aQr),e(Se,nQr),e(Se,g0),e(g0,i3e),e(i3e,sQr),e(g0,lQr),e(g0,Pee),e(Pee,iQr),e(g0,dQr),e(Se,cQr),e(Se,h0),e(h0,d3e),e(d3e,fQr),e(h0,mQr),e(h0,Bee),e(Bee,gQr),e(h0,hQr),e(Wr,pQr),M(p0,Wr,null),b(f,ZVe,u),b(f,lf,u),e(lf,_0),e(_0,c3e),M(g$,c3e,null),e(lf,_Qr),e(lf,f3e),e(f3e,uQr),b(f,eXe,u),b(f,Fr,u),M(h$,Fr,null),e(Fr,bQr),e(Fr,df),e(df,vQr),e(df,Iee),e(Iee,FQr),e(df,TQr),e(df,Nee),e(Nee,MQr),e(df,EQr),e(Fr,CQr),e(Fr,p$),e(p$,wQr),e(p$,m3e),e(m3e,AQr),e(p$,LQr),e(Fr,yQr),e(Fr,Jt),M(_$,Jt,null),e(Jt,xQr),e(Jt,g3e),e(g3e,$Qr),e(Jt,kQr),e(Jt,cf),e(cf,SQr),e(cf,h3e),e(h3e,RQr),e(cf,PQr),e(cf,qee),e(qee,BQr),e(cf,IQr),e(Jt,NQr),M(u0,Jt,null),e(Fr,qQr),e(Fr,Hr),M(u$,Hr,null),e(Hr,jQr),e(Hr,p3e),e(p3e,DQr),e(Hr,GQr),e(Hr,An),e(An,OQr),e(An,_3e),e(_3e,VQr),e(An,XQr),e(An,u3e),e(u3e,zQr),e(An,QQr),e(An,b3e),e(b3e,WQr),e(An,HQr),e(Hr,UQr),e(Hr,Re),e(Re,b0),e(b0,v3e),e(v3e,JQr),e(b0,YQr),e(b0,jee),e(jee,KQr),e(b0,ZQr),e(Re,eWr),e(Re,v0),e(v0,F3e),e(F3e,oWr),e(v0,rWr),e(v0,Dee),e(Dee,tWr),e(v0,aWr),e(Re,nWr),e(Re,F0),e(F0,T3e),e(T3e,sWr),e(F0,lWr),e(F0,Gee),e(Gee,iWr),e(F0,dWr),e(Re,cWr),e(Re,T0),e(T0,M3e),e(M3e,fWr),e(T0,mWr),e(T0,Oee),e(Oee,gWr),e(T0,hWr),e(Re,pWr),e(Re,M0),e(M0,E3e),e(E3e,_Wr),e(M0,uWr),e(M0,Vee),e(Vee,bWr),e(M0,vWr),e(Re,FWr),e(Re,E0),e(E0,C3e),e(C3e,TWr),e(E0,MWr),e(E0,Xee),e(Xee,EWr),e(E0,CWr),e(Re,wWr),e(Re,C0),e(C0,w3e),e(w3e,AWr),e(C0,LWr),e(C0,zee),e(zee,yWr),e(C0,xWr),e(Re,$Wr),e(Re,w0),e(w0,A3e),e(A3e,kWr),e(w0,SWr),e(w0,Qee),e(Qee,RWr),e(w0,PWr),e(Re,BWr),e(Re,A0),e(A0,L3e),e(L3e,IWr),e(A0,NWr),e(A0,Wee),e(Wee,qWr),e(A0,jWr),e(Re,DWr),e(Re,L0),e(L0,y3e),e(y3e,GWr),e(L0,OWr),e(L0,Hee),e(Hee,VWr),e(L0,XWr),e(Hr,zWr),M(y0,Hr,null),b(f,oXe,u),b(f,ff,u),e(ff,x0),e(x0,x3e),M(b$,x3e,null),e(ff,QWr),e(ff,$3e),e($3e,WWr),b(f,rXe,u),b(f,Tr,u),M(v$,Tr,null),e(Tr,HWr),e(Tr,mf),e(mf,UWr),e(mf,Uee),e(Uee,JWr),e(mf,YWr),e(mf,Jee),e(Jee,KWr),e(mf,ZWr),e(Tr,eHr),e(Tr,F$),e(F$,oHr),e(F$,k3e),e(k3e,rHr),e(F$,tHr),e(Tr,aHr),e(Tr,Yt),M(T$,Yt,null),e(Yt,nHr),e(Yt,S3e),e(S3e,sHr),e(Yt,lHr),e(Yt,gf),e(gf,iHr),e(gf,R3e),e(R3e,dHr),e(gf,cHr),e(gf,Yee),e(Yee,fHr),e(gf,mHr),e(Yt,gHr),M($0,Yt,null),e(Tr,hHr),e(Tr,Ur),M(M$,Ur,null),e(Ur,pHr),e(Ur,P3e),e(P3e,_Hr),e(Ur,uHr),e(Ur,Ln),e(Ln,bHr),e(Ln,B3e),e(B3e,vHr),e(Ln,FHr),e(Ln,I3e),e(I3e,THr),e(Ln,MHr),e(Ln,N3e),e(N3e,EHr),e(Ln,CHr),e(Ur,wHr),e(Ur,Ve),e(Ve,k0),e(k0,q3e),e(q3e,AHr),e(k0,LHr),e(k0,Kee),e(Kee,yHr),e(k0,xHr),e(Ve,$Hr),e(Ve,S0),e(S0,j3e),e(j3e,kHr),e(S0,SHr),e(S0,Zee),e(Zee,RHr),e(S0,PHr),e(Ve,BHr),e(Ve,R0),e(R0,D3e),e(D3e,IHr),e(R0,NHr),e(R0,eoe),e(eoe,qHr),e(R0,jHr),e(Ve,DHr),e(Ve,P0),e(P0,G3e),e(G3e,GHr),e(P0,OHr),e(P0,ooe),e(ooe,VHr),e(P0,XHr),e(Ve,zHr),e(Ve,B0),e(B0,O3e),e(O3e,QHr),e(B0,WHr),e(B0,roe),e(roe,HHr),e(B0,UHr),e(Ve,JHr),e(Ve,I0),e(I0,V3e),e(V3e,YHr),e(I0,KHr),e(I0,toe),e(toe,ZHr),e(I0,eUr),e(Ve,oUr),e(Ve,N0),e(N0,X3e),e(X3e,rUr),e(N0,tUr),e(N0,aoe),e(aoe,aUr),e(N0,nUr),e(Ve,sUr),e(Ve,q0),e(q0,z3e),e(z3e,lUr),e(q0,iUr),e(q0,noe),e(noe,dUr),e(q0,cUr),e(Ur,fUr),M(j0,Ur,null),b(f,tXe,u),b(f,hf,u),e(hf,D0),e(D0,Q3e),M(E$,Q3e,null),e(hf,mUr),e(hf,W3e),e(W3e,gUr),b(f,aXe,u),b(f,Mr,u),M(C$,Mr,null),e(Mr,hUr),e(Mr,pf),e(pf,pUr),e(pf,soe),e(soe,_Ur),e(pf,uUr),e(pf,loe),e(loe,bUr),e(pf,vUr),e(Mr,FUr),e(Mr,w$),e(w$,TUr),e(w$,H3e),e(H3e,MUr),e(w$,EUr),e(Mr,CUr),e(Mr,Kt),M(A$,Kt,null),e(Kt,wUr),e(Kt,U3e),e(U3e,AUr),e(Kt,LUr),e(Kt,_f),e(_f,yUr),e(_f,J3e),e(J3e,xUr),e(_f,$Ur),e(_f,ioe),e(ioe,kUr),e(_f,SUr),e(Kt,RUr),M(G0,Kt,null),e(Mr,PUr),e(Mr,Jr),M(L$,Jr,null),e(Jr,BUr),e(Jr,Y3e),e(Y3e,IUr),e(Jr,NUr),e(Jr,yn),e(yn,qUr),e(yn,K3e),e(K3e,jUr),e(yn,DUr),e(yn,Z3e),e(Z3e,GUr),e(yn,OUr),e(yn,e0e),e(e0e,VUr),e(yn,XUr),e(Jr,zUr),e(Jr,Xe),e(Xe,O0),e(O0,o0e),e(o0e,QUr),e(O0,WUr),e(O0,doe),e(doe,HUr),e(O0,UUr),e(Xe,JUr),e(Xe,V0),e(V0,r0e),e(r0e,YUr),e(V0,KUr),e(V0,coe),e(coe,ZUr),e(V0,eJr),e(Xe,oJr),e(Xe,X0),e(X0,t0e),e(t0e,rJr),e(X0,tJr),e(X0,foe),e(foe,aJr),e(X0,nJr),e(Xe,sJr),e(Xe,z0),e(z0,a0e),e(a0e,lJr),e(z0,iJr),e(z0,moe),e(moe,dJr),e(z0,cJr),e(Xe,fJr),e(Xe,Q0),e(Q0,n0e),e(n0e,mJr),e(Q0,gJr),e(Q0,goe),e(goe,hJr),e(Q0,pJr),e(Xe,_Jr),e(Xe,W0),e(W0,s0e),e(s0e,uJr),e(W0,bJr),e(W0,hoe),e(hoe,vJr),e(W0,FJr),e(Xe,TJr),e(Xe,H0),e(H0,l0e),e(l0e,MJr),e(H0,EJr),e(H0,poe),e(poe,CJr),e(H0,wJr),e(Xe,AJr),e(Xe,U0),e(U0,i0e),e(i0e,LJr),e(U0,yJr),e(U0,_oe),e(_oe,xJr),e(U0,$Jr),e(Jr,kJr),M(J0,Jr,null),b(f,nXe,u),b(f,uf,u),e(uf,Y0),e(Y0,d0e),M(y$,d0e,null),e(uf,SJr),e(uf,c0e),e(c0e,RJr),b(f,sXe,u),b(f,Er,u),M(x$,Er,null),e(Er,PJr),e(Er,bf),e(bf,BJr),e(bf,uoe),e(uoe,IJr),e(bf,NJr),e(bf,boe),e(boe,qJr),e(bf,jJr),e(Er,DJr),e(Er,$$),e($$,GJr),e($$,f0e),e(f0e,OJr),e($$,VJr),e(Er,XJr),e(Er,Zt),M(k$,Zt,null),e(Zt,zJr),e(Zt,m0e),e(m0e,QJr),e(Zt,WJr),e(Zt,vf),e(vf,HJr),e(vf,g0e),e(g0e,UJr),e(vf,JJr),e(vf,voe),e(voe,YJr),e(vf,KJr),e(Zt,ZJr),M(K0,Zt,null),e(Er,eYr),e(Er,Yr),M(S$,Yr,null),e(Yr,oYr),e(Yr,h0e),e(h0e,rYr),e(Yr,tYr),e(Yr,xn),e(xn,aYr),e(xn,p0e),e(p0e,nYr),e(xn,sYr),e(xn,_0e),e(_0e,lYr),e(xn,iYr),e(xn,u0e),e(u0e,dYr),e(xn,cYr),e(Yr,fYr),e(Yr,b0e),e(b0e,Z0),e(Z0,v0e),e(v0e,mYr),e(Z0,gYr),e(Z0,Foe),e(Foe,hYr),e(Z0,pYr),e(Yr,_Yr),M(ew,Yr,null),b(f,lXe,u),b(f,Ff,u),e(Ff,ow),e(ow,F0e),M(R$,F0e,null),e(Ff,uYr),e(Ff,T0e),e(T0e,bYr),b(f,iXe,u),b(f,Cr,u),M(P$,Cr,null),e(Cr,vYr),e(Cr,Tf),e(Tf,FYr),e(Tf,Toe),e(Toe,TYr),e(Tf,MYr),e(Tf,Moe),e(Moe,EYr),e(Tf,CYr),e(Cr,wYr),e(Cr,B$),e(B$,AYr),e(B$,M0e),e(M0e,LYr),e(B$,yYr),e(Cr,xYr),e(Cr,ea),M(I$,ea,null),e(ea,$Yr),e(ea,E0e),e(E0e,kYr),e(ea,SYr),e(ea,Mf),e(Mf,RYr),e(Mf,C0e),e(C0e,PYr),e(Mf,BYr),e(Mf,Eoe),e(Eoe,IYr),e(Mf,NYr),e(ea,qYr),M(rw,ea,null),e(Cr,jYr),e(Cr,Kr),M(N$,Kr,null),e(Kr,DYr),e(Kr,w0e),e(w0e,GYr),e(Kr,OYr),e(Kr,$n),e($n,VYr),e($n,A0e),e(A0e,XYr),e($n,zYr),e($n,L0e),e(L0e,QYr),e($n,WYr),e($n,y0e),e(y0e,HYr),e($n,UYr),e(Kr,JYr),e(Kr,q$),e(q$,tw),e(tw,x0e),e(x0e,YYr),e(tw,KYr),e(tw,Coe),e(Coe,ZYr),e(tw,eKr),e(q$,oKr),e(q$,aw),e(aw,$0e),e($0e,rKr),e(aw,tKr),e(aw,woe),e(woe,aKr),e(aw,nKr),e(Kr,sKr),M(nw,Kr,null),b(f,dXe,u),b(f,Ef,u),e(Ef,sw),e(sw,k0e),M(j$,k0e,null),e(Ef,lKr),e(Ef,S0e),e(S0e,iKr),b(f,cXe,u),b(f,wr,u),M(D$,wr,null),e(wr,dKr),e(wr,Cf),e(Cf,cKr),e(Cf,Aoe),e(Aoe,fKr),e(Cf,mKr),e(Cf,Loe),e(Loe,gKr),e(Cf,hKr),e(wr,pKr),e(wr,G$),e(G$,_Kr),e(G$,R0e),e(R0e,uKr),e(G$,bKr),e(wr,vKr),e(wr,oa),M(O$,oa,null),e(oa,FKr),e(oa,P0e),e(P0e,TKr),e(oa,MKr),e(oa,wf),e(wf,EKr),e(wf,B0e),e(B0e,CKr),e(wf,wKr),e(wf,yoe),e(yoe,AKr),e(wf,LKr),e(oa,yKr),M(lw,oa,null),e(wr,xKr),e(wr,Zr),M(V$,Zr,null),e(Zr,$Kr),e(Zr,I0e),e(I0e,kKr),e(Zr,SKr),e(Zr,kn),e(kn,RKr),e(kn,N0e),e(N0e,PKr),e(kn,BKr),e(kn,q0e),e(q0e,IKr),e(kn,NKr),e(kn,j0e),e(j0e,qKr),e(kn,jKr),e(Zr,DKr),e(Zr,D0e),e(D0e,iw),e(iw,G0e),e(G0e,GKr),e(iw,OKr),e(iw,xoe),e(xoe,VKr),e(iw,XKr),e(Zr,zKr),M(dw,Zr,null),fXe=!0},p(f,[u]){const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),Pf.$set(X$);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),Vg.$set(O0e);const V0e={};u&2&&(V0e.$$scope={dirty:u,ctx:f}),wh.$set(V0e);const X0e={};u&2&&(X0e.$$scope={dirty:u,ctx:f}),sp.$set(X0e);const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),lp.$set(z$);const z0e={};u&2&&(z0e.$$scope={dirty:u,ctx:f}),Lp.$set(z0e);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),yp.$set(Sn);const Q0e={};u&2&&(Q0e.$$scope={dirty:u,ctx:f}),kp.$set(Q0e);const W0e={};u&2&&(W0e.$$scope={dirty:u,ctx:f}),Su.$set(W0e);const H0e={};u&2&&(H0e.$$scope={dirty:u,ctx:f}),Pu.$set(H0e);const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),A7.$set(Q$);const U0e={};u&2&&(U0e.$$scope={dirty:u,ctx:f}),y7.$set(U0e);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),p1.$set(W$);const J0e={};u&2&&(J0e.$$scope={dirty:u,ctx:f}),u1.$set(J0e);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),r2.$set(H$);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),a2.$set(Y0e);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),E2.$set(K0e);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),w2.$set(Z0e);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),Mb.$set(Af);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),Cb.$set(ewe);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),rv.$set(owe);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),av.$set(rwe);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),mv.$set(U$);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),hv.$set(twe);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),Kv.$set(awe);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),eF.$set(nwe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),VF.$set(rt);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),zF.$set(J$);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),HF.$set(swe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),JF.$set(Y$);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),cT.$set(lwe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),mT.$set(tt);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),pT.$set(iwe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),uT.$set(Lf);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),FT.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),MT.$set(cwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),RT.$set(L);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),BT.$set(cw);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),OT.$set(fwe);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),XT.$set(mwe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),r9.$set(fw);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),a9.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),i9.$set(hwe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),c9.$set(mw);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),u9.$set(pwe);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),v9.$set(_we);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),C9.$set(gw);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),A9.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),$9.$set(bwe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),S9.$set(hw);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),B9.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),N9.$set(Fwe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),V9.$set(pw);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),z9.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),H9.$set(Mwe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),J9.$set(_w);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),VM.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),zM.$set(Cwe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),pE.$set(uw);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),uE.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),kE.$set(Awe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),RE.$set(bw);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),qE.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),DE.$set(ywe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),l4.$set(vw);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),d4.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),F4.$set($we);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),M4.$set(Fw);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),U4.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Y4.$set(Swe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),pC.$set(Tw);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),uC.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),FC.$set(Pwe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),MC.$set(Mw);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),CC.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),AC.$set(Iwe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),WC.$set(Ew);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),UC.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),_5.$set(qwe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),b5.$set(Cw);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),F5.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),M5.$set(Dwe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),C5.$set(ww);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),A5.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),o3.$set(Owe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),t3.$set(Aw);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),h3.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),_3.$set(Xwe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),$3.$set(Lw);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),S3.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),V3.$set(Qwe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),z3.$set(yw);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),r0.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),a0.$set(Hwe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),p0.$set(xw);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),u0.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),y0.$set(Jwe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),$0.$set($w);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),j0.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),G0.$set(Kwe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),J0.$set(kw);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),K0.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),ew.$set(eAe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),rw.$set(Sw);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),nw.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),lw.$set(rAe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),dw.$set(Rw)},i(f){fXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(Pf.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(D6.$$.fragment,f),E(Vg.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(Q6.$$.fragment,f),E(wh.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(K6.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(Z6.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(aL.$$.fragment,f),E(Lp.$$.fragment,f),E(yp.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(kp.$$.fragment,f),E(cL.$$.fragment,f),E(Su.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Pu.$$.fragment,f),E(pL.$$.fragment,f),E(A7.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(y7.$$.fragment,f),E(FL.$$.fragment,f),E(p1.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(u1.$$.fragment,f),E(wL.$$.fragment,f),E(r2.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(a2.$$.fragment,f),E($L.$$.fragment,f),E(E2.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(w2.$$.fragment,f),E(BL.$$.fragment,f),E(Mb.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Cb.$$.fragment,f),E(DL.$$.fragment,f),E(rv.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(av.$$.fragment,f),E(zL.$$.fragment,f),E(mv.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(hv.$$.fragment,f),E(JL.$$.fragment,f),E(Kv.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(eF.$$.fragment,f),E(oy.$$.fragment,f),E(VF.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(zF.$$.fragment,f),E(sy.$$.fragment,f),E(HF.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(JF.$$.fragment,f),E(fy.$$.fragment,f),E(cT.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(mT.$$.fragment,f),E(_y.$$.fragment,f),E(pT.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(uT.$$.fragment,f),E(Ty.$$.fragment,f),E(FT.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(MT.$$.fragment,f),E(Ay.$$.fragment,f),E(RT.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(BT.$$.fragment,f),E(ky.$$.fragment,f),E(OT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(XT.$$.fragment,f),E(Iy.$$.fragment,f),E(r9.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(a9.$$.fragment,f),E(Gy.$$.fragment,f),E(i9.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(c9.$$.fragment,f),E(Wy.$$.fragment,f),E(u9.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(v9.$$.fragment,f),E(Ky.$$.fragment,f),E(C9.$$.fragment,f),E(Zy.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(A9.$$.fragment,f),E(t8.$$.fragment,f),E($9.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(S9.$$.fragment,f),E(d8.$$.fragment,f),E(B9.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(N9.$$.fragment,f),E(h8.$$.fragment,f),E(V9.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(z9.$$.fragment,f),E(v8.$$.fragment,f),E(H9.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(J9.$$.fragment,f),E(C8.$$.fragment,f),E(VM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(zM.$$.fragment,f),E(x8.$$.fragment,f),E(pE.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(uE.$$.fragment,f),E(P8.$$.fragment,f),E(kE.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(RE.$$.fragment,f),E(j8.$$.fragment,f),E(qE.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(DE.$$.fragment,f),E(X8.$$.fragment,f),E(l4.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(d4.$$.fragment,f),E(U8.$$.fragment,f),E(F4.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(M4.$$.fragment,f),E(ex.$$.fragment,f),E(U4.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(Y4.$$.fragment,f),E(nx.$$.fragment,f),E(pC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(uC.$$.fragment,f),E(cx.$$.fragment,f),E(FC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(MC.$$.fragment,f),E(_x.$$.fragment,f),E(CC.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(AC.$$.fragment,f),E(Tx.$$.fragment,f),E(WC.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(UC.$$.fragment,f),E(Ax.$$.fragment,f),E(_5.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(b5.$$.fragment,f),E(kx.$$.fragment,f),E(F5.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(M5.$$.fragment,f),E(Ix.$$.fragment,f),E(C5.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(A5.$$.fragment,f),E(Gx.$$.fragment,f),E(o3.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(t3.$$.fragment,f),E(Qx.$$.fragment,f),E(h3.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(_3.$$.fragment,f),E(Yx.$$.fragment,f),E($3.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(S3.$$.fragment,f),E(r$.$$.fragment,f),E(V3.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(z3.$$.fragment,f),E(l$.$$.fragment,f),E(r0.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(a0.$$.fragment,f),E(m$.$$.fragment,f),E(p0.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(u0.$$.fragment,f),E(u$.$$.fragment,f),E(y0.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E($0.$$.fragment,f),E(M$.$$.fragment,f),E(j0.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(G0.$$.fragment,f),E(L$.$$.fragment,f),E(J0.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(K0.$$.fragment,f),E(S$.$$.fragment,f),E(ew.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(rw.$$.fragment,f),E(N$.$$.fragment,f),E(nw.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(lw.$$.fragment,f),E(V$.$$.fragment,f),E(dw.$$.fragment,f),fXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(Pf.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(D6.$$.fragment,f),C(Vg.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(Q6.$$.fragment,f),C(wh.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(K6.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(Z6.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(aL.$$.fragment,f),C(Lp.$$.fragment,f),C(yp.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(kp.$$.fragment,f),C(cL.$$.fragment,f),C(Su.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Pu.$$.fragment,f),C(pL.$$.fragment,f),C(A7.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(y7.$$.fragment,f),C(FL.$$.fragment,f),C(p1.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(u1.$$.fragment,f),C(wL.$$.fragment,f),C(r2.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(a2.$$.fragment,f),C($L.$$.fragment,f),C(E2.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(w2.$$.fragment,f),C(BL.$$.fragment,f),C(Mb.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Cb.$$.fragment,f),C(DL.$$.fragment,f),C(rv.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(av.$$.fragment,f),C(zL.$$.fragment,f),C(mv.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(hv.$$.fragment,f),C(JL.$$.fragment,f),C(Kv.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(eF.$$.fragment,f),C(oy.$$.fragment,f),C(VF.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(zF.$$.fragment,f),C(sy.$$.fragment,f),C(HF.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(JF.$$.fragment,f),C(fy.$$.fragment,f),C(cT.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(mT.$$.fragment,f),C(_y.$$.fragment,f),C(pT.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(uT.$$.fragment,f),C(Ty.$$.fragment,f),C(FT.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(MT.$$.fragment,f),C(Ay.$$.fragment,f),C(RT.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(BT.$$.fragment,f),C(ky.$$.fragment,f),C(OT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(XT.$$.fragment,f),C(Iy.$$.fragment,f),C(r9.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(a9.$$.fragment,f),C(Gy.$$.fragment,f),C(i9.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(c9.$$.fragment,f),C(Wy.$$.fragment,f),C(u9.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(v9.$$.fragment,f),C(Ky.$$.fragment,f),C(C9.$$.fragment,f),C(Zy.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(A9.$$.fragment,f),C(t8.$$.fragment,f),C($9.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(S9.$$.fragment,f),C(d8.$$.fragment,f),C(B9.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(N9.$$.fragment,f),C(h8.$$.fragment,f),C(V9.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(z9.$$.fragment,f),C(v8.$$.fragment,f),C(H9.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(J9.$$.fragment,f),C(C8.$$.fragment,f),C(VM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(zM.$$.fragment,f),C(x8.$$.fragment,f),C(pE.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(uE.$$.fragment,f),C(P8.$$.fragment,f),C(kE.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(RE.$$.fragment,f),C(j8.$$.fragment,f),C(qE.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(DE.$$.fragment,f),C(X8.$$.fragment,f),C(l4.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(d4.$$.fragment,f),C(U8.$$.fragment,f),C(F4.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(M4.$$.fragment,f),C(ex.$$.fragment,f),C(U4.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(Y4.$$.fragment,f),C(nx.$$.fragment,f),C(pC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(uC.$$.fragment,f),C(cx.$$.fragment,f),C(FC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(MC.$$.fragment,f),C(_x.$$.fragment,f),C(CC.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(AC.$$.fragment,f),C(Tx.$$.fragment,f),C(WC.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(UC.$$.fragment,f),C(Ax.$$.fragment,f),C(_5.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(b5.$$.fragment,f),C(kx.$$.fragment,f),C(F5.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(M5.$$.fragment,f),C(Ix.$$.fragment,f),C(C5.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(A5.$$.fragment,f),C(Gx.$$.fragment,f),C(o3.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(t3.$$.fragment,f),C(Qx.$$.fragment,f),C(h3.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(_3.$$.fragment,f),C(Yx.$$.fragment,f),C($3.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(S3.$$.fragment,f),C(r$.$$.fragment,f),C(V3.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(z3.$$.fragment,f),C(l$.$$.fragment,f),C(r0.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(a0.$$.fragment,f),C(m$.$$.fragment,f),C(p0.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(u0.$$.fragment,f),C(u$.$$.fragment,f),C(y0.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C($0.$$.fragment,f),C(M$.$$.fragment,f),C(j0.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(G0.$$.fragment,f),C(L$.$$.fragment,f),C(J0.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(K0.$$.fragment,f),C(S$.$$.fragment,f),C(ew.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(rw.$$.fragment,f),C(N$.$$.fragment,f),C(nw.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(lw.$$.fragment,f),C(V$.$$.fragment,f),C(dw.$$.fragment,f),fXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(kf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(sOe),f&&t(xi),w(P6),f&&t(lOe),f&&t(Nn),f&&t(iOe),w(B6,f),f&&t(dOe),f&&t(gS),f&&t(cOe),w(Pf,f),f&&t(fOe),f&&t($i),w(I6),f&&t(mOe),f&&t(wo),w(N6),w(D6),w(Vg),w(G6),f&&t(gOe),f&&t(Si),w(O6),f&&t(hOe),f&&t(Ao),w(V6),w(Q6),w(wh),w(W6),f&&t(pOe),f&&t(Ri),w(H6),f&&t(_Oe),f&&t(Lo),w(U6),w(K6),w(sp),w(lp),w(Z6),f&&t(uOe),f&&t(Pi),w(eL),f&&t(bOe),f&&t(yo),w(oL),w(aL),w(Lp),w(yp),w(nL),f&&t(vOe),f&&t(Ii),w(sL),f&&t(FOe),f&&t(xo),w(lL),w(dL),w(kp),w(cL),w(Su),f&&t(TOe),f&&t(ji),w(fL),f&&t(MOe),f&&t($o),w(mL),w(hL),w(Pu),w(pL),w(A7),f&&t(EOe),f&&t(Oi),w(_L),f&&t(COe),f&&t(ko),w(uL),w(vL),w(y7),w(FL),w(p1),f&&t(wOe),f&&t(zi),w(TL),f&&t(AOe),f&&t(So),w(ML),w(CL),w(u1),w(wL),w(r2),f&&t(LOe),f&&t(Hi),w(AL),f&&t(yOe),f&&t(Ro),w(LL),w(xL),w(a2),w($L),w(E2),f&&t(xOe),f&&t(Yi),w(kL),f&&t($Oe),f&&t(Po),w(SL),w(PL),w(w2),w(BL),w(Mb),f&&t(kOe),f&&t(ed),w(IL),f&&t(SOe),f&&t(Bo),w(NL),w(jL),w(Cb),w(DL),w(rv),f&&t(ROe),f&&t(td),w(GL),f&&t(POe),f&&t(Io),w(OL),w(XL),w(av),w(zL),w(mv),f&&t(BOe),f&&t(sd),w(QL),f&&t(IOe),f&&t(qo),w(WL),w(UL),w(hv),w(JL),w(Kv),f&&t(NOe),f&&t(dd),w(YL),f&&t(qOe),f&&t(jo),w(KL),w(ey),w(eF),w(oy),w(VF),f&&t(jOe),f&&t(md),w(ry),f&&t(DOe),f&&t(Do),w(ty),w(ny),w(zF),w(sy),w(HF),f&&t(GOe),f&&t(pd),w(ly),f&&t(OOe),f&&t(Go),w(iy),w(cy),w(JF),w(fy),w(cT),f&&t(VOe),f&&t(bd),w(my),f&&t(XOe),f&&t(Oo),w(gy),w(py),w(mT),w(_y),w(pT),f&&t(zOe),f&&t(Td),w(uy),f&&t(QOe),f&&t(Vo),w(by),w(Fy),w(uT),w(Ty),w(FT),f&&t(WOe),f&&t(Cd),w(My),f&&t(HOe),f&&t(Xo),w(Ey),w(wy),w(MT),w(Ay),w(RT),f&&t(UOe),f&&t(Ld),w(Ly),f&&t(JOe),f&&t(zo),w(yy),w($y),w(BT),w(ky),w(OT),f&&t(YOe),f&&t($d),w(Sy),f&&t(KOe),f&&t(Qo),w(Ry),w(By),w(XT),w(Iy),w(r9),f&&t(ZOe),f&&t(Rd),w(Ny),f&&t(eVe),f&&t(Wo),w(qy),w(Dy),w(a9),w(Gy),w(i9),f&&t(oVe),f&&t(Id),w(Vy),f&&t(rVe),f&&t(Ho),w(Xy),w(Qy),w(c9),w(Wy),w(u9),f&&t(tVe),f&&t(jd),w(Hy),f&&t(aVe),f&&t(Uo),w(Uy),w(Yy),w(v9),w(Ky),w(C9),f&&t(nVe),f&&t(Vd),w(Zy),f&&t(sVe),f&&t(Jo),w(e8),w(r8),w(A9),w(t8),w($9),f&&t(lVe),f&&t(Qd),w(n8),f&&t(iVe),f&&t(Yo),w(s8),w(i8),w(S9),w(d8),w(B9),f&&t(dVe),f&&t(Ud),w(c8),f&&t(cVe),f&&t(Ko),w(f8),w(g8),w(N9),w(h8),w(V9),f&&t(fVe),f&&t(Kd),w(p8),f&&t(mVe),f&&t(Zo),w(_8),w(b8),w(z9),w(v8),w(H9),f&&t(gVe),f&&t(oc),w(F8),f&&t(hVe),f&&t(er),w(T8),w(E8),w(J9),w(C8),w(VM),f&&t(pVe),f&&t(ac),w(w8),f&&t(_Ve),f&&t(or),w(A8),w(y8),w(zM),w(x8),w(pE),f&&t(uVe),f&&t(lc),w($8),f&&t(bVe),f&&t(rr),w(k8),w(R8),w(uE),w(P8),w(kE),f&&t(vVe),f&&t(cc),w(B8),f&&t(FVe),f&&t(tr),w(I8),w(q8),w(RE),w(j8),w(qE),f&&t(TVe),f&&t(gc),w(D8),f&&t(MVe),f&&t(ar),w(G8),w(V8),w(DE),w(X8),w(l4),f&&t(EVe),f&&t(_c),w(z8),f&&t(CVe),f&&t(nr),w(Q8),w(H8),w(d4),w(U8),w(F4),f&&t(wVe),f&&t(vc),w(J8),f&&t(AVe),f&&t(sr),w(Y8),w(Z8),w(M4),w(ex),w(U4),f&&t(LVe),f&&t(Mc),w(ox),f&&t(yVe),f&&t(lr),w(rx),w(ax),w(Y4),w(nx),w(pC),f&&t(xVe),f&&t(wc),w(sx),f&&t($Ve),f&&t(ir),w(lx),w(dx),w(uC),w(cx),w(FC),f&&t(kVe),f&&t(yc),w(mx),f&&t(SVe),f&&t(dr),w(gx),w(px),w(MC),w(_x),w(CC),f&&t(RVe),f&&t(kc),w(ux),f&&t(PVe),f&&t(cr),w(bx),w(Fx),w(AC),w(Tx),w(WC),f&&t(BVe),f&&t(Pc),w(Mx),f&&t(IVe),f&&t(fr),w(Ex),w(wx),w(UC),w(Ax),w(_5),f&&t(NVe),f&&t(Nc),w(Lx),f&&t(qVe),f&&t(mr),w(yx),w($x),w(b5),w(kx),w(F5),f&&t(jVe),f&&t(Dc),w(Sx),f&&t(DVe),f&&t(gr),w(Rx),w(Bx),w(M5),w(Ix),w(C5),f&&t(GVe),f&&t(Vc),w(Nx),f&&t(OVe),f&&t(hr),w(qx),w(Dx),w(A5),w(Gx),w(o3),f&&t(VVe),f&&t(Qc),w(Ox),f&&t(XVe),f&&t(pr),w(Vx),w(zx),w(t3),w(Qx),w(h3),f&&t(zVe),f&&t(Uc),w(Wx),f&&t(QVe),f&&t(_r),w(Hx),w(Jx),w(_3),w(Yx),w($3),f&&t(WVe),f&&t(Kc),w(Kx),f&&t(HVe),f&&t(ur),w(Zx),w(o$),w(S3),w(r$),w(V3),f&&t(UVe),f&&t(of),w(t$),f&&t(JVe),f&&t(br),w(a$),w(s$),w(z3),w(l$),w(r0),f&&t(YVe),f&&t(af),w(i$),f&&t(KVe),f&&t(vr),w(d$),w(f$),w(a0),w(m$),w(p0),f&&t(ZVe),f&&t(lf),w(g$),f&&t(eXe),f&&t(Fr),w(h$),w(_$),w(u0),w(u$),w(y0),f&&t(oXe),f&&t(ff),w(b$),f&&t(rXe),f&&t(Tr),w(v$),w(T$),w($0),w(M$),w(j0),f&&t(tXe),f&&t(hf),w(E$),f&&t(aXe),f&&t(Mr),w(C$),w(A$),w(G0),w(L$),w(J0),f&&t(nXe),f&&t(uf),w(y$),f&&t(sXe),f&&t(Er),w(x$),w(k$),w(K0),w(S$),w(ew),f&&t(lXe),f&&t(Ff),w(R$),f&&t(iXe),f&&t(Cr),w(P$),w(I$),w(rw),w(N$),w(nw),f&&t(dXe),f&&t(Ef),w(j$),f&&t(cXe),f&&t(wr),w(D$),w(O$),w(lw),w(V$),w(dw)}}}const xVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $Vt(x){return yGt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class NVt extends CGt{constructor(g){super();wGt(this,g,$Vt,yVt,AGt,{})}}export{NVt as default,xVt as metadata};
