import{S as hPt,i as pPt,s as _Pt,e as a,k as l,w as F,t as o,M as uPt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as bPt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as YWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function vPt(x){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,Vw,uf,Ge,We,pi,Ln,Xw,yn,xn,zw,_i,$n,Ww,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),Vw=o(")."),uf=l(),Ge=a("p"),We=o("Likewise, if your "),pi=a("code"),Ln=o("NewModel"),Xw=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),zw=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),Ww=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var mk=s(p);m=r(mk,"NewModelConfig"),mk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var gk=s(mi);_f=r(gk,"model_type"),gk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var hk=s(gi);hi=r(hk,'"new-model"'),hk.forEach(t),Vw=r(Ae,")."),Ae.forEach(t),uf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);Ln=r(wa,"NewModel"),wa.forEach(t),Xw=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var pk=s(yn);xn=r(pk,"PreTrainedModel"),pk.forEach(t),zw=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),Ww=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var _k=s(ui);bf=r(_k,"NewModelConfig"),_k.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,Vw),b(Qe,uf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,pi),e(pi,Ln),e(Ge,Xw),e(Ge,yn),e(yn,xn),e(Ge,zw),e(Ge,_i),e(_i,$n),e(Ge,Ww),e(Ge,ui),e(ui,bf),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(Ge)}}}function FPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function EPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function wPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _It(x){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,Vw,uf,Ge,We,pi,Ln,Xw,yn,xn,zw,_i,$n,Ww,ui,bf,Ca,Qe,Ae,mk,bi,gk,hk,Eo,wa,pk,vf,_k,IVe,wje,vi,Ff,Hoe,Qw,NVe,Uoe,qVe,Aje,kn,jVe,Joe,DVe,GVe,Yoe,OVe,VVe,Lje,Hw,yje,uk,XVe,xje,Tf,$je,Fi,Mf,Koe,Uw,zVe,Zoe,WVe,kje,Co,Jw,QVe,Yw,HVe,bk,UVe,JVe,YVe,Kw,KVe,ere,ZVe,eXe,oXe,Er,Zw,rXe,ore,tXe,aXe,Ti,nXe,rre,sXe,lXe,tre,iXe,dXe,cXe,A,Ef,are,fXe,mXe,vk,gXe,hXe,pXe,Cf,nre,_Xe,uXe,Fk,bXe,vXe,FXe,wf,sre,TXe,MXe,Tk,EXe,CXe,wXe,Af,lre,AXe,LXe,Mk,yXe,xXe,$Xe,Lf,ire,kXe,SXe,Ek,RXe,PXe,BXe,yf,dre,IXe,NXe,Ck,qXe,jXe,DXe,xf,cre,GXe,OXe,wk,VXe,XXe,zXe,$f,fre,WXe,QXe,Ak,HXe,UXe,JXe,kf,mre,YXe,KXe,Lk,ZXe,eze,oze,Sf,gre,rze,tze,yk,aze,nze,sze,Rf,hre,lze,ize,xk,dze,cze,fze,Pf,pre,mze,gze,$k,hze,pze,_ze,Bf,_re,uze,bze,kk,vze,Fze,Tze,If,ure,Mze,Eze,Sk,Cze,wze,Aze,Nf,bre,Lze,yze,Rk,xze,$ze,kze,qf,vre,Sze,Rze,Pk,Pze,Bze,Ize,jf,Fre,Nze,qze,Bk,jze,Dze,Gze,Df,Tre,Oze,Vze,Ik,Xze,zze,Wze,Gf,Mre,Qze,Hze,Nk,Uze,Jze,Yze,Of,Ere,Kze,Zze,qk,eWe,oWe,rWe,Vf,Cre,tWe,aWe,jk,nWe,sWe,lWe,Xf,wre,iWe,dWe,Dk,cWe,fWe,mWe,zf,Are,gWe,hWe,Gk,pWe,_We,uWe,Wf,Lre,bWe,vWe,Ok,FWe,TWe,MWe,Qf,yre,EWe,CWe,Vk,wWe,AWe,LWe,Hf,xre,yWe,xWe,Xk,$We,kWe,SWe,Uf,$re,RWe,PWe,zk,BWe,IWe,NWe,Jf,kre,qWe,jWe,Wk,DWe,GWe,OWe,Yf,Sre,VWe,XWe,Qk,zWe,WWe,QWe,Kf,Rre,HWe,UWe,Hk,JWe,YWe,KWe,Zf,Pre,ZWe,eQe,Uk,oQe,rQe,tQe,em,Bre,aQe,nQe,Jk,sQe,lQe,iQe,om,Ire,dQe,cQe,Yk,fQe,mQe,gQe,rm,Nre,hQe,pQe,Kk,_Qe,uQe,bQe,tm,qre,vQe,FQe,Zk,TQe,MQe,EQe,am,jre,CQe,wQe,eS,AQe,LQe,yQe,nm,Dre,xQe,$Qe,oS,kQe,SQe,RQe,sm,Gre,PQe,BQe,rS,IQe,NQe,qQe,lm,Ore,jQe,DQe,tS,GQe,OQe,VQe,im,Vre,XQe,zQe,aS,WQe,QQe,HQe,dm,Xre,UQe,JQe,nS,YQe,KQe,ZQe,cm,zre,eHe,oHe,sS,rHe,tHe,aHe,fm,Wre,nHe,sHe,lS,lHe,iHe,dHe,mm,Qre,cHe,fHe,iS,mHe,gHe,hHe,gm,Hre,pHe,_He,dS,uHe,bHe,vHe,hm,Ure,FHe,THe,cS,MHe,EHe,CHe,pm,Jre,wHe,AHe,fS,LHe,yHe,xHe,_m,Yre,$He,kHe,mS,SHe,RHe,PHe,um,Kre,BHe,IHe,gS,NHe,qHe,jHe,bm,Zre,DHe,GHe,hS,OHe,VHe,XHe,vm,ete,zHe,WHe,pS,QHe,HHe,UHe,Fm,ote,JHe,YHe,_S,KHe,ZHe,eUe,Tm,rte,oUe,rUe,uS,tUe,aUe,nUe,Mm,tte,sUe,lUe,bS,iUe,dUe,cUe,Em,ate,fUe,mUe,vS,gUe,hUe,pUe,Cm,nte,_Ue,uUe,FS,bUe,vUe,FUe,wm,ste,TUe,MUe,TS,EUe,CUe,wUe,Am,lte,AUe,LUe,MS,yUe,xUe,$Ue,Lm,ite,kUe,SUe,ES,RUe,PUe,BUe,ym,dte,IUe,NUe,CS,qUe,jUe,DUe,xm,cte,GUe,OUe,wS,VUe,XUe,zUe,$m,fte,WUe,QUe,AS,HUe,UUe,JUe,km,mte,YUe,KUe,LS,ZUe,eJe,oJe,Sm,gte,rJe,tJe,yS,aJe,nJe,sJe,Rm,hte,lJe,iJe,xS,dJe,cJe,fJe,Pm,pte,mJe,gJe,$S,hJe,pJe,_Je,Bm,_te,uJe,bJe,kS,vJe,FJe,TJe,Im,ute,MJe,EJe,SS,CJe,wJe,AJe,Nm,bte,LJe,yJe,RS,xJe,$Je,kJe,qm,vte,SJe,RJe,PS,PJe,BJe,IJe,jm,Fte,NJe,qJe,BS,jJe,DJe,GJe,Dm,Tte,OJe,VJe,IS,XJe,zJe,WJe,Gm,Mte,QJe,HJe,NS,UJe,JJe,YJe,Om,Ete,KJe,ZJe,qS,eYe,oYe,rYe,Vm,Cte,tYe,aYe,jS,nYe,sYe,lYe,Xm,wte,iYe,dYe,DS,cYe,fYe,mYe,zm,Ate,gYe,hYe,GS,pYe,_Ye,uYe,Wm,Lte,bYe,vYe,OS,FYe,TYe,MYe,Qm,yte,EYe,CYe,VS,wYe,AYe,LYe,Hm,xte,yYe,xYe,XS,$Ye,kYe,SYe,Um,$te,RYe,PYe,zS,BYe,IYe,NYe,Jm,kte,qYe,jYe,WS,DYe,GYe,OYe,Ym,Ste,VYe,XYe,QS,zYe,WYe,QYe,Km,Rte,HYe,UYe,HS,JYe,YYe,KYe,Zm,Pte,ZYe,eKe,US,oKe,rKe,tKe,eg,Bte,aKe,nKe,JS,sKe,lKe,iKe,og,Ite,dKe,cKe,YS,fKe,mKe,gKe,rg,Nte,hKe,pKe,KS,_Ke,uKe,bKe,tg,qte,vKe,FKe,ZS,TKe,MKe,EKe,ag,jte,CKe,wKe,eR,AKe,LKe,yKe,ng,Dte,xKe,$Ke,oR,kKe,SKe,RKe,sg,Gte,PKe,BKe,rR,IKe,NKe,qKe,lg,Ote,jKe,DKe,tR,GKe,OKe,VKe,ig,Vte,XKe,zKe,aR,WKe,QKe,HKe,dg,Xte,UKe,JKe,nR,YKe,KKe,ZKe,cg,zte,eZe,oZe,sR,rZe,tZe,aZe,fg,Wte,nZe,sZe,lR,lZe,iZe,dZe,mg,Qte,cZe,fZe,iR,mZe,gZe,hZe,gg,Hte,pZe,_Ze,dR,uZe,bZe,vZe,hg,Ute,FZe,TZe,cR,MZe,EZe,CZe,pg,Jte,wZe,AZe,fR,LZe,yZe,xZe,_g,Yte,$Ze,kZe,mR,SZe,RZe,PZe,ug,Kte,BZe,IZe,gR,NZe,qZe,jZe,bg,Zte,DZe,GZe,hR,OZe,VZe,XZe,vg,eae,zZe,WZe,pR,QZe,HZe,UZe,Fg,oae,JZe,YZe,_R,KZe,ZZe,eeo,Tg,rae,oeo,reo,uR,teo,aeo,neo,Mg,tae,seo,leo,bR,ieo,deo,ceo,Eg,aae,feo,meo,vR,geo,heo,peo,Cg,nae,_eo,ueo,FR,beo,veo,Feo,wg,sae,Teo,Meo,TR,Eeo,Ceo,weo,Ag,lae,Aeo,Leo,MR,yeo,xeo,$eo,Lg,keo,yg,eA,Seo,iae,Reo,Sje,Mi,xg,dae,oA,Peo,cae,Beo,Rje,wo,rA,Ieo,tA,Neo,ER,qeo,jeo,Deo,aA,Geo,fae,Oeo,Veo,Xeo,Cr,nA,zeo,mae,Weo,Qeo,Aa,Heo,gae,Ueo,Jeo,hae,Yeo,Keo,pae,Zeo,eoo,ooo,k,Sn,_ae,roo,too,CR,aoo,noo,wR,soo,loo,ioo,Rn,uae,doo,coo,AR,foo,moo,LR,goo,hoo,poo,Pn,bae,_oo,uoo,yR,boo,voo,xR,Foo,Too,Moo,$g,vae,Eoo,Coo,$R,woo,Aoo,Loo,Bn,Fae,yoo,xoo,kR,$oo,koo,SR,Soo,Roo,Poo,kg,Tae,Boo,Ioo,RR,Noo,qoo,joo,Sg,Mae,Doo,Goo,PR,Ooo,Voo,Xoo,Rg,Eae,zoo,Woo,BR,Qoo,Hoo,Uoo,In,Cae,Joo,Yoo,IR,Koo,Zoo,NR,ero,oro,rro,Nn,wae,tro,aro,qR,nro,sro,jR,lro,iro,dro,qn,Aae,cro,fro,DR,mro,gro,GR,hro,pro,_ro,Pg,Lae,uro,bro,OR,vro,Fro,Tro,Bg,yae,Mro,Ero,VR,Cro,wro,Aro,Ig,xae,Lro,yro,XR,xro,$ro,kro,jn,$ae,Sro,Rro,zR,Pro,Bro,WR,Iro,Nro,qro,Ng,kae,jro,Dro,QR,Gro,Oro,Vro,Dn,Sae,Xro,zro,HR,Wro,Qro,UR,Hro,Uro,Jro,Gn,Rae,Yro,Kro,JR,Zro,eto,YR,oto,rto,tto,On,Pae,ato,nto,KR,sto,lto,ZR,ito,dto,cto,qg,Bae,fto,mto,eP,gto,hto,pto,Vn,Iae,_to,uto,oP,bto,vto,rP,Fto,Tto,Mto,Xn,Nae,Eto,Cto,tP,wto,Ato,aP,Lto,yto,xto,zn,qae,$to,kto,nP,Sto,Rto,sP,Pto,Bto,Ito,Wn,jae,Nto,qto,lP,jto,Dto,iP,Gto,Oto,Vto,Qn,Dae,Xto,zto,dP,Wto,Qto,cP,Hto,Uto,Jto,Hn,Gae,Yto,Kto,fP,Zto,eao,mP,oao,rao,tao,jg,Oae,aao,nao,gP,sao,lao,iao,Un,Vae,dao,cao,hP,fao,mao,pP,gao,hao,pao,Dg,Xae,_ao,uao,_P,bao,vao,Fao,Jn,zae,Tao,Mao,uP,Eao,Cao,bP,wao,Aao,Lao,Yn,Wae,yao,xao,vP,$ao,kao,FP,Sao,Rao,Pao,Kn,Qae,Bao,Iao,TP,Nao,qao,MP,jao,Dao,Gao,Gg,Hae,Oao,Vao,EP,Xao,zao,Wao,Zn,Uae,Qao,Hao,CP,Uao,Jao,wP,Yao,Kao,Zao,es,Jae,eno,ono,AP,rno,tno,LP,ano,nno,sno,Og,Yae,lno,ino,yP,dno,cno,fno,os,Kae,mno,gno,xP,hno,pno,$P,_no,uno,bno,rs,Zae,vno,Fno,kP,Tno,Mno,SP,Eno,Cno,wno,ts,ene,Ano,Lno,RP,yno,xno,PP,$no,kno,Sno,as,one,Rno,Pno,BP,Bno,Ino,IP,Nno,qno,jno,ns,rne,Dno,Gno,NP,Ono,Vno,qP,Xno,zno,Wno,ss,tne,Qno,Hno,jP,Uno,Jno,DP,Yno,Kno,Zno,ls,ane,eso,oso,GP,rso,tso,OP,aso,nso,sso,Vg,nne,lso,iso,VP,dso,cso,fso,is,sne,mso,gso,XP,hso,pso,zP,_so,uso,bso,Xg,lne,vso,Fso,WP,Tso,Mso,Eso,zg,ine,Cso,wso,QP,Aso,Lso,yso,ds,dne,xso,$so,HP,kso,Sso,UP,Rso,Pso,Bso,cs,cne,Iso,Nso,JP,qso,jso,YP,Dso,Gso,Oso,fs,fne,Vso,Xso,KP,zso,Wso,ZP,Qso,Hso,Uso,Wg,mne,Jso,Yso,eB,Kso,Zso,elo,ms,gne,olo,rlo,oB,tlo,alo,rB,nlo,slo,llo,gs,hne,ilo,dlo,tB,clo,flo,aB,mlo,glo,hlo,hs,pne,plo,_lo,nB,ulo,blo,sB,vlo,Flo,Tlo,ps,_ne,Mlo,Elo,lB,Clo,wlo,iB,Alo,Llo,ylo,_s,une,xlo,$lo,dB,klo,Slo,cB,Rlo,Plo,Blo,Qg,bne,Ilo,Nlo,fB,qlo,jlo,Dlo,us,vne,Glo,Olo,mB,Vlo,Xlo,gB,zlo,Wlo,Qlo,Hg,Fne,Hlo,Ulo,hB,Jlo,Ylo,Klo,Ug,Tne,Zlo,eio,pB,oio,rio,tio,Jg,Mne,aio,nio,_B,sio,lio,iio,Yg,Ene,dio,cio,uB,fio,mio,gio,bs,Cne,hio,pio,bB,_io,uio,vB,bio,vio,Fio,Kg,wne,Tio,Mio,FB,Eio,Cio,wio,vs,Ane,Aio,Lio,TB,yio,xio,MB,$io,kio,Sio,Fs,Lne,Rio,Pio,EB,Bio,Iio,CB,Nio,qio,jio,Ts,yne,Dio,Gio,wB,Oio,Vio,AB,Xio,zio,Wio,Ms,xne,Qio,Hio,LB,Uio,Jio,yB,Yio,Kio,Zio,Es,$ne,edo,odo,xB,rdo,tdo,$B,ado,ndo,sdo,Cs,kne,ldo,ido,kB,ddo,cdo,SB,fdo,mdo,gdo,Zg,Sne,hdo,pdo,RB,_do,udo,bdo,eh,Rne,vdo,Fdo,PB,Tdo,Mdo,Edo,ws,Pne,Cdo,wdo,BB,Ado,Ldo,IB,ydo,xdo,$do,As,Bne,kdo,Sdo,NB,Rdo,Pdo,qB,Bdo,Ido,Ndo,Ls,Ine,qdo,jdo,jB,Ddo,Gdo,DB,Odo,Vdo,Xdo,oh,Nne,zdo,Wdo,GB,Qdo,Hdo,Udo,rh,qne,Jdo,Ydo,OB,Kdo,Zdo,eco,th,jne,oco,rco,VB,tco,aco,nco,ys,Dne,sco,lco,XB,ico,dco,zB,cco,fco,mco,ah,Gne,gco,hco,WB,pco,_co,uco,nh,One,bco,vco,QB,Fco,Tco,Mco,sh,Vne,Eco,Cco,HB,wco,Aco,Lco,xs,Xne,yco,xco,UB,$co,kco,JB,Sco,Rco,Pco,lh,zne,Bco,Ico,YB,Nco,qco,jco,ih,Wne,Dco,Gco,KB,Oco,Vco,Xco,$s,Qne,zco,Wco,ZB,Qco,Hco,eI,Uco,Jco,Yco,ks,Hne,Kco,Zco,oI,efo,ofo,rI,rfo,tfo,afo,Ss,Une,nfo,sfo,tI,lfo,ifo,aI,dfo,cfo,ffo,Rs,Jne,mfo,gfo,nI,hfo,pfo,sI,_fo,ufo,bfo,dh,vfo,ch,sA,Ffo,Yne,Tfo,Pje,Ei,fh,Kne,lA,Mfo,Zne,Efo,Bje,Ao,iA,Cfo,dA,wfo,lI,Afo,Lfo,yfo,cA,xfo,ese,$fo,kfo,Sfo,He,fA,Rfo,ose,Pfo,Bfo,La,Ifo,rse,Nfo,qfo,tse,jfo,Dfo,ase,Gfo,Ofo,Vfo,Y,mh,nse,Xfo,zfo,iI,Wfo,Qfo,Hfo,gh,sse,Ufo,Jfo,dI,Yfo,Kfo,Zfo,hh,lse,emo,omo,cI,rmo,tmo,amo,ph,ise,nmo,smo,fI,lmo,imo,dmo,_h,dse,cmo,fmo,mI,mmo,gmo,hmo,uh,cse,pmo,_mo,gI,umo,bmo,vmo,bh,fse,Fmo,Tmo,hI,Mmo,Emo,Cmo,vh,mse,wmo,Amo,pI,Lmo,ymo,xmo,Fh,gse,$mo,kmo,_I,Smo,Rmo,Pmo,Th,hse,Bmo,Imo,uI,Nmo,qmo,jmo,Mh,pse,Dmo,Gmo,bI,Omo,Vmo,Xmo,Eh,_se,zmo,Wmo,vI,Qmo,Hmo,Umo,Ch,use,Jmo,Ymo,FI,Kmo,Zmo,ego,wh,bse,ogo,rgo,TI,tgo,ago,ngo,Ah,vse,sgo,lgo,MI,igo,dgo,cgo,Lh,Fse,fgo,mgo,EI,ggo,hgo,pgo,yh,Tse,_go,ugo,CI,bgo,vgo,Fgo,xh,Mse,Tgo,Mgo,wI,Ego,Cgo,wgo,$h,Ese,Ago,Lgo,AI,ygo,xgo,$go,kh,Cse,kgo,Sgo,LI,Rgo,Pgo,Bgo,Sh,wse,Igo,Ngo,yI,qgo,jgo,Dgo,Rh,Ase,Ggo,Ogo,xI,Vgo,Xgo,zgo,Ph,Lse,Wgo,Qgo,$I,Hgo,Ugo,Jgo,Bh,yse,Ygo,Kgo,kI,Zgo,eho,oho,Ih,xse,rho,tho,SI,aho,nho,sho,Nh,$se,lho,iho,RI,dho,cho,fho,qh,kse,mho,gho,PI,hho,pho,_ho,jh,Sse,uho,bho,BI,vho,Fho,Tho,Dh,Rse,Mho,Eho,II,Cho,who,Aho,Gh,Pse,Lho,yho,NI,xho,$ho,kho,Oh,Bse,Sho,Rho,qI,Pho,Bho,Iho,Vh,Nho,Xh,qho,zh,mA,jho,Ise,Dho,Ije,Ci,Wh,Nse,gA,Gho,qse,Oho,Nje,Lo,hA,Vho,pA,Xho,jI,zho,Who,Qho,_A,Hho,jse,Uho,Jho,Yho,Ue,uA,Kho,Dse,Zho,epo,wi,opo,Gse,rpo,tpo,Ose,apo,npo,spo,he,Qh,Vse,lpo,ipo,DI,dpo,cpo,fpo,Hh,Xse,mpo,gpo,zse,hpo,ppo,_po,Uh,Wse,upo,bpo,GI,vpo,Fpo,Tpo,Jh,Qse,Mpo,Epo,OI,Cpo,wpo,Apo,Yh,Hse,Lpo,ypo,VI,xpo,$po,kpo,Kh,Use,Spo,Rpo,XI,Ppo,Bpo,Ipo,Zh,Jse,Npo,qpo,zI,jpo,Dpo,Gpo,ep,Yse,Opo,Vpo,WI,Xpo,zpo,Wpo,op,Kse,Qpo,Hpo,QI,Upo,Jpo,Ypo,rp,Zse,Kpo,Zpo,HI,e_o,o_o,r_o,tp,ele,t_o,a_o,UI,n_o,s_o,l_o,ap,ole,i_o,d_o,JI,c_o,f_o,m_o,np,rle,g_o,h_o,YI,p_o,__o,u_o,sp,tle,b_o,v_o,KI,F_o,T_o,M_o,lp,ale,E_o,C_o,ZI,w_o,A_o,L_o,ip,nle,y_o,x_o,eN,$_o,k_o,S_o,dp,sle,R_o,P_o,oN,B_o,I_o,N_o,cp,q_o,fp,j_o,mp,bA,D_o,lle,G_o,qje,Ai,gp,ile,vA,O_o,dle,V_o,jje,yo,FA,X_o,Li,z_o,rN,W_o,Q_o,tN,H_o,U_o,J_o,TA,Y_o,cle,K_o,Z_o,euo,tt,MA,ouo,fle,ruo,tuo,yi,auo,mle,nuo,suo,aN,luo,iuo,duo,hp,cuo,Je,EA,fuo,gle,muo,guo,ya,huo,hle,puo,_uo,ple,uuo,buo,_le,vuo,Fuo,Tuo,y,pp,ule,Muo,Euo,nN,Cuo,wuo,Auo,_p,ble,Luo,yuo,sN,xuo,$uo,kuo,up,vle,Suo,Ruo,lN,Puo,Buo,Iuo,bp,Fle,Nuo,quo,iN,juo,Duo,Guo,vp,Tle,Ouo,Vuo,dN,Xuo,zuo,Wuo,Fp,Mle,Quo,Huo,cN,Uuo,Juo,Yuo,Tp,Ele,Kuo,Zuo,fN,e1o,o1o,r1o,Mp,Cle,t1o,a1o,mN,n1o,s1o,l1o,Ep,wle,i1o,d1o,gN,c1o,f1o,m1o,Cp,Ale,g1o,h1o,hN,p1o,_1o,u1o,wp,Lle,b1o,v1o,pN,F1o,T1o,M1o,Ap,yle,E1o,C1o,_N,w1o,A1o,L1o,Lp,xle,y1o,x1o,uN,$1o,k1o,S1o,yp,$le,R1o,P1o,bN,B1o,I1o,N1o,xp,kle,q1o,j1o,vN,D1o,G1o,O1o,$p,Sle,V1o,X1o,FN,z1o,W1o,Q1o,kp,Rle,H1o,U1o,TN,J1o,Y1o,K1o,Sp,Ple,Z1o,ebo,MN,obo,rbo,tbo,Rp,Ble,abo,nbo,EN,sbo,lbo,ibo,Pp,Ile,dbo,cbo,CN,fbo,mbo,gbo,Bp,Nle,hbo,pbo,wN,_bo,ubo,bbo,Ip,qle,vbo,Fbo,AN,Tbo,Mbo,Ebo,Np,jle,Cbo,wbo,LN,Abo,Lbo,ybo,qp,Dle,xbo,$bo,yN,kbo,Sbo,Rbo,jp,Gle,Pbo,Bbo,xN,Ibo,Nbo,qbo,Dp,Ole,jbo,Dbo,$N,Gbo,Obo,Vbo,Gp,Vle,Xbo,zbo,kN,Wbo,Qbo,Hbo,Op,Xle,Ubo,Jbo,SN,Ybo,Kbo,Zbo,Vp,zle,e2o,o2o,RN,r2o,t2o,a2o,Xp,Wle,n2o,s2o,PN,l2o,i2o,d2o,zp,Qle,c2o,f2o,BN,m2o,g2o,h2o,Wp,Hle,p2o,_2o,IN,u2o,b2o,v2o,Qp,Ule,F2o,T2o,NN,M2o,E2o,C2o,Ps,Jle,w2o,A2o,qN,L2o,y2o,jN,x2o,$2o,k2o,Hp,Yle,S2o,R2o,DN,P2o,B2o,I2o,Up,Kle,N2o,q2o,GN,j2o,D2o,G2o,Jp,Zle,O2o,V2o,ON,X2o,z2o,W2o,Yp,eie,Q2o,H2o,VN,U2o,J2o,Y2o,Kp,oie,K2o,Z2o,XN,evo,ovo,rvo,Zp,rie,tvo,avo,zN,nvo,svo,lvo,e_,tie,ivo,dvo,WN,cvo,fvo,mvo,o_,aie,gvo,hvo,QN,pvo,_vo,uvo,r_,nie,bvo,vvo,HN,Fvo,Tvo,Mvo,t_,sie,Evo,Cvo,UN,wvo,Avo,Lvo,a_,lie,yvo,xvo,JN,$vo,kvo,Svo,n_,iie,Rvo,Pvo,YN,Bvo,Ivo,Nvo,s_,die,qvo,jvo,KN,Dvo,Gvo,Ovo,l_,cie,Vvo,Xvo,ZN,zvo,Wvo,Qvo,i_,fie,Hvo,Uvo,eq,Jvo,Yvo,Kvo,d_,mie,Zvo,e3o,oq,o3o,r3o,t3o,c_,gie,a3o,n3o,rq,s3o,l3o,i3o,f_,hie,d3o,c3o,tq,f3o,m3o,g3o,m_,pie,h3o,p3o,aq,_3o,u3o,b3o,g_,_ie,v3o,F3o,nq,T3o,M3o,E3o,h_,uie,C3o,w3o,sq,A3o,L3o,y3o,p_,bie,x3o,$3o,lq,k3o,S3o,R3o,__,vie,P3o,B3o,iq,I3o,N3o,q3o,u_,Fie,j3o,D3o,dq,G3o,O3o,V3o,b_,Tie,X3o,z3o,cq,W3o,Q3o,H3o,v_,Mie,U3o,J3o,fq,Y3o,K3o,Z3o,F_,Eie,eFo,oFo,mq,rFo,tFo,aFo,T_,Cie,nFo,sFo,gq,lFo,iFo,dFo,M_,wie,cFo,fFo,hq,mFo,gFo,hFo,E_,Aie,pFo,_Fo,pq,uFo,bFo,vFo,C_,Lie,FFo,TFo,_q,MFo,EFo,CFo,w_,yie,wFo,AFo,uq,LFo,yFo,xFo,A_,xie,$Fo,kFo,bq,SFo,RFo,PFo,L_,$ie,BFo,IFo,vq,NFo,qFo,jFo,y_,kie,DFo,GFo,Fq,OFo,VFo,XFo,x_,Sie,zFo,WFo,Tq,QFo,HFo,UFo,$_,Rie,JFo,YFo,Mq,KFo,ZFo,e6o,k_,Pie,o6o,r6o,Eq,t6o,a6o,n6o,S_,Bie,s6o,l6o,Cq,i6o,d6o,c6o,R_,Iie,f6o,m6o,wq,g6o,h6o,p6o,P_,Nie,_6o,u6o,Aq,b6o,v6o,F6o,B_,qie,T6o,M6o,Lq,E6o,C6o,w6o,I_,jie,A6o,L6o,yq,y6o,x6o,$6o,N_,Die,k6o,S6o,xq,R6o,P6o,B6o,q_,Gie,I6o,N6o,$q,q6o,j6o,D6o,j_,Oie,G6o,O6o,kq,V6o,X6o,z6o,D_,Vie,W6o,Q6o,Sq,H6o,U6o,J6o,G_,Xie,Y6o,K6o,Rq,Z6o,eTo,oTo,O_,zie,rTo,tTo,Pq,aTo,nTo,sTo,V_,Wie,lTo,iTo,Bq,dTo,cTo,fTo,X_,Qie,mTo,gTo,Iq,hTo,pTo,_To,z_,Hie,uTo,bTo,Nq,vTo,FTo,TTo,W_,Uie,MTo,ETo,qq,CTo,wTo,ATo,Q_,Jie,LTo,yTo,jq,xTo,$To,kTo,H_,Yie,STo,RTo,Dq,PTo,BTo,ITo,U_,Kie,NTo,qTo,Gq,jTo,DTo,GTo,J_,Zie,OTo,VTo,Oq,XTo,zTo,WTo,Y_,ede,QTo,HTo,Vq,UTo,JTo,YTo,K_,ode,KTo,ZTo,Xq,e7o,o7o,r7o,Z_,rde,t7o,a7o,zq,n7o,s7o,l7o,eu,tde,i7o,d7o,Wq,c7o,f7o,m7o,ou,ade,g7o,h7o,Qq,p7o,_7o,u7o,ru,nde,b7o,v7o,Hq,F7o,T7o,M7o,tu,sde,E7o,C7o,Uq,w7o,A7o,L7o,au,lde,y7o,x7o,Jq,$7o,k7o,S7o,nu,ide,R7o,P7o,Yq,B7o,I7o,N7o,su,dde,q7o,j7o,Kq,D7o,G7o,O7o,lu,cde,V7o,X7o,Zq,z7o,W7o,Q7o,iu,fde,H7o,U7o,ej,J7o,Y7o,K7o,du,mde,Z7o,e9o,oj,o9o,r9o,t9o,cu,gde,a9o,n9o,rj,s9o,l9o,i9o,fu,d9o,hde,c9o,f9o,pde,m9o,g9o,mu,Dje,xi,gu,_de,CA,h9o,ude,p9o,Gje,xo,wA,_9o,$i,u9o,tj,b9o,v9o,aj,F9o,T9o,M9o,AA,E9o,bde,C9o,w9o,A9o,at,LA,L9o,vde,y9o,x9o,ki,$9o,Fde,k9o,S9o,nj,R9o,P9o,B9o,hu,I9o,Ye,yA,N9o,Tde,q9o,j9o,xa,D9o,Mde,G9o,O9o,Ede,V9o,X9o,Cde,z9o,W9o,Q9o,G,pu,wde,H9o,U9o,sj,J9o,Y9o,K9o,_u,Ade,Z9o,eMo,lj,oMo,rMo,tMo,uu,Lde,aMo,nMo,ij,sMo,lMo,iMo,bu,yde,dMo,cMo,dj,fMo,mMo,gMo,vu,xde,hMo,pMo,cj,_Mo,uMo,bMo,Fu,$de,vMo,FMo,fj,TMo,MMo,EMo,Tu,kde,CMo,wMo,mj,AMo,LMo,yMo,Mu,Sde,xMo,$Mo,gj,kMo,SMo,RMo,Eu,Rde,PMo,BMo,hj,IMo,NMo,qMo,Cu,Pde,jMo,DMo,pj,GMo,OMo,VMo,wu,Bde,XMo,zMo,_j,WMo,QMo,HMo,Au,Ide,UMo,JMo,uj,YMo,KMo,ZMo,Lu,Nde,e4o,o4o,bj,r4o,t4o,a4o,yu,qde,n4o,s4o,vj,l4o,i4o,d4o,xu,jde,c4o,f4o,Fj,m4o,g4o,h4o,$u,Dde,p4o,_4o,Tj,u4o,b4o,v4o,ku,Gde,F4o,T4o,Mj,M4o,E4o,C4o,Su,Ode,w4o,A4o,Ej,L4o,y4o,x4o,Ru,Vde,$4o,k4o,Cj,S4o,R4o,P4o,Pu,Xde,B4o,I4o,wj,N4o,q4o,j4o,Bu,zde,D4o,G4o,Aj,O4o,V4o,X4o,Iu,Wde,z4o,W4o,Lj,Q4o,H4o,U4o,Nu,Qde,J4o,Y4o,yj,K4o,Z4o,eEo,qu,Hde,oEo,rEo,xj,tEo,aEo,nEo,ju,Ude,sEo,lEo,$j,iEo,dEo,cEo,Du,Jde,fEo,mEo,kj,gEo,hEo,pEo,Gu,Yde,_Eo,uEo,Sj,bEo,vEo,FEo,Ou,Kde,TEo,MEo,Rj,EEo,CEo,wEo,Vu,Zde,AEo,LEo,Pj,yEo,xEo,$Eo,Xu,ece,kEo,SEo,Bj,REo,PEo,BEo,zu,oce,IEo,NEo,Ij,qEo,jEo,DEo,Wu,rce,GEo,OEo,Nj,VEo,XEo,zEo,Qu,tce,WEo,QEo,qj,HEo,UEo,JEo,Hu,ace,YEo,KEo,jj,ZEo,eCo,oCo,Uu,nce,rCo,tCo,Dj,aCo,nCo,sCo,Ju,sce,lCo,iCo,Gj,dCo,cCo,fCo,Yu,lce,mCo,gCo,Oj,hCo,pCo,_Co,Ku,ice,uCo,bCo,Vj,vCo,FCo,TCo,Zu,dce,MCo,ECo,Xj,CCo,wCo,ACo,e1,cce,LCo,yCo,zj,xCo,$Co,kCo,o1,fce,SCo,RCo,Wj,PCo,BCo,ICo,r1,mce,NCo,qCo,Qj,jCo,DCo,GCo,t1,gce,OCo,VCo,Hj,XCo,zCo,WCo,a1,QCo,hce,HCo,UCo,pce,JCo,YCo,n1,Oje,Si,s1,_ce,xA,KCo,uce,ZCo,Vje,$o,$A,e5o,Ri,o5o,Uj,r5o,t5o,Jj,a5o,n5o,s5o,kA,l5o,bce,i5o,d5o,c5o,nt,SA,f5o,vce,m5o,g5o,Pi,h5o,Fce,p5o,_5o,Yj,u5o,b5o,v5o,l1,F5o,Ke,RA,T5o,Tce,M5o,E5o,$a,C5o,Mce,w5o,A5o,Ece,L5o,y5o,Cce,x5o,$5o,k5o,z,i1,wce,S5o,R5o,Kj,P5o,B5o,I5o,d1,Ace,N5o,q5o,Zj,j5o,D5o,G5o,c1,Lce,O5o,V5o,eD,X5o,z5o,W5o,f1,yce,Q5o,H5o,oD,U5o,J5o,Y5o,m1,xce,K5o,Z5o,rD,e0o,o0o,r0o,g1,$ce,t0o,a0o,tD,n0o,s0o,l0o,h1,kce,i0o,d0o,aD,c0o,f0o,m0o,p1,Sce,g0o,h0o,nD,p0o,_0o,u0o,_1,Rce,b0o,v0o,sD,F0o,T0o,M0o,u1,Pce,E0o,C0o,lD,w0o,A0o,L0o,b1,Bce,y0o,x0o,iD,$0o,k0o,S0o,v1,Ice,R0o,P0o,dD,B0o,I0o,N0o,F1,Nce,q0o,j0o,cD,D0o,G0o,O0o,T1,qce,V0o,X0o,fD,z0o,W0o,Q0o,M1,jce,H0o,U0o,mD,J0o,Y0o,K0o,E1,Dce,Z0o,ewo,gD,owo,rwo,two,C1,Gce,awo,nwo,hD,swo,lwo,iwo,w1,Oce,dwo,cwo,pD,fwo,mwo,gwo,A1,Vce,hwo,pwo,_D,_wo,uwo,bwo,L1,Xce,vwo,Fwo,uD,Two,Mwo,Ewo,y1,zce,Cwo,wwo,bD,Awo,Lwo,ywo,x1,Wce,xwo,$wo,vD,kwo,Swo,Rwo,$1,Qce,Pwo,Bwo,FD,Iwo,Nwo,qwo,k1,Hce,jwo,Dwo,TD,Gwo,Owo,Vwo,S1,Uce,Xwo,zwo,MD,Wwo,Qwo,Hwo,R1,Jce,Uwo,Jwo,ED,Ywo,Kwo,Zwo,P1,Yce,eAo,oAo,CD,rAo,tAo,aAo,B1,Kce,nAo,sAo,wD,lAo,iAo,dAo,I1,Zce,cAo,fAo,AD,mAo,gAo,hAo,N1,efe,pAo,_Ao,LD,uAo,bAo,vAo,q1,ofe,FAo,TAo,yD,MAo,EAo,CAo,j1,rfe,wAo,AAo,xD,LAo,yAo,xAo,D1,tfe,$Ao,kAo,$D,SAo,RAo,PAo,G1,afe,BAo,IAo,kD,NAo,qAo,jAo,O1,nfe,DAo,GAo,SD,OAo,VAo,XAo,V1,sfe,zAo,WAo,RD,QAo,HAo,UAo,X1,lfe,JAo,YAo,PD,KAo,ZAo,eLo,z1,ife,oLo,rLo,BD,tLo,aLo,nLo,W1,sLo,dfe,lLo,iLo,cfe,dLo,cLo,Q1,Xje,Bi,H1,ffe,PA,fLo,mfe,mLo,zje,ko,BA,gLo,Ii,hLo,ID,pLo,_Lo,ND,uLo,bLo,vLo,IA,FLo,gfe,TLo,MLo,ELo,st,NA,CLo,hfe,wLo,ALo,Ni,LLo,pfe,yLo,xLo,qD,$Lo,kLo,SLo,U1,RLo,Ze,qA,PLo,_fe,BLo,ILo,ka,NLo,ufe,qLo,jLo,bfe,DLo,GLo,vfe,OLo,VLo,XLo,Q,J1,Ffe,zLo,WLo,jD,QLo,HLo,ULo,Y1,Tfe,JLo,YLo,DD,KLo,ZLo,eyo,K1,Mfe,oyo,ryo,GD,tyo,ayo,nyo,Z1,Efe,syo,lyo,OD,iyo,dyo,cyo,eb,Cfe,fyo,myo,VD,gyo,hyo,pyo,ob,wfe,_yo,uyo,XD,byo,vyo,Fyo,rb,Afe,Tyo,Myo,zD,Eyo,Cyo,wyo,tb,Lfe,Ayo,Lyo,WD,yyo,xyo,$yo,ab,yfe,kyo,Syo,QD,Ryo,Pyo,Byo,nb,xfe,Iyo,Nyo,HD,qyo,jyo,Dyo,sb,$fe,Gyo,Oyo,UD,Vyo,Xyo,zyo,lb,kfe,Wyo,Qyo,JD,Hyo,Uyo,Jyo,ib,Sfe,Yyo,Kyo,YD,Zyo,e8o,o8o,db,Rfe,r8o,t8o,KD,a8o,n8o,s8o,cb,Pfe,l8o,i8o,ZD,d8o,c8o,f8o,fb,Bfe,m8o,g8o,eG,h8o,p8o,_8o,mb,Ife,u8o,b8o,oG,v8o,F8o,T8o,gb,Nfe,M8o,E8o,rG,C8o,w8o,A8o,hb,qfe,L8o,y8o,tG,x8o,$8o,k8o,pb,jfe,S8o,R8o,aG,P8o,B8o,I8o,_b,Dfe,N8o,q8o,nG,j8o,D8o,G8o,ub,Gfe,O8o,V8o,sG,X8o,z8o,W8o,bb,Ofe,Q8o,H8o,lG,U8o,J8o,Y8o,vb,Vfe,K8o,Z8o,iG,exo,oxo,rxo,Fb,Xfe,txo,axo,dG,nxo,sxo,lxo,Tb,zfe,ixo,dxo,cG,cxo,fxo,mxo,Mb,Wfe,gxo,hxo,fG,pxo,_xo,uxo,Eb,Qfe,bxo,vxo,mG,Fxo,Txo,Mxo,Cb,Hfe,Exo,Cxo,gG,wxo,Axo,Lxo,wb,Ufe,yxo,xxo,hG,$xo,kxo,Sxo,Ab,Jfe,Rxo,Pxo,pG,Bxo,Ixo,Nxo,Lb,Yfe,qxo,jxo,Kfe,Dxo,Gxo,Oxo,yb,Zfe,Vxo,Xxo,_G,zxo,Wxo,Qxo,xb,eme,Hxo,Uxo,uG,Jxo,Yxo,Kxo,$b,ome,Zxo,e$o,bG,o$o,r$o,t$o,kb,rme,a$o,n$o,vG,s$o,l$o,i$o,Sb,d$o,tme,c$o,f$o,ame,m$o,g$o,Rb,Wje,qi,Pb,nme,jA,h$o,sme,p$o,Qje,So,DA,_$o,ji,u$o,FG,b$o,v$o,TG,F$o,T$o,M$o,GA,E$o,lme,C$o,w$o,A$o,lt,OA,L$o,ime,y$o,x$o,Di,$$o,dme,k$o,S$o,MG,R$o,P$o,B$o,Bb,I$o,eo,VA,N$o,cme,q$o,j$o,Sa,D$o,fme,G$o,O$o,mme,V$o,X$o,gme,z$o,W$o,Q$o,_e,Ib,hme,H$o,U$o,EG,J$o,Y$o,K$o,Nb,pme,Z$o,eko,CG,oko,rko,tko,qb,_me,ako,nko,wG,sko,lko,iko,jb,ume,dko,cko,AG,fko,mko,gko,Db,bme,hko,pko,LG,_ko,uko,bko,Gb,vme,vko,Fko,yG,Tko,Mko,Eko,Ob,Fme,Cko,wko,xG,Ako,Lko,yko,Vb,Tme,xko,$ko,$G,kko,Sko,Rko,Xb,Mme,Pko,Bko,kG,Iko,Nko,qko,zb,Eme,jko,Dko,SG,Gko,Oko,Vko,Wb,Cme,Xko,zko,RG,Wko,Qko,Hko,Qb,wme,Uko,Jko,PG,Yko,Kko,Zko,Hb,Ame,eSo,oSo,BG,rSo,tSo,aSo,Ub,Lme,nSo,sSo,IG,lSo,iSo,dSo,Jb,yme,cSo,fSo,NG,mSo,gSo,hSo,Yb,xme,pSo,_So,qG,uSo,bSo,vSo,Kb,FSo,$me,TSo,MSo,kme,ESo,CSo,Zb,Hje,Gi,e2,Sme,XA,wSo,Rme,ASo,Uje,Ro,zA,LSo,Oi,ySo,jG,xSo,$So,DG,kSo,SSo,RSo,WA,PSo,Pme,BSo,ISo,NSo,it,QA,qSo,Bme,jSo,DSo,Vi,GSo,Ime,OSo,VSo,GG,XSo,zSo,WSo,o2,QSo,oo,HA,HSo,Nme,USo,JSo,Ra,YSo,qme,KSo,ZSo,jme,eRo,oRo,Dme,rRo,tRo,aRo,N,r2,Gme,nRo,sRo,OG,lRo,iRo,dRo,t2,Ome,cRo,fRo,VG,mRo,gRo,hRo,a2,Vme,pRo,_Ro,XG,uRo,bRo,vRo,n2,Xme,FRo,TRo,zG,MRo,ERo,CRo,s2,zme,wRo,ARo,WG,LRo,yRo,xRo,l2,Wme,$Ro,kRo,QG,SRo,RRo,PRo,i2,Qme,BRo,IRo,HG,NRo,qRo,jRo,d2,Hme,DRo,GRo,UG,ORo,VRo,XRo,c2,Ume,zRo,WRo,JG,QRo,HRo,URo,f2,Jme,JRo,YRo,YG,KRo,ZRo,ePo,m2,Yme,oPo,rPo,KG,tPo,aPo,nPo,g2,Kme,sPo,lPo,ZG,iPo,dPo,cPo,h2,Zme,fPo,mPo,eO,gPo,hPo,pPo,p2,ege,_Po,uPo,oO,bPo,vPo,FPo,_2,oge,TPo,MPo,rO,EPo,CPo,wPo,u2,rge,APo,LPo,tO,yPo,xPo,$Po,b2,tge,kPo,SPo,aO,RPo,PPo,BPo,v2,age,IPo,NPo,nO,qPo,jPo,DPo,F2,nge,GPo,OPo,sO,VPo,XPo,zPo,T2,sge,WPo,QPo,lO,HPo,UPo,JPo,M2,lge,YPo,KPo,iO,ZPo,eBo,oBo,E2,ige,rBo,tBo,dO,aBo,nBo,sBo,C2,dge,lBo,iBo,cO,dBo,cBo,fBo,w2,cge,mBo,gBo,fO,hBo,pBo,_Bo,A2,fge,uBo,bBo,mO,vBo,FBo,TBo,L2,mge,MBo,EBo,gO,CBo,wBo,ABo,y2,gge,LBo,yBo,hO,xBo,$Bo,kBo,x2,hge,SBo,RBo,pO,PBo,BBo,IBo,$2,pge,NBo,qBo,_O,jBo,DBo,GBo,k2,_ge,OBo,VBo,uO,XBo,zBo,WBo,S2,uge,QBo,HBo,bO,UBo,JBo,YBo,R2,bge,KBo,ZBo,vO,eIo,oIo,rIo,P2,vge,tIo,aIo,FO,nIo,sIo,lIo,B2,Fge,iIo,dIo,TO,cIo,fIo,mIo,I2,Tge,gIo,hIo,MO,pIo,_Io,uIo,N2,Mge,bIo,vIo,EO,FIo,TIo,MIo,q2,Ege,EIo,CIo,CO,wIo,AIo,LIo,j2,Cge,yIo,xIo,wO,$Io,kIo,SIo,D2,wge,RIo,PIo,AO,BIo,IIo,NIo,G2,Age,qIo,jIo,LO,DIo,GIo,OIo,O2,Lge,VIo,XIo,yO,zIo,WIo,QIo,V2,yge,HIo,UIo,xO,JIo,YIo,KIo,X2,xge,ZIo,eNo,$O,oNo,rNo,tNo,z2,$ge,aNo,nNo,kO,sNo,lNo,iNo,W2,kge,dNo,cNo,SO,fNo,mNo,gNo,Q2,Sge,hNo,pNo,RO,_No,uNo,bNo,H2,Rge,vNo,FNo,PO,TNo,MNo,ENo,U2,Pge,CNo,wNo,BO,ANo,LNo,yNo,J2,xNo,Bge,$No,kNo,Ige,SNo,RNo,Y2,Jje,Xi,K2,Nge,UA,PNo,qge,BNo,Yje,Po,JA,INo,zi,NNo,IO,qNo,jNo,NO,DNo,GNo,ONo,YA,VNo,jge,XNo,zNo,WNo,dt,KA,QNo,Dge,HNo,UNo,Wi,JNo,Gge,YNo,KNo,qO,ZNo,eqo,oqo,Z2,rqo,ro,ZA,tqo,Oge,aqo,nqo,Pa,sqo,Vge,lqo,iqo,Xge,dqo,cqo,zge,fqo,mqo,gqo,Z,ev,Wge,hqo,pqo,jO,_qo,uqo,bqo,ov,Qge,vqo,Fqo,DO,Tqo,Mqo,Eqo,rv,Hge,Cqo,wqo,GO,Aqo,Lqo,yqo,tv,Uge,xqo,$qo,OO,kqo,Sqo,Rqo,av,Jge,Pqo,Bqo,VO,Iqo,Nqo,qqo,nv,Yge,jqo,Dqo,XO,Gqo,Oqo,Vqo,sv,Kge,Xqo,zqo,zO,Wqo,Qqo,Hqo,lv,Zge,Uqo,Jqo,WO,Yqo,Kqo,Zqo,iv,ehe,ejo,ojo,QO,rjo,tjo,ajo,dv,ohe,njo,sjo,HO,ljo,ijo,djo,cv,rhe,cjo,fjo,UO,mjo,gjo,hjo,fv,the,pjo,_jo,JO,ujo,bjo,vjo,mv,ahe,Fjo,Tjo,YO,Mjo,Ejo,Cjo,gv,nhe,wjo,Ajo,KO,Ljo,yjo,xjo,hv,she,$jo,kjo,ZO,Sjo,Rjo,Pjo,pv,lhe,Bjo,Ijo,eV,Njo,qjo,jjo,_v,ihe,Djo,Gjo,oV,Ojo,Vjo,Xjo,uv,dhe,zjo,Wjo,rV,Qjo,Hjo,Ujo,bv,che,Jjo,Yjo,tV,Kjo,Zjo,eDo,vv,fhe,oDo,rDo,aV,tDo,aDo,nDo,Fv,mhe,sDo,lDo,nV,iDo,dDo,cDo,Tv,ghe,fDo,mDo,sV,gDo,hDo,pDo,Mv,hhe,_Do,uDo,lV,bDo,vDo,FDo,Ev,phe,TDo,MDo,iV,EDo,CDo,wDo,Cv,_he,ADo,LDo,dV,yDo,xDo,$Do,wv,uhe,kDo,SDo,cV,RDo,PDo,BDo,Av,bhe,IDo,NDo,fV,qDo,jDo,DDo,Lv,vhe,GDo,ODo,mV,VDo,XDo,zDo,yv,Fhe,WDo,QDo,gV,HDo,UDo,JDo,xv,YDo,The,KDo,ZDo,Mhe,eGo,oGo,$v,Kje,Qi,kv,Ehe,eL,rGo,Che,tGo,Zje,Bo,oL,aGo,Hi,nGo,hV,sGo,lGo,pV,iGo,dGo,cGo,rL,fGo,whe,mGo,gGo,hGo,ct,tL,pGo,Ahe,_Go,uGo,Ui,bGo,Lhe,vGo,FGo,_V,TGo,MGo,EGo,Sv,CGo,to,aL,wGo,yhe,AGo,LGo,Ba,yGo,xhe,xGo,$Go,$he,kGo,SGo,khe,RGo,PGo,BGo,Yr,Rv,She,IGo,NGo,uV,qGo,jGo,DGo,Pv,Rhe,GGo,OGo,bV,VGo,XGo,zGo,Bv,Phe,WGo,QGo,vV,HGo,UGo,JGo,Iv,Bhe,YGo,KGo,FV,ZGo,eOo,oOo,Nv,Ihe,rOo,tOo,TV,aOo,nOo,sOo,qv,lOo,Nhe,iOo,dOo,qhe,cOo,fOo,jv,eDe,Ji,Dv,jhe,nL,mOo,Dhe,gOo,oDe,Io,sL,hOo,Yi,pOo,MV,_Oo,uOo,EV,bOo,vOo,FOo,lL,TOo,Ghe,MOo,EOo,COo,ft,iL,wOo,Ohe,AOo,LOo,Ki,yOo,Vhe,xOo,$Oo,CV,kOo,SOo,ROo,Gv,POo,ao,dL,BOo,Xhe,IOo,NOo,Ia,qOo,zhe,jOo,DOo,Whe,GOo,OOo,Qhe,VOo,XOo,zOo,H,Ov,Hhe,WOo,QOo,wV,HOo,UOo,JOo,Vv,Uhe,YOo,KOo,AV,ZOo,eVo,oVo,Xv,Jhe,rVo,tVo,LV,aVo,nVo,sVo,zv,Yhe,lVo,iVo,yV,dVo,cVo,fVo,Wv,Khe,mVo,gVo,xV,hVo,pVo,_Vo,Qv,Zhe,uVo,bVo,$V,vVo,FVo,TVo,Hv,epe,MVo,EVo,kV,CVo,wVo,AVo,Uv,ope,LVo,yVo,SV,xVo,$Vo,kVo,Jv,rpe,SVo,RVo,RV,PVo,BVo,IVo,Yv,tpe,NVo,qVo,PV,jVo,DVo,GVo,Kv,ape,OVo,VVo,BV,XVo,zVo,WVo,Zv,npe,QVo,HVo,IV,UVo,JVo,YVo,e3,spe,KVo,ZVo,NV,eXo,oXo,rXo,o3,lpe,tXo,aXo,qV,nXo,sXo,lXo,r3,ipe,iXo,dXo,jV,cXo,fXo,mXo,t3,dpe,gXo,hXo,DV,pXo,_Xo,uXo,a3,cpe,bXo,vXo,GV,FXo,TXo,MXo,n3,fpe,EXo,CXo,OV,wXo,AXo,LXo,s3,mpe,yXo,xXo,VV,$Xo,kXo,SXo,l3,gpe,RXo,PXo,XV,BXo,IXo,NXo,i3,hpe,qXo,jXo,zV,DXo,GXo,OXo,d3,ppe,VXo,XXo,WV,zXo,WXo,QXo,c3,_pe,HXo,UXo,QV,JXo,YXo,KXo,f3,upe,ZXo,ezo,HV,ozo,rzo,tzo,m3,bpe,azo,nzo,UV,szo,lzo,izo,g3,vpe,dzo,czo,JV,fzo,mzo,gzo,h3,Fpe,hzo,pzo,YV,_zo,uzo,bzo,p3,Tpe,vzo,Fzo,KV,Tzo,Mzo,Ezo,_3,Mpe,Czo,wzo,ZV,Azo,Lzo,yzo,u3,Epe,xzo,$zo,eX,kzo,Szo,Rzo,b3,Cpe,Pzo,Bzo,oX,Izo,Nzo,qzo,v3,wpe,jzo,Dzo,rX,Gzo,Ozo,Vzo,F3,Ape,Xzo,zzo,tX,Wzo,Qzo,Hzo,T3,Lpe,Uzo,Jzo,aX,Yzo,Kzo,Zzo,M3,ype,eWo,oWo,nX,rWo,tWo,aWo,E3,nWo,xpe,sWo,lWo,$pe,iWo,dWo,C3,rDe,Zi,w3,kpe,cL,cWo,Spe,fWo,tDe,No,fL,mWo,ed,gWo,sX,hWo,pWo,lX,_Wo,uWo,bWo,mL,vWo,Rpe,FWo,TWo,MWo,mt,gL,EWo,Ppe,CWo,wWo,od,AWo,Bpe,LWo,yWo,iX,xWo,$Wo,kWo,A3,SWo,no,hL,RWo,Ipe,PWo,BWo,Na,IWo,Npe,NWo,qWo,qpe,jWo,DWo,jpe,GWo,OWo,VWo,V,L3,Dpe,XWo,zWo,dX,WWo,QWo,HWo,y3,Gpe,UWo,JWo,cX,YWo,KWo,ZWo,x3,Ope,eQo,oQo,fX,rQo,tQo,aQo,$3,Vpe,nQo,sQo,mX,lQo,iQo,dQo,k3,Xpe,cQo,fQo,gX,mQo,gQo,hQo,S3,zpe,pQo,_Qo,hX,uQo,bQo,vQo,R3,Wpe,FQo,TQo,pX,MQo,EQo,CQo,P3,Qpe,wQo,AQo,_X,LQo,yQo,xQo,B3,Hpe,$Qo,kQo,uX,SQo,RQo,PQo,I3,Upe,BQo,IQo,bX,NQo,qQo,jQo,N3,Jpe,DQo,GQo,vX,OQo,VQo,XQo,q3,Ype,zQo,WQo,FX,QQo,HQo,UQo,j3,Kpe,JQo,YQo,TX,KQo,ZQo,eHo,D3,Zpe,oHo,rHo,MX,tHo,aHo,nHo,G3,e_e,sHo,lHo,EX,iHo,dHo,cHo,O3,o_e,fHo,mHo,CX,gHo,hHo,pHo,V3,r_e,_Ho,uHo,wX,bHo,vHo,FHo,X3,t_e,THo,MHo,AX,EHo,CHo,wHo,z3,a_e,AHo,LHo,LX,yHo,xHo,$Ho,W3,n_e,kHo,SHo,yX,RHo,PHo,BHo,Q3,s_e,IHo,NHo,xX,qHo,jHo,DHo,H3,l_e,GHo,OHo,$X,VHo,XHo,zHo,U3,i_e,WHo,QHo,kX,HHo,UHo,JHo,J3,d_e,YHo,KHo,SX,ZHo,eUo,oUo,Y3,c_e,rUo,tUo,RX,aUo,nUo,sUo,K3,f_e,lUo,iUo,PX,dUo,cUo,fUo,Z3,m_e,mUo,gUo,BX,hUo,pUo,_Uo,eF,g_e,uUo,bUo,IX,vUo,FUo,TUo,oF,h_e,MUo,EUo,NX,CUo,wUo,AUo,rF,p_e,LUo,yUo,qX,xUo,$Uo,kUo,tF,__e,SUo,RUo,jX,PUo,BUo,IUo,aF,u_e,NUo,qUo,DX,jUo,DUo,GUo,nF,b_e,OUo,VUo,GX,XUo,zUo,WUo,sF,v_e,QUo,HUo,OX,UUo,JUo,YUo,lF,F_e,KUo,ZUo,VX,eJo,oJo,rJo,iF,T_e,tJo,aJo,XX,nJo,sJo,lJo,dF,M_e,iJo,dJo,zX,cJo,fJo,mJo,cF,E_e,gJo,hJo,WX,pJo,_Jo,uJo,fF,C_e,bJo,vJo,QX,FJo,TJo,MJo,mF,w_e,EJo,CJo,HX,wJo,AJo,LJo,gF,yJo,A_e,xJo,$Jo,L_e,kJo,SJo,hF,aDe,rd,pF,y_e,pL,RJo,x_e,PJo,nDe,qo,_L,BJo,td,IJo,UX,NJo,qJo,JX,jJo,DJo,GJo,uL,OJo,$_e,VJo,XJo,zJo,gt,bL,WJo,k_e,QJo,HJo,ad,UJo,S_e,JJo,YJo,YX,KJo,ZJo,eYo,_F,oYo,so,vL,rYo,R_e,tYo,aYo,qa,nYo,P_e,sYo,lYo,B_e,iYo,dYo,I_e,cYo,fYo,mYo,N_e,uF,q_e,gYo,hYo,KX,pYo,_Yo,uYo,bF,bYo,j_e,vYo,FYo,D_e,TYo,MYo,vF,sDe,nd,FF,G_e,FL,EYo,O_e,CYo,lDe,jo,TL,wYo,sd,AYo,ZX,LYo,yYo,ez,xYo,$Yo,kYo,ML,SYo,V_e,RYo,PYo,BYo,ht,EL,IYo,X_e,NYo,qYo,ld,jYo,z_e,DYo,GYo,oz,OYo,VYo,XYo,TF,zYo,lo,CL,WYo,W_e,QYo,HYo,ja,UYo,Q_e,JYo,YYo,H_e,KYo,ZYo,U_e,eKo,oKo,rKo,ve,MF,J_e,tKo,aKo,rz,nKo,sKo,lKo,EF,Y_e,iKo,dKo,tz,cKo,fKo,mKo,CF,K_e,gKo,hKo,az,pKo,_Ko,uKo,wF,Z_e,bKo,vKo,nz,FKo,TKo,MKo,Bs,eue,EKo,CKo,sz,wKo,AKo,lz,LKo,yKo,xKo,AF,oue,$Ko,kKo,iz,SKo,RKo,PKo,Is,rue,BKo,IKo,dz,NKo,qKo,cz,jKo,DKo,GKo,pt,tue,OKo,VKo,fz,XKo,zKo,mz,WKo,QKo,gz,HKo,UKo,JKo,LF,aue,YKo,KKo,hz,ZKo,eZo,oZo,yF,nue,rZo,tZo,pz,aZo,nZo,sZo,xF,sue,lZo,iZo,_z,dZo,cZo,fZo,$F,lue,mZo,gZo,uz,hZo,pZo,_Zo,kF,iue,uZo,bZo,bz,vZo,FZo,TZo,SF,due,MZo,EZo,vz,CZo,wZo,AZo,RF,cue,LZo,yZo,Fz,xZo,$Zo,kZo,PF,SZo,fue,RZo,PZo,mue,BZo,IZo,BF,iDe,id,IF,gue,wL,NZo,hue,qZo,dDe,Do,AL,jZo,dd,DZo,Tz,GZo,OZo,Mz,VZo,XZo,zZo,LL,WZo,pue,QZo,HZo,UZo,_t,yL,JZo,_ue,YZo,KZo,cd,ZZo,uue,eer,oer,Ez,rer,ter,aer,NF,ner,io,xL,ser,bue,ler,ier,Da,der,vue,cer,fer,Fue,mer,ger,Tue,her,per,_er,Mue,qF,Eue,uer,ber,Cz,ver,Fer,Ter,jF,Mer,Cue,Eer,Cer,wue,wer,Aer,DF,cDe,fd,GF,Aue,$L,Ler,Lue,yer,fDe,Go,kL,xer,md,$er,wz,ker,Ser,Az,Rer,Per,Ber,SL,Ier,yue,Ner,qer,jer,ut,RL,Der,xue,Ger,Oer,gd,Ver,$ue,Xer,zer,Lz,Wer,Qer,Her,OF,Uer,co,PL,Jer,kue,Yer,Ker,Ga,Zer,Sue,eor,oor,Rue,ror,tor,Pue,aor,nor,sor,Re,VF,Bue,lor,ior,yz,dor,cor,mor,XF,Iue,gor,hor,xz,por,_or,uor,zF,Nue,bor,vor,$z,For,Tor,Mor,WF,que,Eor,Cor,kz,wor,Aor,Lor,QF,jue,yor,xor,Sz,$or,kor,Sor,HF,Due,Ror,Por,Rz,Bor,Ior,Nor,UF,Gue,qor,jor,Pz,Dor,Gor,Oor,JF,Oue,Vor,Xor,Bz,zor,Wor,Qor,YF,Vue,Hor,Uor,Iz,Jor,Yor,Kor,KF,Zor,Xue,err,orr,zue,rrr,trr,ZF,mDe,hd,e6,Wue,BL,arr,Que,nrr,gDe,Oo,IL,srr,pd,lrr,Nz,irr,drr,qz,crr,frr,mrr,NL,grr,Hue,hrr,prr,_rr,bt,qL,urr,Uue,brr,vrr,_d,Frr,Jue,Trr,Mrr,jz,Err,Crr,wrr,o6,Arr,fo,jL,Lrr,Yue,yrr,xrr,Oa,$rr,Kue,krr,Srr,Zue,Rrr,Prr,e1e,Brr,Irr,Nrr,Kr,r6,o1e,qrr,jrr,Dz,Drr,Grr,Orr,t6,r1e,Vrr,Xrr,Gz,zrr,Wrr,Qrr,a6,t1e,Hrr,Urr,Oz,Jrr,Yrr,Krr,n6,a1e,Zrr,etr,Vz,otr,rtr,ttr,s6,n1e,atr,ntr,Xz,str,ltr,itr,l6,dtr,s1e,ctr,ftr,l1e,mtr,gtr,i6,hDe,ud,d6,i1e,DL,htr,d1e,ptr,pDe,Vo,GL,_tr,bd,utr,zz,btr,vtr,Wz,Ftr,Ttr,Mtr,OL,Etr,c1e,Ctr,wtr,Atr,vt,VL,Ltr,f1e,ytr,xtr,vd,$tr,m1e,ktr,Str,Qz,Rtr,Ptr,Btr,c6,Itr,mo,XL,Ntr,g1e,qtr,jtr,Va,Dtr,h1e,Gtr,Otr,p1e,Vtr,Xtr,_1e,ztr,Wtr,Qtr,Le,f6,u1e,Htr,Utr,Hz,Jtr,Ytr,Ktr,m6,b1e,Ztr,ear,Uz,oar,rar,tar,g6,v1e,aar,nar,Jz,sar,lar,iar,h6,F1e,dar,car,Yz,far,mar,gar,p6,T1e,har,par,Kz,_ar,uar,bar,_6,M1e,Far,Tar,Zz,Mar,Ear,Car,u6,E1e,war,Aar,eW,Lar,yar,xar,b6,C1e,$ar,kar,oW,Sar,Rar,Par,v6,w1e,Bar,Iar,rW,Nar,qar,jar,F6,A1e,Dar,Gar,tW,Oar,Var,Xar,T6,zar,L1e,War,Qar,y1e,Har,Uar,M6,_De,Fd,E6,x1e,zL,Jar,$1e,Yar,uDe,Xo,WL,Kar,Td,Zar,aW,enr,onr,nW,rnr,tnr,anr,QL,nnr,k1e,snr,lnr,inr,Ft,HL,dnr,S1e,cnr,fnr,Md,mnr,R1e,gnr,hnr,sW,pnr,_nr,unr,C6,bnr,go,UL,vnr,P1e,Fnr,Tnr,Xa,Mnr,B1e,Enr,Cnr,I1e,wnr,Anr,N1e,Lnr,ynr,xnr,JL,w6,q1e,$nr,knr,lW,Snr,Rnr,Pnr,A6,j1e,Bnr,Inr,iW,Nnr,qnr,jnr,L6,Dnr,D1e,Gnr,Onr,G1e,Vnr,Xnr,y6,bDe,Ed,x6,O1e,YL,znr,V1e,Wnr,vDe,zo,KL,Qnr,Cd,Hnr,dW,Unr,Jnr,cW,Ynr,Knr,Znr,ZL,esr,X1e,osr,rsr,tsr,Tt,ey,asr,z1e,nsr,ssr,wd,lsr,W1e,isr,dsr,fW,csr,fsr,msr,$6,gsr,ho,oy,hsr,Q1e,psr,_sr,za,usr,H1e,bsr,vsr,U1e,Fsr,Tsr,J1e,Msr,Esr,Csr,Zr,k6,Y1e,wsr,Asr,mW,Lsr,ysr,xsr,S6,K1e,$sr,ksr,gW,Ssr,Rsr,Psr,R6,Z1e,Bsr,Isr,hW,Nsr,qsr,jsr,P6,ebe,Dsr,Gsr,pW,Osr,Vsr,Xsr,B6,obe,zsr,Wsr,_W,Qsr,Hsr,Usr,I6,Jsr,rbe,Ysr,Ksr,tbe,Zsr,elr,N6,FDe,Ad,q6,abe,ry,olr,nbe,rlr,TDe,Wo,ty,tlr,Ld,alr,uW,nlr,slr,bW,llr,ilr,dlr,ay,clr,sbe,flr,mlr,glr,Mt,ny,hlr,lbe,plr,_lr,yd,ulr,ibe,blr,vlr,vW,Flr,Tlr,Mlr,j6,Elr,po,sy,Clr,dbe,wlr,Alr,Wa,Llr,cbe,ylr,xlr,fbe,$lr,klr,mbe,Slr,Rlr,Plr,xd,D6,gbe,Blr,Ilr,FW,Nlr,qlr,jlr,G6,hbe,Dlr,Glr,TW,Olr,Vlr,Xlr,O6,pbe,zlr,Wlr,MW,Qlr,Hlr,Ulr,V6,Jlr,_be,Ylr,Klr,ube,Zlr,eir,X6,MDe,$d,z6,bbe,ly,oir,vbe,rir,EDe,Qo,iy,tir,kd,air,EW,nir,sir,CW,lir,iir,dir,dy,cir,Fbe,fir,mir,gir,Et,cy,hir,Tbe,pir,_ir,Sd,uir,Mbe,bir,vir,wW,Fir,Tir,Mir,W6,Eir,_o,fy,Cir,Ebe,wir,Air,Qa,Lir,Cbe,yir,xir,wbe,$ir,kir,Abe,Sir,Rir,Pir,my,Q6,Lbe,Bir,Iir,AW,Nir,qir,jir,H6,ybe,Dir,Gir,LW,Oir,Vir,Xir,U6,zir,xbe,Wir,Qir,$be,Hir,Uir,J6,CDe,Rd,Y6,kbe,gy,Jir,Sbe,Yir,wDe,Ho,hy,Kir,Pd,Zir,yW,edr,odr,xW,rdr,tdr,adr,py,ndr,Rbe,sdr,ldr,idr,Ct,_y,ddr,Pbe,cdr,fdr,Bd,mdr,Bbe,gdr,hdr,$W,pdr,_dr,udr,K6,bdr,uo,uy,vdr,Ibe,Fdr,Tdr,Ha,Mdr,Nbe,Edr,Cdr,qbe,wdr,Adr,jbe,Ldr,ydr,xdr,Dbe,Z6,Gbe,$dr,kdr,kW,Sdr,Rdr,Pdr,eT,Bdr,Obe,Idr,Ndr,Vbe,qdr,jdr,oT,ADe,Id,rT,Xbe,by,Ddr,zbe,Gdr,LDe,Uo,vy,Odr,Nd,Vdr,SW,Xdr,zdr,RW,Wdr,Qdr,Hdr,Fy,Udr,Wbe,Jdr,Ydr,Kdr,wt,Ty,Zdr,Qbe,ecr,ocr,qd,rcr,Hbe,tcr,acr,PW,ncr,scr,lcr,tT,icr,bo,My,dcr,Ube,ccr,fcr,Ua,mcr,Jbe,gcr,hcr,Ybe,pcr,_cr,Kbe,ucr,bcr,vcr,Ja,aT,Zbe,Fcr,Tcr,BW,Mcr,Ecr,Ccr,nT,e2e,wcr,Acr,IW,Lcr,ycr,xcr,sT,o2e,$cr,kcr,NW,Scr,Rcr,Pcr,lT,r2e,Bcr,Icr,qW,Ncr,qcr,jcr,iT,Dcr,t2e,Gcr,Ocr,a2e,Vcr,Xcr,dT,yDe,jd,cT,n2e,Ey,zcr,s2e,Wcr,xDe,Jo,Cy,Qcr,Dd,Hcr,jW,Ucr,Jcr,DW,Ycr,Kcr,Zcr,wy,efr,l2e,ofr,rfr,tfr,At,Ay,afr,i2e,nfr,sfr,Gd,lfr,d2e,ifr,dfr,GW,cfr,ffr,mfr,fT,gfr,vo,Ly,hfr,c2e,pfr,_fr,Ya,ufr,f2e,bfr,vfr,m2e,Ffr,Tfr,g2e,Mfr,Efr,Cfr,h2e,mT,p2e,wfr,Afr,OW,Lfr,yfr,xfr,gT,$fr,_2e,kfr,Sfr,u2e,Rfr,Pfr,hT,$De,Od,pT,b2e,yy,Bfr,v2e,Ifr,kDe,Yo,xy,Nfr,Vd,qfr,VW,jfr,Dfr,XW,Gfr,Ofr,Vfr,$y,Xfr,F2e,zfr,Wfr,Qfr,Lt,ky,Hfr,T2e,Ufr,Jfr,Xd,Yfr,M2e,Kfr,Zfr,zW,emr,omr,rmr,_T,tmr,wr,Sy,amr,E2e,nmr,smr,Ka,lmr,C2e,imr,dmr,w2e,cmr,fmr,A2e,mmr,gmr,hmr,q,uT,L2e,pmr,_mr,WW,umr,bmr,vmr,bT,y2e,Fmr,Tmr,QW,Mmr,Emr,Cmr,vT,x2e,wmr,Amr,HW,Lmr,ymr,xmr,FT,$2e,$mr,kmr,UW,Smr,Rmr,Pmr,TT,k2e,Bmr,Imr,JW,Nmr,qmr,jmr,MT,S2e,Dmr,Gmr,YW,Omr,Vmr,Xmr,ET,R2e,zmr,Wmr,KW,Qmr,Hmr,Umr,CT,P2e,Jmr,Ymr,ZW,Kmr,Zmr,egr,wT,B2e,ogr,rgr,eQ,tgr,agr,ngr,AT,I2e,sgr,lgr,oQ,igr,dgr,cgr,LT,N2e,fgr,mgr,rQ,ggr,hgr,pgr,yT,q2e,_gr,ugr,tQ,bgr,vgr,Fgr,xT,j2e,Tgr,Mgr,aQ,Egr,Cgr,wgr,$T,D2e,Agr,Lgr,nQ,ygr,xgr,$gr,kT,G2e,kgr,Sgr,sQ,Rgr,Pgr,Bgr,ST,O2e,Igr,Ngr,lQ,qgr,jgr,Dgr,RT,V2e,Ggr,Ogr,iQ,Vgr,Xgr,zgr,Ns,X2e,Wgr,Qgr,dQ,Hgr,Ugr,cQ,Jgr,Ygr,Kgr,PT,z2e,Zgr,ehr,fQ,ohr,rhr,thr,BT,W2e,ahr,nhr,mQ,shr,lhr,ihr,IT,Q2e,dhr,chr,gQ,fhr,mhr,ghr,NT,H2e,hhr,phr,hQ,_hr,uhr,bhr,qT,U2e,vhr,Fhr,pQ,Thr,Mhr,Ehr,jT,J2e,Chr,whr,_Q,Ahr,Lhr,yhr,DT,Y2e,xhr,$hr,uQ,khr,Shr,Rhr,GT,K2e,Phr,Bhr,bQ,Ihr,Nhr,qhr,OT,Z2e,jhr,Dhr,vQ,Ghr,Ohr,Vhr,VT,eve,Xhr,zhr,FQ,Whr,Qhr,Hhr,XT,ove,Uhr,Jhr,TQ,Yhr,Khr,Zhr,zT,rve,epr,opr,MQ,rpr,tpr,apr,WT,tve,npr,spr,EQ,lpr,ipr,dpr,QT,ave,cpr,fpr,CQ,mpr,gpr,hpr,HT,nve,ppr,_pr,wQ,upr,bpr,vpr,UT,sve,Fpr,Tpr,AQ,Mpr,Epr,Cpr,JT,lve,wpr,Apr,LQ,Lpr,ypr,xpr,YT,ive,$pr,kpr,yQ,Spr,Rpr,Ppr,KT,dve,Bpr,Ipr,xQ,Npr,qpr,jpr,ZT,cve,Dpr,Gpr,$Q,Opr,Vpr,Xpr,e7,fve,zpr,Wpr,kQ,Qpr,Hpr,Upr,o7,mve,Jpr,Ypr,SQ,Kpr,Zpr,e_r,r7,gve,o_r,r_r,RQ,t_r,a_r,n_r,t7,hve,s_r,l_r,PQ,i_r,d_r,c_r,a7,pve,f_r,m_r,BQ,g_r,h_r,p_r,n7,_ve,__r,u_r,IQ,b_r,v_r,F_r,s7,uve,T_r,M_r,NQ,E_r,C_r,w_r,l7,bve,A_r,L_r,qQ,y_r,x_r,$_r,i7,vve,k_r,S_r,jQ,R_r,P_r,B_r,d7,SDe,zd,c7,Fve,Ry,I_r,Tve,N_r,RDe,Ko,Py,q_r,Wd,j_r,DQ,D_r,G_r,GQ,O_r,V_r,X_r,By,z_r,Mve,W_r,Q_r,H_r,yt,Iy,U_r,Eve,J_r,Y_r,Qd,K_r,Cve,Z_r,eur,OQ,our,rur,tur,f7,aur,Ar,Ny,nur,wve,sur,lur,Za,iur,Ave,dur,cur,Lve,fur,mur,yve,gur,hur,pur,se,m7,xve,_ur,uur,VQ,bur,vur,Fur,g7,$ve,Tur,Mur,XQ,Eur,Cur,wur,h7,kve,Aur,Lur,zQ,yur,xur,$ur,p7,Sve,kur,Sur,WQ,Rur,Pur,Bur,_7,Rve,Iur,Nur,QQ,qur,jur,Dur,u7,Pve,Gur,Our,HQ,Vur,Xur,zur,b7,Bve,Wur,Qur,UQ,Hur,Uur,Jur,v7,Ive,Yur,Kur,JQ,Zur,e1r,o1r,F7,Nve,r1r,t1r,YQ,a1r,n1r,s1r,T7,qve,l1r,i1r,KQ,d1r,c1r,f1r,M7,jve,m1r,g1r,ZQ,h1r,p1r,_1r,E7,Dve,u1r,b1r,eH,v1r,F1r,T1r,C7,Gve,M1r,E1r,oH,C1r,w1r,A1r,w7,Ove,L1r,y1r,rH,x1r,$1r,k1r,A7,Vve,S1r,R1r,tH,P1r,B1r,I1r,L7,Xve,N1r,q1r,aH,j1r,D1r,G1r,y7,zve,O1r,V1r,nH,X1r,z1r,W1r,x7,Wve,Q1r,H1r,sH,U1r,J1r,Y1r,$7,Qve,K1r,Z1r,lH,ebr,obr,rbr,k7,Hve,tbr,abr,iH,nbr,sbr,lbr,S7,Uve,ibr,dbr,dH,cbr,fbr,mbr,R7,Jve,gbr,hbr,cH,pbr,_br,ubr,P7,Yve,bbr,vbr,fH,Fbr,Tbr,Mbr,B7,PDe,Hd,I7,Kve,qy,Ebr,Zve,Cbr,BDe,Zo,jy,wbr,Ud,Abr,mH,Lbr,ybr,gH,xbr,$br,kbr,Dy,Sbr,e3e,Rbr,Pbr,Bbr,xt,Gy,Ibr,o3e,Nbr,qbr,Jd,jbr,r3e,Dbr,Gbr,hH,Obr,Vbr,Xbr,N7,zbr,Lr,Oy,Wbr,t3e,Qbr,Hbr,en,Ubr,a3e,Jbr,Ybr,n3e,Kbr,Zbr,s3e,e2r,o2r,r2r,Me,q7,l3e,t2r,a2r,pH,n2r,s2r,l2r,j7,i3e,i2r,d2r,_H,c2r,f2r,m2r,D7,d3e,g2r,h2r,uH,p2r,_2r,u2r,G7,c3e,b2r,v2r,bH,F2r,T2r,M2r,O7,f3e,E2r,C2r,vH,w2r,A2r,L2r,V7,m3e,y2r,x2r,FH,$2r,k2r,S2r,X7,g3e,R2r,P2r,TH,B2r,I2r,N2r,z7,h3e,q2r,j2r,MH,D2r,G2r,O2r,W7,p3e,V2r,X2r,EH,z2r,W2r,Q2r,Q7,_3e,H2r,U2r,CH,J2r,Y2r,K2r,H7,u3e,Z2r,evr,wH,ovr,rvr,tvr,U7,b3e,avr,nvr,AH,svr,lvr,ivr,J7,v3e,dvr,cvr,LH,fvr,mvr,gvr,Y7,IDe,Yd,K7,F3e,Vy,hvr,T3e,pvr,NDe,er,Xy,_vr,Kd,uvr,yH,bvr,vvr,xH,Fvr,Tvr,Mvr,zy,Evr,M3e,Cvr,wvr,Avr,$t,Wy,Lvr,E3e,yvr,xvr,Zd,$vr,C3e,kvr,Svr,$H,Rvr,Pvr,Bvr,Z7,Ivr,yr,Qy,Nvr,w3e,qvr,jvr,on,Dvr,A3e,Gvr,Ovr,L3e,Vvr,Xvr,y3e,zvr,Wvr,Qvr,rn,e9,x3e,Hvr,Uvr,kH,Jvr,Yvr,Kvr,o9,$3e,Zvr,e3r,SH,o3r,r3r,t3r,r9,k3e,a3r,n3r,RH,s3r,l3r,i3r,t9,S3e,d3r,c3r,PH,f3r,m3r,g3r,a9,qDe,ec,n9,R3e,Hy,h3r,P3e,p3r,jDe,or,Uy,_3r,oc,u3r,BH,b3r,v3r,IH,F3r,T3r,M3r,Jy,E3r,B3e,C3r,w3r,A3r,kt,Yy,L3r,I3e,y3r,x3r,rc,$3r,N3e,k3r,S3r,NH,R3r,P3r,B3r,s9,I3r,xr,Ky,N3r,q3e,q3r,j3r,tn,D3r,j3e,G3r,O3r,D3e,V3r,X3r,G3e,z3r,W3r,Q3r,ie,l9,O3e,H3r,U3r,qH,J3r,Y3r,K3r,i9,V3e,Z3r,eFr,jH,oFr,rFr,tFr,d9,X3e,aFr,nFr,DH,sFr,lFr,iFr,c9,z3e,dFr,cFr,GH,fFr,mFr,gFr,f9,W3e,hFr,pFr,OH,_Fr,uFr,bFr,m9,Q3e,vFr,FFr,VH,TFr,MFr,EFr,g9,H3e,CFr,wFr,XH,AFr,LFr,yFr,h9,U3e,xFr,$Fr,zH,kFr,SFr,RFr,p9,J3e,PFr,BFr,WH,IFr,NFr,qFr,_9,Y3e,jFr,DFr,QH,GFr,OFr,VFr,u9,K3e,XFr,zFr,HH,WFr,QFr,HFr,b9,Z3e,UFr,JFr,UH,YFr,KFr,ZFr,v9,eFe,e6r,o6r,JH,r6r,t6r,a6r,F9,oFe,n6r,s6r,YH,l6r,i6r,d6r,T9,rFe,c6r,f6r,KH,m6r,g6r,h6r,M9,tFe,p6r,_6r,ZH,u6r,b6r,v6r,E9,aFe,F6r,T6r,eU,M6r,E6r,C6r,C9,nFe,w6r,A6r,oU,L6r,y6r,x6r,w9,sFe,$6r,k6r,rU,S6r,R6r,P6r,A9,lFe,B6r,I6r,tU,N6r,q6r,j6r,L9,DDe,tc,y9,iFe,Zy,D6r,dFe,G6r,GDe,rr,e8,O6r,ac,V6r,aU,X6r,z6r,nU,W6r,Q6r,H6r,o8,U6r,cFe,J6r,Y6r,K6r,St,r8,Z6r,fFe,eTr,oTr,nc,rTr,mFe,tTr,aTr,sU,nTr,sTr,lTr,x9,iTr,$r,t8,dTr,gFe,cTr,fTr,an,mTr,hFe,gTr,hTr,pFe,pTr,_Tr,_Fe,uTr,bTr,vTr,ye,$9,uFe,FTr,TTr,lU,MTr,ETr,CTr,k9,bFe,wTr,ATr,iU,LTr,yTr,xTr,S9,vFe,$Tr,kTr,dU,STr,RTr,PTr,R9,FFe,BTr,ITr,cU,NTr,qTr,jTr,P9,TFe,DTr,GTr,fU,OTr,VTr,XTr,B9,MFe,zTr,WTr,mU,QTr,HTr,UTr,I9,EFe,JTr,YTr,gU,KTr,ZTr,e7r,N9,CFe,o7r,r7r,hU,t7r,a7r,n7r,q9,wFe,s7r,l7r,pU,i7r,d7r,c7r,j9,AFe,f7r,m7r,_U,g7r,h7r,p7r,D9,ODe,sc,G9,LFe,a8,_7r,yFe,u7r,VDe,tr,n8,b7r,lc,v7r,uU,F7r,T7r,bU,M7r,E7r,C7r,s8,w7r,xFe,A7r,L7r,y7r,Rt,l8,x7r,$Fe,$7r,k7r,ic,S7r,kFe,R7r,P7r,vU,B7r,I7r,N7r,O9,q7r,kr,i8,j7r,SFe,D7r,G7r,nn,O7r,RFe,V7r,X7r,PFe,z7r,W7r,BFe,Q7r,H7r,U7r,oe,V9,IFe,J7r,Y7r,FU,K7r,Z7r,e9r,X9,NFe,o9r,r9r,TU,t9r,a9r,n9r,z9,qFe,s9r,l9r,MU,i9r,d9r,c9r,W9,jFe,f9r,m9r,EU,g9r,h9r,p9r,Q9,DFe,_9r,u9r,CU,b9r,v9r,F9r,H9,GFe,T9r,M9r,wU,E9r,C9r,w9r,U9,OFe,A9r,L9r,AU,y9r,x9r,$9r,J9,VFe,k9r,S9r,LU,R9r,P9r,B9r,Y9,XFe,I9r,N9r,yU,q9r,j9r,D9r,K9,zFe,G9r,O9r,xU,V9r,X9r,z9r,Z9,WFe,W9r,Q9r,$U,H9r,U9r,J9r,eM,QFe,Y9r,K9r,kU,Z9r,eMr,oMr,oM,HFe,rMr,tMr,SU,aMr,nMr,sMr,rM,UFe,lMr,iMr,RU,dMr,cMr,fMr,tM,JFe,mMr,gMr,PU,hMr,pMr,_Mr,aM,YFe,uMr,bMr,BU,vMr,FMr,TMr,nM,KFe,MMr,EMr,IU,CMr,wMr,AMr,sM,ZFe,LMr,yMr,NU,xMr,$Mr,kMr,lM,e6e,SMr,RMr,qU,PMr,BMr,IMr,iM,o6e,NMr,qMr,jU,jMr,DMr,GMr,dM,r6e,OMr,VMr,DU,XMr,zMr,WMr,cM,t6e,QMr,HMr,GU,UMr,JMr,YMr,fM,a6e,KMr,ZMr,OU,e4r,o4r,r4r,mM,n6e,t4r,a4r,VU,n4r,s4r,l4r,gM,s6e,i4r,d4r,XU,c4r,f4r,m4r,hM,l6e,g4r,h4r,zU,p4r,_4r,u4r,pM,XDe,dc,_M,i6e,d8,b4r,d6e,v4r,zDe,ar,c8,F4r,cc,T4r,WU,M4r,E4r,QU,C4r,w4r,A4r,f8,L4r,c6e,y4r,x4r,$4r,Pt,m8,k4r,f6e,S4r,R4r,fc,P4r,m6e,B4r,I4r,HU,N4r,q4r,j4r,uM,D4r,Sr,g8,G4r,g6e,O4r,V4r,sn,X4r,h6e,z4r,W4r,p6e,Q4r,H4r,_6e,U4r,J4r,Y4r,pe,bM,u6e,K4r,Z4r,UU,eEr,oEr,rEr,vM,b6e,tEr,aEr,JU,nEr,sEr,lEr,FM,v6e,iEr,dEr,YU,cEr,fEr,mEr,TM,F6e,gEr,hEr,KU,pEr,_Er,uEr,MM,T6e,bEr,vEr,ZU,FEr,TEr,MEr,EM,M6e,EEr,CEr,eJ,wEr,AEr,LEr,CM,E6e,yEr,xEr,oJ,$Er,kEr,SEr,wM,C6e,REr,PEr,rJ,BEr,IEr,NEr,AM,w6e,qEr,jEr,tJ,DEr,GEr,OEr,LM,A6e,VEr,XEr,aJ,zEr,WEr,QEr,yM,L6e,HEr,UEr,nJ,JEr,YEr,KEr,xM,y6e,ZEr,eCr,sJ,oCr,rCr,tCr,$M,x6e,aCr,nCr,lJ,sCr,lCr,iCr,kM,$6e,dCr,cCr,iJ,fCr,mCr,gCr,SM,k6e,hCr,pCr,dJ,_Cr,uCr,bCr,RM,S6e,vCr,FCr,cJ,TCr,MCr,ECr,PM,R6e,CCr,wCr,fJ,ACr,LCr,yCr,BM,WDe,mc,IM,P6e,h8,xCr,B6e,$Cr,QDe,nr,p8,kCr,gc,SCr,mJ,RCr,PCr,gJ,BCr,ICr,NCr,_8,qCr,I6e,jCr,DCr,GCr,Bt,u8,OCr,N6e,VCr,XCr,hc,zCr,q6e,WCr,QCr,hJ,HCr,UCr,JCr,NM,YCr,Rr,b8,KCr,j6e,ZCr,e5r,ln,o5r,D6e,r5r,t5r,G6e,a5r,n5r,O6e,s5r,l5r,i5r,v8,qM,V6e,d5r,c5r,pJ,f5r,m5r,g5r,jM,X6e,h5r,p5r,_J,_5r,u5r,b5r,DM,HDe,pc,GM,z6e,F8,v5r,W6e,F5r,UDe,sr,T8,T5r,_c,M5r,uJ,E5r,C5r,bJ,w5r,A5r,L5r,M8,y5r,Q6e,x5r,$5r,k5r,It,E8,S5r,H6e,R5r,P5r,uc,B5r,U6e,I5r,N5r,vJ,q5r,j5r,D5r,OM,G5r,Pr,C8,O5r,J6e,V5r,X5r,dn,z5r,Y6e,W5r,Q5r,K6e,H5r,U5r,Z6e,J5r,Y5r,K5r,eTe,VM,oTe,Z5r,e0r,FJ,o0r,r0r,t0r,XM,JDe,bc,zM,rTe,w8,a0r,tTe,n0r,YDe,lr,A8,s0r,vc,l0r,TJ,i0r,d0r,MJ,c0r,f0r,m0r,L8,g0r,aTe,h0r,p0r,_0r,Nt,y8,u0r,nTe,b0r,v0r,Fc,F0r,sTe,T0r,M0r,EJ,E0r,C0r,w0r,WM,A0r,Br,x8,L0r,lTe,y0r,x0r,cn,$0r,iTe,k0r,S0r,dTe,R0r,P0r,cTe,B0r,I0r,N0r,de,QM,fTe,q0r,j0r,CJ,D0r,G0r,O0r,HM,mTe,V0r,X0r,wJ,z0r,W0r,Q0r,UM,gTe,H0r,U0r,AJ,J0r,Y0r,K0r,JM,hTe,Z0r,ewr,LJ,owr,rwr,twr,YM,pTe,awr,nwr,yJ,swr,lwr,iwr,KM,_Te,dwr,cwr,xJ,fwr,mwr,gwr,ZM,uTe,hwr,pwr,$J,_wr,uwr,bwr,e4,bTe,vwr,Fwr,kJ,Twr,Mwr,Ewr,o4,vTe,Cwr,wwr,SJ,Awr,Lwr,ywr,r4,FTe,xwr,$wr,RJ,kwr,Swr,Rwr,t4,TTe,Pwr,Bwr,PJ,Iwr,Nwr,qwr,a4,MTe,jwr,Dwr,BJ,Gwr,Owr,Vwr,n4,ETe,Xwr,zwr,IJ,Wwr,Qwr,Hwr,s4,CTe,Uwr,Jwr,NJ,Ywr,Kwr,Zwr,l4,wTe,eAr,oAr,qJ,rAr,tAr,aAr,i4,ATe,nAr,sAr,jJ,lAr,iAr,dAr,d4,LTe,cAr,fAr,DJ,mAr,gAr,hAr,c4,yTe,pAr,_Ar,GJ,uAr,bAr,vAr,f4,xTe,FAr,TAr,OJ,MAr,EAr,CAr,m4,$Te,wAr,AAr,VJ,LAr,yAr,xAr,g4,KDe,Tc,h4,kTe,$8,$Ar,STe,kAr,ZDe,ir,k8,SAr,Mc,RAr,XJ,PAr,BAr,zJ,IAr,NAr,qAr,S8,jAr,RTe,DAr,GAr,OAr,qt,R8,VAr,PTe,XAr,zAr,Ec,WAr,BTe,QAr,HAr,WJ,UAr,JAr,YAr,p4,KAr,Ir,P8,ZAr,ITe,eLr,oLr,fn,rLr,NTe,tLr,aLr,qTe,nLr,sLr,jTe,lLr,iLr,dLr,ce,_4,DTe,cLr,fLr,QJ,mLr,gLr,hLr,u4,GTe,pLr,_Lr,HJ,uLr,bLr,vLr,b4,OTe,FLr,TLr,UJ,MLr,ELr,CLr,v4,VTe,wLr,ALr,JJ,LLr,yLr,xLr,F4,XTe,$Lr,kLr,YJ,SLr,RLr,PLr,T4,zTe,BLr,ILr,KJ,NLr,qLr,jLr,M4,WTe,DLr,GLr,ZJ,OLr,VLr,XLr,E4,QTe,zLr,WLr,eY,QLr,HLr,ULr,C4,HTe,JLr,YLr,oY,KLr,ZLr,eyr,w4,UTe,oyr,ryr,rY,tyr,ayr,nyr,A4,JTe,syr,lyr,tY,iyr,dyr,cyr,L4,YTe,fyr,myr,aY,gyr,hyr,pyr,y4,KTe,_yr,uyr,nY,byr,vyr,Fyr,x4,ZTe,Tyr,Myr,sY,Eyr,Cyr,wyr,$4,e7e,Ayr,Lyr,lY,yyr,xyr,$yr,k4,o7e,kyr,Syr,iY,Ryr,Pyr,Byr,S4,r7e,Iyr,Nyr,dY,qyr,jyr,Dyr,R4,t7e,Gyr,Oyr,cY,Vyr,Xyr,zyr,P4,a7e,Wyr,Qyr,fY,Hyr,Uyr,Jyr,B4,n7e,Yyr,Kyr,mY,Zyr,e8r,o8r,I4,eGe,Cc,N4,s7e,B8,r8r,l7e,t8r,oGe,dr,I8,a8r,wc,n8r,gY,s8r,l8r,hY,i8r,d8r,c8r,N8,f8r,i7e,m8r,g8r,h8r,jt,q8,p8r,d7e,_8r,u8r,Ac,b8r,c7e,v8r,F8r,pY,T8r,M8r,E8r,q4,C8r,Nr,j8,w8r,f7e,A8r,L8r,mn,y8r,m7e,x8r,$8r,g7e,k8r,S8r,h7e,R8r,P8r,B8r,p7e,j4,_7e,I8r,N8r,_Y,q8r,j8r,D8r,D4,rGe,Lc,G4,u7e,D8,G8r,b7e,O8r,tGe,cr,G8,V8r,yc,X8r,uY,z8r,W8r,bY,Q8r,H8r,U8r,O8,J8r,v7e,Y8r,K8r,Z8r,Dt,V8,exr,F7e,oxr,rxr,xc,txr,T7e,axr,nxr,vY,sxr,lxr,ixr,O4,dxr,qr,X8,cxr,M7e,fxr,mxr,gn,gxr,E7e,hxr,pxr,C7e,_xr,uxr,w7e,bxr,vxr,Fxr,A7e,V4,L7e,Txr,Mxr,FY,Exr,Cxr,wxr,X4,aGe,$c,z4,y7e,z8,Axr,x7e,Lxr,nGe,fr,W8,yxr,kc,xxr,TY,$xr,kxr,MY,Sxr,Rxr,Pxr,Q8,Bxr,$7e,Ixr,Nxr,qxr,Gt,H8,jxr,k7e,Dxr,Gxr,Sc,Oxr,S7e,Vxr,Xxr,EY,zxr,Wxr,Qxr,W4,Hxr,jr,U8,Uxr,R7e,Jxr,Yxr,hn,Kxr,P7e,Zxr,e$r,B7e,o$r,r$r,I7e,t$r,a$r,n$r,re,Q4,N7e,s$r,l$r,CY,i$r,d$r,c$r,H4,q7e,f$r,m$r,wY,g$r,h$r,p$r,U4,j7e,_$r,u$r,AY,b$r,v$r,F$r,J4,D7e,T$r,M$r,LY,E$r,C$r,w$r,Y4,G7e,A$r,L$r,yY,y$r,x$r,$$r,K4,O7e,k$r,S$r,xY,R$r,P$r,B$r,Z4,V7e,I$r,N$r,$Y,q$r,j$r,D$r,eE,X7e,G$r,O$r,kY,V$r,X$r,z$r,oE,z7e,W$r,Q$r,SY,H$r,U$r,J$r,rE,W7e,Y$r,K$r,RY,Z$r,ekr,okr,tE,Q7e,rkr,tkr,PY,akr,nkr,skr,aE,H7e,lkr,ikr,BY,dkr,ckr,fkr,nE,U7e,mkr,gkr,IY,hkr,pkr,_kr,sE,J7e,ukr,bkr,NY,vkr,Fkr,Tkr,lE,Y7e,Mkr,Ekr,qY,Ckr,wkr,Akr,iE,K7e,Lkr,ykr,jY,xkr,$kr,kkr,dE,Z7e,Skr,Rkr,DY,Pkr,Bkr,Ikr,cE,e9e,Nkr,qkr,GY,jkr,Dkr,Gkr,fE,o9e,Okr,Vkr,OY,Xkr,zkr,Wkr,mE,r9e,Qkr,Hkr,VY,Ukr,Jkr,Ykr,gE,t9e,Kkr,Zkr,XY,eSr,oSr,rSr,hE,a9e,tSr,aSr,zY,nSr,sSr,lSr,pE,n9e,iSr,dSr,WY,cSr,fSr,mSr,_E,s9e,gSr,hSr,QY,pSr,_Sr,uSr,uE,l9e,bSr,vSr,HY,FSr,TSr,MSr,bE,i9e,ESr,CSr,UY,wSr,ASr,LSr,vE,sGe,Rc,FE,d9e,J8,ySr,c9e,xSr,lGe,mr,Y8,$Sr,Pc,kSr,JY,SSr,RSr,YY,PSr,BSr,ISr,K8,NSr,f9e,qSr,jSr,DSr,Ot,Z8,GSr,m9e,OSr,VSr,Bc,XSr,g9e,zSr,WSr,KY,QSr,HSr,USr,TE,JSr,Dr,ex,YSr,h9e,KSr,ZSr,pn,eRr,p9e,oRr,rRr,_9e,tRr,aRr,u9e,nRr,sRr,lRr,xe,ME,b9e,iRr,dRr,ZY,cRr,fRr,mRr,EE,v9e,gRr,hRr,eK,pRr,_Rr,uRr,CE,F9e,bRr,vRr,oK,FRr,TRr,MRr,wE,T9e,ERr,CRr,rK,wRr,ARr,LRr,AE,M9e,yRr,xRr,tK,$Rr,kRr,SRr,LE,E9e,RRr,PRr,aK,BRr,IRr,NRr,yE,C9e,qRr,jRr,nK,DRr,GRr,ORr,xE,w9e,VRr,XRr,sK,zRr,WRr,QRr,$E,A9e,HRr,URr,lK,JRr,YRr,KRr,kE,L9e,ZRr,ePr,iK,oPr,rPr,tPr,SE,iGe,Ic,RE,y9e,ox,aPr,x9e,nPr,dGe,gr,rx,sPr,Nc,lPr,dK,iPr,dPr,cK,cPr,fPr,mPr,tx,gPr,$9e,hPr,pPr,_Pr,Vt,ax,uPr,k9e,bPr,vPr,qc,FPr,S9e,TPr,MPr,fK,EPr,CPr,wPr,PE,APr,Gr,nx,LPr,R9e,yPr,xPr,_n,$Pr,P9e,kPr,SPr,B9e,RPr,PPr,I9e,BPr,IPr,NPr,Ee,BE,N9e,qPr,jPr,mK,DPr,GPr,OPr,IE,q9e,VPr,XPr,gK,zPr,WPr,QPr,NE,j9e,HPr,UPr,hK,JPr,YPr,KPr,qE,D9e,ZPr,eBr,pK,oBr,rBr,tBr,jE,G9e,aBr,nBr,_K,sBr,lBr,iBr,DE,O9e,dBr,cBr,uK,fBr,mBr,gBr,GE,V9e,hBr,pBr,bK,_Br,uBr,bBr,OE,X9e,vBr,FBr,vK,TBr,MBr,EBr,VE,z9e,CBr,wBr,FK,ABr,LBr,yBr,XE,W9e,xBr,$Br,TK,kBr,SBr,RBr,zE,Q9e,PBr,BBr,MK,IBr,NBr,qBr,WE,H9e,jBr,DBr,EK,GBr,OBr,VBr,QE,cGe,jc,HE,U9e,sx,XBr,J9e,zBr,fGe,hr,lx,WBr,Dc,QBr,CK,HBr,UBr,wK,JBr,YBr,KBr,ix,ZBr,Y9e,eIr,oIr,rIr,Xt,dx,tIr,K9e,aIr,nIr,Gc,sIr,Z9e,lIr,iIr,AK,dIr,cIr,fIr,UE,mIr,Or,cx,gIr,eMe,hIr,pIr,un,_Ir,oMe,uIr,bIr,rMe,vIr,FIr,tMe,TIr,MIr,EIr,$e,JE,aMe,CIr,wIr,LK,AIr,LIr,yIr,YE,nMe,xIr,$Ir,yK,kIr,SIr,RIr,KE,sMe,PIr,BIr,xK,IIr,NIr,qIr,ZE,lMe,jIr,DIr,$K,GIr,OIr,VIr,eC,iMe,XIr,zIr,kK,WIr,QIr,HIr,oC,dMe,UIr,JIr,SK,YIr,KIr,ZIr,rC,cMe,eNr,oNr,RK,rNr,tNr,aNr,tC,fMe,nNr,sNr,PK,lNr,iNr,dNr,aC,mMe,cNr,fNr,BK,mNr,gNr,hNr,nC,gMe,pNr,_Nr,IK,uNr,bNr,vNr,sC,mGe,Oc,lC,hMe,fx,FNr,pMe,TNr,gGe,pr,mx,MNr,Vc,ENr,NK,CNr,wNr,qK,ANr,LNr,yNr,gx,xNr,_Me,$Nr,kNr,SNr,zt,hx,RNr,uMe,PNr,BNr,Xc,INr,bMe,NNr,qNr,jK,jNr,DNr,GNr,iC,ONr,Vr,px,VNr,vMe,XNr,zNr,bn,WNr,FMe,QNr,HNr,TMe,UNr,JNr,MMe,YNr,KNr,ZNr,Pe,dC,EMe,eqr,oqr,DK,rqr,tqr,aqr,cC,CMe,nqr,sqr,GK,lqr,iqr,dqr,fC,wMe,cqr,fqr,OK,mqr,gqr,hqr,mC,AMe,pqr,_qr,VK,uqr,bqr,vqr,gC,LMe,Fqr,Tqr,XK,Mqr,Eqr,Cqr,hC,yMe,wqr,Aqr,zK,Lqr,yqr,xqr,pC,xMe,$qr,kqr,WK,Sqr,Rqr,Pqr,_C,$Me,Bqr,Iqr,QK,Nqr,qqr,jqr,uC,kMe,Dqr,Gqr,HK,Oqr,Vqr,Xqr,bC,hGe,zc,vC,SMe,_x,zqr,RMe,Wqr,pGe,_r,ux,Qqr,Wc,Hqr,UK,Uqr,Jqr,JK,Yqr,Kqr,Zqr,bx,ejr,PMe,ojr,rjr,tjr,Wt,vx,ajr,BMe,njr,sjr,Qc,ljr,IMe,ijr,djr,YK,cjr,fjr,mjr,FC,gjr,Xr,Fx,hjr,NMe,pjr,_jr,vn,ujr,qMe,bjr,vjr,jMe,Fjr,Tjr,DMe,Mjr,Ejr,Cjr,ke,TC,GMe,wjr,Ajr,KK,Ljr,yjr,xjr,MC,OMe,$jr,kjr,ZK,Sjr,Rjr,Pjr,EC,VMe,Bjr,Ijr,eZ,Njr,qjr,jjr,CC,XMe,Djr,Gjr,oZ,Ojr,Vjr,Xjr,wC,zMe,zjr,Wjr,rZ,Qjr,Hjr,Ujr,AC,WMe,Jjr,Yjr,tZ,Kjr,Zjr,eDr,LC,QMe,oDr,rDr,aZ,tDr,aDr,nDr,yC,HMe,sDr,lDr,nZ,iDr,dDr,cDr,xC,UMe,fDr,mDr,sZ,gDr,hDr,pDr,$C,JMe,_Dr,uDr,lZ,bDr,vDr,FDr,kC,_Ge,Hc,SC,YMe,Tx,TDr,KMe,MDr,uGe,ur,Mx,EDr,Uc,CDr,iZ,wDr,ADr,dZ,LDr,yDr,xDr,Ex,$Dr,ZMe,kDr,SDr,RDr,Qt,Cx,PDr,e4e,BDr,IDr,Jc,NDr,o4e,qDr,jDr,cZ,DDr,GDr,ODr,RC,VDr,zr,wx,XDr,r4e,zDr,WDr,Fn,QDr,t4e,HDr,UDr,a4e,JDr,YDr,n4e,KDr,ZDr,eGr,Se,PC,s4e,oGr,rGr,fZ,tGr,aGr,nGr,BC,l4e,sGr,lGr,mZ,iGr,dGr,cGr,IC,i4e,fGr,mGr,gZ,gGr,hGr,pGr,NC,d4e,_Gr,uGr,hZ,bGr,vGr,FGr,qC,c4e,TGr,MGr,pZ,EGr,CGr,wGr,jC,f4e,AGr,LGr,_Z,yGr,xGr,$Gr,DC,m4e,kGr,SGr,uZ,RGr,PGr,BGr,GC,g4e,IGr,NGr,bZ,qGr,jGr,DGr,OC,h4e,GGr,OGr,vZ,VGr,XGr,zGr,VC,p4e,WGr,QGr,FZ,HGr,UGr,JGr,XC,bGe,Yc,zC,_4e,Ax,YGr,u4e,KGr,vGe,br,Lx,ZGr,Kc,eOr,TZ,oOr,rOr,MZ,tOr,aOr,nOr,yx,sOr,b4e,lOr,iOr,dOr,Ht,xx,cOr,v4e,fOr,mOr,Zc,gOr,F4e,hOr,pOr,EZ,_Or,uOr,bOr,WC,vOr,Wr,$x,FOr,T4e,TOr,MOr,Tn,EOr,M4e,COr,wOr,E4e,AOr,LOr,C4e,yOr,xOr,$Or,Oe,QC,w4e,kOr,SOr,CZ,ROr,POr,BOr,HC,A4e,IOr,NOr,wZ,qOr,jOr,DOr,UC,L4e,GOr,OOr,AZ,VOr,XOr,zOr,JC,y4e,WOr,QOr,LZ,HOr,UOr,JOr,YC,x4e,YOr,KOr,yZ,ZOr,eVr,oVr,KC,$4e,rVr,tVr,xZ,aVr,nVr,sVr,ZC,k4e,lVr,iVr,$Z,dVr,cVr,fVr,e5,S4e,mVr,gVr,kZ,hVr,pVr,_Vr,o5,FGe,ef,r5,R4e,kx,uVr,P4e,bVr,TGe,vr,Sx,vVr,of,FVr,SZ,TVr,MVr,RZ,EVr,CVr,wVr,Rx,AVr,B4e,LVr,yVr,xVr,Ut,Px,$Vr,I4e,kVr,SVr,rf,RVr,N4e,PVr,BVr,PZ,IVr,NVr,qVr,t5,jVr,Qr,Bx,DVr,q4e,GVr,OVr,Mn,VVr,j4e,XVr,zVr,D4e,WVr,QVr,G4e,HVr,UVr,JVr,Ve,a5,O4e,YVr,KVr,BZ,ZVr,eXr,oXr,n5,V4e,rXr,tXr,IZ,aXr,nXr,sXr,s5,X4e,lXr,iXr,NZ,dXr,cXr,fXr,l5,z4e,mXr,gXr,qZ,hXr,pXr,_Xr,i5,W4e,uXr,bXr,jZ,vXr,FXr,TXr,d5,Q4e,MXr,EXr,DZ,CXr,wXr,AXr,c5,H4e,LXr,yXr,GZ,xXr,$Xr,kXr,f5,U4e,SXr,RXr,OZ,PXr,BXr,IXr,m5,MGe,tf,g5,J4e,Ix,NXr,Y4e,qXr,EGe,Fr,Nx,jXr,af,DXr,VZ,GXr,OXr,XZ,VXr,XXr,zXr,qx,WXr,K4e,QXr,HXr,UXr,Jt,jx,JXr,Z4e,YXr,KXr,nf,ZXr,eEe,ezr,ozr,zZ,rzr,tzr,azr,h5,nzr,Hr,Dx,szr,oEe,lzr,izr,En,dzr,rEe,czr,fzr,tEe,mzr,gzr,aEe,hzr,pzr,_zr,nEe,p5,sEe,uzr,bzr,WZ,vzr,Fzr,Tzr,_5,CGe,sf,u5,lEe,Gx,Mzr,iEe,Ezr,wGe,Tr,Ox,Czr,lf,wzr,QZ,Azr,Lzr,HZ,yzr,xzr,$zr,Vx,kzr,dEe,Szr,Rzr,Pzr,Yt,Xx,Bzr,cEe,Izr,Nzr,df,qzr,fEe,jzr,Dzr,UZ,Gzr,Ozr,Vzr,b5,Xzr,Ur,zx,zzr,mEe,Wzr,Qzr,Cn,Hzr,gEe,Uzr,Jzr,hEe,Yzr,Kzr,pEe,Zzr,eWr,oWr,Wx,v5,_Ee,rWr,tWr,JZ,aWr,nWr,sWr,F5,uEe,lWr,iWr,YZ,dWr,cWr,fWr,T5,AGe,cf,M5,bEe,Qx,mWr,vEe,gWr,LGe,Mr,Hx,hWr,ff,pWr,KZ,_Wr,uWr,ZZ,bWr,vWr,FWr,Ux,TWr,FEe,MWr,EWr,CWr,Kt,Jx,wWr,TEe,AWr,LWr,mf,yWr,MEe,xWr,$Wr,eee,kWr,SWr,RWr,E5,PWr,Jr,Yx,BWr,EEe,IWr,NWr,wn,qWr,CEe,jWr,DWr,wEe,GWr,OWr,AEe,VWr,XWr,zWr,LEe,C5,yEe,WWr,QWr,oee,HWr,UWr,JWr,w5,yGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Qw=new te({}),Hw=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new YWr({props:{warning:!0,$$slots:{default:[vPt]},$$scope:{ctx:x}}}),Uw=new te({}),Jw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/configuration_auto.py#L591"}}),Zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/configuration_auto.py#L614"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[FPt]},$$scope:{ctx:x}}}),eA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/configuration_auto.py#L737"}}),oA=new te({}),rA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/tokenization_auto.py#L391"}}),nA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17639/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/tokenization_auto.py#L405"}}),dh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:x}}}),sA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/tokenization_auto.py#L604"}}),lA=new te({}),iA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),fA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17639/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Vh=new YWr({props:{$$slots:{default:[MPt]},$$scope:{ctx:x}}}),Xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:x}}}),mA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),gA=new te({}),hA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/processing_auto.py#L88"}}),uA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/processing_auto.py#L102"}}),cp=new YWr({props:{$$slots:{default:[CPt]},$$scope:{ctx:x}}}),fp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:x}}}),bA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/processing_auto.py#L255"}}),vA=new te({}),FA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L746"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),hp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:x}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),mu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:x}}}),CA=new te({}),wA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L753"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),hu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:x}}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:x}}}),xA=new te({}),$A=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L768"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:x}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:x}}}),PA=new te({}),BA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L775"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),U1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:x}}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),Rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:x}}}),jA=new te({}),DA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L782"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:x}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:x}}}),XA=new te({}),zA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L791"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),o2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:x}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:x}}}),UA=new te({}),JA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L825"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:x}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:x}}}),eL=new te({}),oL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L832"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:x}}}),nL=new te({}),sL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L818"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:x}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:x}}}),cL=new te({}),fL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L800"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:x}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:x}}}),pL=new te({}),_L=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L807"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:x}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:x}}}),FL=new te({}),TL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L841"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:x}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:x}}}),wL=new te({}),AL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L880"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:x}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:x}}}),$L=new te({}),kL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L887"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:x}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:x}}}),BL=new te({}),IL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L910"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:x}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:x}}}),DL=new te({}),GL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L894"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:x}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:x}}}),zL=new te({}),WL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L901"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:x}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:x}}}),YL=new te({}),KL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L919"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:x}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:x}}}),ry=new te({}),ty=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L926"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[iBt]},$$scope:{ctx:x}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[dBt]},$$scope:{ctx:x}}}),ly=new te({}),iy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L873"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[cBt]},$$scope:{ctx:x}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[fBt]},$$scope:{ctx:x}}}),gy=new te({}),hy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L848"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[mBt]},$$scope:{ctx:x}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[gBt]},$$scope:{ctx:x}}}),by=new te({}),vy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L855"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),Ey=new te({}),Cy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_auto.py#L864"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),yy=new te({}),xy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[bBt]},$$scope:{ctx:x}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),qy=new te({}),jy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),Vy=new te({}),Xy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),a9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),Hy=new te({}),Uy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),s9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),L9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),Zy=new te({}),e8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),x9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),D9=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),a8=new te({}),n8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),O9=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),d8=new te({}),c8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),h8=new te({}),p8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),F8=new te({}),T8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),w8=new te({}),A8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),$8=new te({}),k8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),B8=new te({}),I8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),D8=new te({}),G8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),z8=new te({}),W8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),J8=new te({}),Y8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[HBt]},$$scope:{ctx:x}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[UBt]},$$scope:{ctx:x}}}),ox=new te({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[JBt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[YBt]},$$scope:{ctx:x}}}),sx=new te({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[KBt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ZBt]},$$scope:{ctx:x}}}),fx=new te({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[eIt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[oIt]},$$scope:{ctx:x}}}),_x=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[rIt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[tIt]},$$scope:{ctx:x}}}),Tx=new te({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aIt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nIt]},$$scope:{ctx:x}}}),Ax=new te({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[sIt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[lIt]},$$scope:{ctx:x}}}),kx=new te({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[iIt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[dIt]},$$scope:{ctx:x}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[cIt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fIt]},$$scope:{ctx:x}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[mIt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[gIt]},$$scope:{ctx:x}}}),Qx=new te({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[hIt]},$$scope:{ctx:x}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17639/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17639/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17639/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pIt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),Vw=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),pi=o("Instantiating one of "),Ln=a("a"),Xw=o("AutoConfig"),yn=o(", "),xn=a("a"),zw=o("AutoModel"),_i=o(`, and
`),$n=a("a"),Ww=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),mk=o("will create a model that is an instance of "),bi=a("a"),gk=o("BertModel"),hk=o("."),Eo=l(),wa=a("p"),pk=o("There is one class of "),vf=a("code"),_k=o("AutoModel"),IVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wje=l(),vi=a("h2"),Ff=a("a"),Hoe=a("span"),F(Qw.$$.fragment),NVe=l(),Uoe=a("span"),qVe=o("Extending the Auto Classes"),Aje=l(),kn=a("p"),jVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Joe=a("code"),DVe=o("NewModel"),GVe=o(", make sure you have a "),Yoe=a("code"),OVe=o("NewModelConfig"),VVe=o(` then you can add those to the auto
classes like this:`),Lje=l(),F(Hw.$$.fragment),yje=l(),uk=a("p"),XVe=o("You will then be able to use the auto classes like you would usually do!"),xje=l(),F(Tf.$$.fragment),$je=l(),Fi=a("h2"),Mf=a("a"),Koe=a("span"),F(Uw.$$.fragment),zVe=l(),Zoe=a("span"),WVe=o("AutoConfig"),kje=l(),Co=a("div"),F(Jw.$$.fragment),QVe=l(),Yw=a("p"),HVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bk=a("a"),UVe=o("from_pretrained()"),JVe=o(" class method."),YVe=l(),Kw=a("p"),KVe=o("This class cannot be instantiated directly using "),ere=a("code"),ZVe=o("__init__()"),eXe=o(" (throws an error)."),oXe=l(),Er=a("div"),F(Zw.$$.fragment),rXe=l(),ore=a("p"),tXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aXe=l(),Ti=a("p"),nXe=o("The configuration class to instantiate is selected based on the "),rre=a("code"),sXe=o("model_type"),lXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tre=a("code"),iXe=o("pretrained_model_name_or_path"),dXe=o(":"),cXe=l(),A=a("ul"),Ef=a("li"),are=a("strong"),fXe=o("albert"),mXe=o(" \u2014 "),vk=a("a"),gXe=o("AlbertConfig"),hXe=o(" (ALBERT model)"),pXe=l(),Cf=a("li"),nre=a("strong"),_Xe=o("bart"),uXe=o(" \u2014 "),Fk=a("a"),bXe=o("BartConfig"),vXe=o(" (BART model)"),FXe=l(),wf=a("li"),sre=a("strong"),TXe=o("beit"),MXe=o(" \u2014 "),Tk=a("a"),EXe=o("BeitConfig"),CXe=o(" (BEiT model)"),wXe=l(),Af=a("li"),lre=a("strong"),AXe=o("bert"),LXe=o(" \u2014 "),Mk=a("a"),yXe=o("BertConfig"),xXe=o(" (BERT model)"),$Xe=l(),Lf=a("li"),ire=a("strong"),kXe=o("bert-generation"),SXe=o(" \u2014 "),Ek=a("a"),RXe=o("BertGenerationConfig"),PXe=o(" (Bert Generation model)"),BXe=l(),yf=a("li"),dre=a("strong"),IXe=o("big_bird"),NXe=o(" \u2014 "),Ck=a("a"),qXe=o("BigBirdConfig"),jXe=o(" (BigBird model)"),DXe=l(),xf=a("li"),cre=a("strong"),GXe=o("bigbird_pegasus"),OXe=o(" \u2014 "),wk=a("a"),VXe=o("BigBirdPegasusConfig"),XXe=o(" (BigBird-Pegasus model)"),zXe=l(),$f=a("li"),fre=a("strong"),WXe=o("blenderbot"),QXe=o(" \u2014 "),Ak=a("a"),HXe=o("BlenderbotConfig"),UXe=o(" (Blenderbot model)"),JXe=l(),kf=a("li"),mre=a("strong"),YXe=o("blenderbot-small"),KXe=o(" \u2014 "),Lk=a("a"),ZXe=o("BlenderbotSmallConfig"),eze=o(" (BlenderbotSmall model)"),oze=l(),Sf=a("li"),gre=a("strong"),rze=o("bloom"),tze=o(" \u2014 "),yk=a("a"),aze=o("BloomConfig"),nze=o(" (BLOOM model)"),sze=l(),Rf=a("li"),hre=a("strong"),lze=o("camembert"),ize=o(" \u2014 "),xk=a("a"),dze=o("CamembertConfig"),cze=o(" (CamemBERT model)"),fze=l(),Pf=a("li"),pre=a("strong"),mze=o("canine"),gze=o(" \u2014 "),$k=a("a"),hze=o("CanineConfig"),pze=o(" (CANINE model)"),_ze=l(),Bf=a("li"),_re=a("strong"),uze=o("clip"),bze=o(" \u2014 "),kk=a("a"),vze=o("CLIPConfig"),Fze=o(" (CLIP model)"),Tze=l(),If=a("li"),ure=a("strong"),Mze=o("convbert"),Eze=o(" \u2014 "),Sk=a("a"),Cze=o("ConvBertConfig"),wze=o(" (ConvBERT model)"),Aze=l(),Nf=a("li"),bre=a("strong"),Lze=o("convnext"),yze=o(" \u2014 "),Rk=a("a"),xze=o("ConvNextConfig"),$ze=o(" (ConvNeXT model)"),kze=l(),qf=a("li"),vre=a("strong"),Sze=o("ctrl"),Rze=o(" \u2014 "),Pk=a("a"),Pze=o("CTRLConfig"),Bze=o(" (CTRL model)"),Ize=l(),jf=a("li"),Fre=a("strong"),Nze=o("cvt"),qze=o(" \u2014 "),Bk=a("a"),jze=o("CvtConfig"),Dze=o(" (CvT model)"),Gze=l(),Df=a("li"),Tre=a("strong"),Oze=o("data2vec-audio"),Vze=o(" \u2014 "),Ik=a("a"),Xze=o("Data2VecAudioConfig"),zze=o(" (Data2VecAudio model)"),Wze=l(),Gf=a("li"),Mre=a("strong"),Qze=o("data2vec-text"),Hze=o(" \u2014 "),Nk=a("a"),Uze=o("Data2VecTextConfig"),Jze=o(" (Data2VecText model)"),Yze=l(),Of=a("li"),Ere=a("strong"),Kze=o("data2vec-vision"),Zze=o(" \u2014 "),qk=a("a"),eWe=o("Data2VecVisionConfig"),oWe=o(" (Data2VecVision model)"),rWe=l(),Vf=a("li"),Cre=a("strong"),tWe=o("deberta"),aWe=o(" \u2014 "),jk=a("a"),nWe=o("DebertaConfig"),sWe=o(" (DeBERTa model)"),lWe=l(),Xf=a("li"),wre=a("strong"),iWe=o("deberta-v2"),dWe=o(" \u2014 "),Dk=a("a"),cWe=o("DebertaV2Config"),fWe=o(" (DeBERTa-v2 model)"),mWe=l(),zf=a("li"),Are=a("strong"),gWe=o("decision_transformer"),hWe=o(" \u2014 "),Gk=a("a"),pWe=o("DecisionTransformerConfig"),_We=o(" (Decision Transformer model)"),uWe=l(),Wf=a("li"),Lre=a("strong"),bWe=o("deit"),vWe=o(" \u2014 "),Ok=a("a"),FWe=o("DeiTConfig"),TWe=o(" (DeiT model)"),MWe=l(),Qf=a("li"),yre=a("strong"),EWe=o("detr"),CWe=o(" \u2014 "),Vk=a("a"),wWe=o("DetrConfig"),AWe=o(" (DETR model)"),LWe=l(),Hf=a("li"),xre=a("strong"),yWe=o("distilbert"),xWe=o(" \u2014 "),Xk=a("a"),$We=o("DistilBertConfig"),kWe=o(" (DistilBERT model)"),SWe=l(),Uf=a("li"),$re=a("strong"),RWe=o("dpr"),PWe=o(" \u2014 "),zk=a("a"),BWe=o("DPRConfig"),IWe=o(" (DPR model)"),NWe=l(),Jf=a("li"),kre=a("strong"),qWe=o("dpt"),jWe=o(" \u2014 "),Wk=a("a"),DWe=o("DPTConfig"),GWe=o(" (DPT model)"),OWe=l(),Yf=a("li"),Sre=a("strong"),VWe=o("electra"),XWe=o(" \u2014 "),Qk=a("a"),zWe=o("ElectraConfig"),WWe=o(" (ELECTRA model)"),QWe=l(),Kf=a("li"),Rre=a("strong"),HWe=o("encoder-decoder"),UWe=o(" \u2014 "),Hk=a("a"),JWe=o("EncoderDecoderConfig"),YWe=o(" (Encoder decoder model)"),KWe=l(),Zf=a("li"),Pre=a("strong"),ZWe=o("flaubert"),eQe=o(" \u2014 "),Uk=a("a"),oQe=o("FlaubertConfig"),rQe=o(" (FlauBERT model)"),tQe=l(),em=a("li"),Bre=a("strong"),aQe=o("flava"),nQe=o(" \u2014 "),Jk=a("a"),sQe=o("FlavaConfig"),lQe=o(" (FLAVA model)"),iQe=l(),om=a("li"),Ire=a("strong"),dQe=o("fnet"),cQe=o(" \u2014 "),Yk=a("a"),fQe=o("FNetConfig"),mQe=o(" (FNet model)"),gQe=l(),rm=a("li"),Nre=a("strong"),hQe=o("fsmt"),pQe=o(" \u2014 "),Kk=a("a"),_Qe=o("FSMTConfig"),uQe=o(" (FairSeq Machine-Translation model)"),bQe=l(),tm=a("li"),qre=a("strong"),vQe=o("funnel"),FQe=o(" \u2014 "),Zk=a("a"),TQe=o("FunnelConfig"),MQe=o(" (Funnel Transformer model)"),EQe=l(),am=a("li"),jre=a("strong"),CQe=o("glpn"),wQe=o(" \u2014 "),eS=a("a"),AQe=o("GLPNConfig"),LQe=o(" (GLPN model)"),yQe=l(),nm=a("li"),Dre=a("strong"),xQe=o("gpt2"),$Qe=o(" \u2014 "),oS=a("a"),kQe=o("GPT2Config"),SQe=o(" (OpenAI GPT-2 model)"),RQe=l(),sm=a("li"),Gre=a("strong"),PQe=o("gpt_neo"),BQe=o(" \u2014 "),rS=a("a"),IQe=o("GPTNeoConfig"),NQe=o(" (GPT Neo model)"),qQe=l(),lm=a("li"),Ore=a("strong"),jQe=o("gpt_neox"),DQe=o(" \u2014 "),tS=a("a"),GQe=o("GPTNeoXConfig"),OQe=o(" (GPT NeoX model)"),VQe=l(),im=a("li"),Vre=a("strong"),XQe=o("gptj"),zQe=o(" \u2014 "),aS=a("a"),WQe=o("GPTJConfig"),QQe=o(" (GPT-J model)"),HQe=l(),dm=a("li"),Xre=a("strong"),UQe=o("hubert"),JQe=o(" \u2014 "),nS=a("a"),YQe=o("HubertConfig"),KQe=o(" (Hubert model)"),ZQe=l(),cm=a("li"),zre=a("strong"),eHe=o("ibert"),oHe=o(" \u2014 "),sS=a("a"),rHe=o("IBertConfig"),tHe=o(" (I-BERT model)"),aHe=l(),fm=a("li"),Wre=a("strong"),nHe=o("imagegpt"),sHe=o(" \u2014 "),lS=a("a"),lHe=o("ImageGPTConfig"),iHe=o(" (ImageGPT model)"),dHe=l(),mm=a("li"),Qre=a("strong"),cHe=o("layoutlm"),fHe=o(" \u2014 "),iS=a("a"),mHe=o("LayoutLMConfig"),gHe=o(" (LayoutLM model)"),hHe=l(),gm=a("li"),Hre=a("strong"),pHe=o("layoutlmv2"),_He=o(" \u2014 "),dS=a("a"),uHe=o("LayoutLMv2Config"),bHe=o(" (LayoutLMv2 model)"),vHe=l(),hm=a("li"),Ure=a("strong"),FHe=o("layoutlmv3"),THe=o(" \u2014 "),cS=a("a"),MHe=o("LayoutLMv3Config"),EHe=o(" (LayoutLMv3 model)"),CHe=l(),pm=a("li"),Jre=a("strong"),wHe=o("led"),AHe=o(" \u2014 "),fS=a("a"),LHe=o("LEDConfig"),yHe=o(" (LED model)"),xHe=l(),_m=a("li"),Yre=a("strong"),$He=o("levit"),kHe=o(" \u2014 "),mS=a("a"),SHe=o("LevitConfig"),RHe=o(" (LeViT model)"),PHe=l(),um=a("li"),Kre=a("strong"),BHe=o("longformer"),IHe=o(" \u2014 "),gS=a("a"),NHe=o("LongformerConfig"),qHe=o(" (Longformer model)"),jHe=l(),bm=a("li"),Zre=a("strong"),DHe=o("luke"),GHe=o(" \u2014 "),hS=a("a"),OHe=o("LukeConfig"),VHe=o(" (LUKE model)"),XHe=l(),vm=a("li"),ete=a("strong"),zHe=o("lxmert"),WHe=o(" \u2014 "),pS=a("a"),QHe=o("LxmertConfig"),HHe=o(" (LXMERT model)"),UHe=l(),Fm=a("li"),ote=a("strong"),JHe=o("m2m_100"),YHe=o(" \u2014 "),_S=a("a"),KHe=o("M2M100Config"),ZHe=o(" (M2M100 model)"),eUe=l(),Tm=a("li"),rte=a("strong"),oUe=o("marian"),rUe=o(" \u2014 "),uS=a("a"),tUe=o("MarianConfig"),aUe=o(" (Marian model)"),nUe=l(),Mm=a("li"),tte=a("strong"),sUe=o("maskformer"),lUe=o(" \u2014 "),bS=a("a"),iUe=o("MaskFormerConfig"),dUe=o(" (MaskFormer model)"),cUe=l(),Em=a("li"),ate=a("strong"),fUe=o("mbart"),mUe=o(" \u2014 "),vS=a("a"),gUe=o("MBartConfig"),hUe=o(" (mBART model)"),pUe=l(),Cm=a("li"),nte=a("strong"),_Ue=o("mctct"),uUe=o(" \u2014 "),FS=a("a"),bUe=o("MCTCTConfig"),vUe=o(" (M-CTC-T model)"),FUe=l(),wm=a("li"),ste=a("strong"),TUe=o("megatron-bert"),MUe=o(" \u2014 "),TS=a("a"),EUe=o("MegatronBertConfig"),CUe=o(" (Megatron-BERT model)"),wUe=l(),Am=a("li"),lte=a("strong"),AUe=o("mobilebert"),LUe=o(" \u2014 "),MS=a("a"),yUe=o("MobileBertConfig"),xUe=o(" (MobileBERT model)"),$Ue=l(),Lm=a("li"),ite=a("strong"),kUe=o("mpnet"),SUe=o(" \u2014 "),ES=a("a"),RUe=o("MPNetConfig"),PUe=o(" (MPNet model)"),BUe=l(),ym=a("li"),dte=a("strong"),IUe=o("mt5"),NUe=o(" \u2014 "),CS=a("a"),qUe=o("MT5Config"),jUe=o(" (MT5 model)"),DUe=l(),xm=a("li"),cte=a("strong"),GUe=o("nystromformer"),OUe=o(" \u2014 "),wS=a("a"),VUe=o("NystromformerConfig"),XUe=o(" (Nystr\xF6mformer model)"),zUe=l(),$m=a("li"),fte=a("strong"),WUe=o("openai-gpt"),QUe=o(" \u2014 "),AS=a("a"),HUe=o("OpenAIGPTConfig"),UUe=o(" (OpenAI GPT model)"),JUe=l(),km=a("li"),mte=a("strong"),YUe=o("opt"),KUe=o(" \u2014 "),LS=a("a"),ZUe=o("OPTConfig"),eJe=o(" (OPT model)"),oJe=l(),Sm=a("li"),gte=a("strong"),rJe=o("pegasus"),tJe=o(" \u2014 "),yS=a("a"),aJe=o("PegasusConfig"),nJe=o(" (Pegasus model)"),sJe=l(),Rm=a("li"),hte=a("strong"),lJe=o("perceiver"),iJe=o(" \u2014 "),xS=a("a"),dJe=o("PerceiverConfig"),cJe=o(" (Perceiver model)"),fJe=l(),Pm=a("li"),pte=a("strong"),mJe=o("plbart"),gJe=o(" \u2014 "),$S=a("a"),hJe=o("PLBartConfig"),pJe=o(" (PLBart model)"),_Je=l(),Bm=a("li"),_te=a("strong"),uJe=o("poolformer"),bJe=o(" \u2014 "),kS=a("a"),vJe=o("PoolFormerConfig"),FJe=o(" (PoolFormer model)"),TJe=l(),Im=a("li"),ute=a("strong"),MJe=o("prophetnet"),EJe=o(" \u2014 "),SS=a("a"),CJe=o("ProphetNetConfig"),wJe=o(" (ProphetNet model)"),AJe=l(),Nm=a("li"),bte=a("strong"),LJe=o("qdqbert"),yJe=o(" \u2014 "),RS=a("a"),xJe=o("QDQBertConfig"),$Je=o(" (QDQBert model)"),kJe=l(),qm=a("li"),vte=a("strong"),SJe=o("rag"),RJe=o(" \u2014 "),PS=a("a"),PJe=o("RagConfig"),BJe=o(" (RAG model)"),IJe=l(),jm=a("li"),Fte=a("strong"),NJe=o("realm"),qJe=o(" \u2014 "),BS=a("a"),jJe=o("RealmConfig"),DJe=o(" (REALM model)"),GJe=l(),Dm=a("li"),Tte=a("strong"),OJe=o("reformer"),VJe=o(" \u2014 "),IS=a("a"),XJe=o("ReformerConfig"),zJe=o(" (Reformer model)"),WJe=l(),Gm=a("li"),Mte=a("strong"),QJe=o("regnet"),HJe=o(" \u2014 "),NS=a("a"),UJe=o("RegNetConfig"),JJe=o(" (RegNet model)"),YJe=l(),Om=a("li"),Ete=a("strong"),KJe=o("rembert"),ZJe=o(" \u2014 "),qS=a("a"),eYe=o("RemBertConfig"),oYe=o(" (RemBERT model)"),rYe=l(),Vm=a("li"),Cte=a("strong"),tYe=o("resnet"),aYe=o(" \u2014 "),jS=a("a"),nYe=o("ResNetConfig"),sYe=o(" (ResNet model)"),lYe=l(),Xm=a("li"),wte=a("strong"),iYe=o("retribert"),dYe=o(" \u2014 "),DS=a("a"),cYe=o("RetriBertConfig"),fYe=o(" (RetriBERT model)"),mYe=l(),zm=a("li"),Ate=a("strong"),gYe=o("roberta"),hYe=o(" \u2014 "),GS=a("a"),pYe=o("RobertaConfig"),_Ye=o(" (RoBERTa model)"),uYe=l(),Wm=a("li"),Lte=a("strong"),bYe=o("roformer"),vYe=o(" \u2014 "),OS=a("a"),FYe=o("RoFormerConfig"),TYe=o(" (RoFormer model)"),MYe=l(),Qm=a("li"),yte=a("strong"),EYe=o("segformer"),CYe=o(" \u2014 "),VS=a("a"),wYe=o("SegformerConfig"),AYe=o(" (SegFormer model)"),LYe=l(),Hm=a("li"),xte=a("strong"),yYe=o("sew"),xYe=o(" \u2014 "),XS=a("a"),$Ye=o("SEWConfig"),kYe=o(" (SEW model)"),SYe=l(),Um=a("li"),$te=a("strong"),RYe=o("sew-d"),PYe=o(" \u2014 "),zS=a("a"),BYe=o("SEWDConfig"),IYe=o(" (SEW-D model)"),NYe=l(),Jm=a("li"),kte=a("strong"),qYe=o("speech-encoder-decoder"),jYe=o(" \u2014 "),WS=a("a"),DYe=o("SpeechEncoderDecoderConfig"),GYe=o(" (Speech Encoder decoder model)"),OYe=l(),Ym=a("li"),Ste=a("strong"),VYe=o("speech_to_text"),XYe=o(" \u2014 "),QS=a("a"),zYe=o("Speech2TextConfig"),WYe=o(" (Speech2Text model)"),QYe=l(),Km=a("li"),Rte=a("strong"),HYe=o("speech_to_text_2"),UYe=o(" \u2014 "),HS=a("a"),JYe=o("Speech2Text2Config"),YYe=o(" (Speech2Text2 model)"),KYe=l(),Zm=a("li"),Pte=a("strong"),ZYe=o("splinter"),eKe=o(" \u2014 "),US=a("a"),oKe=o("SplinterConfig"),rKe=o(" (Splinter model)"),tKe=l(),eg=a("li"),Bte=a("strong"),aKe=o("squeezebert"),nKe=o(" \u2014 "),JS=a("a"),sKe=o("SqueezeBertConfig"),lKe=o(" (SqueezeBERT model)"),iKe=l(),og=a("li"),Ite=a("strong"),dKe=o("swin"),cKe=o(" \u2014 "),YS=a("a"),fKe=o("SwinConfig"),mKe=o(" (Swin Transformer model)"),gKe=l(),rg=a("li"),Nte=a("strong"),hKe=o("t5"),pKe=o(" \u2014 "),KS=a("a"),_Ke=o("T5Config"),uKe=o(" (T5 model)"),bKe=l(),tg=a("li"),qte=a("strong"),vKe=o("tapas"),FKe=o(" \u2014 "),ZS=a("a"),TKe=o("TapasConfig"),MKe=o(" (TAPAS model)"),EKe=l(),ag=a("li"),jte=a("strong"),CKe=o("trajectory_transformer"),wKe=o(" \u2014 "),eR=a("a"),AKe=o("TrajectoryTransformerConfig"),LKe=o(" (Trajectory Transformer model)"),yKe=l(),ng=a("li"),Dte=a("strong"),xKe=o("transfo-xl"),$Ke=o(" \u2014 "),oR=a("a"),kKe=o("TransfoXLConfig"),SKe=o(" (Transformer-XL model)"),RKe=l(),sg=a("li"),Gte=a("strong"),PKe=o("trocr"),BKe=o(" \u2014 "),rR=a("a"),IKe=o("TrOCRConfig"),NKe=o(" (TrOCR model)"),qKe=l(),lg=a("li"),Ote=a("strong"),jKe=o("unispeech"),DKe=o(" \u2014 "),tR=a("a"),GKe=o("UniSpeechConfig"),OKe=o(" (UniSpeech model)"),VKe=l(),ig=a("li"),Vte=a("strong"),XKe=o("unispeech-sat"),zKe=o(" \u2014 "),aR=a("a"),WKe=o("UniSpeechSatConfig"),QKe=o(" (UniSpeechSat model)"),HKe=l(),dg=a("li"),Xte=a("strong"),UKe=o("van"),JKe=o(" \u2014 "),nR=a("a"),YKe=o("VanConfig"),KKe=o(" (VAN model)"),ZKe=l(),cg=a("li"),zte=a("strong"),eZe=o("vilt"),oZe=o(" \u2014 "),sR=a("a"),rZe=o("ViltConfig"),tZe=o(" (ViLT model)"),aZe=l(),fg=a("li"),Wte=a("strong"),nZe=o("vision-encoder-decoder"),sZe=o(" \u2014 "),lR=a("a"),lZe=o("VisionEncoderDecoderConfig"),iZe=o(" (Vision Encoder decoder model)"),dZe=l(),mg=a("li"),Qte=a("strong"),cZe=o("vision-text-dual-encoder"),fZe=o(" \u2014 "),iR=a("a"),mZe=o("VisionTextDualEncoderConfig"),gZe=o(" (VisionTextDualEncoder model)"),hZe=l(),gg=a("li"),Hte=a("strong"),pZe=o("visual_bert"),_Ze=o(" \u2014 "),dR=a("a"),uZe=o("VisualBertConfig"),bZe=o(" (VisualBERT model)"),vZe=l(),hg=a("li"),Ute=a("strong"),FZe=o("vit"),TZe=o(" \u2014 "),cR=a("a"),MZe=o("ViTConfig"),EZe=o(" (ViT model)"),CZe=l(),pg=a("li"),Jte=a("strong"),wZe=o("vit_mae"),AZe=o(" \u2014 "),fR=a("a"),LZe=o("ViTMAEConfig"),yZe=o(" (ViTMAE model)"),xZe=l(),_g=a("li"),Yte=a("strong"),$Ze=o("wav2vec2"),kZe=o(" \u2014 "),mR=a("a"),SZe=o("Wav2Vec2Config"),RZe=o(" (Wav2Vec2 model)"),PZe=l(),ug=a("li"),Kte=a("strong"),BZe=o("wav2vec2-conformer"),IZe=o(" \u2014 "),gR=a("a"),NZe=o("Wav2Vec2ConformerConfig"),qZe=o(" (Wav2Vec2-Conformer model)"),jZe=l(),bg=a("li"),Zte=a("strong"),DZe=o("wavlm"),GZe=o(" \u2014 "),hR=a("a"),OZe=o("WavLMConfig"),VZe=o(" (WavLM model)"),XZe=l(),vg=a("li"),eae=a("strong"),zZe=o("xglm"),WZe=o(" \u2014 "),pR=a("a"),QZe=o("XGLMConfig"),HZe=o(" (XGLM model)"),UZe=l(),Fg=a("li"),oae=a("strong"),JZe=o("xlm"),YZe=o(" \u2014 "),_R=a("a"),KZe=o("XLMConfig"),ZZe=o(" (XLM model)"),eeo=l(),Tg=a("li"),rae=a("strong"),oeo=o("xlm-prophetnet"),reo=o(" \u2014 "),uR=a("a"),teo=o("XLMProphetNetConfig"),aeo=o(" (XLM-ProphetNet model)"),neo=l(),Mg=a("li"),tae=a("strong"),seo=o("xlm-roberta"),leo=o(" \u2014 "),bR=a("a"),ieo=o("XLMRobertaConfig"),deo=o(" (XLM-RoBERTa model)"),ceo=l(),Eg=a("li"),aae=a("strong"),feo=o("xlm-roberta-xl"),meo=o(" \u2014 "),vR=a("a"),geo=o("XLMRobertaXLConfig"),heo=o(" (XLM-RoBERTa-XL model)"),peo=l(),Cg=a("li"),nae=a("strong"),_eo=o("xlnet"),ueo=o(" \u2014 "),FR=a("a"),beo=o("XLNetConfig"),veo=o(" (XLNet model)"),Feo=l(),wg=a("li"),sae=a("strong"),Teo=o("yolos"),Meo=o(" \u2014 "),TR=a("a"),Eeo=o("YolosConfig"),Ceo=o(" (YOLOS model)"),weo=l(),Ag=a("li"),lae=a("strong"),Aeo=o("yoso"),Leo=o(" \u2014 "),MR=a("a"),yeo=o("YosoConfig"),xeo=o(" (YOSO model)"),$eo=l(),F(Lg.$$.fragment),keo=l(),yg=a("div"),F(eA.$$.fragment),Seo=l(),iae=a("p"),Reo=o("Register a new configuration for this class."),Sje=l(),Mi=a("h2"),xg=a("a"),dae=a("span"),F(oA.$$.fragment),Peo=l(),cae=a("span"),Beo=o("AutoTokenizer"),Rje=l(),wo=a("div"),F(rA.$$.fragment),Ieo=l(),tA=a("p"),Neo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ER=a("a"),qeo=o("AutoTokenizer.from_pretrained()"),jeo=o(" class method."),Deo=l(),aA=a("p"),Geo=o("This class cannot be instantiated directly using "),fae=a("code"),Oeo=o("__init__()"),Veo=o(" (throws an error)."),Xeo=l(),Cr=a("div"),F(nA.$$.fragment),zeo=l(),mae=a("p"),Weo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qeo=l(),Aa=a("p"),Heo=o("The tokenizer class to instantiate is selected based on the "),gae=a("code"),Ueo=o("model_type"),Jeo=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),Yeo=o("pretrained_model_name_or_path"),Keo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),Zeo=o("pretrained_model_name_or_path"),eoo=o(":"),ooo=l(),k=a("ul"),Sn=a("li"),_ae=a("strong"),roo=o("albert"),too=o(" \u2014 "),CR=a("a"),aoo=o("AlbertTokenizer"),noo=o(" or "),wR=a("a"),soo=o("AlbertTokenizerFast"),loo=o(" (ALBERT model)"),ioo=l(),Rn=a("li"),uae=a("strong"),doo=o("bart"),coo=o(" \u2014 "),AR=a("a"),foo=o("BartTokenizer"),moo=o(" or "),LR=a("a"),goo=o("BartTokenizerFast"),hoo=o(" (BART model)"),poo=l(),Pn=a("li"),bae=a("strong"),_oo=o("barthez"),uoo=o(" \u2014 "),yR=a("a"),boo=o("BarthezTokenizer"),voo=o(" or "),xR=a("a"),Foo=o("BarthezTokenizerFast"),Too=o(" (BARThez model)"),Moo=l(),$g=a("li"),vae=a("strong"),Eoo=o("bartpho"),Coo=o(" \u2014 "),$R=a("a"),woo=o("BartphoTokenizer"),Aoo=o(" (BARTpho model)"),Loo=l(),Bn=a("li"),Fae=a("strong"),yoo=o("bert"),xoo=o(" \u2014 "),kR=a("a"),$oo=o("BertTokenizer"),koo=o(" or "),SR=a("a"),Soo=o("BertTokenizerFast"),Roo=o(" (BERT model)"),Poo=l(),kg=a("li"),Tae=a("strong"),Boo=o("bert-generation"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("BertGenerationTokenizer"),qoo=o(" (Bert Generation model)"),joo=l(),Sg=a("li"),Mae=a("strong"),Doo=o("bert-japanese"),Goo=o(" \u2014 "),PR=a("a"),Ooo=o("BertJapaneseTokenizer"),Voo=o(" (BertJapanese model)"),Xoo=l(),Rg=a("li"),Eae=a("strong"),zoo=o("bertweet"),Woo=o(" \u2014 "),BR=a("a"),Qoo=o("BertweetTokenizer"),Hoo=o(" (BERTweet model)"),Uoo=l(),In=a("li"),Cae=a("strong"),Joo=o("big_bird"),Yoo=o(" \u2014 "),IR=a("a"),Koo=o("BigBirdTokenizer"),Zoo=o(" or "),NR=a("a"),ero=o("BigBirdTokenizerFast"),oro=o(" (BigBird model)"),rro=l(),Nn=a("li"),wae=a("strong"),tro=o("bigbird_pegasus"),aro=o(" \u2014 "),qR=a("a"),nro=o("PegasusTokenizer"),sro=o(" or "),jR=a("a"),lro=o("PegasusTokenizerFast"),iro=o(" (BigBird-Pegasus model)"),dro=l(),qn=a("li"),Aae=a("strong"),cro=o("blenderbot"),fro=o(" \u2014 "),DR=a("a"),mro=o("BlenderbotTokenizer"),gro=o(" or "),GR=a("a"),hro=o("BlenderbotTokenizerFast"),pro=o(" (Blenderbot model)"),_ro=l(),Pg=a("li"),Lae=a("strong"),uro=o("blenderbot-small"),bro=o(" \u2014 "),OR=a("a"),vro=o("BlenderbotSmallTokenizer"),Fro=o(" (BlenderbotSmall model)"),Tro=l(),Bg=a("li"),yae=a("strong"),Mro=o("bloom"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("BloomTokenizerFast"),wro=o(" (BLOOM model)"),Aro=l(),Ig=a("li"),xae=a("strong"),Lro=o("byt5"),yro=o(" \u2014 "),XR=a("a"),xro=o("ByT5Tokenizer"),$ro=o(" (ByT5 model)"),kro=l(),jn=a("li"),$ae=a("strong"),Sro=o("camembert"),Rro=o(" \u2014 "),zR=a("a"),Pro=o("CamembertTokenizer"),Bro=o(" or "),WR=a("a"),Iro=o("CamembertTokenizerFast"),Nro=o(" (CamemBERT model)"),qro=l(),Ng=a("li"),kae=a("strong"),jro=o("canine"),Dro=o(" \u2014 "),QR=a("a"),Gro=o("CanineTokenizer"),Oro=o(" (CANINE model)"),Vro=l(),Dn=a("li"),Sae=a("strong"),Xro=o("clip"),zro=o(" \u2014 "),HR=a("a"),Wro=o("CLIPTokenizer"),Qro=o(" or "),UR=a("a"),Hro=o("CLIPTokenizerFast"),Uro=o(" (CLIP model)"),Jro=l(),Gn=a("li"),Rae=a("strong"),Yro=o("convbert"),Kro=o(" \u2014 "),JR=a("a"),Zro=o("ConvBertTokenizer"),eto=o(" or "),YR=a("a"),oto=o("ConvBertTokenizerFast"),rto=o(" (ConvBERT model)"),tto=l(),On=a("li"),Pae=a("strong"),ato=o("cpm"),nto=o(" \u2014 "),KR=a("a"),sto=o("CpmTokenizer"),lto=o(" or "),ZR=a("a"),ito=o("CpmTokenizerFast"),dto=o(" (CPM model)"),cto=l(),qg=a("li"),Bae=a("strong"),fto=o("ctrl"),mto=o(" \u2014 "),eP=a("a"),gto=o("CTRLTokenizer"),hto=o(" (CTRL model)"),pto=l(),Vn=a("li"),Iae=a("strong"),_to=o("data2vec-text"),uto=o(" \u2014 "),oP=a("a"),bto=o("RobertaTokenizer"),vto=o(" or "),rP=a("a"),Fto=o("RobertaTokenizerFast"),Tto=o(" (Data2VecText model)"),Mto=l(),Xn=a("li"),Nae=a("strong"),Eto=o("deberta"),Cto=o(" \u2014 "),tP=a("a"),wto=o("DebertaTokenizer"),Ato=o(" or "),aP=a("a"),Lto=o("DebertaTokenizerFast"),yto=o(" (DeBERTa model)"),xto=l(),zn=a("li"),qae=a("strong"),$to=o("deberta-v2"),kto=o(" \u2014 "),nP=a("a"),Sto=o("DebertaV2Tokenizer"),Rto=o(" or "),sP=a("a"),Pto=o("DebertaV2TokenizerFast"),Bto=o(" (DeBERTa-v2 model)"),Ito=l(),Wn=a("li"),jae=a("strong"),Nto=o("distilbert"),qto=o(" \u2014 "),lP=a("a"),jto=o("DistilBertTokenizer"),Dto=o(" or "),iP=a("a"),Gto=o("DistilBertTokenizerFast"),Oto=o(" (DistilBERT model)"),Vto=l(),Qn=a("li"),Dae=a("strong"),Xto=o("dpr"),zto=o(" \u2014 "),dP=a("a"),Wto=o("DPRQuestionEncoderTokenizer"),Qto=o(" or "),cP=a("a"),Hto=o("DPRQuestionEncoderTokenizerFast"),Uto=o(" (DPR model)"),Jto=l(),Hn=a("li"),Gae=a("strong"),Yto=o("electra"),Kto=o(" \u2014 "),fP=a("a"),Zto=o("ElectraTokenizer"),eao=o(" or "),mP=a("a"),oao=o("ElectraTokenizerFast"),rao=o(" (ELECTRA model)"),tao=l(),jg=a("li"),Oae=a("strong"),aao=o("flaubert"),nao=o(" \u2014 "),gP=a("a"),sao=o("FlaubertTokenizer"),lao=o(" (FlauBERT model)"),iao=l(),Un=a("li"),Vae=a("strong"),dao=o("fnet"),cao=o(" \u2014 "),hP=a("a"),fao=o("FNetTokenizer"),mao=o(" or "),pP=a("a"),gao=o("FNetTokenizerFast"),hao=o(" (FNet model)"),pao=l(),Dg=a("li"),Xae=a("strong"),_ao=o("fsmt"),uao=o(" \u2014 "),_P=a("a"),bao=o("FSMTTokenizer"),vao=o(" (FairSeq Machine-Translation model)"),Fao=l(),Jn=a("li"),zae=a("strong"),Tao=o("funnel"),Mao=o(" \u2014 "),uP=a("a"),Eao=o("FunnelTokenizer"),Cao=o(" or "),bP=a("a"),wao=o("FunnelTokenizerFast"),Aao=o(" (Funnel Transformer model)"),Lao=l(),Yn=a("li"),Wae=a("strong"),yao=o("gpt2"),xao=o(" \u2014 "),vP=a("a"),$ao=o("GPT2Tokenizer"),kao=o(" or "),FP=a("a"),Sao=o("GPT2TokenizerFast"),Rao=o(" (OpenAI GPT-2 model)"),Pao=l(),Kn=a("li"),Qae=a("strong"),Bao=o("gpt_neo"),Iao=o(" \u2014 "),TP=a("a"),Nao=o("GPT2Tokenizer"),qao=o(" or "),MP=a("a"),jao=o("GPT2TokenizerFast"),Dao=o(" (GPT Neo model)"),Gao=l(),Gg=a("li"),Hae=a("strong"),Oao=o("gpt_neox"),Vao=o(" \u2014 "),EP=a("a"),Xao=o("GPTNeoXTokenizerFast"),zao=o(" (GPT NeoX model)"),Wao=l(),Zn=a("li"),Uae=a("strong"),Qao=o("gptj"),Hao=o(" \u2014 "),CP=a("a"),Uao=o("GPT2Tokenizer"),Jao=o(" or "),wP=a("a"),Yao=o("GPT2TokenizerFast"),Kao=o(" (GPT-J model)"),Zao=l(),es=a("li"),Jae=a("strong"),eno=o("herbert"),ono=o(" \u2014 "),AP=a("a"),rno=o("HerbertTokenizer"),tno=o(" or "),LP=a("a"),ano=o("HerbertTokenizerFast"),nno=o(" (HerBERT model)"),sno=l(),Og=a("li"),Yae=a("strong"),lno=o("hubert"),ino=o(" \u2014 "),yP=a("a"),dno=o("Wav2Vec2CTCTokenizer"),cno=o(" (Hubert model)"),fno=l(),os=a("li"),Kae=a("strong"),mno=o("ibert"),gno=o(" \u2014 "),xP=a("a"),hno=o("RobertaTokenizer"),pno=o(" or "),$P=a("a"),_no=o("RobertaTokenizerFast"),uno=o(" (I-BERT model)"),bno=l(),rs=a("li"),Zae=a("strong"),vno=o("layoutlm"),Fno=o(" \u2014 "),kP=a("a"),Tno=o("LayoutLMTokenizer"),Mno=o(" or "),SP=a("a"),Eno=o("LayoutLMTokenizerFast"),Cno=o(" (LayoutLM model)"),wno=l(),ts=a("li"),ene=a("strong"),Ano=o("layoutlmv2"),Lno=o(" \u2014 "),RP=a("a"),yno=o("LayoutLMv2Tokenizer"),xno=o(" or "),PP=a("a"),$no=o("LayoutLMv2TokenizerFast"),kno=o(" (LayoutLMv2 model)"),Sno=l(),as=a("li"),one=a("strong"),Rno=o("layoutlmv3"),Pno=o(" \u2014 "),BP=a("a"),Bno=o("LayoutLMv3Tokenizer"),Ino=o(" or "),IP=a("a"),Nno=o("LayoutLMv3TokenizerFast"),qno=o(" (LayoutLMv3 model)"),jno=l(),ns=a("li"),rne=a("strong"),Dno=o("layoutxlm"),Gno=o(" \u2014 "),NP=a("a"),Ono=o("LayoutXLMTokenizer"),Vno=o(" or "),qP=a("a"),Xno=o("LayoutXLMTokenizerFast"),zno=o(" (LayoutXLM model)"),Wno=l(),ss=a("li"),tne=a("strong"),Qno=o("led"),Hno=o(" \u2014 "),jP=a("a"),Uno=o("LEDTokenizer"),Jno=o(" or "),DP=a("a"),Yno=o("LEDTokenizerFast"),Kno=o(" (LED model)"),Zno=l(),ls=a("li"),ane=a("strong"),eso=o("longformer"),oso=o(" \u2014 "),GP=a("a"),rso=o("LongformerTokenizer"),tso=o(" or "),OP=a("a"),aso=o("LongformerTokenizerFast"),nso=o(" (Longformer model)"),sso=l(),Vg=a("li"),nne=a("strong"),lso=o("luke"),iso=o(" \u2014 "),VP=a("a"),dso=o("LukeTokenizer"),cso=o(" (LUKE model)"),fso=l(),is=a("li"),sne=a("strong"),mso=o("lxmert"),gso=o(" \u2014 "),XP=a("a"),hso=o("LxmertTokenizer"),pso=o(" or "),zP=a("a"),_so=o("LxmertTokenizerFast"),uso=o(" (LXMERT model)"),bso=l(),Xg=a("li"),lne=a("strong"),vso=o("m2m_100"),Fso=o(" \u2014 "),WP=a("a"),Tso=o("M2M100Tokenizer"),Mso=o(" (M2M100 model)"),Eso=l(),zg=a("li"),ine=a("strong"),Cso=o("marian"),wso=o(" \u2014 "),QP=a("a"),Aso=o("MarianTokenizer"),Lso=o(" (Marian model)"),yso=l(),ds=a("li"),dne=a("strong"),xso=o("mbart"),$so=o(" \u2014 "),HP=a("a"),kso=o("MBartTokenizer"),Sso=o(" or "),UP=a("a"),Rso=o("MBartTokenizerFast"),Pso=o(" (mBART model)"),Bso=l(),cs=a("li"),cne=a("strong"),Iso=o("mbart50"),Nso=o(" \u2014 "),JP=a("a"),qso=o("MBart50Tokenizer"),jso=o(" or "),YP=a("a"),Dso=o("MBart50TokenizerFast"),Gso=o(" (mBART-50 model)"),Oso=l(),fs=a("li"),fne=a("strong"),Vso=o("megatron-bert"),Xso=o(" \u2014 "),KP=a("a"),zso=o("BertTokenizer"),Wso=o(" or "),ZP=a("a"),Qso=o("BertTokenizerFast"),Hso=o(" (Megatron-BERT model)"),Uso=l(),Wg=a("li"),mne=a("strong"),Jso=o("mluke"),Yso=o(" \u2014 "),eB=a("a"),Kso=o("MLukeTokenizer"),Zso=o(" (mLUKE model)"),elo=l(),ms=a("li"),gne=a("strong"),olo=o("mobilebert"),rlo=o(" \u2014 "),oB=a("a"),tlo=o("MobileBertTokenizer"),alo=o(" or "),rB=a("a"),nlo=o("MobileBertTokenizerFast"),slo=o(" (MobileBERT model)"),llo=l(),gs=a("li"),hne=a("strong"),ilo=o("mpnet"),dlo=o(" \u2014 "),tB=a("a"),clo=o("MPNetTokenizer"),flo=o(" or "),aB=a("a"),mlo=o("MPNetTokenizerFast"),glo=o(" (MPNet model)"),hlo=l(),hs=a("li"),pne=a("strong"),plo=o("mt5"),_lo=o(" \u2014 "),nB=a("a"),ulo=o("MT5Tokenizer"),blo=o(" or "),sB=a("a"),vlo=o("MT5TokenizerFast"),Flo=o(" (MT5 model)"),Tlo=l(),ps=a("li"),_ne=a("strong"),Mlo=o("nystromformer"),Elo=o(" \u2014 "),lB=a("a"),Clo=o("AlbertTokenizer"),wlo=o(" or "),iB=a("a"),Alo=o("AlbertTokenizerFast"),Llo=o(" (Nystr\xF6mformer model)"),ylo=l(),_s=a("li"),une=a("strong"),xlo=o("openai-gpt"),$lo=o(" \u2014 "),dB=a("a"),klo=o("OpenAIGPTTokenizer"),Slo=o(" or "),cB=a("a"),Rlo=o("OpenAIGPTTokenizerFast"),Plo=o(" (OpenAI GPT model)"),Blo=l(),Qg=a("li"),bne=a("strong"),Ilo=o("opt"),Nlo=o(" \u2014 "),fB=a("a"),qlo=o("GPT2Tokenizer"),jlo=o(" (OPT model)"),Dlo=l(),us=a("li"),vne=a("strong"),Glo=o("pegasus"),Olo=o(" \u2014 "),mB=a("a"),Vlo=o("PegasusTokenizer"),Xlo=o(" or "),gB=a("a"),zlo=o("PegasusTokenizerFast"),Wlo=o(" (Pegasus model)"),Qlo=l(),Hg=a("li"),Fne=a("strong"),Hlo=o("perceiver"),Ulo=o(" \u2014 "),hB=a("a"),Jlo=o("PerceiverTokenizer"),Ylo=o(" (Perceiver model)"),Klo=l(),Ug=a("li"),Tne=a("strong"),Zlo=o("phobert"),eio=o(" \u2014 "),pB=a("a"),oio=o("PhobertTokenizer"),rio=o(" (PhoBERT model)"),tio=l(),Jg=a("li"),Mne=a("strong"),aio=o("plbart"),nio=o(" \u2014 "),_B=a("a"),sio=o("PLBartTokenizer"),lio=o(" (PLBart model)"),iio=l(),Yg=a("li"),Ene=a("strong"),dio=o("prophetnet"),cio=o(" \u2014 "),uB=a("a"),fio=o("ProphetNetTokenizer"),mio=o(" (ProphetNet model)"),gio=l(),bs=a("li"),Cne=a("strong"),hio=o("qdqbert"),pio=o(" \u2014 "),bB=a("a"),_io=o("BertTokenizer"),uio=o(" or "),vB=a("a"),bio=o("BertTokenizerFast"),vio=o(" (QDQBert model)"),Fio=l(),Kg=a("li"),wne=a("strong"),Tio=o("rag"),Mio=o(" \u2014 "),FB=a("a"),Eio=o("RagTokenizer"),Cio=o(" (RAG model)"),wio=l(),vs=a("li"),Ane=a("strong"),Aio=o("realm"),Lio=o(" \u2014 "),TB=a("a"),yio=o("RealmTokenizer"),xio=o(" or "),MB=a("a"),$io=o("RealmTokenizerFast"),kio=o(" (REALM model)"),Sio=l(),Fs=a("li"),Lne=a("strong"),Rio=o("reformer"),Pio=o(" \u2014 "),EB=a("a"),Bio=o("ReformerTokenizer"),Iio=o(" or "),CB=a("a"),Nio=o("ReformerTokenizerFast"),qio=o(" (Reformer model)"),jio=l(),Ts=a("li"),yne=a("strong"),Dio=o("rembert"),Gio=o(" \u2014 "),wB=a("a"),Oio=o("RemBertTokenizer"),Vio=o(" or "),AB=a("a"),Xio=o("RemBertTokenizerFast"),zio=o(" (RemBERT model)"),Wio=l(),Ms=a("li"),xne=a("strong"),Qio=o("retribert"),Hio=o(" \u2014 "),LB=a("a"),Uio=o("RetriBertTokenizer"),Jio=o(" or "),yB=a("a"),Yio=o("RetriBertTokenizerFast"),Kio=o(" (RetriBERT model)"),Zio=l(),Es=a("li"),$ne=a("strong"),edo=o("roberta"),odo=o(" \u2014 "),xB=a("a"),rdo=o("RobertaTokenizer"),tdo=o(" or "),$B=a("a"),ado=o("RobertaTokenizerFast"),ndo=o(" (RoBERTa model)"),sdo=l(),Cs=a("li"),kne=a("strong"),ldo=o("roformer"),ido=o(" \u2014 "),kB=a("a"),ddo=o("RoFormerTokenizer"),cdo=o(" or "),SB=a("a"),fdo=o("RoFormerTokenizerFast"),mdo=o(" (RoFormer model)"),gdo=l(),Zg=a("li"),Sne=a("strong"),hdo=o("speech_to_text"),pdo=o(" \u2014 "),RB=a("a"),_do=o("Speech2TextTokenizer"),udo=o(" (Speech2Text model)"),bdo=l(),eh=a("li"),Rne=a("strong"),vdo=o("speech_to_text_2"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("Speech2Text2Tokenizer"),Mdo=o(" (Speech2Text2 model)"),Edo=l(),ws=a("li"),Pne=a("strong"),Cdo=o("splinter"),wdo=o(" \u2014 "),BB=a("a"),Ado=o("SplinterTokenizer"),Ldo=o(" or "),IB=a("a"),ydo=o("SplinterTokenizerFast"),xdo=o(" (Splinter model)"),$do=l(),As=a("li"),Bne=a("strong"),kdo=o("squeezebert"),Sdo=o(" \u2014 "),NB=a("a"),Rdo=o("SqueezeBertTokenizer"),Pdo=o(" or "),qB=a("a"),Bdo=o("SqueezeBertTokenizerFast"),Ido=o(" (SqueezeBERT model)"),Ndo=l(),Ls=a("li"),Ine=a("strong"),qdo=o("t5"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("T5Tokenizer"),Gdo=o(" or "),DB=a("a"),Odo=o("T5TokenizerFast"),Vdo=o(" (T5 model)"),Xdo=l(),oh=a("li"),Nne=a("strong"),zdo=o("tapas"),Wdo=o(" \u2014 "),GB=a("a"),Qdo=o("TapasTokenizer"),Hdo=o(" (TAPAS model)"),Udo=l(),rh=a("li"),qne=a("strong"),Jdo=o("tapex"),Ydo=o(" \u2014 "),OB=a("a"),Kdo=o("TapexTokenizer"),Zdo=o(" (TAPEX model)"),eco=l(),th=a("li"),jne=a("strong"),oco=o("transfo-xl"),rco=o(" \u2014 "),VB=a("a"),tco=o("TransfoXLTokenizer"),aco=o(" (Transformer-XL model)"),nco=l(),ys=a("li"),Dne=a("strong"),sco=o("visual_bert"),lco=o(" \u2014 "),XB=a("a"),ico=o("BertTokenizer"),dco=o(" or "),zB=a("a"),cco=o("BertTokenizerFast"),fco=o(" (VisualBERT model)"),mco=l(),ah=a("li"),Gne=a("strong"),gco=o("wav2vec2"),hco=o(" \u2014 "),WB=a("a"),pco=o("Wav2Vec2CTCTokenizer"),_co=o(" (Wav2Vec2 model)"),uco=l(),nh=a("li"),One=a("strong"),bco=o("wav2vec2-conformer"),vco=o(" \u2014 "),QB=a("a"),Fco=o("Wav2Vec2CTCTokenizer"),Tco=o(" (Wav2Vec2-Conformer model)"),Mco=l(),sh=a("li"),Vne=a("strong"),Eco=o("wav2vec2_phoneme"),Cco=o(" \u2014 "),HB=a("a"),wco=o("Wav2Vec2PhonemeCTCTokenizer"),Aco=o(" (Wav2Vec2Phoneme model)"),Lco=l(),xs=a("li"),Xne=a("strong"),yco=o("xglm"),xco=o(" \u2014 "),UB=a("a"),$co=o("XGLMTokenizer"),kco=o(" or "),JB=a("a"),Sco=o("XGLMTokenizerFast"),Rco=o(" (XGLM model)"),Pco=l(),lh=a("li"),zne=a("strong"),Bco=o("xlm"),Ico=o(" \u2014 "),YB=a("a"),Nco=o("XLMTokenizer"),qco=o(" (XLM model)"),jco=l(),ih=a("li"),Wne=a("strong"),Dco=o("xlm-prophetnet"),Gco=o(" \u2014 "),KB=a("a"),Oco=o("XLMProphetNetTokenizer"),Vco=o(" (XLM-ProphetNet model)"),Xco=l(),$s=a("li"),Qne=a("strong"),zco=o("xlm-roberta"),Wco=o(" \u2014 "),ZB=a("a"),Qco=o("XLMRobertaTokenizer"),Hco=o(" or "),eI=a("a"),Uco=o("XLMRobertaTokenizerFast"),Jco=o(" (XLM-RoBERTa model)"),Yco=l(),ks=a("li"),Hne=a("strong"),Kco=o("xlm-roberta-xl"),Zco=o(" \u2014 "),oI=a("a"),efo=o("RobertaTokenizer"),ofo=o(" or "),rI=a("a"),rfo=o("RobertaTokenizerFast"),tfo=o(" (XLM-RoBERTa-XL model)"),afo=l(),Ss=a("li"),Une=a("strong"),nfo=o("xlnet"),sfo=o(" \u2014 "),tI=a("a"),lfo=o("XLNetTokenizer"),ifo=o(" or "),aI=a("a"),dfo=o("XLNetTokenizerFast"),cfo=o(" (XLNet model)"),ffo=l(),Rs=a("li"),Jne=a("strong"),mfo=o("yoso"),gfo=o(" \u2014 "),nI=a("a"),hfo=o("AlbertTokenizer"),pfo=o(" or "),sI=a("a"),_fo=o("AlbertTokenizerFast"),ufo=o(" (YOSO model)"),bfo=l(),F(dh.$$.fragment),vfo=l(),ch=a("div"),F(sA.$$.fragment),Ffo=l(),Yne=a("p"),Tfo=o("Register a new tokenizer in this mapping."),Pje=l(),Ei=a("h2"),fh=a("a"),Kne=a("span"),F(lA.$$.fragment),Mfo=l(),Zne=a("span"),Efo=o("AutoFeatureExtractor"),Bje=l(),Ao=a("div"),F(iA.$$.fragment),Cfo=l(),dA=a("p"),wfo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lI=a("a"),Afo=o("AutoFeatureExtractor.from_pretrained()"),Lfo=o(" class method."),yfo=l(),cA=a("p"),xfo=o("This class cannot be instantiated directly using "),ese=a("code"),$fo=o("__init__()"),kfo=o(" (throws an error)."),Sfo=l(),He=a("div"),F(fA.$$.fragment),Rfo=l(),ose=a("p"),Pfo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Bfo=l(),La=a("p"),Ifo=o("The feature extractor class to instantiate is selected based on the "),rse=a("code"),Nfo=o("model_type"),qfo=o(` property of the config object
(either passed as an argument or loaded from `),tse=a("code"),jfo=o("pretrained_model_name_or_path"),Dfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ase=a("code"),Gfo=o("pretrained_model_name_or_path"),Ofo=o(":"),Vfo=l(),Y=a("ul"),mh=a("li"),nse=a("strong"),Xfo=o("beit"),zfo=o(" \u2014 "),iI=a("a"),Wfo=o("BeitFeatureExtractor"),Qfo=o(" (BEiT model)"),Hfo=l(),gh=a("li"),sse=a("strong"),Ufo=o("clip"),Jfo=o(" \u2014 "),dI=a("a"),Yfo=o("CLIPFeatureExtractor"),Kfo=o(" (CLIP model)"),Zfo=l(),hh=a("li"),lse=a("strong"),emo=o("convnext"),omo=o(" \u2014 "),cI=a("a"),rmo=o("ConvNextFeatureExtractor"),tmo=o(" (ConvNeXT model)"),amo=l(),ph=a("li"),ise=a("strong"),nmo=o("cvt"),smo=o(" \u2014 "),fI=a("a"),lmo=o("ConvNextFeatureExtractor"),imo=o(" (CvT model)"),dmo=l(),_h=a("li"),dse=a("strong"),cmo=o("data2vec-audio"),fmo=o(" \u2014 "),mI=a("a"),mmo=o("Wav2Vec2FeatureExtractor"),gmo=o(" (Data2VecAudio model)"),hmo=l(),uh=a("li"),cse=a("strong"),pmo=o("data2vec-vision"),_mo=o(" \u2014 "),gI=a("a"),umo=o("BeitFeatureExtractor"),bmo=o(" (Data2VecVision model)"),vmo=l(),bh=a("li"),fse=a("strong"),Fmo=o("deit"),Tmo=o(" \u2014 "),hI=a("a"),Mmo=o("DeiTFeatureExtractor"),Emo=o(" (DeiT model)"),Cmo=l(),vh=a("li"),mse=a("strong"),wmo=o("detr"),Amo=o(" \u2014 "),pI=a("a"),Lmo=o("DetrFeatureExtractor"),ymo=o(" (DETR model)"),xmo=l(),Fh=a("li"),gse=a("strong"),$mo=o("dpt"),kmo=o(" \u2014 "),_I=a("a"),Smo=o("DPTFeatureExtractor"),Rmo=o(" (DPT model)"),Pmo=l(),Th=a("li"),hse=a("strong"),Bmo=o("flava"),Imo=o(" \u2014 "),uI=a("a"),Nmo=o("FlavaFeatureExtractor"),qmo=o(" (FLAVA model)"),jmo=l(),Mh=a("li"),pse=a("strong"),Dmo=o("glpn"),Gmo=o(" \u2014 "),bI=a("a"),Omo=o("GLPNFeatureExtractor"),Vmo=o(" (GLPN model)"),Xmo=l(),Eh=a("li"),_se=a("strong"),zmo=o("hubert"),Wmo=o(" \u2014 "),vI=a("a"),Qmo=o("Wav2Vec2FeatureExtractor"),Hmo=o(" (Hubert model)"),Umo=l(),Ch=a("li"),use=a("strong"),Jmo=o("imagegpt"),Ymo=o(" \u2014 "),FI=a("a"),Kmo=o("ImageGPTFeatureExtractor"),Zmo=o(" (ImageGPT model)"),ego=l(),wh=a("li"),bse=a("strong"),ogo=o("layoutlmv2"),rgo=o(" \u2014 "),TI=a("a"),tgo=o("LayoutLMv2FeatureExtractor"),ago=o(" (LayoutLMv2 model)"),ngo=l(),Ah=a("li"),vse=a("strong"),sgo=o("layoutlmv3"),lgo=o(" \u2014 "),MI=a("a"),igo=o("LayoutLMv3FeatureExtractor"),dgo=o(" (LayoutLMv3 model)"),cgo=l(),Lh=a("li"),Fse=a("strong"),fgo=o("levit"),mgo=o(" \u2014 "),EI=a("a"),ggo=o("LevitFeatureExtractor"),hgo=o(" (LeViT model)"),pgo=l(),yh=a("li"),Tse=a("strong"),_go=o("maskformer"),ugo=o(" \u2014 "),CI=a("a"),bgo=o("MaskFormerFeatureExtractor"),vgo=o(" (MaskFormer model)"),Fgo=l(),xh=a("li"),Mse=a("strong"),Tgo=o("mctct"),Mgo=o(" \u2014 "),wI=a("a"),Ego=o("MCTCTFeatureExtractor"),Cgo=o(" (M-CTC-T model)"),wgo=l(),$h=a("li"),Ese=a("strong"),Ago=o("perceiver"),Lgo=o(" \u2014 "),AI=a("a"),ygo=o("PerceiverFeatureExtractor"),xgo=o(" (Perceiver model)"),$go=l(),kh=a("li"),Cse=a("strong"),kgo=o("poolformer"),Sgo=o(" \u2014 "),LI=a("a"),Rgo=o("PoolFormerFeatureExtractor"),Pgo=o(" (PoolFormer model)"),Bgo=l(),Sh=a("li"),wse=a("strong"),Igo=o("regnet"),Ngo=o(" \u2014 "),yI=a("a"),qgo=o("ConvNextFeatureExtractor"),jgo=o(" (RegNet model)"),Dgo=l(),Rh=a("li"),Ase=a("strong"),Ggo=o("resnet"),Ogo=o(" \u2014 "),xI=a("a"),Vgo=o("ConvNextFeatureExtractor"),Xgo=o(" (ResNet model)"),zgo=l(),Ph=a("li"),Lse=a("strong"),Wgo=o("segformer"),Qgo=o(" \u2014 "),$I=a("a"),Hgo=o("SegformerFeatureExtractor"),Ugo=o(" (SegFormer model)"),Jgo=l(),Bh=a("li"),yse=a("strong"),Ygo=o("speech_to_text"),Kgo=o(" \u2014 "),kI=a("a"),Zgo=o("Speech2TextFeatureExtractor"),eho=o(" (Speech2Text model)"),oho=l(),Ih=a("li"),xse=a("strong"),rho=o("swin"),tho=o(" \u2014 "),SI=a("a"),aho=o("ViTFeatureExtractor"),nho=o(" (Swin Transformer model)"),sho=l(),Nh=a("li"),$se=a("strong"),lho=o("van"),iho=o(" \u2014 "),RI=a("a"),dho=o("ConvNextFeatureExtractor"),cho=o(" (VAN model)"),fho=l(),qh=a("li"),kse=a("strong"),mho=o("vit"),gho=o(" \u2014 "),PI=a("a"),hho=o("ViTFeatureExtractor"),pho=o(" (ViT model)"),_ho=l(),jh=a("li"),Sse=a("strong"),uho=o("vit_mae"),bho=o(" \u2014 "),BI=a("a"),vho=o("ViTFeatureExtractor"),Fho=o(" (ViTMAE model)"),Tho=l(),Dh=a("li"),Rse=a("strong"),Mho=o("wav2vec2"),Eho=o(" \u2014 "),II=a("a"),Cho=o("Wav2Vec2FeatureExtractor"),who=o(" (Wav2Vec2 model)"),Aho=l(),Gh=a("li"),Pse=a("strong"),Lho=o("wav2vec2-conformer"),yho=o(" \u2014 "),NI=a("a"),xho=o("Wav2Vec2FeatureExtractor"),$ho=o(" (Wav2Vec2-Conformer model)"),kho=l(),Oh=a("li"),Bse=a("strong"),Sho=o("yolos"),Rho=o(" \u2014 "),qI=a("a"),Pho=o("YolosFeatureExtractor"),Bho=o(" (YOLOS model)"),Iho=l(),F(Vh.$$.fragment),Nho=l(),F(Xh.$$.fragment),qho=l(),zh=a("div"),F(mA.$$.fragment),jho=l(),Ise=a("p"),Dho=o("Register a new feature extractor for this class."),Ije=l(),Ci=a("h2"),Wh=a("a"),Nse=a("span"),F(gA.$$.fragment),Gho=l(),qse=a("span"),Oho=o("AutoProcessor"),Nje=l(),Lo=a("div"),F(hA.$$.fragment),Vho=l(),pA=a("p"),Xho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jI=a("a"),zho=o("AutoProcessor.from_pretrained()"),Who=o(" class method."),Qho=l(),_A=a("p"),Hho=o("This class cannot be instantiated directly using "),jse=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),Ue=a("div"),F(uA.$$.fragment),Kho=l(),Dse=a("p"),Zho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),epo=l(),wi=a("p"),opo=o("The processor class to instantiate is selected based on the "),Gse=a("code"),rpo=o("model_type"),tpo=o(` property of the config object (either
passed as an argument or loaded from `),Ose=a("code"),apo=o("pretrained_model_name_or_path"),npo=o(" if possible):"),spo=l(),he=a("ul"),Qh=a("li"),Vse=a("strong"),lpo=o("clip"),ipo=o(" \u2014 "),DI=a("a"),dpo=o("CLIPProcessor"),cpo=o(" (CLIP model)"),fpo=l(),Hh=a("li"),Xse=a("strong"),mpo=o("flava"),gpo=o(" \u2014 "),zse=a("code"),hpo=o("FLAVAProcessor"),ppo=o(" (FLAVA model)"),_po=l(),Uh=a("li"),Wse=a("strong"),upo=o("layoutlmv2"),bpo=o(" \u2014 "),GI=a("a"),vpo=o("LayoutLMv2Processor"),Fpo=o(" (LayoutLMv2 model)"),Tpo=l(),Jh=a("li"),Qse=a("strong"),Mpo=o("layoutlmv3"),Epo=o(" \u2014 "),OI=a("a"),Cpo=o("LayoutLMv3Processor"),wpo=o(" (LayoutLMv3 model)"),Apo=l(),Yh=a("li"),Hse=a("strong"),Lpo=o("layoutxlm"),ypo=o(" \u2014 "),VI=a("a"),xpo=o("LayoutXLMProcessor"),$po=o(" (LayoutXLM model)"),kpo=l(),Kh=a("li"),Use=a("strong"),Spo=o("sew"),Rpo=o(" \u2014 "),XI=a("a"),Ppo=o("Wav2Vec2Processor"),Bpo=o(" (SEW model)"),Ipo=l(),Zh=a("li"),Jse=a("strong"),Npo=o("sew-d"),qpo=o(" \u2014 "),zI=a("a"),jpo=o("Wav2Vec2Processor"),Dpo=o(" (SEW-D model)"),Gpo=l(),ep=a("li"),Yse=a("strong"),Opo=o("speech_to_text"),Vpo=o(" \u2014 "),WI=a("a"),Xpo=o("Speech2TextProcessor"),zpo=o(" (Speech2Text model)"),Wpo=l(),op=a("li"),Kse=a("strong"),Qpo=o("speech_to_text_2"),Hpo=o(" \u2014 "),QI=a("a"),Upo=o("Speech2Text2Processor"),Jpo=o(" (Speech2Text2 model)"),Ypo=l(),rp=a("li"),Zse=a("strong"),Kpo=o("trocr"),Zpo=o(" \u2014 "),HI=a("a"),e_o=o("TrOCRProcessor"),o_o=o(" (TrOCR model)"),r_o=l(),tp=a("li"),ele=a("strong"),t_o=o("unispeech"),a_o=o(" \u2014 "),UI=a("a"),n_o=o("Wav2Vec2Processor"),s_o=o(" (UniSpeech model)"),l_o=l(),ap=a("li"),ole=a("strong"),i_o=o("unispeech-sat"),d_o=o(" \u2014 "),JI=a("a"),c_o=o("Wav2Vec2Processor"),f_o=o(" (UniSpeechSat model)"),m_o=l(),np=a("li"),rle=a("strong"),g_o=o("vilt"),h_o=o(" \u2014 "),YI=a("a"),p_o=o("ViltProcessor"),__o=o(" (ViLT model)"),u_o=l(),sp=a("li"),tle=a("strong"),b_o=o("vision-text-dual-encoder"),v_o=o(" \u2014 "),KI=a("a"),F_o=o("VisionTextDualEncoderProcessor"),T_o=o(" (VisionTextDualEncoder model)"),M_o=l(),lp=a("li"),ale=a("strong"),E_o=o("wav2vec2"),C_o=o(" \u2014 "),ZI=a("a"),w_o=o("Wav2Vec2Processor"),A_o=o(" (Wav2Vec2 model)"),L_o=l(),ip=a("li"),nle=a("strong"),y_o=o("wav2vec2-conformer"),x_o=o(" \u2014 "),eN=a("a"),$_o=o("Wav2Vec2Processor"),k_o=o(" (Wav2Vec2-Conformer model)"),S_o=l(),dp=a("li"),sle=a("strong"),R_o=o("wavlm"),P_o=o(" \u2014 "),oN=a("a"),B_o=o("Wav2Vec2Processor"),I_o=o(" (WavLM model)"),N_o=l(),F(cp.$$.fragment),q_o=l(),F(fp.$$.fragment),j_o=l(),mp=a("div"),F(bA.$$.fragment),D_o=l(),lle=a("p"),G_o=o("Register a new processor for this class."),qje=l(),Ai=a("h2"),gp=a("a"),ile=a("span"),F(vA.$$.fragment),O_o=l(),dle=a("span"),V_o=o("AutoModel"),jje=l(),yo=a("div"),F(FA.$$.fragment),X_o=l(),Li=a("p"),z_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rN=a("a"),W_o=o("from_pretrained()"),Q_o=o(" class method or the "),tN=a("a"),H_o=o("from_config()"),U_o=o(` class
method.`),J_o=l(),TA=a("p"),Y_o=o("This class cannot be instantiated directly using "),cle=a("code"),K_o=o("__init__()"),Z_o=o(" (throws an error)."),euo=l(),tt=a("div"),F(MA.$$.fragment),ouo=l(),fle=a("p"),ruo=o("Instantiates one of the base model classes of the library from a configuration."),tuo=l(),yi=a("p"),auo=o(`Note:
Loading a model from its configuration file does `),mle=a("strong"),nuo=o("not"),suo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aN=a("a"),luo=o("from_pretrained()"),iuo=o(" to load the model weights."),duo=l(),F(hp.$$.fragment),cuo=l(),Je=a("div"),F(EA.$$.fragment),fuo=l(),gle=a("p"),muo=o("Instantiate one of the base model classes of the library from a pretrained model."),guo=l(),ya=a("p"),huo=o("The model class to instantiate is selected based on the "),hle=a("code"),puo=o("model_type"),_uo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),uuo=o("pretrained_model_name_or_path"),buo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),vuo=o("pretrained_model_name_or_path"),Fuo=o(":"),Tuo=l(),y=a("ul"),pp=a("li"),ule=a("strong"),Muo=o("albert"),Euo=o(" \u2014 "),nN=a("a"),Cuo=o("AlbertModel"),wuo=o(" (ALBERT model)"),Auo=l(),_p=a("li"),ble=a("strong"),Luo=o("bart"),yuo=o(" \u2014 "),sN=a("a"),xuo=o("BartModel"),$uo=o(" (BART model)"),kuo=l(),up=a("li"),vle=a("strong"),Suo=o("beit"),Ruo=o(" \u2014 "),lN=a("a"),Puo=o("BeitModel"),Buo=o(" (BEiT model)"),Iuo=l(),bp=a("li"),Fle=a("strong"),Nuo=o("bert"),quo=o(" \u2014 "),iN=a("a"),juo=o("BertModel"),Duo=o(" (BERT model)"),Guo=l(),vp=a("li"),Tle=a("strong"),Ouo=o("bert-generation"),Vuo=o(" \u2014 "),dN=a("a"),Xuo=o("BertGenerationEncoder"),zuo=o(" (Bert Generation model)"),Wuo=l(),Fp=a("li"),Mle=a("strong"),Quo=o("big_bird"),Huo=o(" \u2014 "),cN=a("a"),Uuo=o("BigBirdModel"),Juo=o(" (BigBird model)"),Yuo=l(),Tp=a("li"),Ele=a("strong"),Kuo=o("bigbird_pegasus"),Zuo=o(" \u2014 "),fN=a("a"),e1o=o("BigBirdPegasusModel"),o1o=o(" (BigBird-Pegasus model)"),r1o=l(),Mp=a("li"),Cle=a("strong"),t1o=o("blenderbot"),a1o=o(" \u2014 "),mN=a("a"),n1o=o("BlenderbotModel"),s1o=o(" (Blenderbot model)"),l1o=l(),Ep=a("li"),wle=a("strong"),i1o=o("blenderbot-small"),d1o=o(" \u2014 "),gN=a("a"),c1o=o("BlenderbotSmallModel"),f1o=o(" (BlenderbotSmall model)"),m1o=l(),Cp=a("li"),Ale=a("strong"),g1o=o("bloom"),h1o=o(" \u2014 "),hN=a("a"),p1o=o("BloomModel"),_1o=o(" (BLOOM model)"),u1o=l(),wp=a("li"),Lle=a("strong"),b1o=o("camembert"),v1o=o(" \u2014 "),pN=a("a"),F1o=o("CamembertModel"),T1o=o(" (CamemBERT model)"),M1o=l(),Ap=a("li"),yle=a("strong"),E1o=o("canine"),C1o=o(" \u2014 "),_N=a("a"),w1o=o("CanineModel"),A1o=o(" (CANINE model)"),L1o=l(),Lp=a("li"),xle=a("strong"),y1o=o("clip"),x1o=o(" \u2014 "),uN=a("a"),$1o=o("CLIPModel"),k1o=o(" (CLIP model)"),S1o=l(),yp=a("li"),$le=a("strong"),R1o=o("convbert"),P1o=o(" \u2014 "),bN=a("a"),B1o=o("ConvBertModel"),I1o=o(" (ConvBERT model)"),N1o=l(),xp=a("li"),kle=a("strong"),q1o=o("convnext"),j1o=o(" \u2014 "),vN=a("a"),D1o=o("ConvNextModel"),G1o=o(" (ConvNeXT model)"),O1o=l(),$p=a("li"),Sle=a("strong"),V1o=o("ctrl"),X1o=o(" \u2014 "),FN=a("a"),z1o=o("CTRLModel"),W1o=o(" (CTRL model)"),Q1o=l(),kp=a("li"),Rle=a("strong"),H1o=o("cvt"),U1o=o(" \u2014 "),TN=a("a"),J1o=o("CvtModel"),Y1o=o(" (CvT model)"),K1o=l(),Sp=a("li"),Ple=a("strong"),Z1o=o("data2vec-audio"),ebo=o(" \u2014 "),MN=a("a"),obo=o("Data2VecAudioModel"),rbo=o(" (Data2VecAudio model)"),tbo=l(),Rp=a("li"),Ble=a("strong"),abo=o("data2vec-text"),nbo=o(" \u2014 "),EN=a("a"),sbo=o("Data2VecTextModel"),lbo=o(" (Data2VecText model)"),ibo=l(),Pp=a("li"),Ile=a("strong"),dbo=o("data2vec-vision"),cbo=o(" \u2014 "),CN=a("a"),fbo=o("Data2VecVisionModel"),mbo=o(" (Data2VecVision model)"),gbo=l(),Bp=a("li"),Nle=a("strong"),hbo=o("deberta"),pbo=o(" \u2014 "),wN=a("a"),_bo=o("DebertaModel"),ubo=o(" (DeBERTa model)"),bbo=l(),Ip=a("li"),qle=a("strong"),vbo=o("deberta-v2"),Fbo=o(" \u2014 "),AN=a("a"),Tbo=o("DebertaV2Model"),Mbo=o(" (DeBERTa-v2 model)"),Ebo=l(),Np=a("li"),jle=a("strong"),Cbo=o("decision_transformer"),wbo=o(" \u2014 "),LN=a("a"),Abo=o("DecisionTransformerModel"),Lbo=o(" (Decision Transformer model)"),ybo=l(),qp=a("li"),Dle=a("strong"),xbo=o("deit"),$bo=o(" \u2014 "),yN=a("a"),kbo=o("DeiTModel"),Sbo=o(" (DeiT model)"),Rbo=l(),jp=a("li"),Gle=a("strong"),Pbo=o("detr"),Bbo=o(" \u2014 "),xN=a("a"),Ibo=o("DetrModel"),Nbo=o(" (DETR model)"),qbo=l(),Dp=a("li"),Ole=a("strong"),jbo=o("distilbert"),Dbo=o(" \u2014 "),$N=a("a"),Gbo=o("DistilBertModel"),Obo=o(" (DistilBERT model)"),Vbo=l(),Gp=a("li"),Vle=a("strong"),Xbo=o("dpr"),zbo=o(" \u2014 "),kN=a("a"),Wbo=o("DPRQuestionEncoder"),Qbo=o(" (DPR model)"),Hbo=l(),Op=a("li"),Xle=a("strong"),Ubo=o("dpt"),Jbo=o(" \u2014 "),SN=a("a"),Ybo=o("DPTModel"),Kbo=o(" (DPT model)"),Zbo=l(),Vp=a("li"),zle=a("strong"),e2o=o("electra"),o2o=o(" \u2014 "),RN=a("a"),r2o=o("ElectraModel"),t2o=o(" (ELECTRA model)"),a2o=l(),Xp=a("li"),Wle=a("strong"),n2o=o("flaubert"),s2o=o(" \u2014 "),PN=a("a"),l2o=o("FlaubertModel"),i2o=o(" (FlauBERT model)"),d2o=l(),zp=a("li"),Qle=a("strong"),c2o=o("flava"),f2o=o(" \u2014 "),BN=a("a"),m2o=o("FlavaModel"),g2o=o(" (FLAVA model)"),h2o=l(),Wp=a("li"),Hle=a("strong"),p2o=o("fnet"),_2o=o(" \u2014 "),IN=a("a"),u2o=o("FNetModel"),b2o=o(" (FNet model)"),v2o=l(),Qp=a("li"),Ule=a("strong"),F2o=o("fsmt"),T2o=o(" \u2014 "),NN=a("a"),M2o=o("FSMTModel"),E2o=o(" (FairSeq Machine-Translation model)"),C2o=l(),Ps=a("li"),Jle=a("strong"),w2o=o("funnel"),A2o=o(" \u2014 "),qN=a("a"),L2o=o("FunnelModel"),y2o=o(" or "),jN=a("a"),x2o=o("FunnelBaseModel"),$2o=o(" (Funnel Transformer model)"),k2o=l(),Hp=a("li"),Yle=a("strong"),S2o=o("glpn"),R2o=o(" \u2014 "),DN=a("a"),P2o=o("GLPNModel"),B2o=o(" (GLPN model)"),I2o=l(),Up=a("li"),Kle=a("strong"),N2o=o("gpt2"),q2o=o(" \u2014 "),GN=a("a"),j2o=o("GPT2Model"),D2o=o(" (OpenAI GPT-2 model)"),G2o=l(),Jp=a("li"),Zle=a("strong"),O2o=o("gpt_neo"),V2o=o(" \u2014 "),ON=a("a"),X2o=o("GPTNeoModel"),z2o=o(" (GPT Neo model)"),W2o=l(),Yp=a("li"),eie=a("strong"),Q2o=o("gpt_neox"),H2o=o(" \u2014 "),VN=a("a"),U2o=o("GPTNeoXModel"),J2o=o(" (GPT NeoX model)"),Y2o=l(),Kp=a("li"),oie=a("strong"),K2o=o("gptj"),Z2o=o(" \u2014 "),XN=a("a"),evo=o("GPTJModel"),ovo=o(" (GPT-J model)"),rvo=l(),Zp=a("li"),rie=a("strong"),tvo=o("hubert"),avo=o(" \u2014 "),zN=a("a"),nvo=o("HubertModel"),svo=o(" (Hubert model)"),lvo=l(),e_=a("li"),tie=a("strong"),ivo=o("ibert"),dvo=o(" \u2014 "),WN=a("a"),cvo=o("IBertModel"),fvo=o(" (I-BERT model)"),mvo=l(),o_=a("li"),aie=a("strong"),gvo=o("imagegpt"),hvo=o(" \u2014 "),QN=a("a"),pvo=o("ImageGPTModel"),_vo=o(" (ImageGPT model)"),uvo=l(),r_=a("li"),nie=a("strong"),bvo=o("layoutlm"),vvo=o(" \u2014 "),HN=a("a"),Fvo=o("LayoutLMModel"),Tvo=o(" (LayoutLM model)"),Mvo=l(),t_=a("li"),sie=a("strong"),Evo=o("layoutlmv2"),Cvo=o(" \u2014 "),UN=a("a"),wvo=o("LayoutLMv2Model"),Avo=o(" (LayoutLMv2 model)"),Lvo=l(),a_=a("li"),lie=a("strong"),yvo=o("layoutlmv3"),xvo=o(" \u2014 "),JN=a("a"),$vo=o("LayoutLMv3Model"),kvo=o(" (LayoutLMv3 model)"),Svo=l(),n_=a("li"),iie=a("strong"),Rvo=o("led"),Pvo=o(" \u2014 "),YN=a("a"),Bvo=o("LEDModel"),Ivo=o(" (LED model)"),Nvo=l(),s_=a("li"),die=a("strong"),qvo=o("levit"),jvo=o(" \u2014 "),KN=a("a"),Dvo=o("LevitModel"),Gvo=o(" (LeViT model)"),Ovo=l(),l_=a("li"),cie=a("strong"),Vvo=o("longformer"),Xvo=o(" \u2014 "),ZN=a("a"),zvo=o("LongformerModel"),Wvo=o(" (Longformer model)"),Qvo=l(),i_=a("li"),fie=a("strong"),Hvo=o("luke"),Uvo=o(" \u2014 "),eq=a("a"),Jvo=o("LukeModel"),Yvo=o(" (LUKE model)"),Kvo=l(),d_=a("li"),mie=a("strong"),Zvo=o("lxmert"),e3o=o(" \u2014 "),oq=a("a"),o3o=o("LxmertModel"),r3o=o(" (LXMERT model)"),t3o=l(),c_=a("li"),gie=a("strong"),a3o=o("m2m_100"),n3o=o(" \u2014 "),rq=a("a"),s3o=o("M2M100Model"),l3o=o(" (M2M100 model)"),i3o=l(),f_=a("li"),hie=a("strong"),d3o=o("marian"),c3o=o(" \u2014 "),tq=a("a"),f3o=o("MarianModel"),m3o=o(" (Marian model)"),g3o=l(),m_=a("li"),pie=a("strong"),h3o=o("maskformer"),p3o=o(" \u2014 "),aq=a("a"),_3o=o("MaskFormerModel"),u3o=o(" (MaskFormer model)"),b3o=l(),g_=a("li"),_ie=a("strong"),v3o=o("mbart"),F3o=o(" \u2014 "),nq=a("a"),T3o=o("MBartModel"),M3o=o(" (mBART model)"),E3o=l(),h_=a("li"),uie=a("strong"),C3o=o("mctct"),w3o=o(" \u2014 "),sq=a("a"),A3o=o("MCTCTModel"),L3o=o(" (M-CTC-T model)"),y3o=l(),p_=a("li"),bie=a("strong"),x3o=o("megatron-bert"),$3o=o(" \u2014 "),lq=a("a"),k3o=o("MegatronBertModel"),S3o=o(" (Megatron-BERT model)"),R3o=l(),__=a("li"),vie=a("strong"),P3o=o("mobilebert"),B3o=o(" \u2014 "),iq=a("a"),I3o=o("MobileBertModel"),N3o=o(" (MobileBERT model)"),q3o=l(),u_=a("li"),Fie=a("strong"),j3o=o("mpnet"),D3o=o(" \u2014 "),dq=a("a"),G3o=o("MPNetModel"),O3o=o(" (MPNet model)"),V3o=l(),b_=a("li"),Tie=a("strong"),X3o=o("mt5"),z3o=o(" \u2014 "),cq=a("a"),W3o=o("MT5Model"),Q3o=o(" (MT5 model)"),H3o=l(),v_=a("li"),Mie=a("strong"),U3o=o("nystromformer"),J3o=o(" \u2014 "),fq=a("a"),Y3o=o("NystromformerModel"),K3o=o(" (Nystr\xF6mformer model)"),Z3o=l(),F_=a("li"),Eie=a("strong"),eFo=o("openai-gpt"),oFo=o(" \u2014 "),mq=a("a"),rFo=o("OpenAIGPTModel"),tFo=o(" (OpenAI GPT model)"),aFo=l(),T_=a("li"),Cie=a("strong"),nFo=o("opt"),sFo=o(" \u2014 "),gq=a("a"),lFo=o("OPTModel"),iFo=o(" (OPT model)"),dFo=l(),M_=a("li"),wie=a("strong"),cFo=o("pegasus"),fFo=o(" \u2014 "),hq=a("a"),mFo=o("PegasusModel"),gFo=o(" (Pegasus model)"),hFo=l(),E_=a("li"),Aie=a("strong"),pFo=o("perceiver"),_Fo=o(" \u2014 "),pq=a("a"),uFo=o("PerceiverModel"),bFo=o(" (Perceiver model)"),vFo=l(),C_=a("li"),Lie=a("strong"),FFo=o("plbart"),TFo=o(" \u2014 "),_q=a("a"),MFo=o("PLBartModel"),EFo=o(" (PLBart model)"),CFo=l(),w_=a("li"),yie=a("strong"),wFo=o("poolformer"),AFo=o(" \u2014 "),uq=a("a"),LFo=o("PoolFormerModel"),yFo=o(" (PoolFormer model)"),xFo=l(),A_=a("li"),xie=a("strong"),$Fo=o("prophetnet"),kFo=o(" \u2014 "),bq=a("a"),SFo=o("ProphetNetModel"),RFo=o(" (ProphetNet model)"),PFo=l(),L_=a("li"),$ie=a("strong"),BFo=o("qdqbert"),IFo=o(" \u2014 "),vq=a("a"),NFo=o("QDQBertModel"),qFo=o(" (QDQBert model)"),jFo=l(),y_=a("li"),kie=a("strong"),DFo=o("reformer"),GFo=o(" \u2014 "),Fq=a("a"),OFo=o("ReformerModel"),VFo=o(" (Reformer model)"),XFo=l(),x_=a("li"),Sie=a("strong"),zFo=o("regnet"),WFo=o(" \u2014 "),Tq=a("a"),QFo=o("RegNetModel"),HFo=o(" (RegNet model)"),UFo=l(),$_=a("li"),Rie=a("strong"),JFo=o("rembert"),YFo=o(" \u2014 "),Mq=a("a"),KFo=o("RemBertModel"),ZFo=o(" (RemBERT model)"),e6o=l(),k_=a("li"),Pie=a("strong"),o6o=o("resnet"),r6o=o(" \u2014 "),Eq=a("a"),t6o=o("ResNetModel"),a6o=o(" (ResNet model)"),n6o=l(),S_=a("li"),Bie=a("strong"),s6o=o("retribert"),l6o=o(" \u2014 "),Cq=a("a"),i6o=o("RetriBertModel"),d6o=o(" (RetriBERT model)"),c6o=l(),R_=a("li"),Iie=a("strong"),f6o=o("roberta"),m6o=o(" \u2014 "),wq=a("a"),g6o=o("RobertaModel"),h6o=o(" (RoBERTa model)"),p6o=l(),P_=a("li"),Nie=a("strong"),_6o=o("roformer"),u6o=o(" \u2014 "),Aq=a("a"),b6o=o("RoFormerModel"),v6o=o(" (RoFormer model)"),F6o=l(),B_=a("li"),qie=a("strong"),T6o=o("segformer"),M6o=o(" \u2014 "),Lq=a("a"),E6o=o("SegformerModel"),C6o=o(" (SegFormer model)"),w6o=l(),I_=a("li"),jie=a("strong"),A6o=o("sew"),L6o=o(" \u2014 "),yq=a("a"),y6o=o("SEWModel"),x6o=o(" (SEW model)"),$6o=l(),N_=a("li"),Die=a("strong"),k6o=o("sew-d"),S6o=o(" \u2014 "),xq=a("a"),R6o=o("SEWDModel"),P6o=o(" (SEW-D model)"),B6o=l(),q_=a("li"),Gie=a("strong"),I6o=o("speech_to_text"),N6o=o(" \u2014 "),$q=a("a"),q6o=o("Speech2TextModel"),j6o=o(" (Speech2Text model)"),D6o=l(),j_=a("li"),Oie=a("strong"),G6o=o("splinter"),O6o=o(" \u2014 "),kq=a("a"),V6o=o("SplinterModel"),X6o=o(" (Splinter model)"),z6o=l(),D_=a("li"),Vie=a("strong"),W6o=o("squeezebert"),Q6o=o(" \u2014 "),Sq=a("a"),H6o=o("SqueezeBertModel"),U6o=o(" (SqueezeBERT model)"),J6o=l(),G_=a("li"),Xie=a("strong"),Y6o=o("swin"),K6o=o(" \u2014 "),Rq=a("a"),Z6o=o("SwinModel"),eTo=o(" (Swin Transformer model)"),oTo=l(),O_=a("li"),zie=a("strong"),rTo=o("t5"),tTo=o(" \u2014 "),Pq=a("a"),aTo=o("T5Model"),nTo=o(" (T5 model)"),sTo=l(),V_=a("li"),Wie=a("strong"),lTo=o("tapas"),iTo=o(" \u2014 "),Bq=a("a"),dTo=o("TapasModel"),cTo=o(" (TAPAS model)"),fTo=l(),X_=a("li"),Qie=a("strong"),mTo=o("trajectory_transformer"),gTo=o(" \u2014 "),Iq=a("a"),hTo=o("TrajectoryTransformerModel"),pTo=o(" (Trajectory Transformer model)"),_To=l(),z_=a("li"),Hie=a("strong"),uTo=o("transfo-xl"),bTo=o(" \u2014 "),Nq=a("a"),vTo=o("TransfoXLModel"),FTo=o(" (Transformer-XL model)"),TTo=l(),W_=a("li"),Uie=a("strong"),MTo=o("unispeech"),ETo=o(" \u2014 "),qq=a("a"),CTo=o("UniSpeechModel"),wTo=o(" (UniSpeech model)"),ATo=l(),Q_=a("li"),Jie=a("strong"),LTo=o("unispeech-sat"),yTo=o(" \u2014 "),jq=a("a"),xTo=o("UniSpeechSatModel"),$To=o(" (UniSpeechSat model)"),kTo=l(),H_=a("li"),Yie=a("strong"),STo=o("van"),RTo=o(" \u2014 "),Dq=a("a"),PTo=o("VanModel"),BTo=o(" (VAN model)"),ITo=l(),U_=a("li"),Kie=a("strong"),NTo=o("vilt"),qTo=o(" \u2014 "),Gq=a("a"),jTo=o("ViltModel"),DTo=o(" (ViLT model)"),GTo=l(),J_=a("li"),Zie=a("strong"),OTo=o("vision-text-dual-encoder"),VTo=o(" \u2014 "),Oq=a("a"),XTo=o("VisionTextDualEncoderModel"),zTo=o(" (VisionTextDualEncoder model)"),WTo=l(),Y_=a("li"),ede=a("strong"),QTo=o("visual_bert"),HTo=o(" \u2014 "),Vq=a("a"),UTo=o("VisualBertModel"),JTo=o(" (VisualBERT model)"),YTo=l(),K_=a("li"),ode=a("strong"),KTo=o("vit"),ZTo=o(" \u2014 "),Xq=a("a"),e7o=o("ViTModel"),o7o=o(" (ViT model)"),r7o=l(),Z_=a("li"),rde=a("strong"),t7o=o("vit_mae"),a7o=o(" \u2014 "),zq=a("a"),n7o=o("ViTMAEModel"),s7o=o(" (ViTMAE model)"),l7o=l(),eu=a("li"),tde=a("strong"),i7o=o("wav2vec2"),d7o=o(" \u2014 "),Wq=a("a"),c7o=o("Wav2Vec2Model"),f7o=o(" (Wav2Vec2 model)"),m7o=l(),ou=a("li"),ade=a("strong"),g7o=o("wav2vec2-conformer"),h7o=o(" \u2014 "),Qq=a("a"),p7o=o("Wav2Vec2ConformerModel"),_7o=o(" (Wav2Vec2-Conformer model)"),u7o=l(),ru=a("li"),nde=a("strong"),b7o=o("wavlm"),v7o=o(" \u2014 "),Hq=a("a"),F7o=o("WavLMModel"),T7o=o(" (WavLM model)"),M7o=l(),tu=a("li"),sde=a("strong"),E7o=o("xglm"),C7o=o(" \u2014 "),Uq=a("a"),w7o=o("XGLMModel"),A7o=o(" (XGLM model)"),L7o=l(),au=a("li"),lde=a("strong"),y7o=o("xlm"),x7o=o(" \u2014 "),Jq=a("a"),$7o=o("XLMModel"),k7o=o(" (XLM model)"),S7o=l(),nu=a("li"),ide=a("strong"),R7o=o("xlm-prophetnet"),P7o=o(" \u2014 "),Yq=a("a"),B7o=o("XLMProphetNetModel"),I7o=o(" (XLM-ProphetNet model)"),N7o=l(),su=a("li"),dde=a("strong"),q7o=o("xlm-roberta"),j7o=o(" \u2014 "),Kq=a("a"),D7o=o("XLMRobertaModel"),G7o=o(" (XLM-RoBERTa model)"),O7o=l(),lu=a("li"),cde=a("strong"),V7o=o("xlm-roberta-xl"),X7o=o(" \u2014 "),Zq=a("a"),z7o=o("XLMRobertaXLModel"),W7o=o(" (XLM-RoBERTa-XL model)"),Q7o=l(),iu=a("li"),fde=a("strong"),H7o=o("xlnet"),U7o=o(" \u2014 "),ej=a("a"),J7o=o("XLNetModel"),Y7o=o(" (XLNet model)"),K7o=l(),du=a("li"),mde=a("strong"),Z7o=o("yolos"),e9o=o(" \u2014 "),oj=a("a"),o9o=o("YolosModel"),r9o=o(" (YOLOS model)"),t9o=l(),cu=a("li"),gde=a("strong"),a9o=o("yoso"),n9o=o(" \u2014 "),rj=a("a"),s9o=o("YosoModel"),l9o=o(" (YOSO model)"),i9o=l(),fu=a("p"),d9o=o("The model is set in evaluation mode by default using "),hde=a("code"),c9o=o("model.eval()"),f9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=a("code"),m9o=o("model.train()"),g9o=l(),F(mu.$$.fragment),Dje=l(),xi=a("h2"),gu=a("a"),_de=a("span"),F(CA.$$.fragment),h9o=l(),ude=a("span"),p9o=o("AutoModelForPreTraining"),Gje=l(),xo=a("div"),F(wA.$$.fragment),_9o=l(),$i=a("p"),u9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tj=a("a"),b9o=o("from_pretrained()"),v9o=o(" class method or the "),aj=a("a"),F9o=o("from_config()"),T9o=o(` class
method.`),M9o=l(),AA=a("p"),E9o=o("This class cannot be instantiated directly using "),bde=a("code"),C9o=o("__init__()"),w9o=o(" (throws an error)."),A9o=l(),at=a("div"),F(LA.$$.fragment),L9o=l(),vde=a("p"),y9o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),x9o=l(),ki=a("p"),$9o=o(`Note:
Loading a model from its configuration file does `),Fde=a("strong"),k9o=o("not"),S9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),R9o=o("from_pretrained()"),P9o=o(" to load the model weights."),B9o=l(),F(hu.$$.fragment),I9o=l(),Ye=a("div"),F(yA.$$.fragment),N9o=l(),Tde=a("p"),q9o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),j9o=l(),xa=a("p"),D9o=o("The model class to instantiate is selected based on the "),Mde=a("code"),G9o=o("model_type"),O9o=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),V9o=o("pretrained_model_name_or_path"),X9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),z9o=o("pretrained_model_name_or_path"),W9o=o(":"),Q9o=l(),G=a("ul"),pu=a("li"),wde=a("strong"),H9o=o("albert"),U9o=o(" \u2014 "),sj=a("a"),J9o=o("AlbertForPreTraining"),Y9o=o(" (ALBERT model)"),K9o=l(),_u=a("li"),Ade=a("strong"),Z9o=o("bart"),eMo=o(" \u2014 "),lj=a("a"),oMo=o("BartForConditionalGeneration"),rMo=o(" (BART model)"),tMo=l(),uu=a("li"),Lde=a("strong"),aMo=o("bert"),nMo=o(" \u2014 "),ij=a("a"),sMo=o("BertForPreTraining"),lMo=o(" (BERT model)"),iMo=l(),bu=a("li"),yde=a("strong"),dMo=o("big_bird"),cMo=o(" \u2014 "),dj=a("a"),fMo=o("BigBirdForPreTraining"),mMo=o(" (BigBird model)"),gMo=l(),vu=a("li"),xde=a("strong"),hMo=o("bloom"),pMo=o(" \u2014 "),cj=a("a"),_Mo=o("BloomForCausalLM"),uMo=o(" (BLOOM model)"),bMo=l(),Fu=a("li"),$de=a("strong"),vMo=o("camembert"),FMo=o(" \u2014 "),fj=a("a"),TMo=o("CamembertForMaskedLM"),MMo=o(" (CamemBERT model)"),EMo=l(),Tu=a("li"),kde=a("strong"),CMo=o("ctrl"),wMo=o(" \u2014 "),mj=a("a"),AMo=o("CTRLLMHeadModel"),LMo=o(" (CTRL model)"),yMo=l(),Mu=a("li"),Sde=a("strong"),xMo=o("data2vec-text"),$Mo=o(" \u2014 "),gj=a("a"),kMo=o("Data2VecTextForMaskedLM"),SMo=o(" (Data2VecText model)"),RMo=l(),Eu=a("li"),Rde=a("strong"),PMo=o("deberta"),BMo=o(" \u2014 "),hj=a("a"),IMo=o("DebertaForMaskedLM"),NMo=o(" (DeBERTa model)"),qMo=l(),Cu=a("li"),Pde=a("strong"),jMo=o("deberta-v2"),DMo=o(" \u2014 "),pj=a("a"),GMo=o("DebertaV2ForMaskedLM"),OMo=o(" (DeBERTa-v2 model)"),VMo=l(),wu=a("li"),Bde=a("strong"),XMo=o("distilbert"),zMo=o(" \u2014 "),_j=a("a"),WMo=o("DistilBertForMaskedLM"),QMo=o(" (DistilBERT model)"),HMo=l(),Au=a("li"),Ide=a("strong"),UMo=o("electra"),JMo=o(" \u2014 "),uj=a("a"),YMo=o("ElectraForPreTraining"),KMo=o(" (ELECTRA model)"),ZMo=l(),Lu=a("li"),Nde=a("strong"),e4o=o("flaubert"),o4o=o(" \u2014 "),bj=a("a"),r4o=o("FlaubertWithLMHeadModel"),t4o=o(" (FlauBERT model)"),a4o=l(),yu=a("li"),qde=a("strong"),n4o=o("flava"),s4o=o(" \u2014 "),vj=a("a"),l4o=o("FlavaForPreTraining"),i4o=o(" (FLAVA model)"),d4o=l(),xu=a("li"),jde=a("strong"),c4o=o("fnet"),f4o=o(" \u2014 "),Fj=a("a"),m4o=o("FNetForPreTraining"),g4o=o(" (FNet model)"),h4o=l(),$u=a("li"),Dde=a("strong"),p4o=o("fsmt"),_4o=o(" \u2014 "),Tj=a("a"),u4o=o("FSMTForConditionalGeneration"),b4o=o(" (FairSeq Machine-Translation model)"),v4o=l(),ku=a("li"),Gde=a("strong"),F4o=o("funnel"),T4o=o(" \u2014 "),Mj=a("a"),M4o=o("FunnelForPreTraining"),E4o=o(" (Funnel Transformer model)"),C4o=l(),Su=a("li"),Ode=a("strong"),w4o=o("gpt2"),A4o=o(" \u2014 "),Ej=a("a"),L4o=o("GPT2LMHeadModel"),y4o=o(" (OpenAI GPT-2 model)"),x4o=l(),Ru=a("li"),Vde=a("strong"),$4o=o("ibert"),k4o=o(" \u2014 "),Cj=a("a"),S4o=o("IBertForMaskedLM"),R4o=o(" (I-BERT model)"),P4o=l(),Pu=a("li"),Xde=a("strong"),B4o=o("layoutlm"),I4o=o(" \u2014 "),wj=a("a"),N4o=o("LayoutLMForMaskedLM"),q4o=o(" (LayoutLM model)"),j4o=l(),Bu=a("li"),zde=a("strong"),D4o=o("longformer"),G4o=o(" \u2014 "),Aj=a("a"),O4o=o("LongformerForMaskedLM"),V4o=o(" (Longformer model)"),X4o=l(),Iu=a("li"),Wde=a("strong"),z4o=o("lxmert"),W4o=o(" \u2014 "),Lj=a("a"),Q4o=o("LxmertForPreTraining"),H4o=o(" (LXMERT model)"),U4o=l(),Nu=a("li"),Qde=a("strong"),J4o=o("megatron-bert"),Y4o=o(" \u2014 "),yj=a("a"),K4o=o("MegatronBertForPreTraining"),Z4o=o(" (Megatron-BERT model)"),eEo=l(),qu=a("li"),Hde=a("strong"),oEo=o("mobilebert"),rEo=o(" \u2014 "),xj=a("a"),tEo=o("MobileBertForPreTraining"),aEo=o(" (MobileBERT model)"),nEo=l(),ju=a("li"),Ude=a("strong"),sEo=o("mpnet"),lEo=o(" \u2014 "),$j=a("a"),iEo=o("MPNetForMaskedLM"),dEo=o(" (MPNet model)"),cEo=l(),Du=a("li"),Jde=a("strong"),fEo=o("openai-gpt"),mEo=o(" \u2014 "),kj=a("a"),gEo=o("OpenAIGPTLMHeadModel"),hEo=o(" (OpenAI GPT model)"),pEo=l(),Gu=a("li"),Yde=a("strong"),_Eo=o("retribert"),uEo=o(" \u2014 "),Sj=a("a"),bEo=o("RetriBertModel"),vEo=o(" (RetriBERT model)"),FEo=l(),Ou=a("li"),Kde=a("strong"),TEo=o("roberta"),MEo=o(" \u2014 "),Rj=a("a"),EEo=o("RobertaForMaskedLM"),CEo=o(" (RoBERTa model)"),wEo=l(),Vu=a("li"),Zde=a("strong"),AEo=o("splinter"),LEo=o(" \u2014 "),Pj=a("a"),yEo=o("SplinterForPreTraining"),xEo=o(" (Splinter model)"),$Eo=l(),Xu=a("li"),ece=a("strong"),kEo=o("squeezebert"),SEo=o(" \u2014 "),Bj=a("a"),REo=o("SqueezeBertForMaskedLM"),PEo=o(" (SqueezeBERT model)"),BEo=l(),zu=a("li"),oce=a("strong"),IEo=o("t5"),NEo=o(" \u2014 "),Ij=a("a"),qEo=o("T5ForConditionalGeneration"),jEo=o(" (T5 model)"),DEo=l(),Wu=a("li"),rce=a("strong"),GEo=o("tapas"),OEo=o(" \u2014 "),Nj=a("a"),VEo=o("TapasForMaskedLM"),XEo=o(" (TAPAS model)"),zEo=l(),Qu=a("li"),tce=a("strong"),WEo=o("transfo-xl"),QEo=o(" \u2014 "),qj=a("a"),HEo=o("TransfoXLLMHeadModel"),UEo=o(" (Transformer-XL model)"),JEo=l(),Hu=a("li"),ace=a("strong"),YEo=o("unispeech"),KEo=o(" \u2014 "),jj=a("a"),ZEo=o("UniSpeechForPreTraining"),eCo=o(" (UniSpeech model)"),oCo=l(),Uu=a("li"),nce=a("strong"),rCo=o("unispeech-sat"),tCo=o(" \u2014 "),Dj=a("a"),aCo=o("UniSpeechSatForPreTraining"),nCo=o(" (UniSpeechSat model)"),sCo=l(),Ju=a("li"),sce=a("strong"),lCo=o("visual_bert"),iCo=o(" \u2014 "),Gj=a("a"),dCo=o("VisualBertForPreTraining"),cCo=o(" (VisualBERT model)"),fCo=l(),Yu=a("li"),lce=a("strong"),mCo=o("vit_mae"),gCo=o(" \u2014 "),Oj=a("a"),hCo=o("ViTMAEForPreTraining"),pCo=o(" (ViTMAE model)"),_Co=l(),Ku=a("li"),ice=a("strong"),uCo=o("wav2vec2"),bCo=o(" \u2014 "),Vj=a("a"),vCo=o("Wav2Vec2ForPreTraining"),FCo=o(" (Wav2Vec2 model)"),TCo=l(),Zu=a("li"),dce=a("strong"),MCo=o("wav2vec2-conformer"),ECo=o(" \u2014 "),Xj=a("a"),CCo=o("Wav2Vec2ConformerForPreTraining"),wCo=o(" (Wav2Vec2-Conformer model)"),ACo=l(),e1=a("li"),cce=a("strong"),LCo=o("xlm"),yCo=o(" \u2014 "),zj=a("a"),xCo=o("XLMWithLMHeadModel"),$Co=o(" (XLM model)"),kCo=l(),o1=a("li"),fce=a("strong"),SCo=o("xlm-roberta"),RCo=o(" \u2014 "),Wj=a("a"),PCo=o("XLMRobertaForMaskedLM"),BCo=o(" (XLM-RoBERTa model)"),ICo=l(),r1=a("li"),mce=a("strong"),NCo=o("xlm-roberta-xl"),qCo=o(" \u2014 "),Qj=a("a"),jCo=o("XLMRobertaXLForMaskedLM"),DCo=o(" (XLM-RoBERTa-XL model)"),GCo=l(),t1=a("li"),gce=a("strong"),OCo=o("xlnet"),VCo=o(" \u2014 "),Hj=a("a"),XCo=o("XLNetLMHeadModel"),zCo=o(" (XLNet model)"),WCo=l(),a1=a("p"),QCo=o("The model is set in evaluation mode by default using "),hce=a("code"),HCo=o("model.eval()"),UCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),JCo=o("model.train()"),YCo=l(),F(n1.$$.fragment),Oje=l(),Si=a("h2"),s1=a("a"),_ce=a("span"),F(xA.$$.fragment),KCo=l(),uce=a("span"),ZCo=o("AutoModelForCausalLM"),Vje=l(),$o=a("div"),F($A.$$.fragment),e5o=l(),Ri=a("p"),o5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uj=a("a"),r5o=o("from_pretrained()"),t5o=o(" class method or the "),Jj=a("a"),a5o=o("from_config()"),n5o=o(` class
method.`),s5o=l(),kA=a("p"),l5o=o("This class cannot be instantiated directly using "),bce=a("code"),i5o=o("__init__()"),d5o=o(" (throws an error)."),c5o=l(),nt=a("div"),F(SA.$$.fragment),f5o=l(),vce=a("p"),m5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g5o=l(),Pi=a("p"),h5o=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),p5o=o("not"),_5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=a("a"),u5o=o("from_pretrained()"),b5o=o(" to load the model weights."),v5o=l(),F(l1.$$.fragment),F5o=l(),Ke=a("div"),F(RA.$$.fragment),T5o=l(),Tce=a("p"),M5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),E5o=l(),$a=a("p"),C5o=o("The model class to instantiate is selected based on the "),Mce=a("code"),w5o=o("model_type"),A5o=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),L5o=o("pretrained_model_name_or_path"),y5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),x5o=o("pretrained_model_name_or_path"),$5o=o(":"),k5o=l(),z=a("ul"),i1=a("li"),wce=a("strong"),S5o=o("bart"),R5o=o(" \u2014 "),Kj=a("a"),P5o=o("BartForCausalLM"),B5o=o(" (BART model)"),I5o=l(),d1=a("li"),Ace=a("strong"),N5o=o("bert"),q5o=o(" \u2014 "),Zj=a("a"),j5o=o("BertLMHeadModel"),D5o=o(" (BERT model)"),G5o=l(),c1=a("li"),Lce=a("strong"),O5o=o("bert-generation"),V5o=o(" \u2014 "),eD=a("a"),X5o=o("BertGenerationDecoder"),z5o=o(" (Bert Generation model)"),W5o=l(),f1=a("li"),yce=a("strong"),Q5o=o("big_bird"),H5o=o(" \u2014 "),oD=a("a"),U5o=o("BigBirdForCausalLM"),J5o=o(" (BigBird model)"),Y5o=l(),m1=a("li"),xce=a("strong"),K5o=o("bigbird_pegasus"),Z5o=o(" \u2014 "),rD=a("a"),e0o=o("BigBirdPegasusForCausalLM"),o0o=o(" (BigBird-Pegasus model)"),r0o=l(),g1=a("li"),$ce=a("strong"),t0o=o("blenderbot"),a0o=o(" \u2014 "),tD=a("a"),n0o=o("BlenderbotForCausalLM"),s0o=o(" (Blenderbot model)"),l0o=l(),h1=a("li"),kce=a("strong"),i0o=o("blenderbot-small"),d0o=o(" \u2014 "),aD=a("a"),c0o=o("BlenderbotSmallForCausalLM"),f0o=o(" (BlenderbotSmall model)"),m0o=l(),p1=a("li"),Sce=a("strong"),g0o=o("bloom"),h0o=o(" \u2014 "),nD=a("a"),p0o=o("BloomForCausalLM"),_0o=o(" (BLOOM model)"),u0o=l(),_1=a("li"),Rce=a("strong"),b0o=o("camembert"),v0o=o(" \u2014 "),sD=a("a"),F0o=o("CamembertForCausalLM"),T0o=o(" (CamemBERT model)"),M0o=l(),u1=a("li"),Pce=a("strong"),E0o=o("ctrl"),C0o=o(" \u2014 "),lD=a("a"),w0o=o("CTRLLMHeadModel"),A0o=o(" (CTRL model)"),L0o=l(),b1=a("li"),Bce=a("strong"),y0o=o("data2vec-text"),x0o=o(" \u2014 "),iD=a("a"),$0o=o("Data2VecTextForCausalLM"),k0o=o(" (Data2VecText model)"),S0o=l(),v1=a("li"),Ice=a("strong"),R0o=o("electra"),P0o=o(" \u2014 "),dD=a("a"),B0o=o("ElectraForCausalLM"),I0o=o(" (ELECTRA model)"),N0o=l(),F1=a("li"),Nce=a("strong"),q0o=o("gpt2"),j0o=o(" \u2014 "),cD=a("a"),D0o=o("GPT2LMHeadModel"),G0o=o(" (OpenAI GPT-2 model)"),O0o=l(),T1=a("li"),qce=a("strong"),V0o=o("gpt_neo"),X0o=o(" \u2014 "),fD=a("a"),z0o=o("GPTNeoForCausalLM"),W0o=o(" (GPT Neo model)"),Q0o=l(),M1=a("li"),jce=a("strong"),H0o=o("gpt_neox"),U0o=o(" \u2014 "),mD=a("a"),J0o=o("GPTNeoXForCausalLM"),Y0o=o(" (GPT NeoX model)"),K0o=l(),E1=a("li"),Dce=a("strong"),Z0o=o("gptj"),ewo=o(" \u2014 "),gD=a("a"),owo=o("GPTJForCausalLM"),rwo=o(" (GPT-J model)"),two=l(),C1=a("li"),Gce=a("strong"),awo=o("marian"),nwo=o(" \u2014 "),hD=a("a"),swo=o("MarianForCausalLM"),lwo=o(" (Marian model)"),iwo=l(),w1=a("li"),Oce=a("strong"),dwo=o("mbart"),cwo=o(" \u2014 "),pD=a("a"),fwo=o("MBartForCausalLM"),mwo=o(" (mBART model)"),gwo=l(),A1=a("li"),Vce=a("strong"),hwo=o("megatron-bert"),pwo=o(" \u2014 "),_D=a("a"),_wo=o("MegatronBertForCausalLM"),uwo=o(" (Megatron-BERT model)"),bwo=l(),L1=a("li"),Xce=a("strong"),vwo=o("openai-gpt"),Fwo=o(" \u2014 "),uD=a("a"),Two=o("OpenAIGPTLMHeadModel"),Mwo=o(" (OpenAI GPT model)"),Ewo=l(),y1=a("li"),zce=a("strong"),Cwo=o("opt"),wwo=o(" \u2014 "),bD=a("a"),Awo=o("OPTForCausalLM"),Lwo=o(" (OPT model)"),ywo=l(),x1=a("li"),Wce=a("strong"),xwo=o("pegasus"),$wo=o(" \u2014 "),vD=a("a"),kwo=o("PegasusForCausalLM"),Swo=o(" (Pegasus model)"),Rwo=l(),$1=a("li"),Qce=a("strong"),Pwo=o("plbart"),Bwo=o(" \u2014 "),FD=a("a"),Iwo=o("PLBartForCausalLM"),Nwo=o(" (PLBart model)"),qwo=l(),k1=a("li"),Hce=a("strong"),jwo=o("prophetnet"),Dwo=o(" \u2014 "),TD=a("a"),Gwo=o("ProphetNetForCausalLM"),Owo=o(" (ProphetNet model)"),Vwo=l(),S1=a("li"),Uce=a("strong"),Xwo=o("qdqbert"),zwo=o(" \u2014 "),MD=a("a"),Wwo=o("QDQBertLMHeadModel"),Qwo=o(" (QDQBert model)"),Hwo=l(),R1=a("li"),Jce=a("strong"),Uwo=o("reformer"),Jwo=o(" \u2014 "),ED=a("a"),Ywo=o("ReformerModelWithLMHead"),Kwo=o(" (Reformer model)"),Zwo=l(),P1=a("li"),Yce=a("strong"),eAo=o("rembert"),oAo=o(" \u2014 "),CD=a("a"),rAo=o("RemBertForCausalLM"),tAo=o(" (RemBERT model)"),aAo=l(),B1=a("li"),Kce=a("strong"),nAo=o("roberta"),sAo=o(" \u2014 "),wD=a("a"),lAo=o("RobertaForCausalLM"),iAo=o(" (RoBERTa model)"),dAo=l(),I1=a("li"),Zce=a("strong"),cAo=o("roformer"),fAo=o(" \u2014 "),AD=a("a"),mAo=o("RoFormerForCausalLM"),gAo=o(" (RoFormer model)"),hAo=l(),N1=a("li"),efe=a("strong"),pAo=o("speech_to_text_2"),_Ao=o(" \u2014 "),LD=a("a"),uAo=o("Speech2Text2ForCausalLM"),bAo=o(" (Speech2Text2 model)"),vAo=l(),q1=a("li"),ofe=a("strong"),FAo=o("transfo-xl"),TAo=o(" \u2014 "),yD=a("a"),MAo=o("TransfoXLLMHeadModel"),EAo=o(" (Transformer-XL model)"),CAo=l(),j1=a("li"),rfe=a("strong"),wAo=o("trocr"),AAo=o(" \u2014 "),xD=a("a"),LAo=o("TrOCRForCausalLM"),yAo=o(" (TrOCR model)"),xAo=l(),D1=a("li"),tfe=a("strong"),$Ao=o("xglm"),kAo=o(" \u2014 "),$D=a("a"),SAo=o("XGLMForCausalLM"),RAo=o(" (XGLM model)"),PAo=l(),G1=a("li"),afe=a("strong"),BAo=o("xlm"),IAo=o(" \u2014 "),kD=a("a"),NAo=o("XLMWithLMHeadModel"),qAo=o(" (XLM model)"),jAo=l(),O1=a("li"),nfe=a("strong"),DAo=o("xlm-prophetnet"),GAo=o(" \u2014 "),SD=a("a"),OAo=o("XLMProphetNetForCausalLM"),VAo=o(" (XLM-ProphetNet model)"),XAo=l(),V1=a("li"),sfe=a("strong"),zAo=o("xlm-roberta"),WAo=o(" \u2014 "),RD=a("a"),QAo=o("XLMRobertaForCausalLM"),HAo=o(" (XLM-RoBERTa model)"),UAo=l(),X1=a("li"),lfe=a("strong"),JAo=o("xlm-roberta-xl"),YAo=o(" \u2014 "),PD=a("a"),KAo=o("XLMRobertaXLForCausalLM"),ZAo=o(" (XLM-RoBERTa-XL model)"),eLo=l(),z1=a("li"),ife=a("strong"),oLo=o("xlnet"),rLo=o(" \u2014 "),BD=a("a"),tLo=o("XLNetLMHeadModel"),aLo=o(" (XLNet model)"),nLo=l(),W1=a("p"),sLo=o("The model is set in evaluation mode by default using "),dfe=a("code"),lLo=o("model.eval()"),iLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=a("code"),dLo=o("model.train()"),cLo=l(),F(Q1.$$.fragment),Xje=l(),Bi=a("h2"),H1=a("a"),ffe=a("span"),F(PA.$$.fragment),fLo=l(),mfe=a("span"),mLo=o("AutoModelForMaskedLM"),zje=l(),ko=a("div"),F(BA.$$.fragment),gLo=l(),Ii=a("p"),hLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ID=a("a"),pLo=o("from_pretrained()"),_Lo=o(" class method or the "),ND=a("a"),uLo=o("from_config()"),bLo=o(` class
method.`),vLo=l(),IA=a("p"),FLo=o("This class cannot be instantiated directly using "),gfe=a("code"),TLo=o("__init__()"),MLo=o(" (throws an error)."),ELo=l(),st=a("div"),F(NA.$$.fragment),CLo=l(),hfe=a("p"),wLo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ALo=l(),Ni=a("p"),LLo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),yLo=o("not"),xLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),$Lo=o("from_pretrained()"),kLo=o(" to load the model weights."),SLo=l(),F(U1.$$.fragment),RLo=l(),Ze=a("div"),F(qA.$$.fragment),PLo=l(),_fe=a("p"),BLo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ILo=l(),ka=a("p"),NLo=o("The model class to instantiate is selected based on the "),ufe=a("code"),qLo=o("model_type"),jLo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),DLo=o("pretrained_model_name_or_path"),GLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),OLo=o("pretrained_model_name_or_path"),VLo=o(":"),XLo=l(),Q=a("ul"),J1=a("li"),Ffe=a("strong"),zLo=o("albert"),WLo=o(" \u2014 "),jD=a("a"),QLo=o("AlbertForMaskedLM"),HLo=o(" (ALBERT model)"),ULo=l(),Y1=a("li"),Tfe=a("strong"),JLo=o("bart"),YLo=o(" \u2014 "),DD=a("a"),KLo=o("BartForConditionalGeneration"),ZLo=o(" (BART model)"),eyo=l(),K1=a("li"),Mfe=a("strong"),oyo=o("bert"),ryo=o(" \u2014 "),GD=a("a"),tyo=o("BertForMaskedLM"),ayo=o(" (BERT model)"),nyo=l(),Z1=a("li"),Efe=a("strong"),syo=o("big_bird"),lyo=o(" \u2014 "),OD=a("a"),iyo=o("BigBirdForMaskedLM"),dyo=o(" (BigBird model)"),cyo=l(),eb=a("li"),Cfe=a("strong"),fyo=o("camembert"),myo=o(" \u2014 "),VD=a("a"),gyo=o("CamembertForMaskedLM"),hyo=o(" (CamemBERT model)"),pyo=l(),ob=a("li"),wfe=a("strong"),_yo=o("convbert"),uyo=o(" \u2014 "),XD=a("a"),byo=o("ConvBertForMaskedLM"),vyo=o(" (ConvBERT model)"),Fyo=l(),rb=a("li"),Afe=a("strong"),Tyo=o("data2vec-text"),Myo=o(" \u2014 "),zD=a("a"),Eyo=o("Data2VecTextForMaskedLM"),Cyo=o(" (Data2VecText model)"),wyo=l(),tb=a("li"),Lfe=a("strong"),Ayo=o("deberta"),Lyo=o(" \u2014 "),WD=a("a"),yyo=o("DebertaForMaskedLM"),xyo=o(" (DeBERTa model)"),$yo=l(),ab=a("li"),yfe=a("strong"),kyo=o("deberta-v2"),Syo=o(" \u2014 "),QD=a("a"),Ryo=o("DebertaV2ForMaskedLM"),Pyo=o(" (DeBERTa-v2 model)"),Byo=l(),nb=a("li"),xfe=a("strong"),Iyo=o("distilbert"),Nyo=o(" \u2014 "),HD=a("a"),qyo=o("DistilBertForMaskedLM"),jyo=o(" (DistilBERT model)"),Dyo=l(),sb=a("li"),$fe=a("strong"),Gyo=o("electra"),Oyo=o(" \u2014 "),UD=a("a"),Vyo=o("ElectraForMaskedLM"),Xyo=o(" (ELECTRA model)"),zyo=l(),lb=a("li"),kfe=a("strong"),Wyo=o("flaubert"),Qyo=o(" \u2014 "),JD=a("a"),Hyo=o("FlaubertWithLMHeadModel"),Uyo=o(" (FlauBERT model)"),Jyo=l(),ib=a("li"),Sfe=a("strong"),Yyo=o("fnet"),Kyo=o(" \u2014 "),YD=a("a"),Zyo=o("FNetForMaskedLM"),e8o=o(" (FNet model)"),o8o=l(),db=a("li"),Rfe=a("strong"),r8o=o("funnel"),t8o=o(" \u2014 "),KD=a("a"),a8o=o("FunnelForMaskedLM"),n8o=o(" (Funnel Transformer model)"),s8o=l(),cb=a("li"),Pfe=a("strong"),l8o=o("ibert"),i8o=o(" \u2014 "),ZD=a("a"),d8o=o("IBertForMaskedLM"),c8o=o(" (I-BERT model)"),f8o=l(),fb=a("li"),Bfe=a("strong"),m8o=o("layoutlm"),g8o=o(" \u2014 "),eG=a("a"),h8o=o("LayoutLMForMaskedLM"),p8o=o(" (LayoutLM model)"),_8o=l(),mb=a("li"),Ife=a("strong"),u8o=o("longformer"),b8o=o(" \u2014 "),oG=a("a"),v8o=o("LongformerForMaskedLM"),F8o=o(" (Longformer model)"),T8o=l(),gb=a("li"),Nfe=a("strong"),M8o=o("luke"),E8o=o(" \u2014 "),rG=a("a"),C8o=o("LukeForMaskedLM"),w8o=o(" (LUKE model)"),A8o=l(),hb=a("li"),qfe=a("strong"),L8o=o("mbart"),y8o=o(" \u2014 "),tG=a("a"),x8o=o("MBartForConditionalGeneration"),$8o=o(" (mBART model)"),k8o=l(),pb=a("li"),jfe=a("strong"),S8o=o("megatron-bert"),R8o=o(" \u2014 "),aG=a("a"),P8o=o("MegatronBertForMaskedLM"),B8o=o(" (Megatron-BERT model)"),I8o=l(),_b=a("li"),Dfe=a("strong"),N8o=o("mobilebert"),q8o=o(" \u2014 "),nG=a("a"),j8o=o("MobileBertForMaskedLM"),D8o=o(" (MobileBERT model)"),G8o=l(),ub=a("li"),Gfe=a("strong"),O8o=o("mpnet"),V8o=o(" \u2014 "),sG=a("a"),X8o=o("MPNetForMaskedLM"),z8o=o(" (MPNet model)"),W8o=l(),bb=a("li"),Ofe=a("strong"),Q8o=o("nystromformer"),H8o=o(" \u2014 "),lG=a("a"),U8o=o("NystromformerForMaskedLM"),J8o=o(" (Nystr\xF6mformer model)"),Y8o=l(),vb=a("li"),Vfe=a("strong"),K8o=o("perceiver"),Z8o=o(" \u2014 "),iG=a("a"),exo=o("PerceiverForMaskedLM"),oxo=o(" (Perceiver model)"),rxo=l(),Fb=a("li"),Xfe=a("strong"),txo=o("qdqbert"),axo=o(" \u2014 "),dG=a("a"),nxo=o("QDQBertForMaskedLM"),sxo=o(" (QDQBert model)"),lxo=l(),Tb=a("li"),zfe=a("strong"),ixo=o("reformer"),dxo=o(" \u2014 "),cG=a("a"),cxo=o("ReformerForMaskedLM"),fxo=o(" (Reformer model)"),mxo=l(),Mb=a("li"),Wfe=a("strong"),gxo=o("rembert"),hxo=o(" \u2014 "),fG=a("a"),pxo=o("RemBertForMaskedLM"),_xo=o(" (RemBERT model)"),uxo=l(),Eb=a("li"),Qfe=a("strong"),bxo=o("roberta"),vxo=o(" \u2014 "),mG=a("a"),Fxo=o("RobertaForMaskedLM"),Txo=o(" (RoBERTa model)"),Mxo=l(),Cb=a("li"),Hfe=a("strong"),Exo=o("roformer"),Cxo=o(" \u2014 "),gG=a("a"),wxo=o("RoFormerForMaskedLM"),Axo=o(" (RoFormer model)"),Lxo=l(),wb=a("li"),Ufe=a("strong"),yxo=o("squeezebert"),xxo=o(" \u2014 "),hG=a("a"),$xo=o("SqueezeBertForMaskedLM"),kxo=o(" (SqueezeBERT model)"),Sxo=l(),Ab=a("li"),Jfe=a("strong"),Rxo=o("tapas"),Pxo=o(" \u2014 "),pG=a("a"),Bxo=o("TapasForMaskedLM"),Ixo=o(" (TAPAS model)"),Nxo=l(),Lb=a("li"),Yfe=a("strong"),qxo=o("wav2vec2"),jxo=o(" \u2014 "),Kfe=a("code"),Dxo=o("Wav2Vec2ForMaskedLM"),Gxo=o(" (Wav2Vec2 model)"),Oxo=l(),yb=a("li"),Zfe=a("strong"),Vxo=o("xlm"),Xxo=o(" \u2014 "),_G=a("a"),zxo=o("XLMWithLMHeadModel"),Wxo=o(" (XLM model)"),Qxo=l(),xb=a("li"),eme=a("strong"),Hxo=o("xlm-roberta"),Uxo=o(" \u2014 "),uG=a("a"),Jxo=o("XLMRobertaForMaskedLM"),Yxo=o(" (XLM-RoBERTa model)"),Kxo=l(),$b=a("li"),ome=a("strong"),Zxo=o("xlm-roberta-xl"),e$o=o(" \u2014 "),bG=a("a"),o$o=o("XLMRobertaXLForMaskedLM"),r$o=o(" (XLM-RoBERTa-XL model)"),t$o=l(),kb=a("li"),rme=a("strong"),a$o=o("yoso"),n$o=o(" \u2014 "),vG=a("a"),s$o=o("YosoForMaskedLM"),l$o=o(" (YOSO model)"),i$o=l(),Sb=a("p"),d$o=o("The model is set in evaluation mode by default using "),tme=a("code"),c$o=o("model.eval()"),f$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),m$o=o("model.train()"),g$o=l(),F(Rb.$$.fragment),Wje=l(),qi=a("h2"),Pb=a("a"),nme=a("span"),F(jA.$$.fragment),h$o=l(),sme=a("span"),p$o=o("AutoModelForSeq2SeqLM"),Qje=l(),So=a("div"),F(DA.$$.fragment),_$o=l(),ji=a("p"),u$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FG=a("a"),b$o=o("from_pretrained()"),v$o=o(" class method or the "),TG=a("a"),F$o=o("from_config()"),T$o=o(` class
method.`),M$o=l(),GA=a("p"),E$o=o("This class cannot be instantiated directly using "),lme=a("code"),C$o=o("__init__()"),w$o=o(" (throws an error)."),A$o=l(),lt=a("div"),F(OA.$$.fragment),L$o=l(),ime=a("p"),y$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x$o=l(),Di=a("p"),$$o=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),k$o=o("not"),S$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),R$o=o("from_pretrained()"),P$o=o(" to load the model weights."),B$o=l(),F(Bb.$$.fragment),I$o=l(),eo=a("div"),F(VA.$$.fragment),N$o=l(),cme=a("p"),q$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j$o=l(),Sa=a("p"),D$o=o("The model class to instantiate is selected based on the "),fme=a("code"),G$o=o("model_type"),O$o=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),V$o=o("pretrained_model_name_or_path"),X$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),z$o=o("pretrained_model_name_or_path"),W$o=o(":"),Q$o=l(),_e=a("ul"),Ib=a("li"),hme=a("strong"),H$o=o("bart"),U$o=o(" \u2014 "),EG=a("a"),J$o=o("BartForConditionalGeneration"),Y$o=o(" (BART model)"),K$o=l(),Nb=a("li"),pme=a("strong"),Z$o=o("bigbird_pegasus"),eko=o(" \u2014 "),CG=a("a"),oko=o("BigBirdPegasusForConditionalGeneration"),rko=o(" (BigBird-Pegasus model)"),tko=l(),qb=a("li"),_me=a("strong"),ako=o("blenderbot"),nko=o(" \u2014 "),wG=a("a"),sko=o("BlenderbotForConditionalGeneration"),lko=o(" (Blenderbot model)"),iko=l(),jb=a("li"),ume=a("strong"),dko=o("blenderbot-small"),cko=o(" \u2014 "),AG=a("a"),fko=o("BlenderbotSmallForConditionalGeneration"),mko=o(" (BlenderbotSmall model)"),gko=l(),Db=a("li"),bme=a("strong"),hko=o("encoder-decoder"),pko=o(" \u2014 "),LG=a("a"),_ko=o("EncoderDecoderModel"),uko=o(" (Encoder decoder model)"),bko=l(),Gb=a("li"),vme=a("strong"),vko=o("fsmt"),Fko=o(" \u2014 "),yG=a("a"),Tko=o("FSMTForConditionalGeneration"),Mko=o(" (FairSeq Machine-Translation model)"),Eko=l(),Ob=a("li"),Fme=a("strong"),Cko=o("led"),wko=o(" \u2014 "),xG=a("a"),Ako=o("LEDForConditionalGeneration"),Lko=o(" (LED model)"),yko=l(),Vb=a("li"),Tme=a("strong"),xko=o("m2m_100"),$ko=o(" \u2014 "),$G=a("a"),kko=o("M2M100ForConditionalGeneration"),Sko=o(" (M2M100 model)"),Rko=l(),Xb=a("li"),Mme=a("strong"),Pko=o("marian"),Bko=o(" \u2014 "),kG=a("a"),Iko=o("MarianMTModel"),Nko=o(" (Marian model)"),qko=l(),zb=a("li"),Eme=a("strong"),jko=o("mbart"),Dko=o(" \u2014 "),SG=a("a"),Gko=o("MBartForConditionalGeneration"),Oko=o(" (mBART model)"),Vko=l(),Wb=a("li"),Cme=a("strong"),Xko=o("mt5"),zko=o(" \u2014 "),RG=a("a"),Wko=o("MT5ForConditionalGeneration"),Qko=o(" (MT5 model)"),Hko=l(),Qb=a("li"),wme=a("strong"),Uko=o("pegasus"),Jko=o(" \u2014 "),PG=a("a"),Yko=o("PegasusForConditionalGeneration"),Kko=o(" (Pegasus model)"),Zko=l(),Hb=a("li"),Ame=a("strong"),eSo=o("plbart"),oSo=o(" \u2014 "),BG=a("a"),rSo=o("PLBartForConditionalGeneration"),tSo=o(" (PLBart model)"),aSo=l(),Ub=a("li"),Lme=a("strong"),nSo=o("prophetnet"),sSo=o(" \u2014 "),IG=a("a"),lSo=o("ProphetNetForConditionalGeneration"),iSo=o(" (ProphetNet model)"),dSo=l(),Jb=a("li"),yme=a("strong"),cSo=o("t5"),fSo=o(" \u2014 "),NG=a("a"),mSo=o("T5ForConditionalGeneration"),gSo=o(" (T5 model)"),hSo=l(),Yb=a("li"),xme=a("strong"),pSo=o("xlm-prophetnet"),_So=o(" \u2014 "),qG=a("a"),uSo=o("XLMProphetNetForConditionalGeneration"),bSo=o(" (XLM-ProphetNet model)"),vSo=l(),Kb=a("p"),FSo=o("The model is set in evaluation mode by default using "),$me=a("code"),TSo=o("model.eval()"),MSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),ESo=o("model.train()"),CSo=l(),F(Zb.$$.fragment),Hje=l(),Gi=a("h2"),e2=a("a"),Sme=a("span"),F(XA.$$.fragment),wSo=l(),Rme=a("span"),ASo=o("AutoModelForSequenceClassification"),Uje=l(),Ro=a("div"),F(zA.$$.fragment),LSo=l(),Oi=a("p"),ySo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jG=a("a"),xSo=o("from_pretrained()"),$So=o(" class method or the "),DG=a("a"),kSo=o("from_config()"),SSo=o(` class
method.`),RSo=l(),WA=a("p"),PSo=o("This class cannot be instantiated directly using "),Pme=a("code"),BSo=o("__init__()"),ISo=o(" (throws an error)."),NSo=l(),it=a("div"),F(QA.$$.fragment),qSo=l(),Bme=a("p"),jSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DSo=l(),Vi=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),OSo=o("not"),VSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),XSo=o("from_pretrained()"),zSo=o(" to load the model weights."),WSo=l(),F(o2.$$.fragment),QSo=l(),oo=a("div"),F(HA.$$.fragment),HSo=l(),Nme=a("p"),USo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JSo=l(),Ra=a("p"),YSo=o("The model class to instantiate is selected based on the "),qme=a("code"),KSo=o("model_type"),ZSo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),rRo=o("pretrained_model_name_or_path"),tRo=o(":"),aRo=l(),N=a("ul"),r2=a("li"),Gme=a("strong"),nRo=o("albert"),sRo=o(" \u2014 "),OG=a("a"),lRo=o("AlbertForSequenceClassification"),iRo=o(" (ALBERT model)"),dRo=l(),t2=a("li"),Ome=a("strong"),cRo=o("bart"),fRo=o(" \u2014 "),VG=a("a"),mRo=o("BartForSequenceClassification"),gRo=o(" (BART model)"),hRo=l(),a2=a("li"),Vme=a("strong"),pRo=o("bert"),_Ro=o(" \u2014 "),XG=a("a"),uRo=o("BertForSequenceClassification"),bRo=o(" (BERT model)"),vRo=l(),n2=a("li"),Xme=a("strong"),FRo=o("big_bird"),TRo=o(" \u2014 "),zG=a("a"),MRo=o("BigBirdForSequenceClassification"),ERo=o(" (BigBird model)"),CRo=l(),s2=a("li"),zme=a("strong"),wRo=o("bigbird_pegasus"),ARo=o(" \u2014 "),WG=a("a"),LRo=o("BigBirdPegasusForSequenceClassification"),yRo=o(" (BigBird-Pegasus model)"),xRo=l(),l2=a("li"),Wme=a("strong"),$Ro=o("bloom"),kRo=o(" \u2014 "),QG=a("a"),SRo=o("BloomForSequenceClassification"),RRo=o(" (BLOOM model)"),PRo=l(),i2=a("li"),Qme=a("strong"),BRo=o("camembert"),IRo=o(" \u2014 "),HG=a("a"),NRo=o("CamembertForSequenceClassification"),qRo=o(" (CamemBERT model)"),jRo=l(),d2=a("li"),Hme=a("strong"),DRo=o("canine"),GRo=o(" \u2014 "),UG=a("a"),ORo=o("CanineForSequenceClassification"),VRo=o(" (CANINE model)"),XRo=l(),c2=a("li"),Ume=a("strong"),zRo=o("convbert"),WRo=o(" \u2014 "),JG=a("a"),QRo=o("ConvBertForSequenceClassification"),HRo=o(" (ConvBERT model)"),URo=l(),f2=a("li"),Jme=a("strong"),JRo=o("ctrl"),YRo=o(" \u2014 "),YG=a("a"),KRo=o("CTRLForSequenceClassification"),ZRo=o(" (CTRL model)"),ePo=l(),m2=a("li"),Yme=a("strong"),oPo=o("data2vec-text"),rPo=o(" \u2014 "),KG=a("a"),tPo=o("Data2VecTextForSequenceClassification"),aPo=o(" (Data2VecText model)"),nPo=l(),g2=a("li"),Kme=a("strong"),sPo=o("deberta"),lPo=o(" \u2014 "),ZG=a("a"),iPo=o("DebertaForSequenceClassification"),dPo=o(" (DeBERTa model)"),cPo=l(),h2=a("li"),Zme=a("strong"),fPo=o("deberta-v2"),mPo=o(" \u2014 "),eO=a("a"),gPo=o("DebertaV2ForSequenceClassification"),hPo=o(" (DeBERTa-v2 model)"),pPo=l(),p2=a("li"),ege=a("strong"),_Po=o("distilbert"),uPo=o(" \u2014 "),oO=a("a"),bPo=o("DistilBertForSequenceClassification"),vPo=o(" (DistilBERT model)"),FPo=l(),_2=a("li"),oge=a("strong"),TPo=o("electra"),MPo=o(" \u2014 "),rO=a("a"),EPo=o("ElectraForSequenceClassification"),CPo=o(" (ELECTRA model)"),wPo=l(),u2=a("li"),rge=a("strong"),APo=o("flaubert"),LPo=o(" \u2014 "),tO=a("a"),yPo=o("FlaubertForSequenceClassification"),xPo=o(" (FlauBERT model)"),$Po=l(),b2=a("li"),tge=a("strong"),kPo=o("fnet"),SPo=o(" \u2014 "),aO=a("a"),RPo=o("FNetForSequenceClassification"),PPo=o(" (FNet model)"),BPo=l(),v2=a("li"),age=a("strong"),IPo=o("funnel"),NPo=o(" \u2014 "),nO=a("a"),qPo=o("FunnelForSequenceClassification"),jPo=o(" (Funnel Transformer model)"),DPo=l(),F2=a("li"),nge=a("strong"),GPo=o("gpt2"),OPo=o(" \u2014 "),sO=a("a"),VPo=o("GPT2ForSequenceClassification"),XPo=o(" (OpenAI GPT-2 model)"),zPo=l(),T2=a("li"),sge=a("strong"),WPo=o("gpt_neo"),QPo=o(" \u2014 "),lO=a("a"),HPo=o("GPTNeoForSequenceClassification"),UPo=o(" (GPT Neo model)"),JPo=l(),M2=a("li"),lge=a("strong"),YPo=o("gptj"),KPo=o(" \u2014 "),iO=a("a"),ZPo=o("GPTJForSequenceClassification"),eBo=o(" (GPT-J model)"),oBo=l(),E2=a("li"),ige=a("strong"),rBo=o("ibert"),tBo=o(" \u2014 "),dO=a("a"),aBo=o("IBertForSequenceClassification"),nBo=o(" (I-BERT model)"),sBo=l(),C2=a("li"),dge=a("strong"),lBo=o("layoutlm"),iBo=o(" \u2014 "),cO=a("a"),dBo=o("LayoutLMForSequenceClassification"),cBo=o(" (LayoutLM model)"),fBo=l(),w2=a("li"),cge=a("strong"),mBo=o("layoutlmv2"),gBo=o(" \u2014 "),fO=a("a"),hBo=o("LayoutLMv2ForSequenceClassification"),pBo=o(" (LayoutLMv2 model)"),_Bo=l(),A2=a("li"),fge=a("strong"),uBo=o("layoutlmv3"),bBo=o(" \u2014 "),mO=a("a"),vBo=o("LayoutLMv3ForSequenceClassification"),FBo=o(" (LayoutLMv3 model)"),TBo=l(),L2=a("li"),mge=a("strong"),MBo=o("led"),EBo=o(" \u2014 "),gO=a("a"),CBo=o("LEDForSequenceClassification"),wBo=o(" (LED model)"),ABo=l(),y2=a("li"),gge=a("strong"),LBo=o("longformer"),yBo=o(" \u2014 "),hO=a("a"),xBo=o("LongformerForSequenceClassification"),$Bo=o(" (Longformer model)"),kBo=l(),x2=a("li"),hge=a("strong"),SBo=o("mbart"),RBo=o(" \u2014 "),pO=a("a"),PBo=o("MBartForSequenceClassification"),BBo=o(" (mBART model)"),IBo=l(),$2=a("li"),pge=a("strong"),NBo=o("megatron-bert"),qBo=o(" \u2014 "),_O=a("a"),jBo=o("MegatronBertForSequenceClassification"),DBo=o(" (Megatron-BERT model)"),GBo=l(),k2=a("li"),_ge=a("strong"),OBo=o("mobilebert"),VBo=o(" \u2014 "),uO=a("a"),XBo=o("MobileBertForSequenceClassification"),zBo=o(" (MobileBERT model)"),WBo=l(),S2=a("li"),uge=a("strong"),QBo=o("mpnet"),HBo=o(" \u2014 "),bO=a("a"),UBo=o("MPNetForSequenceClassification"),JBo=o(" (MPNet model)"),YBo=l(),R2=a("li"),bge=a("strong"),KBo=o("nystromformer"),ZBo=o(" \u2014 "),vO=a("a"),eIo=o("NystromformerForSequenceClassification"),oIo=o(" (Nystr\xF6mformer model)"),rIo=l(),P2=a("li"),vge=a("strong"),tIo=o("openai-gpt"),aIo=o(" \u2014 "),FO=a("a"),nIo=o("OpenAIGPTForSequenceClassification"),sIo=o(" (OpenAI GPT model)"),lIo=l(),B2=a("li"),Fge=a("strong"),iIo=o("perceiver"),dIo=o(" \u2014 "),TO=a("a"),cIo=o("PerceiverForSequenceClassification"),fIo=o(" (Perceiver model)"),mIo=l(),I2=a("li"),Tge=a("strong"),gIo=o("plbart"),hIo=o(" \u2014 "),MO=a("a"),pIo=o("PLBartForSequenceClassification"),_Io=o(" (PLBart model)"),uIo=l(),N2=a("li"),Mge=a("strong"),bIo=o("qdqbert"),vIo=o(" \u2014 "),EO=a("a"),FIo=o("QDQBertForSequenceClassification"),TIo=o(" (QDQBert model)"),MIo=l(),q2=a("li"),Ege=a("strong"),EIo=o("reformer"),CIo=o(" \u2014 "),CO=a("a"),wIo=o("ReformerForSequenceClassification"),AIo=o(" (Reformer model)"),LIo=l(),j2=a("li"),Cge=a("strong"),yIo=o("rembert"),xIo=o(" \u2014 "),wO=a("a"),$Io=o("RemBertForSequenceClassification"),kIo=o(" (RemBERT model)"),SIo=l(),D2=a("li"),wge=a("strong"),RIo=o("roberta"),PIo=o(" \u2014 "),AO=a("a"),BIo=o("RobertaForSequenceClassification"),IIo=o(" (RoBERTa model)"),NIo=l(),G2=a("li"),Age=a("strong"),qIo=o("roformer"),jIo=o(" \u2014 "),LO=a("a"),DIo=o("RoFormerForSequenceClassification"),GIo=o(" (RoFormer model)"),OIo=l(),O2=a("li"),Lge=a("strong"),VIo=o("squeezebert"),XIo=o(" \u2014 "),yO=a("a"),zIo=o("SqueezeBertForSequenceClassification"),WIo=o(" (SqueezeBERT model)"),QIo=l(),V2=a("li"),yge=a("strong"),HIo=o("tapas"),UIo=o(" \u2014 "),xO=a("a"),JIo=o("TapasForSequenceClassification"),YIo=o(" (TAPAS model)"),KIo=l(),X2=a("li"),xge=a("strong"),ZIo=o("transfo-xl"),eNo=o(" \u2014 "),$O=a("a"),oNo=o("TransfoXLForSequenceClassification"),rNo=o(" (Transformer-XL model)"),tNo=l(),z2=a("li"),$ge=a("strong"),aNo=o("xlm"),nNo=o(" \u2014 "),kO=a("a"),sNo=o("XLMForSequenceClassification"),lNo=o(" (XLM model)"),iNo=l(),W2=a("li"),kge=a("strong"),dNo=o("xlm-roberta"),cNo=o(" \u2014 "),SO=a("a"),fNo=o("XLMRobertaForSequenceClassification"),mNo=o(" (XLM-RoBERTa model)"),gNo=l(),Q2=a("li"),Sge=a("strong"),hNo=o("xlm-roberta-xl"),pNo=o(" \u2014 "),RO=a("a"),_No=o("XLMRobertaXLForSequenceClassification"),uNo=o(" (XLM-RoBERTa-XL model)"),bNo=l(),H2=a("li"),Rge=a("strong"),vNo=o("xlnet"),FNo=o(" \u2014 "),PO=a("a"),TNo=o("XLNetForSequenceClassification"),MNo=o(" (XLNet model)"),ENo=l(),U2=a("li"),Pge=a("strong"),CNo=o("yoso"),wNo=o(" \u2014 "),BO=a("a"),ANo=o("YosoForSequenceClassification"),LNo=o(" (YOSO model)"),yNo=l(),J2=a("p"),xNo=o("The model is set in evaluation mode by default using "),Bge=a("code"),$No=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),SNo=o("model.train()"),RNo=l(),F(Y2.$$.fragment),Jje=l(),Xi=a("h2"),K2=a("a"),Nge=a("span"),F(UA.$$.fragment),PNo=l(),qge=a("span"),BNo=o("AutoModelForMultipleChoice"),Yje=l(),Po=a("div"),F(JA.$$.fragment),INo=l(),zi=a("p"),NNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IO=a("a"),qNo=o("from_pretrained()"),jNo=o(" class method or the "),NO=a("a"),DNo=o("from_config()"),GNo=o(` class
method.`),ONo=l(),YA=a("p"),VNo=o("This class cannot be instantiated directly using "),jge=a("code"),XNo=o("__init__()"),zNo=o(" (throws an error)."),WNo=l(),dt=a("div"),F(KA.$$.fragment),QNo=l(),Dge=a("p"),HNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UNo=l(),Wi=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),ZNo=o("from_pretrained()"),eqo=o(" to load the model weights."),oqo=l(),F(Z2.$$.fragment),rqo=l(),ro=a("div"),F(ZA.$$.fragment),tqo=l(),Oge=a("p"),aqo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nqo=l(),Pa=a("p"),sqo=o("The model class to instantiate is selected based on the "),Vge=a("code"),lqo=o("model_type"),iqo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),dqo=o("pretrained_model_name_or_path"),cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(":"),gqo=l(),Z=a("ul"),ev=a("li"),Wge=a("strong"),hqo=o("albert"),pqo=o(" \u2014 "),jO=a("a"),_qo=o("AlbertForMultipleChoice"),uqo=o(" (ALBERT model)"),bqo=l(),ov=a("li"),Qge=a("strong"),vqo=o("bert"),Fqo=o(" \u2014 "),DO=a("a"),Tqo=o("BertForMultipleChoice"),Mqo=o(" (BERT model)"),Eqo=l(),rv=a("li"),Hge=a("strong"),Cqo=o("big_bird"),wqo=o(" \u2014 "),GO=a("a"),Aqo=o("BigBirdForMultipleChoice"),Lqo=o(" (BigBird model)"),yqo=l(),tv=a("li"),Uge=a("strong"),xqo=o("camembert"),$qo=o(" \u2014 "),OO=a("a"),kqo=o("CamembertForMultipleChoice"),Sqo=o(" (CamemBERT model)"),Rqo=l(),av=a("li"),Jge=a("strong"),Pqo=o("canine"),Bqo=o(" \u2014 "),VO=a("a"),Iqo=o("CanineForMultipleChoice"),Nqo=o(" (CANINE model)"),qqo=l(),nv=a("li"),Yge=a("strong"),jqo=o("convbert"),Dqo=o(" \u2014 "),XO=a("a"),Gqo=o("ConvBertForMultipleChoice"),Oqo=o(" (ConvBERT model)"),Vqo=l(),sv=a("li"),Kge=a("strong"),Xqo=o("data2vec-text"),zqo=o(" \u2014 "),zO=a("a"),Wqo=o("Data2VecTextForMultipleChoice"),Qqo=o(" (Data2VecText model)"),Hqo=l(),lv=a("li"),Zge=a("strong"),Uqo=o("deberta-v2"),Jqo=o(" \u2014 "),WO=a("a"),Yqo=o("DebertaV2ForMultipleChoice"),Kqo=o(" (DeBERTa-v2 model)"),Zqo=l(),iv=a("li"),ehe=a("strong"),ejo=o("distilbert"),ojo=o(" \u2014 "),QO=a("a"),rjo=o("DistilBertForMultipleChoice"),tjo=o(" (DistilBERT model)"),ajo=l(),dv=a("li"),ohe=a("strong"),njo=o("electra"),sjo=o(" \u2014 "),HO=a("a"),ljo=o("ElectraForMultipleChoice"),ijo=o(" (ELECTRA model)"),djo=l(),cv=a("li"),rhe=a("strong"),cjo=o("flaubert"),fjo=o(" \u2014 "),UO=a("a"),mjo=o("FlaubertForMultipleChoice"),gjo=o(" (FlauBERT model)"),hjo=l(),fv=a("li"),the=a("strong"),pjo=o("fnet"),_jo=o(" \u2014 "),JO=a("a"),ujo=o("FNetForMultipleChoice"),bjo=o(" (FNet model)"),vjo=l(),mv=a("li"),ahe=a("strong"),Fjo=o("funnel"),Tjo=o(" \u2014 "),YO=a("a"),Mjo=o("FunnelForMultipleChoice"),Ejo=o(" (Funnel Transformer model)"),Cjo=l(),gv=a("li"),nhe=a("strong"),wjo=o("ibert"),Ajo=o(" \u2014 "),KO=a("a"),Ljo=o("IBertForMultipleChoice"),yjo=o(" (I-BERT model)"),xjo=l(),hv=a("li"),she=a("strong"),$jo=o("longformer"),kjo=o(" \u2014 "),ZO=a("a"),Sjo=o("LongformerForMultipleChoice"),Rjo=o(" (Longformer model)"),Pjo=l(),pv=a("li"),lhe=a("strong"),Bjo=o("megatron-bert"),Ijo=o(" \u2014 "),eV=a("a"),Njo=o("MegatronBertForMultipleChoice"),qjo=o(" (Megatron-BERT model)"),jjo=l(),_v=a("li"),ihe=a("strong"),Djo=o("mobilebert"),Gjo=o(" \u2014 "),oV=a("a"),Ojo=o("MobileBertForMultipleChoice"),Vjo=o(" (MobileBERT model)"),Xjo=l(),uv=a("li"),dhe=a("strong"),zjo=o("mpnet"),Wjo=o(" \u2014 "),rV=a("a"),Qjo=o("MPNetForMultipleChoice"),Hjo=o(" (MPNet model)"),Ujo=l(),bv=a("li"),che=a("strong"),Jjo=o("nystromformer"),Yjo=o(" \u2014 "),tV=a("a"),Kjo=o("NystromformerForMultipleChoice"),Zjo=o(" (Nystr\xF6mformer model)"),eDo=l(),vv=a("li"),fhe=a("strong"),oDo=o("qdqbert"),rDo=o(" \u2014 "),aV=a("a"),tDo=o("QDQBertForMultipleChoice"),aDo=o(" (QDQBert model)"),nDo=l(),Fv=a("li"),mhe=a("strong"),sDo=o("rembert"),lDo=o(" \u2014 "),nV=a("a"),iDo=o("RemBertForMultipleChoice"),dDo=o(" (RemBERT model)"),cDo=l(),Tv=a("li"),ghe=a("strong"),fDo=o("roberta"),mDo=o(" \u2014 "),sV=a("a"),gDo=o("RobertaForMultipleChoice"),hDo=o(" (RoBERTa model)"),pDo=l(),Mv=a("li"),hhe=a("strong"),_Do=o("roformer"),uDo=o(" \u2014 "),lV=a("a"),bDo=o("RoFormerForMultipleChoice"),vDo=o(" (RoFormer model)"),FDo=l(),Ev=a("li"),phe=a("strong"),TDo=o("squeezebert"),MDo=o(" \u2014 "),iV=a("a"),EDo=o("SqueezeBertForMultipleChoice"),CDo=o(" (SqueezeBERT model)"),wDo=l(),Cv=a("li"),_he=a("strong"),ADo=o("xlm"),LDo=o(" \u2014 "),dV=a("a"),yDo=o("XLMForMultipleChoice"),xDo=o(" (XLM model)"),$Do=l(),wv=a("li"),uhe=a("strong"),kDo=o("xlm-roberta"),SDo=o(" \u2014 "),cV=a("a"),RDo=o("XLMRobertaForMultipleChoice"),PDo=o(" (XLM-RoBERTa model)"),BDo=l(),Av=a("li"),bhe=a("strong"),IDo=o("xlm-roberta-xl"),NDo=o(" \u2014 "),fV=a("a"),qDo=o("XLMRobertaXLForMultipleChoice"),jDo=o(" (XLM-RoBERTa-XL model)"),DDo=l(),Lv=a("li"),vhe=a("strong"),GDo=o("xlnet"),ODo=o(" \u2014 "),mV=a("a"),VDo=o("XLNetForMultipleChoice"),XDo=o(" (XLNet model)"),zDo=l(),yv=a("li"),Fhe=a("strong"),WDo=o("yoso"),QDo=o(" \u2014 "),gV=a("a"),HDo=o("YosoForMultipleChoice"),UDo=o(" (YOSO model)"),JDo=l(),xv=a("p"),YDo=o("The model is set in evaluation mode by default using "),The=a("code"),KDo=o("model.eval()"),ZDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),eGo=o("model.train()"),oGo=l(),F($v.$$.fragment),Kje=l(),Qi=a("h2"),kv=a("a"),Ehe=a("span"),F(eL.$$.fragment),rGo=l(),Che=a("span"),tGo=o("AutoModelForNextSentencePrediction"),Zje=l(),Bo=a("div"),F(oL.$$.fragment),aGo=l(),Hi=a("p"),nGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hV=a("a"),sGo=o("from_pretrained()"),lGo=o(" class method or the "),pV=a("a"),iGo=o("from_config()"),dGo=o(` class
method.`),cGo=l(),rL=a("p"),fGo=o("This class cannot be instantiated directly using "),whe=a("code"),mGo=o("__init__()"),gGo=o(" (throws an error)."),hGo=l(),ct=a("div"),F(tL.$$.fragment),pGo=l(),Ahe=a("p"),_Go=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uGo=l(),Ui=a("p"),bGo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),vGo=o("not"),FGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),TGo=o("from_pretrained()"),MGo=o(" to load the model weights."),EGo=l(),F(Sv.$$.fragment),CGo=l(),to=a("div"),F(aL.$$.fragment),wGo=l(),yhe=a("p"),AGo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LGo=l(),Ba=a("p"),yGo=o("The model class to instantiate is selected based on the "),xhe=a("code"),xGo=o("model_type"),$Go=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),kGo=o("pretrained_model_name_or_path"),SGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),RGo=o("pretrained_model_name_or_path"),PGo=o(":"),BGo=l(),Yr=a("ul"),Rv=a("li"),She=a("strong"),IGo=o("bert"),NGo=o(" \u2014 "),uV=a("a"),qGo=o("BertForNextSentencePrediction"),jGo=o(" (BERT model)"),DGo=l(),Pv=a("li"),Rhe=a("strong"),GGo=o("fnet"),OGo=o(" \u2014 "),bV=a("a"),VGo=o("FNetForNextSentencePrediction"),XGo=o(" (FNet model)"),zGo=l(),Bv=a("li"),Phe=a("strong"),WGo=o("megatron-bert"),QGo=o(" \u2014 "),vV=a("a"),HGo=o("MegatronBertForNextSentencePrediction"),UGo=o(" (Megatron-BERT model)"),JGo=l(),Iv=a("li"),Bhe=a("strong"),YGo=o("mobilebert"),KGo=o(" \u2014 "),FV=a("a"),ZGo=o("MobileBertForNextSentencePrediction"),eOo=o(" (MobileBERT model)"),oOo=l(),Nv=a("li"),Ihe=a("strong"),rOo=o("qdqbert"),tOo=o(" \u2014 "),TV=a("a"),aOo=o("QDQBertForNextSentencePrediction"),nOo=o(" (QDQBert model)"),sOo=l(),qv=a("p"),lOo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),iOo=o("model.eval()"),dOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),cOo=o("model.train()"),fOo=l(),F(jv.$$.fragment),eDe=l(),Ji=a("h2"),Dv=a("a"),jhe=a("span"),F(nL.$$.fragment),mOo=l(),Dhe=a("span"),gOo=o("AutoModelForTokenClassification"),oDe=l(),Io=a("div"),F(sL.$$.fragment),hOo=l(),Yi=a("p"),pOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MV=a("a"),_Oo=o("from_pretrained()"),uOo=o(" class method or the "),EV=a("a"),bOo=o("from_config()"),vOo=o(` class
method.`),FOo=l(),lL=a("p"),TOo=o("This class cannot be instantiated directly using "),Ghe=a("code"),MOo=o("__init__()"),EOo=o(" (throws an error)."),COo=l(),ft=a("div"),F(iL.$$.fragment),wOo=l(),Ohe=a("p"),AOo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LOo=l(),Ki=a("p"),yOo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),xOo=o("not"),$Oo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),kOo=o("from_pretrained()"),SOo=o(" to load the model weights."),ROo=l(),F(Gv.$$.fragment),POo=l(),ao=a("div"),F(dL.$$.fragment),BOo=l(),Xhe=a("p"),IOo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NOo=l(),Ia=a("p"),qOo=o("The model class to instantiate is selected based on the "),zhe=a("code"),jOo=o("model_type"),DOo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),GOo=o("pretrained_model_name_or_path"),OOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),VOo=o("pretrained_model_name_or_path"),XOo=o(":"),zOo=l(),H=a("ul"),Ov=a("li"),Hhe=a("strong"),WOo=o("albert"),QOo=o(" \u2014 "),wV=a("a"),HOo=o("AlbertForTokenClassification"),UOo=o(" (ALBERT model)"),JOo=l(),Vv=a("li"),Uhe=a("strong"),YOo=o("bert"),KOo=o(" \u2014 "),AV=a("a"),ZOo=o("BertForTokenClassification"),eVo=o(" (BERT model)"),oVo=l(),Xv=a("li"),Jhe=a("strong"),rVo=o("big_bird"),tVo=o(" \u2014 "),LV=a("a"),aVo=o("BigBirdForTokenClassification"),nVo=o(" (BigBird model)"),sVo=l(),zv=a("li"),Yhe=a("strong"),lVo=o("bloom"),iVo=o(" \u2014 "),yV=a("a"),dVo=o("BloomForTokenClassification"),cVo=o(" (BLOOM model)"),fVo=l(),Wv=a("li"),Khe=a("strong"),mVo=o("camembert"),gVo=o(" \u2014 "),xV=a("a"),hVo=o("CamembertForTokenClassification"),pVo=o(" (CamemBERT model)"),_Vo=l(),Qv=a("li"),Zhe=a("strong"),uVo=o("canine"),bVo=o(" \u2014 "),$V=a("a"),vVo=o("CanineForTokenClassification"),FVo=o(" (CANINE model)"),TVo=l(),Hv=a("li"),epe=a("strong"),MVo=o("convbert"),EVo=o(" \u2014 "),kV=a("a"),CVo=o("ConvBertForTokenClassification"),wVo=o(" (ConvBERT model)"),AVo=l(),Uv=a("li"),ope=a("strong"),LVo=o("data2vec-text"),yVo=o(" \u2014 "),SV=a("a"),xVo=o("Data2VecTextForTokenClassification"),$Vo=o(" (Data2VecText model)"),kVo=l(),Jv=a("li"),rpe=a("strong"),SVo=o("deberta"),RVo=o(" \u2014 "),RV=a("a"),PVo=o("DebertaForTokenClassification"),BVo=o(" (DeBERTa model)"),IVo=l(),Yv=a("li"),tpe=a("strong"),NVo=o("deberta-v2"),qVo=o(" \u2014 "),PV=a("a"),jVo=o("DebertaV2ForTokenClassification"),DVo=o(" (DeBERTa-v2 model)"),GVo=l(),Kv=a("li"),ape=a("strong"),OVo=o("distilbert"),VVo=o(" \u2014 "),BV=a("a"),XVo=o("DistilBertForTokenClassification"),zVo=o(" (DistilBERT model)"),WVo=l(),Zv=a("li"),npe=a("strong"),QVo=o("electra"),HVo=o(" \u2014 "),IV=a("a"),UVo=o("ElectraForTokenClassification"),JVo=o(" (ELECTRA model)"),YVo=l(),e3=a("li"),spe=a("strong"),KVo=o("flaubert"),ZVo=o(" \u2014 "),NV=a("a"),eXo=o("FlaubertForTokenClassification"),oXo=o(" (FlauBERT model)"),rXo=l(),o3=a("li"),lpe=a("strong"),tXo=o("fnet"),aXo=o(" \u2014 "),qV=a("a"),nXo=o("FNetForTokenClassification"),sXo=o(" (FNet model)"),lXo=l(),r3=a("li"),ipe=a("strong"),iXo=o("funnel"),dXo=o(" \u2014 "),jV=a("a"),cXo=o("FunnelForTokenClassification"),fXo=o(" (Funnel Transformer model)"),mXo=l(),t3=a("li"),dpe=a("strong"),gXo=o("gpt2"),hXo=o(" \u2014 "),DV=a("a"),pXo=o("GPT2ForTokenClassification"),_Xo=o(" (OpenAI GPT-2 model)"),uXo=l(),a3=a("li"),cpe=a("strong"),bXo=o("ibert"),vXo=o(" \u2014 "),GV=a("a"),FXo=o("IBertForTokenClassification"),TXo=o(" (I-BERT model)"),MXo=l(),n3=a("li"),fpe=a("strong"),EXo=o("layoutlm"),CXo=o(" \u2014 "),OV=a("a"),wXo=o("LayoutLMForTokenClassification"),AXo=o(" (LayoutLM model)"),LXo=l(),s3=a("li"),mpe=a("strong"),yXo=o("layoutlmv2"),xXo=o(" \u2014 "),VV=a("a"),$Xo=o("LayoutLMv2ForTokenClassification"),kXo=o(" (LayoutLMv2 model)"),SXo=l(),l3=a("li"),gpe=a("strong"),RXo=o("layoutlmv3"),PXo=o(" \u2014 "),XV=a("a"),BXo=o("LayoutLMv3ForTokenClassification"),IXo=o(" (LayoutLMv3 model)"),NXo=l(),i3=a("li"),hpe=a("strong"),qXo=o("longformer"),jXo=o(" \u2014 "),zV=a("a"),DXo=o("LongformerForTokenClassification"),GXo=o(" (Longformer model)"),OXo=l(),d3=a("li"),ppe=a("strong"),VXo=o("megatron-bert"),XXo=o(" \u2014 "),WV=a("a"),zXo=o("MegatronBertForTokenClassification"),WXo=o(" (Megatron-BERT model)"),QXo=l(),c3=a("li"),_pe=a("strong"),HXo=o("mobilebert"),UXo=o(" \u2014 "),QV=a("a"),JXo=o("MobileBertForTokenClassification"),YXo=o(" (MobileBERT model)"),KXo=l(),f3=a("li"),upe=a("strong"),ZXo=o("mpnet"),ezo=o(" \u2014 "),HV=a("a"),ozo=o("MPNetForTokenClassification"),rzo=o(" (MPNet model)"),tzo=l(),m3=a("li"),bpe=a("strong"),azo=o("nystromformer"),nzo=o(" \u2014 "),UV=a("a"),szo=o("NystromformerForTokenClassification"),lzo=o(" (Nystr\xF6mformer model)"),izo=l(),g3=a("li"),vpe=a("strong"),dzo=o("qdqbert"),czo=o(" \u2014 "),JV=a("a"),fzo=o("QDQBertForTokenClassification"),mzo=o(" (QDQBert model)"),gzo=l(),h3=a("li"),Fpe=a("strong"),hzo=o("rembert"),pzo=o(" \u2014 "),YV=a("a"),_zo=o("RemBertForTokenClassification"),uzo=o(" (RemBERT model)"),bzo=l(),p3=a("li"),Tpe=a("strong"),vzo=o("roberta"),Fzo=o(" \u2014 "),KV=a("a"),Tzo=o("RobertaForTokenClassification"),Mzo=o(" (RoBERTa model)"),Ezo=l(),_3=a("li"),Mpe=a("strong"),Czo=o("roformer"),wzo=o(" \u2014 "),ZV=a("a"),Azo=o("RoFormerForTokenClassification"),Lzo=o(" (RoFormer model)"),yzo=l(),u3=a("li"),Epe=a("strong"),xzo=o("squeezebert"),$zo=o(" \u2014 "),eX=a("a"),kzo=o("SqueezeBertForTokenClassification"),Szo=o(" (SqueezeBERT model)"),Rzo=l(),b3=a("li"),Cpe=a("strong"),Pzo=o("xlm"),Bzo=o(" \u2014 "),oX=a("a"),Izo=o("XLMForTokenClassification"),Nzo=o(" (XLM model)"),qzo=l(),v3=a("li"),wpe=a("strong"),jzo=o("xlm-roberta"),Dzo=o(" \u2014 "),rX=a("a"),Gzo=o("XLMRobertaForTokenClassification"),Ozo=o(" (XLM-RoBERTa model)"),Vzo=l(),F3=a("li"),Ape=a("strong"),Xzo=o("xlm-roberta-xl"),zzo=o(" \u2014 "),tX=a("a"),Wzo=o("XLMRobertaXLForTokenClassification"),Qzo=o(" (XLM-RoBERTa-XL model)"),Hzo=l(),T3=a("li"),Lpe=a("strong"),Uzo=o("xlnet"),Jzo=o(" \u2014 "),aX=a("a"),Yzo=o("XLNetForTokenClassification"),Kzo=o(" (XLNet model)"),Zzo=l(),M3=a("li"),ype=a("strong"),eWo=o("yoso"),oWo=o(" \u2014 "),nX=a("a"),rWo=o("YosoForTokenClassification"),tWo=o(" (YOSO model)"),aWo=l(),E3=a("p"),nWo=o("The model is set in evaluation mode by default using "),xpe=a("code"),sWo=o("model.eval()"),lWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),iWo=o("model.train()"),dWo=l(),F(C3.$$.fragment),rDe=l(),Zi=a("h2"),w3=a("a"),kpe=a("span"),F(cL.$$.fragment),cWo=l(),Spe=a("span"),fWo=o("AutoModelForQuestionAnswering"),tDe=l(),No=a("div"),F(fL.$$.fragment),mWo=l(),ed=a("p"),gWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sX=a("a"),hWo=o("from_pretrained()"),pWo=o(" class method or the "),lX=a("a"),_Wo=o("from_config()"),uWo=o(` class
method.`),bWo=l(),mL=a("p"),vWo=o("This class cannot be instantiated directly using "),Rpe=a("code"),FWo=o("__init__()"),TWo=o(" (throws an error)."),MWo=l(),mt=a("div"),F(gL.$$.fragment),EWo=l(),Ppe=a("p"),CWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wWo=l(),od=a("p"),AWo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),LWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),xWo=o("from_pretrained()"),$Wo=o(" to load the model weights."),kWo=l(),F(A3.$$.fragment),SWo=l(),no=a("div"),F(hL.$$.fragment),RWo=l(),Ipe=a("p"),PWo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BWo=l(),Na=a("p"),IWo=o("The model class to instantiate is selected based on the "),Npe=a("code"),NWo=o("model_type"),qWo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),jWo=o("pretrained_model_name_or_path"),DWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),GWo=o("pretrained_model_name_or_path"),OWo=o(":"),VWo=l(),V=a("ul"),L3=a("li"),Dpe=a("strong"),XWo=o("albert"),zWo=o(" \u2014 "),dX=a("a"),WWo=o("AlbertForQuestionAnswering"),QWo=o(" (ALBERT model)"),HWo=l(),y3=a("li"),Gpe=a("strong"),UWo=o("bart"),JWo=o(" \u2014 "),cX=a("a"),YWo=o("BartForQuestionAnswering"),KWo=o(" (BART model)"),ZWo=l(),x3=a("li"),Ope=a("strong"),eQo=o("bert"),oQo=o(" \u2014 "),fX=a("a"),rQo=o("BertForQuestionAnswering"),tQo=o(" (BERT model)"),aQo=l(),$3=a("li"),Vpe=a("strong"),nQo=o("big_bird"),sQo=o(" \u2014 "),mX=a("a"),lQo=o("BigBirdForQuestionAnswering"),iQo=o(" (BigBird model)"),dQo=l(),k3=a("li"),Xpe=a("strong"),cQo=o("bigbird_pegasus"),fQo=o(" \u2014 "),gX=a("a"),mQo=o("BigBirdPegasusForQuestionAnswering"),gQo=o(" (BigBird-Pegasus model)"),hQo=l(),S3=a("li"),zpe=a("strong"),pQo=o("camembert"),_Qo=o(" \u2014 "),hX=a("a"),uQo=o("CamembertForQuestionAnswering"),bQo=o(" (CamemBERT model)"),vQo=l(),R3=a("li"),Wpe=a("strong"),FQo=o("canine"),TQo=o(" \u2014 "),pX=a("a"),MQo=o("CanineForQuestionAnswering"),EQo=o(" (CANINE model)"),CQo=l(),P3=a("li"),Qpe=a("strong"),wQo=o("convbert"),AQo=o(" \u2014 "),_X=a("a"),LQo=o("ConvBertForQuestionAnswering"),yQo=o(" (ConvBERT model)"),xQo=l(),B3=a("li"),Hpe=a("strong"),$Qo=o("data2vec-text"),kQo=o(" \u2014 "),uX=a("a"),SQo=o("Data2VecTextForQuestionAnswering"),RQo=o(" (Data2VecText model)"),PQo=l(),I3=a("li"),Upe=a("strong"),BQo=o("deberta"),IQo=o(" \u2014 "),bX=a("a"),NQo=o("DebertaForQuestionAnswering"),qQo=o(" (DeBERTa model)"),jQo=l(),N3=a("li"),Jpe=a("strong"),DQo=o("deberta-v2"),GQo=o(" \u2014 "),vX=a("a"),OQo=o("DebertaV2ForQuestionAnswering"),VQo=o(" (DeBERTa-v2 model)"),XQo=l(),q3=a("li"),Ype=a("strong"),zQo=o("distilbert"),WQo=o(" \u2014 "),FX=a("a"),QQo=o("DistilBertForQuestionAnswering"),HQo=o(" (DistilBERT model)"),UQo=l(),j3=a("li"),Kpe=a("strong"),JQo=o("electra"),YQo=o(" \u2014 "),TX=a("a"),KQo=o("ElectraForQuestionAnswering"),ZQo=o(" (ELECTRA model)"),eHo=l(),D3=a("li"),Zpe=a("strong"),oHo=o("flaubert"),rHo=o(" \u2014 "),MX=a("a"),tHo=o("FlaubertForQuestionAnsweringSimple"),aHo=o(" (FlauBERT model)"),nHo=l(),G3=a("li"),e_e=a("strong"),sHo=o("fnet"),lHo=o(" \u2014 "),EX=a("a"),iHo=o("FNetForQuestionAnswering"),dHo=o(" (FNet model)"),cHo=l(),O3=a("li"),o_e=a("strong"),fHo=o("funnel"),mHo=o(" \u2014 "),CX=a("a"),gHo=o("FunnelForQuestionAnswering"),hHo=o(" (Funnel Transformer model)"),pHo=l(),V3=a("li"),r_e=a("strong"),_Ho=o("gptj"),uHo=o(" \u2014 "),wX=a("a"),bHo=o("GPTJForQuestionAnswering"),vHo=o(" (GPT-J model)"),FHo=l(),X3=a("li"),t_e=a("strong"),THo=o("ibert"),MHo=o(" \u2014 "),AX=a("a"),EHo=o("IBertForQuestionAnswering"),CHo=o(" (I-BERT model)"),wHo=l(),z3=a("li"),a_e=a("strong"),AHo=o("layoutlmv2"),LHo=o(" \u2014 "),LX=a("a"),yHo=o("LayoutLMv2ForQuestionAnswering"),xHo=o(" (LayoutLMv2 model)"),$Ho=l(),W3=a("li"),n_e=a("strong"),kHo=o("layoutlmv3"),SHo=o(" \u2014 "),yX=a("a"),RHo=o("LayoutLMv3ForQuestionAnswering"),PHo=o(" (LayoutLMv3 model)"),BHo=l(),Q3=a("li"),s_e=a("strong"),IHo=o("led"),NHo=o(" \u2014 "),xX=a("a"),qHo=o("LEDForQuestionAnswering"),jHo=o(" (LED model)"),DHo=l(),H3=a("li"),l_e=a("strong"),GHo=o("longformer"),OHo=o(" \u2014 "),$X=a("a"),VHo=o("LongformerForQuestionAnswering"),XHo=o(" (Longformer model)"),zHo=l(),U3=a("li"),i_e=a("strong"),WHo=o("lxmert"),QHo=o(" \u2014 "),kX=a("a"),HHo=o("LxmertForQuestionAnswering"),UHo=o(" (LXMERT model)"),JHo=l(),J3=a("li"),d_e=a("strong"),YHo=o("mbart"),KHo=o(" \u2014 "),SX=a("a"),ZHo=o("MBartForQuestionAnswering"),eUo=o(" (mBART model)"),oUo=l(),Y3=a("li"),c_e=a("strong"),rUo=o("megatron-bert"),tUo=o(" \u2014 "),RX=a("a"),aUo=o("MegatronBertForQuestionAnswering"),nUo=o(" (Megatron-BERT model)"),sUo=l(),K3=a("li"),f_e=a("strong"),lUo=o("mobilebert"),iUo=o(" \u2014 "),PX=a("a"),dUo=o("MobileBertForQuestionAnswering"),cUo=o(" (MobileBERT model)"),fUo=l(),Z3=a("li"),m_e=a("strong"),mUo=o("mpnet"),gUo=o(" \u2014 "),BX=a("a"),hUo=o("MPNetForQuestionAnswering"),pUo=o(" (MPNet model)"),_Uo=l(),eF=a("li"),g_e=a("strong"),uUo=o("nystromformer"),bUo=o(" \u2014 "),IX=a("a"),vUo=o("NystromformerForQuestionAnswering"),FUo=o(" (Nystr\xF6mformer model)"),TUo=l(),oF=a("li"),h_e=a("strong"),MUo=o("qdqbert"),EUo=o(" \u2014 "),NX=a("a"),CUo=o("QDQBertForQuestionAnswering"),wUo=o(" (QDQBert model)"),AUo=l(),rF=a("li"),p_e=a("strong"),LUo=o("reformer"),yUo=o(" \u2014 "),qX=a("a"),xUo=o("ReformerForQuestionAnswering"),$Uo=o(" (Reformer model)"),kUo=l(),tF=a("li"),__e=a("strong"),SUo=o("rembert"),RUo=o(" \u2014 "),jX=a("a"),PUo=o("RemBertForQuestionAnswering"),BUo=o(" (RemBERT model)"),IUo=l(),aF=a("li"),u_e=a("strong"),NUo=o("roberta"),qUo=o(" \u2014 "),DX=a("a"),jUo=o("RobertaForQuestionAnswering"),DUo=o(" (RoBERTa model)"),GUo=l(),nF=a("li"),b_e=a("strong"),OUo=o("roformer"),VUo=o(" \u2014 "),GX=a("a"),XUo=o("RoFormerForQuestionAnswering"),zUo=o(" (RoFormer model)"),WUo=l(),sF=a("li"),v_e=a("strong"),QUo=o("splinter"),HUo=o(" \u2014 "),OX=a("a"),UUo=o("SplinterForQuestionAnswering"),JUo=o(" (Splinter model)"),YUo=l(),lF=a("li"),F_e=a("strong"),KUo=o("squeezebert"),ZUo=o(" \u2014 "),VX=a("a"),eJo=o("SqueezeBertForQuestionAnswering"),oJo=o(" (SqueezeBERT model)"),rJo=l(),iF=a("li"),T_e=a("strong"),tJo=o("xlm"),aJo=o(" \u2014 "),XX=a("a"),nJo=o("XLMForQuestionAnsweringSimple"),sJo=o(" (XLM model)"),lJo=l(),dF=a("li"),M_e=a("strong"),iJo=o("xlm-roberta"),dJo=o(" \u2014 "),zX=a("a"),cJo=o("XLMRobertaForQuestionAnswering"),fJo=o(" (XLM-RoBERTa model)"),mJo=l(),cF=a("li"),E_e=a("strong"),gJo=o("xlm-roberta-xl"),hJo=o(" \u2014 "),WX=a("a"),pJo=o("XLMRobertaXLForQuestionAnswering"),_Jo=o(" (XLM-RoBERTa-XL model)"),uJo=l(),fF=a("li"),C_e=a("strong"),bJo=o("xlnet"),vJo=o(" \u2014 "),QX=a("a"),FJo=o("XLNetForQuestionAnsweringSimple"),TJo=o(" (XLNet model)"),MJo=l(),mF=a("li"),w_e=a("strong"),EJo=o("yoso"),CJo=o(" \u2014 "),HX=a("a"),wJo=o("YosoForQuestionAnswering"),AJo=o(" (YOSO model)"),LJo=l(),gF=a("p"),yJo=o("The model is set in evaluation mode by default using "),A_e=a("code"),xJo=o("model.eval()"),$Jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),kJo=o("model.train()"),SJo=l(),F(hF.$$.fragment),aDe=l(),rd=a("h2"),pF=a("a"),y_e=a("span"),F(pL.$$.fragment),RJo=l(),x_e=a("span"),PJo=o("AutoModelForTableQuestionAnswering"),nDe=l(),qo=a("div"),F(_L.$$.fragment),BJo=l(),td=a("p"),IJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UX=a("a"),NJo=o("from_pretrained()"),qJo=o(" class method or the "),JX=a("a"),jJo=o("from_config()"),DJo=o(` class
method.`),GJo=l(),uL=a("p"),OJo=o("This class cannot be instantiated directly using "),$_e=a("code"),VJo=o("__init__()"),XJo=o(" (throws an error)."),zJo=l(),gt=a("div"),F(bL.$$.fragment),WJo=l(),k_e=a("p"),QJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),HJo=l(),ad=a("p"),UJo=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),JJo=o("not"),YJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),KJo=o("from_pretrained()"),ZJo=o(" to load the model weights."),eYo=l(),F(_F.$$.fragment),oYo=l(),so=a("div"),F(vL.$$.fragment),rYo=l(),R_e=a("p"),tYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aYo=l(),qa=a("p"),nYo=o("The model class to instantiate is selected based on the "),P_e=a("code"),sYo=o("model_type"),lYo=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),cYo=o("pretrained_model_name_or_path"),fYo=o(":"),mYo=l(),N_e=a("ul"),uF=a("li"),q_e=a("strong"),gYo=o("tapas"),hYo=o(" \u2014 "),KX=a("a"),pYo=o("TapasForQuestionAnswering"),_Yo=o(" (TAPAS model)"),uYo=l(),bF=a("p"),bYo=o("The model is set in evaluation mode by default using "),j_e=a("code"),vYo=o("model.eval()"),FYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),TYo=o("model.train()"),MYo=l(),F(vF.$$.fragment),sDe=l(),nd=a("h2"),FF=a("a"),G_e=a("span"),F(FL.$$.fragment),EYo=l(),O_e=a("span"),CYo=o("AutoModelForImageClassification"),lDe=l(),jo=a("div"),F(TL.$$.fragment),wYo=l(),sd=a("p"),AYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZX=a("a"),LYo=o("from_pretrained()"),yYo=o(" class method or the "),ez=a("a"),xYo=o("from_config()"),$Yo=o(` class
method.`),kYo=l(),ML=a("p"),SYo=o("This class cannot be instantiated directly using "),V_e=a("code"),RYo=o("__init__()"),PYo=o(" (throws an error)."),BYo=l(),ht=a("div"),F(EL.$$.fragment),IYo=l(),X_e=a("p"),NYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qYo=l(),ld=a("p"),jYo=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),DYo=o("not"),GYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),OYo=o("from_pretrained()"),VYo=o(" to load the model weights."),XYo=l(),F(TF.$$.fragment),zYo=l(),lo=a("div"),F(CL.$$.fragment),WYo=l(),W_e=a("p"),QYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HYo=l(),ja=a("p"),UYo=o("The model class to instantiate is selected based on the "),Q_e=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),ve=a("ul"),MF=a("li"),J_e=a("strong"),tKo=o("beit"),aKo=o(" \u2014 "),rz=a("a"),nKo=o("BeitForImageClassification"),sKo=o(" (BEiT model)"),lKo=l(),EF=a("li"),Y_e=a("strong"),iKo=o("convnext"),dKo=o(" \u2014 "),tz=a("a"),cKo=o("ConvNextForImageClassification"),fKo=o(" (ConvNeXT model)"),mKo=l(),CF=a("li"),K_e=a("strong"),gKo=o("cvt"),hKo=o(" \u2014 "),az=a("a"),pKo=o("CvtForImageClassification"),_Ko=o(" (CvT model)"),uKo=l(),wF=a("li"),Z_e=a("strong"),bKo=o("data2vec-vision"),vKo=o(" \u2014 "),nz=a("a"),FKo=o("Data2VecVisionForImageClassification"),TKo=o(" (Data2VecVision model)"),MKo=l(),Bs=a("li"),eue=a("strong"),EKo=o("deit"),CKo=o(" \u2014 "),sz=a("a"),wKo=o("DeiTForImageClassification"),AKo=o(" or "),lz=a("a"),LKo=o("DeiTForImageClassificationWithTeacher"),yKo=o(" (DeiT model)"),xKo=l(),AF=a("li"),oue=a("strong"),$Ko=o("imagegpt"),kKo=o(" \u2014 "),iz=a("a"),SKo=o("ImageGPTForImageClassification"),RKo=o(" (ImageGPT model)"),PKo=l(),Is=a("li"),rue=a("strong"),BKo=o("levit"),IKo=o(" \u2014 "),dz=a("a"),NKo=o("LevitForImageClassification"),qKo=o(" or "),cz=a("a"),jKo=o("LevitForImageClassificationWithTeacher"),DKo=o(" (LeViT model)"),GKo=l(),pt=a("li"),tue=a("strong"),OKo=o("perceiver"),VKo=o(" \u2014 "),fz=a("a"),XKo=o("PerceiverForImageClassificationLearned"),zKo=o(" or "),mz=a("a"),WKo=o("PerceiverForImageClassificationFourier"),QKo=o(" or "),gz=a("a"),HKo=o("PerceiverForImageClassificationConvProcessing"),UKo=o(" (Perceiver model)"),JKo=l(),LF=a("li"),aue=a("strong"),YKo=o("poolformer"),KKo=o(" \u2014 "),hz=a("a"),ZKo=o("PoolFormerForImageClassification"),eZo=o(" (PoolFormer model)"),oZo=l(),yF=a("li"),nue=a("strong"),rZo=o("regnet"),tZo=o(" \u2014 "),pz=a("a"),aZo=o("RegNetForImageClassification"),nZo=o(" (RegNet model)"),sZo=l(),xF=a("li"),sue=a("strong"),lZo=o("resnet"),iZo=o(" \u2014 "),_z=a("a"),dZo=o("ResNetForImageClassification"),cZo=o(" (ResNet model)"),fZo=l(),$F=a("li"),lue=a("strong"),mZo=o("segformer"),gZo=o(" \u2014 "),uz=a("a"),hZo=o("SegformerForImageClassification"),pZo=o(" (SegFormer model)"),_Zo=l(),kF=a("li"),iue=a("strong"),uZo=o("swin"),bZo=o(" \u2014 "),bz=a("a"),vZo=o("SwinForImageClassification"),FZo=o(" (Swin Transformer model)"),TZo=l(),SF=a("li"),due=a("strong"),MZo=o("van"),EZo=o(" \u2014 "),vz=a("a"),CZo=o("VanForImageClassification"),wZo=o(" (VAN model)"),AZo=l(),RF=a("li"),cue=a("strong"),LZo=o("vit"),yZo=o(" \u2014 "),Fz=a("a"),xZo=o("ViTForImageClassification"),$Zo=o(" (ViT model)"),kZo=l(),PF=a("p"),SZo=o("The model is set in evaluation mode by default using "),fue=a("code"),RZo=o("model.eval()"),PZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),BZo=o("model.train()"),IZo=l(),F(BF.$$.fragment),iDe=l(),id=a("h2"),IF=a("a"),gue=a("span"),F(wL.$$.fragment),NZo=l(),hue=a("span"),qZo=o("AutoModelForVision2Seq"),dDe=l(),Do=a("div"),F(AL.$$.fragment),jZo=l(),dd=a("p"),DZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Tz=a("a"),GZo=o("from_pretrained()"),OZo=o(" class method or the "),Mz=a("a"),VZo=o("from_config()"),XZo=o(` class
method.`),zZo=l(),LL=a("p"),WZo=o("This class cannot be instantiated directly using "),pue=a("code"),QZo=o("__init__()"),HZo=o(" (throws an error)."),UZo=l(),_t=a("div"),F(yL.$$.fragment),JZo=l(),_ue=a("p"),YZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KZo=l(),cd=a("p"),ZZo=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),eer=o("not"),oer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),rer=o("from_pretrained()"),ter=o(" to load the model weights."),aer=l(),F(NF.$$.fragment),ner=l(),io=a("div"),F(xL.$$.fragment),ser=l(),bue=a("p"),ler=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ier=l(),Da=a("p"),der=o("The model class to instantiate is selected based on the "),vue=a("code"),cer=o("model_type"),fer=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),her=o("pretrained_model_name_or_path"),per=o(":"),_er=l(),Mue=a("ul"),qF=a("li"),Eue=a("strong"),uer=o("vision-encoder-decoder"),ber=o(" \u2014 "),Cz=a("a"),ver=o("VisionEncoderDecoderModel"),Fer=o(" (Vision Encoder decoder model)"),Ter=l(),jF=a("p"),Mer=o("The model is set in evaluation mode by default using "),Cue=a("code"),Eer=o("model.eval()"),Cer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),wer=o("model.train()"),Aer=l(),F(DF.$$.fragment),cDe=l(),fd=a("h2"),GF=a("a"),Aue=a("span"),F($L.$$.fragment),Ler=l(),Lue=a("span"),yer=o("AutoModelForAudioClassification"),fDe=l(),Go=a("div"),F(kL.$$.fragment),xer=l(),md=a("p"),$er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wz=a("a"),ker=o("from_pretrained()"),Ser=o(" class method or the "),Az=a("a"),Rer=o("from_config()"),Per=o(` class
method.`),Ber=l(),SL=a("p"),Ier=o("This class cannot be instantiated directly using "),yue=a("code"),Ner=o("__init__()"),qer=o(" (throws an error)."),jer=l(),ut=a("div"),F(RL.$$.fragment),Der=l(),xue=a("p"),Ger=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Oer=l(),gd=a("p"),Ver=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),Xer=o("not"),zer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Wer=o("from_pretrained()"),Qer=o(" to load the model weights."),Her=l(),F(OF.$$.fragment),Uer=l(),co=a("div"),F(PL.$$.fragment),Jer=l(),kue=a("p"),Yer=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ker=l(),Ga=a("p"),Zer=o("The model class to instantiate is selected based on the "),Sue=a("code"),eor=o("model_type"),oor=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(":"),sor=l(),Re=a("ul"),VF=a("li"),Bue=a("strong"),lor=o("data2vec-audio"),ior=o(" \u2014 "),yz=a("a"),dor=o("Data2VecAudioForSequenceClassification"),cor=o(" (Data2VecAudio model)"),mor=l(),XF=a("li"),Iue=a("strong"),gor=o("hubert"),hor=o(" \u2014 "),xz=a("a"),por=o("HubertForSequenceClassification"),_or=o(" (Hubert model)"),uor=l(),zF=a("li"),Nue=a("strong"),bor=o("sew"),vor=o(" \u2014 "),$z=a("a"),For=o("SEWForSequenceClassification"),Tor=o(" (SEW model)"),Mor=l(),WF=a("li"),que=a("strong"),Eor=o("sew-d"),Cor=o(" \u2014 "),kz=a("a"),wor=o("SEWDForSequenceClassification"),Aor=o(" (SEW-D model)"),Lor=l(),QF=a("li"),jue=a("strong"),yor=o("unispeech"),xor=o(" \u2014 "),Sz=a("a"),$or=o("UniSpeechForSequenceClassification"),kor=o(" (UniSpeech model)"),Sor=l(),HF=a("li"),Due=a("strong"),Ror=o("unispeech-sat"),Por=o(" \u2014 "),Rz=a("a"),Bor=o("UniSpeechSatForSequenceClassification"),Ior=o(" (UniSpeechSat model)"),Nor=l(),UF=a("li"),Gue=a("strong"),qor=o("wav2vec2"),jor=o(" \u2014 "),Pz=a("a"),Dor=o("Wav2Vec2ForSequenceClassification"),Gor=o(" (Wav2Vec2 model)"),Oor=l(),JF=a("li"),Oue=a("strong"),Vor=o("wav2vec2-conformer"),Xor=o(" \u2014 "),Bz=a("a"),zor=o("Wav2Vec2ConformerForSequenceClassification"),Wor=o(" (Wav2Vec2-Conformer model)"),Qor=l(),YF=a("li"),Vue=a("strong"),Hor=o("wavlm"),Uor=o(" \u2014 "),Iz=a("a"),Jor=o("WavLMForSequenceClassification"),Yor=o(" (WavLM model)"),Kor=l(),KF=a("p"),Zor=o("The model is set in evaluation mode by default using "),Xue=a("code"),err=o("model.eval()"),orr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),rrr=o("model.train()"),trr=l(),F(ZF.$$.fragment),mDe=l(),hd=a("h2"),e6=a("a"),Wue=a("span"),F(BL.$$.fragment),arr=l(),Que=a("span"),nrr=o("AutoModelForAudioFrameClassification"),gDe=l(),Oo=a("div"),F(IL.$$.fragment),srr=l(),pd=a("p"),lrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Nz=a("a"),irr=o("from_pretrained()"),drr=o(" class method or the "),qz=a("a"),crr=o("from_config()"),frr=o(` class
method.`),mrr=l(),NL=a("p"),grr=o("This class cannot be instantiated directly using "),Hue=a("code"),hrr=o("__init__()"),prr=o(" (throws an error)."),_rr=l(),bt=a("div"),F(qL.$$.fragment),urr=l(),Uue=a("p"),brr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vrr=l(),_d=a("p"),Frr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Trr=o("not"),Mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Err=o("from_pretrained()"),Crr=o(" to load the model weights."),wrr=l(),F(o6.$$.fragment),Arr=l(),fo=a("div"),F(jL.$$.fragment),Lrr=l(),Yue=a("p"),yrr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xrr=l(),Oa=a("p"),$rr=o("The model class to instantiate is selected based on the "),Kue=a("code"),krr=o("model_type"),Srr=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Rrr=o("pretrained_model_name_or_path"),Prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),Brr=o("pretrained_model_name_or_path"),Irr=o(":"),Nrr=l(),Kr=a("ul"),r6=a("li"),o1e=a("strong"),qrr=o("data2vec-audio"),jrr=o(" \u2014 "),Dz=a("a"),Drr=o("Data2VecAudioForAudioFrameClassification"),Grr=o(" (Data2VecAudio model)"),Orr=l(),t6=a("li"),r1e=a("strong"),Vrr=o("unispeech-sat"),Xrr=o(" \u2014 "),Gz=a("a"),zrr=o("UniSpeechSatForAudioFrameClassification"),Wrr=o(" (UniSpeechSat model)"),Qrr=l(),a6=a("li"),t1e=a("strong"),Hrr=o("wav2vec2"),Urr=o(" \u2014 "),Oz=a("a"),Jrr=o("Wav2Vec2ForAudioFrameClassification"),Yrr=o(" (Wav2Vec2 model)"),Krr=l(),n6=a("li"),a1e=a("strong"),Zrr=o("wav2vec2-conformer"),etr=o(" \u2014 "),Vz=a("a"),otr=o("Wav2Vec2ConformerForAudioFrameClassification"),rtr=o(" (Wav2Vec2-Conformer model)"),ttr=l(),s6=a("li"),n1e=a("strong"),atr=o("wavlm"),ntr=o(" \u2014 "),Xz=a("a"),str=o("WavLMForAudioFrameClassification"),ltr=o(" (WavLM model)"),itr=l(),l6=a("p"),dtr=o("The model is set in evaluation mode by default using "),s1e=a("code"),ctr=o("model.eval()"),ftr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=a("code"),mtr=o("model.train()"),gtr=l(),F(i6.$$.fragment),hDe=l(),ud=a("h2"),d6=a("a"),i1e=a("span"),F(DL.$$.fragment),htr=l(),d1e=a("span"),ptr=o("AutoModelForCTC"),pDe=l(),Vo=a("div"),F(GL.$$.fragment),_tr=l(),bd=a("p"),utr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zz=a("a"),btr=o("from_pretrained()"),vtr=o(" class method or the "),Wz=a("a"),Ftr=o("from_config()"),Ttr=o(` class
method.`),Mtr=l(),OL=a("p"),Etr=o("This class cannot be instantiated directly using "),c1e=a("code"),Ctr=o("__init__()"),wtr=o(" (throws an error)."),Atr=l(),vt=a("div"),F(VL.$$.fragment),Ltr=l(),f1e=a("p"),ytr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xtr=l(),vd=a("p"),$tr=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),ktr=o("not"),Str=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Rtr=o("from_pretrained()"),Ptr=o(" to load the model weights."),Btr=l(),F(c6.$$.fragment),Itr=l(),mo=a("div"),F(XL.$$.fragment),Ntr=l(),g1e=a("p"),qtr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jtr=l(),Va=a("p"),Dtr=o("The model class to instantiate is selected based on the "),h1e=a("code"),Gtr=o("model_type"),Otr=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Vtr=o("pretrained_model_name_or_path"),Xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),ztr=o("pretrained_model_name_or_path"),Wtr=o(":"),Qtr=l(),Le=a("ul"),f6=a("li"),u1e=a("strong"),Htr=o("data2vec-audio"),Utr=o(" \u2014 "),Hz=a("a"),Jtr=o("Data2VecAudioForCTC"),Ytr=o(" (Data2VecAudio model)"),Ktr=l(),m6=a("li"),b1e=a("strong"),Ztr=o("hubert"),ear=o(" \u2014 "),Uz=a("a"),oar=o("HubertForCTC"),rar=o(" (Hubert model)"),tar=l(),g6=a("li"),v1e=a("strong"),aar=o("mctct"),nar=o(" \u2014 "),Jz=a("a"),sar=o("MCTCTForCTC"),lar=o(" (M-CTC-T model)"),iar=l(),h6=a("li"),F1e=a("strong"),dar=o("sew"),car=o(" \u2014 "),Yz=a("a"),far=o("SEWForCTC"),mar=o(" (SEW model)"),gar=l(),p6=a("li"),T1e=a("strong"),har=o("sew-d"),par=o(" \u2014 "),Kz=a("a"),_ar=o("SEWDForCTC"),uar=o(" (SEW-D model)"),bar=l(),_6=a("li"),M1e=a("strong"),Far=o("unispeech"),Tar=o(" \u2014 "),Zz=a("a"),Mar=o("UniSpeechForCTC"),Ear=o(" (UniSpeech model)"),Car=l(),u6=a("li"),E1e=a("strong"),war=o("unispeech-sat"),Aar=o(" \u2014 "),eW=a("a"),Lar=o("UniSpeechSatForCTC"),yar=o(" (UniSpeechSat model)"),xar=l(),b6=a("li"),C1e=a("strong"),$ar=o("wav2vec2"),kar=o(" \u2014 "),oW=a("a"),Sar=o("Wav2Vec2ForCTC"),Rar=o(" (Wav2Vec2 model)"),Par=l(),v6=a("li"),w1e=a("strong"),Bar=o("wav2vec2-conformer"),Iar=o(" \u2014 "),rW=a("a"),Nar=o("Wav2Vec2ConformerForCTC"),qar=o(" (Wav2Vec2-Conformer model)"),jar=l(),F6=a("li"),A1e=a("strong"),Dar=o("wavlm"),Gar=o(" \u2014 "),tW=a("a"),Oar=o("WavLMForCTC"),Var=o(" (WavLM model)"),Xar=l(),T6=a("p"),zar=o("The model is set in evaluation mode by default using "),L1e=a("code"),War=o("model.eval()"),Qar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),Har=o("model.train()"),Uar=l(),F(M6.$$.fragment),_De=l(),Fd=a("h2"),E6=a("a"),x1e=a("span"),F(zL.$$.fragment),Jar=l(),$1e=a("span"),Yar=o("AutoModelForSpeechSeq2Seq"),uDe=l(),Xo=a("div"),F(WL.$$.fragment),Kar=l(),Td=a("p"),Zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aW=a("a"),enr=o("from_pretrained()"),onr=o(" class method or the "),nW=a("a"),rnr=o("from_config()"),tnr=o(` class
method.`),anr=l(),QL=a("p"),nnr=o("This class cannot be instantiated directly using "),k1e=a("code"),snr=o("__init__()"),lnr=o(" (throws an error)."),inr=l(),Ft=a("div"),F(HL.$$.fragment),dnr=l(),S1e=a("p"),cnr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fnr=l(),Md=a("p"),mnr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),gnr=o("not"),hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),pnr=o("from_pretrained()"),_nr=o(" to load the model weights."),unr=l(),F(C6.$$.fragment),bnr=l(),go=a("div"),F(UL.$$.fragment),vnr=l(),P1e=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Tnr=l(),Xa=a("p"),Mnr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Enr=o("model_type"),Cnr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Lnr=o("pretrained_model_name_or_path"),ynr=o(":"),xnr=l(),JL=a("ul"),w6=a("li"),q1e=a("strong"),$nr=o("speech-encoder-decoder"),knr=o(" \u2014 "),lW=a("a"),Snr=o("SpeechEncoderDecoderModel"),Rnr=o(" (Speech Encoder decoder model)"),Pnr=l(),A6=a("li"),j1e=a("strong"),Bnr=o("speech_to_text"),Inr=o(" \u2014 "),iW=a("a"),Nnr=o("Speech2TextForConditionalGeneration"),qnr=o(" (Speech2Text model)"),jnr=l(),L6=a("p"),Dnr=o("The model is set in evaluation mode by default using "),D1e=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),Vnr=o("model.train()"),Xnr=l(),F(y6.$$.fragment),bDe=l(),Ed=a("h2"),x6=a("a"),O1e=a("span"),F(YL.$$.fragment),znr=l(),V1e=a("span"),Wnr=o("AutoModelForAudioXVector"),vDe=l(),zo=a("div"),F(KL.$$.fragment),Qnr=l(),Cd=a("p"),Hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dW=a("a"),Unr=o("from_pretrained()"),Jnr=o(" class method or the "),cW=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),ZL=a("p"),esr=o("This class cannot be instantiated directly using "),X1e=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Tt=a("div"),F(ey.$$.fragment),asr=l(),z1e=a("p"),nsr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ssr=l(),wd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F($6.$$.fragment),gsr=l(),ho=a("div"),F(oy.$$.fragment),hsr=l(),Q1e=a("p"),psr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_sr=l(),za=a("p"),usr=o("The model class to instantiate is selected based on the "),H1e=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),Zr=a("ul"),k6=a("li"),Y1e=a("strong"),wsr=o("data2vec-audio"),Asr=o(" \u2014 "),mW=a("a"),Lsr=o("Data2VecAudioForXVector"),ysr=o(" (Data2VecAudio model)"),xsr=l(),S6=a("li"),K1e=a("strong"),$sr=o("unispeech-sat"),ksr=o(" \u2014 "),gW=a("a"),Ssr=o("UniSpeechSatForXVector"),Rsr=o(" (UniSpeechSat model)"),Psr=l(),R6=a("li"),Z1e=a("strong"),Bsr=o("wav2vec2"),Isr=o(" \u2014 "),hW=a("a"),Nsr=o("Wav2Vec2ForXVector"),qsr=o(" (Wav2Vec2 model)"),jsr=l(),P6=a("li"),ebe=a("strong"),Dsr=o("wav2vec2-conformer"),Gsr=o(" \u2014 "),pW=a("a"),Osr=o("Wav2Vec2ConformerForXVector"),Vsr=o(" (Wav2Vec2-Conformer model)"),Xsr=l(),B6=a("li"),obe=a("strong"),zsr=o("wavlm"),Wsr=o(" \u2014 "),_W=a("a"),Qsr=o("WavLMForXVector"),Hsr=o(" (WavLM model)"),Usr=l(),I6=a("p"),Jsr=o("The model is set in evaluation mode by default using "),rbe=a("code"),Ysr=o("model.eval()"),Ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),Zsr=o("model.train()"),elr=l(),F(N6.$$.fragment),FDe=l(),Ad=a("h2"),q6=a("a"),abe=a("span"),F(ry.$$.fragment),olr=l(),nbe=a("span"),rlr=o("AutoModelForMaskedImageModeling"),TDe=l(),Wo=a("div"),F(ty.$$.fragment),tlr=l(),Ld=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uW=a("a"),nlr=o("from_pretrained()"),slr=o(" class method or the "),bW=a("a"),llr=o("from_config()"),ilr=o(` class
method.`),dlr=l(),ay=a("p"),clr=o("This class cannot be instantiated directly using "),sbe=a("code"),flr=o("__init__()"),mlr=o(" (throws an error)."),glr=l(),Mt=a("div"),F(ny.$$.fragment),hlr=l(),lbe=a("p"),plr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_lr=l(),yd=a("p"),ulr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Flr=o("from_pretrained()"),Tlr=o(" to load the model weights."),Mlr=l(),F(j6.$$.fragment),Elr=l(),po=a("div"),F(sy.$$.fragment),Clr=l(),dbe=a("p"),wlr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Alr=l(),Wa=a("p"),Llr=o("The model class to instantiate is selected based on the "),cbe=a("code"),ylr=o("model_type"),xlr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(":"),Plr=l(),xd=a("ul"),D6=a("li"),gbe=a("strong"),Blr=o("deit"),Ilr=o(" \u2014 "),FW=a("a"),Nlr=o("DeiTForMaskedImageModeling"),qlr=o(" (DeiT model)"),jlr=l(),G6=a("li"),hbe=a("strong"),Dlr=o("swin"),Glr=o(" \u2014 "),TW=a("a"),Olr=o("SwinForMaskedImageModeling"),Vlr=o(" (Swin Transformer model)"),Xlr=l(),O6=a("li"),pbe=a("strong"),zlr=o("vit"),Wlr=o(" \u2014 "),MW=a("a"),Qlr=o("ViTForMaskedImageModeling"),Hlr=o(" (ViT model)"),Ulr=l(),V6=a("p"),Jlr=o("The model is set in evaluation mode by default using "),_be=a("code"),Ylr=o("model.eval()"),Klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=a("code"),Zlr=o("model.train()"),eir=l(),F(X6.$$.fragment),MDe=l(),$d=a("h2"),z6=a("a"),bbe=a("span"),F(ly.$$.fragment),oir=l(),vbe=a("span"),rir=o("AutoModelForObjectDetection"),EDe=l(),Qo=a("div"),F(iy.$$.fragment),tir=l(),kd=a("p"),air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),EW=a("a"),nir=o("from_pretrained()"),sir=o(" class method or the "),CW=a("a"),lir=o("from_config()"),iir=o(` class
method.`),dir=l(),dy=a("p"),cir=o("This class cannot be instantiated directly using "),Fbe=a("code"),fir=o("__init__()"),mir=o(" (throws an error)."),gir=l(),Et=a("div"),F(cy.$$.fragment),hir=l(),Tbe=a("p"),pir=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_ir=l(),Sd=a("p"),uir=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),bir=o("not"),vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),Fir=o("from_pretrained()"),Tir=o(" to load the model weights."),Mir=l(),F(W6.$$.fragment),Eir=l(),_o=a("div"),F(fy.$$.fragment),Cir=l(),Ebe=a("p"),wir=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Air=l(),Qa=a("p"),Lir=o("The model class to instantiate is selected based on the "),Cbe=a("code"),yir=o("model_type"),xir=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(":"),Pir=l(),my=a("ul"),Q6=a("li"),Lbe=a("strong"),Bir=o("detr"),Iir=o(" \u2014 "),AW=a("a"),Nir=o("DetrForObjectDetection"),qir=o(" (DETR model)"),jir=l(),H6=a("li"),ybe=a("strong"),Dir=o("yolos"),Gir=o(" \u2014 "),LW=a("a"),Oir=o("YolosForObjectDetection"),Vir=o(" (YOLOS model)"),Xir=l(),U6=a("p"),zir=o("The model is set in evaluation mode by default using "),xbe=a("code"),Wir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),Hir=o("model.train()"),Uir=l(),F(J6.$$.fragment),CDe=l(),Rd=a("h2"),Y6=a("a"),kbe=a("span"),F(gy.$$.fragment),Jir=l(),Sbe=a("span"),Yir=o("AutoModelForImageSegmentation"),wDe=l(),Ho=a("div"),F(hy.$$.fragment),Kir=l(),Pd=a("p"),Zir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),yW=a("a"),edr=o("from_pretrained()"),odr=o(" class method or the "),xW=a("a"),rdr=o("from_config()"),tdr=o(` class
method.`),adr=l(),py=a("p"),ndr=o("This class cannot be instantiated directly using "),Rbe=a("code"),sdr=o("__init__()"),ldr=o(" (throws an error)."),idr=l(),Ct=a("div"),F(_y.$$.fragment),ddr=l(),Pbe=a("p"),cdr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fdr=l(),Bd=a("p"),mdr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),gdr=o("not"),hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),pdr=o("from_pretrained()"),_dr=o(" to load the model weights."),udr=l(),F(K6.$$.fragment),bdr=l(),uo=a("div"),F(uy.$$.fragment),vdr=l(),Ibe=a("p"),Fdr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tdr=l(),Ha=a("p"),Mdr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Ldr=o("pretrained_model_name_or_path"),ydr=o(":"),xdr=l(),Dbe=a("ul"),Z6=a("li"),Gbe=a("strong"),$dr=o("detr"),kdr=o(" \u2014 "),kW=a("a"),Sdr=o("DetrForSegmentation"),Rdr=o(" (DETR model)"),Pdr=l(),eT=a("p"),Bdr=o("The model is set in evaluation mode by default using "),Obe=a("code"),Idr=o("model.eval()"),Ndr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=a("code"),qdr=o("model.train()"),jdr=l(),F(oT.$$.fragment),ADe=l(),Id=a("h2"),rT=a("a"),Xbe=a("span"),F(by.$$.fragment),Ddr=l(),zbe=a("span"),Gdr=o("AutoModelForSemanticSegmentation"),LDe=l(),Uo=a("div"),F(vy.$$.fragment),Odr=l(),Nd=a("p"),Vdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),SW=a("a"),Xdr=o("from_pretrained()"),zdr=o(" class method or the "),RW=a("a"),Wdr=o("from_config()"),Qdr=o(` class
method.`),Hdr=l(),Fy=a("p"),Udr=o("This class cannot be instantiated directly using "),Wbe=a("code"),Jdr=o("__init__()"),Ydr=o(" (throws an error)."),Kdr=l(),wt=a("div"),F(Ty.$$.fragment),Zdr=l(),Qbe=a("p"),ecr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ocr=l(),qd=a("p"),rcr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),tcr=o("not"),acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),ncr=o("from_pretrained()"),scr=o(" to load the model weights."),lcr=l(),F(tT.$$.fragment),icr=l(),bo=a("div"),F(My.$$.fragment),dcr=l(),Ube=a("p"),ccr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fcr=l(),Ua=a("p"),mcr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),gcr=o("model_type"),hcr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),pcr=o("pretrained_model_name_or_path"),_cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),ucr=o("pretrained_model_name_or_path"),bcr=o(":"),vcr=l(),Ja=a("ul"),aT=a("li"),Zbe=a("strong"),Fcr=o("beit"),Tcr=o(" \u2014 "),BW=a("a"),Mcr=o("BeitForSemanticSegmentation"),Ecr=o(" (BEiT model)"),Ccr=l(),nT=a("li"),e2e=a("strong"),wcr=o("data2vec-vision"),Acr=o(" \u2014 "),IW=a("a"),Lcr=o("Data2VecVisionForSemanticSegmentation"),ycr=o(" (Data2VecVision model)"),xcr=l(),sT=a("li"),o2e=a("strong"),$cr=o("dpt"),kcr=o(" \u2014 "),NW=a("a"),Scr=o("DPTForSemanticSegmentation"),Rcr=o(" (DPT model)"),Pcr=l(),lT=a("li"),r2e=a("strong"),Bcr=o("segformer"),Icr=o(" \u2014 "),qW=a("a"),Ncr=o("SegformerForSemanticSegmentation"),qcr=o(" (SegFormer model)"),jcr=l(),iT=a("p"),Dcr=o("The model is set in evaluation mode by default using "),t2e=a("code"),Gcr=o("model.eval()"),Ocr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),Vcr=o("model.train()"),Xcr=l(),F(dT.$$.fragment),yDe=l(),jd=a("h2"),cT=a("a"),n2e=a("span"),F(Ey.$$.fragment),zcr=l(),s2e=a("span"),Wcr=o("AutoModelForInstanceSegmentation"),xDe=l(),Jo=a("div"),F(Cy.$$.fragment),Qcr=l(),Dd=a("p"),Hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jW=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" class method or the "),DW=a("a"),Ycr=o("from_config()"),Kcr=o(` class
method.`),Zcr=l(),wy=a("p"),efr=o("This class cannot be instantiated directly using "),l2e=a("code"),ofr=o("__init__()"),rfr=o(" (throws an error)."),tfr=l(),At=a("div"),F(Ay.$$.fragment),afr=l(),i2e=a("p"),nfr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),sfr=l(),Gd=a("p"),lfr=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),ifr=o("not"),dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),cfr=o("from_pretrained()"),ffr=o(" to load the model weights."),mfr=l(),F(fT.$$.fragment),gfr=l(),vo=a("div"),F(Ly.$$.fragment),hfr=l(),c2e=a("p"),pfr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_fr=l(),Ya=a("p"),ufr=o("The model class to instantiate is selected based on the "),f2e=a("code"),bfr=o("model_type"),vfr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),Ffr=o("pretrained_model_name_or_path"),Tfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),Cfr=l(),h2e=a("ul"),mT=a("li"),p2e=a("strong"),wfr=o("maskformer"),Afr=o(" \u2014 "),OW=a("a"),Lfr=o("MaskFormerForInstanceSegmentation"),yfr=o(" (MaskFormer model)"),xfr=l(),gT=a("p"),$fr=o("The model is set in evaluation mode by default using "),_2e=a("code"),kfr=o("model.eval()"),Sfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),Rfr=o("model.train()"),Pfr=l(),F(hT.$$.fragment),$De=l(),Od=a("h2"),pT=a("a"),b2e=a("span"),F(yy.$$.fragment),Bfr=l(),v2e=a("span"),Ifr=o("TFAutoModel"),kDe=l(),Yo=a("div"),F(xy.$$.fragment),Nfr=l(),Vd=a("p"),qfr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VW=a("a"),jfr=o("from_pretrained()"),Dfr=o(" class method or the "),XW=a("a"),Gfr=o("from_config()"),Ofr=o(` class
method.`),Vfr=l(),$y=a("p"),Xfr=o("This class cannot be instantiated directly using "),F2e=a("code"),zfr=o("__init__()"),Wfr=o(" (throws an error)."),Qfr=l(),Lt=a("div"),F(ky.$$.fragment),Hfr=l(),T2e=a("p"),Ufr=o("Instantiates one of the base model classes of the library from a configuration."),Jfr=l(),Xd=a("p"),Yfr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),Kfr=o("not"),Zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),emr=o("from_pretrained()"),omr=o(" to load the model weights."),rmr=l(),F(_T.$$.fragment),tmr=l(),wr=a("div"),F(Sy.$$.fragment),amr=l(),E2e=a("p"),nmr=o("Instantiate one of the base model classes of the library from a pretrained model."),smr=l(),Ka=a("p"),lmr=o("The model class to instantiate is selected based on the "),C2e=a("code"),imr=o("model_type"),dmr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),cmr=o("pretrained_model_name_or_path"),fmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),mmr=o("pretrained_model_name_or_path"),gmr=o(":"),hmr=l(),q=a("ul"),uT=a("li"),L2e=a("strong"),pmr=o("albert"),_mr=o(" \u2014 "),WW=a("a"),umr=o("TFAlbertModel"),bmr=o(" (ALBERT model)"),vmr=l(),bT=a("li"),y2e=a("strong"),Fmr=o("bart"),Tmr=o(" \u2014 "),QW=a("a"),Mmr=o("TFBartModel"),Emr=o(" (BART model)"),Cmr=l(),vT=a("li"),x2e=a("strong"),wmr=o("bert"),Amr=o(" \u2014 "),HW=a("a"),Lmr=o("TFBertModel"),ymr=o(" (BERT model)"),xmr=l(),FT=a("li"),$2e=a("strong"),$mr=o("blenderbot"),kmr=o(" \u2014 "),UW=a("a"),Smr=o("TFBlenderbotModel"),Rmr=o(" (Blenderbot model)"),Pmr=l(),TT=a("li"),k2e=a("strong"),Bmr=o("blenderbot-small"),Imr=o(" \u2014 "),JW=a("a"),Nmr=o("TFBlenderbotSmallModel"),qmr=o(" (BlenderbotSmall model)"),jmr=l(),MT=a("li"),S2e=a("strong"),Dmr=o("camembert"),Gmr=o(" \u2014 "),YW=a("a"),Omr=o("TFCamembertModel"),Vmr=o(" (CamemBERT model)"),Xmr=l(),ET=a("li"),R2e=a("strong"),zmr=o("clip"),Wmr=o(" \u2014 "),KW=a("a"),Qmr=o("TFCLIPModel"),Hmr=o(" (CLIP model)"),Umr=l(),CT=a("li"),P2e=a("strong"),Jmr=o("convbert"),Ymr=o(" \u2014 "),ZW=a("a"),Kmr=o("TFConvBertModel"),Zmr=o(" (ConvBERT model)"),egr=l(),wT=a("li"),B2e=a("strong"),ogr=o("convnext"),rgr=o(" \u2014 "),eQ=a("a"),tgr=o("TFConvNextModel"),agr=o(" (ConvNeXT model)"),ngr=l(),AT=a("li"),I2e=a("strong"),sgr=o("ctrl"),lgr=o(" \u2014 "),oQ=a("a"),igr=o("TFCTRLModel"),dgr=o(" (CTRL model)"),cgr=l(),LT=a("li"),N2e=a("strong"),fgr=o("data2vec-vision"),mgr=o(" \u2014 "),rQ=a("a"),ggr=o("TFData2VecVisionModel"),hgr=o(" (Data2VecVision model)"),pgr=l(),yT=a("li"),q2e=a("strong"),_gr=o("deberta"),ugr=o(" \u2014 "),tQ=a("a"),bgr=o("TFDebertaModel"),vgr=o(" (DeBERTa model)"),Fgr=l(),xT=a("li"),j2e=a("strong"),Tgr=o("deberta-v2"),Mgr=o(" \u2014 "),aQ=a("a"),Egr=o("TFDebertaV2Model"),Cgr=o(" (DeBERTa-v2 model)"),wgr=l(),$T=a("li"),D2e=a("strong"),Agr=o("distilbert"),Lgr=o(" \u2014 "),nQ=a("a"),ygr=o("TFDistilBertModel"),xgr=o(" (DistilBERT model)"),$gr=l(),kT=a("li"),G2e=a("strong"),kgr=o("dpr"),Sgr=o(" \u2014 "),sQ=a("a"),Rgr=o("TFDPRQuestionEncoder"),Pgr=o(" (DPR model)"),Bgr=l(),ST=a("li"),O2e=a("strong"),Igr=o("electra"),Ngr=o(" \u2014 "),lQ=a("a"),qgr=o("TFElectraModel"),jgr=o(" (ELECTRA model)"),Dgr=l(),RT=a("li"),V2e=a("strong"),Ggr=o("flaubert"),Ogr=o(" \u2014 "),iQ=a("a"),Vgr=o("TFFlaubertModel"),Xgr=o(" (FlauBERT model)"),zgr=l(),Ns=a("li"),X2e=a("strong"),Wgr=o("funnel"),Qgr=o(" \u2014 "),dQ=a("a"),Hgr=o("TFFunnelModel"),Ugr=o(" or "),cQ=a("a"),Jgr=o("TFFunnelBaseModel"),Ygr=o(" (Funnel Transformer model)"),Kgr=l(),PT=a("li"),z2e=a("strong"),Zgr=o("gpt2"),ehr=o(" \u2014 "),fQ=a("a"),ohr=o("TFGPT2Model"),rhr=o(" (OpenAI GPT-2 model)"),thr=l(),BT=a("li"),W2e=a("strong"),ahr=o("gptj"),nhr=o(" \u2014 "),mQ=a("a"),shr=o("TFGPTJModel"),lhr=o(" (GPT-J model)"),ihr=l(),IT=a("li"),Q2e=a("strong"),dhr=o("hubert"),chr=o(" \u2014 "),gQ=a("a"),fhr=o("TFHubertModel"),mhr=o(" (Hubert model)"),ghr=l(),NT=a("li"),H2e=a("strong"),hhr=o("layoutlm"),phr=o(" \u2014 "),hQ=a("a"),_hr=o("TFLayoutLMModel"),uhr=o(" (LayoutLM model)"),bhr=l(),qT=a("li"),U2e=a("strong"),vhr=o("led"),Fhr=o(" \u2014 "),pQ=a("a"),Thr=o("TFLEDModel"),Mhr=o(" (LED model)"),Ehr=l(),jT=a("li"),J2e=a("strong"),Chr=o("longformer"),whr=o(" \u2014 "),_Q=a("a"),Ahr=o("TFLongformerModel"),Lhr=o(" (Longformer model)"),yhr=l(),DT=a("li"),Y2e=a("strong"),xhr=o("lxmert"),$hr=o(" \u2014 "),uQ=a("a"),khr=o("TFLxmertModel"),Shr=o(" (LXMERT model)"),Rhr=l(),GT=a("li"),K2e=a("strong"),Phr=o("marian"),Bhr=o(" \u2014 "),bQ=a("a"),Ihr=o("TFMarianModel"),Nhr=o(" (Marian model)"),qhr=l(),OT=a("li"),Z2e=a("strong"),jhr=o("mbart"),Dhr=o(" \u2014 "),vQ=a("a"),Ghr=o("TFMBartModel"),Ohr=o(" (mBART model)"),Vhr=l(),VT=a("li"),eve=a("strong"),Xhr=o("mobilebert"),zhr=o(" \u2014 "),FQ=a("a"),Whr=o("TFMobileBertModel"),Qhr=o(" (MobileBERT model)"),Hhr=l(),XT=a("li"),ove=a("strong"),Uhr=o("mpnet"),Jhr=o(" \u2014 "),TQ=a("a"),Yhr=o("TFMPNetModel"),Khr=o(" (MPNet model)"),Zhr=l(),zT=a("li"),rve=a("strong"),epr=o("mt5"),opr=o(" \u2014 "),MQ=a("a"),rpr=o("TFMT5Model"),tpr=o(" (MT5 model)"),apr=l(),WT=a("li"),tve=a("strong"),npr=o("openai-gpt"),spr=o(" \u2014 "),EQ=a("a"),lpr=o("TFOpenAIGPTModel"),ipr=o(" (OpenAI GPT model)"),dpr=l(),QT=a("li"),ave=a("strong"),cpr=o("opt"),fpr=o(" \u2014 "),CQ=a("a"),mpr=o("TFOPTModel"),gpr=o(" (OPT model)"),hpr=l(),HT=a("li"),nve=a("strong"),ppr=o("pegasus"),_pr=o(" \u2014 "),wQ=a("a"),upr=o("TFPegasusModel"),bpr=o(" (Pegasus model)"),vpr=l(),UT=a("li"),sve=a("strong"),Fpr=o("rembert"),Tpr=o(" \u2014 "),AQ=a("a"),Mpr=o("TFRemBertModel"),Epr=o(" (RemBERT model)"),Cpr=l(),JT=a("li"),lve=a("strong"),wpr=o("roberta"),Apr=o(" \u2014 "),LQ=a("a"),Lpr=o("TFRobertaModel"),ypr=o(" (RoBERTa model)"),xpr=l(),YT=a("li"),ive=a("strong"),$pr=o("roformer"),kpr=o(" \u2014 "),yQ=a("a"),Spr=o("TFRoFormerModel"),Rpr=o(" (RoFormer model)"),Ppr=l(),KT=a("li"),dve=a("strong"),Bpr=o("speech_to_text"),Ipr=o(" \u2014 "),xQ=a("a"),Npr=o("TFSpeech2TextModel"),qpr=o(" (Speech2Text model)"),jpr=l(),ZT=a("li"),cve=a("strong"),Dpr=o("swin"),Gpr=o(" \u2014 "),$Q=a("a"),Opr=o("TFSwinModel"),Vpr=o(" (Swin Transformer model)"),Xpr=l(),e7=a("li"),fve=a("strong"),zpr=o("t5"),Wpr=o(" \u2014 "),kQ=a("a"),Qpr=o("TFT5Model"),Hpr=o(" (T5 model)"),Upr=l(),o7=a("li"),mve=a("strong"),Jpr=o("tapas"),Ypr=o(" \u2014 "),SQ=a("a"),Kpr=o("TFTapasModel"),Zpr=o(" (TAPAS model)"),e_r=l(),r7=a("li"),gve=a("strong"),o_r=o("transfo-xl"),r_r=o(" \u2014 "),RQ=a("a"),t_r=o("TFTransfoXLModel"),a_r=o(" (Transformer-XL model)"),n_r=l(),t7=a("li"),hve=a("strong"),s_r=o("vit"),l_r=o(" \u2014 "),PQ=a("a"),i_r=o("TFViTModel"),d_r=o(" (ViT model)"),c_r=l(),a7=a("li"),pve=a("strong"),f_r=o("vit_mae"),m_r=o(" \u2014 "),BQ=a("a"),g_r=o("TFViTMAEModel"),h_r=o(" (ViTMAE model)"),p_r=l(),n7=a("li"),_ve=a("strong"),__r=o("wav2vec2"),u_r=o(" \u2014 "),IQ=a("a"),b_r=o("TFWav2Vec2Model"),v_r=o(" (Wav2Vec2 model)"),F_r=l(),s7=a("li"),uve=a("strong"),T_r=o("xlm"),M_r=o(" \u2014 "),NQ=a("a"),E_r=o("TFXLMModel"),C_r=o(" (XLM model)"),w_r=l(),l7=a("li"),bve=a("strong"),A_r=o("xlm-roberta"),L_r=o(" \u2014 "),qQ=a("a"),y_r=o("TFXLMRobertaModel"),x_r=o(" (XLM-RoBERTa model)"),$_r=l(),i7=a("li"),vve=a("strong"),k_r=o("xlnet"),S_r=o(" \u2014 "),jQ=a("a"),R_r=o("TFXLNetModel"),P_r=o(" (XLNet model)"),B_r=l(),F(d7.$$.fragment),SDe=l(),zd=a("h2"),c7=a("a"),Fve=a("span"),F(Ry.$$.fragment),I_r=l(),Tve=a("span"),N_r=o("TFAutoModelForPreTraining"),RDe=l(),Ko=a("div"),F(Py.$$.fragment),q_r=l(),Wd=a("p"),j_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" class method or the "),GQ=a("a"),O_r=o("from_config()"),V_r=o(` class
method.`),X_r=l(),By=a("p"),z_r=o("This class cannot be instantiated directly using "),Mve=a("code"),W_r=o("__init__()"),Q_r=o(" (throws an error)."),H_r=l(),yt=a("div"),F(Iy.$$.fragment),U_r=l(),Eve=a("p"),J_r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y_r=l(),Qd=a("p"),K_r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),Z_r=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(f7.$$.fragment),aur=l(),Ar=a("div"),F(Ny.$$.fragment),nur=l(),wve=a("p"),sur=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lur=l(),Za=a("p"),iur=o("The model class to instantiate is selected based on the "),Ave=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),fur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),pur=l(),se=a("ul"),m7=a("li"),xve=a("strong"),_ur=o("albert"),uur=o(" \u2014 "),VQ=a("a"),bur=o("TFAlbertForPreTraining"),vur=o(" (ALBERT model)"),Fur=l(),g7=a("li"),$ve=a("strong"),Tur=o("bart"),Mur=o(" \u2014 "),XQ=a("a"),Eur=o("TFBartForConditionalGeneration"),Cur=o(" (BART model)"),wur=l(),h7=a("li"),kve=a("strong"),Aur=o("bert"),Lur=o(" \u2014 "),zQ=a("a"),yur=o("TFBertForPreTraining"),xur=o(" (BERT model)"),$ur=l(),p7=a("li"),Sve=a("strong"),kur=o("camembert"),Sur=o(" \u2014 "),WQ=a("a"),Rur=o("TFCamembertForMaskedLM"),Pur=o(" (CamemBERT model)"),Bur=l(),_7=a("li"),Rve=a("strong"),Iur=o("ctrl"),Nur=o(" \u2014 "),QQ=a("a"),qur=o("TFCTRLLMHeadModel"),jur=o(" (CTRL model)"),Dur=l(),u7=a("li"),Pve=a("strong"),Gur=o("distilbert"),Our=o(" \u2014 "),HQ=a("a"),Vur=o("TFDistilBertForMaskedLM"),Xur=o(" (DistilBERT model)"),zur=l(),b7=a("li"),Bve=a("strong"),Wur=o("electra"),Qur=o(" \u2014 "),UQ=a("a"),Hur=o("TFElectraForPreTraining"),Uur=o(" (ELECTRA model)"),Jur=l(),v7=a("li"),Ive=a("strong"),Yur=o("flaubert"),Kur=o(" \u2014 "),JQ=a("a"),Zur=o("TFFlaubertWithLMHeadModel"),e1r=o(" (FlauBERT model)"),o1r=l(),F7=a("li"),Nve=a("strong"),r1r=o("funnel"),t1r=o(" \u2014 "),YQ=a("a"),a1r=o("TFFunnelForPreTraining"),n1r=o(" (Funnel Transformer model)"),s1r=l(),T7=a("li"),qve=a("strong"),l1r=o("gpt2"),i1r=o(" \u2014 "),KQ=a("a"),d1r=o("TFGPT2LMHeadModel"),c1r=o(" (OpenAI GPT-2 model)"),f1r=l(),M7=a("li"),jve=a("strong"),m1r=o("layoutlm"),g1r=o(" \u2014 "),ZQ=a("a"),h1r=o("TFLayoutLMForMaskedLM"),p1r=o(" (LayoutLM model)"),_1r=l(),E7=a("li"),Dve=a("strong"),u1r=o("lxmert"),b1r=o(" \u2014 "),eH=a("a"),v1r=o("TFLxmertForPreTraining"),F1r=o(" (LXMERT model)"),T1r=l(),C7=a("li"),Gve=a("strong"),M1r=o("mobilebert"),E1r=o(" \u2014 "),oH=a("a"),C1r=o("TFMobileBertForPreTraining"),w1r=o(" (MobileBERT model)"),A1r=l(),w7=a("li"),Ove=a("strong"),L1r=o("mpnet"),y1r=o(" \u2014 "),rH=a("a"),x1r=o("TFMPNetForMaskedLM"),$1r=o(" (MPNet model)"),k1r=l(),A7=a("li"),Vve=a("strong"),S1r=o("openai-gpt"),R1r=o(" \u2014 "),tH=a("a"),P1r=o("TFOpenAIGPTLMHeadModel"),B1r=o(" (OpenAI GPT model)"),I1r=l(),L7=a("li"),Xve=a("strong"),N1r=o("roberta"),q1r=o(" \u2014 "),aH=a("a"),j1r=o("TFRobertaForMaskedLM"),D1r=o(" (RoBERTa model)"),G1r=l(),y7=a("li"),zve=a("strong"),O1r=o("t5"),V1r=o(" \u2014 "),nH=a("a"),X1r=o("TFT5ForConditionalGeneration"),z1r=o(" (T5 model)"),W1r=l(),x7=a("li"),Wve=a("strong"),Q1r=o("tapas"),H1r=o(" \u2014 "),sH=a("a"),U1r=o("TFTapasForMaskedLM"),J1r=o(" (TAPAS model)"),Y1r=l(),$7=a("li"),Qve=a("strong"),K1r=o("transfo-xl"),Z1r=o(" \u2014 "),lH=a("a"),ebr=o("TFTransfoXLLMHeadModel"),obr=o(" (Transformer-XL model)"),rbr=l(),k7=a("li"),Hve=a("strong"),tbr=o("vit_mae"),abr=o(" \u2014 "),iH=a("a"),nbr=o("TFViTMAEForPreTraining"),sbr=o(" (ViTMAE model)"),lbr=l(),S7=a("li"),Uve=a("strong"),ibr=o("xlm"),dbr=o(" \u2014 "),dH=a("a"),cbr=o("TFXLMWithLMHeadModel"),fbr=o(" (XLM model)"),mbr=l(),R7=a("li"),Jve=a("strong"),gbr=o("xlm-roberta"),hbr=o(" \u2014 "),cH=a("a"),pbr=o("TFXLMRobertaForMaskedLM"),_br=o(" (XLM-RoBERTa model)"),ubr=l(),P7=a("li"),Yve=a("strong"),bbr=o("xlnet"),vbr=o(" \u2014 "),fH=a("a"),Fbr=o("TFXLNetLMHeadModel"),Tbr=o(" (XLNet model)"),Mbr=l(),F(B7.$$.fragment),PDe=l(),Hd=a("h2"),I7=a("a"),Kve=a("span"),F(qy.$$.fragment),Ebr=l(),Zve=a("span"),Cbr=o("TFAutoModelForCausalLM"),BDe=l(),Zo=a("div"),F(jy.$$.fragment),wbr=l(),Ud=a("p"),Abr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mH=a("a"),Lbr=o("from_pretrained()"),ybr=o(" class method or the "),gH=a("a"),xbr=o("from_config()"),$br=o(` class
method.`),kbr=l(),Dy=a("p"),Sbr=o("This class cannot be instantiated directly using "),e3e=a("code"),Rbr=o("__init__()"),Pbr=o(" (throws an error)."),Bbr=l(),xt=a("div"),F(Gy.$$.fragment),Ibr=l(),o3e=a("p"),Nbr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qbr=l(),Jd=a("p"),jbr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),Dbr=o("not"),Gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),Obr=o("from_pretrained()"),Vbr=o(" to load the model weights."),Xbr=l(),F(N7.$$.fragment),zbr=l(),Lr=a("div"),F(Oy.$$.fragment),Wbr=l(),t3e=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hbr=l(),en=a("p"),Ubr=o("The model class to instantiate is selected based on the "),a3e=a("code"),Jbr=o("model_type"),Ybr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(":"),r2r=l(),Me=a("ul"),q7=a("li"),l3e=a("strong"),t2r=o("bert"),a2r=o(" \u2014 "),pH=a("a"),n2r=o("TFBertLMHeadModel"),s2r=o(" (BERT model)"),l2r=l(),j7=a("li"),i3e=a("strong"),i2r=o("camembert"),d2r=o(" \u2014 "),_H=a("a"),c2r=o("TFCamembertForCausalLM"),f2r=o(" (CamemBERT model)"),m2r=l(),D7=a("li"),d3e=a("strong"),g2r=o("ctrl"),h2r=o(" \u2014 "),uH=a("a"),p2r=o("TFCTRLLMHeadModel"),_2r=o(" (CTRL model)"),u2r=l(),G7=a("li"),c3e=a("strong"),b2r=o("gpt2"),v2r=o(" \u2014 "),bH=a("a"),F2r=o("TFGPT2LMHeadModel"),T2r=o(" (OpenAI GPT-2 model)"),M2r=l(),O7=a("li"),f3e=a("strong"),E2r=o("gptj"),C2r=o(" \u2014 "),vH=a("a"),w2r=o("TFGPTJForCausalLM"),A2r=o(" (GPT-J model)"),L2r=l(),V7=a("li"),m3e=a("strong"),y2r=o("openai-gpt"),x2r=o(" \u2014 "),FH=a("a"),$2r=o("TFOpenAIGPTLMHeadModel"),k2r=o(" (OpenAI GPT model)"),S2r=l(),X7=a("li"),g3e=a("strong"),R2r=o("opt"),P2r=o(" \u2014 "),TH=a("a"),B2r=o("TFOPTForCausalLM"),I2r=o(" (OPT model)"),N2r=l(),z7=a("li"),h3e=a("strong"),q2r=o("rembert"),j2r=o(" \u2014 "),MH=a("a"),D2r=o("TFRemBertForCausalLM"),G2r=o(" (RemBERT model)"),O2r=l(),W7=a("li"),p3e=a("strong"),V2r=o("roberta"),X2r=o(" \u2014 "),EH=a("a"),z2r=o("TFRobertaForCausalLM"),W2r=o(" (RoBERTa model)"),Q2r=l(),Q7=a("li"),_3e=a("strong"),H2r=o("roformer"),U2r=o(" \u2014 "),CH=a("a"),J2r=o("TFRoFormerForCausalLM"),Y2r=o(" (RoFormer model)"),K2r=l(),H7=a("li"),u3e=a("strong"),Z2r=o("transfo-xl"),evr=o(" \u2014 "),wH=a("a"),ovr=o("TFTransfoXLLMHeadModel"),rvr=o(" (Transformer-XL model)"),tvr=l(),U7=a("li"),b3e=a("strong"),avr=o("xlm"),nvr=o(" \u2014 "),AH=a("a"),svr=o("TFXLMWithLMHeadModel"),lvr=o(" (XLM model)"),ivr=l(),J7=a("li"),v3e=a("strong"),dvr=o("xlnet"),cvr=o(" \u2014 "),LH=a("a"),fvr=o("TFXLNetLMHeadModel"),mvr=o(" (XLNet model)"),gvr=l(),F(Y7.$$.fragment),IDe=l(),Yd=a("h2"),K7=a("a"),F3e=a("span"),F(Vy.$$.fragment),hvr=l(),T3e=a("span"),pvr=o("TFAutoModelForImageClassification"),NDe=l(),er=a("div"),F(Xy.$$.fragment),_vr=l(),Kd=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yH=a("a"),bvr=o("from_pretrained()"),vvr=o(" class method or the "),xH=a("a"),Fvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),zy=a("p"),Evr=o("This class cannot be instantiated directly using "),M3e=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),$t=a("div"),F(Wy.$$.fragment),Lvr=l(),E3e=a("p"),yvr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xvr=l(),Zd=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),C3e=a("strong"),kvr=o("not"),Svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Bvr=l(),F(Z7.$$.fragment),Ivr=l(),yr=a("div"),F(Qy.$$.fragment),Nvr=l(),w3e=a("p"),qvr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jvr=l(),on=a("p"),Dvr=o("The model class to instantiate is selected based on the "),A3e=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),L3e=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y3e=a("code"),zvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Qvr=l(),rn=a("ul"),e9=a("li"),x3e=a("strong"),Hvr=o("convnext"),Uvr=o(" \u2014 "),kH=a("a"),Jvr=o("TFConvNextForImageClassification"),Yvr=o(" (ConvNeXT model)"),Kvr=l(),o9=a("li"),$3e=a("strong"),Zvr=o("data2vec-vision"),e3r=o(" \u2014 "),SH=a("a"),o3r=o("TFData2VecVisionForImageClassification"),r3r=o(" (Data2VecVision model)"),t3r=l(),r9=a("li"),k3e=a("strong"),a3r=o("swin"),n3r=o(" \u2014 "),RH=a("a"),s3r=o("TFSwinForImageClassification"),l3r=o(" (Swin Transformer model)"),i3r=l(),t9=a("li"),S3e=a("strong"),d3r=o("vit"),c3r=o(" \u2014 "),PH=a("a"),f3r=o("TFViTForImageClassification"),m3r=o(" (ViT model)"),g3r=l(),F(a9.$$.fragment),qDe=l(),ec=a("h2"),n9=a("a"),R3e=a("span"),F(Hy.$$.fragment),h3r=l(),P3e=a("span"),p3r=o("TFAutoModelForMaskedLM"),jDe=l(),or=a("div"),F(Uy.$$.fragment),_3r=l(),oc=a("p"),u3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BH=a("a"),b3r=o("from_pretrained()"),v3r=o(" class method or the "),IH=a("a"),F3r=o("from_config()"),T3r=o(` class
method.`),M3r=l(),Jy=a("p"),E3r=o("This class cannot be instantiated directly using "),B3e=a("code"),C3r=o("__init__()"),w3r=o(" (throws an error)."),A3r=l(),kt=a("div"),F(Yy.$$.fragment),L3r=l(),I3e=a("p"),y3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x3r=l(),rc=a("p"),$3r=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),k3r=o("not"),S3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),R3r=o("from_pretrained()"),P3r=o(" to load the model weights."),B3r=l(),F(s9.$$.fragment),I3r=l(),xr=a("div"),F(Ky.$$.fragment),N3r=l(),q3e=a("p"),q3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j3r=l(),tn=a("p"),D3r=o("The model class to instantiate is selected based on the "),j3e=a("code"),G3r=o("model_type"),O3r=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),V3r=o("pretrained_model_name_or_path"),X3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),z3r=o("pretrained_model_name_or_path"),W3r=o(":"),Q3r=l(),ie=a("ul"),l9=a("li"),O3e=a("strong"),H3r=o("albert"),U3r=o(" \u2014 "),qH=a("a"),J3r=o("TFAlbertForMaskedLM"),Y3r=o(" (ALBERT model)"),K3r=l(),i9=a("li"),V3e=a("strong"),Z3r=o("bert"),eFr=o(" \u2014 "),jH=a("a"),oFr=o("TFBertForMaskedLM"),rFr=o(" (BERT model)"),tFr=l(),d9=a("li"),X3e=a("strong"),aFr=o("camembert"),nFr=o(" \u2014 "),DH=a("a"),sFr=o("TFCamembertForMaskedLM"),lFr=o(" (CamemBERT model)"),iFr=l(),c9=a("li"),z3e=a("strong"),dFr=o("convbert"),cFr=o(" \u2014 "),GH=a("a"),fFr=o("TFConvBertForMaskedLM"),mFr=o(" (ConvBERT model)"),gFr=l(),f9=a("li"),W3e=a("strong"),hFr=o("deberta"),pFr=o(" \u2014 "),OH=a("a"),_Fr=o("TFDebertaForMaskedLM"),uFr=o(" (DeBERTa model)"),bFr=l(),m9=a("li"),Q3e=a("strong"),vFr=o("deberta-v2"),FFr=o(" \u2014 "),VH=a("a"),TFr=o("TFDebertaV2ForMaskedLM"),MFr=o(" (DeBERTa-v2 model)"),EFr=l(),g9=a("li"),H3e=a("strong"),CFr=o("distilbert"),wFr=o(" \u2014 "),XH=a("a"),AFr=o("TFDistilBertForMaskedLM"),LFr=o(" (DistilBERT model)"),yFr=l(),h9=a("li"),U3e=a("strong"),xFr=o("electra"),$Fr=o(" \u2014 "),zH=a("a"),kFr=o("TFElectraForMaskedLM"),SFr=o(" (ELECTRA model)"),RFr=l(),p9=a("li"),J3e=a("strong"),PFr=o("flaubert"),BFr=o(" \u2014 "),WH=a("a"),IFr=o("TFFlaubertWithLMHeadModel"),NFr=o(" (FlauBERT model)"),qFr=l(),_9=a("li"),Y3e=a("strong"),jFr=o("funnel"),DFr=o(" \u2014 "),QH=a("a"),GFr=o("TFFunnelForMaskedLM"),OFr=o(" (Funnel Transformer model)"),VFr=l(),u9=a("li"),K3e=a("strong"),XFr=o("layoutlm"),zFr=o(" \u2014 "),HH=a("a"),WFr=o("TFLayoutLMForMaskedLM"),QFr=o(" (LayoutLM model)"),HFr=l(),b9=a("li"),Z3e=a("strong"),UFr=o("longformer"),JFr=o(" \u2014 "),UH=a("a"),YFr=o("TFLongformerForMaskedLM"),KFr=o(" (Longformer model)"),ZFr=l(),v9=a("li"),eFe=a("strong"),e6r=o("mobilebert"),o6r=o(" \u2014 "),JH=a("a"),r6r=o("TFMobileBertForMaskedLM"),t6r=o(" (MobileBERT model)"),a6r=l(),F9=a("li"),oFe=a("strong"),n6r=o("mpnet"),s6r=o(" \u2014 "),YH=a("a"),l6r=o("TFMPNetForMaskedLM"),i6r=o(" (MPNet model)"),d6r=l(),T9=a("li"),rFe=a("strong"),c6r=o("rembert"),f6r=o(" \u2014 "),KH=a("a"),m6r=o("TFRemBertForMaskedLM"),g6r=o(" (RemBERT model)"),h6r=l(),M9=a("li"),tFe=a("strong"),p6r=o("roberta"),_6r=o(" \u2014 "),ZH=a("a"),u6r=o("TFRobertaForMaskedLM"),b6r=o(" (RoBERTa model)"),v6r=l(),E9=a("li"),aFe=a("strong"),F6r=o("roformer"),T6r=o(" \u2014 "),eU=a("a"),M6r=o("TFRoFormerForMaskedLM"),E6r=o(" (RoFormer model)"),C6r=l(),C9=a("li"),nFe=a("strong"),w6r=o("tapas"),A6r=o(" \u2014 "),oU=a("a"),L6r=o("TFTapasForMaskedLM"),y6r=o(" (TAPAS model)"),x6r=l(),w9=a("li"),sFe=a("strong"),$6r=o("xlm"),k6r=o(" \u2014 "),rU=a("a"),S6r=o("TFXLMWithLMHeadModel"),R6r=o(" (XLM model)"),P6r=l(),A9=a("li"),lFe=a("strong"),B6r=o("xlm-roberta"),I6r=o(" \u2014 "),tU=a("a"),N6r=o("TFXLMRobertaForMaskedLM"),q6r=o(" (XLM-RoBERTa model)"),j6r=l(),F(L9.$$.fragment),DDe=l(),tc=a("h2"),y9=a("a"),iFe=a("span"),F(Zy.$$.fragment),D6r=l(),dFe=a("span"),G6r=o("TFAutoModelForSeq2SeqLM"),GDe=l(),rr=a("div"),F(e8.$$.fragment),O6r=l(),ac=a("p"),V6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aU=a("a"),X6r=o("from_pretrained()"),z6r=o(" class method or the "),nU=a("a"),W6r=o("from_config()"),Q6r=o(` class
method.`),H6r=l(),o8=a("p"),U6r=o("This class cannot be instantiated directly using "),cFe=a("code"),J6r=o("__init__()"),Y6r=o(" (throws an error)."),K6r=l(),St=a("div"),F(r8.$$.fragment),Z6r=l(),fFe=a("p"),eTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oTr=l(),nc=a("p"),rTr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),tTr=o("not"),aTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),nTr=o("from_pretrained()"),sTr=o(" to load the model weights."),lTr=l(),F(x9.$$.fragment),iTr=l(),$r=a("div"),F(t8.$$.fragment),dTr=l(),gFe=a("p"),cTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fTr=l(),an=a("p"),mTr=o("The model class to instantiate is selected based on the "),hFe=a("code"),gTr=o("model_type"),hTr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),pTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),uTr=o("pretrained_model_name_or_path"),bTr=o(":"),vTr=l(),ye=a("ul"),$9=a("li"),uFe=a("strong"),FTr=o("bart"),TTr=o(" \u2014 "),lU=a("a"),MTr=o("TFBartForConditionalGeneration"),ETr=o(" (BART model)"),CTr=l(),k9=a("li"),bFe=a("strong"),wTr=o("blenderbot"),ATr=o(" \u2014 "),iU=a("a"),LTr=o("TFBlenderbotForConditionalGeneration"),yTr=o(" (Blenderbot model)"),xTr=l(),S9=a("li"),vFe=a("strong"),$Tr=o("blenderbot-small"),kTr=o(" \u2014 "),dU=a("a"),STr=o("TFBlenderbotSmallForConditionalGeneration"),RTr=o(" (BlenderbotSmall model)"),PTr=l(),R9=a("li"),FFe=a("strong"),BTr=o("encoder-decoder"),ITr=o(" \u2014 "),cU=a("a"),NTr=o("TFEncoderDecoderModel"),qTr=o(" (Encoder decoder model)"),jTr=l(),P9=a("li"),TFe=a("strong"),DTr=o("led"),GTr=o(" \u2014 "),fU=a("a"),OTr=o("TFLEDForConditionalGeneration"),VTr=o(" (LED model)"),XTr=l(),B9=a("li"),MFe=a("strong"),zTr=o("marian"),WTr=o(" \u2014 "),mU=a("a"),QTr=o("TFMarianMTModel"),HTr=o(" (Marian model)"),UTr=l(),I9=a("li"),EFe=a("strong"),JTr=o("mbart"),YTr=o(" \u2014 "),gU=a("a"),KTr=o("TFMBartForConditionalGeneration"),ZTr=o(" (mBART model)"),e7r=l(),N9=a("li"),CFe=a("strong"),o7r=o("mt5"),r7r=o(" \u2014 "),hU=a("a"),t7r=o("TFMT5ForConditionalGeneration"),a7r=o(" (MT5 model)"),n7r=l(),q9=a("li"),wFe=a("strong"),s7r=o("pegasus"),l7r=o(" \u2014 "),pU=a("a"),i7r=o("TFPegasusForConditionalGeneration"),d7r=o(" (Pegasus model)"),c7r=l(),j9=a("li"),AFe=a("strong"),f7r=o("t5"),m7r=o(" \u2014 "),_U=a("a"),g7r=o("TFT5ForConditionalGeneration"),h7r=o(" (T5 model)"),p7r=l(),F(D9.$$.fragment),ODe=l(),sc=a("h2"),G9=a("a"),LFe=a("span"),F(a8.$$.fragment),_7r=l(),yFe=a("span"),u7r=o("TFAutoModelForSequenceClassification"),VDe=l(),tr=a("div"),F(n8.$$.fragment),b7r=l(),lc=a("p"),v7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uU=a("a"),F7r=o("from_pretrained()"),T7r=o(" class method or the "),bU=a("a"),M7r=o("from_config()"),E7r=o(` class
method.`),C7r=l(),s8=a("p"),w7r=o("This class cannot be instantiated directly using "),xFe=a("code"),A7r=o("__init__()"),L7r=o(" (throws an error)."),y7r=l(),Rt=a("div"),F(l8.$$.fragment),x7r=l(),$Fe=a("p"),$7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k7r=l(),ic=a("p"),S7r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),R7r=o("not"),P7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),B7r=o("from_pretrained()"),I7r=o(" to load the model weights."),N7r=l(),F(O9.$$.fragment),q7r=l(),kr=a("div"),F(i8.$$.fragment),j7r=l(),SFe=a("p"),D7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G7r=l(),nn=a("p"),O7r=o("The model class to instantiate is selected based on the "),RFe=a("code"),V7r=o("model_type"),X7r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),Q7r=o("pretrained_model_name_or_path"),H7r=o(":"),U7r=l(),oe=a("ul"),V9=a("li"),IFe=a("strong"),J7r=o("albert"),Y7r=o(" \u2014 "),FU=a("a"),K7r=o("TFAlbertForSequenceClassification"),Z7r=o(" (ALBERT model)"),e9r=l(),X9=a("li"),NFe=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),TU=a("a"),t9r=o("TFBertForSequenceClassification"),a9r=o(" (BERT model)"),n9r=l(),z9=a("li"),qFe=a("strong"),s9r=o("camembert"),l9r=o(" \u2014 "),MU=a("a"),i9r=o("TFCamembertForSequenceClassification"),d9r=o(" (CamemBERT model)"),c9r=l(),W9=a("li"),jFe=a("strong"),f9r=o("convbert"),m9r=o(" \u2014 "),EU=a("a"),g9r=o("TFConvBertForSequenceClassification"),h9r=o(" (ConvBERT model)"),p9r=l(),Q9=a("li"),DFe=a("strong"),_9r=o("ctrl"),u9r=o(" \u2014 "),CU=a("a"),b9r=o("TFCTRLForSequenceClassification"),v9r=o(" (CTRL model)"),F9r=l(),H9=a("li"),GFe=a("strong"),T9r=o("deberta"),M9r=o(" \u2014 "),wU=a("a"),E9r=o("TFDebertaForSequenceClassification"),C9r=o(" (DeBERTa model)"),w9r=l(),U9=a("li"),OFe=a("strong"),A9r=o("deberta-v2"),L9r=o(" \u2014 "),AU=a("a"),y9r=o("TFDebertaV2ForSequenceClassification"),x9r=o(" (DeBERTa-v2 model)"),$9r=l(),J9=a("li"),VFe=a("strong"),k9r=o("distilbert"),S9r=o(" \u2014 "),LU=a("a"),R9r=o("TFDistilBertForSequenceClassification"),P9r=o(" (DistilBERT model)"),B9r=l(),Y9=a("li"),XFe=a("strong"),I9r=o("electra"),N9r=o(" \u2014 "),yU=a("a"),q9r=o("TFElectraForSequenceClassification"),j9r=o(" (ELECTRA model)"),D9r=l(),K9=a("li"),zFe=a("strong"),G9r=o("flaubert"),O9r=o(" \u2014 "),xU=a("a"),V9r=o("TFFlaubertForSequenceClassification"),X9r=o(" (FlauBERT model)"),z9r=l(),Z9=a("li"),WFe=a("strong"),W9r=o("funnel"),Q9r=o(" \u2014 "),$U=a("a"),H9r=o("TFFunnelForSequenceClassification"),U9r=o(" (Funnel Transformer model)"),J9r=l(),eM=a("li"),QFe=a("strong"),Y9r=o("gpt2"),K9r=o(" \u2014 "),kU=a("a"),Z9r=o("TFGPT2ForSequenceClassification"),eMr=o(" (OpenAI GPT-2 model)"),oMr=l(),oM=a("li"),HFe=a("strong"),rMr=o("gptj"),tMr=o(" \u2014 "),SU=a("a"),aMr=o("TFGPTJForSequenceClassification"),nMr=o(" (GPT-J model)"),sMr=l(),rM=a("li"),UFe=a("strong"),lMr=o("layoutlm"),iMr=o(" \u2014 "),RU=a("a"),dMr=o("TFLayoutLMForSequenceClassification"),cMr=o(" (LayoutLM model)"),fMr=l(),tM=a("li"),JFe=a("strong"),mMr=o("longformer"),gMr=o(" \u2014 "),PU=a("a"),hMr=o("TFLongformerForSequenceClassification"),pMr=o(" (Longformer model)"),_Mr=l(),aM=a("li"),YFe=a("strong"),uMr=o("mobilebert"),bMr=o(" \u2014 "),BU=a("a"),vMr=o("TFMobileBertForSequenceClassification"),FMr=o(" (MobileBERT model)"),TMr=l(),nM=a("li"),KFe=a("strong"),MMr=o("mpnet"),EMr=o(" \u2014 "),IU=a("a"),CMr=o("TFMPNetForSequenceClassification"),wMr=o(" (MPNet model)"),AMr=l(),sM=a("li"),ZFe=a("strong"),LMr=o("openai-gpt"),yMr=o(" \u2014 "),NU=a("a"),xMr=o("TFOpenAIGPTForSequenceClassification"),$Mr=o(" (OpenAI GPT model)"),kMr=l(),lM=a("li"),e6e=a("strong"),SMr=o("rembert"),RMr=o(" \u2014 "),qU=a("a"),PMr=o("TFRemBertForSequenceClassification"),BMr=o(" (RemBERT model)"),IMr=l(),iM=a("li"),o6e=a("strong"),NMr=o("roberta"),qMr=o(" \u2014 "),jU=a("a"),jMr=o("TFRobertaForSequenceClassification"),DMr=o(" (RoBERTa model)"),GMr=l(),dM=a("li"),r6e=a("strong"),OMr=o("roformer"),VMr=o(" \u2014 "),DU=a("a"),XMr=o("TFRoFormerForSequenceClassification"),zMr=o(" (RoFormer model)"),WMr=l(),cM=a("li"),t6e=a("strong"),QMr=o("tapas"),HMr=o(" \u2014 "),GU=a("a"),UMr=o("TFTapasForSequenceClassification"),JMr=o(" (TAPAS model)"),YMr=l(),fM=a("li"),a6e=a("strong"),KMr=o("transfo-xl"),ZMr=o(" \u2014 "),OU=a("a"),e4r=o("TFTransfoXLForSequenceClassification"),o4r=o(" (Transformer-XL model)"),r4r=l(),mM=a("li"),n6e=a("strong"),t4r=o("xlm"),a4r=o(" \u2014 "),VU=a("a"),n4r=o("TFXLMForSequenceClassification"),s4r=o(" (XLM model)"),l4r=l(),gM=a("li"),s6e=a("strong"),i4r=o("xlm-roberta"),d4r=o(" \u2014 "),XU=a("a"),c4r=o("TFXLMRobertaForSequenceClassification"),f4r=o(" (XLM-RoBERTa model)"),m4r=l(),hM=a("li"),l6e=a("strong"),g4r=o("xlnet"),h4r=o(" \u2014 "),zU=a("a"),p4r=o("TFXLNetForSequenceClassification"),_4r=o(" (XLNet model)"),u4r=l(),F(pM.$$.fragment),XDe=l(),dc=a("h2"),_M=a("a"),i6e=a("span"),F(d8.$$.fragment),b4r=l(),d6e=a("span"),v4r=o("TFAutoModelForMultipleChoice"),zDe=l(),ar=a("div"),F(c8.$$.fragment),F4r=l(),cc=a("p"),T4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WU=a("a"),M4r=o("from_pretrained()"),E4r=o(" class method or the "),QU=a("a"),C4r=o("from_config()"),w4r=o(` class
method.`),A4r=l(),f8=a("p"),L4r=o("This class cannot be instantiated directly using "),c6e=a("code"),y4r=o("__init__()"),x4r=o(" (throws an error)."),$4r=l(),Pt=a("div"),F(m8.$$.fragment),k4r=l(),f6e=a("p"),S4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R4r=l(),fc=a("p"),P4r=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),B4r=o("not"),I4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=a("a"),N4r=o("from_pretrained()"),q4r=o(" to load the model weights."),j4r=l(),F(uM.$$.fragment),D4r=l(),Sr=a("div"),F(g8.$$.fragment),G4r=l(),g6e=a("p"),O4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V4r=l(),sn=a("p"),X4r=o("The model class to instantiate is selected based on the "),h6e=a("code"),z4r=o("model_type"),W4r=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),Q4r=o("pretrained_model_name_or_path"),H4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),U4r=o("pretrained_model_name_or_path"),J4r=o(":"),Y4r=l(),pe=a("ul"),bM=a("li"),u6e=a("strong"),K4r=o("albert"),Z4r=o(" \u2014 "),UU=a("a"),eEr=o("TFAlbertForMultipleChoice"),oEr=o(" (ALBERT model)"),rEr=l(),vM=a("li"),b6e=a("strong"),tEr=o("bert"),aEr=o(" \u2014 "),JU=a("a"),nEr=o("TFBertForMultipleChoice"),sEr=o(" (BERT model)"),lEr=l(),FM=a("li"),v6e=a("strong"),iEr=o("camembert"),dEr=o(" \u2014 "),YU=a("a"),cEr=o("TFCamembertForMultipleChoice"),fEr=o(" (CamemBERT model)"),mEr=l(),TM=a("li"),F6e=a("strong"),gEr=o("convbert"),hEr=o(" \u2014 "),KU=a("a"),pEr=o("TFConvBertForMultipleChoice"),_Er=o(" (ConvBERT model)"),uEr=l(),MM=a("li"),T6e=a("strong"),bEr=o("distilbert"),vEr=o(" \u2014 "),ZU=a("a"),FEr=o("TFDistilBertForMultipleChoice"),TEr=o(" (DistilBERT model)"),MEr=l(),EM=a("li"),M6e=a("strong"),EEr=o("electra"),CEr=o(" \u2014 "),eJ=a("a"),wEr=o("TFElectraForMultipleChoice"),AEr=o(" (ELECTRA model)"),LEr=l(),CM=a("li"),E6e=a("strong"),yEr=o("flaubert"),xEr=o(" \u2014 "),oJ=a("a"),$Er=o("TFFlaubertForMultipleChoice"),kEr=o(" (FlauBERT model)"),SEr=l(),wM=a("li"),C6e=a("strong"),REr=o("funnel"),PEr=o(" \u2014 "),rJ=a("a"),BEr=o("TFFunnelForMultipleChoice"),IEr=o(" (Funnel Transformer model)"),NEr=l(),AM=a("li"),w6e=a("strong"),qEr=o("longformer"),jEr=o(" \u2014 "),tJ=a("a"),DEr=o("TFLongformerForMultipleChoice"),GEr=o(" (Longformer model)"),OEr=l(),LM=a("li"),A6e=a("strong"),VEr=o("mobilebert"),XEr=o(" \u2014 "),aJ=a("a"),zEr=o("TFMobileBertForMultipleChoice"),WEr=o(" (MobileBERT model)"),QEr=l(),yM=a("li"),L6e=a("strong"),HEr=o("mpnet"),UEr=o(" \u2014 "),nJ=a("a"),JEr=o("TFMPNetForMultipleChoice"),YEr=o(" (MPNet model)"),KEr=l(),xM=a("li"),y6e=a("strong"),ZEr=o("rembert"),eCr=o(" \u2014 "),sJ=a("a"),oCr=o("TFRemBertForMultipleChoice"),rCr=o(" (RemBERT model)"),tCr=l(),$M=a("li"),x6e=a("strong"),aCr=o("roberta"),nCr=o(" \u2014 "),lJ=a("a"),sCr=o("TFRobertaForMultipleChoice"),lCr=o(" (RoBERTa model)"),iCr=l(),kM=a("li"),$6e=a("strong"),dCr=o("roformer"),cCr=o(" \u2014 "),iJ=a("a"),fCr=o("TFRoFormerForMultipleChoice"),mCr=o(" (RoFormer model)"),gCr=l(),SM=a("li"),k6e=a("strong"),hCr=o("xlm"),pCr=o(" \u2014 "),dJ=a("a"),_Cr=o("TFXLMForMultipleChoice"),uCr=o(" (XLM model)"),bCr=l(),RM=a("li"),S6e=a("strong"),vCr=o("xlm-roberta"),FCr=o(" \u2014 "),cJ=a("a"),TCr=o("TFXLMRobertaForMultipleChoice"),MCr=o(" (XLM-RoBERTa model)"),ECr=l(),PM=a("li"),R6e=a("strong"),CCr=o("xlnet"),wCr=o(" \u2014 "),fJ=a("a"),ACr=o("TFXLNetForMultipleChoice"),LCr=o(" (XLNet model)"),yCr=l(),F(BM.$$.fragment),WDe=l(),mc=a("h2"),IM=a("a"),P6e=a("span"),F(h8.$$.fragment),xCr=l(),B6e=a("span"),$Cr=o("TFAutoModelForNextSentencePrediction"),QDe=l(),nr=a("div"),F(p8.$$.fragment),kCr=l(),gc=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mJ=a("a"),RCr=o("from_pretrained()"),PCr=o(" class method or the "),gJ=a("a"),BCr=o("from_config()"),ICr=o(` class
method.`),NCr=l(),_8=a("p"),qCr=o("This class cannot be instantiated directly using "),I6e=a("code"),jCr=o("__init__()"),DCr=o(" (throws an error)."),GCr=l(),Bt=a("div"),F(u8.$$.fragment),OCr=l(),N6e=a("p"),VCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XCr=l(),hc=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),HCr=o("from_pretrained()"),UCr=o(" to load the model weights."),JCr=l(),F(NM.$$.fragment),YCr=l(),Rr=a("div"),F(b8.$$.fragment),KCr=l(),j6e=a("p"),ZCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e5r=l(),ln=a("p"),o5r=o("The model class to instantiate is selected based on the "),D6e=a("code"),r5r=o("model_type"),t5r=o(` property of the config object (either
passed as an argument or loaded from `),G6e=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=a("code"),s5r=o("pretrained_model_name_or_path"),l5r=o(":"),i5r=l(),v8=a("ul"),qM=a("li"),V6e=a("strong"),d5r=o("bert"),c5r=o(" \u2014 "),pJ=a("a"),f5r=o("TFBertForNextSentencePrediction"),m5r=o(" (BERT model)"),g5r=l(),jM=a("li"),X6e=a("strong"),h5r=o("mobilebert"),p5r=o(" \u2014 "),_J=a("a"),_5r=o("TFMobileBertForNextSentencePrediction"),u5r=o(" (MobileBERT model)"),b5r=l(),F(DM.$$.fragment),HDe=l(),pc=a("h2"),GM=a("a"),z6e=a("span"),F(F8.$$.fragment),v5r=l(),W6e=a("span"),F5r=o("TFAutoModelForTableQuestionAnswering"),UDe=l(),sr=a("div"),F(T8.$$.fragment),T5r=l(),_c=a("p"),M5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uJ=a("a"),E5r=o("from_pretrained()"),C5r=o(" class method or the "),bJ=a("a"),w5r=o("from_config()"),A5r=o(` class
method.`),L5r=l(),M8=a("p"),y5r=o("This class cannot be instantiated directly using "),Q6e=a("code"),x5r=o("__init__()"),$5r=o(" (throws an error)."),k5r=l(),It=a("div"),F(E8.$$.fragment),S5r=l(),H6e=a("p"),R5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P5r=l(),uc=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),I5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),q5r=o("from_pretrained()"),j5r=o(" to load the model weights."),D5r=l(),F(OM.$$.fragment),G5r=l(),Pr=a("div"),F(C8.$$.fragment),O5r=l(),J6e=a("p"),V5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X5r=l(),dn=a("p"),z5r=o("The model class to instantiate is selected based on the "),Y6e=a("code"),W5r=o("model_type"),Q5r=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),eTe=a("ul"),VM=a("li"),oTe=a("strong"),Z5r=o("tapas"),e0r=o(" \u2014 "),FJ=a("a"),o0r=o("TFTapasForQuestionAnswering"),r0r=o(" (TAPAS model)"),t0r=l(),F(XM.$$.fragment),JDe=l(),bc=a("h2"),zM=a("a"),rTe=a("span"),F(w8.$$.fragment),a0r=l(),tTe=a("span"),n0r=o("TFAutoModelForTokenClassification"),YDe=l(),lr=a("div"),F(A8.$$.fragment),s0r=l(),vc=a("p"),l0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=a("a"),i0r=o("from_pretrained()"),d0r=o(" class method or the "),MJ=a("a"),c0r=o("from_config()"),f0r=o(` class
method.`),m0r=l(),L8=a("p"),g0r=o("This class cannot be instantiated directly using "),aTe=a("code"),h0r=o("__init__()"),p0r=o(" (throws an error)."),_0r=l(),Nt=a("div"),F(y8.$$.fragment),u0r=l(),nTe=a("p"),b0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v0r=l(),Fc=a("p"),F0r=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),T0r=o("not"),M0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),E0r=o("from_pretrained()"),C0r=o(" to load the model weights."),w0r=l(),F(WM.$$.fragment),A0r=l(),Br=a("div"),F(x8.$$.fragment),L0r=l(),lTe=a("p"),y0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x0r=l(),cn=a("p"),$0r=o("The model class to instantiate is selected based on the "),iTe=a("code"),k0r=o("model_type"),S0r=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),R0r=o("pretrained_model_name_or_path"),P0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),B0r=o("pretrained_model_name_or_path"),I0r=o(":"),N0r=l(),de=a("ul"),QM=a("li"),fTe=a("strong"),q0r=o("albert"),j0r=o(" \u2014 "),CJ=a("a"),D0r=o("TFAlbertForTokenClassification"),G0r=o(" (ALBERT model)"),O0r=l(),HM=a("li"),mTe=a("strong"),V0r=o("bert"),X0r=o(" \u2014 "),wJ=a("a"),z0r=o("TFBertForTokenClassification"),W0r=o(" (BERT model)"),Q0r=l(),UM=a("li"),gTe=a("strong"),H0r=o("camembert"),U0r=o(" \u2014 "),AJ=a("a"),J0r=o("TFCamembertForTokenClassification"),Y0r=o(" (CamemBERT model)"),K0r=l(),JM=a("li"),hTe=a("strong"),Z0r=o("convbert"),ewr=o(" \u2014 "),LJ=a("a"),owr=o("TFConvBertForTokenClassification"),rwr=o(" (ConvBERT model)"),twr=l(),YM=a("li"),pTe=a("strong"),awr=o("deberta"),nwr=o(" \u2014 "),yJ=a("a"),swr=o("TFDebertaForTokenClassification"),lwr=o(" (DeBERTa model)"),iwr=l(),KM=a("li"),_Te=a("strong"),dwr=o("deberta-v2"),cwr=o(" \u2014 "),xJ=a("a"),fwr=o("TFDebertaV2ForTokenClassification"),mwr=o(" (DeBERTa-v2 model)"),gwr=l(),ZM=a("li"),uTe=a("strong"),hwr=o("distilbert"),pwr=o(" \u2014 "),$J=a("a"),_wr=o("TFDistilBertForTokenClassification"),uwr=o(" (DistilBERT model)"),bwr=l(),e4=a("li"),bTe=a("strong"),vwr=o("electra"),Fwr=o(" \u2014 "),kJ=a("a"),Twr=o("TFElectraForTokenClassification"),Mwr=o(" (ELECTRA model)"),Ewr=l(),o4=a("li"),vTe=a("strong"),Cwr=o("flaubert"),wwr=o(" \u2014 "),SJ=a("a"),Awr=o("TFFlaubertForTokenClassification"),Lwr=o(" (FlauBERT model)"),ywr=l(),r4=a("li"),FTe=a("strong"),xwr=o("funnel"),$wr=o(" \u2014 "),RJ=a("a"),kwr=o("TFFunnelForTokenClassification"),Swr=o(" (Funnel Transformer model)"),Rwr=l(),t4=a("li"),TTe=a("strong"),Pwr=o("layoutlm"),Bwr=o(" \u2014 "),PJ=a("a"),Iwr=o("TFLayoutLMForTokenClassification"),Nwr=o(" (LayoutLM model)"),qwr=l(),a4=a("li"),MTe=a("strong"),jwr=o("longformer"),Dwr=o(" \u2014 "),BJ=a("a"),Gwr=o("TFLongformerForTokenClassification"),Owr=o(" (Longformer model)"),Vwr=l(),n4=a("li"),ETe=a("strong"),Xwr=o("mobilebert"),zwr=o(" \u2014 "),IJ=a("a"),Wwr=o("TFMobileBertForTokenClassification"),Qwr=o(" (MobileBERT model)"),Hwr=l(),s4=a("li"),CTe=a("strong"),Uwr=o("mpnet"),Jwr=o(" \u2014 "),NJ=a("a"),Ywr=o("TFMPNetForTokenClassification"),Kwr=o(" (MPNet model)"),Zwr=l(),l4=a("li"),wTe=a("strong"),eAr=o("rembert"),oAr=o(" \u2014 "),qJ=a("a"),rAr=o("TFRemBertForTokenClassification"),tAr=o(" (RemBERT model)"),aAr=l(),i4=a("li"),ATe=a("strong"),nAr=o("roberta"),sAr=o(" \u2014 "),jJ=a("a"),lAr=o("TFRobertaForTokenClassification"),iAr=o(" (RoBERTa model)"),dAr=l(),d4=a("li"),LTe=a("strong"),cAr=o("roformer"),fAr=o(" \u2014 "),DJ=a("a"),mAr=o("TFRoFormerForTokenClassification"),gAr=o(" (RoFormer model)"),hAr=l(),c4=a("li"),yTe=a("strong"),pAr=o("xlm"),_Ar=o(" \u2014 "),GJ=a("a"),uAr=o("TFXLMForTokenClassification"),bAr=o(" (XLM model)"),vAr=l(),f4=a("li"),xTe=a("strong"),FAr=o("xlm-roberta"),TAr=o(" \u2014 "),OJ=a("a"),MAr=o("TFXLMRobertaForTokenClassification"),EAr=o(" (XLM-RoBERTa model)"),CAr=l(),m4=a("li"),$Te=a("strong"),wAr=o("xlnet"),AAr=o(" \u2014 "),VJ=a("a"),LAr=o("TFXLNetForTokenClassification"),yAr=o(" (XLNet model)"),xAr=l(),F(g4.$$.fragment),KDe=l(),Tc=a("h2"),h4=a("a"),kTe=a("span"),F($8.$$.fragment),$Ar=l(),STe=a("span"),kAr=o("TFAutoModelForQuestionAnswering"),ZDe=l(),ir=a("div"),F(k8.$$.fragment),SAr=l(),Mc=a("p"),RAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XJ=a("a"),PAr=o("from_pretrained()"),BAr=o(" class method or the "),zJ=a("a"),IAr=o("from_config()"),NAr=o(` class
method.`),qAr=l(),S8=a("p"),jAr=o("This class cannot be instantiated directly using "),RTe=a("code"),DAr=o("__init__()"),GAr=o(" (throws an error)."),OAr=l(),qt=a("div"),F(R8.$$.fragment),VAr=l(),PTe=a("p"),XAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zAr=l(),Ec=a("p"),WAr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),QAr=o("not"),HAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),UAr=o("from_pretrained()"),JAr=o(" to load the model weights."),YAr=l(),F(p4.$$.fragment),KAr=l(),Ir=a("div"),F(P8.$$.fragment),ZAr=l(),ITe=a("p"),eLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oLr=l(),fn=a("p"),rLr=o("The model class to instantiate is selected based on the "),NTe=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),ce=a("ul"),_4=a("li"),DTe=a("strong"),cLr=o("albert"),fLr=o(" \u2014 "),QJ=a("a"),mLr=o("TFAlbertForQuestionAnswering"),gLr=o(" (ALBERT model)"),hLr=l(),u4=a("li"),GTe=a("strong"),pLr=o("bert"),_Lr=o(" \u2014 "),HJ=a("a"),uLr=o("TFBertForQuestionAnswering"),bLr=o(" (BERT model)"),vLr=l(),b4=a("li"),OTe=a("strong"),FLr=o("camembert"),TLr=o(" \u2014 "),UJ=a("a"),MLr=o("TFCamembertForQuestionAnswering"),ELr=o(" (CamemBERT model)"),CLr=l(),v4=a("li"),VTe=a("strong"),wLr=o("convbert"),ALr=o(" \u2014 "),JJ=a("a"),LLr=o("TFConvBertForQuestionAnswering"),yLr=o(" (ConvBERT model)"),xLr=l(),F4=a("li"),XTe=a("strong"),$Lr=o("deberta"),kLr=o(" \u2014 "),YJ=a("a"),SLr=o("TFDebertaForQuestionAnswering"),RLr=o(" (DeBERTa model)"),PLr=l(),T4=a("li"),zTe=a("strong"),BLr=o("deberta-v2"),ILr=o(" \u2014 "),KJ=a("a"),NLr=o("TFDebertaV2ForQuestionAnswering"),qLr=o(" (DeBERTa-v2 model)"),jLr=l(),M4=a("li"),WTe=a("strong"),DLr=o("distilbert"),GLr=o(" \u2014 "),ZJ=a("a"),OLr=o("TFDistilBertForQuestionAnswering"),VLr=o(" (DistilBERT model)"),XLr=l(),E4=a("li"),QTe=a("strong"),zLr=o("electra"),WLr=o(" \u2014 "),eY=a("a"),QLr=o("TFElectraForQuestionAnswering"),HLr=o(" (ELECTRA model)"),ULr=l(),C4=a("li"),HTe=a("strong"),JLr=o("flaubert"),YLr=o(" \u2014 "),oY=a("a"),KLr=o("TFFlaubertForQuestionAnsweringSimple"),ZLr=o(" (FlauBERT model)"),eyr=l(),w4=a("li"),UTe=a("strong"),oyr=o("funnel"),ryr=o(" \u2014 "),rY=a("a"),tyr=o("TFFunnelForQuestionAnswering"),ayr=o(" (Funnel Transformer model)"),nyr=l(),A4=a("li"),JTe=a("strong"),syr=o("gptj"),lyr=o(" \u2014 "),tY=a("a"),iyr=o("TFGPTJForQuestionAnswering"),dyr=o(" (GPT-J model)"),cyr=l(),L4=a("li"),YTe=a("strong"),fyr=o("longformer"),myr=o(" \u2014 "),aY=a("a"),gyr=o("TFLongformerForQuestionAnswering"),hyr=o(" (Longformer model)"),pyr=l(),y4=a("li"),KTe=a("strong"),_yr=o("mobilebert"),uyr=o(" \u2014 "),nY=a("a"),byr=o("TFMobileBertForQuestionAnswering"),vyr=o(" (MobileBERT model)"),Fyr=l(),x4=a("li"),ZTe=a("strong"),Tyr=o("mpnet"),Myr=o(" \u2014 "),sY=a("a"),Eyr=o("TFMPNetForQuestionAnswering"),Cyr=o(" (MPNet model)"),wyr=l(),$4=a("li"),e7e=a("strong"),Ayr=o("rembert"),Lyr=o(" \u2014 "),lY=a("a"),yyr=o("TFRemBertForQuestionAnswering"),xyr=o(" (RemBERT model)"),$yr=l(),k4=a("li"),o7e=a("strong"),kyr=o("roberta"),Syr=o(" \u2014 "),iY=a("a"),Ryr=o("TFRobertaForQuestionAnswering"),Pyr=o(" (RoBERTa model)"),Byr=l(),S4=a("li"),r7e=a("strong"),Iyr=o("roformer"),Nyr=o(" \u2014 "),dY=a("a"),qyr=o("TFRoFormerForQuestionAnswering"),jyr=o(" (RoFormer model)"),Dyr=l(),R4=a("li"),t7e=a("strong"),Gyr=o("xlm"),Oyr=o(" \u2014 "),cY=a("a"),Vyr=o("TFXLMForQuestionAnsweringSimple"),Xyr=o(" (XLM model)"),zyr=l(),P4=a("li"),a7e=a("strong"),Wyr=o("xlm-roberta"),Qyr=o(" \u2014 "),fY=a("a"),Hyr=o("TFXLMRobertaForQuestionAnswering"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),B4=a("li"),n7e=a("strong"),Yyr=o("xlnet"),Kyr=o(" \u2014 "),mY=a("a"),Zyr=o("TFXLNetForQuestionAnsweringSimple"),e8r=o(" (XLNet model)"),o8r=l(),F(I4.$$.fragment),eGe=l(),Cc=a("h2"),N4=a("a"),s7e=a("span"),F(B8.$$.fragment),r8r=l(),l7e=a("span"),t8r=o("TFAutoModelForVision2Seq"),oGe=l(),dr=a("div"),F(I8.$$.fragment),a8r=l(),wc=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gY=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),hY=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),N8=a("p"),f8r=o("This class cannot be instantiated directly using "),i7e=a("code"),m8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),jt=a("div"),F(q8.$$.fragment),p8r=l(),d7e=a("p"),_8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u8r=l(),Ac=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),v8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),F(q4.$$.fragment),C8r=l(),Nr=a("div"),F(j8.$$.fragment),w8r=l(),f7e=a("p"),A8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L8r=l(),mn=a("p"),y8r=o("The model class to instantiate is selected based on the "),m7e=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),R8r=o("pretrained_model_name_or_path"),P8r=o(":"),B8r=l(),p7e=a("ul"),j4=a("li"),_7e=a("strong"),I8r=o("vision-encoder-decoder"),N8r=o(" \u2014 "),_Y=a("a"),q8r=o("TFVisionEncoderDecoderModel"),j8r=o(" (Vision Encoder decoder model)"),D8r=l(),F(D4.$$.fragment),rGe=l(),Lc=a("h2"),G4=a("a"),u7e=a("span"),F(D8.$$.fragment),G8r=l(),b7e=a("span"),O8r=o("TFAutoModelForSpeechSeq2Seq"),tGe=l(),cr=a("div"),F(G8.$$.fragment),V8r=l(),yc=a("p"),X8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uY=a("a"),z8r=o("from_pretrained()"),W8r=o(" class method or the "),bY=a("a"),Q8r=o("from_config()"),H8r=o(` class
method.`),U8r=l(),O8=a("p"),J8r=o("This class cannot be instantiated directly using "),v7e=a("code"),Y8r=o("__init__()"),K8r=o(" (throws an error)."),Z8r=l(),Dt=a("div"),F(V8.$$.fragment),exr=l(),F7e=a("p"),oxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rxr=l(),xc=a("p"),txr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),axr=o("not"),nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),sxr=o("from_pretrained()"),lxr=o(" to load the model weights."),ixr=l(),F(O4.$$.fragment),dxr=l(),qr=a("div"),F(X8.$$.fragment),cxr=l(),M7e=a("p"),fxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mxr=l(),gn=a("p"),gxr=o("The model class to instantiate is selected based on the "),E7e=a("code"),hxr=o("model_type"),pxr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),_xr=o("pretrained_model_name_or_path"),uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(":"),Fxr=l(),A7e=a("ul"),V4=a("li"),L7e=a("strong"),Txr=o("speech_to_text"),Mxr=o(" \u2014 "),FY=a("a"),Exr=o("TFSpeech2TextForConditionalGeneration"),Cxr=o(" (Speech2Text model)"),wxr=l(),F(X4.$$.fragment),aGe=l(),$c=a("h2"),z4=a("a"),y7e=a("span"),F(z8.$$.fragment),Axr=l(),x7e=a("span"),Lxr=o("FlaxAutoModel"),nGe=l(),fr=a("div"),F(W8.$$.fragment),yxr=l(),kc=a("p"),xxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TY=a("a"),$xr=o("from_pretrained()"),kxr=o(" class method or the "),MY=a("a"),Sxr=o("from_config()"),Rxr=o(` class
method.`),Pxr=l(),Q8=a("p"),Bxr=o("This class cannot be instantiated directly using "),$7e=a("code"),Ixr=o("__init__()"),Nxr=o(" (throws an error)."),qxr=l(),Gt=a("div"),F(H8.$$.fragment),jxr=l(),k7e=a("p"),Dxr=o("Instantiates one of the base model classes of the library from a configuration."),Gxr=l(),Sc=a("p"),Oxr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),Vxr=o("not"),Xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),zxr=o("from_pretrained()"),Wxr=o(" to load the model weights."),Qxr=l(),F(W4.$$.fragment),Hxr=l(),jr=a("div"),F(U8.$$.fragment),Uxr=l(),R7e=a("p"),Jxr=o("Instantiate one of the base model classes of the library from a pretrained model."),Yxr=l(),hn=a("p"),Kxr=o("The model class to instantiate is selected based on the "),P7e=a("code"),Zxr=o("model_type"),e$r=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),o$r=o("pretrained_model_name_or_path"),r$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),t$r=o("pretrained_model_name_or_path"),a$r=o(":"),n$r=l(),re=a("ul"),Q4=a("li"),N7e=a("strong"),s$r=o("albert"),l$r=o(" \u2014 "),CY=a("a"),i$r=o("FlaxAlbertModel"),d$r=o(" (ALBERT model)"),c$r=l(),H4=a("li"),q7e=a("strong"),f$r=o("bart"),m$r=o(" \u2014 "),wY=a("a"),g$r=o("FlaxBartModel"),h$r=o(" (BART model)"),p$r=l(),U4=a("li"),j7e=a("strong"),_$r=o("beit"),u$r=o(" \u2014 "),AY=a("a"),b$r=o("FlaxBeitModel"),v$r=o(" (BEiT model)"),F$r=l(),J4=a("li"),D7e=a("strong"),T$r=o("bert"),M$r=o(" \u2014 "),LY=a("a"),E$r=o("FlaxBertModel"),C$r=o(" (BERT model)"),w$r=l(),Y4=a("li"),G7e=a("strong"),A$r=o("big_bird"),L$r=o(" \u2014 "),yY=a("a"),y$r=o("FlaxBigBirdModel"),x$r=o(" (BigBird model)"),$$r=l(),K4=a("li"),O7e=a("strong"),k$r=o("blenderbot"),S$r=o(" \u2014 "),xY=a("a"),R$r=o("FlaxBlenderbotModel"),P$r=o(" (Blenderbot model)"),B$r=l(),Z4=a("li"),V7e=a("strong"),I$r=o("blenderbot-small"),N$r=o(" \u2014 "),$Y=a("a"),q$r=o("FlaxBlenderbotSmallModel"),j$r=o(" (BlenderbotSmall model)"),D$r=l(),eE=a("li"),X7e=a("strong"),G$r=o("clip"),O$r=o(" \u2014 "),kY=a("a"),V$r=o("FlaxCLIPModel"),X$r=o(" (CLIP model)"),z$r=l(),oE=a("li"),z7e=a("strong"),W$r=o("distilbert"),Q$r=o(" \u2014 "),SY=a("a"),H$r=o("FlaxDistilBertModel"),U$r=o(" (DistilBERT model)"),J$r=l(),rE=a("li"),W7e=a("strong"),Y$r=o("electra"),K$r=o(" \u2014 "),RY=a("a"),Z$r=o("FlaxElectraModel"),ekr=o(" (ELECTRA model)"),okr=l(),tE=a("li"),Q7e=a("strong"),rkr=o("gpt2"),tkr=o(" \u2014 "),PY=a("a"),akr=o("FlaxGPT2Model"),nkr=o(" (OpenAI GPT-2 model)"),skr=l(),aE=a("li"),H7e=a("strong"),lkr=o("gpt_neo"),ikr=o(" \u2014 "),BY=a("a"),dkr=o("FlaxGPTNeoModel"),ckr=o(" (GPT Neo model)"),fkr=l(),nE=a("li"),U7e=a("strong"),mkr=o("gptj"),gkr=o(" \u2014 "),IY=a("a"),hkr=o("FlaxGPTJModel"),pkr=o(" (GPT-J model)"),_kr=l(),sE=a("li"),J7e=a("strong"),ukr=o("marian"),bkr=o(" \u2014 "),NY=a("a"),vkr=o("FlaxMarianModel"),Fkr=o(" (Marian model)"),Tkr=l(),lE=a("li"),Y7e=a("strong"),Mkr=o("mbart"),Ekr=o(" \u2014 "),qY=a("a"),Ckr=o("FlaxMBartModel"),wkr=o(" (mBART model)"),Akr=l(),iE=a("li"),K7e=a("strong"),Lkr=o("mt5"),ykr=o(" \u2014 "),jY=a("a"),xkr=o("FlaxMT5Model"),$kr=o(" (MT5 model)"),kkr=l(),dE=a("li"),Z7e=a("strong"),Skr=o("opt"),Rkr=o(" \u2014 "),DY=a("a"),Pkr=o("FlaxOPTModel"),Bkr=o(" (OPT model)"),Ikr=l(),cE=a("li"),e9e=a("strong"),Nkr=o("pegasus"),qkr=o(" \u2014 "),GY=a("a"),jkr=o("FlaxPegasusModel"),Dkr=o(" (Pegasus model)"),Gkr=l(),fE=a("li"),o9e=a("strong"),Okr=o("roberta"),Vkr=o(" \u2014 "),OY=a("a"),Xkr=o("FlaxRobertaModel"),zkr=o(" (RoBERTa model)"),Wkr=l(),mE=a("li"),r9e=a("strong"),Qkr=o("roformer"),Hkr=o(" \u2014 "),VY=a("a"),Ukr=o("FlaxRoFormerModel"),Jkr=o(" (RoFormer model)"),Ykr=l(),gE=a("li"),t9e=a("strong"),Kkr=o("t5"),Zkr=o(" \u2014 "),XY=a("a"),eSr=o("FlaxT5Model"),oSr=o(" (T5 model)"),rSr=l(),hE=a("li"),a9e=a("strong"),tSr=o("vision-text-dual-encoder"),aSr=o(" \u2014 "),zY=a("a"),nSr=o("FlaxVisionTextDualEncoderModel"),sSr=o(" (VisionTextDualEncoder model)"),lSr=l(),pE=a("li"),n9e=a("strong"),iSr=o("vit"),dSr=o(" \u2014 "),WY=a("a"),cSr=o("FlaxViTModel"),fSr=o(" (ViT model)"),mSr=l(),_E=a("li"),s9e=a("strong"),gSr=o("wav2vec2"),hSr=o(" \u2014 "),QY=a("a"),pSr=o("FlaxWav2Vec2Model"),_Sr=o(" (Wav2Vec2 model)"),uSr=l(),uE=a("li"),l9e=a("strong"),bSr=o("xglm"),vSr=o(" \u2014 "),HY=a("a"),FSr=o("FlaxXGLMModel"),TSr=o(" (XGLM model)"),MSr=l(),bE=a("li"),i9e=a("strong"),ESr=o("xlm-roberta"),CSr=o(" \u2014 "),UY=a("a"),wSr=o("FlaxXLMRobertaModel"),ASr=o(" (XLM-RoBERTa model)"),LSr=l(),F(vE.$$.fragment),sGe=l(),Rc=a("h2"),FE=a("a"),d9e=a("span"),F(J8.$$.fragment),ySr=l(),c9e=a("span"),xSr=o("FlaxAutoModelForCausalLM"),lGe=l(),mr=a("div"),F(Y8.$$.fragment),$Sr=l(),Pc=a("p"),kSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JY=a("a"),SSr=o("from_pretrained()"),RSr=o(" class method or the "),YY=a("a"),PSr=o("from_config()"),BSr=o(` class
method.`),ISr=l(),K8=a("p"),NSr=o("This class cannot be instantiated directly using "),f9e=a("code"),qSr=o("__init__()"),jSr=o(" (throws an error)."),DSr=l(),Ot=a("div"),F(Z8.$$.fragment),GSr=l(),m9e=a("p"),OSr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VSr=l(),Bc=a("p"),XSr=o(`Note:
Loading a model from its configuration file does `),g9e=a("strong"),zSr=o("not"),WSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),QSr=o("from_pretrained()"),HSr=o(" to load the model weights."),USr=l(),F(TE.$$.fragment),JSr=l(),Dr=a("div"),F(ex.$$.fragment),YSr=l(),h9e=a("p"),KSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZSr=l(),pn=a("p"),eRr=o("The model class to instantiate is selected based on the "),p9e=a("code"),oRr=o("model_type"),rRr=o(` property of the config object (either
passed as an argument or loaded from `),_9e=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(":"),lRr=l(),xe=a("ul"),ME=a("li"),b9e=a("strong"),iRr=o("bart"),dRr=o(" \u2014 "),ZY=a("a"),cRr=o("FlaxBartForCausalLM"),fRr=o(" (BART model)"),mRr=l(),EE=a("li"),v9e=a("strong"),gRr=o("bert"),hRr=o(" \u2014 "),eK=a("a"),pRr=o("FlaxBertForCausalLM"),_Rr=o(" (BERT model)"),uRr=l(),CE=a("li"),F9e=a("strong"),bRr=o("big_bird"),vRr=o(" \u2014 "),oK=a("a"),FRr=o("FlaxBigBirdForCausalLM"),TRr=o(" (BigBird model)"),MRr=l(),wE=a("li"),T9e=a("strong"),ERr=o("electra"),CRr=o(" \u2014 "),rK=a("a"),wRr=o("FlaxElectraForCausalLM"),ARr=o(" (ELECTRA model)"),LRr=l(),AE=a("li"),M9e=a("strong"),yRr=o("gpt2"),xRr=o(" \u2014 "),tK=a("a"),$Rr=o("FlaxGPT2LMHeadModel"),kRr=o(" (OpenAI GPT-2 model)"),SRr=l(),LE=a("li"),E9e=a("strong"),RRr=o("gpt_neo"),PRr=o(" \u2014 "),aK=a("a"),BRr=o("FlaxGPTNeoForCausalLM"),IRr=o(" (GPT Neo model)"),NRr=l(),yE=a("li"),C9e=a("strong"),qRr=o("gptj"),jRr=o(" \u2014 "),nK=a("a"),DRr=o("FlaxGPTJForCausalLM"),GRr=o(" (GPT-J model)"),ORr=l(),xE=a("li"),w9e=a("strong"),VRr=o("opt"),XRr=o(" \u2014 "),sK=a("a"),zRr=o("FlaxOPTForCausalLM"),WRr=o(" (OPT model)"),QRr=l(),$E=a("li"),A9e=a("strong"),HRr=o("roberta"),URr=o(" \u2014 "),lK=a("a"),JRr=o("FlaxRobertaForCausalLM"),YRr=o(" (RoBERTa model)"),KRr=l(),kE=a("li"),L9e=a("strong"),ZRr=o("xglm"),ePr=o(" \u2014 "),iK=a("a"),oPr=o("FlaxXGLMForCausalLM"),rPr=o(" (XGLM model)"),tPr=l(),F(SE.$$.fragment),iGe=l(),Ic=a("h2"),RE=a("a"),y9e=a("span"),F(ox.$$.fragment),aPr=l(),x9e=a("span"),nPr=o("FlaxAutoModelForPreTraining"),dGe=l(),gr=a("div"),F(rx.$$.fragment),sPr=l(),Nc=a("p"),lPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dK=a("a"),iPr=o("from_pretrained()"),dPr=o(" class method or the "),cK=a("a"),cPr=o("from_config()"),fPr=o(` class
method.`),mPr=l(),tx=a("p"),gPr=o("This class cannot be instantiated directly using "),$9e=a("code"),hPr=o("__init__()"),pPr=o(" (throws an error)."),_Pr=l(),Vt=a("div"),F(ax.$$.fragment),uPr=l(),k9e=a("p"),bPr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vPr=l(),qc=a("p"),FPr=o(`Note:
Loading a model from its configuration file does `),S9e=a("strong"),TPr=o("not"),MPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),EPr=o("from_pretrained()"),CPr=o(" to load the model weights."),wPr=l(),F(PE.$$.fragment),APr=l(),Gr=a("div"),F(nx.$$.fragment),LPr=l(),R9e=a("p"),yPr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xPr=l(),_n=a("p"),$Pr=o("The model class to instantiate is selected based on the "),P9e=a("code"),kPr=o("model_type"),SPr=o(` property of the config object (either
passed as an argument or loaded from `),B9e=a("code"),RPr=o("pretrained_model_name_or_path"),PPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(":"),NPr=l(),Ee=a("ul"),BE=a("li"),N9e=a("strong"),qPr=o("albert"),jPr=o(" \u2014 "),mK=a("a"),DPr=o("FlaxAlbertForPreTraining"),GPr=o(" (ALBERT model)"),OPr=l(),IE=a("li"),q9e=a("strong"),VPr=o("bart"),XPr=o(" \u2014 "),gK=a("a"),zPr=o("FlaxBartForConditionalGeneration"),WPr=o(" (BART model)"),QPr=l(),NE=a("li"),j9e=a("strong"),HPr=o("bert"),UPr=o(" \u2014 "),hK=a("a"),JPr=o("FlaxBertForPreTraining"),YPr=o(" (BERT model)"),KPr=l(),qE=a("li"),D9e=a("strong"),ZPr=o("big_bird"),eBr=o(" \u2014 "),pK=a("a"),oBr=o("FlaxBigBirdForPreTraining"),rBr=o(" (BigBird model)"),tBr=l(),jE=a("li"),G9e=a("strong"),aBr=o("electra"),nBr=o(" \u2014 "),_K=a("a"),sBr=o("FlaxElectraForPreTraining"),lBr=o(" (ELECTRA model)"),iBr=l(),DE=a("li"),O9e=a("strong"),dBr=o("mbart"),cBr=o(" \u2014 "),uK=a("a"),fBr=o("FlaxMBartForConditionalGeneration"),mBr=o(" (mBART model)"),gBr=l(),GE=a("li"),V9e=a("strong"),hBr=o("mt5"),pBr=o(" \u2014 "),bK=a("a"),_Br=o("FlaxMT5ForConditionalGeneration"),uBr=o(" (MT5 model)"),bBr=l(),OE=a("li"),X9e=a("strong"),vBr=o("roberta"),FBr=o(" \u2014 "),vK=a("a"),TBr=o("FlaxRobertaForMaskedLM"),MBr=o(" (RoBERTa model)"),EBr=l(),VE=a("li"),z9e=a("strong"),CBr=o("roformer"),wBr=o(" \u2014 "),FK=a("a"),ABr=o("FlaxRoFormerForMaskedLM"),LBr=o(" (RoFormer model)"),yBr=l(),XE=a("li"),W9e=a("strong"),xBr=o("t5"),$Br=o(" \u2014 "),TK=a("a"),kBr=o("FlaxT5ForConditionalGeneration"),SBr=o(" (T5 model)"),RBr=l(),zE=a("li"),Q9e=a("strong"),PBr=o("wav2vec2"),BBr=o(" \u2014 "),MK=a("a"),IBr=o("FlaxWav2Vec2ForPreTraining"),NBr=o(" (Wav2Vec2 model)"),qBr=l(),WE=a("li"),H9e=a("strong"),jBr=o("xlm-roberta"),DBr=o(" \u2014 "),EK=a("a"),GBr=o("FlaxXLMRobertaForMaskedLM"),OBr=o(" (XLM-RoBERTa model)"),VBr=l(),F(QE.$$.fragment),cGe=l(),jc=a("h2"),HE=a("a"),U9e=a("span"),F(sx.$$.fragment),XBr=l(),J9e=a("span"),zBr=o("FlaxAutoModelForMaskedLM"),fGe=l(),hr=a("div"),F(lx.$$.fragment),WBr=l(),Dc=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CK=a("a"),HBr=o("from_pretrained()"),UBr=o(" class method or the "),wK=a("a"),JBr=o("from_config()"),YBr=o(` class
method.`),KBr=l(),ix=a("p"),ZBr=o("This class cannot be instantiated directly using "),Y9e=a("code"),eIr=o("__init__()"),oIr=o(" (throws an error)."),rIr=l(),Xt=a("div"),F(dx.$$.fragment),tIr=l(),K9e=a("p"),aIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nIr=l(),Gc=a("p"),sIr=o(`Note:
Loading a model from its configuration file does `),Z9e=a("strong"),lIr=o("not"),iIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),dIr=o("from_pretrained()"),cIr=o(" to load the model weights."),fIr=l(),F(UE.$$.fragment),mIr=l(),Or=a("div"),F(cx.$$.fragment),gIr=l(),eMe=a("p"),hIr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pIr=l(),un=a("p"),_Ir=o("The model class to instantiate is selected based on the "),oMe=a("code"),uIr=o("model_type"),bIr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(":"),EIr=l(),$e=a("ul"),JE=a("li"),aMe=a("strong"),CIr=o("albert"),wIr=o(" \u2014 "),LK=a("a"),AIr=o("FlaxAlbertForMaskedLM"),LIr=o(" (ALBERT model)"),yIr=l(),YE=a("li"),nMe=a("strong"),xIr=o("bart"),$Ir=o(" \u2014 "),yK=a("a"),kIr=o("FlaxBartForConditionalGeneration"),SIr=o(" (BART model)"),RIr=l(),KE=a("li"),sMe=a("strong"),PIr=o("bert"),BIr=o(" \u2014 "),xK=a("a"),IIr=o("FlaxBertForMaskedLM"),NIr=o(" (BERT model)"),qIr=l(),ZE=a("li"),lMe=a("strong"),jIr=o("big_bird"),DIr=o(" \u2014 "),$K=a("a"),GIr=o("FlaxBigBirdForMaskedLM"),OIr=o(" (BigBird model)"),VIr=l(),eC=a("li"),iMe=a("strong"),XIr=o("distilbert"),zIr=o(" \u2014 "),kK=a("a"),WIr=o("FlaxDistilBertForMaskedLM"),QIr=o(" (DistilBERT model)"),HIr=l(),oC=a("li"),dMe=a("strong"),UIr=o("electra"),JIr=o(" \u2014 "),SK=a("a"),YIr=o("FlaxElectraForMaskedLM"),KIr=o(" (ELECTRA model)"),ZIr=l(),rC=a("li"),cMe=a("strong"),eNr=o("mbart"),oNr=o(" \u2014 "),RK=a("a"),rNr=o("FlaxMBartForConditionalGeneration"),tNr=o(" (mBART model)"),aNr=l(),tC=a("li"),fMe=a("strong"),nNr=o("roberta"),sNr=o(" \u2014 "),PK=a("a"),lNr=o("FlaxRobertaForMaskedLM"),iNr=o(" (RoBERTa model)"),dNr=l(),aC=a("li"),mMe=a("strong"),cNr=o("roformer"),fNr=o(" \u2014 "),BK=a("a"),mNr=o("FlaxRoFormerForMaskedLM"),gNr=o(" (RoFormer model)"),hNr=l(),nC=a("li"),gMe=a("strong"),pNr=o("xlm-roberta"),_Nr=o(" \u2014 "),IK=a("a"),uNr=o("FlaxXLMRobertaForMaskedLM"),bNr=o(" (XLM-RoBERTa model)"),vNr=l(),F(sC.$$.fragment),mGe=l(),Oc=a("h2"),lC=a("a"),hMe=a("span"),F(fx.$$.fragment),FNr=l(),pMe=a("span"),TNr=o("FlaxAutoModelForSeq2SeqLM"),gGe=l(),pr=a("div"),F(mx.$$.fragment),MNr=l(),Vc=a("p"),ENr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NK=a("a"),CNr=o("from_pretrained()"),wNr=o(" class method or the "),qK=a("a"),ANr=o("from_config()"),LNr=o(` class
method.`),yNr=l(),gx=a("p"),xNr=o("This class cannot be instantiated directly using "),_Me=a("code"),$Nr=o("__init__()"),kNr=o(" (throws an error)."),SNr=l(),zt=a("div"),F(hx.$$.fragment),RNr=l(),uMe=a("p"),PNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BNr=l(),Xc=a("p"),INr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),NNr=o("not"),qNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),jNr=o("from_pretrained()"),DNr=o(" to load the model weights."),GNr=l(),F(iC.$$.fragment),ONr=l(),Vr=a("div"),F(px.$$.fragment),VNr=l(),vMe=a("p"),XNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zNr=l(),bn=a("p"),WNr=o("The model class to instantiate is selected based on the "),FMe=a("code"),QNr=o("model_type"),HNr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(":"),ZNr=l(),Pe=a("ul"),dC=a("li"),EMe=a("strong"),eqr=o("bart"),oqr=o(" \u2014 "),DK=a("a"),rqr=o("FlaxBartForConditionalGeneration"),tqr=o(" (BART model)"),aqr=l(),cC=a("li"),CMe=a("strong"),nqr=o("blenderbot"),sqr=o(" \u2014 "),GK=a("a"),lqr=o("FlaxBlenderbotForConditionalGeneration"),iqr=o(" (Blenderbot model)"),dqr=l(),fC=a("li"),wMe=a("strong"),cqr=o("blenderbot-small"),fqr=o(" \u2014 "),OK=a("a"),mqr=o("FlaxBlenderbotSmallForConditionalGeneration"),gqr=o(" (BlenderbotSmall model)"),hqr=l(),mC=a("li"),AMe=a("strong"),pqr=o("encoder-decoder"),_qr=o(" \u2014 "),VK=a("a"),uqr=o("FlaxEncoderDecoderModel"),bqr=o(" (Encoder decoder model)"),vqr=l(),gC=a("li"),LMe=a("strong"),Fqr=o("marian"),Tqr=o(" \u2014 "),XK=a("a"),Mqr=o("FlaxMarianMTModel"),Eqr=o(" (Marian model)"),Cqr=l(),hC=a("li"),yMe=a("strong"),wqr=o("mbart"),Aqr=o(" \u2014 "),zK=a("a"),Lqr=o("FlaxMBartForConditionalGeneration"),yqr=o(" (mBART model)"),xqr=l(),pC=a("li"),xMe=a("strong"),$qr=o("mt5"),kqr=o(" \u2014 "),WK=a("a"),Sqr=o("FlaxMT5ForConditionalGeneration"),Rqr=o(" (MT5 model)"),Pqr=l(),_C=a("li"),$Me=a("strong"),Bqr=o("pegasus"),Iqr=o(" \u2014 "),QK=a("a"),Nqr=o("FlaxPegasusForConditionalGeneration"),qqr=o(" (Pegasus model)"),jqr=l(),uC=a("li"),kMe=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),HK=a("a"),Oqr=o("FlaxT5ForConditionalGeneration"),Vqr=o(" (T5 model)"),Xqr=l(),F(bC.$$.fragment),hGe=l(),zc=a("h2"),vC=a("a"),SMe=a("span"),F(_x.$$.fragment),zqr=l(),RMe=a("span"),Wqr=o("FlaxAutoModelForSequenceClassification"),pGe=l(),_r=a("div"),F(ux.$$.fragment),Qqr=l(),Wc=a("p"),Hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" class method or the "),JK=a("a"),Yqr=o("from_config()"),Kqr=o(` class
method.`),Zqr=l(),bx=a("p"),ejr=o("This class cannot be instantiated directly using "),PMe=a("code"),ojr=o("__init__()"),rjr=o(" (throws an error)."),tjr=l(),Wt=a("div"),F(vx.$$.fragment),ajr=l(),BMe=a("p"),njr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sjr=l(),Qc=a("p"),ljr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),ijr=o("not"),djr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),cjr=o("from_pretrained()"),fjr=o(" to load the model weights."),mjr=l(),F(FC.$$.fragment),gjr=l(),Xr=a("div"),F(Fx.$$.fragment),hjr=l(),NMe=a("p"),pjr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_jr=l(),vn=a("p"),ujr=o("The model class to instantiate is selected based on the "),qMe=a("code"),bjr=o("model_type"),vjr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),Mjr=o("pretrained_model_name_or_path"),Ejr=o(":"),Cjr=l(),ke=a("ul"),TC=a("li"),GMe=a("strong"),wjr=o("albert"),Ajr=o(" \u2014 "),KK=a("a"),Ljr=o("FlaxAlbertForSequenceClassification"),yjr=o(" (ALBERT model)"),xjr=l(),MC=a("li"),OMe=a("strong"),$jr=o("bart"),kjr=o(" \u2014 "),ZK=a("a"),Sjr=o("FlaxBartForSequenceClassification"),Rjr=o(" (BART model)"),Pjr=l(),EC=a("li"),VMe=a("strong"),Bjr=o("bert"),Ijr=o(" \u2014 "),eZ=a("a"),Njr=o("FlaxBertForSequenceClassification"),qjr=o(" (BERT model)"),jjr=l(),CC=a("li"),XMe=a("strong"),Djr=o("big_bird"),Gjr=o(" \u2014 "),oZ=a("a"),Ojr=o("FlaxBigBirdForSequenceClassification"),Vjr=o(" (BigBird model)"),Xjr=l(),wC=a("li"),zMe=a("strong"),zjr=o("distilbert"),Wjr=o(" \u2014 "),rZ=a("a"),Qjr=o("FlaxDistilBertForSequenceClassification"),Hjr=o(" (DistilBERT model)"),Ujr=l(),AC=a("li"),WMe=a("strong"),Jjr=o("electra"),Yjr=o(" \u2014 "),tZ=a("a"),Kjr=o("FlaxElectraForSequenceClassification"),Zjr=o(" (ELECTRA model)"),eDr=l(),LC=a("li"),QMe=a("strong"),oDr=o("mbart"),rDr=o(" \u2014 "),aZ=a("a"),tDr=o("FlaxMBartForSequenceClassification"),aDr=o(" (mBART model)"),nDr=l(),yC=a("li"),HMe=a("strong"),sDr=o("roberta"),lDr=o(" \u2014 "),nZ=a("a"),iDr=o("FlaxRobertaForSequenceClassification"),dDr=o(" (RoBERTa model)"),cDr=l(),xC=a("li"),UMe=a("strong"),fDr=o("roformer"),mDr=o(" \u2014 "),sZ=a("a"),gDr=o("FlaxRoFormerForSequenceClassification"),hDr=o(" (RoFormer model)"),pDr=l(),$C=a("li"),JMe=a("strong"),_Dr=o("xlm-roberta"),uDr=o(" \u2014 "),lZ=a("a"),bDr=o("FlaxXLMRobertaForSequenceClassification"),vDr=o(" (XLM-RoBERTa model)"),FDr=l(),F(kC.$$.fragment),_Ge=l(),Hc=a("h2"),SC=a("a"),YMe=a("span"),F(Tx.$$.fragment),TDr=l(),KMe=a("span"),MDr=o("FlaxAutoModelForQuestionAnswering"),uGe=l(),ur=a("div"),F(Mx.$$.fragment),EDr=l(),Uc=a("p"),CDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iZ=a("a"),wDr=o("from_pretrained()"),ADr=o(" class method or the "),dZ=a("a"),LDr=o("from_config()"),yDr=o(` class
method.`),xDr=l(),Ex=a("p"),$Dr=o("This class cannot be instantiated directly using "),ZMe=a("code"),kDr=o("__init__()"),SDr=o(" (throws an error)."),RDr=l(),Qt=a("div"),F(Cx.$$.fragment),PDr=l(),e4e=a("p"),BDr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IDr=l(),Jc=a("p"),NDr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),qDr=o("not"),jDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),DDr=o("from_pretrained()"),GDr=o(" to load the model weights."),ODr=l(),F(RC.$$.fragment),VDr=l(),zr=a("div"),F(wx.$$.fragment),XDr=l(),r4e=a("p"),zDr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WDr=l(),Fn=a("p"),QDr=o("The model class to instantiate is selected based on the "),t4e=a("code"),HDr=o("model_type"),UDr=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),JDr=o("pretrained_model_name_or_path"),YDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),KDr=o("pretrained_model_name_or_path"),ZDr=o(":"),eGr=l(),Se=a("ul"),PC=a("li"),s4e=a("strong"),oGr=o("albert"),rGr=o(" \u2014 "),fZ=a("a"),tGr=o("FlaxAlbertForQuestionAnswering"),aGr=o(" (ALBERT model)"),nGr=l(),BC=a("li"),l4e=a("strong"),sGr=o("bart"),lGr=o(" \u2014 "),mZ=a("a"),iGr=o("FlaxBartForQuestionAnswering"),dGr=o(" (BART model)"),cGr=l(),IC=a("li"),i4e=a("strong"),fGr=o("bert"),mGr=o(" \u2014 "),gZ=a("a"),gGr=o("FlaxBertForQuestionAnswering"),hGr=o(" (BERT model)"),pGr=l(),NC=a("li"),d4e=a("strong"),_Gr=o("big_bird"),uGr=o(" \u2014 "),hZ=a("a"),bGr=o("FlaxBigBirdForQuestionAnswering"),vGr=o(" (BigBird model)"),FGr=l(),qC=a("li"),c4e=a("strong"),TGr=o("distilbert"),MGr=o(" \u2014 "),pZ=a("a"),EGr=o("FlaxDistilBertForQuestionAnswering"),CGr=o(" (DistilBERT model)"),wGr=l(),jC=a("li"),f4e=a("strong"),AGr=o("electra"),LGr=o(" \u2014 "),_Z=a("a"),yGr=o("FlaxElectraForQuestionAnswering"),xGr=o(" (ELECTRA model)"),$Gr=l(),DC=a("li"),m4e=a("strong"),kGr=o("mbart"),SGr=o(" \u2014 "),uZ=a("a"),RGr=o("FlaxMBartForQuestionAnswering"),PGr=o(" (mBART model)"),BGr=l(),GC=a("li"),g4e=a("strong"),IGr=o("roberta"),NGr=o(" \u2014 "),bZ=a("a"),qGr=o("FlaxRobertaForQuestionAnswering"),jGr=o(" (RoBERTa model)"),DGr=l(),OC=a("li"),h4e=a("strong"),GGr=o("roformer"),OGr=o(" \u2014 "),vZ=a("a"),VGr=o("FlaxRoFormerForQuestionAnswering"),XGr=o(" (RoFormer model)"),zGr=l(),VC=a("li"),p4e=a("strong"),WGr=o("xlm-roberta"),QGr=o(" \u2014 "),FZ=a("a"),HGr=o("FlaxXLMRobertaForQuestionAnswering"),UGr=o(" (XLM-RoBERTa model)"),JGr=l(),F(XC.$$.fragment),bGe=l(),Yc=a("h2"),zC=a("a"),_4e=a("span"),F(Ax.$$.fragment),YGr=l(),u4e=a("span"),KGr=o("FlaxAutoModelForTokenClassification"),vGe=l(),br=a("div"),F(Lx.$$.fragment),ZGr=l(),Kc=a("p"),eOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TZ=a("a"),oOr=o("from_pretrained()"),rOr=o(" class method or the "),MZ=a("a"),tOr=o("from_config()"),aOr=o(` class
method.`),nOr=l(),yx=a("p"),sOr=o("This class cannot be instantiated directly using "),b4e=a("code"),lOr=o("__init__()"),iOr=o(" (throws an error)."),dOr=l(),Ht=a("div"),F(xx.$$.fragment),cOr=l(),v4e=a("p"),fOr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mOr=l(),Zc=a("p"),gOr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),hOr=o("not"),pOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),_Or=o("from_pretrained()"),uOr=o(" to load the model weights."),bOr=l(),F(WC.$$.fragment),vOr=l(),Wr=a("div"),F($x.$$.fragment),FOr=l(),T4e=a("p"),TOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MOr=l(),Tn=a("p"),EOr=o("The model class to instantiate is selected based on the "),M4e=a("code"),COr=o("model_type"),wOr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),AOr=o("pretrained_model_name_or_path"),LOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),yOr=o("pretrained_model_name_or_path"),xOr=o(":"),$Or=l(),Oe=a("ul"),QC=a("li"),w4e=a("strong"),kOr=o("albert"),SOr=o(" \u2014 "),CZ=a("a"),ROr=o("FlaxAlbertForTokenClassification"),POr=o(" (ALBERT model)"),BOr=l(),HC=a("li"),A4e=a("strong"),IOr=o("bert"),NOr=o(" \u2014 "),wZ=a("a"),qOr=o("FlaxBertForTokenClassification"),jOr=o(" (BERT model)"),DOr=l(),UC=a("li"),L4e=a("strong"),GOr=o("big_bird"),OOr=o(" \u2014 "),AZ=a("a"),VOr=o("FlaxBigBirdForTokenClassification"),XOr=o(" (BigBird model)"),zOr=l(),JC=a("li"),y4e=a("strong"),WOr=o("distilbert"),QOr=o(" \u2014 "),LZ=a("a"),HOr=o("FlaxDistilBertForTokenClassification"),UOr=o(" (DistilBERT model)"),JOr=l(),YC=a("li"),x4e=a("strong"),YOr=o("electra"),KOr=o(" \u2014 "),yZ=a("a"),ZOr=o("FlaxElectraForTokenClassification"),eVr=o(" (ELECTRA model)"),oVr=l(),KC=a("li"),$4e=a("strong"),rVr=o("roberta"),tVr=o(" \u2014 "),xZ=a("a"),aVr=o("FlaxRobertaForTokenClassification"),nVr=o(" (RoBERTa model)"),sVr=l(),ZC=a("li"),k4e=a("strong"),lVr=o("roformer"),iVr=o(" \u2014 "),$Z=a("a"),dVr=o("FlaxRoFormerForTokenClassification"),cVr=o(" (RoFormer model)"),fVr=l(),e5=a("li"),S4e=a("strong"),mVr=o("xlm-roberta"),gVr=o(" \u2014 "),kZ=a("a"),hVr=o("FlaxXLMRobertaForTokenClassification"),pVr=o(" (XLM-RoBERTa model)"),_Vr=l(),F(o5.$$.fragment),FGe=l(),ef=a("h2"),r5=a("a"),R4e=a("span"),F(kx.$$.fragment),uVr=l(),P4e=a("span"),bVr=o("FlaxAutoModelForMultipleChoice"),TGe=l(),vr=a("div"),F(Sx.$$.fragment),vVr=l(),of=a("p"),FVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SZ=a("a"),TVr=o("from_pretrained()"),MVr=o(" class method or the "),RZ=a("a"),EVr=o("from_config()"),CVr=o(` class
method.`),wVr=l(),Rx=a("p"),AVr=o("This class cannot be instantiated directly using "),B4e=a("code"),LVr=o("__init__()"),yVr=o(" (throws an error)."),xVr=l(),Ut=a("div"),F(Px.$$.fragment),$Vr=l(),I4e=a("p"),kVr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SVr=l(),rf=a("p"),RVr=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),PVr=o("not"),BVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),IVr=o("from_pretrained()"),NVr=o(" to load the model weights."),qVr=l(),F(t5.$$.fragment),jVr=l(),Qr=a("div"),F(Bx.$$.fragment),DVr=l(),q4e=a("p"),GVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OVr=l(),Mn=a("p"),VVr=o("The model class to instantiate is selected based on the "),j4e=a("code"),XVr=o("model_type"),zVr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),WVr=o("pretrained_model_name_or_path"),QVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),HVr=o("pretrained_model_name_or_path"),UVr=o(":"),JVr=l(),Ve=a("ul"),a5=a("li"),O4e=a("strong"),YVr=o("albert"),KVr=o(" \u2014 "),BZ=a("a"),ZVr=o("FlaxAlbertForMultipleChoice"),eXr=o(" (ALBERT model)"),oXr=l(),n5=a("li"),V4e=a("strong"),rXr=o("bert"),tXr=o(" \u2014 "),IZ=a("a"),aXr=o("FlaxBertForMultipleChoice"),nXr=o(" (BERT model)"),sXr=l(),s5=a("li"),X4e=a("strong"),lXr=o("big_bird"),iXr=o(" \u2014 "),NZ=a("a"),dXr=o("FlaxBigBirdForMultipleChoice"),cXr=o(" (BigBird model)"),fXr=l(),l5=a("li"),z4e=a("strong"),mXr=o("distilbert"),gXr=o(" \u2014 "),qZ=a("a"),hXr=o("FlaxDistilBertForMultipleChoice"),pXr=o(" (DistilBERT model)"),_Xr=l(),i5=a("li"),W4e=a("strong"),uXr=o("electra"),bXr=o(" \u2014 "),jZ=a("a"),vXr=o("FlaxElectraForMultipleChoice"),FXr=o(" (ELECTRA model)"),TXr=l(),d5=a("li"),Q4e=a("strong"),MXr=o("roberta"),EXr=o(" \u2014 "),DZ=a("a"),CXr=o("FlaxRobertaForMultipleChoice"),wXr=o(" (RoBERTa model)"),AXr=l(),c5=a("li"),H4e=a("strong"),LXr=o("roformer"),yXr=o(" \u2014 "),GZ=a("a"),xXr=o("FlaxRoFormerForMultipleChoice"),$Xr=o(" (RoFormer model)"),kXr=l(),f5=a("li"),U4e=a("strong"),SXr=o("xlm-roberta"),RXr=o(" \u2014 "),OZ=a("a"),PXr=o("FlaxXLMRobertaForMultipleChoice"),BXr=o(" (XLM-RoBERTa model)"),IXr=l(),F(m5.$$.fragment),MGe=l(),tf=a("h2"),g5=a("a"),J4e=a("span"),F(Ix.$$.fragment),NXr=l(),Y4e=a("span"),qXr=o("FlaxAutoModelForNextSentencePrediction"),EGe=l(),Fr=a("div"),F(Nx.$$.fragment),jXr=l(),af=a("p"),DXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VZ=a("a"),GXr=o("from_pretrained()"),OXr=o(" class method or the "),XZ=a("a"),VXr=o("from_config()"),XXr=o(` class
method.`),zXr=l(),qx=a("p"),WXr=o("This class cannot be instantiated directly using "),K4e=a("code"),QXr=o("__init__()"),HXr=o(" (throws an error)."),UXr=l(),Jt=a("div"),F(jx.$$.fragment),JXr=l(),Z4e=a("p"),YXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KXr=l(),nf=a("p"),ZXr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),ezr=o("not"),ozr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),rzr=o("from_pretrained()"),tzr=o(" to load the model weights."),azr=l(),F(h5.$$.fragment),nzr=l(),Hr=a("div"),F(Dx.$$.fragment),szr=l(),oEe=a("p"),lzr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),izr=l(),En=a("p"),dzr=o("The model class to instantiate is selected based on the "),rEe=a("code"),czr=o("model_type"),fzr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),mzr=o("pretrained_model_name_or_path"),gzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),hzr=o("pretrained_model_name_or_path"),pzr=o(":"),_zr=l(),nEe=a("ul"),p5=a("li"),sEe=a("strong"),uzr=o("bert"),bzr=o(" \u2014 "),WZ=a("a"),vzr=o("FlaxBertForNextSentencePrediction"),Fzr=o(" (BERT model)"),Tzr=l(),F(_5.$$.fragment),CGe=l(),sf=a("h2"),u5=a("a"),lEe=a("span"),F(Gx.$$.fragment),Mzr=l(),iEe=a("span"),Ezr=o("FlaxAutoModelForImageClassification"),wGe=l(),Tr=a("div"),F(Ox.$$.fragment),Czr=l(),lf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QZ=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),HZ=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),Vx=a("p"),kzr=o("This class cannot be instantiated directly using "),dEe=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Yt=a("div"),F(Xx.$$.fragment),Bzr=l(),cEe=a("p"),Izr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nzr=l(),df=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(b5.$$.fragment),Xzr=l(),Ur=a("div"),F(zx.$$.fragment),zzr=l(),mEe=a("p"),Wzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qzr=l(),Cn=a("p"),Hzr=o("The model class to instantiate is selected based on the "),gEe=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),Zzr=o("pretrained_model_name_or_path"),eWr=o(":"),oWr=l(),Wx=a("ul"),v5=a("li"),_Ee=a("strong"),rWr=o("beit"),tWr=o(" \u2014 "),JZ=a("a"),aWr=o("FlaxBeitForImageClassification"),nWr=o(" (BEiT model)"),sWr=l(),F5=a("li"),uEe=a("strong"),lWr=o("vit"),iWr=o(" \u2014 "),YZ=a("a"),dWr=o("FlaxViTForImageClassification"),cWr=o(" (ViT model)"),fWr=l(),F(T5.$$.fragment),AGe=l(),cf=a("h2"),M5=a("a"),bEe=a("span"),F(Qx.$$.fragment),mWr=l(),vEe=a("span"),gWr=o("FlaxAutoModelForVision2Seq"),LGe=l(),Mr=a("div"),F(Hx.$$.fragment),hWr=l(),ff=a("p"),pWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KZ=a("a"),_Wr=o("from_pretrained()"),uWr=o(" class method or the "),ZZ=a("a"),bWr=o("from_config()"),vWr=o(` class
method.`),FWr=l(),Ux=a("p"),TWr=o("This class cannot be instantiated directly using "),FEe=a("code"),MWr=o("__init__()"),EWr=o(" (throws an error)."),CWr=l(),Kt=a("div"),F(Jx.$$.fragment),wWr=l(),TEe=a("p"),AWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LWr=l(),mf=a("p"),yWr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),xWr=o("not"),$Wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),kWr=o("from_pretrained()"),SWr=o(" to load the model weights."),RWr=l(),F(E5.$$.fragment),PWr=l(),Jr=a("div"),F(Yx.$$.fragment),BWr=l(),EEe=a("p"),IWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NWr=l(),wn=a("p"),qWr=o("The model class to instantiate is selected based on the "),CEe=a("code"),jWr=o("model_type"),DWr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),GWr=o("pretrained_model_name_or_path"),OWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),VWr=o("pretrained_model_name_or_path"),XWr=o(":"),zWr=l(),LEe=a("ul"),C5=a("li"),yEe=a("strong"),WWr=o("vision-encoder-decoder"),QWr=o(" \u2014 "),oee=a("a"),HWr=o("FlaxVisionEncoderDecoderModel"),UWr=o(" (Vision Encoder decoder model)"),JWr=l(),F(w5.$$.fragment),this.h()},l(f){const u=uPt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Kx=s(p);m=n(Kx,"A",{id:!0,class:!0,href:!0});var xEe=s(m);_=n(xEe,"SPAN",{});var $Ee=s(_);T(d.$$.fragment,$Ee),$Ee.forEach(t),xEe.forEach(t),h=i(Kx),Mo=n(Kx,"SPAN",{});var kEe=s(Mo);mi=r(kEe,"Auto Classes"),kEe.forEach(t),Kx.forEach(t),_f=i(f),rt=n(f,"P",{});var Zx=s(rt);gi=r(Zx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Zx,"CODE",{});var SEe=s(hi);Vw=r(SEe,"from_pretrained()"),SEe.forEach(t),uf=r(Zx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Zx.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var REe=s(Ln);Xw=r(REe,"AutoConfig"),REe.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var PEe=s(xn);zw=r(PEe,"AutoModel"),PEe.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var BEe=s($n);Ww=r(BEe,"AutoTokenizer"),BEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var e$=s(Ae);mk=r(e$,"will create a model that is an instance of "),bi=n(e$,"A",{href:!0});var IEe=s(bi);gk=r(IEe,"BertModel"),IEe.forEach(t),hk=r(e$,"."),e$.forEach(t),Eo=i(f),wa=n(f,"P",{});var o$=s(wa);pk=r(o$,"There is one class of "),vf=n(o$,"CODE",{});var NEe=s(vf);_k=r(NEe,"AutoModel"),NEe.forEach(t),IVe=r(o$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),o$.forEach(t),wje=i(f),vi=n(f,"H2",{class:!0});var r$=s(vi);Ff=n(r$,"A",{id:!0,class:!0,href:!0});var qEe=s(Ff);Hoe=n(qEe,"SPAN",{});var jEe=s(Hoe);T(Qw.$$.fragment,jEe),jEe.forEach(t),qEe.forEach(t),NVe=i(r$),Uoe=n(r$,"SPAN",{});var DEe=s(Uoe);qVe=r(DEe,"Extending the Auto Classes"),DEe.forEach(t),r$.forEach(t),Aje=i(f),kn=n(f,"P",{});var gf=s(kn);jVe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Joe=n(gf,"CODE",{});var GEe=s(Joe);DVe=r(GEe,"NewModel"),GEe.forEach(t),GVe=r(gf,", make sure you have a "),Yoe=n(gf,"CODE",{});var OEe=s(Yoe);OVe=r(OEe,"NewModelConfig"),OEe.forEach(t),VVe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),Lje=i(f),T(Hw.$$.fragment,f),yje=i(f),uk=n(f,"P",{});var VEe=s(uk);XVe=r(VEe,"You will then be able to use the auto classes like you would usually do!"),VEe.forEach(t),xje=i(f),T(Tf.$$.fragment,f),$je=i(f),Fi=n(f,"H2",{class:!0});var t$=s(Fi);Mf=n(t$,"A",{id:!0,class:!0,href:!0});var XEe=s(Mf);Koe=n(XEe,"SPAN",{});var zEe=s(Koe);T(Uw.$$.fragment,zEe),zEe.forEach(t),XEe.forEach(t),zVe=i(t$),Zoe=n(t$,"SPAN",{});var WEe=s(Zoe);WVe=r(WEe,"AutoConfig"),WEe.forEach(t),t$.forEach(t),kje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(Jw.$$.fragment,et),QVe=i(et),Yw=n(et,"P",{});var a$=s(Yw);HVe=r(a$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bk=n(a$,"A",{href:!0});var QEe=s(bk);UVe=r(QEe,"from_pretrained()"),QEe.forEach(t),JVe=r(a$," class method."),a$.forEach(t),YVe=i(et),Kw=n(et,"P",{});var n$=s(Kw);KVe=r(n$,"This class cannot be instantiated directly using "),ere=n(n$,"CODE",{});var HEe=s(ere);ZVe=r(HEe,"__init__()"),HEe.forEach(t),eXe=r(n$," (throws an error)."),n$.forEach(t),oXe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Zw.$$.fragment,ot),rXe=i(ot),ore=n(ot,"P",{});var UEe=s(ore);tXe=r(UEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),UEe.forEach(t),aXe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);nXe=r(hf,"The configuration class to instantiate is selected based on the "),rre=n(hf,"CODE",{});var JEe=s(rre);sXe=r(JEe,"model_type"),JEe.forEach(t),lXe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tre=n(hf,"CODE",{});var YEe=s(tre);iXe=r(YEe,"pretrained_model_name_or_path"),YEe.forEach(t),dXe=r(hf,":"),hf.forEach(t),cXe=i(ot),A=n(ot,"UL",{});var L=s(A);Ef=n(L,"LI",{});var A5=s(Ef);are=n(A5,"STRONG",{});var KEe=s(are);fXe=r(KEe,"albert"),KEe.forEach(t),mXe=r(A5," \u2014 "),vk=n(A5,"A",{href:!0});var ZEe=s(vk);gXe=r(ZEe,"AlbertConfig"),ZEe.forEach(t),hXe=r(A5," (ALBERT model)"),A5.forEach(t),pXe=i(L),Cf=n(L,"LI",{});var L5=s(Cf);nre=n(L5,"STRONG",{});var eCe=s(nre);_Xe=r(eCe,"bart"),eCe.forEach(t),uXe=r(L5," \u2014 "),Fk=n(L5,"A",{href:!0});var oCe=s(Fk);bXe=r(oCe,"BartConfig"),oCe.forEach(t),vXe=r(L5," (BART model)"),L5.forEach(t),FXe=i(L),wf=n(L,"LI",{});var y5=s(wf);sre=n(y5,"STRONG",{});var rCe=s(sre);TXe=r(rCe,"beit"),rCe.forEach(t),MXe=r(y5," \u2014 "),Tk=n(y5,"A",{href:!0});var tCe=s(Tk);EXe=r(tCe,"BeitConfig"),tCe.forEach(t),CXe=r(y5," (BEiT model)"),y5.forEach(t),wXe=i(L),Af=n(L,"LI",{});var x5=s(Af);lre=n(x5,"STRONG",{});var aCe=s(lre);AXe=r(aCe,"bert"),aCe.forEach(t),LXe=r(x5," \u2014 "),Mk=n(x5,"A",{href:!0});var nCe=s(Mk);yXe=r(nCe,"BertConfig"),nCe.forEach(t),xXe=r(x5," (BERT model)"),x5.forEach(t),$Xe=i(L),Lf=n(L,"LI",{});var $5=s(Lf);ire=n($5,"STRONG",{});var sCe=s(ire);kXe=r(sCe,"bert-generation"),sCe.forEach(t),SXe=r($5," \u2014 "),Ek=n($5,"A",{href:!0});var lCe=s(Ek);RXe=r(lCe,"BertGenerationConfig"),lCe.forEach(t),PXe=r($5," (Bert Generation model)"),$5.forEach(t),BXe=i(L),yf=n(L,"LI",{});var k5=s(yf);dre=n(k5,"STRONG",{});var iCe=s(dre);IXe=r(iCe,"big_bird"),iCe.forEach(t),NXe=r(k5," \u2014 "),Ck=n(k5,"A",{href:!0});var dCe=s(Ck);qXe=r(dCe,"BigBirdConfig"),dCe.forEach(t),jXe=r(k5," (BigBird model)"),k5.forEach(t),DXe=i(L),xf=n(L,"LI",{});var S5=s(xf);cre=n(S5,"STRONG",{});var cCe=s(cre);GXe=r(cCe,"bigbird_pegasus"),cCe.forEach(t),OXe=r(S5," \u2014 "),wk=n(S5,"A",{href:!0});var fCe=s(wk);VXe=r(fCe,"BigBirdPegasusConfig"),fCe.forEach(t),XXe=r(S5," (BigBird-Pegasus model)"),S5.forEach(t),zXe=i(L),$f=n(L,"LI",{});var R5=s($f);fre=n(R5,"STRONG",{});var mCe=s(fre);WXe=r(mCe,"blenderbot"),mCe.forEach(t),QXe=r(R5," \u2014 "),Ak=n(R5,"A",{href:!0});var gCe=s(Ak);HXe=r(gCe,"BlenderbotConfig"),gCe.forEach(t),UXe=r(R5," (Blenderbot model)"),R5.forEach(t),JXe=i(L),kf=n(L,"LI",{});var P5=s(kf);mre=n(P5,"STRONG",{});var hCe=s(mre);YXe=r(hCe,"blenderbot-small"),hCe.forEach(t),KXe=r(P5," \u2014 "),Lk=n(P5,"A",{href:!0});var pCe=s(Lk);ZXe=r(pCe,"BlenderbotSmallConfig"),pCe.forEach(t),eze=r(P5," (BlenderbotSmall model)"),P5.forEach(t),oze=i(L),Sf=n(L,"LI",{});var B5=s(Sf);gre=n(B5,"STRONG",{});var _Ce=s(gre);rze=r(_Ce,"bloom"),_Ce.forEach(t),tze=r(B5," \u2014 "),yk=n(B5,"A",{href:!0});var uCe=s(yk);aze=r(uCe,"BloomConfig"),uCe.forEach(t),nze=r(B5," (BLOOM model)"),B5.forEach(t),sze=i(L),Rf=n(L,"LI",{});var I5=s(Rf);hre=n(I5,"STRONG",{});var bCe=s(hre);lze=r(bCe,"camembert"),bCe.forEach(t),ize=r(I5," \u2014 "),xk=n(I5,"A",{href:!0});var vCe=s(xk);dze=r(vCe,"CamembertConfig"),vCe.forEach(t),cze=r(I5," (CamemBERT model)"),I5.forEach(t),fze=i(L),Pf=n(L,"LI",{});var N5=s(Pf);pre=n(N5,"STRONG",{});var FCe=s(pre);mze=r(FCe,"canine"),FCe.forEach(t),gze=r(N5," \u2014 "),$k=n(N5,"A",{href:!0});var TCe=s($k);hze=r(TCe,"CanineConfig"),TCe.forEach(t),pze=r(N5," (CANINE model)"),N5.forEach(t),_ze=i(L),Bf=n(L,"LI",{});var q5=s(Bf);_re=n(q5,"STRONG",{});var MCe=s(_re);uze=r(MCe,"clip"),MCe.forEach(t),bze=r(q5," \u2014 "),kk=n(q5,"A",{href:!0});var ECe=s(kk);vze=r(ECe,"CLIPConfig"),ECe.forEach(t),Fze=r(q5," (CLIP model)"),q5.forEach(t),Tze=i(L),If=n(L,"LI",{});var j5=s(If);ure=n(j5,"STRONG",{});var CCe=s(ure);Mze=r(CCe,"convbert"),CCe.forEach(t),Eze=r(j5," \u2014 "),Sk=n(j5,"A",{href:!0});var wCe=s(Sk);Cze=r(wCe,"ConvBertConfig"),wCe.forEach(t),wze=r(j5," (ConvBERT model)"),j5.forEach(t),Aze=i(L),Nf=n(L,"LI",{});var D5=s(Nf);bre=n(D5,"STRONG",{});var ACe=s(bre);Lze=r(ACe,"convnext"),ACe.forEach(t),yze=r(D5," \u2014 "),Rk=n(D5,"A",{href:!0});var LCe=s(Rk);xze=r(LCe,"ConvNextConfig"),LCe.forEach(t),$ze=r(D5," (ConvNeXT model)"),D5.forEach(t),kze=i(L),qf=n(L,"LI",{});var G5=s(qf);vre=n(G5,"STRONG",{});var yCe=s(vre);Sze=r(yCe,"ctrl"),yCe.forEach(t),Rze=r(G5," \u2014 "),Pk=n(G5,"A",{href:!0});var xCe=s(Pk);Pze=r(xCe,"CTRLConfig"),xCe.forEach(t),Bze=r(G5," (CTRL model)"),G5.forEach(t),Ize=i(L),jf=n(L,"LI",{});var O5=s(jf);Fre=n(O5,"STRONG",{});var $Ce=s(Fre);Nze=r($Ce,"cvt"),$Ce.forEach(t),qze=r(O5," \u2014 "),Bk=n(O5,"A",{href:!0});var kCe=s(Bk);jze=r(kCe,"CvtConfig"),kCe.forEach(t),Dze=r(O5," (CvT model)"),O5.forEach(t),Gze=i(L),Df=n(L,"LI",{});var V5=s(Df);Tre=n(V5,"STRONG",{});var SCe=s(Tre);Oze=r(SCe,"data2vec-audio"),SCe.forEach(t),Vze=r(V5," \u2014 "),Ik=n(V5,"A",{href:!0});var RCe=s(Ik);Xze=r(RCe,"Data2VecAudioConfig"),RCe.forEach(t),zze=r(V5," (Data2VecAudio model)"),V5.forEach(t),Wze=i(L),Gf=n(L,"LI",{});var X5=s(Gf);Mre=n(X5,"STRONG",{});var PCe=s(Mre);Qze=r(PCe,"data2vec-text"),PCe.forEach(t),Hze=r(X5," \u2014 "),Nk=n(X5,"A",{href:!0});var BCe=s(Nk);Uze=r(BCe,"Data2VecTextConfig"),BCe.forEach(t),Jze=r(X5," (Data2VecText model)"),X5.forEach(t),Yze=i(L),Of=n(L,"LI",{});var z5=s(Of);Ere=n(z5,"STRONG",{});var ICe=s(Ere);Kze=r(ICe,"data2vec-vision"),ICe.forEach(t),Zze=r(z5," \u2014 "),qk=n(z5,"A",{href:!0});var NCe=s(qk);eWe=r(NCe,"Data2VecVisionConfig"),NCe.forEach(t),oWe=r(z5," (Data2VecVision model)"),z5.forEach(t),rWe=i(L),Vf=n(L,"LI",{});var W5=s(Vf);Cre=n(W5,"STRONG",{});var qCe=s(Cre);tWe=r(qCe,"deberta"),qCe.forEach(t),aWe=r(W5," \u2014 "),jk=n(W5,"A",{href:!0});var jCe=s(jk);nWe=r(jCe,"DebertaConfig"),jCe.forEach(t),sWe=r(W5," (DeBERTa model)"),W5.forEach(t),lWe=i(L),Xf=n(L,"LI",{});var Q5=s(Xf);wre=n(Q5,"STRONG",{});var DCe=s(wre);iWe=r(DCe,"deberta-v2"),DCe.forEach(t),dWe=r(Q5," \u2014 "),Dk=n(Q5,"A",{href:!0});var GCe=s(Dk);cWe=r(GCe,"DebertaV2Config"),GCe.forEach(t),fWe=r(Q5," (DeBERTa-v2 model)"),Q5.forEach(t),mWe=i(L),zf=n(L,"LI",{});var H5=s(zf);Are=n(H5,"STRONG",{});var OCe=s(Are);gWe=r(OCe,"decision_transformer"),OCe.forEach(t),hWe=r(H5," \u2014 "),Gk=n(H5,"A",{href:!0});var KWr=s(Gk);pWe=r(KWr,"DecisionTransformerConfig"),KWr.forEach(t),_We=r(H5," (Decision Transformer model)"),H5.forEach(t),uWe=i(L),Wf=n(L,"LI",{});var VCe=s(Wf);Lre=n(VCe,"STRONG",{});var ZWr=s(Lre);bWe=r(ZWr,"deit"),ZWr.forEach(t),vWe=r(VCe," \u2014 "),Ok=n(VCe,"A",{href:!0});var eQr=s(Ok);FWe=r(eQr,"DeiTConfig"),eQr.forEach(t),TWe=r(VCe," (DeiT model)"),VCe.forEach(t),MWe=i(L),Qf=n(L,"LI",{});var XCe=s(Qf);yre=n(XCe,"STRONG",{});var oQr=s(yre);EWe=r(oQr,"detr"),oQr.forEach(t),CWe=r(XCe," \u2014 "),Vk=n(XCe,"A",{href:!0});var rQr=s(Vk);wWe=r(rQr,"DetrConfig"),rQr.forEach(t),AWe=r(XCe," (DETR model)"),XCe.forEach(t),LWe=i(L),Hf=n(L,"LI",{});var zCe=s(Hf);xre=n(zCe,"STRONG",{});var tQr=s(xre);yWe=r(tQr,"distilbert"),tQr.forEach(t),xWe=r(zCe," \u2014 "),Xk=n(zCe,"A",{href:!0});var aQr=s(Xk);$We=r(aQr,"DistilBertConfig"),aQr.forEach(t),kWe=r(zCe," (DistilBERT model)"),zCe.forEach(t),SWe=i(L),Uf=n(L,"LI",{});var WCe=s(Uf);$re=n(WCe,"STRONG",{});var nQr=s($re);RWe=r(nQr,"dpr"),nQr.forEach(t),PWe=r(WCe," \u2014 "),zk=n(WCe,"A",{href:!0});var sQr=s(zk);BWe=r(sQr,"DPRConfig"),sQr.forEach(t),IWe=r(WCe," (DPR model)"),WCe.forEach(t),NWe=i(L),Jf=n(L,"LI",{});var QCe=s(Jf);kre=n(QCe,"STRONG",{});var lQr=s(kre);qWe=r(lQr,"dpt"),lQr.forEach(t),jWe=r(QCe," \u2014 "),Wk=n(QCe,"A",{href:!0});var iQr=s(Wk);DWe=r(iQr,"DPTConfig"),iQr.forEach(t),GWe=r(QCe," (DPT model)"),QCe.forEach(t),OWe=i(L),Yf=n(L,"LI",{});var HCe=s(Yf);Sre=n(HCe,"STRONG",{});var dQr=s(Sre);VWe=r(dQr,"electra"),dQr.forEach(t),XWe=r(HCe," \u2014 "),Qk=n(HCe,"A",{href:!0});var cQr=s(Qk);zWe=r(cQr,"ElectraConfig"),cQr.forEach(t),WWe=r(HCe," (ELECTRA model)"),HCe.forEach(t),QWe=i(L),Kf=n(L,"LI",{});var UCe=s(Kf);Rre=n(UCe,"STRONG",{});var fQr=s(Rre);HWe=r(fQr,"encoder-decoder"),fQr.forEach(t),UWe=r(UCe," \u2014 "),Hk=n(UCe,"A",{href:!0});var mQr=s(Hk);JWe=r(mQr,"EncoderDecoderConfig"),mQr.forEach(t),YWe=r(UCe," (Encoder decoder model)"),UCe.forEach(t),KWe=i(L),Zf=n(L,"LI",{});var JCe=s(Zf);Pre=n(JCe,"STRONG",{});var gQr=s(Pre);ZWe=r(gQr,"flaubert"),gQr.forEach(t),eQe=r(JCe," \u2014 "),Uk=n(JCe,"A",{href:!0});var hQr=s(Uk);oQe=r(hQr,"FlaubertConfig"),hQr.forEach(t),rQe=r(JCe," (FlauBERT model)"),JCe.forEach(t),tQe=i(L),em=n(L,"LI",{});var YCe=s(em);Bre=n(YCe,"STRONG",{});var pQr=s(Bre);aQe=r(pQr,"flava"),pQr.forEach(t),nQe=r(YCe," \u2014 "),Jk=n(YCe,"A",{href:!0});var _Qr=s(Jk);sQe=r(_Qr,"FlavaConfig"),_Qr.forEach(t),lQe=r(YCe," (FLAVA model)"),YCe.forEach(t),iQe=i(L),om=n(L,"LI",{});var KCe=s(om);Ire=n(KCe,"STRONG",{});var uQr=s(Ire);dQe=r(uQr,"fnet"),uQr.forEach(t),cQe=r(KCe," \u2014 "),Yk=n(KCe,"A",{href:!0});var bQr=s(Yk);fQe=r(bQr,"FNetConfig"),bQr.forEach(t),mQe=r(KCe," (FNet model)"),KCe.forEach(t),gQe=i(L),rm=n(L,"LI",{});var ZCe=s(rm);Nre=n(ZCe,"STRONG",{});var vQr=s(Nre);hQe=r(vQr,"fsmt"),vQr.forEach(t),pQe=r(ZCe," \u2014 "),Kk=n(ZCe,"A",{href:!0});var FQr=s(Kk);_Qe=r(FQr,"FSMTConfig"),FQr.forEach(t),uQe=r(ZCe," (FairSeq Machine-Translation model)"),ZCe.forEach(t),bQe=i(L),tm=n(L,"LI",{});var e5e=s(tm);qre=n(e5e,"STRONG",{});var TQr=s(qre);vQe=r(TQr,"funnel"),TQr.forEach(t),FQe=r(e5e," \u2014 "),Zk=n(e5e,"A",{href:!0});var MQr=s(Zk);TQe=r(MQr,"FunnelConfig"),MQr.forEach(t),MQe=r(e5e," (Funnel Transformer model)"),e5e.forEach(t),EQe=i(L),am=n(L,"LI",{});var o5e=s(am);jre=n(o5e,"STRONG",{});var EQr=s(jre);CQe=r(EQr,"glpn"),EQr.forEach(t),wQe=r(o5e," \u2014 "),eS=n(o5e,"A",{href:!0});var CQr=s(eS);AQe=r(CQr,"GLPNConfig"),CQr.forEach(t),LQe=r(o5e," (GLPN model)"),o5e.forEach(t),yQe=i(L),nm=n(L,"LI",{});var r5e=s(nm);Dre=n(r5e,"STRONG",{});var wQr=s(Dre);xQe=r(wQr,"gpt2"),wQr.forEach(t),$Qe=r(r5e," \u2014 "),oS=n(r5e,"A",{href:!0});var AQr=s(oS);kQe=r(AQr,"GPT2Config"),AQr.forEach(t),SQe=r(r5e," (OpenAI GPT-2 model)"),r5e.forEach(t),RQe=i(L),sm=n(L,"LI",{});var t5e=s(sm);Gre=n(t5e,"STRONG",{});var LQr=s(Gre);PQe=r(LQr,"gpt_neo"),LQr.forEach(t),BQe=r(t5e," \u2014 "),rS=n(t5e,"A",{href:!0});var yQr=s(rS);IQe=r(yQr,"GPTNeoConfig"),yQr.forEach(t),NQe=r(t5e," (GPT Neo model)"),t5e.forEach(t),qQe=i(L),lm=n(L,"LI",{});var a5e=s(lm);Ore=n(a5e,"STRONG",{});var xQr=s(Ore);jQe=r(xQr,"gpt_neox"),xQr.forEach(t),DQe=r(a5e," \u2014 "),tS=n(a5e,"A",{href:!0});var $Qr=s(tS);GQe=r($Qr,"GPTNeoXConfig"),$Qr.forEach(t),OQe=r(a5e," (GPT NeoX model)"),a5e.forEach(t),VQe=i(L),im=n(L,"LI",{});var n5e=s(im);Vre=n(n5e,"STRONG",{});var kQr=s(Vre);XQe=r(kQr,"gptj"),kQr.forEach(t),zQe=r(n5e," \u2014 "),aS=n(n5e,"A",{href:!0});var SQr=s(aS);WQe=r(SQr,"GPTJConfig"),SQr.forEach(t),QQe=r(n5e," (GPT-J model)"),n5e.forEach(t),HQe=i(L),dm=n(L,"LI",{});var s5e=s(dm);Xre=n(s5e,"STRONG",{});var RQr=s(Xre);UQe=r(RQr,"hubert"),RQr.forEach(t),JQe=r(s5e," \u2014 "),nS=n(s5e,"A",{href:!0});var PQr=s(nS);YQe=r(PQr,"HubertConfig"),PQr.forEach(t),KQe=r(s5e," (Hubert model)"),s5e.forEach(t),ZQe=i(L),cm=n(L,"LI",{});var l5e=s(cm);zre=n(l5e,"STRONG",{});var BQr=s(zre);eHe=r(BQr,"ibert"),BQr.forEach(t),oHe=r(l5e," \u2014 "),sS=n(l5e,"A",{href:!0});var IQr=s(sS);rHe=r(IQr,"IBertConfig"),IQr.forEach(t),tHe=r(l5e," (I-BERT model)"),l5e.forEach(t),aHe=i(L),fm=n(L,"LI",{});var i5e=s(fm);Wre=n(i5e,"STRONG",{});var NQr=s(Wre);nHe=r(NQr,"imagegpt"),NQr.forEach(t),sHe=r(i5e," \u2014 "),lS=n(i5e,"A",{href:!0});var qQr=s(lS);lHe=r(qQr,"ImageGPTConfig"),qQr.forEach(t),iHe=r(i5e," (ImageGPT model)"),i5e.forEach(t),dHe=i(L),mm=n(L,"LI",{});var d5e=s(mm);Qre=n(d5e,"STRONG",{});var jQr=s(Qre);cHe=r(jQr,"layoutlm"),jQr.forEach(t),fHe=r(d5e," \u2014 "),iS=n(d5e,"A",{href:!0});var DQr=s(iS);mHe=r(DQr,"LayoutLMConfig"),DQr.forEach(t),gHe=r(d5e," (LayoutLM model)"),d5e.forEach(t),hHe=i(L),gm=n(L,"LI",{});var c5e=s(gm);Hre=n(c5e,"STRONG",{});var GQr=s(Hre);pHe=r(GQr,"layoutlmv2"),GQr.forEach(t),_He=r(c5e," \u2014 "),dS=n(c5e,"A",{href:!0});var OQr=s(dS);uHe=r(OQr,"LayoutLMv2Config"),OQr.forEach(t),bHe=r(c5e," (LayoutLMv2 model)"),c5e.forEach(t),vHe=i(L),hm=n(L,"LI",{});var f5e=s(hm);Ure=n(f5e,"STRONG",{});var VQr=s(Ure);FHe=r(VQr,"layoutlmv3"),VQr.forEach(t),THe=r(f5e," \u2014 "),cS=n(f5e,"A",{href:!0});var XQr=s(cS);MHe=r(XQr,"LayoutLMv3Config"),XQr.forEach(t),EHe=r(f5e," (LayoutLMv3 model)"),f5e.forEach(t),CHe=i(L),pm=n(L,"LI",{});var m5e=s(pm);Jre=n(m5e,"STRONG",{});var zQr=s(Jre);wHe=r(zQr,"led"),zQr.forEach(t),AHe=r(m5e," \u2014 "),fS=n(m5e,"A",{href:!0});var WQr=s(fS);LHe=r(WQr,"LEDConfig"),WQr.forEach(t),yHe=r(m5e," (LED model)"),m5e.forEach(t),xHe=i(L),_m=n(L,"LI",{});var g5e=s(_m);Yre=n(g5e,"STRONG",{});var QQr=s(Yre);$He=r(QQr,"levit"),QQr.forEach(t),kHe=r(g5e," \u2014 "),mS=n(g5e,"A",{href:!0});var HQr=s(mS);SHe=r(HQr,"LevitConfig"),HQr.forEach(t),RHe=r(g5e," (LeViT model)"),g5e.forEach(t),PHe=i(L),um=n(L,"LI",{});var h5e=s(um);Kre=n(h5e,"STRONG",{});var UQr=s(Kre);BHe=r(UQr,"longformer"),UQr.forEach(t),IHe=r(h5e," \u2014 "),gS=n(h5e,"A",{href:!0});var JQr=s(gS);NHe=r(JQr,"LongformerConfig"),JQr.forEach(t),qHe=r(h5e," (Longformer model)"),h5e.forEach(t),jHe=i(L),bm=n(L,"LI",{});var p5e=s(bm);Zre=n(p5e,"STRONG",{});var YQr=s(Zre);DHe=r(YQr,"luke"),YQr.forEach(t),GHe=r(p5e," \u2014 "),hS=n(p5e,"A",{href:!0});var KQr=s(hS);OHe=r(KQr,"LukeConfig"),KQr.forEach(t),VHe=r(p5e," (LUKE model)"),p5e.forEach(t),XHe=i(L),vm=n(L,"LI",{});var _5e=s(vm);ete=n(_5e,"STRONG",{});var ZQr=s(ete);zHe=r(ZQr,"lxmert"),ZQr.forEach(t),WHe=r(_5e," \u2014 "),pS=n(_5e,"A",{href:!0});var eHr=s(pS);QHe=r(eHr,"LxmertConfig"),eHr.forEach(t),HHe=r(_5e," (LXMERT model)"),_5e.forEach(t),UHe=i(L),Fm=n(L,"LI",{});var u5e=s(Fm);ote=n(u5e,"STRONG",{});var oHr=s(ote);JHe=r(oHr,"m2m_100"),oHr.forEach(t),YHe=r(u5e," \u2014 "),_S=n(u5e,"A",{href:!0});var rHr=s(_S);KHe=r(rHr,"M2M100Config"),rHr.forEach(t),ZHe=r(u5e," (M2M100 model)"),u5e.forEach(t),eUe=i(L),Tm=n(L,"LI",{});var b5e=s(Tm);rte=n(b5e,"STRONG",{});var tHr=s(rte);oUe=r(tHr,"marian"),tHr.forEach(t),rUe=r(b5e," \u2014 "),uS=n(b5e,"A",{href:!0});var aHr=s(uS);tUe=r(aHr,"MarianConfig"),aHr.forEach(t),aUe=r(b5e," (Marian model)"),b5e.forEach(t),nUe=i(L),Mm=n(L,"LI",{});var v5e=s(Mm);tte=n(v5e,"STRONG",{});var nHr=s(tte);sUe=r(nHr,"maskformer"),nHr.forEach(t),lUe=r(v5e," \u2014 "),bS=n(v5e,"A",{href:!0});var sHr=s(bS);iUe=r(sHr,"MaskFormerConfig"),sHr.forEach(t),dUe=r(v5e," (MaskFormer model)"),v5e.forEach(t),cUe=i(L),Em=n(L,"LI",{});var F5e=s(Em);ate=n(F5e,"STRONG",{});var lHr=s(ate);fUe=r(lHr,"mbart"),lHr.forEach(t),mUe=r(F5e," \u2014 "),vS=n(F5e,"A",{href:!0});var iHr=s(vS);gUe=r(iHr,"MBartConfig"),iHr.forEach(t),hUe=r(F5e," (mBART model)"),F5e.forEach(t),pUe=i(L),Cm=n(L,"LI",{});var T5e=s(Cm);nte=n(T5e,"STRONG",{});var dHr=s(nte);_Ue=r(dHr,"mctct"),dHr.forEach(t),uUe=r(T5e," \u2014 "),FS=n(T5e,"A",{href:!0});var cHr=s(FS);bUe=r(cHr,"MCTCTConfig"),cHr.forEach(t),vUe=r(T5e," (M-CTC-T model)"),T5e.forEach(t),FUe=i(L),wm=n(L,"LI",{});var M5e=s(wm);ste=n(M5e,"STRONG",{});var fHr=s(ste);TUe=r(fHr,"megatron-bert"),fHr.forEach(t),MUe=r(M5e," \u2014 "),TS=n(M5e,"A",{href:!0});var mHr=s(TS);EUe=r(mHr,"MegatronBertConfig"),mHr.forEach(t),CUe=r(M5e," (Megatron-BERT model)"),M5e.forEach(t),wUe=i(L),Am=n(L,"LI",{});var E5e=s(Am);lte=n(E5e,"STRONG",{});var gHr=s(lte);AUe=r(gHr,"mobilebert"),gHr.forEach(t),LUe=r(E5e," \u2014 "),MS=n(E5e,"A",{href:!0});var hHr=s(MS);yUe=r(hHr,"MobileBertConfig"),hHr.forEach(t),xUe=r(E5e," (MobileBERT model)"),E5e.forEach(t),$Ue=i(L),Lm=n(L,"LI",{});var C5e=s(Lm);ite=n(C5e,"STRONG",{});var pHr=s(ite);kUe=r(pHr,"mpnet"),pHr.forEach(t),SUe=r(C5e," \u2014 "),ES=n(C5e,"A",{href:!0});var _Hr=s(ES);RUe=r(_Hr,"MPNetConfig"),_Hr.forEach(t),PUe=r(C5e," (MPNet model)"),C5e.forEach(t),BUe=i(L),ym=n(L,"LI",{});var w5e=s(ym);dte=n(w5e,"STRONG",{});var uHr=s(dte);IUe=r(uHr,"mt5"),uHr.forEach(t),NUe=r(w5e," \u2014 "),CS=n(w5e,"A",{href:!0});var bHr=s(CS);qUe=r(bHr,"MT5Config"),bHr.forEach(t),jUe=r(w5e," (MT5 model)"),w5e.forEach(t),DUe=i(L),xm=n(L,"LI",{});var A5e=s(xm);cte=n(A5e,"STRONG",{});var vHr=s(cte);GUe=r(vHr,"nystromformer"),vHr.forEach(t),OUe=r(A5e," \u2014 "),wS=n(A5e,"A",{href:!0});var FHr=s(wS);VUe=r(FHr,"NystromformerConfig"),FHr.forEach(t),XUe=r(A5e," (Nystr\xF6mformer model)"),A5e.forEach(t),zUe=i(L),$m=n(L,"LI",{});var L5e=s($m);fte=n(L5e,"STRONG",{});var THr=s(fte);WUe=r(THr,"openai-gpt"),THr.forEach(t),QUe=r(L5e," \u2014 "),AS=n(L5e,"A",{href:!0});var MHr=s(AS);HUe=r(MHr,"OpenAIGPTConfig"),MHr.forEach(t),UUe=r(L5e," (OpenAI GPT model)"),L5e.forEach(t),JUe=i(L),km=n(L,"LI",{});var y5e=s(km);mte=n(y5e,"STRONG",{});var EHr=s(mte);YUe=r(EHr,"opt"),EHr.forEach(t),KUe=r(y5e," \u2014 "),LS=n(y5e,"A",{href:!0});var CHr=s(LS);ZUe=r(CHr,"OPTConfig"),CHr.forEach(t),eJe=r(y5e," (OPT model)"),y5e.forEach(t),oJe=i(L),Sm=n(L,"LI",{});var x5e=s(Sm);gte=n(x5e,"STRONG",{});var wHr=s(gte);rJe=r(wHr,"pegasus"),wHr.forEach(t),tJe=r(x5e," \u2014 "),yS=n(x5e,"A",{href:!0});var AHr=s(yS);aJe=r(AHr,"PegasusConfig"),AHr.forEach(t),nJe=r(x5e," (Pegasus model)"),x5e.forEach(t),sJe=i(L),Rm=n(L,"LI",{});var $5e=s(Rm);hte=n($5e,"STRONG",{});var LHr=s(hte);lJe=r(LHr,"perceiver"),LHr.forEach(t),iJe=r($5e," \u2014 "),xS=n($5e,"A",{href:!0});var yHr=s(xS);dJe=r(yHr,"PerceiverConfig"),yHr.forEach(t),cJe=r($5e," (Perceiver model)"),$5e.forEach(t),fJe=i(L),Pm=n(L,"LI",{});var k5e=s(Pm);pte=n(k5e,"STRONG",{});var xHr=s(pte);mJe=r(xHr,"plbart"),xHr.forEach(t),gJe=r(k5e," \u2014 "),$S=n(k5e,"A",{href:!0});var $Hr=s($S);hJe=r($Hr,"PLBartConfig"),$Hr.forEach(t),pJe=r(k5e," (PLBart model)"),k5e.forEach(t),_Je=i(L),Bm=n(L,"LI",{});var S5e=s(Bm);_te=n(S5e,"STRONG",{});var kHr=s(_te);uJe=r(kHr,"poolformer"),kHr.forEach(t),bJe=r(S5e," \u2014 "),kS=n(S5e,"A",{href:!0});var SHr=s(kS);vJe=r(SHr,"PoolFormerConfig"),SHr.forEach(t),FJe=r(S5e," (PoolFormer model)"),S5e.forEach(t),TJe=i(L),Im=n(L,"LI",{});var R5e=s(Im);ute=n(R5e,"STRONG",{});var RHr=s(ute);MJe=r(RHr,"prophetnet"),RHr.forEach(t),EJe=r(R5e," \u2014 "),SS=n(R5e,"A",{href:!0});var PHr=s(SS);CJe=r(PHr,"ProphetNetConfig"),PHr.forEach(t),wJe=r(R5e," (ProphetNet model)"),R5e.forEach(t),AJe=i(L),Nm=n(L,"LI",{});var P5e=s(Nm);bte=n(P5e,"STRONG",{});var BHr=s(bte);LJe=r(BHr,"qdqbert"),BHr.forEach(t),yJe=r(P5e," \u2014 "),RS=n(P5e,"A",{href:!0});var IHr=s(RS);xJe=r(IHr,"QDQBertConfig"),IHr.forEach(t),$Je=r(P5e," (QDQBert model)"),P5e.forEach(t),kJe=i(L),qm=n(L,"LI",{});var B5e=s(qm);vte=n(B5e,"STRONG",{});var NHr=s(vte);SJe=r(NHr,"rag"),NHr.forEach(t),RJe=r(B5e," \u2014 "),PS=n(B5e,"A",{href:!0});var qHr=s(PS);PJe=r(qHr,"RagConfig"),qHr.forEach(t),BJe=r(B5e," (RAG model)"),B5e.forEach(t),IJe=i(L),jm=n(L,"LI",{});var I5e=s(jm);Fte=n(I5e,"STRONG",{});var jHr=s(Fte);NJe=r(jHr,"realm"),jHr.forEach(t),qJe=r(I5e," \u2014 "),BS=n(I5e,"A",{href:!0});var DHr=s(BS);jJe=r(DHr,"RealmConfig"),DHr.forEach(t),DJe=r(I5e," (REALM model)"),I5e.forEach(t),GJe=i(L),Dm=n(L,"LI",{});var N5e=s(Dm);Tte=n(N5e,"STRONG",{});var GHr=s(Tte);OJe=r(GHr,"reformer"),GHr.forEach(t),VJe=r(N5e," \u2014 "),IS=n(N5e,"A",{href:!0});var OHr=s(IS);XJe=r(OHr,"ReformerConfig"),OHr.forEach(t),zJe=r(N5e," (Reformer model)"),N5e.forEach(t),WJe=i(L),Gm=n(L,"LI",{});var q5e=s(Gm);Mte=n(q5e,"STRONG",{});var VHr=s(Mte);QJe=r(VHr,"regnet"),VHr.forEach(t),HJe=r(q5e," \u2014 "),NS=n(q5e,"A",{href:!0});var XHr=s(NS);UJe=r(XHr,"RegNetConfig"),XHr.forEach(t),JJe=r(q5e," (RegNet model)"),q5e.forEach(t),YJe=i(L),Om=n(L,"LI",{});var j5e=s(Om);Ete=n(j5e,"STRONG",{});var zHr=s(Ete);KJe=r(zHr,"rembert"),zHr.forEach(t),ZJe=r(j5e," \u2014 "),qS=n(j5e,"A",{href:!0});var WHr=s(qS);eYe=r(WHr,"RemBertConfig"),WHr.forEach(t),oYe=r(j5e," (RemBERT model)"),j5e.forEach(t),rYe=i(L),Vm=n(L,"LI",{});var D5e=s(Vm);Cte=n(D5e,"STRONG",{});var QHr=s(Cte);tYe=r(QHr,"resnet"),QHr.forEach(t),aYe=r(D5e," \u2014 "),jS=n(D5e,"A",{href:!0});var HHr=s(jS);nYe=r(HHr,"ResNetConfig"),HHr.forEach(t),sYe=r(D5e," (ResNet model)"),D5e.forEach(t),lYe=i(L),Xm=n(L,"LI",{});var G5e=s(Xm);wte=n(G5e,"STRONG",{});var UHr=s(wte);iYe=r(UHr,"retribert"),UHr.forEach(t),dYe=r(G5e," \u2014 "),DS=n(G5e,"A",{href:!0});var JHr=s(DS);cYe=r(JHr,"RetriBertConfig"),JHr.forEach(t),fYe=r(G5e," (RetriBERT model)"),G5e.forEach(t),mYe=i(L),zm=n(L,"LI",{});var O5e=s(zm);Ate=n(O5e,"STRONG",{});var YHr=s(Ate);gYe=r(YHr,"roberta"),YHr.forEach(t),hYe=r(O5e," \u2014 "),GS=n(O5e,"A",{href:!0});var KHr=s(GS);pYe=r(KHr,"RobertaConfig"),KHr.forEach(t),_Ye=r(O5e," (RoBERTa model)"),O5e.forEach(t),uYe=i(L),Wm=n(L,"LI",{});var V5e=s(Wm);Lte=n(V5e,"STRONG",{});var ZHr=s(Lte);bYe=r(ZHr,"roformer"),ZHr.forEach(t),vYe=r(V5e," \u2014 "),OS=n(V5e,"A",{href:!0});var eUr=s(OS);FYe=r(eUr,"RoFormerConfig"),eUr.forEach(t),TYe=r(V5e," (RoFormer model)"),V5e.forEach(t),MYe=i(L),Qm=n(L,"LI",{});var X5e=s(Qm);yte=n(X5e,"STRONG",{});var oUr=s(yte);EYe=r(oUr,"segformer"),oUr.forEach(t),CYe=r(X5e," \u2014 "),VS=n(X5e,"A",{href:!0});var rUr=s(VS);wYe=r(rUr,"SegformerConfig"),rUr.forEach(t),AYe=r(X5e," (SegFormer model)"),X5e.forEach(t),LYe=i(L),Hm=n(L,"LI",{});var z5e=s(Hm);xte=n(z5e,"STRONG",{});var tUr=s(xte);yYe=r(tUr,"sew"),tUr.forEach(t),xYe=r(z5e," \u2014 "),XS=n(z5e,"A",{href:!0});var aUr=s(XS);$Ye=r(aUr,"SEWConfig"),aUr.forEach(t),kYe=r(z5e," (SEW model)"),z5e.forEach(t),SYe=i(L),Um=n(L,"LI",{});var W5e=s(Um);$te=n(W5e,"STRONG",{});var nUr=s($te);RYe=r(nUr,"sew-d"),nUr.forEach(t),PYe=r(W5e," \u2014 "),zS=n(W5e,"A",{href:!0});var sUr=s(zS);BYe=r(sUr,"SEWDConfig"),sUr.forEach(t),IYe=r(W5e," (SEW-D model)"),W5e.forEach(t),NYe=i(L),Jm=n(L,"LI",{});var Q5e=s(Jm);kte=n(Q5e,"STRONG",{});var lUr=s(kte);qYe=r(lUr,"speech-encoder-decoder"),lUr.forEach(t),jYe=r(Q5e," \u2014 "),WS=n(Q5e,"A",{href:!0});var iUr=s(WS);DYe=r(iUr,"SpeechEncoderDecoderConfig"),iUr.forEach(t),GYe=r(Q5e," (Speech Encoder decoder model)"),Q5e.forEach(t),OYe=i(L),Ym=n(L,"LI",{});var H5e=s(Ym);Ste=n(H5e,"STRONG",{});var dUr=s(Ste);VYe=r(dUr,"speech_to_text"),dUr.forEach(t),XYe=r(H5e," \u2014 "),QS=n(H5e,"A",{href:!0});var cUr=s(QS);zYe=r(cUr,"Speech2TextConfig"),cUr.forEach(t),WYe=r(H5e," (Speech2Text model)"),H5e.forEach(t),QYe=i(L),Km=n(L,"LI",{});var U5e=s(Km);Rte=n(U5e,"STRONG",{});var fUr=s(Rte);HYe=r(fUr,"speech_to_text_2"),fUr.forEach(t),UYe=r(U5e," \u2014 "),HS=n(U5e,"A",{href:!0});var mUr=s(HS);JYe=r(mUr,"Speech2Text2Config"),mUr.forEach(t),YYe=r(U5e," (Speech2Text2 model)"),U5e.forEach(t),KYe=i(L),Zm=n(L,"LI",{});var J5e=s(Zm);Pte=n(J5e,"STRONG",{});var gUr=s(Pte);ZYe=r(gUr,"splinter"),gUr.forEach(t),eKe=r(J5e," \u2014 "),US=n(J5e,"A",{href:!0});var hUr=s(US);oKe=r(hUr,"SplinterConfig"),hUr.forEach(t),rKe=r(J5e," (Splinter model)"),J5e.forEach(t),tKe=i(L),eg=n(L,"LI",{});var Y5e=s(eg);Bte=n(Y5e,"STRONG",{});var pUr=s(Bte);aKe=r(pUr,"squeezebert"),pUr.forEach(t),nKe=r(Y5e," \u2014 "),JS=n(Y5e,"A",{href:!0});var _Ur=s(JS);sKe=r(_Ur,"SqueezeBertConfig"),_Ur.forEach(t),lKe=r(Y5e," (SqueezeBERT model)"),Y5e.forEach(t),iKe=i(L),og=n(L,"LI",{});var K5e=s(og);Ite=n(K5e,"STRONG",{});var uUr=s(Ite);dKe=r(uUr,"swin"),uUr.forEach(t),cKe=r(K5e," \u2014 "),YS=n(K5e,"A",{href:!0});var bUr=s(YS);fKe=r(bUr,"SwinConfig"),bUr.forEach(t),mKe=r(K5e," (Swin Transformer model)"),K5e.forEach(t),gKe=i(L),rg=n(L,"LI",{});var Z5e=s(rg);Nte=n(Z5e,"STRONG",{});var vUr=s(Nte);hKe=r(vUr,"t5"),vUr.forEach(t),pKe=r(Z5e," \u2014 "),KS=n(Z5e,"A",{href:!0});var FUr=s(KS);_Ke=r(FUr,"T5Config"),FUr.forEach(t),uKe=r(Z5e," (T5 model)"),Z5e.forEach(t),bKe=i(L),tg=n(L,"LI",{});var e0e=s(tg);qte=n(e0e,"STRONG",{});var TUr=s(qte);vKe=r(TUr,"tapas"),TUr.forEach(t),FKe=r(e0e," \u2014 "),ZS=n(e0e,"A",{href:!0});var MUr=s(ZS);TKe=r(MUr,"TapasConfig"),MUr.forEach(t),MKe=r(e0e," (TAPAS model)"),e0e.forEach(t),EKe=i(L),ag=n(L,"LI",{});var o0e=s(ag);jte=n(o0e,"STRONG",{});var EUr=s(jte);CKe=r(EUr,"trajectory_transformer"),EUr.forEach(t),wKe=r(o0e," \u2014 "),eR=n(o0e,"A",{href:!0});var CUr=s(eR);AKe=r(CUr,"TrajectoryTransformerConfig"),CUr.forEach(t),LKe=r(o0e," (Trajectory Transformer model)"),o0e.forEach(t),yKe=i(L),ng=n(L,"LI",{});var r0e=s(ng);Dte=n(r0e,"STRONG",{});var wUr=s(Dte);xKe=r(wUr,"transfo-xl"),wUr.forEach(t),$Ke=r(r0e," \u2014 "),oR=n(r0e,"A",{href:!0});var AUr=s(oR);kKe=r(AUr,"TransfoXLConfig"),AUr.forEach(t),SKe=r(r0e," (Transformer-XL model)"),r0e.forEach(t),RKe=i(L),sg=n(L,"LI",{});var t0e=s(sg);Gte=n(t0e,"STRONG",{});var LUr=s(Gte);PKe=r(LUr,"trocr"),LUr.forEach(t),BKe=r(t0e," \u2014 "),rR=n(t0e,"A",{href:!0});var yUr=s(rR);IKe=r(yUr,"TrOCRConfig"),yUr.forEach(t),NKe=r(t0e," (TrOCR model)"),t0e.forEach(t),qKe=i(L),lg=n(L,"LI",{});var a0e=s(lg);Ote=n(a0e,"STRONG",{});var xUr=s(Ote);jKe=r(xUr,"unispeech"),xUr.forEach(t),DKe=r(a0e," \u2014 "),tR=n(a0e,"A",{href:!0});var $Ur=s(tR);GKe=r($Ur,"UniSpeechConfig"),$Ur.forEach(t),OKe=r(a0e," (UniSpeech model)"),a0e.forEach(t),VKe=i(L),ig=n(L,"LI",{});var n0e=s(ig);Vte=n(n0e,"STRONG",{});var kUr=s(Vte);XKe=r(kUr,"unispeech-sat"),kUr.forEach(t),zKe=r(n0e," \u2014 "),aR=n(n0e,"A",{href:!0});var SUr=s(aR);WKe=r(SUr,"UniSpeechSatConfig"),SUr.forEach(t),QKe=r(n0e," (UniSpeechSat model)"),n0e.forEach(t),HKe=i(L),dg=n(L,"LI",{});var s0e=s(dg);Xte=n(s0e,"STRONG",{});var RUr=s(Xte);UKe=r(RUr,"van"),RUr.forEach(t),JKe=r(s0e," \u2014 "),nR=n(s0e,"A",{href:!0});var PUr=s(nR);YKe=r(PUr,"VanConfig"),PUr.forEach(t),KKe=r(s0e," (VAN model)"),s0e.forEach(t),ZKe=i(L),cg=n(L,"LI",{});var l0e=s(cg);zte=n(l0e,"STRONG",{});var BUr=s(zte);eZe=r(BUr,"vilt"),BUr.forEach(t),oZe=r(l0e," \u2014 "),sR=n(l0e,"A",{href:!0});var IUr=s(sR);rZe=r(IUr,"ViltConfig"),IUr.forEach(t),tZe=r(l0e," (ViLT model)"),l0e.forEach(t),aZe=i(L),fg=n(L,"LI",{});var i0e=s(fg);Wte=n(i0e,"STRONG",{});var NUr=s(Wte);nZe=r(NUr,"vision-encoder-decoder"),NUr.forEach(t),sZe=r(i0e," \u2014 "),lR=n(i0e,"A",{href:!0});var qUr=s(lR);lZe=r(qUr,"VisionEncoderDecoderConfig"),qUr.forEach(t),iZe=r(i0e," (Vision Encoder decoder model)"),i0e.forEach(t),dZe=i(L),mg=n(L,"LI",{});var d0e=s(mg);Qte=n(d0e,"STRONG",{});var jUr=s(Qte);cZe=r(jUr,"vision-text-dual-encoder"),jUr.forEach(t),fZe=r(d0e," \u2014 "),iR=n(d0e,"A",{href:!0});var DUr=s(iR);mZe=r(DUr,"VisionTextDualEncoderConfig"),DUr.forEach(t),gZe=r(d0e," (VisionTextDualEncoder model)"),d0e.forEach(t),hZe=i(L),gg=n(L,"LI",{});var c0e=s(gg);Hte=n(c0e,"STRONG",{});var GUr=s(Hte);pZe=r(GUr,"visual_bert"),GUr.forEach(t),_Ze=r(c0e," \u2014 "),dR=n(c0e,"A",{href:!0});var OUr=s(dR);uZe=r(OUr,"VisualBertConfig"),OUr.forEach(t),bZe=r(c0e," (VisualBERT model)"),c0e.forEach(t),vZe=i(L),hg=n(L,"LI",{});var f0e=s(hg);Ute=n(f0e,"STRONG",{});var VUr=s(Ute);FZe=r(VUr,"vit"),VUr.forEach(t),TZe=r(f0e," \u2014 "),cR=n(f0e,"A",{href:!0});var XUr=s(cR);MZe=r(XUr,"ViTConfig"),XUr.forEach(t),EZe=r(f0e," (ViT model)"),f0e.forEach(t),CZe=i(L),pg=n(L,"LI",{});var m0e=s(pg);Jte=n(m0e,"STRONG",{});var zUr=s(Jte);wZe=r(zUr,"vit_mae"),zUr.forEach(t),AZe=r(m0e," \u2014 "),fR=n(m0e,"A",{href:!0});var WUr=s(fR);LZe=r(WUr,"ViTMAEConfig"),WUr.forEach(t),yZe=r(m0e," (ViTMAE model)"),m0e.forEach(t),xZe=i(L),_g=n(L,"LI",{});var g0e=s(_g);Yte=n(g0e,"STRONG",{});var QUr=s(Yte);$Ze=r(QUr,"wav2vec2"),QUr.forEach(t),kZe=r(g0e," \u2014 "),mR=n(g0e,"A",{href:!0});var HUr=s(mR);SZe=r(HUr,"Wav2Vec2Config"),HUr.forEach(t),RZe=r(g0e," (Wav2Vec2 model)"),g0e.forEach(t),PZe=i(L),ug=n(L,"LI",{});var h0e=s(ug);Kte=n(h0e,"STRONG",{});var UUr=s(Kte);BZe=r(UUr,"wav2vec2-conformer"),UUr.forEach(t),IZe=r(h0e," \u2014 "),gR=n(h0e,"A",{href:!0});var JUr=s(gR);NZe=r(JUr,"Wav2Vec2ConformerConfig"),JUr.forEach(t),qZe=r(h0e," (Wav2Vec2-Conformer model)"),h0e.forEach(t),jZe=i(L),bg=n(L,"LI",{});var p0e=s(bg);Zte=n(p0e,"STRONG",{});var YUr=s(Zte);DZe=r(YUr,"wavlm"),YUr.forEach(t),GZe=r(p0e," \u2014 "),hR=n(p0e,"A",{href:!0});var KUr=s(hR);OZe=r(KUr,"WavLMConfig"),KUr.forEach(t),VZe=r(p0e," (WavLM model)"),p0e.forEach(t),XZe=i(L),vg=n(L,"LI",{});var _0e=s(vg);eae=n(_0e,"STRONG",{});var ZUr=s(eae);zZe=r(ZUr,"xglm"),ZUr.forEach(t),WZe=r(_0e," \u2014 "),pR=n(_0e,"A",{href:!0});var eJr=s(pR);QZe=r(eJr,"XGLMConfig"),eJr.forEach(t),HZe=r(_0e," (XGLM model)"),_0e.forEach(t),UZe=i(L),Fg=n(L,"LI",{});var u0e=s(Fg);oae=n(u0e,"STRONG",{});var oJr=s(oae);JZe=r(oJr,"xlm"),oJr.forEach(t),YZe=r(u0e," \u2014 "),_R=n(u0e,"A",{href:!0});var rJr=s(_R);KZe=r(rJr,"XLMConfig"),rJr.forEach(t),ZZe=r(u0e," (XLM model)"),u0e.forEach(t),eeo=i(L),Tg=n(L,"LI",{});var b0e=s(Tg);rae=n(b0e,"STRONG",{});var tJr=s(rae);oeo=r(tJr,"xlm-prophetnet"),tJr.forEach(t),reo=r(b0e," \u2014 "),uR=n(b0e,"A",{href:!0});var aJr=s(uR);teo=r(aJr,"XLMProphetNetConfig"),aJr.forEach(t),aeo=r(b0e," (XLM-ProphetNet model)"),b0e.forEach(t),neo=i(L),Mg=n(L,"LI",{});var v0e=s(Mg);tae=n(v0e,"STRONG",{});var nJr=s(tae);seo=r(nJr,"xlm-roberta"),nJr.forEach(t),leo=r(v0e," \u2014 "),bR=n(v0e,"A",{href:!0});var sJr=s(bR);ieo=r(sJr,"XLMRobertaConfig"),sJr.forEach(t),deo=r(v0e," (XLM-RoBERTa model)"),v0e.forEach(t),ceo=i(L),Eg=n(L,"LI",{});var F0e=s(Eg);aae=n(F0e,"STRONG",{});var lJr=s(aae);feo=r(lJr,"xlm-roberta-xl"),lJr.forEach(t),meo=r(F0e," \u2014 "),vR=n(F0e,"A",{href:!0});var iJr=s(vR);geo=r(iJr,"XLMRobertaXLConfig"),iJr.forEach(t),heo=r(F0e," (XLM-RoBERTa-XL model)"),F0e.forEach(t),peo=i(L),Cg=n(L,"LI",{});var T0e=s(Cg);nae=n(T0e,"STRONG",{});var dJr=s(nae);_eo=r(dJr,"xlnet"),dJr.forEach(t),ueo=r(T0e," \u2014 "),FR=n(T0e,"A",{href:!0});var cJr=s(FR);beo=r(cJr,"XLNetConfig"),cJr.forEach(t),veo=r(T0e," (XLNet model)"),T0e.forEach(t),Feo=i(L),wg=n(L,"LI",{});var M0e=s(wg);sae=n(M0e,"STRONG",{});var fJr=s(sae);Teo=r(fJr,"yolos"),fJr.forEach(t),Meo=r(M0e," \u2014 "),TR=n(M0e,"A",{href:!0});var mJr=s(TR);Eeo=r(mJr,"YolosConfig"),mJr.forEach(t),Ceo=r(M0e," (YOLOS model)"),M0e.forEach(t),weo=i(L),Ag=n(L,"LI",{});var E0e=s(Ag);lae=n(E0e,"STRONG",{});var gJr=s(lae);Aeo=r(gJr,"yoso"),gJr.forEach(t),Leo=r(E0e," \u2014 "),MR=n(E0e,"A",{href:!0});var hJr=s(MR);yeo=r(hJr,"YosoConfig"),hJr.forEach(t),xeo=r(E0e," (YOSO model)"),E0e.forEach(t),L.forEach(t),$eo=i(ot),T(Lg.$$.fragment,ot),ot.forEach(t),keo=i(et),yg=n(et,"DIV",{class:!0});var xGe=s(yg);T(eA.$$.fragment,xGe),Seo=i(xGe),iae=n(xGe,"P",{});var pJr=s(iae);Reo=r(pJr,"Register a new configuration for this class."),pJr.forEach(t),xGe.forEach(t),et.forEach(t),Sje=i(f),Mi=n(f,"H2",{class:!0});var $Ge=s(Mi);xg=n($Ge,"A",{id:!0,class:!0,href:!0});var _Jr=s(xg);dae=n(_Jr,"SPAN",{});var uJr=s(dae);T(oA.$$.fragment,uJr),uJr.forEach(t),_Jr.forEach(t),Peo=i($Ge),cae=n($Ge,"SPAN",{});var bJr=s(cae);Beo=r(bJr,"AutoTokenizer"),bJr.forEach(t),$Ge.forEach(t),Rje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(rA.$$.fragment,qs),Ieo=i(qs),tA=n(qs,"P",{});var kGe=s(tA);Neo=r(kGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ER=n(kGe,"A",{href:!0});var vJr=s(ER);qeo=r(vJr,"AutoTokenizer.from_pretrained()"),vJr.forEach(t),jeo=r(kGe," class method."),kGe.forEach(t),Deo=i(qs),aA=n(qs,"P",{});var SGe=s(aA);Geo=r(SGe,"This class cannot be instantiated directly using "),fae=n(SGe,"CODE",{});var FJr=s(fae);Oeo=r(FJr,"__init__()"),FJr.forEach(t),Veo=r(SGe," (throws an error)."),SGe.forEach(t),Xeo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(nA.$$.fragment,js),zeo=i(js),mae=n(js,"P",{});var TJr=s(mae);Weo=r(TJr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TJr.forEach(t),Qeo=i(js),Aa=n(js,"P",{});var U5=s(Aa);Heo=r(U5,"The tokenizer class to instantiate is selected based on the "),gae=n(U5,"CODE",{});var MJr=s(gae);Ueo=r(MJr,"model_type"),MJr.forEach(t),Jeo=r(U5,` property of the config object (either
passed as an argument or loaded from `),hae=n(U5,"CODE",{});var EJr=s(hae);Yeo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),Keo=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(U5,"CODE",{});var CJr=s(pae);Zeo=r(CJr,"pretrained_model_name_or_path"),CJr.forEach(t),eoo=r(U5,":"),U5.forEach(t),ooo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var s$=s(Sn);_ae=n(s$,"STRONG",{});var wJr=s(_ae);roo=r(wJr,"albert"),wJr.forEach(t),too=r(s$," \u2014 "),CR=n(s$,"A",{href:!0});var AJr=s(CR);aoo=r(AJr,"AlbertTokenizer"),AJr.forEach(t),noo=r(s$," or "),wR=n(s$,"A",{href:!0});var LJr=s(wR);soo=r(LJr,"AlbertTokenizerFast"),LJr.forEach(t),loo=r(s$," (ALBERT model)"),s$.forEach(t),ioo=i(S),Rn=n(S,"LI",{});var l$=s(Rn);uae=n(l$,"STRONG",{});var yJr=s(uae);doo=r(yJr,"bart"),yJr.forEach(t),coo=r(l$," \u2014 "),AR=n(l$,"A",{href:!0});var xJr=s(AR);foo=r(xJr,"BartTokenizer"),xJr.forEach(t),moo=r(l$," or "),LR=n(l$,"A",{href:!0});var $Jr=s(LR);goo=r($Jr,"BartTokenizerFast"),$Jr.forEach(t),hoo=r(l$," (BART model)"),l$.forEach(t),poo=i(S),Pn=n(S,"LI",{});var i$=s(Pn);bae=n(i$,"STRONG",{});var kJr=s(bae);_oo=r(kJr,"barthez"),kJr.forEach(t),uoo=r(i$," \u2014 "),yR=n(i$,"A",{href:!0});var SJr=s(yR);boo=r(SJr,"BarthezTokenizer"),SJr.forEach(t),voo=r(i$," or "),xR=n(i$,"A",{href:!0});var RJr=s(xR);Foo=r(RJr,"BarthezTokenizerFast"),RJr.forEach(t),Too=r(i$," (BARThez model)"),i$.forEach(t),Moo=i(S),$g=n(S,"LI",{});var C0e=s($g);vae=n(C0e,"STRONG",{});var PJr=s(vae);Eoo=r(PJr,"bartpho"),PJr.forEach(t),Coo=r(C0e," \u2014 "),$R=n(C0e,"A",{href:!0});var BJr=s($R);woo=r(BJr,"BartphoTokenizer"),BJr.forEach(t),Aoo=r(C0e," (BARTpho model)"),C0e.forEach(t),Loo=i(S),Bn=n(S,"LI",{});var d$=s(Bn);Fae=n(d$,"STRONG",{});var IJr=s(Fae);yoo=r(IJr,"bert"),IJr.forEach(t),xoo=r(d$," \u2014 "),kR=n(d$,"A",{href:!0});var NJr=s(kR);$oo=r(NJr,"BertTokenizer"),NJr.forEach(t),koo=r(d$," or "),SR=n(d$,"A",{href:!0});var qJr=s(SR);Soo=r(qJr,"BertTokenizerFast"),qJr.forEach(t),Roo=r(d$," (BERT model)"),d$.forEach(t),Poo=i(S),kg=n(S,"LI",{});var w0e=s(kg);Tae=n(w0e,"STRONG",{});var jJr=s(Tae);Boo=r(jJr,"bert-generation"),jJr.forEach(t),Ioo=r(w0e," \u2014 "),RR=n(w0e,"A",{href:!0});var DJr=s(RR);Noo=r(DJr,"BertGenerationTokenizer"),DJr.forEach(t),qoo=r(w0e," (Bert Generation model)"),w0e.forEach(t),joo=i(S),Sg=n(S,"LI",{});var A0e=s(Sg);Mae=n(A0e,"STRONG",{});var GJr=s(Mae);Doo=r(GJr,"bert-japanese"),GJr.forEach(t),Goo=r(A0e," \u2014 "),PR=n(A0e,"A",{href:!0});var OJr=s(PR);Ooo=r(OJr,"BertJapaneseTokenizer"),OJr.forEach(t),Voo=r(A0e," (BertJapanese model)"),A0e.forEach(t),Xoo=i(S),Rg=n(S,"LI",{});var L0e=s(Rg);Eae=n(L0e,"STRONG",{});var VJr=s(Eae);zoo=r(VJr,"bertweet"),VJr.forEach(t),Woo=r(L0e," \u2014 "),BR=n(L0e,"A",{href:!0});var XJr=s(BR);Qoo=r(XJr,"BertweetTokenizer"),XJr.forEach(t),Hoo=r(L0e," (BERTweet model)"),L0e.forEach(t),Uoo=i(S),In=n(S,"LI",{});var c$=s(In);Cae=n(c$,"STRONG",{});var zJr=s(Cae);Joo=r(zJr,"big_bird"),zJr.forEach(t),Yoo=r(c$," \u2014 "),IR=n(c$,"A",{href:!0});var WJr=s(IR);Koo=r(WJr,"BigBirdTokenizer"),WJr.forEach(t),Zoo=r(c$," or "),NR=n(c$,"A",{href:!0});var QJr=s(NR);ero=r(QJr,"BigBirdTokenizerFast"),QJr.forEach(t),oro=r(c$," (BigBird model)"),c$.forEach(t),rro=i(S),Nn=n(S,"LI",{});var f$=s(Nn);wae=n(f$,"STRONG",{});var HJr=s(wae);tro=r(HJr,"bigbird_pegasus"),HJr.forEach(t),aro=r(f$," \u2014 "),qR=n(f$,"A",{href:!0});var UJr=s(qR);nro=r(UJr,"PegasusTokenizer"),UJr.forEach(t),sro=r(f$," or "),jR=n(f$,"A",{href:!0});var JJr=s(jR);lro=r(JJr,"PegasusTokenizerFast"),JJr.forEach(t),iro=r(f$," (BigBird-Pegasus model)"),f$.forEach(t),dro=i(S),qn=n(S,"LI",{});var m$=s(qn);Aae=n(m$,"STRONG",{});var YJr=s(Aae);cro=r(YJr,"blenderbot"),YJr.forEach(t),fro=r(m$," \u2014 "),DR=n(m$,"A",{href:!0});var KJr=s(DR);mro=r(KJr,"BlenderbotTokenizer"),KJr.forEach(t),gro=r(m$," or "),GR=n(m$,"A",{href:!0});var ZJr=s(GR);hro=r(ZJr,"BlenderbotTokenizerFast"),ZJr.forEach(t),pro=r(m$," (Blenderbot model)"),m$.forEach(t),_ro=i(S),Pg=n(S,"LI",{});var y0e=s(Pg);Lae=n(y0e,"STRONG",{});var eYr=s(Lae);uro=r(eYr,"blenderbot-small"),eYr.forEach(t),bro=r(y0e," \u2014 "),OR=n(y0e,"A",{href:!0});var oYr=s(OR);vro=r(oYr,"BlenderbotSmallTokenizer"),oYr.forEach(t),Fro=r(y0e," (BlenderbotSmall model)"),y0e.forEach(t),Tro=i(S),Bg=n(S,"LI",{});var x0e=s(Bg);yae=n(x0e,"STRONG",{});var rYr=s(yae);Mro=r(rYr,"bloom"),rYr.forEach(t),Ero=r(x0e," \u2014 "),VR=n(x0e,"A",{href:!0});var tYr=s(VR);Cro=r(tYr,"BloomTokenizerFast"),tYr.forEach(t),wro=r(x0e," (BLOOM model)"),x0e.forEach(t),Aro=i(S),Ig=n(S,"LI",{});var $0e=s(Ig);xae=n($0e,"STRONG",{});var aYr=s(xae);Lro=r(aYr,"byt5"),aYr.forEach(t),yro=r($0e," \u2014 "),XR=n($0e,"A",{href:!0});var nYr=s(XR);xro=r(nYr,"ByT5Tokenizer"),nYr.forEach(t),$ro=r($0e," (ByT5 model)"),$0e.forEach(t),kro=i(S),jn=n(S,"LI",{});var g$=s(jn);$ae=n(g$,"STRONG",{});var sYr=s($ae);Sro=r(sYr,"camembert"),sYr.forEach(t),Rro=r(g$," \u2014 "),zR=n(g$,"A",{href:!0});var lYr=s(zR);Pro=r(lYr,"CamembertTokenizer"),lYr.forEach(t),Bro=r(g$," or "),WR=n(g$,"A",{href:!0});var iYr=s(WR);Iro=r(iYr,"CamembertTokenizerFast"),iYr.forEach(t),Nro=r(g$," (CamemBERT model)"),g$.forEach(t),qro=i(S),Ng=n(S,"LI",{});var k0e=s(Ng);kae=n(k0e,"STRONG",{});var dYr=s(kae);jro=r(dYr,"canine"),dYr.forEach(t),Dro=r(k0e," \u2014 "),QR=n(k0e,"A",{href:!0});var cYr=s(QR);Gro=r(cYr,"CanineTokenizer"),cYr.forEach(t),Oro=r(k0e," (CANINE model)"),k0e.forEach(t),Vro=i(S),Dn=n(S,"LI",{});var h$=s(Dn);Sae=n(h$,"STRONG",{});var fYr=s(Sae);Xro=r(fYr,"clip"),fYr.forEach(t),zro=r(h$," \u2014 "),HR=n(h$,"A",{href:!0});var mYr=s(HR);Wro=r(mYr,"CLIPTokenizer"),mYr.forEach(t),Qro=r(h$," or "),UR=n(h$,"A",{href:!0});var gYr=s(UR);Hro=r(gYr,"CLIPTokenizerFast"),gYr.forEach(t),Uro=r(h$," (CLIP model)"),h$.forEach(t),Jro=i(S),Gn=n(S,"LI",{});var p$=s(Gn);Rae=n(p$,"STRONG",{});var hYr=s(Rae);Yro=r(hYr,"convbert"),hYr.forEach(t),Kro=r(p$," \u2014 "),JR=n(p$,"A",{href:!0});var pYr=s(JR);Zro=r(pYr,"ConvBertTokenizer"),pYr.forEach(t),eto=r(p$," or "),YR=n(p$,"A",{href:!0});var _Yr=s(YR);oto=r(_Yr,"ConvBertTokenizerFast"),_Yr.forEach(t),rto=r(p$," (ConvBERT model)"),p$.forEach(t),tto=i(S),On=n(S,"LI",{});var _$=s(On);Pae=n(_$,"STRONG",{});var uYr=s(Pae);ato=r(uYr,"cpm"),uYr.forEach(t),nto=r(_$," \u2014 "),KR=n(_$,"A",{href:!0});var bYr=s(KR);sto=r(bYr,"CpmTokenizer"),bYr.forEach(t),lto=r(_$," or "),ZR=n(_$,"A",{href:!0});var vYr=s(ZR);ito=r(vYr,"CpmTokenizerFast"),vYr.forEach(t),dto=r(_$," (CPM model)"),_$.forEach(t),cto=i(S),qg=n(S,"LI",{});var S0e=s(qg);Bae=n(S0e,"STRONG",{});var FYr=s(Bae);fto=r(FYr,"ctrl"),FYr.forEach(t),mto=r(S0e," \u2014 "),eP=n(S0e,"A",{href:!0});var TYr=s(eP);gto=r(TYr,"CTRLTokenizer"),TYr.forEach(t),hto=r(S0e," (CTRL model)"),S0e.forEach(t),pto=i(S),Vn=n(S,"LI",{});var u$=s(Vn);Iae=n(u$,"STRONG",{});var MYr=s(Iae);_to=r(MYr,"data2vec-text"),MYr.forEach(t),uto=r(u$," \u2014 "),oP=n(u$,"A",{href:!0});var EYr=s(oP);bto=r(EYr,"RobertaTokenizer"),EYr.forEach(t),vto=r(u$," or "),rP=n(u$,"A",{href:!0});var CYr=s(rP);Fto=r(CYr,"RobertaTokenizerFast"),CYr.forEach(t),Tto=r(u$," (Data2VecText model)"),u$.forEach(t),Mto=i(S),Xn=n(S,"LI",{});var b$=s(Xn);Nae=n(b$,"STRONG",{});var wYr=s(Nae);Eto=r(wYr,"deberta"),wYr.forEach(t),Cto=r(b$," \u2014 "),tP=n(b$,"A",{href:!0});var AYr=s(tP);wto=r(AYr,"DebertaTokenizer"),AYr.forEach(t),Ato=r(b$," or "),aP=n(b$,"A",{href:!0});var LYr=s(aP);Lto=r(LYr,"DebertaTokenizerFast"),LYr.forEach(t),yto=r(b$," (DeBERTa model)"),b$.forEach(t),xto=i(S),zn=n(S,"LI",{});var v$=s(zn);qae=n(v$,"STRONG",{});var yYr=s(qae);$to=r(yYr,"deberta-v2"),yYr.forEach(t),kto=r(v$," \u2014 "),nP=n(v$,"A",{href:!0});var xYr=s(nP);Sto=r(xYr,"DebertaV2Tokenizer"),xYr.forEach(t),Rto=r(v$," or "),sP=n(v$,"A",{href:!0});var $Yr=s(sP);Pto=r($Yr,"DebertaV2TokenizerFast"),$Yr.forEach(t),Bto=r(v$," (DeBERTa-v2 model)"),v$.forEach(t),Ito=i(S),Wn=n(S,"LI",{});var F$=s(Wn);jae=n(F$,"STRONG",{});var kYr=s(jae);Nto=r(kYr,"distilbert"),kYr.forEach(t),qto=r(F$," \u2014 "),lP=n(F$,"A",{href:!0});var SYr=s(lP);jto=r(SYr,"DistilBertTokenizer"),SYr.forEach(t),Dto=r(F$," or "),iP=n(F$,"A",{href:!0});var RYr=s(iP);Gto=r(RYr,"DistilBertTokenizerFast"),RYr.forEach(t),Oto=r(F$," (DistilBERT model)"),F$.forEach(t),Vto=i(S),Qn=n(S,"LI",{});var T$=s(Qn);Dae=n(T$,"STRONG",{});var PYr=s(Dae);Xto=r(PYr,"dpr"),PYr.forEach(t),zto=r(T$," \u2014 "),dP=n(T$,"A",{href:!0});var BYr=s(dP);Wto=r(BYr,"DPRQuestionEncoderTokenizer"),BYr.forEach(t),Qto=r(T$," or "),cP=n(T$,"A",{href:!0});var IYr=s(cP);Hto=r(IYr,"DPRQuestionEncoderTokenizerFast"),IYr.forEach(t),Uto=r(T$," (DPR model)"),T$.forEach(t),Jto=i(S),Hn=n(S,"LI",{});var M$=s(Hn);Gae=n(M$,"STRONG",{});var NYr=s(Gae);Yto=r(NYr,"electra"),NYr.forEach(t),Kto=r(M$," \u2014 "),fP=n(M$,"A",{href:!0});var qYr=s(fP);Zto=r(qYr,"ElectraTokenizer"),qYr.forEach(t),eao=r(M$," or "),mP=n(M$,"A",{href:!0});var jYr=s(mP);oao=r(jYr,"ElectraTokenizerFast"),jYr.forEach(t),rao=r(M$," (ELECTRA model)"),M$.forEach(t),tao=i(S),jg=n(S,"LI",{});var R0e=s(jg);Oae=n(R0e,"STRONG",{});var DYr=s(Oae);aao=r(DYr,"flaubert"),DYr.forEach(t),nao=r(R0e," \u2014 "),gP=n(R0e,"A",{href:!0});var GYr=s(gP);sao=r(GYr,"FlaubertTokenizer"),GYr.forEach(t),lao=r(R0e," (FlauBERT model)"),R0e.forEach(t),iao=i(S),Un=n(S,"LI",{});var E$=s(Un);Vae=n(E$,"STRONG",{});var OYr=s(Vae);dao=r(OYr,"fnet"),OYr.forEach(t),cao=r(E$," \u2014 "),hP=n(E$,"A",{href:!0});var VYr=s(hP);fao=r(VYr,"FNetTokenizer"),VYr.forEach(t),mao=r(E$," or "),pP=n(E$,"A",{href:!0});var XYr=s(pP);gao=r(XYr,"FNetTokenizerFast"),XYr.forEach(t),hao=r(E$," (FNet model)"),E$.forEach(t),pao=i(S),Dg=n(S,"LI",{});var P0e=s(Dg);Xae=n(P0e,"STRONG",{});var zYr=s(Xae);_ao=r(zYr,"fsmt"),zYr.forEach(t),uao=r(P0e," \u2014 "),_P=n(P0e,"A",{href:!0});var WYr=s(_P);bao=r(WYr,"FSMTTokenizer"),WYr.forEach(t),vao=r(P0e," (FairSeq Machine-Translation model)"),P0e.forEach(t),Fao=i(S),Jn=n(S,"LI",{});var C$=s(Jn);zae=n(C$,"STRONG",{});var QYr=s(zae);Tao=r(QYr,"funnel"),QYr.forEach(t),Mao=r(C$," \u2014 "),uP=n(C$,"A",{href:!0});var HYr=s(uP);Eao=r(HYr,"FunnelTokenizer"),HYr.forEach(t),Cao=r(C$," or "),bP=n(C$,"A",{href:!0});var UYr=s(bP);wao=r(UYr,"FunnelTokenizerFast"),UYr.forEach(t),Aao=r(C$," (Funnel Transformer model)"),C$.forEach(t),Lao=i(S),Yn=n(S,"LI",{});var w$=s(Yn);Wae=n(w$,"STRONG",{});var JYr=s(Wae);yao=r(JYr,"gpt2"),JYr.forEach(t),xao=r(w$," \u2014 "),vP=n(w$,"A",{href:!0});var YYr=s(vP);$ao=r(YYr,"GPT2Tokenizer"),YYr.forEach(t),kao=r(w$," or "),FP=n(w$,"A",{href:!0});var KYr=s(FP);Sao=r(KYr,"GPT2TokenizerFast"),KYr.forEach(t),Rao=r(w$," (OpenAI GPT-2 model)"),w$.forEach(t),Pao=i(S),Kn=n(S,"LI",{});var A$=s(Kn);Qae=n(A$,"STRONG",{});var ZYr=s(Qae);Bao=r(ZYr,"gpt_neo"),ZYr.forEach(t),Iao=r(A$," \u2014 "),TP=n(A$,"A",{href:!0});var eKr=s(TP);Nao=r(eKr,"GPT2Tokenizer"),eKr.forEach(t),qao=r(A$," or "),MP=n(A$,"A",{href:!0});var oKr=s(MP);jao=r(oKr,"GPT2TokenizerFast"),oKr.forEach(t),Dao=r(A$," (GPT Neo model)"),A$.forEach(t),Gao=i(S),Gg=n(S,"LI",{});var B0e=s(Gg);Hae=n(B0e,"STRONG",{});var rKr=s(Hae);Oao=r(rKr,"gpt_neox"),rKr.forEach(t),Vao=r(B0e," \u2014 "),EP=n(B0e,"A",{href:!0});var tKr=s(EP);Xao=r(tKr,"GPTNeoXTokenizerFast"),tKr.forEach(t),zao=r(B0e," (GPT NeoX model)"),B0e.forEach(t),Wao=i(S),Zn=n(S,"LI",{});var L$=s(Zn);Uae=n(L$,"STRONG",{});var aKr=s(Uae);Qao=r(aKr,"gptj"),aKr.forEach(t),Hao=r(L$," \u2014 "),CP=n(L$,"A",{href:!0});var nKr=s(CP);Uao=r(nKr,"GPT2Tokenizer"),nKr.forEach(t),Jao=r(L$," or "),wP=n(L$,"A",{href:!0});var sKr=s(wP);Yao=r(sKr,"GPT2TokenizerFast"),sKr.forEach(t),Kao=r(L$," (GPT-J model)"),L$.forEach(t),Zao=i(S),es=n(S,"LI",{});var y$=s(es);Jae=n(y$,"STRONG",{});var lKr=s(Jae);eno=r(lKr,"herbert"),lKr.forEach(t),ono=r(y$," \u2014 "),AP=n(y$,"A",{href:!0});var iKr=s(AP);rno=r(iKr,"HerbertTokenizer"),iKr.forEach(t),tno=r(y$," or "),LP=n(y$,"A",{href:!0});var dKr=s(LP);ano=r(dKr,"HerbertTokenizerFast"),dKr.forEach(t),nno=r(y$," (HerBERT model)"),y$.forEach(t),sno=i(S),Og=n(S,"LI",{});var I0e=s(Og);Yae=n(I0e,"STRONG",{});var cKr=s(Yae);lno=r(cKr,"hubert"),cKr.forEach(t),ino=r(I0e," \u2014 "),yP=n(I0e,"A",{href:!0});var fKr=s(yP);dno=r(fKr,"Wav2Vec2CTCTokenizer"),fKr.forEach(t),cno=r(I0e," (Hubert model)"),I0e.forEach(t),fno=i(S),os=n(S,"LI",{});var x$=s(os);Kae=n(x$,"STRONG",{});var mKr=s(Kae);mno=r(mKr,"ibert"),mKr.forEach(t),gno=r(x$," \u2014 "),xP=n(x$,"A",{href:!0});var gKr=s(xP);hno=r(gKr,"RobertaTokenizer"),gKr.forEach(t),pno=r(x$," or "),$P=n(x$,"A",{href:!0});var hKr=s($P);_no=r(hKr,"RobertaTokenizerFast"),hKr.forEach(t),uno=r(x$," (I-BERT model)"),x$.forEach(t),bno=i(S),rs=n(S,"LI",{});var $$=s(rs);Zae=n($$,"STRONG",{});var pKr=s(Zae);vno=r(pKr,"layoutlm"),pKr.forEach(t),Fno=r($$," \u2014 "),kP=n($$,"A",{href:!0});var _Kr=s(kP);Tno=r(_Kr,"LayoutLMTokenizer"),_Kr.forEach(t),Mno=r($$," or "),SP=n($$,"A",{href:!0});var uKr=s(SP);Eno=r(uKr,"LayoutLMTokenizerFast"),uKr.forEach(t),Cno=r($$," (LayoutLM model)"),$$.forEach(t),wno=i(S),ts=n(S,"LI",{});var k$=s(ts);ene=n(k$,"STRONG",{});var bKr=s(ene);Ano=r(bKr,"layoutlmv2"),bKr.forEach(t),Lno=r(k$," \u2014 "),RP=n(k$,"A",{href:!0});var vKr=s(RP);yno=r(vKr,"LayoutLMv2Tokenizer"),vKr.forEach(t),xno=r(k$," or "),PP=n(k$,"A",{href:!0});var FKr=s(PP);$no=r(FKr,"LayoutLMv2TokenizerFast"),FKr.forEach(t),kno=r(k$," (LayoutLMv2 model)"),k$.forEach(t),Sno=i(S),as=n(S,"LI",{});var S$=s(as);one=n(S$,"STRONG",{});var TKr=s(one);Rno=r(TKr,"layoutlmv3"),TKr.forEach(t),Pno=r(S$," \u2014 "),BP=n(S$,"A",{href:!0});var MKr=s(BP);Bno=r(MKr,"LayoutLMv3Tokenizer"),MKr.forEach(t),Ino=r(S$," or "),IP=n(S$,"A",{href:!0});var EKr=s(IP);Nno=r(EKr,"LayoutLMv3TokenizerFast"),EKr.forEach(t),qno=r(S$," (LayoutLMv3 model)"),S$.forEach(t),jno=i(S),ns=n(S,"LI",{});var R$=s(ns);rne=n(R$,"STRONG",{});var CKr=s(rne);Dno=r(CKr,"layoutxlm"),CKr.forEach(t),Gno=r(R$," \u2014 "),NP=n(R$,"A",{href:!0});var wKr=s(NP);Ono=r(wKr,"LayoutXLMTokenizer"),wKr.forEach(t),Vno=r(R$," or "),qP=n(R$,"A",{href:!0});var AKr=s(qP);Xno=r(AKr,"LayoutXLMTokenizerFast"),AKr.forEach(t),zno=r(R$," (LayoutXLM model)"),R$.forEach(t),Wno=i(S),ss=n(S,"LI",{});var P$=s(ss);tne=n(P$,"STRONG",{});var LKr=s(tne);Qno=r(LKr,"led"),LKr.forEach(t),Hno=r(P$," \u2014 "),jP=n(P$,"A",{href:!0});var yKr=s(jP);Uno=r(yKr,"LEDTokenizer"),yKr.forEach(t),Jno=r(P$," or "),DP=n(P$,"A",{href:!0});var xKr=s(DP);Yno=r(xKr,"LEDTokenizerFast"),xKr.forEach(t),Kno=r(P$," (LED model)"),P$.forEach(t),Zno=i(S),ls=n(S,"LI",{});var B$=s(ls);ane=n(B$,"STRONG",{});var $Kr=s(ane);eso=r($Kr,"longformer"),$Kr.forEach(t),oso=r(B$," \u2014 "),GP=n(B$,"A",{href:!0});var kKr=s(GP);rso=r(kKr,"LongformerTokenizer"),kKr.forEach(t),tso=r(B$," or "),OP=n(B$,"A",{href:!0});var SKr=s(OP);aso=r(SKr,"LongformerTokenizerFast"),SKr.forEach(t),nso=r(B$," (Longformer model)"),B$.forEach(t),sso=i(S),Vg=n(S,"LI",{});var N0e=s(Vg);nne=n(N0e,"STRONG",{});var RKr=s(nne);lso=r(RKr,"luke"),RKr.forEach(t),iso=r(N0e," \u2014 "),VP=n(N0e,"A",{href:!0});var PKr=s(VP);dso=r(PKr,"LukeTokenizer"),PKr.forEach(t),cso=r(N0e," (LUKE model)"),N0e.forEach(t),fso=i(S),is=n(S,"LI",{});var I$=s(is);sne=n(I$,"STRONG",{});var BKr=s(sne);mso=r(BKr,"lxmert"),BKr.forEach(t),gso=r(I$," \u2014 "),XP=n(I$,"A",{href:!0});var IKr=s(XP);hso=r(IKr,"LxmertTokenizer"),IKr.forEach(t),pso=r(I$," or "),zP=n(I$,"A",{href:!0});var NKr=s(zP);_so=r(NKr,"LxmertTokenizerFast"),NKr.forEach(t),uso=r(I$," (LXMERT model)"),I$.forEach(t),bso=i(S),Xg=n(S,"LI",{});var q0e=s(Xg);lne=n(q0e,"STRONG",{});var qKr=s(lne);vso=r(qKr,"m2m_100"),qKr.forEach(t),Fso=r(q0e," \u2014 "),WP=n(q0e,"A",{href:!0});var jKr=s(WP);Tso=r(jKr,"M2M100Tokenizer"),jKr.forEach(t),Mso=r(q0e," (M2M100 model)"),q0e.forEach(t),Eso=i(S),zg=n(S,"LI",{});var j0e=s(zg);ine=n(j0e,"STRONG",{});var DKr=s(ine);Cso=r(DKr,"marian"),DKr.forEach(t),wso=r(j0e," \u2014 "),QP=n(j0e,"A",{href:!0});var GKr=s(QP);Aso=r(GKr,"MarianTokenizer"),GKr.forEach(t),Lso=r(j0e," (Marian model)"),j0e.forEach(t),yso=i(S),ds=n(S,"LI",{});var N$=s(ds);dne=n(N$,"STRONG",{});var OKr=s(dne);xso=r(OKr,"mbart"),OKr.forEach(t),$so=r(N$," \u2014 "),HP=n(N$,"A",{href:!0});var VKr=s(HP);kso=r(VKr,"MBartTokenizer"),VKr.forEach(t),Sso=r(N$," or "),UP=n(N$,"A",{href:!0});var XKr=s(UP);Rso=r(XKr,"MBartTokenizerFast"),XKr.forEach(t),Pso=r(N$," (mBART model)"),N$.forEach(t),Bso=i(S),cs=n(S,"LI",{});var q$=s(cs);cne=n(q$,"STRONG",{});var zKr=s(cne);Iso=r(zKr,"mbart50"),zKr.forEach(t),Nso=r(q$," \u2014 "),JP=n(q$,"A",{href:!0});var WKr=s(JP);qso=r(WKr,"MBart50Tokenizer"),WKr.forEach(t),jso=r(q$," or "),YP=n(q$,"A",{href:!0});var QKr=s(YP);Dso=r(QKr,"MBart50TokenizerFast"),QKr.forEach(t),Gso=r(q$," (mBART-50 model)"),q$.forEach(t),Oso=i(S),fs=n(S,"LI",{});var j$=s(fs);fne=n(j$,"STRONG",{});var HKr=s(fne);Vso=r(HKr,"megatron-bert"),HKr.forEach(t),Xso=r(j$," \u2014 "),KP=n(j$,"A",{href:!0});var UKr=s(KP);zso=r(UKr,"BertTokenizer"),UKr.forEach(t),Wso=r(j$," or "),ZP=n(j$,"A",{href:!0});var JKr=s(ZP);Qso=r(JKr,"BertTokenizerFast"),JKr.forEach(t),Hso=r(j$," (Megatron-BERT model)"),j$.forEach(t),Uso=i(S),Wg=n(S,"LI",{});var D0e=s(Wg);mne=n(D0e,"STRONG",{});var YKr=s(mne);Jso=r(YKr,"mluke"),YKr.forEach(t),Yso=r(D0e," \u2014 "),eB=n(D0e,"A",{href:!0});var KKr=s(eB);Kso=r(KKr,"MLukeTokenizer"),KKr.forEach(t),Zso=r(D0e," (mLUKE model)"),D0e.forEach(t),elo=i(S),ms=n(S,"LI",{});var D$=s(ms);gne=n(D$,"STRONG",{});var ZKr=s(gne);olo=r(ZKr,"mobilebert"),ZKr.forEach(t),rlo=r(D$," \u2014 "),oB=n(D$,"A",{href:!0});var eZr=s(oB);tlo=r(eZr,"MobileBertTokenizer"),eZr.forEach(t),alo=r(D$," or "),rB=n(D$,"A",{href:!0});var oZr=s(rB);nlo=r(oZr,"MobileBertTokenizerFast"),oZr.forEach(t),slo=r(D$," (MobileBERT model)"),D$.forEach(t),llo=i(S),gs=n(S,"LI",{});var G$=s(gs);hne=n(G$,"STRONG",{});var rZr=s(hne);ilo=r(rZr,"mpnet"),rZr.forEach(t),dlo=r(G$," \u2014 "),tB=n(G$,"A",{href:!0});var tZr=s(tB);clo=r(tZr,"MPNetTokenizer"),tZr.forEach(t),flo=r(G$," or "),aB=n(G$,"A",{href:!0});var aZr=s(aB);mlo=r(aZr,"MPNetTokenizerFast"),aZr.forEach(t),glo=r(G$," (MPNet model)"),G$.forEach(t),hlo=i(S),hs=n(S,"LI",{});var O$=s(hs);pne=n(O$,"STRONG",{});var nZr=s(pne);plo=r(nZr,"mt5"),nZr.forEach(t),_lo=r(O$," \u2014 "),nB=n(O$,"A",{href:!0});var sZr=s(nB);ulo=r(sZr,"MT5Tokenizer"),sZr.forEach(t),blo=r(O$," or "),sB=n(O$,"A",{href:!0});var lZr=s(sB);vlo=r(lZr,"MT5TokenizerFast"),lZr.forEach(t),Flo=r(O$," (MT5 model)"),O$.forEach(t),Tlo=i(S),ps=n(S,"LI",{});var V$=s(ps);_ne=n(V$,"STRONG",{});var iZr=s(_ne);Mlo=r(iZr,"nystromformer"),iZr.forEach(t),Elo=r(V$," \u2014 "),lB=n(V$,"A",{href:!0});var dZr=s(lB);Clo=r(dZr,"AlbertTokenizer"),dZr.forEach(t),wlo=r(V$," or "),iB=n(V$,"A",{href:!0});var cZr=s(iB);Alo=r(cZr,"AlbertTokenizerFast"),cZr.forEach(t),Llo=r(V$," (Nystr\xF6mformer model)"),V$.forEach(t),ylo=i(S),_s=n(S,"LI",{});var X$=s(_s);une=n(X$,"STRONG",{});var fZr=s(une);xlo=r(fZr,"openai-gpt"),fZr.forEach(t),$lo=r(X$," \u2014 "),dB=n(X$,"A",{href:!0});var mZr=s(dB);klo=r(mZr,"OpenAIGPTTokenizer"),mZr.forEach(t),Slo=r(X$," or "),cB=n(X$,"A",{href:!0});var gZr=s(cB);Rlo=r(gZr,"OpenAIGPTTokenizerFast"),gZr.forEach(t),Plo=r(X$," (OpenAI GPT model)"),X$.forEach(t),Blo=i(S),Qg=n(S,"LI",{});var G0e=s(Qg);bne=n(G0e,"STRONG",{});var hZr=s(bne);Ilo=r(hZr,"opt"),hZr.forEach(t),Nlo=r(G0e," \u2014 "),fB=n(G0e,"A",{href:!0});var pZr=s(fB);qlo=r(pZr,"GPT2Tokenizer"),pZr.forEach(t),jlo=r(G0e," (OPT model)"),G0e.forEach(t),Dlo=i(S),us=n(S,"LI",{});var z$=s(us);vne=n(z$,"STRONG",{});var _Zr=s(vne);Glo=r(_Zr,"pegasus"),_Zr.forEach(t),Olo=r(z$," \u2014 "),mB=n(z$,"A",{href:!0});var uZr=s(mB);Vlo=r(uZr,"PegasusTokenizer"),uZr.forEach(t),Xlo=r(z$," or "),gB=n(z$,"A",{href:!0});var bZr=s(gB);zlo=r(bZr,"PegasusTokenizerFast"),bZr.forEach(t),Wlo=r(z$," (Pegasus model)"),z$.forEach(t),Qlo=i(S),Hg=n(S,"LI",{});var O0e=s(Hg);Fne=n(O0e,"STRONG",{});var vZr=s(Fne);Hlo=r(vZr,"perceiver"),vZr.forEach(t),Ulo=r(O0e," \u2014 "),hB=n(O0e,"A",{href:!0});var FZr=s(hB);Jlo=r(FZr,"PerceiverTokenizer"),FZr.forEach(t),Ylo=r(O0e," (Perceiver model)"),O0e.forEach(t),Klo=i(S),Ug=n(S,"LI",{});var V0e=s(Ug);Tne=n(V0e,"STRONG",{});var TZr=s(Tne);Zlo=r(TZr,"phobert"),TZr.forEach(t),eio=r(V0e," \u2014 "),pB=n(V0e,"A",{href:!0});var MZr=s(pB);oio=r(MZr,"PhobertTokenizer"),MZr.forEach(t),rio=r(V0e," (PhoBERT model)"),V0e.forEach(t),tio=i(S),Jg=n(S,"LI",{});var X0e=s(Jg);Mne=n(X0e,"STRONG",{});var EZr=s(Mne);aio=r(EZr,"plbart"),EZr.forEach(t),nio=r(X0e," \u2014 "),_B=n(X0e,"A",{href:!0});var CZr=s(_B);sio=r(CZr,"PLBartTokenizer"),CZr.forEach(t),lio=r(X0e," (PLBart model)"),X0e.forEach(t),iio=i(S),Yg=n(S,"LI",{});var z0e=s(Yg);Ene=n(z0e,"STRONG",{});var wZr=s(Ene);dio=r(wZr,"prophetnet"),wZr.forEach(t),cio=r(z0e," \u2014 "),uB=n(z0e,"A",{href:!0});var AZr=s(uB);fio=r(AZr,"ProphetNetTokenizer"),AZr.forEach(t),mio=r(z0e," (ProphetNet model)"),z0e.forEach(t),gio=i(S),bs=n(S,"LI",{});var W$=s(bs);Cne=n(W$,"STRONG",{});var LZr=s(Cne);hio=r(LZr,"qdqbert"),LZr.forEach(t),pio=r(W$," \u2014 "),bB=n(W$,"A",{href:!0});var yZr=s(bB);_io=r(yZr,"BertTokenizer"),yZr.forEach(t),uio=r(W$," or "),vB=n(W$,"A",{href:!0});var xZr=s(vB);bio=r(xZr,"BertTokenizerFast"),xZr.forEach(t),vio=r(W$," (QDQBert model)"),W$.forEach(t),Fio=i(S),Kg=n(S,"LI",{});var W0e=s(Kg);wne=n(W0e,"STRONG",{});var $Zr=s(wne);Tio=r($Zr,"rag"),$Zr.forEach(t),Mio=r(W0e," \u2014 "),FB=n(W0e,"A",{href:!0});var kZr=s(FB);Eio=r(kZr,"RagTokenizer"),kZr.forEach(t),Cio=r(W0e," (RAG model)"),W0e.forEach(t),wio=i(S),vs=n(S,"LI",{});var Q$=s(vs);Ane=n(Q$,"STRONG",{});var SZr=s(Ane);Aio=r(SZr,"realm"),SZr.forEach(t),Lio=r(Q$," \u2014 "),TB=n(Q$,"A",{href:!0});var RZr=s(TB);yio=r(RZr,"RealmTokenizer"),RZr.forEach(t),xio=r(Q$," or "),MB=n(Q$,"A",{href:!0});var PZr=s(MB);$io=r(PZr,"RealmTokenizerFast"),PZr.forEach(t),kio=r(Q$," (REALM model)"),Q$.forEach(t),Sio=i(S),Fs=n(S,"LI",{});var H$=s(Fs);Lne=n(H$,"STRONG",{});var BZr=s(Lne);Rio=r(BZr,"reformer"),BZr.forEach(t),Pio=r(H$," \u2014 "),EB=n(H$,"A",{href:!0});var IZr=s(EB);Bio=r(IZr,"ReformerTokenizer"),IZr.forEach(t),Iio=r(H$," or "),CB=n(H$,"A",{href:!0});var NZr=s(CB);Nio=r(NZr,"ReformerTokenizerFast"),NZr.forEach(t),qio=r(H$," (Reformer model)"),H$.forEach(t),jio=i(S),Ts=n(S,"LI",{});var U$=s(Ts);yne=n(U$,"STRONG",{});var qZr=s(yne);Dio=r(qZr,"rembert"),qZr.forEach(t),Gio=r(U$," \u2014 "),wB=n(U$,"A",{href:!0});var jZr=s(wB);Oio=r(jZr,"RemBertTokenizer"),jZr.forEach(t),Vio=r(U$," or "),AB=n(U$,"A",{href:!0});var DZr=s(AB);Xio=r(DZr,"RemBertTokenizerFast"),DZr.forEach(t),zio=r(U$," (RemBERT model)"),U$.forEach(t),Wio=i(S),Ms=n(S,"LI",{});var J$=s(Ms);xne=n(J$,"STRONG",{});var GZr=s(xne);Qio=r(GZr,"retribert"),GZr.forEach(t),Hio=r(J$," \u2014 "),LB=n(J$,"A",{href:!0});var OZr=s(LB);Uio=r(OZr,"RetriBertTokenizer"),OZr.forEach(t),Jio=r(J$," or "),yB=n(J$,"A",{href:!0});var VZr=s(yB);Yio=r(VZr,"RetriBertTokenizerFast"),VZr.forEach(t),Kio=r(J$," (RetriBERT model)"),J$.forEach(t),Zio=i(S),Es=n(S,"LI",{});var Y$=s(Es);$ne=n(Y$,"STRONG",{});var XZr=s($ne);edo=r(XZr,"roberta"),XZr.forEach(t),odo=r(Y$," \u2014 "),xB=n(Y$,"A",{href:!0});var zZr=s(xB);rdo=r(zZr,"RobertaTokenizer"),zZr.forEach(t),tdo=r(Y$," or "),$B=n(Y$,"A",{href:!0});var WZr=s($B);ado=r(WZr,"RobertaTokenizerFast"),WZr.forEach(t),ndo=r(Y$," (RoBERTa model)"),Y$.forEach(t),sdo=i(S),Cs=n(S,"LI",{});var K$=s(Cs);kne=n(K$,"STRONG",{});var QZr=s(kne);ldo=r(QZr,"roformer"),QZr.forEach(t),ido=r(K$," \u2014 "),kB=n(K$,"A",{href:!0});var HZr=s(kB);ddo=r(HZr,"RoFormerTokenizer"),HZr.forEach(t),cdo=r(K$," or "),SB=n(K$,"A",{href:!0});var UZr=s(SB);fdo=r(UZr,"RoFormerTokenizerFast"),UZr.forEach(t),mdo=r(K$," (RoFormer model)"),K$.forEach(t),gdo=i(S),Zg=n(S,"LI",{});var Q0e=s(Zg);Sne=n(Q0e,"STRONG",{});var JZr=s(Sne);hdo=r(JZr,"speech_to_text"),JZr.forEach(t),pdo=r(Q0e," \u2014 "),RB=n(Q0e,"A",{href:!0});var YZr=s(RB);_do=r(YZr,"Speech2TextTokenizer"),YZr.forEach(t),udo=r(Q0e," (Speech2Text model)"),Q0e.forEach(t),bdo=i(S),eh=n(S,"LI",{});var H0e=s(eh);Rne=n(H0e,"STRONG",{});var KZr=s(Rne);vdo=r(KZr,"speech_to_text_2"),KZr.forEach(t),Fdo=r(H0e," \u2014 "),PB=n(H0e,"A",{href:!0});var ZZr=s(PB);Tdo=r(ZZr,"Speech2Text2Tokenizer"),ZZr.forEach(t),Mdo=r(H0e," (Speech2Text2 model)"),H0e.forEach(t),Edo=i(S),ws=n(S,"LI",{});var Z$=s(ws);Pne=n(Z$,"STRONG",{});var eet=s(Pne);Cdo=r(eet,"splinter"),eet.forEach(t),wdo=r(Z$," \u2014 "),BB=n(Z$,"A",{href:!0});var oet=s(BB);Ado=r(oet,"SplinterTokenizer"),oet.forEach(t),Ldo=r(Z$," or "),IB=n(Z$,"A",{href:!0});var ret=s(IB);ydo=r(ret,"SplinterTokenizerFast"),ret.forEach(t),xdo=r(Z$," (Splinter model)"),Z$.forEach(t),$do=i(S),As=n(S,"LI",{});var ek=s(As);Bne=n(ek,"STRONG",{});var tet=s(Bne);kdo=r(tet,"squeezebert"),tet.forEach(t),Sdo=r(ek," \u2014 "),NB=n(ek,"A",{href:!0});var aet=s(NB);Rdo=r(aet,"SqueezeBertTokenizer"),aet.forEach(t),Pdo=r(ek," or "),qB=n(ek,"A",{href:!0});var net=s(qB);Bdo=r(net,"SqueezeBertTokenizerFast"),net.forEach(t),Ido=r(ek," (SqueezeBERT model)"),ek.forEach(t),Ndo=i(S),Ls=n(S,"LI",{});var ok=s(Ls);Ine=n(ok,"STRONG",{});var set=s(Ine);qdo=r(set,"t5"),set.forEach(t),jdo=r(ok," \u2014 "),jB=n(ok,"A",{href:!0});var iet=s(jB);Ddo=r(iet,"T5Tokenizer"),iet.forEach(t),Gdo=r(ok," or "),DB=n(ok,"A",{href:!0});var det=s(DB);Odo=r(det,"T5TokenizerFast"),det.forEach(t),Vdo=r(ok," (T5 model)"),ok.forEach(t),Xdo=i(S),oh=n(S,"LI",{});var U0e=s(oh);Nne=n(U0e,"STRONG",{});var cet=s(Nne);zdo=r(cet,"tapas"),cet.forEach(t),Wdo=r(U0e," \u2014 "),GB=n(U0e,"A",{href:!0});var fet=s(GB);Qdo=r(fet,"TapasTokenizer"),fet.forEach(t),Hdo=r(U0e," (TAPAS model)"),U0e.forEach(t),Udo=i(S),rh=n(S,"LI",{});var J0e=s(rh);qne=n(J0e,"STRONG",{});var met=s(qne);Jdo=r(met,"tapex"),met.forEach(t),Ydo=r(J0e," \u2014 "),OB=n(J0e,"A",{href:!0});var get=s(OB);Kdo=r(get,"TapexTokenizer"),get.forEach(t),Zdo=r(J0e," (TAPEX model)"),J0e.forEach(t),eco=i(S),th=n(S,"LI",{});var Y0e=s(th);jne=n(Y0e,"STRONG",{});var het=s(jne);oco=r(het,"transfo-xl"),het.forEach(t),rco=r(Y0e," \u2014 "),VB=n(Y0e,"A",{href:!0});var pet=s(VB);tco=r(pet,"TransfoXLTokenizer"),pet.forEach(t),aco=r(Y0e," (Transformer-XL model)"),Y0e.forEach(t),nco=i(S),ys=n(S,"LI",{});var rk=s(ys);Dne=n(rk,"STRONG",{});var _et=s(Dne);sco=r(_et,"visual_bert"),_et.forEach(t),lco=r(rk," \u2014 "),XB=n(rk,"A",{href:!0});var uet=s(XB);ico=r(uet,"BertTokenizer"),uet.forEach(t),dco=r(rk," or "),zB=n(rk,"A",{href:!0});var bet=s(zB);cco=r(bet,"BertTokenizerFast"),bet.forEach(t),fco=r(rk," (VisualBERT model)"),rk.forEach(t),mco=i(S),ah=n(S,"LI",{});var K0e=s(ah);Gne=n(K0e,"STRONG",{});var vet=s(Gne);gco=r(vet,"wav2vec2"),vet.forEach(t),hco=r(K0e," \u2014 "),WB=n(K0e,"A",{href:!0});var Fet=s(WB);pco=r(Fet,"Wav2Vec2CTCTokenizer"),Fet.forEach(t),_co=r(K0e," (Wav2Vec2 model)"),K0e.forEach(t),uco=i(S),nh=n(S,"LI",{});var Z0e=s(nh);One=n(Z0e,"STRONG",{});var Tet=s(One);bco=r(Tet,"wav2vec2-conformer"),Tet.forEach(t),vco=r(Z0e," \u2014 "),QB=n(Z0e,"A",{href:!0});var Met=s(QB);Fco=r(Met,"Wav2Vec2CTCTokenizer"),Met.forEach(t),Tco=r(Z0e," (Wav2Vec2-Conformer model)"),Z0e.forEach(t),Mco=i(S),sh=n(S,"LI",{});var ewe=s(sh);Vne=n(ewe,"STRONG",{});var Eet=s(Vne);Eco=r(Eet,"wav2vec2_phoneme"),Eet.forEach(t),Cco=r(ewe," \u2014 "),HB=n(ewe,"A",{href:!0});var Cet=s(HB);wco=r(Cet,"Wav2Vec2PhonemeCTCTokenizer"),Cet.forEach(t),Aco=r(ewe," (Wav2Vec2Phoneme model)"),ewe.forEach(t),Lco=i(S),xs=n(S,"LI",{});var tk=s(xs);Xne=n(tk,"STRONG",{});var wet=s(Xne);yco=r(wet,"xglm"),wet.forEach(t),xco=r(tk," \u2014 "),UB=n(tk,"A",{href:!0});var Aet=s(UB);$co=r(Aet,"XGLMTokenizer"),Aet.forEach(t),kco=r(tk," or "),JB=n(tk,"A",{href:!0});var Let=s(JB);Sco=r(Let,"XGLMTokenizerFast"),Let.forEach(t),Rco=r(tk," (XGLM model)"),tk.forEach(t),Pco=i(S),lh=n(S,"LI",{});var owe=s(lh);zne=n(owe,"STRONG",{});var yet=s(zne);Bco=r(yet,"xlm"),yet.forEach(t),Ico=r(owe," \u2014 "),YB=n(owe,"A",{href:!0});var xet=s(YB);Nco=r(xet,"XLMTokenizer"),xet.forEach(t),qco=r(owe," (XLM model)"),owe.forEach(t),jco=i(S),ih=n(S,"LI",{});var rwe=s(ih);Wne=n(rwe,"STRONG",{});var $et=s(Wne);Dco=r($et,"xlm-prophetnet"),$et.forEach(t),Gco=r(rwe," \u2014 "),KB=n(rwe,"A",{href:!0});var ket=s(KB);Oco=r(ket,"XLMProphetNetTokenizer"),ket.forEach(t),Vco=r(rwe," (XLM-ProphetNet model)"),rwe.forEach(t),Xco=i(S),$s=n(S,"LI",{});var ak=s($s);Qne=n(ak,"STRONG",{});var Set=s(Qne);zco=r(Set,"xlm-roberta"),Set.forEach(t),Wco=r(ak," \u2014 "),ZB=n(ak,"A",{href:!0});var Ret=s(ZB);Qco=r(Ret,"XLMRobertaTokenizer"),Ret.forEach(t),Hco=r(ak," or "),eI=n(ak,"A",{href:!0});var Pet=s(eI);Uco=r(Pet,"XLMRobertaTokenizerFast"),Pet.forEach(t),Jco=r(ak," (XLM-RoBERTa model)"),ak.forEach(t),Yco=i(S),ks=n(S,"LI",{});var nk=s(ks);Hne=n(nk,"STRONG",{});var Bet=s(Hne);Kco=r(Bet,"xlm-roberta-xl"),Bet.forEach(t),Zco=r(nk," \u2014 "),oI=n(nk,"A",{href:!0});var Iet=s(oI);efo=r(Iet,"RobertaTokenizer"),Iet.forEach(t),ofo=r(nk," or "),rI=n(nk,"A",{href:!0});var Net=s(rI);rfo=r(Net,"RobertaTokenizerFast"),Net.forEach(t),tfo=r(nk," (XLM-RoBERTa-XL model)"),nk.forEach(t),afo=i(S),Ss=n(S,"LI",{});var sk=s(Ss);Une=n(sk,"STRONG",{});var qet=s(Une);nfo=r(qet,"xlnet"),qet.forEach(t),sfo=r(sk," \u2014 "),tI=n(sk,"A",{href:!0});var jet=s(tI);lfo=r(jet,"XLNetTokenizer"),jet.forEach(t),ifo=r(sk," or "),aI=n(sk,"A",{href:!0});var Det=s(aI);dfo=r(Det,"XLNetTokenizerFast"),Det.forEach(t),cfo=r(sk," (XLNet model)"),sk.forEach(t),ffo=i(S),Rs=n(S,"LI",{});var lk=s(Rs);Jne=n(lk,"STRONG",{});var Get=s(Jne);mfo=r(Get,"yoso"),Get.forEach(t),gfo=r(lk," \u2014 "),nI=n(lk,"A",{href:!0});var Oet=s(nI);hfo=r(Oet,"AlbertTokenizer"),Oet.forEach(t),pfo=r(lk," or "),sI=n(lk,"A",{href:!0});var Vet=s(sI);_fo=r(Vet,"AlbertTokenizerFast"),Vet.forEach(t),ufo=r(lk," (YOSO model)"),lk.forEach(t),S.forEach(t),bfo=i(js),T(dh.$$.fragment,js),js.forEach(t),vfo=i(qs),ch=n(qs,"DIV",{class:!0});var RGe=s(ch);T(sA.$$.fragment,RGe),Ffo=i(RGe),Yne=n(RGe,"P",{});var Xet=s(Yne);Tfo=r(Xet,"Register a new tokenizer in this mapping."),Xet.forEach(t),RGe.forEach(t),qs.forEach(t),Pje=i(f),Ei=n(f,"H2",{class:!0});var PGe=s(Ei);fh=n(PGe,"A",{id:!0,class:!0,href:!0});var zet=s(fh);Kne=n(zet,"SPAN",{});var Wet=s(Kne);T(lA.$$.fragment,Wet),Wet.forEach(t),zet.forEach(t),Mfo=i(PGe),Zne=n(PGe,"SPAN",{});var Qet=s(Zne);Efo=r(Qet,"AutoFeatureExtractor"),Qet.forEach(t),PGe.forEach(t),Bje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(iA.$$.fragment,Ds),Cfo=i(Ds),dA=n(Ds,"P",{});var BGe=s(dA);wfo=r(BGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lI=n(BGe,"A",{href:!0});var Het=s(lI);Afo=r(Het,"AutoFeatureExtractor.from_pretrained()"),Het.forEach(t),Lfo=r(BGe," class method."),BGe.forEach(t),yfo=i(Ds),cA=n(Ds,"P",{});var IGe=s(cA);xfo=r(IGe,"This class cannot be instantiated directly using "),ese=n(IGe,"CODE",{});var Uet=s(ese);$fo=r(Uet,"__init__()"),Uet.forEach(t),kfo=r(IGe," (throws an error)."),IGe.forEach(t),Sfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(fA.$$.fragment,Zt),Rfo=i(Zt),ose=n(Zt,"P",{});var Jet=s(ose);Pfo=r(Jet,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jet.forEach(t),Bfo=i(Zt),La=n(Zt,"P",{});var J5=s(La);Ifo=r(J5,"The feature extractor class to instantiate is selected based on the "),rse=n(J5,"CODE",{});var Yet=s(rse);Nfo=r(Yet,"model_type"),Yet.forEach(t),qfo=r(J5,` property of the config object
(either passed as an argument or loaded from `),tse=n(J5,"CODE",{});var Ket=s(tse);jfo=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),Dfo=r(J5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ase=n(J5,"CODE",{});var Zet=s(ase);Gfo=r(Zet,"pretrained_model_name_or_path"),Zet.forEach(t),Ofo=r(J5,":"),J5.forEach(t),Vfo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);mh=n(K,"LI",{});var twe=s(mh);nse=n(twe,"STRONG",{});var eot=s(nse);Xfo=r(eot,"beit"),eot.forEach(t),zfo=r(twe," \u2014 "),iI=n(twe,"A",{href:!0});var oot=s(iI);Wfo=r(oot,"BeitFeatureExtractor"),oot.forEach(t),Qfo=r(twe," (BEiT model)"),twe.forEach(t),Hfo=i(K),gh=n(K,"LI",{});var awe=s(gh);sse=n(awe,"STRONG",{});var rot=s(sse);Ufo=r(rot,"clip"),rot.forEach(t),Jfo=r(awe," \u2014 "),dI=n(awe,"A",{href:!0});var tot=s(dI);Yfo=r(tot,"CLIPFeatureExtractor"),tot.forEach(t),Kfo=r(awe," (CLIP model)"),awe.forEach(t),Zfo=i(K),hh=n(K,"LI",{});var nwe=s(hh);lse=n(nwe,"STRONG",{});var aot=s(lse);emo=r(aot,"convnext"),aot.forEach(t),omo=r(nwe," \u2014 "),cI=n(nwe,"A",{href:!0});var not=s(cI);rmo=r(not,"ConvNextFeatureExtractor"),not.forEach(t),tmo=r(nwe," (ConvNeXT model)"),nwe.forEach(t),amo=i(K),ph=n(K,"LI",{});var swe=s(ph);ise=n(swe,"STRONG",{});var sot=s(ise);nmo=r(sot,"cvt"),sot.forEach(t),smo=r(swe," \u2014 "),fI=n(swe,"A",{href:!0});var lot=s(fI);lmo=r(lot,"ConvNextFeatureExtractor"),lot.forEach(t),imo=r(swe," (CvT model)"),swe.forEach(t),dmo=i(K),_h=n(K,"LI",{});var lwe=s(_h);dse=n(lwe,"STRONG",{});var iot=s(dse);cmo=r(iot,"data2vec-audio"),iot.forEach(t),fmo=r(lwe," \u2014 "),mI=n(lwe,"A",{href:!0});var dot=s(mI);mmo=r(dot,"Wav2Vec2FeatureExtractor"),dot.forEach(t),gmo=r(lwe," (Data2VecAudio model)"),lwe.forEach(t),hmo=i(K),uh=n(K,"LI",{});var iwe=s(uh);cse=n(iwe,"STRONG",{});var cot=s(cse);pmo=r(cot,"data2vec-vision"),cot.forEach(t),_mo=r(iwe," \u2014 "),gI=n(iwe,"A",{href:!0});var fot=s(gI);umo=r(fot,"BeitFeatureExtractor"),fot.forEach(t),bmo=r(iwe," (Data2VecVision model)"),iwe.forEach(t),vmo=i(K),bh=n(K,"LI",{});var dwe=s(bh);fse=n(dwe,"STRONG",{});var mot=s(fse);Fmo=r(mot,"deit"),mot.forEach(t),Tmo=r(dwe," \u2014 "),hI=n(dwe,"A",{href:!0});var got=s(hI);Mmo=r(got,"DeiTFeatureExtractor"),got.forEach(t),Emo=r(dwe," (DeiT model)"),dwe.forEach(t),Cmo=i(K),vh=n(K,"LI",{});var cwe=s(vh);mse=n(cwe,"STRONG",{});var hot=s(mse);wmo=r(hot,"detr"),hot.forEach(t),Amo=r(cwe," \u2014 "),pI=n(cwe,"A",{href:!0});var pot=s(pI);Lmo=r(pot,"DetrFeatureExtractor"),pot.forEach(t),ymo=r(cwe," (DETR model)"),cwe.forEach(t),xmo=i(K),Fh=n(K,"LI",{});var fwe=s(Fh);gse=n(fwe,"STRONG",{});var _ot=s(gse);$mo=r(_ot,"dpt"),_ot.forEach(t),kmo=r(fwe," \u2014 "),_I=n(fwe,"A",{href:!0});var uot=s(_I);Smo=r(uot,"DPTFeatureExtractor"),uot.forEach(t),Rmo=r(fwe," (DPT model)"),fwe.forEach(t),Pmo=i(K),Th=n(K,"LI",{});var mwe=s(Th);hse=n(mwe,"STRONG",{});var bot=s(hse);Bmo=r(bot,"flava"),bot.forEach(t),Imo=r(mwe," \u2014 "),uI=n(mwe,"A",{href:!0});var vot=s(uI);Nmo=r(vot,"FlavaFeatureExtractor"),vot.forEach(t),qmo=r(mwe," (FLAVA model)"),mwe.forEach(t),jmo=i(K),Mh=n(K,"LI",{});var gwe=s(Mh);pse=n(gwe,"STRONG",{});var Fot=s(pse);Dmo=r(Fot,"glpn"),Fot.forEach(t),Gmo=r(gwe," \u2014 "),bI=n(gwe,"A",{href:!0});var Tot=s(bI);Omo=r(Tot,"GLPNFeatureExtractor"),Tot.forEach(t),Vmo=r(gwe," (GLPN model)"),gwe.forEach(t),Xmo=i(K),Eh=n(K,"LI",{});var hwe=s(Eh);_se=n(hwe,"STRONG",{});var Mot=s(_se);zmo=r(Mot,"hubert"),Mot.forEach(t),Wmo=r(hwe," \u2014 "),vI=n(hwe,"A",{href:!0});var Eot=s(vI);Qmo=r(Eot,"Wav2Vec2FeatureExtractor"),Eot.forEach(t),Hmo=r(hwe," (Hubert model)"),hwe.forEach(t),Umo=i(K),Ch=n(K,"LI",{});var pwe=s(Ch);use=n(pwe,"STRONG",{});var Cot=s(use);Jmo=r(Cot,"imagegpt"),Cot.forEach(t),Ymo=r(pwe," \u2014 "),FI=n(pwe,"A",{href:!0});var wot=s(FI);Kmo=r(wot,"ImageGPTFeatureExtractor"),wot.forEach(t),Zmo=r(pwe," (ImageGPT model)"),pwe.forEach(t),ego=i(K),wh=n(K,"LI",{});var _we=s(wh);bse=n(_we,"STRONG",{});var Aot=s(bse);ogo=r(Aot,"layoutlmv2"),Aot.forEach(t),rgo=r(_we," \u2014 "),TI=n(_we,"A",{href:!0});var Lot=s(TI);tgo=r(Lot,"LayoutLMv2FeatureExtractor"),Lot.forEach(t),ago=r(_we," (LayoutLMv2 model)"),_we.forEach(t),ngo=i(K),Ah=n(K,"LI",{});var uwe=s(Ah);vse=n(uwe,"STRONG",{});var yot=s(vse);sgo=r(yot,"layoutlmv3"),yot.forEach(t),lgo=r(uwe," \u2014 "),MI=n(uwe,"A",{href:!0});var xot=s(MI);igo=r(xot,"LayoutLMv3FeatureExtractor"),xot.forEach(t),dgo=r(uwe," (LayoutLMv3 model)"),uwe.forEach(t),cgo=i(K),Lh=n(K,"LI",{});var bwe=s(Lh);Fse=n(bwe,"STRONG",{});var $ot=s(Fse);fgo=r($ot,"levit"),$ot.forEach(t),mgo=r(bwe," \u2014 "),EI=n(bwe,"A",{href:!0});var kot=s(EI);ggo=r(kot,"LevitFeatureExtractor"),kot.forEach(t),hgo=r(bwe," (LeViT model)"),bwe.forEach(t),pgo=i(K),yh=n(K,"LI",{});var vwe=s(yh);Tse=n(vwe,"STRONG",{});var Sot=s(Tse);_go=r(Sot,"maskformer"),Sot.forEach(t),ugo=r(vwe," \u2014 "),CI=n(vwe,"A",{href:!0});var Rot=s(CI);bgo=r(Rot,"MaskFormerFeatureExtractor"),Rot.forEach(t),vgo=r(vwe," (MaskFormer model)"),vwe.forEach(t),Fgo=i(K),xh=n(K,"LI",{});var Fwe=s(xh);Mse=n(Fwe,"STRONG",{});var Pot=s(Mse);Tgo=r(Pot,"mctct"),Pot.forEach(t),Mgo=r(Fwe," \u2014 "),wI=n(Fwe,"A",{href:!0});var Bot=s(wI);Ego=r(Bot,"MCTCTFeatureExtractor"),Bot.forEach(t),Cgo=r(Fwe," (M-CTC-T model)"),Fwe.forEach(t),wgo=i(K),$h=n(K,"LI",{});var Twe=s($h);Ese=n(Twe,"STRONG",{});var Iot=s(Ese);Ago=r(Iot,"perceiver"),Iot.forEach(t),Lgo=r(Twe," \u2014 "),AI=n(Twe,"A",{href:!0});var Not=s(AI);ygo=r(Not,"PerceiverFeatureExtractor"),Not.forEach(t),xgo=r(Twe," (Perceiver model)"),Twe.forEach(t),$go=i(K),kh=n(K,"LI",{});var Mwe=s(kh);Cse=n(Mwe,"STRONG",{});var qot=s(Cse);kgo=r(qot,"poolformer"),qot.forEach(t),Sgo=r(Mwe," \u2014 "),LI=n(Mwe,"A",{href:!0});var jot=s(LI);Rgo=r(jot,"PoolFormerFeatureExtractor"),jot.forEach(t),Pgo=r(Mwe," (PoolFormer model)"),Mwe.forEach(t),Bgo=i(K),Sh=n(K,"LI",{});var Ewe=s(Sh);wse=n(Ewe,"STRONG",{});var Dot=s(wse);Igo=r(Dot,"regnet"),Dot.forEach(t),Ngo=r(Ewe," \u2014 "),yI=n(Ewe,"A",{href:!0});var Got=s(yI);qgo=r(Got,"ConvNextFeatureExtractor"),Got.forEach(t),jgo=r(Ewe," (RegNet model)"),Ewe.forEach(t),Dgo=i(K),Rh=n(K,"LI",{});var Cwe=s(Rh);Ase=n(Cwe,"STRONG",{});var Oot=s(Ase);Ggo=r(Oot,"resnet"),Oot.forEach(t),Ogo=r(Cwe," \u2014 "),xI=n(Cwe,"A",{href:!0});var Vot=s(xI);Vgo=r(Vot,"ConvNextFeatureExtractor"),Vot.forEach(t),Xgo=r(Cwe," (ResNet model)"),Cwe.forEach(t),zgo=i(K),Ph=n(K,"LI",{});var wwe=s(Ph);Lse=n(wwe,"STRONG",{});var Xot=s(Lse);Wgo=r(Xot,"segformer"),Xot.forEach(t),Qgo=r(wwe," \u2014 "),$I=n(wwe,"A",{href:!0});var zot=s($I);Hgo=r(zot,"SegformerFeatureExtractor"),zot.forEach(t),Ugo=r(wwe," (SegFormer model)"),wwe.forEach(t),Jgo=i(K),Bh=n(K,"LI",{});var Awe=s(Bh);yse=n(Awe,"STRONG",{});var Wot=s(yse);Ygo=r(Wot,"speech_to_text"),Wot.forEach(t),Kgo=r(Awe," \u2014 "),kI=n(Awe,"A",{href:!0});var Qot=s(kI);Zgo=r(Qot,"Speech2TextFeatureExtractor"),Qot.forEach(t),eho=r(Awe," (Speech2Text model)"),Awe.forEach(t),oho=i(K),Ih=n(K,"LI",{});var Lwe=s(Ih);xse=n(Lwe,"STRONG",{});var Hot=s(xse);rho=r(Hot,"swin"),Hot.forEach(t),tho=r(Lwe," \u2014 "),SI=n(Lwe,"A",{href:!0});var Uot=s(SI);aho=r(Uot,"ViTFeatureExtractor"),Uot.forEach(t),nho=r(Lwe," (Swin Transformer model)"),Lwe.forEach(t),sho=i(K),Nh=n(K,"LI",{});var ywe=s(Nh);$se=n(ywe,"STRONG",{});var Jot=s($se);lho=r(Jot,"van"),Jot.forEach(t),iho=r(ywe," \u2014 "),RI=n(ywe,"A",{href:!0});var Yot=s(RI);dho=r(Yot,"ConvNextFeatureExtractor"),Yot.forEach(t),cho=r(ywe," (VAN model)"),ywe.forEach(t),fho=i(K),qh=n(K,"LI",{});var xwe=s(qh);kse=n(xwe,"STRONG",{});var Kot=s(kse);mho=r(Kot,"vit"),Kot.forEach(t),gho=r(xwe," \u2014 "),PI=n(xwe,"A",{href:!0});var Zot=s(PI);hho=r(Zot,"ViTFeatureExtractor"),Zot.forEach(t),pho=r(xwe," (ViT model)"),xwe.forEach(t),_ho=i(K),jh=n(K,"LI",{});var $we=s(jh);Sse=n($we,"STRONG",{});var ert=s(Sse);uho=r(ert,"vit_mae"),ert.forEach(t),bho=r($we," \u2014 "),BI=n($we,"A",{href:!0});var ort=s(BI);vho=r(ort,"ViTFeatureExtractor"),ort.forEach(t),Fho=r($we," (ViTMAE model)"),$we.forEach(t),Tho=i(K),Dh=n(K,"LI",{});var kwe=s(Dh);Rse=n(kwe,"STRONG",{});var rrt=s(Rse);Mho=r(rrt,"wav2vec2"),rrt.forEach(t),Eho=r(kwe," \u2014 "),II=n(kwe,"A",{href:!0});var trt=s(II);Cho=r(trt,"Wav2Vec2FeatureExtractor"),trt.forEach(t),who=r(kwe," (Wav2Vec2 model)"),kwe.forEach(t),Aho=i(K),Gh=n(K,"LI",{});var Swe=s(Gh);Pse=n(Swe,"STRONG",{});var art=s(Pse);Lho=r(art,"wav2vec2-conformer"),art.forEach(t),yho=r(Swe," \u2014 "),NI=n(Swe,"A",{href:!0});var nrt=s(NI);xho=r(nrt,"Wav2Vec2FeatureExtractor"),nrt.forEach(t),$ho=r(Swe," (Wav2Vec2-Conformer model)"),Swe.forEach(t),kho=i(K),Oh=n(K,"LI",{});var Rwe=s(Oh);Bse=n(Rwe,"STRONG",{});var srt=s(Bse);Sho=r(srt,"yolos"),srt.forEach(t),Rho=r(Rwe," \u2014 "),qI=n(Rwe,"A",{href:!0});var lrt=s(qI);Pho=r(lrt,"YolosFeatureExtractor"),lrt.forEach(t),Bho=r(Rwe," (YOLOS model)"),Rwe.forEach(t),K.forEach(t),Iho=i(Zt),T(Vh.$$.fragment,Zt),Nho=i(Zt),T(Xh.$$.fragment,Zt),Zt.forEach(t),qho=i(Ds),zh=n(Ds,"DIV",{class:!0});var NGe=s(zh);T(mA.$$.fragment,NGe),jho=i(NGe),Ise=n(NGe,"P",{});var irt=s(Ise);Dho=r(irt,"Register a new feature extractor for this class."),irt.forEach(t),NGe.forEach(t),Ds.forEach(t),Ije=i(f),Ci=n(f,"H2",{class:!0});var qGe=s(Ci);Wh=n(qGe,"A",{id:!0,class:!0,href:!0});var drt=s(Wh);Nse=n(drt,"SPAN",{});var crt=s(Nse);T(gA.$$.fragment,crt),crt.forEach(t),drt.forEach(t),Gho=i(qGe),qse=n(qGe,"SPAN",{});var frt=s(qse);Oho=r(frt,"AutoProcessor"),frt.forEach(t),qGe.forEach(t),Nje=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(hA.$$.fragment,Gs),Vho=i(Gs),pA=n(Gs,"P",{});var jGe=s(pA);Xho=r(jGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jI=n(jGe,"A",{href:!0});var mrt=s(jI);zho=r(mrt,"AutoProcessor.from_pretrained()"),mrt.forEach(t),Who=r(jGe," class method."),jGe.forEach(t),Qho=i(Gs),_A=n(Gs,"P",{});var DGe=s(_A);Hho=r(DGe,"This class cannot be instantiated directly using "),jse=n(DGe,"CODE",{});var grt=s(jse);Uho=r(grt,"__init__()"),grt.forEach(t),Jho=r(DGe," (throws an error)."),DGe.forEach(t),Yho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(uA.$$.fragment,ea),Kho=i(ea),Dse=n(ea,"P",{});var hrt=s(Dse);Zho=r(hrt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hrt.forEach(t),epo=i(ea),wi=n(ea,"P",{});var ree=s(wi);opo=r(ree,"The processor class to instantiate is selected based on the "),Gse=n(ree,"CODE",{});var prt=s(Gse);rpo=r(prt,"model_type"),prt.forEach(t),tpo=r(ree,` property of the config object (either
passed as an argument or loaded from `),Ose=n(ree,"CODE",{});var _rt=s(Ose);apo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),npo=r(ree," if possible):"),ree.forEach(t),spo=i(ea),he=n(ea,"UL",{});var ue=s(he);Qh=n(ue,"LI",{});var Pwe=s(Qh);Vse=n(Pwe,"STRONG",{});var urt=s(Vse);lpo=r(urt,"clip"),urt.forEach(t),ipo=r(Pwe," \u2014 "),DI=n(Pwe,"A",{href:!0});var brt=s(DI);dpo=r(brt,"CLIPProcessor"),brt.forEach(t),cpo=r(Pwe," (CLIP model)"),Pwe.forEach(t),fpo=i(ue),Hh=n(ue,"LI",{});var Bwe=s(Hh);Xse=n(Bwe,"STRONG",{});var vrt=s(Xse);mpo=r(vrt,"flava"),vrt.forEach(t),gpo=r(Bwe," \u2014 "),zse=n(Bwe,"CODE",{});var Frt=s(zse);hpo=r(Frt,"FLAVAProcessor"),Frt.forEach(t),ppo=r(Bwe," (FLAVA model)"),Bwe.forEach(t),_po=i(ue),Uh=n(ue,"LI",{});var Iwe=s(Uh);Wse=n(Iwe,"STRONG",{});var Trt=s(Wse);upo=r(Trt,"layoutlmv2"),Trt.forEach(t),bpo=r(Iwe," \u2014 "),GI=n(Iwe,"A",{href:!0});var Mrt=s(GI);vpo=r(Mrt,"LayoutLMv2Processor"),Mrt.forEach(t),Fpo=r(Iwe," (LayoutLMv2 model)"),Iwe.forEach(t),Tpo=i(ue),Jh=n(ue,"LI",{});var Nwe=s(Jh);Qse=n(Nwe,"STRONG",{});var Ert=s(Qse);Mpo=r(Ert,"layoutlmv3"),Ert.forEach(t),Epo=r(Nwe," \u2014 "),OI=n(Nwe,"A",{href:!0});var Crt=s(OI);Cpo=r(Crt,"LayoutLMv3Processor"),Crt.forEach(t),wpo=r(Nwe," (LayoutLMv3 model)"),Nwe.forEach(t),Apo=i(ue),Yh=n(ue,"LI",{});var qwe=s(Yh);Hse=n(qwe,"STRONG",{});var wrt=s(Hse);Lpo=r(wrt,"layoutxlm"),wrt.forEach(t),ypo=r(qwe," \u2014 "),VI=n(qwe,"A",{href:!0});var Art=s(VI);xpo=r(Art,"LayoutXLMProcessor"),Art.forEach(t),$po=r(qwe," (LayoutXLM model)"),qwe.forEach(t),kpo=i(ue),Kh=n(ue,"LI",{});var jwe=s(Kh);Use=n(jwe,"STRONG",{});var Lrt=s(Use);Spo=r(Lrt,"sew"),Lrt.forEach(t),Rpo=r(jwe," \u2014 "),XI=n(jwe,"A",{href:!0});var yrt=s(XI);Ppo=r(yrt,"Wav2Vec2Processor"),yrt.forEach(t),Bpo=r(jwe," (SEW model)"),jwe.forEach(t),Ipo=i(ue),Zh=n(ue,"LI",{});var Dwe=s(Zh);Jse=n(Dwe,"STRONG",{});var xrt=s(Jse);Npo=r(xrt,"sew-d"),xrt.forEach(t),qpo=r(Dwe," \u2014 "),zI=n(Dwe,"A",{href:!0});var $rt=s(zI);jpo=r($rt,"Wav2Vec2Processor"),$rt.forEach(t),Dpo=r(Dwe," (SEW-D model)"),Dwe.forEach(t),Gpo=i(ue),ep=n(ue,"LI",{});var Gwe=s(ep);Yse=n(Gwe,"STRONG",{});var krt=s(Yse);Opo=r(krt,"speech_to_text"),krt.forEach(t),Vpo=r(Gwe," \u2014 "),WI=n(Gwe,"A",{href:!0});var Srt=s(WI);Xpo=r(Srt,"Speech2TextProcessor"),Srt.forEach(t),zpo=r(Gwe," (Speech2Text model)"),Gwe.forEach(t),Wpo=i(ue),op=n(ue,"LI",{});var Owe=s(op);Kse=n(Owe,"STRONG",{});var Rrt=s(Kse);Qpo=r(Rrt,"speech_to_text_2"),Rrt.forEach(t),Hpo=r(Owe," \u2014 "),QI=n(Owe,"A",{href:!0});var Prt=s(QI);Upo=r(Prt,"Speech2Text2Processor"),Prt.forEach(t),Jpo=r(Owe," (Speech2Text2 model)"),Owe.forEach(t),Ypo=i(ue),rp=n(ue,"LI",{});var Vwe=s(rp);Zse=n(Vwe,"STRONG",{});var Brt=s(Zse);Kpo=r(Brt,"trocr"),Brt.forEach(t),Zpo=r(Vwe," \u2014 "),HI=n(Vwe,"A",{href:!0});var Irt=s(HI);e_o=r(Irt,"TrOCRProcessor"),Irt.forEach(t),o_o=r(Vwe," (TrOCR model)"),Vwe.forEach(t),r_o=i(ue),tp=n(ue,"LI",{});var Xwe=s(tp);ele=n(Xwe,"STRONG",{});var Nrt=s(ele);t_o=r(Nrt,"unispeech"),Nrt.forEach(t),a_o=r(Xwe," \u2014 "),UI=n(Xwe,"A",{href:!0});var qrt=s(UI);n_o=r(qrt,"Wav2Vec2Processor"),qrt.forEach(t),s_o=r(Xwe," (UniSpeech model)"),Xwe.forEach(t),l_o=i(ue),ap=n(ue,"LI",{});var zwe=s(ap);ole=n(zwe,"STRONG",{});var jrt=s(ole);i_o=r(jrt,"unispeech-sat"),jrt.forEach(t),d_o=r(zwe," \u2014 "),JI=n(zwe,"A",{href:!0});var Drt=s(JI);c_o=r(Drt,"Wav2Vec2Processor"),Drt.forEach(t),f_o=r(zwe," (UniSpeechSat model)"),zwe.forEach(t),m_o=i(ue),np=n(ue,"LI",{});var Wwe=s(np);rle=n(Wwe,"STRONG",{});var Grt=s(rle);g_o=r(Grt,"vilt"),Grt.forEach(t),h_o=r(Wwe," \u2014 "),YI=n(Wwe,"A",{href:!0});var Ort=s(YI);p_o=r(Ort,"ViltProcessor"),Ort.forEach(t),__o=r(Wwe," (ViLT model)"),Wwe.forEach(t),u_o=i(ue),sp=n(ue,"LI",{});var Qwe=s(sp);tle=n(Qwe,"STRONG",{});var Vrt=s(tle);b_o=r(Vrt,"vision-text-dual-encoder"),Vrt.forEach(t),v_o=r(Qwe," \u2014 "),KI=n(Qwe,"A",{href:!0});var Xrt=s(KI);F_o=r(Xrt,"VisionTextDualEncoderProcessor"),Xrt.forEach(t),T_o=r(Qwe," (VisionTextDualEncoder model)"),Qwe.forEach(t),M_o=i(ue),lp=n(ue,"LI",{});var Hwe=s(lp);ale=n(Hwe,"STRONG",{});var zrt=s(ale);E_o=r(zrt,"wav2vec2"),zrt.forEach(t),C_o=r(Hwe," \u2014 "),ZI=n(Hwe,"A",{href:!0});var Wrt=s(ZI);w_o=r(Wrt,"Wav2Vec2Processor"),Wrt.forEach(t),A_o=r(Hwe," (Wav2Vec2 model)"),Hwe.forEach(t),L_o=i(ue),ip=n(ue,"LI",{});var Uwe=s(ip);nle=n(Uwe,"STRONG",{});var Qrt=s(nle);y_o=r(Qrt,"wav2vec2-conformer"),Qrt.forEach(t),x_o=r(Uwe," \u2014 "),eN=n(Uwe,"A",{href:!0});var Hrt=s(eN);$_o=r(Hrt,"Wav2Vec2Processor"),Hrt.forEach(t),k_o=r(Uwe," (Wav2Vec2-Conformer model)"),Uwe.forEach(t),S_o=i(ue),dp=n(ue,"LI",{});var Jwe=s(dp);sle=n(Jwe,"STRONG",{});var Urt=s(sle);R_o=r(Urt,"wavlm"),Urt.forEach(t),P_o=r(Jwe," \u2014 "),oN=n(Jwe,"A",{href:!0});var Jrt=s(oN);B_o=r(Jrt,"Wav2Vec2Processor"),Jrt.forEach(t),I_o=r(Jwe," (WavLM model)"),Jwe.forEach(t),ue.forEach(t),N_o=i(ea),T(cp.$$.fragment,ea),q_o=i(ea),T(fp.$$.fragment,ea),ea.forEach(t),j_o=i(Gs),mp=n(Gs,"DIV",{class:!0});var GGe=s(mp);T(bA.$$.fragment,GGe),D_o=i(GGe),lle=n(GGe,"P",{});var Yrt=s(lle);G_o=r(Yrt,"Register a new processor for this class."),Yrt.forEach(t),GGe.forEach(t),Gs.forEach(t),qje=i(f),Ai=n(f,"H2",{class:!0});var OGe=s(Ai);gp=n(OGe,"A",{id:!0,class:!0,href:!0});var Krt=s(gp);ile=n(Krt,"SPAN",{});var Zrt=s(ile);T(vA.$$.fragment,Zrt),Zrt.forEach(t),Krt.forEach(t),O_o=i(OGe),dle=n(OGe,"SPAN",{});var ett=s(dle);V_o=r(ett,"AutoModel"),ett.forEach(t),OGe.forEach(t),jje=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(FA.$$.fragment,Os),X_o=i(Os),Li=n(Os,"P",{});var tee=s(Li);z_o=r(tee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rN=n(tee,"A",{href:!0});var ott=s(rN);W_o=r(ott,"from_pretrained()"),ott.forEach(t),Q_o=r(tee," class method or the "),tN=n(tee,"A",{href:!0});var rtt=s(tN);H_o=r(rtt,"from_config()"),rtt.forEach(t),U_o=r(tee,` class
method.`),tee.forEach(t),J_o=i(Os),TA=n(Os,"P",{});var VGe=s(TA);Y_o=r(VGe,"This class cannot be instantiated directly using "),cle=n(VGe,"CODE",{});var ttt=s(cle);K_o=r(ttt,"__init__()"),ttt.forEach(t),Z_o=r(VGe," (throws an error)."),VGe.forEach(t),euo=i(Os),tt=n(Os,"DIV",{class:!0});var Y5=s(tt);T(MA.$$.fragment,Y5),ouo=i(Y5),fle=n(Y5,"P",{});var att=s(fle);ruo=r(att,"Instantiates one of the base model classes of the library from a configuration."),att.forEach(t),tuo=i(Y5),yi=n(Y5,"P",{});var aee=s(yi);auo=r(aee,`Note:
Loading a model from its configuration file does `),mle=n(aee,"STRONG",{});var ntt=s(mle);nuo=r(ntt,"not"),ntt.forEach(t),suo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aN=n(aee,"A",{href:!0});var stt=s(aN);luo=r(stt,"from_pretrained()"),stt.forEach(t),iuo=r(aee," to load the model weights."),aee.forEach(t),duo=i(Y5),T(hp.$$.fragment,Y5),Y5.forEach(t),cuo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(EA.$$.fragment,oa),fuo=i(oa),gle=n(oa,"P",{});var ltt=s(gle);muo=r(ltt,"Instantiate one of the base model classes of the library from a pretrained model."),ltt.forEach(t),guo=i(oa),ya=n(oa,"P",{});var K5=s(ya);huo=r(K5,"The model class to instantiate is selected based on the "),hle=n(K5,"CODE",{});var itt=s(hle);puo=r(itt,"model_type"),itt.forEach(t),_uo=r(K5,` property of the config object (either
passed as an argument or loaded from `),ple=n(K5,"CODE",{});var dtt=s(ple);uuo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),buo=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(K5,"CODE",{});var ctt=s(_le);vuo=r(ctt,"pretrained_model_name_or_path"),ctt.forEach(t),Fuo=r(K5,":"),K5.forEach(t),Tuo=i(oa),y=n(oa,"UL",{});var $=s(y);pp=n($,"LI",{});var Ywe=s(pp);ule=n(Ywe,"STRONG",{});var ftt=s(ule);Muo=r(ftt,"albert"),ftt.forEach(t),Euo=r(Ywe," \u2014 "),nN=n(Ywe,"A",{href:!0});var mtt=s(nN);Cuo=r(mtt,"AlbertModel"),mtt.forEach(t),wuo=r(Ywe," (ALBERT model)"),Ywe.forEach(t),Auo=i($),_p=n($,"LI",{});var Kwe=s(_p);ble=n(Kwe,"STRONG",{});var gtt=s(ble);Luo=r(gtt,"bart"),gtt.forEach(t),yuo=r(Kwe," \u2014 "),sN=n(Kwe,"A",{href:!0});var htt=s(sN);xuo=r(htt,"BartModel"),htt.forEach(t),$uo=r(Kwe," (BART model)"),Kwe.forEach(t),kuo=i($),up=n($,"LI",{});var Zwe=s(up);vle=n(Zwe,"STRONG",{});var ptt=s(vle);Suo=r(ptt,"beit"),ptt.forEach(t),Ruo=r(Zwe," \u2014 "),lN=n(Zwe,"A",{href:!0});var _tt=s(lN);Puo=r(_tt,"BeitModel"),_tt.forEach(t),Buo=r(Zwe," (BEiT model)"),Zwe.forEach(t),Iuo=i($),bp=n($,"LI",{});var eAe=s(bp);Fle=n(eAe,"STRONG",{});var utt=s(Fle);Nuo=r(utt,"bert"),utt.forEach(t),quo=r(eAe," \u2014 "),iN=n(eAe,"A",{href:!0});var btt=s(iN);juo=r(btt,"BertModel"),btt.forEach(t),Duo=r(eAe," (BERT model)"),eAe.forEach(t),Guo=i($),vp=n($,"LI",{});var oAe=s(vp);Tle=n(oAe,"STRONG",{});var vtt=s(Tle);Ouo=r(vtt,"bert-generation"),vtt.forEach(t),Vuo=r(oAe," \u2014 "),dN=n(oAe,"A",{href:!0});var Ftt=s(dN);Xuo=r(Ftt,"BertGenerationEncoder"),Ftt.forEach(t),zuo=r(oAe," (Bert Generation model)"),oAe.forEach(t),Wuo=i($),Fp=n($,"LI",{});var rAe=s(Fp);Mle=n(rAe,"STRONG",{});var Ttt=s(Mle);Quo=r(Ttt,"big_bird"),Ttt.forEach(t),Huo=r(rAe," \u2014 "),cN=n(rAe,"A",{href:!0});var Mtt=s(cN);Uuo=r(Mtt,"BigBirdModel"),Mtt.forEach(t),Juo=r(rAe," (BigBird model)"),rAe.forEach(t),Yuo=i($),Tp=n($,"LI",{});var tAe=s(Tp);Ele=n(tAe,"STRONG",{});var Ett=s(Ele);Kuo=r(Ett,"bigbird_pegasus"),Ett.forEach(t),Zuo=r(tAe," \u2014 "),fN=n(tAe,"A",{href:!0});var Ctt=s(fN);e1o=r(Ctt,"BigBirdPegasusModel"),Ctt.forEach(t),o1o=r(tAe," (BigBird-Pegasus model)"),tAe.forEach(t),r1o=i($),Mp=n($,"LI",{});var aAe=s(Mp);Cle=n(aAe,"STRONG",{});var wtt=s(Cle);t1o=r(wtt,"blenderbot"),wtt.forEach(t),a1o=r(aAe," \u2014 "),mN=n(aAe,"A",{href:!0});var Att=s(mN);n1o=r(Att,"BlenderbotModel"),Att.forEach(t),s1o=r(aAe," (Blenderbot model)"),aAe.forEach(t),l1o=i($),Ep=n($,"LI",{});var nAe=s(Ep);wle=n(nAe,"STRONG",{});var Ltt=s(wle);i1o=r(Ltt,"blenderbot-small"),Ltt.forEach(t),d1o=r(nAe," \u2014 "),gN=n(nAe,"A",{href:!0});var ytt=s(gN);c1o=r(ytt,"BlenderbotSmallModel"),ytt.forEach(t),f1o=r(nAe," (BlenderbotSmall model)"),nAe.forEach(t),m1o=i($),Cp=n($,"LI",{});var sAe=s(Cp);Ale=n(sAe,"STRONG",{});var xtt=s(Ale);g1o=r(xtt,"bloom"),xtt.forEach(t),h1o=r(sAe," \u2014 "),hN=n(sAe,"A",{href:!0});var $tt=s(hN);p1o=r($tt,"BloomModel"),$tt.forEach(t),_1o=r(sAe," (BLOOM model)"),sAe.forEach(t),u1o=i($),wp=n($,"LI",{});var lAe=s(wp);Lle=n(lAe,"STRONG",{});var ktt=s(Lle);b1o=r(ktt,"camembert"),ktt.forEach(t),v1o=r(lAe," \u2014 "),pN=n(lAe,"A",{href:!0});var Stt=s(pN);F1o=r(Stt,"CamembertModel"),Stt.forEach(t),T1o=r(lAe," (CamemBERT model)"),lAe.forEach(t),M1o=i($),Ap=n($,"LI",{});var iAe=s(Ap);yle=n(iAe,"STRONG",{});var Rtt=s(yle);E1o=r(Rtt,"canine"),Rtt.forEach(t),C1o=r(iAe," \u2014 "),_N=n(iAe,"A",{href:!0});var Ptt=s(_N);w1o=r(Ptt,"CanineModel"),Ptt.forEach(t),A1o=r(iAe," (CANINE model)"),iAe.forEach(t),L1o=i($),Lp=n($,"LI",{});var dAe=s(Lp);xle=n(dAe,"STRONG",{});var Btt=s(xle);y1o=r(Btt,"clip"),Btt.forEach(t),x1o=r(dAe," \u2014 "),uN=n(dAe,"A",{href:!0});var Itt=s(uN);$1o=r(Itt,"CLIPModel"),Itt.forEach(t),k1o=r(dAe," (CLIP model)"),dAe.forEach(t),S1o=i($),yp=n($,"LI",{});var cAe=s(yp);$le=n(cAe,"STRONG",{});var Ntt=s($le);R1o=r(Ntt,"convbert"),Ntt.forEach(t),P1o=r(cAe," \u2014 "),bN=n(cAe,"A",{href:!0});var qtt=s(bN);B1o=r(qtt,"ConvBertModel"),qtt.forEach(t),I1o=r(cAe," (ConvBERT model)"),cAe.forEach(t),N1o=i($),xp=n($,"LI",{});var fAe=s(xp);kle=n(fAe,"STRONG",{});var jtt=s(kle);q1o=r(jtt,"convnext"),jtt.forEach(t),j1o=r(fAe," \u2014 "),vN=n(fAe,"A",{href:!0});var Dtt=s(vN);D1o=r(Dtt,"ConvNextModel"),Dtt.forEach(t),G1o=r(fAe," (ConvNeXT model)"),fAe.forEach(t),O1o=i($),$p=n($,"LI",{});var mAe=s($p);Sle=n(mAe,"STRONG",{});var Gtt=s(Sle);V1o=r(Gtt,"ctrl"),Gtt.forEach(t),X1o=r(mAe," \u2014 "),FN=n(mAe,"A",{href:!0});var Ott=s(FN);z1o=r(Ott,"CTRLModel"),Ott.forEach(t),W1o=r(mAe," (CTRL model)"),mAe.forEach(t),Q1o=i($),kp=n($,"LI",{});var gAe=s(kp);Rle=n(gAe,"STRONG",{});var Vtt=s(Rle);H1o=r(Vtt,"cvt"),Vtt.forEach(t),U1o=r(gAe," \u2014 "),TN=n(gAe,"A",{href:!0});var Xtt=s(TN);J1o=r(Xtt,"CvtModel"),Xtt.forEach(t),Y1o=r(gAe," (CvT model)"),gAe.forEach(t),K1o=i($),Sp=n($,"LI",{});var hAe=s(Sp);Ple=n(hAe,"STRONG",{});var ztt=s(Ple);Z1o=r(ztt,"data2vec-audio"),ztt.forEach(t),ebo=r(hAe," \u2014 "),MN=n(hAe,"A",{href:!0});var Wtt=s(MN);obo=r(Wtt,"Data2VecAudioModel"),Wtt.forEach(t),rbo=r(hAe," (Data2VecAudio model)"),hAe.forEach(t),tbo=i($),Rp=n($,"LI",{});var pAe=s(Rp);Ble=n(pAe,"STRONG",{});var Qtt=s(Ble);abo=r(Qtt,"data2vec-text"),Qtt.forEach(t),nbo=r(pAe," \u2014 "),EN=n(pAe,"A",{href:!0});var Htt=s(EN);sbo=r(Htt,"Data2VecTextModel"),Htt.forEach(t),lbo=r(pAe," (Data2VecText model)"),pAe.forEach(t),ibo=i($),Pp=n($,"LI",{});var _Ae=s(Pp);Ile=n(_Ae,"STRONG",{});var Utt=s(Ile);dbo=r(Utt,"data2vec-vision"),Utt.forEach(t),cbo=r(_Ae," \u2014 "),CN=n(_Ae,"A",{href:!0});var Jtt=s(CN);fbo=r(Jtt,"Data2VecVisionModel"),Jtt.forEach(t),mbo=r(_Ae," (Data2VecVision model)"),_Ae.forEach(t),gbo=i($),Bp=n($,"LI",{});var uAe=s(Bp);Nle=n(uAe,"STRONG",{});var Ytt=s(Nle);hbo=r(Ytt,"deberta"),Ytt.forEach(t),pbo=r(uAe," \u2014 "),wN=n(uAe,"A",{href:!0});var Ktt=s(wN);_bo=r(Ktt,"DebertaModel"),Ktt.forEach(t),ubo=r(uAe," (DeBERTa model)"),uAe.forEach(t),bbo=i($),Ip=n($,"LI",{});var bAe=s(Ip);qle=n(bAe,"STRONG",{});var Ztt=s(qle);vbo=r(Ztt,"deberta-v2"),Ztt.forEach(t),Fbo=r(bAe," \u2014 "),AN=n(bAe,"A",{href:!0});var eat=s(AN);Tbo=r(eat,"DebertaV2Model"),eat.forEach(t),Mbo=r(bAe," (DeBERTa-v2 model)"),bAe.forEach(t),Ebo=i($),Np=n($,"LI",{});var vAe=s(Np);jle=n(vAe,"STRONG",{});var oat=s(jle);Cbo=r(oat,"decision_transformer"),oat.forEach(t),wbo=r(vAe," \u2014 "),LN=n(vAe,"A",{href:!0});var rat=s(LN);Abo=r(rat,"DecisionTransformerModel"),rat.forEach(t),Lbo=r(vAe," (Decision Transformer model)"),vAe.forEach(t),ybo=i($),qp=n($,"LI",{});var FAe=s(qp);Dle=n(FAe,"STRONG",{});var tat=s(Dle);xbo=r(tat,"deit"),tat.forEach(t),$bo=r(FAe," \u2014 "),yN=n(FAe,"A",{href:!0});var aat=s(yN);kbo=r(aat,"DeiTModel"),aat.forEach(t),Sbo=r(FAe," (DeiT model)"),FAe.forEach(t),Rbo=i($),jp=n($,"LI",{});var TAe=s(jp);Gle=n(TAe,"STRONG",{});var nat=s(Gle);Pbo=r(nat,"detr"),nat.forEach(t),Bbo=r(TAe," \u2014 "),xN=n(TAe,"A",{href:!0});var sat=s(xN);Ibo=r(sat,"DetrModel"),sat.forEach(t),Nbo=r(TAe," (DETR model)"),TAe.forEach(t),qbo=i($),Dp=n($,"LI",{});var MAe=s(Dp);Ole=n(MAe,"STRONG",{});var lat=s(Ole);jbo=r(lat,"distilbert"),lat.forEach(t),Dbo=r(MAe," \u2014 "),$N=n(MAe,"A",{href:!0});var iat=s($N);Gbo=r(iat,"DistilBertModel"),iat.forEach(t),Obo=r(MAe," (DistilBERT model)"),MAe.forEach(t),Vbo=i($),Gp=n($,"LI",{});var EAe=s(Gp);Vle=n(EAe,"STRONG",{});var dat=s(Vle);Xbo=r(dat,"dpr"),dat.forEach(t),zbo=r(EAe," \u2014 "),kN=n(EAe,"A",{href:!0});var cat=s(kN);Wbo=r(cat,"DPRQuestionEncoder"),cat.forEach(t),Qbo=r(EAe," (DPR model)"),EAe.forEach(t),Hbo=i($),Op=n($,"LI",{});var CAe=s(Op);Xle=n(CAe,"STRONG",{});var fat=s(Xle);Ubo=r(fat,"dpt"),fat.forEach(t),Jbo=r(CAe," \u2014 "),SN=n(CAe,"A",{href:!0});var mat=s(SN);Ybo=r(mat,"DPTModel"),mat.forEach(t),Kbo=r(CAe," (DPT model)"),CAe.forEach(t),Zbo=i($),Vp=n($,"LI",{});var wAe=s(Vp);zle=n(wAe,"STRONG",{});var gat=s(zle);e2o=r(gat,"electra"),gat.forEach(t),o2o=r(wAe," \u2014 "),RN=n(wAe,"A",{href:!0});var hat=s(RN);r2o=r(hat,"ElectraModel"),hat.forEach(t),t2o=r(wAe," (ELECTRA model)"),wAe.forEach(t),a2o=i($),Xp=n($,"LI",{});var AAe=s(Xp);Wle=n(AAe,"STRONG",{});var pat=s(Wle);n2o=r(pat,"flaubert"),pat.forEach(t),s2o=r(AAe," \u2014 "),PN=n(AAe,"A",{href:!0});var _at=s(PN);l2o=r(_at,"FlaubertModel"),_at.forEach(t),i2o=r(AAe," (FlauBERT model)"),AAe.forEach(t),d2o=i($),zp=n($,"LI",{});var LAe=s(zp);Qle=n(LAe,"STRONG",{});var uat=s(Qle);c2o=r(uat,"flava"),uat.forEach(t),f2o=r(LAe," \u2014 "),BN=n(LAe,"A",{href:!0});var bat=s(BN);m2o=r(bat,"FlavaModel"),bat.forEach(t),g2o=r(LAe," (FLAVA model)"),LAe.forEach(t),h2o=i($),Wp=n($,"LI",{});var yAe=s(Wp);Hle=n(yAe,"STRONG",{});var vat=s(Hle);p2o=r(vat,"fnet"),vat.forEach(t),_2o=r(yAe," \u2014 "),IN=n(yAe,"A",{href:!0});var Fat=s(IN);u2o=r(Fat,"FNetModel"),Fat.forEach(t),b2o=r(yAe," (FNet model)"),yAe.forEach(t),v2o=i($),Qp=n($,"LI",{});var xAe=s(Qp);Ule=n(xAe,"STRONG",{});var Tat=s(Ule);F2o=r(Tat,"fsmt"),Tat.forEach(t),T2o=r(xAe," \u2014 "),NN=n(xAe,"A",{href:!0});var Mat=s(NN);M2o=r(Mat,"FSMTModel"),Mat.forEach(t),E2o=r(xAe," (FairSeq Machine-Translation model)"),xAe.forEach(t),C2o=i($),Ps=n($,"LI",{});var ik=s(Ps);Jle=n(ik,"STRONG",{});var Eat=s(Jle);w2o=r(Eat,"funnel"),Eat.forEach(t),A2o=r(ik," \u2014 "),qN=n(ik,"A",{href:!0});var Cat=s(qN);L2o=r(Cat,"FunnelModel"),Cat.forEach(t),y2o=r(ik," or "),jN=n(ik,"A",{href:!0});var wat=s(jN);x2o=r(wat,"FunnelBaseModel"),wat.forEach(t),$2o=r(ik," (Funnel Transformer model)"),ik.forEach(t),k2o=i($),Hp=n($,"LI",{});var $Ae=s(Hp);Yle=n($Ae,"STRONG",{});var Aat=s(Yle);S2o=r(Aat,"glpn"),Aat.forEach(t),R2o=r($Ae," \u2014 "),DN=n($Ae,"A",{href:!0});var Lat=s(DN);P2o=r(Lat,"GLPNModel"),Lat.forEach(t),B2o=r($Ae," (GLPN model)"),$Ae.forEach(t),I2o=i($),Up=n($,"LI",{});var kAe=s(Up);Kle=n(kAe,"STRONG",{});var yat=s(Kle);N2o=r(yat,"gpt2"),yat.forEach(t),q2o=r(kAe," \u2014 "),GN=n(kAe,"A",{href:!0});var xat=s(GN);j2o=r(xat,"GPT2Model"),xat.forEach(t),D2o=r(kAe," (OpenAI GPT-2 model)"),kAe.forEach(t),G2o=i($),Jp=n($,"LI",{});var SAe=s(Jp);Zle=n(SAe,"STRONG",{});var $at=s(Zle);O2o=r($at,"gpt_neo"),$at.forEach(t),V2o=r(SAe," \u2014 "),ON=n(SAe,"A",{href:!0});var kat=s(ON);X2o=r(kat,"GPTNeoModel"),kat.forEach(t),z2o=r(SAe," (GPT Neo model)"),SAe.forEach(t),W2o=i($),Yp=n($,"LI",{});var RAe=s(Yp);eie=n(RAe,"STRONG",{});var Sat=s(eie);Q2o=r(Sat,"gpt_neox"),Sat.forEach(t),H2o=r(RAe," \u2014 "),VN=n(RAe,"A",{href:!0});var Rat=s(VN);U2o=r(Rat,"GPTNeoXModel"),Rat.forEach(t),J2o=r(RAe," (GPT NeoX model)"),RAe.forEach(t),Y2o=i($),Kp=n($,"LI",{});var PAe=s(Kp);oie=n(PAe,"STRONG",{});var Pat=s(oie);K2o=r(Pat,"gptj"),Pat.forEach(t),Z2o=r(PAe," \u2014 "),XN=n(PAe,"A",{href:!0});var Bat=s(XN);evo=r(Bat,"GPTJModel"),Bat.forEach(t),ovo=r(PAe," (GPT-J model)"),PAe.forEach(t),rvo=i($),Zp=n($,"LI",{});var BAe=s(Zp);rie=n(BAe,"STRONG",{});var Iat=s(rie);tvo=r(Iat,"hubert"),Iat.forEach(t),avo=r(BAe," \u2014 "),zN=n(BAe,"A",{href:!0});var Nat=s(zN);nvo=r(Nat,"HubertModel"),Nat.forEach(t),svo=r(BAe," (Hubert model)"),BAe.forEach(t),lvo=i($),e_=n($,"LI",{});var IAe=s(e_);tie=n(IAe,"STRONG",{});var qat=s(tie);ivo=r(qat,"ibert"),qat.forEach(t),dvo=r(IAe," \u2014 "),WN=n(IAe,"A",{href:!0});var jat=s(WN);cvo=r(jat,"IBertModel"),jat.forEach(t),fvo=r(IAe," (I-BERT model)"),IAe.forEach(t),mvo=i($),o_=n($,"LI",{});var NAe=s(o_);aie=n(NAe,"STRONG",{});var Dat=s(aie);gvo=r(Dat,"imagegpt"),Dat.forEach(t),hvo=r(NAe," \u2014 "),QN=n(NAe,"A",{href:!0});var Gat=s(QN);pvo=r(Gat,"ImageGPTModel"),Gat.forEach(t),_vo=r(NAe," (ImageGPT model)"),NAe.forEach(t),uvo=i($),r_=n($,"LI",{});var qAe=s(r_);nie=n(qAe,"STRONG",{});var Oat=s(nie);bvo=r(Oat,"layoutlm"),Oat.forEach(t),vvo=r(qAe," \u2014 "),HN=n(qAe,"A",{href:!0});var Vat=s(HN);Fvo=r(Vat,"LayoutLMModel"),Vat.forEach(t),Tvo=r(qAe," (LayoutLM model)"),qAe.forEach(t),Mvo=i($),t_=n($,"LI",{});var jAe=s(t_);sie=n(jAe,"STRONG",{});var Xat=s(sie);Evo=r(Xat,"layoutlmv2"),Xat.forEach(t),Cvo=r(jAe," \u2014 "),UN=n(jAe,"A",{href:!0});var zat=s(UN);wvo=r(zat,"LayoutLMv2Model"),zat.forEach(t),Avo=r(jAe," (LayoutLMv2 model)"),jAe.forEach(t),Lvo=i($),a_=n($,"LI",{});var DAe=s(a_);lie=n(DAe,"STRONG",{});var Wat=s(lie);yvo=r(Wat,"layoutlmv3"),Wat.forEach(t),xvo=r(DAe," \u2014 "),JN=n(DAe,"A",{href:!0});var Qat=s(JN);$vo=r(Qat,"LayoutLMv3Model"),Qat.forEach(t),kvo=r(DAe," (LayoutLMv3 model)"),DAe.forEach(t),Svo=i($),n_=n($,"LI",{});var GAe=s(n_);iie=n(GAe,"STRONG",{});var Hat=s(iie);Rvo=r(Hat,"led"),Hat.forEach(t),Pvo=r(GAe," \u2014 "),YN=n(GAe,"A",{href:!0});var Uat=s(YN);Bvo=r(Uat,"LEDModel"),Uat.forEach(t),Ivo=r(GAe," (LED model)"),GAe.forEach(t),Nvo=i($),s_=n($,"LI",{});var OAe=s(s_);die=n(OAe,"STRONG",{});var Jat=s(die);qvo=r(Jat,"levit"),Jat.forEach(t),jvo=r(OAe," \u2014 "),KN=n(OAe,"A",{href:!0});var Yat=s(KN);Dvo=r(Yat,"LevitModel"),Yat.forEach(t),Gvo=r(OAe," (LeViT model)"),OAe.forEach(t),Ovo=i($),l_=n($,"LI",{});var VAe=s(l_);cie=n(VAe,"STRONG",{});var Kat=s(cie);Vvo=r(Kat,"longformer"),Kat.forEach(t),Xvo=r(VAe," \u2014 "),ZN=n(VAe,"A",{href:!0});var Zat=s(ZN);zvo=r(Zat,"LongformerModel"),Zat.forEach(t),Wvo=r(VAe," (Longformer model)"),VAe.forEach(t),Qvo=i($),i_=n($,"LI",{});var XAe=s(i_);fie=n(XAe,"STRONG",{});var ent=s(fie);Hvo=r(ent,"luke"),ent.forEach(t),Uvo=r(XAe," \u2014 "),eq=n(XAe,"A",{href:!0});var ont=s(eq);Jvo=r(ont,"LukeModel"),ont.forEach(t),Yvo=r(XAe," (LUKE model)"),XAe.forEach(t),Kvo=i($),d_=n($,"LI",{});var zAe=s(d_);mie=n(zAe,"STRONG",{});var rnt=s(mie);Zvo=r(rnt,"lxmert"),rnt.forEach(t),e3o=r(zAe," \u2014 "),oq=n(zAe,"A",{href:!0});var tnt=s(oq);o3o=r(tnt,"LxmertModel"),tnt.forEach(t),r3o=r(zAe," (LXMERT model)"),zAe.forEach(t),t3o=i($),c_=n($,"LI",{});var WAe=s(c_);gie=n(WAe,"STRONG",{});var ant=s(gie);a3o=r(ant,"m2m_100"),ant.forEach(t),n3o=r(WAe," \u2014 "),rq=n(WAe,"A",{href:!0});var nnt=s(rq);s3o=r(nnt,"M2M100Model"),nnt.forEach(t),l3o=r(WAe," (M2M100 model)"),WAe.forEach(t),i3o=i($),f_=n($,"LI",{});var QAe=s(f_);hie=n(QAe,"STRONG",{});var snt=s(hie);d3o=r(snt,"marian"),snt.forEach(t),c3o=r(QAe," \u2014 "),tq=n(QAe,"A",{href:!0});var lnt=s(tq);f3o=r(lnt,"MarianModel"),lnt.forEach(t),m3o=r(QAe," (Marian model)"),QAe.forEach(t),g3o=i($),m_=n($,"LI",{});var HAe=s(m_);pie=n(HAe,"STRONG",{});var int=s(pie);h3o=r(int,"maskformer"),int.forEach(t),p3o=r(HAe," \u2014 "),aq=n(HAe,"A",{href:!0});var dnt=s(aq);_3o=r(dnt,"MaskFormerModel"),dnt.forEach(t),u3o=r(HAe," (MaskFormer model)"),HAe.forEach(t),b3o=i($),g_=n($,"LI",{});var UAe=s(g_);_ie=n(UAe,"STRONG",{});var cnt=s(_ie);v3o=r(cnt,"mbart"),cnt.forEach(t),F3o=r(UAe," \u2014 "),nq=n(UAe,"A",{href:!0});var fnt=s(nq);T3o=r(fnt,"MBartModel"),fnt.forEach(t),M3o=r(UAe," (mBART model)"),UAe.forEach(t),E3o=i($),h_=n($,"LI",{});var JAe=s(h_);uie=n(JAe,"STRONG",{});var mnt=s(uie);C3o=r(mnt,"mctct"),mnt.forEach(t),w3o=r(JAe," \u2014 "),sq=n(JAe,"A",{href:!0});var gnt=s(sq);A3o=r(gnt,"MCTCTModel"),gnt.forEach(t),L3o=r(JAe," (M-CTC-T model)"),JAe.forEach(t),y3o=i($),p_=n($,"LI",{});var YAe=s(p_);bie=n(YAe,"STRONG",{});var hnt=s(bie);x3o=r(hnt,"megatron-bert"),hnt.forEach(t),$3o=r(YAe," \u2014 "),lq=n(YAe,"A",{href:!0});var pnt=s(lq);k3o=r(pnt,"MegatronBertModel"),pnt.forEach(t),S3o=r(YAe," (Megatron-BERT model)"),YAe.forEach(t),R3o=i($),__=n($,"LI",{});var KAe=s(__);vie=n(KAe,"STRONG",{});var _nt=s(vie);P3o=r(_nt,"mobilebert"),_nt.forEach(t),B3o=r(KAe," \u2014 "),iq=n(KAe,"A",{href:!0});var unt=s(iq);I3o=r(unt,"MobileBertModel"),unt.forEach(t),N3o=r(KAe," (MobileBERT model)"),KAe.forEach(t),q3o=i($),u_=n($,"LI",{});var ZAe=s(u_);Fie=n(ZAe,"STRONG",{});var bnt=s(Fie);j3o=r(bnt,"mpnet"),bnt.forEach(t),D3o=r(ZAe," \u2014 "),dq=n(ZAe,"A",{href:!0});var vnt=s(dq);G3o=r(vnt,"MPNetModel"),vnt.forEach(t),O3o=r(ZAe," (MPNet model)"),ZAe.forEach(t),V3o=i($),b_=n($,"LI",{});var eLe=s(b_);Tie=n(eLe,"STRONG",{});var Fnt=s(Tie);X3o=r(Fnt,"mt5"),Fnt.forEach(t),z3o=r(eLe," \u2014 "),cq=n(eLe,"A",{href:!0});var Tnt=s(cq);W3o=r(Tnt,"MT5Model"),Tnt.forEach(t),Q3o=r(eLe," (MT5 model)"),eLe.forEach(t),H3o=i($),v_=n($,"LI",{});var oLe=s(v_);Mie=n(oLe,"STRONG",{});var Mnt=s(Mie);U3o=r(Mnt,"nystromformer"),Mnt.forEach(t),J3o=r(oLe," \u2014 "),fq=n(oLe,"A",{href:!0});var Ent=s(fq);Y3o=r(Ent,"NystromformerModel"),Ent.forEach(t),K3o=r(oLe," (Nystr\xF6mformer model)"),oLe.forEach(t),Z3o=i($),F_=n($,"LI",{});var rLe=s(F_);Eie=n(rLe,"STRONG",{});var Cnt=s(Eie);eFo=r(Cnt,"openai-gpt"),Cnt.forEach(t),oFo=r(rLe," \u2014 "),mq=n(rLe,"A",{href:!0});var wnt=s(mq);rFo=r(wnt,"OpenAIGPTModel"),wnt.forEach(t),tFo=r(rLe," (OpenAI GPT model)"),rLe.forEach(t),aFo=i($),T_=n($,"LI",{});var tLe=s(T_);Cie=n(tLe,"STRONG",{});var Ant=s(Cie);nFo=r(Ant,"opt"),Ant.forEach(t),sFo=r(tLe," \u2014 "),gq=n(tLe,"A",{href:!0});var Lnt=s(gq);lFo=r(Lnt,"OPTModel"),Lnt.forEach(t),iFo=r(tLe," (OPT model)"),tLe.forEach(t),dFo=i($),M_=n($,"LI",{});var aLe=s(M_);wie=n(aLe,"STRONG",{});var ynt=s(wie);cFo=r(ynt,"pegasus"),ynt.forEach(t),fFo=r(aLe," \u2014 "),hq=n(aLe,"A",{href:!0});var xnt=s(hq);mFo=r(xnt,"PegasusModel"),xnt.forEach(t),gFo=r(aLe," (Pegasus model)"),aLe.forEach(t),hFo=i($),E_=n($,"LI",{});var nLe=s(E_);Aie=n(nLe,"STRONG",{});var $nt=s(Aie);pFo=r($nt,"perceiver"),$nt.forEach(t),_Fo=r(nLe," \u2014 "),pq=n(nLe,"A",{href:!0});var knt=s(pq);uFo=r(knt,"PerceiverModel"),knt.forEach(t),bFo=r(nLe," (Perceiver model)"),nLe.forEach(t),vFo=i($),C_=n($,"LI",{});var sLe=s(C_);Lie=n(sLe,"STRONG",{});var Snt=s(Lie);FFo=r(Snt,"plbart"),Snt.forEach(t),TFo=r(sLe," \u2014 "),_q=n(sLe,"A",{href:!0});var Rnt=s(_q);MFo=r(Rnt,"PLBartModel"),Rnt.forEach(t),EFo=r(sLe," (PLBart model)"),sLe.forEach(t),CFo=i($),w_=n($,"LI",{});var lLe=s(w_);yie=n(lLe,"STRONG",{});var Pnt=s(yie);wFo=r(Pnt,"poolformer"),Pnt.forEach(t),AFo=r(lLe," \u2014 "),uq=n(lLe,"A",{href:!0});var Bnt=s(uq);LFo=r(Bnt,"PoolFormerModel"),Bnt.forEach(t),yFo=r(lLe," (PoolFormer model)"),lLe.forEach(t),xFo=i($),A_=n($,"LI",{});var iLe=s(A_);xie=n(iLe,"STRONG",{});var Int=s(xie);$Fo=r(Int,"prophetnet"),Int.forEach(t),kFo=r(iLe," \u2014 "),bq=n(iLe,"A",{href:!0});var Nnt=s(bq);SFo=r(Nnt,"ProphetNetModel"),Nnt.forEach(t),RFo=r(iLe," (ProphetNet model)"),iLe.forEach(t),PFo=i($),L_=n($,"LI",{});var dLe=s(L_);$ie=n(dLe,"STRONG",{});var qnt=s($ie);BFo=r(qnt,"qdqbert"),qnt.forEach(t),IFo=r(dLe," \u2014 "),vq=n(dLe,"A",{href:!0});var jnt=s(vq);NFo=r(jnt,"QDQBertModel"),jnt.forEach(t),qFo=r(dLe," (QDQBert model)"),dLe.forEach(t),jFo=i($),y_=n($,"LI",{});var cLe=s(y_);kie=n(cLe,"STRONG",{});var Dnt=s(kie);DFo=r(Dnt,"reformer"),Dnt.forEach(t),GFo=r(cLe," \u2014 "),Fq=n(cLe,"A",{href:!0});var Gnt=s(Fq);OFo=r(Gnt,"ReformerModel"),Gnt.forEach(t),VFo=r(cLe," (Reformer model)"),cLe.forEach(t),XFo=i($),x_=n($,"LI",{});var fLe=s(x_);Sie=n(fLe,"STRONG",{});var Ont=s(Sie);zFo=r(Ont,"regnet"),Ont.forEach(t),WFo=r(fLe," \u2014 "),Tq=n(fLe,"A",{href:!0});var Vnt=s(Tq);QFo=r(Vnt,"RegNetModel"),Vnt.forEach(t),HFo=r(fLe," (RegNet model)"),fLe.forEach(t),UFo=i($),$_=n($,"LI",{});var mLe=s($_);Rie=n(mLe,"STRONG",{});var Xnt=s(Rie);JFo=r(Xnt,"rembert"),Xnt.forEach(t),YFo=r(mLe," \u2014 "),Mq=n(mLe,"A",{href:!0});var znt=s(Mq);KFo=r(znt,"RemBertModel"),znt.forEach(t),ZFo=r(mLe," (RemBERT model)"),mLe.forEach(t),e6o=i($),k_=n($,"LI",{});var gLe=s(k_);Pie=n(gLe,"STRONG",{});var Wnt=s(Pie);o6o=r(Wnt,"resnet"),Wnt.forEach(t),r6o=r(gLe," \u2014 "),Eq=n(gLe,"A",{href:!0});var Qnt=s(Eq);t6o=r(Qnt,"ResNetModel"),Qnt.forEach(t),a6o=r(gLe," (ResNet model)"),gLe.forEach(t),n6o=i($),S_=n($,"LI",{});var hLe=s(S_);Bie=n(hLe,"STRONG",{});var Hnt=s(Bie);s6o=r(Hnt,"retribert"),Hnt.forEach(t),l6o=r(hLe," \u2014 "),Cq=n(hLe,"A",{href:!0});var Unt=s(Cq);i6o=r(Unt,"RetriBertModel"),Unt.forEach(t),d6o=r(hLe," (RetriBERT model)"),hLe.forEach(t),c6o=i($),R_=n($,"LI",{});var pLe=s(R_);Iie=n(pLe,"STRONG",{});var Jnt=s(Iie);f6o=r(Jnt,"roberta"),Jnt.forEach(t),m6o=r(pLe," \u2014 "),wq=n(pLe,"A",{href:!0});var Ynt=s(wq);g6o=r(Ynt,"RobertaModel"),Ynt.forEach(t),h6o=r(pLe," (RoBERTa model)"),pLe.forEach(t),p6o=i($),P_=n($,"LI",{});var _Le=s(P_);Nie=n(_Le,"STRONG",{});var Knt=s(Nie);_6o=r(Knt,"roformer"),Knt.forEach(t),u6o=r(_Le," \u2014 "),Aq=n(_Le,"A",{href:!0});var Znt=s(Aq);b6o=r(Znt,"RoFormerModel"),Znt.forEach(t),v6o=r(_Le," (RoFormer model)"),_Le.forEach(t),F6o=i($),B_=n($,"LI",{});var uLe=s(B_);qie=n(uLe,"STRONG",{});var est=s(qie);T6o=r(est,"segformer"),est.forEach(t),M6o=r(uLe," \u2014 "),Lq=n(uLe,"A",{href:!0});var ost=s(Lq);E6o=r(ost,"SegformerModel"),ost.forEach(t),C6o=r(uLe," (SegFormer model)"),uLe.forEach(t),w6o=i($),I_=n($,"LI",{});var bLe=s(I_);jie=n(bLe,"STRONG",{});var rst=s(jie);A6o=r(rst,"sew"),rst.forEach(t),L6o=r(bLe," \u2014 "),yq=n(bLe,"A",{href:!0});var tst=s(yq);y6o=r(tst,"SEWModel"),tst.forEach(t),x6o=r(bLe," (SEW model)"),bLe.forEach(t),$6o=i($),N_=n($,"LI",{});var vLe=s(N_);Die=n(vLe,"STRONG",{});var ast=s(Die);k6o=r(ast,"sew-d"),ast.forEach(t),S6o=r(vLe," \u2014 "),xq=n(vLe,"A",{href:!0});var nst=s(xq);R6o=r(nst,"SEWDModel"),nst.forEach(t),P6o=r(vLe," (SEW-D model)"),vLe.forEach(t),B6o=i($),q_=n($,"LI",{});var FLe=s(q_);Gie=n(FLe,"STRONG",{});var sst=s(Gie);I6o=r(sst,"speech_to_text"),sst.forEach(t),N6o=r(FLe," \u2014 "),$q=n(FLe,"A",{href:!0});var lst=s($q);q6o=r(lst,"Speech2TextModel"),lst.forEach(t),j6o=r(FLe," (Speech2Text model)"),FLe.forEach(t),D6o=i($),j_=n($,"LI",{});var TLe=s(j_);Oie=n(TLe,"STRONG",{});var ist=s(Oie);G6o=r(ist,"splinter"),ist.forEach(t),O6o=r(TLe," \u2014 "),kq=n(TLe,"A",{href:!0});var dst=s(kq);V6o=r(dst,"SplinterModel"),dst.forEach(t),X6o=r(TLe," (Splinter model)"),TLe.forEach(t),z6o=i($),D_=n($,"LI",{});var MLe=s(D_);Vie=n(MLe,"STRONG",{});var cst=s(Vie);W6o=r(cst,"squeezebert"),cst.forEach(t),Q6o=r(MLe," \u2014 "),Sq=n(MLe,"A",{href:!0});var fst=s(Sq);H6o=r(fst,"SqueezeBertModel"),fst.forEach(t),U6o=r(MLe," (SqueezeBERT model)"),MLe.forEach(t),J6o=i($),G_=n($,"LI",{});var ELe=s(G_);Xie=n(ELe,"STRONG",{});var mst=s(Xie);Y6o=r(mst,"swin"),mst.forEach(t),K6o=r(ELe," \u2014 "),Rq=n(ELe,"A",{href:!0});var gst=s(Rq);Z6o=r(gst,"SwinModel"),gst.forEach(t),eTo=r(ELe," (Swin Transformer model)"),ELe.forEach(t),oTo=i($),O_=n($,"LI",{});var CLe=s(O_);zie=n(CLe,"STRONG",{});var hst=s(zie);rTo=r(hst,"t5"),hst.forEach(t),tTo=r(CLe," \u2014 "),Pq=n(CLe,"A",{href:!0});var pst=s(Pq);aTo=r(pst,"T5Model"),pst.forEach(t),nTo=r(CLe," (T5 model)"),CLe.forEach(t),sTo=i($),V_=n($,"LI",{});var wLe=s(V_);Wie=n(wLe,"STRONG",{});var _st=s(Wie);lTo=r(_st,"tapas"),_st.forEach(t),iTo=r(wLe," \u2014 "),Bq=n(wLe,"A",{href:!0});var ust=s(Bq);dTo=r(ust,"TapasModel"),ust.forEach(t),cTo=r(wLe," (TAPAS model)"),wLe.forEach(t),fTo=i($),X_=n($,"LI",{});var ALe=s(X_);Qie=n(ALe,"STRONG",{});var bst=s(Qie);mTo=r(bst,"trajectory_transformer"),bst.forEach(t),gTo=r(ALe," \u2014 "),Iq=n(ALe,"A",{href:!0});var vst=s(Iq);hTo=r(vst,"TrajectoryTransformerModel"),vst.forEach(t),pTo=r(ALe," (Trajectory Transformer model)"),ALe.forEach(t),_To=i($),z_=n($,"LI",{});var LLe=s(z_);Hie=n(LLe,"STRONG",{});var Fst=s(Hie);uTo=r(Fst,"transfo-xl"),Fst.forEach(t),bTo=r(LLe," \u2014 "),Nq=n(LLe,"A",{href:!0});var Tst=s(Nq);vTo=r(Tst,"TransfoXLModel"),Tst.forEach(t),FTo=r(LLe," (Transformer-XL model)"),LLe.forEach(t),TTo=i($),W_=n($,"LI",{});var yLe=s(W_);Uie=n(yLe,"STRONG",{});var Mst=s(Uie);MTo=r(Mst,"unispeech"),Mst.forEach(t),ETo=r(yLe," \u2014 "),qq=n(yLe,"A",{href:!0});var Est=s(qq);CTo=r(Est,"UniSpeechModel"),Est.forEach(t),wTo=r(yLe," (UniSpeech model)"),yLe.forEach(t),ATo=i($),Q_=n($,"LI",{});var xLe=s(Q_);Jie=n(xLe,"STRONG",{});var Cst=s(Jie);LTo=r(Cst,"unispeech-sat"),Cst.forEach(t),yTo=r(xLe," \u2014 "),jq=n(xLe,"A",{href:!0});var wst=s(jq);xTo=r(wst,"UniSpeechSatModel"),wst.forEach(t),$To=r(xLe," (UniSpeechSat model)"),xLe.forEach(t),kTo=i($),H_=n($,"LI",{});var $Le=s(H_);Yie=n($Le,"STRONG",{});var Ast=s(Yie);STo=r(Ast,"van"),Ast.forEach(t),RTo=r($Le," \u2014 "),Dq=n($Le,"A",{href:!0});var Lst=s(Dq);PTo=r(Lst,"VanModel"),Lst.forEach(t),BTo=r($Le," (VAN model)"),$Le.forEach(t),ITo=i($),U_=n($,"LI",{});var kLe=s(U_);Kie=n(kLe,"STRONG",{});var yst=s(Kie);NTo=r(yst,"vilt"),yst.forEach(t),qTo=r(kLe," \u2014 "),Gq=n(kLe,"A",{href:!0});var xst=s(Gq);jTo=r(xst,"ViltModel"),xst.forEach(t),DTo=r(kLe," (ViLT model)"),kLe.forEach(t),GTo=i($),J_=n($,"LI",{});var SLe=s(J_);Zie=n(SLe,"STRONG",{});var $st=s(Zie);OTo=r($st,"vision-text-dual-encoder"),$st.forEach(t),VTo=r(SLe," \u2014 "),Oq=n(SLe,"A",{href:!0});var kst=s(Oq);XTo=r(kst,"VisionTextDualEncoderModel"),kst.forEach(t),zTo=r(SLe," (VisionTextDualEncoder model)"),SLe.forEach(t),WTo=i($),Y_=n($,"LI",{});var RLe=s(Y_);ede=n(RLe,"STRONG",{});var Sst=s(ede);QTo=r(Sst,"visual_bert"),Sst.forEach(t),HTo=r(RLe," \u2014 "),Vq=n(RLe,"A",{href:!0});var Rst=s(Vq);UTo=r(Rst,"VisualBertModel"),Rst.forEach(t),JTo=r(RLe," (VisualBERT model)"),RLe.forEach(t),YTo=i($),K_=n($,"LI",{});var PLe=s(K_);ode=n(PLe,"STRONG",{});var Pst=s(ode);KTo=r(Pst,"vit"),Pst.forEach(t),ZTo=r(PLe," \u2014 "),Xq=n(PLe,"A",{href:!0});var Bst=s(Xq);e7o=r(Bst,"ViTModel"),Bst.forEach(t),o7o=r(PLe," (ViT model)"),PLe.forEach(t),r7o=i($),Z_=n($,"LI",{});var BLe=s(Z_);rde=n(BLe,"STRONG",{});var Ist=s(rde);t7o=r(Ist,"vit_mae"),Ist.forEach(t),a7o=r(BLe," \u2014 "),zq=n(BLe,"A",{href:!0});var Nst=s(zq);n7o=r(Nst,"ViTMAEModel"),Nst.forEach(t),s7o=r(BLe," (ViTMAE model)"),BLe.forEach(t),l7o=i($),eu=n($,"LI",{});var ILe=s(eu);tde=n(ILe,"STRONG",{});var qst=s(tde);i7o=r(qst,"wav2vec2"),qst.forEach(t),d7o=r(ILe," \u2014 "),Wq=n(ILe,"A",{href:!0});var jst=s(Wq);c7o=r(jst,"Wav2Vec2Model"),jst.forEach(t),f7o=r(ILe," (Wav2Vec2 model)"),ILe.forEach(t),m7o=i($),ou=n($,"LI",{});var NLe=s(ou);ade=n(NLe,"STRONG",{});var Dst=s(ade);g7o=r(Dst,"wav2vec2-conformer"),Dst.forEach(t),h7o=r(NLe," \u2014 "),Qq=n(NLe,"A",{href:!0});var Gst=s(Qq);p7o=r(Gst,"Wav2Vec2ConformerModel"),Gst.forEach(t),_7o=r(NLe," (Wav2Vec2-Conformer model)"),NLe.forEach(t),u7o=i($),ru=n($,"LI",{});var qLe=s(ru);nde=n(qLe,"STRONG",{});var Ost=s(nde);b7o=r(Ost,"wavlm"),Ost.forEach(t),v7o=r(qLe," \u2014 "),Hq=n(qLe,"A",{href:!0});var Vst=s(Hq);F7o=r(Vst,"WavLMModel"),Vst.forEach(t),T7o=r(qLe," (WavLM model)"),qLe.forEach(t),M7o=i($),tu=n($,"LI",{});var jLe=s(tu);sde=n(jLe,"STRONG",{});var Xst=s(sde);E7o=r(Xst,"xglm"),Xst.forEach(t),C7o=r(jLe," \u2014 "),Uq=n(jLe,"A",{href:!0});var zst=s(Uq);w7o=r(zst,"XGLMModel"),zst.forEach(t),A7o=r(jLe," (XGLM model)"),jLe.forEach(t),L7o=i($),au=n($,"LI",{});var DLe=s(au);lde=n(DLe,"STRONG",{});var Wst=s(lde);y7o=r(Wst,"xlm"),Wst.forEach(t),x7o=r(DLe," \u2014 "),Jq=n(DLe,"A",{href:!0});var Qst=s(Jq);$7o=r(Qst,"XLMModel"),Qst.forEach(t),k7o=r(DLe," (XLM model)"),DLe.forEach(t),S7o=i($),nu=n($,"LI",{});var GLe=s(nu);ide=n(GLe,"STRONG",{});var Hst=s(ide);R7o=r(Hst,"xlm-prophetnet"),Hst.forEach(t),P7o=r(GLe," \u2014 "),Yq=n(GLe,"A",{href:!0});var Ust=s(Yq);B7o=r(Ust,"XLMProphetNetModel"),Ust.forEach(t),I7o=r(GLe," (XLM-ProphetNet model)"),GLe.forEach(t),N7o=i($),su=n($,"LI",{});var OLe=s(su);dde=n(OLe,"STRONG",{});var Jst=s(dde);q7o=r(Jst,"xlm-roberta"),Jst.forEach(t),j7o=r(OLe," \u2014 "),Kq=n(OLe,"A",{href:!0});var Yst=s(Kq);D7o=r(Yst,"XLMRobertaModel"),Yst.forEach(t),G7o=r(OLe," (XLM-RoBERTa model)"),OLe.forEach(t),O7o=i($),lu=n($,"LI",{});var VLe=s(lu);cde=n(VLe,"STRONG",{});var Kst=s(cde);V7o=r(Kst,"xlm-roberta-xl"),Kst.forEach(t),X7o=r(VLe," \u2014 "),Zq=n(VLe,"A",{href:!0});var Zst=s(Zq);z7o=r(Zst,"XLMRobertaXLModel"),Zst.forEach(t),W7o=r(VLe," (XLM-RoBERTa-XL model)"),VLe.forEach(t),Q7o=i($),iu=n($,"LI",{});var XLe=s(iu);fde=n(XLe,"STRONG",{});var elt=s(fde);H7o=r(elt,"xlnet"),elt.forEach(t),U7o=r(XLe," \u2014 "),ej=n(XLe,"A",{href:!0});var olt=s(ej);J7o=r(olt,"XLNetModel"),olt.forEach(t),Y7o=r(XLe," (XLNet model)"),XLe.forEach(t),K7o=i($),du=n($,"LI",{});var zLe=s(du);mde=n(zLe,"STRONG",{});var rlt=s(mde);Z7o=r(rlt,"yolos"),rlt.forEach(t),e9o=r(zLe," \u2014 "),oj=n(zLe,"A",{href:!0});var tlt=s(oj);o9o=r(tlt,"YolosModel"),tlt.forEach(t),r9o=r(zLe," (YOLOS model)"),zLe.forEach(t),t9o=i($),cu=n($,"LI",{});var WLe=s(cu);gde=n(WLe,"STRONG",{});var alt=s(gde);a9o=r(alt,"yoso"),alt.forEach(t),n9o=r(WLe," \u2014 "),rj=n(WLe,"A",{href:!0});var nlt=s(rj);s9o=r(nlt,"YosoModel"),nlt.forEach(t),l9o=r(WLe," (YOSO model)"),WLe.forEach(t),$.forEach(t),i9o=i(oa),fu=n(oa,"P",{});var QLe=s(fu);d9o=r(QLe,"The model is set in evaluation mode by default using "),hde=n(QLe,"CODE",{});var slt=s(hde);c9o=r(slt,"model.eval()"),slt.forEach(t),f9o=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=n(QLe,"CODE",{});var llt=s(pde);m9o=r(llt,"model.train()"),llt.forEach(t),QLe.forEach(t),g9o=i(oa),T(mu.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Dje=i(f),xi=n(f,"H2",{class:!0});var XGe=s(xi);gu=n(XGe,"A",{id:!0,class:!0,href:!0});var ilt=s(gu);_de=n(ilt,"SPAN",{});var dlt=s(_de);T(CA.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),h9o=i(XGe),ude=n(XGe,"SPAN",{});var clt=s(ude);p9o=r(clt,"AutoModelForPreTraining"),clt.forEach(t),XGe.forEach(t),Gje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(wA.$$.fragment,Vs),_9o=i(Vs),$i=n(Vs,"P",{});var nee=s($i);u9o=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tj=n(nee,"A",{href:!0});var flt=s(tj);b9o=r(flt,"from_pretrained()"),flt.forEach(t),v9o=r(nee," class method or the "),aj=n(nee,"A",{href:!0});var mlt=s(aj);F9o=r(mlt,"from_config()"),mlt.forEach(t),T9o=r(nee,` class
method.`),nee.forEach(t),M9o=i(Vs),AA=n(Vs,"P",{});var zGe=s(AA);E9o=r(zGe,"This class cannot be instantiated directly using "),bde=n(zGe,"CODE",{});var glt=s(bde);C9o=r(glt,"__init__()"),glt.forEach(t),w9o=r(zGe," (throws an error)."),zGe.forEach(t),A9o=i(Vs),at=n(Vs,"DIV",{class:!0});var Z5=s(at);T(LA.$$.fragment,Z5),L9o=i(Z5),vde=n(Z5,"P",{});var hlt=s(vde);y9o=r(hlt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hlt.forEach(t),x9o=i(Z5),ki=n(Z5,"P",{});var see=s(ki);$9o=r(see,`Note:
Loading a model from its configuration file does `),Fde=n(see,"STRONG",{});var plt=s(Fde);k9o=r(plt,"not"),plt.forEach(t),S9o=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(see,"A",{href:!0});var _lt=s(nj);R9o=r(_lt,"from_pretrained()"),_lt.forEach(t),P9o=r(see," to load the model weights."),see.forEach(t),B9o=i(Z5),T(hu.$$.fragment,Z5),Z5.forEach(t),I9o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(yA.$$.fragment,ra),N9o=i(ra),Tde=n(ra,"P",{});var ult=s(Tde);q9o=r(ult,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ult.forEach(t),j9o=i(ra),xa=n(ra,"P",{});var e0=s(xa);D9o=r(e0,"The model class to instantiate is selected based on the "),Mde=n(e0,"CODE",{});var blt=s(Mde);G9o=r(blt,"model_type"),blt.forEach(t),O9o=r(e0,` property of the config object (either
passed as an argument or loaded from `),Ede=n(e0,"CODE",{});var vlt=s(Ede);V9o=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),X9o=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(e0,"CODE",{});var Flt=s(Cde);z9o=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),W9o=r(e0,":"),e0.forEach(t),Q9o=i(ra),G=n(ra,"UL",{});var O=s(G);pu=n(O,"LI",{});var HLe=s(pu);wde=n(HLe,"STRONG",{});var Tlt=s(wde);H9o=r(Tlt,"albert"),Tlt.forEach(t),U9o=r(HLe," \u2014 "),sj=n(HLe,"A",{href:!0});var Mlt=s(sj);J9o=r(Mlt,"AlbertForPreTraining"),Mlt.forEach(t),Y9o=r(HLe," (ALBERT model)"),HLe.forEach(t),K9o=i(O),_u=n(O,"LI",{});var ULe=s(_u);Ade=n(ULe,"STRONG",{});var Elt=s(Ade);Z9o=r(Elt,"bart"),Elt.forEach(t),eMo=r(ULe," \u2014 "),lj=n(ULe,"A",{href:!0});var Clt=s(lj);oMo=r(Clt,"BartForConditionalGeneration"),Clt.forEach(t),rMo=r(ULe," (BART model)"),ULe.forEach(t),tMo=i(O),uu=n(O,"LI",{});var JLe=s(uu);Lde=n(JLe,"STRONG",{});var wlt=s(Lde);aMo=r(wlt,"bert"),wlt.forEach(t),nMo=r(JLe," \u2014 "),ij=n(JLe,"A",{href:!0});var Alt=s(ij);sMo=r(Alt,"BertForPreTraining"),Alt.forEach(t),lMo=r(JLe," (BERT model)"),JLe.forEach(t),iMo=i(O),bu=n(O,"LI",{});var YLe=s(bu);yde=n(YLe,"STRONG",{});var Llt=s(yde);dMo=r(Llt,"big_bird"),Llt.forEach(t),cMo=r(YLe," \u2014 "),dj=n(YLe,"A",{href:!0});var ylt=s(dj);fMo=r(ylt,"BigBirdForPreTraining"),ylt.forEach(t),mMo=r(YLe," (BigBird model)"),YLe.forEach(t),gMo=i(O),vu=n(O,"LI",{});var KLe=s(vu);xde=n(KLe,"STRONG",{});var xlt=s(xde);hMo=r(xlt,"bloom"),xlt.forEach(t),pMo=r(KLe," \u2014 "),cj=n(KLe,"A",{href:!0});var $lt=s(cj);_Mo=r($lt,"BloomForCausalLM"),$lt.forEach(t),uMo=r(KLe," (BLOOM model)"),KLe.forEach(t),bMo=i(O),Fu=n(O,"LI",{});var ZLe=s(Fu);$de=n(ZLe,"STRONG",{});var klt=s($de);vMo=r(klt,"camembert"),klt.forEach(t),FMo=r(ZLe," \u2014 "),fj=n(ZLe,"A",{href:!0});var Slt=s(fj);TMo=r(Slt,"CamembertForMaskedLM"),Slt.forEach(t),MMo=r(ZLe," (CamemBERT model)"),ZLe.forEach(t),EMo=i(O),Tu=n(O,"LI",{});var eye=s(Tu);kde=n(eye,"STRONG",{});var Rlt=s(kde);CMo=r(Rlt,"ctrl"),Rlt.forEach(t),wMo=r(eye," \u2014 "),mj=n(eye,"A",{href:!0});var Plt=s(mj);AMo=r(Plt,"CTRLLMHeadModel"),Plt.forEach(t),LMo=r(eye," (CTRL model)"),eye.forEach(t),yMo=i(O),Mu=n(O,"LI",{});var oye=s(Mu);Sde=n(oye,"STRONG",{});var Blt=s(Sde);xMo=r(Blt,"data2vec-text"),Blt.forEach(t),$Mo=r(oye," \u2014 "),gj=n(oye,"A",{href:!0});var Ilt=s(gj);kMo=r(Ilt,"Data2VecTextForMaskedLM"),Ilt.forEach(t),SMo=r(oye," (Data2VecText model)"),oye.forEach(t),RMo=i(O),Eu=n(O,"LI",{});var rye=s(Eu);Rde=n(rye,"STRONG",{});var Nlt=s(Rde);PMo=r(Nlt,"deberta"),Nlt.forEach(t),BMo=r(rye," \u2014 "),hj=n(rye,"A",{href:!0});var qlt=s(hj);IMo=r(qlt,"DebertaForMaskedLM"),qlt.forEach(t),NMo=r(rye," (DeBERTa model)"),rye.forEach(t),qMo=i(O),Cu=n(O,"LI",{});var tye=s(Cu);Pde=n(tye,"STRONG",{});var jlt=s(Pde);jMo=r(jlt,"deberta-v2"),jlt.forEach(t),DMo=r(tye," \u2014 "),pj=n(tye,"A",{href:!0});var Dlt=s(pj);GMo=r(Dlt,"DebertaV2ForMaskedLM"),Dlt.forEach(t),OMo=r(tye," (DeBERTa-v2 model)"),tye.forEach(t),VMo=i(O),wu=n(O,"LI",{});var aye=s(wu);Bde=n(aye,"STRONG",{});var Glt=s(Bde);XMo=r(Glt,"distilbert"),Glt.forEach(t),zMo=r(aye," \u2014 "),_j=n(aye,"A",{href:!0});var Olt=s(_j);WMo=r(Olt,"DistilBertForMaskedLM"),Olt.forEach(t),QMo=r(aye," (DistilBERT model)"),aye.forEach(t),HMo=i(O),Au=n(O,"LI",{});var nye=s(Au);Ide=n(nye,"STRONG",{});var Vlt=s(Ide);UMo=r(Vlt,"electra"),Vlt.forEach(t),JMo=r(nye," \u2014 "),uj=n(nye,"A",{href:!0});var Xlt=s(uj);YMo=r(Xlt,"ElectraForPreTraining"),Xlt.forEach(t),KMo=r(nye," (ELECTRA model)"),nye.forEach(t),ZMo=i(O),Lu=n(O,"LI",{});var sye=s(Lu);Nde=n(sye,"STRONG",{});var zlt=s(Nde);e4o=r(zlt,"flaubert"),zlt.forEach(t),o4o=r(sye," \u2014 "),bj=n(sye,"A",{href:!0});var Wlt=s(bj);r4o=r(Wlt,"FlaubertWithLMHeadModel"),Wlt.forEach(t),t4o=r(sye," (FlauBERT model)"),sye.forEach(t),a4o=i(O),yu=n(O,"LI",{});var lye=s(yu);qde=n(lye,"STRONG",{});var Qlt=s(qde);n4o=r(Qlt,"flava"),Qlt.forEach(t),s4o=r(lye," \u2014 "),vj=n(lye,"A",{href:!0});var Hlt=s(vj);l4o=r(Hlt,"FlavaForPreTraining"),Hlt.forEach(t),i4o=r(lye," (FLAVA model)"),lye.forEach(t),d4o=i(O),xu=n(O,"LI",{});var iye=s(xu);jde=n(iye,"STRONG",{});var Ult=s(jde);c4o=r(Ult,"fnet"),Ult.forEach(t),f4o=r(iye," \u2014 "),Fj=n(iye,"A",{href:!0});var Jlt=s(Fj);m4o=r(Jlt,"FNetForPreTraining"),Jlt.forEach(t),g4o=r(iye," (FNet model)"),iye.forEach(t),h4o=i(O),$u=n(O,"LI",{});var dye=s($u);Dde=n(dye,"STRONG",{});var Ylt=s(Dde);p4o=r(Ylt,"fsmt"),Ylt.forEach(t),_4o=r(dye," \u2014 "),Tj=n(dye,"A",{href:!0});var Klt=s(Tj);u4o=r(Klt,"FSMTForConditionalGeneration"),Klt.forEach(t),b4o=r(dye," (FairSeq Machine-Translation model)"),dye.forEach(t),v4o=i(O),ku=n(O,"LI",{});var cye=s(ku);Gde=n(cye,"STRONG",{});var Zlt=s(Gde);F4o=r(Zlt,"funnel"),Zlt.forEach(t),T4o=r(cye," \u2014 "),Mj=n(cye,"A",{href:!0});var eit=s(Mj);M4o=r(eit,"FunnelForPreTraining"),eit.forEach(t),E4o=r(cye," (Funnel Transformer model)"),cye.forEach(t),C4o=i(O),Su=n(O,"LI",{});var fye=s(Su);Ode=n(fye,"STRONG",{});var oit=s(Ode);w4o=r(oit,"gpt2"),oit.forEach(t),A4o=r(fye," \u2014 "),Ej=n(fye,"A",{href:!0});var rit=s(Ej);L4o=r(rit,"GPT2LMHeadModel"),rit.forEach(t),y4o=r(fye," (OpenAI GPT-2 model)"),fye.forEach(t),x4o=i(O),Ru=n(O,"LI",{});var mye=s(Ru);Vde=n(mye,"STRONG",{});var tit=s(Vde);$4o=r(tit,"ibert"),tit.forEach(t),k4o=r(mye," \u2014 "),Cj=n(mye,"A",{href:!0});var ait=s(Cj);S4o=r(ait,"IBertForMaskedLM"),ait.forEach(t),R4o=r(mye," (I-BERT model)"),mye.forEach(t),P4o=i(O),Pu=n(O,"LI",{});var gye=s(Pu);Xde=n(gye,"STRONG",{});var nit=s(Xde);B4o=r(nit,"layoutlm"),nit.forEach(t),I4o=r(gye," \u2014 "),wj=n(gye,"A",{href:!0});var sit=s(wj);N4o=r(sit,"LayoutLMForMaskedLM"),sit.forEach(t),q4o=r(gye," (LayoutLM model)"),gye.forEach(t),j4o=i(O),Bu=n(O,"LI",{});var hye=s(Bu);zde=n(hye,"STRONG",{});var lit=s(zde);D4o=r(lit,"longformer"),lit.forEach(t),G4o=r(hye," \u2014 "),Aj=n(hye,"A",{href:!0});var iit=s(Aj);O4o=r(iit,"LongformerForMaskedLM"),iit.forEach(t),V4o=r(hye," (Longformer model)"),hye.forEach(t),X4o=i(O),Iu=n(O,"LI",{});var pye=s(Iu);Wde=n(pye,"STRONG",{});var dit=s(Wde);z4o=r(dit,"lxmert"),dit.forEach(t),W4o=r(pye," \u2014 "),Lj=n(pye,"A",{href:!0});var cit=s(Lj);Q4o=r(cit,"LxmertForPreTraining"),cit.forEach(t),H4o=r(pye," (LXMERT model)"),pye.forEach(t),U4o=i(O),Nu=n(O,"LI",{});var _ye=s(Nu);Qde=n(_ye,"STRONG",{});var fit=s(Qde);J4o=r(fit,"megatron-bert"),fit.forEach(t),Y4o=r(_ye," \u2014 "),yj=n(_ye,"A",{href:!0});var mit=s(yj);K4o=r(mit,"MegatronBertForPreTraining"),mit.forEach(t),Z4o=r(_ye," (Megatron-BERT model)"),_ye.forEach(t),eEo=i(O),qu=n(O,"LI",{});var uye=s(qu);Hde=n(uye,"STRONG",{});var git=s(Hde);oEo=r(git,"mobilebert"),git.forEach(t),rEo=r(uye," \u2014 "),xj=n(uye,"A",{href:!0});var hit=s(xj);tEo=r(hit,"MobileBertForPreTraining"),hit.forEach(t),aEo=r(uye," (MobileBERT model)"),uye.forEach(t),nEo=i(O),ju=n(O,"LI",{});var bye=s(ju);Ude=n(bye,"STRONG",{});var pit=s(Ude);sEo=r(pit,"mpnet"),pit.forEach(t),lEo=r(bye," \u2014 "),$j=n(bye,"A",{href:!0});var _it=s($j);iEo=r(_it,"MPNetForMaskedLM"),_it.forEach(t),dEo=r(bye," (MPNet model)"),bye.forEach(t),cEo=i(O),Du=n(O,"LI",{});var vye=s(Du);Jde=n(vye,"STRONG",{});var uit=s(Jde);fEo=r(uit,"openai-gpt"),uit.forEach(t),mEo=r(vye," \u2014 "),kj=n(vye,"A",{href:!0});var bit=s(kj);gEo=r(bit,"OpenAIGPTLMHeadModel"),bit.forEach(t),hEo=r(vye," (OpenAI GPT model)"),vye.forEach(t),pEo=i(O),Gu=n(O,"LI",{});var Fye=s(Gu);Yde=n(Fye,"STRONG",{});var vit=s(Yde);_Eo=r(vit,"retribert"),vit.forEach(t),uEo=r(Fye," \u2014 "),Sj=n(Fye,"A",{href:!0});var Fit=s(Sj);bEo=r(Fit,"RetriBertModel"),Fit.forEach(t),vEo=r(Fye," (RetriBERT model)"),Fye.forEach(t),FEo=i(O),Ou=n(O,"LI",{});var Tye=s(Ou);Kde=n(Tye,"STRONG",{});var Tit=s(Kde);TEo=r(Tit,"roberta"),Tit.forEach(t),MEo=r(Tye," \u2014 "),Rj=n(Tye,"A",{href:!0});var Mit=s(Rj);EEo=r(Mit,"RobertaForMaskedLM"),Mit.forEach(t),CEo=r(Tye," (RoBERTa model)"),Tye.forEach(t),wEo=i(O),Vu=n(O,"LI",{});var Mye=s(Vu);Zde=n(Mye,"STRONG",{});var Eit=s(Zde);AEo=r(Eit,"splinter"),Eit.forEach(t),LEo=r(Mye," \u2014 "),Pj=n(Mye,"A",{href:!0});var Cit=s(Pj);yEo=r(Cit,"SplinterForPreTraining"),Cit.forEach(t),xEo=r(Mye," (Splinter model)"),Mye.forEach(t),$Eo=i(O),Xu=n(O,"LI",{});var Eye=s(Xu);ece=n(Eye,"STRONG",{});var wit=s(ece);kEo=r(wit,"squeezebert"),wit.forEach(t),SEo=r(Eye," \u2014 "),Bj=n(Eye,"A",{href:!0});var Ait=s(Bj);REo=r(Ait,"SqueezeBertForMaskedLM"),Ait.forEach(t),PEo=r(Eye," (SqueezeBERT model)"),Eye.forEach(t),BEo=i(O),zu=n(O,"LI",{});var Cye=s(zu);oce=n(Cye,"STRONG",{});var Lit=s(oce);IEo=r(Lit,"t5"),Lit.forEach(t),NEo=r(Cye," \u2014 "),Ij=n(Cye,"A",{href:!0});var yit=s(Ij);qEo=r(yit,"T5ForConditionalGeneration"),yit.forEach(t),jEo=r(Cye," (T5 model)"),Cye.forEach(t),DEo=i(O),Wu=n(O,"LI",{});var wye=s(Wu);rce=n(wye,"STRONG",{});var xit=s(rce);GEo=r(xit,"tapas"),xit.forEach(t),OEo=r(wye," \u2014 "),Nj=n(wye,"A",{href:!0});var $it=s(Nj);VEo=r($it,"TapasForMaskedLM"),$it.forEach(t),XEo=r(wye," (TAPAS model)"),wye.forEach(t),zEo=i(O),Qu=n(O,"LI",{});var Aye=s(Qu);tce=n(Aye,"STRONG",{});var kit=s(tce);WEo=r(kit,"transfo-xl"),kit.forEach(t),QEo=r(Aye," \u2014 "),qj=n(Aye,"A",{href:!0});var Sit=s(qj);HEo=r(Sit,"TransfoXLLMHeadModel"),Sit.forEach(t),UEo=r(Aye," (Transformer-XL model)"),Aye.forEach(t),JEo=i(O),Hu=n(O,"LI",{});var Lye=s(Hu);ace=n(Lye,"STRONG",{});var Rit=s(ace);YEo=r(Rit,"unispeech"),Rit.forEach(t),KEo=r(Lye," \u2014 "),jj=n(Lye,"A",{href:!0});var Pit=s(jj);ZEo=r(Pit,"UniSpeechForPreTraining"),Pit.forEach(t),eCo=r(Lye," (UniSpeech model)"),Lye.forEach(t),oCo=i(O),Uu=n(O,"LI",{});var yye=s(Uu);nce=n(yye,"STRONG",{});var Bit=s(nce);rCo=r(Bit,"unispeech-sat"),Bit.forEach(t),tCo=r(yye," \u2014 "),Dj=n(yye,"A",{href:!0});var Iit=s(Dj);aCo=r(Iit,"UniSpeechSatForPreTraining"),Iit.forEach(t),nCo=r(yye," (UniSpeechSat model)"),yye.forEach(t),sCo=i(O),Ju=n(O,"LI",{});var xye=s(Ju);sce=n(xye,"STRONG",{});var Nit=s(sce);lCo=r(Nit,"visual_bert"),Nit.forEach(t),iCo=r(xye," \u2014 "),Gj=n(xye,"A",{href:!0});var qit=s(Gj);dCo=r(qit,"VisualBertForPreTraining"),qit.forEach(t),cCo=r(xye," (VisualBERT model)"),xye.forEach(t),fCo=i(O),Yu=n(O,"LI",{});var $ye=s(Yu);lce=n($ye,"STRONG",{});var jit=s(lce);mCo=r(jit,"vit_mae"),jit.forEach(t),gCo=r($ye," \u2014 "),Oj=n($ye,"A",{href:!0});var Dit=s(Oj);hCo=r(Dit,"ViTMAEForPreTraining"),Dit.forEach(t),pCo=r($ye," (ViTMAE model)"),$ye.forEach(t),_Co=i(O),Ku=n(O,"LI",{});var kye=s(Ku);ice=n(kye,"STRONG",{});var Git=s(ice);uCo=r(Git,"wav2vec2"),Git.forEach(t),bCo=r(kye," \u2014 "),Vj=n(kye,"A",{href:!0});var Oit=s(Vj);vCo=r(Oit,"Wav2Vec2ForPreTraining"),Oit.forEach(t),FCo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),TCo=i(O),Zu=n(O,"LI",{});var Sye=s(Zu);dce=n(Sye,"STRONG",{});var Vit=s(dce);MCo=r(Vit,"wav2vec2-conformer"),Vit.forEach(t),ECo=r(Sye," \u2014 "),Xj=n(Sye,"A",{href:!0});var Xit=s(Xj);CCo=r(Xit,"Wav2Vec2ConformerForPreTraining"),Xit.forEach(t),wCo=r(Sye," (Wav2Vec2-Conformer model)"),Sye.forEach(t),ACo=i(O),e1=n(O,"LI",{});var Rye=s(e1);cce=n(Rye,"STRONG",{});var zit=s(cce);LCo=r(zit,"xlm"),zit.forEach(t),yCo=r(Rye," \u2014 "),zj=n(Rye,"A",{href:!0});var Wit=s(zj);xCo=r(Wit,"XLMWithLMHeadModel"),Wit.forEach(t),$Co=r(Rye," (XLM model)"),Rye.forEach(t),kCo=i(O),o1=n(O,"LI",{});var Pye=s(o1);fce=n(Pye,"STRONG",{});var Qit=s(fce);SCo=r(Qit,"xlm-roberta"),Qit.forEach(t),RCo=r(Pye," \u2014 "),Wj=n(Pye,"A",{href:!0});var Hit=s(Wj);PCo=r(Hit,"XLMRobertaForMaskedLM"),Hit.forEach(t),BCo=r(Pye," (XLM-RoBERTa model)"),Pye.forEach(t),ICo=i(O),r1=n(O,"LI",{});var Bye=s(r1);mce=n(Bye,"STRONG",{});var Uit=s(mce);NCo=r(Uit,"xlm-roberta-xl"),Uit.forEach(t),qCo=r(Bye," \u2014 "),Qj=n(Bye,"A",{href:!0});var Jit=s(Qj);jCo=r(Jit,"XLMRobertaXLForMaskedLM"),Jit.forEach(t),DCo=r(Bye," (XLM-RoBERTa-XL model)"),Bye.forEach(t),GCo=i(O),t1=n(O,"LI",{});var Iye=s(t1);gce=n(Iye,"STRONG",{});var Yit=s(gce);OCo=r(Yit,"xlnet"),Yit.forEach(t),VCo=r(Iye," \u2014 "),Hj=n(Iye,"A",{href:!0});var Kit=s(Hj);XCo=r(Kit,"XLNetLMHeadModel"),Kit.forEach(t),zCo=r(Iye," (XLNet model)"),Iye.forEach(t),O.forEach(t),WCo=i(ra),a1=n(ra,"P",{});var Nye=s(a1);QCo=r(Nye,"The model is set in evaluation mode by default using "),hce=n(Nye,"CODE",{});var Zit=s(hce);HCo=r(Zit,"model.eval()"),Zit.forEach(t),UCo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(Nye,"CODE",{});var edt=s(pce);JCo=r(edt,"model.train()"),edt.forEach(t),Nye.forEach(t),YCo=i(ra),T(n1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Oje=i(f),Si=n(f,"H2",{class:!0});var WGe=s(Si);s1=n(WGe,"A",{id:!0,class:!0,href:!0});var odt=s(s1);_ce=n(odt,"SPAN",{});var rdt=s(_ce);T(xA.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),KCo=i(WGe),uce=n(WGe,"SPAN",{});var tdt=s(uce);ZCo=r(tdt,"AutoModelForCausalLM"),tdt.forEach(t),WGe.forEach(t),Vje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T($A.$$.fragment,Xs),e5o=i(Xs),Ri=n(Xs,"P",{});var lee=s(Ri);o5o=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uj=n(lee,"A",{href:!0});var adt=s(Uj);r5o=r(adt,"from_pretrained()"),adt.forEach(t),t5o=r(lee," class method or the "),Jj=n(lee,"A",{href:!0});var ndt=s(Jj);a5o=r(ndt,"from_config()"),ndt.forEach(t),n5o=r(lee,` class
method.`),lee.forEach(t),s5o=i(Xs),kA=n(Xs,"P",{});var QGe=s(kA);l5o=r(QGe,"This class cannot be instantiated directly using "),bce=n(QGe,"CODE",{});var sdt=s(bce);i5o=r(sdt,"__init__()"),sdt.forEach(t),d5o=r(QGe," (throws an error)."),QGe.forEach(t),c5o=i(Xs),nt=n(Xs,"DIV",{class:!0});var o0=s(nt);T(SA.$$.fragment,o0),f5o=i(o0),vce=n(o0,"P",{});var ldt=s(vce);m5o=r(ldt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ldt.forEach(t),g5o=i(o0),Pi=n(o0,"P",{});var iee=s(Pi);h5o=r(iee,`Note:
Loading a model from its configuration file does `),Fce=n(iee,"STRONG",{});var idt=s(Fce);p5o=r(idt,"not"),idt.forEach(t),_5o=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=n(iee,"A",{href:!0});var ddt=s(Yj);u5o=r(ddt,"from_pretrained()"),ddt.forEach(t),b5o=r(iee," to load the model weights."),iee.forEach(t),v5o=i(o0),T(l1.$$.fragment,o0),o0.forEach(t),F5o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(RA.$$.fragment,ta),T5o=i(ta),Tce=n(ta,"P",{});var cdt=s(Tce);M5o=r(cdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cdt.forEach(t),E5o=i(ta),$a=n(ta,"P",{});var r0=s($a);C5o=r(r0,"The model class to instantiate is selected based on the "),Mce=n(r0,"CODE",{});var fdt=s(Mce);w5o=r(fdt,"model_type"),fdt.forEach(t),A5o=r(r0,` property of the config object (either
passed as an argument or loaded from `),Ece=n(r0,"CODE",{});var mdt=s(Ece);L5o=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),y5o=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(r0,"CODE",{});var gdt=s(Cce);x5o=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),$5o=r(r0,":"),r0.forEach(t),k5o=i(ta),z=n(ta,"UL",{});var W=s(z);i1=n(W,"LI",{});var qye=s(i1);wce=n(qye,"STRONG",{});var hdt=s(wce);S5o=r(hdt,"bart"),hdt.forEach(t),R5o=r(qye," \u2014 "),Kj=n(qye,"A",{href:!0});var pdt=s(Kj);P5o=r(pdt,"BartForCausalLM"),pdt.forEach(t),B5o=r(qye," (BART model)"),qye.forEach(t),I5o=i(W),d1=n(W,"LI",{});var jye=s(d1);Ace=n(jye,"STRONG",{});var _dt=s(Ace);N5o=r(_dt,"bert"),_dt.forEach(t),q5o=r(jye," \u2014 "),Zj=n(jye,"A",{href:!0});var udt=s(Zj);j5o=r(udt,"BertLMHeadModel"),udt.forEach(t),D5o=r(jye," (BERT model)"),jye.forEach(t),G5o=i(W),c1=n(W,"LI",{});var Dye=s(c1);Lce=n(Dye,"STRONG",{});var bdt=s(Lce);O5o=r(bdt,"bert-generation"),bdt.forEach(t),V5o=r(Dye," \u2014 "),eD=n(Dye,"A",{href:!0});var vdt=s(eD);X5o=r(vdt,"BertGenerationDecoder"),vdt.forEach(t),z5o=r(Dye," (Bert Generation model)"),Dye.forEach(t),W5o=i(W),f1=n(W,"LI",{});var Gye=s(f1);yce=n(Gye,"STRONG",{});var Fdt=s(yce);Q5o=r(Fdt,"big_bird"),Fdt.forEach(t),H5o=r(Gye," \u2014 "),oD=n(Gye,"A",{href:!0});var Tdt=s(oD);U5o=r(Tdt,"BigBirdForCausalLM"),Tdt.forEach(t),J5o=r(Gye," (BigBird model)"),Gye.forEach(t),Y5o=i(W),m1=n(W,"LI",{});var Oye=s(m1);xce=n(Oye,"STRONG",{});var Mdt=s(xce);K5o=r(Mdt,"bigbird_pegasus"),Mdt.forEach(t),Z5o=r(Oye," \u2014 "),rD=n(Oye,"A",{href:!0});var Edt=s(rD);e0o=r(Edt,"BigBirdPegasusForCausalLM"),Edt.forEach(t),o0o=r(Oye," (BigBird-Pegasus model)"),Oye.forEach(t),r0o=i(W),g1=n(W,"LI",{});var Vye=s(g1);$ce=n(Vye,"STRONG",{});var Cdt=s($ce);t0o=r(Cdt,"blenderbot"),Cdt.forEach(t),a0o=r(Vye," \u2014 "),tD=n(Vye,"A",{href:!0});var wdt=s(tD);n0o=r(wdt,"BlenderbotForCausalLM"),wdt.forEach(t),s0o=r(Vye," (Blenderbot model)"),Vye.forEach(t),l0o=i(W),h1=n(W,"LI",{});var Xye=s(h1);kce=n(Xye,"STRONG",{});var Adt=s(kce);i0o=r(Adt,"blenderbot-small"),Adt.forEach(t),d0o=r(Xye," \u2014 "),aD=n(Xye,"A",{href:!0});var Ldt=s(aD);c0o=r(Ldt,"BlenderbotSmallForCausalLM"),Ldt.forEach(t),f0o=r(Xye," (BlenderbotSmall model)"),Xye.forEach(t),m0o=i(W),p1=n(W,"LI",{});var zye=s(p1);Sce=n(zye,"STRONG",{});var ydt=s(Sce);g0o=r(ydt,"bloom"),ydt.forEach(t),h0o=r(zye," \u2014 "),nD=n(zye,"A",{href:!0});var xdt=s(nD);p0o=r(xdt,"BloomForCausalLM"),xdt.forEach(t),_0o=r(zye," (BLOOM model)"),zye.forEach(t),u0o=i(W),_1=n(W,"LI",{});var Wye=s(_1);Rce=n(Wye,"STRONG",{});var $dt=s(Rce);b0o=r($dt,"camembert"),$dt.forEach(t),v0o=r(Wye," \u2014 "),sD=n(Wye,"A",{href:!0});var kdt=s(sD);F0o=r(kdt,"CamembertForCausalLM"),kdt.forEach(t),T0o=r(Wye," (CamemBERT model)"),Wye.forEach(t),M0o=i(W),u1=n(W,"LI",{});var Qye=s(u1);Pce=n(Qye,"STRONG",{});var Sdt=s(Pce);E0o=r(Sdt,"ctrl"),Sdt.forEach(t),C0o=r(Qye," \u2014 "),lD=n(Qye,"A",{href:!0});var Rdt=s(lD);w0o=r(Rdt,"CTRLLMHeadModel"),Rdt.forEach(t),A0o=r(Qye," (CTRL model)"),Qye.forEach(t),L0o=i(W),b1=n(W,"LI",{});var Hye=s(b1);Bce=n(Hye,"STRONG",{});var Pdt=s(Bce);y0o=r(Pdt,"data2vec-text"),Pdt.forEach(t),x0o=r(Hye," \u2014 "),iD=n(Hye,"A",{href:!0});var Bdt=s(iD);$0o=r(Bdt,"Data2VecTextForCausalLM"),Bdt.forEach(t),k0o=r(Hye," (Data2VecText model)"),Hye.forEach(t),S0o=i(W),v1=n(W,"LI",{});var Uye=s(v1);Ice=n(Uye,"STRONG",{});var Idt=s(Ice);R0o=r(Idt,"electra"),Idt.forEach(t),P0o=r(Uye," \u2014 "),dD=n(Uye,"A",{href:!0});var Ndt=s(dD);B0o=r(Ndt,"ElectraForCausalLM"),Ndt.forEach(t),I0o=r(Uye," (ELECTRA model)"),Uye.forEach(t),N0o=i(W),F1=n(W,"LI",{});var Jye=s(F1);Nce=n(Jye,"STRONG",{});var qdt=s(Nce);q0o=r(qdt,"gpt2"),qdt.forEach(t),j0o=r(Jye," \u2014 "),cD=n(Jye,"A",{href:!0});var jdt=s(cD);D0o=r(jdt,"GPT2LMHeadModel"),jdt.forEach(t),G0o=r(Jye," (OpenAI GPT-2 model)"),Jye.forEach(t),O0o=i(W),T1=n(W,"LI",{});var Yye=s(T1);qce=n(Yye,"STRONG",{});var Ddt=s(qce);V0o=r(Ddt,"gpt_neo"),Ddt.forEach(t),X0o=r(Yye," \u2014 "),fD=n(Yye,"A",{href:!0});var Gdt=s(fD);z0o=r(Gdt,"GPTNeoForCausalLM"),Gdt.forEach(t),W0o=r(Yye," (GPT Neo model)"),Yye.forEach(t),Q0o=i(W),M1=n(W,"LI",{});var Kye=s(M1);jce=n(Kye,"STRONG",{});var Odt=s(jce);H0o=r(Odt,"gpt_neox"),Odt.forEach(t),U0o=r(Kye," \u2014 "),mD=n(Kye,"A",{href:!0});var Vdt=s(mD);J0o=r(Vdt,"GPTNeoXForCausalLM"),Vdt.forEach(t),Y0o=r(Kye," (GPT NeoX model)"),Kye.forEach(t),K0o=i(W),E1=n(W,"LI",{});var Zye=s(E1);Dce=n(Zye,"STRONG",{});var Xdt=s(Dce);Z0o=r(Xdt,"gptj"),Xdt.forEach(t),ewo=r(Zye," \u2014 "),gD=n(Zye,"A",{href:!0});var zdt=s(gD);owo=r(zdt,"GPTJForCausalLM"),zdt.forEach(t),rwo=r(Zye," (GPT-J model)"),Zye.forEach(t),two=i(W),C1=n(W,"LI",{});var e8e=s(C1);Gce=n(e8e,"STRONG",{});var Wdt=s(Gce);awo=r(Wdt,"marian"),Wdt.forEach(t),nwo=r(e8e," \u2014 "),hD=n(e8e,"A",{href:!0});var Qdt=s(hD);swo=r(Qdt,"MarianForCausalLM"),Qdt.forEach(t),lwo=r(e8e," (Marian model)"),e8e.forEach(t),iwo=i(W),w1=n(W,"LI",{});var o8e=s(w1);Oce=n(o8e,"STRONG",{});var Hdt=s(Oce);dwo=r(Hdt,"mbart"),Hdt.forEach(t),cwo=r(o8e," \u2014 "),pD=n(o8e,"A",{href:!0});var Udt=s(pD);fwo=r(Udt,"MBartForCausalLM"),Udt.forEach(t),mwo=r(o8e," (mBART model)"),o8e.forEach(t),gwo=i(W),A1=n(W,"LI",{});var r8e=s(A1);Vce=n(r8e,"STRONG",{});var Jdt=s(Vce);hwo=r(Jdt,"megatron-bert"),Jdt.forEach(t),pwo=r(r8e," \u2014 "),_D=n(r8e,"A",{href:!0});var Ydt=s(_D);_wo=r(Ydt,"MegatronBertForCausalLM"),Ydt.forEach(t),uwo=r(r8e," (Megatron-BERT model)"),r8e.forEach(t),bwo=i(W),L1=n(W,"LI",{});var t8e=s(L1);Xce=n(t8e,"STRONG",{});var Kdt=s(Xce);vwo=r(Kdt,"openai-gpt"),Kdt.forEach(t),Fwo=r(t8e," \u2014 "),uD=n(t8e,"A",{href:!0});var Zdt=s(uD);Two=r(Zdt,"OpenAIGPTLMHeadModel"),Zdt.forEach(t),Mwo=r(t8e," (OpenAI GPT model)"),t8e.forEach(t),Ewo=i(W),y1=n(W,"LI",{});var a8e=s(y1);zce=n(a8e,"STRONG",{});var ect=s(zce);Cwo=r(ect,"opt"),ect.forEach(t),wwo=r(a8e," \u2014 "),bD=n(a8e,"A",{href:!0});var oct=s(bD);Awo=r(oct,"OPTForCausalLM"),oct.forEach(t),Lwo=r(a8e," (OPT model)"),a8e.forEach(t),ywo=i(W),x1=n(W,"LI",{});var n8e=s(x1);Wce=n(n8e,"STRONG",{});var rct=s(Wce);xwo=r(rct,"pegasus"),rct.forEach(t),$wo=r(n8e," \u2014 "),vD=n(n8e,"A",{href:!0});var tct=s(vD);kwo=r(tct,"PegasusForCausalLM"),tct.forEach(t),Swo=r(n8e," (Pegasus model)"),n8e.forEach(t),Rwo=i(W),$1=n(W,"LI",{});var s8e=s($1);Qce=n(s8e,"STRONG",{});var act=s(Qce);Pwo=r(act,"plbart"),act.forEach(t),Bwo=r(s8e," \u2014 "),FD=n(s8e,"A",{href:!0});var nct=s(FD);Iwo=r(nct,"PLBartForCausalLM"),nct.forEach(t),Nwo=r(s8e," (PLBart model)"),s8e.forEach(t),qwo=i(W),k1=n(W,"LI",{});var l8e=s(k1);Hce=n(l8e,"STRONG",{});var sct=s(Hce);jwo=r(sct,"prophetnet"),sct.forEach(t),Dwo=r(l8e," \u2014 "),TD=n(l8e,"A",{href:!0});var lct=s(TD);Gwo=r(lct,"ProphetNetForCausalLM"),lct.forEach(t),Owo=r(l8e," (ProphetNet model)"),l8e.forEach(t),Vwo=i(W),S1=n(W,"LI",{});var i8e=s(S1);Uce=n(i8e,"STRONG",{});var ict=s(Uce);Xwo=r(ict,"qdqbert"),ict.forEach(t),zwo=r(i8e," \u2014 "),MD=n(i8e,"A",{href:!0});var dct=s(MD);Wwo=r(dct,"QDQBertLMHeadModel"),dct.forEach(t),Qwo=r(i8e," (QDQBert model)"),i8e.forEach(t),Hwo=i(W),R1=n(W,"LI",{});var d8e=s(R1);Jce=n(d8e,"STRONG",{});var cct=s(Jce);Uwo=r(cct,"reformer"),cct.forEach(t),Jwo=r(d8e," \u2014 "),ED=n(d8e,"A",{href:!0});var fct=s(ED);Ywo=r(fct,"ReformerModelWithLMHead"),fct.forEach(t),Kwo=r(d8e," (Reformer model)"),d8e.forEach(t),Zwo=i(W),P1=n(W,"LI",{});var c8e=s(P1);Yce=n(c8e,"STRONG",{});var mct=s(Yce);eAo=r(mct,"rembert"),mct.forEach(t),oAo=r(c8e," \u2014 "),CD=n(c8e,"A",{href:!0});var gct=s(CD);rAo=r(gct,"RemBertForCausalLM"),gct.forEach(t),tAo=r(c8e," (RemBERT model)"),c8e.forEach(t),aAo=i(W),B1=n(W,"LI",{});var f8e=s(B1);Kce=n(f8e,"STRONG",{});var hct=s(Kce);nAo=r(hct,"roberta"),hct.forEach(t),sAo=r(f8e," \u2014 "),wD=n(f8e,"A",{href:!0});var pct=s(wD);lAo=r(pct,"RobertaForCausalLM"),pct.forEach(t),iAo=r(f8e," (RoBERTa model)"),f8e.forEach(t),dAo=i(W),I1=n(W,"LI",{});var m8e=s(I1);Zce=n(m8e,"STRONG",{});var _ct=s(Zce);cAo=r(_ct,"roformer"),_ct.forEach(t),fAo=r(m8e," \u2014 "),AD=n(m8e,"A",{href:!0});var uct=s(AD);mAo=r(uct,"RoFormerForCausalLM"),uct.forEach(t),gAo=r(m8e," (RoFormer model)"),m8e.forEach(t),hAo=i(W),N1=n(W,"LI",{});var g8e=s(N1);efe=n(g8e,"STRONG",{});var bct=s(efe);pAo=r(bct,"speech_to_text_2"),bct.forEach(t),_Ao=r(g8e," \u2014 "),LD=n(g8e,"A",{href:!0});var vct=s(LD);uAo=r(vct,"Speech2Text2ForCausalLM"),vct.forEach(t),bAo=r(g8e," (Speech2Text2 model)"),g8e.forEach(t),vAo=i(W),q1=n(W,"LI",{});var h8e=s(q1);ofe=n(h8e,"STRONG",{});var Fct=s(ofe);FAo=r(Fct,"transfo-xl"),Fct.forEach(t),TAo=r(h8e," \u2014 "),yD=n(h8e,"A",{href:!0});var Tct=s(yD);MAo=r(Tct,"TransfoXLLMHeadModel"),Tct.forEach(t),EAo=r(h8e," (Transformer-XL model)"),h8e.forEach(t),CAo=i(W),j1=n(W,"LI",{});var p8e=s(j1);rfe=n(p8e,"STRONG",{});var Mct=s(rfe);wAo=r(Mct,"trocr"),Mct.forEach(t),AAo=r(p8e," \u2014 "),xD=n(p8e,"A",{href:!0});var Ect=s(xD);LAo=r(Ect,"TrOCRForCausalLM"),Ect.forEach(t),yAo=r(p8e," (TrOCR model)"),p8e.forEach(t),xAo=i(W),D1=n(W,"LI",{});var _8e=s(D1);tfe=n(_8e,"STRONG",{});var Cct=s(tfe);$Ao=r(Cct,"xglm"),Cct.forEach(t),kAo=r(_8e," \u2014 "),$D=n(_8e,"A",{href:!0});var wct=s($D);SAo=r(wct,"XGLMForCausalLM"),wct.forEach(t),RAo=r(_8e," (XGLM model)"),_8e.forEach(t),PAo=i(W),G1=n(W,"LI",{});var u8e=s(G1);afe=n(u8e,"STRONG",{});var Act=s(afe);BAo=r(Act,"xlm"),Act.forEach(t),IAo=r(u8e," \u2014 "),kD=n(u8e,"A",{href:!0});var Lct=s(kD);NAo=r(Lct,"XLMWithLMHeadModel"),Lct.forEach(t),qAo=r(u8e," (XLM model)"),u8e.forEach(t),jAo=i(W),O1=n(W,"LI",{});var b8e=s(O1);nfe=n(b8e,"STRONG",{});var yct=s(nfe);DAo=r(yct,"xlm-prophetnet"),yct.forEach(t),GAo=r(b8e," \u2014 "),SD=n(b8e,"A",{href:!0});var xct=s(SD);OAo=r(xct,"XLMProphetNetForCausalLM"),xct.forEach(t),VAo=r(b8e," (XLM-ProphetNet model)"),b8e.forEach(t),XAo=i(W),V1=n(W,"LI",{});var v8e=s(V1);sfe=n(v8e,"STRONG",{});var $ct=s(sfe);zAo=r($ct,"xlm-roberta"),$ct.forEach(t),WAo=r(v8e," \u2014 "),RD=n(v8e,"A",{href:!0});var kct=s(RD);QAo=r(kct,"XLMRobertaForCausalLM"),kct.forEach(t),HAo=r(v8e," (XLM-RoBERTa model)"),v8e.forEach(t),UAo=i(W),X1=n(W,"LI",{});var F8e=s(X1);lfe=n(F8e,"STRONG",{});var Sct=s(lfe);JAo=r(Sct,"xlm-roberta-xl"),Sct.forEach(t),YAo=r(F8e," \u2014 "),PD=n(F8e,"A",{href:!0});var Rct=s(PD);KAo=r(Rct,"XLMRobertaXLForCausalLM"),Rct.forEach(t),ZAo=r(F8e," (XLM-RoBERTa-XL model)"),F8e.forEach(t),eLo=i(W),z1=n(W,"LI",{});var T8e=s(z1);ife=n(T8e,"STRONG",{});var Pct=s(ife);oLo=r(Pct,"xlnet"),Pct.forEach(t),rLo=r(T8e," \u2014 "),BD=n(T8e,"A",{href:!0});var Bct=s(BD);tLo=r(Bct,"XLNetLMHeadModel"),Bct.forEach(t),aLo=r(T8e," (XLNet model)"),T8e.forEach(t),W.forEach(t),nLo=i(ta),W1=n(ta,"P",{});var M8e=s(W1);sLo=r(M8e,"The model is set in evaluation mode by default using "),dfe=n(M8e,"CODE",{});var Ict=s(dfe);lLo=r(Ict,"model.eval()"),Ict.forEach(t),iLo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=n(M8e,"CODE",{});var Nct=s(cfe);dLo=r(Nct,"model.train()"),Nct.forEach(t),M8e.forEach(t),cLo=i(ta),T(Q1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Xje=i(f),Bi=n(f,"H2",{class:!0});var HGe=s(Bi);H1=n(HGe,"A",{id:!0,class:!0,href:!0});var qct=s(H1);ffe=n(qct,"SPAN",{});var jct=s(ffe);T(PA.$$.fragment,jct),jct.forEach(t),qct.forEach(t),fLo=i(HGe),mfe=n(HGe,"SPAN",{});var Dct=s(mfe);mLo=r(Dct,"AutoModelForMaskedLM"),Dct.forEach(t),HGe.forEach(t),zje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(BA.$$.fragment,zs),gLo=i(zs),Ii=n(zs,"P",{});var dee=s(Ii);hLo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ID=n(dee,"A",{href:!0});var Gct=s(ID);pLo=r(Gct,"from_pretrained()"),Gct.forEach(t),_Lo=r(dee," class method or the "),ND=n(dee,"A",{href:!0});var Oct=s(ND);uLo=r(Oct,"from_config()"),Oct.forEach(t),bLo=r(dee,` class
method.`),dee.forEach(t),vLo=i(zs),IA=n(zs,"P",{});var UGe=s(IA);FLo=r(UGe,"This class cannot be instantiated directly using "),gfe=n(UGe,"CODE",{});var Vct=s(gfe);TLo=r(Vct,"__init__()"),Vct.forEach(t),MLo=r(UGe," (throws an error)."),UGe.forEach(t),ELo=i(zs),st=n(zs,"DIV",{class:!0});var t0=s(st);T(NA.$$.fragment,t0),CLo=i(t0),hfe=n(t0,"P",{});var Xct=s(hfe);wLo=r(Xct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xct.forEach(t),ALo=i(t0),Ni=n(t0,"P",{});var cee=s(Ni);LLo=r(cee,`Note:
Loading a model from its configuration file does `),pfe=n(cee,"STRONG",{});var zct=s(pfe);yLo=r(zct,"not"),zct.forEach(t),xLo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(cee,"A",{href:!0});var Wct=s(qD);$Lo=r(Wct,"from_pretrained()"),Wct.forEach(t),kLo=r(cee," to load the model weights."),cee.forEach(t),SLo=i(t0),T(U1.$$.fragment,t0),t0.forEach(t),RLo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(qA.$$.fragment,aa),PLo=i(aa),_fe=n(aa,"P",{});var Qct=s(_fe);BLo=r(Qct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qct.forEach(t),ILo=i(aa),ka=n(aa,"P",{});var a0=s(ka);NLo=r(a0,"The model class to instantiate is selected based on the "),ufe=n(a0,"CODE",{});var Hct=s(ufe);qLo=r(Hct,"model_type"),Hct.forEach(t),jLo=r(a0,` property of the config object (either
passed as an argument or loaded from `),bfe=n(a0,"CODE",{});var Uct=s(bfe);DLo=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),GLo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(a0,"CODE",{});var Jct=s(vfe);OLo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),VLo=r(a0,":"),a0.forEach(t),XLo=i(aa),Q=n(aa,"UL",{});var U=s(Q);J1=n(U,"LI",{});var E8e=s(J1);Ffe=n(E8e,"STRONG",{});var Yct=s(Ffe);zLo=r(Yct,"albert"),Yct.forEach(t),WLo=r(E8e," \u2014 "),jD=n(E8e,"A",{href:!0});var Kct=s(jD);QLo=r(Kct,"AlbertForMaskedLM"),Kct.forEach(t),HLo=r(E8e," (ALBERT model)"),E8e.forEach(t),ULo=i(U),Y1=n(U,"LI",{});var C8e=s(Y1);Tfe=n(C8e,"STRONG",{});var Zct=s(Tfe);JLo=r(Zct,"bart"),Zct.forEach(t),YLo=r(C8e," \u2014 "),DD=n(C8e,"A",{href:!0});var eft=s(DD);KLo=r(eft,"BartForConditionalGeneration"),eft.forEach(t),ZLo=r(C8e," (BART model)"),C8e.forEach(t),eyo=i(U),K1=n(U,"LI",{});var w8e=s(K1);Mfe=n(w8e,"STRONG",{});var oft=s(Mfe);oyo=r(oft,"bert"),oft.forEach(t),ryo=r(w8e," \u2014 "),GD=n(w8e,"A",{href:!0});var rft=s(GD);tyo=r(rft,"BertForMaskedLM"),rft.forEach(t),ayo=r(w8e," (BERT model)"),w8e.forEach(t),nyo=i(U),Z1=n(U,"LI",{});var A8e=s(Z1);Efe=n(A8e,"STRONG",{});var tft=s(Efe);syo=r(tft,"big_bird"),tft.forEach(t),lyo=r(A8e," \u2014 "),OD=n(A8e,"A",{href:!0});var aft=s(OD);iyo=r(aft,"BigBirdForMaskedLM"),aft.forEach(t),dyo=r(A8e," (BigBird model)"),A8e.forEach(t),cyo=i(U),eb=n(U,"LI",{});var L8e=s(eb);Cfe=n(L8e,"STRONG",{});var nft=s(Cfe);fyo=r(nft,"camembert"),nft.forEach(t),myo=r(L8e," \u2014 "),VD=n(L8e,"A",{href:!0});var sft=s(VD);gyo=r(sft,"CamembertForMaskedLM"),sft.forEach(t),hyo=r(L8e," (CamemBERT model)"),L8e.forEach(t),pyo=i(U),ob=n(U,"LI",{});var y8e=s(ob);wfe=n(y8e,"STRONG",{});var lft=s(wfe);_yo=r(lft,"convbert"),lft.forEach(t),uyo=r(y8e," \u2014 "),XD=n(y8e,"A",{href:!0});var ift=s(XD);byo=r(ift,"ConvBertForMaskedLM"),ift.forEach(t),vyo=r(y8e," (ConvBERT model)"),y8e.forEach(t),Fyo=i(U),rb=n(U,"LI",{});var x8e=s(rb);Afe=n(x8e,"STRONG",{});var dft=s(Afe);Tyo=r(dft,"data2vec-text"),dft.forEach(t),Myo=r(x8e," \u2014 "),zD=n(x8e,"A",{href:!0});var cft=s(zD);Eyo=r(cft,"Data2VecTextForMaskedLM"),cft.forEach(t),Cyo=r(x8e," (Data2VecText model)"),x8e.forEach(t),wyo=i(U),tb=n(U,"LI",{});var $8e=s(tb);Lfe=n($8e,"STRONG",{});var fft=s(Lfe);Ayo=r(fft,"deberta"),fft.forEach(t),Lyo=r($8e," \u2014 "),WD=n($8e,"A",{href:!0});var mft=s(WD);yyo=r(mft,"DebertaForMaskedLM"),mft.forEach(t),xyo=r($8e," (DeBERTa model)"),$8e.forEach(t),$yo=i(U),ab=n(U,"LI",{});var k8e=s(ab);yfe=n(k8e,"STRONG",{});var gft=s(yfe);kyo=r(gft,"deberta-v2"),gft.forEach(t),Syo=r(k8e," \u2014 "),QD=n(k8e,"A",{href:!0});var hft=s(QD);Ryo=r(hft,"DebertaV2ForMaskedLM"),hft.forEach(t),Pyo=r(k8e," (DeBERTa-v2 model)"),k8e.forEach(t),Byo=i(U),nb=n(U,"LI",{});var S8e=s(nb);xfe=n(S8e,"STRONG",{});var pft=s(xfe);Iyo=r(pft,"distilbert"),pft.forEach(t),Nyo=r(S8e," \u2014 "),HD=n(S8e,"A",{href:!0});var _ft=s(HD);qyo=r(_ft,"DistilBertForMaskedLM"),_ft.forEach(t),jyo=r(S8e," (DistilBERT model)"),S8e.forEach(t),Dyo=i(U),sb=n(U,"LI",{});var R8e=s(sb);$fe=n(R8e,"STRONG",{});var uft=s($fe);Gyo=r(uft,"electra"),uft.forEach(t),Oyo=r(R8e," \u2014 "),UD=n(R8e,"A",{href:!0});var bft=s(UD);Vyo=r(bft,"ElectraForMaskedLM"),bft.forEach(t),Xyo=r(R8e," (ELECTRA model)"),R8e.forEach(t),zyo=i(U),lb=n(U,"LI",{});var P8e=s(lb);kfe=n(P8e,"STRONG",{});var vft=s(kfe);Wyo=r(vft,"flaubert"),vft.forEach(t),Qyo=r(P8e," \u2014 "),JD=n(P8e,"A",{href:!0});var Fft=s(JD);Hyo=r(Fft,"FlaubertWithLMHeadModel"),Fft.forEach(t),Uyo=r(P8e," (FlauBERT model)"),P8e.forEach(t),Jyo=i(U),ib=n(U,"LI",{});var B8e=s(ib);Sfe=n(B8e,"STRONG",{});var Tft=s(Sfe);Yyo=r(Tft,"fnet"),Tft.forEach(t),Kyo=r(B8e," \u2014 "),YD=n(B8e,"A",{href:!0});var Mft=s(YD);Zyo=r(Mft,"FNetForMaskedLM"),Mft.forEach(t),e8o=r(B8e," (FNet model)"),B8e.forEach(t),o8o=i(U),db=n(U,"LI",{});var I8e=s(db);Rfe=n(I8e,"STRONG",{});var Eft=s(Rfe);r8o=r(Eft,"funnel"),Eft.forEach(t),t8o=r(I8e," \u2014 "),KD=n(I8e,"A",{href:!0});var Cft=s(KD);a8o=r(Cft,"FunnelForMaskedLM"),Cft.forEach(t),n8o=r(I8e," (Funnel Transformer model)"),I8e.forEach(t),s8o=i(U),cb=n(U,"LI",{});var N8e=s(cb);Pfe=n(N8e,"STRONG",{});var wft=s(Pfe);l8o=r(wft,"ibert"),wft.forEach(t),i8o=r(N8e," \u2014 "),ZD=n(N8e,"A",{href:!0});var Aft=s(ZD);d8o=r(Aft,"IBertForMaskedLM"),Aft.forEach(t),c8o=r(N8e," (I-BERT model)"),N8e.forEach(t),f8o=i(U),fb=n(U,"LI",{});var q8e=s(fb);Bfe=n(q8e,"STRONG",{});var Lft=s(Bfe);m8o=r(Lft,"layoutlm"),Lft.forEach(t),g8o=r(q8e," \u2014 "),eG=n(q8e,"A",{href:!0});var yft=s(eG);h8o=r(yft,"LayoutLMForMaskedLM"),yft.forEach(t),p8o=r(q8e," (LayoutLM model)"),q8e.forEach(t),_8o=i(U),mb=n(U,"LI",{});var j8e=s(mb);Ife=n(j8e,"STRONG",{});var xft=s(Ife);u8o=r(xft,"longformer"),xft.forEach(t),b8o=r(j8e," \u2014 "),oG=n(j8e,"A",{href:!0});var $ft=s(oG);v8o=r($ft,"LongformerForMaskedLM"),$ft.forEach(t),F8o=r(j8e," (Longformer model)"),j8e.forEach(t),T8o=i(U),gb=n(U,"LI",{});var D8e=s(gb);Nfe=n(D8e,"STRONG",{});var kft=s(Nfe);M8o=r(kft,"luke"),kft.forEach(t),E8o=r(D8e," \u2014 "),rG=n(D8e,"A",{href:!0});var Sft=s(rG);C8o=r(Sft,"LukeForMaskedLM"),Sft.forEach(t),w8o=r(D8e," (LUKE model)"),D8e.forEach(t),A8o=i(U),hb=n(U,"LI",{});var G8e=s(hb);qfe=n(G8e,"STRONG",{});var Rft=s(qfe);L8o=r(Rft,"mbart"),Rft.forEach(t),y8o=r(G8e," \u2014 "),tG=n(G8e,"A",{href:!0});var Pft=s(tG);x8o=r(Pft,"MBartForConditionalGeneration"),Pft.forEach(t),$8o=r(G8e," (mBART model)"),G8e.forEach(t),k8o=i(U),pb=n(U,"LI",{});var O8e=s(pb);jfe=n(O8e,"STRONG",{});var Bft=s(jfe);S8o=r(Bft,"megatron-bert"),Bft.forEach(t),R8o=r(O8e," \u2014 "),aG=n(O8e,"A",{href:!0});var Ift=s(aG);P8o=r(Ift,"MegatronBertForMaskedLM"),Ift.forEach(t),B8o=r(O8e," (Megatron-BERT model)"),O8e.forEach(t),I8o=i(U),_b=n(U,"LI",{});var V8e=s(_b);Dfe=n(V8e,"STRONG",{});var Nft=s(Dfe);N8o=r(Nft,"mobilebert"),Nft.forEach(t),q8o=r(V8e," \u2014 "),nG=n(V8e,"A",{href:!0});var qft=s(nG);j8o=r(qft,"MobileBertForMaskedLM"),qft.forEach(t),D8o=r(V8e," (MobileBERT model)"),V8e.forEach(t),G8o=i(U),ub=n(U,"LI",{});var X8e=s(ub);Gfe=n(X8e,"STRONG",{});var jft=s(Gfe);O8o=r(jft,"mpnet"),jft.forEach(t),V8o=r(X8e," \u2014 "),sG=n(X8e,"A",{href:!0});var Dft=s(sG);X8o=r(Dft,"MPNetForMaskedLM"),Dft.forEach(t),z8o=r(X8e," (MPNet model)"),X8e.forEach(t),W8o=i(U),bb=n(U,"LI",{});var z8e=s(bb);Ofe=n(z8e,"STRONG",{});var Gft=s(Ofe);Q8o=r(Gft,"nystromformer"),Gft.forEach(t),H8o=r(z8e," \u2014 "),lG=n(z8e,"A",{href:!0});var Oft=s(lG);U8o=r(Oft,"NystromformerForMaskedLM"),Oft.forEach(t),J8o=r(z8e," (Nystr\xF6mformer model)"),z8e.forEach(t),Y8o=i(U),vb=n(U,"LI",{});var W8e=s(vb);Vfe=n(W8e,"STRONG",{});var Vft=s(Vfe);K8o=r(Vft,"perceiver"),Vft.forEach(t),Z8o=r(W8e," \u2014 "),iG=n(W8e,"A",{href:!0});var Xft=s(iG);exo=r(Xft,"PerceiverForMaskedLM"),Xft.forEach(t),oxo=r(W8e," (Perceiver model)"),W8e.forEach(t),rxo=i(U),Fb=n(U,"LI",{});var Q8e=s(Fb);Xfe=n(Q8e,"STRONG",{});var zft=s(Xfe);txo=r(zft,"qdqbert"),zft.forEach(t),axo=r(Q8e," \u2014 "),dG=n(Q8e,"A",{href:!0});var Wft=s(dG);nxo=r(Wft,"QDQBertForMaskedLM"),Wft.forEach(t),sxo=r(Q8e," (QDQBert model)"),Q8e.forEach(t),lxo=i(U),Tb=n(U,"LI",{});var H8e=s(Tb);zfe=n(H8e,"STRONG",{});var Qft=s(zfe);ixo=r(Qft,"reformer"),Qft.forEach(t),dxo=r(H8e," \u2014 "),cG=n(H8e,"A",{href:!0});var Hft=s(cG);cxo=r(Hft,"ReformerForMaskedLM"),Hft.forEach(t),fxo=r(H8e," (Reformer model)"),H8e.forEach(t),mxo=i(U),Mb=n(U,"LI",{});var U8e=s(Mb);Wfe=n(U8e,"STRONG",{});var Uft=s(Wfe);gxo=r(Uft,"rembert"),Uft.forEach(t),hxo=r(U8e," \u2014 "),fG=n(U8e,"A",{href:!0});var Jft=s(fG);pxo=r(Jft,"RemBertForMaskedLM"),Jft.forEach(t),_xo=r(U8e," (RemBERT model)"),U8e.forEach(t),uxo=i(U),Eb=n(U,"LI",{});var J8e=s(Eb);Qfe=n(J8e,"STRONG",{});var Yft=s(Qfe);bxo=r(Yft,"roberta"),Yft.forEach(t),vxo=r(J8e," \u2014 "),mG=n(J8e,"A",{href:!0});var Kft=s(mG);Fxo=r(Kft,"RobertaForMaskedLM"),Kft.forEach(t),Txo=r(J8e," (RoBERTa model)"),J8e.forEach(t),Mxo=i(U),Cb=n(U,"LI",{});var Y8e=s(Cb);Hfe=n(Y8e,"STRONG",{});var Zft=s(Hfe);Exo=r(Zft,"roformer"),Zft.forEach(t),Cxo=r(Y8e," \u2014 "),gG=n(Y8e,"A",{href:!0});var emt=s(gG);wxo=r(emt,"RoFormerForMaskedLM"),emt.forEach(t),Axo=r(Y8e," (RoFormer model)"),Y8e.forEach(t),Lxo=i(U),wb=n(U,"LI",{});var K8e=s(wb);Ufe=n(K8e,"STRONG",{});var omt=s(Ufe);yxo=r(omt,"squeezebert"),omt.forEach(t),xxo=r(K8e," \u2014 "),hG=n(K8e,"A",{href:!0});var rmt=s(hG);$xo=r(rmt,"SqueezeBertForMaskedLM"),rmt.forEach(t),kxo=r(K8e," (SqueezeBERT model)"),K8e.forEach(t),Sxo=i(U),Ab=n(U,"LI",{});var Z8e=s(Ab);Jfe=n(Z8e,"STRONG",{});var tmt=s(Jfe);Rxo=r(tmt,"tapas"),tmt.forEach(t),Pxo=r(Z8e," \u2014 "),pG=n(Z8e,"A",{href:!0});var amt=s(pG);Bxo=r(amt,"TapasForMaskedLM"),amt.forEach(t),Ixo=r(Z8e," (TAPAS model)"),Z8e.forEach(t),Nxo=i(U),Lb=n(U,"LI",{});var exe=s(Lb);Yfe=n(exe,"STRONG",{});var nmt=s(Yfe);qxo=r(nmt,"wav2vec2"),nmt.forEach(t),jxo=r(exe," \u2014 "),Kfe=n(exe,"CODE",{});var smt=s(Kfe);Dxo=r(smt,"Wav2Vec2ForMaskedLM"),smt.forEach(t),Gxo=r(exe," (Wav2Vec2 model)"),exe.forEach(t),Oxo=i(U),yb=n(U,"LI",{});var oxe=s(yb);Zfe=n(oxe,"STRONG",{});var lmt=s(Zfe);Vxo=r(lmt,"xlm"),lmt.forEach(t),Xxo=r(oxe," \u2014 "),_G=n(oxe,"A",{href:!0});var imt=s(_G);zxo=r(imt,"XLMWithLMHeadModel"),imt.forEach(t),Wxo=r(oxe," (XLM model)"),oxe.forEach(t),Qxo=i(U),xb=n(U,"LI",{});var rxe=s(xb);eme=n(rxe,"STRONG",{});var dmt=s(eme);Hxo=r(dmt,"xlm-roberta"),dmt.forEach(t),Uxo=r(rxe," \u2014 "),uG=n(rxe,"A",{href:!0});var cmt=s(uG);Jxo=r(cmt,"XLMRobertaForMaskedLM"),cmt.forEach(t),Yxo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),Kxo=i(U),$b=n(U,"LI",{});var txe=s($b);ome=n(txe,"STRONG",{});var fmt=s(ome);Zxo=r(fmt,"xlm-roberta-xl"),fmt.forEach(t),e$o=r(txe," \u2014 "),bG=n(txe,"A",{href:!0});var mmt=s(bG);o$o=r(mmt,"XLMRobertaXLForMaskedLM"),mmt.forEach(t),r$o=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),t$o=i(U),kb=n(U,"LI",{});var axe=s(kb);rme=n(axe,"STRONG",{});var gmt=s(rme);a$o=r(gmt,"yoso"),gmt.forEach(t),n$o=r(axe," \u2014 "),vG=n(axe,"A",{href:!0});var hmt=s(vG);s$o=r(hmt,"YosoForMaskedLM"),hmt.forEach(t),l$o=r(axe," (YOSO model)"),axe.forEach(t),U.forEach(t),i$o=i(aa),Sb=n(aa,"P",{});var nxe=s(Sb);d$o=r(nxe,"The model is set in evaluation mode by default using "),tme=n(nxe,"CODE",{});var pmt=s(tme);c$o=r(pmt,"model.eval()"),pmt.forEach(t),f$o=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(nxe,"CODE",{});var _mt=s(ame);m$o=r(_mt,"model.train()"),_mt.forEach(t),nxe.forEach(t),g$o=i(aa),T(Rb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Wje=i(f),qi=n(f,"H2",{class:!0});var JGe=s(qi);Pb=n(JGe,"A",{id:!0,class:!0,href:!0});var umt=s(Pb);nme=n(umt,"SPAN",{});var bmt=s(nme);T(jA.$$.fragment,bmt),bmt.forEach(t),umt.forEach(t),h$o=i(JGe),sme=n(JGe,"SPAN",{});var vmt=s(sme);p$o=r(vmt,"AutoModelForSeq2SeqLM"),vmt.forEach(t),JGe.forEach(t),Qje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(DA.$$.fragment,Ws),_$o=i(Ws),ji=n(Ws,"P",{});var fee=s(ji);u$o=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FG=n(fee,"A",{href:!0});var Fmt=s(FG);b$o=r(Fmt,"from_pretrained()"),Fmt.forEach(t),v$o=r(fee," class method or the "),TG=n(fee,"A",{href:!0});var Tmt=s(TG);F$o=r(Tmt,"from_config()"),Tmt.forEach(t),T$o=r(fee,` class
method.`),fee.forEach(t),M$o=i(Ws),GA=n(Ws,"P",{});var YGe=s(GA);E$o=r(YGe,"This class cannot be instantiated directly using "),lme=n(YGe,"CODE",{});var Mmt=s(lme);C$o=r(Mmt,"__init__()"),Mmt.forEach(t),w$o=r(YGe," (throws an error)."),YGe.forEach(t),A$o=i(Ws),lt=n(Ws,"DIV",{class:!0});var n0=s(lt);T(OA.$$.fragment,n0),L$o=i(n0),ime=n(n0,"P",{});var Emt=s(ime);y$o=r(Emt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Emt.forEach(t),x$o=i(n0),Di=n(n0,"P",{});var mee=s(Di);$$o=r(mee,`Note:
Loading a model from its configuration file does `),dme=n(mee,"STRONG",{});var Cmt=s(dme);k$o=r(Cmt,"not"),Cmt.forEach(t),S$o=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(mee,"A",{href:!0});var wmt=s(MG);R$o=r(wmt,"from_pretrained()"),wmt.forEach(t),P$o=r(mee," to load the model weights."),mee.forEach(t),B$o=i(n0),T(Bb.$$.fragment,n0),n0.forEach(t),I$o=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(VA.$$.fragment,na),N$o=i(na),cme=n(na,"P",{});var Amt=s(cme);q$o=r(Amt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Amt.forEach(t),j$o=i(na),Sa=n(na,"P",{});var s0=s(Sa);D$o=r(s0,"The model class to instantiate is selected based on the "),fme=n(s0,"CODE",{});var Lmt=s(fme);G$o=r(Lmt,"model_type"),Lmt.forEach(t),O$o=r(s0,` property of the config object (either
passed as an argument or loaded from `),mme=n(s0,"CODE",{});var ymt=s(mme);V$o=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),X$o=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(s0,"CODE",{});var xmt=s(gme);z$o=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),W$o=r(s0,":"),s0.forEach(t),Q$o=i(na),_e=n(na,"UL",{});var Fe=s(_e);Ib=n(Fe,"LI",{});var sxe=s(Ib);hme=n(sxe,"STRONG",{});var $mt=s(hme);H$o=r($mt,"bart"),$mt.forEach(t),U$o=r(sxe," \u2014 "),EG=n(sxe,"A",{href:!0});var kmt=s(EG);J$o=r(kmt,"BartForConditionalGeneration"),kmt.forEach(t),Y$o=r(sxe," (BART model)"),sxe.forEach(t),K$o=i(Fe),Nb=n(Fe,"LI",{});var lxe=s(Nb);pme=n(lxe,"STRONG",{});var Smt=s(pme);Z$o=r(Smt,"bigbird_pegasus"),Smt.forEach(t),eko=r(lxe," \u2014 "),CG=n(lxe,"A",{href:!0});var Rmt=s(CG);oko=r(Rmt,"BigBirdPegasusForConditionalGeneration"),Rmt.forEach(t),rko=r(lxe," (BigBird-Pegasus model)"),lxe.forEach(t),tko=i(Fe),qb=n(Fe,"LI",{});var ixe=s(qb);_me=n(ixe,"STRONG",{});var Pmt=s(_me);ako=r(Pmt,"blenderbot"),Pmt.forEach(t),nko=r(ixe," \u2014 "),wG=n(ixe,"A",{href:!0});var Bmt=s(wG);sko=r(Bmt,"BlenderbotForConditionalGeneration"),Bmt.forEach(t),lko=r(ixe," (Blenderbot model)"),ixe.forEach(t),iko=i(Fe),jb=n(Fe,"LI",{});var dxe=s(jb);ume=n(dxe,"STRONG",{});var Imt=s(ume);dko=r(Imt,"blenderbot-small"),Imt.forEach(t),cko=r(dxe," \u2014 "),AG=n(dxe,"A",{href:!0});var Nmt=s(AG);fko=r(Nmt,"BlenderbotSmallForConditionalGeneration"),Nmt.forEach(t),mko=r(dxe," (BlenderbotSmall model)"),dxe.forEach(t),gko=i(Fe),Db=n(Fe,"LI",{});var cxe=s(Db);bme=n(cxe,"STRONG",{});var qmt=s(bme);hko=r(qmt,"encoder-decoder"),qmt.forEach(t),pko=r(cxe," \u2014 "),LG=n(cxe,"A",{href:!0});var jmt=s(LG);_ko=r(jmt,"EncoderDecoderModel"),jmt.forEach(t),uko=r(cxe," (Encoder decoder model)"),cxe.forEach(t),bko=i(Fe),Gb=n(Fe,"LI",{});var fxe=s(Gb);vme=n(fxe,"STRONG",{});var Dmt=s(vme);vko=r(Dmt,"fsmt"),Dmt.forEach(t),Fko=r(fxe," \u2014 "),yG=n(fxe,"A",{href:!0});var Gmt=s(yG);Tko=r(Gmt,"FSMTForConditionalGeneration"),Gmt.forEach(t),Mko=r(fxe," (FairSeq Machine-Translation model)"),fxe.forEach(t),Eko=i(Fe),Ob=n(Fe,"LI",{});var mxe=s(Ob);Fme=n(mxe,"STRONG",{});var Omt=s(Fme);Cko=r(Omt,"led"),Omt.forEach(t),wko=r(mxe," \u2014 "),xG=n(mxe,"A",{href:!0});var Vmt=s(xG);Ako=r(Vmt,"LEDForConditionalGeneration"),Vmt.forEach(t),Lko=r(mxe," (LED model)"),mxe.forEach(t),yko=i(Fe),Vb=n(Fe,"LI",{});var gxe=s(Vb);Tme=n(gxe,"STRONG",{});var Xmt=s(Tme);xko=r(Xmt,"m2m_100"),Xmt.forEach(t),$ko=r(gxe," \u2014 "),$G=n(gxe,"A",{href:!0});var zmt=s($G);kko=r(zmt,"M2M100ForConditionalGeneration"),zmt.forEach(t),Sko=r(gxe," (M2M100 model)"),gxe.forEach(t),Rko=i(Fe),Xb=n(Fe,"LI",{});var hxe=s(Xb);Mme=n(hxe,"STRONG",{});var Wmt=s(Mme);Pko=r(Wmt,"marian"),Wmt.forEach(t),Bko=r(hxe," \u2014 "),kG=n(hxe,"A",{href:!0});var Qmt=s(kG);Iko=r(Qmt,"MarianMTModel"),Qmt.forEach(t),Nko=r(hxe," (Marian model)"),hxe.forEach(t),qko=i(Fe),zb=n(Fe,"LI",{});var pxe=s(zb);Eme=n(pxe,"STRONG",{});var Hmt=s(Eme);jko=r(Hmt,"mbart"),Hmt.forEach(t),Dko=r(pxe," \u2014 "),SG=n(pxe,"A",{href:!0});var Umt=s(SG);Gko=r(Umt,"MBartForConditionalGeneration"),Umt.forEach(t),Oko=r(pxe," (mBART model)"),pxe.forEach(t),Vko=i(Fe),Wb=n(Fe,"LI",{});var _xe=s(Wb);Cme=n(_xe,"STRONG",{});var Jmt=s(Cme);Xko=r(Jmt,"mt5"),Jmt.forEach(t),zko=r(_xe," \u2014 "),RG=n(_xe,"A",{href:!0});var Ymt=s(RG);Wko=r(Ymt,"MT5ForConditionalGeneration"),Ymt.forEach(t),Qko=r(_xe," (MT5 model)"),_xe.forEach(t),Hko=i(Fe),Qb=n(Fe,"LI",{});var uxe=s(Qb);wme=n(uxe,"STRONG",{});var Kmt=s(wme);Uko=r(Kmt,"pegasus"),Kmt.forEach(t),Jko=r(uxe," \u2014 "),PG=n(uxe,"A",{href:!0});var Zmt=s(PG);Yko=r(Zmt,"PegasusForConditionalGeneration"),Zmt.forEach(t),Kko=r(uxe," (Pegasus model)"),uxe.forEach(t),Zko=i(Fe),Hb=n(Fe,"LI",{});var bxe=s(Hb);Ame=n(bxe,"STRONG",{});var egt=s(Ame);eSo=r(egt,"plbart"),egt.forEach(t),oSo=r(bxe," \u2014 "),BG=n(bxe,"A",{href:!0});var ogt=s(BG);rSo=r(ogt,"PLBartForConditionalGeneration"),ogt.forEach(t),tSo=r(bxe," (PLBart model)"),bxe.forEach(t),aSo=i(Fe),Ub=n(Fe,"LI",{});var vxe=s(Ub);Lme=n(vxe,"STRONG",{});var rgt=s(Lme);nSo=r(rgt,"prophetnet"),rgt.forEach(t),sSo=r(vxe," \u2014 "),IG=n(vxe,"A",{href:!0});var tgt=s(IG);lSo=r(tgt,"ProphetNetForConditionalGeneration"),tgt.forEach(t),iSo=r(vxe," (ProphetNet model)"),vxe.forEach(t),dSo=i(Fe),Jb=n(Fe,"LI",{});var Fxe=s(Jb);yme=n(Fxe,"STRONG",{});var agt=s(yme);cSo=r(agt,"t5"),agt.forEach(t),fSo=r(Fxe," \u2014 "),NG=n(Fxe,"A",{href:!0});var ngt=s(NG);mSo=r(ngt,"T5ForConditionalGeneration"),ngt.forEach(t),gSo=r(Fxe," (T5 model)"),Fxe.forEach(t),hSo=i(Fe),Yb=n(Fe,"LI",{});var Txe=s(Yb);xme=n(Txe,"STRONG",{});var sgt=s(xme);pSo=r(sgt,"xlm-prophetnet"),sgt.forEach(t),_So=r(Txe," \u2014 "),qG=n(Txe,"A",{href:!0});var lgt=s(qG);uSo=r(lgt,"XLMProphetNetForConditionalGeneration"),lgt.forEach(t),bSo=r(Txe," (XLM-ProphetNet model)"),Txe.forEach(t),Fe.forEach(t),vSo=i(na),Kb=n(na,"P",{});var Mxe=s(Kb);FSo=r(Mxe,"The model is set in evaluation mode by default using "),$me=n(Mxe,"CODE",{});var igt=s($me);TSo=r(igt,"model.eval()"),igt.forEach(t),MSo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(Mxe,"CODE",{});var dgt=s(kme);ESo=r(dgt,"model.train()"),dgt.forEach(t),Mxe.forEach(t),CSo=i(na),T(Zb.$$.fragment,na),na.forEach(t),Ws.forEach(t),Hje=i(f),Gi=n(f,"H2",{class:!0});var KGe=s(Gi);e2=n(KGe,"A",{id:!0,class:!0,href:!0});var cgt=s(e2);Sme=n(cgt,"SPAN",{});var fgt=s(Sme);T(XA.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),wSo=i(KGe),Rme=n(KGe,"SPAN",{});var mgt=s(Rme);ASo=r(mgt,"AutoModelForSequenceClassification"),mgt.forEach(t),KGe.forEach(t),Uje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(zA.$$.fragment,Qs),LSo=i(Qs),Oi=n(Qs,"P",{});var gee=s(Oi);ySo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jG=n(gee,"A",{href:!0});var ggt=s(jG);xSo=r(ggt,"from_pretrained()"),ggt.forEach(t),$So=r(gee," class method or the "),DG=n(gee,"A",{href:!0});var hgt=s(DG);kSo=r(hgt,"from_config()"),hgt.forEach(t),SSo=r(gee,` class
method.`),gee.forEach(t),RSo=i(Qs),WA=n(Qs,"P",{});var ZGe=s(WA);PSo=r(ZGe,"This class cannot be instantiated directly using "),Pme=n(ZGe,"CODE",{});var pgt=s(Pme);BSo=r(pgt,"__init__()"),pgt.forEach(t),ISo=r(ZGe," (throws an error)."),ZGe.forEach(t),NSo=i(Qs),it=n(Qs,"DIV",{class:!0});var l0=s(it);T(QA.$$.fragment,l0),qSo=i(l0),Bme=n(l0,"P",{});var _gt=s(Bme);jSo=r(_gt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_gt.forEach(t),DSo=i(l0),Vi=n(l0,"P",{});var hee=s(Vi);GSo=r(hee,`Note:
Loading a model from its configuration file does `),Ime=n(hee,"STRONG",{});var ugt=s(Ime);OSo=r(ugt,"not"),ugt.forEach(t),VSo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(hee,"A",{href:!0});var bgt=s(GG);XSo=r(bgt,"from_pretrained()"),bgt.forEach(t),zSo=r(hee," to load the model weights."),hee.forEach(t),WSo=i(l0),T(o2.$$.fragment,l0),l0.forEach(t),QSo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(HA.$$.fragment,sa),HSo=i(sa),Nme=n(sa,"P",{});var vgt=s(Nme);USo=r(vgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vgt.forEach(t),JSo=i(sa),Ra=n(sa,"P",{});var i0=s(Ra);YSo=r(i0,"The model class to instantiate is selected based on the "),qme=n(i0,"CODE",{});var Fgt=s(qme);KSo=r(Fgt,"model_type"),Fgt.forEach(t),ZSo=r(i0,` property of the config object (either
passed as an argument or loaded from `),jme=n(i0,"CODE",{});var Tgt=s(jme);eRo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),oRo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(i0,"CODE",{});var Mgt=s(Dme);rRo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),tRo=r(i0,":"),i0.forEach(t),aRo=i(sa),N=n(sa,"UL",{});var j=s(N);r2=n(j,"LI",{});var Exe=s(r2);Gme=n(Exe,"STRONG",{});var Egt=s(Gme);nRo=r(Egt,"albert"),Egt.forEach(t),sRo=r(Exe," \u2014 "),OG=n(Exe,"A",{href:!0});var Cgt=s(OG);lRo=r(Cgt,"AlbertForSequenceClassification"),Cgt.forEach(t),iRo=r(Exe," (ALBERT model)"),Exe.forEach(t),dRo=i(j),t2=n(j,"LI",{});var Cxe=s(t2);Ome=n(Cxe,"STRONG",{});var wgt=s(Ome);cRo=r(wgt,"bart"),wgt.forEach(t),fRo=r(Cxe," \u2014 "),VG=n(Cxe,"A",{href:!0});var Agt=s(VG);mRo=r(Agt,"BartForSequenceClassification"),Agt.forEach(t),gRo=r(Cxe," (BART model)"),Cxe.forEach(t),hRo=i(j),a2=n(j,"LI",{});var wxe=s(a2);Vme=n(wxe,"STRONG",{});var Lgt=s(Vme);pRo=r(Lgt,"bert"),Lgt.forEach(t),_Ro=r(wxe," \u2014 "),XG=n(wxe,"A",{href:!0});var ygt=s(XG);uRo=r(ygt,"BertForSequenceClassification"),ygt.forEach(t),bRo=r(wxe," (BERT model)"),wxe.forEach(t),vRo=i(j),n2=n(j,"LI",{});var Axe=s(n2);Xme=n(Axe,"STRONG",{});var xgt=s(Xme);FRo=r(xgt,"big_bird"),xgt.forEach(t),TRo=r(Axe," \u2014 "),zG=n(Axe,"A",{href:!0});var $gt=s(zG);MRo=r($gt,"BigBirdForSequenceClassification"),$gt.forEach(t),ERo=r(Axe," (BigBird model)"),Axe.forEach(t),CRo=i(j),s2=n(j,"LI",{});var Lxe=s(s2);zme=n(Lxe,"STRONG",{});var kgt=s(zme);wRo=r(kgt,"bigbird_pegasus"),kgt.forEach(t),ARo=r(Lxe," \u2014 "),WG=n(Lxe,"A",{href:!0});var Sgt=s(WG);LRo=r(Sgt,"BigBirdPegasusForSequenceClassification"),Sgt.forEach(t),yRo=r(Lxe," (BigBird-Pegasus model)"),Lxe.forEach(t),xRo=i(j),l2=n(j,"LI",{});var yxe=s(l2);Wme=n(yxe,"STRONG",{});var Rgt=s(Wme);$Ro=r(Rgt,"bloom"),Rgt.forEach(t),kRo=r(yxe," \u2014 "),QG=n(yxe,"A",{href:!0});var Pgt=s(QG);SRo=r(Pgt,"BloomForSequenceClassification"),Pgt.forEach(t),RRo=r(yxe," (BLOOM model)"),yxe.forEach(t),PRo=i(j),i2=n(j,"LI",{});var xxe=s(i2);Qme=n(xxe,"STRONG",{});var Bgt=s(Qme);BRo=r(Bgt,"camembert"),Bgt.forEach(t),IRo=r(xxe," \u2014 "),HG=n(xxe,"A",{href:!0});var Igt=s(HG);NRo=r(Igt,"CamembertForSequenceClassification"),Igt.forEach(t),qRo=r(xxe," (CamemBERT model)"),xxe.forEach(t),jRo=i(j),d2=n(j,"LI",{});var $xe=s(d2);Hme=n($xe,"STRONG",{});var Ngt=s(Hme);DRo=r(Ngt,"canine"),Ngt.forEach(t),GRo=r($xe," \u2014 "),UG=n($xe,"A",{href:!0});var qgt=s(UG);ORo=r(qgt,"CanineForSequenceClassification"),qgt.forEach(t),VRo=r($xe," (CANINE model)"),$xe.forEach(t),XRo=i(j),c2=n(j,"LI",{});var kxe=s(c2);Ume=n(kxe,"STRONG",{});var jgt=s(Ume);zRo=r(jgt,"convbert"),jgt.forEach(t),WRo=r(kxe," \u2014 "),JG=n(kxe,"A",{href:!0});var Dgt=s(JG);QRo=r(Dgt,"ConvBertForSequenceClassification"),Dgt.forEach(t),HRo=r(kxe," (ConvBERT model)"),kxe.forEach(t),URo=i(j),f2=n(j,"LI",{});var Sxe=s(f2);Jme=n(Sxe,"STRONG",{});var Ggt=s(Jme);JRo=r(Ggt,"ctrl"),Ggt.forEach(t),YRo=r(Sxe," \u2014 "),YG=n(Sxe,"A",{href:!0});var Ogt=s(YG);KRo=r(Ogt,"CTRLForSequenceClassification"),Ogt.forEach(t),ZRo=r(Sxe," (CTRL model)"),Sxe.forEach(t),ePo=i(j),m2=n(j,"LI",{});var Rxe=s(m2);Yme=n(Rxe,"STRONG",{});var Vgt=s(Yme);oPo=r(Vgt,"data2vec-text"),Vgt.forEach(t),rPo=r(Rxe," \u2014 "),KG=n(Rxe,"A",{href:!0});var Xgt=s(KG);tPo=r(Xgt,"Data2VecTextForSequenceClassification"),Xgt.forEach(t),aPo=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),nPo=i(j),g2=n(j,"LI",{});var Pxe=s(g2);Kme=n(Pxe,"STRONG",{});var zgt=s(Kme);sPo=r(zgt,"deberta"),zgt.forEach(t),lPo=r(Pxe," \u2014 "),ZG=n(Pxe,"A",{href:!0});var Wgt=s(ZG);iPo=r(Wgt,"DebertaForSequenceClassification"),Wgt.forEach(t),dPo=r(Pxe," (DeBERTa model)"),Pxe.forEach(t),cPo=i(j),h2=n(j,"LI",{});var Bxe=s(h2);Zme=n(Bxe,"STRONG",{});var Qgt=s(Zme);fPo=r(Qgt,"deberta-v2"),Qgt.forEach(t),mPo=r(Bxe," \u2014 "),eO=n(Bxe,"A",{href:!0});var Hgt=s(eO);gPo=r(Hgt,"DebertaV2ForSequenceClassification"),Hgt.forEach(t),hPo=r(Bxe," (DeBERTa-v2 model)"),Bxe.forEach(t),pPo=i(j),p2=n(j,"LI",{});var Ixe=s(p2);ege=n(Ixe,"STRONG",{});var Ugt=s(ege);_Po=r(Ugt,"distilbert"),Ugt.forEach(t),uPo=r(Ixe," \u2014 "),oO=n(Ixe,"A",{href:!0});var Jgt=s(oO);bPo=r(Jgt,"DistilBertForSequenceClassification"),Jgt.forEach(t),vPo=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),FPo=i(j),_2=n(j,"LI",{});var Nxe=s(_2);oge=n(Nxe,"STRONG",{});var Ygt=s(oge);TPo=r(Ygt,"electra"),Ygt.forEach(t),MPo=r(Nxe," \u2014 "),rO=n(Nxe,"A",{href:!0});var Kgt=s(rO);EPo=r(Kgt,"ElectraForSequenceClassification"),Kgt.forEach(t),CPo=r(Nxe," (ELECTRA model)"),Nxe.forEach(t),wPo=i(j),u2=n(j,"LI",{});var qxe=s(u2);rge=n(qxe,"STRONG",{});var Zgt=s(rge);APo=r(Zgt,"flaubert"),Zgt.forEach(t),LPo=r(qxe," \u2014 "),tO=n(qxe,"A",{href:!0});var eht=s(tO);yPo=r(eht,"FlaubertForSequenceClassification"),eht.forEach(t),xPo=r(qxe," (FlauBERT model)"),qxe.forEach(t),$Po=i(j),b2=n(j,"LI",{});var jxe=s(b2);tge=n(jxe,"STRONG",{});var oht=s(tge);kPo=r(oht,"fnet"),oht.forEach(t),SPo=r(jxe," \u2014 "),aO=n(jxe,"A",{href:!0});var rht=s(aO);RPo=r(rht,"FNetForSequenceClassification"),rht.forEach(t),PPo=r(jxe," (FNet model)"),jxe.forEach(t),BPo=i(j),v2=n(j,"LI",{});var Dxe=s(v2);age=n(Dxe,"STRONG",{});var tht=s(age);IPo=r(tht,"funnel"),tht.forEach(t),NPo=r(Dxe," \u2014 "),nO=n(Dxe,"A",{href:!0});var aht=s(nO);qPo=r(aht,"FunnelForSequenceClassification"),aht.forEach(t),jPo=r(Dxe," (Funnel Transformer model)"),Dxe.forEach(t),DPo=i(j),F2=n(j,"LI",{});var Gxe=s(F2);nge=n(Gxe,"STRONG",{});var nht=s(nge);GPo=r(nht,"gpt2"),nht.forEach(t),OPo=r(Gxe," \u2014 "),sO=n(Gxe,"A",{href:!0});var sht=s(sO);VPo=r(sht,"GPT2ForSequenceClassification"),sht.forEach(t),XPo=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),zPo=i(j),T2=n(j,"LI",{});var Oxe=s(T2);sge=n(Oxe,"STRONG",{});var lht=s(sge);WPo=r(lht,"gpt_neo"),lht.forEach(t),QPo=r(Oxe," \u2014 "),lO=n(Oxe,"A",{href:!0});var iht=s(lO);HPo=r(iht,"GPTNeoForSequenceClassification"),iht.forEach(t),UPo=r(Oxe," (GPT Neo model)"),Oxe.forEach(t),JPo=i(j),M2=n(j,"LI",{});var Vxe=s(M2);lge=n(Vxe,"STRONG",{});var dht=s(lge);YPo=r(dht,"gptj"),dht.forEach(t),KPo=r(Vxe," \u2014 "),iO=n(Vxe,"A",{href:!0});var cht=s(iO);ZPo=r(cht,"GPTJForSequenceClassification"),cht.forEach(t),eBo=r(Vxe," (GPT-J model)"),Vxe.forEach(t),oBo=i(j),E2=n(j,"LI",{});var Xxe=s(E2);ige=n(Xxe,"STRONG",{});var fht=s(ige);rBo=r(fht,"ibert"),fht.forEach(t),tBo=r(Xxe," \u2014 "),dO=n(Xxe,"A",{href:!0});var mht=s(dO);aBo=r(mht,"IBertForSequenceClassification"),mht.forEach(t),nBo=r(Xxe," (I-BERT model)"),Xxe.forEach(t),sBo=i(j),C2=n(j,"LI",{});var zxe=s(C2);dge=n(zxe,"STRONG",{});var ght=s(dge);lBo=r(ght,"layoutlm"),ght.forEach(t),iBo=r(zxe," \u2014 "),cO=n(zxe,"A",{href:!0});var hht=s(cO);dBo=r(hht,"LayoutLMForSequenceClassification"),hht.forEach(t),cBo=r(zxe," (LayoutLM model)"),zxe.forEach(t),fBo=i(j),w2=n(j,"LI",{});var Wxe=s(w2);cge=n(Wxe,"STRONG",{});var pht=s(cge);mBo=r(pht,"layoutlmv2"),pht.forEach(t),gBo=r(Wxe," \u2014 "),fO=n(Wxe,"A",{href:!0});var _ht=s(fO);hBo=r(_ht,"LayoutLMv2ForSequenceClassification"),_ht.forEach(t),pBo=r(Wxe," (LayoutLMv2 model)"),Wxe.forEach(t),_Bo=i(j),A2=n(j,"LI",{});var Qxe=s(A2);fge=n(Qxe,"STRONG",{});var uht=s(fge);uBo=r(uht,"layoutlmv3"),uht.forEach(t),bBo=r(Qxe," \u2014 "),mO=n(Qxe,"A",{href:!0});var bht=s(mO);vBo=r(bht,"LayoutLMv3ForSequenceClassification"),bht.forEach(t),FBo=r(Qxe," (LayoutLMv3 model)"),Qxe.forEach(t),TBo=i(j),L2=n(j,"LI",{});var Hxe=s(L2);mge=n(Hxe,"STRONG",{});var vht=s(mge);MBo=r(vht,"led"),vht.forEach(t),EBo=r(Hxe," \u2014 "),gO=n(Hxe,"A",{href:!0});var Fht=s(gO);CBo=r(Fht,"LEDForSequenceClassification"),Fht.forEach(t),wBo=r(Hxe," (LED model)"),Hxe.forEach(t),ABo=i(j),y2=n(j,"LI",{});var Uxe=s(y2);gge=n(Uxe,"STRONG",{});var Tht=s(gge);LBo=r(Tht,"longformer"),Tht.forEach(t),yBo=r(Uxe," \u2014 "),hO=n(Uxe,"A",{href:!0});var Mht=s(hO);xBo=r(Mht,"LongformerForSequenceClassification"),Mht.forEach(t),$Bo=r(Uxe," (Longformer model)"),Uxe.forEach(t),kBo=i(j),x2=n(j,"LI",{});var Jxe=s(x2);hge=n(Jxe,"STRONG",{});var Eht=s(hge);SBo=r(Eht,"mbart"),Eht.forEach(t),RBo=r(Jxe," \u2014 "),pO=n(Jxe,"A",{href:!0});var Cht=s(pO);PBo=r(Cht,"MBartForSequenceClassification"),Cht.forEach(t),BBo=r(Jxe," (mBART model)"),Jxe.forEach(t),IBo=i(j),$2=n(j,"LI",{});var Yxe=s($2);pge=n(Yxe,"STRONG",{});var wht=s(pge);NBo=r(wht,"megatron-bert"),wht.forEach(t),qBo=r(Yxe," \u2014 "),_O=n(Yxe,"A",{href:!0});var Aht=s(_O);jBo=r(Aht,"MegatronBertForSequenceClassification"),Aht.forEach(t),DBo=r(Yxe," (Megatron-BERT model)"),Yxe.forEach(t),GBo=i(j),k2=n(j,"LI",{});var Kxe=s(k2);_ge=n(Kxe,"STRONG",{});var Lht=s(_ge);OBo=r(Lht,"mobilebert"),Lht.forEach(t),VBo=r(Kxe," \u2014 "),uO=n(Kxe,"A",{href:!0});var yht=s(uO);XBo=r(yht,"MobileBertForSequenceClassification"),yht.forEach(t),zBo=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),WBo=i(j),S2=n(j,"LI",{});var Zxe=s(S2);uge=n(Zxe,"STRONG",{});var xht=s(uge);QBo=r(xht,"mpnet"),xht.forEach(t),HBo=r(Zxe," \u2014 "),bO=n(Zxe,"A",{href:!0});var $ht=s(bO);UBo=r($ht,"MPNetForSequenceClassification"),$ht.forEach(t),JBo=r(Zxe," (MPNet model)"),Zxe.forEach(t),YBo=i(j),R2=n(j,"LI",{});var e$e=s(R2);bge=n(e$e,"STRONG",{});var kht=s(bge);KBo=r(kht,"nystromformer"),kht.forEach(t),ZBo=r(e$e," \u2014 "),vO=n(e$e,"A",{href:!0});var Sht=s(vO);eIo=r(Sht,"NystromformerForSequenceClassification"),Sht.forEach(t),oIo=r(e$e," (Nystr\xF6mformer model)"),e$e.forEach(t),rIo=i(j),P2=n(j,"LI",{});var o$e=s(P2);vge=n(o$e,"STRONG",{});var Rht=s(vge);tIo=r(Rht,"openai-gpt"),Rht.forEach(t),aIo=r(o$e," \u2014 "),FO=n(o$e,"A",{href:!0});var Pht=s(FO);nIo=r(Pht,"OpenAIGPTForSequenceClassification"),Pht.forEach(t),sIo=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),lIo=i(j),B2=n(j,"LI",{});var r$e=s(B2);Fge=n(r$e,"STRONG",{});var Bht=s(Fge);iIo=r(Bht,"perceiver"),Bht.forEach(t),dIo=r(r$e," \u2014 "),TO=n(r$e,"A",{href:!0});var Iht=s(TO);cIo=r(Iht,"PerceiverForSequenceClassification"),Iht.forEach(t),fIo=r(r$e," (Perceiver model)"),r$e.forEach(t),mIo=i(j),I2=n(j,"LI",{});var t$e=s(I2);Tge=n(t$e,"STRONG",{});var Nht=s(Tge);gIo=r(Nht,"plbart"),Nht.forEach(t),hIo=r(t$e," \u2014 "),MO=n(t$e,"A",{href:!0});var qht=s(MO);pIo=r(qht,"PLBartForSequenceClassification"),qht.forEach(t),_Io=r(t$e," (PLBart model)"),t$e.forEach(t),uIo=i(j),N2=n(j,"LI",{});var a$e=s(N2);Mge=n(a$e,"STRONG",{});var jht=s(Mge);bIo=r(jht,"qdqbert"),jht.forEach(t),vIo=r(a$e," \u2014 "),EO=n(a$e,"A",{href:!0});var Dht=s(EO);FIo=r(Dht,"QDQBertForSequenceClassification"),Dht.forEach(t),TIo=r(a$e," (QDQBert model)"),a$e.forEach(t),MIo=i(j),q2=n(j,"LI",{});var n$e=s(q2);Ege=n(n$e,"STRONG",{});var Ght=s(Ege);EIo=r(Ght,"reformer"),Ght.forEach(t),CIo=r(n$e," \u2014 "),CO=n(n$e,"A",{href:!0});var Oht=s(CO);wIo=r(Oht,"ReformerForSequenceClassification"),Oht.forEach(t),AIo=r(n$e," (Reformer model)"),n$e.forEach(t),LIo=i(j),j2=n(j,"LI",{});var s$e=s(j2);Cge=n(s$e,"STRONG",{});var Vht=s(Cge);yIo=r(Vht,"rembert"),Vht.forEach(t),xIo=r(s$e," \u2014 "),wO=n(s$e,"A",{href:!0});var Xht=s(wO);$Io=r(Xht,"RemBertForSequenceClassification"),Xht.forEach(t),kIo=r(s$e," (RemBERT model)"),s$e.forEach(t),SIo=i(j),D2=n(j,"LI",{});var l$e=s(D2);wge=n(l$e,"STRONG",{});var zht=s(wge);RIo=r(zht,"roberta"),zht.forEach(t),PIo=r(l$e," \u2014 "),AO=n(l$e,"A",{href:!0});var Wht=s(AO);BIo=r(Wht,"RobertaForSequenceClassification"),Wht.forEach(t),IIo=r(l$e," (RoBERTa model)"),l$e.forEach(t),NIo=i(j),G2=n(j,"LI",{});var i$e=s(G2);Age=n(i$e,"STRONG",{});var Qht=s(Age);qIo=r(Qht,"roformer"),Qht.forEach(t),jIo=r(i$e," \u2014 "),LO=n(i$e,"A",{href:!0});var Hht=s(LO);DIo=r(Hht,"RoFormerForSequenceClassification"),Hht.forEach(t),GIo=r(i$e," (RoFormer model)"),i$e.forEach(t),OIo=i(j),O2=n(j,"LI",{});var d$e=s(O2);Lge=n(d$e,"STRONG",{});var Uht=s(Lge);VIo=r(Uht,"squeezebert"),Uht.forEach(t),XIo=r(d$e," \u2014 "),yO=n(d$e,"A",{href:!0});var Jht=s(yO);zIo=r(Jht,"SqueezeBertForSequenceClassification"),Jht.forEach(t),WIo=r(d$e," (SqueezeBERT model)"),d$e.forEach(t),QIo=i(j),V2=n(j,"LI",{});var c$e=s(V2);yge=n(c$e,"STRONG",{});var Yht=s(yge);HIo=r(Yht,"tapas"),Yht.forEach(t),UIo=r(c$e," \u2014 "),xO=n(c$e,"A",{href:!0});var Kht=s(xO);JIo=r(Kht,"TapasForSequenceClassification"),Kht.forEach(t),YIo=r(c$e," (TAPAS model)"),c$e.forEach(t),KIo=i(j),X2=n(j,"LI",{});var f$e=s(X2);xge=n(f$e,"STRONG",{});var Zht=s(xge);ZIo=r(Zht,"transfo-xl"),Zht.forEach(t),eNo=r(f$e," \u2014 "),$O=n(f$e,"A",{href:!0});var ept=s($O);oNo=r(ept,"TransfoXLForSequenceClassification"),ept.forEach(t),rNo=r(f$e," (Transformer-XL model)"),f$e.forEach(t),tNo=i(j),z2=n(j,"LI",{});var m$e=s(z2);$ge=n(m$e,"STRONG",{});var opt=s($ge);aNo=r(opt,"xlm"),opt.forEach(t),nNo=r(m$e," \u2014 "),kO=n(m$e,"A",{href:!0});var rpt=s(kO);sNo=r(rpt,"XLMForSequenceClassification"),rpt.forEach(t),lNo=r(m$e," (XLM model)"),m$e.forEach(t),iNo=i(j),W2=n(j,"LI",{});var g$e=s(W2);kge=n(g$e,"STRONG",{});var tpt=s(kge);dNo=r(tpt,"xlm-roberta"),tpt.forEach(t),cNo=r(g$e," \u2014 "),SO=n(g$e,"A",{href:!0});var apt=s(SO);fNo=r(apt,"XLMRobertaForSequenceClassification"),apt.forEach(t),mNo=r(g$e," (XLM-RoBERTa model)"),g$e.forEach(t),gNo=i(j),Q2=n(j,"LI",{});var h$e=s(Q2);Sge=n(h$e,"STRONG",{});var npt=s(Sge);hNo=r(npt,"xlm-roberta-xl"),npt.forEach(t),pNo=r(h$e," \u2014 "),RO=n(h$e,"A",{href:!0});var spt=s(RO);_No=r(spt,"XLMRobertaXLForSequenceClassification"),spt.forEach(t),uNo=r(h$e," (XLM-RoBERTa-XL model)"),h$e.forEach(t),bNo=i(j),H2=n(j,"LI",{});var p$e=s(H2);Rge=n(p$e,"STRONG",{});var lpt=s(Rge);vNo=r(lpt,"xlnet"),lpt.forEach(t),FNo=r(p$e," \u2014 "),PO=n(p$e,"A",{href:!0});var ipt=s(PO);TNo=r(ipt,"XLNetForSequenceClassification"),ipt.forEach(t),MNo=r(p$e," (XLNet model)"),p$e.forEach(t),ENo=i(j),U2=n(j,"LI",{});var _$e=s(U2);Pge=n(_$e,"STRONG",{});var dpt=s(Pge);CNo=r(dpt,"yoso"),dpt.forEach(t),wNo=r(_$e," \u2014 "),BO=n(_$e,"A",{href:!0});var cpt=s(BO);ANo=r(cpt,"YosoForSequenceClassification"),cpt.forEach(t),LNo=r(_$e," (YOSO model)"),_$e.forEach(t),j.forEach(t),yNo=i(sa),J2=n(sa,"P",{});var u$e=s(J2);xNo=r(u$e,"The model is set in evaluation mode by default using "),Bge=n(u$e,"CODE",{});var fpt=s(Bge);$No=r(fpt,"model.eval()"),fpt.forEach(t),kNo=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(u$e,"CODE",{});var mpt=s(Ige);SNo=r(mpt,"model.train()"),mpt.forEach(t),u$e.forEach(t),RNo=i(sa),T(Y2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Jje=i(f),Xi=n(f,"H2",{class:!0});var eOe=s(Xi);K2=n(eOe,"A",{id:!0,class:!0,href:!0});var gpt=s(K2);Nge=n(gpt,"SPAN",{});var hpt=s(Nge);T(UA.$$.fragment,hpt),hpt.forEach(t),gpt.forEach(t),PNo=i(eOe),qge=n(eOe,"SPAN",{});var ppt=s(qge);BNo=r(ppt,"AutoModelForMultipleChoice"),ppt.forEach(t),eOe.forEach(t),Yje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(JA.$$.fragment,Hs),INo=i(Hs),zi=n(Hs,"P",{});var pee=s(zi);NNo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IO=n(pee,"A",{href:!0});var _pt=s(IO);qNo=r(_pt,"from_pretrained()"),_pt.forEach(t),jNo=r(pee," class method or the "),NO=n(pee,"A",{href:!0});var upt=s(NO);DNo=r(upt,"from_config()"),upt.forEach(t),GNo=r(pee,` class
method.`),pee.forEach(t),ONo=i(Hs),YA=n(Hs,"P",{});var oOe=s(YA);VNo=r(oOe,"This class cannot be instantiated directly using "),jge=n(oOe,"CODE",{});var bpt=s(jge);XNo=r(bpt,"__init__()"),bpt.forEach(t),zNo=r(oOe," (throws an error)."),oOe.forEach(t),WNo=i(Hs),dt=n(Hs,"DIV",{class:!0});var d0=s(dt);T(KA.$$.fragment,d0),QNo=i(d0),Dge=n(d0,"P",{});var vpt=s(Dge);HNo=r(vpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vpt.forEach(t),UNo=i(d0),Wi=n(d0,"P",{});var _ee=s(Wi);JNo=r(_ee,`Note:
Loading a model from its configuration file does `),Gge=n(_ee,"STRONG",{});var Fpt=s(Gge);YNo=r(Fpt,"not"),Fpt.forEach(t),KNo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(_ee,"A",{href:!0});var Tpt=s(qO);ZNo=r(Tpt,"from_pretrained()"),Tpt.forEach(t),eqo=r(_ee," to load the model weights."),_ee.forEach(t),oqo=i(d0),T(Z2.$$.fragment,d0),d0.forEach(t),rqo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(ZA.$$.fragment,la),tqo=i(la),Oge=n(la,"P",{});var Mpt=s(Oge);aqo=r(Mpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mpt.forEach(t),nqo=i(la),Pa=n(la,"P",{});var c0=s(Pa);sqo=r(c0,"The model class to instantiate is selected based on the "),Vge=n(c0,"CODE",{});var Ept=s(Vge);lqo=r(Ept,"model_type"),Ept.forEach(t),iqo=r(c0,` property of the config object (either
passed as an argument or loaded from `),Xge=n(c0,"CODE",{});var Cpt=s(Xge);dqo=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),cqo=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(c0,"CODE",{});var wpt=s(zge);fqo=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),mqo=r(c0,":"),c0.forEach(t),gqo=i(la),Z=n(la,"UL",{});var ee=s(Z);ev=n(ee,"LI",{});var b$e=s(ev);Wge=n(b$e,"STRONG",{});var Apt=s(Wge);hqo=r(Apt,"albert"),Apt.forEach(t),pqo=r(b$e," \u2014 "),jO=n(b$e,"A",{href:!0});var Lpt=s(jO);_qo=r(Lpt,"AlbertForMultipleChoice"),Lpt.forEach(t),uqo=r(b$e," (ALBERT model)"),b$e.forEach(t),bqo=i(ee),ov=n(ee,"LI",{});var v$e=s(ov);Qge=n(v$e,"STRONG",{});var ypt=s(Qge);vqo=r(ypt,"bert"),ypt.forEach(t),Fqo=r(v$e," \u2014 "),DO=n(v$e,"A",{href:!0});var xpt=s(DO);Tqo=r(xpt,"BertForMultipleChoice"),xpt.forEach(t),Mqo=r(v$e," (BERT model)"),v$e.forEach(t),Eqo=i(ee),rv=n(ee,"LI",{});var F$e=s(rv);Hge=n(F$e,"STRONG",{});var $pt=s(Hge);Cqo=r($pt,"big_bird"),$pt.forEach(t),wqo=r(F$e," \u2014 "),GO=n(F$e,"A",{href:!0});var kpt=s(GO);Aqo=r(kpt,"BigBirdForMultipleChoice"),kpt.forEach(t),Lqo=r(F$e," (BigBird model)"),F$e.forEach(t),yqo=i(ee),tv=n(ee,"LI",{});var T$e=s(tv);Uge=n(T$e,"STRONG",{});var Spt=s(Uge);xqo=r(Spt,"camembert"),Spt.forEach(t),$qo=r(T$e," \u2014 "),OO=n(T$e,"A",{href:!0});var Rpt=s(OO);kqo=r(Rpt,"CamembertForMultipleChoice"),Rpt.forEach(t),Sqo=r(T$e," (CamemBERT model)"),T$e.forEach(t),Rqo=i(ee),av=n(ee,"LI",{});var M$e=s(av);Jge=n(M$e,"STRONG",{});var Ppt=s(Jge);Pqo=r(Ppt,"canine"),Ppt.forEach(t),Bqo=r(M$e," \u2014 "),VO=n(M$e,"A",{href:!0});var Bpt=s(VO);Iqo=r(Bpt,"CanineForMultipleChoice"),Bpt.forEach(t),Nqo=r(M$e," (CANINE model)"),M$e.forEach(t),qqo=i(ee),nv=n(ee,"LI",{});var E$e=s(nv);Yge=n(E$e,"STRONG",{});var Ipt=s(Yge);jqo=r(Ipt,"convbert"),Ipt.forEach(t),Dqo=r(E$e," \u2014 "),XO=n(E$e,"A",{href:!0});var Npt=s(XO);Gqo=r(Npt,"ConvBertForMultipleChoice"),Npt.forEach(t),Oqo=r(E$e," (ConvBERT model)"),E$e.forEach(t),Vqo=i(ee),sv=n(ee,"LI",{});var C$e=s(sv);Kge=n(C$e,"STRONG",{});var qpt=s(Kge);Xqo=r(qpt,"data2vec-text"),qpt.forEach(t),zqo=r(C$e," \u2014 "),zO=n(C$e,"A",{href:!0});var jpt=s(zO);Wqo=r(jpt,"Data2VecTextForMultipleChoice"),jpt.forEach(t),Qqo=r(C$e," (Data2VecText model)"),C$e.forEach(t),Hqo=i(ee),lv=n(ee,"LI",{});var w$e=s(lv);Zge=n(w$e,"STRONG",{});var Dpt=s(Zge);Uqo=r(Dpt,"deberta-v2"),Dpt.forEach(t),Jqo=r(w$e," \u2014 "),WO=n(w$e,"A",{href:!0});var Gpt=s(WO);Yqo=r(Gpt,"DebertaV2ForMultipleChoice"),Gpt.forEach(t),Kqo=r(w$e," (DeBERTa-v2 model)"),w$e.forEach(t),Zqo=i(ee),iv=n(ee,"LI",{});var A$e=s(iv);ehe=n(A$e,"STRONG",{});var Opt=s(ehe);ejo=r(Opt,"distilbert"),Opt.forEach(t),ojo=r(A$e," \u2014 "),QO=n(A$e,"A",{href:!0});var Vpt=s(QO);rjo=r(Vpt,"DistilBertForMultipleChoice"),Vpt.forEach(t),tjo=r(A$e," (DistilBERT model)"),A$e.forEach(t),ajo=i(ee),dv=n(ee,"LI",{});var L$e=s(dv);ohe=n(L$e,"STRONG",{});var Xpt=s(ohe);njo=r(Xpt,"electra"),Xpt.forEach(t),sjo=r(L$e," \u2014 "),HO=n(L$e,"A",{href:!0});var zpt=s(HO);ljo=r(zpt,"ElectraForMultipleChoice"),zpt.forEach(t),ijo=r(L$e," (ELECTRA model)"),L$e.forEach(t),djo=i(ee),cv=n(ee,"LI",{});var y$e=s(cv);rhe=n(y$e,"STRONG",{});var Wpt=s(rhe);cjo=r(Wpt,"flaubert"),Wpt.forEach(t),fjo=r(y$e," \u2014 "),UO=n(y$e,"A",{href:!0});var Qpt=s(UO);mjo=r(Qpt,"FlaubertForMultipleChoice"),Qpt.forEach(t),gjo=r(y$e," (FlauBERT model)"),y$e.forEach(t),hjo=i(ee),fv=n(ee,"LI",{});var x$e=s(fv);the=n(x$e,"STRONG",{});var Hpt=s(the);pjo=r(Hpt,"fnet"),Hpt.forEach(t),_jo=r(x$e," \u2014 "),JO=n(x$e,"A",{href:!0});var Upt=s(JO);ujo=r(Upt,"FNetForMultipleChoice"),Upt.forEach(t),bjo=r(x$e," (FNet model)"),x$e.forEach(t),vjo=i(ee),mv=n(ee,"LI",{});var $$e=s(mv);ahe=n($$e,"STRONG",{});var Jpt=s(ahe);Fjo=r(Jpt,"funnel"),Jpt.forEach(t),Tjo=r($$e," \u2014 "),YO=n($$e,"A",{href:!0});var Ypt=s(YO);Mjo=r(Ypt,"FunnelForMultipleChoice"),Ypt.forEach(t),Ejo=r($$e," (Funnel Transformer model)"),$$e.forEach(t),Cjo=i(ee),gv=n(ee,"LI",{});var k$e=s(gv);nhe=n(k$e,"STRONG",{});var Kpt=s(nhe);wjo=r(Kpt,"ibert"),Kpt.forEach(t),Ajo=r(k$e," \u2014 "),KO=n(k$e,"A",{href:!0});var Zpt=s(KO);Ljo=r(Zpt,"IBertForMultipleChoice"),Zpt.forEach(t),yjo=r(k$e," (I-BERT model)"),k$e.forEach(t),xjo=i(ee),hv=n(ee,"LI",{});var S$e=s(hv);she=n(S$e,"STRONG",{});var e_t=s(she);$jo=r(e_t,"longformer"),e_t.forEach(t),kjo=r(S$e," \u2014 "),ZO=n(S$e,"A",{href:!0});var o_t=s(ZO);Sjo=r(o_t,"LongformerForMultipleChoice"),o_t.forEach(t),Rjo=r(S$e," (Longformer model)"),S$e.forEach(t),Pjo=i(ee),pv=n(ee,"LI",{});var R$e=s(pv);lhe=n(R$e,"STRONG",{});var r_t=s(lhe);Bjo=r(r_t,"megatron-bert"),r_t.forEach(t),Ijo=r(R$e," \u2014 "),eV=n(R$e,"A",{href:!0});var t_t=s(eV);Njo=r(t_t,"MegatronBertForMultipleChoice"),t_t.forEach(t),qjo=r(R$e," (Megatron-BERT model)"),R$e.forEach(t),jjo=i(ee),_v=n(ee,"LI",{});var P$e=s(_v);ihe=n(P$e,"STRONG",{});var a_t=s(ihe);Djo=r(a_t,"mobilebert"),a_t.forEach(t),Gjo=r(P$e," \u2014 "),oV=n(P$e,"A",{href:!0});var n_t=s(oV);Ojo=r(n_t,"MobileBertForMultipleChoice"),n_t.forEach(t),Vjo=r(P$e," (MobileBERT model)"),P$e.forEach(t),Xjo=i(ee),uv=n(ee,"LI",{});var B$e=s(uv);dhe=n(B$e,"STRONG",{});var s_t=s(dhe);zjo=r(s_t,"mpnet"),s_t.forEach(t),Wjo=r(B$e," \u2014 "),rV=n(B$e,"A",{href:!0});var l_t=s(rV);Qjo=r(l_t,"MPNetForMultipleChoice"),l_t.forEach(t),Hjo=r(B$e," (MPNet model)"),B$e.forEach(t),Ujo=i(ee),bv=n(ee,"LI",{});var I$e=s(bv);che=n(I$e,"STRONG",{});var i_t=s(che);Jjo=r(i_t,"nystromformer"),i_t.forEach(t),Yjo=r(I$e," \u2014 "),tV=n(I$e,"A",{href:!0});var d_t=s(tV);Kjo=r(d_t,"NystromformerForMultipleChoice"),d_t.forEach(t),Zjo=r(I$e," (Nystr\xF6mformer model)"),I$e.forEach(t),eDo=i(ee),vv=n(ee,"LI",{});var N$e=s(vv);fhe=n(N$e,"STRONG",{});var c_t=s(fhe);oDo=r(c_t,"qdqbert"),c_t.forEach(t),rDo=r(N$e," \u2014 "),aV=n(N$e,"A",{href:!0});var f_t=s(aV);tDo=r(f_t,"QDQBertForMultipleChoice"),f_t.forEach(t),aDo=r(N$e," (QDQBert model)"),N$e.forEach(t),nDo=i(ee),Fv=n(ee,"LI",{});var q$e=s(Fv);mhe=n(q$e,"STRONG",{});var m_t=s(mhe);sDo=r(m_t,"rembert"),m_t.forEach(t),lDo=r(q$e," \u2014 "),nV=n(q$e,"A",{href:!0});var g_t=s(nV);iDo=r(g_t,"RemBertForMultipleChoice"),g_t.forEach(t),dDo=r(q$e," (RemBERT model)"),q$e.forEach(t),cDo=i(ee),Tv=n(ee,"LI",{});var j$e=s(Tv);ghe=n(j$e,"STRONG",{});var h_t=s(ghe);fDo=r(h_t,"roberta"),h_t.forEach(t),mDo=r(j$e," \u2014 "),sV=n(j$e,"A",{href:!0});var p_t=s(sV);gDo=r(p_t,"RobertaForMultipleChoice"),p_t.forEach(t),hDo=r(j$e," (RoBERTa model)"),j$e.forEach(t),pDo=i(ee),Mv=n(ee,"LI",{});var D$e=s(Mv);hhe=n(D$e,"STRONG",{});var __t=s(hhe);_Do=r(__t,"roformer"),__t.forEach(t),uDo=r(D$e," \u2014 "),lV=n(D$e,"A",{href:!0});var u_t=s(lV);bDo=r(u_t,"RoFormerForMultipleChoice"),u_t.forEach(t),vDo=r(D$e," (RoFormer model)"),D$e.forEach(t),FDo=i(ee),Ev=n(ee,"LI",{});var G$e=s(Ev);phe=n(G$e,"STRONG",{});var b_t=s(phe);TDo=r(b_t,"squeezebert"),b_t.forEach(t),MDo=r(G$e," \u2014 "),iV=n(G$e,"A",{href:!0});var v_t=s(iV);EDo=r(v_t,"SqueezeBertForMultipleChoice"),v_t.forEach(t),CDo=r(G$e," (SqueezeBERT model)"),G$e.forEach(t),wDo=i(ee),Cv=n(ee,"LI",{});var O$e=s(Cv);_he=n(O$e,"STRONG",{});var F_t=s(_he);ADo=r(F_t,"xlm"),F_t.forEach(t),LDo=r(O$e," \u2014 "),dV=n(O$e,"A",{href:!0});var T_t=s(dV);yDo=r(T_t,"XLMForMultipleChoice"),T_t.forEach(t),xDo=r(O$e," (XLM model)"),O$e.forEach(t),$Do=i(ee),wv=n(ee,"LI",{});var V$e=s(wv);uhe=n(V$e,"STRONG",{});var M_t=s(uhe);kDo=r(M_t,"xlm-roberta"),M_t.forEach(t),SDo=r(V$e," \u2014 "),cV=n(V$e,"A",{href:!0});var E_t=s(cV);RDo=r(E_t,"XLMRobertaForMultipleChoice"),E_t.forEach(t),PDo=r(V$e," (XLM-RoBERTa model)"),V$e.forEach(t),BDo=i(ee),Av=n(ee,"LI",{});var X$e=s(Av);bhe=n(X$e,"STRONG",{});var C_t=s(bhe);IDo=r(C_t,"xlm-roberta-xl"),C_t.forEach(t),NDo=r(X$e," \u2014 "),fV=n(X$e,"A",{href:!0});var w_t=s(fV);qDo=r(w_t,"XLMRobertaXLForMultipleChoice"),w_t.forEach(t),jDo=r(X$e," (XLM-RoBERTa-XL model)"),X$e.forEach(t),DDo=i(ee),Lv=n(ee,"LI",{});var z$e=s(Lv);vhe=n(z$e,"STRONG",{});var A_t=s(vhe);GDo=r(A_t,"xlnet"),A_t.forEach(t),ODo=r(z$e," \u2014 "),mV=n(z$e,"A",{href:!0});var L_t=s(mV);VDo=r(L_t,"XLNetForMultipleChoice"),L_t.forEach(t),XDo=r(z$e," (XLNet model)"),z$e.forEach(t),zDo=i(ee),yv=n(ee,"LI",{});var W$e=s(yv);Fhe=n(W$e,"STRONG",{});var y_t=s(Fhe);WDo=r(y_t,"yoso"),y_t.forEach(t),QDo=r(W$e," \u2014 "),gV=n(W$e,"A",{href:!0});var x_t=s(gV);HDo=r(x_t,"YosoForMultipleChoice"),x_t.forEach(t),UDo=r(W$e," (YOSO model)"),W$e.forEach(t),ee.forEach(t),JDo=i(la),xv=n(la,"P",{});var Q$e=s(xv);YDo=r(Q$e,"The model is set in evaluation mode by default using "),The=n(Q$e,"CODE",{});var $_t=s(The);KDo=r($_t,"model.eval()"),$_t.forEach(t),ZDo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(Q$e,"CODE",{});var k_t=s(Mhe);eGo=r(k_t,"model.train()"),k_t.forEach(t),Q$e.forEach(t),oGo=i(la),T($v.$$.fragment,la),la.forEach(t),Hs.forEach(t),Kje=i(f),Qi=n(f,"H2",{class:!0});var rOe=s(Qi);kv=n(rOe,"A",{id:!0,class:!0,href:!0});var S_t=s(kv);Ehe=n(S_t,"SPAN",{});var R_t=s(Ehe);T(eL.$$.fragment,R_t),R_t.forEach(t),S_t.forEach(t),rGo=i(rOe),Che=n(rOe,"SPAN",{});var P_t=s(Che);tGo=r(P_t,"AutoModelForNextSentencePrediction"),P_t.forEach(t),rOe.forEach(t),Zje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(oL.$$.fragment,Us),aGo=i(Us),Hi=n(Us,"P",{});var uee=s(Hi);nGo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hV=n(uee,"A",{href:!0});var B_t=s(hV);sGo=r(B_t,"from_pretrained()"),B_t.forEach(t),lGo=r(uee," class method or the "),pV=n(uee,"A",{href:!0});var I_t=s(pV);iGo=r(I_t,"from_config()"),I_t.forEach(t),dGo=r(uee,` class
method.`),uee.forEach(t),cGo=i(Us),rL=n(Us,"P",{});var tOe=s(rL);fGo=r(tOe,"This class cannot be instantiated directly using "),whe=n(tOe,"CODE",{});var N_t=s(whe);mGo=r(N_t,"__init__()"),N_t.forEach(t),gGo=r(tOe," (throws an error)."),tOe.forEach(t),hGo=i(Us),ct=n(Us,"DIV",{class:!0});var f0=s(ct);T(tL.$$.fragment,f0),pGo=i(f0),Ahe=n(f0,"P",{});var q_t=s(Ahe);_Go=r(q_t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),q_t.forEach(t),uGo=i(f0),Ui=n(f0,"P",{});var bee=s(Ui);bGo=r(bee,`Note:
Loading a model from its configuration file does `),Lhe=n(bee,"STRONG",{});var j_t=s(Lhe);vGo=r(j_t,"not"),j_t.forEach(t),FGo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(bee,"A",{href:!0});var D_t=s(_V);TGo=r(D_t,"from_pretrained()"),D_t.forEach(t),MGo=r(bee," to load the model weights."),bee.forEach(t),EGo=i(f0),T(Sv.$$.fragment,f0),f0.forEach(t),CGo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(aL.$$.fragment,ia),wGo=i(ia),yhe=n(ia,"P",{});var G_t=s(yhe);AGo=r(G_t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),G_t.forEach(t),LGo=i(ia),Ba=n(ia,"P",{});var m0=s(Ba);yGo=r(m0,"The model class to instantiate is selected based on the "),xhe=n(m0,"CODE",{});var O_t=s(xhe);xGo=r(O_t,"model_type"),O_t.forEach(t),$Go=r(m0,` property of the config object (either
passed as an argument or loaded from `),$he=n(m0,"CODE",{});var V_t=s($he);kGo=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),SGo=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(m0,"CODE",{});var X_t=s(khe);RGo=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),PGo=r(m0,":"),m0.forEach(t),BGo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);Rv=n(Js,"LI",{});var H$e=s(Rv);She=n(H$e,"STRONG",{});var z_t=s(She);IGo=r(z_t,"bert"),z_t.forEach(t),NGo=r(H$e," \u2014 "),uV=n(H$e,"A",{href:!0});var W_t=s(uV);qGo=r(W_t,"BertForNextSentencePrediction"),W_t.forEach(t),jGo=r(H$e," (BERT model)"),H$e.forEach(t),DGo=i(Js),Pv=n(Js,"LI",{});var U$e=s(Pv);Rhe=n(U$e,"STRONG",{});var Q_t=s(Rhe);GGo=r(Q_t,"fnet"),Q_t.forEach(t),OGo=r(U$e," \u2014 "),bV=n(U$e,"A",{href:!0});var H_t=s(bV);VGo=r(H_t,"FNetForNextSentencePrediction"),H_t.forEach(t),XGo=r(U$e," (FNet model)"),U$e.forEach(t),zGo=i(Js),Bv=n(Js,"LI",{});var J$e=s(Bv);Phe=n(J$e,"STRONG",{});var U_t=s(Phe);WGo=r(U_t,"megatron-bert"),U_t.forEach(t),QGo=r(J$e," \u2014 "),vV=n(J$e,"A",{href:!0});var J_t=s(vV);HGo=r(J_t,"MegatronBertForNextSentencePrediction"),J_t.forEach(t),UGo=r(J$e," (Megatron-BERT model)"),J$e.forEach(t),JGo=i(Js),Iv=n(Js,"LI",{});var Y$e=s(Iv);Bhe=n(Y$e,"STRONG",{});var Y_t=s(Bhe);YGo=r(Y_t,"mobilebert"),Y_t.forEach(t),KGo=r(Y$e," \u2014 "),FV=n(Y$e,"A",{href:!0});var K_t=s(FV);ZGo=r(K_t,"MobileBertForNextSentencePrediction"),K_t.forEach(t),eOo=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),oOo=i(Js),Nv=n(Js,"LI",{});var K$e=s(Nv);Ihe=n(K$e,"STRONG",{});var Z_t=s(Ihe);rOo=r(Z_t,"qdqbert"),Z_t.forEach(t),tOo=r(K$e," \u2014 "),TV=n(K$e,"A",{href:!0});var eut=s(TV);aOo=r(eut,"QDQBertForNextSentencePrediction"),eut.forEach(t),nOo=r(K$e," (QDQBert model)"),K$e.forEach(t),Js.forEach(t),sOo=i(ia),qv=n(ia,"P",{});var Z$e=s(qv);lOo=r(Z$e,"The model is set in evaluation mode by default using "),Nhe=n(Z$e,"CODE",{});var out=s(Nhe);iOo=r(out,"model.eval()"),out.forEach(t),dOo=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(Z$e,"CODE",{});var rut=s(qhe);cOo=r(rut,"model.train()"),rut.forEach(t),Z$e.forEach(t),fOo=i(ia),T(jv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),eDe=i(f),Ji=n(f,"H2",{class:!0});var aOe=s(Ji);Dv=n(aOe,"A",{id:!0,class:!0,href:!0});var tut=s(Dv);jhe=n(tut,"SPAN",{});var aut=s(jhe);T(nL.$$.fragment,aut),aut.forEach(t),tut.forEach(t),mOo=i(aOe),Dhe=n(aOe,"SPAN",{});var nut=s(Dhe);gOo=r(nut,"AutoModelForTokenClassification"),nut.forEach(t),aOe.forEach(t),oDe=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(sL.$$.fragment,Ys),hOo=i(Ys),Yi=n(Ys,"P",{});var vee=s(Yi);pOo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MV=n(vee,"A",{href:!0});var sut=s(MV);_Oo=r(sut,"from_pretrained()"),sut.forEach(t),uOo=r(vee," class method or the "),EV=n(vee,"A",{href:!0});var lut=s(EV);bOo=r(lut,"from_config()"),lut.forEach(t),vOo=r(vee,` class
method.`),vee.forEach(t),FOo=i(Ys),lL=n(Ys,"P",{});var nOe=s(lL);TOo=r(nOe,"This class cannot be instantiated directly using "),Ghe=n(nOe,"CODE",{});var iut=s(Ghe);MOo=r(iut,"__init__()"),iut.forEach(t),EOo=r(nOe," (throws an error)."),nOe.forEach(t),COo=i(Ys),ft=n(Ys,"DIV",{class:!0});var g0=s(ft);T(iL.$$.fragment,g0),wOo=i(g0),Ohe=n(g0,"P",{});var dut=s(Ohe);AOo=r(dut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dut.forEach(t),LOo=i(g0),Ki=n(g0,"P",{});var Fee=s(Ki);yOo=r(Fee,`Note:
Loading a model from its configuration file does `),Vhe=n(Fee,"STRONG",{});var cut=s(Vhe);xOo=r(cut,"not"),cut.forEach(t),$Oo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(Fee,"A",{href:!0});var fut=s(CV);kOo=r(fut,"from_pretrained()"),fut.forEach(t),SOo=r(Fee," to load the model weights."),Fee.forEach(t),ROo=i(g0),T(Gv.$$.fragment,g0),g0.forEach(t),POo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(dL.$$.fragment,da),BOo=i(da),Xhe=n(da,"P",{});var mut=s(Xhe);IOo=r(mut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mut.forEach(t),NOo=i(da),Ia=n(da,"P",{});var h0=s(Ia);qOo=r(h0,"The model class to instantiate is selected based on the "),zhe=n(h0,"CODE",{});var gut=s(zhe);jOo=r(gut,"model_type"),gut.forEach(t),DOo=r(h0,` property of the config object (either
passed as an argument or loaded from `),Whe=n(h0,"CODE",{});var hut=s(Whe);GOo=r(hut,"pretrained_model_name_or_path"),hut.forEach(t),OOo=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(h0,"CODE",{});var put=s(Qhe);VOo=r(put,"pretrained_model_name_or_path"),put.forEach(t),XOo=r(h0,":"),h0.forEach(t),zOo=i(da),H=n(da,"UL",{});var J=s(H);Ov=n(J,"LI",{});var eke=s(Ov);Hhe=n(eke,"STRONG",{});var _ut=s(Hhe);WOo=r(_ut,"albert"),_ut.forEach(t),QOo=r(eke," \u2014 "),wV=n(eke,"A",{href:!0});var uut=s(wV);HOo=r(uut,"AlbertForTokenClassification"),uut.forEach(t),UOo=r(eke," (ALBERT model)"),eke.forEach(t),JOo=i(J),Vv=n(J,"LI",{});var oke=s(Vv);Uhe=n(oke,"STRONG",{});var but=s(Uhe);YOo=r(but,"bert"),but.forEach(t),KOo=r(oke," \u2014 "),AV=n(oke,"A",{href:!0});var vut=s(AV);ZOo=r(vut,"BertForTokenClassification"),vut.forEach(t),eVo=r(oke," (BERT model)"),oke.forEach(t),oVo=i(J),Xv=n(J,"LI",{});var rke=s(Xv);Jhe=n(rke,"STRONG",{});var Fut=s(Jhe);rVo=r(Fut,"big_bird"),Fut.forEach(t),tVo=r(rke," \u2014 "),LV=n(rke,"A",{href:!0});var Tut=s(LV);aVo=r(Tut,"BigBirdForTokenClassification"),Tut.forEach(t),nVo=r(rke," (BigBird model)"),rke.forEach(t),sVo=i(J),zv=n(J,"LI",{});var tke=s(zv);Yhe=n(tke,"STRONG",{});var Mut=s(Yhe);lVo=r(Mut,"bloom"),Mut.forEach(t),iVo=r(tke," \u2014 "),yV=n(tke,"A",{href:!0});var Eut=s(yV);dVo=r(Eut,"BloomForTokenClassification"),Eut.forEach(t),cVo=r(tke," (BLOOM model)"),tke.forEach(t),fVo=i(J),Wv=n(J,"LI",{});var ake=s(Wv);Khe=n(ake,"STRONG",{});var Cut=s(Khe);mVo=r(Cut,"camembert"),Cut.forEach(t),gVo=r(ake," \u2014 "),xV=n(ake,"A",{href:!0});var wut=s(xV);hVo=r(wut,"CamembertForTokenClassification"),wut.forEach(t),pVo=r(ake," (CamemBERT model)"),ake.forEach(t),_Vo=i(J),Qv=n(J,"LI",{});var nke=s(Qv);Zhe=n(nke,"STRONG",{});var Aut=s(Zhe);uVo=r(Aut,"canine"),Aut.forEach(t),bVo=r(nke," \u2014 "),$V=n(nke,"A",{href:!0});var Lut=s($V);vVo=r(Lut,"CanineForTokenClassification"),Lut.forEach(t),FVo=r(nke," (CANINE model)"),nke.forEach(t),TVo=i(J),Hv=n(J,"LI",{});var ske=s(Hv);epe=n(ske,"STRONG",{});var yut=s(epe);MVo=r(yut,"convbert"),yut.forEach(t),EVo=r(ske," \u2014 "),kV=n(ske,"A",{href:!0});var xut=s(kV);CVo=r(xut,"ConvBertForTokenClassification"),xut.forEach(t),wVo=r(ske," (ConvBERT model)"),ske.forEach(t),AVo=i(J),Uv=n(J,"LI",{});var lke=s(Uv);ope=n(lke,"STRONG",{});var $ut=s(ope);LVo=r($ut,"data2vec-text"),$ut.forEach(t),yVo=r(lke," \u2014 "),SV=n(lke,"A",{href:!0});var kut=s(SV);xVo=r(kut,"Data2VecTextForTokenClassification"),kut.forEach(t),$Vo=r(lke," (Data2VecText model)"),lke.forEach(t),kVo=i(J),Jv=n(J,"LI",{});var ike=s(Jv);rpe=n(ike,"STRONG",{});var Sut=s(rpe);SVo=r(Sut,"deberta"),Sut.forEach(t),RVo=r(ike," \u2014 "),RV=n(ike,"A",{href:!0});var Rut=s(RV);PVo=r(Rut,"DebertaForTokenClassification"),Rut.forEach(t),BVo=r(ike," (DeBERTa model)"),ike.forEach(t),IVo=i(J),Yv=n(J,"LI",{});var dke=s(Yv);tpe=n(dke,"STRONG",{});var Put=s(tpe);NVo=r(Put,"deberta-v2"),Put.forEach(t),qVo=r(dke," \u2014 "),PV=n(dke,"A",{href:!0});var But=s(PV);jVo=r(But,"DebertaV2ForTokenClassification"),But.forEach(t),DVo=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),GVo=i(J),Kv=n(J,"LI",{});var cke=s(Kv);ape=n(cke,"STRONG",{});var Iut=s(ape);OVo=r(Iut,"distilbert"),Iut.forEach(t),VVo=r(cke," \u2014 "),BV=n(cke,"A",{href:!0});var Nut=s(BV);XVo=r(Nut,"DistilBertForTokenClassification"),Nut.forEach(t),zVo=r(cke," (DistilBERT model)"),cke.forEach(t),WVo=i(J),Zv=n(J,"LI",{});var fke=s(Zv);npe=n(fke,"STRONG",{});var qut=s(npe);QVo=r(qut,"electra"),qut.forEach(t),HVo=r(fke," \u2014 "),IV=n(fke,"A",{href:!0});var jut=s(IV);UVo=r(jut,"ElectraForTokenClassification"),jut.forEach(t),JVo=r(fke," (ELECTRA model)"),fke.forEach(t),YVo=i(J),e3=n(J,"LI",{});var mke=s(e3);spe=n(mke,"STRONG",{});var Dut=s(spe);KVo=r(Dut,"flaubert"),Dut.forEach(t),ZVo=r(mke," \u2014 "),NV=n(mke,"A",{href:!0});var Gut=s(NV);eXo=r(Gut,"FlaubertForTokenClassification"),Gut.forEach(t),oXo=r(mke," (FlauBERT model)"),mke.forEach(t),rXo=i(J),o3=n(J,"LI",{});var gke=s(o3);lpe=n(gke,"STRONG",{});var Out=s(lpe);tXo=r(Out,"fnet"),Out.forEach(t),aXo=r(gke," \u2014 "),qV=n(gke,"A",{href:!0});var Vut=s(qV);nXo=r(Vut,"FNetForTokenClassification"),Vut.forEach(t),sXo=r(gke," (FNet model)"),gke.forEach(t),lXo=i(J),r3=n(J,"LI",{});var hke=s(r3);ipe=n(hke,"STRONG",{});var Xut=s(ipe);iXo=r(Xut,"funnel"),Xut.forEach(t),dXo=r(hke," \u2014 "),jV=n(hke,"A",{href:!0});var zut=s(jV);cXo=r(zut,"FunnelForTokenClassification"),zut.forEach(t),fXo=r(hke," (Funnel Transformer model)"),hke.forEach(t),mXo=i(J),t3=n(J,"LI",{});var pke=s(t3);dpe=n(pke,"STRONG",{});var Wut=s(dpe);gXo=r(Wut,"gpt2"),Wut.forEach(t),hXo=r(pke," \u2014 "),DV=n(pke,"A",{href:!0});var Qut=s(DV);pXo=r(Qut,"GPT2ForTokenClassification"),Qut.forEach(t),_Xo=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),uXo=i(J),a3=n(J,"LI",{});var _ke=s(a3);cpe=n(_ke,"STRONG",{});var Hut=s(cpe);bXo=r(Hut,"ibert"),Hut.forEach(t),vXo=r(_ke," \u2014 "),GV=n(_ke,"A",{href:!0});var Uut=s(GV);FXo=r(Uut,"IBertForTokenClassification"),Uut.forEach(t),TXo=r(_ke," (I-BERT model)"),_ke.forEach(t),MXo=i(J),n3=n(J,"LI",{});var uke=s(n3);fpe=n(uke,"STRONG",{});var Jut=s(fpe);EXo=r(Jut,"layoutlm"),Jut.forEach(t),CXo=r(uke," \u2014 "),OV=n(uke,"A",{href:!0});var Yut=s(OV);wXo=r(Yut,"LayoutLMForTokenClassification"),Yut.forEach(t),AXo=r(uke," (LayoutLM model)"),uke.forEach(t),LXo=i(J),s3=n(J,"LI",{});var bke=s(s3);mpe=n(bke,"STRONG",{});var Kut=s(mpe);yXo=r(Kut,"layoutlmv2"),Kut.forEach(t),xXo=r(bke," \u2014 "),VV=n(bke,"A",{href:!0});var Zut=s(VV);$Xo=r(Zut,"LayoutLMv2ForTokenClassification"),Zut.forEach(t),kXo=r(bke," (LayoutLMv2 model)"),bke.forEach(t),SXo=i(J),l3=n(J,"LI",{});var vke=s(l3);gpe=n(vke,"STRONG",{});var e1t=s(gpe);RXo=r(e1t,"layoutlmv3"),e1t.forEach(t),PXo=r(vke," \u2014 "),XV=n(vke,"A",{href:!0});var o1t=s(XV);BXo=r(o1t,"LayoutLMv3ForTokenClassification"),o1t.forEach(t),IXo=r(vke," (LayoutLMv3 model)"),vke.forEach(t),NXo=i(J),i3=n(J,"LI",{});var Fke=s(i3);hpe=n(Fke,"STRONG",{});var r1t=s(hpe);qXo=r(r1t,"longformer"),r1t.forEach(t),jXo=r(Fke," \u2014 "),zV=n(Fke,"A",{href:!0});var t1t=s(zV);DXo=r(t1t,"LongformerForTokenClassification"),t1t.forEach(t),GXo=r(Fke," (Longformer model)"),Fke.forEach(t),OXo=i(J),d3=n(J,"LI",{});var Tke=s(d3);ppe=n(Tke,"STRONG",{});var a1t=s(ppe);VXo=r(a1t,"megatron-bert"),a1t.forEach(t),XXo=r(Tke," \u2014 "),WV=n(Tke,"A",{href:!0});var n1t=s(WV);zXo=r(n1t,"MegatronBertForTokenClassification"),n1t.forEach(t),WXo=r(Tke," (Megatron-BERT model)"),Tke.forEach(t),QXo=i(J),c3=n(J,"LI",{});var Mke=s(c3);_pe=n(Mke,"STRONG",{});var s1t=s(_pe);HXo=r(s1t,"mobilebert"),s1t.forEach(t),UXo=r(Mke," \u2014 "),QV=n(Mke,"A",{href:!0});var l1t=s(QV);JXo=r(l1t,"MobileBertForTokenClassification"),l1t.forEach(t),YXo=r(Mke," (MobileBERT model)"),Mke.forEach(t),KXo=i(J),f3=n(J,"LI",{});var Eke=s(f3);upe=n(Eke,"STRONG",{});var i1t=s(upe);ZXo=r(i1t,"mpnet"),i1t.forEach(t),ezo=r(Eke," \u2014 "),HV=n(Eke,"A",{href:!0});var d1t=s(HV);ozo=r(d1t,"MPNetForTokenClassification"),d1t.forEach(t),rzo=r(Eke," (MPNet model)"),Eke.forEach(t),tzo=i(J),m3=n(J,"LI",{});var Cke=s(m3);bpe=n(Cke,"STRONG",{});var c1t=s(bpe);azo=r(c1t,"nystromformer"),c1t.forEach(t),nzo=r(Cke," \u2014 "),UV=n(Cke,"A",{href:!0});var f1t=s(UV);szo=r(f1t,"NystromformerForTokenClassification"),f1t.forEach(t),lzo=r(Cke," (Nystr\xF6mformer model)"),Cke.forEach(t),izo=i(J),g3=n(J,"LI",{});var wke=s(g3);vpe=n(wke,"STRONG",{});var m1t=s(vpe);dzo=r(m1t,"qdqbert"),m1t.forEach(t),czo=r(wke," \u2014 "),JV=n(wke,"A",{href:!0});var g1t=s(JV);fzo=r(g1t,"QDQBertForTokenClassification"),g1t.forEach(t),mzo=r(wke," (QDQBert model)"),wke.forEach(t),gzo=i(J),h3=n(J,"LI",{});var Ake=s(h3);Fpe=n(Ake,"STRONG",{});var h1t=s(Fpe);hzo=r(h1t,"rembert"),h1t.forEach(t),pzo=r(Ake," \u2014 "),YV=n(Ake,"A",{href:!0});var p1t=s(YV);_zo=r(p1t,"RemBertForTokenClassification"),p1t.forEach(t),uzo=r(Ake," (RemBERT model)"),Ake.forEach(t),bzo=i(J),p3=n(J,"LI",{});var Lke=s(p3);Tpe=n(Lke,"STRONG",{});var _1t=s(Tpe);vzo=r(_1t,"roberta"),_1t.forEach(t),Fzo=r(Lke," \u2014 "),KV=n(Lke,"A",{href:!0});var u1t=s(KV);Tzo=r(u1t,"RobertaForTokenClassification"),u1t.forEach(t),Mzo=r(Lke," (RoBERTa model)"),Lke.forEach(t),Ezo=i(J),_3=n(J,"LI",{});var yke=s(_3);Mpe=n(yke,"STRONG",{});var b1t=s(Mpe);Czo=r(b1t,"roformer"),b1t.forEach(t),wzo=r(yke," \u2014 "),ZV=n(yke,"A",{href:!0});var v1t=s(ZV);Azo=r(v1t,"RoFormerForTokenClassification"),v1t.forEach(t),Lzo=r(yke," (RoFormer model)"),yke.forEach(t),yzo=i(J),u3=n(J,"LI",{});var xke=s(u3);Epe=n(xke,"STRONG",{});var F1t=s(Epe);xzo=r(F1t,"squeezebert"),F1t.forEach(t),$zo=r(xke," \u2014 "),eX=n(xke,"A",{href:!0});var T1t=s(eX);kzo=r(T1t,"SqueezeBertForTokenClassification"),T1t.forEach(t),Szo=r(xke," (SqueezeBERT model)"),xke.forEach(t),Rzo=i(J),b3=n(J,"LI",{});var $ke=s(b3);Cpe=n($ke,"STRONG",{});var M1t=s(Cpe);Pzo=r(M1t,"xlm"),M1t.forEach(t),Bzo=r($ke," \u2014 "),oX=n($ke,"A",{href:!0});var E1t=s(oX);Izo=r(E1t,"XLMForTokenClassification"),E1t.forEach(t),Nzo=r($ke," (XLM model)"),$ke.forEach(t),qzo=i(J),v3=n(J,"LI",{});var kke=s(v3);wpe=n(kke,"STRONG",{});var C1t=s(wpe);jzo=r(C1t,"xlm-roberta"),C1t.forEach(t),Dzo=r(kke," \u2014 "),rX=n(kke,"A",{href:!0});var w1t=s(rX);Gzo=r(w1t,"XLMRobertaForTokenClassification"),w1t.forEach(t),Ozo=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),Vzo=i(J),F3=n(J,"LI",{});var Ske=s(F3);Ape=n(Ske,"STRONG",{});var A1t=s(Ape);Xzo=r(A1t,"xlm-roberta-xl"),A1t.forEach(t),zzo=r(Ske," \u2014 "),tX=n(Ske,"A",{href:!0});var L1t=s(tX);Wzo=r(L1t,"XLMRobertaXLForTokenClassification"),L1t.forEach(t),Qzo=r(Ske," (XLM-RoBERTa-XL model)"),Ske.forEach(t),Hzo=i(J),T3=n(J,"LI",{});var Rke=s(T3);Lpe=n(Rke,"STRONG",{});var y1t=s(Lpe);Uzo=r(y1t,"xlnet"),y1t.forEach(t),Jzo=r(Rke," \u2014 "),aX=n(Rke,"A",{href:!0});var x1t=s(aX);Yzo=r(x1t,"XLNetForTokenClassification"),x1t.forEach(t),Kzo=r(Rke," (XLNet model)"),Rke.forEach(t),Zzo=i(J),M3=n(J,"LI",{});var Pke=s(M3);ype=n(Pke,"STRONG",{});var $1t=s(ype);eWo=r($1t,"yoso"),$1t.forEach(t),oWo=r(Pke," \u2014 "),nX=n(Pke,"A",{href:!0});var k1t=s(nX);rWo=r(k1t,"YosoForTokenClassification"),k1t.forEach(t),tWo=r(Pke," (YOSO model)"),Pke.forEach(t),J.forEach(t),aWo=i(da),E3=n(da,"P",{});var Bke=s(E3);nWo=r(Bke,"The model is set in evaluation mode by default using "),xpe=n(Bke,"CODE",{});var S1t=s(xpe);sWo=r(S1t,"model.eval()"),S1t.forEach(t),lWo=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(Bke,"CODE",{});var R1t=s($pe);iWo=r(R1t,"model.train()"),R1t.forEach(t),Bke.forEach(t),dWo=i(da),T(C3.$$.fragment,da),da.forEach(t),Ys.forEach(t),rDe=i(f),Zi=n(f,"H2",{class:!0});var sOe=s(Zi);w3=n(sOe,"A",{id:!0,class:!0,href:!0});var P1t=s(w3);kpe=n(P1t,"SPAN",{});var B1t=s(kpe);T(cL.$$.fragment,B1t),B1t.forEach(t),P1t.forEach(t),cWo=i(sOe),Spe=n(sOe,"SPAN",{});var I1t=s(Spe);fWo=r(I1t,"AutoModelForQuestionAnswering"),I1t.forEach(t),sOe.forEach(t),tDe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(fL.$$.fragment,Ks),mWo=i(Ks),ed=n(Ks,"P",{});var Tee=s(ed);gWo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sX=n(Tee,"A",{href:!0});var N1t=s(sX);hWo=r(N1t,"from_pretrained()"),N1t.forEach(t),pWo=r(Tee," class method or the "),lX=n(Tee,"A",{href:!0});var q1t=s(lX);_Wo=r(q1t,"from_config()"),q1t.forEach(t),uWo=r(Tee,` class
method.`),Tee.forEach(t),bWo=i(Ks),mL=n(Ks,"P",{});var lOe=s(mL);vWo=r(lOe,"This class cannot be instantiated directly using "),Rpe=n(lOe,"CODE",{});var j1t=s(Rpe);FWo=r(j1t,"__init__()"),j1t.forEach(t),TWo=r(lOe," (throws an error)."),lOe.forEach(t),MWo=i(Ks),mt=n(Ks,"DIV",{class:!0});var p0=s(mt);T(gL.$$.fragment,p0),EWo=i(p0),Ppe=n(p0,"P",{});var D1t=s(Ppe);CWo=r(D1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D1t.forEach(t),wWo=i(p0),od=n(p0,"P",{});var Mee=s(od);AWo=r(Mee,`Note:
Loading a model from its configuration file does `),Bpe=n(Mee,"STRONG",{});var G1t=s(Bpe);LWo=r(G1t,"not"),G1t.forEach(t),yWo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(Mee,"A",{href:!0});var O1t=s(iX);xWo=r(O1t,"from_pretrained()"),O1t.forEach(t),$Wo=r(Mee," to load the model weights."),Mee.forEach(t),kWo=i(p0),T(A3.$$.fragment,p0),p0.forEach(t),SWo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(hL.$$.fragment,ca),RWo=i(ca),Ipe=n(ca,"P",{});var V1t=s(Ipe);PWo=r(V1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V1t.forEach(t),BWo=i(ca),Na=n(ca,"P",{});var _0=s(Na);IWo=r(_0,"The model class to instantiate is selected based on the "),Npe=n(_0,"CODE",{});var X1t=s(Npe);NWo=r(X1t,"model_type"),X1t.forEach(t),qWo=r(_0,` property of the config object (either
passed as an argument or loaded from `),qpe=n(_0,"CODE",{});var z1t=s(qpe);jWo=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),DWo=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(_0,"CODE",{});var W1t=s(jpe);GWo=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),OWo=r(_0,":"),_0.forEach(t),VWo=i(ca),V=n(ca,"UL",{});var X=s(V);L3=n(X,"LI",{});var Ike=s(L3);Dpe=n(Ike,"STRONG",{});var Q1t=s(Dpe);XWo=r(Q1t,"albert"),Q1t.forEach(t),zWo=r(Ike," \u2014 "),dX=n(Ike,"A",{href:!0});var H1t=s(dX);WWo=r(H1t,"AlbertForQuestionAnswering"),H1t.forEach(t),QWo=r(Ike," (ALBERT model)"),Ike.forEach(t),HWo=i(X),y3=n(X,"LI",{});var Nke=s(y3);Gpe=n(Nke,"STRONG",{});var U1t=s(Gpe);UWo=r(U1t,"bart"),U1t.forEach(t),JWo=r(Nke," \u2014 "),cX=n(Nke,"A",{href:!0});var J1t=s(cX);YWo=r(J1t,"BartForQuestionAnswering"),J1t.forEach(t),KWo=r(Nke," (BART model)"),Nke.forEach(t),ZWo=i(X),x3=n(X,"LI",{});var qke=s(x3);Ope=n(qke,"STRONG",{});var Y1t=s(Ope);eQo=r(Y1t,"bert"),Y1t.forEach(t),oQo=r(qke," \u2014 "),fX=n(qke,"A",{href:!0});var K1t=s(fX);rQo=r(K1t,"BertForQuestionAnswering"),K1t.forEach(t),tQo=r(qke," (BERT model)"),qke.forEach(t),aQo=i(X),$3=n(X,"LI",{});var jke=s($3);Vpe=n(jke,"STRONG",{});var Z1t=s(Vpe);nQo=r(Z1t,"big_bird"),Z1t.forEach(t),sQo=r(jke," \u2014 "),mX=n(jke,"A",{href:!0});var ebt=s(mX);lQo=r(ebt,"BigBirdForQuestionAnswering"),ebt.forEach(t),iQo=r(jke," (BigBird model)"),jke.forEach(t),dQo=i(X),k3=n(X,"LI",{});var Dke=s(k3);Xpe=n(Dke,"STRONG",{});var obt=s(Xpe);cQo=r(obt,"bigbird_pegasus"),obt.forEach(t),fQo=r(Dke," \u2014 "),gX=n(Dke,"A",{href:!0});var rbt=s(gX);mQo=r(rbt,"BigBirdPegasusForQuestionAnswering"),rbt.forEach(t),gQo=r(Dke," (BigBird-Pegasus model)"),Dke.forEach(t),hQo=i(X),S3=n(X,"LI",{});var Gke=s(S3);zpe=n(Gke,"STRONG",{});var tbt=s(zpe);pQo=r(tbt,"camembert"),tbt.forEach(t),_Qo=r(Gke," \u2014 "),hX=n(Gke,"A",{href:!0});var abt=s(hX);uQo=r(abt,"CamembertForQuestionAnswering"),abt.forEach(t),bQo=r(Gke," (CamemBERT model)"),Gke.forEach(t),vQo=i(X),R3=n(X,"LI",{});var Oke=s(R3);Wpe=n(Oke,"STRONG",{});var nbt=s(Wpe);FQo=r(nbt,"canine"),nbt.forEach(t),TQo=r(Oke," \u2014 "),pX=n(Oke,"A",{href:!0});var sbt=s(pX);MQo=r(sbt,"CanineForQuestionAnswering"),sbt.forEach(t),EQo=r(Oke," (CANINE model)"),Oke.forEach(t),CQo=i(X),P3=n(X,"LI",{});var Vke=s(P3);Qpe=n(Vke,"STRONG",{});var lbt=s(Qpe);wQo=r(lbt,"convbert"),lbt.forEach(t),AQo=r(Vke," \u2014 "),_X=n(Vke,"A",{href:!0});var ibt=s(_X);LQo=r(ibt,"ConvBertForQuestionAnswering"),ibt.forEach(t),yQo=r(Vke," (ConvBERT model)"),Vke.forEach(t),xQo=i(X),B3=n(X,"LI",{});var Xke=s(B3);Hpe=n(Xke,"STRONG",{});var dbt=s(Hpe);$Qo=r(dbt,"data2vec-text"),dbt.forEach(t),kQo=r(Xke," \u2014 "),uX=n(Xke,"A",{href:!0});var cbt=s(uX);SQo=r(cbt,"Data2VecTextForQuestionAnswering"),cbt.forEach(t),RQo=r(Xke," (Data2VecText model)"),Xke.forEach(t),PQo=i(X),I3=n(X,"LI",{});var zke=s(I3);Upe=n(zke,"STRONG",{});var fbt=s(Upe);BQo=r(fbt,"deberta"),fbt.forEach(t),IQo=r(zke," \u2014 "),bX=n(zke,"A",{href:!0});var mbt=s(bX);NQo=r(mbt,"DebertaForQuestionAnswering"),mbt.forEach(t),qQo=r(zke," (DeBERTa model)"),zke.forEach(t),jQo=i(X),N3=n(X,"LI",{});var Wke=s(N3);Jpe=n(Wke,"STRONG",{});var gbt=s(Jpe);DQo=r(gbt,"deberta-v2"),gbt.forEach(t),GQo=r(Wke," \u2014 "),vX=n(Wke,"A",{href:!0});var hbt=s(vX);OQo=r(hbt,"DebertaV2ForQuestionAnswering"),hbt.forEach(t),VQo=r(Wke," (DeBERTa-v2 model)"),Wke.forEach(t),XQo=i(X),q3=n(X,"LI",{});var Qke=s(q3);Ype=n(Qke,"STRONG",{});var pbt=s(Ype);zQo=r(pbt,"distilbert"),pbt.forEach(t),WQo=r(Qke," \u2014 "),FX=n(Qke,"A",{href:!0});var _bt=s(FX);QQo=r(_bt,"DistilBertForQuestionAnswering"),_bt.forEach(t),HQo=r(Qke," (DistilBERT model)"),Qke.forEach(t),UQo=i(X),j3=n(X,"LI",{});var Hke=s(j3);Kpe=n(Hke,"STRONG",{});var ubt=s(Kpe);JQo=r(ubt,"electra"),ubt.forEach(t),YQo=r(Hke," \u2014 "),TX=n(Hke,"A",{href:!0});var bbt=s(TX);KQo=r(bbt,"ElectraForQuestionAnswering"),bbt.forEach(t),ZQo=r(Hke," (ELECTRA model)"),Hke.forEach(t),eHo=i(X),D3=n(X,"LI",{});var Uke=s(D3);Zpe=n(Uke,"STRONG",{});var vbt=s(Zpe);oHo=r(vbt,"flaubert"),vbt.forEach(t),rHo=r(Uke," \u2014 "),MX=n(Uke,"A",{href:!0});var Fbt=s(MX);tHo=r(Fbt,"FlaubertForQuestionAnsweringSimple"),Fbt.forEach(t),aHo=r(Uke," (FlauBERT model)"),Uke.forEach(t),nHo=i(X),G3=n(X,"LI",{});var Jke=s(G3);e_e=n(Jke,"STRONG",{});var Tbt=s(e_e);sHo=r(Tbt,"fnet"),Tbt.forEach(t),lHo=r(Jke," \u2014 "),EX=n(Jke,"A",{href:!0});var Mbt=s(EX);iHo=r(Mbt,"FNetForQuestionAnswering"),Mbt.forEach(t),dHo=r(Jke," (FNet model)"),Jke.forEach(t),cHo=i(X),O3=n(X,"LI",{});var Yke=s(O3);o_e=n(Yke,"STRONG",{});var Ebt=s(o_e);fHo=r(Ebt,"funnel"),Ebt.forEach(t),mHo=r(Yke," \u2014 "),CX=n(Yke,"A",{href:!0});var Cbt=s(CX);gHo=r(Cbt,"FunnelForQuestionAnswering"),Cbt.forEach(t),hHo=r(Yke," (Funnel Transformer model)"),Yke.forEach(t),pHo=i(X),V3=n(X,"LI",{});var Kke=s(V3);r_e=n(Kke,"STRONG",{});var wbt=s(r_e);_Ho=r(wbt,"gptj"),wbt.forEach(t),uHo=r(Kke," \u2014 "),wX=n(Kke,"A",{href:!0});var Abt=s(wX);bHo=r(Abt,"GPTJForQuestionAnswering"),Abt.forEach(t),vHo=r(Kke," (GPT-J model)"),Kke.forEach(t),FHo=i(X),X3=n(X,"LI",{});var Zke=s(X3);t_e=n(Zke,"STRONG",{});var Lbt=s(t_e);THo=r(Lbt,"ibert"),Lbt.forEach(t),MHo=r(Zke," \u2014 "),AX=n(Zke,"A",{href:!0});var ybt=s(AX);EHo=r(ybt,"IBertForQuestionAnswering"),ybt.forEach(t),CHo=r(Zke," (I-BERT model)"),Zke.forEach(t),wHo=i(X),z3=n(X,"LI",{});var eSe=s(z3);a_e=n(eSe,"STRONG",{});var xbt=s(a_e);AHo=r(xbt,"layoutlmv2"),xbt.forEach(t),LHo=r(eSe," \u2014 "),LX=n(eSe,"A",{href:!0});var $bt=s(LX);yHo=r($bt,"LayoutLMv2ForQuestionAnswering"),$bt.forEach(t),xHo=r(eSe," (LayoutLMv2 model)"),eSe.forEach(t),$Ho=i(X),W3=n(X,"LI",{});var oSe=s(W3);n_e=n(oSe,"STRONG",{});var kbt=s(n_e);kHo=r(kbt,"layoutlmv3"),kbt.forEach(t),SHo=r(oSe," \u2014 "),yX=n(oSe,"A",{href:!0});var Sbt=s(yX);RHo=r(Sbt,"LayoutLMv3ForQuestionAnswering"),Sbt.forEach(t),PHo=r(oSe," (LayoutLMv3 model)"),oSe.forEach(t),BHo=i(X),Q3=n(X,"LI",{});var rSe=s(Q3);s_e=n(rSe,"STRONG",{});var Rbt=s(s_e);IHo=r(Rbt,"led"),Rbt.forEach(t),NHo=r(rSe," \u2014 "),xX=n(rSe,"A",{href:!0});var Pbt=s(xX);qHo=r(Pbt,"LEDForQuestionAnswering"),Pbt.forEach(t),jHo=r(rSe," (LED model)"),rSe.forEach(t),DHo=i(X),H3=n(X,"LI",{});var tSe=s(H3);l_e=n(tSe,"STRONG",{});var Bbt=s(l_e);GHo=r(Bbt,"longformer"),Bbt.forEach(t),OHo=r(tSe," \u2014 "),$X=n(tSe,"A",{href:!0});var Ibt=s($X);VHo=r(Ibt,"LongformerForQuestionAnswering"),Ibt.forEach(t),XHo=r(tSe," (Longformer model)"),tSe.forEach(t),zHo=i(X),U3=n(X,"LI",{});var aSe=s(U3);i_e=n(aSe,"STRONG",{});var Nbt=s(i_e);WHo=r(Nbt,"lxmert"),Nbt.forEach(t),QHo=r(aSe," \u2014 "),kX=n(aSe,"A",{href:!0});var qbt=s(kX);HHo=r(qbt,"LxmertForQuestionAnswering"),qbt.forEach(t),UHo=r(aSe," (LXMERT model)"),aSe.forEach(t),JHo=i(X),J3=n(X,"LI",{});var nSe=s(J3);d_e=n(nSe,"STRONG",{});var jbt=s(d_e);YHo=r(jbt,"mbart"),jbt.forEach(t),KHo=r(nSe," \u2014 "),SX=n(nSe,"A",{href:!0});var Dbt=s(SX);ZHo=r(Dbt,"MBartForQuestionAnswering"),Dbt.forEach(t),eUo=r(nSe," (mBART model)"),nSe.forEach(t),oUo=i(X),Y3=n(X,"LI",{});var sSe=s(Y3);c_e=n(sSe,"STRONG",{});var Gbt=s(c_e);rUo=r(Gbt,"megatron-bert"),Gbt.forEach(t),tUo=r(sSe," \u2014 "),RX=n(sSe,"A",{href:!0});var Obt=s(RX);aUo=r(Obt,"MegatronBertForQuestionAnswering"),Obt.forEach(t),nUo=r(sSe," (Megatron-BERT model)"),sSe.forEach(t),sUo=i(X),K3=n(X,"LI",{});var lSe=s(K3);f_e=n(lSe,"STRONG",{});var Vbt=s(f_e);lUo=r(Vbt,"mobilebert"),Vbt.forEach(t),iUo=r(lSe," \u2014 "),PX=n(lSe,"A",{href:!0});var Xbt=s(PX);dUo=r(Xbt,"MobileBertForQuestionAnswering"),Xbt.forEach(t),cUo=r(lSe," (MobileBERT model)"),lSe.forEach(t),fUo=i(X),Z3=n(X,"LI",{});var iSe=s(Z3);m_e=n(iSe,"STRONG",{});var zbt=s(m_e);mUo=r(zbt,"mpnet"),zbt.forEach(t),gUo=r(iSe," \u2014 "),BX=n(iSe,"A",{href:!0});var Wbt=s(BX);hUo=r(Wbt,"MPNetForQuestionAnswering"),Wbt.forEach(t),pUo=r(iSe," (MPNet model)"),iSe.forEach(t),_Uo=i(X),eF=n(X,"LI",{});var dSe=s(eF);g_e=n(dSe,"STRONG",{});var Qbt=s(g_e);uUo=r(Qbt,"nystromformer"),Qbt.forEach(t),bUo=r(dSe," \u2014 "),IX=n(dSe,"A",{href:!0});var Hbt=s(IX);vUo=r(Hbt,"NystromformerForQuestionAnswering"),Hbt.forEach(t),FUo=r(dSe," (Nystr\xF6mformer model)"),dSe.forEach(t),TUo=i(X),oF=n(X,"LI",{});var cSe=s(oF);h_e=n(cSe,"STRONG",{});var Ubt=s(h_e);MUo=r(Ubt,"qdqbert"),Ubt.forEach(t),EUo=r(cSe," \u2014 "),NX=n(cSe,"A",{href:!0});var Jbt=s(NX);CUo=r(Jbt,"QDQBertForQuestionAnswering"),Jbt.forEach(t),wUo=r(cSe," (QDQBert model)"),cSe.forEach(t),AUo=i(X),rF=n(X,"LI",{});var fSe=s(rF);p_e=n(fSe,"STRONG",{});var Ybt=s(p_e);LUo=r(Ybt,"reformer"),Ybt.forEach(t),yUo=r(fSe," \u2014 "),qX=n(fSe,"A",{href:!0});var Kbt=s(qX);xUo=r(Kbt,"ReformerForQuestionAnswering"),Kbt.forEach(t),$Uo=r(fSe," (Reformer model)"),fSe.forEach(t),kUo=i(X),tF=n(X,"LI",{});var mSe=s(tF);__e=n(mSe,"STRONG",{});var Zbt=s(__e);SUo=r(Zbt,"rembert"),Zbt.forEach(t),RUo=r(mSe," \u2014 "),jX=n(mSe,"A",{href:!0});var e2t=s(jX);PUo=r(e2t,"RemBertForQuestionAnswering"),e2t.forEach(t),BUo=r(mSe," (RemBERT model)"),mSe.forEach(t),IUo=i(X),aF=n(X,"LI",{});var gSe=s(aF);u_e=n(gSe,"STRONG",{});var o2t=s(u_e);NUo=r(o2t,"roberta"),o2t.forEach(t),qUo=r(gSe," \u2014 "),DX=n(gSe,"A",{href:!0});var r2t=s(DX);jUo=r(r2t,"RobertaForQuestionAnswering"),r2t.forEach(t),DUo=r(gSe," (RoBERTa model)"),gSe.forEach(t),GUo=i(X),nF=n(X,"LI",{});var hSe=s(nF);b_e=n(hSe,"STRONG",{});var t2t=s(b_e);OUo=r(t2t,"roformer"),t2t.forEach(t),VUo=r(hSe," \u2014 "),GX=n(hSe,"A",{href:!0});var a2t=s(GX);XUo=r(a2t,"RoFormerForQuestionAnswering"),a2t.forEach(t),zUo=r(hSe," (RoFormer model)"),hSe.forEach(t),WUo=i(X),sF=n(X,"LI",{});var pSe=s(sF);v_e=n(pSe,"STRONG",{});var n2t=s(v_e);QUo=r(n2t,"splinter"),n2t.forEach(t),HUo=r(pSe," \u2014 "),OX=n(pSe,"A",{href:!0});var s2t=s(OX);UUo=r(s2t,"SplinterForQuestionAnswering"),s2t.forEach(t),JUo=r(pSe," (Splinter model)"),pSe.forEach(t),YUo=i(X),lF=n(X,"LI",{});var _Se=s(lF);F_e=n(_Se,"STRONG",{});var l2t=s(F_e);KUo=r(l2t,"squeezebert"),l2t.forEach(t),ZUo=r(_Se," \u2014 "),VX=n(_Se,"A",{href:!0});var i2t=s(VX);eJo=r(i2t,"SqueezeBertForQuestionAnswering"),i2t.forEach(t),oJo=r(_Se," (SqueezeBERT model)"),_Se.forEach(t),rJo=i(X),iF=n(X,"LI",{});var uSe=s(iF);T_e=n(uSe,"STRONG",{});var d2t=s(T_e);tJo=r(d2t,"xlm"),d2t.forEach(t),aJo=r(uSe," \u2014 "),XX=n(uSe,"A",{href:!0});var c2t=s(XX);nJo=r(c2t,"XLMForQuestionAnsweringSimple"),c2t.forEach(t),sJo=r(uSe," (XLM model)"),uSe.forEach(t),lJo=i(X),dF=n(X,"LI",{});var bSe=s(dF);M_e=n(bSe,"STRONG",{});var f2t=s(M_e);iJo=r(f2t,"xlm-roberta"),f2t.forEach(t),dJo=r(bSe," \u2014 "),zX=n(bSe,"A",{href:!0});var m2t=s(zX);cJo=r(m2t,"XLMRobertaForQuestionAnswering"),m2t.forEach(t),fJo=r(bSe," (XLM-RoBERTa model)"),bSe.forEach(t),mJo=i(X),cF=n(X,"LI",{});var vSe=s(cF);E_e=n(vSe,"STRONG",{});var g2t=s(E_e);gJo=r(g2t,"xlm-roberta-xl"),g2t.forEach(t),hJo=r(vSe," \u2014 "),WX=n(vSe,"A",{href:!0});var h2t=s(WX);pJo=r(h2t,"XLMRobertaXLForQuestionAnswering"),h2t.forEach(t),_Jo=r(vSe," (XLM-RoBERTa-XL model)"),vSe.forEach(t),uJo=i(X),fF=n(X,"LI",{});var FSe=s(fF);C_e=n(FSe,"STRONG",{});var p2t=s(C_e);bJo=r(p2t,"xlnet"),p2t.forEach(t),vJo=r(FSe," \u2014 "),QX=n(FSe,"A",{href:!0});var _2t=s(QX);FJo=r(_2t,"XLNetForQuestionAnsweringSimple"),_2t.forEach(t),TJo=r(FSe," (XLNet model)"),FSe.forEach(t),MJo=i(X),mF=n(X,"LI",{});var TSe=s(mF);w_e=n(TSe,"STRONG",{});var u2t=s(w_e);EJo=r(u2t,"yoso"),u2t.forEach(t),CJo=r(TSe," \u2014 "),HX=n(TSe,"A",{href:!0});var b2t=s(HX);wJo=r(b2t,"YosoForQuestionAnswering"),b2t.forEach(t),AJo=r(TSe," (YOSO model)"),TSe.forEach(t),X.forEach(t),LJo=i(ca),gF=n(ca,"P",{});var MSe=s(gF);yJo=r(MSe,"The model is set in evaluation mode by default using "),A_e=n(MSe,"CODE",{});var v2t=s(A_e);xJo=r(v2t,"model.eval()"),v2t.forEach(t),$Jo=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(MSe,"CODE",{});var F2t=s(L_e);kJo=r(F2t,"model.train()"),F2t.forEach(t),MSe.forEach(t),SJo=i(ca),T(hF.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),aDe=i(f),rd=n(f,"H2",{class:!0});var iOe=s(rd);pF=n(iOe,"A",{id:!0,class:!0,href:!0});var T2t=s(pF);y_e=n(T2t,"SPAN",{});var M2t=s(y_e);T(pL.$$.fragment,M2t),M2t.forEach(t),T2t.forEach(t),RJo=i(iOe),x_e=n(iOe,"SPAN",{});var E2t=s(x_e);PJo=r(E2t,"AutoModelForTableQuestionAnswering"),E2t.forEach(t),iOe.forEach(t),nDe=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(_L.$$.fragment,Zs),BJo=i(Zs),td=n(Zs,"P",{});var Eee=s(td);IJo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UX=n(Eee,"A",{href:!0});var C2t=s(UX);NJo=r(C2t,"from_pretrained()"),C2t.forEach(t),qJo=r(Eee," class method or the "),JX=n(Eee,"A",{href:!0});var w2t=s(JX);jJo=r(w2t,"from_config()"),w2t.forEach(t),DJo=r(Eee,` class
method.`),Eee.forEach(t),GJo=i(Zs),uL=n(Zs,"P",{});var dOe=s(uL);OJo=r(dOe,"This class cannot be instantiated directly using "),$_e=n(dOe,"CODE",{});var A2t=s($_e);VJo=r(A2t,"__init__()"),A2t.forEach(t),XJo=r(dOe," (throws an error)."),dOe.forEach(t),zJo=i(Zs),gt=n(Zs,"DIV",{class:!0});var u0=s(gt);T(bL.$$.fragment,u0),WJo=i(u0),k_e=n(u0,"P",{});var L2t=s(k_e);QJo=r(L2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),L2t.forEach(t),HJo=i(u0),ad=n(u0,"P",{});var Cee=s(ad);UJo=r(Cee,`Note:
Loading a model from its configuration file does `),S_e=n(Cee,"STRONG",{});var y2t=s(S_e);JJo=r(y2t,"not"),y2t.forEach(t),YJo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(Cee,"A",{href:!0});var x2t=s(YX);KJo=r(x2t,"from_pretrained()"),x2t.forEach(t),ZJo=r(Cee," to load the model weights."),Cee.forEach(t),eYo=i(u0),T(_F.$$.fragment,u0),u0.forEach(t),oYo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(vL.$$.fragment,fa),rYo=i(fa),R_e=n(fa,"P",{});var $2t=s(R_e);tYo=r($2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$2t.forEach(t),aYo=i(fa),qa=n(fa,"P",{});var b0=s(qa);nYo=r(b0,"The model class to instantiate is selected based on the "),P_e=n(b0,"CODE",{});var k2t=s(P_e);sYo=r(k2t,"model_type"),k2t.forEach(t),lYo=r(b0,` property of the config object (either
passed as an argument or loaded from `),B_e=n(b0,"CODE",{});var S2t=s(B_e);iYo=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),dYo=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(b0,"CODE",{});var R2t=s(I_e);cYo=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),fYo=r(b0,":"),b0.forEach(t),mYo=i(fa),N_e=n(fa,"UL",{});var P2t=s(N_e);uF=n(P2t,"LI",{});var ESe=s(uF);q_e=n(ESe,"STRONG",{});var B2t=s(q_e);gYo=r(B2t,"tapas"),B2t.forEach(t),hYo=r(ESe," \u2014 "),KX=n(ESe,"A",{href:!0});var I2t=s(KX);pYo=r(I2t,"TapasForQuestionAnswering"),I2t.forEach(t),_Yo=r(ESe," (TAPAS model)"),ESe.forEach(t),P2t.forEach(t),uYo=i(fa),bF=n(fa,"P",{});var CSe=s(bF);bYo=r(CSe,"The model is set in evaluation mode by default using "),j_e=n(CSe,"CODE",{});var N2t=s(j_e);vYo=r(N2t,"model.eval()"),N2t.forEach(t),FYo=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(CSe,"CODE",{});var q2t=s(D_e);TYo=r(q2t,"model.train()"),q2t.forEach(t),CSe.forEach(t),MYo=i(fa),T(vF.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),sDe=i(f),nd=n(f,"H2",{class:!0});var cOe=s(nd);FF=n(cOe,"A",{id:!0,class:!0,href:!0});var j2t=s(FF);G_e=n(j2t,"SPAN",{});var D2t=s(G_e);T(FL.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),EYo=i(cOe),O_e=n(cOe,"SPAN",{});var G2t=s(O_e);CYo=r(G2t,"AutoModelForImageClassification"),G2t.forEach(t),cOe.forEach(t),lDe=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(TL.$$.fragment,el),wYo=i(el),sd=n(el,"P",{});var wee=s(sd);AYo=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZX=n(wee,"A",{href:!0});var O2t=s(ZX);LYo=r(O2t,"from_pretrained()"),O2t.forEach(t),yYo=r(wee," class method or the "),ez=n(wee,"A",{href:!0});var V2t=s(ez);xYo=r(V2t,"from_config()"),V2t.forEach(t),$Yo=r(wee,` class
method.`),wee.forEach(t),kYo=i(el),ML=n(el,"P",{});var fOe=s(ML);SYo=r(fOe,"This class cannot be instantiated directly using "),V_e=n(fOe,"CODE",{});var X2t=s(V_e);RYo=r(X2t,"__init__()"),X2t.forEach(t),PYo=r(fOe," (throws an error)."),fOe.forEach(t),BYo=i(el),ht=n(el,"DIV",{class:!0});var v0=s(ht);T(EL.$$.fragment,v0),IYo=i(v0),X_e=n(v0,"P",{});var z2t=s(X_e);NYo=r(z2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z2t.forEach(t),qYo=i(v0),ld=n(v0,"P",{});var Aee=s(ld);jYo=r(Aee,`Note:
Loading a model from its configuration file does `),z_e=n(Aee,"STRONG",{});var W2t=s(z_e);DYo=r(W2t,"not"),W2t.forEach(t),GYo=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(Aee,"A",{href:!0});var Q2t=s(oz);OYo=r(Q2t,"from_pretrained()"),Q2t.forEach(t),VYo=r(Aee," to load the model weights."),Aee.forEach(t),XYo=i(v0),T(TF.$$.fragment,v0),v0.forEach(t),zYo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(CL.$$.fragment,ma),WYo=i(ma),W_e=n(ma,"P",{});var H2t=s(W_e);QYo=r(H2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H2t.forEach(t),HYo=i(ma),ja=n(ma,"P",{});var F0=s(ja);UYo=r(F0,"The model class to instantiate is selected based on the "),Q_e=n(F0,"CODE",{});var U2t=s(Q_e);JYo=r(U2t,"model_type"),U2t.forEach(t),YYo=r(F0,` property of the config object (either
passed as an argument or loaded from `),H_e=n(F0,"CODE",{});var J2t=s(H_e);KYo=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),ZYo=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(F0,"CODE",{});var Y2t=s(U_e);eKo=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),oKo=r(F0,":"),F0.forEach(t),rKo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);MF=n(Te,"LI",{});var wSe=s(MF);J_e=n(wSe,"STRONG",{});var K2t=s(J_e);tKo=r(K2t,"beit"),K2t.forEach(t),aKo=r(wSe," \u2014 "),rz=n(wSe,"A",{href:!0});var Z2t=s(rz);nKo=r(Z2t,"BeitForImageClassification"),Z2t.forEach(t),sKo=r(wSe," (BEiT model)"),wSe.forEach(t),lKo=i(Te),EF=n(Te,"LI",{});var ASe=s(EF);Y_e=n(ASe,"STRONG",{});var evt=s(Y_e);iKo=r(evt,"convnext"),evt.forEach(t),dKo=r(ASe," \u2014 "),tz=n(ASe,"A",{href:!0});var ovt=s(tz);cKo=r(ovt,"ConvNextForImageClassification"),ovt.forEach(t),fKo=r(ASe," (ConvNeXT model)"),ASe.forEach(t),mKo=i(Te),CF=n(Te,"LI",{});var LSe=s(CF);K_e=n(LSe,"STRONG",{});var rvt=s(K_e);gKo=r(rvt,"cvt"),rvt.forEach(t),hKo=r(LSe," \u2014 "),az=n(LSe,"A",{href:!0});var tvt=s(az);pKo=r(tvt,"CvtForImageClassification"),tvt.forEach(t),_Ko=r(LSe," (CvT model)"),LSe.forEach(t),uKo=i(Te),wF=n(Te,"LI",{});var ySe=s(wF);Z_e=n(ySe,"STRONG",{});var avt=s(Z_e);bKo=r(avt,"data2vec-vision"),avt.forEach(t),vKo=r(ySe," \u2014 "),nz=n(ySe,"A",{href:!0});var nvt=s(nz);FKo=r(nvt,"Data2VecVisionForImageClassification"),nvt.forEach(t),TKo=r(ySe," (Data2VecVision model)"),ySe.forEach(t),MKo=i(Te),Bs=n(Te,"LI",{});var dk=s(Bs);eue=n(dk,"STRONG",{});var svt=s(eue);EKo=r(svt,"deit"),svt.forEach(t),CKo=r(dk," \u2014 "),sz=n(dk,"A",{href:!0});var lvt=s(sz);wKo=r(lvt,"DeiTForImageClassification"),lvt.forEach(t),AKo=r(dk," or "),lz=n(dk,"A",{href:!0});var ivt=s(lz);LKo=r(ivt,"DeiTForImageClassificationWithTeacher"),ivt.forEach(t),yKo=r(dk," (DeiT model)"),dk.forEach(t),xKo=i(Te),AF=n(Te,"LI",{});var xSe=s(AF);oue=n(xSe,"STRONG",{});var dvt=s(oue);$Ko=r(dvt,"imagegpt"),dvt.forEach(t),kKo=r(xSe," \u2014 "),iz=n(xSe,"A",{href:!0});var cvt=s(iz);SKo=r(cvt,"ImageGPTForImageClassification"),cvt.forEach(t),RKo=r(xSe," (ImageGPT model)"),xSe.forEach(t),PKo=i(Te),Is=n(Te,"LI",{});var ck=s(Is);rue=n(ck,"STRONG",{});var fvt=s(rue);BKo=r(fvt,"levit"),fvt.forEach(t),IKo=r(ck," \u2014 "),dz=n(ck,"A",{href:!0});var mvt=s(dz);NKo=r(mvt,"LevitForImageClassification"),mvt.forEach(t),qKo=r(ck," or "),cz=n(ck,"A",{href:!0});var gvt=s(cz);jKo=r(gvt,"LevitForImageClassificationWithTeacher"),gvt.forEach(t),DKo=r(ck," (LeViT model)"),ck.forEach(t),GKo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);tue=n(pf,"STRONG",{});var hvt=s(tue);OKo=r(hvt,"perceiver"),hvt.forEach(t),VKo=r(pf," \u2014 "),fz=n(pf,"A",{href:!0});var pvt=s(fz);XKo=r(pvt,"PerceiverForImageClassificationLearned"),pvt.forEach(t),zKo=r(pf," or "),mz=n(pf,"A",{href:!0});var _vt=s(mz);WKo=r(_vt,"PerceiverForImageClassificationFourier"),_vt.forEach(t),QKo=r(pf," or "),gz=n(pf,"A",{href:!0});var uvt=s(gz);HKo=r(uvt,"PerceiverForImageClassificationConvProcessing"),uvt.forEach(t),UKo=r(pf," (Perceiver model)"),pf.forEach(t),JKo=i(Te),LF=n(Te,"LI",{});var $Se=s(LF);aue=n($Se,"STRONG",{});var bvt=s(aue);YKo=r(bvt,"poolformer"),bvt.forEach(t),KKo=r($Se," \u2014 "),hz=n($Se,"A",{href:!0});var vvt=s(hz);ZKo=r(vvt,"PoolFormerForImageClassification"),vvt.forEach(t),eZo=r($Se," (PoolFormer model)"),$Se.forEach(t),oZo=i(Te),yF=n(Te,"LI",{});var kSe=s(yF);nue=n(kSe,"STRONG",{});var Fvt=s(nue);rZo=r(Fvt,"regnet"),Fvt.forEach(t),tZo=r(kSe," \u2014 "),pz=n(kSe,"A",{href:!0});var Tvt=s(pz);aZo=r(Tvt,"RegNetForImageClassification"),Tvt.forEach(t),nZo=r(kSe," (RegNet model)"),kSe.forEach(t),sZo=i(Te),xF=n(Te,"LI",{});var SSe=s(xF);sue=n(SSe,"STRONG",{});var Mvt=s(sue);lZo=r(Mvt,"resnet"),Mvt.forEach(t),iZo=r(SSe," \u2014 "),_z=n(SSe,"A",{href:!0});var Evt=s(_z);dZo=r(Evt,"ResNetForImageClassification"),Evt.forEach(t),cZo=r(SSe," (ResNet model)"),SSe.forEach(t),fZo=i(Te),$F=n(Te,"LI",{});var RSe=s($F);lue=n(RSe,"STRONG",{});var Cvt=s(lue);mZo=r(Cvt,"segformer"),Cvt.forEach(t),gZo=r(RSe," \u2014 "),uz=n(RSe,"A",{href:!0});var wvt=s(uz);hZo=r(wvt,"SegformerForImageClassification"),wvt.forEach(t),pZo=r(RSe," (SegFormer model)"),RSe.forEach(t),_Zo=i(Te),kF=n(Te,"LI",{});var PSe=s(kF);iue=n(PSe,"STRONG",{});var Avt=s(iue);uZo=r(Avt,"swin"),Avt.forEach(t),bZo=r(PSe," \u2014 "),bz=n(PSe,"A",{href:!0});var Lvt=s(bz);vZo=r(Lvt,"SwinForImageClassification"),Lvt.forEach(t),FZo=r(PSe," (Swin Transformer model)"),PSe.forEach(t),TZo=i(Te),SF=n(Te,"LI",{});var BSe=s(SF);due=n(BSe,"STRONG",{});var yvt=s(due);MZo=r(yvt,"van"),yvt.forEach(t),EZo=r(BSe," \u2014 "),vz=n(BSe,"A",{href:!0});var xvt=s(vz);CZo=r(xvt,"VanForImageClassification"),xvt.forEach(t),wZo=r(BSe," (VAN model)"),BSe.forEach(t),AZo=i(Te),RF=n(Te,"LI",{});var ISe=s(RF);cue=n(ISe,"STRONG",{});var $vt=s(cue);LZo=r($vt,"vit"),$vt.forEach(t),yZo=r(ISe," \u2014 "),Fz=n(ISe,"A",{href:!0});var kvt=s(Fz);xZo=r(kvt,"ViTForImageClassification"),kvt.forEach(t),$Zo=r(ISe," (ViT model)"),ISe.forEach(t),Te.forEach(t),kZo=i(ma),PF=n(ma,"P",{});var NSe=s(PF);SZo=r(NSe,"The model is set in evaluation mode by default using "),fue=n(NSe,"CODE",{});var Svt=s(fue);RZo=r(Svt,"model.eval()"),Svt.forEach(t),PZo=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(NSe,"CODE",{});var Rvt=s(mue);BZo=r(Rvt,"model.train()"),Rvt.forEach(t),NSe.forEach(t),IZo=i(ma),T(BF.$$.fragment,ma),ma.forEach(t),el.forEach(t),iDe=i(f),id=n(f,"H2",{class:!0});var mOe=s(id);IF=n(mOe,"A",{id:!0,class:!0,href:!0});var Pvt=s(IF);gue=n(Pvt,"SPAN",{});var Bvt=s(gue);T(wL.$$.fragment,Bvt),Bvt.forEach(t),Pvt.forEach(t),NZo=i(mOe),hue=n(mOe,"SPAN",{});var Ivt=s(hue);qZo=r(Ivt,"AutoModelForVision2Seq"),Ivt.forEach(t),mOe.forEach(t),dDe=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(AL.$$.fragment,ol),jZo=i(ol),dd=n(ol,"P",{});var Lee=s(dd);DZo=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Tz=n(Lee,"A",{href:!0});var Nvt=s(Tz);GZo=r(Nvt,"from_pretrained()"),Nvt.forEach(t),OZo=r(Lee," class method or the "),Mz=n(Lee,"A",{href:!0});var qvt=s(Mz);VZo=r(qvt,"from_config()"),qvt.forEach(t),XZo=r(Lee,` class
method.`),Lee.forEach(t),zZo=i(ol),LL=n(ol,"P",{});var gOe=s(LL);WZo=r(gOe,"This class cannot be instantiated directly using "),pue=n(gOe,"CODE",{});var jvt=s(pue);QZo=r(jvt,"__init__()"),jvt.forEach(t),HZo=r(gOe," (throws an error)."),gOe.forEach(t),UZo=i(ol),_t=n(ol,"DIV",{class:!0});var T0=s(_t);T(yL.$$.fragment,T0),JZo=i(T0),_ue=n(T0,"P",{});var Dvt=s(_ue);YZo=r(Dvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dvt.forEach(t),KZo=i(T0),cd=n(T0,"P",{});var yee=s(cd);ZZo=r(yee,`Note:
Loading a model from its configuration file does `),uue=n(yee,"STRONG",{});var Gvt=s(uue);eer=r(Gvt,"not"),Gvt.forEach(t),oer=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(yee,"A",{href:!0});var Ovt=s(Ez);rer=r(Ovt,"from_pretrained()"),Ovt.forEach(t),ter=r(yee," to load the model weights."),yee.forEach(t),aer=i(T0),T(NF.$$.fragment,T0),T0.forEach(t),ner=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(xL.$$.fragment,ga),ser=i(ga),bue=n(ga,"P",{});var Vvt=s(bue);ler=r(Vvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vvt.forEach(t),ier=i(ga),Da=n(ga,"P",{});var M0=s(Da);der=r(M0,"The model class to instantiate is selected based on the "),vue=n(M0,"CODE",{});var Xvt=s(vue);cer=r(Xvt,"model_type"),Xvt.forEach(t),fer=r(M0,` property of the config object (either
passed as an argument or loaded from `),Fue=n(M0,"CODE",{});var zvt=s(Fue);mer=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),ger=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(M0,"CODE",{});var Wvt=s(Tue);her=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),per=r(M0,":"),M0.forEach(t),_er=i(ga),Mue=n(ga,"UL",{});var Qvt=s(Mue);qF=n(Qvt,"LI",{});var qSe=s(qF);Eue=n(qSe,"STRONG",{});var Hvt=s(Eue);uer=r(Hvt,"vision-encoder-decoder"),Hvt.forEach(t),ber=r(qSe," \u2014 "),Cz=n(qSe,"A",{href:!0});var Uvt=s(Cz);ver=r(Uvt,"VisionEncoderDecoderModel"),Uvt.forEach(t),Fer=r(qSe," (Vision Encoder decoder model)"),qSe.forEach(t),Qvt.forEach(t),Ter=i(ga),jF=n(ga,"P",{});var jSe=s(jF);Mer=r(jSe,"The model is set in evaluation mode by default using "),Cue=n(jSe,"CODE",{});var Jvt=s(Cue);Eer=r(Jvt,"model.eval()"),Jvt.forEach(t),Cer=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(jSe,"CODE",{});var Yvt=s(wue);wer=r(Yvt,"model.train()"),Yvt.forEach(t),jSe.forEach(t),Aer=i(ga),T(DF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),cDe=i(f),fd=n(f,"H2",{class:!0});var hOe=s(fd);GF=n(hOe,"A",{id:!0,class:!0,href:!0});var Kvt=s(GF);Aue=n(Kvt,"SPAN",{});var Zvt=s(Aue);T($L.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),Ler=i(hOe),Lue=n(hOe,"SPAN",{});var e3t=s(Lue);yer=r(e3t,"AutoModelForAudioClassification"),e3t.forEach(t),hOe.forEach(t),fDe=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(kL.$$.fragment,rl),xer=i(rl),md=n(rl,"P",{});var xee=s(md);$er=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wz=n(xee,"A",{href:!0});var o3t=s(wz);ker=r(o3t,"from_pretrained()"),o3t.forEach(t),Ser=r(xee," class method or the "),Az=n(xee,"A",{href:!0});var r3t=s(Az);Rer=r(r3t,"from_config()"),r3t.forEach(t),Per=r(xee,` class
method.`),xee.forEach(t),Ber=i(rl),SL=n(rl,"P",{});var pOe=s(SL);Ier=r(pOe,"This class cannot be instantiated directly using "),yue=n(pOe,"CODE",{});var t3t=s(yue);Ner=r(t3t,"__init__()"),t3t.forEach(t),qer=r(pOe," (throws an error)."),pOe.forEach(t),jer=i(rl),ut=n(rl,"DIV",{class:!0});var E0=s(ut);T(RL.$$.fragment,E0),Der=i(E0),xue=n(E0,"P",{});var a3t=s(xue);Ger=r(a3t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),a3t.forEach(t),Oer=i(E0),gd=n(E0,"P",{});var $ee=s(gd);Ver=r($ee,`Note:
Loading a model from its configuration file does `),$ue=n($ee,"STRONG",{});var n3t=s($ue);Xer=r(n3t,"not"),n3t.forEach(t),zer=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n($ee,"A",{href:!0});var s3t=s(Lz);Wer=r(s3t,"from_pretrained()"),s3t.forEach(t),Qer=r($ee," to load the model weights."),$ee.forEach(t),Her=i(E0),T(OF.$$.fragment,E0),E0.forEach(t),Uer=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(PL.$$.fragment,ha),Jer=i(ha),kue=n(ha,"P",{});var l3t=s(kue);Yer=r(l3t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),l3t.forEach(t),Ker=i(ha),Ga=n(ha,"P",{});var C0=s(Ga);Zer=r(C0,"The model class to instantiate is selected based on the "),Sue=n(C0,"CODE",{});var i3t=s(Sue);eor=r(i3t,"model_type"),i3t.forEach(t),oor=r(C0,` property of the config object (either
passed as an argument or loaded from `),Rue=n(C0,"CODE",{});var d3t=s(Rue);ror=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),tor=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(C0,"CODE",{});var c3t=s(Pue);aor=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),nor=r(C0,":"),C0.forEach(t),sor=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);VF=n(Xe,"LI",{});var DSe=s(VF);Bue=n(DSe,"STRONG",{});var f3t=s(Bue);lor=r(f3t,"data2vec-audio"),f3t.forEach(t),ior=r(DSe," \u2014 "),yz=n(DSe,"A",{href:!0});var m3t=s(yz);dor=r(m3t,"Data2VecAudioForSequenceClassification"),m3t.forEach(t),cor=r(DSe," (Data2VecAudio model)"),DSe.forEach(t),mor=i(Xe),XF=n(Xe,"LI",{});var GSe=s(XF);Iue=n(GSe,"STRONG",{});var g3t=s(Iue);gor=r(g3t,"hubert"),g3t.forEach(t),hor=r(GSe," \u2014 "),xz=n(GSe,"A",{href:!0});var h3t=s(xz);por=r(h3t,"HubertForSequenceClassification"),h3t.forEach(t),_or=r(GSe," (Hubert model)"),GSe.forEach(t),uor=i(Xe),zF=n(Xe,"LI",{});var OSe=s(zF);Nue=n(OSe,"STRONG",{});var p3t=s(Nue);bor=r(p3t,"sew"),p3t.forEach(t),vor=r(OSe," \u2014 "),$z=n(OSe,"A",{href:!0});var _3t=s($z);For=r(_3t,"SEWForSequenceClassification"),_3t.forEach(t),Tor=r(OSe," (SEW model)"),OSe.forEach(t),Mor=i(Xe),WF=n(Xe,"LI",{});var VSe=s(WF);que=n(VSe,"STRONG",{});var u3t=s(que);Eor=r(u3t,"sew-d"),u3t.forEach(t),Cor=r(VSe," \u2014 "),kz=n(VSe,"A",{href:!0});var b3t=s(kz);wor=r(b3t,"SEWDForSequenceClassification"),b3t.forEach(t),Aor=r(VSe," (SEW-D model)"),VSe.forEach(t),Lor=i(Xe),QF=n(Xe,"LI",{});var XSe=s(QF);jue=n(XSe,"STRONG",{});var v3t=s(jue);yor=r(v3t,"unispeech"),v3t.forEach(t),xor=r(XSe," \u2014 "),Sz=n(XSe,"A",{href:!0});var F3t=s(Sz);$or=r(F3t,"UniSpeechForSequenceClassification"),F3t.forEach(t),kor=r(XSe," (UniSpeech model)"),XSe.forEach(t),Sor=i(Xe),HF=n(Xe,"LI",{});var zSe=s(HF);Due=n(zSe,"STRONG",{});var T3t=s(Due);Ror=r(T3t,"unispeech-sat"),T3t.forEach(t),Por=r(zSe," \u2014 "),Rz=n(zSe,"A",{href:!0});var M3t=s(Rz);Bor=r(M3t,"UniSpeechSatForSequenceClassification"),M3t.forEach(t),Ior=r(zSe," (UniSpeechSat model)"),zSe.forEach(t),Nor=i(Xe),UF=n(Xe,"LI",{});var WSe=s(UF);Gue=n(WSe,"STRONG",{});var E3t=s(Gue);qor=r(E3t,"wav2vec2"),E3t.forEach(t),jor=r(WSe," \u2014 "),Pz=n(WSe,"A",{href:!0});var C3t=s(Pz);Dor=r(C3t,"Wav2Vec2ForSequenceClassification"),C3t.forEach(t),Gor=r(WSe," (Wav2Vec2 model)"),WSe.forEach(t),Oor=i(Xe),JF=n(Xe,"LI",{});var QSe=s(JF);Oue=n(QSe,"STRONG",{});var w3t=s(Oue);Vor=r(w3t,"wav2vec2-conformer"),w3t.forEach(t),Xor=r(QSe," \u2014 "),Bz=n(QSe,"A",{href:!0});var A3t=s(Bz);zor=r(A3t,"Wav2Vec2ConformerForSequenceClassification"),A3t.forEach(t),Wor=r(QSe," (Wav2Vec2-Conformer model)"),QSe.forEach(t),Qor=i(Xe),YF=n(Xe,"LI",{});var HSe=s(YF);Vue=n(HSe,"STRONG",{});var L3t=s(Vue);Hor=r(L3t,"wavlm"),L3t.forEach(t),Uor=r(HSe," \u2014 "),Iz=n(HSe,"A",{href:!0});var y3t=s(Iz);Jor=r(y3t,"WavLMForSequenceClassification"),y3t.forEach(t),Yor=r(HSe," (WavLM model)"),HSe.forEach(t),Xe.forEach(t),Kor=i(ha),KF=n(ha,"P",{});var USe=s(KF);Zor=r(USe,"The model is set in evaluation mode by default using "),Xue=n(USe,"CODE",{});var x3t=s(Xue);err=r(x3t,"model.eval()"),x3t.forEach(t),orr=r(USe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(USe,"CODE",{});var $3t=s(zue);rrr=r($3t,"model.train()"),$3t.forEach(t),USe.forEach(t),trr=i(ha),T(ZF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),mDe=i(f),hd=n(f,"H2",{class:!0});var _Oe=s(hd);e6=n(_Oe,"A",{id:!0,class:!0,href:!0});var k3t=s(e6);Wue=n(k3t,"SPAN",{});var S3t=s(Wue);T(BL.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),arr=i(_Oe),Que=n(_Oe,"SPAN",{});var R3t=s(Que);nrr=r(R3t,"AutoModelForAudioFrameClassification"),R3t.forEach(t),_Oe.forEach(t),gDe=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(IL.$$.fragment,tl),srr=i(tl),pd=n(tl,"P",{});var kee=s(pd);lrr=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Nz=n(kee,"A",{href:!0});var P3t=s(Nz);irr=r(P3t,"from_pretrained()"),P3t.forEach(t),drr=r(kee," class method or the "),qz=n(kee,"A",{href:!0});var B3t=s(qz);crr=r(B3t,"from_config()"),B3t.forEach(t),frr=r(kee,` class
method.`),kee.forEach(t),mrr=i(tl),NL=n(tl,"P",{});var uOe=s(NL);grr=r(uOe,"This class cannot be instantiated directly using "),Hue=n(uOe,"CODE",{});var I3t=s(Hue);hrr=r(I3t,"__init__()"),I3t.forEach(t),prr=r(uOe," (throws an error)."),uOe.forEach(t),_rr=i(tl),bt=n(tl,"DIV",{class:!0});var w0=s(bt);T(qL.$$.fragment,w0),urr=i(w0),Uue=n(w0,"P",{});var N3t=s(Uue);brr=r(N3t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),N3t.forEach(t),vrr=i(w0),_d=n(w0,"P",{});var See=s(_d);Frr=r(See,`Note:
Loading a model from its configuration file does `),Jue=n(See,"STRONG",{});var q3t=s(Jue);Trr=r(q3t,"not"),q3t.forEach(t),Mrr=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(See,"A",{href:!0});var j3t=s(jz);Err=r(j3t,"from_pretrained()"),j3t.forEach(t),Crr=r(See," to load the model weights."),See.forEach(t),wrr=i(w0),T(o6.$$.fragment,w0),w0.forEach(t),Arr=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(jL.$$.fragment,pa),Lrr=i(pa),Yue=n(pa,"P",{});var D3t=s(Yue);yrr=r(D3t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),D3t.forEach(t),xrr=i(pa),Oa=n(pa,"P",{});var A0=s(Oa);$rr=r(A0,"The model class to instantiate is selected based on the "),Kue=n(A0,"CODE",{});var G3t=s(Kue);krr=r(G3t,"model_type"),G3t.forEach(t),Srr=r(A0,` property of the config object (either
passed as an argument or loaded from `),Zue=n(A0,"CODE",{});var O3t=s(Zue);Rrr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),Prr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(A0,"CODE",{});var V3t=s(e1e);Brr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),Irr=r(A0,":"),A0.forEach(t),Nrr=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);r6=n(al,"LI",{});var JSe=s(r6);o1e=n(JSe,"STRONG",{});var X3t=s(o1e);qrr=r(X3t,"data2vec-audio"),X3t.forEach(t),jrr=r(JSe," \u2014 "),Dz=n(JSe,"A",{href:!0});var z3t=s(Dz);Drr=r(z3t,"Data2VecAudioForAudioFrameClassification"),z3t.forEach(t),Grr=r(JSe," (Data2VecAudio model)"),JSe.forEach(t),Orr=i(al),t6=n(al,"LI",{});var YSe=s(t6);r1e=n(YSe,"STRONG",{});var W3t=s(r1e);Vrr=r(W3t,"unispeech-sat"),W3t.forEach(t),Xrr=r(YSe," \u2014 "),Gz=n(YSe,"A",{href:!0});var Q3t=s(Gz);zrr=r(Q3t,"UniSpeechSatForAudioFrameClassification"),Q3t.forEach(t),Wrr=r(YSe," (UniSpeechSat model)"),YSe.forEach(t),Qrr=i(al),a6=n(al,"LI",{});var KSe=s(a6);t1e=n(KSe,"STRONG",{});var H3t=s(t1e);Hrr=r(H3t,"wav2vec2"),H3t.forEach(t),Urr=r(KSe," \u2014 "),Oz=n(KSe,"A",{href:!0});var U3t=s(Oz);Jrr=r(U3t,"Wav2Vec2ForAudioFrameClassification"),U3t.forEach(t),Yrr=r(KSe," (Wav2Vec2 model)"),KSe.forEach(t),Krr=i(al),n6=n(al,"LI",{});var ZSe=s(n6);a1e=n(ZSe,"STRONG",{});var J3t=s(a1e);Zrr=r(J3t,"wav2vec2-conformer"),J3t.forEach(t),etr=r(ZSe," \u2014 "),Vz=n(ZSe,"A",{href:!0});var Y3t=s(Vz);otr=r(Y3t,"Wav2Vec2ConformerForAudioFrameClassification"),Y3t.forEach(t),rtr=r(ZSe," (Wav2Vec2-Conformer model)"),ZSe.forEach(t),ttr=i(al),s6=n(al,"LI",{});var eRe=s(s6);n1e=n(eRe,"STRONG",{});var K3t=s(n1e);atr=r(K3t,"wavlm"),K3t.forEach(t),ntr=r(eRe," \u2014 "),Xz=n(eRe,"A",{href:!0});var Z3t=s(Xz);str=r(Z3t,"WavLMForAudioFrameClassification"),Z3t.forEach(t),ltr=r(eRe," (WavLM model)"),eRe.forEach(t),al.forEach(t),itr=i(pa),l6=n(pa,"P",{});var oRe=s(l6);dtr=r(oRe,"The model is set in evaluation mode by default using "),s1e=n(oRe,"CODE",{});var eFt=s(s1e);ctr=r(eFt,"model.eval()"),eFt.forEach(t),ftr=r(oRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=n(oRe,"CODE",{});var oFt=s(l1e);mtr=r(oFt,"model.train()"),oFt.forEach(t),oRe.forEach(t),gtr=i(pa),T(i6.$$.fragment,pa),pa.forEach(t),tl.forEach(t),hDe=i(f),ud=n(f,"H2",{class:!0});var bOe=s(ud);d6=n(bOe,"A",{id:!0,class:!0,href:!0});var rFt=s(d6);i1e=n(rFt,"SPAN",{});var tFt=s(i1e);T(DL.$$.fragment,tFt),tFt.forEach(t),rFt.forEach(t),htr=i(bOe),d1e=n(bOe,"SPAN",{});var aFt=s(d1e);ptr=r(aFt,"AutoModelForCTC"),aFt.forEach(t),bOe.forEach(t),pDe=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(GL.$$.fragment,nl),_tr=i(nl),bd=n(nl,"P",{});var Ree=s(bd);utr=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),zz=n(Ree,"A",{href:!0});var nFt=s(zz);btr=r(nFt,"from_pretrained()"),nFt.forEach(t),vtr=r(Ree," class method or the "),Wz=n(Ree,"A",{href:!0});var sFt=s(Wz);Ftr=r(sFt,"from_config()"),sFt.forEach(t),Ttr=r(Ree,` class
method.`),Ree.forEach(t),Mtr=i(nl),OL=n(nl,"P",{});var vOe=s(OL);Etr=r(vOe,"This class cannot be instantiated directly using "),c1e=n(vOe,"CODE",{});var lFt=s(c1e);Ctr=r(lFt,"__init__()"),lFt.forEach(t),wtr=r(vOe," (throws an error)."),vOe.forEach(t),Atr=i(nl),vt=n(nl,"DIV",{class:!0});var L0=s(vt);T(VL.$$.fragment,L0),Ltr=i(L0),f1e=n(L0,"P",{});var iFt=s(f1e);ytr=r(iFt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),iFt.forEach(t),xtr=i(L0),vd=n(L0,"P",{});var Pee=s(vd);$tr=r(Pee,`Note:
Loading a model from its configuration file does `),m1e=n(Pee,"STRONG",{});var dFt=s(m1e);ktr=r(dFt,"not"),dFt.forEach(t),Str=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(Pee,"A",{href:!0});var cFt=s(Qz);Rtr=r(cFt,"from_pretrained()"),cFt.forEach(t),Ptr=r(Pee," to load the model weights."),Pee.forEach(t),Btr=i(L0),T(c6.$$.fragment,L0),L0.forEach(t),Itr=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(XL.$$.fragment,_a),Ntr=i(_a),g1e=n(_a,"P",{});var fFt=s(g1e);qtr=r(fFt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fFt.forEach(t),jtr=i(_a),Va=n(_a,"P",{});var y0=s(Va);Dtr=r(y0,"The model class to instantiate is selected based on the "),h1e=n(y0,"CODE",{});var mFt=s(h1e);Gtr=r(mFt,"model_type"),mFt.forEach(t),Otr=r(y0,` property of the config object (either
passed as an argument or loaded from `),p1e=n(y0,"CODE",{});var gFt=s(p1e);Vtr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),Xtr=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(y0,"CODE",{});var hFt=s(_1e);ztr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),Wtr=r(y0,":"),y0.forEach(t),Qtr=i(_a),Le=n(_a,"UL",{});var Be=s(Le);f6=n(Be,"LI",{});var rRe=s(f6);u1e=n(rRe,"STRONG",{});var pFt=s(u1e);Htr=r(pFt,"data2vec-audio"),pFt.forEach(t),Utr=r(rRe," \u2014 "),Hz=n(rRe,"A",{href:!0});var _Ft=s(Hz);Jtr=r(_Ft,"Data2VecAudioForCTC"),_Ft.forEach(t),Ytr=r(rRe," (Data2VecAudio model)"),rRe.forEach(t),Ktr=i(Be),m6=n(Be,"LI",{});var tRe=s(m6);b1e=n(tRe,"STRONG",{});var uFt=s(b1e);Ztr=r(uFt,"hubert"),uFt.forEach(t),ear=r(tRe," \u2014 "),Uz=n(tRe,"A",{href:!0});var bFt=s(Uz);oar=r(bFt,"HubertForCTC"),bFt.forEach(t),rar=r(tRe," (Hubert model)"),tRe.forEach(t),tar=i(Be),g6=n(Be,"LI",{});var aRe=s(g6);v1e=n(aRe,"STRONG",{});var vFt=s(v1e);aar=r(vFt,"mctct"),vFt.forEach(t),nar=r(aRe," \u2014 "),Jz=n(aRe,"A",{href:!0});var FFt=s(Jz);sar=r(FFt,"MCTCTForCTC"),FFt.forEach(t),lar=r(aRe," (M-CTC-T model)"),aRe.forEach(t),iar=i(Be),h6=n(Be,"LI",{});var nRe=s(h6);F1e=n(nRe,"STRONG",{});var TFt=s(F1e);dar=r(TFt,"sew"),TFt.forEach(t),car=r(nRe," \u2014 "),Yz=n(nRe,"A",{href:!0});var MFt=s(Yz);far=r(MFt,"SEWForCTC"),MFt.forEach(t),mar=r(nRe," (SEW model)"),nRe.forEach(t),gar=i(Be),p6=n(Be,"LI",{});var sRe=s(p6);T1e=n(sRe,"STRONG",{});var EFt=s(T1e);har=r(EFt,"sew-d"),EFt.forEach(t),par=r(sRe," \u2014 "),Kz=n(sRe,"A",{href:!0});var CFt=s(Kz);_ar=r(CFt,"SEWDForCTC"),CFt.forEach(t),uar=r(sRe," (SEW-D model)"),sRe.forEach(t),bar=i(Be),_6=n(Be,"LI",{});var lRe=s(_6);M1e=n(lRe,"STRONG",{});var wFt=s(M1e);Far=r(wFt,"unispeech"),wFt.forEach(t),Tar=r(lRe," \u2014 "),Zz=n(lRe,"A",{href:!0});var AFt=s(Zz);Mar=r(AFt,"UniSpeechForCTC"),AFt.forEach(t),Ear=r(lRe," (UniSpeech model)"),lRe.forEach(t),Car=i(Be),u6=n(Be,"LI",{});var iRe=s(u6);E1e=n(iRe,"STRONG",{});var LFt=s(E1e);war=r(LFt,"unispeech-sat"),LFt.forEach(t),Aar=r(iRe," \u2014 "),eW=n(iRe,"A",{href:!0});var yFt=s(eW);Lar=r(yFt,"UniSpeechSatForCTC"),yFt.forEach(t),yar=r(iRe," (UniSpeechSat model)"),iRe.forEach(t),xar=i(Be),b6=n(Be,"LI",{});var dRe=s(b6);C1e=n(dRe,"STRONG",{});var xFt=s(C1e);$ar=r(xFt,"wav2vec2"),xFt.forEach(t),kar=r(dRe," \u2014 "),oW=n(dRe,"A",{href:!0});var $Ft=s(oW);Sar=r($Ft,"Wav2Vec2ForCTC"),$Ft.forEach(t),Rar=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),Par=i(Be),v6=n(Be,"LI",{});var cRe=s(v6);w1e=n(cRe,"STRONG",{});var kFt=s(w1e);Bar=r(kFt,"wav2vec2-conformer"),kFt.forEach(t),Iar=r(cRe," \u2014 "),rW=n(cRe,"A",{href:!0});var SFt=s(rW);Nar=r(SFt,"Wav2Vec2ConformerForCTC"),SFt.forEach(t),qar=r(cRe," (Wav2Vec2-Conformer model)"),cRe.forEach(t),jar=i(Be),F6=n(Be,"LI",{});var fRe=s(F6);A1e=n(fRe,"STRONG",{});var RFt=s(A1e);Dar=r(RFt,"wavlm"),RFt.forEach(t),Gar=r(fRe," \u2014 "),tW=n(fRe,"A",{href:!0});var PFt=s(tW);Oar=r(PFt,"WavLMForCTC"),PFt.forEach(t),Var=r(fRe," (WavLM model)"),fRe.forEach(t),Be.forEach(t),Xar=i(_a),T6=n(_a,"P",{});var mRe=s(T6);zar=r(mRe,"The model is set in evaluation mode by default using "),L1e=n(mRe,"CODE",{});var BFt=s(L1e);War=r(BFt,"model.eval()"),BFt.forEach(t),Qar=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(mRe,"CODE",{});var IFt=s(y1e);Har=r(IFt,"model.train()"),IFt.forEach(t),mRe.forEach(t),Uar=i(_a),T(M6.$$.fragment,_a),_a.forEach(t),nl.forEach(t),_De=i(f),Fd=n(f,"H2",{class:!0});var FOe=s(Fd);E6=n(FOe,"A",{id:!0,class:!0,href:!0});var NFt=s(E6);x1e=n(NFt,"SPAN",{});var qFt=s(x1e);T(zL.$$.fragment,qFt),qFt.forEach(t),NFt.forEach(t),Jar=i(FOe),$1e=n(FOe,"SPAN",{});var jFt=s($1e);Yar=r(jFt,"AutoModelForSpeechSeq2Seq"),jFt.forEach(t),FOe.forEach(t),uDe=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(WL.$$.fragment,sl),Kar=i(sl),Td=n(sl,"P",{});var Bee=s(Td);Zar=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aW=n(Bee,"A",{href:!0});var DFt=s(aW);enr=r(DFt,"from_pretrained()"),DFt.forEach(t),onr=r(Bee," class method or the "),nW=n(Bee,"A",{href:!0});var GFt=s(nW);rnr=r(GFt,"from_config()"),GFt.forEach(t),tnr=r(Bee,` class
method.`),Bee.forEach(t),anr=i(sl),QL=n(sl,"P",{});var TOe=s(QL);nnr=r(TOe,"This class cannot be instantiated directly using "),k1e=n(TOe,"CODE",{});var OFt=s(k1e);snr=r(OFt,"__init__()"),OFt.forEach(t),lnr=r(TOe," (throws an error)."),TOe.forEach(t),inr=i(sl),Ft=n(sl,"DIV",{class:!0});var x0=s(Ft);T(HL.$$.fragment,x0),dnr=i(x0),S1e=n(x0,"P",{});var VFt=s(S1e);cnr=r(VFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),VFt.forEach(t),fnr=i(x0),Md=n(x0,"P",{});var Iee=s(Md);mnr=r(Iee,`Note:
Loading a model from its configuration file does `),R1e=n(Iee,"STRONG",{});var XFt=s(R1e);gnr=r(XFt,"not"),XFt.forEach(t),hnr=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Iee,"A",{href:!0});var zFt=s(sW);pnr=r(zFt,"from_pretrained()"),zFt.forEach(t),_nr=r(Iee," to load the model weights."),Iee.forEach(t),unr=i(x0),T(C6.$$.fragment,x0),x0.forEach(t),bnr=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(UL.$$.fragment,ua),vnr=i(ua),P1e=n(ua,"P",{});var WFt=s(P1e);Fnr=r(WFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WFt.forEach(t),Tnr=i(ua),Xa=n(ua,"P",{});var $0=s(Xa);Mnr=r($0,"The model class to instantiate is selected based on the "),B1e=n($0,"CODE",{});var QFt=s(B1e);Enr=r(QFt,"model_type"),QFt.forEach(t),Cnr=r($0,` property of the config object (either
passed as an argument or loaded from `),I1e=n($0,"CODE",{});var HFt=s(I1e);wnr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),Anr=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n($0,"CODE",{});var UFt=s(N1e);Lnr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),ynr=r($0,":"),$0.forEach(t),xnr=i(ua),JL=n(ua,"UL",{});var MOe=s(JL);w6=n(MOe,"LI",{});var gRe=s(w6);q1e=n(gRe,"STRONG",{});var JFt=s(q1e);$nr=r(JFt,"speech-encoder-decoder"),JFt.forEach(t),knr=r(gRe," \u2014 "),lW=n(gRe,"A",{href:!0});var YFt=s(lW);Snr=r(YFt,"SpeechEncoderDecoderModel"),YFt.forEach(t),Rnr=r(gRe," (Speech Encoder decoder model)"),gRe.forEach(t),Pnr=i(MOe),A6=n(MOe,"LI",{});var hRe=s(A6);j1e=n(hRe,"STRONG",{});var KFt=s(j1e);Bnr=r(KFt,"speech_to_text"),KFt.forEach(t),Inr=r(hRe," \u2014 "),iW=n(hRe,"A",{href:!0});var ZFt=s(iW);Nnr=r(ZFt,"Speech2TextForConditionalGeneration"),ZFt.forEach(t),qnr=r(hRe," (Speech2Text model)"),hRe.forEach(t),MOe.forEach(t),jnr=i(ua),L6=n(ua,"P",{});var pRe=s(L6);Dnr=r(pRe,"The model is set in evaluation mode by default using "),D1e=n(pRe,"CODE",{});var e6t=s(D1e);Gnr=r(e6t,"model.eval()"),e6t.forEach(t),Onr=r(pRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(pRe,"CODE",{});var o6t=s(G1e);Vnr=r(o6t,"model.train()"),o6t.forEach(t),pRe.forEach(t),Xnr=i(ua),T(y6.$$.fragment,ua),ua.forEach(t),sl.forEach(t),bDe=i(f),Ed=n(f,"H2",{class:!0});var EOe=s(Ed);x6=n(EOe,"A",{id:!0,class:!0,href:!0});var r6t=s(x6);O1e=n(r6t,"SPAN",{});var t6t=s(O1e);T(YL.$$.fragment,t6t),t6t.forEach(t),r6t.forEach(t),znr=i(EOe),V1e=n(EOe,"SPAN",{});var a6t=s(V1e);Wnr=r(a6t,"AutoModelForAudioXVector"),a6t.forEach(t),EOe.forEach(t),vDe=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(KL.$$.fragment,ll),Qnr=i(ll),Cd=n(ll,"P",{});var Nee=s(Cd);Hnr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),dW=n(Nee,"A",{href:!0});var n6t=s(dW);Unr=r(n6t,"from_pretrained()"),n6t.forEach(t),Jnr=r(Nee," class method or the "),cW=n(Nee,"A",{href:!0});var s6t=s(cW);Ynr=r(s6t,"from_config()"),s6t.forEach(t),Knr=r(Nee,` class
method.`),Nee.forEach(t),Znr=i(ll),ZL=n(ll,"P",{});var COe=s(ZL);esr=r(COe,"This class cannot be instantiated directly using "),X1e=n(COe,"CODE",{});var l6t=s(X1e);osr=r(l6t,"__init__()"),l6t.forEach(t),rsr=r(COe," (throws an error)."),COe.forEach(t),tsr=i(ll),Tt=n(ll,"DIV",{class:!0});var k0=s(Tt);T(ey.$$.fragment,k0),asr=i(k0),z1e=n(k0,"P",{});var i6t=s(z1e);nsr=r(i6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),i6t.forEach(t),ssr=i(k0),wd=n(k0,"P",{});var qee=s(wd);lsr=r(qee,`Note:
Loading a model from its configuration file does `),W1e=n(qee,"STRONG",{});var d6t=s(W1e);isr=r(d6t,"not"),d6t.forEach(t),dsr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(qee,"A",{href:!0});var c6t=s(fW);csr=r(c6t,"from_pretrained()"),c6t.forEach(t),fsr=r(qee," to load the model weights."),qee.forEach(t),msr=i(k0),T($6.$$.fragment,k0),k0.forEach(t),gsr=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(oy.$$.fragment,ba),hsr=i(ba),Q1e=n(ba,"P",{});var f6t=s(Q1e);psr=r(f6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),f6t.forEach(t),_sr=i(ba),za=n(ba,"P",{});var S0=s(za);usr=r(S0,"The model class to instantiate is selected based on the "),H1e=n(S0,"CODE",{});var m6t=s(H1e);bsr=r(m6t,"model_type"),m6t.forEach(t),vsr=r(S0,` property of the config object (either
passed as an argument or loaded from `),U1e=n(S0,"CODE",{});var g6t=s(U1e);Fsr=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),Tsr=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(S0,"CODE",{});var h6t=s(J1e);Msr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),Esr=r(S0,":"),S0.forEach(t),Csr=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);k6=n(il,"LI",{});var _Re=s(k6);Y1e=n(_Re,"STRONG",{});var p6t=s(Y1e);wsr=r(p6t,"data2vec-audio"),p6t.forEach(t),Asr=r(_Re," \u2014 "),mW=n(_Re,"A",{href:!0});var _6t=s(mW);Lsr=r(_6t,"Data2VecAudioForXVector"),_6t.forEach(t),ysr=r(_Re," (Data2VecAudio model)"),_Re.forEach(t),xsr=i(il),S6=n(il,"LI",{});var uRe=s(S6);K1e=n(uRe,"STRONG",{});var u6t=s(K1e);$sr=r(u6t,"unispeech-sat"),u6t.forEach(t),ksr=r(uRe," \u2014 "),gW=n(uRe,"A",{href:!0});var b6t=s(gW);Ssr=r(b6t,"UniSpeechSatForXVector"),b6t.forEach(t),Rsr=r(uRe," (UniSpeechSat model)"),uRe.forEach(t),Psr=i(il),R6=n(il,"LI",{});var bRe=s(R6);Z1e=n(bRe,"STRONG",{});var v6t=s(Z1e);Bsr=r(v6t,"wav2vec2"),v6t.forEach(t),Isr=r(bRe," \u2014 "),hW=n(bRe,"A",{href:!0});var F6t=s(hW);Nsr=r(F6t,"Wav2Vec2ForXVector"),F6t.forEach(t),qsr=r(bRe," (Wav2Vec2 model)"),bRe.forEach(t),jsr=i(il),P6=n(il,"LI",{});var vRe=s(P6);ebe=n(vRe,"STRONG",{});var T6t=s(ebe);Dsr=r(T6t,"wav2vec2-conformer"),T6t.forEach(t),Gsr=r(vRe," \u2014 "),pW=n(vRe,"A",{href:!0});var M6t=s(pW);Osr=r(M6t,"Wav2Vec2ConformerForXVector"),M6t.forEach(t),Vsr=r(vRe," (Wav2Vec2-Conformer model)"),vRe.forEach(t),Xsr=i(il),B6=n(il,"LI",{});var FRe=s(B6);obe=n(FRe,"STRONG",{});var E6t=s(obe);zsr=r(E6t,"wavlm"),E6t.forEach(t),Wsr=r(FRe," \u2014 "),_W=n(FRe,"A",{href:!0});var C6t=s(_W);Qsr=r(C6t,"WavLMForXVector"),C6t.forEach(t),Hsr=r(FRe," (WavLM model)"),FRe.forEach(t),il.forEach(t),Usr=i(ba),I6=n(ba,"P",{});var TRe=s(I6);Jsr=r(TRe,"The model is set in evaluation mode by default using "),rbe=n(TRe,"CODE",{});var w6t=s(rbe);Ysr=r(w6t,"model.eval()"),w6t.forEach(t),Ksr=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(TRe,"CODE",{});var A6t=s(tbe);Zsr=r(A6t,"model.train()"),A6t.forEach(t),TRe.forEach(t),elr=i(ba),T(N6.$$.fragment,ba),ba.forEach(t),ll.forEach(t),FDe=i(f),Ad=n(f,"H2",{class:!0});var wOe=s(Ad);q6=n(wOe,"A",{id:!0,class:!0,href:!0});var L6t=s(q6);abe=n(L6t,"SPAN",{});var y6t=s(abe);T(ry.$$.fragment,y6t),y6t.forEach(t),L6t.forEach(t),olr=i(wOe),nbe=n(wOe,"SPAN",{});var x6t=s(nbe);rlr=r(x6t,"AutoModelForMaskedImageModeling"),x6t.forEach(t),wOe.forEach(t),TDe=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(ty.$$.fragment,dl),tlr=i(dl),Ld=n(dl,"P",{});var jee=s(Ld);alr=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),uW=n(jee,"A",{href:!0});var $6t=s(uW);nlr=r($6t,"from_pretrained()"),$6t.forEach(t),slr=r(jee," class method or the "),bW=n(jee,"A",{href:!0});var k6t=s(bW);llr=r(k6t,"from_config()"),k6t.forEach(t),ilr=r(jee,` class
method.`),jee.forEach(t),dlr=i(dl),ay=n(dl,"P",{});var AOe=s(ay);clr=r(AOe,"This class cannot be instantiated directly using "),sbe=n(AOe,"CODE",{});var S6t=s(sbe);flr=r(S6t,"__init__()"),S6t.forEach(t),mlr=r(AOe," (throws an error)."),AOe.forEach(t),glr=i(dl),Mt=n(dl,"DIV",{class:!0});var R0=s(Mt);T(ny.$$.fragment,R0),hlr=i(R0),lbe=n(R0,"P",{});var R6t=s(lbe);plr=r(R6t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),R6t.forEach(t),_lr=i(R0),yd=n(R0,"P",{});var Dee=s(yd);ulr=r(Dee,`Note:
Loading a model from its configuration file does `),ibe=n(Dee,"STRONG",{});var P6t=s(ibe);blr=r(P6t,"not"),P6t.forEach(t),vlr=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(Dee,"A",{href:!0});var B6t=s(vW);Flr=r(B6t,"from_pretrained()"),B6t.forEach(t),Tlr=r(Dee," to load the model weights."),Dee.forEach(t),Mlr=i(R0),T(j6.$$.fragment,R0),R0.forEach(t),Elr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(sy.$$.fragment,va),Clr=i(va),dbe=n(va,"P",{});var I6t=s(dbe);wlr=r(I6t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),I6t.forEach(t),Alr=i(va),Wa=n(va,"P",{});var P0=s(Wa);Llr=r(P0,"The model class to instantiate is selected based on the "),cbe=n(P0,"CODE",{});var N6t=s(cbe);ylr=r(N6t,"model_type"),N6t.forEach(t),xlr=r(P0,` property of the config object (either
passed as an argument or loaded from `),fbe=n(P0,"CODE",{});var q6t=s(fbe);$lr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),klr=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(P0,"CODE",{});var j6t=s(mbe);Slr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),Rlr=r(P0,":"),P0.forEach(t),Plr=i(va),xd=n(va,"UL",{});var Gee=s(xd);D6=n(Gee,"LI",{});var MRe=s(D6);gbe=n(MRe,"STRONG",{});var D6t=s(gbe);Blr=r(D6t,"deit"),D6t.forEach(t),Ilr=r(MRe," \u2014 "),FW=n(MRe,"A",{href:!0});var G6t=s(FW);Nlr=r(G6t,"DeiTForMaskedImageModeling"),G6t.forEach(t),qlr=r(MRe," (DeiT model)"),MRe.forEach(t),jlr=i(Gee),G6=n(Gee,"LI",{});var ERe=s(G6);hbe=n(ERe,"STRONG",{});var O6t=s(hbe);Dlr=r(O6t,"swin"),O6t.forEach(t),Glr=r(ERe," \u2014 "),TW=n(ERe,"A",{href:!0});var V6t=s(TW);Olr=r(V6t,"SwinForMaskedImageModeling"),V6t.forEach(t),Vlr=r(ERe," (Swin Transformer model)"),ERe.forEach(t),Xlr=i(Gee),O6=n(Gee,"LI",{});var CRe=s(O6);pbe=n(CRe,"STRONG",{});var X6t=s(pbe);zlr=r(X6t,"vit"),X6t.forEach(t),Wlr=r(CRe," \u2014 "),MW=n(CRe,"A",{href:!0});var z6t=s(MW);Qlr=r(z6t,"ViTForMaskedImageModeling"),z6t.forEach(t),Hlr=r(CRe," (ViT model)"),CRe.forEach(t),Gee.forEach(t),Ulr=i(va),V6=n(va,"P",{});var wRe=s(V6);Jlr=r(wRe,"The model is set in evaluation mode by default using "),_be=n(wRe,"CODE",{});var W6t=s(_be);Ylr=r(W6t,"model.eval()"),W6t.forEach(t),Klr=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=n(wRe,"CODE",{});var Q6t=s(ube);Zlr=r(Q6t,"model.train()"),Q6t.forEach(t),wRe.forEach(t),eir=i(va),T(X6.$$.fragment,va),va.forEach(t),dl.forEach(t),MDe=i(f),$d=n(f,"H2",{class:!0});var LOe=s($d);z6=n(LOe,"A",{id:!0,class:!0,href:!0});var H6t=s(z6);bbe=n(H6t,"SPAN",{});var U6t=s(bbe);T(ly.$$.fragment,U6t),U6t.forEach(t),H6t.forEach(t),oir=i(LOe),vbe=n(LOe,"SPAN",{});var J6t=s(vbe);rir=r(J6t,"AutoModelForObjectDetection"),J6t.forEach(t),LOe.forEach(t),EDe=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(iy.$$.fragment,cl),tir=i(cl),kd=n(cl,"P",{});var Oee=s(kd);air=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),EW=n(Oee,"A",{href:!0});var Y6t=s(EW);nir=r(Y6t,"from_pretrained()"),Y6t.forEach(t),sir=r(Oee," class method or the "),CW=n(Oee,"A",{href:!0});var K6t=s(CW);lir=r(K6t,"from_config()"),K6t.forEach(t),iir=r(Oee,` class
method.`),Oee.forEach(t),dir=i(cl),dy=n(cl,"P",{});var yOe=s(dy);cir=r(yOe,"This class cannot be instantiated directly using "),Fbe=n(yOe,"CODE",{});var Z6t=s(Fbe);fir=r(Z6t,"__init__()"),Z6t.forEach(t),mir=r(yOe," (throws an error)."),yOe.forEach(t),gir=i(cl),Et=n(cl,"DIV",{class:!0});var B0=s(Et);T(cy.$$.fragment,B0),hir=i(B0),Tbe=n(B0,"P",{});var eTt=s(Tbe);pir=r(eTt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eTt.forEach(t),_ir=i(B0),Sd=n(B0,"P",{});var Vee=s(Sd);uir=r(Vee,`Note:
Loading a model from its configuration file does `),Mbe=n(Vee,"STRONG",{});var oTt=s(Mbe);bir=r(oTt,"not"),oTt.forEach(t),vir=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(Vee,"A",{href:!0});var rTt=s(wW);Fir=r(rTt,"from_pretrained()"),rTt.forEach(t),Tir=r(Vee," to load the model weights."),Vee.forEach(t),Mir=i(B0),T(W6.$$.fragment,B0),B0.forEach(t),Eir=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(fy.$$.fragment,Fa),Cir=i(Fa),Ebe=n(Fa,"P",{});var tTt=s(Ebe);wir=r(tTt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tTt.forEach(t),Air=i(Fa),Qa=n(Fa,"P",{});var I0=s(Qa);Lir=r(I0,"The model class to instantiate is selected based on the "),Cbe=n(I0,"CODE",{});var aTt=s(Cbe);yir=r(aTt,"model_type"),aTt.forEach(t),xir=r(I0,` property of the config object (either
passed as an argument or loaded from `),wbe=n(I0,"CODE",{});var nTt=s(wbe);$ir=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),kir=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(I0,"CODE",{});var sTt=s(Abe);Sir=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),Rir=r(I0,":"),I0.forEach(t),Pir=i(Fa),my=n(Fa,"UL",{});var xOe=s(my);Q6=n(xOe,"LI",{});var ARe=s(Q6);Lbe=n(ARe,"STRONG",{});var lTt=s(Lbe);Bir=r(lTt,"detr"),lTt.forEach(t),Iir=r(ARe," \u2014 "),AW=n(ARe,"A",{href:!0});var iTt=s(AW);Nir=r(iTt,"DetrForObjectDetection"),iTt.forEach(t),qir=r(ARe," (DETR model)"),ARe.forEach(t),jir=i(xOe),H6=n(xOe,"LI",{});var LRe=s(H6);ybe=n(LRe,"STRONG",{});var dTt=s(ybe);Dir=r(dTt,"yolos"),dTt.forEach(t),Gir=r(LRe," \u2014 "),LW=n(LRe,"A",{href:!0});var cTt=s(LW);Oir=r(cTt,"YolosForObjectDetection"),cTt.forEach(t),Vir=r(LRe," (YOLOS model)"),LRe.forEach(t),xOe.forEach(t),Xir=i(Fa),U6=n(Fa,"P",{});var yRe=s(U6);zir=r(yRe,"The model is set in evaluation mode by default using "),xbe=n(yRe,"CODE",{});var fTt=s(xbe);Wir=r(fTt,"model.eval()"),fTt.forEach(t),Qir=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(yRe,"CODE",{});var mTt=s($be);Hir=r(mTt,"model.train()"),mTt.forEach(t),yRe.forEach(t),Uir=i(Fa),T(J6.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),CDe=i(f),Rd=n(f,"H2",{class:!0});var $Oe=s(Rd);Y6=n($Oe,"A",{id:!0,class:!0,href:!0});var gTt=s(Y6);kbe=n(gTt,"SPAN",{});var hTt=s(kbe);T(gy.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),Jir=i($Oe),Sbe=n($Oe,"SPAN",{});var pTt=s(Sbe);Yir=r(pTt,"AutoModelForImageSegmentation"),pTt.forEach(t),$Oe.forEach(t),wDe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(hy.$$.fragment,fl),Kir=i(fl),Pd=n(fl,"P",{});var Xee=s(Pd);Zir=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),yW=n(Xee,"A",{href:!0});var _Tt=s(yW);edr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),odr=r(Xee," class method or the "),xW=n(Xee,"A",{href:!0});var uTt=s(xW);rdr=r(uTt,"from_config()"),uTt.forEach(t),tdr=r(Xee,` class
method.`),Xee.forEach(t),adr=i(fl),py=n(fl,"P",{});var kOe=s(py);ndr=r(kOe,"This class cannot be instantiated directly using "),Rbe=n(kOe,"CODE",{});var bTt=s(Rbe);sdr=r(bTt,"__init__()"),bTt.forEach(t),ldr=r(kOe," (throws an error)."),kOe.forEach(t),idr=i(fl),Ct=n(fl,"DIV",{class:!0});var N0=s(Ct);T(_y.$$.fragment,N0),ddr=i(N0),Pbe=n(N0,"P",{});var vTt=s(Pbe);cdr=r(vTt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vTt.forEach(t),fdr=i(N0),Bd=n(N0,"P",{});var zee=s(Bd);mdr=r(zee,`Note:
Loading a model from its configuration file does `),Bbe=n(zee,"STRONG",{});var FTt=s(Bbe);gdr=r(FTt,"not"),FTt.forEach(t),hdr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(zee,"A",{href:!0});var TTt=s($W);pdr=r(TTt,"from_pretrained()"),TTt.forEach(t),_dr=r(zee," to load the model weights."),zee.forEach(t),udr=i(N0),T(K6.$$.fragment,N0),N0.forEach(t),bdr=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(uy.$$.fragment,Ta),vdr=i(Ta),Ibe=n(Ta,"P",{});var MTt=s(Ibe);Fdr=r(MTt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),MTt.forEach(t),Tdr=i(Ta),Ha=n(Ta,"P",{});var q0=s(Ha);Mdr=r(q0,"The model class to instantiate is selected based on the "),Nbe=n(q0,"CODE",{});var ETt=s(Nbe);Edr=r(ETt,"model_type"),ETt.forEach(t),Cdr=r(q0,` property of the config object (either
passed as an argument or loaded from `),qbe=n(q0,"CODE",{});var CTt=s(qbe);wdr=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),Adr=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(q0,"CODE",{});var wTt=s(jbe);Ldr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),ydr=r(q0,":"),q0.forEach(t),xdr=i(Ta),Dbe=n(Ta,"UL",{});var ATt=s(Dbe);Z6=n(ATt,"LI",{});var xRe=s(Z6);Gbe=n(xRe,"STRONG",{});var LTt=s(Gbe);$dr=r(LTt,"detr"),LTt.forEach(t),kdr=r(xRe," \u2014 "),kW=n(xRe,"A",{href:!0});var yTt=s(kW);Sdr=r(yTt,"DetrForSegmentation"),yTt.forEach(t),Rdr=r(xRe," (DETR model)"),xRe.forEach(t),ATt.forEach(t),Pdr=i(Ta),eT=n(Ta,"P",{});var $Re=s(eT);Bdr=r($Re,"The model is set in evaluation mode by default using "),Obe=n($Re,"CODE",{});var xTt=s(Obe);Idr=r(xTt,"model.eval()"),xTt.forEach(t),Ndr=r($Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vbe=n($Re,"CODE",{});var $Tt=s(Vbe);qdr=r($Tt,"model.train()"),$Tt.forEach(t),$Re.forEach(t),jdr=i(Ta),T(oT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),ADe=i(f),Id=n(f,"H2",{class:!0});var SOe=s(Id);rT=n(SOe,"A",{id:!0,class:!0,href:!0});var kTt=s(rT);Xbe=n(kTt,"SPAN",{});var STt=s(Xbe);T(by.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),Ddr=i(SOe),zbe=n(SOe,"SPAN",{});var RTt=s(zbe);Gdr=r(RTt,"AutoModelForSemanticSegmentation"),RTt.forEach(t),SOe.forEach(t),LDe=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(vy.$$.fragment,ml),Odr=i(ml),Nd=n(ml,"P",{});var Wee=s(Nd);Vdr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),SW=n(Wee,"A",{href:!0});var PTt=s(SW);Xdr=r(PTt,"from_pretrained()"),PTt.forEach(t),zdr=r(Wee," class method or the "),RW=n(Wee,"A",{href:!0});var BTt=s(RW);Wdr=r(BTt,"from_config()"),BTt.forEach(t),Qdr=r(Wee,` class
method.`),Wee.forEach(t),Hdr=i(ml),Fy=n(ml,"P",{});var ROe=s(Fy);Udr=r(ROe,"This class cannot be instantiated directly using "),Wbe=n(ROe,"CODE",{});var ITt=s(Wbe);Jdr=r(ITt,"__init__()"),ITt.forEach(t),Ydr=r(ROe," (throws an error)."),ROe.forEach(t),Kdr=i(ml),wt=n(ml,"DIV",{class:!0});var j0=s(wt);T(Ty.$$.fragment,j0),Zdr=i(j0),Qbe=n(j0,"P",{});var NTt=s(Qbe);ecr=r(NTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NTt.forEach(t),ocr=i(j0),qd=n(j0,"P",{});var Qee=s(qd);rcr=r(Qee,`Note:
Loading a model from its configuration file does `),Hbe=n(Qee,"STRONG",{});var qTt=s(Hbe);tcr=r(qTt,"not"),qTt.forEach(t),acr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(Qee,"A",{href:!0});var jTt=s(PW);ncr=r(jTt,"from_pretrained()"),jTt.forEach(t),scr=r(Qee," to load the model weights."),Qee.forEach(t),lcr=i(j0),T(tT.$$.fragment,j0),j0.forEach(t),icr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(My.$$.fragment,Ma),dcr=i(Ma),Ube=n(Ma,"P",{});var DTt=s(Ube);ccr=r(DTt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DTt.forEach(t),fcr=i(Ma),Ua=n(Ma,"P",{});var D0=s(Ua);mcr=r(D0,"The model class to instantiate is selected based on the "),Jbe=n(D0,"CODE",{});var GTt=s(Jbe);gcr=r(GTt,"model_type"),GTt.forEach(t),hcr=r(D0,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(D0,"CODE",{});var OTt=s(Ybe);pcr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),_cr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(D0,"CODE",{});var VTt=s(Kbe);ucr=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),bcr=r(D0,":"),D0.forEach(t),vcr=i(Ma),Ja=n(Ma,"UL",{});var G0=s(Ja);aT=n(G0,"LI",{});var kRe=s(aT);Zbe=n(kRe,"STRONG",{});var XTt=s(Zbe);Fcr=r(XTt,"beit"),XTt.forEach(t),Tcr=r(kRe," \u2014 "),BW=n(kRe,"A",{href:!0});var zTt=s(BW);Mcr=r(zTt,"BeitForSemanticSegmentation"),zTt.forEach(t),Ecr=r(kRe," (BEiT model)"),kRe.forEach(t),Ccr=i(G0),nT=n(G0,"LI",{});var SRe=s(nT);e2e=n(SRe,"STRONG",{});var WTt=s(e2e);wcr=r(WTt,"data2vec-vision"),WTt.forEach(t),Acr=r(SRe," \u2014 "),IW=n(SRe,"A",{href:!0});var QTt=s(IW);Lcr=r(QTt,"Data2VecVisionForSemanticSegmentation"),QTt.forEach(t),ycr=r(SRe," (Data2VecVision model)"),SRe.forEach(t),xcr=i(G0),sT=n(G0,"LI",{});var RRe=s(sT);o2e=n(RRe,"STRONG",{});var HTt=s(o2e);$cr=r(HTt,"dpt"),HTt.forEach(t),kcr=r(RRe," \u2014 "),NW=n(RRe,"A",{href:!0});var UTt=s(NW);Scr=r(UTt,"DPTForSemanticSegmentation"),UTt.forEach(t),Rcr=r(RRe," (DPT model)"),RRe.forEach(t),Pcr=i(G0),lT=n(G0,"LI",{});var PRe=s(lT);r2e=n(PRe,"STRONG",{});var JTt=s(r2e);Bcr=r(JTt,"segformer"),JTt.forEach(t),Icr=r(PRe," \u2014 "),qW=n(PRe,"A",{href:!0});var YTt=s(qW);Ncr=r(YTt,"SegformerForSemanticSegmentation"),YTt.forEach(t),qcr=r(PRe," (SegFormer model)"),PRe.forEach(t),G0.forEach(t),jcr=i(Ma),iT=n(Ma,"P",{});var BRe=s(iT);Dcr=r(BRe,"The model is set in evaluation mode by default using "),t2e=n(BRe,"CODE",{});var KTt=s(t2e);Gcr=r(KTt,"model.eval()"),KTt.forEach(t),Ocr=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(BRe,"CODE",{});var ZTt=s(a2e);Vcr=r(ZTt,"model.train()"),ZTt.forEach(t),BRe.forEach(t),Xcr=i(Ma),T(dT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),yDe=i(f),jd=n(f,"H2",{class:!0});var POe=s(jd);cT=n(POe,"A",{id:!0,class:!0,href:!0});var e7t=s(cT);n2e=n(e7t,"SPAN",{});var o7t=s(n2e);T(Ey.$$.fragment,o7t),o7t.forEach(t),e7t.forEach(t),zcr=i(POe),s2e=n(POe,"SPAN",{});var r7t=s(s2e);Wcr=r(r7t,"AutoModelForInstanceSegmentation"),r7t.forEach(t),POe.forEach(t),xDe=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(Cy.$$.fragment,gl),Qcr=i(gl),Dd=n(gl,"P",{});var Hee=s(Dd);Hcr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jW=n(Hee,"A",{href:!0});var t7t=s(jW);Ucr=r(t7t,"from_pretrained()"),t7t.forEach(t),Jcr=r(Hee," class method or the "),DW=n(Hee,"A",{href:!0});var a7t=s(DW);Ycr=r(a7t,"from_config()"),a7t.forEach(t),Kcr=r(Hee,` class
method.`),Hee.forEach(t),Zcr=i(gl),wy=n(gl,"P",{});var BOe=s(wy);efr=r(BOe,"This class cannot be instantiated directly using "),l2e=n(BOe,"CODE",{});var n7t=s(l2e);ofr=r(n7t,"__init__()"),n7t.forEach(t),rfr=r(BOe," (throws an error)."),BOe.forEach(t),tfr=i(gl),At=n(gl,"DIV",{class:!0});var O0=s(At);T(Ay.$$.fragment,O0),afr=i(O0),i2e=n(O0,"P",{});var s7t=s(i2e);nfr=r(s7t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s7t.forEach(t),sfr=i(O0),Gd=n(O0,"P",{});var Uee=s(Gd);lfr=r(Uee,`Note:
Loading a model from its configuration file does `),d2e=n(Uee,"STRONG",{});var l7t=s(d2e);ifr=r(l7t,"not"),l7t.forEach(t),dfr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(Uee,"A",{href:!0});var i7t=s(GW);cfr=r(i7t,"from_pretrained()"),i7t.forEach(t),ffr=r(Uee," to load the model weights."),Uee.forEach(t),mfr=i(O0),T(fT.$$.fragment,O0),O0.forEach(t),gfr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(Ly.$$.fragment,Ea),hfr=i(Ea),c2e=n(Ea,"P",{});var d7t=s(c2e);pfr=r(d7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),d7t.forEach(t),_fr=i(Ea),Ya=n(Ea,"P",{});var V0=s(Ya);ufr=r(V0,"The model class to instantiate is selected based on the "),f2e=n(V0,"CODE",{});var c7t=s(f2e);bfr=r(c7t,"model_type"),c7t.forEach(t),vfr=r(V0,` property of the config object (either
passed as an argument or loaded from `),m2e=n(V0,"CODE",{});var f7t=s(m2e);Ffr=r(f7t,"pretrained_model_name_or_path"),f7t.forEach(t),Tfr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(V0,"CODE",{});var m7t=s(g2e);Mfr=r(m7t,"pretrained_model_name_or_path"),m7t.forEach(t),Efr=r(V0,":"),V0.forEach(t),Cfr=i(Ea),h2e=n(Ea,"UL",{});var g7t=s(h2e);mT=n(g7t,"LI",{});var IRe=s(mT);p2e=n(IRe,"STRONG",{});var h7t=s(p2e);wfr=r(h7t,"maskformer"),h7t.forEach(t),Afr=r(IRe," \u2014 "),OW=n(IRe,"A",{href:!0});var p7t=s(OW);Lfr=r(p7t,"MaskFormerForInstanceSegmentation"),p7t.forEach(t),yfr=r(IRe," (MaskFormer model)"),IRe.forEach(t),g7t.forEach(t),xfr=i(Ea),gT=n(Ea,"P",{});var NRe=s(gT);$fr=r(NRe,"The model is set in evaluation mode by default using "),_2e=n(NRe,"CODE",{});var _7t=s(_2e);kfr=r(_7t,"model.eval()"),_7t.forEach(t),Sfr=r(NRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(NRe,"CODE",{});var u7t=s(u2e);Rfr=r(u7t,"model.train()"),u7t.forEach(t),NRe.forEach(t),Pfr=i(Ea),T(hT.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),$De=i(f),Od=n(f,"H2",{class:!0});var IOe=s(Od);pT=n(IOe,"A",{id:!0,class:!0,href:!0});var b7t=s(pT);b2e=n(b7t,"SPAN",{});var v7t=s(b2e);T(yy.$$.fragment,v7t),v7t.forEach(t),b7t.forEach(t),Bfr=i(IOe),v2e=n(IOe,"SPAN",{});var F7t=s(v2e);Ifr=r(F7t,"TFAutoModel"),F7t.forEach(t),IOe.forEach(t),kDe=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(xy.$$.fragment,hl),Nfr=i(hl),Vd=n(hl,"P",{});var Jee=s(Vd);qfr=r(Jee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VW=n(Jee,"A",{href:!0});var T7t=s(VW);jfr=r(T7t,"from_pretrained()"),T7t.forEach(t),Dfr=r(Jee," class method or the "),XW=n(Jee,"A",{href:!0});var M7t=s(XW);Gfr=r(M7t,"from_config()"),M7t.forEach(t),Ofr=r(Jee,` class
method.`),Jee.forEach(t),Vfr=i(hl),$y=n(hl,"P",{});var NOe=s($y);Xfr=r(NOe,"This class cannot be instantiated directly using "),F2e=n(NOe,"CODE",{});var E7t=s(F2e);zfr=r(E7t,"__init__()"),E7t.forEach(t),Wfr=r(NOe," (throws an error)."),NOe.forEach(t),Qfr=i(hl),Lt=n(hl,"DIV",{class:!0});var X0=s(Lt);T(ky.$$.fragment,X0),Hfr=i(X0),T2e=n(X0,"P",{});var C7t=s(T2e);Ufr=r(C7t,"Instantiates one of the base model classes of the library from a configuration."),C7t.forEach(t),Jfr=i(X0),Xd=n(X0,"P",{});var Yee=s(Xd);Yfr=r(Yee,`Note:
Loading a model from its configuration file does `),M2e=n(Yee,"STRONG",{});var w7t=s(M2e);Kfr=r(w7t,"not"),w7t.forEach(t),Zfr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(Yee,"A",{href:!0});var A7t=s(zW);emr=r(A7t,"from_pretrained()"),A7t.forEach(t),omr=r(Yee," to load the model weights."),Yee.forEach(t),rmr=i(X0),T(_T.$$.fragment,X0),X0.forEach(t),tmr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(Sy.$$.fragment,pl),amr=i(pl),E2e=n(pl,"P",{});var L7t=s(E2e);nmr=r(L7t,"Instantiate one of the base model classes of the library from a pretrained model."),L7t.forEach(t),smr=i(pl),Ka=n(pl,"P",{});var z0=s(Ka);lmr=r(z0,"The model class to instantiate is selected based on the "),C2e=n(z0,"CODE",{});var y7t=s(C2e);imr=r(y7t,"model_type"),y7t.forEach(t),dmr=r(z0,` property of the config object (either
passed as an argument or loaded from `),w2e=n(z0,"CODE",{});var x7t=s(w2e);cmr=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),fmr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(z0,"CODE",{});var $7t=s(A2e);mmr=r($7t,"pretrained_model_name_or_path"),$7t.forEach(t),gmr=r(z0,":"),z0.forEach(t),hmr=i(pl),q=n(pl,"UL",{});var D=s(q);uT=n(D,"LI",{});var qRe=s(uT);L2e=n(qRe,"STRONG",{});var k7t=s(L2e);pmr=r(k7t,"albert"),k7t.forEach(t),_mr=r(qRe," \u2014 "),WW=n(qRe,"A",{href:!0});var S7t=s(WW);umr=r(S7t,"TFAlbertModel"),S7t.forEach(t),bmr=r(qRe," (ALBERT model)"),qRe.forEach(t),vmr=i(D),bT=n(D,"LI",{});var jRe=s(bT);y2e=n(jRe,"STRONG",{});var R7t=s(y2e);Fmr=r(R7t,"bart"),R7t.forEach(t),Tmr=r(jRe," \u2014 "),QW=n(jRe,"A",{href:!0});var P7t=s(QW);Mmr=r(P7t,"TFBartModel"),P7t.forEach(t),Emr=r(jRe," (BART model)"),jRe.forEach(t),Cmr=i(D),vT=n(D,"LI",{});var DRe=s(vT);x2e=n(DRe,"STRONG",{});var B7t=s(x2e);wmr=r(B7t,"bert"),B7t.forEach(t),Amr=r(DRe," \u2014 "),HW=n(DRe,"A",{href:!0});var I7t=s(HW);Lmr=r(I7t,"TFBertModel"),I7t.forEach(t),ymr=r(DRe," (BERT model)"),DRe.forEach(t),xmr=i(D),FT=n(D,"LI",{});var GRe=s(FT);$2e=n(GRe,"STRONG",{});var N7t=s($2e);$mr=r(N7t,"blenderbot"),N7t.forEach(t),kmr=r(GRe," \u2014 "),UW=n(GRe,"A",{href:!0});var q7t=s(UW);Smr=r(q7t,"TFBlenderbotModel"),q7t.forEach(t),Rmr=r(GRe," (Blenderbot model)"),GRe.forEach(t),Pmr=i(D),TT=n(D,"LI",{});var ORe=s(TT);k2e=n(ORe,"STRONG",{});var j7t=s(k2e);Bmr=r(j7t,"blenderbot-small"),j7t.forEach(t),Imr=r(ORe," \u2014 "),JW=n(ORe,"A",{href:!0});var D7t=s(JW);Nmr=r(D7t,"TFBlenderbotSmallModel"),D7t.forEach(t),qmr=r(ORe," (BlenderbotSmall model)"),ORe.forEach(t),jmr=i(D),MT=n(D,"LI",{});var VRe=s(MT);S2e=n(VRe,"STRONG",{});var G7t=s(S2e);Dmr=r(G7t,"camembert"),G7t.forEach(t),Gmr=r(VRe," \u2014 "),YW=n(VRe,"A",{href:!0});var O7t=s(YW);Omr=r(O7t,"TFCamembertModel"),O7t.forEach(t),Vmr=r(VRe," (CamemBERT model)"),VRe.forEach(t),Xmr=i(D),ET=n(D,"LI",{});var XRe=s(ET);R2e=n(XRe,"STRONG",{});var V7t=s(R2e);zmr=r(V7t,"clip"),V7t.forEach(t),Wmr=r(XRe," \u2014 "),KW=n(XRe,"A",{href:!0});var X7t=s(KW);Qmr=r(X7t,"TFCLIPModel"),X7t.forEach(t),Hmr=r(XRe," (CLIP model)"),XRe.forEach(t),Umr=i(D),CT=n(D,"LI",{});var zRe=s(CT);P2e=n(zRe,"STRONG",{});var z7t=s(P2e);Jmr=r(z7t,"convbert"),z7t.forEach(t),Ymr=r(zRe," \u2014 "),ZW=n(zRe,"A",{href:!0});var W7t=s(ZW);Kmr=r(W7t,"TFConvBertModel"),W7t.forEach(t),Zmr=r(zRe," (ConvBERT model)"),zRe.forEach(t),egr=i(D),wT=n(D,"LI",{});var WRe=s(wT);B2e=n(WRe,"STRONG",{});var Q7t=s(B2e);ogr=r(Q7t,"convnext"),Q7t.forEach(t),rgr=r(WRe," \u2014 "),eQ=n(WRe,"A",{href:!0});var H7t=s(eQ);tgr=r(H7t,"TFConvNextModel"),H7t.forEach(t),agr=r(WRe," (ConvNeXT model)"),WRe.forEach(t),ngr=i(D),AT=n(D,"LI",{});var QRe=s(AT);I2e=n(QRe,"STRONG",{});var U7t=s(I2e);sgr=r(U7t,"ctrl"),U7t.forEach(t),lgr=r(QRe," \u2014 "),oQ=n(QRe,"A",{href:!0});var J7t=s(oQ);igr=r(J7t,"TFCTRLModel"),J7t.forEach(t),dgr=r(QRe," (CTRL model)"),QRe.forEach(t),cgr=i(D),LT=n(D,"LI",{});var HRe=s(LT);N2e=n(HRe,"STRONG",{});var Y7t=s(N2e);fgr=r(Y7t,"data2vec-vision"),Y7t.forEach(t),mgr=r(HRe," \u2014 "),rQ=n(HRe,"A",{href:!0});var K7t=s(rQ);ggr=r(K7t,"TFData2VecVisionModel"),K7t.forEach(t),hgr=r(HRe," (Data2VecVision model)"),HRe.forEach(t),pgr=i(D),yT=n(D,"LI",{});var URe=s(yT);q2e=n(URe,"STRONG",{});var Z7t=s(q2e);_gr=r(Z7t,"deberta"),Z7t.forEach(t),ugr=r(URe," \u2014 "),tQ=n(URe,"A",{href:!0});var e9t=s(tQ);bgr=r(e9t,"TFDebertaModel"),e9t.forEach(t),vgr=r(URe," (DeBERTa model)"),URe.forEach(t),Fgr=i(D),xT=n(D,"LI",{});var JRe=s(xT);j2e=n(JRe,"STRONG",{});var o9t=s(j2e);Tgr=r(o9t,"deberta-v2"),o9t.forEach(t),Mgr=r(JRe," \u2014 "),aQ=n(JRe,"A",{href:!0});var r9t=s(aQ);Egr=r(r9t,"TFDebertaV2Model"),r9t.forEach(t),Cgr=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),wgr=i(D),$T=n(D,"LI",{});var YRe=s($T);D2e=n(YRe,"STRONG",{});var t9t=s(D2e);Agr=r(t9t,"distilbert"),t9t.forEach(t),Lgr=r(YRe," \u2014 "),nQ=n(YRe,"A",{href:!0});var a9t=s(nQ);ygr=r(a9t,"TFDistilBertModel"),a9t.forEach(t),xgr=r(YRe," (DistilBERT model)"),YRe.forEach(t),$gr=i(D),kT=n(D,"LI",{});var KRe=s(kT);G2e=n(KRe,"STRONG",{});var n9t=s(G2e);kgr=r(n9t,"dpr"),n9t.forEach(t),Sgr=r(KRe," \u2014 "),sQ=n(KRe,"A",{href:!0});var s9t=s(sQ);Rgr=r(s9t,"TFDPRQuestionEncoder"),s9t.forEach(t),Pgr=r(KRe," (DPR model)"),KRe.forEach(t),Bgr=i(D),ST=n(D,"LI",{});var ZRe=s(ST);O2e=n(ZRe,"STRONG",{});var l9t=s(O2e);Igr=r(l9t,"electra"),l9t.forEach(t),Ngr=r(ZRe," \u2014 "),lQ=n(ZRe,"A",{href:!0});var i9t=s(lQ);qgr=r(i9t,"TFElectraModel"),i9t.forEach(t),jgr=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),Dgr=i(D),RT=n(D,"LI",{});var ePe=s(RT);V2e=n(ePe,"STRONG",{});var d9t=s(V2e);Ggr=r(d9t,"flaubert"),d9t.forEach(t),Ogr=r(ePe," \u2014 "),iQ=n(ePe,"A",{href:!0});var c9t=s(iQ);Vgr=r(c9t,"TFFlaubertModel"),c9t.forEach(t),Xgr=r(ePe," (FlauBERT model)"),ePe.forEach(t),zgr=i(D),Ns=n(D,"LI",{});var fk=s(Ns);X2e=n(fk,"STRONG",{});var f9t=s(X2e);Wgr=r(f9t,"funnel"),f9t.forEach(t),Qgr=r(fk," \u2014 "),dQ=n(fk,"A",{href:!0});var m9t=s(dQ);Hgr=r(m9t,"TFFunnelModel"),m9t.forEach(t),Ugr=r(fk," or "),cQ=n(fk,"A",{href:!0});var g9t=s(cQ);Jgr=r(g9t,"TFFunnelBaseModel"),g9t.forEach(t),Ygr=r(fk," (Funnel Transformer model)"),fk.forEach(t),Kgr=i(D),PT=n(D,"LI",{});var oPe=s(PT);z2e=n(oPe,"STRONG",{});var h9t=s(z2e);Zgr=r(h9t,"gpt2"),h9t.forEach(t),ehr=r(oPe," \u2014 "),fQ=n(oPe,"A",{href:!0});var p9t=s(fQ);ohr=r(p9t,"TFGPT2Model"),p9t.forEach(t),rhr=r(oPe," (OpenAI GPT-2 model)"),oPe.forEach(t),thr=i(D),BT=n(D,"LI",{});var rPe=s(BT);W2e=n(rPe,"STRONG",{});var _9t=s(W2e);ahr=r(_9t,"gptj"),_9t.forEach(t),nhr=r(rPe," \u2014 "),mQ=n(rPe,"A",{href:!0});var u9t=s(mQ);shr=r(u9t,"TFGPTJModel"),u9t.forEach(t),lhr=r(rPe," (GPT-J model)"),rPe.forEach(t),ihr=i(D),IT=n(D,"LI",{});var tPe=s(IT);Q2e=n(tPe,"STRONG",{});var b9t=s(Q2e);dhr=r(b9t,"hubert"),b9t.forEach(t),chr=r(tPe," \u2014 "),gQ=n(tPe,"A",{href:!0});var v9t=s(gQ);fhr=r(v9t,"TFHubertModel"),v9t.forEach(t),mhr=r(tPe," (Hubert model)"),tPe.forEach(t),ghr=i(D),NT=n(D,"LI",{});var aPe=s(NT);H2e=n(aPe,"STRONG",{});var F9t=s(H2e);hhr=r(F9t,"layoutlm"),F9t.forEach(t),phr=r(aPe," \u2014 "),hQ=n(aPe,"A",{href:!0});var T9t=s(hQ);_hr=r(T9t,"TFLayoutLMModel"),T9t.forEach(t),uhr=r(aPe," (LayoutLM model)"),aPe.forEach(t),bhr=i(D),qT=n(D,"LI",{});var nPe=s(qT);U2e=n(nPe,"STRONG",{});var M9t=s(U2e);vhr=r(M9t,"led"),M9t.forEach(t),Fhr=r(nPe," \u2014 "),pQ=n(nPe,"A",{href:!0});var E9t=s(pQ);Thr=r(E9t,"TFLEDModel"),E9t.forEach(t),Mhr=r(nPe," (LED model)"),nPe.forEach(t),Ehr=i(D),jT=n(D,"LI",{});var sPe=s(jT);J2e=n(sPe,"STRONG",{});var C9t=s(J2e);Chr=r(C9t,"longformer"),C9t.forEach(t),whr=r(sPe," \u2014 "),_Q=n(sPe,"A",{href:!0});var w9t=s(_Q);Ahr=r(w9t,"TFLongformerModel"),w9t.forEach(t),Lhr=r(sPe," (Longformer model)"),sPe.forEach(t),yhr=i(D),DT=n(D,"LI",{});var lPe=s(DT);Y2e=n(lPe,"STRONG",{});var A9t=s(Y2e);xhr=r(A9t,"lxmert"),A9t.forEach(t),$hr=r(lPe," \u2014 "),uQ=n(lPe,"A",{href:!0});var L9t=s(uQ);khr=r(L9t,"TFLxmertModel"),L9t.forEach(t),Shr=r(lPe," (LXMERT model)"),lPe.forEach(t),Rhr=i(D),GT=n(D,"LI",{});var iPe=s(GT);K2e=n(iPe,"STRONG",{});var y9t=s(K2e);Phr=r(y9t,"marian"),y9t.forEach(t),Bhr=r(iPe," \u2014 "),bQ=n(iPe,"A",{href:!0});var x9t=s(bQ);Ihr=r(x9t,"TFMarianModel"),x9t.forEach(t),Nhr=r(iPe," (Marian model)"),iPe.forEach(t),qhr=i(D),OT=n(D,"LI",{});var dPe=s(OT);Z2e=n(dPe,"STRONG",{});var $9t=s(Z2e);jhr=r($9t,"mbart"),$9t.forEach(t),Dhr=r(dPe," \u2014 "),vQ=n(dPe,"A",{href:!0});var k9t=s(vQ);Ghr=r(k9t,"TFMBartModel"),k9t.forEach(t),Ohr=r(dPe," (mBART model)"),dPe.forEach(t),Vhr=i(D),VT=n(D,"LI",{});var cPe=s(VT);eve=n(cPe,"STRONG",{});var S9t=s(eve);Xhr=r(S9t,"mobilebert"),S9t.forEach(t),zhr=r(cPe," \u2014 "),FQ=n(cPe,"A",{href:!0});var R9t=s(FQ);Whr=r(R9t,"TFMobileBertModel"),R9t.forEach(t),Qhr=r(cPe," (MobileBERT model)"),cPe.forEach(t),Hhr=i(D),XT=n(D,"LI",{});var fPe=s(XT);ove=n(fPe,"STRONG",{});var P9t=s(ove);Uhr=r(P9t,"mpnet"),P9t.forEach(t),Jhr=r(fPe," \u2014 "),TQ=n(fPe,"A",{href:!0});var B9t=s(TQ);Yhr=r(B9t,"TFMPNetModel"),B9t.forEach(t),Khr=r(fPe," (MPNet model)"),fPe.forEach(t),Zhr=i(D),zT=n(D,"LI",{});var mPe=s(zT);rve=n(mPe,"STRONG",{});var I9t=s(rve);epr=r(I9t,"mt5"),I9t.forEach(t),opr=r(mPe," \u2014 "),MQ=n(mPe,"A",{href:!0});var N9t=s(MQ);rpr=r(N9t,"TFMT5Model"),N9t.forEach(t),tpr=r(mPe," (MT5 model)"),mPe.forEach(t),apr=i(D),WT=n(D,"LI",{});var gPe=s(WT);tve=n(gPe,"STRONG",{});var q9t=s(tve);npr=r(q9t,"openai-gpt"),q9t.forEach(t),spr=r(gPe," \u2014 "),EQ=n(gPe,"A",{href:!0});var j9t=s(EQ);lpr=r(j9t,"TFOpenAIGPTModel"),j9t.forEach(t),ipr=r(gPe," (OpenAI GPT model)"),gPe.forEach(t),dpr=i(D),QT=n(D,"LI",{});var hPe=s(QT);ave=n(hPe,"STRONG",{});var D9t=s(ave);cpr=r(D9t,"opt"),D9t.forEach(t),fpr=r(hPe," \u2014 "),CQ=n(hPe,"A",{href:!0});var G9t=s(CQ);mpr=r(G9t,"TFOPTModel"),G9t.forEach(t),gpr=r(hPe," (OPT model)"),hPe.forEach(t),hpr=i(D),HT=n(D,"LI",{});var pPe=s(HT);nve=n(pPe,"STRONG",{});var O9t=s(nve);ppr=r(O9t,"pegasus"),O9t.forEach(t),_pr=r(pPe," \u2014 "),wQ=n(pPe,"A",{href:!0});var V9t=s(wQ);upr=r(V9t,"TFPegasusModel"),V9t.forEach(t),bpr=r(pPe," (Pegasus model)"),pPe.forEach(t),vpr=i(D),UT=n(D,"LI",{});var _Pe=s(UT);sve=n(_Pe,"STRONG",{});var X9t=s(sve);Fpr=r(X9t,"rembert"),X9t.forEach(t),Tpr=r(_Pe," \u2014 "),AQ=n(_Pe,"A",{href:!0});var z9t=s(AQ);Mpr=r(z9t,"TFRemBertModel"),z9t.forEach(t),Epr=r(_Pe," (RemBERT model)"),_Pe.forEach(t),Cpr=i(D),JT=n(D,"LI",{});var uPe=s(JT);lve=n(uPe,"STRONG",{});var W9t=s(lve);wpr=r(W9t,"roberta"),W9t.forEach(t),Apr=r(uPe," \u2014 "),LQ=n(uPe,"A",{href:!0});var Q9t=s(LQ);Lpr=r(Q9t,"TFRobertaModel"),Q9t.forEach(t),ypr=r(uPe," (RoBERTa model)"),uPe.forEach(t),xpr=i(D),YT=n(D,"LI",{});var bPe=s(YT);ive=n(bPe,"STRONG",{});var H9t=s(ive);$pr=r(H9t,"roformer"),H9t.forEach(t),kpr=r(bPe," \u2014 "),yQ=n(bPe,"A",{href:!0});var U9t=s(yQ);Spr=r(U9t,"TFRoFormerModel"),U9t.forEach(t),Rpr=r(bPe," (RoFormer model)"),bPe.forEach(t),Ppr=i(D),KT=n(D,"LI",{});var vPe=s(KT);dve=n(vPe,"STRONG",{});var J9t=s(dve);Bpr=r(J9t,"speech_to_text"),J9t.forEach(t),Ipr=r(vPe," \u2014 "),xQ=n(vPe,"A",{href:!0});var Y9t=s(xQ);Npr=r(Y9t,"TFSpeech2TextModel"),Y9t.forEach(t),qpr=r(vPe," (Speech2Text model)"),vPe.forEach(t),jpr=i(D),ZT=n(D,"LI",{});var FPe=s(ZT);cve=n(FPe,"STRONG",{});var K9t=s(cve);Dpr=r(K9t,"swin"),K9t.forEach(t),Gpr=r(FPe," \u2014 "),$Q=n(FPe,"A",{href:!0});var Z9t=s($Q);Opr=r(Z9t,"TFSwinModel"),Z9t.forEach(t),Vpr=r(FPe," (Swin Transformer model)"),FPe.forEach(t),Xpr=i(D),e7=n(D,"LI",{});var TPe=s(e7);fve=n(TPe,"STRONG",{});var eMt=s(fve);zpr=r(eMt,"t5"),eMt.forEach(t),Wpr=r(TPe," \u2014 "),kQ=n(TPe,"A",{href:!0});var oMt=s(kQ);Qpr=r(oMt,"TFT5Model"),oMt.forEach(t),Hpr=r(TPe," (T5 model)"),TPe.forEach(t),Upr=i(D),o7=n(D,"LI",{});var MPe=s(o7);mve=n(MPe,"STRONG",{});var rMt=s(mve);Jpr=r(rMt,"tapas"),rMt.forEach(t),Ypr=r(MPe," \u2014 "),SQ=n(MPe,"A",{href:!0});var tMt=s(SQ);Kpr=r(tMt,"TFTapasModel"),tMt.forEach(t),Zpr=r(MPe," (TAPAS model)"),MPe.forEach(t),e_r=i(D),r7=n(D,"LI",{});var EPe=s(r7);gve=n(EPe,"STRONG",{});var aMt=s(gve);o_r=r(aMt,"transfo-xl"),aMt.forEach(t),r_r=r(EPe," \u2014 "),RQ=n(EPe,"A",{href:!0});var nMt=s(RQ);t_r=r(nMt,"TFTransfoXLModel"),nMt.forEach(t),a_r=r(EPe," (Transformer-XL model)"),EPe.forEach(t),n_r=i(D),t7=n(D,"LI",{});var CPe=s(t7);hve=n(CPe,"STRONG",{});var sMt=s(hve);s_r=r(sMt,"vit"),sMt.forEach(t),l_r=r(CPe," \u2014 "),PQ=n(CPe,"A",{href:!0});var lMt=s(PQ);i_r=r(lMt,"TFViTModel"),lMt.forEach(t),d_r=r(CPe," (ViT model)"),CPe.forEach(t),c_r=i(D),a7=n(D,"LI",{});var wPe=s(a7);pve=n(wPe,"STRONG",{});var iMt=s(pve);f_r=r(iMt,"vit_mae"),iMt.forEach(t),m_r=r(wPe," \u2014 "),BQ=n(wPe,"A",{href:!0});var dMt=s(BQ);g_r=r(dMt,"TFViTMAEModel"),dMt.forEach(t),h_r=r(wPe," (ViTMAE model)"),wPe.forEach(t),p_r=i(D),n7=n(D,"LI",{});var APe=s(n7);_ve=n(APe,"STRONG",{});var cMt=s(_ve);__r=r(cMt,"wav2vec2"),cMt.forEach(t),u_r=r(APe," \u2014 "),IQ=n(APe,"A",{href:!0});var fMt=s(IQ);b_r=r(fMt,"TFWav2Vec2Model"),fMt.forEach(t),v_r=r(APe," (Wav2Vec2 model)"),APe.forEach(t),F_r=i(D),s7=n(D,"LI",{});var LPe=s(s7);uve=n(LPe,"STRONG",{});var mMt=s(uve);T_r=r(mMt,"xlm"),mMt.forEach(t),M_r=r(LPe," \u2014 "),NQ=n(LPe,"A",{href:!0});var gMt=s(NQ);E_r=r(gMt,"TFXLMModel"),gMt.forEach(t),C_r=r(LPe," (XLM model)"),LPe.forEach(t),w_r=i(D),l7=n(D,"LI",{});var yPe=s(l7);bve=n(yPe,"STRONG",{});var hMt=s(bve);A_r=r(hMt,"xlm-roberta"),hMt.forEach(t),L_r=r(yPe," \u2014 "),qQ=n(yPe,"A",{href:!0});var pMt=s(qQ);y_r=r(pMt,"TFXLMRobertaModel"),pMt.forEach(t),x_r=r(yPe," (XLM-RoBERTa model)"),yPe.forEach(t),$_r=i(D),i7=n(D,"LI",{});var xPe=s(i7);vve=n(xPe,"STRONG",{});var _Mt=s(vve);k_r=r(_Mt,"xlnet"),_Mt.forEach(t),S_r=r(xPe," \u2014 "),jQ=n(xPe,"A",{href:!0});var uMt=s(jQ);R_r=r(uMt,"TFXLNetModel"),uMt.forEach(t),P_r=r(xPe," (XLNet model)"),xPe.forEach(t),D.forEach(t),B_r=i(pl),T(d7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),SDe=i(f),zd=n(f,"H2",{class:!0});var qOe=s(zd);c7=n(qOe,"A",{id:!0,class:!0,href:!0});var bMt=s(c7);Fve=n(bMt,"SPAN",{});var vMt=s(Fve);T(Ry.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),I_r=i(qOe),Tve=n(qOe,"SPAN",{});var FMt=s(Tve);N_r=r(FMt,"TFAutoModelForPreTraining"),FMt.forEach(t),qOe.forEach(t),RDe=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(Py.$$.fragment,_l),q_r=i(_l),Wd=n(_l,"P",{});var Kee=s(Wd);j_r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DQ=n(Kee,"A",{href:!0});var TMt=s(DQ);D_r=r(TMt,"from_pretrained()"),TMt.forEach(t),G_r=r(Kee," class method or the "),GQ=n(Kee,"A",{href:!0});var MMt=s(GQ);O_r=r(MMt,"from_config()"),MMt.forEach(t),V_r=r(Kee,` class
method.`),Kee.forEach(t),X_r=i(_l),By=n(_l,"P",{});var jOe=s(By);z_r=r(jOe,"This class cannot be instantiated directly using "),Mve=n(jOe,"CODE",{});var EMt=s(Mve);W_r=r(EMt,"__init__()"),EMt.forEach(t),Q_r=r(jOe," (throws an error)."),jOe.forEach(t),H_r=i(_l),yt=n(_l,"DIV",{class:!0});var W0=s(yt);T(Iy.$$.fragment,W0),U_r=i(W0),Eve=n(W0,"P",{});var CMt=s(Eve);J_r=r(CMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CMt.forEach(t),Y_r=i(W0),Qd=n(W0,"P",{});var Zee=s(Qd);K_r=r(Zee,`Note:
Loading a model from its configuration file does `),Cve=n(Zee,"STRONG",{});var wMt=s(Cve);Z_r=r(wMt,"not"),wMt.forEach(t),eur=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(Zee,"A",{href:!0});var AMt=s(OQ);our=r(AMt,"from_pretrained()"),AMt.forEach(t),rur=r(Zee," to load the model weights."),Zee.forEach(t),tur=i(W0),T(f7.$$.fragment,W0),W0.forEach(t),aur=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(Ny.$$.fragment,ul),nur=i(ul),wve=n(ul,"P",{});var LMt=s(wve);sur=r(LMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LMt.forEach(t),lur=i(ul),Za=n(ul,"P",{});var Q0=s(Za);iur=r(Q0,"The model class to instantiate is selected based on the "),Ave=n(Q0,"CODE",{});var yMt=s(Ave);dur=r(yMt,"model_type"),yMt.forEach(t),cur=r(Q0,` property of the config object (either
passed as an argument or loaded from `),Lve=n(Q0,"CODE",{});var xMt=s(Lve);fur=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),mur=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(Q0,"CODE",{});var $Mt=s(yve);gur=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),hur=r(Q0,":"),Q0.forEach(t),pur=i(ul),se=n(ul,"UL",{});var le=s(se);m7=n(le,"LI",{});var $Pe=s(m7);xve=n($Pe,"STRONG",{});var kMt=s(xve);_ur=r(kMt,"albert"),kMt.forEach(t),uur=r($Pe," \u2014 "),VQ=n($Pe,"A",{href:!0});var SMt=s(VQ);bur=r(SMt,"TFAlbertForPreTraining"),SMt.forEach(t),vur=r($Pe," (ALBERT model)"),$Pe.forEach(t),Fur=i(le),g7=n(le,"LI",{});var kPe=s(g7);$ve=n(kPe,"STRONG",{});var RMt=s($ve);Tur=r(RMt,"bart"),RMt.forEach(t),Mur=r(kPe," \u2014 "),XQ=n(kPe,"A",{href:!0});var PMt=s(XQ);Eur=r(PMt,"TFBartForConditionalGeneration"),PMt.forEach(t),Cur=r(kPe," (BART model)"),kPe.forEach(t),wur=i(le),h7=n(le,"LI",{});var SPe=s(h7);kve=n(SPe,"STRONG",{});var BMt=s(kve);Aur=r(BMt,"bert"),BMt.forEach(t),Lur=r(SPe," \u2014 "),zQ=n(SPe,"A",{href:!0});var IMt=s(zQ);yur=r(IMt,"TFBertForPreTraining"),IMt.forEach(t),xur=r(SPe," (BERT model)"),SPe.forEach(t),$ur=i(le),p7=n(le,"LI",{});var RPe=s(p7);Sve=n(RPe,"STRONG",{});var NMt=s(Sve);kur=r(NMt,"camembert"),NMt.forEach(t),Sur=r(RPe," \u2014 "),WQ=n(RPe,"A",{href:!0});var qMt=s(WQ);Rur=r(qMt,"TFCamembertForMaskedLM"),qMt.forEach(t),Pur=r(RPe," (CamemBERT model)"),RPe.forEach(t),Bur=i(le),_7=n(le,"LI",{});var PPe=s(_7);Rve=n(PPe,"STRONG",{});var jMt=s(Rve);Iur=r(jMt,"ctrl"),jMt.forEach(t),Nur=r(PPe," \u2014 "),QQ=n(PPe,"A",{href:!0});var DMt=s(QQ);qur=r(DMt,"TFCTRLLMHeadModel"),DMt.forEach(t),jur=r(PPe," (CTRL model)"),PPe.forEach(t),Dur=i(le),u7=n(le,"LI",{});var BPe=s(u7);Pve=n(BPe,"STRONG",{});var GMt=s(Pve);Gur=r(GMt,"distilbert"),GMt.forEach(t),Our=r(BPe," \u2014 "),HQ=n(BPe,"A",{href:!0});var OMt=s(HQ);Vur=r(OMt,"TFDistilBertForMaskedLM"),OMt.forEach(t),Xur=r(BPe," (DistilBERT model)"),BPe.forEach(t),zur=i(le),b7=n(le,"LI",{});var IPe=s(b7);Bve=n(IPe,"STRONG",{});var VMt=s(Bve);Wur=r(VMt,"electra"),VMt.forEach(t),Qur=r(IPe," \u2014 "),UQ=n(IPe,"A",{href:!0});var XMt=s(UQ);Hur=r(XMt,"TFElectraForPreTraining"),XMt.forEach(t),Uur=r(IPe," (ELECTRA model)"),IPe.forEach(t),Jur=i(le),v7=n(le,"LI",{});var NPe=s(v7);Ive=n(NPe,"STRONG",{});var zMt=s(Ive);Yur=r(zMt,"flaubert"),zMt.forEach(t),Kur=r(NPe," \u2014 "),JQ=n(NPe,"A",{href:!0});var WMt=s(JQ);Zur=r(WMt,"TFFlaubertWithLMHeadModel"),WMt.forEach(t),e1r=r(NPe," (FlauBERT model)"),NPe.forEach(t),o1r=i(le),F7=n(le,"LI",{});var qPe=s(F7);Nve=n(qPe,"STRONG",{});var QMt=s(Nve);r1r=r(QMt,"funnel"),QMt.forEach(t),t1r=r(qPe," \u2014 "),YQ=n(qPe,"A",{href:!0});var HMt=s(YQ);a1r=r(HMt,"TFFunnelForPreTraining"),HMt.forEach(t),n1r=r(qPe," (Funnel Transformer model)"),qPe.forEach(t),s1r=i(le),T7=n(le,"LI",{});var jPe=s(T7);qve=n(jPe,"STRONG",{});var UMt=s(qve);l1r=r(UMt,"gpt2"),UMt.forEach(t),i1r=r(jPe," \u2014 "),KQ=n(jPe,"A",{href:!0});var JMt=s(KQ);d1r=r(JMt,"TFGPT2LMHeadModel"),JMt.forEach(t),c1r=r(jPe," (OpenAI GPT-2 model)"),jPe.forEach(t),f1r=i(le),M7=n(le,"LI",{});var DPe=s(M7);jve=n(DPe,"STRONG",{});var YMt=s(jve);m1r=r(YMt,"layoutlm"),YMt.forEach(t),g1r=r(DPe," \u2014 "),ZQ=n(DPe,"A",{href:!0});var KMt=s(ZQ);h1r=r(KMt,"TFLayoutLMForMaskedLM"),KMt.forEach(t),p1r=r(DPe," (LayoutLM model)"),DPe.forEach(t),_1r=i(le),E7=n(le,"LI",{});var GPe=s(E7);Dve=n(GPe,"STRONG",{});var ZMt=s(Dve);u1r=r(ZMt,"lxmert"),ZMt.forEach(t),b1r=r(GPe," \u2014 "),eH=n(GPe,"A",{href:!0});var e4t=s(eH);v1r=r(e4t,"TFLxmertForPreTraining"),e4t.forEach(t),F1r=r(GPe," (LXMERT model)"),GPe.forEach(t),T1r=i(le),C7=n(le,"LI",{});var OPe=s(C7);Gve=n(OPe,"STRONG",{});var o4t=s(Gve);M1r=r(o4t,"mobilebert"),o4t.forEach(t),E1r=r(OPe," \u2014 "),oH=n(OPe,"A",{href:!0});var r4t=s(oH);C1r=r(r4t,"TFMobileBertForPreTraining"),r4t.forEach(t),w1r=r(OPe," (MobileBERT model)"),OPe.forEach(t),A1r=i(le),w7=n(le,"LI",{});var VPe=s(w7);Ove=n(VPe,"STRONG",{});var t4t=s(Ove);L1r=r(t4t,"mpnet"),t4t.forEach(t),y1r=r(VPe," \u2014 "),rH=n(VPe,"A",{href:!0});var a4t=s(rH);x1r=r(a4t,"TFMPNetForMaskedLM"),a4t.forEach(t),$1r=r(VPe," (MPNet model)"),VPe.forEach(t),k1r=i(le),A7=n(le,"LI",{});var XPe=s(A7);Vve=n(XPe,"STRONG",{});var n4t=s(Vve);S1r=r(n4t,"openai-gpt"),n4t.forEach(t),R1r=r(XPe," \u2014 "),tH=n(XPe,"A",{href:!0});var s4t=s(tH);P1r=r(s4t,"TFOpenAIGPTLMHeadModel"),s4t.forEach(t),B1r=r(XPe," (OpenAI GPT model)"),XPe.forEach(t),I1r=i(le),L7=n(le,"LI",{});var zPe=s(L7);Xve=n(zPe,"STRONG",{});var l4t=s(Xve);N1r=r(l4t,"roberta"),l4t.forEach(t),q1r=r(zPe," \u2014 "),aH=n(zPe,"A",{href:!0});var i4t=s(aH);j1r=r(i4t,"TFRobertaForMaskedLM"),i4t.forEach(t),D1r=r(zPe," (RoBERTa model)"),zPe.forEach(t),G1r=i(le),y7=n(le,"LI",{});var WPe=s(y7);zve=n(WPe,"STRONG",{});var d4t=s(zve);O1r=r(d4t,"t5"),d4t.forEach(t),V1r=r(WPe," \u2014 "),nH=n(WPe,"A",{href:!0});var c4t=s(nH);X1r=r(c4t,"TFT5ForConditionalGeneration"),c4t.forEach(t),z1r=r(WPe," (T5 model)"),WPe.forEach(t),W1r=i(le),x7=n(le,"LI",{});var QPe=s(x7);Wve=n(QPe,"STRONG",{});var f4t=s(Wve);Q1r=r(f4t,"tapas"),f4t.forEach(t),H1r=r(QPe," \u2014 "),sH=n(QPe,"A",{href:!0});var m4t=s(sH);U1r=r(m4t,"TFTapasForMaskedLM"),m4t.forEach(t),J1r=r(QPe," (TAPAS model)"),QPe.forEach(t),Y1r=i(le),$7=n(le,"LI",{});var HPe=s($7);Qve=n(HPe,"STRONG",{});var g4t=s(Qve);K1r=r(g4t,"transfo-xl"),g4t.forEach(t),Z1r=r(HPe," \u2014 "),lH=n(HPe,"A",{href:!0});var h4t=s(lH);ebr=r(h4t,"TFTransfoXLLMHeadModel"),h4t.forEach(t),obr=r(HPe," (Transformer-XL model)"),HPe.forEach(t),rbr=i(le),k7=n(le,"LI",{});var UPe=s(k7);Hve=n(UPe,"STRONG",{});var p4t=s(Hve);tbr=r(p4t,"vit_mae"),p4t.forEach(t),abr=r(UPe," \u2014 "),iH=n(UPe,"A",{href:!0});var _4t=s(iH);nbr=r(_4t,"TFViTMAEForPreTraining"),_4t.forEach(t),sbr=r(UPe," (ViTMAE model)"),UPe.forEach(t),lbr=i(le),S7=n(le,"LI",{});var JPe=s(S7);Uve=n(JPe,"STRONG",{});var u4t=s(Uve);ibr=r(u4t,"xlm"),u4t.forEach(t),dbr=r(JPe," \u2014 "),dH=n(JPe,"A",{href:!0});var b4t=s(dH);cbr=r(b4t,"TFXLMWithLMHeadModel"),b4t.forEach(t),fbr=r(JPe," (XLM model)"),JPe.forEach(t),mbr=i(le),R7=n(le,"LI",{});var YPe=s(R7);Jve=n(YPe,"STRONG",{});var v4t=s(Jve);gbr=r(v4t,"xlm-roberta"),v4t.forEach(t),hbr=r(YPe," \u2014 "),cH=n(YPe,"A",{href:!0});var F4t=s(cH);pbr=r(F4t,"TFXLMRobertaForMaskedLM"),F4t.forEach(t),_br=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),ubr=i(le),P7=n(le,"LI",{});var KPe=s(P7);Yve=n(KPe,"STRONG",{});var T4t=s(Yve);bbr=r(T4t,"xlnet"),T4t.forEach(t),vbr=r(KPe," \u2014 "),fH=n(KPe,"A",{href:!0});var M4t=s(fH);Fbr=r(M4t,"TFXLNetLMHeadModel"),M4t.forEach(t),Tbr=r(KPe," (XLNet model)"),KPe.forEach(t),le.forEach(t),Mbr=i(ul),T(B7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),PDe=i(f),Hd=n(f,"H2",{class:!0});var DOe=s(Hd);I7=n(DOe,"A",{id:!0,class:!0,href:!0});var E4t=s(I7);Kve=n(E4t,"SPAN",{});var C4t=s(Kve);T(qy.$$.fragment,C4t),C4t.forEach(t),E4t.forEach(t),Ebr=i(DOe),Zve=n(DOe,"SPAN",{});var w4t=s(Zve);Cbr=r(w4t,"TFAutoModelForCausalLM"),w4t.forEach(t),DOe.forEach(t),BDe=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(jy.$$.fragment,bl),wbr=i(bl),Ud=n(bl,"P",{});var eoe=s(Ud);Abr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mH=n(eoe,"A",{href:!0});var A4t=s(mH);Lbr=r(A4t,"from_pretrained()"),A4t.forEach(t),ybr=r(eoe," class method or the "),gH=n(eoe,"A",{href:!0});var L4t=s(gH);xbr=r(L4t,"from_config()"),L4t.forEach(t),$br=r(eoe,` class
method.`),eoe.forEach(t),kbr=i(bl),Dy=n(bl,"P",{});var GOe=s(Dy);Sbr=r(GOe,"This class cannot be instantiated directly using "),e3e=n(GOe,"CODE",{});var y4t=s(e3e);Rbr=r(y4t,"__init__()"),y4t.forEach(t),Pbr=r(GOe," (throws an error)."),GOe.forEach(t),Bbr=i(bl),xt=n(bl,"DIV",{class:!0});var H0=s(xt);T(Gy.$$.fragment,H0),Ibr=i(H0),o3e=n(H0,"P",{});var x4t=s(o3e);Nbr=r(x4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x4t.forEach(t),qbr=i(H0),Jd=n(H0,"P",{});var ooe=s(Jd);jbr=r(ooe,`Note:
Loading a model from its configuration file does `),r3e=n(ooe,"STRONG",{});var $4t=s(r3e);Dbr=r($4t,"not"),$4t.forEach(t),Gbr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(ooe,"A",{href:!0});var k4t=s(hH);Obr=r(k4t,"from_pretrained()"),k4t.forEach(t),Vbr=r(ooe," to load the model weights."),ooe.forEach(t),Xbr=i(H0),T(N7.$$.fragment,H0),H0.forEach(t),zbr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(Oy.$$.fragment,vl),Wbr=i(vl),t3e=n(vl,"P",{});var S4t=s(t3e);Qbr=r(S4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S4t.forEach(t),Hbr=i(vl),en=n(vl,"P",{});var U0=s(en);Ubr=r(U0,"The model class to instantiate is selected based on the "),a3e=n(U0,"CODE",{});var R4t=s(a3e);Jbr=r(R4t,"model_type"),R4t.forEach(t),Ybr=r(U0,` property of the config object (either
passed as an argument or loaded from `),n3e=n(U0,"CODE",{});var P4t=s(n3e);Kbr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),Zbr=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(U0,"CODE",{});var B4t=s(s3e);e2r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),o2r=r(U0,":"),U0.forEach(t),r2r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);q7=n(Ce,"LI",{});var ZPe=s(q7);l3e=n(ZPe,"STRONG",{});var I4t=s(l3e);t2r=r(I4t,"bert"),I4t.forEach(t),a2r=r(ZPe," \u2014 "),pH=n(ZPe,"A",{href:!0});var N4t=s(pH);n2r=r(N4t,"TFBertLMHeadModel"),N4t.forEach(t),s2r=r(ZPe," (BERT model)"),ZPe.forEach(t),l2r=i(Ce),j7=n(Ce,"LI",{});var eBe=s(j7);i3e=n(eBe,"STRONG",{});var q4t=s(i3e);i2r=r(q4t,"camembert"),q4t.forEach(t),d2r=r(eBe," \u2014 "),_H=n(eBe,"A",{href:!0});var j4t=s(_H);c2r=r(j4t,"TFCamembertForCausalLM"),j4t.forEach(t),f2r=r(eBe," (CamemBERT model)"),eBe.forEach(t),m2r=i(Ce),D7=n(Ce,"LI",{});var oBe=s(D7);d3e=n(oBe,"STRONG",{});var D4t=s(d3e);g2r=r(D4t,"ctrl"),D4t.forEach(t),h2r=r(oBe," \u2014 "),uH=n(oBe,"A",{href:!0});var G4t=s(uH);p2r=r(G4t,"TFCTRLLMHeadModel"),G4t.forEach(t),_2r=r(oBe," (CTRL model)"),oBe.forEach(t),u2r=i(Ce),G7=n(Ce,"LI",{});var rBe=s(G7);c3e=n(rBe,"STRONG",{});var O4t=s(c3e);b2r=r(O4t,"gpt2"),O4t.forEach(t),v2r=r(rBe," \u2014 "),bH=n(rBe,"A",{href:!0});var V4t=s(bH);F2r=r(V4t,"TFGPT2LMHeadModel"),V4t.forEach(t),T2r=r(rBe," (OpenAI GPT-2 model)"),rBe.forEach(t),M2r=i(Ce),O7=n(Ce,"LI",{});var tBe=s(O7);f3e=n(tBe,"STRONG",{});var X4t=s(f3e);E2r=r(X4t,"gptj"),X4t.forEach(t),C2r=r(tBe," \u2014 "),vH=n(tBe,"A",{href:!0});var z4t=s(vH);w2r=r(z4t,"TFGPTJForCausalLM"),z4t.forEach(t),A2r=r(tBe," (GPT-J model)"),tBe.forEach(t),L2r=i(Ce),V7=n(Ce,"LI",{});var aBe=s(V7);m3e=n(aBe,"STRONG",{});var W4t=s(m3e);y2r=r(W4t,"openai-gpt"),W4t.forEach(t),x2r=r(aBe," \u2014 "),FH=n(aBe,"A",{href:!0});var Q4t=s(FH);$2r=r(Q4t,"TFOpenAIGPTLMHeadModel"),Q4t.forEach(t),k2r=r(aBe," (OpenAI GPT model)"),aBe.forEach(t),S2r=i(Ce),X7=n(Ce,"LI",{});var nBe=s(X7);g3e=n(nBe,"STRONG",{});var H4t=s(g3e);R2r=r(H4t,"opt"),H4t.forEach(t),P2r=r(nBe," \u2014 "),TH=n(nBe,"A",{href:!0});var U4t=s(TH);B2r=r(U4t,"TFOPTForCausalLM"),U4t.forEach(t),I2r=r(nBe," (OPT model)"),nBe.forEach(t),N2r=i(Ce),z7=n(Ce,"LI",{});var sBe=s(z7);h3e=n(sBe,"STRONG",{});var J4t=s(h3e);q2r=r(J4t,"rembert"),J4t.forEach(t),j2r=r(sBe," \u2014 "),MH=n(sBe,"A",{href:!0});var Y4t=s(MH);D2r=r(Y4t,"TFRemBertForCausalLM"),Y4t.forEach(t),G2r=r(sBe," (RemBERT model)"),sBe.forEach(t),O2r=i(Ce),W7=n(Ce,"LI",{});var lBe=s(W7);p3e=n(lBe,"STRONG",{});var K4t=s(p3e);V2r=r(K4t,"roberta"),K4t.forEach(t),X2r=r(lBe," \u2014 "),EH=n(lBe,"A",{href:!0});var Z4t=s(EH);z2r=r(Z4t,"TFRobertaForCausalLM"),Z4t.forEach(t),W2r=r(lBe," (RoBERTa model)"),lBe.forEach(t),Q2r=i(Ce),Q7=n(Ce,"LI",{});var iBe=s(Q7);_3e=n(iBe,"STRONG",{});var eEt=s(_3e);H2r=r(eEt,"roformer"),eEt.forEach(t),U2r=r(iBe," \u2014 "),CH=n(iBe,"A",{href:!0});var oEt=s(CH);J2r=r(oEt,"TFRoFormerForCausalLM"),oEt.forEach(t),Y2r=r(iBe," (RoFormer model)"),iBe.forEach(t),K2r=i(Ce),H7=n(Ce,"LI",{});var dBe=s(H7);u3e=n(dBe,"STRONG",{});var rEt=s(u3e);Z2r=r(rEt,"transfo-xl"),rEt.forEach(t),evr=r(dBe," \u2014 "),wH=n(dBe,"A",{href:!0});var tEt=s(wH);ovr=r(tEt,"TFTransfoXLLMHeadModel"),tEt.forEach(t),rvr=r(dBe," (Transformer-XL model)"),dBe.forEach(t),tvr=i(Ce),U7=n(Ce,"LI",{});var cBe=s(U7);b3e=n(cBe,"STRONG",{});var aEt=s(b3e);avr=r(aEt,"xlm"),aEt.forEach(t),nvr=r(cBe," \u2014 "),AH=n(cBe,"A",{href:!0});var nEt=s(AH);svr=r(nEt,"TFXLMWithLMHeadModel"),nEt.forEach(t),lvr=r(cBe," (XLM model)"),cBe.forEach(t),ivr=i(Ce),J7=n(Ce,"LI",{});var fBe=s(J7);v3e=n(fBe,"STRONG",{});var sEt=s(v3e);dvr=r(sEt,"xlnet"),sEt.forEach(t),cvr=r(fBe," \u2014 "),LH=n(fBe,"A",{href:!0});var lEt=s(LH);fvr=r(lEt,"TFXLNetLMHeadModel"),lEt.forEach(t),mvr=r(fBe," (XLNet model)"),fBe.forEach(t),Ce.forEach(t),gvr=i(vl),T(Y7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),IDe=i(f),Yd=n(f,"H2",{class:!0});var OOe=s(Yd);K7=n(OOe,"A",{id:!0,class:!0,href:!0});var iEt=s(K7);F3e=n(iEt,"SPAN",{});var dEt=s(F3e);T(Vy.$$.fragment,dEt),dEt.forEach(t),iEt.forEach(t),hvr=i(OOe),T3e=n(OOe,"SPAN",{});var cEt=s(T3e);pvr=r(cEt,"TFAutoModelForImageClassification"),cEt.forEach(t),OOe.forEach(t),NDe=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(Xy.$$.fragment,Fl),_vr=i(Fl),Kd=n(Fl,"P",{});var roe=s(Kd);uvr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yH=n(roe,"A",{href:!0});var fEt=s(yH);bvr=r(fEt,"from_pretrained()"),fEt.forEach(t),vvr=r(roe," class method or the "),xH=n(roe,"A",{href:!0});var mEt=s(xH);Fvr=r(mEt,"from_config()"),mEt.forEach(t),Tvr=r(roe,` class
method.`),roe.forEach(t),Mvr=i(Fl),zy=n(Fl,"P",{});var VOe=s(zy);Evr=r(VOe,"This class cannot be instantiated directly using "),M3e=n(VOe,"CODE",{});var gEt=s(M3e);Cvr=r(gEt,"__init__()"),gEt.forEach(t),wvr=r(VOe," (throws an error)."),VOe.forEach(t),Avr=i(Fl),$t=n(Fl,"DIV",{class:!0});var J0=s($t);T(Wy.$$.fragment,J0),Lvr=i(J0),E3e=n(J0,"P",{});var hEt=s(E3e);yvr=r(hEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hEt.forEach(t),xvr=i(J0),Zd=n(J0,"P",{});var toe=s(Zd);$vr=r(toe,`Note:
Loading a model from its configuration file does `),C3e=n(toe,"STRONG",{});var pEt=s(C3e);kvr=r(pEt,"not"),pEt.forEach(t),Svr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(toe,"A",{href:!0});var _Et=s($H);Rvr=r(_Et,"from_pretrained()"),_Et.forEach(t),Pvr=r(toe," to load the model weights."),toe.forEach(t),Bvr=i(J0),T(Z7.$$.fragment,J0),J0.forEach(t),Ivr=i(Fl),yr=n(Fl,"DIV",{class:!0});var Tl=s(yr);T(Qy.$$.fragment,Tl),Nvr=i(Tl),w3e=n(Tl,"P",{});var uEt=s(w3e);qvr=r(uEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uEt.forEach(t),jvr=i(Tl),on=n(Tl,"P",{});var Y0=s(on);Dvr=r(Y0,"The model class to instantiate is selected based on the "),A3e=n(Y0,"CODE",{});var bEt=s(A3e);Gvr=r(bEt,"model_type"),bEt.forEach(t),Ovr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),L3e=n(Y0,"CODE",{});var vEt=s(L3e);Vvr=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),Xvr=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y3e=n(Y0,"CODE",{});var FEt=s(y3e);zvr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),Wvr=r(Y0,":"),Y0.forEach(t),Qvr=i(Tl),rn=n(Tl,"UL",{});var K0=s(rn);e9=n(K0,"LI",{});var mBe=s(e9);x3e=n(mBe,"STRONG",{});var TEt=s(x3e);Hvr=r(TEt,"convnext"),TEt.forEach(t),Uvr=r(mBe," \u2014 "),kH=n(mBe,"A",{href:!0});var MEt=s(kH);Jvr=r(MEt,"TFConvNextForImageClassification"),MEt.forEach(t),Yvr=r(mBe," (ConvNeXT model)"),mBe.forEach(t),Kvr=i(K0),o9=n(K0,"LI",{});var gBe=s(o9);$3e=n(gBe,"STRONG",{});var EEt=s($3e);Zvr=r(EEt,"data2vec-vision"),EEt.forEach(t),e3r=r(gBe," \u2014 "),SH=n(gBe,"A",{href:!0});var CEt=s(SH);o3r=r(CEt,"TFData2VecVisionForImageClassification"),CEt.forEach(t),r3r=r(gBe," (Data2VecVision model)"),gBe.forEach(t),t3r=i(K0),r9=n(K0,"LI",{});var hBe=s(r9);k3e=n(hBe,"STRONG",{});var wEt=s(k3e);a3r=r(wEt,"swin"),wEt.forEach(t),n3r=r(hBe," \u2014 "),RH=n(hBe,"A",{href:!0});var AEt=s(RH);s3r=r(AEt,"TFSwinForImageClassification"),AEt.forEach(t),l3r=r(hBe," (Swin Transformer model)"),hBe.forEach(t),i3r=i(K0),t9=n(K0,"LI",{});var pBe=s(t9);S3e=n(pBe,"STRONG",{});var LEt=s(S3e);d3r=r(LEt,"vit"),LEt.forEach(t),c3r=r(pBe," \u2014 "),PH=n(pBe,"A",{href:!0});var yEt=s(PH);f3r=r(yEt,"TFViTForImageClassification"),yEt.forEach(t),m3r=r(pBe," (ViT model)"),pBe.forEach(t),K0.forEach(t),g3r=i(Tl),T(a9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),qDe=i(f),ec=n(f,"H2",{class:!0});var XOe=s(ec);n9=n(XOe,"A",{id:!0,class:!0,href:!0});var xEt=s(n9);R3e=n(xEt,"SPAN",{});var $Et=s(R3e);T(Hy.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),h3r=i(XOe),P3e=n(XOe,"SPAN",{});var kEt=s(P3e);p3r=r(kEt,"TFAutoModelForMaskedLM"),kEt.forEach(t),XOe.forEach(t),jDe=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(Uy.$$.fragment,Ml),_3r=i(Ml),oc=n(Ml,"P",{});var aoe=s(oc);u3r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BH=n(aoe,"A",{href:!0});var SEt=s(BH);b3r=r(SEt,"from_pretrained()"),SEt.forEach(t),v3r=r(aoe," class method or the "),IH=n(aoe,"A",{href:!0});var REt=s(IH);F3r=r(REt,"from_config()"),REt.forEach(t),T3r=r(aoe,` class
method.`),aoe.forEach(t),M3r=i(Ml),Jy=n(Ml,"P",{});var zOe=s(Jy);E3r=r(zOe,"This class cannot be instantiated directly using "),B3e=n(zOe,"CODE",{});var PEt=s(B3e);C3r=r(PEt,"__init__()"),PEt.forEach(t),w3r=r(zOe," (throws an error)."),zOe.forEach(t),A3r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Z0=s(kt);T(Yy.$$.fragment,Z0),L3r=i(Z0),I3e=n(Z0,"P",{});var BEt=s(I3e);y3r=r(BEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BEt.forEach(t),x3r=i(Z0),rc=n(Z0,"P",{});var noe=s(rc);$3r=r(noe,`Note:
Loading a model from its configuration file does `),N3e=n(noe,"STRONG",{});var IEt=s(N3e);k3r=r(IEt,"not"),IEt.forEach(t),S3r=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(noe,"A",{href:!0});var NEt=s(NH);R3r=r(NEt,"from_pretrained()"),NEt.forEach(t),P3r=r(noe," to load the model weights."),noe.forEach(t),B3r=i(Z0),T(s9.$$.fragment,Z0),Z0.forEach(t),I3r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(Ky.$$.fragment,El),N3r=i(El),q3e=n(El,"P",{});var qEt=s(q3e);q3r=r(qEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qEt.forEach(t),j3r=i(El),tn=n(El,"P",{});var ew=s(tn);D3r=r(ew,"The model class to instantiate is selected based on the "),j3e=n(ew,"CODE",{});var jEt=s(j3e);G3r=r(jEt,"model_type"),jEt.forEach(t),O3r=r(ew,` property of the config object (either
passed as an argument or loaded from `),D3e=n(ew,"CODE",{});var DEt=s(D3e);V3r=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),X3r=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(ew,"CODE",{});var GEt=s(G3e);z3r=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),W3r=r(ew,":"),ew.forEach(t),Q3r=i(El),ie=n(El,"UL",{});var fe=s(ie);l9=n(fe,"LI",{});var _Be=s(l9);O3e=n(_Be,"STRONG",{});var OEt=s(O3e);H3r=r(OEt,"albert"),OEt.forEach(t),U3r=r(_Be," \u2014 "),qH=n(_Be,"A",{href:!0});var VEt=s(qH);J3r=r(VEt,"TFAlbertForMaskedLM"),VEt.forEach(t),Y3r=r(_Be," (ALBERT model)"),_Be.forEach(t),K3r=i(fe),i9=n(fe,"LI",{});var uBe=s(i9);V3e=n(uBe,"STRONG",{});var XEt=s(V3e);Z3r=r(XEt,"bert"),XEt.forEach(t),eFr=r(uBe," \u2014 "),jH=n(uBe,"A",{href:!0});var zEt=s(jH);oFr=r(zEt,"TFBertForMaskedLM"),zEt.forEach(t),rFr=r(uBe," (BERT model)"),uBe.forEach(t),tFr=i(fe),d9=n(fe,"LI",{});var bBe=s(d9);X3e=n(bBe,"STRONG",{});var WEt=s(X3e);aFr=r(WEt,"camembert"),WEt.forEach(t),nFr=r(bBe," \u2014 "),DH=n(bBe,"A",{href:!0});var QEt=s(DH);sFr=r(QEt,"TFCamembertForMaskedLM"),QEt.forEach(t),lFr=r(bBe," (CamemBERT model)"),bBe.forEach(t),iFr=i(fe),c9=n(fe,"LI",{});var vBe=s(c9);z3e=n(vBe,"STRONG",{});var HEt=s(z3e);dFr=r(HEt,"convbert"),HEt.forEach(t),cFr=r(vBe," \u2014 "),GH=n(vBe,"A",{href:!0});var UEt=s(GH);fFr=r(UEt,"TFConvBertForMaskedLM"),UEt.forEach(t),mFr=r(vBe," (ConvBERT model)"),vBe.forEach(t),gFr=i(fe),f9=n(fe,"LI",{});var FBe=s(f9);W3e=n(FBe,"STRONG",{});var JEt=s(W3e);hFr=r(JEt,"deberta"),JEt.forEach(t),pFr=r(FBe," \u2014 "),OH=n(FBe,"A",{href:!0});var YEt=s(OH);_Fr=r(YEt,"TFDebertaForMaskedLM"),YEt.forEach(t),uFr=r(FBe," (DeBERTa model)"),FBe.forEach(t),bFr=i(fe),m9=n(fe,"LI",{});var TBe=s(m9);Q3e=n(TBe,"STRONG",{});var KEt=s(Q3e);vFr=r(KEt,"deberta-v2"),KEt.forEach(t),FFr=r(TBe," \u2014 "),VH=n(TBe,"A",{href:!0});var ZEt=s(VH);TFr=r(ZEt,"TFDebertaV2ForMaskedLM"),ZEt.forEach(t),MFr=r(TBe," (DeBERTa-v2 model)"),TBe.forEach(t),EFr=i(fe),g9=n(fe,"LI",{});var MBe=s(g9);H3e=n(MBe,"STRONG",{});var eCt=s(H3e);CFr=r(eCt,"distilbert"),eCt.forEach(t),wFr=r(MBe," \u2014 "),XH=n(MBe,"A",{href:!0});var oCt=s(XH);AFr=r(oCt,"TFDistilBertForMaskedLM"),oCt.forEach(t),LFr=r(MBe," (DistilBERT model)"),MBe.forEach(t),yFr=i(fe),h9=n(fe,"LI",{});var EBe=s(h9);U3e=n(EBe,"STRONG",{});var rCt=s(U3e);xFr=r(rCt,"electra"),rCt.forEach(t),$Fr=r(EBe," \u2014 "),zH=n(EBe,"A",{href:!0});var tCt=s(zH);kFr=r(tCt,"TFElectraForMaskedLM"),tCt.forEach(t),SFr=r(EBe," (ELECTRA model)"),EBe.forEach(t),RFr=i(fe),p9=n(fe,"LI",{});var CBe=s(p9);J3e=n(CBe,"STRONG",{});var aCt=s(J3e);PFr=r(aCt,"flaubert"),aCt.forEach(t),BFr=r(CBe," \u2014 "),WH=n(CBe,"A",{href:!0});var nCt=s(WH);IFr=r(nCt,"TFFlaubertWithLMHeadModel"),nCt.forEach(t),NFr=r(CBe," (FlauBERT model)"),CBe.forEach(t),qFr=i(fe),_9=n(fe,"LI",{});var wBe=s(_9);Y3e=n(wBe,"STRONG",{});var sCt=s(Y3e);jFr=r(sCt,"funnel"),sCt.forEach(t),DFr=r(wBe," \u2014 "),QH=n(wBe,"A",{href:!0});var lCt=s(QH);GFr=r(lCt,"TFFunnelForMaskedLM"),lCt.forEach(t),OFr=r(wBe," (Funnel Transformer model)"),wBe.forEach(t),VFr=i(fe),u9=n(fe,"LI",{});var ABe=s(u9);K3e=n(ABe,"STRONG",{});var iCt=s(K3e);XFr=r(iCt,"layoutlm"),iCt.forEach(t),zFr=r(ABe," \u2014 "),HH=n(ABe,"A",{href:!0});var dCt=s(HH);WFr=r(dCt,"TFLayoutLMForMaskedLM"),dCt.forEach(t),QFr=r(ABe," (LayoutLM model)"),ABe.forEach(t),HFr=i(fe),b9=n(fe,"LI",{});var LBe=s(b9);Z3e=n(LBe,"STRONG",{});var cCt=s(Z3e);UFr=r(cCt,"longformer"),cCt.forEach(t),JFr=r(LBe," \u2014 "),UH=n(LBe,"A",{href:!0});var fCt=s(UH);YFr=r(fCt,"TFLongformerForMaskedLM"),fCt.forEach(t),KFr=r(LBe," (Longformer model)"),LBe.forEach(t),ZFr=i(fe),v9=n(fe,"LI",{});var yBe=s(v9);eFe=n(yBe,"STRONG",{});var mCt=s(eFe);e6r=r(mCt,"mobilebert"),mCt.forEach(t),o6r=r(yBe," \u2014 "),JH=n(yBe,"A",{href:!0});var gCt=s(JH);r6r=r(gCt,"TFMobileBertForMaskedLM"),gCt.forEach(t),t6r=r(yBe," (MobileBERT model)"),yBe.forEach(t),a6r=i(fe),F9=n(fe,"LI",{});var xBe=s(F9);oFe=n(xBe,"STRONG",{});var hCt=s(oFe);n6r=r(hCt,"mpnet"),hCt.forEach(t),s6r=r(xBe," \u2014 "),YH=n(xBe,"A",{href:!0});var pCt=s(YH);l6r=r(pCt,"TFMPNetForMaskedLM"),pCt.forEach(t),i6r=r(xBe," (MPNet model)"),xBe.forEach(t),d6r=i(fe),T9=n(fe,"LI",{});var $Be=s(T9);rFe=n($Be,"STRONG",{});var _Ct=s(rFe);c6r=r(_Ct,"rembert"),_Ct.forEach(t),f6r=r($Be," \u2014 "),KH=n($Be,"A",{href:!0});var uCt=s(KH);m6r=r(uCt,"TFRemBertForMaskedLM"),uCt.forEach(t),g6r=r($Be," (RemBERT model)"),$Be.forEach(t),h6r=i(fe),M9=n(fe,"LI",{});var kBe=s(M9);tFe=n(kBe,"STRONG",{});var bCt=s(tFe);p6r=r(bCt,"roberta"),bCt.forEach(t),_6r=r(kBe," \u2014 "),ZH=n(kBe,"A",{href:!0});var vCt=s(ZH);u6r=r(vCt,"TFRobertaForMaskedLM"),vCt.forEach(t),b6r=r(kBe," (RoBERTa model)"),kBe.forEach(t),v6r=i(fe),E9=n(fe,"LI",{});var SBe=s(E9);aFe=n(SBe,"STRONG",{});var FCt=s(aFe);F6r=r(FCt,"roformer"),FCt.forEach(t),T6r=r(SBe," \u2014 "),eU=n(SBe,"A",{href:!0});var TCt=s(eU);M6r=r(TCt,"TFRoFormerForMaskedLM"),TCt.forEach(t),E6r=r(SBe," (RoFormer model)"),SBe.forEach(t),C6r=i(fe),C9=n(fe,"LI",{});var RBe=s(C9);nFe=n(RBe,"STRONG",{});var MCt=s(nFe);w6r=r(MCt,"tapas"),MCt.forEach(t),A6r=r(RBe," \u2014 "),oU=n(RBe,"A",{href:!0});var ECt=s(oU);L6r=r(ECt,"TFTapasForMaskedLM"),ECt.forEach(t),y6r=r(RBe," (TAPAS model)"),RBe.forEach(t),x6r=i(fe),w9=n(fe,"LI",{});var PBe=s(w9);sFe=n(PBe,"STRONG",{});var CCt=s(sFe);$6r=r(CCt,"xlm"),CCt.forEach(t),k6r=r(PBe," \u2014 "),rU=n(PBe,"A",{href:!0});var wCt=s(rU);S6r=r(wCt,"TFXLMWithLMHeadModel"),wCt.forEach(t),R6r=r(PBe," (XLM model)"),PBe.forEach(t),P6r=i(fe),A9=n(fe,"LI",{});var BBe=s(A9);lFe=n(BBe,"STRONG",{});var ACt=s(lFe);B6r=r(ACt,"xlm-roberta"),ACt.forEach(t),I6r=r(BBe," \u2014 "),tU=n(BBe,"A",{href:!0});var LCt=s(tU);N6r=r(LCt,"TFXLMRobertaForMaskedLM"),LCt.forEach(t),q6r=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),fe.forEach(t),j6r=i(El),T(L9.$$.fragment,El),El.forEach(t),Ml.forEach(t),DDe=i(f),tc=n(f,"H2",{class:!0});var WOe=s(tc);y9=n(WOe,"A",{id:!0,class:!0,href:!0});var yCt=s(y9);iFe=n(yCt,"SPAN",{});var xCt=s(iFe);T(Zy.$$.fragment,xCt),xCt.forEach(t),yCt.forEach(t),D6r=i(WOe),dFe=n(WOe,"SPAN",{});var $Ct=s(dFe);G6r=r($Ct,"TFAutoModelForSeq2SeqLM"),$Ct.forEach(t),WOe.forEach(t),GDe=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(e8.$$.fragment,Cl),O6r=i(Cl),ac=n(Cl,"P",{});var soe=s(ac);V6r=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aU=n(soe,"A",{href:!0});var kCt=s(aU);X6r=r(kCt,"from_pretrained()"),kCt.forEach(t),z6r=r(soe," class method or the "),nU=n(soe,"A",{href:!0});var SCt=s(nU);W6r=r(SCt,"from_config()"),SCt.forEach(t),Q6r=r(soe,` class
method.`),soe.forEach(t),H6r=i(Cl),o8=n(Cl,"P",{});var QOe=s(o8);U6r=r(QOe,"This class cannot be instantiated directly using "),cFe=n(QOe,"CODE",{});var RCt=s(cFe);J6r=r(RCt,"__init__()"),RCt.forEach(t),Y6r=r(QOe," (throws an error)."),QOe.forEach(t),K6r=i(Cl),St=n(Cl,"DIV",{class:!0});var ow=s(St);T(r8.$$.fragment,ow),Z6r=i(ow),fFe=n(ow,"P",{});var PCt=s(fFe);eTr=r(PCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PCt.forEach(t),oTr=i(ow),nc=n(ow,"P",{});var loe=s(nc);rTr=r(loe,`Note:
Loading a model from its configuration file does `),mFe=n(loe,"STRONG",{});var BCt=s(mFe);tTr=r(BCt,"not"),BCt.forEach(t),aTr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(loe,"A",{href:!0});var ICt=s(sU);nTr=r(ICt,"from_pretrained()"),ICt.forEach(t),sTr=r(loe," to load the model weights."),loe.forEach(t),lTr=i(ow),T(x9.$$.fragment,ow),ow.forEach(t),iTr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(t8.$$.fragment,wl),dTr=i(wl),gFe=n(wl,"P",{});var NCt=s(gFe);cTr=r(NCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NCt.forEach(t),fTr=i(wl),an=n(wl,"P",{});var rw=s(an);mTr=r(rw,"The model class to instantiate is selected based on the "),hFe=n(rw,"CODE",{});var qCt=s(hFe);gTr=r(qCt,"model_type"),qCt.forEach(t),hTr=r(rw,` property of the config object (either
passed as an argument or loaded from `),pFe=n(rw,"CODE",{});var jCt=s(pFe);pTr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),_Tr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(rw,"CODE",{});var DCt=s(_Fe);uTr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),bTr=r(rw,":"),rw.forEach(t),vTr=i(wl),ye=n(wl,"UL",{});var Ie=s(ye);$9=n(Ie,"LI",{});var IBe=s($9);uFe=n(IBe,"STRONG",{});var GCt=s(uFe);FTr=r(GCt,"bart"),GCt.forEach(t),TTr=r(IBe," \u2014 "),lU=n(IBe,"A",{href:!0});var OCt=s(lU);MTr=r(OCt,"TFBartForConditionalGeneration"),OCt.forEach(t),ETr=r(IBe," (BART model)"),IBe.forEach(t),CTr=i(Ie),k9=n(Ie,"LI",{});var NBe=s(k9);bFe=n(NBe,"STRONG",{});var VCt=s(bFe);wTr=r(VCt,"blenderbot"),VCt.forEach(t),ATr=r(NBe," \u2014 "),iU=n(NBe,"A",{href:!0});var XCt=s(iU);LTr=r(XCt,"TFBlenderbotForConditionalGeneration"),XCt.forEach(t),yTr=r(NBe," (Blenderbot model)"),NBe.forEach(t),xTr=i(Ie),S9=n(Ie,"LI",{});var qBe=s(S9);vFe=n(qBe,"STRONG",{});var zCt=s(vFe);$Tr=r(zCt,"blenderbot-small"),zCt.forEach(t),kTr=r(qBe," \u2014 "),dU=n(qBe,"A",{href:!0});var WCt=s(dU);STr=r(WCt,"TFBlenderbotSmallForConditionalGeneration"),WCt.forEach(t),RTr=r(qBe," (BlenderbotSmall model)"),qBe.forEach(t),PTr=i(Ie),R9=n(Ie,"LI",{});var jBe=s(R9);FFe=n(jBe,"STRONG",{});var QCt=s(FFe);BTr=r(QCt,"encoder-decoder"),QCt.forEach(t),ITr=r(jBe," \u2014 "),cU=n(jBe,"A",{href:!0});var HCt=s(cU);NTr=r(HCt,"TFEncoderDecoderModel"),HCt.forEach(t),qTr=r(jBe," (Encoder decoder model)"),jBe.forEach(t),jTr=i(Ie),P9=n(Ie,"LI",{});var DBe=s(P9);TFe=n(DBe,"STRONG",{});var UCt=s(TFe);DTr=r(UCt,"led"),UCt.forEach(t),GTr=r(DBe," \u2014 "),fU=n(DBe,"A",{href:!0});var JCt=s(fU);OTr=r(JCt,"TFLEDForConditionalGeneration"),JCt.forEach(t),VTr=r(DBe," (LED model)"),DBe.forEach(t),XTr=i(Ie),B9=n(Ie,"LI",{});var GBe=s(B9);MFe=n(GBe,"STRONG",{});var YCt=s(MFe);zTr=r(YCt,"marian"),YCt.forEach(t),WTr=r(GBe," \u2014 "),mU=n(GBe,"A",{href:!0});var KCt=s(mU);QTr=r(KCt,"TFMarianMTModel"),KCt.forEach(t),HTr=r(GBe," (Marian model)"),GBe.forEach(t),UTr=i(Ie),I9=n(Ie,"LI",{});var OBe=s(I9);EFe=n(OBe,"STRONG",{});var ZCt=s(EFe);JTr=r(ZCt,"mbart"),ZCt.forEach(t),YTr=r(OBe," \u2014 "),gU=n(OBe,"A",{href:!0});var e5t=s(gU);KTr=r(e5t,"TFMBartForConditionalGeneration"),e5t.forEach(t),ZTr=r(OBe," (mBART model)"),OBe.forEach(t),e7r=i(Ie),N9=n(Ie,"LI",{});var VBe=s(N9);CFe=n(VBe,"STRONG",{});var o5t=s(CFe);o7r=r(o5t,"mt5"),o5t.forEach(t),r7r=r(VBe," \u2014 "),hU=n(VBe,"A",{href:!0});var r5t=s(hU);t7r=r(r5t,"TFMT5ForConditionalGeneration"),r5t.forEach(t),a7r=r(VBe," (MT5 model)"),VBe.forEach(t),n7r=i(Ie),q9=n(Ie,"LI",{});var XBe=s(q9);wFe=n(XBe,"STRONG",{});var t5t=s(wFe);s7r=r(t5t,"pegasus"),t5t.forEach(t),l7r=r(XBe," \u2014 "),pU=n(XBe,"A",{href:!0});var a5t=s(pU);i7r=r(a5t,"TFPegasusForConditionalGeneration"),a5t.forEach(t),d7r=r(XBe," (Pegasus model)"),XBe.forEach(t),c7r=i(Ie),j9=n(Ie,"LI",{});var zBe=s(j9);AFe=n(zBe,"STRONG",{});var n5t=s(AFe);f7r=r(n5t,"t5"),n5t.forEach(t),m7r=r(zBe," \u2014 "),_U=n(zBe,"A",{href:!0});var s5t=s(_U);g7r=r(s5t,"TFT5ForConditionalGeneration"),s5t.forEach(t),h7r=r(zBe," (T5 model)"),zBe.forEach(t),Ie.forEach(t),p7r=i(wl),T(D9.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),ODe=i(f),sc=n(f,"H2",{class:!0});var HOe=s(sc);G9=n(HOe,"A",{id:!0,class:!0,href:!0});var l5t=s(G9);LFe=n(l5t,"SPAN",{});var i5t=s(LFe);T(a8.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),_7r=i(HOe),yFe=n(HOe,"SPAN",{});var d5t=s(yFe);u7r=r(d5t,"TFAutoModelForSequenceClassification"),d5t.forEach(t),HOe.forEach(t),VDe=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(n8.$$.fragment,Al),b7r=i(Al),lc=n(Al,"P",{});var ioe=s(lc);v7r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uU=n(ioe,"A",{href:!0});var c5t=s(uU);F7r=r(c5t,"from_pretrained()"),c5t.forEach(t),T7r=r(ioe," class method or the "),bU=n(ioe,"A",{href:!0});var f5t=s(bU);M7r=r(f5t,"from_config()"),f5t.forEach(t),E7r=r(ioe,` class
method.`),ioe.forEach(t),C7r=i(Al),s8=n(Al,"P",{});var UOe=s(s8);w7r=r(UOe,"This class cannot be instantiated directly using "),xFe=n(UOe,"CODE",{});var m5t=s(xFe);A7r=r(m5t,"__init__()"),m5t.forEach(t),L7r=r(UOe," (throws an error)."),UOe.forEach(t),y7r=i(Al),Rt=n(Al,"DIV",{class:!0});var tw=s(Rt);T(l8.$$.fragment,tw),x7r=i(tw),$Fe=n(tw,"P",{});var g5t=s($Fe);$7r=r(g5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),g5t.forEach(t),k7r=i(tw),ic=n(tw,"P",{});var doe=s(ic);S7r=r(doe,`Note:
Loading a model from its configuration file does `),kFe=n(doe,"STRONG",{});var h5t=s(kFe);R7r=r(h5t,"not"),h5t.forEach(t),P7r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(doe,"A",{href:!0});var p5t=s(vU);B7r=r(p5t,"from_pretrained()"),p5t.forEach(t),I7r=r(doe," to load the model weights."),doe.forEach(t),N7r=i(tw),T(O9.$$.fragment,tw),tw.forEach(t),q7r=i(Al),kr=n(Al,"DIV",{class:!0});var Ll=s(kr);T(i8.$$.fragment,Ll),j7r=i(Ll),SFe=n(Ll,"P",{});var _5t=s(SFe);D7r=r(_5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_5t.forEach(t),G7r=i(Ll),nn=n(Ll,"P",{});var aw=s(nn);O7r=r(aw,"The model class to instantiate is selected based on the "),RFe=n(aw,"CODE",{});var u5t=s(RFe);V7r=r(u5t,"model_type"),u5t.forEach(t),X7r=r(aw,` property of the config object (either
passed as an argument or loaded from `),PFe=n(aw,"CODE",{});var b5t=s(PFe);z7r=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),W7r=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(aw,"CODE",{});var v5t=s(BFe);Q7r=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),H7r=r(aw,":"),aw.forEach(t),U7r=i(Ll),oe=n(Ll,"UL",{});var ae=s(oe);V9=n(ae,"LI",{});var WBe=s(V9);IFe=n(WBe,"STRONG",{});var F5t=s(IFe);J7r=r(F5t,"albert"),F5t.forEach(t),Y7r=r(WBe," \u2014 "),FU=n(WBe,"A",{href:!0});var T5t=s(FU);K7r=r(T5t,"TFAlbertForSequenceClassification"),T5t.forEach(t),Z7r=r(WBe," (ALBERT model)"),WBe.forEach(t),e9r=i(ae),X9=n(ae,"LI",{});var QBe=s(X9);NFe=n(QBe,"STRONG",{});var M5t=s(NFe);o9r=r(M5t,"bert"),M5t.forEach(t),r9r=r(QBe," \u2014 "),TU=n(QBe,"A",{href:!0});var E5t=s(TU);t9r=r(E5t,"TFBertForSequenceClassification"),E5t.forEach(t),a9r=r(QBe," (BERT model)"),QBe.forEach(t),n9r=i(ae),z9=n(ae,"LI",{});var HBe=s(z9);qFe=n(HBe,"STRONG",{});var C5t=s(qFe);s9r=r(C5t,"camembert"),C5t.forEach(t),l9r=r(HBe," \u2014 "),MU=n(HBe,"A",{href:!0});var w5t=s(MU);i9r=r(w5t,"TFCamembertForSequenceClassification"),w5t.forEach(t),d9r=r(HBe," (CamemBERT model)"),HBe.forEach(t),c9r=i(ae),W9=n(ae,"LI",{});var UBe=s(W9);jFe=n(UBe,"STRONG",{});var A5t=s(jFe);f9r=r(A5t,"convbert"),A5t.forEach(t),m9r=r(UBe," \u2014 "),EU=n(UBe,"A",{href:!0});var L5t=s(EU);g9r=r(L5t,"TFConvBertForSequenceClassification"),L5t.forEach(t),h9r=r(UBe," (ConvBERT model)"),UBe.forEach(t),p9r=i(ae),Q9=n(ae,"LI",{});var JBe=s(Q9);DFe=n(JBe,"STRONG",{});var y5t=s(DFe);_9r=r(y5t,"ctrl"),y5t.forEach(t),u9r=r(JBe," \u2014 "),CU=n(JBe,"A",{href:!0});var x5t=s(CU);b9r=r(x5t,"TFCTRLForSequenceClassification"),x5t.forEach(t),v9r=r(JBe," (CTRL model)"),JBe.forEach(t),F9r=i(ae),H9=n(ae,"LI",{});var YBe=s(H9);GFe=n(YBe,"STRONG",{});var $5t=s(GFe);T9r=r($5t,"deberta"),$5t.forEach(t),M9r=r(YBe," \u2014 "),wU=n(YBe,"A",{href:!0});var k5t=s(wU);E9r=r(k5t,"TFDebertaForSequenceClassification"),k5t.forEach(t),C9r=r(YBe," (DeBERTa model)"),YBe.forEach(t),w9r=i(ae),U9=n(ae,"LI",{});var KBe=s(U9);OFe=n(KBe,"STRONG",{});var S5t=s(OFe);A9r=r(S5t,"deberta-v2"),S5t.forEach(t),L9r=r(KBe," \u2014 "),AU=n(KBe,"A",{href:!0});var R5t=s(AU);y9r=r(R5t,"TFDebertaV2ForSequenceClassification"),R5t.forEach(t),x9r=r(KBe," (DeBERTa-v2 model)"),KBe.forEach(t),$9r=i(ae),J9=n(ae,"LI",{});var ZBe=s(J9);VFe=n(ZBe,"STRONG",{});var P5t=s(VFe);k9r=r(P5t,"distilbert"),P5t.forEach(t),S9r=r(ZBe," \u2014 "),LU=n(ZBe,"A",{href:!0});var B5t=s(LU);R9r=r(B5t,"TFDistilBertForSequenceClassification"),B5t.forEach(t),P9r=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),B9r=i(ae),Y9=n(ae,"LI",{});var eIe=s(Y9);XFe=n(eIe,"STRONG",{});var I5t=s(XFe);I9r=r(I5t,"electra"),I5t.forEach(t),N9r=r(eIe," \u2014 "),yU=n(eIe,"A",{href:!0});var N5t=s(yU);q9r=r(N5t,"TFElectraForSequenceClassification"),N5t.forEach(t),j9r=r(eIe," (ELECTRA model)"),eIe.forEach(t),D9r=i(ae),K9=n(ae,"LI",{});var oIe=s(K9);zFe=n(oIe,"STRONG",{});var q5t=s(zFe);G9r=r(q5t,"flaubert"),q5t.forEach(t),O9r=r(oIe," \u2014 "),xU=n(oIe,"A",{href:!0});var j5t=s(xU);V9r=r(j5t,"TFFlaubertForSequenceClassification"),j5t.forEach(t),X9r=r(oIe," (FlauBERT model)"),oIe.forEach(t),z9r=i(ae),Z9=n(ae,"LI",{});var rIe=s(Z9);WFe=n(rIe,"STRONG",{});var D5t=s(WFe);W9r=r(D5t,"funnel"),D5t.forEach(t),Q9r=r(rIe," \u2014 "),$U=n(rIe,"A",{href:!0});var G5t=s($U);H9r=r(G5t,"TFFunnelForSequenceClassification"),G5t.forEach(t),U9r=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),J9r=i(ae),eM=n(ae,"LI",{});var tIe=s(eM);QFe=n(tIe,"STRONG",{});var O5t=s(QFe);Y9r=r(O5t,"gpt2"),O5t.forEach(t),K9r=r(tIe," \u2014 "),kU=n(tIe,"A",{href:!0});var V5t=s(kU);Z9r=r(V5t,"TFGPT2ForSequenceClassification"),V5t.forEach(t),eMr=r(tIe," (OpenAI GPT-2 model)"),tIe.forEach(t),oMr=i(ae),oM=n(ae,"LI",{});var aIe=s(oM);HFe=n(aIe,"STRONG",{});var X5t=s(HFe);rMr=r(X5t,"gptj"),X5t.forEach(t),tMr=r(aIe," \u2014 "),SU=n(aIe,"A",{href:!0});var z5t=s(SU);aMr=r(z5t,"TFGPTJForSequenceClassification"),z5t.forEach(t),nMr=r(aIe," (GPT-J model)"),aIe.forEach(t),sMr=i(ae),rM=n(ae,"LI",{});var nIe=s(rM);UFe=n(nIe,"STRONG",{});var W5t=s(UFe);lMr=r(W5t,"layoutlm"),W5t.forEach(t),iMr=r(nIe," \u2014 "),RU=n(nIe,"A",{href:!0});var Q5t=s(RU);dMr=r(Q5t,"TFLayoutLMForSequenceClassification"),Q5t.forEach(t),cMr=r(nIe," (LayoutLM model)"),nIe.forEach(t),fMr=i(ae),tM=n(ae,"LI",{});var sIe=s(tM);JFe=n(sIe,"STRONG",{});var H5t=s(JFe);mMr=r(H5t,"longformer"),H5t.forEach(t),gMr=r(sIe," \u2014 "),PU=n(sIe,"A",{href:!0});var U5t=s(PU);hMr=r(U5t,"TFLongformerForSequenceClassification"),U5t.forEach(t),pMr=r(sIe," (Longformer model)"),sIe.forEach(t),_Mr=i(ae),aM=n(ae,"LI",{});var lIe=s(aM);YFe=n(lIe,"STRONG",{});var J5t=s(YFe);uMr=r(J5t,"mobilebert"),J5t.forEach(t),bMr=r(lIe," \u2014 "),BU=n(lIe,"A",{href:!0});var Y5t=s(BU);vMr=r(Y5t,"TFMobileBertForSequenceClassification"),Y5t.forEach(t),FMr=r(lIe," (MobileBERT model)"),lIe.forEach(t),TMr=i(ae),nM=n(ae,"LI",{});var iIe=s(nM);KFe=n(iIe,"STRONG",{});var K5t=s(KFe);MMr=r(K5t,"mpnet"),K5t.forEach(t),EMr=r(iIe," \u2014 "),IU=n(iIe,"A",{href:!0});var Z5t=s(IU);CMr=r(Z5t,"TFMPNetForSequenceClassification"),Z5t.forEach(t),wMr=r(iIe," (MPNet model)"),iIe.forEach(t),AMr=i(ae),sM=n(ae,"LI",{});var dIe=s(sM);ZFe=n(dIe,"STRONG",{});var e0t=s(ZFe);LMr=r(e0t,"openai-gpt"),e0t.forEach(t),yMr=r(dIe," \u2014 "),NU=n(dIe,"A",{href:!0});var o0t=s(NU);xMr=r(o0t,"TFOpenAIGPTForSequenceClassification"),o0t.forEach(t),$Mr=r(dIe," (OpenAI GPT model)"),dIe.forEach(t),kMr=i(ae),lM=n(ae,"LI",{});var cIe=s(lM);e6e=n(cIe,"STRONG",{});var r0t=s(e6e);SMr=r(r0t,"rembert"),r0t.forEach(t),RMr=r(cIe," \u2014 "),qU=n(cIe,"A",{href:!0});var t0t=s(qU);PMr=r(t0t,"TFRemBertForSequenceClassification"),t0t.forEach(t),BMr=r(cIe," (RemBERT model)"),cIe.forEach(t),IMr=i(ae),iM=n(ae,"LI",{});var fIe=s(iM);o6e=n(fIe,"STRONG",{});var a0t=s(o6e);NMr=r(a0t,"roberta"),a0t.forEach(t),qMr=r(fIe," \u2014 "),jU=n(fIe,"A",{href:!0});var n0t=s(jU);jMr=r(n0t,"TFRobertaForSequenceClassification"),n0t.forEach(t),DMr=r(fIe," (RoBERTa model)"),fIe.forEach(t),GMr=i(ae),dM=n(ae,"LI",{});var mIe=s(dM);r6e=n(mIe,"STRONG",{});var s0t=s(r6e);OMr=r(s0t,"roformer"),s0t.forEach(t),VMr=r(mIe," \u2014 "),DU=n(mIe,"A",{href:!0});var l0t=s(DU);XMr=r(l0t,"TFRoFormerForSequenceClassification"),l0t.forEach(t),zMr=r(mIe," (RoFormer model)"),mIe.forEach(t),WMr=i(ae),cM=n(ae,"LI",{});var gIe=s(cM);t6e=n(gIe,"STRONG",{});var i0t=s(t6e);QMr=r(i0t,"tapas"),i0t.forEach(t),HMr=r(gIe," \u2014 "),GU=n(gIe,"A",{href:!0});var d0t=s(GU);UMr=r(d0t,"TFTapasForSequenceClassification"),d0t.forEach(t),JMr=r(gIe," (TAPAS model)"),gIe.forEach(t),YMr=i(ae),fM=n(ae,"LI",{});var hIe=s(fM);a6e=n(hIe,"STRONG",{});var c0t=s(a6e);KMr=r(c0t,"transfo-xl"),c0t.forEach(t),ZMr=r(hIe," \u2014 "),OU=n(hIe,"A",{href:!0});var f0t=s(OU);e4r=r(f0t,"TFTransfoXLForSequenceClassification"),f0t.forEach(t),o4r=r(hIe," (Transformer-XL model)"),hIe.forEach(t),r4r=i(ae),mM=n(ae,"LI",{});var pIe=s(mM);n6e=n(pIe,"STRONG",{});var m0t=s(n6e);t4r=r(m0t,"xlm"),m0t.forEach(t),a4r=r(pIe," \u2014 "),VU=n(pIe,"A",{href:!0});var g0t=s(VU);n4r=r(g0t,"TFXLMForSequenceClassification"),g0t.forEach(t),s4r=r(pIe," (XLM model)"),pIe.forEach(t),l4r=i(ae),gM=n(ae,"LI",{});var _Ie=s(gM);s6e=n(_Ie,"STRONG",{});var h0t=s(s6e);i4r=r(h0t,"xlm-roberta"),h0t.forEach(t),d4r=r(_Ie," \u2014 "),XU=n(_Ie,"A",{href:!0});var p0t=s(XU);c4r=r(p0t,"TFXLMRobertaForSequenceClassification"),p0t.forEach(t),f4r=r(_Ie," (XLM-RoBERTa model)"),_Ie.forEach(t),m4r=i(ae),hM=n(ae,"LI",{});var uIe=s(hM);l6e=n(uIe,"STRONG",{});var _0t=s(l6e);g4r=r(_0t,"xlnet"),_0t.forEach(t),h4r=r(uIe," \u2014 "),zU=n(uIe,"A",{href:!0});var u0t=s(zU);p4r=r(u0t,"TFXLNetForSequenceClassification"),u0t.forEach(t),_4r=r(uIe," (XLNet model)"),uIe.forEach(t),ae.forEach(t),u4r=i(Ll),T(pM.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),XDe=i(f),dc=n(f,"H2",{class:!0});var JOe=s(dc);_M=n(JOe,"A",{id:!0,class:!0,href:!0});var b0t=s(_M);i6e=n(b0t,"SPAN",{});var v0t=s(i6e);T(d8.$$.fragment,v0t),v0t.forEach(t),b0t.forEach(t),b4r=i(JOe),d6e=n(JOe,"SPAN",{});var F0t=s(d6e);v4r=r(F0t,"TFAutoModelForMultipleChoice"),F0t.forEach(t),JOe.forEach(t),zDe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(c8.$$.fragment,yl),F4r=i(yl),cc=n(yl,"P",{});var coe=s(cc);T4r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WU=n(coe,"A",{href:!0});var T0t=s(WU);M4r=r(T0t,"from_pretrained()"),T0t.forEach(t),E4r=r(coe," class method or the "),QU=n(coe,"A",{href:!0});var M0t=s(QU);C4r=r(M0t,"from_config()"),M0t.forEach(t),w4r=r(coe,` class
method.`),coe.forEach(t),A4r=i(yl),f8=n(yl,"P",{});var YOe=s(f8);L4r=r(YOe,"This class cannot be instantiated directly using "),c6e=n(YOe,"CODE",{});var E0t=s(c6e);y4r=r(E0t,"__init__()"),E0t.forEach(t),x4r=r(YOe," (throws an error)."),YOe.forEach(t),$4r=i(yl),Pt=n(yl,"DIV",{class:!0});var nw=s(Pt);T(m8.$$.fragment,nw),k4r=i(nw),f6e=n(nw,"P",{});var C0t=s(f6e);S4r=r(C0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C0t.forEach(t),R4r=i(nw),fc=n(nw,"P",{});var foe=s(fc);P4r=r(foe,`Note:
Loading a model from its configuration file does `),m6e=n(foe,"STRONG",{});var w0t=s(m6e);B4r=r(w0t,"not"),w0t.forEach(t),I4r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=n(foe,"A",{href:!0});var A0t=s(HU);N4r=r(A0t,"from_pretrained()"),A0t.forEach(t),q4r=r(foe," to load the model weights."),foe.forEach(t),j4r=i(nw),T(uM.$$.fragment,nw),nw.forEach(t),D4r=i(yl),Sr=n(yl,"DIV",{class:!0});var xl=s(Sr);T(g8.$$.fragment,xl),G4r=i(xl),g6e=n(xl,"P",{});var L0t=s(g6e);O4r=r(L0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L0t.forEach(t),V4r=i(xl),sn=n(xl,"P",{});var sw=s(sn);X4r=r(sw,"The model class to instantiate is selected based on the "),h6e=n(sw,"CODE",{});var y0t=s(h6e);z4r=r(y0t,"model_type"),y0t.forEach(t),W4r=r(sw,` property of the config object (either
passed as an argument or loaded from `),p6e=n(sw,"CODE",{});var x0t=s(p6e);Q4r=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),H4r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(sw,"CODE",{});var $0t=s(_6e);U4r=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),J4r=r(sw,":"),sw.forEach(t),Y4r=i(xl),pe=n(xl,"UL",{});var be=s(pe);bM=n(be,"LI",{});var bIe=s(bM);u6e=n(bIe,"STRONG",{});var k0t=s(u6e);K4r=r(k0t,"albert"),k0t.forEach(t),Z4r=r(bIe," \u2014 "),UU=n(bIe,"A",{href:!0});var S0t=s(UU);eEr=r(S0t,"TFAlbertForMultipleChoice"),S0t.forEach(t),oEr=r(bIe," (ALBERT model)"),bIe.forEach(t),rEr=i(be),vM=n(be,"LI",{});var vIe=s(vM);b6e=n(vIe,"STRONG",{});var R0t=s(b6e);tEr=r(R0t,"bert"),R0t.forEach(t),aEr=r(vIe," \u2014 "),JU=n(vIe,"A",{href:!0});var P0t=s(JU);nEr=r(P0t,"TFBertForMultipleChoice"),P0t.forEach(t),sEr=r(vIe," (BERT model)"),vIe.forEach(t),lEr=i(be),FM=n(be,"LI",{});var FIe=s(FM);v6e=n(FIe,"STRONG",{});var B0t=s(v6e);iEr=r(B0t,"camembert"),B0t.forEach(t),dEr=r(FIe," \u2014 "),YU=n(FIe,"A",{href:!0});var I0t=s(YU);cEr=r(I0t,"TFCamembertForMultipleChoice"),I0t.forEach(t),fEr=r(FIe," (CamemBERT model)"),FIe.forEach(t),mEr=i(be),TM=n(be,"LI",{});var TIe=s(TM);F6e=n(TIe,"STRONG",{});var N0t=s(F6e);gEr=r(N0t,"convbert"),N0t.forEach(t),hEr=r(TIe," \u2014 "),KU=n(TIe,"A",{href:!0});var q0t=s(KU);pEr=r(q0t,"TFConvBertForMultipleChoice"),q0t.forEach(t),_Er=r(TIe," (ConvBERT model)"),TIe.forEach(t),uEr=i(be),MM=n(be,"LI",{});var MIe=s(MM);T6e=n(MIe,"STRONG",{});var j0t=s(T6e);bEr=r(j0t,"distilbert"),j0t.forEach(t),vEr=r(MIe," \u2014 "),ZU=n(MIe,"A",{href:!0});var D0t=s(ZU);FEr=r(D0t,"TFDistilBertForMultipleChoice"),D0t.forEach(t),TEr=r(MIe," (DistilBERT model)"),MIe.forEach(t),MEr=i(be),EM=n(be,"LI",{});var EIe=s(EM);M6e=n(EIe,"STRONG",{});var G0t=s(M6e);EEr=r(G0t,"electra"),G0t.forEach(t),CEr=r(EIe," \u2014 "),eJ=n(EIe,"A",{href:!0});var O0t=s(eJ);wEr=r(O0t,"TFElectraForMultipleChoice"),O0t.forEach(t),AEr=r(EIe," (ELECTRA model)"),EIe.forEach(t),LEr=i(be),CM=n(be,"LI",{});var CIe=s(CM);E6e=n(CIe,"STRONG",{});var V0t=s(E6e);yEr=r(V0t,"flaubert"),V0t.forEach(t),xEr=r(CIe," \u2014 "),oJ=n(CIe,"A",{href:!0});var X0t=s(oJ);$Er=r(X0t,"TFFlaubertForMultipleChoice"),X0t.forEach(t),kEr=r(CIe," (FlauBERT model)"),CIe.forEach(t),SEr=i(be),wM=n(be,"LI",{});var wIe=s(wM);C6e=n(wIe,"STRONG",{});var z0t=s(C6e);REr=r(z0t,"funnel"),z0t.forEach(t),PEr=r(wIe," \u2014 "),rJ=n(wIe,"A",{href:!0});var W0t=s(rJ);BEr=r(W0t,"TFFunnelForMultipleChoice"),W0t.forEach(t),IEr=r(wIe," (Funnel Transformer model)"),wIe.forEach(t),NEr=i(be),AM=n(be,"LI",{});var AIe=s(AM);w6e=n(AIe,"STRONG",{});var Q0t=s(w6e);qEr=r(Q0t,"longformer"),Q0t.forEach(t),jEr=r(AIe," \u2014 "),tJ=n(AIe,"A",{href:!0});var H0t=s(tJ);DEr=r(H0t,"TFLongformerForMultipleChoice"),H0t.forEach(t),GEr=r(AIe," (Longformer model)"),AIe.forEach(t),OEr=i(be),LM=n(be,"LI",{});var LIe=s(LM);A6e=n(LIe,"STRONG",{});var U0t=s(A6e);VEr=r(U0t,"mobilebert"),U0t.forEach(t),XEr=r(LIe," \u2014 "),aJ=n(LIe,"A",{href:!0});var J0t=s(aJ);zEr=r(J0t,"TFMobileBertForMultipleChoice"),J0t.forEach(t),WEr=r(LIe," (MobileBERT model)"),LIe.forEach(t),QEr=i(be),yM=n(be,"LI",{});var yIe=s(yM);L6e=n(yIe,"STRONG",{});var Y0t=s(L6e);HEr=r(Y0t,"mpnet"),Y0t.forEach(t),UEr=r(yIe," \u2014 "),nJ=n(yIe,"A",{href:!0});var K0t=s(nJ);JEr=r(K0t,"TFMPNetForMultipleChoice"),K0t.forEach(t),YEr=r(yIe," (MPNet model)"),yIe.forEach(t),KEr=i(be),xM=n(be,"LI",{});var xIe=s(xM);y6e=n(xIe,"STRONG",{});var Z0t=s(y6e);ZEr=r(Z0t,"rembert"),Z0t.forEach(t),eCr=r(xIe," \u2014 "),sJ=n(xIe,"A",{href:!0});var ewt=s(sJ);oCr=r(ewt,"TFRemBertForMultipleChoice"),ewt.forEach(t),rCr=r(xIe," (RemBERT model)"),xIe.forEach(t),tCr=i(be),$M=n(be,"LI",{});var $Ie=s($M);x6e=n($Ie,"STRONG",{});var owt=s(x6e);aCr=r(owt,"roberta"),owt.forEach(t),nCr=r($Ie," \u2014 "),lJ=n($Ie,"A",{href:!0});var rwt=s(lJ);sCr=r(rwt,"TFRobertaForMultipleChoice"),rwt.forEach(t),lCr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),iCr=i(be),kM=n(be,"LI",{});var kIe=s(kM);$6e=n(kIe,"STRONG",{});var twt=s($6e);dCr=r(twt,"roformer"),twt.forEach(t),cCr=r(kIe," \u2014 "),iJ=n(kIe,"A",{href:!0});var awt=s(iJ);fCr=r(awt,"TFRoFormerForMultipleChoice"),awt.forEach(t),mCr=r(kIe," (RoFormer model)"),kIe.forEach(t),gCr=i(be),SM=n(be,"LI",{});var SIe=s(SM);k6e=n(SIe,"STRONG",{});var nwt=s(k6e);hCr=r(nwt,"xlm"),nwt.forEach(t),pCr=r(SIe," \u2014 "),dJ=n(SIe,"A",{href:!0});var swt=s(dJ);_Cr=r(swt,"TFXLMForMultipleChoice"),swt.forEach(t),uCr=r(SIe," (XLM model)"),SIe.forEach(t),bCr=i(be),RM=n(be,"LI",{});var RIe=s(RM);S6e=n(RIe,"STRONG",{});var lwt=s(S6e);vCr=r(lwt,"xlm-roberta"),lwt.forEach(t),FCr=r(RIe," \u2014 "),cJ=n(RIe,"A",{href:!0});var iwt=s(cJ);TCr=r(iwt,"TFXLMRobertaForMultipleChoice"),iwt.forEach(t),MCr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),ECr=i(be),PM=n(be,"LI",{});var PIe=s(PM);R6e=n(PIe,"STRONG",{});var dwt=s(R6e);CCr=r(dwt,"xlnet"),dwt.forEach(t),wCr=r(PIe," \u2014 "),fJ=n(PIe,"A",{href:!0});var cwt=s(fJ);ACr=r(cwt,"TFXLNetForMultipleChoice"),cwt.forEach(t),LCr=r(PIe," (XLNet model)"),PIe.forEach(t),be.forEach(t),yCr=i(xl),T(BM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),WDe=i(f),mc=n(f,"H2",{class:!0});var KOe=s(mc);IM=n(KOe,"A",{id:!0,class:!0,href:!0});var fwt=s(IM);P6e=n(fwt,"SPAN",{});var mwt=s(P6e);T(h8.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),xCr=i(KOe),B6e=n(KOe,"SPAN",{});var gwt=s(B6e);$Cr=r(gwt,"TFAutoModelForNextSentencePrediction"),gwt.forEach(t),KOe.forEach(t),QDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(p8.$$.fragment,$l),kCr=i($l),gc=n($l,"P",{});var moe=s(gc);SCr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mJ=n(moe,"A",{href:!0});var hwt=s(mJ);RCr=r(hwt,"from_pretrained()"),hwt.forEach(t),PCr=r(moe," class method or the "),gJ=n(moe,"A",{href:!0});var pwt=s(gJ);BCr=r(pwt,"from_config()"),pwt.forEach(t),ICr=r(moe,` class
method.`),moe.forEach(t),NCr=i($l),_8=n($l,"P",{});var ZOe=s(_8);qCr=r(ZOe,"This class cannot be instantiated directly using "),I6e=n(ZOe,"CODE",{});var _wt=s(I6e);jCr=r(_wt,"__init__()"),_wt.forEach(t),DCr=r(ZOe," (throws an error)."),ZOe.forEach(t),GCr=i($l),Bt=n($l,"DIV",{class:!0});var lw=s(Bt);T(u8.$$.fragment,lw),OCr=i(lw),N6e=n(lw,"P",{});var uwt=s(N6e);VCr=r(uwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uwt.forEach(t),XCr=i(lw),hc=n(lw,"P",{});var goe=s(hc);zCr=r(goe,`Note:
Loading a model from its configuration file does `),q6e=n(goe,"STRONG",{});var bwt=s(q6e);WCr=r(bwt,"not"),bwt.forEach(t),QCr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(goe,"A",{href:!0});var vwt=s(hJ);HCr=r(vwt,"from_pretrained()"),vwt.forEach(t),UCr=r(goe," to load the model weights."),goe.forEach(t),JCr=i(lw),T(NM.$$.fragment,lw),lw.forEach(t),YCr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(b8.$$.fragment,kl),KCr=i(kl),j6e=n(kl,"P",{});var Fwt=s(j6e);ZCr=r(Fwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fwt.forEach(t),e5r=i(kl),ln=n(kl,"P",{});var iw=s(ln);o5r=r(iw,"The model class to instantiate is selected based on the "),D6e=n(iw,"CODE",{});var Twt=s(D6e);r5r=r(Twt,"model_type"),Twt.forEach(t),t5r=r(iw,` property of the config object (either
passed as an argument or loaded from `),G6e=n(iw,"CODE",{});var Mwt=s(G6e);a5r=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),n5r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O6e=n(iw,"CODE",{});var Ewt=s(O6e);s5r=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),l5r=r(iw,":"),iw.forEach(t),i5r=i(kl),v8=n(kl,"UL",{});var eVe=s(v8);qM=n(eVe,"LI",{});var BIe=s(qM);V6e=n(BIe,"STRONG",{});var Cwt=s(V6e);d5r=r(Cwt,"bert"),Cwt.forEach(t),c5r=r(BIe," \u2014 "),pJ=n(BIe,"A",{href:!0});var wwt=s(pJ);f5r=r(wwt,"TFBertForNextSentencePrediction"),wwt.forEach(t),m5r=r(BIe," (BERT model)"),BIe.forEach(t),g5r=i(eVe),jM=n(eVe,"LI",{});var IIe=s(jM);X6e=n(IIe,"STRONG",{});var Awt=s(X6e);h5r=r(Awt,"mobilebert"),Awt.forEach(t),p5r=r(IIe," \u2014 "),_J=n(IIe,"A",{href:!0});var Lwt=s(_J);_5r=r(Lwt,"TFMobileBertForNextSentencePrediction"),Lwt.forEach(t),u5r=r(IIe," (MobileBERT model)"),IIe.forEach(t),eVe.forEach(t),b5r=i(kl),T(DM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),HDe=i(f),pc=n(f,"H2",{class:!0});var oVe=s(pc);GM=n(oVe,"A",{id:!0,class:!0,href:!0});var ywt=s(GM);z6e=n(ywt,"SPAN",{});var xwt=s(z6e);T(F8.$$.fragment,xwt),xwt.forEach(t),ywt.forEach(t),v5r=i(oVe),W6e=n(oVe,"SPAN",{});var $wt=s(W6e);F5r=r($wt,"TFAutoModelForTableQuestionAnswering"),$wt.forEach(t),oVe.forEach(t),UDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(T8.$$.fragment,Sl),T5r=i(Sl),_c=n(Sl,"P",{});var hoe=s(_c);M5r=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uJ=n(hoe,"A",{href:!0});var kwt=s(uJ);E5r=r(kwt,"from_pretrained()"),kwt.forEach(t),C5r=r(hoe," class method or the "),bJ=n(hoe,"A",{href:!0});var Swt=s(bJ);w5r=r(Swt,"from_config()"),Swt.forEach(t),A5r=r(hoe,` class
method.`),hoe.forEach(t),L5r=i(Sl),M8=n(Sl,"P",{});var rVe=s(M8);y5r=r(rVe,"This class cannot be instantiated directly using "),Q6e=n(rVe,"CODE",{});var Rwt=s(Q6e);x5r=r(Rwt,"__init__()"),Rwt.forEach(t),$5r=r(rVe," (throws an error)."),rVe.forEach(t),k5r=i(Sl),It=n(Sl,"DIV",{class:!0});var dw=s(It);T(E8.$$.fragment,dw),S5r=i(dw),H6e=n(dw,"P",{});var Pwt=s(H6e);R5r=r(Pwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pwt.forEach(t),P5r=i(dw),uc=n(dw,"P",{});var poe=s(uc);B5r=r(poe,`Note:
Loading a model from its configuration file does `),U6e=n(poe,"STRONG",{});var Bwt=s(U6e);I5r=r(Bwt,"not"),Bwt.forEach(t),N5r=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(poe,"A",{href:!0});var Iwt=s(vJ);q5r=r(Iwt,"from_pretrained()"),Iwt.forEach(t),j5r=r(poe," to load the model weights."),poe.forEach(t),D5r=i(dw),T(OM.$$.fragment,dw),dw.forEach(t),G5r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(C8.$$.fragment,Rl),O5r=i(Rl),J6e=n(Rl,"P",{});var Nwt=s(J6e);V5r=r(Nwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nwt.forEach(t),X5r=i(Rl),dn=n(Rl,"P",{});var cw=s(dn);z5r=r(cw,"The model class to instantiate is selected based on the "),Y6e=n(cw,"CODE",{});var qwt=s(Y6e);W5r=r(qwt,"model_type"),qwt.forEach(t),Q5r=r(cw,` property of the config object (either
passed as an argument or loaded from `),K6e=n(cw,"CODE",{});var jwt=s(K6e);H5r=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),U5r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(cw,"CODE",{});var Dwt=s(Z6e);J5r=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),Y5r=r(cw,":"),cw.forEach(t),K5r=i(Rl),eTe=n(Rl,"UL",{});var Gwt=s(eTe);VM=n(Gwt,"LI",{});var NIe=s(VM);oTe=n(NIe,"STRONG",{});var Owt=s(oTe);Z5r=r(Owt,"tapas"),Owt.forEach(t),e0r=r(NIe," \u2014 "),FJ=n(NIe,"A",{href:!0});var Vwt=s(FJ);o0r=r(Vwt,"TFTapasForQuestionAnswering"),Vwt.forEach(t),r0r=r(NIe," (TAPAS model)"),NIe.forEach(t),Gwt.forEach(t),t0r=i(Rl),T(XM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),JDe=i(f),bc=n(f,"H2",{class:!0});var tVe=s(bc);zM=n(tVe,"A",{id:!0,class:!0,href:!0});var Xwt=s(zM);rTe=n(Xwt,"SPAN",{});var zwt=s(rTe);T(w8.$$.fragment,zwt),zwt.forEach(t),Xwt.forEach(t),a0r=i(tVe),tTe=n(tVe,"SPAN",{});var Wwt=s(tTe);n0r=r(Wwt,"TFAutoModelForTokenClassification"),Wwt.forEach(t),tVe.forEach(t),YDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(A8.$$.fragment,Pl),s0r=i(Pl),vc=n(Pl,"P",{});var _oe=s(vc);l0r=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=n(_oe,"A",{href:!0});var Qwt=s(TJ);i0r=r(Qwt,"from_pretrained()"),Qwt.forEach(t),d0r=r(_oe," class method or the "),MJ=n(_oe,"A",{href:!0});var Hwt=s(MJ);c0r=r(Hwt,"from_config()"),Hwt.forEach(t),f0r=r(_oe,` class
method.`),_oe.forEach(t),m0r=i(Pl),L8=n(Pl,"P",{});var aVe=s(L8);g0r=r(aVe,"This class cannot be instantiated directly using "),aTe=n(aVe,"CODE",{});var Uwt=s(aTe);h0r=r(Uwt,"__init__()"),Uwt.forEach(t),p0r=r(aVe," (throws an error)."),aVe.forEach(t),_0r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var fw=s(Nt);T(y8.$$.fragment,fw),u0r=i(fw),nTe=n(fw,"P",{});var Jwt=s(nTe);b0r=r(Jwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jwt.forEach(t),v0r=i(fw),Fc=n(fw,"P",{});var uoe=s(Fc);F0r=r(uoe,`Note:
Loading a model from its configuration file does `),sTe=n(uoe,"STRONG",{});var Ywt=s(sTe);T0r=r(Ywt,"not"),Ywt.forEach(t),M0r=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(uoe,"A",{href:!0});var Kwt=s(EJ);E0r=r(Kwt,"from_pretrained()"),Kwt.forEach(t),C0r=r(uoe," to load the model weights."),uoe.forEach(t),w0r=i(fw),T(WM.$$.fragment,fw),fw.forEach(t),A0r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(x8.$$.fragment,Bl),L0r=i(Bl),lTe=n(Bl,"P",{});var Zwt=s(lTe);y0r=r(Zwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zwt.forEach(t),x0r=i(Bl),cn=n(Bl,"P",{});var mw=s(cn);$0r=r(mw,"The model class to instantiate is selected based on the "),iTe=n(mw,"CODE",{});var eAt=s(iTe);k0r=r(eAt,"model_type"),eAt.forEach(t),S0r=r(mw,` property of the config object (either
passed as an argument or loaded from `),dTe=n(mw,"CODE",{});var oAt=s(dTe);R0r=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),P0r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(mw,"CODE",{});var rAt=s(cTe);B0r=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),I0r=r(mw,":"),mw.forEach(t),N0r=i(Bl),de=n(Bl,"UL",{});var me=s(de);QM=n(me,"LI",{});var qIe=s(QM);fTe=n(qIe,"STRONG",{});var tAt=s(fTe);q0r=r(tAt,"albert"),tAt.forEach(t),j0r=r(qIe," \u2014 "),CJ=n(qIe,"A",{href:!0});var aAt=s(CJ);D0r=r(aAt,"TFAlbertForTokenClassification"),aAt.forEach(t),G0r=r(qIe," (ALBERT model)"),qIe.forEach(t),O0r=i(me),HM=n(me,"LI",{});var jIe=s(HM);mTe=n(jIe,"STRONG",{});var nAt=s(mTe);V0r=r(nAt,"bert"),nAt.forEach(t),X0r=r(jIe," \u2014 "),wJ=n(jIe,"A",{href:!0});var sAt=s(wJ);z0r=r(sAt,"TFBertForTokenClassification"),sAt.forEach(t),W0r=r(jIe," (BERT model)"),jIe.forEach(t),Q0r=i(me),UM=n(me,"LI",{});var DIe=s(UM);gTe=n(DIe,"STRONG",{});var lAt=s(gTe);H0r=r(lAt,"camembert"),lAt.forEach(t),U0r=r(DIe," \u2014 "),AJ=n(DIe,"A",{href:!0});var iAt=s(AJ);J0r=r(iAt,"TFCamembertForTokenClassification"),iAt.forEach(t),Y0r=r(DIe," (CamemBERT model)"),DIe.forEach(t),K0r=i(me),JM=n(me,"LI",{});var GIe=s(JM);hTe=n(GIe,"STRONG",{});var dAt=s(hTe);Z0r=r(dAt,"convbert"),dAt.forEach(t),ewr=r(GIe," \u2014 "),LJ=n(GIe,"A",{href:!0});var cAt=s(LJ);owr=r(cAt,"TFConvBertForTokenClassification"),cAt.forEach(t),rwr=r(GIe," (ConvBERT model)"),GIe.forEach(t),twr=i(me),YM=n(me,"LI",{});var OIe=s(YM);pTe=n(OIe,"STRONG",{});var fAt=s(pTe);awr=r(fAt,"deberta"),fAt.forEach(t),nwr=r(OIe," \u2014 "),yJ=n(OIe,"A",{href:!0});var mAt=s(yJ);swr=r(mAt,"TFDebertaForTokenClassification"),mAt.forEach(t),lwr=r(OIe," (DeBERTa model)"),OIe.forEach(t),iwr=i(me),KM=n(me,"LI",{});var VIe=s(KM);_Te=n(VIe,"STRONG",{});var gAt=s(_Te);dwr=r(gAt,"deberta-v2"),gAt.forEach(t),cwr=r(VIe," \u2014 "),xJ=n(VIe,"A",{href:!0});var hAt=s(xJ);fwr=r(hAt,"TFDebertaV2ForTokenClassification"),hAt.forEach(t),mwr=r(VIe," (DeBERTa-v2 model)"),VIe.forEach(t),gwr=i(me),ZM=n(me,"LI",{});var XIe=s(ZM);uTe=n(XIe,"STRONG",{});var pAt=s(uTe);hwr=r(pAt,"distilbert"),pAt.forEach(t),pwr=r(XIe," \u2014 "),$J=n(XIe,"A",{href:!0});var _At=s($J);_wr=r(_At,"TFDistilBertForTokenClassification"),_At.forEach(t),uwr=r(XIe," (DistilBERT model)"),XIe.forEach(t),bwr=i(me),e4=n(me,"LI",{});var zIe=s(e4);bTe=n(zIe,"STRONG",{});var uAt=s(bTe);vwr=r(uAt,"electra"),uAt.forEach(t),Fwr=r(zIe," \u2014 "),kJ=n(zIe,"A",{href:!0});var bAt=s(kJ);Twr=r(bAt,"TFElectraForTokenClassification"),bAt.forEach(t),Mwr=r(zIe," (ELECTRA model)"),zIe.forEach(t),Ewr=i(me),o4=n(me,"LI",{});var WIe=s(o4);vTe=n(WIe,"STRONG",{});var vAt=s(vTe);Cwr=r(vAt,"flaubert"),vAt.forEach(t),wwr=r(WIe," \u2014 "),SJ=n(WIe,"A",{href:!0});var FAt=s(SJ);Awr=r(FAt,"TFFlaubertForTokenClassification"),FAt.forEach(t),Lwr=r(WIe," (FlauBERT model)"),WIe.forEach(t),ywr=i(me),r4=n(me,"LI",{});var QIe=s(r4);FTe=n(QIe,"STRONG",{});var TAt=s(FTe);xwr=r(TAt,"funnel"),TAt.forEach(t),$wr=r(QIe," \u2014 "),RJ=n(QIe,"A",{href:!0});var MAt=s(RJ);kwr=r(MAt,"TFFunnelForTokenClassification"),MAt.forEach(t),Swr=r(QIe," (Funnel Transformer model)"),QIe.forEach(t),Rwr=i(me),t4=n(me,"LI",{});var HIe=s(t4);TTe=n(HIe,"STRONG",{});var EAt=s(TTe);Pwr=r(EAt,"layoutlm"),EAt.forEach(t),Bwr=r(HIe," \u2014 "),PJ=n(HIe,"A",{href:!0});var CAt=s(PJ);Iwr=r(CAt,"TFLayoutLMForTokenClassification"),CAt.forEach(t),Nwr=r(HIe," (LayoutLM model)"),HIe.forEach(t),qwr=i(me),a4=n(me,"LI",{});var UIe=s(a4);MTe=n(UIe,"STRONG",{});var wAt=s(MTe);jwr=r(wAt,"longformer"),wAt.forEach(t),Dwr=r(UIe," \u2014 "),BJ=n(UIe,"A",{href:!0});var AAt=s(BJ);Gwr=r(AAt,"TFLongformerForTokenClassification"),AAt.forEach(t),Owr=r(UIe," (Longformer model)"),UIe.forEach(t),Vwr=i(me),n4=n(me,"LI",{});var JIe=s(n4);ETe=n(JIe,"STRONG",{});var LAt=s(ETe);Xwr=r(LAt,"mobilebert"),LAt.forEach(t),zwr=r(JIe," \u2014 "),IJ=n(JIe,"A",{href:!0});var yAt=s(IJ);Wwr=r(yAt,"TFMobileBertForTokenClassification"),yAt.forEach(t),Qwr=r(JIe," (MobileBERT model)"),JIe.forEach(t),Hwr=i(me),s4=n(me,"LI",{});var YIe=s(s4);CTe=n(YIe,"STRONG",{});var xAt=s(CTe);Uwr=r(xAt,"mpnet"),xAt.forEach(t),Jwr=r(YIe," \u2014 "),NJ=n(YIe,"A",{href:!0});var $At=s(NJ);Ywr=r($At,"TFMPNetForTokenClassification"),$At.forEach(t),Kwr=r(YIe," (MPNet model)"),YIe.forEach(t),Zwr=i(me),l4=n(me,"LI",{});var KIe=s(l4);wTe=n(KIe,"STRONG",{});var kAt=s(wTe);eAr=r(kAt,"rembert"),kAt.forEach(t),oAr=r(KIe," \u2014 "),qJ=n(KIe,"A",{href:!0});var SAt=s(qJ);rAr=r(SAt,"TFRemBertForTokenClassification"),SAt.forEach(t),tAr=r(KIe," (RemBERT model)"),KIe.forEach(t),aAr=i(me),i4=n(me,"LI",{});var ZIe=s(i4);ATe=n(ZIe,"STRONG",{});var RAt=s(ATe);nAr=r(RAt,"roberta"),RAt.forEach(t),sAr=r(ZIe," \u2014 "),jJ=n(ZIe,"A",{href:!0});var PAt=s(jJ);lAr=r(PAt,"TFRobertaForTokenClassification"),PAt.forEach(t),iAr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),dAr=i(me),d4=n(me,"LI",{});var eNe=s(d4);LTe=n(eNe,"STRONG",{});var BAt=s(LTe);cAr=r(BAt,"roformer"),BAt.forEach(t),fAr=r(eNe," \u2014 "),DJ=n(eNe,"A",{href:!0});var IAt=s(DJ);mAr=r(IAt,"TFRoFormerForTokenClassification"),IAt.forEach(t),gAr=r(eNe," (RoFormer model)"),eNe.forEach(t),hAr=i(me),c4=n(me,"LI",{});var oNe=s(c4);yTe=n(oNe,"STRONG",{});var NAt=s(yTe);pAr=r(NAt,"xlm"),NAt.forEach(t),_Ar=r(oNe," \u2014 "),GJ=n(oNe,"A",{href:!0});var qAt=s(GJ);uAr=r(qAt,"TFXLMForTokenClassification"),qAt.forEach(t),bAr=r(oNe," (XLM model)"),oNe.forEach(t),vAr=i(me),f4=n(me,"LI",{});var rNe=s(f4);xTe=n(rNe,"STRONG",{});var jAt=s(xTe);FAr=r(jAt,"xlm-roberta"),jAt.forEach(t),TAr=r(rNe," \u2014 "),OJ=n(rNe,"A",{href:!0});var DAt=s(OJ);MAr=r(DAt,"TFXLMRobertaForTokenClassification"),DAt.forEach(t),EAr=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),CAr=i(me),m4=n(me,"LI",{});var tNe=s(m4);$Te=n(tNe,"STRONG",{});var GAt=s($Te);wAr=r(GAt,"xlnet"),GAt.forEach(t),AAr=r(tNe," \u2014 "),VJ=n(tNe,"A",{href:!0});var OAt=s(VJ);LAr=r(OAt,"TFXLNetForTokenClassification"),OAt.forEach(t),yAr=r(tNe," (XLNet model)"),tNe.forEach(t),me.forEach(t),xAr=i(Bl),T(g4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),KDe=i(f),Tc=n(f,"H2",{class:!0});var nVe=s(Tc);h4=n(nVe,"A",{id:!0,class:!0,href:!0});var VAt=s(h4);kTe=n(VAt,"SPAN",{});var XAt=s(kTe);T($8.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),$Ar=i(nVe),STe=n(nVe,"SPAN",{});var zAt=s(STe);kAr=r(zAt,"TFAutoModelForQuestionAnswering"),zAt.forEach(t),nVe.forEach(t),ZDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(k8.$$.fragment,Il),SAr=i(Il),Mc=n(Il,"P",{});var boe=s(Mc);RAr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XJ=n(boe,"A",{href:!0});var WAt=s(XJ);PAr=r(WAt,"from_pretrained()"),WAt.forEach(t),BAr=r(boe," class method or the "),zJ=n(boe,"A",{href:!0});var QAt=s(zJ);IAr=r(QAt,"from_config()"),QAt.forEach(t),NAr=r(boe,` class
method.`),boe.forEach(t),qAr=i(Il),S8=n(Il,"P",{});var sVe=s(S8);jAr=r(sVe,"This class cannot be instantiated directly using "),RTe=n(sVe,"CODE",{});var HAt=s(RTe);DAr=r(HAt,"__init__()"),HAt.forEach(t),GAr=r(sVe," (throws an error)."),sVe.forEach(t),OAr=i(Il),qt=n(Il,"DIV",{class:!0});var gw=s(qt);T(R8.$$.fragment,gw),VAr=i(gw),PTe=n(gw,"P",{});var UAt=s(PTe);XAr=r(UAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UAt.forEach(t),zAr=i(gw),Ec=n(gw,"P",{});var voe=s(Ec);WAr=r(voe,`Note:
Loading a model from its configuration file does `),BTe=n(voe,"STRONG",{});var JAt=s(BTe);QAr=r(JAt,"not"),JAt.forEach(t),HAr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(voe,"A",{href:!0});var YAt=s(WJ);UAr=r(YAt,"from_pretrained()"),YAt.forEach(t),JAr=r(voe," to load the model weights."),voe.forEach(t),YAr=i(gw),T(p4.$$.fragment,gw),gw.forEach(t),KAr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(P8.$$.fragment,Nl),ZAr=i(Nl),ITe=n(Nl,"P",{});var KAt=s(ITe);eLr=r(KAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KAt.forEach(t),oLr=i(Nl),fn=n(Nl,"P",{});var hw=s(fn);rLr=r(hw,"The model class to instantiate is selected based on the "),NTe=n(hw,"CODE",{});var ZAt=s(NTe);tLr=r(ZAt,"model_type"),ZAt.forEach(t),aLr=r(hw,` property of the config object (either
passed as an argument or loaded from `),qTe=n(hw,"CODE",{});var eLt=s(qTe);nLr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),sLr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(hw,"CODE",{});var oLt=s(jTe);lLr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),iLr=r(hw,":"),hw.forEach(t),dLr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);_4=n(ge,"LI",{});var aNe=s(_4);DTe=n(aNe,"STRONG",{});var rLt=s(DTe);cLr=r(rLt,"albert"),rLt.forEach(t),fLr=r(aNe," \u2014 "),QJ=n(aNe,"A",{href:!0});var tLt=s(QJ);mLr=r(tLt,"TFAlbertForQuestionAnswering"),tLt.forEach(t),gLr=r(aNe," (ALBERT model)"),aNe.forEach(t),hLr=i(ge),u4=n(ge,"LI",{});var nNe=s(u4);GTe=n(nNe,"STRONG",{});var aLt=s(GTe);pLr=r(aLt,"bert"),aLt.forEach(t),_Lr=r(nNe," \u2014 "),HJ=n(nNe,"A",{href:!0});var nLt=s(HJ);uLr=r(nLt,"TFBertForQuestionAnswering"),nLt.forEach(t),bLr=r(nNe," (BERT model)"),nNe.forEach(t),vLr=i(ge),b4=n(ge,"LI",{});var sNe=s(b4);OTe=n(sNe,"STRONG",{});var sLt=s(OTe);FLr=r(sLt,"camembert"),sLt.forEach(t),TLr=r(sNe," \u2014 "),UJ=n(sNe,"A",{href:!0});var lLt=s(UJ);MLr=r(lLt,"TFCamembertForQuestionAnswering"),lLt.forEach(t),ELr=r(sNe," (CamemBERT model)"),sNe.forEach(t),CLr=i(ge),v4=n(ge,"LI",{});var lNe=s(v4);VTe=n(lNe,"STRONG",{});var iLt=s(VTe);wLr=r(iLt,"convbert"),iLt.forEach(t),ALr=r(lNe," \u2014 "),JJ=n(lNe,"A",{href:!0});var dLt=s(JJ);LLr=r(dLt,"TFConvBertForQuestionAnswering"),dLt.forEach(t),yLr=r(lNe," (ConvBERT model)"),lNe.forEach(t),xLr=i(ge),F4=n(ge,"LI",{});var iNe=s(F4);XTe=n(iNe,"STRONG",{});var cLt=s(XTe);$Lr=r(cLt,"deberta"),cLt.forEach(t),kLr=r(iNe," \u2014 "),YJ=n(iNe,"A",{href:!0});var fLt=s(YJ);SLr=r(fLt,"TFDebertaForQuestionAnswering"),fLt.forEach(t),RLr=r(iNe," (DeBERTa model)"),iNe.forEach(t),PLr=i(ge),T4=n(ge,"LI",{});var dNe=s(T4);zTe=n(dNe,"STRONG",{});var mLt=s(zTe);BLr=r(mLt,"deberta-v2"),mLt.forEach(t),ILr=r(dNe," \u2014 "),KJ=n(dNe,"A",{href:!0});var gLt=s(KJ);NLr=r(gLt,"TFDebertaV2ForQuestionAnswering"),gLt.forEach(t),qLr=r(dNe," (DeBERTa-v2 model)"),dNe.forEach(t),jLr=i(ge),M4=n(ge,"LI",{});var cNe=s(M4);WTe=n(cNe,"STRONG",{});var hLt=s(WTe);DLr=r(hLt,"distilbert"),hLt.forEach(t),GLr=r(cNe," \u2014 "),ZJ=n(cNe,"A",{href:!0});var pLt=s(ZJ);OLr=r(pLt,"TFDistilBertForQuestionAnswering"),pLt.forEach(t),VLr=r(cNe," (DistilBERT model)"),cNe.forEach(t),XLr=i(ge),E4=n(ge,"LI",{});var fNe=s(E4);QTe=n(fNe,"STRONG",{});var _Lt=s(QTe);zLr=r(_Lt,"electra"),_Lt.forEach(t),WLr=r(fNe," \u2014 "),eY=n(fNe,"A",{href:!0});var uLt=s(eY);QLr=r(uLt,"TFElectraForQuestionAnswering"),uLt.forEach(t),HLr=r(fNe," (ELECTRA model)"),fNe.forEach(t),ULr=i(ge),C4=n(ge,"LI",{});var mNe=s(C4);HTe=n(mNe,"STRONG",{});var bLt=s(HTe);JLr=r(bLt,"flaubert"),bLt.forEach(t),YLr=r(mNe," \u2014 "),oY=n(mNe,"A",{href:!0});var vLt=s(oY);KLr=r(vLt,"TFFlaubertForQuestionAnsweringSimple"),vLt.forEach(t),ZLr=r(mNe," (FlauBERT model)"),mNe.forEach(t),eyr=i(ge),w4=n(ge,"LI",{});var gNe=s(w4);UTe=n(gNe,"STRONG",{});var FLt=s(UTe);oyr=r(FLt,"funnel"),FLt.forEach(t),ryr=r(gNe," \u2014 "),rY=n(gNe,"A",{href:!0});var TLt=s(rY);tyr=r(TLt,"TFFunnelForQuestionAnswering"),TLt.forEach(t),ayr=r(gNe," (Funnel Transformer model)"),gNe.forEach(t),nyr=i(ge),A4=n(ge,"LI",{});var hNe=s(A4);JTe=n(hNe,"STRONG",{});var MLt=s(JTe);syr=r(MLt,"gptj"),MLt.forEach(t),lyr=r(hNe," \u2014 "),tY=n(hNe,"A",{href:!0});var ELt=s(tY);iyr=r(ELt,"TFGPTJForQuestionAnswering"),ELt.forEach(t),dyr=r(hNe," (GPT-J model)"),hNe.forEach(t),cyr=i(ge),L4=n(ge,"LI",{});var pNe=s(L4);YTe=n(pNe,"STRONG",{});var CLt=s(YTe);fyr=r(CLt,"longformer"),CLt.forEach(t),myr=r(pNe," \u2014 "),aY=n(pNe,"A",{href:!0});var wLt=s(aY);gyr=r(wLt,"TFLongformerForQuestionAnswering"),wLt.forEach(t),hyr=r(pNe," (Longformer model)"),pNe.forEach(t),pyr=i(ge),y4=n(ge,"LI",{});var _Ne=s(y4);KTe=n(_Ne,"STRONG",{});var ALt=s(KTe);_yr=r(ALt,"mobilebert"),ALt.forEach(t),uyr=r(_Ne," \u2014 "),nY=n(_Ne,"A",{href:!0});var LLt=s(nY);byr=r(LLt,"TFMobileBertForQuestionAnswering"),LLt.forEach(t),vyr=r(_Ne," (MobileBERT model)"),_Ne.forEach(t),Fyr=i(ge),x4=n(ge,"LI",{});var uNe=s(x4);ZTe=n(uNe,"STRONG",{});var yLt=s(ZTe);Tyr=r(yLt,"mpnet"),yLt.forEach(t),Myr=r(uNe," \u2014 "),sY=n(uNe,"A",{href:!0});var xLt=s(sY);Eyr=r(xLt,"TFMPNetForQuestionAnswering"),xLt.forEach(t),Cyr=r(uNe," (MPNet model)"),uNe.forEach(t),wyr=i(ge),$4=n(ge,"LI",{});var bNe=s($4);e7e=n(bNe,"STRONG",{});var $Lt=s(e7e);Ayr=r($Lt,"rembert"),$Lt.forEach(t),Lyr=r(bNe," \u2014 "),lY=n(bNe,"A",{href:!0});var kLt=s(lY);yyr=r(kLt,"TFRemBertForQuestionAnswering"),kLt.forEach(t),xyr=r(bNe," (RemBERT model)"),bNe.forEach(t),$yr=i(ge),k4=n(ge,"LI",{});var vNe=s(k4);o7e=n(vNe,"STRONG",{});var SLt=s(o7e);kyr=r(SLt,"roberta"),SLt.forEach(t),Syr=r(vNe," \u2014 "),iY=n(vNe,"A",{href:!0});var RLt=s(iY);Ryr=r(RLt,"TFRobertaForQuestionAnswering"),RLt.forEach(t),Pyr=r(vNe," (RoBERTa model)"),vNe.forEach(t),Byr=i(ge),S4=n(ge,"LI",{});var FNe=s(S4);r7e=n(FNe,"STRONG",{});var PLt=s(r7e);Iyr=r(PLt,"roformer"),PLt.forEach(t),Nyr=r(FNe," \u2014 "),dY=n(FNe,"A",{href:!0});var BLt=s(dY);qyr=r(BLt,"TFRoFormerForQuestionAnswering"),BLt.forEach(t),jyr=r(FNe," (RoFormer model)"),FNe.forEach(t),Dyr=i(ge),R4=n(ge,"LI",{});var TNe=s(R4);t7e=n(TNe,"STRONG",{});var ILt=s(t7e);Gyr=r(ILt,"xlm"),ILt.forEach(t),Oyr=r(TNe," \u2014 "),cY=n(TNe,"A",{href:!0});var NLt=s(cY);Vyr=r(NLt,"TFXLMForQuestionAnsweringSimple"),NLt.forEach(t),Xyr=r(TNe," (XLM model)"),TNe.forEach(t),zyr=i(ge),P4=n(ge,"LI",{});var MNe=s(P4);a7e=n(MNe,"STRONG",{});var qLt=s(a7e);Wyr=r(qLt,"xlm-roberta"),qLt.forEach(t),Qyr=r(MNe," \u2014 "),fY=n(MNe,"A",{href:!0});var jLt=s(fY);Hyr=r(jLt,"TFXLMRobertaForQuestionAnswering"),jLt.forEach(t),Uyr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),Jyr=i(ge),B4=n(ge,"LI",{});var ENe=s(B4);n7e=n(ENe,"STRONG",{});var DLt=s(n7e);Yyr=r(DLt,"xlnet"),DLt.forEach(t),Kyr=r(ENe," \u2014 "),mY=n(ENe,"A",{href:!0});var GLt=s(mY);Zyr=r(GLt,"TFXLNetForQuestionAnsweringSimple"),GLt.forEach(t),e8r=r(ENe," (XLNet model)"),ENe.forEach(t),ge.forEach(t),o8r=i(Nl),T(I4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),eGe=i(f),Cc=n(f,"H2",{class:!0});var lVe=s(Cc);N4=n(lVe,"A",{id:!0,class:!0,href:!0});var OLt=s(N4);s7e=n(OLt,"SPAN",{});var VLt=s(s7e);T(B8.$$.fragment,VLt),VLt.forEach(t),OLt.forEach(t),r8r=i(lVe),l7e=n(lVe,"SPAN",{});var XLt=s(l7e);t8r=r(XLt,"TFAutoModelForVision2Seq"),XLt.forEach(t),lVe.forEach(t),oGe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(I8.$$.fragment,ql),a8r=i(ql),wc=n(ql,"P",{});var Foe=s(wc);n8r=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gY=n(Foe,"A",{href:!0});var zLt=s(gY);s8r=r(zLt,"from_pretrained()"),zLt.forEach(t),l8r=r(Foe," class method or the "),hY=n(Foe,"A",{href:!0});var WLt=s(hY);i8r=r(WLt,"from_config()"),WLt.forEach(t),d8r=r(Foe,` class
method.`),Foe.forEach(t),c8r=i(ql),N8=n(ql,"P",{});var iVe=s(N8);f8r=r(iVe,"This class cannot be instantiated directly using "),i7e=n(iVe,"CODE",{});var QLt=s(i7e);m8r=r(QLt,"__init__()"),QLt.forEach(t),g8r=r(iVe," (throws an error)."),iVe.forEach(t),h8r=i(ql),jt=n(ql,"DIV",{class:!0});var pw=s(jt);T(q8.$$.fragment,pw),p8r=i(pw),d7e=n(pw,"P",{});var HLt=s(d7e);_8r=r(HLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HLt.forEach(t),u8r=i(pw),Ac=n(pw,"P",{});var Toe=s(Ac);b8r=r(Toe,`Note:
Loading a model from its configuration file does `),c7e=n(Toe,"STRONG",{});var ULt=s(c7e);v8r=r(ULt,"not"),ULt.forEach(t),F8r=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Toe,"A",{href:!0});var JLt=s(pY);T8r=r(JLt,"from_pretrained()"),JLt.forEach(t),M8r=r(Toe," to load the model weights."),Toe.forEach(t),E8r=i(pw),T(q4.$$.fragment,pw),pw.forEach(t),C8r=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(j8.$$.fragment,jl),w8r=i(jl),f7e=n(jl,"P",{});var YLt=s(f7e);A8r=r(YLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YLt.forEach(t),L8r=i(jl),mn=n(jl,"P",{});var _w=s(mn);y8r=r(_w,"The model class to instantiate is selected based on the "),m7e=n(_w,"CODE",{});var KLt=s(m7e);x8r=r(KLt,"model_type"),KLt.forEach(t),$8r=r(_w,` property of the config object (either
passed as an argument or loaded from `),g7e=n(_w,"CODE",{});var ZLt=s(g7e);k8r=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),S8r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(_w,"CODE",{});var eyt=s(h7e);R8r=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),P8r=r(_w,":"),_w.forEach(t),B8r=i(jl),p7e=n(jl,"UL",{});var oyt=s(p7e);j4=n(oyt,"LI",{});var CNe=s(j4);_7e=n(CNe,"STRONG",{});var ryt=s(_7e);I8r=r(ryt,"vision-encoder-decoder"),ryt.forEach(t),N8r=r(CNe," \u2014 "),_Y=n(CNe,"A",{href:!0});var tyt=s(_Y);q8r=r(tyt,"TFVisionEncoderDecoderModel"),tyt.forEach(t),j8r=r(CNe," (Vision Encoder decoder model)"),CNe.forEach(t),oyt.forEach(t),D8r=i(jl),T(D4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),rGe=i(f),Lc=n(f,"H2",{class:!0});var dVe=s(Lc);G4=n(dVe,"A",{id:!0,class:!0,href:!0});var ayt=s(G4);u7e=n(ayt,"SPAN",{});var nyt=s(u7e);T(D8.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),G8r=i(dVe),b7e=n(dVe,"SPAN",{});var syt=s(b7e);O8r=r(syt,"TFAutoModelForSpeechSeq2Seq"),syt.forEach(t),dVe.forEach(t),tGe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(G8.$$.fragment,Dl),V8r=i(Dl),yc=n(Dl,"P",{});var Moe=s(yc);X8r=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uY=n(Moe,"A",{href:!0});var lyt=s(uY);z8r=r(lyt,"from_pretrained()"),lyt.forEach(t),W8r=r(Moe," class method or the "),bY=n(Moe,"A",{href:!0});var iyt=s(bY);Q8r=r(iyt,"from_config()"),iyt.forEach(t),H8r=r(Moe,` class
method.`),Moe.forEach(t),U8r=i(Dl),O8=n(Dl,"P",{});var cVe=s(O8);J8r=r(cVe,"This class cannot be instantiated directly using "),v7e=n(cVe,"CODE",{});var dyt=s(v7e);Y8r=r(dyt,"__init__()"),dyt.forEach(t),K8r=r(cVe," (throws an error)."),cVe.forEach(t),Z8r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var uw=s(Dt);T(V8.$$.fragment,uw),exr=i(uw),F7e=n(uw,"P",{});var cyt=s(F7e);oxr=r(cyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cyt.forEach(t),rxr=i(uw),xc=n(uw,"P",{});var Eoe=s(xc);txr=r(Eoe,`Note:
Loading a model from its configuration file does `),T7e=n(Eoe,"STRONG",{});var fyt=s(T7e);axr=r(fyt,"not"),fyt.forEach(t),nxr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(Eoe,"A",{href:!0});var myt=s(vY);sxr=r(myt,"from_pretrained()"),myt.forEach(t),lxr=r(Eoe," to load the model weights."),Eoe.forEach(t),ixr=i(uw),T(O4.$$.fragment,uw),uw.forEach(t),dxr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(X8.$$.fragment,Gl),cxr=i(Gl),M7e=n(Gl,"P",{});var gyt=s(M7e);fxr=r(gyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gyt.forEach(t),mxr=i(Gl),gn=n(Gl,"P",{});var bw=s(gn);gxr=r(bw,"The model class to instantiate is selected based on the "),E7e=n(bw,"CODE",{});var hyt=s(E7e);hxr=r(hyt,"model_type"),hyt.forEach(t),pxr=r(bw,` property of the config object (either
passed as an argument or loaded from `),C7e=n(bw,"CODE",{});var pyt=s(C7e);_xr=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),uxr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(bw,"CODE",{});var _yt=s(w7e);bxr=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),vxr=r(bw,":"),bw.forEach(t),Fxr=i(Gl),A7e=n(Gl,"UL",{});var uyt=s(A7e);V4=n(uyt,"LI",{});var wNe=s(V4);L7e=n(wNe,"STRONG",{});var byt=s(L7e);Txr=r(byt,"speech_to_text"),byt.forEach(t),Mxr=r(wNe," \u2014 "),FY=n(wNe,"A",{href:!0});var vyt=s(FY);Exr=r(vyt,"TFSpeech2TextForConditionalGeneration"),vyt.forEach(t),Cxr=r(wNe," (Speech2Text model)"),wNe.forEach(t),uyt.forEach(t),wxr=i(Gl),T(X4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),aGe=i(f),$c=n(f,"H2",{class:!0});var fVe=s($c);z4=n(fVe,"A",{id:!0,class:!0,href:!0});var Fyt=s(z4);y7e=n(Fyt,"SPAN",{});var Tyt=s(y7e);T(z8.$$.fragment,Tyt),Tyt.forEach(t),Fyt.forEach(t),Axr=i(fVe),x7e=n(fVe,"SPAN",{});var Myt=s(x7e);Lxr=r(Myt,"FlaxAutoModel"),Myt.forEach(t),fVe.forEach(t),nGe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(W8.$$.fragment,Ol),yxr=i(Ol),kc=n(Ol,"P",{});var Coe=s(kc);xxr=r(Coe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TY=n(Coe,"A",{href:!0});var Eyt=s(TY);$xr=r(Eyt,"from_pretrained()"),Eyt.forEach(t),kxr=r(Coe," class method or the "),MY=n(Coe,"A",{href:!0});var Cyt=s(MY);Sxr=r(Cyt,"from_config()"),Cyt.forEach(t),Rxr=r(Coe,` class
method.`),Coe.forEach(t),Pxr=i(Ol),Q8=n(Ol,"P",{});var mVe=s(Q8);Bxr=r(mVe,"This class cannot be instantiated directly using "),$7e=n(mVe,"CODE",{});var wyt=s($7e);Ixr=r(wyt,"__init__()"),wyt.forEach(t),Nxr=r(mVe," (throws an error)."),mVe.forEach(t),qxr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var vw=s(Gt);T(H8.$$.fragment,vw),jxr=i(vw),k7e=n(vw,"P",{});var Ayt=s(k7e);Dxr=r(Ayt,"Instantiates one of the base model classes of the library from a configuration."),Ayt.forEach(t),Gxr=i(vw),Sc=n(vw,"P",{});var woe=s(Sc);Oxr=r(woe,`Note:
Loading a model from its configuration file does `),S7e=n(woe,"STRONG",{});var Lyt=s(S7e);Vxr=r(Lyt,"not"),Lyt.forEach(t),Xxr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(woe,"A",{href:!0});var yyt=s(EY);zxr=r(yyt,"from_pretrained()"),yyt.forEach(t),Wxr=r(woe," to load the model weights."),woe.forEach(t),Qxr=i(vw),T(W4.$$.fragment,vw),vw.forEach(t),Hxr=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(U8.$$.fragment,Vl),Uxr=i(Vl),R7e=n(Vl,"P",{});var xyt=s(R7e);Jxr=r(xyt,"Instantiate one of the base model classes of the library from a pretrained model."),xyt.forEach(t),Yxr=i(Vl),hn=n(Vl,"P",{});var Fw=s(hn);Kxr=r(Fw,"The model class to instantiate is selected based on the "),P7e=n(Fw,"CODE",{});var $yt=s(P7e);Zxr=r($yt,"model_type"),$yt.forEach(t),e$r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),B7e=n(Fw,"CODE",{});var kyt=s(B7e);o$r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),r$r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(Fw,"CODE",{});var Syt=s(I7e);t$r=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),a$r=r(Fw,":"),Fw.forEach(t),n$r=i(Vl),re=n(Vl,"UL",{});var ne=s(re);Q4=n(ne,"LI",{});var ANe=s(Q4);N7e=n(ANe,"STRONG",{});var Ryt=s(N7e);s$r=r(Ryt,"albert"),Ryt.forEach(t),l$r=r(ANe," \u2014 "),CY=n(ANe,"A",{href:!0});var Pyt=s(CY);i$r=r(Pyt,"FlaxAlbertModel"),Pyt.forEach(t),d$r=r(ANe," (ALBERT model)"),ANe.forEach(t),c$r=i(ne),H4=n(ne,"LI",{});var LNe=s(H4);q7e=n(LNe,"STRONG",{});var Byt=s(q7e);f$r=r(Byt,"bart"),Byt.forEach(t),m$r=r(LNe," \u2014 "),wY=n(LNe,"A",{href:!0});var Iyt=s(wY);g$r=r(Iyt,"FlaxBartModel"),Iyt.forEach(t),h$r=r(LNe," (BART model)"),LNe.forEach(t),p$r=i(ne),U4=n(ne,"LI",{});var yNe=s(U4);j7e=n(yNe,"STRONG",{});var Nyt=s(j7e);_$r=r(Nyt,"beit"),Nyt.forEach(t),u$r=r(yNe," \u2014 "),AY=n(yNe,"A",{href:!0});var qyt=s(AY);b$r=r(qyt,"FlaxBeitModel"),qyt.forEach(t),v$r=r(yNe," (BEiT model)"),yNe.forEach(t),F$r=i(ne),J4=n(ne,"LI",{});var xNe=s(J4);D7e=n(xNe,"STRONG",{});var jyt=s(D7e);T$r=r(jyt,"bert"),jyt.forEach(t),M$r=r(xNe," \u2014 "),LY=n(xNe,"A",{href:!0});var Dyt=s(LY);E$r=r(Dyt,"FlaxBertModel"),Dyt.forEach(t),C$r=r(xNe," (BERT model)"),xNe.forEach(t),w$r=i(ne),Y4=n(ne,"LI",{});var $Ne=s(Y4);G7e=n($Ne,"STRONG",{});var Gyt=s(G7e);A$r=r(Gyt,"big_bird"),Gyt.forEach(t),L$r=r($Ne," \u2014 "),yY=n($Ne,"A",{href:!0});var Oyt=s(yY);y$r=r(Oyt,"FlaxBigBirdModel"),Oyt.forEach(t),x$r=r($Ne," (BigBird model)"),$Ne.forEach(t),$$r=i(ne),K4=n(ne,"LI",{});var kNe=s(K4);O7e=n(kNe,"STRONG",{});var Vyt=s(O7e);k$r=r(Vyt,"blenderbot"),Vyt.forEach(t),S$r=r(kNe," \u2014 "),xY=n(kNe,"A",{href:!0});var Xyt=s(xY);R$r=r(Xyt,"FlaxBlenderbotModel"),Xyt.forEach(t),P$r=r(kNe," (Blenderbot model)"),kNe.forEach(t),B$r=i(ne),Z4=n(ne,"LI",{});var SNe=s(Z4);V7e=n(SNe,"STRONG",{});var zyt=s(V7e);I$r=r(zyt,"blenderbot-small"),zyt.forEach(t),N$r=r(SNe," \u2014 "),$Y=n(SNe,"A",{href:!0});var Wyt=s($Y);q$r=r(Wyt,"FlaxBlenderbotSmallModel"),Wyt.forEach(t),j$r=r(SNe," (BlenderbotSmall model)"),SNe.forEach(t),D$r=i(ne),eE=n(ne,"LI",{});var RNe=s(eE);X7e=n(RNe,"STRONG",{});var Qyt=s(X7e);G$r=r(Qyt,"clip"),Qyt.forEach(t),O$r=r(RNe," \u2014 "),kY=n(RNe,"A",{href:!0});var Hyt=s(kY);V$r=r(Hyt,"FlaxCLIPModel"),Hyt.forEach(t),X$r=r(RNe," (CLIP model)"),RNe.forEach(t),z$r=i(ne),oE=n(ne,"LI",{});var PNe=s(oE);z7e=n(PNe,"STRONG",{});var Uyt=s(z7e);W$r=r(Uyt,"distilbert"),Uyt.forEach(t),Q$r=r(PNe," \u2014 "),SY=n(PNe,"A",{href:!0});var Jyt=s(SY);H$r=r(Jyt,"FlaxDistilBertModel"),Jyt.forEach(t),U$r=r(PNe," (DistilBERT model)"),PNe.forEach(t),J$r=i(ne),rE=n(ne,"LI",{});var BNe=s(rE);W7e=n(BNe,"STRONG",{});var Yyt=s(W7e);Y$r=r(Yyt,"electra"),Yyt.forEach(t),K$r=r(BNe," \u2014 "),RY=n(BNe,"A",{href:!0});var Kyt=s(RY);Z$r=r(Kyt,"FlaxElectraModel"),Kyt.forEach(t),ekr=r(BNe," (ELECTRA model)"),BNe.forEach(t),okr=i(ne),tE=n(ne,"LI",{});var INe=s(tE);Q7e=n(INe,"STRONG",{});var Zyt=s(Q7e);rkr=r(Zyt,"gpt2"),Zyt.forEach(t),tkr=r(INe," \u2014 "),PY=n(INe,"A",{href:!0});var e8t=s(PY);akr=r(e8t,"FlaxGPT2Model"),e8t.forEach(t),nkr=r(INe," (OpenAI GPT-2 model)"),INe.forEach(t),skr=i(ne),aE=n(ne,"LI",{});var NNe=s(aE);H7e=n(NNe,"STRONG",{});var o8t=s(H7e);lkr=r(o8t,"gpt_neo"),o8t.forEach(t),ikr=r(NNe," \u2014 "),BY=n(NNe,"A",{href:!0});var r8t=s(BY);dkr=r(r8t,"FlaxGPTNeoModel"),r8t.forEach(t),ckr=r(NNe," (GPT Neo model)"),NNe.forEach(t),fkr=i(ne),nE=n(ne,"LI",{});var qNe=s(nE);U7e=n(qNe,"STRONG",{});var t8t=s(U7e);mkr=r(t8t,"gptj"),t8t.forEach(t),gkr=r(qNe," \u2014 "),IY=n(qNe,"A",{href:!0});var a8t=s(IY);hkr=r(a8t,"FlaxGPTJModel"),a8t.forEach(t),pkr=r(qNe," (GPT-J model)"),qNe.forEach(t),_kr=i(ne),sE=n(ne,"LI",{});var jNe=s(sE);J7e=n(jNe,"STRONG",{});var n8t=s(J7e);ukr=r(n8t,"marian"),n8t.forEach(t),bkr=r(jNe," \u2014 "),NY=n(jNe,"A",{href:!0});var s8t=s(NY);vkr=r(s8t,"FlaxMarianModel"),s8t.forEach(t),Fkr=r(jNe," (Marian model)"),jNe.forEach(t),Tkr=i(ne),lE=n(ne,"LI",{});var DNe=s(lE);Y7e=n(DNe,"STRONG",{});var l8t=s(Y7e);Mkr=r(l8t,"mbart"),l8t.forEach(t),Ekr=r(DNe," \u2014 "),qY=n(DNe,"A",{href:!0});var i8t=s(qY);Ckr=r(i8t,"FlaxMBartModel"),i8t.forEach(t),wkr=r(DNe," (mBART model)"),DNe.forEach(t),Akr=i(ne),iE=n(ne,"LI",{});var GNe=s(iE);K7e=n(GNe,"STRONG",{});var d8t=s(K7e);Lkr=r(d8t,"mt5"),d8t.forEach(t),ykr=r(GNe," \u2014 "),jY=n(GNe,"A",{href:!0});var c8t=s(jY);xkr=r(c8t,"FlaxMT5Model"),c8t.forEach(t),$kr=r(GNe," (MT5 model)"),GNe.forEach(t),kkr=i(ne),dE=n(ne,"LI",{});var ONe=s(dE);Z7e=n(ONe,"STRONG",{});var f8t=s(Z7e);Skr=r(f8t,"opt"),f8t.forEach(t),Rkr=r(ONe," \u2014 "),DY=n(ONe,"A",{href:!0});var m8t=s(DY);Pkr=r(m8t,"FlaxOPTModel"),m8t.forEach(t),Bkr=r(ONe," (OPT model)"),ONe.forEach(t),Ikr=i(ne),cE=n(ne,"LI",{});var VNe=s(cE);e9e=n(VNe,"STRONG",{});var g8t=s(e9e);Nkr=r(g8t,"pegasus"),g8t.forEach(t),qkr=r(VNe," \u2014 "),GY=n(VNe,"A",{href:!0});var h8t=s(GY);jkr=r(h8t,"FlaxPegasusModel"),h8t.forEach(t),Dkr=r(VNe," (Pegasus model)"),VNe.forEach(t),Gkr=i(ne),fE=n(ne,"LI",{});var XNe=s(fE);o9e=n(XNe,"STRONG",{});var p8t=s(o9e);Okr=r(p8t,"roberta"),p8t.forEach(t),Vkr=r(XNe," \u2014 "),OY=n(XNe,"A",{href:!0});var _8t=s(OY);Xkr=r(_8t,"FlaxRobertaModel"),_8t.forEach(t),zkr=r(XNe," (RoBERTa model)"),XNe.forEach(t),Wkr=i(ne),mE=n(ne,"LI",{});var zNe=s(mE);r9e=n(zNe,"STRONG",{});var u8t=s(r9e);Qkr=r(u8t,"roformer"),u8t.forEach(t),Hkr=r(zNe," \u2014 "),VY=n(zNe,"A",{href:!0});var b8t=s(VY);Ukr=r(b8t,"FlaxRoFormerModel"),b8t.forEach(t),Jkr=r(zNe," (RoFormer model)"),zNe.forEach(t),Ykr=i(ne),gE=n(ne,"LI",{});var WNe=s(gE);t9e=n(WNe,"STRONG",{});var v8t=s(t9e);Kkr=r(v8t,"t5"),v8t.forEach(t),Zkr=r(WNe," \u2014 "),XY=n(WNe,"A",{href:!0});var F8t=s(XY);eSr=r(F8t,"FlaxT5Model"),F8t.forEach(t),oSr=r(WNe," (T5 model)"),WNe.forEach(t),rSr=i(ne),hE=n(ne,"LI",{});var QNe=s(hE);a9e=n(QNe,"STRONG",{});var T8t=s(a9e);tSr=r(T8t,"vision-text-dual-encoder"),T8t.forEach(t),aSr=r(QNe," \u2014 "),zY=n(QNe,"A",{href:!0});var M8t=s(zY);nSr=r(M8t,"FlaxVisionTextDualEncoderModel"),M8t.forEach(t),sSr=r(QNe," (VisionTextDualEncoder model)"),QNe.forEach(t),lSr=i(ne),pE=n(ne,"LI",{});var HNe=s(pE);n9e=n(HNe,"STRONG",{});var E8t=s(n9e);iSr=r(E8t,"vit"),E8t.forEach(t),dSr=r(HNe," \u2014 "),WY=n(HNe,"A",{href:!0});var C8t=s(WY);cSr=r(C8t,"FlaxViTModel"),C8t.forEach(t),fSr=r(HNe," (ViT model)"),HNe.forEach(t),mSr=i(ne),_E=n(ne,"LI",{});var UNe=s(_E);s9e=n(UNe,"STRONG",{});var w8t=s(s9e);gSr=r(w8t,"wav2vec2"),w8t.forEach(t),hSr=r(UNe," \u2014 "),QY=n(UNe,"A",{href:!0});var A8t=s(QY);pSr=r(A8t,"FlaxWav2Vec2Model"),A8t.forEach(t),_Sr=r(UNe," (Wav2Vec2 model)"),UNe.forEach(t),uSr=i(ne),uE=n(ne,"LI",{});var JNe=s(uE);l9e=n(JNe,"STRONG",{});var L8t=s(l9e);bSr=r(L8t,"xglm"),L8t.forEach(t),vSr=r(JNe," \u2014 "),HY=n(JNe,"A",{href:!0});var y8t=s(HY);FSr=r(y8t,"FlaxXGLMModel"),y8t.forEach(t),TSr=r(JNe," (XGLM model)"),JNe.forEach(t),MSr=i(ne),bE=n(ne,"LI",{});var YNe=s(bE);i9e=n(YNe,"STRONG",{});var x8t=s(i9e);ESr=r(x8t,"xlm-roberta"),x8t.forEach(t),CSr=r(YNe," \u2014 "),UY=n(YNe,"A",{href:!0});var $8t=s(UY);wSr=r($8t,"FlaxXLMRobertaModel"),$8t.forEach(t),ASr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),ne.forEach(t),LSr=i(Vl),T(vE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),sGe=i(f),Rc=n(f,"H2",{class:!0});var gVe=s(Rc);FE=n(gVe,"A",{id:!0,class:!0,href:!0});var k8t=s(FE);d9e=n(k8t,"SPAN",{});var S8t=s(d9e);T(J8.$$.fragment,S8t),S8t.forEach(t),k8t.forEach(t),ySr=i(gVe),c9e=n(gVe,"SPAN",{});var R8t=s(c9e);xSr=r(R8t,"FlaxAutoModelForCausalLM"),R8t.forEach(t),gVe.forEach(t),lGe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(Y8.$$.fragment,Xl),$Sr=i(Xl),Pc=n(Xl,"P",{});var Aoe=s(Pc);kSr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JY=n(Aoe,"A",{href:!0});var P8t=s(JY);SSr=r(P8t,"from_pretrained()"),P8t.forEach(t),RSr=r(Aoe," class method or the "),YY=n(Aoe,"A",{href:!0});var B8t=s(YY);PSr=r(B8t,"from_config()"),B8t.forEach(t),BSr=r(Aoe,` class
method.`),Aoe.forEach(t),ISr=i(Xl),K8=n(Xl,"P",{});var hVe=s(K8);NSr=r(hVe,"This class cannot be instantiated directly using "),f9e=n(hVe,"CODE",{});var I8t=s(f9e);qSr=r(I8t,"__init__()"),I8t.forEach(t),jSr=r(hVe," (throws an error)."),hVe.forEach(t),DSr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Tw=s(Ot);T(Z8.$$.fragment,Tw),GSr=i(Tw),m9e=n(Tw,"P",{});var N8t=s(m9e);OSr=r(N8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),N8t.forEach(t),VSr=i(Tw),Bc=n(Tw,"P",{});var Loe=s(Bc);XSr=r(Loe,`Note:
Loading a model from its configuration file does `),g9e=n(Loe,"STRONG",{});var q8t=s(g9e);zSr=r(q8t,"not"),q8t.forEach(t),WSr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(Loe,"A",{href:!0});var j8t=s(KY);QSr=r(j8t,"from_pretrained()"),j8t.forEach(t),HSr=r(Loe," to load the model weights."),Loe.forEach(t),USr=i(Tw),T(TE.$$.fragment,Tw),Tw.forEach(t),JSr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(ex.$$.fragment,zl),YSr=i(zl),h9e=n(zl,"P",{});var D8t=s(h9e);KSr=r(D8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D8t.forEach(t),ZSr=i(zl),pn=n(zl,"P",{});var Mw=s(pn);eRr=r(Mw,"The model class to instantiate is selected based on the "),p9e=n(Mw,"CODE",{});var G8t=s(p9e);oRr=r(G8t,"model_type"),G8t.forEach(t),rRr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),_9e=n(Mw,"CODE",{});var O8t=s(_9e);tRr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),aRr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=n(Mw,"CODE",{});var V8t=s(u9e);nRr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),sRr=r(Mw,":"),Mw.forEach(t),lRr=i(zl),xe=n(zl,"UL",{});var Ne=s(xe);ME=n(Ne,"LI",{});var KNe=s(ME);b9e=n(KNe,"STRONG",{});var X8t=s(b9e);iRr=r(X8t,"bart"),X8t.forEach(t),dRr=r(KNe," \u2014 "),ZY=n(KNe,"A",{href:!0});var z8t=s(ZY);cRr=r(z8t,"FlaxBartForCausalLM"),z8t.forEach(t),fRr=r(KNe," (BART model)"),KNe.forEach(t),mRr=i(Ne),EE=n(Ne,"LI",{});var ZNe=s(EE);v9e=n(ZNe,"STRONG",{});var W8t=s(v9e);gRr=r(W8t,"bert"),W8t.forEach(t),hRr=r(ZNe," \u2014 "),eK=n(ZNe,"A",{href:!0});var Q8t=s(eK);pRr=r(Q8t,"FlaxBertForCausalLM"),Q8t.forEach(t),_Rr=r(ZNe," (BERT model)"),ZNe.forEach(t),uRr=i(Ne),CE=n(Ne,"LI",{});var eqe=s(CE);F9e=n(eqe,"STRONG",{});var H8t=s(F9e);bRr=r(H8t,"big_bird"),H8t.forEach(t),vRr=r(eqe," \u2014 "),oK=n(eqe,"A",{href:!0});var U8t=s(oK);FRr=r(U8t,"FlaxBigBirdForCausalLM"),U8t.forEach(t),TRr=r(eqe," (BigBird model)"),eqe.forEach(t),MRr=i(Ne),wE=n(Ne,"LI",{});var oqe=s(wE);T9e=n(oqe,"STRONG",{});var J8t=s(T9e);ERr=r(J8t,"electra"),J8t.forEach(t),CRr=r(oqe," \u2014 "),rK=n(oqe,"A",{href:!0});var Y8t=s(rK);wRr=r(Y8t,"FlaxElectraForCausalLM"),Y8t.forEach(t),ARr=r(oqe," (ELECTRA model)"),oqe.forEach(t),LRr=i(Ne),AE=n(Ne,"LI",{});var rqe=s(AE);M9e=n(rqe,"STRONG",{});var K8t=s(M9e);yRr=r(K8t,"gpt2"),K8t.forEach(t),xRr=r(rqe," \u2014 "),tK=n(rqe,"A",{href:!0});var Z8t=s(tK);$Rr=r(Z8t,"FlaxGPT2LMHeadModel"),Z8t.forEach(t),kRr=r(rqe," (OpenAI GPT-2 model)"),rqe.forEach(t),SRr=i(Ne),LE=n(Ne,"LI",{});var tqe=s(LE);E9e=n(tqe,"STRONG",{});var ext=s(E9e);RRr=r(ext,"gpt_neo"),ext.forEach(t),PRr=r(tqe," \u2014 "),aK=n(tqe,"A",{href:!0});var oxt=s(aK);BRr=r(oxt,"FlaxGPTNeoForCausalLM"),oxt.forEach(t),IRr=r(tqe," (GPT Neo model)"),tqe.forEach(t),NRr=i(Ne),yE=n(Ne,"LI",{});var aqe=s(yE);C9e=n(aqe,"STRONG",{});var rxt=s(C9e);qRr=r(rxt,"gptj"),rxt.forEach(t),jRr=r(aqe," \u2014 "),nK=n(aqe,"A",{href:!0});var txt=s(nK);DRr=r(txt,"FlaxGPTJForCausalLM"),txt.forEach(t),GRr=r(aqe," (GPT-J model)"),aqe.forEach(t),ORr=i(Ne),xE=n(Ne,"LI",{});var nqe=s(xE);w9e=n(nqe,"STRONG",{});var axt=s(w9e);VRr=r(axt,"opt"),axt.forEach(t),XRr=r(nqe," \u2014 "),sK=n(nqe,"A",{href:!0});var nxt=s(sK);zRr=r(nxt,"FlaxOPTForCausalLM"),nxt.forEach(t),WRr=r(nqe," (OPT model)"),nqe.forEach(t),QRr=i(Ne),$E=n(Ne,"LI",{});var sqe=s($E);A9e=n(sqe,"STRONG",{});var sxt=s(A9e);HRr=r(sxt,"roberta"),sxt.forEach(t),URr=r(sqe," \u2014 "),lK=n(sqe,"A",{href:!0});var lxt=s(lK);JRr=r(lxt,"FlaxRobertaForCausalLM"),lxt.forEach(t),YRr=r(sqe," (RoBERTa model)"),sqe.forEach(t),KRr=i(Ne),kE=n(Ne,"LI",{});var lqe=s(kE);L9e=n(lqe,"STRONG",{});var ixt=s(L9e);ZRr=r(ixt,"xglm"),ixt.forEach(t),ePr=r(lqe," \u2014 "),iK=n(lqe,"A",{href:!0});var dxt=s(iK);oPr=r(dxt,"FlaxXGLMForCausalLM"),dxt.forEach(t),rPr=r(lqe," (XGLM model)"),lqe.forEach(t),Ne.forEach(t),tPr=i(zl),T(SE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),iGe=i(f),Ic=n(f,"H2",{class:!0});var pVe=s(Ic);RE=n(pVe,"A",{id:!0,class:!0,href:!0});var cxt=s(RE);y9e=n(cxt,"SPAN",{});var fxt=s(y9e);T(ox.$$.fragment,fxt),fxt.forEach(t),cxt.forEach(t),aPr=i(pVe),x9e=n(pVe,"SPAN",{});var mxt=s(x9e);nPr=r(mxt,"FlaxAutoModelForPreTraining"),mxt.forEach(t),pVe.forEach(t),dGe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(rx.$$.fragment,Wl),sPr=i(Wl),Nc=n(Wl,"P",{});var yoe=s(Nc);lPr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dK=n(yoe,"A",{href:!0});var gxt=s(dK);iPr=r(gxt,"from_pretrained()"),gxt.forEach(t),dPr=r(yoe," class method or the "),cK=n(yoe,"A",{href:!0});var hxt=s(cK);cPr=r(hxt,"from_config()"),hxt.forEach(t),fPr=r(yoe,` class
method.`),yoe.forEach(t),mPr=i(Wl),tx=n(Wl,"P",{});var _Ve=s(tx);gPr=r(_Ve,"This class cannot be instantiated directly using "),$9e=n(_Ve,"CODE",{});var pxt=s($9e);hPr=r(pxt,"__init__()"),pxt.forEach(t),pPr=r(_Ve," (throws an error)."),_Ve.forEach(t),_Pr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var Ew=s(Vt);T(ax.$$.fragment,Ew),uPr=i(Ew),k9e=n(Ew,"P",{});var _xt=s(k9e);bPr=r(_xt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_xt.forEach(t),vPr=i(Ew),qc=n(Ew,"P",{});var xoe=s(qc);FPr=r(xoe,`Note:
Loading a model from its configuration file does `),S9e=n(xoe,"STRONG",{});var uxt=s(S9e);TPr=r(uxt,"not"),uxt.forEach(t),MPr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(xoe,"A",{href:!0});var bxt=s(fK);EPr=r(bxt,"from_pretrained()"),bxt.forEach(t),CPr=r(xoe," to load the model weights."),xoe.forEach(t),wPr=i(Ew),T(PE.$$.fragment,Ew),Ew.forEach(t),APr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(nx.$$.fragment,Ql),LPr=i(Ql),R9e=n(Ql,"P",{});var vxt=s(R9e);yPr=r(vxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vxt.forEach(t),xPr=i(Ql),_n=n(Ql,"P",{});var Cw=s(_n);$Pr=r(Cw,"The model class to instantiate is selected based on the "),P9e=n(Cw,"CODE",{});var Fxt=s(P9e);kPr=r(Fxt,"model_type"),Fxt.forEach(t),SPr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),B9e=n(Cw,"CODE",{});var Txt=s(B9e);RPr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),PPr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I9e=n(Cw,"CODE",{});var Mxt=s(I9e);BPr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),IPr=r(Cw,":"),Cw.forEach(t),NPr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);BE=n(we,"LI",{});var iqe=s(BE);N9e=n(iqe,"STRONG",{});var Ext=s(N9e);qPr=r(Ext,"albert"),Ext.forEach(t),jPr=r(iqe," \u2014 "),mK=n(iqe,"A",{href:!0});var Cxt=s(mK);DPr=r(Cxt,"FlaxAlbertForPreTraining"),Cxt.forEach(t),GPr=r(iqe," (ALBERT model)"),iqe.forEach(t),OPr=i(we),IE=n(we,"LI",{});var dqe=s(IE);q9e=n(dqe,"STRONG",{});var wxt=s(q9e);VPr=r(wxt,"bart"),wxt.forEach(t),XPr=r(dqe," \u2014 "),gK=n(dqe,"A",{href:!0});var Axt=s(gK);zPr=r(Axt,"FlaxBartForConditionalGeneration"),Axt.forEach(t),WPr=r(dqe," (BART model)"),dqe.forEach(t),QPr=i(we),NE=n(we,"LI",{});var cqe=s(NE);j9e=n(cqe,"STRONG",{});var Lxt=s(j9e);HPr=r(Lxt,"bert"),Lxt.forEach(t),UPr=r(cqe," \u2014 "),hK=n(cqe,"A",{href:!0});var yxt=s(hK);JPr=r(yxt,"FlaxBertForPreTraining"),yxt.forEach(t),YPr=r(cqe," (BERT model)"),cqe.forEach(t),KPr=i(we),qE=n(we,"LI",{});var fqe=s(qE);D9e=n(fqe,"STRONG",{});var xxt=s(D9e);ZPr=r(xxt,"big_bird"),xxt.forEach(t),eBr=r(fqe," \u2014 "),pK=n(fqe,"A",{href:!0});var $xt=s(pK);oBr=r($xt,"FlaxBigBirdForPreTraining"),$xt.forEach(t),rBr=r(fqe," (BigBird model)"),fqe.forEach(t),tBr=i(we),jE=n(we,"LI",{});var mqe=s(jE);G9e=n(mqe,"STRONG",{});var kxt=s(G9e);aBr=r(kxt,"electra"),kxt.forEach(t),nBr=r(mqe," \u2014 "),_K=n(mqe,"A",{href:!0});var Sxt=s(_K);sBr=r(Sxt,"FlaxElectraForPreTraining"),Sxt.forEach(t),lBr=r(mqe," (ELECTRA model)"),mqe.forEach(t),iBr=i(we),DE=n(we,"LI",{});var gqe=s(DE);O9e=n(gqe,"STRONG",{});var Rxt=s(O9e);dBr=r(Rxt,"mbart"),Rxt.forEach(t),cBr=r(gqe," \u2014 "),uK=n(gqe,"A",{href:!0});var Pxt=s(uK);fBr=r(Pxt,"FlaxMBartForConditionalGeneration"),Pxt.forEach(t),mBr=r(gqe," (mBART model)"),gqe.forEach(t),gBr=i(we),GE=n(we,"LI",{});var hqe=s(GE);V9e=n(hqe,"STRONG",{});var Bxt=s(V9e);hBr=r(Bxt,"mt5"),Bxt.forEach(t),pBr=r(hqe," \u2014 "),bK=n(hqe,"A",{href:!0});var Ixt=s(bK);_Br=r(Ixt,"FlaxMT5ForConditionalGeneration"),Ixt.forEach(t),uBr=r(hqe," (MT5 model)"),hqe.forEach(t),bBr=i(we),OE=n(we,"LI",{});var pqe=s(OE);X9e=n(pqe,"STRONG",{});var Nxt=s(X9e);vBr=r(Nxt,"roberta"),Nxt.forEach(t),FBr=r(pqe," \u2014 "),vK=n(pqe,"A",{href:!0});var qxt=s(vK);TBr=r(qxt,"FlaxRobertaForMaskedLM"),qxt.forEach(t),MBr=r(pqe," (RoBERTa model)"),pqe.forEach(t),EBr=i(we),VE=n(we,"LI",{});var _qe=s(VE);z9e=n(_qe,"STRONG",{});var jxt=s(z9e);CBr=r(jxt,"roformer"),jxt.forEach(t),wBr=r(_qe," \u2014 "),FK=n(_qe,"A",{href:!0});var Dxt=s(FK);ABr=r(Dxt,"FlaxRoFormerForMaskedLM"),Dxt.forEach(t),LBr=r(_qe," (RoFormer model)"),_qe.forEach(t),yBr=i(we),XE=n(we,"LI",{});var uqe=s(XE);W9e=n(uqe,"STRONG",{});var Gxt=s(W9e);xBr=r(Gxt,"t5"),Gxt.forEach(t),$Br=r(uqe," \u2014 "),TK=n(uqe,"A",{href:!0});var Oxt=s(TK);kBr=r(Oxt,"FlaxT5ForConditionalGeneration"),Oxt.forEach(t),SBr=r(uqe," (T5 model)"),uqe.forEach(t),RBr=i(we),zE=n(we,"LI",{});var bqe=s(zE);Q9e=n(bqe,"STRONG",{});var Vxt=s(Q9e);PBr=r(Vxt,"wav2vec2"),Vxt.forEach(t),BBr=r(bqe," \u2014 "),MK=n(bqe,"A",{href:!0});var Xxt=s(MK);IBr=r(Xxt,"FlaxWav2Vec2ForPreTraining"),Xxt.forEach(t),NBr=r(bqe," (Wav2Vec2 model)"),bqe.forEach(t),qBr=i(we),WE=n(we,"LI",{});var vqe=s(WE);H9e=n(vqe,"STRONG",{});var zxt=s(H9e);jBr=r(zxt,"xlm-roberta"),zxt.forEach(t),DBr=r(vqe," \u2014 "),EK=n(vqe,"A",{href:!0});var Wxt=s(EK);GBr=r(Wxt,"FlaxXLMRobertaForMaskedLM"),Wxt.forEach(t),OBr=r(vqe," (XLM-RoBERTa model)"),vqe.forEach(t),we.forEach(t),VBr=i(Ql),T(QE.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),cGe=i(f),jc=n(f,"H2",{class:!0});var uVe=s(jc);HE=n(uVe,"A",{id:!0,class:!0,href:!0});var Qxt=s(HE);U9e=n(Qxt,"SPAN",{});var Hxt=s(U9e);T(sx.$$.fragment,Hxt),Hxt.forEach(t),Qxt.forEach(t),XBr=i(uVe),J9e=n(uVe,"SPAN",{});var Uxt=s(J9e);zBr=r(Uxt,"FlaxAutoModelForMaskedLM"),Uxt.forEach(t),uVe.forEach(t),fGe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(lx.$$.fragment,Hl),WBr=i(Hl),Dc=n(Hl,"P",{});var $oe=s(Dc);QBr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CK=n($oe,"A",{href:!0});var Jxt=s(CK);HBr=r(Jxt,"from_pretrained()"),Jxt.forEach(t),UBr=r($oe," class method or the "),wK=n($oe,"A",{href:!0});var Yxt=s(wK);JBr=r(Yxt,"from_config()"),Yxt.forEach(t),YBr=r($oe,` class
method.`),$oe.forEach(t),KBr=i(Hl),ix=n(Hl,"P",{});var bVe=s(ix);ZBr=r(bVe,"This class cannot be instantiated directly using "),Y9e=n(bVe,"CODE",{});var Kxt=s(Y9e);eIr=r(Kxt,"__init__()"),Kxt.forEach(t),oIr=r(bVe," (throws an error)."),bVe.forEach(t),rIr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var ww=s(Xt);T(dx.$$.fragment,ww),tIr=i(ww),K9e=n(ww,"P",{});var Zxt=s(K9e);aIr=r(Zxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zxt.forEach(t),nIr=i(ww),Gc=n(ww,"P",{});var koe=s(Gc);sIr=r(koe,`Note:
Loading a model from its configuration file does `),Z9e=n(koe,"STRONG",{});var e$t=s(Z9e);lIr=r(e$t,"not"),e$t.forEach(t),iIr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(koe,"A",{href:!0});var o$t=s(AK);dIr=r(o$t,"from_pretrained()"),o$t.forEach(t),cIr=r(koe," to load the model weights."),koe.forEach(t),fIr=i(ww),T(UE.$$.fragment,ww),ww.forEach(t),mIr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(cx.$$.fragment,Ul),gIr=i(Ul),eMe=n(Ul,"P",{});var r$t=s(eMe);hIr=r(r$t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r$t.forEach(t),pIr=i(Ul),un=n(Ul,"P",{});var Aw=s(un);_Ir=r(Aw,"The model class to instantiate is selected based on the "),oMe=n(Aw,"CODE",{});var t$t=s(oMe);uIr=r(t$t,"model_type"),t$t.forEach(t),bIr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),rMe=n(Aw,"CODE",{});var a$t=s(rMe);vIr=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),FIr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(Aw,"CODE",{});var n$t=s(tMe);TIr=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),MIr=r(Aw,":"),Aw.forEach(t),EIr=i(Ul),$e=n(Ul,"UL",{});var qe=s($e);JE=n(qe,"LI",{});var Fqe=s(JE);aMe=n(Fqe,"STRONG",{});var s$t=s(aMe);CIr=r(s$t,"albert"),s$t.forEach(t),wIr=r(Fqe," \u2014 "),LK=n(Fqe,"A",{href:!0});var l$t=s(LK);AIr=r(l$t,"FlaxAlbertForMaskedLM"),l$t.forEach(t),LIr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),yIr=i(qe),YE=n(qe,"LI",{});var Tqe=s(YE);nMe=n(Tqe,"STRONG",{});var i$t=s(nMe);xIr=r(i$t,"bart"),i$t.forEach(t),$Ir=r(Tqe," \u2014 "),yK=n(Tqe,"A",{href:!0});var d$t=s(yK);kIr=r(d$t,"FlaxBartForConditionalGeneration"),d$t.forEach(t),SIr=r(Tqe," (BART model)"),Tqe.forEach(t),RIr=i(qe),KE=n(qe,"LI",{});var Mqe=s(KE);sMe=n(Mqe,"STRONG",{});var c$t=s(sMe);PIr=r(c$t,"bert"),c$t.forEach(t),BIr=r(Mqe," \u2014 "),xK=n(Mqe,"A",{href:!0});var f$t=s(xK);IIr=r(f$t,"FlaxBertForMaskedLM"),f$t.forEach(t),NIr=r(Mqe," (BERT model)"),Mqe.forEach(t),qIr=i(qe),ZE=n(qe,"LI",{});var Eqe=s(ZE);lMe=n(Eqe,"STRONG",{});var m$t=s(lMe);jIr=r(m$t,"big_bird"),m$t.forEach(t),DIr=r(Eqe," \u2014 "),$K=n(Eqe,"A",{href:!0});var g$t=s($K);GIr=r(g$t,"FlaxBigBirdForMaskedLM"),g$t.forEach(t),OIr=r(Eqe," (BigBird model)"),Eqe.forEach(t),VIr=i(qe),eC=n(qe,"LI",{});var Cqe=s(eC);iMe=n(Cqe,"STRONG",{});var h$t=s(iMe);XIr=r(h$t,"distilbert"),h$t.forEach(t),zIr=r(Cqe," \u2014 "),kK=n(Cqe,"A",{href:!0});var p$t=s(kK);WIr=r(p$t,"FlaxDistilBertForMaskedLM"),p$t.forEach(t),QIr=r(Cqe," (DistilBERT model)"),Cqe.forEach(t),HIr=i(qe),oC=n(qe,"LI",{});var wqe=s(oC);dMe=n(wqe,"STRONG",{});var _$t=s(dMe);UIr=r(_$t,"electra"),_$t.forEach(t),JIr=r(wqe," \u2014 "),SK=n(wqe,"A",{href:!0});var u$t=s(SK);YIr=r(u$t,"FlaxElectraForMaskedLM"),u$t.forEach(t),KIr=r(wqe," (ELECTRA model)"),wqe.forEach(t),ZIr=i(qe),rC=n(qe,"LI",{});var Aqe=s(rC);cMe=n(Aqe,"STRONG",{});var b$t=s(cMe);eNr=r(b$t,"mbart"),b$t.forEach(t),oNr=r(Aqe," \u2014 "),RK=n(Aqe,"A",{href:!0});var v$t=s(RK);rNr=r(v$t,"FlaxMBartForConditionalGeneration"),v$t.forEach(t),tNr=r(Aqe," (mBART model)"),Aqe.forEach(t),aNr=i(qe),tC=n(qe,"LI",{});var Lqe=s(tC);fMe=n(Lqe,"STRONG",{});var F$t=s(fMe);nNr=r(F$t,"roberta"),F$t.forEach(t),sNr=r(Lqe," \u2014 "),PK=n(Lqe,"A",{href:!0});var T$t=s(PK);lNr=r(T$t,"FlaxRobertaForMaskedLM"),T$t.forEach(t),iNr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),dNr=i(qe),aC=n(qe,"LI",{});var yqe=s(aC);mMe=n(yqe,"STRONG",{});var M$t=s(mMe);cNr=r(M$t,"roformer"),M$t.forEach(t),fNr=r(yqe," \u2014 "),BK=n(yqe,"A",{href:!0});var E$t=s(BK);mNr=r(E$t,"FlaxRoFormerForMaskedLM"),E$t.forEach(t),gNr=r(yqe," (RoFormer model)"),yqe.forEach(t),hNr=i(qe),nC=n(qe,"LI",{});var xqe=s(nC);gMe=n(xqe,"STRONG",{});var C$t=s(gMe);pNr=r(C$t,"xlm-roberta"),C$t.forEach(t),_Nr=r(xqe," \u2014 "),IK=n(xqe,"A",{href:!0});var w$t=s(IK);uNr=r(w$t,"FlaxXLMRobertaForMaskedLM"),w$t.forEach(t),bNr=r(xqe," (XLM-RoBERTa model)"),xqe.forEach(t),qe.forEach(t),vNr=i(Ul),T(sC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),mGe=i(f),Oc=n(f,"H2",{class:!0});var vVe=s(Oc);lC=n(vVe,"A",{id:!0,class:!0,href:!0});var A$t=s(lC);hMe=n(A$t,"SPAN",{});var L$t=s(hMe);T(fx.$$.fragment,L$t),L$t.forEach(t),A$t.forEach(t),FNr=i(vVe),pMe=n(vVe,"SPAN",{});var y$t=s(pMe);TNr=r(y$t,"FlaxAutoModelForSeq2SeqLM"),y$t.forEach(t),vVe.forEach(t),gGe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(mx.$$.fragment,Jl),MNr=i(Jl),Vc=n(Jl,"P",{});var Soe=s(Vc);ENr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NK=n(Soe,"A",{href:!0});var x$t=s(NK);CNr=r(x$t,"from_pretrained()"),x$t.forEach(t),wNr=r(Soe," class method or the "),qK=n(Soe,"A",{href:!0});var $$t=s(qK);ANr=r($$t,"from_config()"),$$t.forEach(t),LNr=r(Soe,` class
method.`),Soe.forEach(t),yNr=i(Jl),gx=n(Jl,"P",{});var FVe=s(gx);xNr=r(FVe,"This class cannot be instantiated directly using "),_Me=n(FVe,"CODE",{});var k$t=s(_Me);$Nr=r(k$t,"__init__()"),k$t.forEach(t),kNr=r(FVe," (throws an error)."),FVe.forEach(t),SNr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Lw=s(zt);T(hx.$$.fragment,Lw),RNr=i(Lw),uMe=n(Lw,"P",{});var S$t=s(uMe);PNr=r(S$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S$t.forEach(t),BNr=i(Lw),Xc=n(Lw,"P",{});var Roe=s(Xc);INr=r(Roe,`Note:
Loading a model from its configuration file does `),bMe=n(Roe,"STRONG",{});var R$t=s(bMe);NNr=r(R$t,"not"),R$t.forEach(t),qNr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Roe,"A",{href:!0});var P$t=s(jK);jNr=r(P$t,"from_pretrained()"),P$t.forEach(t),DNr=r(Roe," to load the model weights."),Roe.forEach(t),GNr=i(Lw),T(iC.$$.fragment,Lw),Lw.forEach(t),ONr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(px.$$.fragment,Yl),VNr=i(Yl),vMe=n(Yl,"P",{});var B$t=s(vMe);XNr=r(B$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B$t.forEach(t),zNr=i(Yl),bn=n(Yl,"P",{});var yw=s(bn);WNr=r(yw,"The model class to instantiate is selected based on the "),FMe=n(yw,"CODE",{});var I$t=s(FMe);QNr=r(I$t,"model_type"),I$t.forEach(t),HNr=r(yw,` property of the config object (either
passed as an argument or loaded from `),TMe=n(yw,"CODE",{});var N$t=s(TMe);UNr=r(N$t,"pretrained_model_name_or_path"),N$t.forEach(t),JNr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(yw,"CODE",{});var q$t=s(MMe);YNr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),KNr=r(yw,":"),yw.forEach(t),ZNr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);dC=n(ze,"LI",{});var $qe=s(dC);EMe=n($qe,"STRONG",{});var j$t=s(EMe);eqr=r(j$t,"bart"),j$t.forEach(t),oqr=r($qe," \u2014 "),DK=n($qe,"A",{href:!0});var D$t=s(DK);rqr=r(D$t,"FlaxBartForConditionalGeneration"),D$t.forEach(t),tqr=r($qe," (BART model)"),$qe.forEach(t),aqr=i(ze),cC=n(ze,"LI",{});var kqe=s(cC);CMe=n(kqe,"STRONG",{});var G$t=s(CMe);nqr=r(G$t,"blenderbot"),G$t.forEach(t),sqr=r(kqe," \u2014 "),GK=n(kqe,"A",{href:!0});var O$t=s(GK);lqr=r(O$t,"FlaxBlenderbotForConditionalGeneration"),O$t.forEach(t),iqr=r(kqe," (Blenderbot model)"),kqe.forEach(t),dqr=i(ze),fC=n(ze,"LI",{});var Sqe=s(fC);wMe=n(Sqe,"STRONG",{});var V$t=s(wMe);cqr=r(V$t,"blenderbot-small"),V$t.forEach(t),fqr=r(Sqe," \u2014 "),OK=n(Sqe,"A",{href:!0});var X$t=s(OK);mqr=r(X$t,"FlaxBlenderbotSmallForConditionalGeneration"),X$t.forEach(t),gqr=r(Sqe," (BlenderbotSmall model)"),Sqe.forEach(t),hqr=i(ze),mC=n(ze,"LI",{});var Rqe=s(mC);AMe=n(Rqe,"STRONG",{});var z$t=s(AMe);pqr=r(z$t,"encoder-decoder"),z$t.forEach(t),_qr=r(Rqe," \u2014 "),VK=n(Rqe,"A",{href:!0});var W$t=s(VK);uqr=r(W$t,"FlaxEncoderDecoderModel"),W$t.forEach(t),bqr=r(Rqe," (Encoder decoder model)"),Rqe.forEach(t),vqr=i(ze),gC=n(ze,"LI",{});var Pqe=s(gC);LMe=n(Pqe,"STRONG",{});var Q$t=s(LMe);Fqr=r(Q$t,"marian"),Q$t.forEach(t),Tqr=r(Pqe," \u2014 "),XK=n(Pqe,"A",{href:!0});var H$t=s(XK);Mqr=r(H$t,"FlaxMarianMTModel"),H$t.forEach(t),Eqr=r(Pqe," (Marian model)"),Pqe.forEach(t),Cqr=i(ze),hC=n(ze,"LI",{});var Bqe=s(hC);yMe=n(Bqe,"STRONG",{});var U$t=s(yMe);wqr=r(U$t,"mbart"),U$t.forEach(t),Aqr=r(Bqe," \u2014 "),zK=n(Bqe,"A",{href:!0});var J$t=s(zK);Lqr=r(J$t,"FlaxMBartForConditionalGeneration"),J$t.forEach(t),yqr=r(Bqe," (mBART model)"),Bqe.forEach(t),xqr=i(ze),pC=n(ze,"LI",{});var Iqe=s(pC);xMe=n(Iqe,"STRONG",{});var Y$t=s(xMe);$qr=r(Y$t,"mt5"),Y$t.forEach(t),kqr=r(Iqe," \u2014 "),WK=n(Iqe,"A",{href:!0});var K$t=s(WK);Sqr=r(K$t,"FlaxMT5ForConditionalGeneration"),K$t.forEach(t),Rqr=r(Iqe," (MT5 model)"),Iqe.forEach(t),Pqr=i(ze),_C=n(ze,"LI",{});var Nqe=s(_C);$Me=n(Nqe,"STRONG",{});var Z$t=s($Me);Bqr=r(Z$t,"pegasus"),Z$t.forEach(t),Iqr=r(Nqe," \u2014 "),QK=n(Nqe,"A",{href:!0});var ekt=s(QK);Nqr=r(ekt,"FlaxPegasusForConditionalGeneration"),ekt.forEach(t),qqr=r(Nqe," (Pegasus model)"),Nqe.forEach(t),jqr=i(ze),uC=n(ze,"LI",{});var qqe=s(uC);kMe=n(qqe,"STRONG",{});var okt=s(kMe);Dqr=r(okt,"t5"),okt.forEach(t),Gqr=r(qqe," \u2014 "),HK=n(qqe,"A",{href:!0});var rkt=s(HK);Oqr=r(rkt,"FlaxT5ForConditionalGeneration"),rkt.forEach(t),Vqr=r(qqe," (T5 model)"),qqe.forEach(t),ze.forEach(t),Xqr=i(Yl),T(bC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),hGe=i(f),zc=n(f,"H2",{class:!0});var TVe=s(zc);vC=n(TVe,"A",{id:!0,class:!0,href:!0});var tkt=s(vC);SMe=n(tkt,"SPAN",{});var akt=s(SMe);T(_x.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),zqr=i(TVe),RMe=n(TVe,"SPAN",{});var nkt=s(RMe);Wqr=r(nkt,"FlaxAutoModelForSequenceClassification"),nkt.forEach(t),TVe.forEach(t),pGe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(ux.$$.fragment,Kl),Qqr=i(Kl),Wc=n(Kl,"P",{});var Poe=s(Wc);Hqr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UK=n(Poe,"A",{href:!0});var skt=s(UK);Uqr=r(skt,"from_pretrained()"),skt.forEach(t),Jqr=r(Poe," class method or the "),JK=n(Poe,"A",{href:!0});var lkt=s(JK);Yqr=r(lkt,"from_config()"),lkt.forEach(t),Kqr=r(Poe,` class
method.`),Poe.forEach(t),Zqr=i(Kl),bx=n(Kl,"P",{});var MVe=s(bx);ejr=r(MVe,"This class cannot be instantiated directly using "),PMe=n(MVe,"CODE",{});var ikt=s(PMe);ojr=r(ikt,"__init__()"),ikt.forEach(t),rjr=r(MVe," (throws an error)."),MVe.forEach(t),tjr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var xw=s(Wt);T(vx.$$.fragment,xw),ajr=i(xw),BMe=n(xw,"P",{});var dkt=s(BMe);njr=r(dkt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dkt.forEach(t),sjr=i(xw),Qc=n(xw,"P",{});var Boe=s(Qc);ljr=r(Boe,`Note:
Loading a model from its configuration file does `),IMe=n(Boe,"STRONG",{});var ckt=s(IMe);ijr=r(ckt,"not"),ckt.forEach(t),djr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(Boe,"A",{href:!0});var fkt=s(YK);cjr=r(fkt,"from_pretrained()"),fkt.forEach(t),fjr=r(Boe," to load the model weights."),Boe.forEach(t),mjr=i(xw),T(FC.$$.fragment,xw),xw.forEach(t),gjr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(Fx.$$.fragment,Zl),hjr=i(Zl),NMe=n(Zl,"P",{});var mkt=s(NMe);pjr=r(mkt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mkt.forEach(t),_jr=i(Zl),vn=n(Zl,"P",{});var $w=s(vn);ujr=r($w,"The model class to instantiate is selected based on the "),qMe=n($w,"CODE",{});var gkt=s(qMe);bjr=r(gkt,"model_type"),gkt.forEach(t),vjr=r($w,` property of the config object (either
passed as an argument or loaded from `),jMe=n($w,"CODE",{});var hkt=s(jMe);Fjr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),Tjr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n($w,"CODE",{});var pkt=s(DMe);Mjr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),Ejr=r($w,":"),$w.forEach(t),Cjr=i(Zl),ke=n(Zl,"UL",{});var je=s(ke);TC=n(je,"LI",{});var jqe=s(TC);GMe=n(jqe,"STRONG",{});var _kt=s(GMe);wjr=r(_kt,"albert"),_kt.forEach(t),Ajr=r(jqe," \u2014 "),KK=n(jqe,"A",{href:!0});var ukt=s(KK);Ljr=r(ukt,"FlaxAlbertForSequenceClassification"),ukt.forEach(t),yjr=r(jqe," (ALBERT model)"),jqe.forEach(t),xjr=i(je),MC=n(je,"LI",{});var Dqe=s(MC);OMe=n(Dqe,"STRONG",{});var bkt=s(OMe);$jr=r(bkt,"bart"),bkt.forEach(t),kjr=r(Dqe," \u2014 "),ZK=n(Dqe,"A",{href:!0});var vkt=s(ZK);Sjr=r(vkt,"FlaxBartForSequenceClassification"),vkt.forEach(t),Rjr=r(Dqe," (BART model)"),Dqe.forEach(t),Pjr=i(je),EC=n(je,"LI",{});var Gqe=s(EC);VMe=n(Gqe,"STRONG",{});var Fkt=s(VMe);Bjr=r(Fkt,"bert"),Fkt.forEach(t),Ijr=r(Gqe," \u2014 "),eZ=n(Gqe,"A",{href:!0});var Tkt=s(eZ);Njr=r(Tkt,"FlaxBertForSequenceClassification"),Tkt.forEach(t),qjr=r(Gqe," (BERT model)"),Gqe.forEach(t),jjr=i(je),CC=n(je,"LI",{});var Oqe=s(CC);XMe=n(Oqe,"STRONG",{});var Mkt=s(XMe);Djr=r(Mkt,"big_bird"),Mkt.forEach(t),Gjr=r(Oqe," \u2014 "),oZ=n(Oqe,"A",{href:!0});var Ekt=s(oZ);Ojr=r(Ekt,"FlaxBigBirdForSequenceClassification"),Ekt.forEach(t),Vjr=r(Oqe," (BigBird model)"),Oqe.forEach(t),Xjr=i(je),wC=n(je,"LI",{});var Vqe=s(wC);zMe=n(Vqe,"STRONG",{});var Ckt=s(zMe);zjr=r(Ckt,"distilbert"),Ckt.forEach(t),Wjr=r(Vqe," \u2014 "),rZ=n(Vqe,"A",{href:!0});var wkt=s(rZ);Qjr=r(wkt,"FlaxDistilBertForSequenceClassification"),wkt.forEach(t),Hjr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),Ujr=i(je),AC=n(je,"LI",{});var Xqe=s(AC);WMe=n(Xqe,"STRONG",{});var Akt=s(WMe);Jjr=r(Akt,"electra"),Akt.forEach(t),Yjr=r(Xqe," \u2014 "),tZ=n(Xqe,"A",{href:!0});var Lkt=s(tZ);Kjr=r(Lkt,"FlaxElectraForSequenceClassification"),Lkt.forEach(t),Zjr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),eDr=i(je),LC=n(je,"LI",{});var zqe=s(LC);QMe=n(zqe,"STRONG",{});var ykt=s(QMe);oDr=r(ykt,"mbart"),ykt.forEach(t),rDr=r(zqe," \u2014 "),aZ=n(zqe,"A",{href:!0});var xkt=s(aZ);tDr=r(xkt,"FlaxMBartForSequenceClassification"),xkt.forEach(t),aDr=r(zqe," (mBART model)"),zqe.forEach(t),nDr=i(je),yC=n(je,"LI",{});var Wqe=s(yC);HMe=n(Wqe,"STRONG",{});var $kt=s(HMe);sDr=r($kt,"roberta"),$kt.forEach(t),lDr=r(Wqe," \u2014 "),nZ=n(Wqe,"A",{href:!0});var kkt=s(nZ);iDr=r(kkt,"FlaxRobertaForSequenceClassification"),kkt.forEach(t),dDr=r(Wqe," (RoBERTa model)"),Wqe.forEach(t),cDr=i(je),xC=n(je,"LI",{});var Qqe=s(xC);UMe=n(Qqe,"STRONG",{});var Skt=s(UMe);fDr=r(Skt,"roformer"),Skt.forEach(t),mDr=r(Qqe," \u2014 "),sZ=n(Qqe,"A",{href:!0});var Rkt=s(sZ);gDr=r(Rkt,"FlaxRoFormerForSequenceClassification"),Rkt.forEach(t),hDr=r(Qqe," (RoFormer model)"),Qqe.forEach(t),pDr=i(je),$C=n(je,"LI",{});var Hqe=s($C);JMe=n(Hqe,"STRONG",{});var Pkt=s(JMe);_Dr=r(Pkt,"xlm-roberta"),Pkt.forEach(t),uDr=r(Hqe," \u2014 "),lZ=n(Hqe,"A",{href:!0});var Bkt=s(lZ);bDr=r(Bkt,"FlaxXLMRobertaForSequenceClassification"),Bkt.forEach(t),vDr=r(Hqe," (XLM-RoBERTa model)"),Hqe.forEach(t),je.forEach(t),FDr=i(Zl),T(kC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),_Ge=i(f),Hc=n(f,"H2",{class:!0});var EVe=s(Hc);SC=n(EVe,"A",{id:!0,class:!0,href:!0});var Ikt=s(SC);YMe=n(Ikt,"SPAN",{});var Nkt=s(YMe);T(Tx.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),TDr=i(EVe),KMe=n(EVe,"SPAN",{});var qkt=s(KMe);MDr=r(qkt,"FlaxAutoModelForQuestionAnswering"),qkt.forEach(t),EVe.forEach(t),uGe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(Mx.$$.fragment,ei),EDr=i(ei),Uc=n(ei,"P",{});var Ioe=s(Uc);CDr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iZ=n(Ioe,"A",{href:!0});var jkt=s(iZ);wDr=r(jkt,"from_pretrained()"),jkt.forEach(t),ADr=r(Ioe," class method or the "),dZ=n(Ioe,"A",{href:!0});var Dkt=s(dZ);LDr=r(Dkt,"from_config()"),Dkt.forEach(t),yDr=r(Ioe,` class
method.`),Ioe.forEach(t),xDr=i(ei),Ex=n(ei,"P",{});var CVe=s(Ex);$Dr=r(CVe,"This class cannot be instantiated directly using "),ZMe=n(CVe,"CODE",{});var Gkt=s(ZMe);kDr=r(Gkt,"__init__()"),Gkt.forEach(t),SDr=r(CVe," (throws an error)."),CVe.forEach(t),RDr=i(ei),Qt=n(ei,"DIV",{class:!0});var kw=s(Qt);T(Cx.$$.fragment,kw),PDr=i(kw),e4e=n(kw,"P",{});var Okt=s(e4e);BDr=r(Okt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Okt.forEach(t),IDr=i(kw),Jc=n(kw,"P",{});var Noe=s(Jc);NDr=r(Noe,`Note:
Loading a model from its configuration file does `),o4e=n(Noe,"STRONG",{});var Vkt=s(o4e);qDr=r(Vkt,"not"),Vkt.forEach(t),jDr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(Noe,"A",{href:!0});var Xkt=s(cZ);DDr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),GDr=r(Noe," to load the model weights."),Noe.forEach(t),ODr=i(kw),T(RC.$$.fragment,kw),kw.forEach(t),VDr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(wx.$$.fragment,oi),XDr=i(oi),r4e=n(oi,"P",{});var zkt=s(r4e);zDr=r(zkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zkt.forEach(t),WDr=i(oi),Fn=n(oi,"P",{});var Sw=s(Fn);QDr=r(Sw,"The model class to instantiate is selected based on the "),t4e=n(Sw,"CODE",{});var Wkt=s(t4e);HDr=r(Wkt,"model_type"),Wkt.forEach(t),UDr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),a4e=n(Sw,"CODE",{});var Qkt=s(a4e);JDr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),YDr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(Sw,"CODE",{});var Hkt=s(n4e);KDr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),ZDr=r(Sw,":"),Sw.forEach(t),eGr=i(oi),Se=n(oi,"UL",{});var De=s(Se);PC=n(De,"LI",{});var Uqe=s(PC);s4e=n(Uqe,"STRONG",{});var Ukt=s(s4e);oGr=r(Ukt,"albert"),Ukt.forEach(t),rGr=r(Uqe," \u2014 "),fZ=n(Uqe,"A",{href:!0});var Jkt=s(fZ);tGr=r(Jkt,"FlaxAlbertForQuestionAnswering"),Jkt.forEach(t),aGr=r(Uqe," (ALBERT model)"),Uqe.forEach(t),nGr=i(De),BC=n(De,"LI",{});var Jqe=s(BC);l4e=n(Jqe,"STRONG",{});var Ykt=s(l4e);sGr=r(Ykt,"bart"),Ykt.forEach(t),lGr=r(Jqe," \u2014 "),mZ=n(Jqe,"A",{href:!0});var Kkt=s(mZ);iGr=r(Kkt,"FlaxBartForQuestionAnswering"),Kkt.forEach(t),dGr=r(Jqe," (BART model)"),Jqe.forEach(t),cGr=i(De),IC=n(De,"LI",{});var Yqe=s(IC);i4e=n(Yqe,"STRONG",{});var Zkt=s(i4e);fGr=r(Zkt,"bert"),Zkt.forEach(t),mGr=r(Yqe," \u2014 "),gZ=n(Yqe,"A",{href:!0});var eSt=s(gZ);gGr=r(eSt,"FlaxBertForQuestionAnswering"),eSt.forEach(t),hGr=r(Yqe," (BERT model)"),Yqe.forEach(t),pGr=i(De),NC=n(De,"LI",{});var Kqe=s(NC);d4e=n(Kqe,"STRONG",{});var oSt=s(d4e);_Gr=r(oSt,"big_bird"),oSt.forEach(t),uGr=r(Kqe," \u2014 "),hZ=n(Kqe,"A",{href:!0});var rSt=s(hZ);bGr=r(rSt,"FlaxBigBirdForQuestionAnswering"),rSt.forEach(t),vGr=r(Kqe," (BigBird model)"),Kqe.forEach(t),FGr=i(De),qC=n(De,"LI",{});var Zqe=s(qC);c4e=n(Zqe,"STRONG",{});var tSt=s(c4e);TGr=r(tSt,"distilbert"),tSt.forEach(t),MGr=r(Zqe," \u2014 "),pZ=n(Zqe,"A",{href:!0});var aSt=s(pZ);EGr=r(aSt,"FlaxDistilBertForQuestionAnswering"),aSt.forEach(t),CGr=r(Zqe," (DistilBERT model)"),Zqe.forEach(t),wGr=i(De),jC=n(De,"LI",{});var eje=s(jC);f4e=n(eje,"STRONG",{});var nSt=s(f4e);AGr=r(nSt,"electra"),nSt.forEach(t),LGr=r(eje," \u2014 "),_Z=n(eje,"A",{href:!0});var sSt=s(_Z);yGr=r(sSt,"FlaxElectraForQuestionAnswering"),sSt.forEach(t),xGr=r(eje," (ELECTRA model)"),eje.forEach(t),$Gr=i(De),DC=n(De,"LI",{});var oje=s(DC);m4e=n(oje,"STRONG",{});var lSt=s(m4e);kGr=r(lSt,"mbart"),lSt.forEach(t),SGr=r(oje," \u2014 "),uZ=n(oje,"A",{href:!0});var iSt=s(uZ);RGr=r(iSt,"FlaxMBartForQuestionAnswering"),iSt.forEach(t),PGr=r(oje," (mBART model)"),oje.forEach(t),BGr=i(De),GC=n(De,"LI",{});var rje=s(GC);g4e=n(rje,"STRONG",{});var dSt=s(g4e);IGr=r(dSt,"roberta"),dSt.forEach(t),NGr=r(rje," \u2014 "),bZ=n(rje,"A",{href:!0});var cSt=s(bZ);qGr=r(cSt,"FlaxRobertaForQuestionAnswering"),cSt.forEach(t),jGr=r(rje," (RoBERTa model)"),rje.forEach(t),DGr=i(De),OC=n(De,"LI",{});var tje=s(OC);h4e=n(tje,"STRONG",{});var fSt=s(h4e);GGr=r(fSt,"roformer"),fSt.forEach(t),OGr=r(tje," \u2014 "),vZ=n(tje,"A",{href:!0});var mSt=s(vZ);VGr=r(mSt,"FlaxRoFormerForQuestionAnswering"),mSt.forEach(t),XGr=r(tje," (RoFormer model)"),tje.forEach(t),zGr=i(De),VC=n(De,"LI",{});var aje=s(VC);p4e=n(aje,"STRONG",{});var gSt=s(p4e);WGr=r(gSt,"xlm-roberta"),gSt.forEach(t),QGr=r(aje," \u2014 "),FZ=n(aje,"A",{href:!0});var hSt=s(FZ);HGr=r(hSt,"FlaxXLMRobertaForQuestionAnswering"),hSt.forEach(t),UGr=r(aje," (XLM-RoBERTa model)"),aje.forEach(t),De.forEach(t),JGr=i(oi),T(XC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),bGe=i(f),Yc=n(f,"H2",{class:!0});var wVe=s(Yc);zC=n(wVe,"A",{id:!0,class:!0,href:!0});var pSt=s(zC);_4e=n(pSt,"SPAN",{});var _St=s(_4e);T(Ax.$$.fragment,_St),_St.forEach(t),pSt.forEach(t),YGr=i(wVe),u4e=n(wVe,"SPAN",{});var uSt=s(u4e);KGr=r(uSt,"FlaxAutoModelForTokenClassification"),uSt.forEach(t),wVe.forEach(t),vGe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(Lx.$$.fragment,ri),ZGr=i(ri),Kc=n(ri,"P",{});var qoe=s(Kc);eOr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TZ=n(qoe,"A",{href:!0});var bSt=s(TZ);oOr=r(bSt,"from_pretrained()"),bSt.forEach(t),rOr=r(qoe," class method or the "),MZ=n(qoe,"A",{href:!0});var vSt=s(MZ);tOr=r(vSt,"from_config()"),vSt.forEach(t),aOr=r(qoe,` class
method.`),qoe.forEach(t),nOr=i(ri),yx=n(ri,"P",{});var AVe=s(yx);sOr=r(AVe,"This class cannot be instantiated directly using "),b4e=n(AVe,"CODE",{});var FSt=s(b4e);lOr=r(FSt,"__init__()"),FSt.forEach(t),iOr=r(AVe," (throws an error)."),AVe.forEach(t),dOr=i(ri),Ht=n(ri,"DIV",{class:!0});var Rw=s(Ht);T(xx.$$.fragment,Rw),cOr=i(Rw),v4e=n(Rw,"P",{});var TSt=s(v4e);fOr=r(TSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TSt.forEach(t),mOr=i(Rw),Zc=n(Rw,"P",{});var joe=s(Zc);gOr=r(joe,`Note:
Loading a model from its configuration file does `),F4e=n(joe,"STRONG",{});var MSt=s(F4e);hOr=r(MSt,"not"),MSt.forEach(t),pOr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(joe,"A",{href:!0});var ESt=s(EZ);_Or=r(ESt,"from_pretrained()"),ESt.forEach(t),uOr=r(joe," to load the model weights."),joe.forEach(t),bOr=i(Rw),T(WC.$$.fragment,Rw),Rw.forEach(t),vOr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T($x.$$.fragment,ti),FOr=i(ti),T4e=n(ti,"P",{});var CSt=s(T4e);TOr=r(CSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CSt.forEach(t),MOr=i(ti),Tn=n(ti,"P",{});var Pw=s(Tn);EOr=r(Pw,"The model class to instantiate is selected based on the "),M4e=n(Pw,"CODE",{});var wSt=s(M4e);COr=r(wSt,"model_type"),wSt.forEach(t),wOr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),E4e=n(Pw,"CODE",{});var ASt=s(E4e);AOr=r(ASt,"pretrained_model_name_or_path"),ASt.forEach(t),LOr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(Pw,"CODE",{});var LSt=s(C4e);yOr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),xOr=r(Pw,":"),Pw.forEach(t),$Or=i(ti),Oe=n(ti,"UL",{});var Fo=s(Oe);QC=n(Fo,"LI",{});var nje=s(QC);w4e=n(nje,"STRONG",{});var ySt=s(w4e);kOr=r(ySt,"albert"),ySt.forEach(t),SOr=r(nje," \u2014 "),CZ=n(nje,"A",{href:!0});var xSt=s(CZ);ROr=r(xSt,"FlaxAlbertForTokenClassification"),xSt.forEach(t),POr=r(nje," (ALBERT model)"),nje.forEach(t),BOr=i(Fo),HC=n(Fo,"LI",{});var sje=s(HC);A4e=n(sje,"STRONG",{});var $St=s(A4e);IOr=r($St,"bert"),$St.forEach(t),NOr=r(sje," \u2014 "),wZ=n(sje,"A",{href:!0});var kSt=s(wZ);qOr=r(kSt,"FlaxBertForTokenClassification"),kSt.forEach(t),jOr=r(sje," (BERT model)"),sje.forEach(t),DOr=i(Fo),UC=n(Fo,"LI",{});var lje=s(UC);L4e=n(lje,"STRONG",{});var SSt=s(L4e);GOr=r(SSt,"big_bird"),SSt.forEach(t),OOr=r(lje," \u2014 "),AZ=n(lje,"A",{href:!0});var RSt=s(AZ);VOr=r(RSt,"FlaxBigBirdForTokenClassification"),RSt.forEach(t),XOr=r(lje," (BigBird model)"),lje.forEach(t),zOr=i(Fo),JC=n(Fo,"LI",{});var ije=s(JC);y4e=n(ije,"STRONG",{});var PSt=s(y4e);WOr=r(PSt,"distilbert"),PSt.forEach(t),QOr=r(ije," \u2014 "),LZ=n(ije,"A",{href:!0});var BSt=s(LZ);HOr=r(BSt,"FlaxDistilBertForTokenClassification"),BSt.forEach(t),UOr=r(ije," (DistilBERT model)"),ije.forEach(t),JOr=i(Fo),YC=n(Fo,"LI",{});var dje=s(YC);x4e=n(dje,"STRONG",{});var ISt=s(x4e);YOr=r(ISt,"electra"),ISt.forEach(t),KOr=r(dje," \u2014 "),yZ=n(dje,"A",{href:!0});var NSt=s(yZ);ZOr=r(NSt,"FlaxElectraForTokenClassification"),NSt.forEach(t),eVr=r(dje," (ELECTRA model)"),dje.forEach(t),oVr=i(Fo),KC=n(Fo,"LI",{});var cje=s(KC);$4e=n(cje,"STRONG",{});var qSt=s($4e);rVr=r(qSt,"roberta"),qSt.forEach(t),tVr=r(cje," \u2014 "),xZ=n(cje,"A",{href:!0});var jSt=s(xZ);aVr=r(jSt,"FlaxRobertaForTokenClassification"),jSt.forEach(t),nVr=r(cje," (RoBERTa model)"),cje.forEach(t),sVr=i(Fo),ZC=n(Fo,"LI",{});var fje=s(ZC);k4e=n(fje,"STRONG",{});var DSt=s(k4e);lVr=r(DSt,"roformer"),DSt.forEach(t),iVr=r(fje," \u2014 "),$Z=n(fje,"A",{href:!0});var GSt=s($Z);dVr=r(GSt,"FlaxRoFormerForTokenClassification"),GSt.forEach(t),cVr=r(fje," (RoFormer model)"),fje.forEach(t),fVr=i(Fo),e5=n(Fo,"LI",{});var mje=s(e5);S4e=n(mje,"STRONG",{});var OSt=s(S4e);mVr=r(OSt,"xlm-roberta"),OSt.forEach(t),gVr=r(mje," \u2014 "),kZ=n(mje,"A",{href:!0});var VSt=s(kZ);hVr=r(VSt,"FlaxXLMRobertaForTokenClassification"),VSt.forEach(t),pVr=r(mje," (XLM-RoBERTa model)"),mje.forEach(t),Fo.forEach(t),_Vr=i(ti),T(o5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),FGe=i(f),ef=n(f,"H2",{class:!0});var LVe=s(ef);r5=n(LVe,"A",{id:!0,class:!0,href:!0});var XSt=s(r5);R4e=n(XSt,"SPAN",{});var zSt=s(R4e);T(kx.$$.fragment,zSt),zSt.forEach(t),XSt.forEach(t),uVr=i(LVe),P4e=n(LVe,"SPAN",{});var WSt=s(P4e);bVr=r(WSt,"FlaxAutoModelForMultipleChoice"),WSt.forEach(t),LVe.forEach(t),TGe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Sx.$$.fragment,ai),vVr=i(ai),of=n(ai,"P",{});var Doe=s(of);FVr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SZ=n(Doe,"A",{href:!0});var QSt=s(SZ);TVr=r(QSt,"from_pretrained()"),QSt.forEach(t),MVr=r(Doe," class method or the "),RZ=n(Doe,"A",{href:!0});var HSt=s(RZ);EVr=r(HSt,"from_config()"),HSt.forEach(t),CVr=r(Doe,` class
method.`),Doe.forEach(t),wVr=i(ai),Rx=n(ai,"P",{});var yVe=s(Rx);AVr=r(yVe,"This class cannot be instantiated directly using "),B4e=n(yVe,"CODE",{});var USt=s(B4e);LVr=r(USt,"__init__()"),USt.forEach(t),yVr=r(yVe," (throws an error)."),yVe.forEach(t),xVr=i(ai),Ut=n(ai,"DIV",{class:!0});var Bw=s(Ut);T(Px.$$.fragment,Bw),$Vr=i(Bw),I4e=n(Bw,"P",{});var JSt=s(I4e);kVr=r(JSt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JSt.forEach(t),SVr=i(Bw),rf=n(Bw,"P",{});var Goe=s(rf);RVr=r(Goe,`Note:
Loading a model from its configuration file does `),N4e=n(Goe,"STRONG",{});var YSt=s(N4e);PVr=r(YSt,"not"),YSt.forEach(t),BVr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(Goe,"A",{href:!0});var KSt=s(PZ);IVr=r(KSt,"from_pretrained()"),KSt.forEach(t),NVr=r(Goe," to load the model weights."),Goe.forEach(t),qVr=i(Bw),T(t5.$$.fragment,Bw),Bw.forEach(t),jVr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Bx.$$.fragment,ni),DVr=i(ni),q4e=n(ni,"P",{});var ZSt=s(q4e);GVr=r(ZSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZSt.forEach(t),OVr=i(ni),Mn=n(ni,"P",{});var Iw=s(Mn);VVr=r(Iw,"The model class to instantiate is selected based on the "),j4e=n(Iw,"CODE",{});var eRt=s(j4e);XVr=r(eRt,"model_type"),eRt.forEach(t),zVr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),D4e=n(Iw,"CODE",{});var oRt=s(D4e);WVr=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),QVr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(Iw,"CODE",{});var rRt=s(G4e);HVr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),UVr=r(Iw,":"),Iw.forEach(t),JVr=i(ni),Ve=n(ni,"UL",{});var To=s(Ve);a5=n(To,"LI",{});var gje=s(a5);O4e=n(gje,"STRONG",{});var tRt=s(O4e);YVr=r(tRt,"albert"),tRt.forEach(t),KVr=r(gje," \u2014 "),BZ=n(gje,"A",{href:!0});var aRt=s(BZ);ZVr=r(aRt,"FlaxAlbertForMultipleChoice"),aRt.forEach(t),eXr=r(gje," (ALBERT model)"),gje.forEach(t),oXr=i(To),n5=n(To,"LI",{});var hje=s(n5);V4e=n(hje,"STRONG",{});var nRt=s(V4e);rXr=r(nRt,"bert"),nRt.forEach(t),tXr=r(hje," \u2014 "),IZ=n(hje,"A",{href:!0});var sRt=s(IZ);aXr=r(sRt,"FlaxBertForMultipleChoice"),sRt.forEach(t),nXr=r(hje," (BERT model)"),hje.forEach(t),sXr=i(To),s5=n(To,"LI",{});var pje=s(s5);X4e=n(pje,"STRONG",{});var lRt=s(X4e);lXr=r(lRt,"big_bird"),lRt.forEach(t),iXr=r(pje," \u2014 "),NZ=n(pje,"A",{href:!0});var iRt=s(NZ);dXr=r(iRt,"FlaxBigBirdForMultipleChoice"),iRt.forEach(t),cXr=r(pje," (BigBird model)"),pje.forEach(t),fXr=i(To),l5=n(To,"LI",{});var _je=s(l5);z4e=n(_je,"STRONG",{});var dRt=s(z4e);mXr=r(dRt,"distilbert"),dRt.forEach(t),gXr=r(_je," \u2014 "),qZ=n(_je,"A",{href:!0});var cRt=s(qZ);hXr=r(cRt,"FlaxDistilBertForMultipleChoice"),cRt.forEach(t),pXr=r(_je," (DistilBERT model)"),_je.forEach(t),_Xr=i(To),i5=n(To,"LI",{});var uje=s(i5);W4e=n(uje,"STRONG",{});var fRt=s(W4e);uXr=r(fRt,"electra"),fRt.forEach(t),bXr=r(uje," \u2014 "),jZ=n(uje,"A",{href:!0});var mRt=s(jZ);vXr=r(mRt,"FlaxElectraForMultipleChoice"),mRt.forEach(t),FXr=r(uje," (ELECTRA model)"),uje.forEach(t),TXr=i(To),d5=n(To,"LI",{});var bje=s(d5);Q4e=n(bje,"STRONG",{});var gRt=s(Q4e);MXr=r(gRt,"roberta"),gRt.forEach(t),EXr=r(bje," \u2014 "),DZ=n(bje,"A",{href:!0});var hRt=s(DZ);CXr=r(hRt,"FlaxRobertaForMultipleChoice"),hRt.forEach(t),wXr=r(bje," (RoBERTa model)"),bje.forEach(t),AXr=i(To),c5=n(To,"LI",{});var vje=s(c5);H4e=n(vje,"STRONG",{});var pRt=s(H4e);LXr=r(pRt,"roformer"),pRt.forEach(t),yXr=r(vje," \u2014 "),GZ=n(vje,"A",{href:!0});var _Rt=s(GZ);xXr=r(_Rt,"FlaxRoFormerForMultipleChoice"),_Rt.forEach(t),$Xr=r(vje," (RoFormer model)"),vje.forEach(t),kXr=i(To),f5=n(To,"LI",{});var Fje=s(f5);U4e=n(Fje,"STRONG",{});var uRt=s(U4e);SXr=r(uRt,"xlm-roberta"),uRt.forEach(t),RXr=r(Fje," \u2014 "),OZ=n(Fje,"A",{href:!0});var bRt=s(OZ);PXr=r(bRt,"FlaxXLMRobertaForMultipleChoice"),bRt.forEach(t),BXr=r(Fje," (XLM-RoBERTa model)"),Fje.forEach(t),To.forEach(t),IXr=i(ni),T(m5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),MGe=i(f),tf=n(f,"H2",{class:!0});var xVe=s(tf);g5=n(xVe,"A",{id:!0,class:!0,href:!0});var vRt=s(g5);J4e=n(vRt,"SPAN",{});var FRt=s(J4e);T(Ix.$$.fragment,FRt),FRt.forEach(t),vRt.forEach(t),NXr=i(xVe),Y4e=n(xVe,"SPAN",{});var TRt=s(Y4e);qXr=r(TRt,"FlaxAutoModelForNextSentencePrediction"),TRt.forEach(t),xVe.forEach(t),EGe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(Nx.$$.fragment,si),jXr=i(si),af=n(si,"P",{});var Ooe=s(af);DXr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VZ=n(Ooe,"A",{href:!0});var MRt=s(VZ);GXr=r(MRt,"from_pretrained()"),MRt.forEach(t),OXr=r(Ooe," class method or the "),XZ=n(Ooe,"A",{href:!0});var ERt=s(XZ);VXr=r(ERt,"from_config()"),ERt.forEach(t),XXr=r(Ooe,` class
method.`),Ooe.forEach(t),zXr=i(si),qx=n(si,"P",{});var $Ve=s(qx);WXr=r($Ve,"This class cannot be instantiated directly using "),K4e=n($Ve,"CODE",{});var CRt=s(K4e);QXr=r(CRt,"__init__()"),CRt.forEach(t),HXr=r($Ve," (throws an error)."),$Ve.forEach(t),UXr=i(si),Jt=n(si,"DIV",{class:!0});var Nw=s(Jt);T(jx.$$.fragment,Nw),JXr=i(Nw),Z4e=n(Nw,"P",{});var wRt=s(Z4e);YXr=r(wRt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wRt.forEach(t),KXr=i(Nw),nf=n(Nw,"P",{});var Voe=s(nf);ZXr=r(Voe,`Note:
Loading a model from its configuration file does `),eEe=n(Voe,"STRONG",{});var ARt=s(eEe);ezr=r(ARt,"not"),ARt.forEach(t),ozr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(Voe,"A",{href:!0});var LRt=s(zZ);rzr=r(LRt,"from_pretrained()"),LRt.forEach(t),tzr=r(Voe," to load the model weights."),Voe.forEach(t),azr=i(Nw),T(h5.$$.fragment,Nw),Nw.forEach(t),nzr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Dx.$$.fragment,li),szr=i(li),oEe=n(li,"P",{});var yRt=s(oEe);lzr=r(yRt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yRt.forEach(t),izr=i(li),En=n(li,"P",{});var qw=s(En);dzr=r(qw,"The model class to instantiate is selected based on the "),rEe=n(qw,"CODE",{});var xRt=s(rEe);czr=r(xRt,"model_type"),xRt.forEach(t),fzr=r(qw,` property of the config object (either
passed as an argument or loaded from `),tEe=n(qw,"CODE",{});var $Rt=s(tEe);mzr=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),gzr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(qw,"CODE",{});var kRt=s(aEe);hzr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),pzr=r(qw,":"),qw.forEach(t),_zr=i(li),nEe=n(li,"UL",{});var SRt=s(nEe);p5=n(SRt,"LI",{});var Tje=s(p5);sEe=n(Tje,"STRONG",{});var RRt=s(sEe);uzr=r(RRt,"bert"),RRt.forEach(t),bzr=r(Tje," \u2014 "),WZ=n(Tje,"A",{href:!0});var PRt=s(WZ);vzr=r(PRt,"FlaxBertForNextSentencePrediction"),PRt.forEach(t),Fzr=r(Tje," (BERT model)"),Tje.forEach(t),SRt.forEach(t),Tzr=i(li),T(_5.$$.fragment,li),li.forEach(t),si.forEach(t),CGe=i(f),sf=n(f,"H2",{class:!0});var kVe=s(sf);u5=n(kVe,"A",{id:!0,class:!0,href:!0});var BRt=s(u5);lEe=n(BRt,"SPAN",{});var IRt=s(lEe);T(Gx.$$.fragment,IRt),IRt.forEach(t),BRt.forEach(t),Mzr=i(kVe),iEe=n(kVe,"SPAN",{});var NRt=s(iEe);Ezr=r(NRt,"FlaxAutoModelForImageClassification"),NRt.forEach(t),kVe.forEach(t),wGe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Ox.$$.fragment,ii),Czr=i(ii),lf=n(ii,"P",{});var Xoe=s(lf);wzr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QZ=n(Xoe,"A",{href:!0});var qRt=s(QZ);Azr=r(qRt,"from_pretrained()"),qRt.forEach(t),Lzr=r(Xoe," class method or the "),HZ=n(Xoe,"A",{href:!0});var jRt=s(HZ);yzr=r(jRt,"from_config()"),jRt.forEach(t),xzr=r(Xoe,` class
method.`),Xoe.forEach(t),$zr=i(ii),Vx=n(ii,"P",{});var SVe=s(Vx);kzr=r(SVe,"This class cannot be instantiated directly using "),dEe=n(SVe,"CODE",{});var DRt=s(dEe);Szr=r(DRt,"__init__()"),DRt.forEach(t),Rzr=r(SVe," (throws an error)."),SVe.forEach(t),Pzr=i(ii),Yt=n(ii,"DIV",{class:!0});var jw=s(Yt);T(Xx.$$.fragment,jw),Bzr=i(jw),cEe=n(jw,"P",{});var GRt=s(cEe);Izr=r(GRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GRt.forEach(t),Nzr=i(jw),df=n(jw,"P",{});var zoe=s(df);qzr=r(zoe,`Note:
Loading a model from its configuration file does `),fEe=n(zoe,"STRONG",{});var ORt=s(fEe);jzr=r(ORt,"not"),ORt.forEach(t),Dzr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(zoe,"A",{href:!0});var VRt=s(UZ);Gzr=r(VRt,"from_pretrained()"),VRt.forEach(t),Ozr=r(zoe," to load the model weights."),zoe.forEach(t),Vzr=i(jw),T(b5.$$.fragment,jw),jw.forEach(t),Xzr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(zx.$$.fragment,di),zzr=i(di),mEe=n(di,"P",{});var XRt=s(mEe);Wzr=r(XRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XRt.forEach(t),Qzr=i(di),Cn=n(di,"P",{});var Dw=s(Cn);Hzr=r(Dw,"The model class to instantiate is selected based on the "),gEe=n(Dw,"CODE",{});var zRt=s(gEe);Uzr=r(zRt,"model_type"),zRt.forEach(t),Jzr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),hEe=n(Dw,"CODE",{});var WRt=s(hEe);Yzr=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),Kzr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(Dw,"CODE",{});var QRt=s(pEe);Zzr=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),eWr=r(Dw,":"),Dw.forEach(t),oWr=i(di),Wx=n(di,"UL",{});var RVe=s(Wx);v5=n(RVe,"LI",{});var Mje=s(v5);_Ee=n(Mje,"STRONG",{});var HRt=s(_Ee);rWr=r(HRt,"beit"),HRt.forEach(t),tWr=r(Mje," \u2014 "),JZ=n(Mje,"A",{href:!0});var URt=s(JZ);aWr=r(URt,"FlaxBeitForImageClassification"),URt.forEach(t),nWr=r(Mje," (BEiT model)"),Mje.forEach(t),sWr=i(RVe),F5=n(RVe,"LI",{});var Eje=s(F5);uEe=n(Eje,"STRONG",{});var JRt=s(uEe);lWr=r(JRt,"vit"),JRt.forEach(t),iWr=r(Eje," \u2014 "),YZ=n(Eje,"A",{href:!0});var YRt=s(YZ);dWr=r(YRt,"FlaxViTForImageClassification"),YRt.forEach(t),cWr=r(Eje," (ViT model)"),Eje.forEach(t),RVe.forEach(t),fWr=i(di),T(T5.$$.fragment,di),di.forEach(t),ii.forEach(t),AGe=i(f),cf=n(f,"H2",{class:!0});var PVe=s(cf);M5=n(PVe,"A",{id:!0,class:!0,href:!0});var KRt=s(M5);bEe=n(KRt,"SPAN",{});var ZRt=s(bEe);T(Qx.$$.fragment,ZRt),ZRt.forEach(t),KRt.forEach(t),mWr=i(PVe),vEe=n(PVe,"SPAN",{});var ePt=s(vEe);gWr=r(ePt,"FlaxAutoModelForVision2Seq"),ePt.forEach(t),PVe.forEach(t),LGe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Hx.$$.fragment,ci),hWr=i(ci),ff=n(ci,"P",{});var Woe=s(ff);pWr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KZ=n(Woe,"A",{href:!0});var oPt=s(KZ);_Wr=r(oPt,"from_pretrained()"),oPt.forEach(t),uWr=r(Woe," class method or the "),ZZ=n(Woe,"A",{href:!0});var rPt=s(ZZ);bWr=r(rPt,"from_config()"),rPt.forEach(t),vWr=r(Woe,` class
method.`),Woe.forEach(t),FWr=i(ci),Ux=n(ci,"P",{});var BVe=s(Ux);TWr=r(BVe,"This class cannot be instantiated directly using "),FEe=n(BVe,"CODE",{});var tPt=s(FEe);MWr=r(tPt,"__init__()"),tPt.forEach(t),EWr=r(BVe," (throws an error)."),BVe.forEach(t),CWr=i(ci),Kt=n(ci,"DIV",{class:!0});var Gw=s(Kt);T(Jx.$$.fragment,Gw),wWr=i(Gw),TEe=n(Gw,"P",{});var aPt=s(TEe);AWr=r(aPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aPt.forEach(t),LWr=i(Gw),mf=n(Gw,"P",{});var Qoe=s(mf);yWr=r(Qoe,`Note:
Loading a model from its configuration file does `),MEe=n(Qoe,"STRONG",{});var nPt=s(MEe);xWr=r(nPt,"not"),nPt.forEach(t),$Wr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(Qoe,"A",{href:!0});var sPt=s(eee);kWr=r(sPt,"from_pretrained()"),sPt.forEach(t),SWr=r(Qoe," to load the model weights."),Qoe.forEach(t),RWr=i(Gw),T(E5.$$.fragment,Gw),Gw.forEach(t),PWr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Yx.$$.fragment,fi),BWr=i(fi),EEe=n(fi,"P",{});var lPt=s(EEe);IWr=r(lPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lPt.forEach(t),NWr=i(fi),wn=n(fi,"P",{});var Ow=s(wn);qWr=r(Ow,"The model class to instantiate is selected based on the "),CEe=n(Ow,"CODE",{});var iPt=s(CEe);jWr=r(iPt,"model_type"),iPt.forEach(t),DWr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),wEe=n(Ow,"CODE",{});var dPt=s(wEe);GWr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),OWr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(Ow,"CODE",{});var cPt=s(AEe);VWr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),XWr=r(Ow,":"),Ow.forEach(t),zWr=i(fi),LEe=n(fi,"UL",{});var fPt=s(LEe);C5=n(fPt,"LI",{});var Cje=s(C5);yEe=n(Cje,"STRONG",{});var mPt=s(yEe);WWr=r(mPt,"vision-encoder-decoder"),mPt.forEach(t),QWr=r(Cje," \u2014 "),oee=n(Cje,"A",{href:!0});var gPt=s(oee);HWr=r(gPt,"FlaxVisionEncoderDecoderModel"),gPt.forEach(t),UWr=r(Cje," (Vision Encoder decoder model)"),Cje.forEach(t),fPt.forEach(t),JWr=i(fi),T(w5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(uIt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(bk,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(vk,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertConfig"),c(Fk,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartConfig"),c(Tk,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitConfig"),c(Mk,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertConfig"),c(Ek,"href","/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Ck,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdConfig"),c(wk,"href","/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Ak,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Lk,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(yk,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomConfig"),c(xk,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertConfig"),c($k,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineConfig"),c(kk,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPConfig"),c(Sk,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertConfig"),c(Rk,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextConfig"),c(Pk,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLConfig"),c(Bk,"href","/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtConfig"),c(Ik,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Nk,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(qk,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(jk,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaConfig"),c(Dk,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Gk,"href","/docs/transformers/pr_17639/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ok,"href","/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTConfig"),c(Vk,"href","/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrConfig"),c(Xk,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertConfig"),c(zk,"href","/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRConfig"),c(Wk,"href","/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTConfig"),c(Qk,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraConfig"),c(Hk,"href","/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Uk,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Jk,"href","/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaConfig"),c(Yk,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetConfig"),c(Kk,"href","/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTConfig"),c(Zk,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelConfig"),c(eS,"href","/docs/transformers/pr_17639/en/model_doc/glpn#transformers.GLPNConfig"),c(oS,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Config"),c(rS,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tS,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(aS,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJConfig"),c(nS,"href","/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertConfig"),c(sS,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertConfig"),c(lS,"href","/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(iS,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dS,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(cS,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(fS,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDConfig"),c(mS,"href","/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitConfig"),c(gS,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerConfig"),c(hS,"href","/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeConfig"),c(pS,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertConfig"),c(_S,"href","/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100Config"),c(uS,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianConfig"),c(bS,"href","/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(vS,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartConfig"),c(FS,"href","/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTConfig"),c(TS,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(MS,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ES,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetConfig"),c(CS,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Config"),c(wS,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(AS,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(LS,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTConfig"),c(yS,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusConfig"),c(xS,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverConfig"),c($S,"href","/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartConfig"),c(kS,"href","/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(SS,"href","/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(RS,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(PS,"href","/docs/transformers/pr_17639/en/model_doc/rag#transformers.RagConfig"),c(BS,"href","/docs/transformers/pr_17639/en/model_doc/realm#transformers.RealmConfig"),c(IS,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerConfig"),c(NS,"href","/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetConfig"),c(qS,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertConfig"),c(jS,"href","/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetConfig"),c(DS,"href","/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertConfig"),c(GS,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaConfig"),c(OS,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerConfig"),c(VS,"href","/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerConfig"),c(XS,"href","/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWConfig"),c(zS,"href","/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDConfig"),c(WS,"href","/docs/transformers/pr_17639/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(QS,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(HS,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(US,"href","/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterConfig"),c(JS,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(YS,"href","/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinConfig"),c(KS,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Config"),c(ZS,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasConfig"),c(eR,"href","/docs/transformers/pr_17639/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(oR,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(rR,"href","/docs/transformers/pr_17639/en/model_doc/trocr#transformers.TrOCRConfig"),c(tR,"href","/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(aR,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(nR,"href","/docs/transformers/pr_17639/en/model_doc/van#transformers.VanConfig"),c(sR,"href","/docs/transformers/pr_17639/en/model_doc/vilt#transformers.ViltConfig"),c(lR,"href","/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(iR,"href","/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(dR,"href","/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(cR,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTConfig"),c(fR,"href","/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(mR,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(gR,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(hR,"href","/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMConfig"),c(pR,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMConfig"),c(_R,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMConfig"),c(uR,"href","/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(bR,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(vR,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(FR,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetConfig"),c(TR,"href","/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosConfig"),c(MR,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(ER,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(CR,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertTokenizer"),c(wR,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartTokenizer"),c(LR,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartTokenizerFast"),c(yR,"href","/docs/transformers/pr_17639/en/model_doc/barthez#transformers.BarthezTokenizer"),c(xR,"href","/docs/transformers/pr_17639/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c($R,"href","/docs/transformers/pr_17639/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(kR,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizer"),c(SR,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(PR,"href","/docs/transformers/pr_17639/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(BR,"href","/docs/transformers/pr_17639/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(IR,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(NR,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(qR,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jR,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DR,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(GR,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(OR,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(VR,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(XR,"href","/docs/transformers/pr_17639/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(zR,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertTokenizer"),c(WR,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineTokenizer"),c(HR,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPTokenizer"),c(UR,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(JR,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(YR,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17639/en/model_doc/cpm#transformers.CpmTokenizer"),c(ZR,"href","/docs/transformers/pr_17639/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(eP,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(oP,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rP,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tP,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaTokenizer"),c(aP,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nP,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sP,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(iP,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(cP,"href","/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(fP,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraTokenizer"),c(mP,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(gP,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(hP,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetTokenizer"),c(pP,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(_P,"href","/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uP,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelTokenizer"),c(bP,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(vP,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FP,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MP,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(EP,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(CP,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wP,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AP,"href","/docs/transformers/pr_17639/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LP,"href","/docs/transformers/pr_17639/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xP,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizer"),c($P,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kP,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SP,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RP,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PP,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BP,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IP,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NP,"href","/docs/transformers/pr_17639/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qP,"href","/docs/transformers/pr_17639/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jP,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDTokenizer"),c(DP,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDTokenizerFast"),c(GP,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OP,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VP,"href","/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeTokenizer"),c(XP,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zP,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(QP,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianTokenizer"),c(HP,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartTokenizer"),c(UP,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(JP,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(YP,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(KP,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizer"),c(ZP,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17639/en/model_doc/mluke#transformers.MLukeTokenizer"),c(oB,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(rB,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(aB,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(nB,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Tokenizer"),c(sB,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5TokenizerFast"),c(lB,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(cB,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fB,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mB,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gB,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hB,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pB,"href","/docs/transformers/pr_17639/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_B,"href","/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uB,"href","/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(bB,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizer"),c(vB,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17639/en/model_doc/rag#transformers.RagTokenizer"),c(TB,"href","/docs/transformers/pr_17639/en/model_doc/realm#transformers.RealmTokenizer"),c(MB,"href","/docs/transformers/pr_17639/en/model_doc/realm#transformers.RealmTokenizerFast"),c(EB,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CB,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wB,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AB,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(yB,"href","/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SB,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(PB,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(BB,"href","/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IB,"href","/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NB,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(qB,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Tokenizer"),c(DB,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5TokenizerFast"),c(GB,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasTokenizer"),c(OB,"href","/docs/transformers/pr_17639/en/model_doc/tapex#transformers.TapexTokenizer"),c(VB,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(XB,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizer"),c(zB,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertTokenizerFast"),c(WB,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QB,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HB,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(UB,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMTokenizer"),c(JB,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(YB,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMTokenizer"),c(KB,"href","/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ZB,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(eI,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(oI,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rI,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tI,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(aI,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(nI,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertTokenizer"),c(sI,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"id","transformers.AutoFeatureExtractor"),c(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fh,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(lI,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(iI,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17639/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FI,"href","/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(EI,"href","/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($I,"href","/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(II,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qI,"href","/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoProcessor"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(jI,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(DI,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPProcessor"),c(GI,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(OI,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(VI,"href","/docs/transformers/pr_17639/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(XI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(QI,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(HI,"href","/docs/transformers/pr_17639/en/model_doc/trocr#transformers.TrOCRProcessor"),c(UI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YI,"href","/docs/transformers/pr_17639/en/model_doc/vilt#transformers.ViltProcessor"),c(KI,"href","/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ZI,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eN,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oN,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"id","transformers.AutoModel"),c(gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(rN,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tN,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aN,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nN,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertModel"),c(sN,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartModel"),c(lN,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitModel"),c(iN,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertModel"),c(dN,"href","/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(cN,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdModel"),c(fN,"href","/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(mN,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(gN,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(hN,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomModel"),c(pN,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertModel"),c(_N,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineModel"),c(uN,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.CLIPModel"),c(bN,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertModel"),c(vN,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextModel"),c(FN,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLModel"),c(TN,"href","/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtModel"),c(MN,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(EN,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(CN,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wN,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaModel"),c(AN,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(LN,"href","/docs/transformers/pr_17639/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(yN,"href","/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTModel"),c(xN,"href","/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrModel"),c($N,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertModel"),c(kN,"href","/docs/transformers/pr_17639/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SN,"href","/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTModel"),c(RN,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraModel"),c(PN,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertModel"),c(BN,"href","/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaModel"),c(IN,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetModel"),c(NN,"href","/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTModel"),c(qN,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelModel"),c(jN,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelBaseModel"),c(DN,"href","/docs/transformers/pr_17639/en/model_doc/glpn#transformers.GLPNModel"),c(GN,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2Model"),c(ON,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(VN,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(XN,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJModel"),c(zN,"href","/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertModel"),c(WN,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertModel"),c(QN,"href","/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HN,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(UN,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(JN,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(YN,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDModel"),c(KN,"href","/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitModel"),c(ZN,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerModel"),c(eq,"href","/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeModel"),c(oq,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertModel"),c(rq,"href","/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100Model"),c(tq,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianModel"),c(aq,"href","/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nq,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartModel"),c(sq,"href","/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTModel"),c(lq,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(iq,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertModel"),c(dq,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetModel"),c(cq,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5Model"),c(fq,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerModel"),c(mq,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gq,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTModel"),c(hq,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusModel"),c(pq,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverModel"),c(_q,"href","/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartModel"),c(uq,"href","/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerModel"),c(bq,"href","/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vq,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Fq,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerModel"),c(Tq,"href","/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetModel"),c(Mq,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertModel"),c(Eq,"href","/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetModel"),c(Cq,"href","/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertModel"),c(wq,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaModel"),c(Aq,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerModel"),c(Lq,"href","/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerModel"),c(yq,"href","/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWModel"),c(xq,"href","/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDModel"),c($q,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kq,"href","/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterModel"),c(Sq,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Rq,"href","/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinModel"),c(Pq,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5Model"),c(Bq,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasModel"),c(Iq,"href","/docs/transformers/pr_17639/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Nq,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qq,"href","/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jq,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Dq,"href","/docs/transformers/pr_17639/en/model_doc/van#transformers.VanModel"),c(Gq,"href","/docs/transformers/pr_17639/en/model_doc/vilt#transformers.ViltModel"),c(Oq,"href","/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Vq,"href","/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Xq,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTModel"),c(zq,"href","/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Wq,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Qq,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Hq,"href","/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMModel"),c(Uq,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMModel"),c(Jq,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMModel"),c(Yq,"href","/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kq,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zq,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(ej,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetModel"),c(oj,"href","/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosModel"),c(rj,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoModelForPreTraining"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(tj,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForPreTraining"),c(lj,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForPreTraining"),c(dj,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(cj,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fj,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mj,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gj,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hj,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_j,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForPreTraining"),c(bj,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17639/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Fj,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Tj,"href","/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Ej,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cj,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yj,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(xj,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c($j,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kj,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17639/en/model_doc/retribert#transformers.RetriBertModel"),c(Rj,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Bj,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qj,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jj,"href","/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Dj,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Gj,"href","/docs/transformers/pr_17639/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Oj,"href","/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Vj,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Xj,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(zj,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Wj,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForCausalLM"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Uj,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jj,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yj,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kj,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForCausalLM"),c(Zj,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertLMHeadModel"),c(eD,"href","/docs/transformers/pr_17639/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(oD,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(rD,"href","/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(tD,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(aD,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(nD,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForCausalLM"),c(sD,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lD,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iD,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dD,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cD,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fD,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mD,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gD,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(hD,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianForCausalLM"),c(pD,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_D,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uD,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bD,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.OPTForCausalLM"),c(vD,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(FD,"href","/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(TD,"href","/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(MD,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ED,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(CD,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wD,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(AD,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(LD,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yD,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xD,"href","/docs/transformers/pr_17639/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($D,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kD,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(RD,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(PD,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(BD,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H1,"id","transformers.AutoModelForMaskedLM"),c(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H1,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(ID,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(VD,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XD,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(WD,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(QD,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(HD,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(JD,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(YD,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(KD,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eG,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oG,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rG,"href","/docs/transformers/pr_17639/en/model_doc/luke#transformers.LukeForMaskedLM"),c(tG,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lG,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iG,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dG,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cG,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(fG,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mG,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gG,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hG,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pG,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_G,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bG,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vG,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForSeq2SeqLM"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(FG,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yG,"href","/docs/transformers/pr_17639/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17639/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.MarianMTModel"),c(SG,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_17639/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17639/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e2,"id","transformers.AutoModelForSequenceClassification"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(jG,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17639/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c($O,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K2,"id","transformers.AutoModelForMultipleChoice"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(IO,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(gV,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForNextSentencePrediction"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(hV,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(bV,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(vV,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(FV,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(TV,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForTokenClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(MV,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(yV,"href","/docs/transformers/pr_17639/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(xV,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c($V,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForTokenClassification"),c(kV,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(SV,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(RV,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(PV,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(BV,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(NV,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(qV,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(jV,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(DV,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(GV,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(OV,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(VV,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(XV,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(zV,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(WV,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(QV,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(HV,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(UV,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(JV,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(YV,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(KV,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(eX,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(oX,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(rX,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(tX,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(aX,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(nX,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.AutoModelForQuestionAnswering"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(sX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17639/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17639/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(EX,"href","/docs/transformers/pr_17639/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17639/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17639/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.LEDForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17639/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17639/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17639/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17639/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17639/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17639/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(zX,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(HX,"href","/docs/transformers/pr_17639/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForTableQuestionAnswering"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(UX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForImageClassification"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitForImageClassification"),c(tz,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(az,"href","/docs/transformers/pr_17639/en/model_doc/cvt#transformers.CvtForImageClassification"),c(nz,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(sz,"href","/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTForImageClassification"),c(lz,"href","/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(iz,"href","/docs/transformers/pr_17639/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(dz,"href","/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitForImageClassification"),c(cz,"href","/docs/transformers/pr_17639/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(fz,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(mz,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(gz,"href","/docs/transformers/pr_17639/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(hz,"href","/docs/transformers/pr_17639/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(pz,"href","/docs/transformers/pr_17639/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(_z,"href","/docs/transformers/pr_17639/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(uz,"href","/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(bz,"href","/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinForImageClassification"),c(vz,"href","/docs/transformers/pr_17639/en/model_doc/van#transformers.VanForImageClassification"),c(Fz,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForVision2Seq"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForAudioClassification"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(xz,"href","/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c($z,"href","/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(kz,"href","/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Rz,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Bz,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Iz,"href","/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.AutoModelForAudioFrameClassification"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Gz,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Oz,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Vz,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Xz,"href","/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForCTC"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(zz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Uz,"href","/docs/transformers/pr_17639/en/model_doc/hubert#transformers.HubertForCTC"),c(Jz,"href","/docs/transformers/pr_17639/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Yz,"href","/docs/transformers/pr_17639/en/model_doc/sew#transformers.SEWForCTC"),c(Kz,"href","/docs/transformers/pr_17639/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Zz,"href","/docs/transformers/pr_17639/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(eW,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(oW,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(rW,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(tW,"href","/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(aW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17639/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(iW,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForAudioXVector"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(dW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(gW,"href","/docs/transformers/pr_17639/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(hW,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(pW,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(_W,"href","/docs/transformers/pr_17639/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.AutoModelForMaskedImageModeling"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(uW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17639/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(TW,"href","/docs/transformers/pr_17639/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(MW,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForObjectDetection"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(EW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrForObjectDetection"),c(LW,"href","/docs/transformers/pr_17639/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y6,"id","transformers.AutoModelForImageSegmentation"),c(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y6,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17639/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForSemanticSegmentation"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(SW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(IW,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(NW,"href","/docs/transformers/pr_17639/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(qW,"href","/docs/transformers/pr_17639/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForInstanceSegmentation"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17639/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.TFAutoModel"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(VW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertModel"),c(QW,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.TFBartModel"),c(HW,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertModel"),c(UW,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(JW,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(YW,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertModel"),c(KW,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.TFCLIPModel"),c(ZW,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertModel"),c(eQ,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.TFConvNextModel"),c(oQ,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLModel"),c(rQ,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(tQ,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaModel"),c(aQ,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(nQ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(sQ,"href","/docs/transformers/pr_17639/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(lQ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraModel"),c(iQ,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(dQ,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelModel"),c(cQ,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(fQ,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2Model"),c(mQ,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJModel"),c(gQ,"href","/docs/transformers/pr_17639/en/model_doc/hubert#transformers.TFHubertModel"),c(hQ,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(pQ,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.TFLEDModel"),c(_Q,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerModel"),c(uQ,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.TFLxmertModel"),c(bQ,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.TFMarianModel"),c(vQ,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.TFMBartModel"),c(FQ,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(TQ,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetModel"),c(MQ,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.TFMT5Model"),c(EQ,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(CQ,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.TFOPTModel"),c(wQ,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.TFPegasusModel"),c(AQ,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertModel"),c(LQ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaModel"),c(yQ,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerModel"),c(xQ,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c($Q,"href","/docs/transformers/pr_17639/en/model_doc/swin#transformers.TFSwinModel"),c(kQ,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.TFT5Model"),c(SQ,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasModel"),c(RQ,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(PQ,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.TFViTModel"),c(BQ,"href","/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(IQ,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(NQ,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMModel"),c(qQ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(jQ,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.TFAutoModelForPreTraining"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(XQ,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForPreTraining"),c(WQ,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HQ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(JQ,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(KQ,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(eH,"href","/docs/transformers/pr_17639/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(oH,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(rH,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tH,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(aH,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nH,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lH,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(iH,"href","/docs/transformers/pr_17639/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(dH,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(cH,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(fH,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForCausalLM"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(_H,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(uH,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bH,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(vH,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(FH,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TH,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(MH,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(EH,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(CH,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(wH,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(AH,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LH,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForImageClassification"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(yH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17639/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(SH,"href","/docs/transformers/pr_17639/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(RH,"href","/docs/transformers/pr_17639/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(PH,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n9,"id","transformers.TFAutoModelForMaskedLM"),c(n9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n9,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(BH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(DH,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(OH,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(VH,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(XH,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(zH,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(WH,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(QH,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(HH,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(UH,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(JH,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(YH,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(KH,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(eU,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(oU,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(rU,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tU,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(y9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(aU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iU,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(dU,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(cU,"href","/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(fU,"href","/docs/transformers/pr_17639/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.TFMarianMTModel"),c(gU,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G9,"id","transformers.TFAutoModelForSequenceClassification"),c(G9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G9,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17639/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c($U,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(IU,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(NU,"href","/docs/transformers/pr_17639/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(qU,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(OU,"href","/docs/transformers/pr_17639/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(VU,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(XU,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(zU,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForMultipleChoice"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(WU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HU,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UU,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(eJ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(oJ,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(rJ,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(tJ,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(aJ,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(nJ,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(iJ,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(dJ,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(cJ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(fJ,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(_J,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17639/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTokenClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c($J,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(SJ,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(PJ,"href","/docs/transformers/pr_17639/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(DJ,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(GJ,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(OJ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(VJ,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForQuestionAnswering"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17639/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17639/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17639/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17639/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17639/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(rY,"href","/docs/transformers/pr_17639/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17639/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17639/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17639/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_17639/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17639/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(fY,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17639/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForVision2Seq"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(uY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17639/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.FlaxAutoModel"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(TY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertModel"),c(wY,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartModel"),c(AY,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.FlaxBeitModel"),c(LY,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertModel"),c(yY,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(xY,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c($Y,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(kY,"href","/docs/transformers/pr_17639/en/model_doc/clip#transformers.FlaxCLIPModel"),c(SY,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(RY,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraModel"),c(PY,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(BY,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(IY,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NY,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.FlaxMarianModel"),c(qY,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartModel"),c(jY,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.FlaxMT5Model"),c(DY,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.FlaxOPTModel"),c(GY,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(OY,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VY,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(XY,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.FlaxT5Model"),c(zY,"href","/docs/transformers/pr_17639/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(WY,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.FlaxViTModel"),c(QY,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(HY,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(UY,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForCausalLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(eK,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(oK,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(rK,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(tK,"href","/docs/transformers/pr_17639/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aK,"href","/docs/transformers/pr_17639/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nK,"href","/docs/transformers/pr_17639/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sK,"href","/docs/transformers/pr_17639/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(lK,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(iK,"href","/docs/transformers/pr_17639/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModelForPreTraining"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(dK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gK,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(pK,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(_K,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(uK,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(FK,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(TK,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17639/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(EK,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.FlaxAutoModelForMaskedLM"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(CK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yK,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($K,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kK,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(SK,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(RK,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(BK,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(IK,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GK,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(OK,"href","/docs/transformers/pr_17639/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(VK,"href","/docs/transformers/pr_17639/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(XK,"href","/docs/transformers/pr_17639/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(zK,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WK,"href","/docs/transformers/pr_17639/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QK,"href","/docs/transformers/pr_17639/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(HK,"href","/docs/transformers/pr_17639/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(UK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ZK,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(eZ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(oZ,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(rZ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(tZ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(aZ,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(nZ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(sZ,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(lZ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17639/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17639/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForTokenClassification"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(yZ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(xZ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c($Z,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(kZ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17639/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(IZ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(NZ,"href","/docs/transformers/pr_17639/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qZ,"href","/docs/transformers/pr_17639/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(jZ,"href","/docs/transformers/pr_17639/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(DZ,"href","/docs/transformers/pr_17639/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(GZ,"href","/docs/transformers/pr_17639/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(OZ,"href","/docs/transformers/pr_17639/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17639/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForImageClassification"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(QZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_17639/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(YZ,"href","/docs/transformers/pr_17639/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.FlaxAutoModelForVision2Seq"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(KZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_17639/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_17639/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,Vw),e(rt,uf),b(f,Ge,u),b(f,We,u),e(We,pi),e(We,Ln),e(Ln,Xw),e(We,yn),e(We,xn),e(xn,zw),e(We,_i),e(We,$n),e($n,Ww),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,mk),e(Ae,bi),e(bi,gk),e(Ae,hk),b(f,Eo,u),b(f,wa,u),e(wa,pk),e(wa,vf),e(vf,_k),e(wa,IVe),b(f,wje,u),b(f,vi,u),e(vi,Ff),e(Ff,Hoe),M(Qw,Hoe,null),e(vi,NVe),e(vi,Uoe),e(Uoe,qVe),b(f,Aje,u),b(f,kn,u),e(kn,jVe),e(kn,Joe),e(Joe,DVe),e(kn,GVe),e(kn,Yoe),e(Yoe,OVe),e(kn,VVe),b(f,Lje,u),M(Hw,f,u),b(f,yje,u),b(f,uk,u),e(uk,XVe),b(f,xje,u),M(Tf,f,u),b(f,$je,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Koe),M(Uw,Koe,null),e(Fi,zVe),e(Fi,Zoe),e(Zoe,WVe),b(f,kje,u),b(f,Co,u),M(Jw,Co,null),e(Co,QVe),e(Co,Yw),e(Yw,HVe),e(Yw,bk),e(bk,UVe),e(Yw,JVe),e(Co,YVe),e(Co,Kw),e(Kw,KVe),e(Kw,ere),e(ere,ZVe),e(Kw,eXe),e(Co,oXe),e(Co,Er),M(Zw,Er,null),e(Er,rXe),e(Er,ore),e(ore,tXe),e(Er,aXe),e(Er,Ti),e(Ti,nXe),e(Ti,rre),e(rre,sXe),e(Ti,lXe),e(Ti,tre),e(tre,iXe),e(Ti,dXe),e(Er,cXe),e(Er,A),e(A,Ef),e(Ef,are),e(are,fXe),e(Ef,mXe),e(Ef,vk),e(vk,gXe),e(Ef,hXe),e(A,pXe),e(A,Cf),e(Cf,nre),e(nre,_Xe),e(Cf,uXe),e(Cf,Fk),e(Fk,bXe),e(Cf,vXe),e(A,FXe),e(A,wf),e(wf,sre),e(sre,TXe),e(wf,MXe),e(wf,Tk),e(Tk,EXe),e(wf,CXe),e(A,wXe),e(A,Af),e(Af,lre),e(lre,AXe),e(Af,LXe),e(Af,Mk),e(Mk,yXe),e(Af,xXe),e(A,$Xe),e(A,Lf),e(Lf,ire),e(ire,kXe),e(Lf,SXe),e(Lf,Ek),e(Ek,RXe),e(Lf,PXe),e(A,BXe),e(A,yf),e(yf,dre),e(dre,IXe),e(yf,NXe),e(yf,Ck),e(Ck,qXe),e(yf,jXe),e(A,DXe),e(A,xf),e(xf,cre),e(cre,GXe),e(xf,OXe),e(xf,wk),e(wk,VXe),e(xf,XXe),e(A,zXe),e(A,$f),e($f,fre),e(fre,WXe),e($f,QXe),e($f,Ak),e(Ak,HXe),e($f,UXe),e(A,JXe),e(A,kf),e(kf,mre),e(mre,YXe),e(kf,KXe),e(kf,Lk),e(Lk,ZXe),e(kf,eze),e(A,oze),e(A,Sf),e(Sf,gre),e(gre,rze),e(Sf,tze),e(Sf,yk),e(yk,aze),e(Sf,nze),e(A,sze),e(A,Rf),e(Rf,hre),e(hre,lze),e(Rf,ize),e(Rf,xk),e(xk,dze),e(Rf,cze),e(A,fze),e(A,Pf),e(Pf,pre),e(pre,mze),e(Pf,gze),e(Pf,$k),e($k,hze),e(Pf,pze),e(A,_ze),e(A,Bf),e(Bf,_re),e(_re,uze),e(Bf,bze),e(Bf,kk),e(kk,vze),e(Bf,Fze),e(A,Tze),e(A,If),e(If,ure),e(ure,Mze),e(If,Eze),e(If,Sk),e(Sk,Cze),e(If,wze),e(A,Aze),e(A,Nf),e(Nf,bre),e(bre,Lze),e(Nf,yze),e(Nf,Rk),e(Rk,xze),e(Nf,$ze),e(A,kze),e(A,qf),e(qf,vre),e(vre,Sze),e(qf,Rze),e(qf,Pk),e(Pk,Pze),e(qf,Bze),e(A,Ize),e(A,jf),e(jf,Fre),e(Fre,Nze),e(jf,qze),e(jf,Bk),e(Bk,jze),e(jf,Dze),e(A,Gze),e(A,Df),e(Df,Tre),e(Tre,Oze),e(Df,Vze),e(Df,Ik),e(Ik,Xze),e(Df,zze),e(A,Wze),e(A,Gf),e(Gf,Mre),e(Mre,Qze),e(Gf,Hze),e(Gf,Nk),e(Nk,Uze),e(Gf,Jze),e(A,Yze),e(A,Of),e(Of,Ere),e(Ere,Kze),e(Of,Zze),e(Of,qk),e(qk,eWe),e(Of,oWe),e(A,rWe),e(A,Vf),e(Vf,Cre),e(Cre,tWe),e(Vf,aWe),e(Vf,jk),e(jk,nWe),e(Vf,sWe),e(A,lWe),e(A,Xf),e(Xf,wre),e(wre,iWe),e(Xf,dWe),e(Xf,Dk),e(Dk,cWe),e(Xf,fWe),e(A,mWe),e(A,zf),e(zf,Are),e(Are,gWe),e(zf,hWe),e(zf,Gk),e(Gk,pWe),e(zf,_We),e(A,uWe),e(A,Wf),e(Wf,Lre),e(Lre,bWe),e(Wf,vWe),e(Wf,Ok),e(Ok,FWe),e(Wf,TWe),e(A,MWe),e(A,Qf),e(Qf,yre),e(yre,EWe),e(Qf,CWe),e(Qf,Vk),e(Vk,wWe),e(Qf,AWe),e(A,LWe),e(A,Hf),e(Hf,xre),e(xre,yWe),e(Hf,xWe),e(Hf,Xk),e(Xk,$We),e(Hf,kWe),e(A,SWe),e(A,Uf),e(Uf,$re),e($re,RWe),e(Uf,PWe),e(Uf,zk),e(zk,BWe),e(Uf,IWe),e(A,NWe),e(A,Jf),e(Jf,kre),e(kre,qWe),e(Jf,jWe),e(Jf,Wk),e(Wk,DWe),e(Jf,GWe),e(A,OWe),e(A,Yf),e(Yf,Sre),e(Sre,VWe),e(Yf,XWe),e(Yf,Qk),e(Qk,zWe),e(Yf,WWe),e(A,QWe),e(A,Kf),e(Kf,Rre),e(Rre,HWe),e(Kf,UWe),e(Kf,Hk),e(Hk,JWe),e(Kf,YWe),e(A,KWe),e(A,Zf),e(Zf,Pre),e(Pre,ZWe),e(Zf,eQe),e(Zf,Uk),e(Uk,oQe),e(Zf,rQe),e(A,tQe),e(A,em),e(em,Bre),e(Bre,aQe),e(em,nQe),e(em,Jk),e(Jk,sQe),e(em,lQe),e(A,iQe),e(A,om),e(om,Ire),e(Ire,dQe),e(om,cQe),e(om,Yk),e(Yk,fQe),e(om,mQe),e(A,gQe),e(A,rm),e(rm,Nre),e(Nre,hQe),e(rm,pQe),e(rm,Kk),e(Kk,_Qe),e(rm,uQe),e(A,bQe),e(A,tm),e(tm,qre),e(qre,vQe),e(tm,FQe),e(tm,Zk),e(Zk,TQe),e(tm,MQe),e(A,EQe),e(A,am),e(am,jre),e(jre,CQe),e(am,wQe),e(am,eS),e(eS,AQe),e(am,LQe),e(A,yQe),e(A,nm),e(nm,Dre),e(Dre,xQe),e(nm,$Qe),e(nm,oS),e(oS,kQe),e(nm,SQe),e(A,RQe),e(A,sm),e(sm,Gre),e(Gre,PQe),e(sm,BQe),e(sm,rS),e(rS,IQe),e(sm,NQe),e(A,qQe),e(A,lm),e(lm,Ore),e(Ore,jQe),e(lm,DQe),e(lm,tS),e(tS,GQe),e(lm,OQe),e(A,VQe),e(A,im),e(im,Vre),e(Vre,XQe),e(im,zQe),e(im,aS),e(aS,WQe),e(im,QQe),e(A,HQe),e(A,dm),e(dm,Xre),e(Xre,UQe),e(dm,JQe),e(dm,nS),e(nS,YQe),e(dm,KQe),e(A,ZQe),e(A,cm),e(cm,zre),e(zre,eHe),e(cm,oHe),e(cm,sS),e(sS,rHe),e(cm,tHe),e(A,aHe),e(A,fm),e(fm,Wre),e(Wre,nHe),e(fm,sHe),e(fm,lS),e(lS,lHe),e(fm,iHe),e(A,dHe),e(A,mm),e(mm,Qre),e(Qre,cHe),e(mm,fHe),e(mm,iS),e(iS,mHe),e(mm,gHe),e(A,hHe),e(A,gm),e(gm,Hre),e(Hre,pHe),e(gm,_He),e(gm,dS),e(dS,uHe),e(gm,bHe),e(A,vHe),e(A,hm),e(hm,Ure),e(Ure,FHe),e(hm,THe),e(hm,cS),e(cS,MHe),e(hm,EHe),e(A,CHe),e(A,pm),e(pm,Jre),e(Jre,wHe),e(pm,AHe),e(pm,fS),e(fS,LHe),e(pm,yHe),e(A,xHe),e(A,_m),e(_m,Yre),e(Yre,$He),e(_m,kHe),e(_m,mS),e(mS,SHe),e(_m,RHe),e(A,PHe),e(A,um),e(um,Kre),e(Kre,BHe),e(um,IHe),e(um,gS),e(gS,NHe),e(um,qHe),e(A,jHe),e(A,bm),e(bm,Zre),e(Zre,DHe),e(bm,GHe),e(bm,hS),e(hS,OHe),e(bm,VHe),e(A,XHe),e(A,vm),e(vm,ete),e(ete,zHe),e(vm,WHe),e(vm,pS),e(pS,QHe),e(vm,HHe),e(A,UHe),e(A,Fm),e(Fm,ote),e(ote,JHe),e(Fm,YHe),e(Fm,_S),e(_S,KHe),e(Fm,ZHe),e(A,eUe),e(A,Tm),e(Tm,rte),e(rte,oUe),e(Tm,rUe),e(Tm,uS),e(uS,tUe),e(Tm,aUe),e(A,nUe),e(A,Mm),e(Mm,tte),e(tte,sUe),e(Mm,lUe),e(Mm,bS),e(bS,iUe),e(Mm,dUe),e(A,cUe),e(A,Em),e(Em,ate),e(ate,fUe),e(Em,mUe),e(Em,vS),e(vS,gUe),e(Em,hUe),e(A,pUe),e(A,Cm),e(Cm,nte),e(nte,_Ue),e(Cm,uUe),e(Cm,FS),e(FS,bUe),e(Cm,vUe),e(A,FUe),e(A,wm),e(wm,ste),e(ste,TUe),e(wm,MUe),e(wm,TS),e(TS,EUe),e(wm,CUe),e(A,wUe),e(A,Am),e(Am,lte),e(lte,AUe),e(Am,LUe),e(Am,MS),e(MS,yUe),e(Am,xUe),e(A,$Ue),e(A,Lm),e(Lm,ite),e(ite,kUe),e(Lm,SUe),e(Lm,ES),e(ES,RUe),e(Lm,PUe),e(A,BUe),e(A,ym),e(ym,dte),e(dte,IUe),e(ym,NUe),e(ym,CS),e(CS,qUe),e(ym,jUe),e(A,DUe),e(A,xm),e(xm,cte),e(cte,GUe),e(xm,OUe),e(xm,wS),e(wS,VUe),e(xm,XUe),e(A,zUe),e(A,$m),e($m,fte),e(fte,WUe),e($m,QUe),e($m,AS),e(AS,HUe),e($m,UUe),e(A,JUe),e(A,km),e(km,mte),e(mte,YUe),e(km,KUe),e(km,LS),e(LS,ZUe),e(km,eJe),e(A,oJe),e(A,Sm),e(Sm,gte),e(gte,rJe),e(Sm,tJe),e(Sm,yS),e(yS,aJe),e(Sm,nJe),e(A,sJe),e(A,Rm),e(Rm,hte),e(hte,lJe),e(Rm,iJe),e(Rm,xS),e(xS,dJe),e(Rm,cJe),e(A,fJe),e(A,Pm),e(Pm,pte),e(pte,mJe),e(Pm,gJe),e(Pm,$S),e($S,hJe),e(Pm,pJe),e(A,_Je),e(A,Bm),e(Bm,_te),e(_te,uJe),e(Bm,bJe),e(Bm,kS),e(kS,vJe),e(Bm,FJe),e(A,TJe),e(A,Im),e(Im,ute),e(ute,MJe),e(Im,EJe),e(Im,SS),e(SS,CJe),e(Im,wJe),e(A,AJe),e(A,Nm),e(Nm,bte),e(bte,LJe),e(Nm,yJe),e(Nm,RS),e(RS,xJe),e(Nm,$Je),e(A,kJe),e(A,qm),e(qm,vte),e(vte,SJe),e(qm,RJe),e(qm,PS),e(PS,PJe),e(qm,BJe),e(A,IJe),e(A,jm),e(jm,Fte),e(Fte,NJe),e(jm,qJe),e(jm,BS),e(BS,jJe),e(jm,DJe),e(A,GJe),e(A,Dm),e(Dm,Tte),e(Tte,OJe),e(Dm,VJe),e(Dm,IS),e(IS,XJe),e(Dm,zJe),e(A,WJe),e(A,Gm),e(Gm,Mte),e(Mte,QJe),e(Gm,HJe),e(Gm,NS),e(NS,UJe),e(Gm,JJe),e(A,YJe),e(A,Om),e(Om,Ete),e(Ete,KJe),e(Om,ZJe),e(Om,qS),e(qS,eYe),e(Om,oYe),e(A,rYe),e(A,Vm),e(Vm,Cte),e(Cte,tYe),e(Vm,aYe),e(Vm,jS),e(jS,nYe),e(Vm,sYe),e(A,lYe),e(A,Xm),e(Xm,wte),e(wte,iYe),e(Xm,dYe),e(Xm,DS),e(DS,cYe),e(Xm,fYe),e(A,mYe),e(A,zm),e(zm,Ate),e(Ate,gYe),e(zm,hYe),e(zm,GS),e(GS,pYe),e(zm,_Ye),e(A,uYe),e(A,Wm),e(Wm,Lte),e(Lte,bYe),e(Wm,vYe),e(Wm,OS),e(OS,FYe),e(Wm,TYe),e(A,MYe),e(A,Qm),e(Qm,yte),e(yte,EYe),e(Qm,CYe),e(Qm,VS),e(VS,wYe),e(Qm,AYe),e(A,LYe),e(A,Hm),e(Hm,xte),e(xte,yYe),e(Hm,xYe),e(Hm,XS),e(XS,$Ye),e(Hm,kYe),e(A,SYe),e(A,Um),e(Um,$te),e($te,RYe),e(Um,PYe),e(Um,zS),e(zS,BYe),e(Um,IYe),e(A,NYe),e(A,Jm),e(Jm,kte),e(kte,qYe),e(Jm,jYe),e(Jm,WS),e(WS,DYe),e(Jm,GYe),e(A,OYe),e(A,Ym),e(Ym,Ste),e(Ste,VYe),e(Ym,XYe),e(Ym,QS),e(QS,zYe),e(Ym,WYe),e(A,QYe),e(A,Km),e(Km,Rte),e(Rte,HYe),e(Km,UYe),e(Km,HS),e(HS,JYe),e(Km,YYe),e(A,KYe),e(A,Zm),e(Zm,Pte),e(Pte,ZYe),e(Zm,eKe),e(Zm,US),e(US,oKe),e(Zm,rKe),e(A,tKe),e(A,eg),e(eg,Bte),e(Bte,aKe),e(eg,nKe),e(eg,JS),e(JS,sKe),e(eg,lKe),e(A,iKe),e(A,og),e(og,Ite),e(Ite,dKe),e(og,cKe),e(og,YS),e(YS,fKe),e(og,mKe),e(A,gKe),e(A,rg),e(rg,Nte),e(Nte,hKe),e(rg,pKe),e(rg,KS),e(KS,_Ke),e(rg,uKe),e(A,bKe),e(A,tg),e(tg,qte),e(qte,vKe),e(tg,FKe),e(tg,ZS),e(ZS,TKe),e(tg,MKe),e(A,EKe),e(A,ag),e(ag,jte),e(jte,CKe),e(ag,wKe),e(ag,eR),e(eR,AKe),e(ag,LKe),e(A,yKe),e(A,ng),e(ng,Dte),e(Dte,xKe),e(ng,$Ke),e(ng,oR),e(oR,kKe),e(ng,SKe),e(A,RKe),e(A,sg),e(sg,Gte),e(Gte,PKe),e(sg,BKe),e(sg,rR),e(rR,IKe),e(sg,NKe),e(A,qKe),e(A,lg),e(lg,Ote),e(Ote,jKe),e(lg,DKe),e(lg,tR),e(tR,GKe),e(lg,OKe),e(A,VKe),e(A,ig),e(ig,Vte),e(Vte,XKe),e(ig,zKe),e(ig,aR),e(aR,WKe),e(ig,QKe),e(A,HKe),e(A,dg),e(dg,Xte),e(Xte,UKe),e(dg,JKe),e(dg,nR),e(nR,YKe),e(dg,KKe),e(A,ZKe),e(A,cg),e(cg,zte),e(zte,eZe),e(cg,oZe),e(cg,sR),e(sR,rZe),e(cg,tZe),e(A,aZe),e(A,fg),e(fg,Wte),e(Wte,nZe),e(fg,sZe),e(fg,lR),e(lR,lZe),e(fg,iZe),e(A,dZe),e(A,mg),e(mg,Qte),e(Qte,cZe),e(mg,fZe),e(mg,iR),e(iR,mZe),e(mg,gZe),e(A,hZe),e(A,gg),e(gg,Hte),e(Hte,pZe),e(gg,_Ze),e(gg,dR),e(dR,uZe),e(gg,bZe),e(A,vZe),e(A,hg),e(hg,Ute),e(Ute,FZe),e(hg,TZe),e(hg,cR),e(cR,MZe),e(hg,EZe),e(A,CZe),e(A,pg),e(pg,Jte),e(Jte,wZe),e(pg,AZe),e(pg,fR),e(fR,LZe),e(pg,yZe),e(A,xZe),e(A,_g),e(_g,Yte),e(Yte,$Ze),e(_g,kZe),e(_g,mR),e(mR,SZe),e(_g,RZe),e(A,PZe),e(A,ug),e(ug,Kte),e(Kte,BZe),e(ug,IZe),e(ug,gR),e(gR,NZe),e(ug,qZe),e(A,jZe),e(A,bg),e(bg,Zte),e(Zte,DZe),e(bg,GZe),e(bg,hR),e(hR,OZe),e(bg,VZe),e(A,XZe),e(A,vg),e(vg,eae),e(eae,zZe),e(vg,WZe),e(vg,pR),e(pR,QZe),e(vg,HZe),e(A,UZe),e(A,Fg),e(Fg,oae),e(oae,JZe),e(Fg,YZe),e(Fg,_R),e(_R,KZe),e(Fg,ZZe),e(A,eeo),e(A,Tg),e(Tg,rae),e(rae,oeo),e(Tg,reo),e(Tg,uR),e(uR,teo),e(Tg,aeo),e(A,neo),e(A,Mg),e(Mg,tae),e(tae,seo),e(Mg,leo),e(Mg,bR),e(bR,ieo),e(Mg,deo),e(A,ceo),e(A,Eg),e(Eg,aae),e(aae,feo),e(Eg,meo),e(Eg,vR),e(vR,geo),e(Eg,heo),e(A,peo),e(A,Cg),e(Cg,nae),e(nae,_eo),e(Cg,ueo),e(Cg,FR),e(FR,beo),e(Cg,veo),e(A,Feo),e(A,wg),e(wg,sae),e(sae,Teo),e(wg,Meo),e(wg,TR),e(TR,Eeo),e(wg,Ceo),e(A,weo),e(A,Ag),e(Ag,lae),e(lae,Aeo),e(Ag,Leo),e(Ag,MR),e(MR,yeo),e(Ag,xeo),e(Er,$eo),M(Lg,Er,null),e(Co,keo),e(Co,yg),M(eA,yg,null),e(yg,Seo),e(yg,iae),e(iae,Reo),b(f,Sje,u),b(f,Mi,u),e(Mi,xg),e(xg,dae),M(oA,dae,null),e(Mi,Peo),e(Mi,cae),e(cae,Beo),b(f,Rje,u),b(f,wo,u),M(rA,wo,null),e(wo,Ieo),e(wo,tA),e(tA,Neo),e(tA,ER),e(ER,qeo),e(tA,jeo),e(wo,Deo),e(wo,aA),e(aA,Geo),e(aA,fae),e(fae,Oeo),e(aA,Veo),e(wo,Xeo),e(wo,Cr),M(nA,Cr,null),e(Cr,zeo),e(Cr,mae),e(mae,Weo),e(Cr,Qeo),e(Cr,Aa),e(Aa,Heo),e(Aa,gae),e(gae,Ueo),e(Aa,Jeo),e(Aa,hae),e(hae,Yeo),e(Aa,Keo),e(Aa,pae),e(pae,Zeo),e(Aa,eoo),e(Cr,ooo),e(Cr,k),e(k,Sn),e(Sn,_ae),e(_ae,roo),e(Sn,too),e(Sn,CR),e(CR,aoo),e(Sn,noo),e(Sn,wR),e(wR,soo),e(Sn,loo),e(k,ioo),e(k,Rn),e(Rn,uae),e(uae,doo),e(Rn,coo),e(Rn,AR),e(AR,foo),e(Rn,moo),e(Rn,LR),e(LR,goo),e(Rn,hoo),e(k,poo),e(k,Pn),e(Pn,bae),e(bae,_oo),e(Pn,uoo),e(Pn,yR),e(yR,boo),e(Pn,voo),e(Pn,xR),e(xR,Foo),e(Pn,Too),e(k,Moo),e(k,$g),e($g,vae),e(vae,Eoo),e($g,Coo),e($g,$R),e($R,woo),e($g,Aoo),e(k,Loo),e(k,Bn),e(Bn,Fae),e(Fae,yoo),e(Bn,xoo),e(Bn,kR),e(kR,$oo),e(Bn,koo),e(Bn,SR),e(SR,Soo),e(Bn,Roo),e(k,Poo),e(k,kg),e(kg,Tae),e(Tae,Boo),e(kg,Ioo),e(kg,RR),e(RR,Noo),e(kg,qoo),e(k,joo),e(k,Sg),e(Sg,Mae),e(Mae,Doo),e(Sg,Goo),e(Sg,PR),e(PR,Ooo),e(Sg,Voo),e(k,Xoo),e(k,Rg),e(Rg,Eae),e(Eae,zoo),e(Rg,Woo),e(Rg,BR),e(BR,Qoo),e(Rg,Hoo),e(k,Uoo),e(k,In),e(In,Cae),e(Cae,Joo),e(In,Yoo),e(In,IR),e(IR,Koo),e(In,Zoo),e(In,NR),e(NR,ero),e(In,oro),e(k,rro),e(k,Nn),e(Nn,wae),e(wae,tro),e(Nn,aro),e(Nn,qR),e(qR,nro),e(Nn,sro),e(Nn,jR),e(jR,lro),e(Nn,iro),e(k,dro),e(k,qn),e(qn,Aae),e(Aae,cro),e(qn,fro),e(qn,DR),e(DR,mro),e(qn,gro),e(qn,GR),e(GR,hro),e(qn,pro),e(k,_ro),e(k,Pg),e(Pg,Lae),e(Lae,uro),e(Pg,bro),e(Pg,OR),e(OR,vro),e(Pg,Fro),e(k,Tro),e(k,Bg),e(Bg,yae),e(yae,Mro),e(Bg,Ero),e(Bg,VR),e(VR,Cro),e(Bg,wro),e(k,Aro),e(k,Ig),e(Ig,xae),e(xae,Lro),e(Ig,yro),e(Ig,XR),e(XR,xro),e(Ig,$ro),e(k,kro),e(k,jn),e(jn,$ae),e($ae,Sro),e(jn,Rro),e(jn,zR),e(zR,Pro),e(jn,Bro),e(jn,WR),e(WR,Iro),e(jn,Nro),e(k,qro),e(k,Ng),e(Ng,kae),e(kae,jro),e(Ng,Dro),e(Ng,QR),e(QR,Gro),e(Ng,Oro),e(k,Vro),e(k,Dn),e(Dn,Sae),e(Sae,Xro),e(Dn,zro),e(Dn,HR),e(HR,Wro),e(Dn,Qro),e(Dn,UR),e(UR,Hro),e(Dn,Uro),e(k,Jro),e(k,Gn),e(Gn,Rae),e(Rae,Yro),e(Gn,Kro),e(Gn,JR),e(JR,Zro),e(Gn,eto),e(Gn,YR),e(YR,oto),e(Gn,rto),e(k,tto),e(k,On),e(On,Pae),e(Pae,ato),e(On,nto),e(On,KR),e(KR,sto),e(On,lto),e(On,ZR),e(ZR,ito),e(On,dto),e(k,cto),e(k,qg),e(qg,Bae),e(Bae,fto),e(qg,mto),e(qg,eP),e(eP,gto),e(qg,hto),e(k,pto),e(k,Vn),e(Vn,Iae),e(Iae,_to),e(Vn,uto),e(Vn,oP),e(oP,bto),e(Vn,vto),e(Vn,rP),e(rP,Fto),e(Vn,Tto),e(k,Mto),e(k,Xn),e(Xn,Nae),e(Nae,Eto),e(Xn,Cto),e(Xn,tP),e(tP,wto),e(Xn,Ato),e(Xn,aP),e(aP,Lto),e(Xn,yto),e(k,xto),e(k,zn),e(zn,qae),e(qae,$to),e(zn,kto),e(zn,nP),e(nP,Sto),e(zn,Rto),e(zn,sP),e(sP,Pto),e(zn,Bto),e(k,Ito),e(k,Wn),e(Wn,jae),e(jae,Nto),e(Wn,qto),e(Wn,lP),e(lP,jto),e(Wn,Dto),e(Wn,iP),e(iP,Gto),e(Wn,Oto),e(k,Vto),e(k,Qn),e(Qn,Dae),e(Dae,Xto),e(Qn,zto),e(Qn,dP),e(dP,Wto),e(Qn,Qto),e(Qn,cP),e(cP,Hto),e(Qn,Uto),e(k,Jto),e(k,Hn),e(Hn,Gae),e(Gae,Yto),e(Hn,Kto),e(Hn,fP),e(fP,Zto),e(Hn,eao),e(Hn,mP),e(mP,oao),e(Hn,rao),e(k,tao),e(k,jg),e(jg,Oae),e(Oae,aao),e(jg,nao),e(jg,gP),e(gP,sao),e(jg,lao),e(k,iao),e(k,Un),e(Un,Vae),e(Vae,dao),e(Un,cao),e(Un,hP),e(hP,fao),e(Un,mao),e(Un,pP),e(pP,gao),e(Un,hao),e(k,pao),e(k,Dg),e(Dg,Xae),e(Xae,_ao),e(Dg,uao),e(Dg,_P),e(_P,bao),e(Dg,vao),e(k,Fao),e(k,Jn),e(Jn,zae),e(zae,Tao),e(Jn,Mao),e(Jn,uP),e(uP,Eao),e(Jn,Cao),e(Jn,bP),e(bP,wao),e(Jn,Aao),e(k,Lao),e(k,Yn),e(Yn,Wae),e(Wae,yao),e(Yn,xao),e(Yn,vP),e(vP,$ao),e(Yn,kao),e(Yn,FP),e(FP,Sao),e(Yn,Rao),e(k,Pao),e(k,Kn),e(Kn,Qae),e(Qae,Bao),e(Kn,Iao),e(Kn,TP),e(TP,Nao),e(Kn,qao),e(Kn,MP),e(MP,jao),e(Kn,Dao),e(k,Gao),e(k,Gg),e(Gg,Hae),e(Hae,Oao),e(Gg,Vao),e(Gg,EP),e(EP,Xao),e(Gg,zao),e(k,Wao),e(k,Zn),e(Zn,Uae),e(Uae,Qao),e(Zn,Hao),e(Zn,CP),e(CP,Uao),e(Zn,Jao),e(Zn,wP),e(wP,Yao),e(Zn,Kao),e(k,Zao),e(k,es),e(es,Jae),e(Jae,eno),e(es,ono),e(es,AP),e(AP,rno),e(es,tno),e(es,LP),e(LP,ano),e(es,nno),e(k,sno),e(k,Og),e(Og,Yae),e(Yae,lno),e(Og,ino),e(Og,yP),e(yP,dno),e(Og,cno),e(k,fno),e(k,os),e(os,Kae),e(Kae,mno),e(os,gno),e(os,xP),e(xP,hno),e(os,pno),e(os,$P),e($P,_no),e(os,uno),e(k,bno),e(k,rs),e(rs,Zae),e(Zae,vno),e(rs,Fno),e(rs,kP),e(kP,Tno),e(rs,Mno),e(rs,SP),e(SP,Eno),e(rs,Cno),e(k,wno),e(k,ts),e(ts,ene),e(ene,Ano),e(ts,Lno),e(ts,RP),e(RP,yno),e(ts,xno),e(ts,PP),e(PP,$no),e(ts,kno),e(k,Sno),e(k,as),e(as,one),e(one,Rno),e(as,Pno),e(as,BP),e(BP,Bno),e(as,Ino),e(as,IP),e(IP,Nno),e(as,qno),e(k,jno),e(k,ns),e(ns,rne),e(rne,Dno),e(ns,Gno),e(ns,NP),e(NP,Ono),e(ns,Vno),e(ns,qP),e(qP,Xno),e(ns,zno),e(k,Wno),e(k,ss),e(ss,tne),e(tne,Qno),e(ss,Hno),e(ss,jP),e(jP,Uno),e(ss,Jno),e(ss,DP),e(DP,Yno),e(ss,Kno),e(k,Zno),e(k,ls),e(ls,ane),e(ane,eso),e(ls,oso),e(ls,GP),e(GP,rso),e(ls,tso),e(ls,OP),e(OP,aso),e(ls,nso),e(k,sso),e(k,Vg),e(Vg,nne),e(nne,lso),e(Vg,iso),e(Vg,VP),e(VP,dso),e(Vg,cso),e(k,fso),e(k,is),e(is,sne),e(sne,mso),e(is,gso),e(is,XP),e(XP,hso),e(is,pso),e(is,zP),e(zP,_so),e(is,uso),e(k,bso),e(k,Xg),e(Xg,lne),e(lne,vso),e(Xg,Fso),e(Xg,WP),e(WP,Tso),e(Xg,Mso),e(k,Eso),e(k,zg),e(zg,ine),e(ine,Cso),e(zg,wso),e(zg,QP),e(QP,Aso),e(zg,Lso),e(k,yso),e(k,ds),e(ds,dne),e(dne,xso),e(ds,$so),e(ds,HP),e(HP,kso),e(ds,Sso),e(ds,UP),e(UP,Rso),e(ds,Pso),e(k,Bso),e(k,cs),e(cs,cne),e(cne,Iso),e(cs,Nso),e(cs,JP),e(JP,qso),e(cs,jso),e(cs,YP),e(YP,Dso),e(cs,Gso),e(k,Oso),e(k,fs),e(fs,fne),e(fne,Vso),e(fs,Xso),e(fs,KP),e(KP,zso),e(fs,Wso),e(fs,ZP),e(ZP,Qso),e(fs,Hso),e(k,Uso),e(k,Wg),e(Wg,mne),e(mne,Jso),e(Wg,Yso),e(Wg,eB),e(eB,Kso),e(Wg,Zso),e(k,elo),e(k,ms),e(ms,gne),e(gne,olo),e(ms,rlo),e(ms,oB),e(oB,tlo),e(ms,alo),e(ms,rB),e(rB,nlo),e(ms,slo),e(k,llo),e(k,gs),e(gs,hne),e(hne,ilo),e(gs,dlo),e(gs,tB),e(tB,clo),e(gs,flo),e(gs,aB),e(aB,mlo),e(gs,glo),e(k,hlo),e(k,hs),e(hs,pne),e(pne,plo),e(hs,_lo),e(hs,nB),e(nB,ulo),e(hs,blo),e(hs,sB),e(sB,vlo),e(hs,Flo),e(k,Tlo),e(k,ps),e(ps,_ne),e(_ne,Mlo),e(ps,Elo),e(ps,lB),e(lB,Clo),e(ps,wlo),e(ps,iB),e(iB,Alo),e(ps,Llo),e(k,ylo),e(k,_s),e(_s,une),e(une,xlo),e(_s,$lo),e(_s,dB),e(dB,klo),e(_s,Slo),e(_s,cB),e(cB,Rlo),e(_s,Plo),e(k,Blo),e(k,Qg),e(Qg,bne),e(bne,Ilo),e(Qg,Nlo),e(Qg,fB),e(fB,qlo),e(Qg,jlo),e(k,Dlo),e(k,us),e(us,vne),e(vne,Glo),e(us,Olo),e(us,mB),e(mB,Vlo),e(us,Xlo),e(us,gB),e(gB,zlo),e(us,Wlo),e(k,Qlo),e(k,Hg),e(Hg,Fne),e(Fne,Hlo),e(Hg,Ulo),e(Hg,hB),e(hB,Jlo),e(Hg,Ylo),e(k,Klo),e(k,Ug),e(Ug,Tne),e(Tne,Zlo),e(Ug,eio),e(Ug,pB),e(pB,oio),e(Ug,rio),e(k,tio),e(k,Jg),e(Jg,Mne),e(Mne,aio),e(Jg,nio),e(Jg,_B),e(_B,sio),e(Jg,lio),e(k,iio),e(k,Yg),e(Yg,Ene),e(Ene,dio),e(Yg,cio),e(Yg,uB),e(uB,fio),e(Yg,mio),e(k,gio),e(k,bs),e(bs,Cne),e(Cne,hio),e(bs,pio),e(bs,bB),e(bB,_io),e(bs,uio),e(bs,vB),e(vB,bio),e(bs,vio),e(k,Fio),e(k,Kg),e(Kg,wne),e(wne,Tio),e(Kg,Mio),e(Kg,FB),e(FB,Eio),e(Kg,Cio),e(k,wio),e(k,vs),e(vs,Ane),e(Ane,Aio),e(vs,Lio),e(vs,TB),e(TB,yio),e(vs,xio),e(vs,MB),e(MB,$io),e(vs,kio),e(k,Sio),e(k,Fs),e(Fs,Lne),e(Lne,Rio),e(Fs,Pio),e(Fs,EB),e(EB,Bio),e(Fs,Iio),e(Fs,CB),e(CB,Nio),e(Fs,qio),e(k,jio),e(k,Ts),e(Ts,yne),e(yne,Dio),e(Ts,Gio),e(Ts,wB),e(wB,Oio),e(Ts,Vio),e(Ts,AB),e(AB,Xio),e(Ts,zio),e(k,Wio),e(k,Ms),e(Ms,xne),e(xne,Qio),e(Ms,Hio),e(Ms,LB),e(LB,Uio),e(Ms,Jio),e(Ms,yB),e(yB,Yio),e(Ms,Kio),e(k,Zio),e(k,Es),e(Es,$ne),e($ne,edo),e(Es,odo),e(Es,xB),e(xB,rdo),e(Es,tdo),e(Es,$B),e($B,ado),e(Es,ndo),e(k,sdo),e(k,Cs),e(Cs,kne),e(kne,ldo),e(Cs,ido),e(Cs,kB),e(kB,ddo),e(Cs,cdo),e(Cs,SB),e(SB,fdo),e(Cs,mdo),e(k,gdo),e(k,Zg),e(Zg,Sne),e(Sne,hdo),e(Zg,pdo),e(Zg,RB),e(RB,_do),e(Zg,udo),e(k,bdo),e(k,eh),e(eh,Rne),e(Rne,vdo),e(eh,Fdo),e(eh,PB),e(PB,Tdo),e(eh,Mdo),e(k,Edo),e(k,ws),e(ws,Pne),e(Pne,Cdo),e(ws,wdo),e(ws,BB),e(BB,Ado),e(ws,Ldo),e(ws,IB),e(IB,ydo),e(ws,xdo),e(k,$do),e(k,As),e(As,Bne),e(Bne,kdo),e(As,Sdo),e(As,NB),e(NB,Rdo),e(As,Pdo),e(As,qB),e(qB,Bdo),e(As,Ido),e(k,Ndo),e(k,Ls),e(Ls,Ine),e(Ine,qdo),e(Ls,jdo),e(Ls,jB),e(jB,Ddo),e(Ls,Gdo),e(Ls,DB),e(DB,Odo),e(Ls,Vdo),e(k,Xdo),e(k,oh),e(oh,Nne),e(Nne,zdo),e(oh,Wdo),e(oh,GB),e(GB,Qdo),e(oh,Hdo),e(k,Udo),e(k,rh),e(rh,qne),e(qne,Jdo),e(rh,Ydo),e(rh,OB),e(OB,Kdo),e(rh,Zdo),e(k,eco),e(k,th),e(th,jne),e(jne,oco),e(th,rco),e(th,VB),e(VB,tco),e(th,aco),e(k,nco),e(k,ys),e(ys,Dne),e(Dne,sco),e(ys,lco),e(ys,XB),e(XB,ico),e(ys,dco),e(ys,zB),e(zB,cco),e(ys,fco),e(k,mco),e(k,ah),e(ah,Gne),e(Gne,gco),e(ah,hco),e(ah,WB),e(WB,pco),e(ah,_co),e(k,uco),e(k,nh),e(nh,One),e(One,bco),e(nh,vco),e(nh,QB),e(QB,Fco),e(nh,Tco),e(k,Mco),e(k,sh),e(sh,Vne),e(Vne,Eco),e(sh,Cco),e(sh,HB),e(HB,wco),e(sh,Aco),e(k,Lco),e(k,xs),e(xs,Xne),e(Xne,yco),e(xs,xco),e(xs,UB),e(UB,$co),e(xs,kco),e(xs,JB),e(JB,Sco),e(xs,Rco),e(k,Pco),e(k,lh),e(lh,zne),e(zne,Bco),e(lh,Ico),e(lh,YB),e(YB,Nco),e(lh,qco),e(k,jco),e(k,ih),e(ih,Wne),e(Wne,Dco),e(ih,Gco),e(ih,KB),e(KB,Oco),e(ih,Vco),e(k,Xco),e(k,$s),e($s,Qne),e(Qne,zco),e($s,Wco),e($s,ZB),e(ZB,Qco),e($s,Hco),e($s,eI),e(eI,Uco),e($s,Jco),e(k,Yco),e(k,ks),e(ks,Hne),e(Hne,Kco),e(ks,Zco),e(ks,oI),e(oI,efo),e(ks,ofo),e(ks,rI),e(rI,rfo),e(ks,tfo),e(k,afo),e(k,Ss),e(Ss,Une),e(Une,nfo),e(Ss,sfo),e(Ss,tI),e(tI,lfo),e(Ss,ifo),e(Ss,aI),e(aI,dfo),e(Ss,cfo),e(k,ffo),e(k,Rs),e(Rs,Jne),e(Jne,mfo),e(Rs,gfo),e(Rs,nI),e(nI,hfo),e(Rs,pfo),e(Rs,sI),e(sI,_fo),e(Rs,ufo),e(Cr,bfo),M(dh,Cr,null),e(wo,vfo),e(wo,ch),M(sA,ch,null),e(ch,Ffo),e(ch,Yne),e(Yne,Tfo),b(f,Pje,u),b(f,Ei,u),e(Ei,fh),e(fh,Kne),M(lA,Kne,null),e(Ei,Mfo),e(Ei,Zne),e(Zne,Efo),b(f,Bje,u),b(f,Ao,u),M(iA,Ao,null),e(Ao,Cfo),e(Ao,dA),e(dA,wfo),e(dA,lI),e(lI,Afo),e(dA,Lfo),e(Ao,yfo),e(Ao,cA),e(cA,xfo),e(cA,ese),e(ese,$fo),e(cA,kfo),e(Ao,Sfo),e(Ao,He),M(fA,He,null),e(He,Rfo),e(He,ose),e(ose,Pfo),e(He,Bfo),e(He,La),e(La,Ifo),e(La,rse),e(rse,Nfo),e(La,qfo),e(La,tse),e(tse,jfo),e(La,Dfo),e(La,ase),e(ase,Gfo),e(La,Ofo),e(He,Vfo),e(He,Y),e(Y,mh),e(mh,nse),e(nse,Xfo),e(mh,zfo),e(mh,iI),e(iI,Wfo),e(mh,Qfo),e(Y,Hfo),e(Y,gh),e(gh,sse),e(sse,Ufo),e(gh,Jfo),e(gh,dI),e(dI,Yfo),e(gh,Kfo),e(Y,Zfo),e(Y,hh),e(hh,lse),e(lse,emo),e(hh,omo),e(hh,cI),e(cI,rmo),e(hh,tmo),e(Y,amo),e(Y,ph),e(ph,ise),e(ise,nmo),e(ph,smo),e(ph,fI),e(fI,lmo),e(ph,imo),e(Y,dmo),e(Y,_h),e(_h,dse),e(dse,cmo),e(_h,fmo),e(_h,mI),e(mI,mmo),e(_h,gmo),e(Y,hmo),e(Y,uh),e(uh,cse),e(cse,pmo),e(uh,_mo),e(uh,gI),e(gI,umo),e(uh,bmo),e(Y,vmo),e(Y,bh),e(bh,fse),e(fse,Fmo),e(bh,Tmo),e(bh,hI),e(hI,Mmo),e(bh,Emo),e(Y,Cmo),e(Y,vh),e(vh,mse),e(mse,wmo),e(vh,Amo),e(vh,pI),e(pI,Lmo),e(vh,ymo),e(Y,xmo),e(Y,Fh),e(Fh,gse),e(gse,$mo),e(Fh,kmo),e(Fh,_I),e(_I,Smo),e(Fh,Rmo),e(Y,Pmo),e(Y,Th),e(Th,hse),e(hse,Bmo),e(Th,Imo),e(Th,uI),e(uI,Nmo),e(Th,qmo),e(Y,jmo),e(Y,Mh),e(Mh,pse),e(pse,Dmo),e(Mh,Gmo),e(Mh,bI),e(bI,Omo),e(Mh,Vmo),e(Y,Xmo),e(Y,Eh),e(Eh,_se),e(_se,zmo),e(Eh,Wmo),e(Eh,vI),e(vI,Qmo),e(Eh,Hmo),e(Y,Umo),e(Y,Ch),e(Ch,use),e(use,Jmo),e(Ch,Ymo),e(Ch,FI),e(FI,Kmo),e(Ch,Zmo),e(Y,ego),e(Y,wh),e(wh,bse),e(bse,ogo),e(wh,rgo),e(wh,TI),e(TI,tgo),e(wh,ago),e(Y,ngo),e(Y,Ah),e(Ah,vse),e(vse,sgo),e(Ah,lgo),e(Ah,MI),e(MI,igo),e(Ah,dgo),e(Y,cgo),e(Y,Lh),e(Lh,Fse),e(Fse,fgo),e(Lh,mgo),e(Lh,EI),e(EI,ggo),e(Lh,hgo),e(Y,pgo),e(Y,yh),e(yh,Tse),e(Tse,_go),e(yh,ugo),e(yh,CI),e(CI,bgo),e(yh,vgo),e(Y,Fgo),e(Y,xh),e(xh,Mse),e(Mse,Tgo),e(xh,Mgo),e(xh,wI),e(wI,Ego),e(xh,Cgo),e(Y,wgo),e(Y,$h),e($h,Ese),e(Ese,Ago),e($h,Lgo),e($h,AI),e(AI,ygo),e($h,xgo),e(Y,$go),e(Y,kh),e(kh,Cse),e(Cse,kgo),e(kh,Sgo),e(kh,LI),e(LI,Rgo),e(kh,Pgo),e(Y,Bgo),e(Y,Sh),e(Sh,wse),e(wse,Igo),e(Sh,Ngo),e(Sh,yI),e(yI,qgo),e(Sh,jgo),e(Y,Dgo),e(Y,Rh),e(Rh,Ase),e(Ase,Ggo),e(Rh,Ogo),e(Rh,xI),e(xI,Vgo),e(Rh,Xgo),e(Y,zgo),e(Y,Ph),e(Ph,Lse),e(Lse,Wgo),e(Ph,Qgo),e(Ph,$I),e($I,Hgo),e(Ph,Ugo),e(Y,Jgo),e(Y,Bh),e(Bh,yse),e(yse,Ygo),e(Bh,Kgo),e(Bh,kI),e(kI,Zgo),e(Bh,eho),e(Y,oho),e(Y,Ih),e(Ih,xse),e(xse,rho),e(Ih,tho),e(Ih,SI),e(SI,aho),e(Ih,nho),e(Y,sho),e(Y,Nh),e(Nh,$se),e($se,lho),e(Nh,iho),e(Nh,RI),e(RI,dho),e(Nh,cho),e(Y,fho),e(Y,qh),e(qh,kse),e(kse,mho),e(qh,gho),e(qh,PI),e(PI,hho),e(qh,pho),e(Y,_ho),e(Y,jh),e(jh,Sse),e(Sse,uho),e(jh,bho),e(jh,BI),e(BI,vho),e(jh,Fho),e(Y,Tho),e(Y,Dh),e(Dh,Rse),e(Rse,Mho),e(Dh,Eho),e(Dh,II),e(II,Cho),e(Dh,who),e(Y,Aho),e(Y,Gh),e(Gh,Pse),e(Pse,Lho),e(Gh,yho),e(Gh,NI),e(NI,xho),e(Gh,$ho),e(Y,kho),e(Y,Oh),e(Oh,Bse),e(Bse,Sho),e(Oh,Rho),e(Oh,qI),e(qI,Pho),e(Oh,Bho),e(He,Iho),M(Vh,He,null),e(He,Nho),M(Xh,He,null),e(Ao,qho),e(Ao,zh),M(mA,zh,null),e(zh,jho),e(zh,Ise),e(Ise,Dho),b(f,Ije,u),b(f,Ci,u),e(Ci,Wh),e(Wh,Nse),M(gA,Nse,null),e(Ci,Gho),e(Ci,qse),e(qse,Oho),b(f,Nje,u),b(f,Lo,u),M(hA,Lo,null),e(Lo,Vho),e(Lo,pA),e(pA,Xho),e(pA,jI),e(jI,zho),e(pA,Who),e(Lo,Qho),e(Lo,_A),e(_A,Hho),e(_A,jse),e(jse,Uho),e(_A,Jho),e(Lo,Yho),e(Lo,Ue),M(uA,Ue,null),e(Ue,Kho),e(Ue,Dse),e(Dse,Zho),e(Ue,epo),e(Ue,wi),e(wi,opo),e(wi,Gse),e(Gse,rpo),e(wi,tpo),e(wi,Ose),e(Ose,apo),e(wi,npo),e(Ue,spo),e(Ue,he),e(he,Qh),e(Qh,Vse),e(Vse,lpo),e(Qh,ipo),e(Qh,DI),e(DI,dpo),e(Qh,cpo),e(he,fpo),e(he,Hh),e(Hh,Xse),e(Xse,mpo),e(Hh,gpo),e(Hh,zse),e(zse,hpo),e(Hh,ppo),e(he,_po),e(he,Uh),e(Uh,Wse),e(Wse,upo),e(Uh,bpo),e(Uh,GI),e(GI,vpo),e(Uh,Fpo),e(he,Tpo),e(he,Jh),e(Jh,Qse),e(Qse,Mpo),e(Jh,Epo),e(Jh,OI),e(OI,Cpo),e(Jh,wpo),e(he,Apo),e(he,Yh),e(Yh,Hse),e(Hse,Lpo),e(Yh,ypo),e(Yh,VI),e(VI,xpo),e(Yh,$po),e(he,kpo),e(he,Kh),e(Kh,Use),e(Use,Spo),e(Kh,Rpo),e(Kh,XI),e(XI,Ppo),e(Kh,Bpo),e(he,Ipo),e(he,Zh),e(Zh,Jse),e(Jse,Npo),e(Zh,qpo),e(Zh,zI),e(zI,jpo),e(Zh,Dpo),e(he,Gpo),e(he,ep),e(ep,Yse),e(Yse,Opo),e(ep,Vpo),e(ep,WI),e(WI,Xpo),e(ep,zpo),e(he,Wpo),e(he,op),e(op,Kse),e(Kse,Qpo),e(op,Hpo),e(op,QI),e(QI,Upo),e(op,Jpo),e(he,Ypo),e(he,rp),e(rp,Zse),e(Zse,Kpo),e(rp,Zpo),e(rp,HI),e(HI,e_o),e(rp,o_o),e(he,r_o),e(he,tp),e(tp,ele),e(ele,t_o),e(tp,a_o),e(tp,UI),e(UI,n_o),e(tp,s_o),e(he,l_o),e(he,ap),e(ap,ole),e(ole,i_o),e(ap,d_o),e(ap,JI),e(JI,c_o),e(ap,f_o),e(he,m_o),e(he,np),e(np,rle),e(rle,g_o),e(np,h_o),e(np,YI),e(YI,p_o),e(np,__o),e(he,u_o),e(he,sp),e(sp,tle),e(tle,b_o),e(sp,v_o),e(sp,KI),e(KI,F_o),e(sp,T_o),e(he,M_o),e(he,lp),e(lp,ale),e(ale,E_o),e(lp,C_o),e(lp,ZI),e(ZI,w_o),e(lp,A_o),e(he,L_o),e(he,ip),e(ip,nle),e(nle,y_o),e(ip,x_o),e(ip,eN),e(eN,$_o),e(ip,k_o),e(he,S_o),e(he,dp),e(dp,sle),e(sle,R_o),e(dp,P_o),e(dp,oN),e(oN,B_o),e(dp,I_o),e(Ue,N_o),M(cp,Ue,null),e(Ue,q_o),M(fp,Ue,null),e(Lo,j_o),e(Lo,mp),M(bA,mp,null),e(mp,D_o),e(mp,lle),e(lle,G_o),b(f,qje,u),b(f,Ai,u),e(Ai,gp),e(gp,ile),M(vA,ile,null),e(Ai,O_o),e(Ai,dle),e(dle,V_o),b(f,jje,u),b(f,yo,u),M(FA,yo,null),e(yo,X_o),e(yo,Li),e(Li,z_o),e(Li,rN),e(rN,W_o),e(Li,Q_o),e(Li,tN),e(tN,H_o),e(Li,U_o),e(yo,J_o),e(yo,TA),e(TA,Y_o),e(TA,cle),e(cle,K_o),e(TA,Z_o),e(yo,euo),e(yo,tt),M(MA,tt,null),e(tt,ouo),e(tt,fle),e(fle,ruo),e(tt,tuo),e(tt,yi),e(yi,auo),e(yi,mle),e(mle,nuo),e(yi,suo),e(yi,aN),e(aN,luo),e(yi,iuo),e(tt,duo),M(hp,tt,null),e(yo,cuo),e(yo,Je),M(EA,Je,null),e(Je,fuo),e(Je,gle),e(gle,muo),e(Je,guo),e(Je,ya),e(ya,huo),e(ya,hle),e(hle,puo),e(ya,_uo),e(ya,ple),e(ple,uuo),e(ya,buo),e(ya,_le),e(_le,vuo),e(ya,Fuo),e(Je,Tuo),e(Je,y),e(y,pp),e(pp,ule),e(ule,Muo),e(pp,Euo),e(pp,nN),e(nN,Cuo),e(pp,wuo),e(y,Auo),e(y,_p),e(_p,ble),e(ble,Luo),e(_p,yuo),e(_p,sN),e(sN,xuo),e(_p,$uo),e(y,kuo),e(y,up),e(up,vle),e(vle,Suo),e(up,Ruo),e(up,lN),e(lN,Puo),e(up,Buo),e(y,Iuo),e(y,bp),e(bp,Fle),e(Fle,Nuo),e(bp,quo),e(bp,iN),e(iN,juo),e(bp,Duo),e(y,Guo),e(y,vp),e(vp,Tle),e(Tle,Ouo),e(vp,Vuo),e(vp,dN),e(dN,Xuo),e(vp,zuo),e(y,Wuo),e(y,Fp),e(Fp,Mle),e(Mle,Quo),e(Fp,Huo),e(Fp,cN),e(cN,Uuo),e(Fp,Juo),e(y,Yuo),e(y,Tp),e(Tp,Ele),e(Ele,Kuo),e(Tp,Zuo),e(Tp,fN),e(fN,e1o),e(Tp,o1o),e(y,r1o),e(y,Mp),e(Mp,Cle),e(Cle,t1o),e(Mp,a1o),e(Mp,mN),e(mN,n1o),e(Mp,s1o),e(y,l1o),e(y,Ep),e(Ep,wle),e(wle,i1o),e(Ep,d1o),e(Ep,gN),e(gN,c1o),e(Ep,f1o),e(y,m1o),e(y,Cp),e(Cp,Ale),e(Ale,g1o),e(Cp,h1o),e(Cp,hN),e(hN,p1o),e(Cp,_1o),e(y,u1o),e(y,wp),e(wp,Lle),e(Lle,b1o),e(wp,v1o),e(wp,pN),e(pN,F1o),e(wp,T1o),e(y,M1o),e(y,Ap),e(Ap,yle),e(yle,E1o),e(Ap,C1o),e(Ap,_N),e(_N,w1o),e(Ap,A1o),e(y,L1o),e(y,Lp),e(Lp,xle),e(xle,y1o),e(Lp,x1o),e(Lp,uN),e(uN,$1o),e(Lp,k1o),e(y,S1o),e(y,yp),e(yp,$le),e($le,R1o),e(yp,P1o),e(yp,bN),e(bN,B1o),e(yp,I1o),e(y,N1o),e(y,xp),e(xp,kle),e(kle,q1o),e(xp,j1o),e(xp,vN),e(vN,D1o),e(xp,G1o),e(y,O1o),e(y,$p),e($p,Sle),e(Sle,V1o),e($p,X1o),e($p,FN),e(FN,z1o),e($p,W1o),e(y,Q1o),e(y,kp),e(kp,Rle),e(Rle,H1o),e(kp,U1o),e(kp,TN),e(TN,J1o),e(kp,Y1o),e(y,K1o),e(y,Sp),e(Sp,Ple),e(Ple,Z1o),e(Sp,ebo),e(Sp,MN),e(MN,obo),e(Sp,rbo),e(y,tbo),e(y,Rp),e(Rp,Ble),e(Ble,abo),e(Rp,nbo),e(Rp,EN),e(EN,sbo),e(Rp,lbo),e(y,ibo),e(y,Pp),e(Pp,Ile),e(Ile,dbo),e(Pp,cbo),e(Pp,CN),e(CN,fbo),e(Pp,mbo),e(y,gbo),e(y,Bp),e(Bp,Nle),e(Nle,hbo),e(Bp,pbo),e(Bp,wN),e(wN,_bo),e(Bp,ubo),e(y,bbo),e(y,Ip),e(Ip,qle),e(qle,vbo),e(Ip,Fbo),e(Ip,AN),e(AN,Tbo),e(Ip,Mbo),e(y,Ebo),e(y,Np),e(Np,jle),e(jle,Cbo),e(Np,wbo),e(Np,LN),e(LN,Abo),e(Np,Lbo),e(y,ybo),e(y,qp),e(qp,Dle),e(Dle,xbo),e(qp,$bo),e(qp,yN),e(yN,kbo),e(qp,Sbo),e(y,Rbo),e(y,jp),e(jp,Gle),e(Gle,Pbo),e(jp,Bbo),e(jp,xN),e(xN,Ibo),e(jp,Nbo),e(y,qbo),e(y,Dp),e(Dp,Ole),e(Ole,jbo),e(Dp,Dbo),e(Dp,$N),e($N,Gbo),e(Dp,Obo),e(y,Vbo),e(y,Gp),e(Gp,Vle),e(Vle,Xbo),e(Gp,zbo),e(Gp,kN),e(kN,Wbo),e(Gp,Qbo),e(y,Hbo),e(y,Op),e(Op,Xle),e(Xle,Ubo),e(Op,Jbo),e(Op,SN),e(SN,Ybo),e(Op,Kbo),e(y,Zbo),e(y,Vp),e(Vp,zle),e(zle,e2o),e(Vp,o2o),e(Vp,RN),e(RN,r2o),e(Vp,t2o),e(y,a2o),e(y,Xp),e(Xp,Wle),e(Wle,n2o),e(Xp,s2o),e(Xp,PN),e(PN,l2o),e(Xp,i2o),e(y,d2o),e(y,zp),e(zp,Qle),e(Qle,c2o),e(zp,f2o),e(zp,BN),e(BN,m2o),e(zp,g2o),e(y,h2o),e(y,Wp),e(Wp,Hle),e(Hle,p2o),e(Wp,_2o),e(Wp,IN),e(IN,u2o),e(Wp,b2o),e(y,v2o),e(y,Qp),e(Qp,Ule),e(Ule,F2o),e(Qp,T2o),e(Qp,NN),e(NN,M2o),e(Qp,E2o),e(y,C2o),e(y,Ps),e(Ps,Jle),e(Jle,w2o),e(Ps,A2o),e(Ps,qN),e(qN,L2o),e(Ps,y2o),e(Ps,jN),e(jN,x2o),e(Ps,$2o),e(y,k2o),e(y,Hp),e(Hp,Yle),e(Yle,S2o),e(Hp,R2o),e(Hp,DN),e(DN,P2o),e(Hp,B2o),e(y,I2o),e(y,Up),e(Up,Kle),e(Kle,N2o),e(Up,q2o),e(Up,GN),e(GN,j2o),e(Up,D2o),e(y,G2o),e(y,Jp),e(Jp,Zle),e(Zle,O2o),e(Jp,V2o),e(Jp,ON),e(ON,X2o),e(Jp,z2o),e(y,W2o),e(y,Yp),e(Yp,eie),e(eie,Q2o),e(Yp,H2o),e(Yp,VN),e(VN,U2o),e(Yp,J2o),e(y,Y2o),e(y,Kp),e(Kp,oie),e(oie,K2o),e(Kp,Z2o),e(Kp,XN),e(XN,evo),e(Kp,ovo),e(y,rvo),e(y,Zp),e(Zp,rie),e(rie,tvo),e(Zp,avo),e(Zp,zN),e(zN,nvo),e(Zp,svo),e(y,lvo),e(y,e_),e(e_,tie),e(tie,ivo),e(e_,dvo),e(e_,WN),e(WN,cvo),e(e_,fvo),e(y,mvo),e(y,o_),e(o_,aie),e(aie,gvo),e(o_,hvo),e(o_,QN),e(QN,pvo),e(o_,_vo),e(y,uvo),e(y,r_),e(r_,nie),e(nie,bvo),e(r_,vvo),e(r_,HN),e(HN,Fvo),e(r_,Tvo),e(y,Mvo),e(y,t_),e(t_,sie),e(sie,Evo),e(t_,Cvo),e(t_,UN),e(UN,wvo),e(t_,Avo),e(y,Lvo),e(y,a_),e(a_,lie),e(lie,yvo),e(a_,xvo),e(a_,JN),e(JN,$vo),e(a_,kvo),e(y,Svo),e(y,n_),e(n_,iie),e(iie,Rvo),e(n_,Pvo),e(n_,YN),e(YN,Bvo),e(n_,Ivo),e(y,Nvo),e(y,s_),e(s_,die),e(die,qvo),e(s_,jvo),e(s_,KN),e(KN,Dvo),e(s_,Gvo),e(y,Ovo),e(y,l_),e(l_,cie),e(cie,Vvo),e(l_,Xvo),e(l_,ZN),e(ZN,zvo),e(l_,Wvo),e(y,Qvo),e(y,i_),e(i_,fie),e(fie,Hvo),e(i_,Uvo),e(i_,eq),e(eq,Jvo),e(i_,Yvo),e(y,Kvo),e(y,d_),e(d_,mie),e(mie,Zvo),e(d_,e3o),e(d_,oq),e(oq,o3o),e(d_,r3o),e(y,t3o),e(y,c_),e(c_,gie),e(gie,a3o),e(c_,n3o),e(c_,rq),e(rq,s3o),e(c_,l3o),e(y,i3o),e(y,f_),e(f_,hie),e(hie,d3o),e(f_,c3o),e(f_,tq),e(tq,f3o),e(f_,m3o),e(y,g3o),e(y,m_),e(m_,pie),e(pie,h3o),e(m_,p3o),e(m_,aq),e(aq,_3o),e(m_,u3o),e(y,b3o),e(y,g_),e(g_,_ie),e(_ie,v3o),e(g_,F3o),e(g_,nq),e(nq,T3o),e(g_,M3o),e(y,E3o),e(y,h_),e(h_,uie),e(uie,C3o),e(h_,w3o),e(h_,sq),e(sq,A3o),e(h_,L3o),e(y,y3o),e(y,p_),e(p_,bie),e(bie,x3o),e(p_,$3o),e(p_,lq),e(lq,k3o),e(p_,S3o),e(y,R3o),e(y,__),e(__,vie),e(vie,P3o),e(__,B3o),e(__,iq),e(iq,I3o),e(__,N3o),e(y,q3o),e(y,u_),e(u_,Fie),e(Fie,j3o),e(u_,D3o),e(u_,dq),e(dq,G3o),e(u_,O3o),e(y,V3o),e(y,b_),e(b_,Tie),e(Tie,X3o),e(b_,z3o),e(b_,cq),e(cq,W3o),e(b_,Q3o),e(y,H3o),e(y,v_),e(v_,Mie),e(Mie,U3o),e(v_,J3o),e(v_,fq),e(fq,Y3o),e(v_,K3o),e(y,Z3o),e(y,F_),e(F_,Eie),e(Eie,eFo),e(F_,oFo),e(F_,mq),e(mq,rFo),e(F_,tFo),e(y,aFo),e(y,T_),e(T_,Cie),e(Cie,nFo),e(T_,sFo),e(T_,gq),e(gq,lFo),e(T_,iFo),e(y,dFo),e(y,M_),e(M_,wie),e(wie,cFo),e(M_,fFo),e(M_,hq),e(hq,mFo),e(M_,gFo),e(y,hFo),e(y,E_),e(E_,Aie),e(Aie,pFo),e(E_,_Fo),e(E_,pq),e(pq,uFo),e(E_,bFo),e(y,vFo),e(y,C_),e(C_,Lie),e(Lie,FFo),e(C_,TFo),e(C_,_q),e(_q,MFo),e(C_,EFo),e(y,CFo),e(y,w_),e(w_,yie),e(yie,wFo),e(w_,AFo),e(w_,uq),e(uq,LFo),e(w_,yFo),e(y,xFo),e(y,A_),e(A_,xie),e(xie,$Fo),e(A_,kFo),e(A_,bq),e(bq,SFo),e(A_,RFo),e(y,PFo),e(y,L_),e(L_,$ie),e($ie,BFo),e(L_,IFo),e(L_,vq),e(vq,NFo),e(L_,qFo),e(y,jFo),e(y,y_),e(y_,kie),e(kie,DFo),e(y_,GFo),e(y_,Fq),e(Fq,OFo),e(y_,VFo),e(y,XFo),e(y,x_),e(x_,Sie),e(Sie,zFo),e(x_,WFo),e(x_,Tq),e(Tq,QFo),e(x_,HFo),e(y,UFo),e(y,$_),e($_,Rie),e(Rie,JFo),e($_,YFo),e($_,Mq),e(Mq,KFo),e($_,ZFo),e(y,e6o),e(y,k_),e(k_,Pie),e(Pie,o6o),e(k_,r6o),e(k_,Eq),e(Eq,t6o),e(k_,a6o),e(y,n6o),e(y,S_),e(S_,Bie),e(Bie,s6o),e(S_,l6o),e(S_,Cq),e(Cq,i6o),e(S_,d6o),e(y,c6o),e(y,R_),e(R_,Iie),e(Iie,f6o),e(R_,m6o),e(R_,wq),e(wq,g6o),e(R_,h6o),e(y,p6o),e(y,P_),e(P_,Nie),e(Nie,_6o),e(P_,u6o),e(P_,Aq),e(Aq,b6o),e(P_,v6o),e(y,F6o),e(y,B_),e(B_,qie),e(qie,T6o),e(B_,M6o),e(B_,Lq),e(Lq,E6o),e(B_,C6o),e(y,w6o),e(y,I_),e(I_,jie),e(jie,A6o),e(I_,L6o),e(I_,yq),e(yq,y6o),e(I_,x6o),e(y,$6o),e(y,N_),e(N_,Die),e(Die,k6o),e(N_,S6o),e(N_,xq),e(xq,R6o),e(N_,P6o),e(y,B6o),e(y,q_),e(q_,Gie),e(Gie,I6o),e(q_,N6o),e(q_,$q),e($q,q6o),e(q_,j6o),e(y,D6o),e(y,j_),e(j_,Oie),e(Oie,G6o),e(j_,O6o),e(j_,kq),e(kq,V6o),e(j_,X6o),e(y,z6o),e(y,D_),e(D_,Vie),e(Vie,W6o),e(D_,Q6o),e(D_,Sq),e(Sq,H6o),e(D_,U6o),e(y,J6o),e(y,G_),e(G_,Xie),e(Xie,Y6o),e(G_,K6o),e(G_,Rq),e(Rq,Z6o),e(G_,eTo),e(y,oTo),e(y,O_),e(O_,zie),e(zie,rTo),e(O_,tTo),e(O_,Pq),e(Pq,aTo),e(O_,nTo),e(y,sTo),e(y,V_),e(V_,Wie),e(Wie,lTo),e(V_,iTo),e(V_,Bq),e(Bq,dTo),e(V_,cTo),e(y,fTo),e(y,X_),e(X_,Qie),e(Qie,mTo),e(X_,gTo),e(X_,Iq),e(Iq,hTo),e(X_,pTo),e(y,_To),e(y,z_),e(z_,Hie),e(Hie,uTo),e(z_,bTo),e(z_,Nq),e(Nq,vTo),e(z_,FTo),e(y,TTo),e(y,W_),e(W_,Uie),e(Uie,MTo),e(W_,ETo),e(W_,qq),e(qq,CTo),e(W_,wTo),e(y,ATo),e(y,Q_),e(Q_,Jie),e(Jie,LTo),e(Q_,yTo),e(Q_,jq),e(jq,xTo),e(Q_,$To),e(y,kTo),e(y,H_),e(H_,Yie),e(Yie,STo),e(H_,RTo),e(H_,Dq),e(Dq,PTo),e(H_,BTo),e(y,ITo),e(y,U_),e(U_,Kie),e(Kie,NTo),e(U_,qTo),e(U_,Gq),e(Gq,jTo),e(U_,DTo),e(y,GTo),e(y,J_),e(J_,Zie),e(Zie,OTo),e(J_,VTo),e(J_,Oq),e(Oq,XTo),e(J_,zTo),e(y,WTo),e(y,Y_),e(Y_,ede),e(ede,QTo),e(Y_,HTo),e(Y_,Vq),e(Vq,UTo),e(Y_,JTo),e(y,YTo),e(y,K_),e(K_,ode),e(ode,KTo),e(K_,ZTo),e(K_,Xq),e(Xq,e7o),e(K_,o7o),e(y,r7o),e(y,Z_),e(Z_,rde),e(rde,t7o),e(Z_,a7o),e(Z_,zq),e(zq,n7o),e(Z_,s7o),e(y,l7o),e(y,eu),e(eu,tde),e(tde,i7o),e(eu,d7o),e(eu,Wq),e(Wq,c7o),e(eu,f7o),e(y,m7o),e(y,ou),e(ou,ade),e(ade,g7o),e(ou,h7o),e(ou,Qq),e(Qq,p7o),e(ou,_7o),e(y,u7o),e(y,ru),e(ru,nde),e(nde,b7o),e(ru,v7o),e(ru,Hq),e(Hq,F7o),e(ru,T7o),e(y,M7o),e(y,tu),e(tu,sde),e(sde,E7o),e(tu,C7o),e(tu,Uq),e(Uq,w7o),e(tu,A7o),e(y,L7o),e(y,au),e(au,lde),e(lde,y7o),e(au,x7o),e(au,Jq),e(Jq,$7o),e(au,k7o),e(y,S7o),e(y,nu),e(nu,ide),e(ide,R7o),e(nu,P7o),e(nu,Yq),e(Yq,B7o),e(nu,I7o),e(y,N7o),e(y,su),e(su,dde),e(dde,q7o),e(su,j7o),e(su,Kq),e(Kq,D7o),e(su,G7o),e(y,O7o),e(y,lu),e(lu,cde),e(cde,V7o),e(lu,X7o),e(lu,Zq),e(Zq,z7o),e(lu,W7o),e(y,Q7o),e(y,iu),e(iu,fde),e(fde,H7o),e(iu,U7o),e(iu,ej),e(ej,J7o),e(iu,Y7o),e(y,K7o),e(y,du),e(du,mde),e(mde,Z7o),e(du,e9o),e(du,oj),e(oj,o9o),e(du,r9o),e(y,t9o),e(y,cu),e(cu,gde),e(gde,a9o),e(cu,n9o),e(cu,rj),e(rj,s9o),e(cu,l9o),e(Je,i9o),e(Je,fu),e(fu,d9o),e(fu,hde),e(hde,c9o),e(fu,f9o),e(fu,pde),e(pde,m9o),e(Je,g9o),M(mu,Je,null),b(f,Dje,u),b(f,xi,u),e(xi,gu),e(gu,_de),M(CA,_de,null),e(xi,h9o),e(xi,ude),e(ude,p9o),b(f,Gje,u),b(f,xo,u),M(wA,xo,null),e(xo,_9o),e(xo,$i),e($i,u9o),e($i,tj),e(tj,b9o),e($i,v9o),e($i,aj),e(aj,F9o),e($i,T9o),e(xo,M9o),e(xo,AA),e(AA,E9o),e(AA,bde),e(bde,C9o),e(AA,w9o),e(xo,A9o),e(xo,at),M(LA,at,null),e(at,L9o),e(at,vde),e(vde,y9o),e(at,x9o),e(at,ki),e(ki,$9o),e(ki,Fde),e(Fde,k9o),e(ki,S9o),e(ki,nj),e(nj,R9o),e(ki,P9o),e(at,B9o),M(hu,at,null),e(xo,I9o),e(xo,Ye),M(yA,Ye,null),e(Ye,N9o),e(Ye,Tde),e(Tde,q9o),e(Ye,j9o),e(Ye,xa),e(xa,D9o),e(xa,Mde),e(Mde,G9o),e(xa,O9o),e(xa,Ede),e(Ede,V9o),e(xa,X9o),e(xa,Cde),e(Cde,z9o),e(xa,W9o),e(Ye,Q9o),e(Ye,G),e(G,pu),e(pu,wde),e(wde,H9o),e(pu,U9o),e(pu,sj),e(sj,J9o),e(pu,Y9o),e(G,K9o),e(G,_u),e(_u,Ade),e(Ade,Z9o),e(_u,eMo),e(_u,lj),e(lj,oMo),e(_u,rMo),e(G,tMo),e(G,uu),e(uu,Lde),e(Lde,aMo),e(uu,nMo),e(uu,ij),e(ij,sMo),e(uu,lMo),e(G,iMo),e(G,bu),e(bu,yde),e(yde,dMo),e(bu,cMo),e(bu,dj),e(dj,fMo),e(bu,mMo),e(G,gMo),e(G,vu),e(vu,xde),e(xde,hMo),e(vu,pMo),e(vu,cj),e(cj,_Mo),e(vu,uMo),e(G,bMo),e(G,Fu),e(Fu,$de),e($de,vMo),e(Fu,FMo),e(Fu,fj),e(fj,TMo),e(Fu,MMo),e(G,EMo),e(G,Tu),e(Tu,kde),e(kde,CMo),e(Tu,wMo),e(Tu,mj),e(mj,AMo),e(Tu,LMo),e(G,yMo),e(G,Mu),e(Mu,Sde),e(Sde,xMo),e(Mu,$Mo),e(Mu,gj),e(gj,kMo),e(Mu,SMo),e(G,RMo),e(G,Eu),e(Eu,Rde),e(Rde,PMo),e(Eu,BMo),e(Eu,hj),e(hj,IMo),e(Eu,NMo),e(G,qMo),e(G,Cu),e(Cu,Pde),e(Pde,jMo),e(Cu,DMo),e(Cu,pj),e(pj,GMo),e(Cu,OMo),e(G,VMo),e(G,wu),e(wu,Bde),e(Bde,XMo),e(wu,zMo),e(wu,_j),e(_j,WMo),e(wu,QMo),e(G,HMo),e(G,Au),e(Au,Ide),e(Ide,UMo),e(Au,JMo),e(Au,uj),e(uj,YMo),e(Au,KMo),e(G,ZMo),e(G,Lu),e(Lu,Nde),e(Nde,e4o),e(Lu,o4o),e(Lu,bj),e(bj,r4o),e(Lu,t4o),e(G,a4o),e(G,yu),e(yu,qde),e(qde,n4o),e(yu,s4o),e(yu,vj),e(vj,l4o),e(yu,i4o),e(G,d4o),e(G,xu),e(xu,jde),e(jde,c4o),e(xu,f4o),e(xu,Fj),e(Fj,m4o),e(xu,g4o),e(G,h4o),e(G,$u),e($u,Dde),e(Dde,p4o),e($u,_4o),e($u,Tj),e(Tj,u4o),e($u,b4o),e(G,v4o),e(G,ku),e(ku,Gde),e(Gde,F4o),e(ku,T4o),e(ku,Mj),e(Mj,M4o),e(ku,E4o),e(G,C4o),e(G,Su),e(Su,Ode),e(Ode,w4o),e(Su,A4o),e(Su,Ej),e(Ej,L4o),e(Su,y4o),e(G,x4o),e(G,Ru),e(Ru,Vde),e(Vde,$4o),e(Ru,k4o),e(Ru,Cj),e(Cj,S4o),e(Ru,R4o),e(G,P4o),e(G,Pu),e(Pu,Xde),e(Xde,B4o),e(Pu,I4o),e(Pu,wj),e(wj,N4o),e(Pu,q4o),e(G,j4o),e(G,Bu),e(Bu,zde),e(zde,D4o),e(Bu,G4o),e(Bu,Aj),e(Aj,O4o),e(Bu,V4o),e(G,X4o),e(G,Iu),e(Iu,Wde),e(Wde,z4o),e(Iu,W4o),e(Iu,Lj),e(Lj,Q4o),e(Iu,H4o),e(G,U4o),e(G,Nu),e(Nu,Qde),e(Qde,J4o),e(Nu,Y4o),e(Nu,yj),e(yj,K4o),e(Nu,Z4o),e(G,eEo),e(G,qu),e(qu,Hde),e(Hde,oEo),e(qu,rEo),e(qu,xj),e(xj,tEo),e(qu,aEo),e(G,nEo),e(G,ju),e(ju,Ude),e(Ude,sEo),e(ju,lEo),e(ju,$j),e($j,iEo),e(ju,dEo),e(G,cEo),e(G,Du),e(Du,Jde),e(Jde,fEo),e(Du,mEo),e(Du,kj),e(kj,gEo),e(Du,hEo),e(G,pEo),e(G,Gu),e(Gu,Yde),e(Yde,_Eo),e(Gu,uEo),e(Gu,Sj),e(Sj,bEo),e(Gu,vEo),e(G,FEo),e(G,Ou),e(Ou,Kde),e(Kde,TEo),e(Ou,MEo),e(Ou,Rj),e(Rj,EEo),e(Ou,CEo),e(G,wEo),e(G,Vu),e(Vu,Zde),e(Zde,AEo),e(Vu,LEo),e(Vu,Pj),e(Pj,yEo),e(Vu,xEo),e(G,$Eo),e(G,Xu),e(Xu,ece),e(ece,kEo),e(Xu,SEo),e(Xu,Bj),e(Bj,REo),e(Xu,PEo),e(G,BEo),e(G,zu),e(zu,oce),e(oce,IEo),e(zu,NEo),e(zu,Ij),e(Ij,qEo),e(zu,jEo),e(G,DEo),e(G,Wu),e(Wu,rce),e(rce,GEo),e(Wu,OEo),e(Wu,Nj),e(Nj,VEo),e(Wu,XEo),e(G,zEo),e(G,Qu),e(Qu,tce),e(tce,WEo),e(Qu,QEo),e(Qu,qj),e(qj,HEo),e(Qu,UEo),e(G,JEo),e(G,Hu),e(Hu,ace),e(ace,YEo),e(Hu,KEo),e(Hu,jj),e(jj,ZEo),e(Hu,eCo),e(G,oCo),e(G,Uu),e(Uu,nce),e(nce,rCo),e(Uu,tCo),e(Uu,Dj),e(Dj,aCo),e(Uu,nCo),e(G,sCo),e(G,Ju),e(Ju,sce),e(sce,lCo),e(Ju,iCo),e(Ju,Gj),e(Gj,dCo),e(Ju,cCo),e(G,fCo),e(G,Yu),e(Yu,lce),e(lce,mCo),e(Yu,gCo),e(Yu,Oj),e(Oj,hCo),e(Yu,pCo),e(G,_Co),e(G,Ku),e(Ku,ice),e(ice,uCo),e(Ku,bCo),e(Ku,Vj),e(Vj,vCo),e(Ku,FCo),e(G,TCo),e(G,Zu),e(Zu,dce),e(dce,MCo),e(Zu,ECo),e(Zu,Xj),e(Xj,CCo),e(Zu,wCo),e(G,ACo),e(G,e1),e(e1,cce),e(cce,LCo),e(e1,yCo),e(e1,zj),e(zj,xCo),e(e1,$Co),e(G,kCo),e(G,o1),e(o1,fce),e(fce,SCo),e(o1,RCo),e(o1,Wj),e(Wj,PCo),e(o1,BCo),e(G,ICo),e(G,r1),e(r1,mce),e(mce,NCo),e(r1,qCo),e(r1,Qj),e(Qj,jCo),e(r1,DCo),e(G,GCo),e(G,t1),e(t1,gce),e(gce,OCo),e(t1,VCo),e(t1,Hj),e(Hj,XCo),e(t1,zCo),e(Ye,WCo),e(Ye,a1),e(a1,QCo),e(a1,hce),e(hce,HCo),e(a1,UCo),e(a1,pce),e(pce,JCo),e(Ye,YCo),M(n1,Ye,null),b(f,Oje,u),b(f,Si,u),e(Si,s1),e(s1,_ce),M(xA,_ce,null),e(Si,KCo),e(Si,uce),e(uce,ZCo),b(f,Vje,u),b(f,$o,u),M($A,$o,null),e($o,e5o),e($o,Ri),e(Ri,o5o),e(Ri,Uj),e(Uj,r5o),e(Ri,t5o),e(Ri,Jj),e(Jj,a5o),e(Ri,n5o),e($o,s5o),e($o,kA),e(kA,l5o),e(kA,bce),e(bce,i5o),e(kA,d5o),e($o,c5o),e($o,nt),M(SA,nt,null),e(nt,f5o),e(nt,vce),e(vce,m5o),e(nt,g5o),e(nt,Pi),e(Pi,h5o),e(Pi,Fce),e(Fce,p5o),e(Pi,_5o),e(Pi,Yj),e(Yj,u5o),e(Pi,b5o),e(nt,v5o),M(l1,nt,null),e($o,F5o),e($o,Ke),M(RA,Ke,null),e(Ke,T5o),e(Ke,Tce),e(Tce,M5o),e(Ke,E5o),e(Ke,$a),e($a,C5o),e($a,Mce),e(Mce,w5o),e($a,A5o),e($a,Ece),e(Ece,L5o),e($a,y5o),e($a,Cce),e(Cce,x5o),e($a,$5o),e(Ke,k5o),e(Ke,z),e(z,i1),e(i1,wce),e(wce,S5o),e(i1,R5o),e(i1,Kj),e(Kj,P5o),e(i1,B5o),e(z,I5o),e(z,d1),e(d1,Ace),e(Ace,N5o),e(d1,q5o),e(d1,Zj),e(Zj,j5o),e(d1,D5o),e(z,G5o),e(z,c1),e(c1,Lce),e(Lce,O5o),e(c1,V5o),e(c1,eD),e(eD,X5o),e(c1,z5o),e(z,W5o),e(z,f1),e(f1,yce),e(yce,Q5o),e(f1,H5o),e(f1,oD),e(oD,U5o),e(f1,J5o),e(z,Y5o),e(z,m1),e(m1,xce),e(xce,K5o),e(m1,Z5o),e(m1,rD),e(rD,e0o),e(m1,o0o),e(z,r0o),e(z,g1),e(g1,$ce),e($ce,t0o),e(g1,a0o),e(g1,tD),e(tD,n0o),e(g1,s0o),e(z,l0o),e(z,h1),e(h1,kce),e(kce,i0o),e(h1,d0o),e(h1,aD),e(aD,c0o),e(h1,f0o),e(z,m0o),e(z,p1),e(p1,Sce),e(Sce,g0o),e(p1,h0o),e(p1,nD),e(nD,p0o),e(p1,_0o),e(z,u0o),e(z,_1),e(_1,Rce),e(Rce,b0o),e(_1,v0o),e(_1,sD),e(sD,F0o),e(_1,T0o),e(z,M0o),e(z,u1),e(u1,Pce),e(Pce,E0o),e(u1,C0o),e(u1,lD),e(lD,w0o),e(u1,A0o),e(z,L0o),e(z,b1),e(b1,Bce),e(Bce,y0o),e(b1,x0o),e(b1,iD),e(iD,$0o),e(b1,k0o),e(z,S0o),e(z,v1),e(v1,Ice),e(Ice,R0o),e(v1,P0o),e(v1,dD),e(dD,B0o),e(v1,I0o),e(z,N0o),e(z,F1),e(F1,Nce),e(Nce,q0o),e(F1,j0o),e(F1,cD),e(cD,D0o),e(F1,G0o),e(z,O0o),e(z,T1),e(T1,qce),e(qce,V0o),e(T1,X0o),e(T1,fD),e(fD,z0o),e(T1,W0o),e(z,Q0o),e(z,M1),e(M1,jce),e(jce,H0o),e(M1,U0o),e(M1,mD),e(mD,J0o),e(M1,Y0o),e(z,K0o),e(z,E1),e(E1,Dce),e(Dce,Z0o),e(E1,ewo),e(E1,gD),e(gD,owo),e(E1,rwo),e(z,two),e(z,C1),e(C1,Gce),e(Gce,awo),e(C1,nwo),e(C1,hD),e(hD,swo),e(C1,lwo),e(z,iwo),e(z,w1),e(w1,Oce),e(Oce,dwo),e(w1,cwo),e(w1,pD),e(pD,fwo),e(w1,mwo),e(z,gwo),e(z,A1),e(A1,Vce),e(Vce,hwo),e(A1,pwo),e(A1,_D),e(_D,_wo),e(A1,uwo),e(z,bwo),e(z,L1),e(L1,Xce),e(Xce,vwo),e(L1,Fwo),e(L1,uD),e(uD,Two),e(L1,Mwo),e(z,Ewo),e(z,y1),e(y1,zce),e(zce,Cwo),e(y1,wwo),e(y1,bD),e(bD,Awo),e(y1,Lwo),e(z,ywo),e(z,x1),e(x1,Wce),e(Wce,xwo),e(x1,$wo),e(x1,vD),e(vD,kwo),e(x1,Swo),e(z,Rwo),e(z,$1),e($1,Qce),e(Qce,Pwo),e($1,Bwo),e($1,FD),e(FD,Iwo),e($1,Nwo),e(z,qwo),e(z,k1),e(k1,Hce),e(Hce,jwo),e(k1,Dwo),e(k1,TD),e(TD,Gwo),e(k1,Owo),e(z,Vwo),e(z,S1),e(S1,Uce),e(Uce,Xwo),e(S1,zwo),e(S1,MD),e(MD,Wwo),e(S1,Qwo),e(z,Hwo),e(z,R1),e(R1,Jce),e(Jce,Uwo),e(R1,Jwo),e(R1,ED),e(ED,Ywo),e(R1,Kwo),e(z,Zwo),e(z,P1),e(P1,Yce),e(Yce,eAo),e(P1,oAo),e(P1,CD),e(CD,rAo),e(P1,tAo),e(z,aAo),e(z,B1),e(B1,Kce),e(Kce,nAo),e(B1,sAo),e(B1,wD),e(wD,lAo),e(B1,iAo),e(z,dAo),e(z,I1),e(I1,Zce),e(Zce,cAo),e(I1,fAo),e(I1,AD),e(AD,mAo),e(I1,gAo),e(z,hAo),e(z,N1),e(N1,efe),e(efe,pAo),e(N1,_Ao),e(N1,LD),e(LD,uAo),e(N1,bAo),e(z,vAo),e(z,q1),e(q1,ofe),e(ofe,FAo),e(q1,TAo),e(q1,yD),e(yD,MAo),e(q1,EAo),e(z,CAo),e(z,j1),e(j1,rfe),e(rfe,wAo),e(j1,AAo),e(j1,xD),e(xD,LAo),e(j1,yAo),e(z,xAo),e(z,D1),e(D1,tfe),e(tfe,$Ao),e(D1,kAo),e(D1,$D),e($D,SAo),e(D1,RAo),e(z,PAo),e(z,G1),e(G1,afe),e(afe,BAo),e(G1,IAo),e(G1,kD),e(kD,NAo),e(G1,qAo),e(z,jAo),e(z,O1),e(O1,nfe),e(nfe,DAo),e(O1,GAo),e(O1,SD),e(SD,OAo),e(O1,VAo),e(z,XAo),e(z,V1),e(V1,sfe),e(sfe,zAo),e(V1,WAo),e(V1,RD),e(RD,QAo),e(V1,HAo),e(z,UAo),e(z,X1),e(X1,lfe),e(lfe,JAo),e(X1,YAo),e(X1,PD),e(PD,KAo),e(X1,ZAo),e(z,eLo),e(z,z1),e(z1,ife),e(ife,oLo),e(z1,rLo),e(z1,BD),e(BD,tLo),e(z1,aLo),e(Ke,nLo),e(Ke,W1),e(W1,sLo),e(W1,dfe),e(dfe,lLo),e(W1,iLo),e(W1,cfe),e(cfe,dLo),e(Ke,cLo),M(Q1,Ke,null),b(f,Xje,u),b(f,Bi,u),e(Bi,H1),e(H1,ffe),M(PA,ffe,null),e(Bi,fLo),e(Bi,mfe),e(mfe,mLo),b(f,zje,u),b(f,ko,u),M(BA,ko,null),e(ko,gLo),e(ko,Ii),e(Ii,hLo),e(Ii,ID),e(ID,pLo),e(Ii,_Lo),e(Ii,ND),e(ND,uLo),e(Ii,bLo),e(ko,vLo),e(ko,IA),e(IA,FLo),e(IA,gfe),e(gfe,TLo),e(IA,MLo),e(ko,ELo),e(ko,st),M(NA,st,null),e(st,CLo),e(st,hfe),e(hfe,wLo),e(st,ALo),e(st,Ni),e(Ni,LLo),e(Ni,pfe),e(pfe,yLo),e(Ni,xLo),e(Ni,qD),e(qD,$Lo),e(Ni,kLo),e(st,SLo),M(U1,st,null),e(ko,RLo),e(ko,Ze),M(qA,Ze,null),e(Ze,PLo),e(Ze,_fe),e(_fe,BLo),e(Ze,ILo),e(Ze,ka),e(ka,NLo),e(ka,ufe),e(ufe,qLo),e(ka,jLo),e(ka,bfe),e(bfe,DLo),e(ka,GLo),e(ka,vfe),e(vfe,OLo),e(ka,VLo),e(Ze,XLo),e(Ze,Q),e(Q,J1),e(J1,Ffe),e(Ffe,zLo),e(J1,WLo),e(J1,jD),e(jD,QLo),e(J1,HLo),e(Q,ULo),e(Q,Y1),e(Y1,Tfe),e(Tfe,JLo),e(Y1,YLo),e(Y1,DD),e(DD,KLo),e(Y1,ZLo),e(Q,eyo),e(Q,K1),e(K1,Mfe),e(Mfe,oyo),e(K1,ryo),e(K1,GD),e(GD,tyo),e(K1,ayo),e(Q,nyo),e(Q,Z1),e(Z1,Efe),e(Efe,syo),e(Z1,lyo),e(Z1,OD),e(OD,iyo),e(Z1,dyo),e(Q,cyo),e(Q,eb),e(eb,Cfe),e(Cfe,fyo),e(eb,myo),e(eb,VD),e(VD,gyo),e(eb,hyo),e(Q,pyo),e(Q,ob),e(ob,wfe),e(wfe,_yo),e(ob,uyo),e(ob,XD),e(XD,byo),e(ob,vyo),e(Q,Fyo),e(Q,rb),e(rb,Afe),e(Afe,Tyo),e(rb,Myo),e(rb,zD),e(zD,Eyo),e(rb,Cyo),e(Q,wyo),e(Q,tb),e(tb,Lfe),e(Lfe,Ayo),e(tb,Lyo),e(tb,WD),e(WD,yyo),e(tb,xyo),e(Q,$yo),e(Q,ab),e(ab,yfe),e(yfe,kyo),e(ab,Syo),e(ab,QD),e(QD,Ryo),e(ab,Pyo),e(Q,Byo),e(Q,nb),e(nb,xfe),e(xfe,Iyo),e(nb,Nyo),e(nb,HD),e(HD,qyo),e(nb,jyo),e(Q,Dyo),e(Q,sb),e(sb,$fe),e($fe,Gyo),e(sb,Oyo),e(sb,UD),e(UD,Vyo),e(sb,Xyo),e(Q,zyo),e(Q,lb),e(lb,kfe),e(kfe,Wyo),e(lb,Qyo),e(lb,JD),e(JD,Hyo),e(lb,Uyo),e(Q,Jyo),e(Q,ib),e(ib,Sfe),e(Sfe,Yyo),e(ib,Kyo),e(ib,YD),e(YD,Zyo),e(ib,e8o),e(Q,o8o),e(Q,db),e(db,Rfe),e(Rfe,r8o),e(db,t8o),e(db,KD),e(KD,a8o),e(db,n8o),e(Q,s8o),e(Q,cb),e(cb,Pfe),e(Pfe,l8o),e(cb,i8o),e(cb,ZD),e(ZD,d8o),e(cb,c8o),e(Q,f8o),e(Q,fb),e(fb,Bfe),e(Bfe,m8o),e(fb,g8o),e(fb,eG),e(eG,h8o),e(fb,p8o),e(Q,_8o),e(Q,mb),e(mb,Ife),e(Ife,u8o),e(mb,b8o),e(mb,oG),e(oG,v8o),e(mb,F8o),e(Q,T8o),e(Q,gb),e(gb,Nfe),e(Nfe,M8o),e(gb,E8o),e(gb,rG),e(rG,C8o),e(gb,w8o),e(Q,A8o),e(Q,hb),e(hb,qfe),e(qfe,L8o),e(hb,y8o),e(hb,tG),e(tG,x8o),e(hb,$8o),e(Q,k8o),e(Q,pb),e(pb,jfe),e(jfe,S8o),e(pb,R8o),e(pb,aG),e(aG,P8o),e(pb,B8o),e(Q,I8o),e(Q,_b),e(_b,Dfe),e(Dfe,N8o),e(_b,q8o),e(_b,nG),e(nG,j8o),e(_b,D8o),e(Q,G8o),e(Q,ub),e(ub,Gfe),e(Gfe,O8o),e(ub,V8o),e(ub,sG),e(sG,X8o),e(ub,z8o),e(Q,W8o),e(Q,bb),e(bb,Ofe),e(Ofe,Q8o),e(bb,H8o),e(bb,lG),e(lG,U8o),e(bb,J8o),e(Q,Y8o),e(Q,vb),e(vb,Vfe),e(Vfe,K8o),e(vb,Z8o),e(vb,iG),e(iG,exo),e(vb,oxo),e(Q,rxo),e(Q,Fb),e(Fb,Xfe),e(Xfe,txo),e(Fb,axo),e(Fb,dG),e(dG,nxo),e(Fb,sxo),e(Q,lxo),e(Q,Tb),e(Tb,zfe),e(zfe,ixo),e(Tb,dxo),e(Tb,cG),e(cG,cxo),e(Tb,fxo),e(Q,mxo),e(Q,Mb),e(Mb,Wfe),e(Wfe,gxo),e(Mb,hxo),e(Mb,fG),e(fG,pxo),e(Mb,_xo),e(Q,uxo),e(Q,Eb),e(Eb,Qfe),e(Qfe,bxo),e(Eb,vxo),e(Eb,mG),e(mG,Fxo),e(Eb,Txo),e(Q,Mxo),e(Q,Cb),e(Cb,Hfe),e(Hfe,Exo),e(Cb,Cxo),e(Cb,gG),e(gG,wxo),e(Cb,Axo),e(Q,Lxo),e(Q,wb),e(wb,Ufe),e(Ufe,yxo),e(wb,xxo),e(wb,hG),e(hG,$xo),e(wb,kxo),e(Q,Sxo),e(Q,Ab),e(Ab,Jfe),e(Jfe,Rxo),e(Ab,Pxo),e(Ab,pG),e(pG,Bxo),e(Ab,Ixo),e(Q,Nxo),e(Q,Lb),e(Lb,Yfe),e(Yfe,qxo),e(Lb,jxo),e(Lb,Kfe),e(Kfe,Dxo),e(Lb,Gxo),e(Q,Oxo),e(Q,yb),e(yb,Zfe),e(Zfe,Vxo),e(yb,Xxo),e(yb,_G),e(_G,zxo),e(yb,Wxo),e(Q,Qxo),e(Q,xb),e(xb,eme),e(eme,Hxo),e(xb,Uxo),e(xb,uG),e(uG,Jxo),e(xb,Yxo),e(Q,Kxo),e(Q,$b),e($b,ome),e(ome,Zxo),e($b,e$o),e($b,bG),e(bG,o$o),e($b,r$o),e(Q,t$o),e(Q,kb),e(kb,rme),e(rme,a$o),e(kb,n$o),e(kb,vG),e(vG,s$o),e(kb,l$o),e(Ze,i$o),e(Ze,Sb),e(Sb,d$o),e(Sb,tme),e(tme,c$o),e(Sb,f$o),e(Sb,ame),e(ame,m$o),e(Ze,g$o),M(Rb,Ze,null),b(f,Wje,u),b(f,qi,u),e(qi,Pb),e(Pb,nme),M(jA,nme,null),e(qi,h$o),e(qi,sme),e(sme,p$o),b(f,Qje,u),b(f,So,u),M(DA,So,null),e(So,_$o),e(So,ji),e(ji,u$o),e(ji,FG),e(FG,b$o),e(ji,v$o),e(ji,TG),e(TG,F$o),e(ji,T$o),e(So,M$o),e(So,GA),e(GA,E$o),e(GA,lme),e(lme,C$o),e(GA,w$o),e(So,A$o),e(So,lt),M(OA,lt,null),e(lt,L$o),e(lt,ime),e(ime,y$o),e(lt,x$o),e(lt,Di),e(Di,$$o),e(Di,dme),e(dme,k$o),e(Di,S$o),e(Di,MG),e(MG,R$o),e(Di,P$o),e(lt,B$o),M(Bb,lt,null),e(So,I$o),e(So,eo),M(VA,eo,null),e(eo,N$o),e(eo,cme),e(cme,q$o),e(eo,j$o),e(eo,Sa),e(Sa,D$o),e(Sa,fme),e(fme,G$o),e(Sa,O$o),e(Sa,mme),e(mme,V$o),e(Sa,X$o),e(Sa,gme),e(gme,z$o),e(Sa,W$o),e(eo,Q$o),e(eo,_e),e(_e,Ib),e(Ib,hme),e(hme,H$o),e(Ib,U$o),e(Ib,EG),e(EG,J$o),e(Ib,Y$o),e(_e,K$o),e(_e,Nb),e(Nb,pme),e(pme,Z$o),e(Nb,eko),e(Nb,CG),e(CG,oko),e(Nb,rko),e(_e,tko),e(_e,qb),e(qb,_me),e(_me,ako),e(qb,nko),e(qb,wG),e(wG,sko),e(qb,lko),e(_e,iko),e(_e,jb),e(jb,ume),e(ume,dko),e(jb,cko),e(jb,AG),e(AG,fko),e(jb,mko),e(_e,gko),e(_e,Db),e(Db,bme),e(bme,hko),e(Db,pko),e(Db,LG),e(LG,_ko),e(Db,uko),e(_e,bko),e(_e,Gb),e(Gb,vme),e(vme,vko),e(Gb,Fko),e(Gb,yG),e(yG,Tko),e(Gb,Mko),e(_e,Eko),e(_e,Ob),e(Ob,Fme),e(Fme,Cko),e(Ob,wko),e(Ob,xG),e(xG,Ako),e(Ob,Lko),e(_e,yko),e(_e,Vb),e(Vb,Tme),e(Tme,xko),e(Vb,$ko),e(Vb,$G),e($G,kko),e(Vb,Sko),e(_e,Rko),e(_e,Xb),e(Xb,Mme),e(Mme,Pko),e(Xb,Bko),e(Xb,kG),e(kG,Iko),e(Xb,Nko),e(_e,qko),e(_e,zb),e(zb,Eme),e(Eme,jko),e(zb,Dko),e(zb,SG),e(SG,Gko),e(zb,Oko),e(_e,Vko),e(_e,Wb),e(Wb,Cme),e(Cme,Xko),e(Wb,zko),e(Wb,RG),e(RG,Wko),e(Wb,Qko),e(_e,Hko),e(_e,Qb),e(Qb,wme),e(wme,Uko),e(Qb,Jko),e(Qb,PG),e(PG,Yko),e(Qb,Kko),e(_e,Zko),e(_e,Hb),e(Hb,Ame),e(Ame,eSo),e(Hb,oSo),e(Hb,BG),e(BG,rSo),e(Hb,tSo),e(_e,aSo),e(_e,Ub),e(Ub,Lme),e(Lme,nSo),e(Ub,sSo),e(Ub,IG),e(IG,lSo),e(Ub,iSo),e(_e,dSo),e(_e,Jb),e(Jb,yme),e(yme,cSo),e(Jb,fSo),e(Jb,NG),e(NG,mSo),e(Jb,gSo),e(_e,hSo),e(_e,Yb),e(Yb,xme),e(xme,pSo),e(Yb,_So),e(Yb,qG),e(qG,uSo),e(Yb,bSo),e(eo,vSo),e(eo,Kb),e(Kb,FSo),e(Kb,$me),e($me,TSo),e(Kb,MSo),e(Kb,kme),e(kme,ESo),e(eo,CSo),M(Zb,eo,null),b(f,Hje,u),b(f,Gi,u),e(Gi,e2),e(e2,Sme),M(XA,Sme,null),e(Gi,wSo),e(Gi,Rme),e(Rme,ASo),b(f,Uje,u),b(f,Ro,u),M(zA,Ro,null),e(Ro,LSo),e(Ro,Oi),e(Oi,ySo),e(Oi,jG),e(jG,xSo),e(Oi,$So),e(Oi,DG),e(DG,kSo),e(Oi,SSo),e(Ro,RSo),e(Ro,WA),e(WA,PSo),e(WA,Pme),e(Pme,BSo),e(WA,ISo),e(Ro,NSo),e(Ro,it),M(QA,it,null),e(it,qSo),e(it,Bme),e(Bme,jSo),e(it,DSo),e(it,Vi),e(Vi,GSo),e(Vi,Ime),e(Ime,OSo),e(Vi,VSo),e(Vi,GG),e(GG,XSo),e(Vi,zSo),e(it,WSo),M(o2,it,null),e(Ro,QSo),e(Ro,oo),M(HA,oo,null),e(oo,HSo),e(oo,Nme),e(Nme,USo),e(oo,JSo),e(oo,Ra),e(Ra,YSo),e(Ra,qme),e(qme,KSo),e(Ra,ZSo),e(Ra,jme),e(jme,eRo),e(Ra,oRo),e(Ra,Dme),e(Dme,rRo),e(Ra,tRo),e(oo,aRo),e(oo,N),e(N,r2),e(r2,Gme),e(Gme,nRo),e(r2,sRo),e(r2,OG),e(OG,lRo),e(r2,iRo),e(N,dRo),e(N,t2),e(t2,Ome),e(Ome,cRo),e(t2,fRo),e(t2,VG),e(VG,mRo),e(t2,gRo),e(N,hRo),e(N,a2),e(a2,Vme),e(Vme,pRo),e(a2,_Ro),e(a2,XG),e(XG,uRo),e(a2,bRo),e(N,vRo),e(N,n2),e(n2,Xme),e(Xme,FRo),e(n2,TRo),e(n2,zG),e(zG,MRo),e(n2,ERo),e(N,CRo),e(N,s2),e(s2,zme),e(zme,wRo),e(s2,ARo),e(s2,WG),e(WG,LRo),e(s2,yRo),e(N,xRo),e(N,l2),e(l2,Wme),e(Wme,$Ro),e(l2,kRo),e(l2,QG),e(QG,SRo),e(l2,RRo),e(N,PRo),e(N,i2),e(i2,Qme),e(Qme,BRo),e(i2,IRo),e(i2,HG),e(HG,NRo),e(i2,qRo),e(N,jRo),e(N,d2),e(d2,Hme),e(Hme,DRo),e(d2,GRo),e(d2,UG),e(UG,ORo),e(d2,VRo),e(N,XRo),e(N,c2),e(c2,Ume),e(Ume,zRo),e(c2,WRo),e(c2,JG),e(JG,QRo),e(c2,HRo),e(N,URo),e(N,f2),e(f2,Jme),e(Jme,JRo),e(f2,YRo),e(f2,YG),e(YG,KRo),e(f2,ZRo),e(N,ePo),e(N,m2),e(m2,Yme),e(Yme,oPo),e(m2,rPo),e(m2,KG),e(KG,tPo),e(m2,aPo),e(N,nPo),e(N,g2),e(g2,Kme),e(Kme,sPo),e(g2,lPo),e(g2,ZG),e(ZG,iPo),e(g2,dPo),e(N,cPo),e(N,h2),e(h2,Zme),e(Zme,fPo),e(h2,mPo),e(h2,eO),e(eO,gPo),e(h2,hPo),e(N,pPo),e(N,p2),e(p2,ege),e(ege,_Po),e(p2,uPo),e(p2,oO),e(oO,bPo),e(p2,vPo),e(N,FPo),e(N,_2),e(_2,oge),e(oge,TPo),e(_2,MPo),e(_2,rO),e(rO,EPo),e(_2,CPo),e(N,wPo),e(N,u2),e(u2,rge),e(rge,APo),e(u2,LPo),e(u2,tO),e(tO,yPo),e(u2,xPo),e(N,$Po),e(N,b2),e(b2,tge),e(tge,kPo),e(b2,SPo),e(b2,aO),e(aO,RPo),e(b2,PPo),e(N,BPo),e(N,v2),e(v2,age),e(age,IPo),e(v2,NPo),e(v2,nO),e(nO,qPo),e(v2,jPo),e(N,DPo),e(N,F2),e(F2,nge),e(nge,GPo),e(F2,OPo),e(F2,sO),e(sO,VPo),e(F2,XPo),e(N,zPo),e(N,T2),e(T2,sge),e(sge,WPo),e(T2,QPo),e(T2,lO),e(lO,HPo),e(T2,UPo),e(N,JPo),e(N,M2),e(M2,lge),e(lge,YPo),e(M2,KPo),e(M2,iO),e(iO,ZPo),e(M2,eBo),e(N,oBo),e(N,E2),e(E2,ige),e(ige,rBo),e(E2,tBo),e(E2,dO),e(dO,aBo),e(E2,nBo),e(N,sBo),e(N,C2),e(C2,dge),e(dge,lBo),e(C2,iBo),e(C2,cO),e(cO,dBo),e(C2,cBo),e(N,fBo),e(N,w2),e(w2,cge),e(cge,mBo),e(w2,gBo),e(w2,fO),e(fO,hBo),e(w2,pBo),e(N,_Bo),e(N,A2),e(A2,fge),e(fge,uBo),e(A2,bBo),e(A2,mO),e(mO,vBo),e(A2,FBo),e(N,TBo),e(N,L2),e(L2,mge),e(mge,MBo),e(L2,EBo),e(L2,gO),e(gO,CBo),e(L2,wBo),e(N,ABo),e(N,y2),e(y2,gge),e(gge,LBo),e(y2,yBo),e(y2,hO),e(hO,xBo),e(y2,$Bo),e(N,kBo),e(N,x2),e(x2,hge),e(hge,SBo),e(x2,RBo),e(x2,pO),e(pO,PBo),e(x2,BBo),e(N,IBo),e(N,$2),e($2,pge),e(pge,NBo),e($2,qBo),e($2,_O),e(_O,jBo),e($2,DBo),e(N,GBo),e(N,k2),e(k2,_ge),e(_ge,OBo),e(k2,VBo),e(k2,uO),e(uO,XBo),e(k2,zBo),e(N,WBo),e(N,S2),e(S2,uge),e(uge,QBo),e(S2,HBo),e(S2,bO),e(bO,UBo),e(S2,JBo),e(N,YBo),e(N,R2),e(R2,bge),e(bge,KBo),e(R2,ZBo),e(R2,vO),e(vO,eIo),e(R2,oIo),e(N,rIo),e(N,P2),e(P2,vge),e(vge,tIo),e(P2,aIo),e(P2,FO),e(FO,nIo),e(P2,sIo),e(N,lIo),e(N,B2),e(B2,Fge),e(Fge,iIo),e(B2,dIo),e(B2,TO),e(TO,cIo),e(B2,fIo),e(N,mIo),e(N,I2),e(I2,Tge),e(Tge,gIo),e(I2,hIo),e(I2,MO),e(MO,pIo),e(I2,_Io),e(N,uIo),e(N,N2),e(N2,Mge),e(Mge,bIo),e(N2,vIo),e(N2,EO),e(EO,FIo),e(N2,TIo),e(N,MIo),e(N,q2),e(q2,Ege),e(Ege,EIo),e(q2,CIo),e(q2,CO),e(CO,wIo),e(q2,AIo),e(N,LIo),e(N,j2),e(j2,Cge),e(Cge,yIo),e(j2,xIo),e(j2,wO),e(wO,$Io),e(j2,kIo),e(N,SIo),e(N,D2),e(D2,wge),e(wge,RIo),e(D2,PIo),e(D2,AO),e(AO,BIo),e(D2,IIo),e(N,NIo),e(N,G2),e(G2,Age),e(Age,qIo),e(G2,jIo),e(G2,LO),e(LO,DIo),e(G2,GIo),e(N,OIo),e(N,O2),e(O2,Lge),e(Lge,VIo),e(O2,XIo),e(O2,yO),e(yO,zIo),e(O2,WIo),e(N,QIo),e(N,V2),e(V2,yge),e(yge,HIo),e(V2,UIo),e(V2,xO),e(xO,JIo),e(V2,YIo),e(N,KIo),e(N,X2),e(X2,xge),e(xge,ZIo),e(X2,eNo),e(X2,$O),e($O,oNo),e(X2,rNo),e(N,tNo),e(N,z2),e(z2,$ge),e($ge,aNo),e(z2,nNo),e(z2,kO),e(kO,sNo),e(z2,lNo),e(N,iNo),e(N,W2),e(W2,kge),e(kge,dNo),e(W2,cNo),e(W2,SO),e(SO,fNo),e(W2,mNo),e(N,gNo),e(N,Q2),e(Q2,Sge),e(Sge,hNo),e(Q2,pNo),e(Q2,RO),e(RO,_No),e(Q2,uNo),e(N,bNo),e(N,H2),e(H2,Rge),e(Rge,vNo),e(H2,FNo),e(H2,PO),e(PO,TNo),e(H2,MNo),e(N,ENo),e(N,U2),e(U2,Pge),e(Pge,CNo),e(U2,wNo),e(U2,BO),e(BO,ANo),e(U2,LNo),e(oo,yNo),e(oo,J2),e(J2,xNo),e(J2,Bge),e(Bge,$No),e(J2,kNo),e(J2,Ige),e(Ige,SNo),e(oo,RNo),M(Y2,oo,null),b(f,Jje,u),b(f,Xi,u),e(Xi,K2),e(K2,Nge),M(UA,Nge,null),e(Xi,PNo),e(Xi,qge),e(qge,BNo),b(f,Yje,u),b(f,Po,u),M(JA,Po,null),e(Po,INo),e(Po,zi),e(zi,NNo),e(zi,IO),e(IO,qNo),e(zi,jNo),e(zi,NO),e(NO,DNo),e(zi,GNo),e(Po,ONo),e(Po,YA),e(YA,VNo),e(YA,jge),e(jge,XNo),e(YA,zNo),e(Po,WNo),e(Po,dt),M(KA,dt,null),e(dt,QNo),e(dt,Dge),e(Dge,HNo),e(dt,UNo),e(dt,Wi),e(Wi,JNo),e(Wi,Gge),e(Gge,YNo),e(Wi,KNo),e(Wi,qO),e(qO,ZNo),e(Wi,eqo),e(dt,oqo),M(Z2,dt,null),e(Po,rqo),e(Po,ro),M(ZA,ro,null),e(ro,tqo),e(ro,Oge),e(Oge,aqo),e(ro,nqo),e(ro,Pa),e(Pa,sqo),e(Pa,Vge),e(Vge,lqo),e(Pa,iqo),e(Pa,Xge),e(Xge,dqo),e(Pa,cqo),e(Pa,zge),e(zge,fqo),e(Pa,mqo),e(ro,gqo),e(ro,Z),e(Z,ev),e(ev,Wge),e(Wge,hqo),e(ev,pqo),e(ev,jO),e(jO,_qo),e(ev,uqo),e(Z,bqo),e(Z,ov),e(ov,Qge),e(Qge,vqo),e(ov,Fqo),e(ov,DO),e(DO,Tqo),e(ov,Mqo),e(Z,Eqo),e(Z,rv),e(rv,Hge),e(Hge,Cqo),e(rv,wqo),e(rv,GO),e(GO,Aqo),e(rv,Lqo),e(Z,yqo),e(Z,tv),e(tv,Uge),e(Uge,xqo),e(tv,$qo),e(tv,OO),e(OO,kqo),e(tv,Sqo),e(Z,Rqo),e(Z,av),e(av,Jge),e(Jge,Pqo),e(av,Bqo),e(av,VO),e(VO,Iqo),e(av,Nqo),e(Z,qqo),e(Z,nv),e(nv,Yge),e(Yge,jqo),e(nv,Dqo),e(nv,XO),e(XO,Gqo),e(nv,Oqo),e(Z,Vqo),e(Z,sv),e(sv,Kge),e(Kge,Xqo),e(sv,zqo),e(sv,zO),e(zO,Wqo),e(sv,Qqo),e(Z,Hqo),e(Z,lv),e(lv,Zge),e(Zge,Uqo),e(lv,Jqo),e(lv,WO),e(WO,Yqo),e(lv,Kqo),e(Z,Zqo),e(Z,iv),e(iv,ehe),e(ehe,ejo),e(iv,ojo),e(iv,QO),e(QO,rjo),e(iv,tjo),e(Z,ajo),e(Z,dv),e(dv,ohe),e(ohe,njo),e(dv,sjo),e(dv,HO),e(HO,ljo),e(dv,ijo),e(Z,djo),e(Z,cv),e(cv,rhe),e(rhe,cjo),e(cv,fjo),e(cv,UO),e(UO,mjo),e(cv,gjo),e(Z,hjo),e(Z,fv),e(fv,the),e(the,pjo),e(fv,_jo),e(fv,JO),e(JO,ujo),e(fv,bjo),e(Z,vjo),e(Z,mv),e(mv,ahe),e(ahe,Fjo),e(mv,Tjo),e(mv,YO),e(YO,Mjo),e(mv,Ejo),e(Z,Cjo),e(Z,gv),e(gv,nhe),e(nhe,wjo),e(gv,Ajo),e(gv,KO),e(KO,Ljo),e(gv,yjo),e(Z,xjo),e(Z,hv),e(hv,she),e(she,$jo),e(hv,kjo),e(hv,ZO),e(ZO,Sjo),e(hv,Rjo),e(Z,Pjo),e(Z,pv),e(pv,lhe),e(lhe,Bjo),e(pv,Ijo),e(pv,eV),e(eV,Njo),e(pv,qjo),e(Z,jjo),e(Z,_v),e(_v,ihe),e(ihe,Djo),e(_v,Gjo),e(_v,oV),e(oV,Ojo),e(_v,Vjo),e(Z,Xjo),e(Z,uv),e(uv,dhe),e(dhe,zjo),e(uv,Wjo),e(uv,rV),e(rV,Qjo),e(uv,Hjo),e(Z,Ujo),e(Z,bv),e(bv,che),e(che,Jjo),e(bv,Yjo),e(bv,tV),e(tV,Kjo),e(bv,Zjo),e(Z,eDo),e(Z,vv),e(vv,fhe),e(fhe,oDo),e(vv,rDo),e(vv,aV),e(aV,tDo),e(vv,aDo),e(Z,nDo),e(Z,Fv),e(Fv,mhe),e(mhe,sDo),e(Fv,lDo),e(Fv,nV),e(nV,iDo),e(Fv,dDo),e(Z,cDo),e(Z,Tv),e(Tv,ghe),e(ghe,fDo),e(Tv,mDo),e(Tv,sV),e(sV,gDo),e(Tv,hDo),e(Z,pDo),e(Z,Mv),e(Mv,hhe),e(hhe,_Do),e(Mv,uDo),e(Mv,lV),e(lV,bDo),e(Mv,vDo),e(Z,FDo),e(Z,Ev),e(Ev,phe),e(phe,TDo),e(Ev,MDo),e(Ev,iV),e(iV,EDo),e(Ev,CDo),e(Z,wDo),e(Z,Cv),e(Cv,_he),e(_he,ADo),e(Cv,LDo),e(Cv,dV),e(dV,yDo),e(Cv,xDo),e(Z,$Do),e(Z,wv),e(wv,uhe),e(uhe,kDo),e(wv,SDo),e(wv,cV),e(cV,RDo),e(wv,PDo),e(Z,BDo),e(Z,Av),e(Av,bhe),e(bhe,IDo),e(Av,NDo),e(Av,fV),e(fV,qDo),e(Av,jDo),e(Z,DDo),e(Z,Lv),e(Lv,vhe),e(vhe,GDo),e(Lv,ODo),e(Lv,mV),e(mV,VDo),e(Lv,XDo),e(Z,zDo),e(Z,yv),e(yv,Fhe),e(Fhe,WDo),e(yv,QDo),e(yv,gV),e(gV,HDo),e(yv,UDo),e(ro,JDo),e(ro,xv),e(xv,YDo),e(xv,The),e(The,KDo),e(xv,ZDo),e(xv,Mhe),e(Mhe,eGo),e(ro,oGo),M($v,ro,null),b(f,Kje,u),b(f,Qi,u),e(Qi,kv),e(kv,Ehe),M(eL,Ehe,null),e(Qi,rGo),e(Qi,Che),e(Che,tGo),b(f,Zje,u),b(f,Bo,u),M(oL,Bo,null),e(Bo,aGo),e(Bo,Hi),e(Hi,nGo),e(Hi,hV),e(hV,sGo),e(Hi,lGo),e(Hi,pV),e(pV,iGo),e(Hi,dGo),e(Bo,cGo),e(Bo,rL),e(rL,fGo),e(rL,whe),e(whe,mGo),e(rL,gGo),e(Bo,hGo),e(Bo,ct),M(tL,ct,null),e(ct,pGo),e(ct,Ahe),e(Ahe,_Go),e(ct,uGo),e(ct,Ui),e(Ui,bGo),e(Ui,Lhe),e(Lhe,vGo),e(Ui,FGo),e(Ui,_V),e(_V,TGo),e(Ui,MGo),e(ct,EGo),M(Sv,ct,null),e(Bo,CGo),e(Bo,to),M(aL,to,null),e(to,wGo),e(to,yhe),e(yhe,AGo),e(to,LGo),e(to,Ba),e(Ba,yGo),e(Ba,xhe),e(xhe,xGo),e(Ba,$Go),e(Ba,$he),e($he,kGo),e(Ba,SGo),e(Ba,khe),e(khe,RGo),e(Ba,PGo),e(to,BGo),e(to,Yr),e(Yr,Rv),e(Rv,She),e(She,IGo),e(Rv,NGo),e(Rv,uV),e(uV,qGo),e(Rv,jGo),e(Yr,DGo),e(Yr,Pv),e(Pv,Rhe),e(Rhe,GGo),e(Pv,OGo),e(Pv,bV),e(bV,VGo),e(Pv,XGo),e(Yr,zGo),e(Yr,Bv),e(Bv,Phe),e(Phe,WGo),e(Bv,QGo),e(Bv,vV),e(vV,HGo),e(Bv,UGo),e(Yr,JGo),e(Yr,Iv),e(Iv,Bhe),e(Bhe,YGo),e(Iv,KGo),e(Iv,FV),e(FV,ZGo),e(Iv,eOo),e(Yr,oOo),e(Yr,Nv),e(Nv,Ihe),e(Ihe,rOo),e(Nv,tOo),e(Nv,TV),e(TV,aOo),e(Nv,nOo),e(to,sOo),e(to,qv),e(qv,lOo),e(qv,Nhe),e(Nhe,iOo),e(qv,dOo),e(qv,qhe),e(qhe,cOo),e(to,fOo),M(jv,to,null),b(f,eDe,u),b(f,Ji,u),e(Ji,Dv),e(Dv,jhe),M(nL,jhe,null),e(Ji,mOo),e(Ji,Dhe),e(Dhe,gOo),b(f,oDe,u),b(f,Io,u),M(sL,Io,null),e(Io,hOo),e(Io,Yi),e(Yi,pOo),e(Yi,MV),e(MV,_Oo),e(Yi,uOo),e(Yi,EV),e(EV,bOo),e(Yi,vOo),e(Io,FOo),e(Io,lL),e(lL,TOo),e(lL,Ghe),e(Ghe,MOo),e(lL,EOo),e(Io,COo),e(Io,ft),M(iL,ft,null),e(ft,wOo),e(ft,Ohe),e(Ohe,AOo),e(ft,LOo),e(ft,Ki),e(Ki,yOo),e(Ki,Vhe),e(Vhe,xOo),e(Ki,$Oo),e(Ki,CV),e(CV,kOo),e(Ki,SOo),e(ft,ROo),M(Gv,ft,null),e(Io,POo),e(Io,ao),M(dL,ao,null),e(ao,BOo),e(ao,Xhe),e(Xhe,IOo),e(ao,NOo),e(ao,Ia),e(Ia,qOo),e(Ia,zhe),e(zhe,jOo),e(Ia,DOo),e(Ia,Whe),e(Whe,GOo),e(Ia,OOo),e(Ia,Qhe),e(Qhe,VOo),e(Ia,XOo),e(ao,zOo),e(ao,H),e(H,Ov),e(Ov,Hhe),e(Hhe,WOo),e(Ov,QOo),e(Ov,wV),e(wV,HOo),e(Ov,UOo),e(H,JOo),e(H,Vv),e(Vv,Uhe),e(Uhe,YOo),e(Vv,KOo),e(Vv,AV),e(AV,ZOo),e(Vv,eVo),e(H,oVo),e(H,Xv),e(Xv,Jhe),e(Jhe,rVo),e(Xv,tVo),e(Xv,LV),e(LV,aVo),e(Xv,nVo),e(H,sVo),e(H,zv),e(zv,Yhe),e(Yhe,lVo),e(zv,iVo),e(zv,yV),e(yV,dVo),e(zv,cVo),e(H,fVo),e(H,Wv),e(Wv,Khe),e(Khe,mVo),e(Wv,gVo),e(Wv,xV),e(xV,hVo),e(Wv,pVo),e(H,_Vo),e(H,Qv),e(Qv,Zhe),e(Zhe,uVo),e(Qv,bVo),e(Qv,$V),e($V,vVo),e(Qv,FVo),e(H,TVo),e(H,Hv),e(Hv,epe),e(epe,MVo),e(Hv,EVo),e(Hv,kV),e(kV,CVo),e(Hv,wVo),e(H,AVo),e(H,Uv),e(Uv,ope),e(ope,LVo),e(Uv,yVo),e(Uv,SV),e(SV,xVo),e(Uv,$Vo),e(H,kVo),e(H,Jv),e(Jv,rpe),e(rpe,SVo),e(Jv,RVo),e(Jv,RV),e(RV,PVo),e(Jv,BVo),e(H,IVo),e(H,Yv),e(Yv,tpe),e(tpe,NVo),e(Yv,qVo),e(Yv,PV),e(PV,jVo),e(Yv,DVo),e(H,GVo),e(H,Kv),e(Kv,ape),e(ape,OVo),e(Kv,VVo),e(Kv,BV),e(BV,XVo),e(Kv,zVo),e(H,WVo),e(H,Zv),e(Zv,npe),e(npe,QVo),e(Zv,HVo),e(Zv,IV),e(IV,UVo),e(Zv,JVo),e(H,YVo),e(H,e3),e(e3,spe),e(spe,KVo),e(e3,ZVo),e(e3,NV),e(NV,eXo),e(e3,oXo),e(H,rXo),e(H,o3),e(o3,lpe),e(lpe,tXo),e(o3,aXo),e(o3,qV),e(qV,nXo),e(o3,sXo),e(H,lXo),e(H,r3),e(r3,ipe),e(ipe,iXo),e(r3,dXo),e(r3,jV),e(jV,cXo),e(r3,fXo),e(H,mXo),e(H,t3),e(t3,dpe),e(dpe,gXo),e(t3,hXo),e(t3,DV),e(DV,pXo),e(t3,_Xo),e(H,uXo),e(H,a3),e(a3,cpe),e(cpe,bXo),e(a3,vXo),e(a3,GV),e(GV,FXo),e(a3,TXo),e(H,MXo),e(H,n3),e(n3,fpe),e(fpe,EXo),e(n3,CXo),e(n3,OV),e(OV,wXo),e(n3,AXo),e(H,LXo),e(H,s3),e(s3,mpe),e(mpe,yXo),e(s3,xXo),e(s3,VV),e(VV,$Xo),e(s3,kXo),e(H,SXo),e(H,l3),e(l3,gpe),e(gpe,RXo),e(l3,PXo),e(l3,XV),e(XV,BXo),e(l3,IXo),e(H,NXo),e(H,i3),e(i3,hpe),e(hpe,qXo),e(i3,jXo),e(i3,zV),e(zV,DXo),e(i3,GXo),e(H,OXo),e(H,d3),e(d3,ppe),e(ppe,VXo),e(d3,XXo),e(d3,WV),e(WV,zXo),e(d3,WXo),e(H,QXo),e(H,c3),e(c3,_pe),e(_pe,HXo),e(c3,UXo),e(c3,QV),e(QV,JXo),e(c3,YXo),e(H,KXo),e(H,f3),e(f3,upe),e(upe,ZXo),e(f3,ezo),e(f3,HV),e(HV,ozo),e(f3,rzo),e(H,tzo),e(H,m3),e(m3,bpe),e(bpe,azo),e(m3,nzo),e(m3,UV),e(UV,szo),e(m3,lzo),e(H,izo),e(H,g3),e(g3,vpe),e(vpe,dzo),e(g3,czo),e(g3,JV),e(JV,fzo),e(g3,mzo),e(H,gzo),e(H,h3),e(h3,Fpe),e(Fpe,hzo),e(h3,pzo),e(h3,YV),e(YV,_zo),e(h3,uzo),e(H,bzo),e(H,p3),e(p3,Tpe),e(Tpe,vzo),e(p3,Fzo),e(p3,KV),e(KV,Tzo),e(p3,Mzo),e(H,Ezo),e(H,_3),e(_3,Mpe),e(Mpe,Czo),e(_3,wzo),e(_3,ZV),e(ZV,Azo),e(_3,Lzo),e(H,yzo),e(H,u3),e(u3,Epe),e(Epe,xzo),e(u3,$zo),e(u3,eX),e(eX,kzo),e(u3,Szo),e(H,Rzo),e(H,b3),e(b3,Cpe),e(Cpe,Pzo),e(b3,Bzo),e(b3,oX),e(oX,Izo),e(b3,Nzo),e(H,qzo),e(H,v3),e(v3,wpe),e(wpe,jzo),e(v3,Dzo),e(v3,rX),e(rX,Gzo),e(v3,Ozo),e(H,Vzo),e(H,F3),e(F3,Ape),e(Ape,Xzo),e(F3,zzo),e(F3,tX),e(tX,Wzo),e(F3,Qzo),e(H,Hzo),e(H,T3),e(T3,Lpe),e(Lpe,Uzo),e(T3,Jzo),e(T3,aX),e(aX,Yzo),e(T3,Kzo),e(H,Zzo),e(H,M3),e(M3,ype),e(ype,eWo),e(M3,oWo),e(M3,nX),e(nX,rWo),e(M3,tWo),e(ao,aWo),e(ao,E3),e(E3,nWo),e(E3,xpe),e(xpe,sWo),e(E3,lWo),e(E3,$pe),e($pe,iWo),e(ao,dWo),M(C3,ao,null),b(f,rDe,u),b(f,Zi,u),e(Zi,w3),e(w3,kpe),M(cL,kpe,null),e(Zi,cWo),e(Zi,Spe),e(Spe,fWo),b(f,tDe,u),b(f,No,u),M(fL,No,null),e(No,mWo),e(No,ed),e(ed,gWo),e(ed,sX),e(sX,hWo),e(ed,pWo),e(ed,lX),e(lX,_Wo),e(ed,uWo),e(No,bWo),e(No,mL),e(mL,vWo),e(mL,Rpe),e(Rpe,FWo),e(mL,TWo),e(No,MWo),e(No,mt),M(gL,mt,null),e(mt,EWo),e(mt,Ppe),e(Ppe,CWo),e(mt,wWo),e(mt,od),e(od,AWo),e(od,Bpe),e(Bpe,LWo),e(od,yWo),e(od,iX),e(iX,xWo),e(od,$Wo),e(mt,kWo),M(A3,mt,null),e(No,SWo),e(No,no),M(hL,no,null),e(no,RWo),e(no,Ipe),e(Ipe,PWo),e(no,BWo),e(no,Na),e(Na,IWo),e(Na,Npe),e(Npe,NWo),e(Na,qWo),e(Na,qpe),e(qpe,jWo),e(Na,DWo),e(Na,jpe),e(jpe,GWo),e(Na,OWo),e(no,VWo),e(no,V),e(V,L3),e(L3,Dpe),e(Dpe,XWo),e(L3,zWo),e(L3,dX),e(dX,WWo),e(L3,QWo),e(V,HWo),e(V,y3),e(y3,Gpe),e(Gpe,UWo),e(y3,JWo),e(y3,cX),e(cX,YWo),e(y3,KWo),e(V,ZWo),e(V,x3),e(x3,Ope),e(Ope,eQo),e(x3,oQo),e(x3,fX),e(fX,rQo),e(x3,tQo),e(V,aQo),e(V,$3),e($3,Vpe),e(Vpe,nQo),e($3,sQo),e($3,mX),e(mX,lQo),e($3,iQo),e(V,dQo),e(V,k3),e(k3,Xpe),e(Xpe,cQo),e(k3,fQo),e(k3,gX),e(gX,mQo),e(k3,gQo),e(V,hQo),e(V,S3),e(S3,zpe),e(zpe,pQo),e(S3,_Qo),e(S3,hX),e(hX,uQo),e(S3,bQo),e(V,vQo),e(V,R3),e(R3,Wpe),e(Wpe,FQo),e(R3,TQo),e(R3,pX),e(pX,MQo),e(R3,EQo),e(V,CQo),e(V,P3),e(P3,Qpe),e(Qpe,wQo),e(P3,AQo),e(P3,_X),e(_X,LQo),e(P3,yQo),e(V,xQo),e(V,B3),e(B3,Hpe),e(Hpe,$Qo),e(B3,kQo),e(B3,uX),e(uX,SQo),e(B3,RQo),e(V,PQo),e(V,I3),e(I3,Upe),e(Upe,BQo),e(I3,IQo),e(I3,bX),e(bX,NQo),e(I3,qQo),e(V,jQo),e(V,N3),e(N3,Jpe),e(Jpe,DQo),e(N3,GQo),e(N3,vX),e(vX,OQo),e(N3,VQo),e(V,XQo),e(V,q3),e(q3,Ype),e(Ype,zQo),e(q3,WQo),e(q3,FX),e(FX,QQo),e(q3,HQo),e(V,UQo),e(V,j3),e(j3,Kpe),e(Kpe,JQo),e(j3,YQo),e(j3,TX),e(TX,KQo),e(j3,ZQo),e(V,eHo),e(V,D3),e(D3,Zpe),e(Zpe,oHo),e(D3,rHo),e(D3,MX),e(MX,tHo),e(D3,aHo),e(V,nHo),e(V,G3),e(G3,e_e),e(e_e,sHo),e(G3,lHo),e(G3,EX),e(EX,iHo),e(G3,dHo),e(V,cHo),e(V,O3),e(O3,o_e),e(o_e,fHo),e(O3,mHo),e(O3,CX),e(CX,gHo),e(O3,hHo),e(V,pHo),e(V,V3),e(V3,r_e),e(r_e,_Ho),e(V3,uHo),e(V3,wX),e(wX,bHo),e(V3,vHo),e(V,FHo),e(V,X3),e(X3,t_e),e(t_e,THo),e(X3,MHo),e(X3,AX),e(AX,EHo),e(X3,CHo),e(V,wHo),e(V,z3),e(z3,a_e),e(a_e,AHo),e(z3,LHo),e(z3,LX),e(LX,yHo),e(z3,xHo),e(V,$Ho),e(V,W3),e(W3,n_e),e(n_e,kHo),e(W3,SHo),e(W3,yX),e(yX,RHo),e(W3,PHo),e(V,BHo),e(V,Q3),e(Q3,s_e),e(s_e,IHo),e(Q3,NHo),e(Q3,xX),e(xX,qHo),e(Q3,jHo),e(V,DHo),e(V,H3),e(H3,l_e),e(l_e,GHo),e(H3,OHo),e(H3,$X),e($X,VHo),e(H3,XHo),e(V,zHo),e(V,U3),e(U3,i_e),e(i_e,WHo),e(U3,QHo),e(U3,kX),e(kX,HHo),e(U3,UHo),e(V,JHo),e(V,J3),e(J3,d_e),e(d_e,YHo),e(J3,KHo),e(J3,SX),e(SX,ZHo),e(J3,eUo),e(V,oUo),e(V,Y3),e(Y3,c_e),e(c_e,rUo),e(Y3,tUo),e(Y3,RX),e(RX,aUo),e(Y3,nUo),e(V,sUo),e(V,K3),e(K3,f_e),e(f_e,lUo),e(K3,iUo),e(K3,PX),e(PX,dUo),e(K3,cUo),e(V,fUo),e(V,Z3),e(Z3,m_e),e(m_e,mUo),e(Z3,gUo),e(Z3,BX),e(BX,hUo),e(Z3,pUo),e(V,_Uo),e(V,eF),e(eF,g_e),e(g_e,uUo),e(eF,bUo),e(eF,IX),e(IX,vUo),e(eF,FUo),e(V,TUo),e(V,oF),e(oF,h_e),e(h_e,MUo),e(oF,EUo),e(oF,NX),e(NX,CUo),e(oF,wUo),e(V,AUo),e(V,rF),e(rF,p_e),e(p_e,LUo),e(rF,yUo),e(rF,qX),e(qX,xUo),e(rF,$Uo),e(V,kUo),e(V,tF),e(tF,__e),e(__e,SUo),e(tF,RUo),e(tF,jX),e(jX,PUo),e(tF,BUo),e(V,IUo),e(V,aF),e(aF,u_e),e(u_e,NUo),e(aF,qUo),e(aF,DX),e(DX,jUo),e(aF,DUo),e(V,GUo),e(V,nF),e(nF,b_e),e(b_e,OUo),e(nF,VUo),e(nF,GX),e(GX,XUo),e(nF,zUo),e(V,WUo),e(V,sF),e(sF,v_e),e(v_e,QUo),e(sF,HUo),e(sF,OX),e(OX,UUo),e(sF,JUo),e(V,YUo),e(V,lF),e(lF,F_e),e(F_e,KUo),e(lF,ZUo),e(lF,VX),e(VX,eJo),e(lF,oJo),e(V,rJo),e(V,iF),e(iF,T_e),e(T_e,tJo),e(iF,aJo),e(iF,XX),e(XX,nJo),e(iF,sJo),e(V,lJo),e(V,dF),e(dF,M_e),e(M_e,iJo),e(dF,dJo),e(dF,zX),e(zX,cJo),e(dF,fJo),e(V,mJo),e(V,cF),e(cF,E_e),e(E_e,gJo),e(cF,hJo),e(cF,WX),e(WX,pJo),e(cF,_Jo),e(V,uJo),e(V,fF),e(fF,C_e),e(C_e,bJo),e(fF,vJo),e(fF,QX),e(QX,FJo),e(fF,TJo),e(V,MJo),e(V,mF),e(mF,w_e),e(w_e,EJo),e(mF,CJo),e(mF,HX),e(HX,wJo),e(mF,AJo),e(no,LJo),e(no,gF),e(gF,yJo),e(gF,A_e),e(A_e,xJo),e(gF,$Jo),e(gF,L_e),e(L_e,kJo),e(no,SJo),M(hF,no,null),b(f,aDe,u),b(f,rd,u),e(rd,pF),e(pF,y_e),M(pL,y_e,null),e(rd,RJo),e(rd,x_e),e(x_e,PJo),b(f,nDe,u),b(f,qo,u),M(_L,qo,null),e(qo,BJo),e(qo,td),e(td,IJo),e(td,UX),e(UX,NJo),e(td,qJo),e(td,JX),e(JX,jJo),e(td,DJo),e(qo,GJo),e(qo,uL),e(uL,OJo),e(uL,$_e),e($_e,VJo),e(uL,XJo),e(qo,zJo),e(qo,gt),M(bL,gt,null),e(gt,WJo),e(gt,k_e),e(k_e,QJo),e(gt,HJo),e(gt,ad),e(ad,UJo),e(ad,S_e),e(S_e,JJo),e(ad,YJo),e(ad,YX),e(YX,KJo),e(ad,ZJo),e(gt,eYo),M(_F,gt,null),e(qo,oYo),e(qo,so),M(vL,so,null),e(so,rYo),e(so,R_e),e(R_e,tYo),e(so,aYo),e(so,qa),e(qa,nYo),e(qa,P_e),e(P_e,sYo),e(qa,lYo),e(qa,B_e),e(B_e,iYo),e(qa,dYo),e(qa,I_e),e(I_e,cYo),e(qa,fYo),e(so,mYo),e(so,N_e),e(N_e,uF),e(uF,q_e),e(q_e,gYo),e(uF,hYo),e(uF,KX),e(KX,pYo),e(uF,_Yo),e(so,uYo),e(so,bF),e(bF,bYo),e(bF,j_e),e(j_e,vYo),e(bF,FYo),e(bF,D_e),e(D_e,TYo),e(so,MYo),M(vF,so,null),b(f,sDe,u),b(f,nd,u),e(nd,FF),e(FF,G_e),M(FL,G_e,null),e(nd,EYo),e(nd,O_e),e(O_e,CYo),b(f,lDe,u),b(f,jo,u),M(TL,jo,null),e(jo,wYo),e(jo,sd),e(sd,AYo),e(sd,ZX),e(ZX,LYo),e(sd,yYo),e(sd,ez),e(ez,xYo),e(sd,$Yo),e(jo,kYo),e(jo,ML),e(ML,SYo),e(ML,V_e),e(V_e,RYo),e(ML,PYo),e(jo,BYo),e(jo,ht),M(EL,ht,null),e(ht,IYo),e(ht,X_e),e(X_e,NYo),e(ht,qYo),e(ht,ld),e(ld,jYo),e(ld,z_e),e(z_e,DYo),e(ld,GYo),e(ld,oz),e(oz,OYo),e(ld,VYo),e(ht,XYo),M(TF,ht,null),e(jo,zYo),e(jo,lo),M(CL,lo,null),e(lo,WYo),e(lo,W_e),e(W_e,QYo),e(lo,HYo),e(lo,ja),e(ja,UYo),e(ja,Q_e),e(Q_e,JYo),e(ja,YYo),e(ja,H_e),e(H_e,KYo),e(ja,ZYo),e(ja,U_e),e(U_e,eKo),e(ja,oKo),e(lo,rKo),e(lo,ve),e(ve,MF),e(MF,J_e),e(J_e,tKo),e(MF,aKo),e(MF,rz),e(rz,nKo),e(MF,sKo),e(ve,lKo),e(ve,EF),e(EF,Y_e),e(Y_e,iKo),e(EF,dKo),e(EF,tz),e(tz,cKo),e(EF,fKo),e(ve,mKo),e(ve,CF),e(CF,K_e),e(K_e,gKo),e(CF,hKo),e(CF,az),e(az,pKo),e(CF,_Ko),e(ve,uKo),e(ve,wF),e(wF,Z_e),e(Z_e,bKo),e(wF,vKo),e(wF,nz),e(nz,FKo),e(wF,TKo),e(ve,MKo),e(ve,Bs),e(Bs,eue),e(eue,EKo),e(Bs,CKo),e(Bs,sz),e(sz,wKo),e(Bs,AKo),e(Bs,lz),e(lz,LKo),e(Bs,yKo),e(ve,xKo),e(ve,AF),e(AF,oue),e(oue,$Ko),e(AF,kKo),e(AF,iz),e(iz,SKo),e(AF,RKo),e(ve,PKo),e(ve,Is),e(Is,rue),e(rue,BKo),e(Is,IKo),e(Is,dz),e(dz,NKo),e(Is,qKo),e(Is,cz),e(cz,jKo),e(Is,DKo),e(ve,GKo),e(ve,pt),e(pt,tue),e(tue,OKo),e(pt,VKo),e(pt,fz),e(fz,XKo),e(pt,zKo),e(pt,mz),e(mz,WKo),e(pt,QKo),e(pt,gz),e(gz,HKo),e(pt,UKo),e(ve,JKo),e(ve,LF),e(LF,aue),e(aue,YKo),e(LF,KKo),e(LF,hz),e(hz,ZKo),e(LF,eZo),e(ve,oZo),e(ve,yF),e(yF,nue),e(nue,rZo),e(yF,tZo),e(yF,pz),e(pz,aZo),e(yF,nZo),e(ve,sZo),e(ve,xF),e(xF,sue),e(sue,lZo),e(xF,iZo),e(xF,_z),e(_z,dZo),e(xF,cZo),e(ve,fZo),e(ve,$F),e($F,lue),e(lue,mZo),e($F,gZo),e($F,uz),e(uz,hZo),e($F,pZo),e(ve,_Zo),e(ve,kF),e(kF,iue),e(iue,uZo),e(kF,bZo),e(kF,bz),e(bz,vZo),e(kF,FZo),e(ve,TZo),e(ve,SF),e(SF,due),e(due,MZo),e(SF,EZo),e(SF,vz),e(vz,CZo),e(SF,wZo),e(ve,AZo),e(ve,RF),e(RF,cue),e(cue,LZo),e(RF,yZo),e(RF,Fz),e(Fz,xZo),e(RF,$Zo),e(lo,kZo),e(lo,PF),e(PF,SZo),e(PF,fue),e(fue,RZo),e(PF,PZo),e(PF,mue),e(mue,BZo),e(lo,IZo),M(BF,lo,null),b(f,iDe,u),b(f,id,u),e(id,IF),e(IF,gue),M(wL,gue,null),e(id,NZo),e(id,hue),e(hue,qZo),b(f,dDe,u),b(f,Do,u),M(AL,Do,null),e(Do,jZo),e(Do,dd),e(dd,DZo),e(dd,Tz),e(Tz,GZo),e(dd,OZo),e(dd,Mz),e(Mz,VZo),e(dd,XZo),e(Do,zZo),e(Do,LL),e(LL,WZo),e(LL,pue),e(pue,QZo),e(LL,HZo),e(Do,UZo),e(Do,_t),M(yL,_t,null),e(_t,JZo),e(_t,_ue),e(_ue,YZo),e(_t,KZo),e(_t,cd),e(cd,ZZo),e(cd,uue),e(uue,eer),e(cd,oer),e(cd,Ez),e(Ez,rer),e(cd,ter),e(_t,aer),M(NF,_t,null),e(Do,ner),e(Do,io),M(xL,io,null),e(io,ser),e(io,bue),e(bue,ler),e(io,ier),e(io,Da),e(Da,der),e(Da,vue),e(vue,cer),e(Da,fer),e(Da,Fue),e(Fue,mer),e(Da,ger),e(Da,Tue),e(Tue,her),e(Da,per),e(io,_er),e(io,Mue),e(Mue,qF),e(qF,Eue),e(Eue,uer),e(qF,ber),e(qF,Cz),e(Cz,ver),e(qF,Fer),e(io,Ter),e(io,jF),e(jF,Mer),e(jF,Cue),e(Cue,Eer),e(jF,Cer),e(jF,wue),e(wue,wer),e(io,Aer),M(DF,io,null),b(f,cDe,u),b(f,fd,u),e(fd,GF),e(GF,Aue),M($L,Aue,null),e(fd,Ler),e(fd,Lue),e(Lue,yer),b(f,fDe,u),b(f,Go,u),M(kL,Go,null),e(Go,xer),e(Go,md),e(md,$er),e(md,wz),e(wz,ker),e(md,Ser),e(md,Az),e(Az,Rer),e(md,Per),e(Go,Ber),e(Go,SL),e(SL,Ier),e(SL,yue),e(yue,Ner),e(SL,qer),e(Go,jer),e(Go,ut),M(RL,ut,null),e(ut,Der),e(ut,xue),e(xue,Ger),e(ut,Oer),e(ut,gd),e(gd,Ver),e(gd,$ue),e($ue,Xer),e(gd,zer),e(gd,Lz),e(Lz,Wer),e(gd,Qer),e(ut,Her),M(OF,ut,null),e(Go,Uer),e(Go,co),M(PL,co,null),e(co,Jer),e(co,kue),e(kue,Yer),e(co,Ker),e(co,Ga),e(Ga,Zer),e(Ga,Sue),e(Sue,eor),e(Ga,oor),e(Ga,Rue),e(Rue,ror),e(Ga,tor),e(Ga,Pue),e(Pue,aor),e(Ga,nor),e(co,sor),e(co,Re),e(Re,VF),e(VF,Bue),e(Bue,lor),e(VF,ior),e(VF,yz),e(yz,dor),e(VF,cor),e(Re,mor),e(Re,XF),e(XF,Iue),e(Iue,gor),e(XF,hor),e(XF,xz),e(xz,por),e(XF,_or),e(Re,uor),e(Re,zF),e(zF,Nue),e(Nue,bor),e(zF,vor),e(zF,$z),e($z,For),e(zF,Tor),e(Re,Mor),e(Re,WF),e(WF,que),e(que,Eor),e(WF,Cor),e(WF,kz),e(kz,wor),e(WF,Aor),e(Re,Lor),e(Re,QF),e(QF,jue),e(jue,yor),e(QF,xor),e(QF,Sz),e(Sz,$or),e(QF,kor),e(Re,Sor),e(Re,HF),e(HF,Due),e(Due,Ror),e(HF,Por),e(HF,Rz),e(Rz,Bor),e(HF,Ior),e(Re,Nor),e(Re,UF),e(UF,Gue),e(Gue,qor),e(UF,jor),e(UF,Pz),e(Pz,Dor),e(UF,Gor),e(Re,Oor),e(Re,JF),e(JF,Oue),e(Oue,Vor),e(JF,Xor),e(JF,Bz),e(Bz,zor),e(JF,Wor),e(Re,Qor),e(Re,YF),e(YF,Vue),e(Vue,Hor),e(YF,Uor),e(YF,Iz),e(Iz,Jor),e(YF,Yor),e(co,Kor),e(co,KF),e(KF,Zor),e(KF,Xue),e(Xue,err),e(KF,orr),e(KF,zue),e(zue,rrr),e(co,trr),M(ZF,co,null),b(f,mDe,u),b(f,hd,u),e(hd,e6),e(e6,Wue),M(BL,Wue,null),e(hd,arr),e(hd,Que),e(Que,nrr),b(f,gDe,u),b(f,Oo,u),M(IL,Oo,null),e(Oo,srr),e(Oo,pd),e(pd,lrr),e(pd,Nz),e(Nz,irr),e(pd,drr),e(pd,qz),e(qz,crr),e(pd,frr),e(Oo,mrr),e(Oo,NL),e(NL,grr),e(NL,Hue),e(Hue,hrr),e(NL,prr),e(Oo,_rr),e(Oo,bt),M(qL,bt,null),e(bt,urr),e(bt,Uue),e(Uue,brr),e(bt,vrr),e(bt,_d),e(_d,Frr),e(_d,Jue),e(Jue,Trr),e(_d,Mrr),e(_d,jz),e(jz,Err),e(_d,Crr),e(bt,wrr),M(o6,bt,null),e(Oo,Arr),e(Oo,fo),M(jL,fo,null),e(fo,Lrr),e(fo,Yue),e(Yue,yrr),e(fo,xrr),e(fo,Oa),e(Oa,$rr),e(Oa,Kue),e(Kue,krr),e(Oa,Srr),e(Oa,Zue),e(Zue,Rrr),e(Oa,Prr),e(Oa,e1e),e(e1e,Brr),e(Oa,Irr),e(fo,Nrr),e(fo,Kr),e(Kr,r6),e(r6,o1e),e(o1e,qrr),e(r6,jrr),e(r6,Dz),e(Dz,Drr),e(r6,Grr),e(Kr,Orr),e(Kr,t6),e(t6,r1e),e(r1e,Vrr),e(t6,Xrr),e(t6,Gz),e(Gz,zrr),e(t6,Wrr),e(Kr,Qrr),e(Kr,a6),e(a6,t1e),e(t1e,Hrr),e(a6,Urr),e(a6,Oz),e(Oz,Jrr),e(a6,Yrr),e(Kr,Krr),e(Kr,n6),e(n6,a1e),e(a1e,Zrr),e(n6,etr),e(n6,Vz),e(Vz,otr),e(n6,rtr),e(Kr,ttr),e(Kr,s6),e(s6,n1e),e(n1e,atr),e(s6,ntr),e(s6,Xz),e(Xz,str),e(s6,ltr),e(fo,itr),e(fo,l6),e(l6,dtr),e(l6,s1e),e(s1e,ctr),e(l6,ftr),e(l6,l1e),e(l1e,mtr),e(fo,gtr),M(i6,fo,null),b(f,hDe,u),b(f,ud,u),e(ud,d6),e(d6,i1e),M(DL,i1e,null),e(ud,htr),e(ud,d1e),e(d1e,ptr),b(f,pDe,u),b(f,Vo,u),M(GL,Vo,null),e(Vo,_tr),e(Vo,bd),e(bd,utr),e(bd,zz),e(zz,btr),e(bd,vtr),e(bd,Wz),e(Wz,Ftr),e(bd,Ttr),e(Vo,Mtr),e(Vo,OL),e(OL,Etr),e(OL,c1e),e(c1e,Ctr),e(OL,wtr),e(Vo,Atr),e(Vo,vt),M(VL,vt,null),e(vt,Ltr),e(vt,f1e),e(f1e,ytr),e(vt,xtr),e(vt,vd),e(vd,$tr),e(vd,m1e),e(m1e,ktr),e(vd,Str),e(vd,Qz),e(Qz,Rtr),e(vd,Ptr),e(vt,Btr),M(c6,vt,null),e(Vo,Itr),e(Vo,mo),M(XL,mo,null),e(mo,Ntr),e(mo,g1e),e(g1e,qtr),e(mo,jtr),e(mo,Va),e(Va,Dtr),e(Va,h1e),e(h1e,Gtr),e(Va,Otr),e(Va,p1e),e(p1e,Vtr),e(Va,Xtr),e(Va,_1e),e(_1e,ztr),e(Va,Wtr),e(mo,Qtr),e(mo,Le),e(Le,f6),e(f6,u1e),e(u1e,Htr),e(f6,Utr),e(f6,Hz),e(Hz,Jtr),e(f6,Ytr),e(Le,Ktr),e(Le,m6),e(m6,b1e),e(b1e,Ztr),e(m6,ear),e(m6,Uz),e(Uz,oar),e(m6,rar),e(Le,tar),e(Le,g6),e(g6,v1e),e(v1e,aar),e(g6,nar),e(g6,Jz),e(Jz,sar),e(g6,lar),e(Le,iar),e(Le,h6),e(h6,F1e),e(F1e,dar),e(h6,car),e(h6,Yz),e(Yz,far),e(h6,mar),e(Le,gar),e(Le,p6),e(p6,T1e),e(T1e,har),e(p6,par),e(p6,Kz),e(Kz,_ar),e(p6,uar),e(Le,bar),e(Le,_6),e(_6,M1e),e(M1e,Far),e(_6,Tar),e(_6,Zz),e(Zz,Mar),e(_6,Ear),e(Le,Car),e(Le,u6),e(u6,E1e),e(E1e,war),e(u6,Aar),e(u6,eW),e(eW,Lar),e(u6,yar),e(Le,xar),e(Le,b6),e(b6,C1e),e(C1e,$ar),e(b6,kar),e(b6,oW),e(oW,Sar),e(b6,Rar),e(Le,Par),e(Le,v6),e(v6,w1e),e(w1e,Bar),e(v6,Iar),e(v6,rW),e(rW,Nar),e(v6,qar),e(Le,jar),e(Le,F6),e(F6,A1e),e(A1e,Dar),e(F6,Gar),e(F6,tW),e(tW,Oar),e(F6,Var),e(mo,Xar),e(mo,T6),e(T6,zar),e(T6,L1e),e(L1e,War),e(T6,Qar),e(T6,y1e),e(y1e,Har),e(mo,Uar),M(M6,mo,null),b(f,_De,u),b(f,Fd,u),e(Fd,E6),e(E6,x1e),M(zL,x1e,null),e(Fd,Jar),e(Fd,$1e),e($1e,Yar),b(f,uDe,u),b(f,Xo,u),M(WL,Xo,null),e(Xo,Kar),e(Xo,Td),e(Td,Zar),e(Td,aW),e(aW,enr),e(Td,onr),e(Td,nW),e(nW,rnr),e(Td,tnr),e(Xo,anr),e(Xo,QL),e(QL,nnr),e(QL,k1e),e(k1e,snr),e(QL,lnr),e(Xo,inr),e(Xo,Ft),M(HL,Ft,null),e(Ft,dnr),e(Ft,S1e),e(S1e,cnr),e(Ft,fnr),e(Ft,Md),e(Md,mnr),e(Md,R1e),e(R1e,gnr),e(Md,hnr),e(Md,sW),e(sW,pnr),e(Md,_nr),e(Ft,unr),M(C6,Ft,null),e(Xo,bnr),e(Xo,go),M(UL,go,null),e(go,vnr),e(go,P1e),e(P1e,Fnr),e(go,Tnr),e(go,Xa),e(Xa,Mnr),e(Xa,B1e),e(B1e,Enr),e(Xa,Cnr),e(Xa,I1e),e(I1e,wnr),e(Xa,Anr),e(Xa,N1e),e(N1e,Lnr),e(Xa,ynr),e(go,xnr),e(go,JL),e(JL,w6),e(w6,q1e),e(q1e,$nr),e(w6,knr),e(w6,lW),e(lW,Snr),e(w6,Rnr),e(JL,Pnr),e(JL,A6),e(A6,j1e),e(j1e,Bnr),e(A6,Inr),e(A6,iW),e(iW,Nnr),e(A6,qnr),e(go,jnr),e(go,L6),e(L6,Dnr),e(L6,D1e),e(D1e,Gnr),e(L6,Onr),e(L6,G1e),e(G1e,Vnr),e(go,Xnr),M(y6,go,null),b(f,bDe,u),b(f,Ed,u),e(Ed,x6),e(x6,O1e),M(YL,O1e,null),e(Ed,znr),e(Ed,V1e),e(V1e,Wnr),b(f,vDe,u),b(f,zo,u),M(KL,zo,null),e(zo,Qnr),e(zo,Cd),e(Cd,Hnr),e(Cd,dW),e(dW,Unr),e(Cd,Jnr),e(Cd,cW),e(cW,Ynr),e(Cd,Knr),e(zo,Znr),e(zo,ZL),e(ZL,esr),e(ZL,X1e),e(X1e,osr),e(ZL,rsr),e(zo,tsr),e(zo,Tt),M(ey,Tt,null),e(Tt,asr),e(Tt,z1e),e(z1e,nsr),e(Tt,ssr),e(Tt,wd),e(wd,lsr),e(wd,W1e),e(W1e,isr),e(wd,dsr),e(wd,fW),e(fW,csr),e(wd,fsr),e(Tt,msr),M($6,Tt,null),e(zo,gsr),e(zo,ho),M(oy,ho,null),e(ho,hsr),e(ho,Q1e),e(Q1e,psr),e(ho,_sr),e(ho,za),e(za,usr),e(za,H1e),e(H1e,bsr),e(za,vsr),e(za,U1e),e(U1e,Fsr),e(za,Tsr),e(za,J1e),e(J1e,Msr),e(za,Esr),e(ho,Csr),e(ho,Zr),e(Zr,k6),e(k6,Y1e),e(Y1e,wsr),e(k6,Asr),e(k6,mW),e(mW,Lsr),e(k6,ysr),e(Zr,xsr),e(Zr,S6),e(S6,K1e),e(K1e,$sr),e(S6,ksr),e(S6,gW),e(gW,Ssr),e(S6,Rsr),e(Zr,Psr),e(Zr,R6),e(R6,Z1e),e(Z1e,Bsr),e(R6,Isr),e(R6,hW),e(hW,Nsr),e(R6,qsr),e(Zr,jsr),e(Zr,P6),e(P6,ebe),e(ebe,Dsr),e(P6,Gsr),e(P6,pW),e(pW,Osr),e(P6,Vsr),e(Zr,Xsr),e(Zr,B6),e(B6,obe),e(obe,zsr),e(B6,Wsr),e(B6,_W),e(_W,Qsr),e(B6,Hsr),e(ho,Usr),e(ho,I6),e(I6,Jsr),e(I6,rbe),e(rbe,Ysr),e(I6,Ksr),e(I6,tbe),e(tbe,Zsr),e(ho,elr),M(N6,ho,null),b(f,FDe,u),b(f,Ad,u),e(Ad,q6),e(q6,abe),M(ry,abe,null),e(Ad,olr),e(Ad,nbe),e(nbe,rlr),b(f,TDe,u),b(f,Wo,u),M(ty,Wo,null),e(Wo,tlr),e(Wo,Ld),e(Ld,alr),e(Ld,uW),e(uW,nlr),e(Ld,slr),e(Ld,bW),e(bW,llr),e(Ld,ilr),e(Wo,dlr),e(Wo,ay),e(ay,clr),e(ay,sbe),e(sbe,flr),e(ay,mlr),e(Wo,glr),e(Wo,Mt),M(ny,Mt,null),e(Mt,hlr),e(Mt,lbe),e(lbe,plr),e(Mt,_lr),e(Mt,yd),e(yd,ulr),e(yd,ibe),e(ibe,blr),e(yd,vlr),e(yd,vW),e(vW,Flr),e(yd,Tlr),e(Mt,Mlr),M(j6,Mt,null),e(Wo,Elr),e(Wo,po),M(sy,po,null),e(po,Clr),e(po,dbe),e(dbe,wlr),e(po,Alr),e(po,Wa),e(Wa,Llr),e(Wa,cbe),e(cbe,ylr),e(Wa,xlr),e(Wa,fbe),e(fbe,$lr),e(Wa,klr),e(Wa,mbe),e(mbe,Slr),e(Wa,Rlr),e(po,Plr),e(po,xd),e(xd,D6),e(D6,gbe),e(gbe,Blr),e(D6,Ilr),e(D6,FW),e(FW,Nlr),e(D6,qlr),e(xd,jlr),e(xd,G6),e(G6,hbe),e(hbe,Dlr),e(G6,Glr),e(G6,TW),e(TW,Olr),e(G6,Vlr),e(xd,Xlr),e(xd,O6),e(O6,pbe),e(pbe,zlr),e(O6,Wlr),e(O6,MW),e(MW,Qlr),e(O6,Hlr),e(po,Ulr),e(po,V6),e(V6,Jlr),e(V6,_be),e(_be,Ylr),e(V6,Klr),e(V6,ube),e(ube,Zlr),e(po,eir),M(X6,po,null),b(f,MDe,u),b(f,$d,u),e($d,z6),e(z6,bbe),M(ly,bbe,null),e($d,oir),e($d,vbe),e(vbe,rir),b(f,EDe,u),b(f,Qo,u),M(iy,Qo,null),e(Qo,tir),e(Qo,kd),e(kd,air),e(kd,EW),e(EW,nir),e(kd,sir),e(kd,CW),e(CW,lir),e(kd,iir),e(Qo,dir),e(Qo,dy),e(dy,cir),e(dy,Fbe),e(Fbe,fir),e(dy,mir),e(Qo,gir),e(Qo,Et),M(cy,Et,null),e(Et,hir),e(Et,Tbe),e(Tbe,pir),e(Et,_ir),e(Et,Sd),e(Sd,uir),e(Sd,Mbe),e(Mbe,bir),e(Sd,vir),e(Sd,wW),e(wW,Fir),e(Sd,Tir),e(Et,Mir),M(W6,Et,null),e(Qo,Eir),e(Qo,_o),M(fy,_o,null),e(_o,Cir),e(_o,Ebe),e(Ebe,wir),e(_o,Air),e(_o,Qa),e(Qa,Lir),e(Qa,Cbe),e(Cbe,yir),e(Qa,xir),e(Qa,wbe),e(wbe,$ir),e(Qa,kir),e(Qa,Abe),e(Abe,Sir),e(Qa,Rir),e(_o,Pir),e(_o,my),e(my,Q6),e(Q6,Lbe),e(Lbe,Bir),e(Q6,Iir),e(Q6,AW),e(AW,Nir),e(Q6,qir),e(my,jir),e(my,H6),e(H6,ybe),e(ybe,Dir),e(H6,Gir),e(H6,LW),e(LW,Oir),e(H6,Vir),e(_o,Xir),e(_o,U6),e(U6,zir),e(U6,xbe),e(xbe,Wir),e(U6,Qir),e(U6,$be),e($be,Hir),e(_o,Uir),M(J6,_o,null),b(f,CDe,u),b(f,Rd,u),e(Rd,Y6),e(Y6,kbe),M(gy,kbe,null),e(Rd,Jir),e(Rd,Sbe),e(Sbe,Yir),b(f,wDe,u),b(f,Ho,u),M(hy,Ho,null),e(Ho,Kir),e(Ho,Pd),e(Pd,Zir),e(Pd,yW),e(yW,edr),e(Pd,odr),e(Pd,xW),e(xW,rdr),e(Pd,tdr),e(Ho,adr),e(Ho,py),e(py,ndr),e(py,Rbe),e(Rbe,sdr),e(py,ldr),e(Ho,idr),e(Ho,Ct),M(_y,Ct,null),e(Ct,ddr),e(Ct,Pbe),e(Pbe,cdr),e(Ct,fdr),e(Ct,Bd),e(Bd,mdr),e(Bd,Bbe),e(Bbe,gdr),e(Bd,hdr),e(Bd,$W),e($W,pdr),e(Bd,_dr),e(Ct,udr),M(K6,Ct,null),e(Ho,bdr),e(Ho,uo),M(uy,uo,null),e(uo,vdr),e(uo,Ibe),e(Ibe,Fdr),e(uo,Tdr),e(uo,Ha),e(Ha,Mdr),e(Ha,Nbe),e(Nbe,Edr),e(Ha,Cdr),e(Ha,qbe),e(qbe,wdr),e(Ha,Adr),e(Ha,jbe),e(jbe,Ldr),e(Ha,ydr),e(uo,xdr),e(uo,Dbe),e(Dbe,Z6),e(Z6,Gbe),e(Gbe,$dr),e(Z6,kdr),e(Z6,kW),e(kW,Sdr),e(Z6,Rdr),e(uo,Pdr),e(uo,eT),e(eT,Bdr),e(eT,Obe),e(Obe,Idr),e(eT,Ndr),e(eT,Vbe),e(Vbe,qdr),e(uo,jdr),M(oT,uo,null),b(f,ADe,u),b(f,Id,u),e(Id,rT),e(rT,Xbe),M(by,Xbe,null),e(Id,Ddr),e(Id,zbe),e(zbe,Gdr),b(f,LDe,u),b(f,Uo,u),M(vy,Uo,null),e(Uo,Odr),e(Uo,Nd),e(Nd,Vdr),e(Nd,SW),e(SW,Xdr),e(Nd,zdr),e(Nd,RW),e(RW,Wdr),e(Nd,Qdr),e(Uo,Hdr),e(Uo,Fy),e(Fy,Udr),e(Fy,Wbe),e(Wbe,Jdr),e(Fy,Ydr),e(Uo,Kdr),e(Uo,wt),M(Ty,wt,null),e(wt,Zdr),e(wt,Qbe),e(Qbe,ecr),e(wt,ocr),e(wt,qd),e(qd,rcr),e(qd,Hbe),e(Hbe,tcr),e(qd,acr),e(qd,PW),e(PW,ncr),e(qd,scr),e(wt,lcr),M(tT,wt,null),e(Uo,icr),e(Uo,bo),M(My,bo,null),e(bo,dcr),e(bo,Ube),e(Ube,ccr),e(bo,fcr),e(bo,Ua),e(Ua,mcr),e(Ua,Jbe),e(Jbe,gcr),e(Ua,hcr),e(Ua,Ybe),e(Ybe,pcr),e(Ua,_cr),e(Ua,Kbe),e(Kbe,ucr),e(Ua,bcr),e(bo,vcr),e(bo,Ja),e(Ja,aT),e(aT,Zbe),e(Zbe,Fcr),e(aT,Tcr),e(aT,BW),e(BW,Mcr),e(aT,Ecr),e(Ja,Ccr),e(Ja,nT),e(nT,e2e),e(e2e,wcr),e(nT,Acr),e(nT,IW),e(IW,Lcr),e(nT,ycr),e(Ja,xcr),e(Ja,sT),e(sT,o2e),e(o2e,$cr),e(sT,kcr),e(sT,NW),e(NW,Scr),e(sT,Rcr),e(Ja,Pcr),e(Ja,lT),e(lT,r2e),e(r2e,Bcr),e(lT,Icr),e(lT,qW),e(qW,Ncr),e(lT,qcr),e(bo,jcr),e(bo,iT),e(iT,Dcr),e(iT,t2e),e(t2e,Gcr),e(iT,Ocr),e(iT,a2e),e(a2e,Vcr),e(bo,Xcr),M(dT,bo,null),b(f,yDe,u),b(f,jd,u),e(jd,cT),e(cT,n2e),M(Ey,n2e,null),e(jd,zcr),e(jd,s2e),e(s2e,Wcr),b(f,xDe,u),b(f,Jo,u),M(Cy,Jo,null),e(Jo,Qcr),e(Jo,Dd),e(Dd,Hcr),e(Dd,jW),e(jW,Ucr),e(Dd,Jcr),e(Dd,DW),e(DW,Ycr),e(Dd,Kcr),e(Jo,Zcr),e(Jo,wy),e(wy,efr),e(wy,l2e),e(l2e,ofr),e(wy,rfr),e(Jo,tfr),e(Jo,At),M(Ay,At,null),e(At,afr),e(At,i2e),e(i2e,nfr),e(At,sfr),e(At,Gd),e(Gd,lfr),e(Gd,d2e),e(d2e,ifr),e(Gd,dfr),e(Gd,GW),e(GW,cfr),e(Gd,ffr),e(At,mfr),M(fT,At,null),e(Jo,gfr),e(Jo,vo),M(Ly,vo,null),e(vo,hfr),e(vo,c2e),e(c2e,pfr),e(vo,_fr),e(vo,Ya),e(Ya,ufr),e(Ya,f2e),e(f2e,bfr),e(Ya,vfr),e(Ya,m2e),e(m2e,Ffr),e(Ya,Tfr),e(Ya,g2e),e(g2e,Mfr),e(Ya,Efr),e(vo,Cfr),e(vo,h2e),e(h2e,mT),e(mT,p2e),e(p2e,wfr),e(mT,Afr),e(mT,OW),e(OW,Lfr),e(mT,yfr),e(vo,xfr),e(vo,gT),e(gT,$fr),e(gT,_2e),e(_2e,kfr),e(gT,Sfr),e(gT,u2e),e(u2e,Rfr),e(vo,Pfr),M(hT,vo,null),b(f,$De,u),b(f,Od,u),e(Od,pT),e(pT,b2e),M(yy,b2e,null),e(Od,Bfr),e(Od,v2e),e(v2e,Ifr),b(f,kDe,u),b(f,Yo,u),M(xy,Yo,null),e(Yo,Nfr),e(Yo,Vd),e(Vd,qfr),e(Vd,VW),e(VW,jfr),e(Vd,Dfr),e(Vd,XW),e(XW,Gfr),e(Vd,Ofr),e(Yo,Vfr),e(Yo,$y),e($y,Xfr),e($y,F2e),e(F2e,zfr),e($y,Wfr),e(Yo,Qfr),e(Yo,Lt),M(ky,Lt,null),e(Lt,Hfr),e(Lt,T2e),e(T2e,Ufr),e(Lt,Jfr),e(Lt,Xd),e(Xd,Yfr),e(Xd,M2e),e(M2e,Kfr),e(Xd,Zfr),e(Xd,zW),e(zW,emr),e(Xd,omr),e(Lt,rmr),M(_T,Lt,null),e(Yo,tmr),e(Yo,wr),M(Sy,wr,null),e(wr,amr),e(wr,E2e),e(E2e,nmr),e(wr,smr),e(wr,Ka),e(Ka,lmr),e(Ka,C2e),e(C2e,imr),e(Ka,dmr),e(Ka,w2e),e(w2e,cmr),e(Ka,fmr),e(Ka,A2e),e(A2e,mmr),e(Ka,gmr),e(wr,hmr),e(wr,q),e(q,uT),e(uT,L2e),e(L2e,pmr),e(uT,_mr),e(uT,WW),e(WW,umr),e(uT,bmr),e(q,vmr),e(q,bT),e(bT,y2e),e(y2e,Fmr),e(bT,Tmr),e(bT,QW),e(QW,Mmr),e(bT,Emr),e(q,Cmr),e(q,vT),e(vT,x2e),e(x2e,wmr),e(vT,Amr),e(vT,HW),e(HW,Lmr),e(vT,ymr),e(q,xmr),e(q,FT),e(FT,$2e),e($2e,$mr),e(FT,kmr),e(FT,UW),e(UW,Smr),e(FT,Rmr),e(q,Pmr),e(q,TT),e(TT,k2e),e(k2e,Bmr),e(TT,Imr),e(TT,JW),e(JW,Nmr),e(TT,qmr),e(q,jmr),e(q,MT),e(MT,S2e),e(S2e,Dmr),e(MT,Gmr),e(MT,YW),e(YW,Omr),e(MT,Vmr),e(q,Xmr),e(q,ET),e(ET,R2e),e(R2e,zmr),e(ET,Wmr),e(ET,KW),e(KW,Qmr),e(ET,Hmr),e(q,Umr),e(q,CT),e(CT,P2e),e(P2e,Jmr),e(CT,Ymr),e(CT,ZW),e(ZW,Kmr),e(CT,Zmr),e(q,egr),e(q,wT),e(wT,B2e),e(B2e,ogr),e(wT,rgr),e(wT,eQ),e(eQ,tgr),e(wT,agr),e(q,ngr),e(q,AT),e(AT,I2e),e(I2e,sgr),e(AT,lgr),e(AT,oQ),e(oQ,igr),e(AT,dgr),e(q,cgr),e(q,LT),e(LT,N2e),e(N2e,fgr),e(LT,mgr),e(LT,rQ),e(rQ,ggr),e(LT,hgr),e(q,pgr),e(q,yT),e(yT,q2e),e(q2e,_gr),e(yT,ugr),e(yT,tQ),e(tQ,bgr),e(yT,vgr),e(q,Fgr),e(q,xT),e(xT,j2e),e(j2e,Tgr),e(xT,Mgr),e(xT,aQ),e(aQ,Egr),e(xT,Cgr),e(q,wgr),e(q,$T),e($T,D2e),e(D2e,Agr),e($T,Lgr),e($T,nQ),e(nQ,ygr),e($T,xgr),e(q,$gr),e(q,kT),e(kT,G2e),e(G2e,kgr),e(kT,Sgr),e(kT,sQ),e(sQ,Rgr),e(kT,Pgr),e(q,Bgr),e(q,ST),e(ST,O2e),e(O2e,Igr),e(ST,Ngr),e(ST,lQ),e(lQ,qgr),e(ST,jgr),e(q,Dgr),e(q,RT),e(RT,V2e),e(V2e,Ggr),e(RT,Ogr),e(RT,iQ),e(iQ,Vgr),e(RT,Xgr),e(q,zgr),e(q,Ns),e(Ns,X2e),e(X2e,Wgr),e(Ns,Qgr),e(Ns,dQ),e(dQ,Hgr),e(Ns,Ugr),e(Ns,cQ),e(cQ,Jgr),e(Ns,Ygr),e(q,Kgr),e(q,PT),e(PT,z2e),e(z2e,Zgr),e(PT,ehr),e(PT,fQ),e(fQ,ohr),e(PT,rhr),e(q,thr),e(q,BT),e(BT,W2e),e(W2e,ahr),e(BT,nhr),e(BT,mQ),e(mQ,shr),e(BT,lhr),e(q,ihr),e(q,IT),e(IT,Q2e),e(Q2e,dhr),e(IT,chr),e(IT,gQ),e(gQ,fhr),e(IT,mhr),e(q,ghr),e(q,NT),e(NT,H2e),e(H2e,hhr),e(NT,phr),e(NT,hQ),e(hQ,_hr),e(NT,uhr),e(q,bhr),e(q,qT),e(qT,U2e),e(U2e,vhr),e(qT,Fhr),e(qT,pQ),e(pQ,Thr),e(qT,Mhr),e(q,Ehr),e(q,jT),e(jT,J2e),e(J2e,Chr),e(jT,whr),e(jT,_Q),e(_Q,Ahr),e(jT,Lhr),e(q,yhr),e(q,DT),e(DT,Y2e),e(Y2e,xhr),e(DT,$hr),e(DT,uQ),e(uQ,khr),e(DT,Shr),e(q,Rhr),e(q,GT),e(GT,K2e),e(K2e,Phr),e(GT,Bhr),e(GT,bQ),e(bQ,Ihr),e(GT,Nhr),e(q,qhr),e(q,OT),e(OT,Z2e),e(Z2e,jhr),e(OT,Dhr),e(OT,vQ),e(vQ,Ghr),e(OT,Ohr),e(q,Vhr),e(q,VT),e(VT,eve),e(eve,Xhr),e(VT,zhr),e(VT,FQ),e(FQ,Whr),e(VT,Qhr),e(q,Hhr),e(q,XT),e(XT,ove),e(ove,Uhr),e(XT,Jhr),e(XT,TQ),e(TQ,Yhr),e(XT,Khr),e(q,Zhr),e(q,zT),e(zT,rve),e(rve,epr),e(zT,opr),e(zT,MQ),e(MQ,rpr),e(zT,tpr),e(q,apr),e(q,WT),e(WT,tve),e(tve,npr),e(WT,spr),e(WT,EQ),e(EQ,lpr),e(WT,ipr),e(q,dpr),e(q,QT),e(QT,ave),e(ave,cpr),e(QT,fpr),e(QT,CQ),e(CQ,mpr),e(QT,gpr),e(q,hpr),e(q,HT),e(HT,nve),e(nve,ppr),e(HT,_pr),e(HT,wQ),e(wQ,upr),e(HT,bpr),e(q,vpr),e(q,UT),e(UT,sve),e(sve,Fpr),e(UT,Tpr),e(UT,AQ),e(AQ,Mpr),e(UT,Epr),e(q,Cpr),e(q,JT),e(JT,lve),e(lve,wpr),e(JT,Apr),e(JT,LQ),e(LQ,Lpr),e(JT,ypr),e(q,xpr),e(q,YT),e(YT,ive),e(ive,$pr),e(YT,kpr),e(YT,yQ),e(yQ,Spr),e(YT,Rpr),e(q,Ppr),e(q,KT),e(KT,dve),e(dve,Bpr),e(KT,Ipr),e(KT,xQ),e(xQ,Npr),e(KT,qpr),e(q,jpr),e(q,ZT),e(ZT,cve),e(cve,Dpr),e(ZT,Gpr),e(ZT,$Q),e($Q,Opr),e(ZT,Vpr),e(q,Xpr),e(q,e7),e(e7,fve),e(fve,zpr),e(e7,Wpr),e(e7,kQ),e(kQ,Qpr),e(e7,Hpr),e(q,Upr),e(q,o7),e(o7,mve),e(mve,Jpr),e(o7,Ypr),e(o7,SQ),e(SQ,Kpr),e(o7,Zpr),e(q,e_r),e(q,r7),e(r7,gve),e(gve,o_r),e(r7,r_r),e(r7,RQ),e(RQ,t_r),e(r7,a_r),e(q,n_r),e(q,t7),e(t7,hve),e(hve,s_r),e(t7,l_r),e(t7,PQ),e(PQ,i_r),e(t7,d_r),e(q,c_r),e(q,a7),e(a7,pve),e(pve,f_r),e(a7,m_r),e(a7,BQ),e(BQ,g_r),e(a7,h_r),e(q,p_r),e(q,n7),e(n7,_ve),e(_ve,__r),e(n7,u_r),e(n7,IQ),e(IQ,b_r),e(n7,v_r),e(q,F_r),e(q,s7),e(s7,uve),e(uve,T_r),e(s7,M_r),e(s7,NQ),e(NQ,E_r),e(s7,C_r),e(q,w_r),e(q,l7),e(l7,bve),e(bve,A_r),e(l7,L_r),e(l7,qQ),e(qQ,y_r),e(l7,x_r),e(q,$_r),e(q,i7),e(i7,vve),e(vve,k_r),e(i7,S_r),e(i7,jQ),e(jQ,R_r),e(i7,P_r),e(wr,B_r),M(d7,wr,null),b(f,SDe,u),b(f,zd,u),e(zd,c7),e(c7,Fve),M(Ry,Fve,null),e(zd,I_r),e(zd,Tve),e(Tve,N_r),b(f,RDe,u),b(f,Ko,u),M(Py,Ko,null),e(Ko,q_r),e(Ko,Wd),e(Wd,j_r),e(Wd,DQ),e(DQ,D_r),e(Wd,G_r),e(Wd,GQ),e(GQ,O_r),e(Wd,V_r),e(Ko,X_r),e(Ko,By),e(By,z_r),e(By,Mve),e(Mve,W_r),e(By,Q_r),e(Ko,H_r),e(Ko,yt),M(Iy,yt,null),e(yt,U_r),e(yt,Eve),e(Eve,J_r),e(yt,Y_r),e(yt,Qd),e(Qd,K_r),e(Qd,Cve),e(Cve,Z_r),e(Qd,eur),e(Qd,OQ),e(OQ,our),e(Qd,rur),e(yt,tur),M(f7,yt,null),e(Ko,aur),e(Ko,Ar),M(Ny,Ar,null),e(Ar,nur),e(Ar,wve),e(wve,sur),e(Ar,lur),e(Ar,Za),e(Za,iur),e(Za,Ave),e(Ave,dur),e(Za,cur),e(Za,Lve),e(Lve,fur),e(Za,mur),e(Za,yve),e(yve,gur),e(Za,hur),e(Ar,pur),e(Ar,se),e(se,m7),e(m7,xve),e(xve,_ur),e(m7,uur),e(m7,VQ),e(VQ,bur),e(m7,vur),e(se,Fur),e(se,g7),e(g7,$ve),e($ve,Tur),e(g7,Mur),e(g7,XQ),e(XQ,Eur),e(g7,Cur),e(se,wur),e(se,h7),e(h7,kve),e(kve,Aur),e(h7,Lur),e(h7,zQ),e(zQ,yur),e(h7,xur),e(se,$ur),e(se,p7),e(p7,Sve),e(Sve,kur),e(p7,Sur),e(p7,WQ),e(WQ,Rur),e(p7,Pur),e(se,Bur),e(se,_7),e(_7,Rve),e(Rve,Iur),e(_7,Nur),e(_7,QQ),e(QQ,qur),e(_7,jur),e(se,Dur),e(se,u7),e(u7,Pve),e(Pve,Gur),e(u7,Our),e(u7,HQ),e(HQ,Vur),e(u7,Xur),e(se,zur),e(se,b7),e(b7,Bve),e(Bve,Wur),e(b7,Qur),e(b7,UQ),e(UQ,Hur),e(b7,Uur),e(se,Jur),e(se,v7),e(v7,Ive),e(Ive,Yur),e(v7,Kur),e(v7,JQ),e(JQ,Zur),e(v7,e1r),e(se,o1r),e(se,F7),e(F7,Nve),e(Nve,r1r),e(F7,t1r),e(F7,YQ),e(YQ,a1r),e(F7,n1r),e(se,s1r),e(se,T7),e(T7,qve),e(qve,l1r),e(T7,i1r),e(T7,KQ),e(KQ,d1r),e(T7,c1r),e(se,f1r),e(se,M7),e(M7,jve),e(jve,m1r),e(M7,g1r),e(M7,ZQ),e(ZQ,h1r),e(M7,p1r),e(se,_1r),e(se,E7),e(E7,Dve),e(Dve,u1r),e(E7,b1r),e(E7,eH),e(eH,v1r),e(E7,F1r),e(se,T1r),e(se,C7),e(C7,Gve),e(Gve,M1r),e(C7,E1r),e(C7,oH),e(oH,C1r),e(C7,w1r),e(se,A1r),e(se,w7),e(w7,Ove),e(Ove,L1r),e(w7,y1r),e(w7,rH),e(rH,x1r),e(w7,$1r),e(se,k1r),e(se,A7),e(A7,Vve),e(Vve,S1r),e(A7,R1r),e(A7,tH),e(tH,P1r),e(A7,B1r),e(se,I1r),e(se,L7),e(L7,Xve),e(Xve,N1r),e(L7,q1r),e(L7,aH),e(aH,j1r),e(L7,D1r),e(se,G1r),e(se,y7),e(y7,zve),e(zve,O1r),e(y7,V1r),e(y7,nH),e(nH,X1r),e(y7,z1r),e(se,W1r),e(se,x7),e(x7,Wve),e(Wve,Q1r),e(x7,H1r),e(x7,sH),e(sH,U1r),e(x7,J1r),e(se,Y1r),e(se,$7),e($7,Qve),e(Qve,K1r),e($7,Z1r),e($7,lH),e(lH,ebr),e($7,obr),e(se,rbr),e(se,k7),e(k7,Hve),e(Hve,tbr),e(k7,abr),e(k7,iH),e(iH,nbr),e(k7,sbr),e(se,lbr),e(se,S7),e(S7,Uve),e(Uve,ibr),e(S7,dbr),e(S7,dH),e(dH,cbr),e(S7,fbr),e(se,mbr),e(se,R7),e(R7,Jve),e(Jve,gbr),e(R7,hbr),e(R7,cH),e(cH,pbr),e(R7,_br),e(se,ubr),e(se,P7),e(P7,Yve),e(Yve,bbr),e(P7,vbr),e(P7,fH),e(fH,Fbr),e(P7,Tbr),e(Ar,Mbr),M(B7,Ar,null),b(f,PDe,u),b(f,Hd,u),e(Hd,I7),e(I7,Kve),M(qy,Kve,null),e(Hd,Ebr),e(Hd,Zve),e(Zve,Cbr),b(f,BDe,u),b(f,Zo,u),M(jy,Zo,null),e(Zo,wbr),e(Zo,Ud),e(Ud,Abr),e(Ud,mH),e(mH,Lbr),e(Ud,ybr),e(Ud,gH),e(gH,xbr),e(Ud,$br),e(Zo,kbr),e(Zo,Dy),e(Dy,Sbr),e(Dy,e3e),e(e3e,Rbr),e(Dy,Pbr),e(Zo,Bbr),e(Zo,xt),M(Gy,xt,null),e(xt,Ibr),e(xt,o3e),e(o3e,Nbr),e(xt,qbr),e(xt,Jd),e(Jd,jbr),e(Jd,r3e),e(r3e,Dbr),e(Jd,Gbr),e(Jd,hH),e(hH,Obr),e(Jd,Vbr),e(xt,Xbr),M(N7,xt,null),e(Zo,zbr),e(Zo,Lr),M(Oy,Lr,null),e(Lr,Wbr),e(Lr,t3e),e(t3e,Qbr),e(Lr,Hbr),e(Lr,en),e(en,Ubr),e(en,a3e),e(a3e,Jbr),e(en,Ybr),e(en,n3e),e(n3e,Kbr),e(en,Zbr),e(en,s3e),e(s3e,e2r),e(en,o2r),e(Lr,r2r),e(Lr,Me),e(Me,q7),e(q7,l3e),e(l3e,t2r),e(q7,a2r),e(q7,pH),e(pH,n2r),e(q7,s2r),e(Me,l2r),e(Me,j7),e(j7,i3e),e(i3e,i2r),e(j7,d2r),e(j7,_H),e(_H,c2r),e(j7,f2r),e(Me,m2r),e(Me,D7),e(D7,d3e),e(d3e,g2r),e(D7,h2r),e(D7,uH),e(uH,p2r),e(D7,_2r),e(Me,u2r),e(Me,G7),e(G7,c3e),e(c3e,b2r),e(G7,v2r),e(G7,bH),e(bH,F2r),e(G7,T2r),e(Me,M2r),e(Me,O7),e(O7,f3e),e(f3e,E2r),e(O7,C2r),e(O7,vH),e(vH,w2r),e(O7,A2r),e(Me,L2r),e(Me,V7),e(V7,m3e),e(m3e,y2r),e(V7,x2r),e(V7,FH),e(FH,$2r),e(V7,k2r),e(Me,S2r),e(Me,X7),e(X7,g3e),e(g3e,R2r),e(X7,P2r),e(X7,TH),e(TH,B2r),e(X7,I2r),e(Me,N2r),e(Me,z7),e(z7,h3e),e(h3e,q2r),e(z7,j2r),e(z7,MH),e(MH,D2r),e(z7,G2r),e(Me,O2r),e(Me,W7),e(W7,p3e),e(p3e,V2r),e(W7,X2r),e(W7,EH),e(EH,z2r),e(W7,W2r),e(Me,Q2r),e(Me,Q7),e(Q7,_3e),e(_3e,H2r),e(Q7,U2r),e(Q7,CH),e(CH,J2r),e(Q7,Y2r),e(Me,K2r),e(Me,H7),e(H7,u3e),e(u3e,Z2r),e(H7,evr),e(H7,wH),e(wH,ovr),e(H7,rvr),e(Me,tvr),e(Me,U7),e(U7,b3e),e(b3e,avr),e(U7,nvr),e(U7,AH),e(AH,svr),e(U7,lvr),e(Me,ivr),e(Me,J7),e(J7,v3e),e(v3e,dvr),e(J7,cvr),e(J7,LH),e(LH,fvr),e(J7,mvr),e(Lr,gvr),M(Y7,Lr,null),b(f,IDe,u),b(f,Yd,u),e(Yd,K7),e(K7,F3e),M(Vy,F3e,null),e(Yd,hvr),e(Yd,T3e),e(T3e,pvr),b(f,NDe,u),b(f,er,u),M(Xy,er,null),e(er,_vr),e(er,Kd),e(Kd,uvr),e(Kd,yH),e(yH,bvr),e(Kd,vvr),e(Kd,xH),e(xH,Fvr),e(Kd,Tvr),e(er,Mvr),e(er,zy),e(zy,Evr),e(zy,M3e),e(M3e,Cvr),e(zy,wvr),e(er,Avr),e(er,$t),M(Wy,$t,null),e($t,Lvr),e($t,E3e),e(E3e,yvr),e($t,xvr),e($t,Zd),e(Zd,$vr),e(Zd,C3e),e(C3e,kvr),e(Zd,Svr),e(Zd,$H),e($H,Rvr),e(Zd,Pvr),e($t,Bvr),M(Z7,$t,null),e(er,Ivr),e(er,yr),M(Qy,yr,null),e(yr,Nvr),e(yr,w3e),e(w3e,qvr),e(yr,jvr),e(yr,on),e(on,Dvr),e(on,A3e),e(A3e,Gvr),e(on,Ovr),e(on,L3e),e(L3e,Vvr),e(on,Xvr),e(on,y3e),e(y3e,zvr),e(on,Wvr),e(yr,Qvr),e(yr,rn),e(rn,e9),e(e9,x3e),e(x3e,Hvr),e(e9,Uvr),e(e9,kH),e(kH,Jvr),e(e9,Yvr),e(rn,Kvr),e(rn,o9),e(o9,$3e),e($3e,Zvr),e(o9,e3r),e(o9,SH),e(SH,o3r),e(o9,r3r),e(rn,t3r),e(rn,r9),e(r9,k3e),e(k3e,a3r),e(r9,n3r),e(r9,RH),e(RH,s3r),e(r9,l3r),e(rn,i3r),e(rn,t9),e(t9,S3e),e(S3e,d3r),e(t9,c3r),e(t9,PH),e(PH,f3r),e(t9,m3r),e(yr,g3r),M(a9,yr,null),b(f,qDe,u),b(f,ec,u),e(ec,n9),e(n9,R3e),M(Hy,R3e,null),e(ec,h3r),e(ec,P3e),e(P3e,p3r),b(f,jDe,u),b(f,or,u),M(Uy,or,null),e(or,_3r),e(or,oc),e(oc,u3r),e(oc,BH),e(BH,b3r),e(oc,v3r),e(oc,IH),e(IH,F3r),e(oc,T3r),e(or,M3r),e(or,Jy),e(Jy,E3r),e(Jy,B3e),e(B3e,C3r),e(Jy,w3r),e(or,A3r),e(or,kt),M(Yy,kt,null),e(kt,L3r),e(kt,I3e),e(I3e,y3r),e(kt,x3r),e(kt,rc),e(rc,$3r),e(rc,N3e),e(N3e,k3r),e(rc,S3r),e(rc,NH),e(NH,R3r),e(rc,P3r),e(kt,B3r),M(s9,kt,null),e(or,I3r),e(or,xr),M(Ky,xr,null),e(xr,N3r),e(xr,q3e),e(q3e,q3r),e(xr,j3r),e(xr,tn),e(tn,D3r),e(tn,j3e),e(j3e,G3r),e(tn,O3r),e(tn,D3e),e(D3e,V3r),e(tn,X3r),e(tn,G3e),e(G3e,z3r),e(tn,W3r),e(xr,Q3r),e(xr,ie),e(ie,l9),e(l9,O3e),e(O3e,H3r),e(l9,U3r),e(l9,qH),e(qH,J3r),e(l9,Y3r),e(ie,K3r),e(ie,i9),e(i9,V3e),e(V3e,Z3r),e(i9,eFr),e(i9,jH),e(jH,oFr),e(i9,rFr),e(ie,tFr),e(ie,d9),e(d9,X3e),e(X3e,aFr),e(d9,nFr),e(d9,DH),e(DH,sFr),e(d9,lFr),e(ie,iFr),e(ie,c9),e(c9,z3e),e(z3e,dFr),e(c9,cFr),e(c9,GH),e(GH,fFr),e(c9,mFr),e(ie,gFr),e(ie,f9),e(f9,W3e),e(W3e,hFr),e(f9,pFr),e(f9,OH),e(OH,_Fr),e(f9,uFr),e(ie,bFr),e(ie,m9),e(m9,Q3e),e(Q3e,vFr),e(m9,FFr),e(m9,VH),e(VH,TFr),e(m9,MFr),e(ie,EFr),e(ie,g9),e(g9,H3e),e(H3e,CFr),e(g9,wFr),e(g9,XH),e(XH,AFr),e(g9,LFr),e(ie,yFr),e(ie,h9),e(h9,U3e),e(U3e,xFr),e(h9,$Fr),e(h9,zH),e(zH,kFr),e(h9,SFr),e(ie,RFr),e(ie,p9),e(p9,J3e),e(J3e,PFr),e(p9,BFr),e(p9,WH),e(WH,IFr),e(p9,NFr),e(ie,qFr),e(ie,_9),e(_9,Y3e),e(Y3e,jFr),e(_9,DFr),e(_9,QH),e(QH,GFr),e(_9,OFr),e(ie,VFr),e(ie,u9),e(u9,K3e),e(K3e,XFr),e(u9,zFr),e(u9,HH),e(HH,WFr),e(u9,QFr),e(ie,HFr),e(ie,b9),e(b9,Z3e),e(Z3e,UFr),e(b9,JFr),e(b9,UH),e(UH,YFr),e(b9,KFr),e(ie,ZFr),e(ie,v9),e(v9,eFe),e(eFe,e6r),e(v9,o6r),e(v9,JH),e(JH,r6r),e(v9,t6r),e(ie,a6r),e(ie,F9),e(F9,oFe),e(oFe,n6r),e(F9,s6r),e(F9,YH),e(YH,l6r),e(F9,i6r),e(ie,d6r),e(ie,T9),e(T9,rFe),e(rFe,c6r),e(T9,f6r),e(T9,KH),e(KH,m6r),e(T9,g6r),e(ie,h6r),e(ie,M9),e(M9,tFe),e(tFe,p6r),e(M9,_6r),e(M9,ZH),e(ZH,u6r),e(M9,b6r),e(ie,v6r),e(ie,E9),e(E9,aFe),e(aFe,F6r),e(E9,T6r),e(E9,eU),e(eU,M6r),e(E9,E6r),e(ie,C6r),e(ie,C9),e(C9,nFe),e(nFe,w6r),e(C9,A6r),e(C9,oU),e(oU,L6r),e(C9,y6r),e(ie,x6r),e(ie,w9),e(w9,sFe),e(sFe,$6r),e(w9,k6r),e(w9,rU),e(rU,S6r),e(w9,R6r),e(ie,P6r),e(ie,A9),e(A9,lFe),e(lFe,B6r),e(A9,I6r),e(A9,tU),e(tU,N6r),e(A9,q6r),e(xr,j6r),M(L9,xr,null),b(f,DDe,u),b(f,tc,u),e(tc,y9),e(y9,iFe),M(Zy,iFe,null),e(tc,D6r),e(tc,dFe),e(dFe,G6r),b(f,GDe,u),b(f,rr,u),M(e8,rr,null),e(rr,O6r),e(rr,ac),e(ac,V6r),e(ac,aU),e(aU,X6r),e(ac,z6r),e(ac,nU),e(nU,W6r),e(ac,Q6r),e(rr,H6r),e(rr,o8),e(o8,U6r),e(o8,cFe),e(cFe,J6r),e(o8,Y6r),e(rr,K6r),e(rr,St),M(r8,St,null),e(St,Z6r),e(St,fFe),e(fFe,eTr),e(St,oTr),e(St,nc),e(nc,rTr),e(nc,mFe),e(mFe,tTr),e(nc,aTr),e(nc,sU),e(sU,nTr),e(nc,sTr),e(St,lTr),M(x9,St,null),e(rr,iTr),e(rr,$r),M(t8,$r,null),e($r,dTr),e($r,gFe),e(gFe,cTr),e($r,fTr),e($r,an),e(an,mTr),e(an,hFe),e(hFe,gTr),e(an,hTr),e(an,pFe),e(pFe,pTr),e(an,_Tr),e(an,_Fe),e(_Fe,uTr),e(an,bTr),e($r,vTr),e($r,ye),e(ye,$9),e($9,uFe),e(uFe,FTr),e($9,TTr),e($9,lU),e(lU,MTr),e($9,ETr),e(ye,CTr),e(ye,k9),e(k9,bFe),e(bFe,wTr),e(k9,ATr),e(k9,iU),e(iU,LTr),e(k9,yTr),e(ye,xTr),e(ye,S9),e(S9,vFe),e(vFe,$Tr),e(S9,kTr),e(S9,dU),e(dU,STr),e(S9,RTr),e(ye,PTr),e(ye,R9),e(R9,FFe),e(FFe,BTr),e(R9,ITr),e(R9,cU),e(cU,NTr),e(R9,qTr),e(ye,jTr),e(ye,P9),e(P9,TFe),e(TFe,DTr),e(P9,GTr),e(P9,fU),e(fU,OTr),e(P9,VTr),e(ye,XTr),e(ye,B9),e(B9,MFe),e(MFe,zTr),e(B9,WTr),e(B9,mU),e(mU,QTr),e(B9,HTr),e(ye,UTr),e(ye,I9),e(I9,EFe),e(EFe,JTr),e(I9,YTr),e(I9,gU),e(gU,KTr),e(I9,ZTr),e(ye,e7r),e(ye,N9),e(N9,CFe),e(CFe,o7r),e(N9,r7r),e(N9,hU),e(hU,t7r),e(N9,a7r),e(ye,n7r),e(ye,q9),e(q9,wFe),e(wFe,s7r),e(q9,l7r),e(q9,pU),e(pU,i7r),e(q9,d7r),e(ye,c7r),e(ye,j9),e(j9,AFe),e(AFe,f7r),e(j9,m7r),e(j9,_U),e(_U,g7r),e(j9,h7r),e($r,p7r),M(D9,$r,null),b(f,ODe,u),b(f,sc,u),e(sc,G9),e(G9,LFe),M(a8,LFe,null),e(sc,_7r),e(sc,yFe),e(yFe,u7r),b(f,VDe,u),b(f,tr,u),M(n8,tr,null),e(tr,b7r),e(tr,lc),e(lc,v7r),e(lc,uU),e(uU,F7r),e(lc,T7r),e(lc,bU),e(bU,M7r),e(lc,E7r),e(tr,C7r),e(tr,s8),e(s8,w7r),e(s8,xFe),e(xFe,A7r),e(s8,L7r),e(tr,y7r),e(tr,Rt),M(l8,Rt,null),e(Rt,x7r),e(Rt,$Fe),e($Fe,$7r),e(Rt,k7r),e(Rt,ic),e(ic,S7r),e(ic,kFe),e(kFe,R7r),e(ic,P7r),e(ic,vU),e(vU,B7r),e(ic,I7r),e(Rt,N7r),M(O9,Rt,null),e(tr,q7r),e(tr,kr),M(i8,kr,null),e(kr,j7r),e(kr,SFe),e(SFe,D7r),e(kr,G7r),e(kr,nn),e(nn,O7r),e(nn,RFe),e(RFe,V7r),e(nn,X7r),e(nn,PFe),e(PFe,z7r),e(nn,W7r),e(nn,BFe),e(BFe,Q7r),e(nn,H7r),e(kr,U7r),e(kr,oe),e(oe,V9),e(V9,IFe),e(IFe,J7r),e(V9,Y7r),e(V9,FU),e(FU,K7r),e(V9,Z7r),e(oe,e9r),e(oe,X9),e(X9,NFe),e(NFe,o9r),e(X9,r9r),e(X9,TU),e(TU,t9r),e(X9,a9r),e(oe,n9r),e(oe,z9),e(z9,qFe),e(qFe,s9r),e(z9,l9r),e(z9,MU),e(MU,i9r),e(z9,d9r),e(oe,c9r),e(oe,W9),e(W9,jFe),e(jFe,f9r),e(W9,m9r),e(W9,EU),e(EU,g9r),e(W9,h9r),e(oe,p9r),e(oe,Q9),e(Q9,DFe),e(DFe,_9r),e(Q9,u9r),e(Q9,CU),e(CU,b9r),e(Q9,v9r),e(oe,F9r),e(oe,H9),e(H9,GFe),e(GFe,T9r),e(H9,M9r),e(H9,wU),e(wU,E9r),e(H9,C9r),e(oe,w9r),e(oe,U9),e(U9,OFe),e(OFe,A9r),e(U9,L9r),e(U9,AU),e(AU,y9r),e(U9,x9r),e(oe,$9r),e(oe,J9),e(J9,VFe),e(VFe,k9r),e(J9,S9r),e(J9,LU),e(LU,R9r),e(J9,P9r),e(oe,B9r),e(oe,Y9),e(Y9,XFe),e(XFe,I9r),e(Y9,N9r),e(Y9,yU),e(yU,q9r),e(Y9,j9r),e(oe,D9r),e(oe,K9),e(K9,zFe),e(zFe,G9r),e(K9,O9r),e(K9,xU),e(xU,V9r),e(K9,X9r),e(oe,z9r),e(oe,Z9),e(Z9,WFe),e(WFe,W9r),e(Z9,Q9r),e(Z9,$U),e($U,H9r),e(Z9,U9r),e(oe,J9r),e(oe,eM),e(eM,QFe),e(QFe,Y9r),e(eM,K9r),e(eM,kU),e(kU,Z9r),e(eM,eMr),e(oe,oMr),e(oe,oM),e(oM,HFe),e(HFe,rMr),e(oM,tMr),e(oM,SU),e(SU,aMr),e(oM,nMr),e(oe,sMr),e(oe,rM),e(rM,UFe),e(UFe,lMr),e(rM,iMr),e(rM,RU),e(RU,dMr),e(rM,cMr),e(oe,fMr),e(oe,tM),e(tM,JFe),e(JFe,mMr),e(tM,gMr),e(tM,PU),e(PU,hMr),e(tM,pMr),e(oe,_Mr),e(oe,aM),e(aM,YFe),e(YFe,uMr),e(aM,bMr),e(aM,BU),e(BU,vMr),e(aM,FMr),e(oe,TMr),e(oe,nM),e(nM,KFe),e(KFe,MMr),e(nM,EMr),e(nM,IU),e(IU,CMr),e(nM,wMr),e(oe,AMr),e(oe,sM),e(sM,ZFe),e(ZFe,LMr),e(sM,yMr),e(sM,NU),e(NU,xMr),e(sM,$Mr),e(oe,kMr),e(oe,lM),e(lM,e6e),e(e6e,SMr),e(lM,RMr),e(lM,qU),e(qU,PMr),e(lM,BMr),e(oe,IMr),e(oe,iM),e(iM,o6e),e(o6e,NMr),e(iM,qMr),e(iM,jU),e(jU,jMr),e(iM,DMr),e(oe,GMr),e(oe,dM),e(dM,r6e),e(r6e,OMr),e(dM,VMr),e(dM,DU),e(DU,XMr),e(dM,zMr),e(oe,WMr),e(oe,cM),e(cM,t6e),e(t6e,QMr),e(cM,HMr),e(cM,GU),e(GU,UMr),e(cM,JMr),e(oe,YMr),e(oe,fM),e(fM,a6e),e(a6e,KMr),e(fM,ZMr),e(fM,OU),e(OU,e4r),e(fM,o4r),e(oe,r4r),e(oe,mM),e(mM,n6e),e(n6e,t4r),e(mM,a4r),e(mM,VU),e(VU,n4r),e(mM,s4r),e(oe,l4r),e(oe,gM),e(gM,s6e),e(s6e,i4r),e(gM,d4r),e(gM,XU),e(XU,c4r),e(gM,f4r),e(oe,m4r),e(oe,hM),e(hM,l6e),e(l6e,g4r),e(hM,h4r),e(hM,zU),e(zU,p4r),e(hM,_4r),e(kr,u4r),M(pM,kr,null),b(f,XDe,u),b(f,dc,u),e(dc,_M),e(_M,i6e),M(d8,i6e,null),e(dc,b4r),e(dc,d6e),e(d6e,v4r),b(f,zDe,u),b(f,ar,u),M(c8,ar,null),e(ar,F4r),e(ar,cc),e(cc,T4r),e(cc,WU),e(WU,M4r),e(cc,E4r),e(cc,QU),e(QU,C4r),e(cc,w4r),e(ar,A4r),e(ar,f8),e(f8,L4r),e(f8,c6e),e(c6e,y4r),e(f8,x4r),e(ar,$4r),e(ar,Pt),M(m8,Pt,null),e(Pt,k4r),e(Pt,f6e),e(f6e,S4r),e(Pt,R4r),e(Pt,fc),e(fc,P4r),e(fc,m6e),e(m6e,B4r),e(fc,I4r),e(fc,HU),e(HU,N4r),e(fc,q4r),e(Pt,j4r),M(uM,Pt,null),e(ar,D4r),e(ar,Sr),M(g8,Sr,null),e(Sr,G4r),e(Sr,g6e),e(g6e,O4r),e(Sr,V4r),e(Sr,sn),e(sn,X4r),e(sn,h6e),e(h6e,z4r),e(sn,W4r),e(sn,p6e),e(p6e,Q4r),e(sn,H4r),e(sn,_6e),e(_6e,U4r),e(sn,J4r),e(Sr,Y4r),e(Sr,pe),e(pe,bM),e(bM,u6e),e(u6e,K4r),e(bM,Z4r),e(bM,UU),e(UU,eEr),e(bM,oEr),e(pe,rEr),e(pe,vM),e(vM,b6e),e(b6e,tEr),e(vM,aEr),e(vM,JU),e(JU,nEr),e(vM,sEr),e(pe,lEr),e(pe,FM),e(FM,v6e),e(v6e,iEr),e(FM,dEr),e(FM,YU),e(YU,cEr),e(FM,fEr),e(pe,mEr),e(pe,TM),e(TM,F6e),e(F6e,gEr),e(TM,hEr),e(TM,KU),e(KU,pEr),e(TM,_Er),e(pe,uEr),e(pe,MM),e(MM,T6e),e(T6e,bEr),e(MM,vEr),e(MM,ZU),e(ZU,FEr),e(MM,TEr),e(pe,MEr),e(pe,EM),e(EM,M6e),e(M6e,EEr),e(EM,CEr),e(EM,eJ),e(eJ,wEr),e(EM,AEr),e(pe,LEr),e(pe,CM),e(CM,E6e),e(E6e,yEr),e(CM,xEr),e(CM,oJ),e(oJ,$Er),e(CM,kEr),e(pe,SEr),e(pe,wM),e(wM,C6e),e(C6e,REr),e(wM,PEr),e(wM,rJ),e(rJ,BEr),e(wM,IEr),e(pe,NEr),e(pe,AM),e(AM,w6e),e(w6e,qEr),e(AM,jEr),e(AM,tJ),e(tJ,DEr),e(AM,GEr),e(pe,OEr),e(pe,LM),e(LM,A6e),e(A6e,VEr),e(LM,XEr),e(LM,aJ),e(aJ,zEr),e(LM,WEr),e(pe,QEr),e(pe,yM),e(yM,L6e),e(L6e,HEr),e(yM,UEr),e(yM,nJ),e(nJ,JEr),e(yM,YEr),e(pe,KEr),e(pe,xM),e(xM,y6e),e(y6e,ZEr),e(xM,eCr),e(xM,sJ),e(sJ,oCr),e(xM,rCr),e(pe,tCr),e(pe,$M),e($M,x6e),e(x6e,aCr),e($M,nCr),e($M,lJ),e(lJ,sCr),e($M,lCr),e(pe,iCr),e(pe,kM),e(kM,$6e),e($6e,dCr),e(kM,cCr),e(kM,iJ),e(iJ,fCr),e(kM,mCr),e(pe,gCr),e(pe,SM),e(SM,k6e),e(k6e,hCr),e(SM,pCr),e(SM,dJ),e(dJ,_Cr),e(SM,uCr),e(pe,bCr),e(pe,RM),e(RM,S6e),e(S6e,vCr),e(RM,FCr),e(RM,cJ),e(cJ,TCr),e(RM,MCr),e(pe,ECr),e(pe,PM),e(PM,R6e),e(R6e,CCr),e(PM,wCr),e(PM,fJ),e(fJ,ACr),e(PM,LCr),e(Sr,yCr),M(BM,Sr,null),b(f,WDe,u),b(f,mc,u),e(mc,IM),e(IM,P6e),M(h8,P6e,null),e(mc,xCr),e(mc,B6e),e(B6e,$Cr),b(f,QDe,u),b(f,nr,u),M(p8,nr,null),e(nr,kCr),e(nr,gc),e(gc,SCr),e(gc,mJ),e(mJ,RCr),e(gc,PCr),e(gc,gJ),e(gJ,BCr),e(gc,ICr),e(nr,NCr),e(nr,_8),e(_8,qCr),e(_8,I6e),e(I6e,jCr),e(_8,DCr),e(nr,GCr),e(nr,Bt),M(u8,Bt,null),e(Bt,OCr),e(Bt,N6e),e(N6e,VCr),e(Bt,XCr),e(Bt,hc),e(hc,zCr),e(hc,q6e),e(q6e,WCr),e(hc,QCr),e(hc,hJ),e(hJ,HCr),e(hc,UCr),e(Bt,JCr),M(NM,Bt,null),e(nr,YCr),e(nr,Rr),M(b8,Rr,null),e(Rr,KCr),e(Rr,j6e),e(j6e,ZCr),e(Rr,e5r),e(Rr,ln),e(ln,o5r),e(ln,D6e),e(D6e,r5r),e(ln,t5r),e(ln,G6e),e(G6e,a5r),e(ln,n5r),e(ln,O6e),e(O6e,s5r),e(ln,l5r),e(Rr,i5r),e(Rr,v8),e(v8,qM),e(qM,V6e),e(V6e,d5r),e(qM,c5r),e(qM,pJ),e(pJ,f5r),e(qM,m5r),e(v8,g5r),e(v8,jM),e(jM,X6e),e(X6e,h5r),e(jM,p5r),e(jM,_J),e(_J,_5r),e(jM,u5r),e(Rr,b5r),M(DM,Rr,null),b(f,HDe,u),b(f,pc,u),e(pc,GM),e(GM,z6e),M(F8,z6e,null),e(pc,v5r),e(pc,W6e),e(W6e,F5r),b(f,UDe,u),b(f,sr,u),M(T8,sr,null),e(sr,T5r),e(sr,_c),e(_c,M5r),e(_c,uJ),e(uJ,E5r),e(_c,C5r),e(_c,bJ),e(bJ,w5r),e(_c,A5r),e(sr,L5r),e(sr,M8),e(M8,y5r),e(M8,Q6e),e(Q6e,x5r),e(M8,$5r),e(sr,k5r),e(sr,It),M(E8,It,null),e(It,S5r),e(It,H6e),e(H6e,R5r),e(It,P5r),e(It,uc),e(uc,B5r),e(uc,U6e),e(U6e,I5r),e(uc,N5r),e(uc,vJ),e(vJ,q5r),e(uc,j5r),e(It,D5r),M(OM,It,null),e(sr,G5r),e(sr,Pr),M(C8,Pr,null),e(Pr,O5r),e(Pr,J6e),e(J6e,V5r),e(Pr,X5r),e(Pr,dn),e(dn,z5r),e(dn,Y6e),e(Y6e,W5r),e(dn,Q5r),e(dn,K6e),e(K6e,H5r),e(dn,U5r),e(dn,Z6e),e(Z6e,J5r),e(dn,Y5r),e(Pr,K5r),e(Pr,eTe),e(eTe,VM),e(VM,oTe),e(oTe,Z5r),e(VM,e0r),e(VM,FJ),e(FJ,o0r),e(VM,r0r),e(Pr,t0r),M(XM,Pr,null),b(f,JDe,u),b(f,bc,u),e(bc,zM),e(zM,rTe),M(w8,rTe,null),e(bc,a0r),e(bc,tTe),e(tTe,n0r),b(f,YDe,u),b(f,lr,u),M(A8,lr,null),e(lr,s0r),e(lr,vc),e(vc,l0r),e(vc,TJ),e(TJ,i0r),e(vc,d0r),e(vc,MJ),e(MJ,c0r),e(vc,f0r),e(lr,m0r),e(lr,L8),e(L8,g0r),e(L8,aTe),e(aTe,h0r),e(L8,p0r),e(lr,_0r),e(lr,Nt),M(y8,Nt,null),e(Nt,u0r),e(Nt,nTe),e(nTe,b0r),e(Nt,v0r),e(Nt,Fc),e(Fc,F0r),e(Fc,sTe),e(sTe,T0r),e(Fc,M0r),e(Fc,EJ),e(EJ,E0r),e(Fc,C0r),e(Nt,w0r),M(WM,Nt,null),e(lr,A0r),e(lr,Br),M(x8,Br,null),e(Br,L0r),e(Br,lTe),e(lTe,y0r),e(Br,x0r),e(Br,cn),e(cn,$0r),e(cn,iTe),e(iTe,k0r),e(cn,S0r),e(cn,dTe),e(dTe,R0r),e(cn,P0r),e(cn,cTe),e(cTe,B0r),e(cn,I0r),e(Br,N0r),e(Br,de),e(de,QM),e(QM,fTe),e(fTe,q0r),e(QM,j0r),e(QM,CJ),e(CJ,D0r),e(QM,G0r),e(de,O0r),e(de,HM),e(HM,mTe),e(mTe,V0r),e(HM,X0r),e(HM,wJ),e(wJ,z0r),e(HM,W0r),e(de,Q0r),e(de,UM),e(UM,gTe),e(gTe,H0r),e(UM,U0r),e(UM,AJ),e(AJ,J0r),e(UM,Y0r),e(de,K0r),e(de,JM),e(JM,hTe),e(hTe,Z0r),e(JM,ewr),e(JM,LJ),e(LJ,owr),e(JM,rwr),e(de,twr),e(de,YM),e(YM,pTe),e(pTe,awr),e(YM,nwr),e(YM,yJ),e(yJ,swr),e(YM,lwr),e(de,iwr),e(de,KM),e(KM,_Te),e(_Te,dwr),e(KM,cwr),e(KM,xJ),e(xJ,fwr),e(KM,mwr),e(de,gwr),e(de,ZM),e(ZM,uTe),e(uTe,hwr),e(ZM,pwr),e(ZM,$J),e($J,_wr),e(ZM,uwr),e(de,bwr),e(de,e4),e(e4,bTe),e(bTe,vwr),e(e4,Fwr),e(e4,kJ),e(kJ,Twr),e(e4,Mwr),e(de,Ewr),e(de,o4),e(o4,vTe),e(vTe,Cwr),e(o4,wwr),e(o4,SJ),e(SJ,Awr),e(o4,Lwr),e(de,ywr),e(de,r4),e(r4,FTe),e(FTe,xwr),e(r4,$wr),e(r4,RJ),e(RJ,kwr),e(r4,Swr),e(de,Rwr),e(de,t4),e(t4,TTe),e(TTe,Pwr),e(t4,Bwr),e(t4,PJ),e(PJ,Iwr),e(t4,Nwr),e(de,qwr),e(de,a4),e(a4,MTe),e(MTe,jwr),e(a4,Dwr),e(a4,BJ),e(BJ,Gwr),e(a4,Owr),e(de,Vwr),e(de,n4),e(n4,ETe),e(ETe,Xwr),e(n4,zwr),e(n4,IJ),e(IJ,Wwr),e(n4,Qwr),e(de,Hwr),e(de,s4),e(s4,CTe),e(CTe,Uwr),e(s4,Jwr),e(s4,NJ),e(NJ,Ywr),e(s4,Kwr),e(de,Zwr),e(de,l4),e(l4,wTe),e(wTe,eAr),e(l4,oAr),e(l4,qJ),e(qJ,rAr),e(l4,tAr),e(de,aAr),e(de,i4),e(i4,ATe),e(ATe,nAr),e(i4,sAr),e(i4,jJ),e(jJ,lAr),e(i4,iAr),e(de,dAr),e(de,d4),e(d4,LTe),e(LTe,cAr),e(d4,fAr),e(d4,DJ),e(DJ,mAr),e(d4,gAr),e(de,hAr),e(de,c4),e(c4,yTe),e(yTe,pAr),e(c4,_Ar),e(c4,GJ),e(GJ,uAr),e(c4,bAr),e(de,vAr),e(de,f4),e(f4,xTe),e(xTe,FAr),e(f4,TAr),e(f4,OJ),e(OJ,MAr),e(f4,EAr),e(de,CAr),e(de,m4),e(m4,$Te),e($Te,wAr),e(m4,AAr),e(m4,VJ),e(VJ,LAr),e(m4,yAr),e(Br,xAr),M(g4,Br,null),b(f,KDe,u),b(f,Tc,u),e(Tc,h4),e(h4,kTe),M($8,kTe,null),e(Tc,$Ar),e(Tc,STe),e(STe,kAr),b(f,ZDe,u),b(f,ir,u),M(k8,ir,null),e(ir,SAr),e(ir,Mc),e(Mc,RAr),e(Mc,XJ),e(XJ,PAr),e(Mc,BAr),e(Mc,zJ),e(zJ,IAr),e(Mc,NAr),e(ir,qAr),e(ir,S8),e(S8,jAr),e(S8,RTe),e(RTe,DAr),e(S8,GAr),e(ir,OAr),e(ir,qt),M(R8,qt,null),e(qt,VAr),e(qt,PTe),e(PTe,XAr),e(qt,zAr),e(qt,Ec),e(Ec,WAr),e(Ec,BTe),e(BTe,QAr),e(Ec,HAr),e(Ec,WJ),e(WJ,UAr),e(Ec,JAr),e(qt,YAr),M(p4,qt,null),e(ir,KAr),e(ir,Ir),M(P8,Ir,null),e(Ir,ZAr),e(Ir,ITe),e(ITe,eLr),e(Ir,oLr),e(Ir,fn),e(fn,rLr),e(fn,NTe),e(NTe,tLr),e(fn,aLr),e(fn,qTe),e(qTe,nLr),e(fn,sLr),e(fn,jTe),e(jTe,lLr),e(fn,iLr),e(Ir,dLr),e(Ir,ce),e(ce,_4),e(_4,DTe),e(DTe,cLr),e(_4,fLr),e(_4,QJ),e(QJ,mLr),e(_4,gLr),e(ce,hLr),e(ce,u4),e(u4,GTe),e(GTe,pLr),e(u4,_Lr),e(u4,HJ),e(HJ,uLr),e(u4,bLr),e(ce,vLr),e(ce,b4),e(b4,OTe),e(OTe,FLr),e(b4,TLr),e(b4,UJ),e(UJ,MLr),e(b4,ELr),e(ce,CLr),e(ce,v4),e(v4,VTe),e(VTe,wLr),e(v4,ALr),e(v4,JJ),e(JJ,LLr),e(v4,yLr),e(ce,xLr),e(ce,F4),e(F4,XTe),e(XTe,$Lr),e(F4,kLr),e(F4,YJ),e(YJ,SLr),e(F4,RLr),e(ce,PLr),e(ce,T4),e(T4,zTe),e(zTe,BLr),e(T4,ILr),e(T4,KJ),e(KJ,NLr),e(T4,qLr),e(ce,jLr),e(ce,M4),e(M4,WTe),e(WTe,DLr),e(M4,GLr),e(M4,ZJ),e(ZJ,OLr),e(M4,VLr),e(ce,XLr),e(ce,E4),e(E4,QTe),e(QTe,zLr),e(E4,WLr),e(E4,eY),e(eY,QLr),e(E4,HLr),e(ce,ULr),e(ce,C4),e(C4,HTe),e(HTe,JLr),e(C4,YLr),e(C4,oY),e(oY,KLr),e(C4,ZLr),e(ce,eyr),e(ce,w4),e(w4,UTe),e(UTe,oyr),e(w4,ryr),e(w4,rY),e(rY,tyr),e(w4,ayr),e(ce,nyr),e(ce,A4),e(A4,JTe),e(JTe,syr),e(A4,lyr),e(A4,tY),e(tY,iyr),e(A4,dyr),e(ce,cyr),e(ce,L4),e(L4,YTe),e(YTe,fyr),e(L4,myr),e(L4,aY),e(aY,gyr),e(L4,hyr),e(ce,pyr),e(ce,y4),e(y4,KTe),e(KTe,_yr),e(y4,uyr),e(y4,nY),e(nY,byr),e(y4,vyr),e(ce,Fyr),e(ce,x4),e(x4,ZTe),e(ZTe,Tyr),e(x4,Myr),e(x4,sY),e(sY,Eyr),e(x4,Cyr),e(ce,wyr),e(ce,$4),e($4,e7e),e(e7e,Ayr),e($4,Lyr),e($4,lY),e(lY,yyr),e($4,xyr),e(ce,$yr),e(ce,k4),e(k4,o7e),e(o7e,kyr),e(k4,Syr),e(k4,iY),e(iY,Ryr),e(k4,Pyr),e(ce,Byr),e(ce,S4),e(S4,r7e),e(r7e,Iyr),e(S4,Nyr),e(S4,dY),e(dY,qyr),e(S4,jyr),e(ce,Dyr),e(ce,R4),e(R4,t7e),e(t7e,Gyr),e(R4,Oyr),e(R4,cY),e(cY,Vyr),e(R4,Xyr),e(ce,zyr),e(ce,P4),e(P4,a7e),e(a7e,Wyr),e(P4,Qyr),e(P4,fY),e(fY,Hyr),e(P4,Uyr),e(ce,Jyr),e(ce,B4),e(B4,n7e),e(n7e,Yyr),e(B4,Kyr),e(B4,mY),e(mY,Zyr),e(B4,e8r),e(Ir,o8r),M(I4,Ir,null),b(f,eGe,u),b(f,Cc,u),e(Cc,N4),e(N4,s7e),M(B8,s7e,null),e(Cc,r8r),e(Cc,l7e),e(l7e,t8r),b(f,oGe,u),b(f,dr,u),M(I8,dr,null),e(dr,a8r),e(dr,wc),e(wc,n8r),e(wc,gY),e(gY,s8r),e(wc,l8r),e(wc,hY),e(hY,i8r),e(wc,d8r),e(dr,c8r),e(dr,N8),e(N8,f8r),e(N8,i7e),e(i7e,m8r),e(N8,g8r),e(dr,h8r),e(dr,jt),M(q8,jt,null),e(jt,p8r),e(jt,d7e),e(d7e,_8r),e(jt,u8r),e(jt,Ac),e(Ac,b8r),e(Ac,c7e),e(c7e,v8r),e(Ac,F8r),e(Ac,pY),e(pY,T8r),e(Ac,M8r),e(jt,E8r),M(q4,jt,null),e(dr,C8r),e(dr,Nr),M(j8,Nr,null),e(Nr,w8r),e(Nr,f7e),e(f7e,A8r),e(Nr,L8r),e(Nr,mn),e(mn,y8r),e(mn,m7e),e(m7e,x8r),e(mn,$8r),e(mn,g7e),e(g7e,k8r),e(mn,S8r),e(mn,h7e),e(h7e,R8r),e(mn,P8r),e(Nr,B8r),e(Nr,p7e),e(p7e,j4),e(j4,_7e),e(_7e,I8r),e(j4,N8r),e(j4,_Y),e(_Y,q8r),e(j4,j8r),e(Nr,D8r),M(D4,Nr,null),b(f,rGe,u),b(f,Lc,u),e(Lc,G4),e(G4,u7e),M(D8,u7e,null),e(Lc,G8r),e(Lc,b7e),e(b7e,O8r),b(f,tGe,u),b(f,cr,u),M(G8,cr,null),e(cr,V8r),e(cr,yc),e(yc,X8r),e(yc,uY),e(uY,z8r),e(yc,W8r),e(yc,bY),e(bY,Q8r),e(yc,H8r),e(cr,U8r),e(cr,O8),e(O8,J8r),e(O8,v7e),e(v7e,Y8r),e(O8,K8r),e(cr,Z8r),e(cr,Dt),M(V8,Dt,null),e(Dt,exr),e(Dt,F7e),e(F7e,oxr),e(Dt,rxr),e(Dt,xc),e(xc,txr),e(xc,T7e),e(T7e,axr),e(xc,nxr),e(xc,vY),e(vY,sxr),e(xc,lxr),e(Dt,ixr),M(O4,Dt,null),e(cr,dxr),e(cr,qr),M(X8,qr,null),e(qr,cxr),e(qr,M7e),e(M7e,fxr),e(qr,mxr),e(qr,gn),e(gn,gxr),e(gn,E7e),e(E7e,hxr),e(gn,pxr),e(gn,C7e),e(C7e,_xr),e(gn,uxr),e(gn,w7e),e(w7e,bxr),e(gn,vxr),e(qr,Fxr),e(qr,A7e),e(A7e,V4),e(V4,L7e),e(L7e,Txr),e(V4,Mxr),e(V4,FY),e(FY,Exr),e(V4,Cxr),e(qr,wxr),M(X4,qr,null),b(f,aGe,u),b(f,$c,u),e($c,z4),e(z4,y7e),M(z8,y7e,null),e($c,Axr),e($c,x7e),e(x7e,Lxr),b(f,nGe,u),b(f,fr,u),M(W8,fr,null),e(fr,yxr),e(fr,kc),e(kc,xxr),e(kc,TY),e(TY,$xr),e(kc,kxr),e(kc,MY),e(MY,Sxr),e(kc,Rxr),e(fr,Pxr),e(fr,Q8),e(Q8,Bxr),e(Q8,$7e),e($7e,Ixr),e(Q8,Nxr),e(fr,qxr),e(fr,Gt),M(H8,Gt,null),e(Gt,jxr),e(Gt,k7e),e(k7e,Dxr),e(Gt,Gxr),e(Gt,Sc),e(Sc,Oxr),e(Sc,S7e),e(S7e,Vxr),e(Sc,Xxr),e(Sc,EY),e(EY,zxr),e(Sc,Wxr),e(Gt,Qxr),M(W4,Gt,null),e(fr,Hxr),e(fr,jr),M(U8,jr,null),e(jr,Uxr),e(jr,R7e),e(R7e,Jxr),e(jr,Yxr),e(jr,hn),e(hn,Kxr),e(hn,P7e),e(P7e,Zxr),e(hn,e$r),e(hn,B7e),e(B7e,o$r),e(hn,r$r),e(hn,I7e),e(I7e,t$r),e(hn,a$r),e(jr,n$r),e(jr,re),e(re,Q4),e(Q4,N7e),e(N7e,s$r),e(Q4,l$r),e(Q4,CY),e(CY,i$r),e(Q4,d$r),e(re,c$r),e(re,H4),e(H4,q7e),e(q7e,f$r),e(H4,m$r),e(H4,wY),e(wY,g$r),e(H4,h$r),e(re,p$r),e(re,U4),e(U4,j7e),e(j7e,_$r),e(U4,u$r),e(U4,AY),e(AY,b$r),e(U4,v$r),e(re,F$r),e(re,J4),e(J4,D7e),e(D7e,T$r),e(J4,M$r),e(J4,LY),e(LY,E$r),e(J4,C$r),e(re,w$r),e(re,Y4),e(Y4,G7e),e(G7e,A$r),e(Y4,L$r),e(Y4,yY),e(yY,y$r),e(Y4,x$r),e(re,$$r),e(re,K4),e(K4,O7e),e(O7e,k$r),e(K4,S$r),e(K4,xY),e(xY,R$r),e(K4,P$r),e(re,B$r),e(re,Z4),e(Z4,V7e),e(V7e,I$r),e(Z4,N$r),e(Z4,$Y),e($Y,q$r),e(Z4,j$r),e(re,D$r),e(re,eE),e(eE,X7e),e(X7e,G$r),e(eE,O$r),e(eE,kY),e(kY,V$r),e(eE,X$r),e(re,z$r),e(re,oE),e(oE,z7e),e(z7e,W$r),e(oE,Q$r),e(oE,SY),e(SY,H$r),e(oE,U$r),e(re,J$r),e(re,rE),e(rE,W7e),e(W7e,Y$r),e(rE,K$r),e(rE,RY),e(RY,Z$r),e(rE,ekr),e(re,okr),e(re,tE),e(tE,Q7e),e(Q7e,rkr),e(tE,tkr),e(tE,PY),e(PY,akr),e(tE,nkr),e(re,skr),e(re,aE),e(aE,H7e),e(H7e,lkr),e(aE,ikr),e(aE,BY),e(BY,dkr),e(aE,ckr),e(re,fkr),e(re,nE),e(nE,U7e),e(U7e,mkr),e(nE,gkr),e(nE,IY),e(IY,hkr),e(nE,pkr),e(re,_kr),e(re,sE),e(sE,J7e),e(J7e,ukr),e(sE,bkr),e(sE,NY),e(NY,vkr),e(sE,Fkr),e(re,Tkr),e(re,lE),e(lE,Y7e),e(Y7e,Mkr),e(lE,Ekr),e(lE,qY),e(qY,Ckr),e(lE,wkr),e(re,Akr),e(re,iE),e(iE,K7e),e(K7e,Lkr),e(iE,ykr),e(iE,jY),e(jY,xkr),e(iE,$kr),e(re,kkr),e(re,dE),e(dE,Z7e),e(Z7e,Skr),e(dE,Rkr),e(dE,DY),e(DY,Pkr),e(dE,Bkr),e(re,Ikr),e(re,cE),e(cE,e9e),e(e9e,Nkr),e(cE,qkr),e(cE,GY),e(GY,jkr),e(cE,Dkr),e(re,Gkr),e(re,fE),e(fE,o9e),e(o9e,Okr),e(fE,Vkr),e(fE,OY),e(OY,Xkr),e(fE,zkr),e(re,Wkr),e(re,mE),e(mE,r9e),e(r9e,Qkr),e(mE,Hkr),e(mE,VY),e(VY,Ukr),e(mE,Jkr),e(re,Ykr),e(re,gE),e(gE,t9e),e(t9e,Kkr),e(gE,Zkr),e(gE,XY),e(XY,eSr),e(gE,oSr),e(re,rSr),e(re,hE),e(hE,a9e),e(a9e,tSr),e(hE,aSr),e(hE,zY),e(zY,nSr),e(hE,sSr),e(re,lSr),e(re,pE),e(pE,n9e),e(n9e,iSr),e(pE,dSr),e(pE,WY),e(WY,cSr),e(pE,fSr),e(re,mSr),e(re,_E),e(_E,s9e),e(s9e,gSr),e(_E,hSr),e(_E,QY),e(QY,pSr),e(_E,_Sr),e(re,uSr),e(re,uE),e(uE,l9e),e(l9e,bSr),e(uE,vSr),e(uE,HY),e(HY,FSr),e(uE,TSr),e(re,MSr),e(re,bE),e(bE,i9e),e(i9e,ESr),e(bE,CSr),e(bE,UY),e(UY,wSr),e(bE,ASr),e(jr,LSr),M(vE,jr,null),b(f,sGe,u),b(f,Rc,u),e(Rc,FE),e(FE,d9e),M(J8,d9e,null),e(Rc,ySr),e(Rc,c9e),e(c9e,xSr),b(f,lGe,u),b(f,mr,u),M(Y8,mr,null),e(mr,$Sr),e(mr,Pc),e(Pc,kSr),e(Pc,JY),e(JY,SSr),e(Pc,RSr),e(Pc,YY),e(YY,PSr),e(Pc,BSr),e(mr,ISr),e(mr,K8),e(K8,NSr),e(K8,f9e),e(f9e,qSr),e(K8,jSr),e(mr,DSr),e(mr,Ot),M(Z8,Ot,null),e(Ot,GSr),e(Ot,m9e),e(m9e,OSr),e(Ot,VSr),e(Ot,Bc),e(Bc,XSr),e(Bc,g9e),e(g9e,zSr),e(Bc,WSr),e(Bc,KY),e(KY,QSr),e(Bc,HSr),e(Ot,USr),M(TE,Ot,null),e(mr,JSr),e(mr,Dr),M(ex,Dr,null),e(Dr,YSr),e(Dr,h9e),e(h9e,KSr),e(Dr,ZSr),e(Dr,pn),e(pn,eRr),e(pn,p9e),e(p9e,oRr),e(pn,rRr),e(pn,_9e),e(_9e,tRr),e(pn,aRr),e(pn,u9e),e(u9e,nRr),e(pn,sRr),e(Dr,lRr),e(Dr,xe),e(xe,ME),e(ME,b9e),e(b9e,iRr),e(ME,dRr),e(ME,ZY),e(ZY,cRr),e(ME,fRr),e(xe,mRr),e(xe,EE),e(EE,v9e),e(v9e,gRr),e(EE,hRr),e(EE,eK),e(eK,pRr),e(EE,_Rr),e(xe,uRr),e(xe,CE),e(CE,F9e),e(F9e,bRr),e(CE,vRr),e(CE,oK),e(oK,FRr),e(CE,TRr),e(xe,MRr),e(xe,wE),e(wE,T9e),e(T9e,ERr),e(wE,CRr),e(wE,rK),e(rK,wRr),e(wE,ARr),e(xe,LRr),e(xe,AE),e(AE,M9e),e(M9e,yRr),e(AE,xRr),e(AE,tK),e(tK,$Rr),e(AE,kRr),e(xe,SRr),e(xe,LE),e(LE,E9e),e(E9e,RRr),e(LE,PRr),e(LE,aK),e(aK,BRr),e(LE,IRr),e(xe,NRr),e(xe,yE),e(yE,C9e),e(C9e,qRr),e(yE,jRr),e(yE,nK),e(nK,DRr),e(yE,GRr),e(xe,ORr),e(xe,xE),e(xE,w9e),e(w9e,VRr),e(xE,XRr),e(xE,sK),e(sK,zRr),e(xE,WRr),e(xe,QRr),e(xe,$E),e($E,A9e),e(A9e,HRr),e($E,URr),e($E,lK),e(lK,JRr),e($E,YRr),e(xe,KRr),e(xe,kE),e(kE,L9e),e(L9e,ZRr),e(kE,ePr),e(kE,iK),e(iK,oPr),e(kE,rPr),e(Dr,tPr),M(SE,Dr,null),b(f,iGe,u),b(f,Ic,u),e(Ic,RE),e(RE,y9e),M(ox,y9e,null),e(Ic,aPr),e(Ic,x9e),e(x9e,nPr),b(f,dGe,u),b(f,gr,u),M(rx,gr,null),e(gr,sPr),e(gr,Nc),e(Nc,lPr),e(Nc,dK),e(dK,iPr),e(Nc,dPr),e(Nc,cK),e(cK,cPr),e(Nc,fPr),e(gr,mPr),e(gr,tx),e(tx,gPr),e(tx,$9e),e($9e,hPr),e(tx,pPr),e(gr,_Pr),e(gr,Vt),M(ax,Vt,null),e(Vt,uPr),e(Vt,k9e),e(k9e,bPr),e(Vt,vPr),e(Vt,qc),e(qc,FPr),e(qc,S9e),e(S9e,TPr),e(qc,MPr),e(qc,fK),e(fK,EPr),e(qc,CPr),e(Vt,wPr),M(PE,Vt,null),e(gr,APr),e(gr,Gr),M(nx,Gr,null),e(Gr,LPr),e(Gr,R9e),e(R9e,yPr),e(Gr,xPr),e(Gr,_n),e(_n,$Pr),e(_n,P9e),e(P9e,kPr),e(_n,SPr),e(_n,B9e),e(B9e,RPr),e(_n,PPr),e(_n,I9e),e(I9e,BPr),e(_n,IPr),e(Gr,NPr),e(Gr,Ee),e(Ee,BE),e(BE,N9e),e(N9e,qPr),e(BE,jPr),e(BE,mK),e(mK,DPr),e(BE,GPr),e(Ee,OPr),e(Ee,IE),e(IE,q9e),e(q9e,VPr),e(IE,XPr),e(IE,gK),e(gK,zPr),e(IE,WPr),e(Ee,QPr),e(Ee,NE),e(NE,j9e),e(j9e,HPr),e(NE,UPr),e(NE,hK),e(hK,JPr),e(NE,YPr),e(Ee,KPr),e(Ee,qE),e(qE,D9e),e(D9e,ZPr),e(qE,eBr),e(qE,pK),e(pK,oBr),e(qE,rBr),e(Ee,tBr),e(Ee,jE),e(jE,G9e),e(G9e,aBr),e(jE,nBr),e(jE,_K),e(_K,sBr),e(jE,lBr),e(Ee,iBr),e(Ee,DE),e(DE,O9e),e(O9e,dBr),e(DE,cBr),e(DE,uK),e(uK,fBr),e(DE,mBr),e(Ee,gBr),e(Ee,GE),e(GE,V9e),e(V9e,hBr),e(GE,pBr),e(GE,bK),e(bK,_Br),e(GE,uBr),e(Ee,bBr),e(Ee,OE),e(OE,X9e),e(X9e,vBr),e(OE,FBr),e(OE,vK),e(vK,TBr),e(OE,MBr),e(Ee,EBr),e(Ee,VE),e(VE,z9e),e(z9e,CBr),e(VE,wBr),e(VE,FK),e(FK,ABr),e(VE,LBr),e(Ee,yBr),e(Ee,XE),e(XE,W9e),e(W9e,xBr),e(XE,$Br),e(XE,TK),e(TK,kBr),e(XE,SBr),e(Ee,RBr),e(Ee,zE),e(zE,Q9e),e(Q9e,PBr),e(zE,BBr),e(zE,MK),e(MK,IBr),e(zE,NBr),e(Ee,qBr),e(Ee,WE),e(WE,H9e),e(H9e,jBr),e(WE,DBr),e(WE,EK),e(EK,GBr),e(WE,OBr),e(Gr,VBr),M(QE,Gr,null),b(f,cGe,u),b(f,jc,u),e(jc,HE),e(HE,U9e),M(sx,U9e,null),e(jc,XBr),e(jc,J9e),e(J9e,zBr),b(f,fGe,u),b(f,hr,u),M(lx,hr,null),e(hr,WBr),e(hr,Dc),e(Dc,QBr),e(Dc,CK),e(CK,HBr),e(Dc,UBr),e(Dc,wK),e(wK,JBr),e(Dc,YBr),e(hr,KBr),e(hr,ix),e(ix,ZBr),e(ix,Y9e),e(Y9e,eIr),e(ix,oIr),e(hr,rIr),e(hr,Xt),M(dx,Xt,null),e(Xt,tIr),e(Xt,K9e),e(K9e,aIr),e(Xt,nIr),e(Xt,Gc),e(Gc,sIr),e(Gc,Z9e),e(Z9e,lIr),e(Gc,iIr),e(Gc,AK),e(AK,dIr),e(Gc,cIr),e(Xt,fIr),M(UE,Xt,null),e(hr,mIr),e(hr,Or),M(cx,Or,null),e(Or,gIr),e(Or,eMe),e(eMe,hIr),e(Or,pIr),e(Or,un),e(un,_Ir),e(un,oMe),e(oMe,uIr),e(un,bIr),e(un,rMe),e(rMe,vIr),e(un,FIr),e(un,tMe),e(tMe,TIr),e(un,MIr),e(Or,EIr),e(Or,$e),e($e,JE),e(JE,aMe),e(aMe,CIr),e(JE,wIr),e(JE,LK),e(LK,AIr),e(JE,LIr),e($e,yIr),e($e,YE),e(YE,nMe),e(nMe,xIr),e(YE,$Ir),e(YE,yK),e(yK,kIr),e(YE,SIr),e($e,RIr),e($e,KE),e(KE,sMe),e(sMe,PIr),e(KE,BIr),e(KE,xK),e(xK,IIr),e(KE,NIr),e($e,qIr),e($e,ZE),e(ZE,lMe),e(lMe,jIr),e(ZE,DIr),e(ZE,$K),e($K,GIr),e(ZE,OIr),e($e,VIr),e($e,eC),e(eC,iMe),e(iMe,XIr),e(eC,zIr),e(eC,kK),e(kK,WIr),e(eC,QIr),e($e,HIr),e($e,oC),e(oC,dMe),e(dMe,UIr),e(oC,JIr),e(oC,SK),e(SK,YIr),e(oC,KIr),e($e,ZIr),e($e,rC),e(rC,cMe),e(cMe,eNr),e(rC,oNr),e(rC,RK),e(RK,rNr),e(rC,tNr),e($e,aNr),e($e,tC),e(tC,fMe),e(fMe,nNr),e(tC,sNr),e(tC,PK),e(PK,lNr),e(tC,iNr),e($e,dNr),e($e,aC),e(aC,mMe),e(mMe,cNr),e(aC,fNr),e(aC,BK),e(BK,mNr),e(aC,gNr),e($e,hNr),e($e,nC),e(nC,gMe),e(gMe,pNr),e(nC,_Nr),e(nC,IK),e(IK,uNr),e(nC,bNr),e(Or,vNr),M(sC,Or,null),b(f,mGe,u),b(f,Oc,u),e(Oc,lC),e(lC,hMe),M(fx,hMe,null),e(Oc,FNr),e(Oc,pMe),e(pMe,TNr),b(f,gGe,u),b(f,pr,u),M(mx,pr,null),e(pr,MNr),e(pr,Vc),e(Vc,ENr),e(Vc,NK),e(NK,CNr),e(Vc,wNr),e(Vc,qK),e(qK,ANr),e(Vc,LNr),e(pr,yNr),e(pr,gx),e(gx,xNr),e(gx,_Me),e(_Me,$Nr),e(gx,kNr),e(pr,SNr),e(pr,zt),M(hx,zt,null),e(zt,RNr),e(zt,uMe),e(uMe,PNr),e(zt,BNr),e(zt,Xc),e(Xc,INr),e(Xc,bMe),e(bMe,NNr),e(Xc,qNr),e(Xc,jK),e(jK,jNr),e(Xc,DNr),e(zt,GNr),M(iC,zt,null),e(pr,ONr),e(pr,Vr),M(px,Vr,null),e(Vr,VNr),e(Vr,vMe),e(vMe,XNr),e(Vr,zNr),e(Vr,bn),e(bn,WNr),e(bn,FMe),e(FMe,QNr),e(bn,HNr),e(bn,TMe),e(TMe,UNr),e(bn,JNr),e(bn,MMe),e(MMe,YNr),e(bn,KNr),e(Vr,ZNr),e(Vr,Pe),e(Pe,dC),e(dC,EMe),e(EMe,eqr),e(dC,oqr),e(dC,DK),e(DK,rqr),e(dC,tqr),e(Pe,aqr),e(Pe,cC),e(cC,CMe),e(CMe,nqr),e(cC,sqr),e(cC,GK),e(GK,lqr),e(cC,iqr),e(Pe,dqr),e(Pe,fC),e(fC,wMe),e(wMe,cqr),e(fC,fqr),e(fC,OK),e(OK,mqr),e(fC,gqr),e(Pe,hqr),e(Pe,mC),e(mC,AMe),e(AMe,pqr),e(mC,_qr),e(mC,VK),e(VK,uqr),e(mC,bqr),e(Pe,vqr),e(Pe,gC),e(gC,LMe),e(LMe,Fqr),e(gC,Tqr),e(gC,XK),e(XK,Mqr),e(gC,Eqr),e(Pe,Cqr),e(Pe,hC),e(hC,yMe),e(yMe,wqr),e(hC,Aqr),e(hC,zK),e(zK,Lqr),e(hC,yqr),e(Pe,xqr),e(Pe,pC),e(pC,xMe),e(xMe,$qr),e(pC,kqr),e(pC,WK),e(WK,Sqr),e(pC,Rqr),e(Pe,Pqr),e(Pe,_C),e(_C,$Me),e($Me,Bqr),e(_C,Iqr),e(_C,QK),e(QK,Nqr),e(_C,qqr),e(Pe,jqr),e(Pe,uC),e(uC,kMe),e(kMe,Dqr),e(uC,Gqr),e(uC,HK),e(HK,Oqr),e(uC,Vqr),e(Vr,Xqr),M(bC,Vr,null),b(f,hGe,u),b(f,zc,u),e(zc,vC),e(vC,SMe),M(_x,SMe,null),e(zc,zqr),e(zc,RMe),e(RMe,Wqr),b(f,pGe,u),b(f,_r,u),M(ux,_r,null),e(_r,Qqr),e(_r,Wc),e(Wc,Hqr),e(Wc,UK),e(UK,Uqr),e(Wc,Jqr),e(Wc,JK),e(JK,Yqr),e(Wc,Kqr),e(_r,Zqr),e(_r,bx),e(bx,ejr),e(bx,PMe),e(PMe,ojr),e(bx,rjr),e(_r,tjr),e(_r,Wt),M(vx,Wt,null),e(Wt,ajr),e(Wt,BMe),e(BMe,njr),e(Wt,sjr),e(Wt,Qc),e(Qc,ljr),e(Qc,IMe),e(IMe,ijr),e(Qc,djr),e(Qc,YK),e(YK,cjr),e(Qc,fjr),e(Wt,mjr),M(FC,Wt,null),e(_r,gjr),e(_r,Xr),M(Fx,Xr,null),e(Xr,hjr),e(Xr,NMe),e(NMe,pjr),e(Xr,_jr),e(Xr,vn),e(vn,ujr),e(vn,qMe),e(qMe,bjr),e(vn,vjr),e(vn,jMe),e(jMe,Fjr),e(vn,Tjr),e(vn,DMe),e(DMe,Mjr),e(vn,Ejr),e(Xr,Cjr),e(Xr,ke),e(ke,TC),e(TC,GMe),e(GMe,wjr),e(TC,Ajr),e(TC,KK),e(KK,Ljr),e(TC,yjr),e(ke,xjr),e(ke,MC),e(MC,OMe),e(OMe,$jr),e(MC,kjr),e(MC,ZK),e(ZK,Sjr),e(MC,Rjr),e(ke,Pjr),e(ke,EC),e(EC,VMe),e(VMe,Bjr),e(EC,Ijr),e(EC,eZ),e(eZ,Njr),e(EC,qjr),e(ke,jjr),e(ke,CC),e(CC,XMe),e(XMe,Djr),e(CC,Gjr),e(CC,oZ),e(oZ,Ojr),e(CC,Vjr),e(ke,Xjr),e(ke,wC),e(wC,zMe),e(zMe,zjr),e(wC,Wjr),e(wC,rZ),e(rZ,Qjr),e(wC,Hjr),e(ke,Ujr),e(ke,AC),e(AC,WMe),e(WMe,Jjr),e(AC,Yjr),e(AC,tZ),e(tZ,Kjr),e(AC,Zjr),e(ke,eDr),e(ke,LC),e(LC,QMe),e(QMe,oDr),e(LC,rDr),e(LC,aZ),e(aZ,tDr),e(LC,aDr),e(ke,nDr),e(ke,yC),e(yC,HMe),e(HMe,sDr),e(yC,lDr),e(yC,nZ),e(nZ,iDr),e(yC,dDr),e(ke,cDr),e(ke,xC),e(xC,UMe),e(UMe,fDr),e(xC,mDr),e(xC,sZ),e(sZ,gDr),e(xC,hDr),e(ke,pDr),e(ke,$C),e($C,JMe),e(JMe,_Dr),e($C,uDr),e($C,lZ),e(lZ,bDr),e($C,vDr),e(Xr,FDr),M(kC,Xr,null),b(f,_Ge,u),b(f,Hc,u),e(Hc,SC),e(SC,YMe),M(Tx,YMe,null),e(Hc,TDr),e(Hc,KMe),e(KMe,MDr),b(f,uGe,u),b(f,ur,u),M(Mx,ur,null),e(ur,EDr),e(ur,Uc),e(Uc,CDr),e(Uc,iZ),e(iZ,wDr),e(Uc,ADr),e(Uc,dZ),e(dZ,LDr),e(Uc,yDr),e(ur,xDr),e(ur,Ex),e(Ex,$Dr),e(Ex,ZMe),e(ZMe,kDr),e(Ex,SDr),e(ur,RDr),e(ur,Qt),M(Cx,Qt,null),e(Qt,PDr),e(Qt,e4e),e(e4e,BDr),e(Qt,IDr),e(Qt,Jc),e(Jc,NDr),e(Jc,o4e),e(o4e,qDr),e(Jc,jDr),e(Jc,cZ),e(cZ,DDr),e(Jc,GDr),e(Qt,ODr),M(RC,Qt,null),e(ur,VDr),e(ur,zr),M(wx,zr,null),e(zr,XDr),e(zr,r4e),e(r4e,zDr),e(zr,WDr),e(zr,Fn),e(Fn,QDr),e(Fn,t4e),e(t4e,HDr),e(Fn,UDr),e(Fn,a4e),e(a4e,JDr),e(Fn,YDr),e(Fn,n4e),e(n4e,KDr),e(Fn,ZDr),e(zr,eGr),e(zr,Se),e(Se,PC),e(PC,s4e),e(s4e,oGr),e(PC,rGr),e(PC,fZ),e(fZ,tGr),e(PC,aGr),e(Se,nGr),e(Se,BC),e(BC,l4e),e(l4e,sGr),e(BC,lGr),e(BC,mZ),e(mZ,iGr),e(BC,dGr),e(Se,cGr),e(Se,IC),e(IC,i4e),e(i4e,fGr),e(IC,mGr),e(IC,gZ),e(gZ,gGr),e(IC,hGr),e(Se,pGr),e(Se,NC),e(NC,d4e),e(d4e,_Gr),e(NC,uGr),e(NC,hZ),e(hZ,bGr),e(NC,vGr),e(Se,FGr),e(Se,qC),e(qC,c4e),e(c4e,TGr),e(qC,MGr),e(qC,pZ),e(pZ,EGr),e(qC,CGr),e(Se,wGr),e(Se,jC),e(jC,f4e),e(f4e,AGr),e(jC,LGr),e(jC,_Z),e(_Z,yGr),e(jC,xGr),e(Se,$Gr),e(Se,DC),e(DC,m4e),e(m4e,kGr),e(DC,SGr),e(DC,uZ),e(uZ,RGr),e(DC,PGr),e(Se,BGr),e(Se,GC),e(GC,g4e),e(g4e,IGr),e(GC,NGr),e(GC,bZ),e(bZ,qGr),e(GC,jGr),e(Se,DGr),e(Se,OC),e(OC,h4e),e(h4e,GGr),e(OC,OGr),e(OC,vZ),e(vZ,VGr),e(OC,XGr),e(Se,zGr),e(Se,VC),e(VC,p4e),e(p4e,WGr),e(VC,QGr),e(VC,FZ),e(FZ,HGr),e(VC,UGr),e(zr,JGr),M(XC,zr,null),b(f,bGe,u),b(f,Yc,u),e(Yc,zC),e(zC,_4e),M(Ax,_4e,null),e(Yc,YGr),e(Yc,u4e),e(u4e,KGr),b(f,vGe,u),b(f,br,u),M(Lx,br,null),e(br,ZGr),e(br,Kc),e(Kc,eOr),e(Kc,TZ),e(TZ,oOr),e(Kc,rOr),e(Kc,MZ),e(MZ,tOr),e(Kc,aOr),e(br,nOr),e(br,yx),e(yx,sOr),e(yx,b4e),e(b4e,lOr),e(yx,iOr),e(br,dOr),e(br,Ht),M(xx,Ht,null),e(Ht,cOr),e(Ht,v4e),e(v4e,fOr),e(Ht,mOr),e(Ht,Zc),e(Zc,gOr),e(Zc,F4e),e(F4e,hOr),e(Zc,pOr),e(Zc,EZ),e(EZ,_Or),e(Zc,uOr),e(Ht,bOr),M(WC,Ht,null),e(br,vOr),e(br,Wr),M($x,Wr,null),e(Wr,FOr),e(Wr,T4e),e(T4e,TOr),e(Wr,MOr),e(Wr,Tn),e(Tn,EOr),e(Tn,M4e),e(M4e,COr),e(Tn,wOr),e(Tn,E4e),e(E4e,AOr),e(Tn,LOr),e(Tn,C4e),e(C4e,yOr),e(Tn,xOr),e(Wr,$Or),e(Wr,Oe),e(Oe,QC),e(QC,w4e),e(w4e,kOr),e(QC,SOr),e(QC,CZ),e(CZ,ROr),e(QC,POr),e(Oe,BOr),e(Oe,HC),e(HC,A4e),e(A4e,IOr),e(HC,NOr),e(HC,wZ),e(wZ,qOr),e(HC,jOr),e(Oe,DOr),e(Oe,UC),e(UC,L4e),e(L4e,GOr),e(UC,OOr),e(UC,AZ),e(AZ,VOr),e(UC,XOr),e(Oe,zOr),e(Oe,JC),e(JC,y4e),e(y4e,WOr),e(JC,QOr),e(JC,LZ),e(LZ,HOr),e(JC,UOr),e(Oe,JOr),e(Oe,YC),e(YC,x4e),e(x4e,YOr),e(YC,KOr),e(YC,yZ),e(yZ,ZOr),e(YC,eVr),e(Oe,oVr),e(Oe,KC),e(KC,$4e),e($4e,rVr),e(KC,tVr),e(KC,xZ),e(xZ,aVr),e(KC,nVr),e(Oe,sVr),e(Oe,ZC),e(ZC,k4e),e(k4e,lVr),e(ZC,iVr),e(ZC,$Z),e($Z,dVr),e(ZC,cVr),e(Oe,fVr),e(Oe,e5),e(e5,S4e),e(S4e,mVr),e(e5,gVr),e(e5,kZ),e(kZ,hVr),e(e5,pVr),e(Wr,_Vr),M(o5,Wr,null),b(f,FGe,u),b(f,ef,u),e(ef,r5),e(r5,R4e),M(kx,R4e,null),e(ef,uVr),e(ef,P4e),e(P4e,bVr),b(f,TGe,u),b(f,vr,u),M(Sx,vr,null),e(vr,vVr),e(vr,of),e(of,FVr),e(of,SZ),e(SZ,TVr),e(of,MVr),e(of,RZ),e(RZ,EVr),e(of,CVr),e(vr,wVr),e(vr,Rx),e(Rx,AVr),e(Rx,B4e),e(B4e,LVr),e(Rx,yVr),e(vr,xVr),e(vr,Ut),M(Px,Ut,null),e(Ut,$Vr),e(Ut,I4e),e(I4e,kVr),e(Ut,SVr),e(Ut,rf),e(rf,RVr),e(rf,N4e),e(N4e,PVr),e(rf,BVr),e(rf,PZ),e(PZ,IVr),e(rf,NVr),e(Ut,qVr),M(t5,Ut,null),e(vr,jVr),e(vr,Qr),M(Bx,Qr,null),e(Qr,DVr),e(Qr,q4e),e(q4e,GVr),e(Qr,OVr),e(Qr,Mn),e(Mn,VVr),e(Mn,j4e),e(j4e,XVr),e(Mn,zVr),e(Mn,D4e),e(D4e,WVr),e(Mn,QVr),e(Mn,G4e),e(G4e,HVr),e(Mn,UVr),e(Qr,JVr),e(Qr,Ve),e(Ve,a5),e(a5,O4e),e(O4e,YVr),e(a5,KVr),e(a5,BZ),e(BZ,ZVr),e(a5,eXr),e(Ve,oXr),e(Ve,n5),e(n5,V4e),e(V4e,rXr),e(n5,tXr),e(n5,IZ),e(IZ,aXr),e(n5,nXr),e(Ve,sXr),e(Ve,s5),e(s5,X4e),e(X4e,lXr),e(s5,iXr),e(s5,NZ),e(NZ,dXr),e(s5,cXr),e(Ve,fXr),e(Ve,l5),e(l5,z4e),e(z4e,mXr),e(l5,gXr),e(l5,qZ),e(qZ,hXr),e(l5,pXr),e(Ve,_Xr),e(Ve,i5),e(i5,W4e),e(W4e,uXr),e(i5,bXr),e(i5,jZ),e(jZ,vXr),e(i5,FXr),e(Ve,TXr),e(Ve,d5),e(d5,Q4e),e(Q4e,MXr),e(d5,EXr),e(d5,DZ),e(DZ,CXr),e(d5,wXr),e(Ve,AXr),e(Ve,c5),e(c5,H4e),e(H4e,LXr),e(c5,yXr),e(c5,GZ),e(GZ,xXr),e(c5,$Xr),e(Ve,kXr),e(Ve,f5),e(f5,U4e),e(U4e,SXr),e(f5,RXr),e(f5,OZ),e(OZ,PXr),e(f5,BXr),e(Qr,IXr),M(m5,Qr,null),b(f,MGe,u),b(f,tf,u),e(tf,g5),e(g5,J4e),M(Ix,J4e,null),e(tf,NXr),e(tf,Y4e),e(Y4e,qXr),b(f,EGe,u),b(f,Fr,u),M(Nx,Fr,null),e(Fr,jXr),e(Fr,af),e(af,DXr),e(af,VZ),e(VZ,GXr),e(af,OXr),e(af,XZ),e(XZ,VXr),e(af,XXr),e(Fr,zXr),e(Fr,qx),e(qx,WXr),e(qx,K4e),e(K4e,QXr),e(qx,HXr),e(Fr,UXr),e(Fr,Jt),M(jx,Jt,null),e(Jt,JXr),e(Jt,Z4e),e(Z4e,YXr),e(Jt,KXr),e(Jt,nf),e(nf,ZXr),e(nf,eEe),e(eEe,ezr),e(nf,ozr),e(nf,zZ),e(zZ,rzr),e(nf,tzr),e(Jt,azr),M(h5,Jt,null),e(Fr,nzr),e(Fr,Hr),M(Dx,Hr,null),e(Hr,szr),e(Hr,oEe),e(oEe,lzr),e(Hr,izr),e(Hr,En),e(En,dzr),e(En,rEe),e(rEe,czr),e(En,fzr),e(En,tEe),e(tEe,mzr),e(En,gzr),e(En,aEe),e(aEe,hzr),e(En,pzr),e(Hr,_zr),e(Hr,nEe),e(nEe,p5),e(p5,sEe),e(sEe,uzr),e(p5,bzr),e(p5,WZ),e(WZ,vzr),e(p5,Fzr),e(Hr,Tzr),M(_5,Hr,null),b(f,CGe,u),b(f,sf,u),e(sf,u5),e(u5,lEe),M(Gx,lEe,null),e(sf,Mzr),e(sf,iEe),e(iEe,Ezr),b(f,wGe,u),b(f,Tr,u),M(Ox,Tr,null),e(Tr,Czr),e(Tr,lf),e(lf,wzr),e(lf,QZ),e(QZ,Azr),e(lf,Lzr),e(lf,HZ),e(HZ,yzr),e(lf,xzr),e(Tr,$zr),e(Tr,Vx),e(Vx,kzr),e(Vx,dEe),e(dEe,Szr),e(Vx,Rzr),e(Tr,Pzr),e(Tr,Yt),M(Xx,Yt,null),e(Yt,Bzr),e(Yt,cEe),e(cEe,Izr),e(Yt,Nzr),e(Yt,df),e(df,qzr),e(df,fEe),e(fEe,jzr),e(df,Dzr),e(df,UZ),e(UZ,Gzr),e(df,Ozr),e(Yt,Vzr),M(b5,Yt,null),e(Tr,Xzr),e(Tr,Ur),M(zx,Ur,null),e(Ur,zzr),e(Ur,mEe),e(mEe,Wzr),e(Ur,Qzr),e(Ur,Cn),e(Cn,Hzr),e(Cn,gEe),e(gEe,Uzr),e(Cn,Jzr),e(Cn,hEe),e(hEe,Yzr),e(Cn,Kzr),e(Cn,pEe),e(pEe,Zzr),e(Cn,eWr),e(Ur,oWr),e(Ur,Wx),e(Wx,v5),e(v5,_Ee),e(_Ee,rWr),e(v5,tWr),e(v5,JZ),e(JZ,aWr),e(v5,nWr),e(Wx,sWr),e(Wx,F5),e(F5,uEe),e(uEe,lWr),e(F5,iWr),e(F5,YZ),e(YZ,dWr),e(F5,cWr),e(Ur,fWr),M(T5,Ur,null),b(f,AGe,u),b(f,cf,u),e(cf,M5),e(M5,bEe),M(Qx,bEe,null),e(cf,mWr),e(cf,vEe),e(vEe,gWr),b(f,LGe,u),b(f,Mr,u),M(Hx,Mr,null),e(Mr,hWr),e(Mr,ff),e(ff,pWr),e(ff,KZ),e(KZ,_Wr),e(ff,uWr),e(ff,ZZ),e(ZZ,bWr),e(ff,vWr),e(Mr,FWr),e(Mr,Ux),e(Ux,TWr),e(Ux,FEe),e(FEe,MWr),e(Ux,EWr),e(Mr,CWr),e(Mr,Kt),M(Jx,Kt,null),e(Kt,wWr),e(Kt,TEe),e(TEe,AWr),e(Kt,LWr),e(Kt,mf),e(mf,yWr),e(mf,MEe),e(MEe,xWr),e(mf,$Wr),e(mf,eee),e(eee,kWr),e(mf,SWr),e(Kt,RWr),M(E5,Kt,null),e(Mr,PWr),e(Mr,Jr),M(Yx,Jr,null),e(Jr,BWr),e(Jr,EEe),e(EEe,IWr),e(Jr,NWr),e(Jr,wn),e(wn,qWr),e(wn,CEe),e(CEe,jWr),e(wn,DWr),e(wn,wEe),e(wEe,GWr),e(wn,OWr),e(wn,AEe),e(AEe,VWr),e(wn,XWr),e(Jr,zWr),e(Jr,LEe),e(LEe,C5),e(C5,yEe),e(yEe,WWr),e(C5,QWr),e(C5,oee),e(oee,HWr),e(C5,UWr),e(Jr,JWr),M(w5,Jr,null),yGe=!0},p(f,[u]){const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),Tf.$set(Kx);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),Lg.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),dh.$set($Ee);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),Vh.$set(kEe);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),Xh.$set(Zx);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),cp.$set(SEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),fp.$set(An);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),hp.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),mu.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),hu.$set(BEe);const e$={};u&2&&(e$.$$scope={dirty:u,ctx:f}),n1.$set(e$);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),l1.$set(IEe);const o$={};u&2&&(o$.$$scope={dirty:u,ctx:f}),Q1.$set(o$);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),U1.$set(NEe);const r$={};u&2&&(r$.$$scope={dirty:u,ctx:f}),Rb.$set(r$);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),Bb.$set(qEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),Zb.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),o2.$set(DEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Y2.$set(gf);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),Z2.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),$v.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),Sv.$set(VEe);const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),jv.$set(t$);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),Gv.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),C3.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),A3.$set(WEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),hF.$set(et);const a$={};u&2&&(a$.$$scope={dirty:u,ctx:f}),_F.$set(a$);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),vF.$set(QEe);const n$={};u&2&&(n$.$$scope={dirty:u,ctx:f}),TF.$set(n$);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),BF.$set(HEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),NF.$set(ot);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),DF.$set(UEe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),OF.$set(hf);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),ZF.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),o6.$set(YEe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),i6.$set(L);const A5={};u&2&&(A5.$$scope={dirty:u,ctx:f}),c6.$set(A5);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),M6.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),C6.$set(ZEe);const L5={};u&2&&(L5.$$scope={dirty:u,ctx:f}),y6.$set(L5);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),$6.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),N6.$set(oCe);const y5={};u&2&&(y5.$$scope={dirty:u,ctx:f}),j6.$set(y5);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),X6.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),W6.$set(tCe);const x5={};u&2&&(x5.$$scope={dirty:u,ctx:f}),J6.$set(x5);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),K6.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),oT.$set(nCe);const $5={};u&2&&($5.$$scope={dirty:u,ctx:f}),tT.$set($5);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),dT.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),fT.$set(lCe);const k5={};u&2&&(k5.$$scope={dirty:u,ctx:f}),hT.$set(k5);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),_T.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),d7.$set(dCe);const S5={};u&2&&(S5.$$scope={dirty:u,ctx:f}),f7.$set(S5);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),B7.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),N7.$set(fCe);const R5={};u&2&&(R5.$$scope={dirty:u,ctx:f}),Y7.$set(R5);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),Z7.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),a9.$set(gCe);const P5={};u&2&&(P5.$$scope={dirty:u,ctx:f}),s9.$set(P5);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),L9.$set(hCe);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),x9.$set(pCe);const B5={};u&2&&(B5.$$scope={dirty:u,ctx:f}),D9.$set(B5);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),O9.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),pM.$set(uCe);const I5={};u&2&&(I5.$$scope={dirty:u,ctx:f}),uM.$set(I5);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),BM.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),NM.$set(vCe);const N5={};u&2&&(N5.$$scope={dirty:u,ctx:f}),DM.$set(N5);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),OM.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),XM.$set(TCe);const q5={};u&2&&(q5.$$scope={dirty:u,ctx:f}),WM.$set(q5);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),g4.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),p4.$set(ECe);const j5={};u&2&&(j5.$$scope={dirty:u,ctx:f}),I4.$set(j5);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),q4.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),D4.$set(wCe);const D5={};u&2&&(D5.$$scope={dirty:u,ctx:f}),O4.$set(D5);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),X4.$set(ACe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),W4.$set(LCe);const G5={};u&2&&(G5.$$scope={dirty:u,ctx:f}),vE.$set(G5);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),TE.$set(yCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),SE.$set(xCe);const O5={};u&2&&(O5.$$scope={dirty:u,ctx:f}),PE.$set(O5);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),QE.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),UE.$set(kCe);const V5={};u&2&&(V5.$$scope={dirty:u,ctx:f}),sC.$set(V5);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),iC.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),bC.$set(RCe);const X5={};u&2&&(X5.$$scope={dirty:u,ctx:f}),FC.$set(X5);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),kC.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),RC.$set(BCe);const z5={};u&2&&(z5.$$scope={dirty:u,ctx:f}),XC.$set(z5);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),WC.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),o5.$set(NCe);const W5={};u&2&&(W5.$$scope={dirty:u,ctx:f}),t5.$set(W5);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),m5.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),h5.$set(jCe);const Q5={};u&2&&(Q5.$$scope={dirty:u,ctx:f}),_5.$set(Q5);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),b5.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),T5.$set(GCe);const H5={};u&2&&(H5.$$scope={dirty:u,ctx:f}),E5.$set(H5);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),w5.$set(OCe)},i(f){yGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(Qw.$$.fragment,f),E(Hw.$$.fragment,f),E(Tf.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(Zw.$$.fragment,f),E(Lg.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(rA.$$.fragment,f),E(nA.$$.fragment,f),E(dh.$$.fragment,f),E(sA.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(fA.$$.fragment,f),E(Vh.$$.fragment,f),E(Xh.$$.fragment,f),E(mA.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(uA.$$.fragment,f),E(cp.$$.fragment,f),E(fp.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(hp.$$.fragment,f),E(EA.$$.fragment,f),E(mu.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(LA.$$.fragment,f),E(hu.$$.fragment,f),E(yA.$$.fragment,f),E(n1.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(l1.$$.fragment,f),E(RA.$$.fragment,f),E(Q1.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(NA.$$.fragment,f),E(U1.$$.fragment,f),E(qA.$$.fragment,f),E(Rb.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(Bb.$$.fragment,f),E(VA.$$.fragment,f),E(Zb.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(o2.$$.fragment,f),E(HA.$$.fragment,f),E(Y2.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(Z2.$$.fragment,f),E(ZA.$$.fragment,f),E($v.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(Sv.$$.fragment,f),E(aL.$$.fragment,f),E(jv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(Gv.$$.fragment,f),E(dL.$$.fragment,f),E(C3.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(A3.$$.fragment,f),E(hL.$$.fragment,f),E(hF.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(_F.$$.fragment,f),E(vL.$$.fragment,f),E(vF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(TF.$$.fragment,f),E(CL.$$.fragment,f),E(BF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(NF.$$.fragment,f),E(xL.$$.fragment,f),E(DF.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(OF.$$.fragment,f),E(PL.$$.fragment,f),E(ZF.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(o6.$$.fragment,f),E(jL.$$.fragment,f),E(i6.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(c6.$$.fragment,f),E(XL.$$.fragment,f),E(M6.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(C6.$$.fragment,f),E(UL.$$.fragment,f),E(y6.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E($6.$$.fragment,f),E(oy.$$.fragment,f),E(N6.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(j6.$$.fragment,f),E(sy.$$.fragment,f),E(X6.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(W6.$$.fragment,f),E(fy.$$.fragment,f),E(J6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(K6.$$.fragment,f),E(uy.$$.fragment,f),E(oT.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(tT.$$.fragment,f),E(My.$$.fragment,f),E(dT.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(fT.$$.fragment,f),E(Ly.$$.fragment,f),E(hT.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(_T.$$.fragment,f),E(Sy.$$.fragment,f),E(d7.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(f7.$$.fragment,f),E(Ny.$$.fragment,f),E(B7.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(N7.$$.fragment,f),E(Oy.$$.fragment,f),E(Y7.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(Z7.$$.fragment,f),E(Qy.$$.fragment,f),E(a9.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(s9.$$.fragment,f),E(Ky.$$.fragment,f),E(L9.$$.fragment,f),E(Zy.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(x9.$$.fragment,f),E(t8.$$.fragment,f),E(D9.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(O9.$$.fragment,f),E(i8.$$.fragment,f),E(pM.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(uM.$$.fragment,f),E(g8.$$.fragment,f),E(BM.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(NM.$$.fragment,f),E(b8.$$.fragment,f),E(DM.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(OM.$$.fragment,f),E(C8.$$.fragment,f),E(XM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(WM.$$.fragment,f),E(x8.$$.fragment,f),E(g4.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(p4.$$.fragment,f),E(P8.$$.fragment,f),E(I4.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(q4.$$.fragment,f),E(j8.$$.fragment,f),E(D4.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(O4.$$.fragment,f),E(X8.$$.fragment,f),E(X4.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(W4.$$.fragment,f),E(U8.$$.fragment,f),E(vE.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(TE.$$.fragment,f),E(ex.$$.fragment,f),E(SE.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(PE.$$.fragment,f),E(nx.$$.fragment,f),E(QE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(UE.$$.fragment,f),E(cx.$$.fragment,f),E(sC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(iC.$$.fragment,f),E(px.$$.fragment,f),E(bC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(FC.$$.fragment,f),E(Fx.$$.fragment,f),E(kC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(RC.$$.fragment,f),E(wx.$$.fragment,f),E(XC.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(WC.$$.fragment,f),E($x.$$.fragment,f),E(o5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(t5.$$.fragment,f),E(Bx.$$.fragment,f),E(m5.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(h5.$$.fragment,f),E(Dx.$$.fragment,f),E(_5.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(b5.$$.fragment,f),E(zx.$$.fragment,f),E(T5.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(E5.$$.fragment,f),E(Yx.$$.fragment,f),E(w5.$$.fragment,f),yGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(Qw.$$.fragment,f),C(Hw.$$.fragment,f),C(Tf.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(Zw.$$.fragment,f),C(Lg.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(rA.$$.fragment,f),C(nA.$$.fragment,f),C(dh.$$.fragment,f),C(sA.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(fA.$$.fragment,f),C(Vh.$$.fragment,f),C(Xh.$$.fragment,f),C(mA.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(uA.$$.fragment,f),C(cp.$$.fragment,f),C(fp.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(hp.$$.fragment,f),C(EA.$$.fragment,f),C(mu.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(LA.$$.fragment,f),C(hu.$$.fragment,f),C(yA.$$.fragment,f),C(n1.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(l1.$$.fragment,f),C(RA.$$.fragment,f),C(Q1.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(NA.$$.fragment,f),C(U1.$$.fragment,f),C(qA.$$.fragment,f),C(Rb.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(Bb.$$.fragment,f),C(VA.$$.fragment,f),C(Zb.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(o2.$$.fragment,f),C(HA.$$.fragment,f),C(Y2.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(Z2.$$.fragment,f),C(ZA.$$.fragment,f),C($v.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(Sv.$$.fragment,f),C(aL.$$.fragment,f),C(jv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(Gv.$$.fragment,f),C(dL.$$.fragment,f),C(C3.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(A3.$$.fragment,f),C(hL.$$.fragment,f),C(hF.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(_F.$$.fragment,f),C(vL.$$.fragment,f),C(vF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(TF.$$.fragment,f),C(CL.$$.fragment,f),C(BF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(NF.$$.fragment,f),C(xL.$$.fragment,f),C(DF.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(OF.$$.fragment,f),C(PL.$$.fragment,f),C(ZF.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(o6.$$.fragment,f),C(jL.$$.fragment,f),C(i6.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(c6.$$.fragment,f),C(XL.$$.fragment,f),C(M6.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(C6.$$.fragment,f),C(UL.$$.fragment,f),C(y6.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C($6.$$.fragment,f),C(oy.$$.fragment,f),C(N6.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(j6.$$.fragment,f),C(sy.$$.fragment,f),C(X6.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(W6.$$.fragment,f),C(fy.$$.fragment,f),C(J6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(K6.$$.fragment,f),C(uy.$$.fragment,f),C(oT.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(tT.$$.fragment,f),C(My.$$.fragment,f),C(dT.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(fT.$$.fragment,f),C(Ly.$$.fragment,f),C(hT.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(_T.$$.fragment,f),C(Sy.$$.fragment,f),C(d7.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(f7.$$.fragment,f),C(Ny.$$.fragment,f),C(B7.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(N7.$$.fragment,f),C(Oy.$$.fragment,f),C(Y7.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(Z7.$$.fragment,f),C(Qy.$$.fragment,f),C(a9.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(s9.$$.fragment,f),C(Ky.$$.fragment,f),C(L9.$$.fragment,f),C(Zy.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(x9.$$.fragment,f),C(t8.$$.fragment,f),C(D9.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(O9.$$.fragment,f),C(i8.$$.fragment,f),C(pM.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(uM.$$.fragment,f),C(g8.$$.fragment,f),C(BM.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(NM.$$.fragment,f),C(b8.$$.fragment,f),C(DM.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(OM.$$.fragment,f),C(C8.$$.fragment,f),C(XM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(WM.$$.fragment,f),C(x8.$$.fragment,f),C(g4.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(p4.$$.fragment,f),C(P8.$$.fragment,f),C(I4.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(q4.$$.fragment,f),C(j8.$$.fragment,f),C(D4.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(O4.$$.fragment,f),C(X8.$$.fragment,f),C(X4.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(W4.$$.fragment,f),C(U8.$$.fragment,f),C(vE.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(TE.$$.fragment,f),C(ex.$$.fragment,f),C(SE.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(PE.$$.fragment,f),C(nx.$$.fragment,f),C(QE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(UE.$$.fragment,f),C(cx.$$.fragment,f),C(sC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(iC.$$.fragment,f),C(px.$$.fragment,f),C(bC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(FC.$$.fragment,f),C(Fx.$$.fragment,f),C(kC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(RC.$$.fragment,f),C(wx.$$.fragment,f),C(XC.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(WC.$$.fragment,f),C($x.$$.fragment,f),C(o5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(t5.$$.fragment,f),C(Bx.$$.fragment,f),C(m5.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(h5.$$.fragment,f),C(Dx.$$.fragment,f),C(_5.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(b5.$$.fragment,f),C(zx.$$.fragment,f),C(T5.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(E5.$$.fragment,f),C(Yx.$$.fragment,f),C(w5.$$.fragment,f),yGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(Ge),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(wje),f&&t(vi),w(Qw),f&&t(Aje),f&&t(kn),f&&t(Lje),w(Hw,f),f&&t(yje),f&&t(uk),f&&t(xje),w(Tf,f),f&&t($je),f&&t(Fi),w(Uw),f&&t(kje),f&&t(Co),w(Jw),w(Zw),w(Lg),w(eA),f&&t(Sje),f&&t(Mi),w(oA),f&&t(Rje),f&&t(wo),w(rA),w(nA),w(dh),w(sA),f&&t(Pje),f&&t(Ei),w(lA),f&&t(Bje),f&&t(Ao),w(iA),w(fA),w(Vh),w(Xh),w(mA),f&&t(Ije),f&&t(Ci),w(gA),f&&t(Nje),f&&t(Lo),w(hA),w(uA),w(cp),w(fp),w(bA),f&&t(qje),f&&t(Ai),w(vA),f&&t(jje),f&&t(yo),w(FA),w(MA),w(hp),w(EA),w(mu),f&&t(Dje),f&&t(xi),w(CA),f&&t(Gje),f&&t(xo),w(wA),w(LA),w(hu),w(yA),w(n1),f&&t(Oje),f&&t(Si),w(xA),f&&t(Vje),f&&t($o),w($A),w(SA),w(l1),w(RA),w(Q1),f&&t(Xje),f&&t(Bi),w(PA),f&&t(zje),f&&t(ko),w(BA),w(NA),w(U1),w(qA),w(Rb),f&&t(Wje),f&&t(qi),w(jA),f&&t(Qje),f&&t(So),w(DA),w(OA),w(Bb),w(VA),w(Zb),f&&t(Hje),f&&t(Gi),w(XA),f&&t(Uje),f&&t(Ro),w(zA),w(QA),w(o2),w(HA),w(Y2),f&&t(Jje),f&&t(Xi),w(UA),f&&t(Yje),f&&t(Po),w(JA),w(KA),w(Z2),w(ZA),w($v),f&&t(Kje),f&&t(Qi),w(eL),f&&t(Zje),f&&t(Bo),w(oL),w(tL),w(Sv),w(aL),w(jv),f&&t(eDe),f&&t(Ji),w(nL),f&&t(oDe),f&&t(Io),w(sL),w(iL),w(Gv),w(dL),w(C3),f&&t(rDe),f&&t(Zi),w(cL),f&&t(tDe),f&&t(No),w(fL),w(gL),w(A3),w(hL),w(hF),f&&t(aDe),f&&t(rd),w(pL),f&&t(nDe),f&&t(qo),w(_L),w(bL),w(_F),w(vL),w(vF),f&&t(sDe),f&&t(nd),w(FL),f&&t(lDe),f&&t(jo),w(TL),w(EL),w(TF),w(CL),w(BF),f&&t(iDe),f&&t(id),w(wL),f&&t(dDe),f&&t(Do),w(AL),w(yL),w(NF),w(xL),w(DF),f&&t(cDe),f&&t(fd),w($L),f&&t(fDe),f&&t(Go),w(kL),w(RL),w(OF),w(PL),w(ZF),f&&t(mDe),f&&t(hd),w(BL),f&&t(gDe),f&&t(Oo),w(IL),w(qL),w(o6),w(jL),w(i6),f&&t(hDe),f&&t(ud),w(DL),f&&t(pDe),f&&t(Vo),w(GL),w(VL),w(c6),w(XL),w(M6),f&&t(_De),f&&t(Fd),w(zL),f&&t(uDe),f&&t(Xo),w(WL),w(HL),w(C6),w(UL),w(y6),f&&t(bDe),f&&t(Ed),w(YL),f&&t(vDe),f&&t(zo),w(KL),w(ey),w($6),w(oy),w(N6),f&&t(FDe),f&&t(Ad),w(ry),f&&t(TDe),f&&t(Wo),w(ty),w(ny),w(j6),w(sy),w(X6),f&&t(MDe),f&&t($d),w(ly),f&&t(EDe),f&&t(Qo),w(iy),w(cy),w(W6),w(fy),w(J6),f&&t(CDe),f&&t(Rd),w(gy),f&&t(wDe),f&&t(Ho),w(hy),w(_y),w(K6),w(uy),w(oT),f&&t(ADe),f&&t(Id),w(by),f&&t(LDe),f&&t(Uo),w(vy),w(Ty),w(tT),w(My),w(dT),f&&t(yDe),f&&t(jd),w(Ey),f&&t(xDe),f&&t(Jo),w(Cy),w(Ay),w(fT),w(Ly),w(hT),f&&t($De),f&&t(Od),w(yy),f&&t(kDe),f&&t(Yo),w(xy),w(ky),w(_T),w(Sy),w(d7),f&&t(SDe),f&&t(zd),w(Ry),f&&t(RDe),f&&t(Ko),w(Py),w(Iy),w(f7),w(Ny),w(B7),f&&t(PDe),f&&t(Hd),w(qy),f&&t(BDe),f&&t(Zo),w(jy),w(Gy),w(N7),w(Oy),w(Y7),f&&t(IDe),f&&t(Yd),w(Vy),f&&t(NDe),f&&t(er),w(Xy),w(Wy),w(Z7),w(Qy),w(a9),f&&t(qDe),f&&t(ec),w(Hy),f&&t(jDe),f&&t(or),w(Uy),w(Yy),w(s9),w(Ky),w(L9),f&&t(DDe),f&&t(tc),w(Zy),f&&t(GDe),f&&t(rr),w(e8),w(r8),w(x9),w(t8),w(D9),f&&t(ODe),f&&t(sc),w(a8),f&&t(VDe),f&&t(tr),w(n8),w(l8),w(O9),w(i8),w(pM),f&&t(XDe),f&&t(dc),w(d8),f&&t(zDe),f&&t(ar),w(c8),w(m8),w(uM),w(g8),w(BM),f&&t(WDe),f&&t(mc),w(h8),f&&t(QDe),f&&t(nr),w(p8),w(u8),w(NM),w(b8),w(DM),f&&t(HDe),f&&t(pc),w(F8),f&&t(UDe),f&&t(sr),w(T8),w(E8),w(OM),w(C8),w(XM),f&&t(JDe),f&&t(bc),w(w8),f&&t(YDe),f&&t(lr),w(A8),w(y8),w(WM),w(x8),w(g4),f&&t(KDe),f&&t(Tc),w($8),f&&t(ZDe),f&&t(ir),w(k8),w(R8),w(p4),w(P8),w(I4),f&&t(eGe),f&&t(Cc),w(B8),f&&t(oGe),f&&t(dr),w(I8),w(q8),w(q4),w(j8),w(D4),f&&t(rGe),f&&t(Lc),w(D8),f&&t(tGe),f&&t(cr),w(G8),w(V8),w(O4),w(X8),w(X4),f&&t(aGe),f&&t($c),w(z8),f&&t(nGe),f&&t(fr),w(W8),w(H8),w(W4),w(U8),w(vE),f&&t(sGe),f&&t(Rc),w(J8),f&&t(lGe),f&&t(mr),w(Y8),w(Z8),w(TE),w(ex),w(SE),f&&t(iGe),f&&t(Ic),w(ox),f&&t(dGe),f&&t(gr),w(rx),w(ax),w(PE),w(nx),w(QE),f&&t(cGe),f&&t(jc),w(sx),f&&t(fGe),f&&t(hr),w(lx),w(dx),w(UE),w(cx),w(sC),f&&t(mGe),f&&t(Oc),w(fx),f&&t(gGe),f&&t(pr),w(mx),w(hx),w(iC),w(px),w(bC),f&&t(hGe),f&&t(zc),w(_x),f&&t(pGe),f&&t(_r),w(ux),w(vx),w(FC),w(Fx),w(kC),f&&t(_Ge),f&&t(Hc),w(Tx),f&&t(uGe),f&&t(ur),w(Mx),w(Cx),w(RC),w(wx),w(XC),f&&t(bGe),f&&t(Yc),w(Ax),f&&t(vGe),f&&t(br),w(Lx),w(xx),w(WC),w($x),w(o5),f&&t(FGe),f&&t(ef),w(kx),f&&t(TGe),f&&t(vr),w(Sx),w(Px),w(t5),w(Bx),w(m5),f&&t(MGe),f&&t(tf),w(Ix),f&&t(EGe),f&&t(Fr),w(Nx),w(jx),w(h5),w(Dx),w(_5),f&&t(CGe),f&&t(sf),w(Gx),f&&t(wGe),f&&t(Tr),w(Ox),w(Xx),w(b5),w(zx),w(T5),f&&t(AGe),f&&t(cf),w(Qx),f&&t(LGe),f&&t(Mr),w(Hx),w(Jx),w(E5),w(Yx),w(w5)}}}const uIt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function bIt(x){return bPt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wIt extends hPt{constructor(g){super();pPt(this,g,bIt,_It,_Pt,{})}}export{wIt as default,uIt as metadata};
