import{S as hPt,i as pPt,s as _Pt,e as a,k as l,w as F,t as o,M as uPt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as bPt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as YWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function vPt(x){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,V6,bf,Ge,We,_i,Ln,X6,yn,xn,z6,ui,$n,W6,bi,vf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),V6=o(")."),bf=l(),Ge=a("p"),We=o("Likewise, if your "),_i=a("code"),Ln=o("NewModel"),X6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),z6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),W6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var mk=s(p);m=r(mk,"NewModelConfig"),mk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var gk=s(gi);uf=r(gk,"model_type"),gk.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var hk=s(hi);pi=r(hk,'"new-model"'),hk.forEach(t),V6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var Aa=s(_i);Ln=r(Aa,"NewModel"),Aa.forEach(t),X6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var pk=s(yn);xn=r(pk,"PreTrainedModel"),pk.forEach(t),z6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),W6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var _k=s(bi);vf=r(_k,"NewModelConfig"),_k.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,tt),e(g,hi),e(hi,pi),e(g,V6),b(Qe,bf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,_i),e(_i,Ln),e(Ge,X6),e(Ge,yn),e(yn,xn),e(Ge,z6),e(Ge,ui),e(ui,$n),e(Ge,W6),e(Ge,bi),e(bi,vf),e(Ge,wa)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(Ge)}}}function FPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function EPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function wPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ABt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Bt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZBt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pIt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _It(x){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,V6,bf,Ge,We,_i,Ln,X6,yn,xn,z6,ui,$n,W6,bi,vf,wa,Qe,Ae,mk,vi,gk,hk,Eo,Aa,pk,Ff,_k,IVe,wje,Fi,Tf,Hoe,Q6,NVe,Uoe,qVe,Aje,kn,jVe,Joe,DVe,GVe,Yoe,OVe,VVe,Lje,H6,yje,uk,XVe,xje,Mf,$je,Ti,Ef,Koe,U6,zVe,Zoe,WVe,kje,Co,J6,QVe,Y6,HVe,bk,UVe,JVe,YVe,K6,KVe,ere,ZVe,eXe,oXe,Er,Z6,rXe,ore,tXe,aXe,Mi,nXe,rre,sXe,lXe,tre,iXe,dXe,cXe,A,Cf,are,fXe,mXe,vk,gXe,hXe,pXe,wf,nre,_Xe,uXe,Fk,bXe,vXe,FXe,Af,sre,TXe,MXe,Tk,EXe,CXe,wXe,Lf,lre,AXe,LXe,Mk,yXe,xXe,$Xe,yf,ire,kXe,SXe,Ek,RXe,PXe,BXe,xf,dre,IXe,NXe,Ck,qXe,jXe,DXe,$f,cre,GXe,OXe,wk,VXe,XXe,zXe,kf,fre,WXe,QXe,Ak,HXe,UXe,JXe,Sf,mre,YXe,KXe,Lk,ZXe,eze,oze,Rf,gre,rze,tze,yk,aze,nze,sze,Pf,hre,lze,ize,xk,dze,cze,fze,Bf,pre,mze,gze,$k,hze,pze,_ze,If,_re,uze,bze,kk,vze,Fze,Tze,Nf,ure,Mze,Eze,Sk,Cze,wze,Aze,qf,bre,Lze,yze,Rk,xze,$ze,kze,jf,vre,Sze,Rze,Pk,Pze,Bze,Ize,Df,Fre,Nze,qze,Bk,jze,Dze,Gze,Gf,Tre,Oze,Vze,Ik,Xze,zze,Wze,Of,Mre,Qze,Hze,Nk,Uze,Jze,Yze,Vf,Ere,Kze,Zze,qk,eWe,oWe,rWe,Xf,Cre,tWe,aWe,jk,nWe,sWe,lWe,zf,wre,iWe,dWe,Dk,cWe,fWe,mWe,Wf,Are,gWe,hWe,Gk,pWe,_We,uWe,Qf,Lre,bWe,vWe,Ok,FWe,TWe,MWe,Hf,yre,EWe,CWe,Vk,wWe,AWe,LWe,Uf,xre,yWe,xWe,Xk,$We,kWe,SWe,Jf,$re,RWe,PWe,zk,BWe,IWe,NWe,Yf,kre,qWe,jWe,Wk,DWe,GWe,OWe,Kf,Sre,VWe,XWe,Qk,zWe,WWe,QWe,Zf,Rre,HWe,UWe,Hk,JWe,YWe,KWe,em,Pre,ZWe,eQe,Uk,oQe,rQe,tQe,om,Bre,aQe,nQe,Jk,sQe,lQe,iQe,rm,Ire,dQe,cQe,Yk,fQe,mQe,gQe,tm,Nre,hQe,pQe,Kk,_Qe,uQe,bQe,am,qre,vQe,FQe,Zk,TQe,MQe,EQe,nm,jre,CQe,wQe,eS,AQe,LQe,yQe,sm,Dre,xQe,$Qe,oS,kQe,SQe,RQe,lm,Gre,PQe,BQe,rS,IQe,NQe,qQe,im,Ore,jQe,DQe,tS,GQe,OQe,VQe,dm,Vre,XQe,zQe,aS,WQe,QQe,HQe,cm,Xre,UQe,JQe,nS,YQe,KQe,ZQe,fm,zre,eHe,oHe,sS,rHe,tHe,aHe,mm,Wre,nHe,sHe,lS,lHe,iHe,dHe,gm,Qre,cHe,fHe,iS,mHe,gHe,hHe,hm,Hre,pHe,_He,dS,uHe,bHe,vHe,pm,Ure,FHe,THe,cS,MHe,EHe,CHe,_m,Jre,wHe,AHe,fS,LHe,yHe,xHe,um,Yre,$He,kHe,mS,SHe,RHe,PHe,bm,Kre,BHe,IHe,gS,NHe,qHe,jHe,vm,Zre,DHe,GHe,hS,OHe,VHe,XHe,Fm,ete,zHe,WHe,pS,QHe,HHe,UHe,Tm,ote,JHe,YHe,_S,KHe,ZHe,eUe,Mm,rte,oUe,rUe,uS,tUe,aUe,nUe,Em,tte,sUe,lUe,bS,iUe,dUe,cUe,Cm,ate,fUe,mUe,vS,gUe,hUe,pUe,wm,nte,_Ue,uUe,FS,bUe,vUe,FUe,Am,ste,TUe,MUe,TS,EUe,CUe,wUe,Lm,lte,AUe,LUe,MS,yUe,xUe,$Ue,ym,ite,kUe,SUe,ES,RUe,PUe,BUe,xm,dte,IUe,NUe,CS,qUe,jUe,DUe,$m,cte,GUe,OUe,wS,VUe,XUe,zUe,km,fte,WUe,QUe,AS,HUe,UUe,JUe,Sm,mte,YUe,KUe,LS,ZUe,eJe,oJe,Rm,gte,rJe,tJe,yS,aJe,nJe,sJe,Pm,hte,lJe,iJe,xS,dJe,cJe,fJe,Bm,pte,mJe,gJe,$S,hJe,pJe,_Je,Im,_te,uJe,bJe,kS,vJe,FJe,TJe,Nm,ute,MJe,EJe,SS,CJe,wJe,AJe,qm,bte,LJe,yJe,RS,xJe,$Je,kJe,jm,vte,SJe,RJe,PS,PJe,BJe,IJe,Dm,Fte,NJe,qJe,BS,jJe,DJe,GJe,Gm,Tte,OJe,VJe,IS,XJe,zJe,WJe,Om,Mte,QJe,HJe,NS,UJe,JJe,YJe,Vm,Ete,KJe,ZJe,qS,eYe,oYe,rYe,Xm,Cte,tYe,aYe,jS,nYe,sYe,lYe,zm,wte,iYe,dYe,DS,cYe,fYe,mYe,Wm,Ate,gYe,hYe,GS,pYe,_Ye,uYe,Qm,Lte,bYe,vYe,OS,FYe,TYe,MYe,Hm,yte,EYe,CYe,VS,wYe,AYe,LYe,Um,xte,yYe,xYe,XS,$Ye,kYe,SYe,Jm,$te,RYe,PYe,zS,BYe,IYe,NYe,Ym,kte,qYe,jYe,WS,DYe,GYe,OYe,Km,Ste,VYe,XYe,QS,zYe,WYe,QYe,Zm,Rte,HYe,UYe,HS,JYe,YYe,KYe,eg,Pte,ZYe,eKe,US,oKe,rKe,tKe,og,Bte,aKe,nKe,JS,sKe,lKe,iKe,rg,Ite,dKe,cKe,YS,fKe,mKe,gKe,tg,Nte,hKe,pKe,KS,_Ke,uKe,bKe,ag,qte,vKe,FKe,ZS,TKe,MKe,EKe,ng,jte,CKe,wKe,eR,AKe,LKe,yKe,sg,Dte,xKe,$Ke,oR,kKe,SKe,RKe,lg,Gte,PKe,BKe,rR,IKe,NKe,qKe,ig,Ote,jKe,DKe,tR,GKe,OKe,VKe,dg,Vte,XKe,zKe,aR,WKe,QKe,HKe,cg,Xte,UKe,JKe,nR,YKe,KKe,ZKe,fg,zte,eZe,oZe,sR,rZe,tZe,aZe,mg,Wte,nZe,sZe,lR,lZe,iZe,dZe,gg,Qte,cZe,fZe,iR,mZe,gZe,hZe,hg,Hte,pZe,_Ze,dR,uZe,bZe,vZe,pg,Ute,FZe,TZe,cR,MZe,EZe,CZe,_g,Jte,wZe,AZe,fR,LZe,yZe,xZe,ug,Yte,$Ze,kZe,mR,SZe,RZe,PZe,bg,Kte,BZe,IZe,gR,NZe,qZe,jZe,vg,Zte,DZe,GZe,hR,OZe,VZe,XZe,Fg,eae,zZe,WZe,pR,QZe,HZe,UZe,Tg,oae,JZe,YZe,_R,KZe,ZZe,eeo,Mg,rae,oeo,reo,uR,teo,aeo,neo,Eg,tae,seo,leo,bR,ieo,deo,ceo,Cg,aae,feo,meo,vR,geo,heo,peo,wg,nae,_eo,ueo,FR,beo,veo,Feo,Ag,sae,Teo,Meo,TR,Eeo,Ceo,weo,Lg,lae,Aeo,Leo,MR,yeo,xeo,$eo,yg,keo,xg,eL,Seo,iae,Reo,Sje,Ei,$g,dae,oL,Peo,cae,Beo,Rje,wo,rL,Ieo,tL,Neo,ER,qeo,jeo,Deo,aL,Geo,fae,Oeo,Veo,Xeo,Cr,nL,zeo,mae,Weo,Qeo,La,Heo,gae,Ueo,Jeo,hae,Yeo,Keo,pae,Zeo,eoo,ooo,k,Sn,_ae,roo,too,CR,aoo,noo,wR,soo,loo,ioo,Rn,uae,doo,coo,AR,foo,moo,LR,goo,hoo,poo,Pn,bae,_oo,uoo,yR,boo,voo,xR,Foo,Too,Moo,kg,vae,Eoo,Coo,$R,woo,Aoo,Loo,Bn,Fae,yoo,xoo,kR,$oo,koo,SR,Soo,Roo,Poo,Sg,Tae,Boo,Ioo,RR,Noo,qoo,joo,Rg,Mae,Doo,Goo,PR,Ooo,Voo,Xoo,Pg,Eae,zoo,Woo,BR,Qoo,Hoo,Uoo,In,Cae,Joo,Yoo,IR,Koo,Zoo,NR,ero,oro,rro,Nn,wae,tro,aro,qR,nro,sro,jR,lro,iro,dro,qn,Aae,cro,fro,DR,mro,gro,GR,hro,pro,_ro,Bg,Lae,uro,bro,OR,vro,Fro,Tro,Ig,yae,Mro,Ero,VR,Cro,wro,Aro,Ng,xae,Lro,yro,XR,xro,$ro,kro,jn,$ae,Sro,Rro,zR,Pro,Bro,WR,Iro,Nro,qro,qg,kae,jro,Dro,QR,Gro,Oro,Vro,Dn,Sae,Xro,zro,HR,Wro,Qro,UR,Hro,Uro,Jro,Gn,Rae,Yro,Kro,JR,Zro,eto,YR,oto,rto,tto,On,Pae,ato,nto,KR,sto,lto,ZR,ito,dto,cto,jg,Bae,fto,mto,eP,gto,hto,pto,Vn,Iae,_to,uto,oP,bto,vto,rP,Fto,Tto,Mto,Xn,Nae,Eto,Cto,tP,wto,Ato,aP,Lto,yto,xto,zn,qae,$to,kto,nP,Sto,Rto,sP,Pto,Bto,Ito,Wn,jae,Nto,qto,lP,jto,Dto,iP,Gto,Oto,Vto,Qn,Dae,Xto,zto,dP,Wto,Qto,cP,Hto,Uto,Jto,Hn,Gae,Yto,Kto,fP,Zto,eao,mP,oao,rao,tao,Dg,Oae,aao,nao,gP,sao,lao,iao,Un,Vae,dao,cao,hP,fao,mao,pP,gao,hao,pao,Gg,Xae,_ao,uao,_P,bao,vao,Fao,Jn,zae,Tao,Mao,uP,Eao,Cao,bP,wao,Aao,Lao,Yn,Wae,yao,xao,vP,$ao,kao,FP,Sao,Rao,Pao,Kn,Qae,Bao,Iao,TP,Nao,qao,MP,jao,Dao,Gao,Og,Hae,Oao,Vao,EP,Xao,zao,Wao,Zn,Uae,Qao,Hao,CP,Uao,Jao,wP,Yao,Kao,Zao,es,Jae,eno,ono,AP,rno,tno,LP,ano,nno,sno,Vg,Yae,lno,ino,yP,dno,cno,fno,os,Kae,mno,gno,xP,hno,pno,$P,_no,uno,bno,rs,Zae,vno,Fno,kP,Tno,Mno,SP,Eno,Cno,wno,ts,ene,Ano,Lno,RP,yno,xno,PP,$no,kno,Sno,as,one,Rno,Pno,BP,Bno,Ino,IP,Nno,qno,jno,ns,rne,Dno,Gno,NP,Ono,Vno,qP,Xno,zno,Wno,ss,tne,Qno,Hno,jP,Uno,Jno,DP,Yno,Kno,Zno,ls,ane,eso,oso,GP,rso,tso,OP,aso,nso,sso,Xg,nne,lso,iso,VP,dso,cso,fso,is,sne,mso,gso,XP,hso,pso,zP,_so,uso,bso,zg,lne,vso,Fso,WP,Tso,Mso,Eso,Wg,ine,Cso,wso,QP,Aso,Lso,yso,ds,dne,xso,$so,HP,kso,Sso,UP,Rso,Pso,Bso,cs,cne,Iso,Nso,JP,qso,jso,YP,Dso,Gso,Oso,fs,fne,Vso,Xso,KP,zso,Wso,ZP,Qso,Hso,Uso,Qg,mne,Jso,Yso,eB,Kso,Zso,elo,ms,gne,olo,rlo,oB,tlo,alo,rB,nlo,slo,llo,gs,hne,ilo,dlo,tB,clo,flo,aB,mlo,glo,hlo,hs,pne,plo,_lo,nB,ulo,blo,sB,vlo,Flo,Tlo,ps,_ne,Mlo,Elo,lB,Clo,wlo,iB,Alo,Llo,ylo,_s,une,xlo,$lo,dB,klo,Slo,cB,Rlo,Plo,Blo,Hg,bne,Ilo,Nlo,fB,qlo,jlo,Dlo,us,vne,Glo,Olo,mB,Vlo,Xlo,gB,zlo,Wlo,Qlo,Ug,Fne,Hlo,Ulo,hB,Jlo,Ylo,Klo,Jg,Tne,Zlo,eio,pB,oio,rio,tio,Yg,Mne,aio,nio,_B,sio,lio,iio,Kg,Ene,dio,cio,uB,fio,mio,gio,bs,Cne,hio,pio,bB,_io,uio,vB,bio,vio,Fio,Zg,wne,Tio,Mio,FB,Eio,Cio,wio,vs,Ane,Aio,Lio,TB,yio,xio,MB,$io,kio,Sio,Fs,Lne,Rio,Pio,EB,Bio,Iio,CB,Nio,qio,jio,Ts,yne,Dio,Gio,wB,Oio,Vio,AB,Xio,zio,Wio,Ms,xne,Qio,Hio,LB,Uio,Jio,yB,Yio,Kio,Zio,Es,$ne,edo,odo,xB,rdo,tdo,$B,ado,ndo,sdo,Cs,kne,ldo,ido,kB,ddo,cdo,SB,fdo,mdo,gdo,eh,Sne,hdo,pdo,RB,_do,udo,bdo,oh,Rne,vdo,Fdo,PB,Tdo,Mdo,Edo,ws,Pne,Cdo,wdo,BB,Ado,Ldo,IB,ydo,xdo,$do,As,Bne,kdo,Sdo,NB,Rdo,Pdo,qB,Bdo,Ido,Ndo,Ls,Ine,qdo,jdo,jB,Ddo,Gdo,DB,Odo,Vdo,Xdo,rh,Nne,zdo,Wdo,GB,Qdo,Hdo,Udo,th,qne,Jdo,Ydo,OB,Kdo,Zdo,eco,ah,jne,oco,rco,VB,tco,aco,nco,ys,Dne,sco,lco,XB,ico,dco,zB,cco,fco,mco,nh,Gne,gco,hco,WB,pco,_co,uco,sh,One,bco,vco,QB,Fco,Tco,Mco,lh,Vne,Eco,Cco,HB,wco,Aco,Lco,xs,Xne,yco,xco,UB,$co,kco,JB,Sco,Rco,Pco,ih,zne,Bco,Ico,YB,Nco,qco,jco,dh,Wne,Dco,Gco,KB,Oco,Vco,Xco,$s,Qne,zco,Wco,ZB,Qco,Hco,eI,Uco,Jco,Yco,ks,Hne,Kco,Zco,oI,efo,ofo,rI,rfo,tfo,afo,Ss,Une,nfo,sfo,tI,lfo,ifo,aI,dfo,cfo,ffo,Rs,Jne,mfo,gfo,nI,hfo,pfo,sI,_fo,ufo,bfo,ch,vfo,fh,sL,Ffo,Yne,Tfo,Pje,Ci,mh,Kne,lL,Mfo,Zne,Efo,Bje,Ao,iL,Cfo,dL,wfo,lI,Afo,Lfo,yfo,cL,xfo,ese,$fo,kfo,Sfo,He,fL,Rfo,ose,Pfo,Bfo,ya,Ifo,rse,Nfo,qfo,tse,jfo,Dfo,ase,Gfo,Ofo,Vfo,Y,gh,nse,Xfo,zfo,iI,Wfo,Qfo,Hfo,hh,sse,Ufo,Jfo,dI,Yfo,Kfo,Zfo,ph,lse,emo,omo,cI,rmo,tmo,amo,_h,ise,nmo,smo,fI,lmo,imo,dmo,uh,dse,cmo,fmo,mI,mmo,gmo,hmo,bh,cse,pmo,_mo,gI,umo,bmo,vmo,vh,fse,Fmo,Tmo,hI,Mmo,Emo,Cmo,Fh,mse,wmo,Amo,pI,Lmo,ymo,xmo,Th,gse,$mo,kmo,_I,Smo,Rmo,Pmo,Mh,hse,Bmo,Imo,uI,Nmo,qmo,jmo,Eh,pse,Dmo,Gmo,bI,Omo,Vmo,Xmo,Ch,_se,zmo,Wmo,vI,Qmo,Hmo,Umo,wh,use,Jmo,Ymo,FI,Kmo,Zmo,ego,Ah,bse,ogo,rgo,TI,tgo,ago,ngo,Lh,vse,sgo,lgo,MI,igo,dgo,cgo,yh,Fse,fgo,mgo,EI,ggo,hgo,pgo,xh,Tse,_go,ugo,CI,bgo,vgo,Fgo,$h,Mse,Tgo,Mgo,wI,Ego,Cgo,wgo,kh,Ese,Ago,Lgo,AI,ygo,xgo,$go,Sh,Cse,kgo,Sgo,LI,Rgo,Pgo,Bgo,Rh,wse,Igo,Ngo,yI,qgo,jgo,Dgo,Ph,Ase,Ggo,Ogo,xI,Vgo,Xgo,zgo,Bh,Lse,Wgo,Qgo,$I,Hgo,Ugo,Jgo,Ih,yse,Ygo,Kgo,kI,Zgo,eho,oho,Nh,xse,rho,tho,SI,aho,nho,sho,qh,$se,lho,iho,RI,dho,cho,fho,jh,kse,mho,gho,PI,hho,pho,_ho,Dh,Sse,uho,bho,BI,vho,Fho,Tho,Gh,Rse,Mho,Eho,II,Cho,who,Aho,Oh,Pse,Lho,yho,NI,xho,$ho,kho,Vh,Bse,Sho,Rho,qI,Pho,Bho,Iho,Xh,Nho,zh,qho,Wh,mL,jho,Ise,Dho,Ije,wi,Qh,Nse,gL,Gho,qse,Oho,Nje,Lo,hL,Vho,pL,Xho,jI,zho,Who,Qho,_L,Hho,jse,Uho,Jho,Yho,Ue,uL,Kho,Dse,Zho,epo,Ai,opo,Gse,rpo,tpo,Ose,apo,npo,spo,he,Hh,Vse,lpo,ipo,DI,dpo,cpo,fpo,Uh,Xse,mpo,gpo,zse,hpo,ppo,_po,Jh,Wse,upo,bpo,GI,vpo,Fpo,Tpo,Yh,Qse,Mpo,Epo,OI,Cpo,wpo,Apo,Kh,Hse,Lpo,ypo,VI,xpo,$po,kpo,Zh,Use,Spo,Rpo,XI,Ppo,Bpo,Ipo,ep,Jse,Npo,qpo,zI,jpo,Dpo,Gpo,op,Yse,Opo,Vpo,WI,Xpo,zpo,Wpo,rp,Kse,Qpo,Hpo,QI,Upo,Jpo,Ypo,tp,Zse,Kpo,Zpo,HI,e_o,o_o,r_o,ap,ele,t_o,a_o,UI,n_o,s_o,l_o,np,ole,i_o,d_o,JI,c_o,f_o,m_o,sp,rle,g_o,h_o,YI,p_o,__o,u_o,lp,tle,b_o,v_o,KI,F_o,T_o,M_o,ip,ale,E_o,C_o,ZI,w_o,A_o,L_o,dp,nle,y_o,x_o,eN,$_o,k_o,S_o,cp,sle,R_o,P_o,oN,B_o,I_o,N_o,fp,q_o,mp,j_o,gp,bL,D_o,lle,G_o,qje,Li,hp,ile,vL,O_o,dle,V_o,jje,yo,FL,X_o,yi,z_o,rN,W_o,Q_o,tN,H_o,U_o,J_o,TL,Y_o,cle,K_o,Z_o,euo,at,ML,ouo,fle,ruo,tuo,xi,auo,mle,nuo,suo,aN,luo,iuo,duo,pp,cuo,Je,EL,fuo,gle,muo,guo,xa,huo,hle,puo,_uo,ple,uuo,buo,_le,vuo,Fuo,Tuo,y,_p,ule,Muo,Euo,nN,Cuo,wuo,Auo,up,ble,Luo,yuo,sN,xuo,$uo,kuo,bp,vle,Suo,Ruo,lN,Puo,Buo,Iuo,vp,Fle,Nuo,quo,iN,juo,Duo,Guo,Fp,Tle,Ouo,Vuo,dN,Xuo,zuo,Wuo,Tp,Mle,Quo,Huo,cN,Uuo,Juo,Yuo,Mp,Ele,Kuo,Zuo,fN,e5o,o5o,r5o,Ep,Cle,t5o,a5o,mN,n5o,s5o,l5o,Cp,wle,i5o,d5o,gN,c5o,f5o,m5o,wp,Ale,g5o,h5o,hN,p5o,_5o,u5o,Ap,Lle,b5o,v5o,pN,F5o,T5o,M5o,Lp,yle,E5o,C5o,_N,w5o,A5o,L5o,yp,xle,y5o,x5o,uN,$5o,k5o,S5o,xp,$le,R5o,P5o,bN,B5o,I5o,N5o,$p,kle,q5o,j5o,vN,D5o,G5o,O5o,kp,Sle,V5o,X5o,FN,z5o,W5o,Q5o,Sp,Rle,H5o,U5o,TN,J5o,Y5o,K5o,Rp,Ple,Z5o,e1o,MN,o1o,r1o,t1o,Pp,Ble,a1o,n1o,EN,s1o,l1o,i1o,Bp,Ile,d1o,c1o,CN,f1o,m1o,g1o,Ip,Nle,h1o,p1o,wN,_1o,u1o,b1o,Np,qle,v1o,F1o,AN,T1o,M1o,E1o,qp,jle,C1o,w1o,LN,A1o,L1o,y1o,jp,Dle,x1o,$1o,yN,k1o,S1o,R1o,Dp,Gle,P1o,B1o,xN,I1o,N1o,q1o,Gp,Ole,j1o,D1o,$N,G1o,O1o,V1o,Op,Vle,X1o,z1o,kN,W1o,Q1o,H1o,Vp,Xle,U1o,J1o,SN,Y1o,K1o,Z1o,Xp,zle,ebo,obo,RN,rbo,tbo,abo,zp,Wle,nbo,sbo,PN,lbo,ibo,dbo,Wp,Qle,cbo,fbo,BN,mbo,gbo,hbo,Qp,Hle,pbo,_bo,IN,ubo,bbo,vbo,Hp,Ule,Fbo,Tbo,NN,Mbo,Ebo,Cbo,Ps,Jle,wbo,Abo,qN,Lbo,ybo,jN,xbo,$bo,kbo,Up,Yle,Sbo,Rbo,DN,Pbo,Bbo,Ibo,Jp,Kle,Nbo,qbo,GN,jbo,Dbo,Gbo,Yp,Zle,Obo,Vbo,ON,Xbo,zbo,Wbo,Kp,eie,Qbo,Hbo,VN,Ubo,Jbo,Ybo,Zp,oie,Kbo,Zbo,XN,e2o,o2o,r2o,e_,rie,t2o,a2o,zN,n2o,s2o,l2o,o_,tie,i2o,d2o,WN,c2o,f2o,m2o,r_,aie,g2o,h2o,QN,p2o,_2o,u2o,t_,nie,b2o,v2o,HN,F2o,T2o,M2o,a_,sie,E2o,C2o,UN,w2o,A2o,L2o,n_,lie,y2o,x2o,JN,$2o,k2o,S2o,s_,iie,R2o,P2o,YN,B2o,I2o,N2o,l_,die,q2o,j2o,KN,D2o,G2o,O2o,i_,cie,V2o,X2o,ZN,z2o,W2o,Q2o,d_,fie,H2o,U2o,eq,J2o,Y2o,K2o,c_,mie,Z2o,e4o,oq,o4o,r4o,t4o,f_,gie,a4o,n4o,rq,s4o,l4o,i4o,m_,hie,d4o,c4o,tq,f4o,m4o,g4o,g_,pie,h4o,p4o,aq,_4o,u4o,b4o,h_,_ie,v4o,F4o,nq,T4o,M4o,E4o,p_,uie,C4o,w4o,sq,A4o,L4o,y4o,__,bie,x4o,$4o,lq,k4o,S4o,R4o,u_,vie,P4o,B4o,iq,I4o,N4o,q4o,b_,Fie,j4o,D4o,dq,G4o,O4o,V4o,v_,Tie,X4o,z4o,cq,W4o,Q4o,H4o,F_,Mie,U4o,J4o,fq,Y4o,K4o,Z4o,T_,Eie,evo,ovo,mq,rvo,tvo,avo,M_,Cie,nvo,svo,gq,lvo,ivo,dvo,E_,wie,cvo,fvo,hq,mvo,gvo,hvo,C_,Aie,pvo,_vo,pq,uvo,bvo,vvo,w_,Lie,Fvo,Tvo,_q,Mvo,Evo,Cvo,A_,yie,wvo,Avo,uq,Lvo,yvo,xvo,L_,xie,$vo,kvo,bq,Svo,Rvo,Pvo,y_,$ie,Bvo,Ivo,vq,Nvo,qvo,jvo,x_,kie,Dvo,Gvo,Fq,Ovo,Vvo,Xvo,$_,Sie,zvo,Wvo,Tq,Qvo,Hvo,Uvo,k_,Rie,Jvo,Yvo,Mq,Kvo,Zvo,eFo,S_,Pie,oFo,rFo,Eq,tFo,aFo,nFo,R_,Bie,sFo,lFo,Cq,iFo,dFo,cFo,P_,Iie,fFo,mFo,wq,gFo,hFo,pFo,B_,Nie,_Fo,uFo,Aq,bFo,vFo,FFo,I_,qie,TFo,MFo,Lq,EFo,CFo,wFo,N_,jie,AFo,LFo,yq,yFo,xFo,$Fo,q_,Die,kFo,SFo,xq,RFo,PFo,BFo,j_,Gie,IFo,NFo,$q,qFo,jFo,DFo,D_,Oie,GFo,OFo,kq,VFo,XFo,zFo,G_,Vie,WFo,QFo,Sq,HFo,UFo,JFo,O_,Xie,YFo,KFo,Rq,ZFo,eTo,oTo,V_,zie,rTo,tTo,Pq,aTo,nTo,sTo,X_,Wie,lTo,iTo,Bq,dTo,cTo,fTo,z_,Qie,mTo,gTo,Iq,hTo,pTo,_To,W_,Hie,uTo,bTo,Nq,vTo,FTo,TTo,Q_,Uie,MTo,ETo,qq,CTo,wTo,ATo,H_,Jie,LTo,yTo,jq,xTo,$To,kTo,U_,Yie,STo,RTo,Dq,PTo,BTo,ITo,J_,Kie,NTo,qTo,Gq,jTo,DTo,GTo,Y_,Zie,OTo,VTo,Oq,XTo,zTo,WTo,K_,ede,QTo,HTo,Vq,UTo,JTo,YTo,Z_,ode,KTo,ZTo,Xq,e7o,o7o,r7o,eu,rde,t7o,a7o,zq,n7o,s7o,l7o,ou,tde,i7o,d7o,Wq,c7o,f7o,m7o,ru,ade,g7o,h7o,Qq,p7o,_7o,u7o,tu,nde,b7o,v7o,Hq,F7o,T7o,M7o,au,sde,E7o,C7o,Uq,w7o,A7o,L7o,nu,lde,y7o,x7o,Jq,$7o,k7o,S7o,su,ide,R7o,P7o,Yq,B7o,I7o,N7o,lu,dde,q7o,j7o,Kq,D7o,G7o,O7o,iu,cde,V7o,X7o,Zq,z7o,W7o,Q7o,du,fde,H7o,U7o,ej,J7o,Y7o,K7o,cu,mde,Z7o,eMo,oj,oMo,rMo,tMo,fu,gde,aMo,nMo,rj,sMo,lMo,iMo,mu,dMo,hde,cMo,fMo,pde,mMo,gMo,gu,Dje,$i,hu,_de,CL,hMo,ude,pMo,Gje,xo,wL,_Mo,ki,uMo,tj,bMo,vMo,aj,FMo,TMo,MMo,AL,EMo,bde,CMo,wMo,AMo,nt,LL,LMo,vde,yMo,xMo,Si,$Mo,Fde,kMo,SMo,nj,RMo,PMo,BMo,pu,IMo,Ye,yL,NMo,Tde,qMo,jMo,$a,DMo,Mde,GMo,OMo,Ede,VMo,XMo,Cde,zMo,WMo,QMo,G,_u,wde,HMo,UMo,sj,JMo,YMo,KMo,uu,Ade,ZMo,eEo,lj,oEo,rEo,tEo,bu,Lde,aEo,nEo,ij,sEo,lEo,iEo,vu,yde,dEo,cEo,dj,fEo,mEo,gEo,Fu,xde,hEo,pEo,cj,_Eo,uEo,bEo,Tu,$de,vEo,FEo,fj,TEo,MEo,EEo,Mu,kde,CEo,wEo,mj,AEo,LEo,yEo,Eu,Sde,xEo,$Eo,gj,kEo,SEo,REo,Cu,Rde,PEo,BEo,hj,IEo,NEo,qEo,wu,Pde,jEo,DEo,pj,GEo,OEo,VEo,Au,Bde,XEo,zEo,_j,WEo,QEo,HEo,Lu,Ide,UEo,JEo,uj,YEo,KEo,ZEo,yu,Nde,eCo,oCo,bj,rCo,tCo,aCo,xu,qde,nCo,sCo,vj,lCo,iCo,dCo,$u,jde,cCo,fCo,Fj,mCo,gCo,hCo,ku,Dde,pCo,_Co,Tj,uCo,bCo,vCo,Su,Gde,FCo,TCo,Mj,MCo,ECo,CCo,Ru,Ode,wCo,ACo,Ej,LCo,yCo,xCo,Pu,Vde,$Co,kCo,Cj,SCo,RCo,PCo,Bu,Xde,BCo,ICo,wj,NCo,qCo,jCo,Iu,zde,DCo,GCo,Aj,OCo,VCo,XCo,Nu,Wde,zCo,WCo,Lj,QCo,HCo,UCo,qu,Qde,JCo,YCo,yj,KCo,ZCo,e3o,ju,Hde,o3o,r3o,xj,t3o,a3o,n3o,Du,Ude,s3o,l3o,$j,i3o,d3o,c3o,Gu,Jde,f3o,m3o,kj,g3o,h3o,p3o,Ou,Yde,_3o,u3o,Sj,b3o,v3o,F3o,Vu,Kde,T3o,M3o,Rj,E3o,C3o,w3o,Xu,Zde,A3o,L3o,Pj,y3o,x3o,$3o,zu,ece,k3o,S3o,Bj,R3o,P3o,B3o,Wu,oce,I3o,N3o,Ij,q3o,j3o,D3o,Qu,rce,G3o,O3o,Nj,V3o,X3o,z3o,Hu,tce,W3o,Q3o,qj,H3o,U3o,J3o,Uu,ace,Y3o,K3o,jj,Z3o,e0o,o0o,Ju,nce,r0o,t0o,Dj,a0o,n0o,s0o,Yu,sce,l0o,i0o,Gj,d0o,c0o,f0o,Ku,lce,m0o,g0o,Oj,h0o,p0o,_0o,Zu,ice,u0o,b0o,Vj,v0o,F0o,T0o,e5,dce,M0o,E0o,Xj,C0o,w0o,A0o,o5,cce,L0o,y0o,zj,x0o,$0o,k0o,r5,fce,S0o,R0o,Wj,P0o,B0o,I0o,t5,mce,N0o,q0o,Qj,j0o,D0o,G0o,a5,gce,O0o,V0o,Hj,X0o,z0o,W0o,n5,Q0o,hce,H0o,U0o,pce,J0o,Y0o,s5,Oje,Ri,l5,_ce,xL,K0o,uce,Z0o,Vje,$o,$L,ewo,Pi,owo,Uj,rwo,two,Jj,awo,nwo,swo,kL,lwo,bce,iwo,dwo,cwo,st,SL,fwo,vce,mwo,gwo,Bi,hwo,Fce,pwo,_wo,Yj,uwo,bwo,vwo,i5,Fwo,Ke,RL,Two,Tce,Mwo,Ewo,ka,Cwo,Mce,wwo,Awo,Ece,Lwo,ywo,Cce,xwo,$wo,kwo,z,d5,wce,Swo,Rwo,Kj,Pwo,Bwo,Iwo,c5,Ace,Nwo,qwo,Zj,jwo,Dwo,Gwo,f5,Lce,Owo,Vwo,eD,Xwo,zwo,Wwo,m5,yce,Qwo,Hwo,oD,Uwo,Jwo,Ywo,g5,xce,Kwo,Zwo,rD,eAo,oAo,rAo,h5,$ce,tAo,aAo,tD,nAo,sAo,lAo,p5,kce,iAo,dAo,aD,cAo,fAo,mAo,_5,Sce,gAo,hAo,nD,pAo,_Ao,uAo,u5,Rce,bAo,vAo,sD,FAo,TAo,MAo,b5,Pce,EAo,CAo,lD,wAo,AAo,LAo,v5,Bce,yAo,xAo,iD,$Ao,kAo,SAo,F5,Ice,RAo,PAo,dD,BAo,IAo,NAo,T5,Nce,qAo,jAo,cD,DAo,GAo,OAo,M5,qce,VAo,XAo,fD,zAo,WAo,QAo,E5,jce,HAo,UAo,mD,JAo,YAo,KAo,C5,Dce,ZAo,e6o,gD,o6o,r6o,t6o,w5,Gce,a6o,n6o,hD,s6o,l6o,i6o,A5,Oce,d6o,c6o,pD,f6o,m6o,g6o,L5,Vce,h6o,p6o,_D,_6o,u6o,b6o,y5,Xce,v6o,F6o,uD,T6o,M6o,E6o,x5,zce,C6o,w6o,bD,A6o,L6o,y6o,$5,Wce,x6o,$6o,vD,k6o,S6o,R6o,k5,Qce,P6o,B6o,FD,I6o,N6o,q6o,S5,Hce,j6o,D6o,TD,G6o,O6o,V6o,R5,Uce,X6o,z6o,MD,W6o,Q6o,H6o,P5,Jce,U6o,J6o,ED,Y6o,K6o,Z6o,B5,Yce,eLo,oLo,CD,rLo,tLo,aLo,I5,Kce,nLo,sLo,wD,lLo,iLo,dLo,N5,Zce,cLo,fLo,AD,mLo,gLo,hLo,q5,efe,pLo,_Lo,LD,uLo,bLo,vLo,j5,ofe,FLo,TLo,yD,MLo,ELo,CLo,D5,rfe,wLo,ALo,xD,LLo,yLo,xLo,G5,tfe,$Lo,kLo,$D,SLo,RLo,PLo,O5,afe,BLo,ILo,kD,NLo,qLo,jLo,V5,nfe,DLo,GLo,SD,OLo,VLo,XLo,X5,sfe,zLo,WLo,RD,QLo,HLo,ULo,z5,lfe,JLo,YLo,PD,KLo,ZLo,eyo,W5,ife,oyo,ryo,BD,tyo,ayo,nyo,Q5,syo,dfe,lyo,iyo,cfe,dyo,cyo,H5,Xje,Ii,U5,ffe,PL,fyo,mfe,myo,zje,ko,BL,gyo,Ni,hyo,ID,pyo,_yo,ND,uyo,byo,vyo,IL,Fyo,gfe,Tyo,Myo,Eyo,lt,NL,Cyo,hfe,wyo,Ayo,qi,Lyo,pfe,yyo,xyo,qD,$yo,kyo,Syo,J5,Ryo,Ze,qL,Pyo,_fe,Byo,Iyo,Sa,Nyo,ufe,qyo,jyo,bfe,Dyo,Gyo,vfe,Oyo,Vyo,Xyo,Q,Y5,Ffe,zyo,Wyo,jD,Qyo,Hyo,Uyo,K5,Tfe,Jyo,Yyo,DD,Kyo,Zyo,e8o,Z5,Mfe,o8o,r8o,GD,t8o,a8o,n8o,e1,Efe,s8o,l8o,OD,i8o,d8o,c8o,o1,Cfe,f8o,m8o,VD,g8o,h8o,p8o,r1,wfe,_8o,u8o,XD,b8o,v8o,F8o,t1,Afe,T8o,M8o,zD,E8o,C8o,w8o,a1,Lfe,A8o,L8o,WD,y8o,x8o,$8o,n1,yfe,k8o,S8o,QD,R8o,P8o,B8o,s1,xfe,I8o,N8o,HD,q8o,j8o,D8o,l1,$fe,G8o,O8o,UD,V8o,X8o,z8o,i1,kfe,W8o,Q8o,JD,H8o,U8o,J8o,d1,Sfe,Y8o,K8o,YD,Z8o,e9o,o9o,c1,Rfe,r9o,t9o,KD,a9o,n9o,s9o,f1,Pfe,l9o,i9o,ZD,d9o,c9o,f9o,m1,Bfe,m9o,g9o,eG,h9o,p9o,_9o,g1,Ife,u9o,b9o,oG,v9o,F9o,T9o,h1,Nfe,M9o,E9o,rG,C9o,w9o,A9o,p1,qfe,L9o,y9o,tG,x9o,$9o,k9o,_1,jfe,S9o,R9o,aG,P9o,B9o,I9o,u1,Dfe,N9o,q9o,nG,j9o,D9o,G9o,b1,Gfe,O9o,V9o,sG,X9o,z9o,W9o,v1,Ofe,Q9o,H9o,lG,U9o,J9o,Y9o,F1,Vfe,K9o,Z9o,iG,exo,oxo,rxo,T1,Xfe,txo,axo,dG,nxo,sxo,lxo,M1,zfe,ixo,dxo,cG,cxo,fxo,mxo,E1,Wfe,gxo,hxo,fG,pxo,_xo,uxo,C1,Qfe,bxo,vxo,mG,Fxo,Txo,Mxo,w1,Hfe,Exo,Cxo,gG,wxo,Axo,Lxo,A1,Ufe,yxo,xxo,hG,$xo,kxo,Sxo,L1,Jfe,Rxo,Pxo,pG,Bxo,Ixo,Nxo,y1,Yfe,qxo,jxo,Kfe,Dxo,Gxo,Oxo,x1,Zfe,Vxo,Xxo,_G,zxo,Wxo,Qxo,$1,eme,Hxo,Uxo,uG,Jxo,Yxo,Kxo,k1,ome,Zxo,e$o,bG,o$o,r$o,t$o,S1,rme,a$o,n$o,vG,s$o,l$o,i$o,R1,d$o,tme,c$o,f$o,ame,m$o,g$o,P1,Wje,ji,B1,nme,jL,h$o,sme,p$o,Qje,So,DL,_$o,Di,u$o,FG,b$o,v$o,TG,F$o,T$o,M$o,GL,E$o,lme,C$o,w$o,A$o,it,OL,L$o,ime,y$o,x$o,Gi,$$o,dme,k$o,S$o,MG,R$o,P$o,B$o,I1,I$o,eo,VL,N$o,cme,q$o,j$o,Ra,D$o,fme,G$o,O$o,mme,V$o,X$o,gme,z$o,W$o,Q$o,_e,N1,hme,H$o,U$o,EG,J$o,Y$o,K$o,q1,pme,Z$o,eko,CG,oko,rko,tko,j1,_me,ako,nko,wG,sko,lko,iko,D1,ume,dko,cko,AG,fko,mko,gko,G1,bme,hko,pko,LG,_ko,uko,bko,O1,vme,vko,Fko,yG,Tko,Mko,Eko,V1,Fme,Cko,wko,xG,Ako,Lko,yko,X1,Tme,xko,$ko,$G,kko,Sko,Rko,z1,Mme,Pko,Bko,kG,Iko,Nko,qko,W1,Eme,jko,Dko,SG,Gko,Oko,Vko,Q1,Cme,Xko,zko,RG,Wko,Qko,Hko,H1,wme,Uko,Jko,PG,Yko,Kko,Zko,U1,Ame,eSo,oSo,BG,rSo,tSo,aSo,J1,Lme,nSo,sSo,IG,lSo,iSo,dSo,Y1,yme,cSo,fSo,NG,mSo,gSo,hSo,K1,xme,pSo,_So,qG,uSo,bSo,vSo,Z1,FSo,$me,TSo,MSo,kme,ESo,CSo,eb,Hje,Oi,ob,Sme,XL,wSo,Rme,ASo,Uje,Ro,zL,LSo,Vi,ySo,jG,xSo,$So,DG,kSo,SSo,RSo,WL,PSo,Pme,BSo,ISo,NSo,dt,QL,qSo,Bme,jSo,DSo,Xi,GSo,Ime,OSo,VSo,GG,XSo,zSo,WSo,rb,QSo,oo,HL,HSo,Nme,USo,JSo,Pa,YSo,qme,KSo,ZSo,jme,eRo,oRo,Dme,rRo,tRo,aRo,q,tb,Gme,nRo,sRo,OG,lRo,iRo,dRo,ab,Ome,cRo,fRo,VG,mRo,gRo,hRo,nb,Vme,pRo,_Ro,XG,uRo,bRo,vRo,sb,Xme,FRo,TRo,zG,MRo,ERo,CRo,lb,zme,wRo,ARo,WG,LRo,yRo,xRo,ib,Wme,$Ro,kRo,QG,SRo,RRo,PRo,db,Qme,BRo,IRo,HG,NRo,qRo,jRo,cb,Hme,DRo,GRo,UG,ORo,VRo,XRo,fb,Ume,zRo,WRo,JG,QRo,HRo,URo,mb,Jme,JRo,YRo,YG,KRo,ZRo,ePo,gb,Yme,oPo,rPo,KG,tPo,aPo,nPo,hb,Kme,sPo,lPo,ZG,iPo,dPo,cPo,pb,Zme,fPo,mPo,eO,gPo,hPo,pPo,_b,ege,_Po,uPo,oO,bPo,vPo,FPo,ub,oge,TPo,MPo,rO,EPo,CPo,wPo,bb,rge,APo,LPo,tO,yPo,xPo,$Po,vb,tge,kPo,SPo,aO,RPo,PPo,BPo,Fb,age,IPo,NPo,nO,qPo,jPo,DPo,Tb,nge,GPo,OPo,sO,VPo,XPo,zPo,Mb,sge,WPo,QPo,lO,HPo,UPo,JPo,Eb,lge,YPo,KPo,iO,ZPo,eBo,oBo,Cb,ige,rBo,tBo,dO,aBo,nBo,sBo,wb,dge,lBo,iBo,cO,dBo,cBo,fBo,Ab,cge,mBo,gBo,fO,hBo,pBo,_Bo,Lb,fge,uBo,bBo,mO,vBo,FBo,TBo,yb,mge,MBo,EBo,gO,CBo,wBo,ABo,xb,gge,LBo,yBo,hO,xBo,$Bo,kBo,$b,hge,SBo,RBo,pO,PBo,BBo,IBo,kb,pge,NBo,qBo,_O,jBo,DBo,GBo,Sb,_ge,OBo,VBo,uO,XBo,zBo,WBo,Rb,uge,QBo,HBo,bO,UBo,JBo,YBo,Pb,bge,KBo,ZBo,vO,eIo,oIo,rIo,Bb,vge,tIo,aIo,FO,nIo,sIo,lIo,Ib,Fge,iIo,dIo,TO,cIo,fIo,mIo,Nb,Tge,gIo,hIo,MO,pIo,_Io,uIo,qb,Mge,bIo,vIo,EO,FIo,TIo,MIo,jb,Ege,EIo,CIo,CO,wIo,AIo,LIo,Db,Cge,yIo,xIo,wO,$Io,kIo,SIo,Gb,wge,RIo,PIo,AO,BIo,IIo,NIo,Ob,Age,qIo,jIo,LO,DIo,GIo,OIo,Vb,Lge,VIo,XIo,yO,zIo,WIo,QIo,Xb,yge,HIo,UIo,xO,JIo,YIo,KIo,zb,xge,ZIo,eNo,$O,oNo,rNo,tNo,Wb,$ge,aNo,nNo,kO,sNo,lNo,iNo,Qb,kge,dNo,cNo,SO,fNo,mNo,gNo,Hb,Sge,hNo,pNo,RO,_No,uNo,bNo,Ub,Rge,vNo,FNo,PO,TNo,MNo,ENo,Jb,CNo,Pge,wNo,ANo,Bge,LNo,yNo,Yb,Jje,zi,Kb,Ige,UL,xNo,Nge,$No,Yje,Po,JL,kNo,Wi,SNo,BO,RNo,PNo,IO,BNo,INo,NNo,YL,qNo,qge,jNo,DNo,GNo,ct,KL,ONo,jge,VNo,XNo,Qi,zNo,Dge,WNo,QNo,NO,HNo,UNo,JNo,Zb,YNo,ro,ZL,KNo,Gge,ZNo,eqo,Ba,oqo,Oge,rqo,tqo,Vge,aqo,nqo,Xge,sqo,lqo,iqo,Z,e2,zge,dqo,cqo,qO,fqo,mqo,gqo,o2,Wge,hqo,pqo,jO,_qo,uqo,bqo,r2,Qge,vqo,Fqo,DO,Tqo,Mqo,Eqo,t2,Hge,Cqo,wqo,GO,Aqo,Lqo,yqo,a2,Uge,xqo,$qo,OO,kqo,Sqo,Rqo,n2,Jge,Pqo,Bqo,VO,Iqo,Nqo,qqo,s2,Yge,jqo,Dqo,XO,Gqo,Oqo,Vqo,l2,Kge,Xqo,zqo,zO,Wqo,Qqo,Hqo,i2,Zge,Uqo,Jqo,WO,Yqo,Kqo,Zqo,d2,ehe,ejo,ojo,QO,rjo,tjo,ajo,c2,ohe,njo,sjo,HO,ljo,ijo,djo,f2,rhe,cjo,fjo,UO,mjo,gjo,hjo,m2,the,pjo,_jo,JO,ujo,bjo,vjo,g2,ahe,Fjo,Tjo,YO,Mjo,Ejo,Cjo,h2,nhe,wjo,Ajo,KO,Ljo,yjo,xjo,p2,she,$jo,kjo,ZO,Sjo,Rjo,Pjo,_2,lhe,Bjo,Ijo,eV,Njo,qjo,jjo,u2,ihe,Djo,Gjo,oV,Ojo,Vjo,Xjo,b2,dhe,zjo,Wjo,rV,Qjo,Hjo,Ujo,v2,che,Jjo,Yjo,tV,Kjo,Zjo,eDo,F2,fhe,oDo,rDo,aV,tDo,aDo,nDo,T2,mhe,sDo,lDo,nV,iDo,dDo,cDo,M2,ghe,fDo,mDo,sV,gDo,hDo,pDo,E2,hhe,_Do,uDo,lV,bDo,vDo,FDo,C2,phe,TDo,MDo,iV,EDo,CDo,wDo,w2,_he,ADo,LDo,dV,yDo,xDo,$Do,A2,uhe,kDo,SDo,cV,RDo,PDo,BDo,L2,bhe,IDo,NDo,fV,qDo,jDo,DDo,y2,vhe,GDo,ODo,mV,VDo,XDo,zDo,x2,WDo,Fhe,QDo,HDo,The,UDo,JDo,$2,Kje,Hi,k2,Mhe,ey,YDo,Ehe,KDo,Zje,Bo,oy,ZDo,Ui,eGo,gV,oGo,rGo,hV,tGo,aGo,nGo,ry,sGo,Che,lGo,iGo,dGo,ft,ty,cGo,whe,fGo,mGo,Ji,gGo,Ahe,hGo,pGo,pV,_Go,uGo,bGo,S2,vGo,to,ay,FGo,Lhe,TGo,MGo,Ia,EGo,yhe,CGo,wGo,xhe,AGo,LGo,$he,yGo,xGo,$Go,Yr,R2,khe,kGo,SGo,_V,RGo,PGo,BGo,P2,She,IGo,NGo,uV,qGo,jGo,DGo,B2,Rhe,GGo,OGo,bV,VGo,XGo,zGo,I2,Phe,WGo,QGo,vV,HGo,UGo,JGo,N2,Bhe,YGo,KGo,FV,ZGo,eOo,oOo,q2,rOo,Ihe,tOo,aOo,Nhe,nOo,sOo,j2,eDe,Yi,D2,qhe,ny,lOo,jhe,iOo,oDe,Io,sy,dOo,Ki,cOo,TV,fOo,mOo,MV,gOo,hOo,pOo,ly,_Oo,Dhe,uOo,bOo,vOo,mt,iy,FOo,Ghe,TOo,MOo,Zi,EOo,Ohe,COo,wOo,EV,AOo,LOo,yOo,G2,xOo,ao,dy,$Oo,Vhe,kOo,SOo,Na,ROo,Xhe,POo,BOo,zhe,IOo,NOo,Whe,qOo,jOo,DOo,U,O2,Qhe,GOo,OOo,CV,VOo,XOo,zOo,V2,Hhe,WOo,QOo,wV,HOo,UOo,JOo,X2,Uhe,YOo,KOo,AV,ZOo,eVo,oVo,z2,Jhe,rVo,tVo,LV,aVo,nVo,sVo,W2,Yhe,lVo,iVo,yV,dVo,cVo,fVo,Q2,Khe,mVo,gVo,xV,hVo,pVo,_Vo,H2,Zhe,uVo,bVo,$V,vVo,FVo,TVo,U2,epe,MVo,EVo,kV,CVo,wVo,AVo,J2,ope,LVo,yVo,SV,xVo,$Vo,kVo,Y2,rpe,SVo,RVo,RV,PVo,BVo,IVo,K2,tpe,NVo,qVo,PV,jVo,DVo,GVo,Z2,ape,OVo,VVo,BV,XVo,zVo,WVo,e4,npe,QVo,HVo,IV,UVo,JVo,YVo,o4,spe,KVo,ZVo,NV,eXo,oXo,rXo,r4,lpe,tXo,aXo,qV,nXo,sXo,lXo,t4,ipe,iXo,dXo,jV,cXo,fXo,mXo,a4,dpe,gXo,hXo,DV,pXo,_Xo,uXo,n4,cpe,bXo,vXo,GV,FXo,TXo,MXo,s4,fpe,EXo,CXo,OV,wXo,AXo,LXo,l4,mpe,yXo,xXo,VV,$Xo,kXo,SXo,i4,gpe,RXo,PXo,XV,BXo,IXo,NXo,d4,hpe,qXo,jXo,zV,DXo,GXo,OXo,c4,ppe,VXo,XXo,WV,zXo,WXo,QXo,f4,_pe,HXo,UXo,QV,JXo,YXo,KXo,m4,upe,ZXo,ezo,HV,ozo,rzo,tzo,g4,bpe,azo,nzo,UV,szo,lzo,izo,h4,vpe,dzo,czo,JV,fzo,mzo,gzo,p4,Fpe,hzo,pzo,YV,_zo,uzo,bzo,_4,Tpe,vzo,Fzo,KV,Tzo,Mzo,Ezo,u4,Mpe,Czo,wzo,ZV,Azo,Lzo,yzo,b4,Epe,xzo,$zo,eX,kzo,Szo,Rzo,v4,Cpe,Pzo,Bzo,oX,Izo,Nzo,qzo,F4,wpe,jzo,Dzo,rX,Gzo,Ozo,Vzo,T4,Ape,Xzo,zzo,tX,Wzo,Qzo,Hzo,M4,Uzo,Lpe,Jzo,Yzo,ype,Kzo,Zzo,E4,rDe,ed,C4,xpe,cy,eWo,$pe,oWo,tDe,No,fy,rWo,od,tWo,aX,aWo,nWo,nX,sWo,lWo,iWo,my,dWo,kpe,cWo,fWo,mWo,gt,gy,gWo,Spe,hWo,pWo,rd,_Wo,Rpe,uWo,bWo,sX,vWo,FWo,TWo,w4,MWo,no,hy,EWo,Ppe,CWo,wWo,qa,AWo,Bpe,LWo,yWo,Ipe,xWo,$Wo,Npe,kWo,SWo,RWo,V,A4,qpe,PWo,BWo,lX,IWo,NWo,qWo,L4,jpe,jWo,DWo,iX,GWo,OWo,VWo,y4,Dpe,XWo,zWo,dX,WWo,QWo,HWo,x4,Gpe,UWo,JWo,cX,YWo,KWo,ZWo,$4,Ope,eQo,oQo,fX,rQo,tQo,aQo,k4,Vpe,nQo,sQo,mX,lQo,iQo,dQo,S4,Xpe,cQo,fQo,gX,mQo,gQo,hQo,R4,zpe,pQo,_Qo,hX,uQo,bQo,vQo,P4,Wpe,FQo,TQo,pX,MQo,EQo,CQo,B4,Qpe,wQo,AQo,_X,LQo,yQo,xQo,I4,Hpe,$Qo,kQo,uX,SQo,RQo,PQo,N4,Upe,BQo,IQo,bX,NQo,qQo,jQo,q4,Jpe,DQo,GQo,vX,OQo,VQo,XQo,j4,Ype,zQo,WQo,FX,QQo,HQo,UQo,D4,Kpe,JQo,YQo,TX,KQo,ZQo,eHo,G4,Zpe,oHo,rHo,MX,tHo,aHo,nHo,O4,e_e,sHo,lHo,EX,iHo,dHo,cHo,V4,o_e,fHo,mHo,CX,gHo,hHo,pHo,X4,r_e,_Ho,uHo,wX,bHo,vHo,FHo,z4,t_e,THo,MHo,AX,EHo,CHo,wHo,W4,a_e,AHo,LHo,LX,yHo,xHo,$Ho,Q4,n_e,kHo,SHo,yX,RHo,PHo,BHo,H4,s_e,IHo,NHo,xX,qHo,jHo,DHo,U4,l_e,GHo,OHo,$X,VHo,XHo,zHo,J4,i_e,WHo,QHo,kX,HHo,UHo,JHo,Y4,d_e,YHo,KHo,SX,ZHo,eUo,oUo,K4,c_e,rUo,tUo,RX,aUo,nUo,sUo,Z4,f_e,lUo,iUo,PX,dUo,cUo,fUo,ev,m_e,mUo,gUo,BX,hUo,pUo,_Uo,ov,g_e,uUo,bUo,IX,vUo,FUo,TUo,rv,h_e,MUo,EUo,NX,CUo,wUo,AUo,tv,p_e,LUo,yUo,qX,xUo,$Uo,kUo,av,__e,SUo,RUo,jX,PUo,BUo,IUo,nv,u_e,NUo,qUo,DX,jUo,DUo,GUo,sv,b_e,OUo,VUo,GX,XUo,zUo,WUo,lv,v_e,QUo,HUo,OX,UUo,JUo,YUo,iv,F_e,KUo,ZUo,VX,eJo,oJo,rJo,dv,T_e,tJo,aJo,XX,nJo,sJo,lJo,cv,M_e,iJo,dJo,zX,cJo,fJo,mJo,fv,E_e,gJo,hJo,WX,pJo,_Jo,uJo,mv,bJo,C_e,vJo,FJo,w_e,TJo,MJo,gv,aDe,td,hv,A_e,py,EJo,L_e,CJo,nDe,qo,_y,wJo,ad,AJo,QX,LJo,yJo,HX,xJo,$Jo,kJo,uy,SJo,y_e,RJo,PJo,BJo,ht,by,IJo,x_e,NJo,qJo,nd,jJo,$_e,DJo,GJo,UX,OJo,VJo,XJo,pv,zJo,so,vy,WJo,k_e,QJo,HJo,ja,UJo,S_e,JJo,YJo,R_e,KJo,ZJo,P_e,eYo,oYo,rYo,B_e,_v,I_e,tYo,aYo,JX,nYo,sYo,lYo,uv,iYo,N_e,dYo,cYo,q_e,fYo,mYo,bv,sDe,sd,vv,j_e,Fy,gYo,D_e,hYo,lDe,jo,Ty,pYo,ld,_Yo,YX,uYo,bYo,KX,vYo,FYo,TYo,My,MYo,G_e,EYo,CYo,wYo,pt,Ey,AYo,O_e,LYo,yYo,id,xYo,V_e,$Yo,kYo,ZX,SYo,RYo,PYo,Fv,BYo,lo,Cy,IYo,X_e,NYo,qYo,Da,jYo,z_e,DYo,GYo,W_e,OYo,VYo,Q_e,XYo,zYo,WYo,ve,Tv,H_e,QYo,HYo,ez,UYo,JYo,YYo,Mv,U_e,KYo,ZYo,oz,eKo,oKo,rKo,Ev,J_e,tKo,aKo,rz,nKo,sKo,lKo,Cv,Y_e,iKo,dKo,tz,cKo,fKo,mKo,Bs,K_e,gKo,hKo,az,pKo,_Ko,nz,uKo,bKo,vKo,wv,Z_e,FKo,TKo,sz,MKo,EKo,CKo,Is,eue,wKo,AKo,lz,LKo,yKo,iz,xKo,$Ko,kKo,_t,oue,SKo,RKo,dz,PKo,BKo,cz,IKo,NKo,fz,qKo,jKo,DKo,Av,rue,GKo,OKo,mz,VKo,XKo,zKo,Lv,tue,WKo,QKo,gz,HKo,UKo,JKo,yv,aue,YKo,KKo,hz,ZKo,eZo,oZo,xv,nue,rZo,tZo,pz,aZo,nZo,sZo,$v,sue,lZo,iZo,_z,dZo,cZo,fZo,kv,lue,mZo,gZo,uz,hZo,pZo,_Zo,Sv,iue,uZo,bZo,bz,vZo,FZo,TZo,Rv,MZo,due,EZo,CZo,cue,wZo,AZo,Pv,iDe,dd,Bv,fue,wy,LZo,mue,yZo,dDe,Do,Ay,xZo,cd,$Zo,vz,kZo,SZo,Fz,RZo,PZo,BZo,Ly,IZo,gue,NZo,qZo,jZo,ut,yy,DZo,hue,GZo,OZo,fd,VZo,pue,XZo,zZo,Tz,WZo,QZo,HZo,Iv,UZo,io,xy,JZo,_ue,YZo,KZo,Ga,ZZo,uue,eer,oer,bue,rer,ter,vue,aer,ner,ser,Fue,Nv,Tue,ler,ier,Mz,der,cer,fer,qv,mer,Mue,ger,her,Eue,per,_er,jv,cDe,md,Dv,Cue,$y,uer,wue,ber,fDe,Go,ky,ver,gd,Fer,Ez,Ter,Mer,Cz,Eer,Cer,wer,Sy,Aer,Aue,Ler,yer,xer,bt,Ry,$er,Lue,ker,Ser,hd,Rer,yue,Per,Ber,wz,Ier,Ner,qer,Gv,jer,co,Py,Der,xue,Ger,Oer,Oa,Ver,$ue,Xer,zer,kue,Wer,Qer,Sue,Her,Uer,Jer,Re,Ov,Rue,Yer,Ker,Az,Zer,eor,oor,Vv,Pue,ror,tor,Lz,aor,nor,sor,Xv,Bue,lor,ior,yz,dor,cor,mor,zv,Iue,gor,hor,xz,por,_or,uor,Wv,Nue,bor,vor,$z,For,Tor,Mor,Qv,que,Eor,Cor,kz,wor,Aor,Lor,Hv,jue,yor,xor,Sz,$or,kor,Sor,Uv,Due,Ror,Por,Rz,Bor,Ior,Nor,Jv,Gue,qor,jor,Pz,Dor,Gor,Oor,Yv,Vor,Oue,Xor,zor,Vue,Wor,Qor,Kv,mDe,pd,Zv,Xue,By,Hor,zue,Uor,gDe,Oo,Iy,Jor,_d,Yor,Bz,Kor,Zor,Iz,err,orr,rrr,Ny,trr,Wue,arr,nrr,srr,vt,qy,lrr,Que,irr,drr,ud,crr,Hue,frr,mrr,Nz,grr,hrr,prr,eF,_rr,fo,jy,urr,Uue,brr,vrr,Va,Frr,Jue,Trr,Mrr,Yue,Err,Crr,Kue,wrr,Arr,Lrr,Kr,oF,Zue,yrr,xrr,qz,$rr,krr,Srr,rF,e5e,Rrr,Prr,jz,Brr,Irr,Nrr,tF,o5e,qrr,jrr,Dz,Drr,Grr,Orr,aF,r5e,Vrr,Xrr,Gz,zrr,Wrr,Qrr,nF,t5e,Hrr,Urr,Oz,Jrr,Yrr,Krr,sF,Zrr,a5e,etr,otr,n5e,rtr,ttr,lF,hDe,bd,iF,s5e,Dy,atr,l5e,ntr,pDe,Vo,Gy,str,vd,ltr,Vz,itr,dtr,Xz,ctr,ftr,mtr,Oy,gtr,i5e,htr,ptr,_tr,Ft,Vy,utr,d5e,btr,vtr,Fd,Ftr,c5e,Ttr,Mtr,zz,Etr,Ctr,wtr,dF,Atr,mo,Xy,Ltr,f5e,ytr,xtr,Xa,$tr,m5e,ktr,Str,g5e,Rtr,Ptr,h5e,Btr,Itr,Ntr,Le,cF,p5e,qtr,jtr,Wz,Dtr,Gtr,Otr,fF,_5e,Vtr,Xtr,Qz,ztr,Wtr,Qtr,mF,u5e,Htr,Utr,Hz,Jtr,Ytr,Ktr,gF,b5e,Ztr,ear,Uz,oar,rar,tar,hF,v5e,aar,nar,Jz,sar,lar,iar,pF,F5e,dar,car,Yz,far,mar,gar,_F,T5e,har,par,Kz,_ar,uar,bar,uF,M5e,Far,Tar,Zz,Mar,Ear,Car,bF,E5e,war,Aar,eW,Lar,yar,xar,vF,C5e,$ar,kar,oW,Sar,Rar,Par,FF,Bar,w5e,Iar,Nar,A5e,qar,jar,TF,_De,Td,MF,L5e,zy,Dar,y5e,Gar,uDe,Xo,Wy,Oar,Md,Var,rW,Xar,zar,tW,War,Qar,Har,Qy,Uar,x5e,Jar,Yar,Kar,Tt,Hy,Zar,$5e,enr,onr,Ed,rnr,k5e,tnr,anr,aW,nnr,snr,lnr,EF,inr,go,Uy,dnr,S5e,cnr,fnr,za,mnr,R5e,gnr,hnr,P5e,pnr,_nr,B5e,unr,bnr,vnr,Jy,CF,I5e,Fnr,Tnr,nW,Mnr,Enr,Cnr,wF,N5e,wnr,Anr,sW,Lnr,ynr,xnr,AF,$nr,q5e,knr,Snr,j5e,Rnr,Pnr,LF,bDe,Cd,yF,D5e,Yy,Bnr,G5e,Inr,vDe,zo,Ky,Nnr,wd,qnr,lW,jnr,Dnr,iW,Gnr,Onr,Vnr,Zy,Xnr,O5e,znr,Wnr,Qnr,Mt,e8,Hnr,V5e,Unr,Jnr,Ad,Ynr,X5e,Knr,Znr,dW,esr,osr,rsr,xF,tsr,ho,o8,asr,z5e,nsr,ssr,Wa,lsr,W5e,isr,dsr,Q5e,csr,fsr,H5e,msr,gsr,hsr,Zr,$F,U5e,psr,_sr,cW,usr,bsr,vsr,kF,J5e,Fsr,Tsr,fW,Msr,Esr,Csr,SF,Y5e,wsr,Asr,mW,Lsr,ysr,xsr,RF,K5e,$sr,ksr,gW,Ssr,Rsr,Psr,PF,Z5e,Bsr,Isr,hW,Nsr,qsr,jsr,BF,Dsr,e1e,Gsr,Osr,o1e,Vsr,Xsr,IF,FDe,Ld,NF,r1e,r8,zsr,t1e,Wsr,TDe,Wo,t8,Qsr,yd,Hsr,pW,Usr,Jsr,_W,Ysr,Ksr,Zsr,a8,elr,a1e,olr,rlr,tlr,Et,n8,alr,n1e,nlr,slr,xd,llr,s1e,ilr,dlr,uW,clr,flr,mlr,qF,glr,po,s8,hlr,l1e,plr,_lr,Qa,ulr,i1e,blr,vlr,d1e,Flr,Tlr,c1e,Mlr,Elr,Clr,$d,jF,f1e,wlr,Alr,bW,Llr,ylr,xlr,DF,m1e,$lr,klr,vW,Slr,Rlr,Plr,GF,g1e,Blr,Ilr,FW,Nlr,qlr,jlr,OF,Dlr,h1e,Glr,Olr,p1e,Vlr,Xlr,VF,MDe,kd,XF,_1e,l8,zlr,u1e,Wlr,EDe,Qo,i8,Qlr,Sd,Hlr,TW,Ulr,Jlr,MW,Ylr,Klr,Zlr,d8,eir,b1e,oir,rir,tir,Ct,c8,air,v1e,nir,sir,Rd,lir,F1e,iir,dir,EW,cir,fir,mir,zF,gir,_o,f8,hir,T1e,pir,_ir,Ha,uir,M1e,bir,vir,E1e,Fir,Tir,C1e,Mir,Eir,Cir,m8,WF,w1e,wir,Air,CW,Lir,yir,xir,QF,A1e,$ir,kir,wW,Sir,Rir,Pir,HF,Bir,L1e,Iir,Nir,y1e,qir,jir,UF,CDe,Pd,JF,x1e,g8,Dir,$1e,Gir,wDe,Ho,h8,Oir,Bd,Vir,AW,Xir,zir,LW,Wir,Qir,Hir,p8,Uir,k1e,Jir,Yir,Kir,wt,_8,Zir,S1e,edr,odr,Id,rdr,R1e,tdr,adr,yW,ndr,sdr,ldr,YF,idr,uo,u8,ddr,P1e,cdr,fdr,Ua,mdr,B1e,gdr,hdr,I1e,pdr,_dr,N1e,udr,bdr,vdr,q1e,KF,j1e,Fdr,Tdr,xW,Mdr,Edr,Cdr,ZF,wdr,D1e,Adr,Ldr,G1e,ydr,xdr,eT,ADe,Nd,oT,O1e,b8,$dr,V1e,kdr,LDe,Uo,v8,Sdr,qd,Rdr,$W,Pdr,Bdr,kW,Idr,Ndr,qdr,F8,jdr,X1e,Ddr,Gdr,Odr,At,T8,Vdr,z1e,Xdr,zdr,jd,Wdr,W1e,Qdr,Hdr,SW,Udr,Jdr,Ydr,rT,Kdr,bo,M8,Zdr,Q1e,ecr,ocr,Ja,rcr,H1e,tcr,acr,U1e,ncr,scr,J1e,lcr,icr,dcr,Ya,tT,Y1e,ccr,fcr,RW,mcr,gcr,hcr,aT,K1e,pcr,_cr,PW,ucr,bcr,vcr,nT,Z1e,Fcr,Tcr,BW,Mcr,Ecr,Ccr,sT,ebe,wcr,Acr,IW,Lcr,ycr,xcr,lT,$cr,obe,kcr,Scr,rbe,Rcr,Pcr,iT,yDe,Dd,dT,tbe,E8,Bcr,abe,Icr,xDe,Jo,C8,Ncr,Gd,qcr,NW,jcr,Dcr,qW,Gcr,Ocr,Vcr,w8,Xcr,nbe,zcr,Wcr,Qcr,Lt,A8,Hcr,sbe,Ucr,Jcr,Od,Ycr,lbe,Kcr,Zcr,jW,efr,ofr,rfr,cT,tfr,vo,L8,afr,ibe,nfr,sfr,Ka,lfr,dbe,ifr,dfr,cbe,cfr,ffr,fbe,mfr,gfr,hfr,mbe,fT,gbe,pfr,_fr,DW,ufr,bfr,vfr,mT,Ffr,hbe,Tfr,Mfr,pbe,Efr,Cfr,gT,$De,Vd,hT,_be,y8,wfr,ube,Afr,kDe,Yo,x8,Lfr,Xd,yfr,GW,xfr,$fr,OW,kfr,Sfr,Rfr,$8,Pfr,bbe,Bfr,Ifr,Nfr,yt,k8,qfr,vbe,jfr,Dfr,zd,Gfr,Fbe,Ofr,Vfr,VW,Xfr,zfr,Wfr,pT,Qfr,wr,S8,Hfr,Tbe,Ufr,Jfr,Za,Yfr,Mbe,Kfr,Zfr,Ebe,emr,omr,Cbe,rmr,tmr,amr,N,_T,wbe,nmr,smr,XW,lmr,imr,dmr,uT,Abe,cmr,fmr,zW,mmr,gmr,hmr,bT,Lbe,pmr,_mr,WW,umr,bmr,vmr,vT,ybe,Fmr,Tmr,QW,Mmr,Emr,Cmr,FT,xbe,wmr,Amr,HW,Lmr,ymr,xmr,TT,$be,$mr,kmr,UW,Smr,Rmr,Pmr,MT,kbe,Bmr,Imr,JW,Nmr,qmr,jmr,ET,Sbe,Dmr,Gmr,YW,Omr,Vmr,Xmr,CT,Rbe,zmr,Wmr,KW,Qmr,Hmr,Umr,wT,Pbe,Jmr,Ymr,ZW,Kmr,Zmr,egr,AT,Bbe,ogr,rgr,eQ,tgr,agr,ngr,LT,Ibe,sgr,lgr,oQ,igr,dgr,cgr,yT,Nbe,fgr,mgr,rQ,ggr,hgr,pgr,xT,qbe,_gr,ugr,tQ,bgr,vgr,Fgr,$T,jbe,Tgr,Mgr,aQ,Egr,Cgr,wgr,kT,Dbe,Agr,Lgr,nQ,ygr,xgr,$gr,ST,Gbe,kgr,Sgr,sQ,Rgr,Pgr,Bgr,Ns,Obe,Igr,Ngr,lQ,qgr,jgr,iQ,Dgr,Ggr,Ogr,RT,Vbe,Vgr,Xgr,dQ,zgr,Wgr,Qgr,PT,Xbe,Hgr,Ugr,cQ,Jgr,Ygr,Kgr,BT,zbe,Zgr,ehr,fQ,ohr,rhr,thr,IT,Wbe,ahr,nhr,mQ,shr,lhr,ihr,NT,Qbe,dhr,chr,gQ,fhr,mhr,ghr,qT,Hbe,hhr,phr,hQ,_hr,uhr,bhr,jT,Ube,vhr,Fhr,pQ,Thr,Mhr,Ehr,DT,Jbe,Chr,whr,_Q,Ahr,Lhr,yhr,GT,Ybe,xhr,$hr,uQ,khr,Shr,Rhr,OT,Kbe,Phr,Bhr,bQ,Ihr,Nhr,qhr,VT,Zbe,jhr,Dhr,vQ,Ghr,Ohr,Vhr,XT,e2e,Xhr,zhr,FQ,Whr,Qhr,Hhr,zT,o2e,Uhr,Jhr,TQ,Yhr,Khr,Zhr,WT,r2e,epr,opr,MQ,rpr,tpr,apr,QT,t2e,npr,spr,EQ,lpr,ipr,dpr,HT,a2e,cpr,fpr,CQ,mpr,gpr,hpr,UT,n2e,ppr,_pr,wQ,upr,bpr,vpr,JT,s2e,Fpr,Tpr,AQ,Mpr,Epr,Cpr,YT,l2e,wpr,Apr,LQ,Lpr,ypr,xpr,KT,i2e,$pr,kpr,yQ,Spr,Rpr,Ppr,ZT,d2e,Bpr,Ipr,xQ,Npr,qpr,jpr,e7,c2e,Dpr,Gpr,$Q,Opr,Vpr,Xpr,o7,f2e,zpr,Wpr,kQ,Qpr,Hpr,Upr,r7,m2e,Jpr,Ypr,SQ,Kpr,Zpr,e_r,t7,g2e,o_r,r_r,RQ,t_r,a_r,n_r,a7,h2e,s_r,l_r,PQ,i_r,d_r,c_r,n7,p2e,f_r,m_r,BQ,g_r,h_r,p_r,s7,_2e,__r,u_r,IQ,b_r,v_r,F_r,l7,u2e,T_r,M_r,NQ,E_r,C_r,w_r,i7,b2e,A_r,L_r,qQ,y_r,x_r,$_r,d7,SDe,Wd,c7,v2e,R8,k_r,F2e,S_r,RDe,Ko,P8,R_r,Qd,P_r,jQ,B_r,I_r,DQ,N_r,q_r,j_r,B8,D_r,T2e,G_r,O_r,V_r,xt,I8,X_r,M2e,z_r,W_r,Hd,Q_r,E2e,H_r,U_r,GQ,J_r,Y_r,K_r,f7,Z_r,Ar,N8,eur,C2e,our,rur,en,tur,w2e,aur,nur,A2e,sur,lur,L2e,iur,dur,cur,se,m7,y2e,fur,mur,OQ,gur,hur,pur,g7,x2e,_ur,uur,VQ,bur,vur,Fur,h7,$2e,Tur,Mur,XQ,Eur,Cur,wur,p7,k2e,Aur,Lur,zQ,yur,xur,$ur,_7,S2e,kur,Sur,WQ,Rur,Pur,Bur,u7,R2e,Iur,Nur,QQ,qur,jur,Dur,b7,P2e,Gur,Our,HQ,Vur,Xur,zur,v7,B2e,Wur,Qur,UQ,Hur,Uur,Jur,F7,I2e,Yur,Kur,JQ,Zur,e5r,o5r,T7,N2e,r5r,t5r,YQ,a5r,n5r,s5r,M7,q2e,l5r,i5r,KQ,d5r,c5r,f5r,E7,j2e,m5r,g5r,ZQ,h5r,p5r,_5r,C7,D2e,u5r,b5r,eH,v5r,F5r,T5r,w7,G2e,M5r,E5r,oH,C5r,w5r,A5r,A7,O2e,L5r,y5r,rH,x5r,$5r,k5r,L7,V2e,S5r,R5r,tH,P5r,B5r,I5r,y7,X2e,N5r,q5r,aH,j5r,D5r,G5r,x7,z2e,O5r,V5r,nH,X5r,z5r,W5r,$7,W2e,Q5r,H5r,sH,U5r,J5r,Y5r,k7,Q2e,K5r,Z5r,lH,e1r,o1r,r1r,S7,H2e,t1r,a1r,iH,n1r,s1r,l1r,R7,U2e,i1r,d1r,dH,c1r,f1r,m1r,P7,J2e,g1r,h1r,cH,p1r,_1r,u1r,B7,PDe,Ud,I7,Y2e,q8,b1r,K2e,v1r,BDe,Zo,j8,F1r,Jd,T1r,fH,M1r,E1r,mH,C1r,w1r,A1r,D8,L1r,Z2e,y1r,x1r,$1r,$t,G8,k1r,e4e,S1r,R1r,Yd,P1r,o4e,B1r,I1r,gH,N1r,q1r,j1r,N7,D1r,Lr,O8,G1r,r4e,O1r,V1r,on,X1r,t4e,z1r,W1r,a4e,Q1r,H1r,n4e,U1r,J1r,Y1r,Me,q7,s4e,K1r,Z1r,hH,ebr,obr,rbr,j7,l4e,tbr,abr,pH,nbr,sbr,lbr,D7,i4e,ibr,dbr,_H,cbr,fbr,mbr,G7,d4e,gbr,hbr,uH,pbr,_br,ubr,O7,c4e,bbr,vbr,bH,Fbr,Tbr,Mbr,V7,f4e,Ebr,Cbr,vH,wbr,Abr,Lbr,X7,m4e,ybr,xbr,FH,$br,kbr,Sbr,z7,g4e,Rbr,Pbr,TH,Bbr,Ibr,Nbr,W7,h4e,qbr,jbr,MH,Dbr,Gbr,Obr,Q7,p4e,Vbr,Xbr,EH,zbr,Wbr,Qbr,H7,_4e,Hbr,Ubr,CH,Jbr,Ybr,Kbr,U7,u4e,Zbr,e2r,wH,o2r,r2r,t2r,J7,b4e,a2r,n2r,AH,s2r,l2r,i2r,Y7,IDe,Kd,K7,v4e,V8,d2r,F4e,c2r,NDe,er,X8,f2r,Zd,m2r,LH,g2r,h2r,yH,p2r,_2r,u2r,z8,b2r,T4e,v2r,F2r,T2r,kt,W8,M2r,M4e,E2r,C2r,ec,w2r,E4e,A2r,L2r,xH,y2r,x2r,$2r,Z7,k2r,yr,Q8,S2r,C4e,R2r,P2r,rn,B2r,w4e,I2r,N2r,A4e,q2r,j2r,L4e,D2r,G2r,O2r,et,eM,y4e,V2r,X2r,$H,z2r,W2r,Q2r,oM,x4e,H2r,U2r,kH,J2r,Y2r,K2r,rM,$4e,Z2r,e4r,SH,o4r,r4r,t4r,tM,k4e,a4r,n4r,RH,s4r,l4r,i4r,aM,S4e,d4r,c4r,PH,f4r,m4r,g4r,nM,qDe,oc,sM,R4e,H8,h4r,P4e,p4r,jDe,or,U8,_4r,rc,u4r,BH,b4r,v4r,IH,F4r,T4r,M4r,J8,E4r,B4e,C4r,w4r,A4r,St,Y8,L4r,I4e,y4r,x4r,tc,$4r,N4e,k4r,S4r,NH,R4r,P4r,B4r,lM,I4r,xr,K8,N4r,q4e,q4r,j4r,tn,D4r,j4e,G4r,O4r,D4e,V4r,X4r,G4e,z4r,W4r,Q4r,ie,iM,O4e,H4r,U4r,qH,J4r,Y4r,K4r,dM,V4e,Z4r,evr,jH,ovr,rvr,tvr,cM,X4e,avr,nvr,DH,svr,lvr,ivr,fM,z4e,dvr,cvr,GH,fvr,mvr,gvr,mM,W4e,hvr,pvr,OH,_vr,uvr,bvr,gM,Q4e,vvr,Fvr,VH,Tvr,Mvr,Evr,hM,H4e,Cvr,wvr,XH,Avr,Lvr,yvr,pM,U4e,xvr,$vr,zH,kvr,Svr,Rvr,_M,J4e,Pvr,Bvr,WH,Ivr,Nvr,qvr,uM,Y4e,jvr,Dvr,QH,Gvr,Ovr,Vvr,bM,K4e,Xvr,zvr,HH,Wvr,Qvr,Hvr,vM,Z4e,Uvr,Jvr,UH,Yvr,Kvr,Zvr,FM,eve,eFr,oFr,JH,rFr,tFr,aFr,TM,ove,nFr,sFr,YH,lFr,iFr,dFr,MM,rve,cFr,fFr,KH,mFr,gFr,hFr,EM,tve,pFr,_Fr,ZH,uFr,bFr,vFr,CM,ave,FFr,TFr,eU,MFr,EFr,CFr,wM,nve,wFr,AFr,oU,LFr,yFr,xFr,AM,sve,$Fr,kFr,rU,SFr,RFr,PFr,LM,lve,BFr,IFr,tU,NFr,qFr,jFr,yM,DDe,ac,xM,ive,Z8,DFr,dve,GFr,GDe,rr,e9,OFr,nc,VFr,aU,XFr,zFr,nU,WFr,QFr,HFr,o9,UFr,cve,JFr,YFr,KFr,Rt,r9,ZFr,fve,eTr,oTr,sc,rTr,mve,tTr,aTr,sU,nTr,sTr,lTr,$M,iTr,$r,t9,dTr,gve,cTr,fTr,an,mTr,hve,gTr,hTr,pve,pTr,_Tr,_ve,uTr,bTr,vTr,ye,kM,uve,FTr,TTr,lU,MTr,ETr,CTr,SM,bve,wTr,ATr,iU,LTr,yTr,xTr,RM,vve,$Tr,kTr,dU,STr,RTr,PTr,PM,Fve,BTr,ITr,cU,NTr,qTr,jTr,BM,Tve,DTr,GTr,fU,OTr,VTr,XTr,IM,Mve,zTr,WTr,mU,QTr,HTr,UTr,NM,Eve,JTr,YTr,gU,KTr,ZTr,e7r,qM,Cve,o7r,r7r,hU,t7r,a7r,n7r,jM,wve,s7r,l7r,pU,i7r,d7r,c7r,DM,Ave,f7r,m7r,_U,g7r,h7r,p7r,GM,ODe,lc,OM,Lve,a9,_7r,yve,u7r,VDe,tr,n9,b7r,ic,v7r,uU,F7r,T7r,bU,M7r,E7r,C7r,s9,w7r,xve,A7r,L7r,y7r,Pt,l9,x7r,$ve,$7r,k7r,dc,S7r,kve,R7r,P7r,vU,B7r,I7r,N7r,VM,q7r,kr,i9,j7r,Sve,D7r,G7r,nn,O7r,Rve,V7r,X7r,Pve,z7r,W7r,Bve,Q7r,H7r,U7r,oe,XM,Ive,J7r,Y7r,FU,K7r,Z7r,eMr,zM,Nve,oMr,rMr,TU,tMr,aMr,nMr,WM,qve,sMr,lMr,MU,iMr,dMr,cMr,QM,jve,fMr,mMr,EU,gMr,hMr,pMr,HM,Dve,_Mr,uMr,CU,bMr,vMr,FMr,UM,Gve,TMr,MMr,wU,EMr,CMr,wMr,JM,Ove,AMr,LMr,AU,yMr,xMr,$Mr,YM,Vve,kMr,SMr,LU,RMr,PMr,BMr,KM,Xve,IMr,NMr,yU,qMr,jMr,DMr,ZM,zve,GMr,OMr,xU,VMr,XMr,zMr,eE,Wve,WMr,QMr,$U,HMr,UMr,JMr,oE,Qve,YMr,KMr,kU,ZMr,eEr,oEr,rE,Hve,rEr,tEr,SU,aEr,nEr,sEr,tE,Uve,lEr,iEr,RU,dEr,cEr,fEr,aE,Jve,mEr,gEr,PU,hEr,pEr,_Er,nE,Yve,uEr,bEr,BU,vEr,FEr,TEr,sE,Kve,MEr,EEr,IU,CEr,wEr,AEr,lE,Zve,LEr,yEr,NU,xEr,$Er,kEr,iE,eFe,SEr,REr,qU,PEr,BEr,IEr,dE,oFe,NEr,qEr,jU,jEr,DEr,GEr,cE,rFe,OEr,VEr,DU,XEr,zEr,WEr,fE,tFe,QEr,HEr,GU,UEr,JEr,YEr,mE,aFe,KEr,ZEr,OU,eCr,oCr,rCr,gE,nFe,tCr,aCr,VU,nCr,sCr,lCr,hE,sFe,iCr,dCr,XU,cCr,fCr,mCr,pE,lFe,gCr,hCr,zU,pCr,_Cr,uCr,_E,XDe,cc,uE,iFe,d9,bCr,dFe,vCr,zDe,ar,c9,FCr,fc,TCr,WU,MCr,ECr,QU,CCr,wCr,ACr,f9,LCr,cFe,yCr,xCr,$Cr,Bt,m9,kCr,fFe,SCr,RCr,mc,PCr,mFe,BCr,ICr,HU,NCr,qCr,jCr,bE,DCr,Sr,g9,GCr,gFe,OCr,VCr,sn,XCr,hFe,zCr,WCr,pFe,QCr,HCr,_Fe,UCr,JCr,YCr,pe,vE,uFe,KCr,ZCr,UU,e3r,o3r,r3r,FE,bFe,t3r,a3r,JU,n3r,s3r,l3r,TE,vFe,i3r,d3r,YU,c3r,f3r,m3r,ME,FFe,g3r,h3r,KU,p3r,_3r,u3r,EE,TFe,b3r,v3r,ZU,F3r,T3r,M3r,CE,MFe,E3r,C3r,eJ,w3r,A3r,L3r,wE,EFe,y3r,x3r,oJ,$3r,k3r,S3r,AE,CFe,R3r,P3r,rJ,B3r,I3r,N3r,LE,wFe,q3r,j3r,tJ,D3r,G3r,O3r,yE,AFe,V3r,X3r,aJ,z3r,W3r,Q3r,xE,LFe,H3r,U3r,nJ,J3r,Y3r,K3r,$E,yFe,Z3r,e0r,sJ,o0r,r0r,t0r,kE,xFe,a0r,n0r,lJ,s0r,l0r,i0r,SE,$Fe,d0r,c0r,iJ,f0r,m0r,g0r,RE,kFe,h0r,p0r,dJ,_0r,u0r,b0r,PE,SFe,v0r,F0r,cJ,T0r,M0r,E0r,BE,RFe,C0r,w0r,fJ,A0r,L0r,y0r,IE,WDe,gc,NE,PFe,h9,x0r,BFe,$0r,QDe,nr,p9,k0r,hc,S0r,mJ,R0r,P0r,gJ,B0r,I0r,N0r,_9,q0r,IFe,j0r,D0r,G0r,It,u9,O0r,NFe,V0r,X0r,pc,z0r,qFe,W0r,Q0r,hJ,H0r,U0r,J0r,qE,Y0r,Rr,b9,K0r,jFe,Z0r,ewr,ln,owr,DFe,rwr,twr,GFe,awr,nwr,OFe,swr,lwr,iwr,v9,jE,VFe,dwr,cwr,pJ,fwr,mwr,gwr,DE,XFe,hwr,pwr,_J,_wr,uwr,bwr,GE,HDe,_c,OE,zFe,F9,vwr,WFe,Fwr,UDe,sr,T9,Twr,uc,Mwr,uJ,Ewr,Cwr,bJ,wwr,Awr,Lwr,M9,ywr,QFe,xwr,$wr,kwr,Nt,E9,Swr,HFe,Rwr,Pwr,bc,Bwr,UFe,Iwr,Nwr,vJ,qwr,jwr,Dwr,VE,Gwr,Pr,C9,Owr,JFe,Vwr,Xwr,dn,zwr,YFe,Wwr,Qwr,KFe,Hwr,Uwr,ZFe,Jwr,Ywr,Kwr,eTe,XE,oTe,Zwr,eAr,FJ,oAr,rAr,tAr,zE,JDe,vc,WE,rTe,w9,aAr,tTe,nAr,YDe,lr,A9,sAr,Fc,lAr,TJ,iAr,dAr,MJ,cAr,fAr,mAr,L9,gAr,aTe,hAr,pAr,_Ar,qt,y9,uAr,nTe,bAr,vAr,Tc,FAr,sTe,TAr,MAr,EJ,EAr,CAr,wAr,QE,AAr,Br,x9,LAr,lTe,yAr,xAr,cn,$Ar,iTe,kAr,SAr,dTe,RAr,PAr,cTe,BAr,IAr,NAr,de,HE,fTe,qAr,jAr,CJ,DAr,GAr,OAr,UE,mTe,VAr,XAr,wJ,zAr,WAr,QAr,JE,gTe,HAr,UAr,AJ,JAr,YAr,KAr,YE,hTe,ZAr,e6r,LJ,o6r,r6r,t6r,KE,pTe,a6r,n6r,yJ,s6r,l6r,i6r,ZE,_Te,d6r,c6r,xJ,f6r,m6r,g6r,eC,uTe,h6r,p6r,$J,_6r,u6r,b6r,oC,bTe,v6r,F6r,kJ,T6r,M6r,E6r,rC,vTe,C6r,w6r,SJ,A6r,L6r,y6r,tC,FTe,x6r,$6r,RJ,k6r,S6r,R6r,aC,TTe,P6r,B6r,PJ,I6r,N6r,q6r,nC,MTe,j6r,D6r,BJ,G6r,O6r,V6r,sC,ETe,X6r,z6r,IJ,W6r,Q6r,H6r,lC,CTe,U6r,J6r,NJ,Y6r,K6r,Z6r,iC,wTe,eLr,oLr,qJ,rLr,tLr,aLr,dC,ATe,nLr,sLr,jJ,lLr,iLr,dLr,cC,LTe,cLr,fLr,DJ,mLr,gLr,hLr,fC,yTe,pLr,_Lr,GJ,uLr,bLr,vLr,mC,xTe,FLr,TLr,OJ,MLr,ELr,CLr,gC,$Te,wLr,ALr,VJ,LLr,yLr,xLr,hC,KDe,Mc,pC,kTe,$9,$Lr,STe,kLr,ZDe,ir,k9,SLr,Ec,RLr,XJ,PLr,BLr,zJ,ILr,NLr,qLr,S9,jLr,RTe,DLr,GLr,OLr,jt,R9,VLr,PTe,XLr,zLr,Cc,WLr,BTe,QLr,HLr,WJ,ULr,JLr,YLr,_C,KLr,Ir,P9,ZLr,ITe,eyr,oyr,fn,ryr,NTe,tyr,ayr,qTe,nyr,syr,jTe,lyr,iyr,dyr,ce,uC,DTe,cyr,fyr,QJ,myr,gyr,hyr,bC,GTe,pyr,_yr,HJ,uyr,byr,vyr,vC,OTe,Fyr,Tyr,UJ,Myr,Eyr,Cyr,FC,VTe,wyr,Ayr,JJ,Lyr,yyr,xyr,TC,XTe,$yr,kyr,YJ,Syr,Ryr,Pyr,MC,zTe,Byr,Iyr,KJ,Nyr,qyr,jyr,EC,WTe,Dyr,Gyr,ZJ,Oyr,Vyr,Xyr,CC,QTe,zyr,Wyr,eY,Qyr,Hyr,Uyr,wC,HTe,Jyr,Yyr,oY,Kyr,Zyr,e8r,AC,UTe,o8r,r8r,rY,t8r,a8r,n8r,LC,JTe,s8r,l8r,tY,i8r,d8r,c8r,yC,YTe,f8r,m8r,aY,g8r,h8r,p8r,xC,KTe,_8r,u8r,nY,b8r,v8r,F8r,$C,ZTe,T8r,M8r,sY,E8r,C8r,w8r,kC,e7e,A8r,L8r,lY,y8r,x8r,$8r,SC,o7e,k8r,S8r,iY,R8r,P8r,B8r,RC,r7e,I8r,N8r,dY,q8r,j8r,D8r,PC,t7e,G8r,O8r,cY,V8r,X8r,z8r,BC,a7e,W8r,Q8r,fY,H8r,U8r,J8r,IC,n7e,Y8r,K8r,mY,Z8r,e9r,o9r,NC,eGe,wc,qC,s7e,B9,r9r,l7e,t9r,oGe,dr,I9,a9r,Ac,n9r,gY,s9r,l9r,hY,i9r,d9r,c9r,N9,f9r,i7e,m9r,g9r,h9r,Dt,q9,p9r,d7e,_9r,u9r,Lc,b9r,c7e,v9r,F9r,pY,T9r,M9r,E9r,jC,C9r,Nr,j9,w9r,f7e,A9r,L9r,mn,y9r,m7e,x9r,$9r,g7e,k9r,S9r,h7e,R9r,P9r,B9r,p7e,DC,_7e,I9r,N9r,_Y,q9r,j9r,D9r,GC,rGe,yc,OC,u7e,D9,G9r,b7e,O9r,tGe,cr,G9,V9r,xc,X9r,uY,z9r,W9r,bY,Q9r,H9r,U9r,O9,J9r,v7e,Y9r,K9r,Z9r,Gt,V9,exr,F7e,oxr,rxr,$c,txr,T7e,axr,nxr,vY,sxr,lxr,ixr,VC,dxr,qr,X9,cxr,M7e,fxr,mxr,gn,gxr,E7e,hxr,pxr,C7e,_xr,uxr,w7e,bxr,vxr,Fxr,A7e,XC,L7e,Txr,Mxr,FY,Exr,Cxr,wxr,zC,aGe,kc,WC,y7e,z9,Axr,x7e,Lxr,nGe,fr,W9,yxr,Sc,xxr,TY,$xr,kxr,MY,Sxr,Rxr,Pxr,Q9,Bxr,$7e,Ixr,Nxr,qxr,Ot,H9,jxr,k7e,Dxr,Gxr,Rc,Oxr,S7e,Vxr,Xxr,EY,zxr,Wxr,Qxr,QC,Hxr,jr,U9,Uxr,R7e,Jxr,Yxr,hn,Kxr,P7e,Zxr,e$r,B7e,o$r,r$r,I7e,t$r,a$r,n$r,re,HC,N7e,s$r,l$r,CY,i$r,d$r,c$r,UC,q7e,f$r,m$r,wY,g$r,h$r,p$r,JC,j7e,_$r,u$r,AY,b$r,v$r,F$r,YC,D7e,T$r,M$r,LY,E$r,C$r,w$r,KC,G7e,A$r,L$r,yY,y$r,x$r,$$r,ZC,O7e,k$r,S$r,xY,R$r,P$r,B$r,e3,V7e,I$r,N$r,$Y,q$r,j$r,D$r,o3,X7e,G$r,O$r,kY,V$r,X$r,z$r,r3,z7e,W$r,Q$r,SY,H$r,U$r,J$r,t3,W7e,Y$r,K$r,RY,Z$r,ekr,okr,a3,Q7e,rkr,tkr,PY,akr,nkr,skr,n3,H7e,lkr,ikr,BY,dkr,ckr,fkr,s3,U7e,mkr,gkr,IY,hkr,pkr,_kr,l3,J7e,ukr,bkr,NY,vkr,Fkr,Tkr,i3,Y7e,Mkr,Ekr,qY,Ckr,wkr,Akr,d3,K7e,Lkr,ykr,jY,xkr,$kr,kkr,c3,Z7e,Skr,Rkr,DY,Pkr,Bkr,Ikr,f3,eMe,Nkr,qkr,GY,jkr,Dkr,Gkr,m3,oMe,Okr,Vkr,OY,Xkr,zkr,Wkr,g3,rMe,Qkr,Hkr,VY,Ukr,Jkr,Ykr,h3,tMe,Kkr,Zkr,XY,eSr,oSr,rSr,p3,aMe,tSr,aSr,zY,nSr,sSr,lSr,_3,nMe,iSr,dSr,WY,cSr,fSr,mSr,u3,sMe,gSr,hSr,QY,pSr,_Sr,uSr,b3,lMe,bSr,vSr,HY,FSr,TSr,MSr,v3,iMe,ESr,CSr,UY,wSr,ASr,LSr,F3,sGe,Pc,T3,dMe,J9,ySr,cMe,xSr,lGe,mr,Y9,$Sr,Bc,kSr,JY,SSr,RSr,YY,PSr,BSr,ISr,K9,NSr,fMe,qSr,jSr,DSr,Vt,Z9,GSr,mMe,OSr,VSr,Ic,XSr,gMe,zSr,WSr,KY,QSr,HSr,USr,M3,JSr,Dr,ex,YSr,hMe,KSr,ZSr,pn,eRr,pMe,oRr,rRr,_Me,tRr,aRr,uMe,nRr,sRr,lRr,xe,E3,bMe,iRr,dRr,ZY,cRr,fRr,mRr,C3,vMe,gRr,hRr,eK,pRr,_Rr,uRr,w3,FMe,bRr,vRr,oK,FRr,TRr,MRr,A3,TMe,ERr,CRr,rK,wRr,ARr,LRr,L3,MMe,yRr,xRr,tK,$Rr,kRr,SRr,y3,EMe,RRr,PRr,aK,BRr,IRr,NRr,x3,CMe,qRr,jRr,nK,DRr,GRr,ORr,$3,wMe,VRr,XRr,sK,zRr,WRr,QRr,k3,AMe,HRr,URr,lK,JRr,YRr,KRr,S3,LMe,ZRr,ePr,iK,oPr,rPr,tPr,R3,iGe,Nc,P3,yMe,ox,aPr,xMe,nPr,dGe,gr,rx,sPr,qc,lPr,dK,iPr,dPr,cK,cPr,fPr,mPr,tx,gPr,$Me,hPr,pPr,_Pr,Xt,ax,uPr,kMe,bPr,vPr,jc,FPr,SMe,TPr,MPr,fK,EPr,CPr,wPr,B3,APr,Gr,nx,LPr,RMe,yPr,xPr,_n,$Pr,PMe,kPr,SPr,BMe,RPr,PPr,IMe,BPr,IPr,NPr,Ee,I3,NMe,qPr,jPr,mK,DPr,GPr,OPr,N3,qMe,VPr,XPr,gK,zPr,WPr,QPr,q3,jMe,HPr,UPr,hK,JPr,YPr,KPr,j3,DMe,ZPr,eBr,pK,oBr,rBr,tBr,D3,GMe,aBr,nBr,_K,sBr,lBr,iBr,G3,OMe,dBr,cBr,uK,fBr,mBr,gBr,O3,VMe,hBr,pBr,bK,_Br,uBr,bBr,V3,XMe,vBr,FBr,vK,TBr,MBr,EBr,X3,zMe,CBr,wBr,FK,ABr,LBr,yBr,z3,WMe,xBr,$Br,TK,kBr,SBr,RBr,W3,QMe,PBr,BBr,MK,IBr,NBr,qBr,Q3,HMe,jBr,DBr,EK,GBr,OBr,VBr,H3,cGe,Dc,U3,UMe,sx,XBr,JMe,zBr,fGe,hr,lx,WBr,Gc,QBr,CK,HBr,UBr,wK,JBr,YBr,KBr,ix,ZBr,YMe,eIr,oIr,rIr,zt,dx,tIr,KMe,aIr,nIr,Oc,sIr,ZMe,lIr,iIr,AK,dIr,cIr,fIr,J3,mIr,Or,cx,gIr,eEe,hIr,pIr,un,_Ir,oEe,uIr,bIr,rEe,vIr,FIr,tEe,TIr,MIr,EIr,$e,Y3,aEe,CIr,wIr,LK,AIr,LIr,yIr,K3,nEe,xIr,$Ir,yK,kIr,SIr,RIr,Z3,sEe,PIr,BIr,xK,IIr,NIr,qIr,e0,lEe,jIr,DIr,$K,GIr,OIr,VIr,o0,iEe,XIr,zIr,kK,WIr,QIr,HIr,r0,dEe,UIr,JIr,SK,YIr,KIr,ZIr,t0,cEe,eNr,oNr,RK,rNr,tNr,aNr,a0,fEe,nNr,sNr,PK,lNr,iNr,dNr,n0,mEe,cNr,fNr,BK,mNr,gNr,hNr,s0,gEe,pNr,_Nr,IK,uNr,bNr,vNr,l0,mGe,Vc,i0,hEe,fx,FNr,pEe,TNr,gGe,pr,mx,MNr,Xc,ENr,NK,CNr,wNr,qK,ANr,LNr,yNr,gx,xNr,_Ee,$Nr,kNr,SNr,Wt,hx,RNr,uEe,PNr,BNr,zc,INr,bEe,NNr,qNr,jK,jNr,DNr,GNr,d0,ONr,Vr,px,VNr,vEe,XNr,zNr,bn,WNr,FEe,QNr,HNr,TEe,UNr,JNr,MEe,YNr,KNr,ZNr,Pe,c0,EEe,eqr,oqr,DK,rqr,tqr,aqr,f0,CEe,nqr,sqr,GK,lqr,iqr,dqr,m0,wEe,cqr,fqr,OK,mqr,gqr,hqr,g0,AEe,pqr,_qr,VK,uqr,bqr,vqr,h0,LEe,Fqr,Tqr,XK,Mqr,Eqr,Cqr,p0,yEe,wqr,Aqr,zK,Lqr,yqr,xqr,_0,xEe,$qr,kqr,WK,Sqr,Rqr,Pqr,u0,$Ee,Bqr,Iqr,QK,Nqr,qqr,jqr,b0,kEe,Dqr,Gqr,HK,Oqr,Vqr,Xqr,v0,hGe,Wc,F0,SEe,_x,zqr,REe,Wqr,pGe,_r,ux,Qqr,Qc,Hqr,UK,Uqr,Jqr,JK,Yqr,Kqr,Zqr,bx,ejr,PEe,ojr,rjr,tjr,Qt,vx,ajr,BEe,njr,sjr,Hc,ljr,IEe,ijr,djr,YK,cjr,fjr,mjr,T0,gjr,Xr,Fx,hjr,NEe,pjr,_jr,vn,ujr,qEe,bjr,vjr,jEe,Fjr,Tjr,DEe,Mjr,Ejr,Cjr,ke,M0,GEe,wjr,Ajr,KK,Ljr,yjr,xjr,E0,OEe,$jr,kjr,ZK,Sjr,Rjr,Pjr,C0,VEe,Bjr,Ijr,eZ,Njr,qjr,jjr,w0,XEe,Djr,Gjr,oZ,Ojr,Vjr,Xjr,A0,zEe,zjr,Wjr,rZ,Qjr,Hjr,Ujr,L0,WEe,Jjr,Yjr,tZ,Kjr,Zjr,eDr,y0,QEe,oDr,rDr,aZ,tDr,aDr,nDr,x0,HEe,sDr,lDr,nZ,iDr,dDr,cDr,$0,UEe,fDr,mDr,sZ,gDr,hDr,pDr,k0,JEe,_Dr,uDr,lZ,bDr,vDr,FDr,S0,_Ge,Uc,R0,YEe,Tx,TDr,KEe,MDr,uGe,ur,Mx,EDr,Jc,CDr,iZ,wDr,ADr,dZ,LDr,yDr,xDr,Ex,$Dr,ZEe,kDr,SDr,RDr,Ht,Cx,PDr,eCe,BDr,IDr,Yc,NDr,oCe,qDr,jDr,cZ,DDr,GDr,ODr,P0,VDr,zr,wx,XDr,rCe,zDr,WDr,Fn,QDr,tCe,HDr,UDr,aCe,JDr,YDr,nCe,KDr,ZDr,eGr,Se,B0,sCe,oGr,rGr,fZ,tGr,aGr,nGr,I0,lCe,sGr,lGr,mZ,iGr,dGr,cGr,N0,iCe,fGr,mGr,gZ,gGr,hGr,pGr,q0,dCe,_Gr,uGr,hZ,bGr,vGr,FGr,j0,cCe,TGr,MGr,pZ,EGr,CGr,wGr,D0,fCe,AGr,LGr,_Z,yGr,xGr,$Gr,G0,mCe,kGr,SGr,uZ,RGr,PGr,BGr,O0,gCe,IGr,NGr,bZ,qGr,jGr,DGr,V0,hCe,GGr,OGr,vZ,VGr,XGr,zGr,X0,pCe,WGr,QGr,FZ,HGr,UGr,JGr,z0,bGe,Kc,W0,_Ce,Ax,YGr,uCe,KGr,vGe,br,Lx,ZGr,Zc,eOr,TZ,oOr,rOr,MZ,tOr,aOr,nOr,yx,sOr,bCe,lOr,iOr,dOr,Ut,xx,cOr,vCe,fOr,mOr,ef,gOr,FCe,hOr,pOr,EZ,_Or,uOr,bOr,Q0,vOr,Wr,$x,FOr,TCe,TOr,MOr,Tn,EOr,MCe,COr,wOr,ECe,AOr,LOr,CCe,yOr,xOr,$Or,Oe,H0,wCe,kOr,SOr,CZ,ROr,POr,BOr,U0,ACe,IOr,NOr,wZ,qOr,jOr,DOr,J0,LCe,GOr,OOr,AZ,VOr,XOr,zOr,Y0,yCe,WOr,QOr,LZ,HOr,UOr,JOr,K0,xCe,YOr,KOr,yZ,ZOr,eVr,oVr,Z0,$Ce,rVr,tVr,xZ,aVr,nVr,sVr,ew,kCe,lVr,iVr,$Z,dVr,cVr,fVr,ow,SCe,mVr,gVr,kZ,hVr,pVr,_Vr,rw,FGe,of,tw,RCe,kx,uVr,PCe,bVr,TGe,vr,Sx,vVr,rf,FVr,SZ,TVr,MVr,RZ,EVr,CVr,wVr,Rx,AVr,BCe,LVr,yVr,xVr,Jt,Px,$Vr,ICe,kVr,SVr,tf,RVr,NCe,PVr,BVr,PZ,IVr,NVr,qVr,aw,jVr,Qr,Bx,DVr,qCe,GVr,OVr,Mn,VVr,jCe,XVr,zVr,DCe,WVr,QVr,GCe,HVr,UVr,JVr,Ve,nw,OCe,YVr,KVr,BZ,ZVr,eXr,oXr,sw,VCe,rXr,tXr,IZ,aXr,nXr,sXr,lw,XCe,lXr,iXr,NZ,dXr,cXr,fXr,iw,zCe,mXr,gXr,qZ,hXr,pXr,_Xr,dw,WCe,uXr,bXr,jZ,vXr,FXr,TXr,cw,QCe,MXr,EXr,DZ,CXr,wXr,AXr,fw,HCe,LXr,yXr,GZ,xXr,$Xr,kXr,mw,UCe,SXr,RXr,OZ,PXr,BXr,IXr,gw,MGe,af,hw,JCe,Ix,NXr,YCe,qXr,EGe,Fr,Nx,jXr,nf,DXr,VZ,GXr,OXr,XZ,VXr,XXr,zXr,qx,WXr,KCe,QXr,HXr,UXr,Yt,jx,JXr,ZCe,YXr,KXr,sf,ZXr,e3e,ezr,ozr,zZ,rzr,tzr,azr,pw,nzr,Hr,Dx,szr,o3e,lzr,izr,En,dzr,r3e,czr,fzr,t3e,mzr,gzr,a3e,hzr,pzr,_zr,n3e,_w,s3e,uzr,bzr,WZ,vzr,Fzr,Tzr,uw,CGe,lf,bw,l3e,Gx,Mzr,i3e,Ezr,wGe,Tr,Ox,Czr,df,wzr,QZ,Azr,Lzr,HZ,yzr,xzr,$zr,Vx,kzr,d3e,Szr,Rzr,Pzr,Kt,Xx,Bzr,c3e,Izr,Nzr,cf,qzr,f3e,jzr,Dzr,UZ,Gzr,Ozr,Vzr,vw,Xzr,Ur,zx,zzr,m3e,Wzr,Qzr,Cn,Hzr,g3e,Uzr,Jzr,h3e,Yzr,Kzr,p3e,Zzr,eWr,oWr,Wx,Fw,_3e,rWr,tWr,JZ,aWr,nWr,sWr,Tw,u3e,lWr,iWr,YZ,dWr,cWr,fWr,Mw,AGe,ff,Ew,b3e,Qx,mWr,v3e,gWr,LGe,Mr,Hx,hWr,mf,pWr,KZ,_Wr,uWr,ZZ,bWr,vWr,FWr,Ux,TWr,F3e,MWr,EWr,CWr,Zt,Jx,wWr,T3e,AWr,LWr,gf,yWr,M3e,xWr,$Wr,eee,kWr,SWr,RWr,Cw,PWr,Jr,Yx,BWr,E3e,IWr,NWr,wn,qWr,C3e,jWr,DWr,w3e,GWr,OWr,A3e,VWr,XWr,zWr,L3e,ww,y3e,WWr,QWr,oee,HWr,UWr,JWr,Aw,yGe;return d=new te({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Q6=new te({}),H6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new YWr({props:{warning:!0,$$slots:{default:[vPt]},$$scope:{ctx:x}}}),U6=new te({}),J6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/configuration_auto.py#L591"}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/configuration_auto.py#L614"}}),yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[FPt]},$$scope:{ctx:x}}}),eL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/configuration_auto.py#L737"}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/tokenization_auto.py#L391"}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17554/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/tokenization_auto.py#L405"}}),ch=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:x}}}),sL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/tokenization_auto.py#L604"}}),lL=new te({}),iL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17554/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Xh=new YWr({props:{$$slots:{default:[MPt]},$$scope:{ctx:x}}}),zh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:x}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/processing_auto.py#L88"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/processing_auto.py#L102"}}),fp=new YWr({props:{$$slots:{default:[CPt]},$$scope:{ctx:x}}}),mp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:x}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/processing_auto.py#L255"}}),vL=new te({}),FL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L744"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),pp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:x}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),gu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:x}}}),CL=new te({}),wL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L751"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),pu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:x}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:x}}}),xL=new te({}),$L=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L766"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:x}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:x}}}),PL=new te({}),BL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L773"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:x}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),P1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:x}}}),jL=new te({}),DL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L780"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:x}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:x}}}),XL=new te({}),zL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L789"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),rb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:x}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:x}}}),UL=new te({}),JL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L823"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:x}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:x}}}),ey=new te({}),oy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L830"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),j2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:x}}}),ny=new te({}),sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L816"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),G2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:x}}}),cy=new te({}),fy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L798"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:x}}}),py=new te({}),_y=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L805"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:x}}}),Fy=new te({}),Ty=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L839"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:x}}}),wy=new te({}),Ay=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L878"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:x}}}),$y=new te({}),ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L885"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:x}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:x}}}),By=new te({}),Iy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L908"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:x}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:x}}}),Dy=new te({}),Gy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L892"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:x}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:x}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L899"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:x}}}),Yy=new te({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L917"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:x}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:x}}}),r8=new te({}),t8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L924"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[iBt]},$$scope:{ctx:x}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[dBt]},$$scope:{ctx:x}}}),l8=new te({}),i8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L871"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[cBt]},$$scope:{ctx:x}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[fBt]},$$scope:{ctx:x}}}),g8=new te({}),h8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L846"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[mBt]},$$scope:{ctx:x}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[gBt]},$$scope:{ctx:x}}}),b8=new te({}),v8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L853"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),E8=new te({}),C8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L862"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),y8=new te({}),x8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[bBt]},$$scope:{ctx:x}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),R8=new te({}),P8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),q8=new te({}),j8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),V8=new te({}),X8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),H8=new te({}),U8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),Z8=new te({}),e9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),a9=new te({}),n9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),l9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),d9=new te({}),c9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),F9=new te({}),T9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),w9=new te({}),A9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),$9=new te({}),k9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),B9=new te({}),I9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),D9=new te({}),G9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),z9=new te({}),W9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),J9=new te({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[HBt]},$$scope:{ctx:x}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[UBt]},$$scope:{ctx:x}}}),ox=new te({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[JBt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[YBt]},$$scope:{ctx:x}}}),sx=new te({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[KBt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ZBt]},$$scope:{ctx:x}}}),fx=new te({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[eIt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[oIt]},$$scope:{ctx:x}}}),_x=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[rIt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[tIt]},$$scope:{ctx:x}}}),Tx=new te({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[aIt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nIt]},$$scope:{ctx:x}}}),Ax=new te({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[sIt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[lIt]},$$scope:{ctx:x}}}),kx=new te({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[iIt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[dIt]},$$scope:{ctx:x}}}),Ix=new te({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[cIt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[fIt]},$$scope:{ctx:x}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[mIt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[gIt]},$$scope:{ctx:x}}}),Qx=new te({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[hIt]},$$scope:{ctx:x}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[pIt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),tt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),V6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),_i=o("Instantiating one of "),Ln=a("a"),X6=o("AutoConfig"),yn=o(", "),xn=a("a"),z6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),W6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),mk=o("will create a model that is an instance of "),vi=a("a"),gk=o("BertModel"),hk=o("."),Eo=l(),Aa=a("p"),pk=o("There is one class of "),Ff=a("code"),_k=o("AutoModel"),IVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),wje=l(),Fi=a("h2"),Tf=a("a"),Hoe=a("span"),F(Q6.$$.fragment),NVe=l(),Uoe=a("span"),qVe=o("Extending the Auto Classes"),Aje=l(),kn=a("p"),jVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Joe=a("code"),DVe=o("NewModel"),GVe=o(", make sure you have a "),Yoe=a("code"),OVe=o("NewModelConfig"),VVe=o(` then you can add those to the auto
classes like this:`),Lje=l(),F(H6.$$.fragment),yje=l(),uk=a("p"),XVe=o("You will then be able to use the auto classes like you would usually do!"),xje=l(),F(Mf.$$.fragment),$je=l(),Ti=a("h2"),Ef=a("a"),Koe=a("span"),F(U6.$$.fragment),zVe=l(),Zoe=a("span"),WVe=o("AutoConfig"),kje=l(),Co=a("div"),F(J6.$$.fragment),QVe=l(),Y6=a("p"),HVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bk=a("a"),UVe=o("from_pretrained()"),JVe=o(" class method."),YVe=l(),K6=a("p"),KVe=o("This class cannot be instantiated directly using "),ere=a("code"),ZVe=o("__init__()"),eXe=o(" (throws an error)."),oXe=l(),Er=a("div"),F(Z6.$$.fragment),rXe=l(),ore=a("p"),tXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aXe=l(),Mi=a("p"),nXe=o("The configuration class to instantiate is selected based on the "),rre=a("code"),sXe=o("model_type"),lXe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tre=a("code"),iXe=o("pretrained_model_name_or_path"),dXe=o(":"),cXe=l(),A=a("ul"),Cf=a("li"),are=a("strong"),fXe=o("albert"),mXe=o(" \u2014 "),vk=a("a"),gXe=o("AlbertConfig"),hXe=o(" (ALBERT model)"),pXe=l(),wf=a("li"),nre=a("strong"),_Xe=o("bart"),uXe=o(" \u2014 "),Fk=a("a"),bXe=o("BartConfig"),vXe=o(" (BART model)"),FXe=l(),Af=a("li"),sre=a("strong"),TXe=o("beit"),MXe=o(" \u2014 "),Tk=a("a"),EXe=o("BeitConfig"),CXe=o(" (BEiT model)"),wXe=l(),Lf=a("li"),lre=a("strong"),AXe=o("bert"),LXe=o(" \u2014 "),Mk=a("a"),yXe=o("BertConfig"),xXe=o(" (BERT model)"),$Xe=l(),yf=a("li"),ire=a("strong"),kXe=o("bert-generation"),SXe=o(" \u2014 "),Ek=a("a"),RXe=o("BertGenerationConfig"),PXe=o(" (Bert Generation model)"),BXe=l(),xf=a("li"),dre=a("strong"),IXe=o("big_bird"),NXe=o(" \u2014 "),Ck=a("a"),qXe=o("BigBirdConfig"),jXe=o(" (BigBird model)"),DXe=l(),$f=a("li"),cre=a("strong"),GXe=o("bigbird_pegasus"),OXe=o(" \u2014 "),wk=a("a"),VXe=o("BigBirdPegasusConfig"),XXe=o(" (BigBird-Pegasus model)"),zXe=l(),kf=a("li"),fre=a("strong"),WXe=o("blenderbot"),QXe=o(" \u2014 "),Ak=a("a"),HXe=o("BlenderbotConfig"),UXe=o(" (Blenderbot model)"),JXe=l(),Sf=a("li"),mre=a("strong"),YXe=o("blenderbot-small"),KXe=o(" \u2014 "),Lk=a("a"),ZXe=o("BlenderbotSmallConfig"),eze=o(" (BlenderbotSmall model)"),oze=l(),Rf=a("li"),gre=a("strong"),rze=o("bloom"),tze=o(" \u2014 "),yk=a("a"),aze=o("BloomConfig"),nze=o(" (BLOOM model)"),sze=l(),Pf=a("li"),hre=a("strong"),lze=o("camembert"),ize=o(" \u2014 "),xk=a("a"),dze=o("CamembertConfig"),cze=o(" (CamemBERT model)"),fze=l(),Bf=a("li"),pre=a("strong"),mze=o("canine"),gze=o(" \u2014 "),$k=a("a"),hze=o("CanineConfig"),pze=o(" (CANINE model)"),_ze=l(),If=a("li"),_re=a("strong"),uze=o("clip"),bze=o(" \u2014 "),kk=a("a"),vze=o("CLIPConfig"),Fze=o(" (CLIP model)"),Tze=l(),Nf=a("li"),ure=a("strong"),Mze=o("convbert"),Eze=o(" \u2014 "),Sk=a("a"),Cze=o("ConvBertConfig"),wze=o(" (ConvBERT model)"),Aze=l(),qf=a("li"),bre=a("strong"),Lze=o("convnext"),yze=o(" \u2014 "),Rk=a("a"),xze=o("ConvNextConfig"),$ze=o(" (ConvNeXT model)"),kze=l(),jf=a("li"),vre=a("strong"),Sze=o("ctrl"),Rze=o(" \u2014 "),Pk=a("a"),Pze=o("CTRLConfig"),Bze=o(" (CTRL model)"),Ize=l(),Df=a("li"),Fre=a("strong"),Nze=o("cvt"),qze=o(" \u2014 "),Bk=a("a"),jze=o("CvtConfig"),Dze=o(" (CvT model)"),Gze=l(),Gf=a("li"),Tre=a("strong"),Oze=o("data2vec-audio"),Vze=o(" \u2014 "),Ik=a("a"),Xze=o("Data2VecAudioConfig"),zze=o(" (Data2VecAudio model)"),Wze=l(),Of=a("li"),Mre=a("strong"),Qze=o("data2vec-text"),Hze=o(" \u2014 "),Nk=a("a"),Uze=o("Data2VecTextConfig"),Jze=o(" (Data2VecText model)"),Yze=l(),Vf=a("li"),Ere=a("strong"),Kze=o("data2vec-vision"),Zze=o(" \u2014 "),qk=a("a"),eWe=o("Data2VecVisionConfig"),oWe=o(" (Data2VecVision model)"),rWe=l(),Xf=a("li"),Cre=a("strong"),tWe=o("deberta"),aWe=o(" \u2014 "),jk=a("a"),nWe=o("DebertaConfig"),sWe=o(" (DeBERTa model)"),lWe=l(),zf=a("li"),wre=a("strong"),iWe=o("deberta-v2"),dWe=o(" \u2014 "),Dk=a("a"),cWe=o("DebertaV2Config"),fWe=o(" (DeBERTa-v2 model)"),mWe=l(),Wf=a("li"),Are=a("strong"),gWe=o("decision_transformer"),hWe=o(" \u2014 "),Gk=a("a"),pWe=o("DecisionTransformerConfig"),_We=o(" (Decision Transformer model)"),uWe=l(),Qf=a("li"),Lre=a("strong"),bWe=o("deit"),vWe=o(" \u2014 "),Ok=a("a"),FWe=o("DeiTConfig"),TWe=o(" (DeiT model)"),MWe=l(),Hf=a("li"),yre=a("strong"),EWe=o("detr"),CWe=o(" \u2014 "),Vk=a("a"),wWe=o("DetrConfig"),AWe=o(" (DETR model)"),LWe=l(),Uf=a("li"),xre=a("strong"),yWe=o("distilbert"),xWe=o(" \u2014 "),Xk=a("a"),$We=o("DistilBertConfig"),kWe=o(" (DistilBERT model)"),SWe=l(),Jf=a("li"),$re=a("strong"),RWe=o("dpr"),PWe=o(" \u2014 "),zk=a("a"),BWe=o("DPRConfig"),IWe=o(" (DPR model)"),NWe=l(),Yf=a("li"),kre=a("strong"),qWe=o("dpt"),jWe=o(" \u2014 "),Wk=a("a"),DWe=o("DPTConfig"),GWe=o(" (DPT model)"),OWe=l(),Kf=a("li"),Sre=a("strong"),VWe=o("electra"),XWe=o(" \u2014 "),Qk=a("a"),zWe=o("ElectraConfig"),WWe=o(" (ELECTRA model)"),QWe=l(),Zf=a("li"),Rre=a("strong"),HWe=o("encoder-decoder"),UWe=o(" \u2014 "),Hk=a("a"),JWe=o("EncoderDecoderConfig"),YWe=o(" (Encoder decoder model)"),KWe=l(),em=a("li"),Pre=a("strong"),ZWe=o("flaubert"),eQe=o(" \u2014 "),Uk=a("a"),oQe=o("FlaubertConfig"),rQe=o(" (FlauBERT model)"),tQe=l(),om=a("li"),Bre=a("strong"),aQe=o("flava"),nQe=o(" \u2014 "),Jk=a("a"),sQe=o("FlavaConfig"),lQe=o(" (FLAVA model)"),iQe=l(),rm=a("li"),Ire=a("strong"),dQe=o("fnet"),cQe=o(" \u2014 "),Yk=a("a"),fQe=o("FNetConfig"),mQe=o(" (FNet model)"),gQe=l(),tm=a("li"),Nre=a("strong"),hQe=o("fsmt"),pQe=o(" \u2014 "),Kk=a("a"),_Qe=o("FSMTConfig"),uQe=o(" (FairSeq Machine-Translation model)"),bQe=l(),am=a("li"),qre=a("strong"),vQe=o("funnel"),FQe=o(" \u2014 "),Zk=a("a"),TQe=o("FunnelConfig"),MQe=o(" (Funnel Transformer model)"),EQe=l(),nm=a("li"),jre=a("strong"),CQe=o("glpn"),wQe=o(" \u2014 "),eS=a("a"),AQe=o("GLPNConfig"),LQe=o(" (GLPN model)"),yQe=l(),sm=a("li"),Dre=a("strong"),xQe=o("gpt2"),$Qe=o(" \u2014 "),oS=a("a"),kQe=o("GPT2Config"),SQe=o(" (OpenAI GPT-2 model)"),RQe=l(),lm=a("li"),Gre=a("strong"),PQe=o("gpt_neo"),BQe=o(" \u2014 "),rS=a("a"),IQe=o("GPTNeoConfig"),NQe=o(" (GPT Neo model)"),qQe=l(),im=a("li"),Ore=a("strong"),jQe=o("gpt_neox"),DQe=o(" \u2014 "),tS=a("a"),GQe=o("GPTNeoXConfig"),OQe=o(" (GPT NeoX model)"),VQe=l(),dm=a("li"),Vre=a("strong"),XQe=o("gptj"),zQe=o(" \u2014 "),aS=a("a"),WQe=o("GPTJConfig"),QQe=o(" (GPT-J model)"),HQe=l(),cm=a("li"),Xre=a("strong"),UQe=o("hubert"),JQe=o(" \u2014 "),nS=a("a"),YQe=o("HubertConfig"),KQe=o(" (Hubert model)"),ZQe=l(),fm=a("li"),zre=a("strong"),eHe=o("ibert"),oHe=o(" \u2014 "),sS=a("a"),rHe=o("IBertConfig"),tHe=o(" (I-BERT model)"),aHe=l(),mm=a("li"),Wre=a("strong"),nHe=o("imagegpt"),sHe=o(" \u2014 "),lS=a("a"),lHe=o("ImageGPTConfig"),iHe=o(" (ImageGPT model)"),dHe=l(),gm=a("li"),Qre=a("strong"),cHe=o("layoutlm"),fHe=o(" \u2014 "),iS=a("a"),mHe=o("LayoutLMConfig"),gHe=o(" (LayoutLM model)"),hHe=l(),hm=a("li"),Hre=a("strong"),pHe=o("layoutlmv2"),_He=o(" \u2014 "),dS=a("a"),uHe=o("LayoutLMv2Config"),bHe=o(" (LayoutLMv2 model)"),vHe=l(),pm=a("li"),Ure=a("strong"),FHe=o("layoutlmv3"),THe=o(" \u2014 "),cS=a("a"),MHe=o("LayoutLMv3Config"),EHe=o(" (LayoutLMv3 model)"),CHe=l(),_m=a("li"),Jre=a("strong"),wHe=o("led"),AHe=o(" \u2014 "),fS=a("a"),LHe=o("LEDConfig"),yHe=o(" (LED model)"),xHe=l(),um=a("li"),Yre=a("strong"),$He=o("levit"),kHe=o(" \u2014 "),mS=a("a"),SHe=o("LevitConfig"),RHe=o(" (LeViT model)"),PHe=l(),bm=a("li"),Kre=a("strong"),BHe=o("longformer"),IHe=o(" \u2014 "),gS=a("a"),NHe=o("LongformerConfig"),qHe=o(" (Longformer model)"),jHe=l(),vm=a("li"),Zre=a("strong"),DHe=o("luke"),GHe=o(" \u2014 "),hS=a("a"),OHe=o("LukeConfig"),VHe=o(" (LUKE model)"),XHe=l(),Fm=a("li"),ete=a("strong"),zHe=o("lxmert"),WHe=o(" \u2014 "),pS=a("a"),QHe=o("LxmertConfig"),HHe=o(" (LXMERT model)"),UHe=l(),Tm=a("li"),ote=a("strong"),JHe=o("m2m_100"),YHe=o(" \u2014 "),_S=a("a"),KHe=o("M2M100Config"),ZHe=o(" (M2M100 model)"),eUe=l(),Mm=a("li"),rte=a("strong"),oUe=o("marian"),rUe=o(" \u2014 "),uS=a("a"),tUe=o("MarianConfig"),aUe=o(" (Marian model)"),nUe=l(),Em=a("li"),tte=a("strong"),sUe=o("maskformer"),lUe=o(" \u2014 "),bS=a("a"),iUe=o("MaskFormerConfig"),dUe=o(" (MaskFormer model)"),cUe=l(),Cm=a("li"),ate=a("strong"),fUe=o("mbart"),mUe=o(" \u2014 "),vS=a("a"),gUe=o("MBartConfig"),hUe=o(" (mBART model)"),pUe=l(),wm=a("li"),nte=a("strong"),_Ue=o("mctct"),uUe=o(" \u2014 "),FS=a("a"),bUe=o("MCTCTConfig"),vUe=o(" (M-CTC-T model)"),FUe=l(),Am=a("li"),ste=a("strong"),TUe=o("megatron-bert"),MUe=o(" \u2014 "),TS=a("a"),EUe=o("MegatronBertConfig"),CUe=o(" (Megatron-BERT model)"),wUe=l(),Lm=a("li"),lte=a("strong"),AUe=o("mobilebert"),LUe=o(" \u2014 "),MS=a("a"),yUe=o("MobileBertConfig"),xUe=o(" (MobileBERT model)"),$Ue=l(),ym=a("li"),ite=a("strong"),kUe=o("mpnet"),SUe=o(" \u2014 "),ES=a("a"),RUe=o("MPNetConfig"),PUe=o(" (MPNet model)"),BUe=l(),xm=a("li"),dte=a("strong"),IUe=o("mt5"),NUe=o(" \u2014 "),CS=a("a"),qUe=o("MT5Config"),jUe=o(" (MT5 model)"),DUe=l(),$m=a("li"),cte=a("strong"),GUe=o("nystromformer"),OUe=o(" \u2014 "),wS=a("a"),VUe=o("NystromformerConfig"),XUe=o(" (Nystr\xF6mformer model)"),zUe=l(),km=a("li"),fte=a("strong"),WUe=o("openai-gpt"),QUe=o(" \u2014 "),AS=a("a"),HUe=o("OpenAIGPTConfig"),UUe=o(" (OpenAI GPT model)"),JUe=l(),Sm=a("li"),mte=a("strong"),YUe=o("opt"),KUe=o(" \u2014 "),LS=a("a"),ZUe=o("OPTConfig"),eJe=o(" (OPT model)"),oJe=l(),Rm=a("li"),gte=a("strong"),rJe=o("pegasus"),tJe=o(" \u2014 "),yS=a("a"),aJe=o("PegasusConfig"),nJe=o(" (Pegasus model)"),sJe=l(),Pm=a("li"),hte=a("strong"),lJe=o("perceiver"),iJe=o(" \u2014 "),xS=a("a"),dJe=o("PerceiverConfig"),cJe=o(" (Perceiver model)"),fJe=l(),Bm=a("li"),pte=a("strong"),mJe=o("plbart"),gJe=o(" \u2014 "),$S=a("a"),hJe=o("PLBartConfig"),pJe=o(" (PLBart model)"),_Je=l(),Im=a("li"),_te=a("strong"),uJe=o("poolformer"),bJe=o(" \u2014 "),kS=a("a"),vJe=o("PoolFormerConfig"),FJe=o(" (PoolFormer model)"),TJe=l(),Nm=a("li"),ute=a("strong"),MJe=o("prophetnet"),EJe=o(" \u2014 "),SS=a("a"),CJe=o("ProphetNetConfig"),wJe=o(" (ProphetNet model)"),AJe=l(),qm=a("li"),bte=a("strong"),LJe=o("qdqbert"),yJe=o(" \u2014 "),RS=a("a"),xJe=o("QDQBertConfig"),$Je=o(" (QDQBert model)"),kJe=l(),jm=a("li"),vte=a("strong"),SJe=o("rag"),RJe=o(" \u2014 "),PS=a("a"),PJe=o("RagConfig"),BJe=o(" (RAG model)"),IJe=l(),Dm=a("li"),Fte=a("strong"),NJe=o("realm"),qJe=o(" \u2014 "),BS=a("a"),jJe=o("RealmConfig"),DJe=o(" (REALM model)"),GJe=l(),Gm=a("li"),Tte=a("strong"),OJe=o("reformer"),VJe=o(" \u2014 "),IS=a("a"),XJe=o("ReformerConfig"),zJe=o(" (Reformer model)"),WJe=l(),Om=a("li"),Mte=a("strong"),QJe=o("regnet"),HJe=o(" \u2014 "),NS=a("a"),UJe=o("RegNetConfig"),JJe=o(" (RegNet model)"),YJe=l(),Vm=a("li"),Ete=a("strong"),KJe=o("rembert"),ZJe=o(" \u2014 "),qS=a("a"),eYe=o("RemBertConfig"),oYe=o(" (RemBERT model)"),rYe=l(),Xm=a("li"),Cte=a("strong"),tYe=o("resnet"),aYe=o(" \u2014 "),jS=a("a"),nYe=o("ResNetConfig"),sYe=o(" (ResNet model)"),lYe=l(),zm=a("li"),wte=a("strong"),iYe=o("retribert"),dYe=o(" \u2014 "),DS=a("a"),cYe=o("RetriBertConfig"),fYe=o(" (RetriBERT model)"),mYe=l(),Wm=a("li"),Ate=a("strong"),gYe=o("roberta"),hYe=o(" \u2014 "),GS=a("a"),pYe=o("RobertaConfig"),_Ye=o(" (RoBERTa model)"),uYe=l(),Qm=a("li"),Lte=a("strong"),bYe=o("roformer"),vYe=o(" \u2014 "),OS=a("a"),FYe=o("RoFormerConfig"),TYe=o(" (RoFormer model)"),MYe=l(),Hm=a("li"),yte=a("strong"),EYe=o("segformer"),CYe=o(" \u2014 "),VS=a("a"),wYe=o("SegformerConfig"),AYe=o(" (SegFormer model)"),LYe=l(),Um=a("li"),xte=a("strong"),yYe=o("sew"),xYe=o(" \u2014 "),XS=a("a"),$Ye=o("SEWConfig"),kYe=o(" (SEW model)"),SYe=l(),Jm=a("li"),$te=a("strong"),RYe=o("sew-d"),PYe=o(" \u2014 "),zS=a("a"),BYe=o("SEWDConfig"),IYe=o(" (SEW-D model)"),NYe=l(),Ym=a("li"),kte=a("strong"),qYe=o("speech-encoder-decoder"),jYe=o(" \u2014 "),WS=a("a"),DYe=o("SpeechEncoderDecoderConfig"),GYe=o(" (Speech Encoder decoder model)"),OYe=l(),Km=a("li"),Ste=a("strong"),VYe=o("speech_to_text"),XYe=o(" \u2014 "),QS=a("a"),zYe=o("Speech2TextConfig"),WYe=o(" (Speech2Text model)"),QYe=l(),Zm=a("li"),Rte=a("strong"),HYe=o("speech_to_text_2"),UYe=o(" \u2014 "),HS=a("a"),JYe=o("Speech2Text2Config"),YYe=o(" (Speech2Text2 model)"),KYe=l(),eg=a("li"),Pte=a("strong"),ZYe=o("splinter"),eKe=o(" \u2014 "),US=a("a"),oKe=o("SplinterConfig"),rKe=o(" (Splinter model)"),tKe=l(),og=a("li"),Bte=a("strong"),aKe=o("squeezebert"),nKe=o(" \u2014 "),JS=a("a"),sKe=o("SqueezeBertConfig"),lKe=o(" (SqueezeBERT model)"),iKe=l(),rg=a("li"),Ite=a("strong"),dKe=o("swin"),cKe=o(" \u2014 "),YS=a("a"),fKe=o("SwinConfig"),mKe=o(" (Swin Transformer model)"),gKe=l(),tg=a("li"),Nte=a("strong"),hKe=o("t5"),pKe=o(" \u2014 "),KS=a("a"),_Ke=o("T5Config"),uKe=o(" (T5 model)"),bKe=l(),ag=a("li"),qte=a("strong"),vKe=o("tapas"),FKe=o(" \u2014 "),ZS=a("a"),TKe=o("TapasConfig"),MKe=o(" (TAPAS model)"),EKe=l(),ng=a("li"),jte=a("strong"),CKe=o("trajectory_transformer"),wKe=o(" \u2014 "),eR=a("a"),AKe=o("TrajectoryTransformerConfig"),LKe=o(" (Trajectory Transformer model)"),yKe=l(),sg=a("li"),Dte=a("strong"),xKe=o("transfo-xl"),$Ke=o(" \u2014 "),oR=a("a"),kKe=o("TransfoXLConfig"),SKe=o(" (Transformer-XL model)"),RKe=l(),lg=a("li"),Gte=a("strong"),PKe=o("trocr"),BKe=o(" \u2014 "),rR=a("a"),IKe=o("TrOCRConfig"),NKe=o(" (TrOCR model)"),qKe=l(),ig=a("li"),Ote=a("strong"),jKe=o("unispeech"),DKe=o(" \u2014 "),tR=a("a"),GKe=o("UniSpeechConfig"),OKe=o(" (UniSpeech model)"),VKe=l(),dg=a("li"),Vte=a("strong"),XKe=o("unispeech-sat"),zKe=o(" \u2014 "),aR=a("a"),WKe=o("UniSpeechSatConfig"),QKe=o(" (UniSpeechSat model)"),HKe=l(),cg=a("li"),Xte=a("strong"),UKe=o("van"),JKe=o(" \u2014 "),nR=a("a"),YKe=o("VanConfig"),KKe=o(" (VAN model)"),ZKe=l(),fg=a("li"),zte=a("strong"),eZe=o("vilt"),oZe=o(" \u2014 "),sR=a("a"),rZe=o("ViltConfig"),tZe=o(" (ViLT model)"),aZe=l(),mg=a("li"),Wte=a("strong"),nZe=o("vision-encoder-decoder"),sZe=o(" \u2014 "),lR=a("a"),lZe=o("VisionEncoderDecoderConfig"),iZe=o(" (Vision Encoder decoder model)"),dZe=l(),gg=a("li"),Qte=a("strong"),cZe=o("vision-text-dual-encoder"),fZe=o(" \u2014 "),iR=a("a"),mZe=o("VisionTextDualEncoderConfig"),gZe=o(" (VisionTextDualEncoder model)"),hZe=l(),hg=a("li"),Hte=a("strong"),pZe=o("visual_bert"),_Ze=o(" \u2014 "),dR=a("a"),uZe=o("VisualBertConfig"),bZe=o(" (VisualBERT model)"),vZe=l(),pg=a("li"),Ute=a("strong"),FZe=o("vit"),TZe=o(" \u2014 "),cR=a("a"),MZe=o("ViTConfig"),EZe=o(" (ViT model)"),CZe=l(),_g=a("li"),Jte=a("strong"),wZe=o("vit_mae"),AZe=o(" \u2014 "),fR=a("a"),LZe=o("ViTMAEConfig"),yZe=o(" (ViTMAE model)"),xZe=l(),ug=a("li"),Yte=a("strong"),$Ze=o("wav2vec2"),kZe=o(" \u2014 "),mR=a("a"),SZe=o("Wav2Vec2Config"),RZe=o(" (Wav2Vec2 model)"),PZe=l(),bg=a("li"),Kte=a("strong"),BZe=o("wav2vec2-conformer"),IZe=o(" \u2014 "),gR=a("a"),NZe=o("Wav2Vec2ConformerConfig"),qZe=o(" (Wav2Vec2-Conformer model)"),jZe=l(),vg=a("li"),Zte=a("strong"),DZe=o("wavlm"),GZe=o(" \u2014 "),hR=a("a"),OZe=o("WavLMConfig"),VZe=o(" (WavLM model)"),XZe=l(),Fg=a("li"),eae=a("strong"),zZe=o("xglm"),WZe=o(" \u2014 "),pR=a("a"),QZe=o("XGLMConfig"),HZe=o(" (XGLM model)"),UZe=l(),Tg=a("li"),oae=a("strong"),JZe=o("xlm"),YZe=o(" \u2014 "),_R=a("a"),KZe=o("XLMConfig"),ZZe=o(" (XLM model)"),eeo=l(),Mg=a("li"),rae=a("strong"),oeo=o("xlm-prophetnet"),reo=o(" \u2014 "),uR=a("a"),teo=o("XLMProphetNetConfig"),aeo=o(" (XLM-ProphetNet model)"),neo=l(),Eg=a("li"),tae=a("strong"),seo=o("xlm-roberta"),leo=o(" \u2014 "),bR=a("a"),ieo=o("XLMRobertaConfig"),deo=o(" (XLM-RoBERTa model)"),ceo=l(),Cg=a("li"),aae=a("strong"),feo=o("xlm-roberta-xl"),meo=o(" \u2014 "),vR=a("a"),geo=o("XLMRobertaXLConfig"),heo=o(" (XLM-RoBERTa-XL model)"),peo=l(),wg=a("li"),nae=a("strong"),_eo=o("xlnet"),ueo=o(" \u2014 "),FR=a("a"),beo=o("XLNetConfig"),veo=o(" (XLNet model)"),Feo=l(),Ag=a("li"),sae=a("strong"),Teo=o("yolos"),Meo=o(" \u2014 "),TR=a("a"),Eeo=o("YolosConfig"),Ceo=o(" (YOLOS model)"),weo=l(),Lg=a("li"),lae=a("strong"),Aeo=o("yoso"),Leo=o(" \u2014 "),MR=a("a"),yeo=o("YosoConfig"),xeo=o(" (YOSO model)"),$eo=l(),F(yg.$$.fragment),keo=l(),xg=a("div"),F(eL.$$.fragment),Seo=l(),iae=a("p"),Reo=o("Register a new configuration for this class."),Sje=l(),Ei=a("h2"),$g=a("a"),dae=a("span"),F(oL.$$.fragment),Peo=l(),cae=a("span"),Beo=o("AutoTokenizer"),Rje=l(),wo=a("div"),F(rL.$$.fragment),Ieo=l(),tL=a("p"),Neo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ER=a("a"),qeo=o("AutoTokenizer.from_pretrained()"),jeo=o(" class method."),Deo=l(),aL=a("p"),Geo=o("This class cannot be instantiated directly using "),fae=a("code"),Oeo=o("__init__()"),Veo=o(" (throws an error)."),Xeo=l(),Cr=a("div"),F(nL.$$.fragment),zeo=l(),mae=a("p"),Weo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qeo=l(),La=a("p"),Heo=o("The tokenizer class to instantiate is selected based on the "),gae=a("code"),Ueo=o("model_type"),Jeo=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),Yeo=o("pretrained_model_name_or_path"),Keo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),Zeo=o("pretrained_model_name_or_path"),eoo=o(":"),ooo=l(),k=a("ul"),Sn=a("li"),_ae=a("strong"),roo=o("albert"),too=o(" \u2014 "),CR=a("a"),aoo=o("AlbertTokenizer"),noo=o(" or "),wR=a("a"),soo=o("AlbertTokenizerFast"),loo=o(" (ALBERT model)"),ioo=l(),Rn=a("li"),uae=a("strong"),doo=o("bart"),coo=o(" \u2014 "),AR=a("a"),foo=o("BartTokenizer"),moo=o(" or "),LR=a("a"),goo=o("BartTokenizerFast"),hoo=o(" (BART model)"),poo=l(),Pn=a("li"),bae=a("strong"),_oo=o("barthez"),uoo=o(" \u2014 "),yR=a("a"),boo=o("BarthezTokenizer"),voo=o(" or "),xR=a("a"),Foo=o("BarthezTokenizerFast"),Too=o(" (BARThez model)"),Moo=l(),kg=a("li"),vae=a("strong"),Eoo=o("bartpho"),Coo=o(" \u2014 "),$R=a("a"),woo=o("BartphoTokenizer"),Aoo=o(" (BARTpho model)"),Loo=l(),Bn=a("li"),Fae=a("strong"),yoo=o("bert"),xoo=o(" \u2014 "),kR=a("a"),$oo=o("BertTokenizer"),koo=o(" or "),SR=a("a"),Soo=o("BertTokenizerFast"),Roo=o(" (BERT model)"),Poo=l(),Sg=a("li"),Tae=a("strong"),Boo=o("bert-generation"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("BertGenerationTokenizer"),qoo=o(" (Bert Generation model)"),joo=l(),Rg=a("li"),Mae=a("strong"),Doo=o("bert-japanese"),Goo=o(" \u2014 "),PR=a("a"),Ooo=o("BertJapaneseTokenizer"),Voo=o(" (BertJapanese model)"),Xoo=l(),Pg=a("li"),Eae=a("strong"),zoo=o("bertweet"),Woo=o(" \u2014 "),BR=a("a"),Qoo=o("BertweetTokenizer"),Hoo=o(" (BERTweet model)"),Uoo=l(),In=a("li"),Cae=a("strong"),Joo=o("big_bird"),Yoo=o(" \u2014 "),IR=a("a"),Koo=o("BigBirdTokenizer"),Zoo=o(" or "),NR=a("a"),ero=o("BigBirdTokenizerFast"),oro=o(" (BigBird model)"),rro=l(),Nn=a("li"),wae=a("strong"),tro=o("bigbird_pegasus"),aro=o(" \u2014 "),qR=a("a"),nro=o("PegasusTokenizer"),sro=o(" or "),jR=a("a"),lro=o("PegasusTokenizerFast"),iro=o(" (BigBird-Pegasus model)"),dro=l(),qn=a("li"),Aae=a("strong"),cro=o("blenderbot"),fro=o(" \u2014 "),DR=a("a"),mro=o("BlenderbotTokenizer"),gro=o(" or "),GR=a("a"),hro=o("BlenderbotTokenizerFast"),pro=o(" (Blenderbot model)"),_ro=l(),Bg=a("li"),Lae=a("strong"),uro=o("blenderbot-small"),bro=o(" \u2014 "),OR=a("a"),vro=o("BlenderbotSmallTokenizer"),Fro=o(" (BlenderbotSmall model)"),Tro=l(),Ig=a("li"),yae=a("strong"),Mro=o("bloom"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("BloomTokenizerFast"),wro=o(" (BLOOM model)"),Aro=l(),Ng=a("li"),xae=a("strong"),Lro=o("byt5"),yro=o(" \u2014 "),XR=a("a"),xro=o("ByT5Tokenizer"),$ro=o(" (ByT5 model)"),kro=l(),jn=a("li"),$ae=a("strong"),Sro=o("camembert"),Rro=o(" \u2014 "),zR=a("a"),Pro=o("CamembertTokenizer"),Bro=o(" or "),WR=a("a"),Iro=o("CamembertTokenizerFast"),Nro=o(" (CamemBERT model)"),qro=l(),qg=a("li"),kae=a("strong"),jro=o("canine"),Dro=o(" \u2014 "),QR=a("a"),Gro=o("CanineTokenizer"),Oro=o(" (CANINE model)"),Vro=l(),Dn=a("li"),Sae=a("strong"),Xro=o("clip"),zro=o(" \u2014 "),HR=a("a"),Wro=o("CLIPTokenizer"),Qro=o(" or "),UR=a("a"),Hro=o("CLIPTokenizerFast"),Uro=o(" (CLIP model)"),Jro=l(),Gn=a("li"),Rae=a("strong"),Yro=o("convbert"),Kro=o(" \u2014 "),JR=a("a"),Zro=o("ConvBertTokenizer"),eto=o(" or "),YR=a("a"),oto=o("ConvBertTokenizerFast"),rto=o(" (ConvBERT model)"),tto=l(),On=a("li"),Pae=a("strong"),ato=o("cpm"),nto=o(" \u2014 "),KR=a("a"),sto=o("CpmTokenizer"),lto=o(" or "),ZR=a("a"),ito=o("CpmTokenizerFast"),dto=o(" (CPM model)"),cto=l(),jg=a("li"),Bae=a("strong"),fto=o("ctrl"),mto=o(" \u2014 "),eP=a("a"),gto=o("CTRLTokenizer"),hto=o(" (CTRL model)"),pto=l(),Vn=a("li"),Iae=a("strong"),_to=o("data2vec-text"),uto=o(" \u2014 "),oP=a("a"),bto=o("RobertaTokenizer"),vto=o(" or "),rP=a("a"),Fto=o("RobertaTokenizerFast"),Tto=o(" (Data2VecText model)"),Mto=l(),Xn=a("li"),Nae=a("strong"),Eto=o("deberta"),Cto=o(" \u2014 "),tP=a("a"),wto=o("DebertaTokenizer"),Ato=o(" or "),aP=a("a"),Lto=o("DebertaTokenizerFast"),yto=o(" (DeBERTa model)"),xto=l(),zn=a("li"),qae=a("strong"),$to=o("deberta-v2"),kto=o(" \u2014 "),nP=a("a"),Sto=o("DebertaV2Tokenizer"),Rto=o(" or "),sP=a("a"),Pto=o("DebertaV2TokenizerFast"),Bto=o(" (DeBERTa-v2 model)"),Ito=l(),Wn=a("li"),jae=a("strong"),Nto=o("distilbert"),qto=o(" \u2014 "),lP=a("a"),jto=o("DistilBertTokenizer"),Dto=o(" or "),iP=a("a"),Gto=o("DistilBertTokenizerFast"),Oto=o(" (DistilBERT model)"),Vto=l(),Qn=a("li"),Dae=a("strong"),Xto=o("dpr"),zto=o(" \u2014 "),dP=a("a"),Wto=o("DPRQuestionEncoderTokenizer"),Qto=o(" or "),cP=a("a"),Hto=o("DPRQuestionEncoderTokenizerFast"),Uto=o(" (DPR model)"),Jto=l(),Hn=a("li"),Gae=a("strong"),Yto=o("electra"),Kto=o(" \u2014 "),fP=a("a"),Zto=o("ElectraTokenizer"),eao=o(" or "),mP=a("a"),oao=o("ElectraTokenizerFast"),rao=o(" (ELECTRA model)"),tao=l(),Dg=a("li"),Oae=a("strong"),aao=o("flaubert"),nao=o(" \u2014 "),gP=a("a"),sao=o("FlaubertTokenizer"),lao=o(" (FlauBERT model)"),iao=l(),Un=a("li"),Vae=a("strong"),dao=o("fnet"),cao=o(" \u2014 "),hP=a("a"),fao=o("FNetTokenizer"),mao=o(" or "),pP=a("a"),gao=o("FNetTokenizerFast"),hao=o(" (FNet model)"),pao=l(),Gg=a("li"),Xae=a("strong"),_ao=o("fsmt"),uao=o(" \u2014 "),_P=a("a"),bao=o("FSMTTokenizer"),vao=o(" (FairSeq Machine-Translation model)"),Fao=l(),Jn=a("li"),zae=a("strong"),Tao=o("funnel"),Mao=o(" \u2014 "),uP=a("a"),Eao=o("FunnelTokenizer"),Cao=o(" or "),bP=a("a"),wao=o("FunnelTokenizerFast"),Aao=o(" (Funnel Transformer model)"),Lao=l(),Yn=a("li"),Wae=a("strong"),yao=o("gpt2"),xao=o(" \u2014 "),vP=a("a"),$ao=o("GPT2Tokenizer"),kao=o(" or "),FP=a("a"),Sao=o("GPT2TokenizerFast"),Rao=o(" (OpenAI GPT-2 model)"),Pao=l(),Kn=a("li"),Qae=a("strong"),Bao=o("gpt_neo"),Iao=o(" \u2014 "),TP=a("a"),Nao=o("GPT2Tokenizer"),qao=o(" or "),MP=a("a"),jao=o("GPT2TokenizerFast"),Dao=o(" (GPT Neo model)"),Gao=l(),Og=a("li"),Hae=a("strong"),Oao=o("gpt_neox"),Vao=o(" \u2014 "),EP=a("a"),Xao=o("GPTNeoXTokenizerFast"),zao=o(" (GPT NeoX model)"),Wao=l(),Zn=a("li"),Uae=a("strong"),Qao=o("gptj"),Hao=o(" \u2014 "),CP=a("a"),Uao=o("GPT2Tokenizer"),Jao=o(" or "),wP=a("a"),Yao=o("GPT2TokenizerFast"),Kao=o(" (GPT-J model)"),Zao=l(),es=a("li"),Jae=a("strong"),eno=o("herbert"),ono=o(" \u2014 "),AP=a("a"),rno=o("HerbertTokenizer"),tno=o(" or "),LP=a("a"),ano=o("HerbertTokenizerFast"),nno=o(" (HerBERT model)"),sno=l(),Vg=a("li"),Yae=a("strong"),lno=o("hubert"),ino=o(" \u2014 "),yP=a("a"),dno=o("Wav2Vec2CTCTokenizer"),cno=o(" (Hubert model)"),fno=l(),os=a("li"),Kae=a("strong"),mno=o("ibert"),gno=o(" \u2014 "),xP=a("a"),hno=o("RobertaTokenizer"),pno=o(" or "),$P=a("a"),_no=o("RobertaTokenizerFast"),uno=o(" (I-BERT model)"),bno=l(),rs=a("li"),Zae=a("strong"),vno=o("layoutlm"),Fno=o(" \u2014 "),kP=a("a"),Tno=o("LayoutLMTokenizer"),Mno=o(" or "),SP=a("a"),Eno=o("LayoutLMTokenizerFast"),Cno=o(" (LayoutLM model)"),wno=l(),ts=a("li"),ene=a("strong"),Ano=o("layoutlmv2"),Lno=o(" \u2014 "),RP=a("a"),yno=o("LayoutLMv2Tokenizer"),xno=o(" or "),PP=a("a"),$no=o("LayoutLMv2TokenizerFast"),kno=o(" (LayoutLMv2 model)"),Sno=l(),as=a("li"),one=a("strong"),Rno=o("layoutlmv3"),Pno=o(" \u2014 "),BP=a("a"),Bno=o("LayoutLMv3Tokenizer"),Ino=o(" or "),IP=a("a"),Nno=o("LayoutLMv3TokenizerFast"),qno=o(" (LayoutLMv3 model)"),jno=l(),ns=a("li"),rne=a("strong"),Dno=o("layoutxlm"),Gno=o(" \u2014 "),NP=a("a"),Ono=o("LayoutXLMTokenizer"),Vno=o(" or "),qP=a("a"),Xno=o("LayoutXLMTokenizerFast"),zno=o(" (LayoutXLM model)"),Wno=l(),ss=a("li"),tne=a("strong"),Qno=o("led"),Hno=o(" \u2014 "),jP=a("a"),Uno=o("LEDTokenizer"),Jno=o(" or "),DP=a("a"),Yno=o("LEDTokenizerFast"),Kno=o(" (LED model)"),Zno=l(),ls=a("li"),ane=a("strong"),eso=o("longformer"),oso=o(" \u2014 "),GP=a("a"),rso=o("LongformerTokenizer"),tso=o(" or "),OP=a("a"),aso=o("LongformerTokenizerFast"),nso=o(" (Longformer model)"),sso=l(),Xg=a("li"),nne=a("strong"),lso=o("luke"),iso=o(" \u2014 "),VP=a("a"),dso=o("LukeTokenizer"),cso=o(" (LUKE model)"),fso=l(),is=a("li"),sne=a("strong"),mso=o("lxmert"),gso=o(" \u2014 "),XP=a("a"),hso=o("LxmertTokenizer"),pso=o(" or "),zP=a("a"),_so=o("LxmertTokenizerFast"),uso=o(" (LXMERT model)"),bso=l(),zg=a("li"),lne=a("strong"),vso=o("m2m_100"),Fso=o(" \u2014 "),WP=a("a"),Tso=o("M2M100Tokenizer"),Mso=o(" (M2M100 model)"),Eso=l(),Wg=a("li"),ine=a("strong"),Cso=o("marian"),wso=o(" \u2014 "),QP=a("a"),Aso=o("MarianTokenizer"),Lso=o(" (Marian model)"),yso=l(),ds=a("li"),dne=a("strong"),xso=o("mbart"),$so=o(" \u2014 "),HP=a("a"),kso=o("MBartTokenizer"),Sso=o(" or "),UP=a("a"),Rso=o("MBartTokenizerFast"),Pso=o(" (mBART model)"),Bso=l(),cs=a("li"),cne=a("strong"),Iso=o("mbart50"),Nso=o(" \u2014 "),JP=a("a"),qso=o("MBart50Tokenizer"),jso=o(" or "),YP=a("a"),Dso=o("MBart50TokenizerFast"),Gso=o(" (mBART-50 model)"),Oso=l(),fs=a("li"),fne=a("strong"),Vso=o("megatron-bert"),Xso=o(" \u2014 "),KP=a("a"),zso=o("BertTokenizer"),Wso=o(" or "),ZP=a("a"),Qso=o("BertTokenizerFast"),Hso=o(" (Megatron-BERT model)"),Uso=l(),Qg=a("li"),mne=a("strong"),Jso=o("mluke"),Yso=o(" \u2014 "),eB=a("a"),Kso=o("MLukeTokenizer"),Zso=o(" (mLUKE model)"),elo=l(),ms=a("li"),gne=a("strong"),olo=o("mobilebert"),rlo=o(" \u2014 "),oB=a("a"),tlo=o("MobileBertTokenizer"),alo=o(" or "),rB=a("a"),nlo=o("MobileBertTokenizerFast"),slo=o(" (MobileBERT model)"),llo=l(),gs=a("li"),hne=a("strong"),ilo=o("mpnet"),dlo=o(" \u2014 "),tB=a("a"),clo=o("MPNetTokenizer"),flo=o(" or "),aB=a("a"),mlo=o("MPNetTokenizerFast"),glo=o(" (MPNet model)"),hlo=l(),hs=a("li"),pne=a("strong"),plo=o("mt5"),_lo=o(" \u2014 "),nB=a("a"),ulo=o("MT5Tokenizer"),blo=o(" or "),sB=a("a"),vlo=o("MT5TokenizerFast"),Flo=o(" (MT5 model)"),Tlo=l(),ps=a("li"),_ne=a("strong"),Mlo=o("nystromformer"),Elo=o(" \u2014 "),lB=a("a"),Clo=o("AlbertTokenizer"),wlo=o(" or "),iB=a("a"),Alo=o("AlbertTokenizerFast"),Llo=o(" (Nystr\xF6mformer model)"),ylo=l(),_s=a("li"),une=a("strong"),xlo=o("openai-gpt"),$lo=o(" \u2014 "),dB=a("a"),klo=o("OpenAIGPTTokenizer"),Slo=o(" or "),cB=a("a"),Rlo=o("OpenAIGPTTokenizerFast"),Plo=o(" (OpenAI GPT model)"),Blo=l(),Hg=a("li"),bne=a("strong"),Ilo=o("opt"),Nlo=o(" \u2014 "),fB=a("a"),qlo=o("GPT2Tokenizer"),jlo=o(" (OPT model)"),Dlo=l(),us=a("li"),vne=a("strong"),Glo=o("pegasus"),Olo=o(" \u2014 "),mB=a("a"),Vlo=o("PegasusTokenizer"),Xlo=o(" or "),gB=a("a"),zlo=o("PegasusTokenizerFast"),Wlo=o(" (Pegasus model)"),Qlo=l(),Ug=a("li"),Fne=a("strong"),Hlo=o("perceiver"),Ulo=o(" \u2014 "),hB=a("a"),Jlo=o("PerceiverTokenizer"),Ylo=o(" (Perceiver model)"),Klo=l(),Jg=a("li"),Tne=a("strong"),Zlo=o("phobert"),eio=o(" \u2014 "),pB=a("a"),oio=o("PhobertTokenizer"),rio=o(" (PhoBERT model)"),tio=l(),Yg=a("li"),Mne=a("strong"),aio=o("plbart"),nio=o(" \u2014 "),_B=a("a"),sio=o("PLBartTokenizer"),lio=o(" (PLBart model)"),iio=l(),Kg=a("li"),Ene=a("strong"),dio=o("prophetnet"),cio=o(" \u2014 "),uB=a("a"),fio=o("ProphetNetTokenizer"),mio=o(" (ProphetNet model)"),gio=l(),bs=a("li"),Cne=a("strong"),hio=o("qdqbert"),pio=o(" \u2014 "),bB=a("a"),_io=o("BertTokenizer"),uio=o(" or "),vB=a("a"),bio=o("BertTokenizerFast"),vio=o(" (QDQBert model)"),Fio=l(),Zg=a("li"),wne=a("strong"),Tio=o("rag"),Mio=o(" \u2014 "),FB=a("a"),Eio=o("RagTokenizer"),Cio=o(" (RAG model)"),wio=l(),vs=a("li"),Ane=a("strong"),Aio=o("realm"),Lio=o(" \u2014 "),TB=a("a"),yio=o("RealmTokenizer"),xio=o(" or "),MB=a("a"),$io=o("RealmTokenizerFast"),kio=o(" (REALM model)"),Sio=l(),Fs=a("li"),Lne=a("strong"),Rio=o("reformer"),Pio=o(" \u2014 "),EB=a("a"),Bio=o("ReformerTokenizer"),Iio=o(" or "),CB=a("a"),Nio=o("ReformerTokenizerFast"),qio=o(" (Reformer model)"),jio=l(),Ts=a("li"),yne=a("strong"),Dio=o("rembert"),Gio=o(" \u2014 "),wB=a("a"),Oio=o("RemBertTokenizer"),Vio=o(" or "),AB=a("a"),Xio=o("RemBertTokenizerFast"),zio=o(" (RemBERT model)"),Wio=l(),Ms=a("li"),xne=a("strong"),Qio=o("retribert"),Hio=o(" \u2014 "),LB=a("a"),Uio=o("RetriBertTokenizer"),Jio=o(" or "),yB=a("a"),Yio=o("RetriBertTokenizerFast"),Kio=o(" (RetriBERT model)"),Zio=l(),Es=a("li"),$ne=a("strong"),edo=o("roberta"),odo=o(" \u2014 "),xB=a("a"),rdo=o("RobertaTokenizer"),tdo=o(" or "),$B=a("a"),ado=o("RobertaTokenizerFast"),ndo=o(" (RoBERTa model)"),sdo=l(),Cs=a("li"),kne=a("strong"),ldo=o("roformer"),ido=o(" \u2014 "),kB=a("a"),ddo=o("RoFormerTokenizer"),cdo=o(" or "),SB=a("a"),fdo=o("RoFormerTokenizerFast"),mdo=o(" (RoFormer model)"),gdo=l(),eh=a("li"),Sne=a("strong"),hdo=o("speech_to_text"),pdo=o(" \u2014 "),RB=a("a"),_do=o("Speech2TextTokenizer"),udo=o(" (Speech2Text model)"),bdo=l(),oh=a("li"),Rne=a("strong"),vdo=o("speech_to_text_2"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("Speech2Text2Tokenizer"),Mdo=o(" (Speech2Text2 model)"),Edo=l(),ws=a("li"),Pne=a("strong"),Cdo=o("splinter"),wdo=o(" \u2014 "),BB=a("a"),Ado=o("SplinterTokenizer"),Ldo=o(" or "),IB=a("a"),ydo=o("SplinterTokenizerFast"),xdo=o(" (Splinter model)"),$do=l(),As=a("li"),Bne=a("strong"),kdo=o("squeezebert"),Sdo=o(" \u2014 "),NB=a("a"),Rdo=o("SqueezeBertTokenizer"),Pdo=o(" or "),qB=a("a"),Bdo=o("SqueezeBertTokenizerFast"),Ido=o(" (SqueezeBERT model)"),Ndo=l(),Ls=a("li"),Ine=a("strong"),qdo=o("t5"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("T5Tokenizer"),Gdo=o(" or "),DB=a("a"),Odo=o("T5TokenizerFast"),Vdo=o(" (T5 model)"),Xdo=l(),rh=a("li"),Nne=a("strong"),zdo=o("tapas"),Wdo=o(" \u2014 "),GB=a("a"),Qdo=o("TapasTokenizer"),Hdo=o(" (TAPAS model)"),Udo=l(),th=a("li"),qne=a("strong"),Jdo=o("tapex"),Ydo=o(" \u2014 "),OB=a("a"),Kdo=o("TapexTokenizer"),Zdo=o(" (TAPEX model)"),eco=l(),ah=a("li"),jne=a("strong"),oco=o("transfo-xl"),rco=o(" \u2014 "),VB=a("a"),tco=o("TransfoXLTokenizer"),aco=o(" (Transformer-XL model)"),nco=l(),ys=a("li"),Dne=a("strong"),sco=o("visual_bert"),lco=o(" \u2014 "),XB=a("a"),ico=o("BertTokenizer"),dco=o(" or "),zB=a("a"),cco=o("BertTokenizerFast"),fco=o(" (VisualBERT model)"),mco=l(),nh=a("li"),Gne=a("strong"),gco=o("wav2vec2"),hco=o(" \u2014 "),WB=a("a"),pco=o("Wav2Vec2CTCTokenizer"),_co=o(" (Wav2Vec2 model)"),uco=l(),sh=a("li"),One=a("strong"),bco=o("wav2vec2-conformer"),vco=o(" \u2014 "),QB=a("a"),Fco=o("Wav2Vec2CTCTokenizer"),Tco=o(" (Wav2Vec2-Conformer model)"),Mco=l(),lh=a("li"),Vne=a("strong"),Eco=o("wav2vec2_phoneme"),Cco=o(" \u2014 "),HB=a("a"),wco=o("Wav2Vec2PhonemeCTCTokenizer"),Aco=o(" (Wav2Vec2Phoneme model)"),Lco=l(),xs=a("li"),Xne=a("strong"),yco=o("xglm"),xco=o(" \u2014 "),UB=a("a"),$co=o("XGLMTokenizer"),kco=o(" or "),JB=a("a"),Sco=o("XGLMTokenizerFast"),Rco=o(" (XGLM model)"),Pco=l(),ih=a("li"),zne=a("strong"),Bco=o("xlm"),Ico=o(" \u2014 "),YB=a("a"),Nco=o("XLMTokenizer"),qco=o(" (XLM model)"),jco=l(),dh=a("li"),Wne=a("strong"),Dco=o("xlm-prophetnet"),Gco=o(" \u2014 "),KB=a("a"),Oco=o("XLMProphetNetTokenizer"),Vco=o(" (XLM-ProphetNet model)"),Xco=l(),$s=a("li"),Qne=a("strong"),zco=o("xlm-roberta"),Wco=o(" \u2014 "),ZB=a("a"),Qco=o("XLMRobertaTokenizer"),Hco=o(" or "),eI=a("a"),Uco=o("XLMRobertaTokenizerFast"),Jco=o(" (XLM-RoBERTa model)"),Yco=l(),ks=a("li"),Hne=a("strong"),Kco=o("xlm-roberta-xl"),Zco=o(" \u2014 "),oI=a("a"),efo=o("RobertaTokenizer"),ofo=o(" or "),rI=a("a"),rfo=o("RobertaTokenizerFast"),tfo=o(" (XLM-RoBERTa-XL model)"),afo=l(),Ss=a("li"),Une=a("strong"),nfo=o("xlnet"),sfo=o(" \u2014 "),tI=a("a"),lfo=o("XLNetTokenizer"),ifo=o(" or "),aI=a("a"),dfo=o("XLNetTokenizerFast"),cfo=o(" (XLNet model)"),ffo=l(),Rs=a("li"),Jne=a("strong"),mfo=o("yoso"),gfo=o(" \u2014 "),nI=a("a"),hfo=o("AlbertTokenizer"),pfo=o(" or "),sI=a("a"),_fo=o("AlbertTokenizerFast"),ufo=o(" (YOSO model)"),bfo=l(),F(ch.$$.fragment),vfo=l(),fh=a("div"),F(sL.$$.fragment),Ffo=l(),Yne=a("p"),Tfo=o("Register a new tokenizer in this mapping."),Pje=l(),Ci=a("h2"),mh=a("a"),Kne=a("span"),F(lL.$$.fragment),Mfo=l(),Zne=a("span"),Efo=o("AutoFeatureExtractor"),Bje=l(),Ao=a("div"),F(iL.$$.fragment),Cfo=l(),dL=a("p"),wfo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lI=a("a"),Afo=o("AutoFeatureExtractor.from_pretrained()"),Lfo=o(" class method."),yfo=l(),cL=a("p"),xfo=o("This class cannot be instantiated directly using "),ese=a("code"),$fo=o("__init__()"),kfo=o(" (throws an error)."),Sfo=l(),He=a("div"),F(fL.$$.fragment),Rfo=l(),ose=a("p"),Pfo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Bfo=l(),ya=a("p"),Ifo=o("The feature extractor class to instantiate is selected based on the "),rse=a("code"),Nfo=o("model_type"),qfo=o(` property of the config object
(either passed as an argument or loaded from `),tse=a("code"),jfo=o("pretrained_model_name_or_path"),Dfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ase=a("code"),Gfo=o("pretrained_model_name_or_path"),Ofo=o(":"),Vfo=l(),Y=a("ul"),gh=a("li"),nse=a("strong"),Xfo=o("beit"),zfo=o(" \u2014 "),iI=a("a"),Wfo=o("BeitFeatureExtractor"),Qfo=o(" (BEiT model)"),Hfo=l(),hh=a("li"),sse=a("strong"),Ufo=o("clip"),Jfo=o(" \u2014 "),dI=a("a"),Yfo=o("CLIPFeatureExtractor"),Kfo=o(" (CLIP model)"),Zfo=l(),ph=a("li"),lse=a("strong"),emo=o("convnext"),omo=o(" \u2014 "),cI=a("a"),rmo=o("ConvNextFeatureExtractor"),tmo=o(" (ConvNeXT model)"),amo=l(),_h=a("li"),ise=a("strong"),nmo=o("cvt"),smo=o(" \u2014 "),fI=a("a"),lmo=o("ConvNextFeatureExtractor"),imo=o(" (CvT model)"),dmo=l(),uh=a("li"),dse=a("strong"),cmo=o("data2vec-audio"),fmo=o(" \u2014 "),mI=a("a"),mmo=o("Wav2Vec2FeatureExtractor"),gmo=o(" (Data2VecAudio model)"),hmo=l(),bh=a("li"),cse=a("strong"),pmo=o("data2vec-vision"),_mo=o(" \u2014 "),gI=a("a"),umo=o("BeitFeatureExtractor"),bmo=o(" (Data2VecVision model)"),vmo=l(),vh=a("li"),fse=a("strong"),Fmo=o("deit"),Tmo=o(" \u2014 "),hI=a("a"),Mmo=o("DeiTFeatureExtractor"),Emo=o(" (DeiT model)"),Cmo=l(),Fh=a("li"),mse=a("strong"),wmo=o("detr"),Amo=o(" \u2014 "),pI=a("a"),Lmo=o("DetrFeatureExtractor"),ymo=o(" (DETR model)"),xmo=l(),Th=a("li"),gse=a("strong"),$mo=o("dpt"),kmo=o(" \u2014 "),_I=a("a"),Smo=o("DPTFeatureExtractor"),Rmo=o(" (DPT model)"),Pmo=l(),Mh=a("li"),hse=a("strong"),Bmo=o("flava"),Imo=o(" \u2014 "),uI=a("a"),Nmo=o("FlavaFeatureExtractor"),qmo=o(" (FLAVA model)"),jmo=l(),Eh=a("li"),pse=a("strong"),Dmo=o("glpn"),Gmo=o(" \u2014 "),bI=a("a"),Omo=o("GLPNFeatureExtractor"),Vmo=o(" (GLPN model)"),Xmo=l(),Ch=a("li"),_se=a("strong"),zmo=o("hubert"),Wmo=o(" \u2014 "),vI=a("a"),Qmo=o("Wav2Vec2FeatureExtractor"),Hmo=o(" (Hubert model)"),Umo=l(),wh=a("li"),use=a("strong"),Jmo=o("imagegpt"),Ymo=o(" \u2014 "),FI=a("a"),Kmo=o("ImageGPTFeatureExtractor"),Zmo=o(" (ImageGPT model)"),ego=l(),Ah=a("li"),bse=a("strong"),ogo=o("layoutlmv2"),rgo=o(" \u2014 "),TI=a("a"),tgo=o("LayoutLMv2FeatureExtractor"),ago=o(" (LayoutLMv2 model)"),ngo=l(),Lh=a("li"),vse=a("strong"),sgo=o("layoutlmv3"),lgo=o(" \u2014 "),MI=a("a"),igo=o("LayoutLMv3FeatureExtractor"),dgo=o(" (LayoutLMv3 model)"),cgo=l(),yh=a("li"),Fse=a("strong"),fgo=o("levit"),mgo=o(" \u2014 "),EI=a("a"),ggo=o("LevitFeatureExtractor"),hgo=o(" (LeViT model)"),pgo=l(),xh=a("li"),Tse=a("strong"),_go=o("maskformer"),ugo=o(" \u2014 "),CI=a("a"),bgo=o("MaskFormerFeatureExtractor"),vgo=o(" (MaskFormer model)"),Fgo=l(),$h=a("li"),Mse=a("strong"),Tgo=o("mctct"),Mgo=o(" \u2014 "),wI=a("a"),Ego=o("MCTCTFeatureExtractor"),Cgo=o(" (M-CTC-T model)"),wgo=l(),kh=a("li"),Ese=a("strong"),Ago=o("perceiver"),Lgo=o(" \u2014 "),AI=a("a"),ygo=o("PerceiverFeatureExtractor"),xgo=o(" (Perceiver model)"),$go=l(),Sh=a("li"),Cse=a("strong"),kgo=o("poolformer"),Sgo=o(" \u2014 "),LI=a("a"),Rgo=o("PoolFormerFeatureExtractor"),Pgo=o(" (PoolFormer model)"),Bgo=l(),Rh=a("li"),wse=a("strong"),Igo=o("regnet"),Ngo=o(" \u2014 "),yI=a("a"),qgo=o("ConvNextFeatureExtractor"),jgo=o(" (RegNet model)"),Dgo=l(),Ph=a("li"),Ase=a("strong"),Ggo=o("resnet"),Ogo=o(" \u2014 "),xI=a("a"),Vgo=o("ConvNextFeatureExtractor"),Xgo=o(" (ResNet model)"),zgo=l(),Bh=a("li"),Lse=a("strong"),Wgo=o("segformer"),Qgo=o(" \u2014 "),$I=a("a"),Hgo=o("SegformerFeatureExtractor"),Ugo=o(" (SegFormer model)"),Jgo=l(),Ih=a("li"),yse=a("strong"),Ygo=o("speech_to_text"),Kgo=o(" \u2014 "),kI=a("a"),Zgo=o("Speech2TextFeatureExtractor"),eho=o(" (Speech2Text model)"),oho=l(),Nh=a("li"),xse=a("strong"),rho=o("swin"),tho=o(" \u2014 "),SI=a("a"),aho=o("ViTFeatureExtractor"),nho=o(" (Swin Transformer model)"),sho=l(),qh=a("li"),$se=a("strong"),lho=o("van"),iho=o(" \u2014 "),RI=a("a"),dho=o("ConvNextFeatureExtractor"),cho=o(" (VAN model)"),fho=l(),jh=a("li"),kse=a("strong"),mho=o("vit"),gho=o(" \u2014 "),PI=a("a"),hho=o("ViTFeatureExtractor"),pho=o(" (ViT model)"),_ho=l(),Dh=a("li"),Sse=a("strong"),uho=o("vit_mae"),bho=o(" \u2014 "),BI=a("a"),vho=o("ViTFeatureExtractor"),Fho=o(" (ViTMAE model)"),Tho=l(),Gh=a("li"),Rse=a("strong"),Mho=o("wav2vec2"),Eho=o(" \u2014 "),II=a("a"),Cho=o("Wav2Vec2FeatureExtractor"),who=o(" (Wav2Vec2 model)"),Aho=l(),Oh=a("li"),Pse=a("strong"),Lho=o("wav2vec2-conformer"),yho=o(" \u2014 "),NI=a("a"),xho=o("Wav2Vec2FeatureExtractor"),$ho=o(" (Wav2Vec2-Conformer model)"),kho=l(),Vh=a("li"),Bse=a("strong"),Sho=o("yolos"),Rho=o(" \u2014 "),qI=a("a"),Pho=o("YolosFeatureExtractor"),Bho=o(" (YOLOS model)"),Iho=l(),F(Xh.$$.fragment),Nho=l(),F(zh.$$.fragment),qho=l(),Wh=a("div"),F(mL.$$.fragment),jho=l(),Ise=a("p"),Dho=o("Register a new feature extractor for this class."),Ije=l(),wi=a("h2"),Qh=a("a"),Nse=a("span"),F(gL.$$.fragment),Gho=l(),qse=a("span"),Oho=o("AutoProcessor"),Nje=l(),Lo=a("div"),F(hL.$$.fragment),Vho=l(),pL=a("p"),Xho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jI=a("a"),zho=o("AutoProcessor.from_pretrained()"),Who=o(" class method."),Qho=l(),_L=a("p"),Hho=o("This class cannot be instantiated directly using "),jse=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),Ue=a("div"),F(uL.$$.fragment),Kho=l(),Dse=a("p"),Zho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),epo=l(),Ai=a("p"),opo=o("The processor class to instantiate is selected based on the "),Gse=a("code"),rpo=o("model_type"),tpo=o(` property of the config object (either
passed as an argument or loaded from `),Ose=a("code"),apo=o("pretrained_model_name_or_path"),npo=o(" if possible):"),spo=l(),he=a("ul"),Hh=a("li"),Vse=a("strong"),lpo=o("clip"),ipo=o(" \u2014 "),DI=a("a"),dpo=o("CLIPProcessor"),cpo=o(" (CLIP model)"),fpo=l(),Uh=a("li"),Xse=a("strong"),mpo=o("flava"),gpo=o(" \u2014 "),zse=a("code"),hpo=o("FLAVAProcessor"),ppo=o(" (FLAVA model)"),_po=l(),Jh=a("li"),Wse=a("strong"),upo=o("layoutlmv2"),bpo=o(" \u2014 "),GI=a("a"),vpo=o("LayoutLMv2Processor"),Fpo=o(" (LayoutLMv2 model)"),Tpo=l(),Yh=a("li"),Qse=a("strong"),Mpo=o("layoutlmv3"),Epo=o(" \u2014 "),OI=a("a"),Cpo=o("LayoutLMv3Processor"),wpo=o(" (LayoutLMv3 model)"),Apo=l(),Kh=a("li"),Hse=a("strong"),Lpo=o("layoutxlm"),ypo=o(" \u2014 "),VI=a("a"),xpo=o("LayoutXLMProcessor"),$po=o(" (LayoutXLM model)"),kpo=l(),Zh=a("li"),Use=a("strong"),Spo=o("sew"),Rpo=o(" \u2014 "),XI=a("a"),Ppo=o("Wav2Vec2Processor"),Bpo=o(" (SEW model)"),Ipo=l(),ep=a("li"),Jse=a("strong"),Npo=o("sew-d"),qpo=o(" \u2014 "),zI=a("a"),jpo=o("Wav2Vec2Processor"),Dpo=o(" (SEW-D model)"),Gpo=l(),op=a("li"),Yse=a("strong"),Opo=o("speech_to_text"),Vpo=o(" \u2014 "),WI=a("a"),Xpo=o("Speech2TextProcessor"),zpo=o(" (Speech2Text model)"),Wpo=l(),rp=a("li"),Kse=a("strong"),Qpo=o("speech_to_text_2"),Hpo=o(" \u2014 "),QI=a("a"),Upo=o("Speech2Text2Processor"),Jpo=o(" (Speech2Text2 model)"),Ypo=l(),tp=a("li"),Zse=a("strong"),Kpo=o("trocr"),Zpo=o(" \u2014 "),HI=a("a"),e_o=o("TrOCRProcessor"),o_o=o(" (TrOCR model)"),r_o=l(),ap=a("li"),ele=a("strong"),t_o=o("unispeech"),a_o=o(" \u2014 "),UI=a("a"),n_o=o("Wav2Vec2Processor"),s_o=o(" (UniSpeech model)"),l_o=l(),np=a("li"),ole=a("strong"),i_o=o("unispeech-sat"),d_o=o(" \u2014 "),JI=a("a"),c_o=o("Wav2Vec2Processor"),f_o=o(" (UniSpeechSat model)"),m_o=l(),sp=a("li"),rle=a("strong"),g_o=o("vilt"),h_o=o(" \u2014 "),YI=a("a"),p_o=o("ViltProcessor"),__o=o(" (ViLT model)"),u_o=l(),lp=a("li"),tle=a("strong"),b_o=o("vision-text-dual-encoder"),v_o=o(" \u2014 "),KI=a("a"),F_o=o("VisionTextDualEncoderProcessor"),T_o=o(" (VisionTextDualEncoder model)"),M_o=l(),ip=a("li"),ale=a("strong"),E_o=o("wav2vec2"),C_o=o(" \u2014 "),ZI=a("a"),w_o=o("Wav2Vec2Processor"),A_o=o(" (Wav2Vec2 model)"),L_o=l(),dp=a("li"),nle=a("strong"),y_o=o("wav2vec2-conformer"),x_o=o(" \u2014 "),eN=a("a"),$_o=o("Wav2Vec2Processor"),k_o=o(" (Wav2Vec2-Conformer model)"),S_o=l(),cp=a("li"),sle=a("strong"),R_o=o("wavlm"),P_o=o(" \u2014 "),oN=a("a"),B_o=o("Wav2Vec2Processor"),I_o=o(" (WavLM model)"),N_o=l(),F(fp.$$.fragment),q_o=l(),F(mp.$$.fragment),j_o=l(),gp=a("div"),F(bL.$$.fragment),D_o=l(),lle=a("p"),G_o=o("Register a new processor for this class."),qje=l(),Li=a("h2"),hp=a("a"),ile=a("span"),F(vL.$$.fragment),O_o=l(),dle=a("span"),V_o=o("AutoModel"),jje=l(),yo=a("div"),F(FL.$$.fragment),X_o=l(),yi=a("p"),z_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rN=a("a"),W_o=o("from_pretrained()"),Q_o=o(" class method or the "),tN=a("a"),H_o=o("from_config()"),U_o=o(` class
method.`),J_o=l(),TL=a("p"),Y_o=o("This class cannot be instantiated directly using "),cle=a("code"),K_o=o("__init__()"),Z_o=o(" (throws an error)."),euo=l(),at=a("div"),F(ML.$$.fragment),ouo=l(),fle=a("p"),ruo=o("Instantiates one of the base model classes of the library from a configuration."),tuo=l(),xi=a("p"),auo=o(`Note:
Loading a model from its configuration file does `),mle=a("strong"),nuo=o("not"),suo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aN=a("a"),luo=o("from_pretrained()"),iuo=o(" to load the model weights."),duo=l(),F(pp.$$.fragment),cuo=l(),Je=a("div"),F(EL.$$.fragment),fuo=l(),gle=a("p"),muo=o("Instantiate one of the base model classes of the library from a pretrained model."),guo=l(),xa=a("p"),huo=o("The model class to instantiate is selected based on the "),hle=a("code"),puo=o("model_type"),_uo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),uuo=o("pretrained_model_name_or_path"),buo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),vuo=o("pretrained_model_name_or_path"),Fuo=o(":"),Tuo=l(),y=a("ul"),_p=a("li"),ule=a("strong"),Muo=o("albert"),Euo=o(" \u2014 "),nN=a("a"),Cuo=o("AlbertModel"),wuo=o(" (ALBERT model)"),Auo=l(),up=a("li"),ble=a("strong"),Luo=o("bart"),yuo=o(" \u2014 "),sN=a("a"),xuo=o("BartModel"),$uo=o(" (BART model)"),kuo=l(),bp=a("li"),vle=a("strong"),Suo=o("beit"),Ruo=o(" \u2014 "),lN=a("a"),Puo=o("BeitModel"),Buo=o(" (BEiT model)"),Iuo=l(),vp=a("li"),Fle=a("strong"),Nuo=o("bert"),quo=o(" \u2014 "),iN=a("a"),juo=o("BertModel"),Duo=o(" (BERT model)"),Guo=l(),Fp=a("li"),Tle=a("strong"),Ouo=o("bert-generation"),Vuo=o(" \u2014 "),dN=a("a"),Xuo=o("BertGenerationEncoder"),zuo=o(" (Bert Generation model)"),Wuo=l(),Tp=a("li"),Mle=a("strong"),Quo=o("big_bird"),Huo=o(" \u2014 "),cN=a("a"),Uuo=o("BigBirdModel"),Juo=o(" (BigBird model)"),Yuo=l(),Mp=a("li"),Ele=a("strong"),Kuo=o("bigbird_pegasus"),Zuo=o(" \u2014 "),fN=a("a"),e5o=o("BigBirdPegasusModel"),o5o=o(" (BigBird-Pegasus model)"),r5o=l(),Ep=a("li"),Cle=a("strong"),t5o=o("blenderbot"),a5o=o(" \u2014 "),mN=a("a"),n5o=o("BlenderbotModel"),s5o=o(" (Blenderbot model)"),l5o=l(),Cp=a("li"),wle=a("strong"),i5o=o("blenderbot-small"),d5o=o(" \u2014 "),gN=a("a"),c5o=o("BlenderbotSmallModel"),f5o=o(" (BlenderbotSmall model)"),m5o=l(),wp=a("li"),Ale=a("strong"),g5o=o("bloom"),h5o=o(" \u2014 "),hN=a("a"),p5o=o("BloomModel"),_5o=o(" (BLOOM model)"),u5o=l(),Ap=a("li"),Lle=a("strong"),b5o=o("camembert"),v5o=o(" \u2014 "),pN=a("a"),F5o=o("CamembertModel"),T5o=o(" (CamemBERT model)"),M5o=l(),Lp=a("li"),yle=a("strong"),E5o=o("canine"),C5o=o(" \u2014 "),_N=a("a"),w5o=o("CanineModel"),A5o=o(" (CANINE model)"),L5o=l(),yp=a("li"),xle=a("strong"),y5o=o("clip"),x5o=o(" \u2014 "),uN=a("a"),$5o=o("CLIPModel"),k5o=o(" (CLIP model)"),S5o=l(),xp=a("li"),$le=a("strong"),R5o=o("convbert"),P5o=o(" \u2014 "),bN=a("a"),B5o=o("ConvBertModel"),I5o=o(" (ConvBERT model)"),N5o=l(),$p=a("li"),kle=a("strong"),q5o=o("convnext"),j5o=o(" \u2014 "),vN=a("a"),D5o=o("ConvNextModel"),G5o=o(" (ConvNeXT model)"),O5o=l(),kp=a("li"),Sle=a("strong"),V5o=o("ctrl"),X5o=o(" \u2014 "),FN=a("a"),z5o=o("CTRLModel"),W5o=o(" (CTRL model)"),Q5o=l(),Sp=a("li"),Rle=a("strong"),H5o=o("cvt"),U5o=o(" \u2014 "),TN=a("a"),J5o=o("CvtModel"),Y5o=o(" (CvT model)"),K5o=l(),Rp=a("li"),Ple=a("strong"),Z5o=o("data2vec-audio"),e1o=o(" \u2014 "),MN=a("a"),o1o=o("Data2VecAudioModel"),r1o=o(" (Data2VecAudio model)"),t1o=l(),Pp=a("li"),Ble=a("strong"),a1o=o("data2vec-text"),n1o=o(" \u2014 "),EN=a("a"),s1o=o("Data2VecTextModel"),l1o=o(" (Data2VecText model)"),i1o=l(),Bp=a("li"),Ile=a("strong"),d1o=o("data2vec-vision"),c1o=o(" \u2014 "),CN=a("a"),f1o=o("Data2VecVisionModel"),m1o=o(" (Data2VecVision model)"),g1o=l(),Ip=a("li"),Nle=a("strong"),h1o=o("deberta"),p1o=o(" \u2014 "),wN=a("a"),_1o=o("DebertaModel"),u1o=o(" (DeBERTa model)"),b1o=l(),Np=a("li"),qle=a("strong"),v1o=o("deberta-v2"),F1o=o(" \u2014 "),AN=a("a"),T1o=o("DebertaV2Model"),M1o=o(" (DeBERTa-v2 model)"),E1o=l(),qp=a("li"),jle=a("strong"),C1o=o("decision_transformer"),w1o=o(" \u2014 "),LN=a("a"),A1o=o("DecisionTransformerModel"),L1o=o(" (Decision Transformer model)"),y1o=l(),jp=a("li"),Dle=a("strong"),x1o=o("deit"),$1o=o(" \u2014 "),yN=a("a"),k1o=o("DeiTModel"),S1o=o(" (DeiT model)"),R1o=l(),Dp=a("li"),Gle=a("strong"),P1o=o("detr"),B1o=o(" \u2014 "),xN=a("a"),I1o=o("DetrModel"),N1o=o(" (DETR model)"),q1o=l(),Gp=a("li"),Ole=a("strong"),j1o=o("distilbert"),D1o=o(" \u2014 "),$N=a("a"),G1o=o("DistilBertModel"),O1o=o(" (DistilBERT model)"),V1o=l(),Op=a("li"),Vle=a("strong"),X1o=o("dpr"),z1o=o(" \u2014 "),kN=a("a"),W1o=o("DPRQuestionEncoder"),Q1o=o(" (DPR model)"),H1o=l(),Vp=a("li"),Xle=a("strong"),U1o=o("dpt"),J1o=o(" \u2014 "),SN=a("a"),Y1o=o("DPTModel"),K1o=o(" (DPT model)"),Z1o=l(),Xp=a("li"),zle=a("strong"),ebo=o("electra"),obo=o(" \u2014 "),RN=a("a"),rbo=o("ElectraModel"),tbo=o(" (ELECTRA model)"),abo=l(),zp=a("li"),Wle=a("strong"),nbo=o("flaubert"),sbo=o(" \u2014 "),PN=a("a"),lbo=o("FlaubertModel"),ibo=o(" (FlauBERT model)"),dbo=l(),Wp=a("li"),Qle=a("strong"),cbo=o("flava"),fbo=o(" \u2014 "),BN=a("a"),mbo=o("FlavaModel"),gbo=o(" (FLAVA model)"),hbo=l(),Qp=a("li"),Hle=a("strong"),pbo=o("fnet"),_bo=o(" \u2014 "),IN=a("a"),ubo=o("FNetModel"),bbo=o(" (FNet model)"),vbo=l(),Hp=a("li"),Ule=a("strong"),Fbo=o("fsmt"),Tbo=o(" \u2014 "),NN=a("a"),Mbo=o("FSMTModel"),Ebo=o(" (FairSeq Machine-Translation model)"),Cbo=l(),Ps=a("li"),Jle=a("strong"),wbo=o("funnel"),Abo=o(" \u2014 "),qN=a("a"),Lbo=o("FunnelModel"),ybo=o(" or "),jN=a("a"),xbo=o("FunnelBaseModel"),$bo=o(" (Funnel Transformer model)"),kbo=l(),Up=a("li"),Yle=a("strong"),Sbo=o("glpn"),Rbo=o(" \u2014 "),DN=a("a"),Pbo=o("GLPNModel"),Bbo=o(" (GLPN model)"),Ibo=l(),Jp=a("li"),Kle=a("strong"),Nbo=o("gpt2"),qbo=o(" \u2014 "),GN=a("a"),jbo=o("GPT2Model"),Dbo=o(" (OpenAI GPT-2 model)"),Gbo=l(),Yp=a("li"),Zle=a("strong"),Obo=o("gpt_neo"),Vbo=o(" \u2014 "),ON=a("a"),Xbo=o("GPTNeoModel"),zbo=o(" (GPT Neo model)"),Wbo=l(),Kp=a("li"),eie=a("strong"),Qbo=o("gpt_neox"),Hbo=o(" \u2014 "),VN=a("a"),Ubo=o("GPTNeoXModel"),Jbo=o(" (GPT NeoX model)"),Ybo=l(),Zp=a("li"),oie=a("strong"),Kbo=o("gptj"),Zbo=o(" \u2014 "),XN=a("a"),e2o=o("GPTJModel"),o2o=o(" (GPT-J model)"),r2o=l(),e_=a("li"),rie=a("strong"),t2o=o("hubert"),a2o=o(" \u2014 "),zN=a("a"),n2o=o("HubertModel"),s2o=o(" (Hubert model)"),l2o=l(),o_=a("li"),tie=a("strong"),i2o=o("ibert"),d2o=o(" \u2014 "),WN=a("a"),c2o=o("IBertModel"),f2o=o(" (I-BERT model)"),m2o=l(),r_=a("li"),aie=a("strong"),g2o=o("imagegpt"),h2o=o(" \u2014 "),QN=a("a"),p2o=o("ImageGPTModel"),_2o=o(" (ImageGPT model)"),u2o=l(),t_=a("li"),nie=a("strong"),b2o=o("layoutlm"),v2o=o(" \u2014 "),HN=a("a"),F2o=o("LayoutLMModel"),T2o=o(" (LayoutLM model)"),M2o=l(),a_=a("li"),sie=a("strong"),E2o=o("layoutlmv2"),C2o=o(" \u2014 "),UN=a("a"),w2o=o("LayoutLMv2Model"),A2o=o(" (LayoutLMv2 model)"),L2o=l(),n_=a("li"),lie=a("strong"),y2o=o("layoutlmv3"),x2o=o(" \u2014 "),JN=a("a"),$2o=o("LayoutLMv3Model"),k2o=o(" (LayoutLMv3 model)"),S2o=l(),s_=a("li"),iie=a("strong"),R2o=o("led"),P2o=o(" \u2014 "),YN=a("a"),B2o=o("LEDModel"),I2o=o(" (LED model)"),N2o=l(),l_=a("li"),die=a("strong"),q2o=o("levit"),j2o=o(" \u2014 "),KN=a("a"),D2o=o("LevitModel"),G2o=o(" (LeViT model)"),O2o=l(),i_=a("li"),cie=a("strong"),V2o=o("longformer"),X2o=o(" \u2014 "),ZN=a("a"),z2o=o("LongformerModel"),W2o=o(" (Longformer model)"),Q2o=l(),d_=a("li"),fie=a("strong"),H2o=o("luke"),U2o=o(" \u2014 "),eq=a("a"),J2o=o("LukeModel"),Y2o=o(" (LUKE model)"),K2o=l(),c_=a("li"),mie=a("strong"),Z2o=o("lxmert"),e4o=o(" \u2014 "),oq=a("a"),o4o=o("LxmertModel"),r4o=o(" (LXMERT model)"),t4o=l(),f_=a("li"),gie=a("strong"),a4o=o("m2m_100"),n4o=o(" \u2014 "),rq=a("a"),s4o=o("M2M100Model"),l4o=o(" (M2M100 model)"),i4o=l(),m_=a("li"),hie=a("strong"),d4o=o("marian"),c4o=o(" \u2014 "),tq=a("a"),f4o=o("MarianModel"),m4o=o(" (Marian model)"),g4o=l(),g_=a("li"),pie=a("strong"),h4o=o("maskformer"),p4o=o(" \u2014 "),aq=a("a"),_4o=o("MaskFormerModel"),u4o=o(" (MaskFormer model)"),b4o=l(),h_=a("li"),_ie=a("strong"),v4o=o("mbart"),F4o=o(" \u2014 "),nq=a("a"),T4o=o("MBartModel"),M4o=o(" (mBART model)"),E4o=l(),p_=a("li"),uie=a("strong"),C4o=o("mctct"),w4o=o(" \u2014 "),sq=a("a"),A4o=o("MCTCTModel"),L4o=o(" (M-CTC-T model)"),y4o=l(),__=a("li"),bie=a("strong"),x4o=o("megatron-bert"),$4o=o(" \u2014 "),lq=a("a"),k4o=o("MegatronBertModel"),S4o=o(" (Megatron-BERT model)"),R4o=l(),u_=a("li"),vie=a("strong"),P4o=o("mobilebert"),B4o=o(" \u2014 "),iq=a("a"),I4o=o("MobileBertModel"),N4o=o(" (MobileBERT model)"),q4o=l(),b_=a("li"),Fie=a("strong"),j4o=o("mpnet"),D4o=o(" \u2014 "),dq=a("a"),G4o=o("MPNetModel"),O4o=o(" (MPNet model)"),V4o=l(),v_=a("li"),Tie=a("strong"),X4o=o("mt5"),z4o=o(" \u2014 "),cq=a("a"),W4o=o("MT5Model"),Q4o=o(" (MT5 model)"),H4o=l(),F_=a("li"),Mie=a("strong"),U4o=o("nystromformer"),J4o=o(" \u2014 "),fq=a("a"),Y4o=o("NystromformerModel"),K4o=o(" (Nystr\xF6mformer model)"),Z4o=l(),T_=a("li"),Eie=a("strong"),evo=o("openai-gpt"),ovo=o(" \u2014 "),mq=a("a"),rvo=o("OpenAIGPTModel"),tvo=o(" (OpenAI GPT model)"),avo=l(),M_=a("li"),Cie=a("strong"),nvo=o("opt"),svo=o(" \u2014 "),gq=a("a"),lvo=o("OPTModel"),ivo=o(" (OPT model)"),dvo=l(),E_=a("li"),wie=a("strong"),cvo=o("pegasus"),fvo=o(" \u2014 "),hq=a("a"),mvo=o("PegasusModel"),gvo=o(" (Pegasus model)"),hvo=l(),C_=a("li"),Aie=a("strong"),pvo=o("perceiver"),_vo=o(" \u2014 "),pq=a("a"),uvo=o("PerceiverModel"),bvo=o(" (Perceiver model)"),vvo=l(),w_=a("li"),Lie=a("strong"),Fvo=o("plbart"),Tvo=o(" \u2014 "),_q=a("a"),Mvo=o("PLBartModel"),Evo=o(" (PLBart model)"),Cvo=l(),A_=a("li"),yie=a("strong"),wvo=o("poolformer"),Avo=o(" \u2014 "),uq=a("a"),Lvo=o("PoolFormerModel"),yvo=o(" (PoolFormer model)"),xvo=l(),L_=a("li"),xie=a("strong"),$vo=o("prophetnet"),kvo=o(" \u2014 "),bq=a("a"),Svo=o("ProphetNetModel"),Rvo=o(" (ProphetNet model)"),Pvo=l(),y_=a("li"),$ie=a("strong"),Bvo=o("qdqbert"),Ivo=o(" \u2014 "),vq=a("a"),Nvo=o("QDQBertModel"),qvo=o(" (QDQBert model)"),jvo=l(),x_=a("li"),kie=a("strong"),Dvo=o("reformer"),Gvo=o(" \u2014 "),Fq=a("a"),Ovo=o("ReformerModel"),Vvo=o(" (Reformer model)"),Xvo=l(),$_=a("li"),Sie=a("strong"),zvo=o("regnet"),Wvo=o(" \u2014 "),Tq=a("a"),Qvo=o("RegNetModel"),Hvo=o(" (RegNet model)"),Uvo=l(),k_=a("li"),Rie=a("strong"),Jvo=o("rembert"),Yvo=o(" \u2014 "),Mq=a("a"),Kvo=o("RemBertModel"),Zvo=o(" (RemBERT model)"),eFo=l(),S_=a("li"),Pie=a("strong"),oFo=o("resnet"),rFo=o(" \u2014 "),Eq=a("a"),tFo=o("ResNetModel"),aFo=o(" (ResNet model)"),nFo=l(),R_=a("li"),Bie=a("strong"),sFo=o("retribert"),lFo=o(" \u2014 "),Cq=a("a"),iFo=o("RetriBertModel"),dFo=o(" (RetriBERT model)"),cFo=l(),P_=a("li"),Iie=a("strong"),fFo=o("roberta"),mFo=o(" \u2014 "),wq=a("a"),gFo=o("RobertaModel"),hFo=o(" (RoBERTa model)"),pFo=l(),B_=a("li"),Nie=a("strong"),_Fo=o("roformer"),uFo=o(" \u2014 "),Aq=a("a"),bFo=o("RoFormerModel"),vFo=o(" (RoFormer model)"),FFo=l(),I_=a("li"),qie=a("strong"),TFo=o("segformer"),MFo=o(" \u2014 "),Lq=a("a"),EFo=o("SegformerModel"),CFo=o(" (SegFormer model)"),wFo=l(),N_=a("li"),jie=a("strong"),AFo=o("sew"),LFo=o(" \u2014 "),yq=a("a"),yFo=o("SEWModel"),xFo=o(" (SEW model)"),$Fo=l(),q_=a("li"),Die=a("strong"),kFo=o("sew-d"),SFo=o(" \u2014 "),xq=a("a"),RFo=o("SEWDModel"),PFo=o(" (SEW-D model)"),BFo=l(),j_=a("li"),Gie=a("strong"),IFo=o("speech_to_text"),NFo=o(" \u2014 "),$q=a("a"),qFo=o("Speech2TextModel"),jFo=o(" (Speech2Text model)"),DFo=l(),D_=a("li"),Oie=a("strong"),GFo=o("splinter"),OFo=o(" \u2014 "),kq=a("a"),VFo=o("SplinterModel"),XFo=o(" (Splinter model)"),zFo=l(),G_=a("li"),Vie=a("strong"),WFo=o("squeezebert"),QFo=o(" \u2014 "),Sq=a("a"),HFo=o("SqueezeBertModel"),UFo=o(" (SqueezeBERT model)"),JFo=l(),O_=a("li"),Xie=a("strong"),YFo=o("swin"),KFo=o(" \u2014 "),Rq=a("a"),ZFo=o("SwinModel"),eTo=o(" (Swin Transformer model)"),oTo=l(),V_=a("li"),zie=a("strong"),rTo=o("t5"),tTo=o(" \u2014 "),Pq=a("a"),aTo=o("T5Model"),nTo=o(" (T5 model)"),sTo=l(),X_=a("li"),Wie=a("strong"),lTo=o("tapas"),iTo=o(" \u2014 "),Bq=a("a"),dTo=o("TapasModel"),cTo=o(" (TAPAS model)"),fTo=l(),z_=a("li"),Qie=a("strong"),mTo=o("trajectory_transformer"),gTo=o(" \u2014 "),Iq=a("a"),hTo=o("TrajectoryTransformerModel"),pTo=o(" (Trajectory Transformer model)"),_To=l(),W_=a("li"),Hie=a("strong"),uTo=o("transfo-xl"),bTo=o(" \u2014 "),Nq=a("a"),vTo=o("TransfoXLModel"),FTo=o(" (Transformer-XL model)"),TTo=l(),Q_=a("li"),Uie=a("strong"),MTo=o("unispeech"),ETo=o(" \u2014 "),qq=a("a"),CTo=o("UniSpeechModel"),wTo=o(" (UniSpeech model)"),ATo=l(),H_=a("li"),Jie=a("strong"),LTo=o("unispeech-sat"),yTo=o(" \u2014 "),jq=a("a"),xTo=o("UniSpeechSatModel"),$To=o(" (UniSpeechSat model)"),kTo=l(),U_=a("li"),Yie=a("strong"),STo=o("van"),RTo=o(" \u2014 "),Dq=a("a"),PTo=o("VanModel"),BTo=o(" (VAN model)"),ITo=l(),J_=a("li"),Kie=a("strong"),NTo=o("vilt"),qTo=o(" \u2014 "),Gq=a("a"),jTo=o("ViltModel"),DTo=o(" (ViLT model)"),GTo=l(),Y_=a("li"),Zie=a("strong"),OTo=o("vision-text-dual-encoder"),VTo=o(" \u2014 "),Oq=a("a"),XTo=o("VisionTextDualEncoderModel"),zTo=o(" (VisionTextDualEncoder model)"),WTo=l(),K_=a("li"),ede=a("strong"),QTo=o("visual_bert"),HTo=o(" \u2014 "),Vq=a("a"),UTo=o("VisualBertModel"),JTo=o(" (VisualBERT model)"),YTo=l(),Z_=a("li"),ode=a("strong"),KTo=o("vit"),ZTo=o(" \u2014 "),Xq=a("a"),e7o=o("ViTModel"),o7o=o(" (ViT model)"),r7o=l(),eu=a("li"),rde=a("strong"),t7o=o("vit_mae"),a7o=o(" \u2014 "),zq=a("a"),n7o=o("ViTMAEModel"),s7o=o(" (ViTMAE model)"),l7o=l(),ou=a("li"),tde=a("strong"),i7o=o("wav2vec2"),d7o=o(" \u2014 "),Wq=a("a"),c7o=o("Wav2Vec2Model"),f7o=o(" (Wav2Vec2 model)"),m7o=l(),ru=a("li"),ade=a("strong"),g7o=o("wav2vec2-conformer"),h7o=o(" \u2014 "),Qq=a("a"),p7o=o("Wav2Vec2ConformerModel"),_7o=o(" (Wav2Vec2-Conformer model)"),u7o=l(),tu=a("li"),nde=a("strong"),b7o=o("wavlm"),v7o=o(" \u2014 "),Hq=a("a"),F7o=o("WavLMModel"),T7o=o(" (WavLM model)"),M7o=l(),au=a("li"),sde=a("strong"),E7o=o("xglm"),C7o=o(" \u2014 "),Uq=a("a"),w7o=o("XGLMModel"),A7o=o(" (XGLM model)"),L7o=l(),nu=a("li"),lde=a("strong"),y7o=o("xlm"),x7o=o(" \u2014 "),Jq=a("a"),$7o=o("XLMModel"),k7o=o(" (XLM model)"),S7o=l(),su=a("li"),ide=a("strong"),R7o=o("xlm-prophetnet"),P7o=o(" \u2014 "),Yq=a("a"),B7o=o("XLMProphetNetModel"),I7o=o(" (XLM-ProphetNet model)"),N7o=l(),lu=a("li"),dde=a("strong"),q7o=o("xlm-roberta"),j7o=o(" \u2014 "),Kq=a("a"),D7o=o("XLMRobertaModel"),G7o=o(" (XLM-RoBERTa model)"),O7o=l(),iu=a("li"),cde=a("strong"),V7o=o("xlm-roberta-xl"),X7o=o(" \u2014 "),Zq=a("a"),z7o=o("XLMRobertaXLModel"),W7o=o(" (XLM-RoBERTa-XL model)"),Q7o=l(),du=a("li"),fde=a("strong"),H7o=o("xlnet"),U7o=o(" \u2014 "),ej=a("a"),J7o=o("XLNetModel"),Y7o=o(" (XLNet model)"),K7o=l(),cu=a("li"),mde=a("strong"),Z7o=o("yolos"),eMo=o(" \u2014 "),oj=a("a"),oMo=o("YolosModel"),rMo=o(" (YOLOS model)"),tMo=l(),fu=a("li"),gde=a("strong"),aMo=o("yoso"),nMo=o(" \u2014 "),rj=a("a"),sMo=o("YosoModel"),lMo=o(" (YOSO model)"),iMo=l(),mu=a("p"),dMo=o("The model is set in evaluation mode by default using "),hde=a("code"),cMo=o("model.eval()"),fMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=a("code"),mMo=o("model.train()"),gMo=l(),F(gu.$$.fragment),Dje=l(),$i=a("h2"),hu=a("a"),_de=a("span"),F(CL.$$.fragment),hMo=l(),ude=a("span"),pMo=o("AutoModelForPreTraining"),Gje=l(),xo=a("div"),F(wL.$$.fragment),_Mo=l(),ki=a("p"),uMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tj=a("a"),bMo=o("from_pretrained()"),vMo=o(" class method or the "),aj=a("a"),FMo=o("from_config()"),TMo=o(` class
method.`),MMo=l(),AL=a("p"),EMo=o("This class cannot be instantiated directly using "),bde=a("code"),CMo=o("__init__()"),wMo=o(" (throws an error)."),AMo=l(),nt=a("div"),F(LL.$$.fragment),LMo=l(),vde=a("p"),yMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xMo=l(),Si=a("p"),$Mo=o(`Note:
Loading a model from its configuration file does `),Fde=a("strong"),kMo=o("not"),SMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),RMo=o("from_pretrained()"),PMo=o(" to load the model weights."),BMo=l(),F(pu.$$.fragment),IMo=l(),Ye=a("div"),F(yL.$$.fragment),NMo=l(),Tde=a("p"),qMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jMo=l(),$a=a("p"),DMo=o("The model class to instantiate is selected based on the "),Mde=a("code"),GMo=o("model_type"),OMo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),VMo=o("pretrained_model_name_or_path"),XMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),zMo=o("pretrained_model_name_or_path"),WMo=o(":"),QMo=l(),G=a("ul"),_u=a("li"),wde=a("strong"),HMo=o("albert"),UMo=o(" \u2014 "),sj=a("a"),JMo=o("AlbertForPreTraining"),YMo=o(" (ALBERT model)"),KMo=l(),uu=a("li"),Ade=a("strong"),ZMo=o("bart"),eEo=o(" \u2014 "),lj=a("a"),oEo=o("BartForConditionalGeneration"),rEo=o(" (BART model)"),tEo=l(),bu=a("li"),Lde=a("strong"),aEo=o("bert"),nEo=o(" \u2014 "),ij=a("a"),sEo=o("BertForPreTraining"),lEo=o(" (BERT model)"),iEo=l(),vu=a("li"),yde=a("strong"),dEo=o("big_bird"),cEo=o(" \u2014 "),dj=a("a"),fEo=o("BigBirdForPreTraining"),mEo=o(" (BigBird model)"),gEo=l(),Fu=a("li"),xde=a("strong"),hEo=o("bloom"),pEo=o(" \u2014 "),cj=a("a"),_Eo=o("BloomForCausalLM"),uEo=o(" (BLOOM model)"),bEo=l(),Tu=a("li"),$de=a("strong"),vEo=o("camembert"),FEo=o(" \u2014 "),fj=a("a"),TEo=o("CamembertForMaskedLM"),MEo=o(" (CamemBERT model)"),EEo=l(),Mu=a("li"),kde=a("strong"),CEo=o("ctrl"),wEo=o(" \u2014 "),mj=a("a"),AEo=o("CTRLLMHeadModel"),LEo=o(" (CTRL model)"),yEo=l(),Eu=a("li"),Sde=a("strong"),xEo=o("data2vec-text"),$Eo=o(" \u2014 "),gj=a("a"),kEo=o("Data2VecTextForMaskedLM"),SEo=o(" (Data2VecText model)"),REo=l(),Cu=a("li"),Rde=a("strong"),PEo=o("deberta"),BEo=o(" \u2014 "),hj=a("a"),IEo=o("DebertaForMaskedLM"),NEo=o(" (DeBERTa model)"),qEo=l(),wu=a("li"),Pde=a("strong"),jEo=o("deberta-v2"),DEo=o(" \u2014 "),pj=a("a"),GEo=o("DebertaV2ForMaskedLM"),OEo=o(" (DeBERTa-v2 model)"),VEo=l(),Au=a("li"),Bde=a("strong"),XEo=o("distilbert"),zEo=o(" \u2014 "),_j=a("a"),WEo=o("DistilBertForMaskedLM"),QEo=o(" (DistilBERT model)"),HEo=l(),Lu=a("li"),Ide=a("strong"),UEo=o("electra"),JEo=o(" \u2014 "),uj=a("a"),YEo=o("ElectraForPreTraining"),KEo=o(" (ELECTRA model)"),ZEo=l(),yu=a("li"),Nde=a("strong"),eCo=o("flaubert"),oCo=o(" \u2014 "),bj=a("a"),rCo=o("FlaubertWithLMHeadModel"),tCo=o(" (FlauBERT model)"),aCo=l(),xu=a("li"),qde=a("strong"),nCo=o("flava"),sCo=o(" \u2014 "),vj=a("a"),lCo=o("FlavaForPreTraining"),iCo=o(" (FLAVA model)"),dCo=l(),$u=a("li"),jde=a("strong"),cCo=o("fnet"),fCo=o(" \u2014 "),Fj=a("a"),mCo=o("FNetForPreTraining"),gCo=o(" (FNet model)"),hCo=l(),ku=a("li"),Dde=a("strong"),pCo=o("fsmt"),_Co=o(" \u2014 "),Tj=a("a"),uCo=o("FSMTForConditionalGeneration"),bCo=o(" (FairSeq Machine-Translation model)"),vCo=l(),Su=a("li"),Gde=a("strong"),FCo=o("funnel"),TCo=o(" \u2014 "),Mj=a("a"),MCo=o("FunnelForPreTraining"),ECo=o(" (Funnel Transformer model)"),CCo=l(),Ru=a("li"),Ode=a("strong"),wCo=o("gpt2"),ACo=o(" \u2014 "),Ej=a("a"),LCo=o("GPT2LMHeadModel"),yCo=o(" (OpenAI GPT-2 model)"),xCo=l(),Pu=a("li"),Vde=a("strong"),$Co=o("ibert"),kCo=o(" \u2014 "),Cj=a("a"),SCo=o("IBertForMaskedLM"),RCo=o(" (I-BERT model)"),PCo=l(),Bu=a("li"),Xde=a("strong"),BCo=o("layoutlm"),ICo=o(" \u2014 "),wj=a("a"),NCo=o("LayoutLMForMaskedLM"),qCo=o(" (LayoutLM model)"),jCo=l(),Iu=a("li"),zde=a("strong"),DCo=o("longformer"),GCo=o(" \u2014 "),Aj=a("a"),OCo=o("LongformerForMaskedLM"),VCo=o(" (Longformer model)"),XCo=l(),Nu=a("li"),Wde=a("strong"),zCo=o("lxmert"),WCo=o(" \u2014 "),Lj=a("a"),QCo=o("LxmertForPreTraining"),HCo=o(" (LXMERT model)"),UCo=l(),qu=a("li"),Qde=a("strong"),JCo=o("megatron-bert"),YCo=o(" \u2014 "),yj=a("a"),KCo=o("MegatronBertForPreTraining"),ZCo=o(" (Megatron-BERT model)"),e3o=l(),ju=a("li"),Hde=a("strong"),o3o=o("mobilebert"),r3o=o(" \u2014 "),xj=a("a"),t3o=o("MobileBertForPreTraining"),a3o=o(" (MobileBERT model)"),n3o=l(),Du=a("li"),Ude=a("strong"),s3o=o("mpnet"),l3o=o(" \u2014 "),$j=a("a"),i3o=o("MPNetForMaskedLM"),d3o=o(" (MPNet model)"),c3o=l(),Gu=a("li"),Jde=a("strong"),f3o=o("openai-gpt"),m3o=o(" \u2014 "),kj=a("a"),g3o=o("OpenAIGPTLMHeadModel"),h3o=o(" (OpenAI GPT model)"),p3o=l(),Ou=a("li"),Yde=a("strong"),_3o=o("retribert"),u3o=o(" \u2014 "),Sj=a("a"),b3o=o("RetriBertModel"),v3o=o(" (RetriBERT model)"),F3o=l(),Vu=a("li"),Kde=a("strong"),T3o=o("roberta"),M3o=o(" \u2014 "),Rj=a("a"),E3o=o("RobertaForMaskedLM"),C3o=o(" (RoBERTa model)"),w3o=l(),Xu=a("li"),Zde=a("strong"),A3o=o("splinter"),L3o=o(" \u2014 "),Pj=a("a"),y3o=o("SplinterForPreTraining"),x3o=o(" (Splinter model)"),$3o=l(),zu=a("li"),ece=a("strong"),k3o=o("squeezebert"),S3o=o(" \u2014 "),Bj=a("a"),R3o=o("SqueezeBertForMaskedLM"),P3o=o(" (SqueezeBERT model)"),B3o=l(),Wu=a("li"),oce=a("strong"),I3o=o("t5"),N3o=o(" \u2014 "),Ij=a("a"),q3o=o("T5ForConditionalGeneration"),j3o=o(" (T5 model)"),D3o=l(),Qu=a("li"),rce=a("strong"),G3o=o("tapas"),O3o=o(" \u2014 "),Nj=a("a"),V3o=o("TapasForMaskedLM"),X3o=o(" (TAPAS model)"),z3o=l(),Hu=a("li"),tce=a("strong"),W3o=o("transfo-xl"),Q3o=o(" \u2014 "),qj=a("a"),H3o=o("TransfoXLLMHeadModel"),U3o=o(" (Transformer-XL model)"),J3o=l(),Uu=a("li"),ace=a("strong"),Y3o=o("unispeech"),K3o=o(" \u2014 "),jj=a("a"),Z3o=o("UniSpeechForPreTraining"),e0o=o(" (UniSpeech model)"),o0o=l(),Ju=a("li"),nce=a("strong"),r0o=o("unispeech-sat"),t0o=o(" \u2014 "),Dj=a("a"),a0o=o("UniSpeechSatForPreTraining"),n0o=o(" (UniSpeechSat model)"),s0o=l(),Yu=a("li"),sce=a("strong"),l0o=o("visual_bert"),i0o=o(" \u2014 "),Gj=a("a"),d0o=o("VisualBertForPreTraining"),c0o=o(" (VisualBERT model)"),f0o=l(),Ku=a("li"),lce=a("strong"),m0o=o("vit_mae"),g0o=o(" \u2014 "),Oj=a("a"),h0o=o("ViTMAEForPreTraining"),p0o=o(" (ViTMAE model)"),_0o=l(),Zu=a("li"),ice=a("strong"),u0o=o("wav2vec2"),b0o=o(" \u2014 "),Vj=a("a"),v0o=o("Wav2Vec2ForPreTraining"),F0o=o(" (Wav2Vec2 model)"),T0o=l(),e5=a("li"),dce=a("strong"),M0o=o("wav2vec2-conformer"),E0o=o(" \u2014 "),Xj=a("a"),C0o=o("Wav2Vec2ConformerForPreTraining"),w0o=o(" (Wav2Vec2-Conformer model)"),A0o=l(),o5=a("li"),cce=a("strong"),L0o=o("xlm"),y0o=o(" \u2014 "),zj=a("a"),x0o=o("XLMWithLMHeadModel"),$0o=o(" (XLM model)"),k0o=l(),r5=a("li"),fce=a("strong"),S0o=o("xlm-roberta"),R0o=o(" \u2014 "),Wj=a("a"),P0o=o("XLMRobertaForMaskedLM"),B0o=o(" (XLM-RoBERTa model)"),I0o=l(),t5=a("li"),mce=a("strong"),N0o=o("xlm-roberta-xl"),q0o=o(" \u2014 "),Qj=a("a"),j0o=o("XLMRobertaXLForMaskedLM"),D0o=o(" (XLM-RoBERTa-XL model)"),G0o=l(),a5=a("li"),gce=a("strong"),O0o=o("xlnet"),V0o=o(" \u2014 "),Hj=a("a"),X0o=o("XLNetLMHeadModel"),z0o=o(" (XLNet model)"),W0o=l(),n5=a("p"),Q0o=o("The model is set in evaluation mode by default using "),hce=a("code"),H0o=o("model.eval()"),U0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),J0o=o("model.train()"),Y0o=l(),F(s5.$$.fragment),Oje=l(),Ri=a("h2"),l5=a("a"),_ce=a("span"),F(xL.$$.fragment),K0o=l(),uce=a("span"),Z0o=o("AutoModelForCausalLM"),Vje=l(),$o=a("div"),F($L.$$.fragment),ewo=l(),Pi=a("p"),owo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uj=a("a"),rwo=o("from_pretrained()"),two=o(" class method or the "),Jj=a("a"),awo=o("from_config()"),nwo=o(` class
method.`),swo=l(),kL=a("p"),lwo=o("This class cannot be instantiated directly using "),bce=a("code"),iwo=o("__init__()"),dwo=o(" (throws an error)."),cwo=l(),st=a("div"),F(SL.$$.fragment),fwo=l(),vce=a("p"),mwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gwo=l(),Bi=a("p"),hwo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),pwo=o("not"),_wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=a("a"),uwo=o("from_pretrained()"),bwo=o(" to load the model weights."),vwo=l(),F(i5.$$.fragment),Fwo=l(),Ke=a("div"),F(RL.$$.fragment),Two=l(),Tce=a("p"),Mwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ewo=l(),ka=a("p"),Cwo=o("The model class to instantiate is selected based on the "),Mce=a("code"),wwo=o("model_type"),Awo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),Lwo=o("pretrained_model_name_or_path"),ywo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),xwo=o("pretrained_model_name_or_path"),$wo=o(":"),kwo=l(),z=a("ul"),d5=a("li"),wce=a("strong"),Swo=o("bart"),Rwo=o(" \u2014 "),Kj=a("a"),Pwo=o("BartForCausalLM"),Bwo=o(" (BART model)"),Iwo=l(),c5=a("li"),Ace=a("strong"),Nwo=o("bert"),qwo=o(" \u2014 "),Zj=a("a"),jwo=o("BertLMHeadModel"),Dwo=o(" (BERT model)"),Gwo=l(),f5=a("li"),Lce=a("strong"),Owo=o("bert-generation"),Vwo=o(" \u2014 "),eD=a("a"),Xwo=o("BertGenerationDecoder"),zwo=o(" (Bert Generation model)"),Wwo=l(),m5=a("li"),yce=a("strong"),Qwo=o("big_bird"),Hwo=o(" \u2014 "),oD=a("a"),Uwo=o("BigBirdForCausalLM"),Jwo=o(" (BigBird model)"),Ywo=l(),g5=a("li"),xce=a("strong"),Kwo=o("bigbird_pegasus"),Zwo=o(" \u2014 "),rD=a("a"),eAo=o("BigBirdPegasusForCausalLM"),oAo=o(" (BigBird-Pegasus model)"),rAo=l(),h5=a("li"),$ce=a("strong"),tAo=o("blenderbot"),aAo=o(" \u2014 "),tD=a("a"),nAo=o("BlenderbotForCausalLM"),sAo=o(" (Blenderbot model)"),lAo=l(),p5=a("li"),kce=a("strong"),iAo=o("blenderbot-small"),dAo=o(" \u2014 "),aD=a("a"),cAo=o("BlenderbotSmallForCausalLM"),fAo=o(" (BlenderbotSmall model)"),mAo=l(),_5=a("li"),Sce=a("strong"),gAo=o("bloom"),hAo=o(" \u2014 "),nD=a("a"),pAo=o("BloomForCausalLM"),_Ao=o(" (BLOOM model)"),uAo=l(),u5=a("li"),Rce=a("strong"),bAo=o("camembert"),vAo=o(" \u2014 "),sD=a("a"),FAo=o("CamembertForCausalLM"),TAo=o(" (CamemBERT model)"),MAo=l(),b5=a("li"),Pce=a("strong"),EAo=o("ctrl"),CAo=o(" \u2014 "),lD=a("a"),wAo=o("CTRLLMHeadModel"),AAo=o(" (CTRL model)"),LAo=l(),v5=a("li"),Bce=a("strong"),yAo=o("data2vec-text"),xAo=o(" \u2014 "),iD=a("a"),$Ao=o("Data2VecTextForCausalLM"),kAo=o(" (Data2VecText model)"),SAo=l(),F5=a("li"),Ice=a("strong"),RAo=o("electra"),PAo=o(" \u2014 "),dD=a("a"),BAo=o("ElectraForCausalLM"),IAo=o(" (ELECTRA model)"),NAo=l(),T5=a("li"),Nce=a("strong"),qAo=o("gpt2"),jAo=o(" \u2014 "),cD=a("a"),DAo=o("GPT2LMHeadModel"),GAo=o(" (OpenAI GPT-2 model)"),OAo=l(),M5=a("li"),qce=a("strong"),VAo=o("gpt_neo"),XAo=o(" \u2014 "),fD=a("a"),zAo=o("GPTNeoForCausalLM"),WAo=o(" (GPT Neo model)"),QAo=l(),E5=a("li"),jce=a("strong"),HAo=o("gpt_neox"),UAo=o(" \u2014 "),mD=a("a"),JAo=o("GPTNeoXForCausalLM"),YAo=o(" (GPT NeoX model)"),KAo=l(),C5=a("li"),Dce=a("strong"),ZAo=o("gptj"),e6o=o(" \u2014 "),gD=a("a"),o6o=o("GPTJForCausalLM"),r6o=o(" (GPT-J model)"),t6o=l(),w5=a("li"),Gce=a("strong"),a6o=o("marian"),n6o=o(" \u2014 "),hD=a("a"),s6o=o("MarianForCausalLM"),l6o=o(" (Marian model)"),i6o=l(),A5=a("li"),Oce=a("strong"),d6o=o("mbart"),c6o=o(" \u2014 "),pD=a("a"),f6o=o("MBartForCausalLM"),m6o=o(" (mBART model)"),g6o=l(),L5=a("li"),Vce=a("strong"),h6o=o("megatron-bert"),p6o=o(" \u2014 "),_D=a("a"),_6o=o("MegatronBertForCausalLM"),u6o=o(" (Megatron-BERT model)"),b6o=l(),y5=a("li"),Xce=a("strong"),v6o=o("openai-gpt"),F6o=o(" \u2014 "),uD=a("a"),T6o=o("OpenAIGPTLMHeadModel"),M6o=o(" (OpenAI GPT model)"),E6o=l(),x5=a("li"),zce=a("strong"),C6o=o("opt"),w6o=o(" \u2014 "),bD=a("a"),A6o=o("OPTForCausalLM"),L6o=o(" (OPT model)"),y6o=l(),$5=a("li"),Wce=a("strong"),x6o=o("pegasus"),$6o=o(" \u2014 "),vD=a("a"),k6o=o("PegasusForCausalLM"),S6o=o(" (Pegasus model)"),R6o=l(),k5=a("li"),Qce=a("strong"),P6o=o("plbart"),B6o=o(" \u2014 "),FD=a("a"),I6o=o("PLBartForCausalLM"),N6o=o(" (PLBart model)"),q6o=l(),S5=a("li"),Hce=a("strong"),j6o=o("prophetnet"),D6o=o(" \u2014 "),TD=a("a"),G6o=o("ProphetNetForCausalLM"),O6o=o(" (ProphetNet model)"),V6o=l(),R5=a("li"),Uce=a("strong"),X6o=o("qdqbert"),z6o=o(" \u2014 "),MD=a("a"),W6o=o("QDQBertLMHeadModel"),Q6o=o(" (QDQBert model)"),H6o=l(),P5=a("li"),Jce=a("strong"),U6o=o("reformer"),J6o=o(" \u2014 "),ED=a("a"),Y6o=o("ReformerModelWithLMHead"),K6o=o(" (Reformer model)"),Z6o=l(),B5=a("li"),Yce=a("strong"),eLo=o("rembert"),oLo=o(" \u2014 "),CD=a("a"),rLo=o("RemBertForCausalLM"),tLo=o(" (RemBERT model)"),aLo=l(),I5=a("li"),Kce=a("strong"),nLo=o("roberta"),sLo=o(" \u2014 "),wD=a("a"),lLo=o("RobertaForCausalLM"),iLo=o(" (RoBERTa model)"),dLo=l(),N5=a("li"),Zce=a("strong"),cLo=o("roformer"),fLo=o(" \u2014 "),AD=a("a"),mLo=o("RoFormerForCausalLM"),gLo=o(" (RoFormer model)"),hLo=l(),q5=a("li"),efe=a("strong"),pLo=o("speech_to_text_2"),_Lo=o(" \u2014 "),LD=a("a"),uLo=o("Speech2Text2ForCausalLM"),bLo=o(" (Speech2Text2 model)"),vLo=l(),j5=a("li"),ofe=a("strong"),FLo=o("transfo-xl"),TLo=o(" \u2014 "),yD=a("a"),MLo=o("TransfoXLLMHeadModel"),ELo=o(" (Transformer-XL model)"),CLo=l(),D5=a("li"),rfe=a("strong"),wLo=o("trocr"),ALo=o(" \u2014 "),xD=a("a"),LLo=o("TrOCRForCausalLM"),yLo=o(" (TrOCR model)"),xLo=l(),G5=a("li"),tfe=a("strong"),$Lo=o("xglm"),kLo=o(" \u2014 "),$D=a("a"),SLo=o("XGLMForCausalLM"),RLo=o(" (XGLM model)"),PLo=l(),O5=a("li"),afe=a("strong"),BLo=o("xlm"),ILo=o(" \u2014 "),kD=a("a"),NLo=o("XLMWithLMHeadModel"),qLo=o(" (XLM model)"),jLo=l(),V5=a("li"),nfe=a("strong"),DLo=o("xlm-prophetnet"),GLo=o(" \u2014 "),SD=a("a"),OLo=o("XLMProphetNetForCausalLM"),VLo=o(" (XLM-ProphetNet model)"),XLo=l(),X5=a("li"),sfe=a("strong"),zLo=o("xlm-roberta"),WLo=o(" \u2014 "),RD=a("a"),QLo=o("XLMRobertaForCausalLM"),HLo=o(" (XLM-RoBERTa model)"),ULo=l(),z5=a("li"),lfe=a("strong"),JLo=o("xlm-roberta-xl"),YLo=o(" \u2014 "),PD=a("a"),KLo=o("XLMRobertaXLForCausalLM"),ZLo=o(" (XLM-RoBERTa-XL model)"),eyo=l(),W5=a("li"),ife=a("strong"),oyo=o("xlnet"),ryo=o(" \u2014 "),BD=a("a"),tyo=o("XLNetLMHeadModel"),ayo=o(" (XLNet model)"),nyo=l(),Q5=a("p"),syo=o("The model is set in evaluation mode by default using "),dfe=a("code"),lyo=o("model.eval()"),iyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=a("code"),dyo=o("model.train()"),cyo=l(),F(H5.$$.fragment),Xje=l(),Ii=a("h2"),U5=a("a"),ffe=a("span"),F(PL.$$.fragment),fyo=l(),mfe=a("span"),myo=o("AutoModelForMaskedLM"),zje=l(),ko=a("div"),F(BL.$$.fragment),gyo=l(),Ni=a("p"),hyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ID=a("a"),pyo=o("from_pretrained()"),_yo=o(" class method or the "),ND=a("a"),uyo=o("from_config()"),byo=o(` class
method.`),vyo=l(),IL=a("p"),Fyo=o("This class cannot be instantiated directly using "),gfe=a("code"),Tyo=o("__init__()"),Myo=o(" (throws an error)."),Eyo=l(),lt=a("div"),F(NL.$$.fragment),Cyo=l(),hfe=a("p"),wyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ayo=l(),qi=a("p"),Lyo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),yyo=o("not"),xyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),$yo=o("from_pretrained()"),kyo=o(" to load the model weights."),Syo=l(),F(J5.$$.fragment),Ryo=l(),Ze=a("div"),F(qL.$$.fragment),Pyo=l(),_fe=a("p"),Byo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Iyo=l(),Sa=a("p"),Nyo=o("The model class to instantiate is selected based on the "),ufe=a("code"),qyo=o("model_type"),jyo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),Dyo=o("pretrained_model_name_or_path"),Gyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),Oyo=o("pretrained_model_name_or_path"),Vyo=o(":"),Xyo=l(),Q=a("ul"),Y5=a("li"),Ffe=a("strong"),zyo=o("albert"),Wyo=o(" \u2014 "),jD=a("a"),Qyo=o("AlbertForMaskedLM"),Hyo=o(" (ALBERT model)"),Uyo=l(),K5=a("li"),Tfe=a("strong"),Jyo=o("bart"),Yyo=o(" \u2014 "),DD=a("a"),Kyo=o("BartForConditionalGeneration"),Zyo=o(" (BART model)"),e8o=l(),Z5=a("li"),Mfe=a("strong"),o8o=o("bert"),r8o=o(" \u2014 "),GD=a("a"),t8o=o("BertForMaskedLM"),a8o=o(" (BERT model)"),n8o=l(),e1=a("li"),Efe=a("strong"),s8o=o("big_bird"),l8o=o(" \u2014 "),OD=a("a"),i8o=o("BigBirdForMaskedLM"),d8o=o(" (BigBird model)"),c8o=l(),o1=a("li"),Cfe=a("strong"),f8o=o("camembert"),m8o=o(" \u2014 "),VD=a("a"),g8o=o("CamembertForMaskedLM"),h8o=o(" (CamemBERT model)"),p8o=l(),r1=a("li"),wfe=a("strong"),_8o=o("convbert"),u8o=o(" \u2014 "),XD=a("a"),b8o=o("ConvBertForMaskedLM"),v8o=o(" (ConvBERT model)"),F8o=l(),t1=a("li"),Afe=a("strong"),T8o=o("data2vec-text"),M8o=o(" \u2014 "),zD=a("a"),E8o=o("Data2VecTextForMaskedLM"),C8o=o(" (Data2VecText model)"),w8o=l(),a1=a("li"),Lfe=a("strong"),A8o=o("deberta"),L8o=o(" \u2014 "),WD=a("a"),y8o=o("DebertaForMaskedLM"),x8o=o(" (DeBERTa model)"),$8o=l(),n1=a("li"),yfe=a("strong"),k8o=o("deberta-v2"),S8o=o(" \u2014 "),QD=a("a"),R8o=o("DebertaV2ForMaskedLM"),P8o=o(" (DeBERTa-v2 model)"),B8o=l(),s1=a("li"),xfe=a("strong"),I8o=o("distilbert"),N8o=o(" \u2014 "),HD=a("a"),q8o=o("DistilBertForMaskedLM"),j8o=o(" (DistilBERT model)"),D8o=l(),l1=a("li"),$fe=a("strong"),G8o=o("electra"),O8o=o(" \u2014 "),UD=a("a"),V8o=o("ElectraForMaskedLM"),X8o=o(" (ELECTRA model)"),z8o=l(),i1=a("li"),kfe=a("strong"),W8o=o("flaubert"),Q8o=o(" \u2014 "),JD=a("a"),H8o=o("FlaubertWithLMHeadModel"),U8o=o(" (FlauBERT model)"),J8o=l(),d1=a("li"),Sfe=a("strong"),Y8o=o("fnet"),K8o=o(" \u2014 "),YD=a("a"),Z8o=o("FNetForMaskedLM"),e9o=o(" (FNet model)"),o9o=l(),c1=a("li"),Rfe=a("strong"),r9o=o("funnel"),t9o=o(" \u2014 "),KD=a("a"),a9o=o("FunnelForMaskedLM"),n9o=o(" (Funnel Transformer model)"),s9o=l(),f1=a("li"),Pfe=a("strong"),l9o=o("ibert"),i9o=o(" \u2014 "),ZD=a("a"),d9o=o("IBertForMaskedLM"),c9o=o(" (I-BERT model)"),f9o=l(),m1=a("li"),Bfe=a("strong"),m9o=o("layoutlm"),g9o=o(" \u2014 "),eG=a("a"),h9o=o("LayoutLMForMaskedLM"),p9o=o(" (LayoutLM model)"),_9o=l(),g1=a("li"),Ife=a("strong"),u9o=o("longformer"),b9o=o(" \u2014 "),oG=a("a"),v9o=o("LongformerForMaskedLM"),F9o=o(" (Longformer model)"),T9o=l(),h1=a("li"),Nfe=a("strong"),M9o=o("luke"),E9o=o(" \u2014 "),rG=a("a"),C9o=o("LukeForMaskedLM"),w9o=o(" (LUKE model)"),A9o=l(),p1=a("li"),qfe=a("strong"),L9o=o("mbart"),y9o=o(" \u2014 "),tG=a("a"),x9o=o("MBartForConditionalGeneration"),$9o=o(" (mBART model)"),k9o=l(),_1=a("li"),jfe=a("strong"),S9o=o("megatron-bert"),R9o=o(" \u2014 "),aG=a("a"),P9o=o("MegatronBertForMaskedLM"),B9o=o(" (Megatron-BERT model)"),I9o=l(),u1=a("li"),Dfe=a("strong"),N9o=o("mobilebert"),q9o=o(" \u2014 "),nG=a("a"),j9o=o("MobileBertForMaskedLM"),D9o=o(" (MobileBERT model)"),G9o=l(),b1=a("li"),Gfe=a("strong"),O9o=o("mpnet"),V9o=o(" \u2014 "),sG=a("a"),X9o=o("MPNetForMaskedLM"),z9o=o(" (MPNet model)"),W9o=l(),v1=a("li"),Ofe=a("strong"),Q9o=o("nystromformer"),H9o=o(" \u2014 "),lG=a("a"),U9o=o("NystromformerForMaskedLM"),J9o=o(" (Nystr\xF6mformer model)"),Y9o=l(),F1=a("li"),Vfe=a("strong"),K9o=o("perceiver"),Z9o=o(" \u2014 "),iG=a("a"),exo=o("PerceiverForMaskedLM"),oxo=o(" (Perceiver model)"),rxo=l(),T1=a("li"),Xfe=a("strong"),txo=o("qdqbert"),axo=o(" \u2014 "),dG=a("a"),nxo=o("QDQBertForMaskedLM"),sxo=o(" (QDQBert model)"),lxo=l(),M1=a("li"),zfe=a("strong"),ixo=o("reformer"),dxo=o(" \u2014 "),cG=a("a"),cxo=o("ReformerForMaskedLM"),fxo=o(" (Reformer model)"),mxo=l(),E1=a("li"),Wfe=a("strong"),gxo=o("rembert"),hxo=o(" \u2014 "),fG=a("a"),pxo=o("RemBertForMaskedLM"),_xo=o(" (RemBERT model)"),uxo=l(),C1=a("li"),Qfe=a("strong"),bxo=o("roberta"),vxo=o(" \u2014 "),mG=a("a"),Fxo=o("RobertaForMaskedLM"),Txo=o(" (RoBERTa model)"),Mxo=l(),w1=a("li"),Hfe=a("strong"),Exo=o("roformer"),Cxo=o(" \u2014 "),gG=a("a"),wxo=o("RoFormerForMaskedLM"),Axo=o(" (RoFormer model)"),Lxo=l(),A1=a("li"),Ufe=a("strong"),yxo=o("squeezebert"),xxo=o(" \u2014 "),hG=a("a"),$xo=o("SqueezeBertForMaskedLM"),kxo=o(" (SqueezeBERT model)"),Sxo=l(),L1=a("li"),Jfe=a("strong"),Rxo=o("tapas"),Pxo=o(" \u2014 "),pG=a("a"),Bxo=o("TapasForMaskedLM"),Ixo=o(" (TAPAS model)"),Nxo=l(),y1=a("li"),Yfe=a("strong"),qxo=o("wav2vec2"),jxo=o(" \u2014 "),Kfe=a("code"),Dxo=o("Wav2Vec2ForMaskedLM"),Gxo=o(" (Wav2Vec2 model)"),Oxo=l(),x1=a("li"),Zfe=a("strong"),Vxo=o("xlm"),Xxo=o(" \u2014 "),_G=a("a"),zxo=o("XLMWithLMHeadModel"),Wxo=o(" (XLM model)"),Qxo=l(),$1=a("li"),eme=a("strong"),Hxo=o("xlm-roberta"),Uxo=o(" \u2014 "),uG=a("a"),Jxo=o("XLMRobertaForMaskedLM"),Yxo=o(" (XLM-RoBERTa model)"),Kxo=l(),k1=a("li"),ome=a("strong"),Zxo=o("xlm-roberta-xl"),e$o=o(" \u2014 "),bG=a("a"),o$o=o("XLMRobertaXLForMaskedLM"),r$o=o(" (XLM-RoBERTa-XL model)"),t$o=l(),S1=a("li"),rme=a("strong"),a$o=o("yoso"),n$o=o(" \u2014 "),vG=a("a"),s$o=o("YosoForMaskedLM"),l$o=o(" (YOSO model)"),i$o=l(),R1=a("p"),d$o=o("The model is set in evaluation mode by default using "),tme=a("code"),c$o=o("model.eval()"),f$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),m$o=o("model.train()"),g$o=l(),F(P1.$$.fragment),Wje=l(),ji=a("h2"),B1=a("a"),nme=a("span"),F(jL.$$.fragment),h$o=l(),sme=a("span"),p$o=o("AutoModelForSeq2SeqLM"),Qje=l(),So=a("div"),F(DL.$$.fragment),_$o=l(),Di=a("p"),u$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FG=a("a"),b$o=o("from_pretrained()"),v$o=o(" class method or the "),TG=a("a"),F$o=o("from_config()"),T$o=o(` class
method.`),M$o=l(),GL=a("p"),E$o=o("This class cannot be instantiated directly using "),lme=a("code"),C$o=o("__init__()"),w$o=o(" (throws an error)."),A$o=l(),it=a("div"),F(OL.$$.fragment),L$o=l(),ime=a("p"),y$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x$o=l(),Gi=a("p"),$$o=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),k$o=o("not"),S$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),R$o=o("from_pretrained()"),P$o=o(" to load the model weights."),B$o=l(),F(I1.$$.fragment),I$o=l(),eo=a("div"),F(VL.$$.fragment),N$o=l(),cme=a("p"),q$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j$o=l(),Ra=a("p"),D$o=o("The model class to instantiate is selected based on the "),fme=a("code"),G$o=o("model_type"),O$o=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),V$o=o("pretrained_model_name_or_path"),X$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),z$o=o("pretrained_model_name_or_path"),W$o=o(":"),Q$o=l(),_e=a("ul"),N1=a("li"),hme=a("strong"),H$o=o("bart"),U$o=o(" \u2014 "),EG=a("a"),J$o=o("BartForConditionalGeneration"),Y$o=o(" (BART model)"),K$o=l(),q1=a("li"),pme=a("strong"),Z$o=o("bigbird_pegasus"),eko=o(" \u2014 "),CG=a("a"),oko=o("BigBirdPegasusForConditionalGeneration"),rko=o(" (BigBird-Pegasus model)"),tko=l(),j1=a("li"),_me=a("strong"),ako=o("blenderbot"),nko=o(" \u2014 "),wG=a("a"),sko=o("BlenderbotForConditionalGeneration"),lko=o(" (Blenderbot model)"),iko=l(),D1=a("li"),ume=a("strong"),dko=o("blenderbot-small"),cko=o(" \u2014 "),AG=a("a"),fko=o("BlenderbotSmallForConditionalGeneration"),mko=o(" (BlenderbotSmall model)"),gko=l(),G1=a("li"),bme=a("strong"),hko=o("encoder-decoder"),pko=o(" \u2014 "),LG=a("a"),_ko=o("EncoderDecoderModel"),uko=o(" (Encoder decoder model)"),bko=l(),O1=a("li"),vme=a("strong"),vko=o("fsmt"),Fko=o(" \u2014 "),yG=a("a"),Tko=o("FSMTForConditionalGeneration"),Mko=o(" (FairSeq Machine-Translation model)"),Eko=l(),V1=a("li"),Fme=a("strong"),Cko=o("led"),wko=o(" \u2014 "),xG=a("a"),Ako=o("LEDForConditionalGeneration"),Lko=o(" (LED model)"),yko=l(),X1=a("li"),Tme=a("strong"),xko=o("m2m_100"),$ko=o(" \u2014 "),$G=a("a"),kko=o("M2M100ForConditionalGeneration"),Sko=o(" (M2M100 model)"),Rko=l(),z1=a("li"),Mme=a("strong"),Pko=o("marian"),Bko=o(" \u2014 "),kG=a("a"),Iko=o("MarianMTModel"),Nko=o(" (Marian model)"),qko=l(),W1=a("li"),Eme=a("strong"),jko=o("mbart"),Dko=o(" \u2014 "),SG=a("a"),Gko=o("MBartForConditionalGeneration"),Oko=o(" (mBART model)"),Vko=l(),Q1=a("li"),Cme=a("strong"),Xko=o("mt5"),zko=o(" \u2014 "),RG=a("a"),Wko=o("MT5ForConditionalGeneration"),Qko=o(" (MT5 model)"),Hko=l(),H1=a("li"),wme=a("strong"),Uko=o("pegasus"),Jko=o(" \u2014 "),PG=a("a"),Yko=o("PegasusForConditionalGeneration"),Kko=o(" (Pegasus model)"),Zko=l(),U1=a("li"),Ame=a("strong"),eSo=o("plbart"),oSo=o(" \u2014 "),BG=a("a"),rSo=o("PLBartForConditionalGeneration"),tSo=o(" (PLBart model)"),aSo=l(),J1=a("li"),Lme=a("strong"),nSo=o("prophetnet"),sSo=o(" \u2014 "),IG=a("a"),lSo=o("ProphetNetForConditionalGeneration"),iSo=o(" (ProphetNet model)"),dSo=l(),Y1=a("li"),yme=a("strong"),cSo=o("t5"),fSo=o(" \u2014 "),NG=a("a"),mSo=o("T5ForConditionalGeneration"),gSo=o(" (T5 model)"),hSo=l(),K1=a("li"),xme=a("strong"),pSo=o("xlm-prophetnet"),_So=o(" \u2014 "),qG=a("a"),uSo=o("XLMProphetNetForConditionalGeneration"),bSo=o(" (XLM-ProphetNet model)"),vSo=l(),Z1=a("p"),FSo=o("The model is set in evaluation mode by default using "),$me=a("code"),TSo=o("model.eval()"),MSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),ESo=o("model.train()"),CSo=l(),F(eb.$$.fragment),Hje=l(),Oi=a("h2"),ob=a("a"),Sme=a("span"),F(XL.$$.fragment),wSo=l(),Rme=a("span"),ASo=o("AutoModelForSequenceClassification"),Uje=l(),Ro=a("div"),F(zL.$$.fragment),LSo=l(),Vi=a("p"),ySo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jG=a("a"),xSo=o("from_pretrained()"),$So=o(" class method or the "),DG=a("a"),kSo=o("from_config()"),SSo=o(` class
method.`),RSo=l(),WL=a("p"),PSo=o("This class cannot be instantiated directly using "),Pme=a("code"),BSo=o("__init__()"),ISo=o(" (throws an error)."),NSo=l(),dt=a("div"),F(QL.$$.fragment),qSo=l(),Bme=a("p"),jSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DSo=l(),Xi=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),OSo=o("not"),VSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),XSo=o("from_pretrained()"),zSo=o(" to load the model weights."),WSo=l(),F(rb.$$.fragment),QSo=l(),oo=a("div"),F(HL.$$.fragment),HSo=l(),Nme=a("p"),USo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JSo=l(),Pa=a("p"),YSo=o("The model class to instantiate is selected based on the "),qme=a("code"),KSo=o("model_type"),ZSo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),rRo=o("pretrained_model_name_or_path"),tRo=o(":"),aRo=l(),q=a("ul"),tb=a("li"),Gme=a("strong"),nRo=o("albert"),sRo=o(" \u2014 "),OG=a("a"),lRo=o("AlbertForSequenceClassification"),iRo=o(" (ALBERT model)"),dRo=l(),ab=a("li"),Ome=a("strong"),cRo=o("bart"),fRo=o(" \u2014 "),VG=a("a"),mRo=o("BartForSequenceClassification"),gRo=o(" (BART model)"),hRo=l(),nb=a("li"),Vme=a("strong"),pRo=o("bert"),_Ro=o(" \u2014 "),XG=a("a"),uRo=o("BertForSequenceClassification"),bRo=o(" (BERT model)"),vRo=l(),sb=a("li"),Xme=a("strong"),FRo=o("big_bird"),TRo=o(" \u2014 "),zG=a("a"),MRo=o("BigBirdForSequenceClassification"),ERo=o(" (BigBird model)"),CRo=l(),lb=a("li"),zme=a("strong"),wRo=o("bigbird_pegasus"),ARo=o(" \u2014 "),WG=a("a"),LRo=o("BigBirdPegasusForSequenceClassification"),yRo=o(" (BigBird-Pegasus model)"),xRo=l(),ib=a("li"),Wme=a("strong"),$Ro=o("camembert"),kRo=o(" \u2014 "),QG=a("a"),SRo=o("CamembertForSequenceClassification"),RRo=o(" (CamemBERT model)"),PRo=l(),db=a("li"),Qme=a("strong"),BRo=o("canine"),IRo=o(" \u2014 "),HG=a("a"),NRo=o("CanineForSequenceClassification"),qRo=o(" (CANINE model)"),jRo=l(),cb=a("li"),Hme=a("strong"),DRo=o("convbert"),GRo=o(" \u2014 "),UG=a("a"),ORo=o("ConvBertForSequenceClassification"),VRo=o(" (ConvBERT model)"),XRo=l(),fb=a("li"),Ume=a("strong"),zRo=o("ctrl"),WRo=o(" \u2014 "),JG=a("a"),QRo=o("CTRLForSequenceClassification"),HRo=o(" (CTRL model)"),URo=l(),mb=a("li"),Jme=a("strong"),JRo=o("data2vec-text"),YRo=o(" \u2014 "),YG=a("a"),KRo=o("Data2VecTextForSequenceClassification"),ZRo=o(" (Data2VecText model)"),ePo=l(),gb=a("li"),Yme=a("strong"),oPo=o("deberta"),rPo=o(" \u2014 "),KG=a("a"),tPo=o("DebertaForSequenceClassification"),aPo=o(" (DeBERTa model)"),nPo=l(),hb=a("li"),Kme=a("strong"),sPo=o("deberta-v2"),lPo=o(" \u2014 "),ZG=a("a"),iPo=o("DebertaV2ForSequenceClassification"),dPo=o(" (DeBERTa-v2 model)"),cPo=l(),pb=a("li"),Zme=a("strong"),fPo=o("distilbert"),mPo=o(" \u2014 "),eO=a("a"),gPo=o("DistilBertForSequenceClassification"),hPo=o(" (DistilBERT model)"),pPo=l(),_b=a("li"),ege=a("strong"),_Po=o("electra"),uPo=o(" \u2014 "),oO=a("a"),bPo=o("ElectraForSequenceClassification"),vPo=o(" (ELECTRA model)"),FPo=l(),ub=a("li"),oge=a("strong"),TPo=o("flaubert"),MPo=o(" \u2014 "),rO=a("a"),EPo=o("FlaubertForSequenceClassification"),CPo=o(" (FlauBERT model)"),wPo=l(),bb=a("li"),rge=a("strong"),APo=o("fnet"),LPo=o(" \u2014 "),tO=a("a"),yPo=o("FNetForSequenceClassification"),xPo=o(" (FNet model)"),$Po=l(),vb=a("li"),tge=a("strong"),kPo=o("funnel"),SPo=o(" \u2014 "),aO=a("a"),RPo=o("FunnelForSequenceClassification"),PPo=o(" (Funnel Transformer model)"),BPo=l(),Fb=a("li"),age=a("strong"),IPo=o("gpt2"),NPo=o(" \u2014 "),nO=a("a"),qPo=o("GPT2ForSequenceClassification"),jPo=o(" (OpenAI GPT-2 model)"),DPo=l(),Tb=a("li"),nge=a("strong"),GPo=o("gpt_neo"),OPo=o(" \u2014 "),sO=a("a"),VPo=o("GPTNeoForSequenceClassification"),XPo=o(" (GPT Neo model)"),zPo=l(),Mb=a("li"),sge=a("strong"),WPo=o("gptj"),QPo=o(" \u2014 "),lO=a("a"),HPo=o("GPTJForSequenceClassification"),UPo=o(" (GPT-J model)"),JPo=l(),Eb=a("li"),lge=a("strong"),YPo=o("ibert"),KPo=o(" \u2014 "),iO=a("a"),ZPo=o("IBertForSequenceClassification"),eBo=o(" (I-BERT model)"),oBo=l(),Cb=a("li"),ige=a("strong"),rBo=o("layoutlm"),tBo=o(" \u2014 "),dO=a("a"),aBo=o("LayoutLMForSequenceClassification"),nBo=o(" (LayoutLM model)"),sBo=l(),wb=a("li"),dge=a("strong"),lBo=o("layoutlmv2"),iBo=o(" \u2014 "),cO=a("a"),dBo=o("LayoutLMv2ForSequenceClassification"),cBo=o(" (LayoutLMv2 model)"),fBo=l(),Ab=a("li"),cge=a("strong"),mBo=o("layoutlmv3"),gBo=o(" \u2014 "),fO=a("a"),hBo=o("LayoutLMv3ForSequenceClassification"),pBo=o(" (LayoutLMv3 model)"),_Bo=l(),Lb=a("li"),fge=a("strong"),uBo=o("led"),bBo=o(" \u2014 "),mO=a("a"),vBo=o("LEDForSequenceClassification"),FBo=o(" (LED model)"),TBo=l(),yb=a("li"),mge=a("strong"),MBo=o("longformer"),EBo=o(" \u2014 "),gO=a("a"),CBo=o("LongformerForSequenceClassification"),wBo=o(" (Longformer model)"),ABo=l(),xb=a("li"),gge=a("strong"),LBo=o("mbart"),yBo=o(" \u2014 "),hO=a("a"),xBo=o("MBartForSequenceClassification"),$Bo=o(" (mBART model)"),kBo=l(),$b=a("li"),hge=a("strong"),SBo=o("megatron-bert"),RBo=o(" \u2014 "),pO=a("a"),PBo=o("MegatronBertForSequenceClassification"),BBo=o(" (Megatron-BERT model)"),IBo=l(),kb=a("li"),pge=a("strong"),NBo=o("mobilebert"),qBo=o(" \u2014 "),_O=a("a"),jBo=o("MobileBertForSequenceClassification"),DBo=o(" (MobileBERT model)"),GBo=l(),Sb=a("li"),_ge=a("strong"),OBo=o("mpnet"),VBo=o(" \u2014 "),uO=a("a"),XBo=o("MPNetForSequenceClassification"),zBo=o(" (MPNet model)"),WBo=l(),Rb=a("li"),uge=a("strong"),QBo=o("nystromformer"),HBo=o(" \u2014 "),bO=a("a"),UBo=o("NystromformerForSequenceClassification"),JBo=o(" (Nystr\xF6mformer model)"),YBo=l(),Pb=a("li"),bge=a("strong"),KBo=o("openai-gpt"),ZBo=o(" \u2014 "),vO=a("a"),eIo=o("OpenAIGPTForSequenceClassification"),oIo=o(" (OpenAI GPT model)"),rIo=l(),Bb=a("li"),vge=a("strong"),tIo=o("perceiver"),aIo=o(" \u2014 "),FO=a("a"),nIo=o("PerceiverForSequenceClassification"),sIo=o(" (Perceiver model)"),lIo=l(),Ib=a("li"),Fge=a("strong"),iIo=o("plbart"),dIo=o(" \u2014 "),TO=a("a"),cIo=o("PLBartForSequenceClassification"),fIo=o(" (PLBart model)"),mIo=l(),Nb=a("li"),Tge=a("strong"),gIo=o("qdqbert"),hIo=o(" \u2014 "),MO=a("a"),pIo=o("QDQBertForSequenceClassification"),_Io=o(" (QDQBert model)"),uIo=l(),qb=a("li"),Mge=a("strong"),bIo=o("reformer"),vIo=o(" \u2014 "),EO=a("a"),FIo=o("ReformerForSequenceClassification"),TIo=o(" (Reformer model)"),MIo=l(),jb=a("li"),Ege=a("strong"),EIo=o("rembert"),CIo=o(" \u2014 "),CO=a("a"),wIo=o("RemBertForSequenceClassification"),AIo=o(" (RemBERT model)"),LIo=l(),Db=a("li"),Cge=a("strong"),yIo=o("roberta"),xIo=o(" \u2014 "),wO=a("a"),$Io=o("RobertaForSequenceClassification"),kIo=o(" (RoBERTa model)"),SIo=l(),Gb=a("li"),wge=a("strong"),RIo=o("roformer"),PIo=o(" \u2014 "),AO=a("a"),BIo=o("RoFormerForSequenceClassification"),IIo=o(" (RoFormer model)"),NIo=l(),Ob=a("li"),Age=a("strong"),qIo=o("squeezebert"),jIo=o(" \u2014 "),LO=a("a"),DIo=o("SqueezeBertForSequenceClassification"),GIo=o(" (SqueezeBERT model)"),OIo=l(),Vb=a("li"),Lge=a("strong"),VIo=o("tapas"),XIo=o(" \u2014 "),yO=a("a"),zIo=o("TapasForSequenceClassification"),WIo=o(" (TAPAS model)"),QIo=l(),Xb=a("li"),yge=a("strong"),HIo=o("transfo-xl"),UIo=o(" \u2014 "),xO=a("a"),JIo=o("TransfoXLForSequenceClassification"),YIo=o(" (Transformer-XL model)"),KIo=l(),zb=a("li"),xge=a("strong"),ZIo=o("xlm"),eNo=o(" \u2014 "),$O=a("a"),oNo=o("XLMForSequenceClassification"),rNo=o(" (XLM model)"),tNo=l(),Wb=a("li"),$ge=a("strong"),aNo=o("xlm-roberta"),nNo=o(" \u2014 "),kO=a("a"),sNo=o("XLMRobertaForSequenceClassification"),lNo=o(" (XLM-RoBERTa model)"),iNo=l(),Qb=a("li"),kge=a("strong"),dNo=o("xlm-roberta-xl"),cNo=o(" \u2014 "),SO=a("a"),fNo=o("XLMRobertaXLForSequenceClassification"),mNo=o(" (XLM-RoBERTa-XL model)"),gNo=l(),Hb=a("li"),Sge=a("strong"),hNo=o("xlnet"),pNo=o(" \u2014 "),RO=a("a"),_No=o("XLNetForSequenceClassification"),uNo=o(" (XLNet model)"),bNo=l(),Ub=a("li"),Rge=a("strong"),vNo=o("yoso"),FNo=o(" \u2014 "),PO=a("a"),TNo=o("YosoForSequenceClassification"),MNo=o(" (YOSO model)"),ENo=l(),Jb=a("p"),CNo=o("The model is set in evaluation mode by default using "),Pge=a("code"),wNo=o("model.eval()"),ANo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),LNo=o("model.train()"),yNo=l(),F(Yb.$$.fragment),Jje=l(),zi=a("h2"),Kb=a("a"),Ige=a("span"),F(UL.$$.fragment),xNo=l(),Nge=a("span"),$No=o("AutoModelForMultipleChoice"),Yje=l(),Po=a("div"),F(JL.$$.fragment),kNo=l(),Wi=a("p"),SNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BO=a("a"),RNo=o("from_pretrained()"),PNo=o(" class method or the "),IO=a("a"),BNo=o("from_config()"),INo=o(` class
method.`),NNo=l(),YL=a("p"),qNo=o("This class cannot be instantiated directly using "),qge=a("code"),jNo=o("__init__()"),DNo=o(" (throws an error)."),GNo=l(),ct=a("div"),F(KL.$$.fragment),ONo=l(),jge=a("p"),VNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XNo=l(),Qi=a("p"),zNo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),WNo=o("not"),QNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),HNo=o("from_pretrained()"),UNo=o(" to load the model weights."),JNo=l(),F(Zb.$$.fragment),YNo=l(),ro=a("div"),F(ZL.$$.fragment),KNo=l(),Gge=a("p"),ZNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eqo=l(),Ba=a("p"),oqo=o("The model class to instantiate is selected based on the "),Oge=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),Z=a("ul"),e2=a("li"),zge=a("strong"),dqo=o("albert"),cqo=o(" \u2014 "),qO=a("a"),fqo=o("AlbertForMultipleChoice"),mqo=o(" (ALBERT model)"),gqo=l(),o2=a("li"),Wge=a("strong"),hqo=o("bert"),pqo=o(" \u2014 "),jO=a("a"),_qo=o("BertForMultipleChoice"),uqo=o(" (BERT model)"),bqo=l(),r2=a("li"),Qge=a("strong"),vqo=o("big_bird"),Fqo=o(" \u2014 "),DO=a("a"),Tqo=o("BigBirdForMultipleChoice"),Mqo=o(" (BigBird model)"),Eqo=l(),t2=a("li"),Hge=a("strong"),Cqo=o("camembert"),wqo=o(" \u2014 "),GO=a("a"),Aqo=o("CamembertForMultipleChoice"),Lqo=o(" (CamemBERT model)"),yqo=l(),a2=a("li"),Uge=a("strong"),xqo=o("canine"),$qo=o(" \u2014 "),OO=a("a"),kqo=o("CanineForMultipleChoice"),Sqo=o(" (CANINE model)"),Rqo=l(),n2=a("li"),Jge=a("strong"),Pqo=o("convbert"),Bqo=o(" \u2014 "),VO=a("a"),Iqo=o("ConvBertForMultipleChoice"),Nqo=o(" (ConvBERT model)"),qqo=l(),s2=a("li"),Yge=a("strong"),jqo=o("data2vec-text"),Dqo=o(" \u2014 "),XO=a("a"),Gqo=o("Data2VecTextForMultipleChoice"),Oqo=o(" (Data2VecText model)"),Vqo=l(),l2=a("li"),Kge=a("strong"),Xqo=o("deberta-v2"),zqo=o(" \u2014 "),zO=a("a"),Wqo=o("DebertaV2ForMultipleChoice"),Qqo=o(" (DeBERTa-v2 model)"),Hqo=l(),i2=a("li"),Zge=a("strong"),Uqo=o("distilbert"),Jqo=o(" \u2014 "),WO=a("a"),Yqo=o("DistilBertForMultipleChoice"),Kqo=o(" (DistilBERT model)"),Zqo=l(),d2=a("li"),ehe=a("strong"),ejo=o("electra"),ojo=o(" \u2014 "),QO=a("a"),rjo=o("ElectraForMultipleChoice"),tjo=o(" (ELECTRA model)"),ajo=l(),c2=a("li"),ohe=a("strong"),njo=o("flaubert"),sjo=o(" \u2014 "),HO=a("a"),ljo=o("FlaubertForMultipleChoice"),ijo=o(" (FlauBERT model)"),djo=l(),f2=a("li"),rhe=a("strong"),cjo=o("fnet"),fjo=o(" \u2014 "),UO=a("a"),mjo=o("FNetForMultipleChoice"),gjo=o(" (FNet model)"),hjo=l(),m2=a("li"),the=a("strong"),pjo=o("funnel"),_jo=o(" \u2014 "),JO=a("a"),ujo=o("FunnelForMultipleChoice"),bjo=o(" (Funnel Transformer model)"),vjo=l(),g2=a("li"),ahe=a("strong"),Fjo=o("ibert"),Tjo=o(" \u2014 "),YO=a("a"),Mjo=o("IBertForMultipleChoice"),Ejo=o(" (I-BERT model)"),Cjo=l(),h2=a("li"),nhe=a("strong"),wjo=o("longformer"),Ajo=o(" \u2014 "),KO=a("a"),Ljo=o("LongformerForMultipleChoice"),yjo=o(" (Longformer model)"),xjo=l(),p2=a("li"),she=a("strong"),$jo=o("megatron-bert"),kjo=o(" \u2014 "),ZO=a("a"),Sjo=o("MegatronBertForMultipleChoice"),Rjo=o(" (Megatron-BERT model)"),Pjo=l(),_2=a("li"),lhe=a("strong"),Bjo=o("mobilebert"),Ijo=o(" \u2014 "),eV=a("a"),Njo=o("MobileBertForMultipleChoice"),qjo=o(" (MobileBERT model)"),jjo=l(),u2=a("li"),ihe=a("strong"),Djo=o("mpnet"),Gjo=o(" \u2014 "),oV=a("a"),Ojo=o("MPNetForMultipleChoice"),Vjo=o(" (MPNet model)"),Xjo=l(),b2=a("li"),dhe=a("strong"),zjo=o("nystromformer"),Wjo=o(" \u2014 "),rV=a("a"),Qjo=o("NystromformerForMultipleChoice"),Hjo=o(" (Nystr\xF6mformer model)"),Ujo=l(),v2=a("li"),che=a("strong"),Jjo=o("qdqbert"),Yjo=o(" \u2014 "),tV=a("a"),Kjo=o("QDQBertForMultipleChoice"),Zjo=o(" (QDQBert model)"),eDo=l(),F2=a("li"),fhe=a("strong"),oDo=o("rembert"),rDo=o(" \u2014 "),aV=a("a"),tDo=o("RemBertForMultipleChoice"),aDo=o(" (RemBERT model)"),nDo=l(),T2=a("li"),mhe=a("strong"),sDo=o("roberta"),lDo=o(" \u2014 "),nV=a("a"),iDo=o("RobertaForMultipleChoice"),dDo=o(" (RoBERTa model)"),cDo=l(),M2=a("li"),ghe=a("strong"),fDo=o("roformer"),mDo=o(" \u2014 "),sV=a("a"),gDo=o("RoFormerForMultipleChoice"),hDo=o(" (RoFormer model)"),pDo=l(),E2=a("li"),hhe=a("strong"),_Do=o("squeezebert"),uDo=o(" \u2014 "),lV=a("a"),bDo=o("SqueezeBertForMultipleChoice"),vDo=o(" (SqueezeBERT model)"),FDo=l(),C2=a("li"),phe=a("strong"),TDo=o("xlm"),MDo=o(" \u2014 "),iV=a("a"),EDo=o("XLMForMultipleChoice"),CDo=o(" (XLM model)"),wDo=l(),w2=a("li"),_he=a("strong"),ADo=o("xlm-roberta"),LDo=o(" \u2014 "),dV=a("a"),yDo=o("XLMRobertaForMultipleChoice"),xDo=o(" (XLM-RoBERTa model)"),$Do=l(),A2=a("li"),uhe=a("strong"),kDo=o("xlm-roberta-xl"),SDo=o(" \u2014 "),cV=a("a"),RDo=o("XLMRobertaXLForMultipleChoice"),PDo=o(" (XLM-RoBERTa-XL model)"),BDo=l(),L2=a("li"),bhe=a("strong"),IDo=o("xlnet"),NDo=o(" \u2014 "),fV=a("a"),qDo=o("XLNetForMultipleChoice"),jDo=o(" (XLNet model)"),DDo=l(),y2=a("li"),vhe=a("strong"),GDo=o("yoso"),ODo=o(" \u2014 "),mV=a("a"),VDo=o("YosoForMultipleChoice"),XDo=o(" (YOSO model)"),zDo=l(),x2=a("p"),WDo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),QDo=o("model.eval()"),HDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),UDo=o("model.train()"),JDo=l(),F($2.$$.fragment),Kje=l(),Hi=a("h2"),k2=a("a"),Mhe=a("span"),F(ey.$$.fragment),YDo=l(),Ehe=a("span"),KDo=o("AutoModelForNextSentencePrediction"),Zje=l(),Bo=a("div"),F(oy.$$.fragment),ZDo=l(),Ui=a("p"),eGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gV=a("a"),oGo=o("from_pretrained()"),rGo=o(" class method or the "),hV=a("a"),tGo=o("from_config()"),aGo=o(` class
method.`),nGo=l(),ry=a("p"),sGo=o("This class cannot be instantiated directly using "),Che=a("code"),lGo=o("__init__()"),iGo=o(" (throws an error)."),dGo=l(),ft=a("div"),F(ty.$$.fragment),cGo=l(),whe=a("p"),fGo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mGo=l(),Ji=a("p"),gGo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),hGo=o("not"),pGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),_Go=o("from_pretrained()"),uGo=o(" to load the model weights."),bGo=l(),F(S2.$$.fragment),vGo=l(),to=a("div"),F(ay.$$.fragment),FGo=l(),Lhe=a("p"),TGo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MGo=l(),Ia=a("p"),EGo=o("The model class to instantiate is selected based on the "),yhe=a("code"),CGo=o("model_type"),wGo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),AGo=o("pretrained_model_name_or_path"),LGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),yGo=o("pretrained_model_name_or_path"),xGo=o(":"),$Go=l(),Yr=a("ul"),R2=a("li"),khe=a("strong"),kGo=o("bert"),SGo=o(" \u2014 "),_V=a("a"),RGo=o("BertForNextSentencePrediction"),PGo=o(" (BERT model)"),BGo=l(),P2=a("li"),She=a("strong"),IGo=o("fnet"),NGo=o(" \u2014 "),uV=a("a"),qGo=o("FNetForNextSentencePrediction"),jGo=o(" (FNet model)"),DGo=l(),B2=a("li"),Rhe=a("strong"),GGo=o("megatron-bert"),OGo=o(" \u2014 "),bV=a("a"),VGo=o("MegatronBertForNextSentencePrediction"),XGo=o(" (Megatron-BERT model)"),zGo=l(),I2=a("li"),Phe=a("strong"),WGo=o("mobilebert"),QGo=o(" \u2014 "),vV=a("a"),HGo=o("MobileBertForNextSentencePrediction"),UGo=o(" (MobileBERT model)"),JGo=l(),N2=a("li"),Bhe=a("strong"),YGo=o("qdqbert"),KGo=o(" \u2014 "),FV=a("a"),ZGo=o("QDQBertForNextSentencePrediction"),eOo=o(" (QDQBert model)"),oOo=l(),q2=a("p"),rOo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),tOo=o("model.eval()"),aOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),nOo=o("model.train()"),sOo=l(),F(j2.$$.fragment),eDe=l(),Yi=a("h2"),D2=a("a"),qhe=a("span"),F(ny.$$.fragment),lOo=l(),jhe=a("span"),iOo=o("AutoModelForTokenClassification"),oDe=l(),Io=a("div"),F(sy.$$.fragment),dOo=l(),Ki=a("p"),cOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TV=a("a"),fOo=o("from_pretrained()"),mOo=o(" class method or the "),MV=a("a"),gOo=o("from_config()"),hOo=o(` class
method.`),pOo=l(),ly=a("p"),_Oo=o("This class cannot be instantiated directly using "),Dhe=a("code"),uOo=o("__init__()"),bOo=o(" (throws an error)."),vOo=l(),mt=a("div"),F(iy.$$.fragment),FOo=l(),Ghe=a("p"),TOo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MOo=l(),Zi=a("p"),EOo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),COo=o("not"),wOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),AOo=o("from_pretrained()"),LOo=o(" to load the model weights."),yOo=l(),F(G2.$$.fragment),xOo=l(),ao=a("div"),F(dy.$$.fragment),$Oo=l(),Vhe=a("p"),kOo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SOo=l(),Na=a("p"),ROo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),POo=o("model_type"),BOo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),IOo=o("pretrained_model_name_or_path"),NOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),qOo=o("pretrained_model_name_or_path"),jOo=o(":"),DOo=l(),U=a("ul"),O2=a("li"),Qhe=a("strong"),GOo=o("albert"),OOo=o(" \u2014 "),CV=a("a"),VOo=o("AlbertForTokenClassification"),XOo=o(" (ALBERT model)"),zOo=l(),V2=a("li"),Hhe=a("strong"),WOo=o("bert"),QOo=o(" \u2014 "),wV=a("a"),HOo=o("BertForTokenClassification"),UOo=o(" (BERT model)"),JOo=l(),X2=a("li"),Uhe=a("strong"),YOo=o("big_bird"),KOo=o(" \u2014 "),AV=a("a"),ZOo=o("BigBirdForTokenClassification"),eVo=o(" (BigBird model)"),oVo=l(),z2=a("li"),Jhe=a("strong"),rVo=o("camembert"),tVo=o(" \u2014 "),LV=a("a"),aVo=o("CamembertForTokenClassification"),nVo=o(" (CamemBERT model)"),sVo=l(),W2=a("li"),Yhe=a("strong"),lVo=o("canine"),iVo=o(" \u2014 "),yV=a("a"),dVo=o("CanineForTokenClassification"),cVo=o(" (CANINE model)"),fVo=l(),Q2=a("li"),Khe=a("strong"),mVo=o("convbert"),gVo=o(" \u2014 "),xV=a("a"),hVo=o("ConvBertForTokenClassification"),pVo=o(" (ConvBERT model)"),_Vo=l(),H2=a("li"),Zhe=a("strong"),uVo=o("data2vec-text"),bVo=o(" \u2014 "),$V=a("a"),vVo=o("Data2VecTextForTokenClassification"),FVo=o(" (Data2VecText model)"),TVo=l(),U2=a("li"),epe=a("strong"),MVo=o("deberta"),EVo=o(" \u2014 "),kV=a("a"),CVo=o("DebertaForTokenClassification"),wVo=o(" (DeBERTa model)"),AVo=l(),J2=a("li"),ope=a("strong"),LVo=o("deberta-v2"),yVo=o(" \u2014 "),SV=a("a"),xVo=o("DebertaV2ForTokenClassification"),$Vo=o(" (DeBERTa-v2 model)"),kVo=l(),Y2=a("li"),rpe=a("strong"),SVo=o("distilbert"),RVo=o(" \u2014 "),RV=a("a"),PVo=o("DistilBertForTokenClassification"),BVo=o(" (DistilBERT model)"),IVo=l(),K2=a("li"),tpe=a("strong"),NVo=o("electra"),qVo=o(" \u2014 "),PV=a("a"),jVo=o("ElectraForTokenClassification"),DVo=o(" (ELECTRA model)"),GVo=l(),Z2=a("li"),ape=a("strong"),OVo=o("flaubert"),VVo=o(" \u2014 "),BV=a("a"),XVo=o("FlaubertForTokenClassification"),zVo=o(" (FlauBERT model)"),WVo=l(),e4=a("li"),npe=a("strong"),QVo=o("fnet"),HVo=o(" \u2014 "),IV=a("a"),UVo=o("FNetForTokenClassification"),JVo=o(" (FNet model)"),YVo=l(),o4=a("li"),spe=a("strong"),KVo=o("funnel"),ZVo=o(" \u2014 "),NV=a("a"),eXo=o("FunnelForTokenClassification"),oXo=o(" (Funnel Transformer model)"),rXo=l(),r4=a("li"),lpe=a("strong"),tXo=o("gpt2"),aXo=o(" \u2014 "),qV=a("a"),nXo=o("GPT2ForTokenClassification"),sXo=o(" (OpenAI GPT-2 model)"),lXo=l(),t4=a("li"),ipe=a("strong"),iXo=o("ibert"),dXo=o(" \u2014 "),jV=a("a"),cXo=o("IBertForTokenClassification"),fXo=o(" (I-BERT model)"),mXo=l(),a4=a("li"),dpe=a("strong"),gXo=o("layoutlm"),hXo=o(" \u2014 "),DV=a("a"),pXo=o("LayoutLMForTokenClassification"),_Xo=o(" (LayoutLM model)"),uXo=l(),n4=a("li"),cpe=a("strong"),bXo=o("layoutlmv2"),vXo=o(" \u2014 "),GV=a("a"),FXo=o("LayoutLMv2ForTokenClassification"),TXo=o(" (LayoutLMv2 model)"),MXo=l(),s4=a("li"),fpe=a("strong"),EXo=o("layoutlmv3"),CXo=o(" \u2014 "),OV=a("a"),wXo=o("LayoutLMv3ForTokenClassification"),AXo=o(" (LayoutLMv3 model)"),LXo=l(),l4=a("li"),mpe=a("strong"),yXo=o("longformer"),xXo=o(" \u2014 "),VV=a("a"),$Xo=o("LongformerForTokenClassification"),kXo=o(" (Longformer model)"),SXo=l(),i4=a("li"),gpe=a("strong"),RXo=o("megatron-bert"),PXo=o(" \u2014 "),XV=a("a"),BXo=o("MegatronBertForTokenClassification"),IXo=o(" (Megatron-BERT model)"),NXo=l(),d4=a("li"),hpe=a("strong"),qXo=o("mobilebert"),jXo=o(" \u2014 "),zV=a("a"),DXo=o("MobileBertForTokenClassification"),GXo=o(" (MobileBERT model)"),OXo=l(),c4=a("li"),ppe=a("strong"),VXo=o("mpnet"),XXo=o(" \u2014 "),WV=a("a"),zXo=o("MPNetForTokenClassification"),WXo=o(" (MPNet model)"),QXo=l(),f4=a("li"),_pe=a("strong"),HXo=o("nystromformer"),UXo=o(" \u2014 "),QV=a("a"),JXo=o("NystromformerForTokenClassification"),YXo=o(" (Nystr\xF6mformer model)"),KXo=l(),m4=a("li"),upe=a("strong"),ZXo=o("qdqbert"),ezo=o(" \u2014 "),HV=a("a"),ozo=o("QDQBertForTokenClassification"),rzo=o(" (QDQBert model)"),tzo=l(),g4=a("li"),bpe=a("strong"),azo=o("rembert"),nzo=o(" \u2014 "),UV=a("a"),szo=o("RemBertForTokenClassification"),lzo=o(" (RemBERT model)"),izo=l(),h4=a("li"),vpe=a("strong"),dzo=o("roberta"),czo=o(" \u2014 "),JV=a("a"),fzo=o("RobertaForTokenClassification"),mzo=o(" (RoBERTa model)"),gzo=l(),p4=a("li"),Fpe=a("strong"),hzo=o("roformer"),pzo=o(" \u2014 "),YV=a("a"),_zo=o("RoFormerForTokenClassification"),uzo=o(" (RoFormer model)"),bzo=l(),_4=a("li"),Tpe=a("strong"),vzo=o("squeezebert"),Fzo=o(" \u2014 "),KV=a("a"),Tzo=o("SqueezeBertForTokenClassification"),Mzo=o(" (SqueezeBERT model)"),Ezo=l(),u4=a("li"),Mpe=a("strong"),Czo=o("xlm"),wzo=o(" \u2014 "),ZV=a("a"),Azo=o("XLMForTokenClassification"),Lzo=o(" (XLM model)"),yzo=l(),b4=a("li"),Epe=a("strong"),xzo=o("xlm-roberta"),$zo=o(" \u2014 "),eX=a("a"),kzo=o("XLMRobertaForTokenClassification"),Szo=o(" (XLM-RoBERTa model)"),Rzo=l(),v4=a("li"),Cpe=a("strong"),Pzo=o("xlm-roberta-xl"),Bzo=o(" \u2014 "),oX=a("a"),Izo=o("XLMRobertaXLForTokenClassification"),Nzo=o(" (XLM-RoBERTa-XL model)"),qzo=l(),F4=a("li"),wpe=a("strong"),jzo=o("xlnet"),Dzo=o(" \u2014 "),rX=a("a"),Gzo=o("XLNetForTokenClassification"),Ozo=o(" (XLNet model)"),Vzo=l(),T4=a("li"),Ape=a("strong"),Xzo=o("yoso"),zzo=o(" \u2014 "),tX=a("a"),Wzo=o("YosoForTokenClassification"),Qzo=o(" (YOSO model)"),Hzo=l(),M4=a("p"),Uzo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),Jzo=o("model.eval()"),Yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),Kzo=o("model.train()"),Zzo=l(),F(E4.$$.fragment),rDe=l(),ed=a("h2"),C4=a("a"),xpe=a("span"),F(cy.$$.fragment),eWo=l(),$pe=a("span"),oWo=o("AutoModelForQuestionAnswering"),tDe=l(),No=a("div"),F(fy.$$.fragment),rWo=l(),od=a("p"),tWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aX=a("a"),aWo=o("from_pretrained()"),nWo=o(" class method or the "),nX=a("a"),sWo=o("from_config()"),lWo=o(` class
method.`),iWo=l(),my=a("p"),dWo=o("This class cannot be instantiated directly using "),kpe=a("code"),cWo=o("__init__()"),fWo=o(" (throws an error)."),mWo=l(),gt=a("div"),F(gy.$$.fragment),gWo=l(),Spe=a("p"),hWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pWo=l(),rd=a("p"),_Wo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),uWo=o("not"),bWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),vWo=o("from_pretrained()"),FWo=o(" to load the model weights."),TWo=l(),F(w4.$$.fragment),MWo=l(),no=a("div"),F(hy.$$.fragment),EWo=l(),Ppe=a("p"),CWo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wWo=l(),qa=a("p"),AWo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),LWo=o("model_type"),yWo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),xWo=o("pretrained_model_name_or_path"),$Wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),kWo=o("pretrained_model_name_or_path"),SWo=o(":"),RWo=l(),V=a("ul"),A4=a("li"),qpe=a("strong"),PWo=o("albert"),BWo=o(" \u2014 "),lX=a("a"),IWo=o("AlbertForQuestionAnswering"),NWo=o(" (ALBERT model)"),qWo=l(),L4=a("li"),jpe=a("strong"),jWo=o("bart"),DWo=o(" \u2014 "),iX=a("a"),GWo=o("BartForQuestionAnswering"),OWo=o(" (BART model)"),VWo=l(),y4=a("li"),Dpe=a("strong"),XWo=o("bert"),zWo=o(" \u2014 "),dX=a("a"),WWo=o("BertForQuestionAnswering"),QWo=o(" (BERT model)"),HWo=l(),x4=a("li"),Gpe=a("strong"),UWo=o("big_bird"),JWo=o(" \u2014 "),cX=a("a"),YWo=o("BigBirdForQuestionAnswering"),KWo=o(" (BigBird model)"),ZWo=l(),$4=a("li"),Ope=a("strong"),eQo=o("bigbird_pegasus"),oQo=o(" \u2014 "),fX=a("a"),rQo=o("BigBirdPegasusForQuestionAnswering"),tQo=o(" (BigBird-Pegasus model)"),aQo=l(),k4=a("li"),Vpe=a("strong"),nQo=o("camembert"),sQo=o(" \u2014 "),mX=a("a"),lQo=o("CamembertForQuestionAnswering"),iQo=o(" (CamemBERT model)"),dQo=l(),S4=a("li"),Xpe=a("strong"),cQo=o("canine"),fQo=o(" \u2014 "),gX=a("a"),mQo=o("CanineForQuestionAnswering"),gQo=o(" (CANINE model)"),hQo=l(),R4=a("li"),zpe=a("strong"),pQo=o("convbert"),_Qo=o(" \u2014 "),hX=a("a"),uQo=o("ConvBertForQuestionAnswering"),bQo=o(" (ConvBERT model)"),vQo=l(),P4=a("li"),Wpe=a("strong"),FQo=o("data2vec-text"),TQo=o(" \u2014 "),pX=a("a"),MQo=o("Data2VecTextForQuestionAnswering"),EQo=o(" (Data2VecText model)"),CQo=l(),B4=a("li"),Qpe=a("strong"),wQo=o("deberta"),AQo=o(" \u2014 "),_X=a("a"),LQo=o("DebertaForQuestionAnswering"),yQo=o(" (DeBERTa model)"),xQo=l(),I4=a("li"),Hpe=a("strong"),$Qo=o("deberta-v2"),kQo=o(" \u2014 "),uX=a("a"),SQo=o("DebertaV2ForQuestionAnswering"),RQo=o(" (DeBERTa-v2 model)"),PQo=l(),N4=a("li"),Upe=a("strong"),BQo=o("distilbert"),IQo=o(" \u2014 "),bX=a("a"),NQo=o("DistilBertForQuestionAnswering"),qQo=o(" (DistilBERT model)"),jQo=l(),q4=a("li"),Jpe=a("strong"),DQo=o("electra"),GQo=o(" \u2014 "),vX=a("a"),OQo=o("ElectraForQuestionAnswering"),VQo=o(" (ELECTRA model)"),XQo=l(),j4=a("li"),Ype=a("strong"),zQo=o("flaubert"),WQo=o(" \u2014 "),FX=a("a"),QQo=o("FlaubertForQuestionAnsweringSimple"),HQo=o(" (FlauBERT model)"),UQo=l(),D4=a("li"),Kpe=a("strong"),JQo=o("fnet"),YQo=o(" \u2014 "),TX=a("a"),KQo=o("FNetForQuestionAnswering"),ZQo=o(" (FNet model)"),eHo=l(),G4=a("li"),Zpe=a("strong"),oHo=o("funnel"),rHo=o(" \u2014 "),MX=a("a"),tHo=o("FunnelForQuestionAnswering"),aHo=o(" (Funnel Transformer model)"),nHo=l(),O4=a("li"),e_e=a("strong"),sHo=o("gptj"),lHo=o(" \u2014 "),EX=a("a"),iHo=o("GPTJForQuestionAnswering"),dHo=o(" (GPT-J model)"),cHo=l(),V4=a("li"),o_e=a("strong"),fHo=o("ibert"),mHo=o(" \u2014 "),CX=a("a"),gHo=o("IBertForQuestionAnswering"),hHo=o(" (I-BERT model)"),pHo=l(),X4=a("li"),r_e=a("strong"),_Ho=o("layoutlmv2"),uHo=o(" \u2014 "),wX=a("a"),bHo=o("LayoutLMv2ForQuestionAnswering"),vHo=o(" (LayoutLMv2 model)"),FHo=l(),z4=a("li"),t_e=a("strong"),THo=o("layoutlmv3"),MHo=o(" \u2014 "),AX=a("a"),EHo=o("LayoutLMv3ForQuestionAnswering"),CHo=o(" (LayoutLMv3 model)"),wHo=l(),W4=a("li"),a_e=a("strong"),AHo=o("led"),LHo=o(" \u2014 "),LX=a("a"),yHo=o("LEDForQuestionAnswering"),xHo=o(" (LED model)"),$Ho=l(),Q4=a("li"),n_e=a("strong"),kHo=o("longformer"),SHo=o(" \u2014 "),yX=a("a"),RHo=o("LongformerForQuestionAnswering"),PHo=o(" (Longformer model)"),BHo=l(),H4=a("li"),s_e=a("strong"),IHo=o("lxmert"),NHo=o(" \u2014 "),xX=a("a"),qHo=o("LxmertForQuestionAnswering"),jHo=o(" (LXMERT model)"),DHo=l(),U4=a("li"),l_e=a("strong"),GHo=o("mbart"),OHo=o(" \u2014 "),$X=a("a"),VHo=o("MBartForQuestionAnswering"),XHo=o(" (mBART model)"),zHo=l(),J4=a("li"),i_e=a("strong"),WHo=o("megatron-bert"),QHo=o(" \u2014 "),kX=a("a"),HHo=o("MegatronBertForQuestionAnswering"),UHo=o(" (Megatron-BERT model)"),JHo=l(),Y4=a("li"),d_e=a("strong"),YHo=o("mobilebert"),KHo=o(" \u2014 "),SX=a("a"),ZHo=o("MobileBertForQuestionAnswering"),eUo=o(" (MobileBERT model)"),oUo=l(),K4=a("li"),c_e=a("strong"),rUo=o("mpnet"),tUo=o(" \u2014 "),RX=a("a"),aUo=o("MPNetForQuestionAnswering"),nUo=o(" (MPNet model)"),sUo=l(),Z4=a("li"),f_e=a("strong"),lUo=o("nystromformer"),iUo=o(" \u2014 "),PX=a("a"),dUo=o("NystromformerForQuestionAnswering"),cUo=o(" (Nystr\xF6mformer model)"),fUo=l(),ev=a("li"),m_e=a("strong"),mUo=o("qdqbert"),gUo=o(" \u2014 "),BX=a("a"),hUo=o("QDQBertForQuestionAnswering"),pUo=o(" (QDQBert model)"),_Uo=l(),ov=a("li"),g_e=a("strong"),uUo=o("reformer"),bUo=o(" \u2014 "),IX=a("a"),vUo=o("ReformerForQuestionAnswering"),FUo=o(" (Reformer model)"),TUo=l(),rv=a("li"),h_e=a("strong"),MUo=o("rembert"),EUo=o(" \u2014 "),NX=a("a"),CUo=o("RemBertForQuestionAnswering"),wUo=o(" (RemBERT model)"),AUo=l(),tv=a("li"),p_e=a("strong"),LUo=o("roberta"),yUo=o(" \u2014 "),qX=a("a"),xUo=o("RobertaForQuestionAnswering"),$Uo=o(" (RoBERTa model)"),kUo=l(),av=a("li"),__e=a("strong"),SUo=o("roformer"),RUo=o(" \u2014 "),jX=a("a"),PUo=o("RoFormerForQuestionAnswering"),BUo=o(" (RoFormer model)"),IUo=l(),nv=a("li"),u_e=a("strong"),NUo=o("splinter"),qUo=o(" \u2014 "),DX=a("a"),jUo=o("SplinterForQuestionAnswering"),DUo=o(" (Splinter model)"),GUo=l(),sv=a("li"),b_e=a("strong"),OUo=o("squeezebert"),VUo=o(" \u2014 "),GX=a("a"),XUo=o("SqueezeBertForQuestionAnswering"),zUo=o(" (SqueezeBERT model)"),WUo=l(),lv=a("li"),v_e=a("strong"),QUo=o("xlm"),HUo=o(" \u2014 "),OX=a("a"),UUo=o("XLMForQuestionAnsweringSimple"),JUo=o(" (XLM model)"),YUo=l(),iv=a("li"),F_e=a("strong"),KUo=o("xlm-roberta"),ZUo=o(" \u2014 "),VX=a("a"),eJo=o("XLMRobertaForQuestionAnswering"),oJo=o(" (XLM-RoBERTa model)"),rJo=l(),dv=a("li"),T_e=a("strong"),tJo=o("xlm-roberta-xl"),aJo=o(" \u2014 "),XX=a("a"),nJo=o("XLMRobertaXLForQuestionAnswering"),sJo=o(" (XLM-RoBERTa-XL model)"),lJo=l(),cv=a("li"),M_e=a("strong"),iJo=o("xlnet"),dJo=o(" \u2014 "),zX=a("a"),cJo=o("XLNetForQuestionAnsweringSimple"),fJo=o(" (XLNet model)"),mJo=l(),fv=a("li"),E_e=a("strong"),gJo=o("yoso"),hJo=o(" \u2014 "),WX=a("a"),pJo=o("YosoForQuestionAnswering"),_Jo=o(" (YOSO model)"),uJo=l(),mv=a("p"),bJo=o("The model is set in evaluation mode by default using "),C_e=a("code"),vJo=o("model.eval()"),FJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),TJo=o("model.train()"),MJo=l(),F(gv.$$.fragment),aDe=l(),td=a("h2"),hv=a("a"),A_e=a("span"),F(py.$$.fragment),EJo=l(),L_e=a("span"),CJo=o("AutoModelForTableQuestionAnswering"),nDe=l(),qo=a("div"),F(_y.$$.fragment),wJo=l(),ad=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QX=a("a"),LJo=o("from_pretrained()"),yJo=o(" class method or the "),HX=a("a"),xJo=o("from_config()"),$Jo=o(` class
method.`),kJo=l(),uy=a("p"),SJo=o("This class cannot be instantiated directly using "),y_e=a("code"),RJo=o("__init__()"),PJo=o(" (throws an error)."),BJo=l(),ht=a("div"),F(by.$$.fragment),IJo=l(),x_e=a("p"),NJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qJo=l(),nd=a("p"),jJo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),DJo=o("not"),GJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),OJo=o("from_pretrained()"),VJo=o(" to load the model weights."),XJo=l(),F(pv.$$.fragment),zJo=l(),so=a("div"),F(vy.$$.fragment),WJo=l(),k_e=a("p"),QJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HJo=l(),ja=a("p"),UJo=o("The model class to instantiate is selected based on the "),S_e=a("code"),JJo=o("model_type"),YJo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(":"),rYo=l(),B_e=a("ul"),_v=a("li"),I_e=a("strong"),tYo=o("tapas"),aYo=o(" \u2014 "),JX=a("a"),nYo=o("TapasForQuestionAnswering"),sYo=o(" (TAPAS model)"),lYo=l(),uv=a("p"),iYo=o("The model is set in evaluation mode by default using "),N_e=a("code"),dYo=o("model.eval()"),cYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),fYo=o("model.train()"),mYo=l(),F(bv.$$.fragment),sDe=l(),sd=a("h2"),vv=a("a"),j_e=a("span"),F(Fy.$$.fragment),gYo=l(),D_e=a("span"),hYo=o("AutoModelForImageClassification"),lDe=l(),jo=a("div"),F(Ty.$$.fragment),pYo=l(),ld=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YX=a("a"),uYo=o("from_pretrained()"),bYo=o(" class method or the "),KX=a("a"),vYo=o("from_config()"),FYo=o(` class
method.`),TYo=l(),My=a("p"),MYo=o("This class cannot be instantiated directly using "),G_e=a("code"),EYo=o("__init__()"),CYo=o(" (throws an error)."),wYo=l(),pt=a("div"),F(Ey.$$.fragment),AYo=l(),O_e=a("p"),LYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yYo=l(),id=a("p"),xYo=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),$Yo=o("not"),kYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),SYo=o("from_pretrained()"),RYo=o(" to load the model weights."),PYo=l(),F(Fv.$$.fragment),BYo=l(),lo=a("div"),F(Cy.$$.fragment),IYo=l(),X_e=a("p"),NYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qYo=l(),Da=a("p"),jYo=o("The model class to instantiate is selected based on the "),z_e=a("code"),DYo=o("model_type"),GYo=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),OYo=o("pretrained_model_name_or_path"),VYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),XYo=o("pretrained_model_name_or_path"),zYo=o(":"),WYo=l(),ve=a("ul"),Tv=a("li"),H_e=a("strong"),QYo=o("beit"),HYo=o(" \u2014 "),ez=a("a"),UYo=o("BeitForImageClassification"),JYo=o(" (BEiT model)"),YYo=l(),Mv=a("li"),U_e=a("strong"),KYo=o("convnext"),ZYo=o(" \u2014 "),oz=a("a"),eKo=o("ConvNextForImageClassification"),oKo=o(" (ConvNeXT model)"),rKo=l(),Ev=a("li"),J_e=a("strong"),tKo=o("cvt"),aKo=o(" \u2014 "),rz=a("a"),nKo=o("CvtForImageClassification"),sKo=o(" (CvT model)"),lKo=l(),Cv=a("li"),Y_e=a("strong"),iKo=o("data2vec-vision"),dKo=o(" \u2014 "),tz=a("a"),cKo=o("Data2VecVisionForImageClassification"),fKo=o(" (Data2VecVision model)"),mKo=l(),Bs=a("li"),K_e=a("strong"),gKo=o("deit"),hKo=o(" \u2014 "),az=a("a"),pKo=o("DeiTForImageClassification"),_Ko=o(" or "),nz=a("a"),uKo=o("DeiTForImageClassificationWithTeacher"),bKo=o(" (DeiT model)"),vKo=l(),wv=a("li"),Z_e=a("strong"),FKo=o("imagegpt"),TKo=o(" \u2014 "),sz=a("a"),MKo=o("ImageGPTForImageClassification"),EKo=o(" (ImageGPT model)"),CKo=l(),Is=a("li"),eue=a("strong"),wKo=o("levit"),AKo=o(" \u2014 "),lz=a("a"),LKo=o("LevitForImageClassification"),yKo=o(" or "),iz=a("a"),xKo=o("LevitForImageClassificationWithTeacher"),$Ko=o(" (LeViT model)"),kKo=l(),_t=a("li"),oue=a("strong"),SKo=o("perceiver"),RKo=o(" \u2014 "),dz=a("a"),PKo=o("PerceiverForImageClassificationLearned"),BKo=o(" or "),cz=a("a"),IKo=o("PerceiverForImageClassificationFourier"),NKo=o(" or "),fz=a("a"),qKo=o("PerceiverForImageClassificationConvProcessing"),jKo=o(" (Perceiver model)"),DKo=l(),Av=a("li"),rue=a("strong"),GKo=o("poolformer"),OKo=o(" \u2014 "),mz=a("a"),VKo=o("PoolFormerForImageClassification"),XKo=o(" (PoolFormer model)"),zKo=l(),Lv=a("li"),tue=a("strong"),WKo=o("regnet"),QKo=o(" \u2014 "),gz=a("a"),HKo=o("RegNetForImageClassification"),UKo=o(" (RegNet model)"),JKo=l(),yv=a("li"),aue=a("strong"),YKo=o("resnet"),KKo=o(" \u2014 "),hz=a("a"),ZKo=o("ResNetForImageClassification"),eZo=o(" (ResNet model)"),oZo=l(),xv=a("li"),nue=a("strong"),rZo=o("segformer"),tZo=o(" \u2014 "),pz=a("a"),aZo=o("SegformerForImageClassification"),nZo=o(" (SegFormer model)"),sZo=l(),$v=a("li"),sue=a("strong"),lZo=o("swin"),iZo=o(" \u2014 "),_z=a("a"),dZo=o("SwinForImageClassification"),cZo=o(" (Swin Transformer model)"),fZo=l(),kv=a("li"),lue=a("strong"),mZo=o("van"),gZo=o(" \u2014 "),uz=a("a"),hZo=o("VanForImageClassification"),pZo=o(" (VAN model)"),_Zo=l(),Sv=a("li"),iue=a("strong"),uZo=o("vit"),bZo=o(" \u2014 "),bz=a("a"),vZo=o("ViTForImageClassification"),FZo=o(" (ViT model)"),TZo=l(),Rv=a("p"),MZo=o("The model is set in evaluation mode by default using "),due=a("code"),EZo=o("model.eval()"),CZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),wZo=o("model.train()"),AZo=l(),F(Pv.$$.fragment),iDe=l(),dd=a("h2"),Bv=a("a"),fue=a("span"),F(wy.$$.fragment),LZo=l(),mue=a("span"),yZo=o("AutoModelForVision2Seq"),dDe=l(),Do=a("div"),F(Ay.$$.fragment),xZo=l(),cd=a("p"),$Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vz=a("a"),kZo=o("from_pretrained()"),SZo=o(" class method or the "),Fz=a("a"),RZo=o("from_config()"),PZo=o(` class
method.`),BZo=l(),Ly=a("p"),IZo=o("This class cannot be instantiated directly using "),gue=a("code"),NZo=o("__init__()"),qZo=o(" (throws an error)."),jZo=l(),ut=a("div"),F(yy.$$.fragment),DZo=l(),hue=a("p"),GZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OZo=l(),fd=a("p"),VZo=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),XZo=o("not"),zZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),WZo=o("from_pretrained()"),QZo=o(" to load the model weights."),HZo=l(),F(Iv.$$.fragment),UZo=l(),io=a("div"),F(xy.$$.fragment),JZo=l(),_ue=a("p"),YZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KZo=l(),Ga=a("p"),ZZo=o("The model class to instantiate is selected based on the "),uue=a("code"),eer=o("model_type"),oer=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(":"),ser=l(),Fue=a("ul"),Nv=a("li"),Tue=a("strong"),ler=o("vision-encoder-decoder"),ier=o(" \u2014 "),Mz=a("a"),der=o("VisionEncoderDecoderModel"),cer=o(" (Vision Encoder decoder model)"),fer=l(),qv=a("p"),mer=o("The model is set in evaluation mode by default using "),Mue=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),per=o("model.train()"),_er=l(),F(jv.$$.fragment),cDe=l(),md=a("h2"),Dv=a("a"),Cue=a("span"),F($y.$$.fragment),uer=l(),wue=a("span"),ber=o("AutoModelForAudioClassification"),fDe=l(),Go=a("div"),F(ky.$$.fragment),ver=l(),gd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ez=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),Cz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),Sy=a("p"),Aer=o("This class cannot be instantiated directly using "),Aue=a("code"),Ler=o("__init__()"),yer=o(" (throws an error)."),xer=l(),bt=a("div"),F(Ry.$$.fragment),$er=l(),Lue=a("p"),ker=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ser=l(),hd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),Ier=o("from_pretrained()"),Ner=o(" to load the model weights."),qer=l(),F(Gv.$$.fragment),jer=l(),co=a("div"),F(Py.$$.fragment),Der=l(),xue=a("p"),Ger=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Oer=l(),Oa=a("p"),Ver=o("The model class to instantiate is selected based on the "),$ue=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Re=a("ul"),Ov=a("li"),Rue=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),Az=a("a"),Zer=o("Data2VecAudioForSequenceClassification"),eor=o(" (Data2VecAudio model)"),oor=l(),Vv=a("li"),Pue=a("strong"),ror=o("hubert"),tor=o(" \u2014 "),Lz=a("a"),aor=o("HubertForSequenceClassification"),nor=o(" (Hubert model)"),sor=l(),Xv=a("li"),Bue=a("strong"),lor=o("sew"),ior=o(" \u2014 "),yz=a("a"),dor=o("SEWForSequenceClassification"),cor=o(" (SEW model)"),mor=l(),zv=a("li"),Iue=a("strong"),gor=o("sew-d"),hor=o(" \u2014 "),xz=a("a"),por=o("SEWDForSequenceClassification"),_or=o(" (SEW-D model)"),uor=l(),Wv=a("li"),Nue=a("strong"),bor=o("unispeech"),vor=o(" \u2014 "),$z=a("a"),For=o("UniSpeechForSequenceClassification"),Tor=o(" (UniSpeech model)"),Mor=l(),Qv=a("li"),que=a("strong"),Eor=o("unispeech-sat"),Cor=o(" \u2014 "),kz=a("a"),wor=o("UniSpeechSatForSequenceClassification"),Aor=o(" (UniSpeechSat model)"),Lor=l(),Hv=a("li"),jue=a("strong"),yor=o("wav2vec2"),xor=o(" \u2014 "),Sz=a("a"),$or=o("Wav2Vec2ForSequenceClassification"),kor=o(" (Wav2Vec2 model)"),Sor=l(),Uv=a("li"),Due=a("strong"),Ror=o("wav2vec2-conformer"),Por=o(" \u2014 "),Rz=a("a"),Bor=o("Wav2Vec2ConformerForSequenceClassification"),Ior=o(" (Wav2Vec2-Conformer model)"),Nor=l(),Jv=a("li"),Gue=a("strong"),qor=o("wavlm"),jor=o(" \u2014 "),Pz=a("a"),Dor=o("WavLMForSequenceClassification"),Gor=o(" (WavLM model)"),Oor=l(),Yv=a("p"),Vor=o("The model is set in evaluation mode by default using "),Oue=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),Wor=o("model.train()"),Qor=l(),F(Kv.$$.fragment),mDe=l(),pd=a("h2"),Zv=a("a"),Xue=a("span"),F(By.$$.fragment),Hor=l(),zue=a("span"),Uor=o("AutoModelForAudioFrameClassification"),gDe=l(),Oo=a("div"),F(Iy.$$.fragment),Jor=l(),_d=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Bz=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),Iz=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),Ny=a("p"),trr=o("This class cannot be instantiated directly using "),Wue=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),vt=a("div"),F(qy.$$.fragment),lrr=l(),Que=a("p"),irr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),drr=l(),ud=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),frr=o("not"),mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),prr=l(),F(eF.$$.fragment),_rr=l(),fo=a("div"),F(jy.$$.fragment),urr=l(),Uue=a("p"),brr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vrr=l(),Va=a("p"),Frr=o("The model class to instantiate is selected based on the "),Jue=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),Lrr=l(),Kr=a("ul"),oF=a("li"),Zue=a("strong"),yrr=o("data2vec-audio"),xrr=o(" \u2014 "),qz=a("a"),$rr=o("Data2VecAudioForAudioFrameClassification"),krr=o(" (Data2VecAudio model)"),Srr=l(),rF=a("li"),e5e=a("strong"),Rrr=o("unispeech-sat"),Prr=o(" \u2014 "),jz=a("a"),Brr=o("UniSpeechSatForAudioFrameClassification"),Irr=o(" (UniSpeechSat model)"),Nrr=l(),tF=a("li"),o5e=a("strong"),qrr=o("wav2vec2"),jrr=o(" \u2014 "),Dz=a("a"),Drr=o("Wav2Vec2ForAudioFrameClassification"),Grr=o(" (Wav2Vec2 model)"),Orr=l(),aF=a("li"),r5e=a("strong"),Vrr=o("wav2vec2-conformer"),Xrr=o(" \u2014 "),Gz=a("a"),zrr=o("Wav2Vec2ConformerForAudioFrameClassification"),Wrr=o(" (Wav2Vec2-Conformer model)"),Qrr=l(),nF=a("li"),t5e=a("strong"),Hrr=o("wavlm"),Urr=o(" \u2014 "),Oz=a("a"),Jrr=o("WavLMForAudioFrameClassification"),Yrr=o(" (WavLM model)"),Krr=l(),sF=a("p"),Zrr=o("The model is set in evaluation mode by default using "),a5e=a("code"),etr=o("model.eval()"),otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n5e=a("code"),rtr=o("model.train()"),ttr=l(),F(lF.$$.fragment),hDe=l(),bd=a("h2"),iF=a("a"),s5e=a("span"),F(Dy.$$.fragment),atr=l(),l5e=a("span"),ntr=o("AutoModelForCTC"),pDe=l(),Vo=a("div"),F(Gy.$$.fragment),str=l(),vd=a("p"),ltr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vz=a("a"),itr=o("from_pretrained()"),dtr=o(" class method or the "),Xz=a("a"),ctr=o("from_config()"),ftr=o(` class
method.`),mtr=l(),Oy=a("p"),gtr=o("This class cannot be instantiated directly using "),i5e=a("code"),htr=o("__init__()"),ptr=o(" (throws an error)."),_tr=l(),Ft=a("div"),F(Vy.$$.fragment),utr=l(),d5e=a("p"),btr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vtr=l(),Fd=a("p"),Ftr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),Ttr=o("not"),Mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Etr=o("from_pretrained()"),Ctr=o(" to load the model weights."),wtr=l(),F(dF.$$.fragment),Atr=l(),mo=a("div"),F(Xy.$$.fragment),Ltr=l(),f5e=a("p"),ytr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xtr=l(),Xa=a("p"),$tr=o("The model class to instantiate is selected based on the "),m5e=a("code"),ktr=o("model_type"),Str=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),Rtr=o("pretrained_model_name_or_path"),Ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),Btr=o("pretrained_model_name_or_path"),Itr=o(":"),Ntr=l(),Le=a("ul"),cF=a("li"),p5e=a("strong"),qtr=o("data2vec-audio"),jtr=o(" \u2014 "),Wz=a("a"),Dtr=o("Data2VecAudioForCTC"),Gtr=o(" (Data2VecAudio model)"),Otr=l(),fF=a("li"),_5e=a("strong"),Vtr=o("hubert"),Xtr=o(" \u2014 "),Qz=a("a"),ztr=o("HubertForCTC"),Wtr=o(" (Hubert model)"),Qtr=l(),mF=a("li"),u5e=a("strong"),Htr=o("mctct"),Utr=o(" \u2014 "),Hz=a("a"),Jtr=o("MCTCTForCTC"),Ytr=o(" (M-CTC-T model)"),Ktr=l(),gF=a("li"),b5e=a("strong"),Ztr=o("sew"),ear=o(" \u2014 "),Uz=a("a"),oar=o("SEWForCTC"),rar=o(" (SEW model)"),tar=l(),hF=a("li"),v5e=a("strong"),aar=o("sew-d"),nar=o(" \u2014 "),Jz=a("a"),sar=o("SEWDForCTC"),lar=o(" (SEW-D model)"),iar=l(),pF=a("li"),F5e=a("strong"),dar=o("unispeech"),car=o(" \u2014 "),Yz=a("a"),far=o("UniSpeechForCTC"),mar=o(" (UniSpeech model)"),gar=l(),_F=a("li"),T5e=a("strong"),har=o("unispeech-sat"),par=o(" \u2014 "),Kz=a("a"),_ar=o("UniSpeechSatForCTC"),uar=o(" (UniSpeechSat model)"),bar=l(),uF=a("li"),M5e=a("strong"),Far=o("wav2vec2"),Tar=o(" \u2014 "),Zz=a("a"),Mar=o("Wav2Vec2ForCTC"),Ear=o(" (Wav2Vec2 model)"),Car=l(),bF=a("li"),E5e=a("strong"),war=o("wav2vec2-conformer"),Aar=o(" \u2014 "),eW=a("a"),Lar=o("Wav2Vec2ConformerForCTC"),yar=o(" (Wav2Vec2-Conformer model)"),xar=l(),vF=a("li"),C5e=a("strong"),$ar=o("wavlm"),kar=o(" \u2014 "),oW=a("a"),Sar=o("WavLMForCTC"),Rar=o(" (WavLM model)"),Par=l(),FF=a("p"),Bar=o("The model is set in evaluation mode by default using "),w5e=a("code"),Iar=o("model.eval()"),Nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=a("code"),qar=o("model.train()"),jar=l(),F(TF.$$.fragment),_De=l(),Td=a("h2"),MF=a("a"),L5e=a("span"),F(zy.$$.fragment),Dar=l(),y5e=a("span"),Gar=o("AutoModelForSpeechSeq2Seq"),uDe=l(),Xo=a("div"),F(Wy.$$.fragment),Oar=l(),Md=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rW=a("a"),Xar=o("from_pretrained()"),zar=o(" class method or the "),tW=a("a"),War=o("from_config()"),Qar=o(` class
method.`),Har=l(),Qy=a("p"),Uar=o("This class cannot be instantiated directly using "),x5e=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),Tt=a("div"),F(Hy.$$.fragment),Zar=l(),$5e=a("p"),enr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),onr=l(),Ed=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),nnr=o("from_pretrained()"),snr=o(" to load the model weights."),lnr=l(),F(EF.$$.fragment),inr=l(),go=a("div"),F(Uy.$$.fragment),dnr=l(),S5e=a("p"),cnr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fnr=l(),za=a("p"),mnr=o("The model class to instantiate is selected based on the "),R5e=a("code"),gnr=o("model_type"),hnr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(":"),vnr=l(),Jy=a("ul"),CF=a("li"),I5e=a("strong"),Fnr=o("speech-encoder-decoder"),Tnr=o(" \u2014 "),nW=a("a"),Mnr=o("SpeechEncoderDecoderModel"),Enr=o(" (Speech Encoder decoder model)"),Cnr=l(),wF=a("li"),N5e=a("strong"),wnr=o("speech_to_text"),Anr=o(" \u2014 "),sW=a("a"),Lnr=o("Speech2TextForConditionalGeneration"),ynr=o(" (Speech2Text model)"),xnr=l(),AF=a("p"),$nr=o("The model is set in evaluation mode by default using "),q5e=a("code"),knr=o("model.eval()"),Snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j5e=a("code"),Rnr=o("model.train()"),Pnr=l(),F(LF.$$.fragment),bDe=l(),Cd=a("h2"),yF=a("a"),D5e=a("span"),F(Yy.$$.fragment),Bnr=l(),G5e=a("span"),Inr=o("AutoModelForAudioXVector"),vDe=l(),zo=a("div"),F(Ky.$$.fragment),Nnr=l(),wd=a("p"),qnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lW=a("a"),jnr=o("from_pretrained()"),Dnr=o(" class method or the "),iW=a("a"),Gnr=o("from_config()"),Onr=o(` class
method.`),Vnr=l(),Zy=a("p"),Xnr=o("This class cannot be instantiated directly using "),O5e=a("code"),znr=o("__init__()"),Wnr=o(" (throws an error)."),Qnr=l(),Mt=a("div"),F(e8.$$.fragment),Hnr=l(),V5e=a("p"),Unr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jnr=l(),Ad=a("p"),Ynr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),Knr=o("not"),Znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),esr=o("from_pretrained()"),osr=o(" to load the model weights."),rsr=l(),F(xF.$$.fragment),tsr=l(),ho=a("div"),F(o8.$$.fragment),asr=l(),z5e=a("p"),nsr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ssr=l(),Wa=a("p"),lsr=o("The model class to instantiate is selected based on the "),W5e=a("code"),isr=o("model_type"),dsr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(":"),hsr=l(),Zr=a("ul"),$F=a("li"),U5e=a("strong"),psr=o("data2vec-audio"),_sr=o(" \u2014 "),cW=a("a"),usr=o("Data2VecAudioForXVector"),bsr=o(" (Data2VecAudio model)"),vsr=l(),kF=a("li"),J5e=a("strong"),Fsr=o("unispeech-sat"),Tsr=o(" \u2014 "),fW=a("a"),Msr=o("UniSpeechSatForXVector"),Esr=o(" (UniSpeechSat model)"),Csr=l(),SF=a("li"),Y5e=a("strong"),wsr=o("wav2vec2"),Asr=o(" \u2014 "),mW=a("a"),Lsr=o("Wav2Vec2ForXVector"),ysr=o(" (Wav2Vec2 model)"),xsr=l(),RF=a("li"),K5e=a("strong"),$sr=o("wav2vec2-conformer"),ksr=o(" \u2014 "),gW=a("a"),Ssr=o("Wav2Vec2ConformerForXVector"),Rsr=o(" (Wav2Vec2-Conformer model)"),Psr=l(),PF=a("li"),Z5e=a("strong"),Bsr=o("wavlm"),Isr=o(" \u2014 "),hW=a("a"),Nsr=o("WavLMForXVector"),qsr=o(" (WavLM model)"),jsr=l(),BF=a("p"),Dsr=o("The model is set in evaluation mode by default using "),e1e=a("code"),Gsr=o("model.eval()"),Osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),Vsr=o("model.train()"),Xsr=l(),F(IF.$$.fragment),FDe=l(),Ld=a("h2"),NF=a("a"),r1e=a("span"),F(r8.$$.fragment),zsr=l(),t1e=a("span"),Wsr=o("AutoModelForMaskedImageModeling"),TDe=l(),Wo=a("div"),F(t8.$$.fragment),Qsr=l(),yd=a("p"),Hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pW=a("a"),Usr=o("from_pretrained()"),Jsr=o(" class method or the "),_W=a("a"),Ysr=o("from_config()"),Ksr=o(` class
method.`),Zsr=l(),a8=a("p"),elr=o("This class cannot be instantiated directly using "),a1e=a("code"),olr=o("__init__()"),rlr=o(" (throws an error)."),tlr=l(),Et=a("div"),F(n8.$$.fragment),alr=l(),n1e=a("p"),nlr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),slr=l(),xd=a("p"),llr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),ilr=o("not"),dlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),clr=o("from_pretrained()"),flr=o(" to load the model weights."),mlr=l(),F(qF.$$.fragment),glr=l(),po=a("div"),F(s8.$$.fragment),hlr=l(),l1e=a("p"),plr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_lr=l(),Qa=a("p"),ulr=o("The model class to instantiate is selected based on the "),i1e=a("code"),blr=o("model_type"),vlr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Flr=o("pretrained_model_name_or_path"),Tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),Mlr=o("pretrained_model_name_or_path"),Elr=o(":"),Clr=l(),$d=a("ul"),jF=a("li"),f1e=a("strong"),wlr=o("deit"),Alr=o(" \u2014 "),bW=a("a"),Llr=o("DeiTForMaskedImageModeling"),ylr=o(" (DeiT model)"),xlr=l(),DF=a("li"),m1e=a("strong"),$lr=o("swin"),klr=o(" \u2014 "),vW=a("a"),Slr=o("SwinForMaskedImageModeling"),Rlr=o(" (Swin Transformer model)"),Plr=l(),GF=a("li"),g1e=a("strong"),Blr=o("vit"),Ilr=o(" \u2014 "),FW=a("a"),Nlr=o("ViTForMaskedImageModeling"),qlr=o(" (ViT model)"),jlr=l(),OF=a("p"),Dlr=o("The model is set in evaluation mode by default using "),h1e=a("code"),Glr=o("model.eval()"),Olr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),Vlr=o("model.train()"),Xlr=l(),F(VF.$$.fragment),MDe=l(),kd=a("h2"),XF=a("a"),_1e=a("span"),F(l8.$$.fragment),zlr=l(),u1e=a("span"),Wlr=o("AutoModelForObjectDetection"),EDe=l(),Qo=a("div"),F(i8.$$.fragment),Qlr=l(),Sd=a("p"),Hlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),TW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" class method or the "),MW=a("a"),Ylr=o("from_config()"),Klr=o(` class
method.`),Zlr=l(),d8=a("p"),eir=o("This class cannot be instantiated directly using "),b1e=a("code"),oir=o("__init__()"),rir=o(" (throws an error)."),tir=l(),Ct=a("div"),F(c8.$$.fragment),air=l(),v1e=a("p"),nir=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sir=l(),Rd=a("p"),lir=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),iir=o("not"),dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),cir=o("from_pretrained()"),fir=o(" to load the model weights."),mir=l(),F(zF.$$.fragment),gir=l(),_o=a("div"),F(f8.$$.fragment),hir=l(),T1e=a("p"),pir=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_ir=l(),Ha=a("p"),uir=o("The model class to instantiate is selected based on the "),M1e=a("code"),bir=o("model_type"),vir=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Mir=o("pretrained_model_name_or_path"),Eir=o(":"),Cir=l(),m8=a("ul"),WF=a("li"),w1e=a("strong"),wir=o("detr"),Air=o(" \u2014 "),CW=a("a"),Lir=o("DetrForObjectDetection"),yir=o(" (DETR model)"),xir=l(),QF=a("li"),A1e=a("strong"),$ir=o("yolos"),kir=o(" \u2014 "),wW=a("a"),Sir=o("YolosForObjectDetection"),Rir=o(" (YOLOS model)"),Pir=l(),HF=a("p"),Bir=o("The model is set in evaluation mode by default using "),L1e=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=a("code"),qir=o("model.train()"),jir=l(),F(UF.$$.fragment),CDe=l(),Pd=a("h2"),JF=a("a"),x1e=a("span"),F(g8.$$.fragment),Dir=l(),$1e=a("span"),Gir=o("AutoModelForImageSegmentation"),wDe=l(),Ho=a("div"),F(h8.$$.fragment),Oir=l(),Bd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),AW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),LW=a("a"),Wir=o("from_config()"),Qir=o(` class
method.`),Hir=l(),p8=a("p"),Uir=o("This class cannot be instantiated directly using "),k1e=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),wt=a("div"),F(_8.$$.fragment),Zir=l(),S1e=a("p"),edr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),odr=l(),Id=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(YF.$$.fragment),idr=l(),uo=a("div"),F(u8.$$.fragment),ddr=l(),P1e=a("p"),cdr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fdr=l(),Ua=a("p"),mdr=o("The model class to instantiate is selected based on the "),B1e=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),q1e=a("ul"),KF=a("li"),j1e=a("strong"),Fdr=o("detr"),Tdr=o(" \u2014 "),xW=a("a"),Mdr=o("DetrForSegmentation"),Edr=o(" (DETR model)"),Cdr=l(),ZF=a("p"),wdr=o("The model is set in evaluation mode by default using "),D1e=a("code"),Adr=o("model.eval()"),Ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),ydr=o("model.train()"),xdr=l(),F(eT.$$.fragment),ADe=l(),Nd=a("h2"),oT=a("a"),O1e=a("span"),F(b8.$$.fragment),$dr=l(),V1e=a("span"),kdr=o("AutoModelForSemanticSegmentation"),LDe=l(),Uo=a("div"),F(v8.$$.fragment),Sdr=l(),qd=a("p"),Rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$W=a("a"),Pdr=o("from_pretrained()"),Bdr=o(" class method or the "),kW=a("a"),Idr=o("from_config()"),Ndr=o(` class
method.`),qdr=l(),F8=a("p"),jdr=o("This class cannot be instantiated directly using "),X1e=a("code"),Ddr=o("__init__()"),Gdr=o(" (throws an error)."),Odr=l(),At=a("div"),F(T8.$$.fragment),Vdr=l(),z1e=a("p"),Xdr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zdr=l(),jd=a("p"),Wdr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),Qdr=o("not"),Hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" to load the model weights."),Ydr=l(),F(rT.$$.fragment),Kdr=l(),bo=a("div"),F(M8.$$.fragment),Zdr=l(),Q1e=a("p"),ecr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ocr=l(),Ja=a("p"),rcr=o("The model class to instantiate is selected based on the "),H1e=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),Ya=a("ul"),tT=a("li"),Y1e=a("strong"),ccr=o("beit"),fcr=o(" \u2014 "),RW=a("a"),mcr=o("BeitForSemanticSegmentation"),gcr=o(" (BEiT model)"),hcr=l(),aT=a("li"),K1e=a("strong"),pcr=o("data2vec-vision"),_cr=o(" \u2014 "),PW=a("a"),ucr=o("Data2VecVisionForSemanticSegmentation"),bcr=o(" (Data2VecVision model)"),vcr=l(),nT=a("li"),Z1e=a("strong"),Fcr=o("dpt"),Tcr=o(" \u2014 "),BW=a("a"),Mcr=o("DPTForSemanticSegmentation"),Ecr=o(" (DPT model)"),Ccr=l(),sT=a("li"),ebe=a("strong"),wcr=o("segformer"),Acr=o(" \u2014 "),IW=a("a"),Lcr=o("SegformerForSemanticSegmentation"),ycr=o(" (SegFormer model)"),xcr=l(),lT=a("p"),$cr=o("The model is set in evaluation mode by default using "),obe=a("code"),kcr=o("model.eval()"),Scr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),Rcr=o("model.train()"),Pcr=l(),F(iT.$$.fragment),yDe=l(),Dd=a("h2"),dT=a("a"),tbe=a("span"),F(E8.$$.fragment),Bcr=l(),abe=a("span"),Icr=o("AutoModelForInstanceSegmentation"),xDe=l(),Jo=a("div"),F(C8.$$.fragment),Ncr=l(),Gd=a("p"),qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),NW=a("a"),jcr=o("from_pretrained()"),Dcr=o(" class method or the "),qW=a("a"),Gcr=o("from_config()"),Ocr=o(` class
method.`),Vcr=l(),w8=a("p"),Xcr=o("This class cannot be instantiated directly using "),nbe=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),Lt=a("div"),F(A8.$$.fragment),Hcr=l(),sbe=a("p"),Ucr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jcr=l(),Od=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),efr=o("from_pretrained()"),ofr=o(" to load the model weights."),rfr=l(),F(cT.$$.fragment),tfr=l(),vo=a("div"),F(L8.$$.fragment),afr=l(),ibe=a("p"),nfr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sfr=l(),Ka=a("p"),lfr=o("The model class to instantiate is selected based on the "),dbe=a("code"),ifr=o("model_type"),dfr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),cfr=o("pretrained_model_name_or_path"),ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(":"),hfr=l(),mbe=a("ul"),fT=a("li"),gbe=a("strong"),pfr=o("maskformer"),_fr=o(" \u2014 "),DW=a("a"),ufr=o("MaskFormerForInstanceSegmentation"),bfr=o(" (MaskFormer model)"),vfr=l(),mT=a("p"),Ffr=o("The model is set in evaluation mode by default using "),hbe=a("code"),Tfr=o("model.eval()"),Mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=a("code"),Efr=o("model.train()"),Cfr=l(),F(gT.$$.fragment),$De=l(),Vd=a("h2"),hT=a("a"),_be=a("span"),F(y8.$$.fragment),wfr=l(),ube=a("span"),Afr=o("TFAutoModel"),kDe=l(),Yo=a("div"),F(x8.$$.fragment),Lfr=l(),Xd=a("p"),yfr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GW=a("a"),xfr=o("from_pretrained()"),$fr=o(" class method or the "),OW=a("a"),kfr=o("from_config()"),Sfr=o(` class
method.`),Rfr=l(),$8=a("p"),Pfr=o("This class cannot be instantiated directly using "),bbe=a("code"),Bfr=o("__init__()"),Ifr=o(" (throws an error)."),Nfr=l(),yt=a("div"),F(k8.$$.fragment),qfr=l(),vbe=a("p"),jfr=o("Instantiates one of the base model classes of the library from a configuration."),Dfr=l(),zd=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),Ofr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Xfr=o("from_pretrained()"),zfr=o(" to load the model weights."),Wfr=l(),F(pT.$$.fragment),Qfr=l(),wr=a("div"),F(S8.$$.fragment),Hfr=l(),Tbe=a("p"),Ufr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jfr=l(),Za=a("p"),Yfr=o("The model class to instantiate is selected based on the "),Mbe=a("code"),Kfr=o("model_type"),Zfr=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),N=a("ul"),_T=a("li"),wbe=a("strong"),nmr=o("albert"),smr=o(" \u2014 "),XW=a("a"),lmr=o("TFAlbertModel"),imr=o(" (ALBERT model)"),dmr=l(),uT=a("li"),Abe=a("strong"),cmr=o("bart"),fmr=o(" \u2014 "),zW=a("a"),mmr=o("TFBartModel"),gmr=o(" (BART model)"),hmr=l(),bT=a("li"),Lbe=a("strong"),pmr=o("bert"),_mr=o(" \u2014 "),WW=a("a"),umr=o("TFBertModel"),bmr=o(" (BERT model)"),vmr=l(),vT=a("li"),ybe=a("strong"),Fmr=o("blenderbot"),Tmr=o(" \u2014 "),QW=a("a"),Mmr=o("TFBlenderbotModel"),Emr=o(" (Blenderbot model)"),Cmr=l(),FT=a("li"),xbe=a("strong"),wmr=o("blenderbot-small"),Amr=o(" \u2014 "),HW=a("a"),Lmr=o("TFBlenderbotSmallModel"),ymr=o(" (BlenderbotSmall model)"),xmr=l(),TT=a("li"),$be=a("strong"),$mr=o("camembert"),kmr=o(" \u2014 "),UW=a("a"),Smr=o("TFCamembertModel"),Rmr=o(" (CamemBERT model)"),Pmr=l(),MT=a("li"),kbe=a("strong"),Bmr=o("clip"),Imr=o(" \u2014 "),JW=a("a"),Nmr=o("TFCLIPModel"),qmr=o(" (CLIP model)"),jmr=l(),ET=a("li"),Sbe=a("strong"),Dmr=o("convbert"),Gmr=o(" \u2014 "),YW=a("a"),Omr=o("TFConvBertModel"),Vmr=o(" (ConvBERT model)"),Xmr=l(),CT=a("li"),Rbe=a("strong"),zmr=o("convnext"),Wmr=o(" \u2014 "),KW=a("a"),Qmr=o("TFConvNextModel"),Hmr=o(" (ConvNeXT model)"),Umr=l(),wT=a("li"),Pbe=a("strong"),Jmr=o("ctrl"),Ymr=o(" \u2014 "),ZW=a("a"),Kmr=o("TFCTRLModel"),Zmr=o(" (CTRL model)"),egr=l(),AT=a("li"),Bbe=a("strong"),ogr=o("data2vec-vision"),rgr=o(" \u2014 "),eQ=a("a"),tgr=o("TFData2VecVisionModel"),agr=o(" (Data2VecVision model)"),ngr=l(),LT=a("li"),Ibe=a("strong"),sgr=o("deberta"),lgr=o(" \u2014 "),oQ=a("a"),igr=o("TFDebertaModel"),dgr=o(" (DeBERTa model)"),cgr=l(),yT=a("li"),Nbe=a("strong"),fgr=o("deberta-v2"),mgr=o(" \u2014 "),rQ=a("a"),ggr=o("TFDebertaV2Model"),hgr=o(" (DeBERTa-v2 model)"),pgr=l(),xT=a("li"),qbe=a("strong"),_gr=o("distilbert"),ugr=o(" \u2014 "),tQ=a("a"),bgr=o("TFDistilBertModel"),vgr=o(" (DistilBERT model)"),Fgr=l(),$T=a("li"),jbe=a("strong"),Tgr=o("dpr"),Mgr=o(" \u2014 "),aQ=a("a"),Egr=o("TFDPRQuestionEncoder"),Cgr=o(" (DPR model)"),wgr=l(),kT=a("li"),Dbe=a("strong"),Agr=o("electra"),Lgr=o(" \u2014 "),nQ=a("a"),ygr=o("TFElectraModel"),xgr=o(" (ELECTRA model)"),$gr=l(),ST=a("li"),Gbe=a("strong"),kgr=o("flaubert"),Sgr=o(" \u2014 "),sQ=a("a"),Rgr=o("TFFlaubertModel"),Pgr=o(" (FlauBERT model)"),Bgr=l(),Ns=a("li"),Obe=a("strong"),Igr=o("funnel"),Ngr=o(" \u2014 "),lQ=a("a"),qgr=o("TFFunnelModel"),jgr=o(" or "),iQ=a("a"),Dgr=o("TFFunnelBaseModel"),Ggr=o(" (Funnel Transformer model)"),Ogr=l(),RT=a("li"),Vbe=a("strong"),Vgr=o("gpt2"),Xgr=o(" \u2014 "),dQ=a("a"),zgr=o("TFGPT2Model"),Wgr=o(" (OpenAI GPT-2 model)"),Qgr=l(),PT=a("li"),Xbe=a("strong"),Hgr=o("gptj"),Ugr=o(" \u2014 "),cQ=a("a"),Jgr=o("TFGPTJModel"),Ygr=o(" (GPT-J model)"),Kgr=l(),BT=a("li"),zbe=a("strong"),Zgr=o("hubert"),ehr=o(" \u2014 "),fQ=a("a"),ohr=o("TFHubertModel"),rhr=o(" (Hubert model)"),thr=l(),IT=a("li"),Wbe=a("strong"),ahr=o("layoutlm"),nhr=o(" \u2014 "),mQ=a("a"),shr=o("TFLayoutLMModel"),lhr=o(" (LayoutLM model)"),ihr=l(),NT=a("li"),Qbe=a("strong"),dhr=o("led"),chr=o(" \u2014 "),gQ=a("a"),fhr=o("TFLEDModel"),mhr=o(" (LED model)"),ghr=l(),qT=a("li"),Hbe=a("strong"),hhr=o("longformer"),phr=o(" \u2014 "),hQ=a("a"),_hr=o("TFLongformerModel"),uhr=o(" (Longformer model)"),bhr=l(),jT=a("li"),Ube=a("strong"),vhr=o("lxmert"),Fhr=o(" \u2014 "),pQ=a("a"),Thr=o("TFLxmertModel"),Mhr=o(" (LXMERT model)"),Ehr=l(),DT=a("li"),Jbe=a("strong"),Chr=o("marian"),whr=o(" \u2014 "),_Q=a("a"),Ahr=o("TFMarianModel"),Lhr=o(" (Marian model)"),yhr=l(),GT=a("li"),Ybe=a("strong"),xhr=o("mbart"),$hr=o(" \u2014 "),uQ=a("a"),khr=o("TFMBartModel"),Shr=o(" (mBART model)"),Rhr=l(),OT=a("li"),Kbe=a("strong"),Phr=o("mobilebert"),Bhr=o(" \u2014 "),bQ=a("a"),Ihr=o("TFMobileBertModel"),Nhr=o(" (MobileBERT model)"),qhr=l(),VT=a("li"),Zbe=a("strong"),jhr=o("mpnet"),Dhr=o(" \u2014 "),vQ=a("a"),Ghr=o("TFMPNetModel"),Ohr=o(" (MPNet model)"),Vhr=l(),XT=a("li"),e2e=a("strong"),Xhr=o("mt5"),zhr=o(" \u2014 "),FQ=a("a"),Whr=o("TFMT5Model"),Qhr=o(" (MT5 model)"),Hhr=l(),zT=a("li"),o2e=a("strong"),Uhr=o("openai-gpt"),Jhr=o(" \u2014 "),TQ=a("a"),Yhr=o("TFOpenAIGPTModel"),Khr=o(" (OpenAI GPT model)"),Zhr=l(),WT=a("li"),r2e=a("strong"),epr=o("opt"),opr=o(" \u2014 "),MQ=a("a"),rpr=o("TFOPTModel"),tpr=o(" (OPT model)"),apr=l(),QT=a("li"),t2e=a("strong"),npr=o("pegasus"),spr=o(" \u2014 "),EQ=a("a"),lpr=o("TFPegasusModel"),ipr=o(" (Pegasus model)"),dpr=l(),HT=a("li"),a2e=a("strong"),cpr=o("regnet"),fpr=o(" \u2014 "),CQ=a("a"),mpr=o("TFRegNetModel"),gpr=o(" (RegNet model)"),hpr=l(),UT=a("li"),n2e=a("strong"),ppr=o("rembert"),_pr=o(" \u2014 "),wQ=a("a"),upr=o("TFRemBertModel"),bpr=o(" (RemBERT model)"),vpr=l(),JT=a("li"),s2e=a("strong"),Fpr=o("roberta"),Tpr=o(" \u2014 "),AQ=a("a"),Mpr=o("TFRobertaModel"),Epr=o(" (RoBERTa model)"),Cpr=l(),YT=a("li"),l2e=a("strong"),wpr=o("roformer"),Apr=o(" \u2014 "),LQ=a("a"),Lpr=o("TFRoFormerModel"),ypr=o(" (RoFormer model)"),xpr=l(),KT=a("li"),i2e=a("strong"),$pr=o("speech_to_text"),kpr=o(" \u2014 "),yQ=a("a"),Spr=o("TFSpeech2TextModel"),Rpr=o(" (Speech2Text model)"),Ppr=l(),ZT=a("li"),d2e=a("strong"),Bpr=o("swin"),Ipr=o(" \u2014 "),xQ=a("a"),Npr=o("TFSwinModel"),qpr=o(" (Swin Transformer model)"),jpr=l(),e7=a("li"),c2e=a("strong"),Dpr=o("t5"),Gpr=o(" \u2014 "),$Q=a("a"),Opr=o("TFT5Model"),Vpr=o(" (T5 model)"),Xpr=l(),o7=a("li"),f2e=a("strong"),zpr=o("tapas"),Wpr=o(" \u2014 "),kQ=a("a"),Qpr=o("TFTapasModel"),Hpr=o(" (TAPAS model)"),Upr=l(),r7=a("li"),m2e=a("strong"),Jpr=o("transfo-xl"),Ypr=o(" \u2014 "),SQ=a("a"),Kpr=o("TFTransfoXLModel"),Zpr=o(" (Transformer-XL model)"),e_r=l(),t7=a("li"),g2e=a("strong"),o_r=o("vit"),r_r=o(" \u2014 "),RQ=a("a"),t_r=o("TFViTModel"),a_r=o(" (ViT model)"),n_r=l(),a7=a("li"),h2e=a("strong"),s_r=o("vit_mae"),l_r=o(" \u2014 "),PQ=a("a"),i_r=o("TFViTMAEModel"),d_r=o(" (ViTMAE model)"),c_r=l(),n7=a("li"),p2e=a("strong"),f_r=o("wav2vec2"),m_r=o(" \u2014 "),BQ=a("a"),g_r=o("TFWav2Vec2Model"),h_r=o(" (Wav2Vec2 model)"),p_r=l(),s7=a("li"),_2e=a("strong"),__r=o("xlm"),u_r=o(" \u2014 "),IQ=a("a"),b_r=o("TFXLMModel"),v_r=o(" (XLM model)"),F_r=l(),l7=a("li"),u2e=a("strong"),T_r=o("xlm-roberta"),M_r=o(" \u2014 "),NQ=a("a"),E_r=o("TFXLMRobertaModel"),C_r=o(" (XLM-RoBERTa model)"),w_r=l(),i7=a("li"),b2e=a("strong"),A_r=o("xlnet"),L_r=o(" \u2014 "),qQ=a("a"),y_r=o("TFXLNetModel"),x_r=o(" (XLNet model)"),$_r=l(),F(d7.$$.fragment),SDe=l(),Wd=a("h2"),c7=a("a"),v2e=a("span"),F(R8.$$.fragment),k_r=l(),F2e=a("span"),S_r=o("TFAutoModelForPreTraining"),RDe=l(),Ko=a("div"),F(P8.$$.fragment),R_r=l(),Qd=a("p"),P_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jQ=a("a"),B_r=o("from_pretrained()"),I_r=o(" class method or the "),DQ=a("a"),N_r=o("from_config()"),q_r=o(` class
method.`),j_r=l(),B8=a("p"),D_r=o("This class cannot be instantiated directly using "),T2e=a("code"),G_r=o("__init__()"),O_r=o(" (throws an error)."),V_r=l(),xt=a("div"),F(I8.$$.fragment),X_r=l(),M2e=a("p"),z_r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),W_r=l(),Hd=a("p"),Q_r=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),H_r=o("not"),U_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),J_r=o("from_pretrained()"),Y_r=o(" to load the model weights."),K_r=l(),F(f7.$$.fragment),Z_r=l(),Ar=a("div"),F(N8.$$.fragment),eur=l(),C2e=a("p"),our=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rur=l(),en=a("p"),tur=o("The model class to instantiate is selected based on the "),w2e=a("code"),aur=o("model_type"),nur=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),iur=o("pretrained_model_name_or_path"),dur=o(":"),cur=l(),se=a("ul"),m7=a("li"),y2e=a("strong"),fur=o("albert"),mur=o(" \u2014 "),OQ=a("a"),gur=o("TFAlbertForPreTraining"),hur=o(" (ALBERT model)"),pur=l(),g7=a("li"),x2e=a("strong"),_ur=o("bart"),uur=o(" \u2014 "),VQ=a("a"),bur=o("TFBartForConditionalGeneration"),vur=o(" (BART model)"),Fur=l(),h7=a("li"),$2e=a("strong"),Tur=o("bert"),Mur=o(" \u2014 "),XQ=a("a"),Eur=o("TFBertForPreTraining"),Cur=o(" (BERT model)"),wur=l(),p7=a("li"),k2e=a("strong"),Aur=o("camembert"),Lur=o(" \u2014 "),zQ=a("a"),yur=o("TFCamembertForMaskedLM"),xur=o(" (CamemBERT model)"),$ur=l(),_7=a("li"),S2e=a("strong"),kur=o("ctrl"),Sur=o(" \u2014 "),WQ=a("a"),Rur=o("TFCTRLLMHeadModel"),Pur=o(" (CTRL model)"),Bur=l(),u7=a("li"),R2e=a("strong"),Iur=o("distilbert"),Nur=o(" \u2014 "),QQ=a("a"),qur=o("TFDistilBertForMaskedLM"),jur=o(" (DistilBERT model)"),Dur=l(),b7=a("li"),P2e=a("strong"),Gur=o("electra"),Our=o(" \u2014 "),HQ=a("a"),Vur=o("TFElectraForPreTraining"),Xur=o(" (ELECTRA model)"),zur=l(),v7=a("li"),B2e=a("strong"),Wur=o("flaubert"),Qur=o(" \u2014 "),UQ=a("a"),Hur=o("TFFlaubertWithLMHeadModel"),Uur=o(" (FlauBERT model)"),Jur=l(),F7=a("li"),I2e=a("strong"),Yur=o("funnel"),Kur=o(" \u2014 "),JQ=a("a"),Zur=o("TFFunnelForPreTraining"),e5r=o(" (Funnel Transformer model)"),o5r=l(),T7=a("li"),N2e=a("strong"),r5r=o("gpt2"),t5r=o(" \u2014 "),YQ=a("a"),a5r=o("TFGPT2LMHeadModel"),n5r=o(" (OpenAI GPT-2 model)"),s5r=l(),M7=a("li"),q2e=a("strong"),l5r=o("layoutlm"),i5r=o(" \u2014 "),KQ=a("a"),d5r=o("TFLayoutLMForMaskedLM"),c5r=o(" (LayoutLM model)"),f5r=l(),E7=a("li"),j2e=a("strong"),m5r=o("lxmert"),g5r=o(" \u2014 "),ZQ=a("a"),h5r=o("TFLxmertForPreTraining"),p5r=o(" (LXMERT model)"),_5r=l(),C7=a("li"),D2e=a("strong"),u5r=o("mobilebert"),b5r=o(" \u2014 "),eH=a("a"),v5r=o("TFMobileBertForPreTraining"),F5r=o(" (MobileBERT model)"),T5r=l(),w7=a("li"),G2e=a("strong"),M5r=o("mpnet"),E5r=o(" \u2014 "),oH=a("a"),C5r=o("TFMPNetForMaskedLM"),w5r=o(" (MPNet model)"),A5r=l(),A7=a("li"),O2e=a("strong"),L5r=o("openai-gpt"),y5r=o(" \u2014 "),rH=a("a"),x5r=o("TFOpenAIGPTLMHeadModel"),$5r=o(" (OpenAI GPT model)"),k5r=l(),L7=a("li"),V2e=a("strong"),S5r=o("roberta"),R5r=o(" \u2014 "),tH=a("a"),P5r=o("TFRobertaForMaskedLM"),B5r=o(" (RoBERTa model)"),I5r=l(),y7=a("li"),X2e=a("strong"),N5r=o("t5"),q5r=o(" \u2014 "),aH=a("a"),j5r=o("TFT5ForConditionalGeneration"),D5r=o(" (T5 model)"),G5r=l(),x7=a("li"),z2e=a("strong"),O5r=o("tapas"),V5r=o(" \u2014 "),nH=a("a"),X5r=o("TFTapasForMaskedLM"),z5r=o(" (TAPAS model)"),W5r=l(),$7=a("li"),W2e=a("strong"),Q5r=o("transfo-xl"),H5r=o(" \u2014 "),sH=a("a"),U5r=o("TFTransfoXLLMHeadModel"),J5r=o(" (Transformer-XL model)"),Y5r=l(),k7=a("li"),Q2e=a("strong"),K5r=o("vit_mae"),Z5r=o(" \u2014 "),lH=a("a"),e1r=o("TFViTMAEForPreTraining"),o1r=o(" (ViTMAE model)"),r1r=l(),S7=a("li"),H2e=a("strong"),t1r=o("xlm"),a1r=o(" \u2014 "),iH=a("a"),n1r=o("TFXLMWithLMHeadModel"),s1r=o(" (XLM model)"),l1r=l(),R7=a("li"),U2e=a("strong"),i1r=o("xlm-roberta"),d1r=o(" \u2014 "),dH=a("a"),c1r=o("TFXLMRobertaForMaskedLM"),f1r=o(" (XLM-RoBERTa model)"),m1r=l(),P7=a("li"),J2e=a("strong"),g1r=o("xlnet"),h1r=o(" \u2014 "),cH=a("a"),p1r=o("TFXLNetLMHeadModel"),_1r=o(" (XLNet model)"),u1r=l(),F(B7.$$.fragment),PDe=l(),Ud=a("h2"),I7=a("a"),Y2e=a("span"),F(q8.$$.fragment),b1r=l(),K2e=a("span"),v1r=o("TFAutoModelForCausalLM"),BDe=l(),Zo=a("div"),F(j8.$$.fragment),F1r=l(),Jd=a("p"),T1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fH=a("a"),M1r=o("from_pretrained()"),E1r=o(" class method or the "),mH=a("a"),C1r=o("from_config()"),w1r=o(` class
method.`),A1r=l(),D8=a("p"),L1r=o("This class cannot be instantiated directly using "),Z2e=a("code"),y1r=o("__init__()"),x1r=o(" (throws an error)."),$1r=l(),$t=a("div"),F(G8.$$.fragment),k1r=l(),e4e=a("p"),S1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R1r=l(),Yd=a("p"),P1r=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),B1r=o("not"),I1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),N1r=o("from_pretrained()"),q1r=o(" to load the model weights."),j1r=l(),F(N7.$$.fragment),D1r=l(),Lr=a("div"),F(O8.$$.fragment),G1r=l(),r4e=a("p"),O1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V1r=l(),on=a("p"),X1r=o("The model class to instantiate is selected based on the "),t4e=a("code"),z1r=o("model_type"),W1r=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),Q1r=o("pretrained_model_name_or_path"),H1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),U1r=o("pretrained_model_name_or_path"),J1r=o(":"),Y1r=l(),Me=a("ul"),q7=a("li"),s4e=a("strong"),K1r=o("bert"),Z1r=o(" \u2014 "),hH=a("a"),ebr=o("TFBertLMHeadModel"),obr=o(" (BERT model)"),rbr=l(),j7=a("li"),l4e=a("strong"),tbr=o("camembert"),abr=o(" \u2014 "),pH=a("a"),nbr=o("TFCamembertForCausalLM"),sbr=o(" (CamemBERT model)"),lbr=l(),D7=a("li"),i4e=a("strong"),ibr=o("ctrl"),dbr=o(" \u2014 "),_H=a("a"),cbr=o("TFCTRLLMHeadModel"),fbr=o(" (CTRL model)"),mbr=l(),G7=a("li"),d4e=a("strong"),gbr=o("gpt2"),hbr=o(" \u2014 "),uH=a("a"),pbr=o("TFGPT2LMHeadModel"),_br=o(" (OpenAI GPT-2 model)"),ubr=l(),O7=a("li"),c4e=a("strong"),bbr=o("gptj"),vbr=o(" \u2014 "),bH=a("a"),Fbr=o("TFGPTJForCausalLM"),Tbr=o(" (GPT-J model)"),Mbr=l(),V7=a("li"),f4e=a("strong"),Ebr=o("openai-gpt"),Cbr=o(" \u2014 "),vH=a("a"),wbr=o("TFOpenAIGPTLMHeadModel"),Abr=o(" (OpenAI GPT model)"),Lbr=l(),X7=a("li"),m4e=a("strong"),ybr=o("opt"),xbr=o(" \u2014 "),FH=a("a"),$br=o("TFOPTForCausalLM"),kbr=o(" (OPT model)"),Sbr=l(),z7=a("li"),g4e=a("strong"),Rbr=o("rembert"),Pbr=o(" \u2014 "),TH=a("a"),Bbr=o("TFRemBertForCausalLM"),Ibr=o(" (RemBERT model)"),Nbr=l(),W7=a("li"),h4e=a("strong"),qbr=o("roberta"),jbr=o(" \u2014 "),MH=a("a"),Dbr=o("TFRobertaForCausalLM"),Gbr=o(" (RoBERTa model)"),Obr=l(),Q7=a("li"),p4e=a("strong"),Vbr=o("roformer"),Xbr=o(" \u2014 "),EH=a("a"),zbr=o("TFRoFormerForCausalLM"),Wbr=o(" (RoFormer model)"),Qbr=l(),H7=a("li"),_4e=a("strong"),Hbr=o("transfo-xl"),Ubr=o(" \u2014 "),CH=a("a"),Jbr=o("TFTransfoXLLMHeadModel"),Ybr=o(" (Transformer-XL model)"),Kbr=l(),U7=a("li"),u4e=a("strong"),Zbr=o("xlm"),e2r=o(" \u2014 "),wH=a("a"),o2r=o("TFXLMWithLMHeadModel"),r2r=o(" (XLM model)"),t2r=l(),J7=a("li"),b4e=a("strong"),a2r=o("xlnet"),n2r=o(" \u2014 "),AH=a("a"),s2r=o("TFXLNetLMHeadModel"),l2r=o(" (XLNet model)"),i2r=l(),F(Y7.$$.fragment),IDe=l(),Kd=a("h2"),K7=a("a"),v4e=a("span"),F(V8.$$.fragment),d2r=l(),F4e=a("span"),c2r=o("TFAutoModelForImageClassification"),NDe=l(),er=a("div"),F(X8.$$.fragment),f2r=l(),Zd=a("p"),m2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LH=a("a"),g2r=o("from_pretrained()"),h2r=o(" class method or the "),yH=a("a"),p2r=o("from_config()"),_2r=o(` class
method.`),u2r=l(),z8=a("p"),b2r=o("This class cannot be instantiated directly using "),T4e=a("code"),v2r=o("__init__()"),F2r=o(" (throws an error)."),T2r=l(),kt=a("div"),F(W8.$$.fragment),M2r=l(),M4e=a("p"),E2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C2r=l(),ec=a("p"),w2r=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),A2r=o("not"),L2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),y2r=o("from_pretrained()"),x2r=o(" to load the model weights."),$2r=l(),F(Z7.$$.fragment),k2r=l(),yr=a("div"),F(Q8.$$.fragment),S2r=l(),C4e=a("p"),R2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P2r=l(),rn=a("p"),B2r=o("The model class to instantiate is selected based on the "),w4e=a("code"),I2r=o("model_type"),N2r=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),q2r=o("pretrained_model_name_or_path"),j2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),D2r=o("pretrained_model_name_or_path"),G2r=o(":"),O2r=l(),et=a("ul"),eM=a("li"),y4e=a("strong"),V2r=o("convnext"),X2r=o(" \u2014 "),$H=a("a"),z2r=o("TFConvNextForImageClassification"),W2r=o(" (ConvNeXT model)"),Q2r=l(),oM=a("li"),x4e=a("strong"),H2r=o("data2vec-vision"),U2r=o(" \u2014 "),kH=a("a"),J2r=o("TFData2VecVisionForImageClassification"),Y2r=o(" (Data2VecVision model)"),K2r=l(),rM=a("li"),$4e=a("strong"),Z2r=o("regnet"),e4r=o(" \u2014 "),SH=a("a"),o4r=o("TFRegNetForImageClassification"),r4r=o(" (RegNet model)"),t4r=l(),tM=a("li"),k4e=a("strong"),a4r=o("swin"),n4r=o(" \u2014 "),RH=a("a"),s4r=o("TFSwinForImageClassification"),l4r=o(" (Swin Transformer model)"),i4r=l(),aM=a("li"),S4e=a("strong"),d4r=o("vit"),c4r=o(" \u2014 "),PH=a("a"),f4r=o("TFViTForImageClassification"),m4r=o(" (ViT model)"),g4r=l(),F(nM.$$.fragment),qDe=l(),oc=a("h2"),sM=a("a"),R4e=a("span"),F(H8.$$.fragment),h4r=l(),P4e=a("span"),p4r=o("TFAutoModelForMaskedLM"),jDe=l(),or=a("div"),F(U8.$$.fragment),_4r=l(),rc=a("p"),u4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BH=a("a"),b4r=o("from_pretrained()"),v4r=o(" class method or the "),IH=a("a"),F4r=o("from_config()"),T4r=o(` class
method.`),M4r=l(),J8=a("p"),E4r=o("This class cannot be instantiated directly using "),B4e=a("code"),C4r=o("__init__()"),w4r=o(" (throws an error)."),A4r=l(),St=a("div"),F(Y8.$$.fragment),L4r=l(),I4e=a("p"),y4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x4r=l(),tc=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),k4r=o("not"),S4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),R4r=o("from_pretrained()"),P4r=o(" to load the model weights."),B4r=l(),F(lM.$$.fragment),I4r=l(),xr=a("div"),F(K8.$$.fragment),N4r=l(),q4e=a("p"),q4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j4r=l(),tn=a("p"),D4r=o("The model class to instantiate is selected based on the "),j4e=a("code"),G4r=o("model_type"),O4r=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),V4r=o("pretrained_model_name_or_path"),X4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),z4r=o("pretrained_model_name_or_path"),W4r=o(":"),Q4r=l(),ie=a("ul"),iM=a("li"),O4e=a("strong"),H4r=o("albert"),U4r=o(" \u2014 "),qH=a("a"),J4r=o("TFAlbertForMaskedLM"),Y4r=o(" (ALBERT model)"),K4r=l(),dM=a("li"),V4e=a("strong"),Z4r=o("bert"),evr=o(" \u2014 "),jH=a("a"),ovr=o("TFBertForMaskedLM"),rvr=o(" (BERT model)"),tvr=l(),cM=a("li"),X4e=a("strong"),avr=o("camembert"),nvr=o(" \u2014 "),DH=a("a"),svr=o("TFCamembertForMaskedLM"),lvr=o(" (CamemBERT model)"),ivr=l(),fM=a("li"),z4e=a("strong"),dvr=o("convbert"),cvr=o(" \u2014 "),GH=a("a"),fvr=o("TFConvBertForMaskedLM"),mvr=o(" (ConvBERT model)"),gvr=l(),mM=a("li"),W4e=a("strong"),hvr=o("deberta"),pvr=o(" \u2014 "),OH=a("a"),_vr=o("TFDebertaForMaskedLM"),uvr=o(" (DeBERTa model)"),bvr=l(),gM=a("li"),Q4e=a("strong"),vvr=o("deberta-v2"),Fvr=o(" \u2014 "),VH=a("a"),Tvr=o("TFDebertaV2ForMaskedLM"),Mvr=o(" (DeBERTa-v2 model)"),Evr=l(),hM=a("li"),H4e=a("strong"),Cvr=o("distilbert"),wvr=o(" \u2014 "),XH=a("a"),Avr=o("TFDistilBertForMaskedLM"),Lvr=o(" (DistilBERT model)"),yvr=l(),pM=a("li"),U4e=a("strong"),xvr=o("electra"),$vr=o(" \u2014 "),zH=a("a"),kvr=o("TFElectraForMaskedLM"),Svr=o(" (ELECTRA model)"),Rvr=l(),_M=a("li"),J4e=a("strong"),Pvr=o("flaubert"),Bvr=o(" \u2014 "),WH=a("a"),Ivr=o("TFFlaubertWithLMHeadModel"),Nvr=o(" (FlauBERT model)"),qvr=l(),uM=a("li"),Y4e=a("strong"),jvr=o("funnel"),Dvr=o(" \u2014 "),QH=a("a"),Gvr=o("TFFunnelForMaskedLM"),Ovr=o(" (Funnel Transformer model)"),Vvr=l(),bM=a("li"),K4e=a("strong"),Xvr=o("layoutlm"),zvr=o(" \u2014 "),HH=a("a"),Wvr=o("TFLayoutLMForMaskedLM"),Qvr=o(" (LayoutLM model)"),Hvr=l(),vM=a("li"),Z4e=a("strong"),Uvr=o("longformer"),Jvr=o(" \u2014 "),UH=a("a"),Yvr=o("TFLongformerForMaskedLM"),Kvr=o(" (Longformer model)"),Zvr=l(),FM=a("li"),eve=a("strong"),eFr=o("mobilebert"),oFr=o(" \u2014 "),JH=a("a"),rFr=o("TFMobileBertForMaskedLM"),tFr=o(" (MobileBERT model)"),aFr=l(),TM=a("li"),ove=a("strong"),nFr=o("mpnet"),sFr=o(" \u2014 "),YH=a("a"),lFr=o("TFMPNetForMaskedLM"),iFr=o(" (MPNet model)"),dFr=l(),MM=a("li"),rve=a("strong"),cFr=o("rembert"),fFr=o(" \u2014 "),KH=a("a"),mFr=o("TFRemBertForMaskedLM"),gFr=o(" (RemBERT model)"),hFr=l(),EM=a("li"),tve=a("strong"),pFr=o("roberta"),_Fr=o(" \u2014 "),ZH=a("a"),uFr=o("TFRobertaForMaskedLM"),bFr=o(" (RoBERTa model)"),vFr=l(),CM=a("li"),ave=a("strong"),FFr=o("roformer"),TFr=o(" \u2014 "),eU=a("a"),MFr=o("TFRoFormerForMaskedLM"),EFr=o(" (RoFormer model)"),CFr=l(),wM=a("li"),nve=a("strong"),wFr=o("tapas"),AFr=o(" \u2014 "),oU=a("a"),LFr=o("TFTapasForMaskedLM"),yFr=o(" (TAPAS model)"),xFr=l(),AM=a("li"),sve=a("strong"),$Fr=o("xlm"),kFr=o(" \u2014 "),rU=a("a"),SFr=o("TFXLMWithLMHeadModel"),RFr=o(" (XLM model)"),PFr=l(),LM=a("li"),lve=a("strong"),BFr=o("xlm-roberta"),IFr=o(" \u2014 "),tU=a("a"),NFr=o("TFXLMRobertaForMaskedLM"),qFr=o(" (XLM-RoBERTa model)"),jFr=l(),F(yM.$$.fragment),DDe=l(),ac=a("h2"),xM=a("a"),ive=a("span"),F(Z8.$$.fragment),DFr=l(),dve=a("span"),GFr=o("TFAutoModelForSeq2SeqLM"),GDe=l(),rr=a("div"),F(e9.$$.fragment),OFr=l(),nc=a("p"),VFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aU=a("a"),XFr=o("from_pretrained()"),zFr=o(" class method or the "),nU=a("a"),WFr=o("from_config()"),QFr=o(` class
method.`),HFr=l(),o9=a("p"),UFr=o("This class cannot be instantiated directly using "),cve=a("code"),JFr=o("__init__()"),YFr=o(" (throws an error)."),KFr=l(),Rt=a("div"),F(r9.$$.fragment),ZFr=l(),fve=a("p"),eTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oTr=l(),sc=a("p"),rTr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),tTr=o("not"),aTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),nTr=o("from_pretrained()"),sTr=o(" to load the model weights."),lTr=l(),F($M.$$.fragment),iTr=l(),$r=a("div"),F(t9.$$.fragment),dTr=l(),gve=a("p"),cTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fTr=l(),an=a("p"),mTr=o("The model class to instantiate is selected based on the "),hve=a("code"),gTr=o("model_type"),hTr=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),pTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),uTr=o("pretrained_model_name_or_path"),bTr=o(":"),vTr=l(),ye=a("ul"),kM=a("li"),uve=a("strong"),FTr=o("bart"),TTr=o(" \u2014 "),lU=a("a"),MTr=o("TFBartForConditionalGeneration"),ETr=o(" (BART model)"),CTr=l(),SM=a("li"),bve=a("strong"),wTr=o("blenderbot"),ATr=o(" \u2014 "),iU=a("a"),LTr=o("TFBlenderbotForConditionalGeneration"),yTr=o(" (Blenderbot model)"),xTr=l(),RM=a("li"),vve=a("strong"),$Tr=o("blenderbot-small"),kTr=o(" \u2014 "),dU=a("a"),STr=o("TFBlenderbotSmallForConditionalGeneration"),RTr=o(" (BlenderbotSmall model)"),PTr=l(),PM=a("li"),Fve=a("strong"),BTr=o("encoder-decoder"),ITr=o(" \u2014 "),cU=a("a"),NTr=o("TFEncoderDecoderModel"),qTr=o(" (Encoder decoder model)"),jTr=l(),BM=a("li"),Tve=a("strong"),DTr=o("led"),GTr=o(" \u2014 "),fU=a("a"),OTr=o("TFLEDForConditionalGeneration"),VTr=o(" (LED model)"),XTr=l(),IM=a("li"),Mve=a("strong"),zTr=o("marian"),WTr=o(" \u2014 "),mU=a("a"),QTr=o("TFMarianMTModel"),HTr=o(" (Marian model)"),UTr=l(),NM=a("li"),Eve=a("strong"),JTr=o("mbart"),YTr=o(" \u2014 "),gU=a("a"),KTr=o("TFMBartForConditionalGeneration"),ZTr=o(" (mBART model)"),e7r=l(),qM=a("li"),Cve=a("strong"),o7r=o("mt5"),r7r=o(" \u2014 "),hU=a("a"),t7r=o("TFMT5ForConditionalGeneration"),a7r=o(" (MT5 model)"),n7r=l(),jM=a("li"),wve=a("strong"),s7r=o("pegasus"),l7r=o(" \u2014 "),pU=a("a"),i7r=o("TFPegasusForConditionalGeneration"),d7r=o(" (Pegasus model)"),c7r=l(),DM=a("li"),Ave=a("strong"),f7r=o("t5"),m7r=o(" \u2014 "),_U=a("a"),g7r=o("TFT5ForConditionalGeneration"),h7r=o(" (T5 model)"),p7r=l(),F(GM.$$.fragment),ODe=l(),lc=a("h2"),OM=a("a"),Lve=a("span"),F(a9.$$.fragment),_7r=l(),yve=a("span"),u7r=o("TFAutoModelForSequenceClassification"),VDe=l(),tr=a("div"),F(n9.$$.fragment),b7r=l(),ic=a("p"),v7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uU=a("a"),F7r=o("from_pretrained()"),T7r=o(" class method or the "),bU=a("a"),M7r=o("from_config()"),E7r=o(` class
method.`),C7r=l(),s9=a("p"),w7r=o("This class cannot be instantiated directly using "),xve=a("code"),A7r=o("__init__()"),L7r=o(" (throws an error)."),y7r=l(),Pt=a("div"),F(l9.$$.fragment),x7r=l(),$ve=a("p"),$7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k7r=l(),dc=a("p"),S7r=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),R7r=o("not"),P7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),B7r=o("from_pretrained()"),I7r=o(" to load the model weights."),N7r=l(),F(VM.$$.fragment),q7r=l(),kr=a("div"),F(i9.$$.fragment),j7r=l(),Sve=a("p"),D7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G7r=l(),nn=a("p"),O7r=o("The model class to instantiate is selected based on the "),Rve=a("code"),V7r=o("model_type"),X7r=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),Q7r=o("pretrained_model_name_or_path"),H7r=o(":"),U7r=l(),oe=a("ul"),XM=a("li"),Ive=a("strong"),J7r=o("albert"),Y7r=o(" \u2014 "),FU=a("a"),K7r=o("TFAlbertForSequenceClassification"),Z7r=o(" (ALBERT model)"),eMr=l(),zM=a("li"),Nve=a("strong"),oMr=o("bert"),rMr=o(" \u2014 "),TU=a("a"),tMr=o("TFBertForSequenceClassification"),aMr=o(" (BERT model)"),nMr=l(),WM=a("li"),qve=a("strong"),sMr=o("camembert"),lMr=o(" \u2014 "),MU=a("a"),iMr=o("TFCamembertForSequenceClassification"),dMr=o(" (CamemBERT model)"),cMr=l(),QM=a("li"),jve=a("strong"),fMr=o("convbert"),mMr=o(" \u2014 "),EU=a("a"),gMr=o("TFConvBertForSequenceClassification"),hMr=o(" (ConvBERT model)"),pMr=l(),HM=a("li"),Dve=a("strong"),_Mr=o("ctrl"),uMr=o(" \u2014 "),CU=a("a"),bMr=o("TFCTRLForSequenceClassification"),vMr=o(" (CTRL model)"),FMr=l(),UM=a("li"),Gve=a("strong"),TMr=o("deberta"),MMr=o(" \u2014 "),wU=a("a"),EMr=o("TFDebertaForSequenceClassification"),CMr=o(" (DeBERTa model)"),wMr=l(),JM=a("li"),Ove=a("strong"),AMr=o("deberta-v2"),LMr=o(" \u2014 "),AU=a("a"),yMr=o("TFDebertaV2ForSequenceClassification"),xMr=o(" (DeBERTa-v2 model)"),$Mr=l(),YM=a("li"),Vve=a("strong"),kMr=o("distilbert"),SMr=o(" \u2014 "),LU=a("a"),RMr=o("TFDistilBertForSequenceClassification"),PMr=o(" (DistilBERT model)"),BMr=l(),KM=a("li"),Xve=a("strong"),IMr=o("electra"),NMr=o(" \u2014 "),yU=a("a"),qMr=o("TFElectraForSequenceClassification"),jMr=o(" (ELECTRA model)"),DMr=l(),ZM=a("li"),zve=a("strong"),GMr=o("flaubert"),OMr=o(" \u2014 "),xU=a("a"),VMr=o("TFFlaubertForSequenceClassification"),XMr=o(" (FlauBERT model)"),zMr=l(),eE=a("li"),Wve=a("strong"),WMr=o("funnel"),QMr=o(" \u2014 "),$U=a("a"),HMr=o("TFFunnelForSequenceClassification"),UMr=o(" (Funnel Transformer model)"),JMr=l(),oE=a("li"),Qve=a("strong"),YMr=o("gpt2"),KMr=o(" \u2014 "),kU=a("a"),ZMr=o("TFGPT2ForSequenceClassification"),eEr=o(" (OpenAI GPT-2 model)"),oEr=l(),rE=a("li"),Hve=a("strong"),rEr=o("gptj"),tEr=o(" \u2014 "),SU=a("a"),aEr=o("TFGPTJForSequenceClassification"),nEr=o(" (GPT-J model)"),sEr=l(),tE=a("li"),Uve=a("strong"),lEr=o("layoutlm"),iEr=o(" \u2014 "),RU=a("a"),dEr=o("TFLayoutLMForSequenceClassification"),cEr=o(" (LayoutLM model)"),fEr=l(),aE=a("li"),Jve=a("strong"),mEr=o("longformer"),gEr=o(" \u2014 "),PU=a("a"),hEr=o("TFLongformerForSequenceClassification"),pEr=o(" (Longformer model)"),_Er=l(),nE=a("li"),Yve=a("strong"),uEr=o("mobilebert"),bEr=o(" \u2014 "),BU=a("a"),vEr=o("TFMobileBertForSequenceClassification"),FEr=o(" (MobileBERT model)"),TEr=l(),sE=a("li"),Kve=a("strong"),MEr=o("mpnet"),EEr=o(" \u2014 "),IU=a("a"),CEr=o("TFMPNetForSequenceClassification"),wEr=o(" (MPNet model)"),AEr=l(),lE=a("li"),Zve=a("strong"),LEr=o("openai-gpt"),yEr=o(" \u2014 "),NU=a("a"),xEr=o("TFOpenAIGPTForSequenceClassification"),$Er=o(" (OpenAI GPT model)"),kEr=l(),iE=a("li"),eFe=a("strong"),SEr=o("rembert"),REr=o(" \u2014 "),qU=a("a"),PEr=o("TFRemBertForSequenceClassification"),BEr=o(" (RemBERT model)"),IEr=l(),dE=a("li"),oFe=a("strong"),NEr=o("roberta"),qEr=o(" \u2014 "),jU=a("a"),jEr=o("TFRobertaForSequenceClassification"),DEr=o(" (RoBERTa model)"),GEr=l(),cE=a("li"),rFe=a("strong"),OEr=o("roformer"),VEr=o(" \u2014 "),DU=a("a"),XEr=o("TFRoFormerForSequenceClassification"),zEr=o(" (RoFormer model)"),WEr=l(),fE=a("li"),tFe=a("strong"),QEr=o("tapas"),HEr=o(" \u2014 "),GU=a("a"),UEr=o("TFTapasForSequenceClassification"),JEr=o(" (TAPAS model)"),YEr=l(),mE=a("li"),aFe=a("strong"),KEr=o("transfo-xl"),ZEr=o(" \u2014 "),OU=a("a"),eCr=o("TFTransfoXLForSequenceClassification"),oCr=o(" (Transformer-XL model)"),rCr=l(),gE=a("li"),nFe=a("strong"),tCr=o("xlm"),aCr=o(" \u2014 "),VU=a("a"),nCr=o("TFXLMForSequenceClassification"),sCr=o(" (XLM model)"),lCr=l(),hE=a("li"),sFe=a("strong"),iCr=o("xlm-roberta"),dCr=o(" \u2014 "),XU=a("a"),cCr=o("TFXLMRobertaForSequenceClassification"),fCr=o(" (XLM-RoBERTa model)"),mCr=l(),pE=a("li"),lFe=a("strong"),gCr=o("xlnet"),hCr=o(" \u2014 "),zU=a("a"),pCr=o("TFXLNetForSequenceClassification"),_Cr=o(" (XLNet model)"),uCr=l(),F(_E.$$.fragment),XDe=l(),cc=a("h2"),uE=a("a"),iFe=a("span"),F(d9.$$.fragment),bCr=l(),dFe=a("span"),vCr=o("TFAutoModelForMultipleChoice"),zDe=l(),ar=a("div"),F(c9.$$.fragment),FCr=l(),fc=a("p"),TCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WU=a("a"),MCr=o("from_pretrained()"),ECr=o(" class method or the "),QU=a("a"),CCr=o("from_config()"),wCr=o(` class
method.`),ACr=l(),f9=a("p"),LCr=o("This class cannot be instantiated directly using "),cFe=a("code"),yCr=o("__init__()"),xCr=o(" (throws an error)."),$Cr=l(),Bt=a("div"),F(m9.$$.fragment),kCr=l(),fFe=a("p"),SCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RCr=l(),mc=a("p"),PCr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),BCr=o("not"),ICr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=a("a"),NCr=o("from_pretrained()"),qCr=o(" to load the model weights."),jCr=l(),F(bE.$$.fragment),DCr=l(),Sr=a("div"),F(g9.$$.fragment),GCr=l(),gFe=a("p"),OCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VCr=l(),sn=a("p"),XCr=o("The model class to instantiate is selected based on the "),hFe=a("code"),zCr=o("model_type"),WCr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),QCr=o("pretrained_model_name_or_path"),HCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(":"),YCr=l(),pe=a("ul"),vE=a("li"),uFe=a("strong"),KCr=o("albert"),ZCr=o(" \u2014 "),UU=a("a"),e3r=o("TFAlbertForMultipleChoice"),o3r=o(" (ALBERT model)"),r3r=l(),FE=a("li"),bFe=a("strong"),t3r=o("bert"),a3r=o(" \u2014 "),JU=a("a"),n3r=o("TFBertForMultipleChoice"),s3r=o(" (BERT model)"),l3r=l(),TE=a("li"),vFe=a("strong"),i3r=o("camembert"),d3r=o(" \u2014 "),YU=a("a"),c3r=o("TFCamembertForMultipleChoice"),f3r=o(" (CamemBERT model)"),m3r=l(),ME=a("li"),FFe=a("strong"),g3r=o("convbert"),h3r=o(" \u2014 "),KU=a("a"),p3r=o("TFConvBertForMultipleChoice"),_3r=o(" (ConvBERT model)"),u3r=l(),EE=a("li"),TFe=a("strong"),b3r=o("distilbert"),v3r=o(" \u2014 "),ZU=a("a"),F3r=o("TFDistilBertForMultipleChoice"),T3r=o(" (DistilBERT model)"),M3r=l(),CE=a("li"),MFe=a("strong"),E3r=o("electra"),C3r=o(" \u2014 "),eJ=a("a"),w3r=o("TFElectraForMultipleChoice"),A3r=o(" (ELECTRA model)"),L3r=l(),wE=a("li"),EFe=a("strong"),y3r=o("flaubert"),x3r=o(" \u2014 "),oJ=a("a"),$3r=o("TFFlaubertForMultipleChoice"),k3r=o(" (FlauBERT model)"),S3r=l(),AE=a("li"),CFe=a("strong"),R3r=o("funnel"),P3r=o(" \u2014 "),rJ=a("a"),B3r=o("TFFunnelForMultipleChoice"),I3r=o(" (Funnel Transformer model)"),N3r=l(),LE=a("li"),wFe=a("strong"),q3r=o("longformer"),j3r=o(" \u2014 "),tJ=a("a"),D3r=o("TFLongformerForMultipleChoice"),G3r=o(" (Longformer model)"),O3r=l(),yE=a("li"),AFe=a("strong"),V3r=o("mobilebert"),X3r=o(" \u2014 "),aJ=a("a"),z3r=o("TFMobileBertForMultipleChoice"),W3r=o(" (MobileBERT model)"),Q3r=l(),xE=a("li"),LFe=a("strong"),H3r=o("mpnet"),U3r=o(" \u2014 "),nJ=a("a"),J3r=o("TFMPNetForMultipleChoice"),Y3r=o(" (MPNet model)"),K3r=l(),$E=a("li"),yFe=a("strong"),Z3r=o("rembert"),e0r=o(" \u2014 "),sJ=a("a"),o0r=o("TFRemBertForMultipleChoice"),r0r=o(" (RemBERT model)"),t0r=l(),kE=a("li"),xFe=a("strong"),a0r=o("roberta"),n0r=o(" \u2014 "),lJ=a("a"),s0r=o("TFRobertaForMultipleChoice"),l0r=o(" (RoBERTa model)"),i0r=l(),SE=a("li"),$Fe=a("strong"),d0r=o("roformer"),c0r=o(" \u2014 "),iJ=a("a"),f0r=o("TFRoFormerForMultipleChoice"),m0r=o(" (RoFormer model)"),g0r=l(),RE=a("li"),kFe=a("strong"),h0r=o("xlm"),p0r=o(" \u2014 "),dJ=a("a"),_0r=o("TFXLMForMultipleChoice"),u0r=o(" (XLM model)"),b0r=l(),PE=a("li"),SFe=a("strong"),v0r=o("xlm-roberta"),F0r=o(" \u2014 "),cJ=a("a"),T0r=o("TFXLMRobertaForMultipleChoice"),M0r=o(" (XLM-RoBERTa model)"),E0r=l(),BE=a("li"),RFe=a("strong"),C0r=o("xlnet"),w0r=o(" \u2014 "),fJ=a("a"),A0r=o("TFXLNetForMultipleChoice"),L0r=o(" (XLNet model)"),y0r=l(),F(IE.$$.fragment),WDe=l(),gc=a("h2"),NE=a("a"),PFe=a("span"),F(h9.$$.fragment),x0r=l(),BFe=a("span"),$0r=o("TFAutoModelForNextSentencePrediction"),QDe=l(),nr=a("div"),F(p9.$$.fragment),k0r=l(),hc=a("p"),S0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mJ=a("a"),R0r=o("from_pretrained()"),P0r=o(" class method or the "),gJ=a("a"),B0r=o("from_config()"),I0r=o(` class
method.`),N0r=l(),_9=a("p"),q0r=o("This class cannot be instantiated directly using "),IFe=a("code"),j0r=o("__init__()"),D0r=o(" (throws an error)."),G0r=l(),It=a("div"),F(u9.$$.fragment),O0r=l(),NFe=a("p"),V0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X0r=l(),pc=a("p"),z0r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),W0r=o("not"),Q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),H0r=o("from_pretrained()"),U0r=o(" to load the model weights."),J0r=l(),F(qE.$$.fragment),Y0r=l(),Rr=a("div"),F(b9.$$.fragment),K0r=l(),jFe=a("p"),Z0r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ewr=l(),ln=a("p"),owr=o("The model class to instantiate is selected based on the "),DFe=a("code"),rwr=o("model_type"),twr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),swr=o("pretrained_model_name_or_path"),lwr=o(":"),iwr=l(),v9=a("ul"),jE=a("li"),VFe=a("strong"),dwr=o("bert"),cwr=o(" \u2014 "),pJ=a("a"),fwr=o("TFBertForNextSentencePrediction"),mwr=o(" (BERT model)"),gwr=l(),DE=a("li"),XFe=a("strong"),hwr=o("mobilebert"),pwr=o(" \u2014 "),_J=a("a"),_wr=o("TFMobileBertForNextSentencePrediction"),uwr=o(" (MobileBERT model)"),bwr=l(),F(GE.$$.fragment),HDe=l(),_c=a("h2"),OE=a("a"),zFe=a("span"),F(F9.$$.fragment),vwr=l(),WFe=a("span"),Fwr=o("TFAutoModelForTableQuestionAnswering"),UDe=l(),sr=a("div"),F(T9.$$.fragment),Twr=l(),uc=a("p"),Mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" class method or the "),bJ=a("a"),wwr=o("from_config()"),Awr=o(` class
method.`),Lwr=l(),M9=a("p"),ywr=o("This class cannot be instantiated directly using "),QFe=a("code"),xwr=o("__init__()"),$wr=o(" (throws an error)."),kwr=l(),Nt=a("div"),F(E9.$$.fragment),Swr=l(),HFe=a("p"),Rwr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pwr=l(),bc=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Iwr=o("not"),Nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),qwr=o("from_pretrained()"),jwr=o(" to load the model weights."),Dwr=l(),F(VE.$$.fragment),Gwr=l(),Pr=a("div"),F(C9.$$.fragment),Owr=l(),JFe=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xwr=l(),dn=a("p"),zwr=o("The model class to instantiate is selected based on the "),YFe=a("code"),Wwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),eTe=a("ul"),XE=a("li"),oTe=a("strong"),Zwr=o("tapas"),eAr=o(" \u2014 "),FJ=a("a"),oAr=o("TFTapasForQuestionAnswering"),rAr=o(" (TAPAS model)"),tAr=l(),F(zE.$$.fragment),JDe=l(),vc=a("h2"),WE=a("a"),rTe=a("span"),F(w9.$$.fragment),aAr=l(),tTe=a("span"),nAr=o("TFAutoModelForTokenClassification"),YDe=l(),lr=a("div"),F(A9.$$.fragment),sAr=l(),Fc=a("p"),lAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=a("a"),iAr=o("from_pretrained()"),dAr=o(" class method or the "),MJ=a("a"),cAr=o("from_config()"),fAr=o(` class
method.`),mAr=l(),L9=a("p"),gAr=o("This class cannot be instantiated directly using "),aTe=a("code"),hAr=o("__init__()"),pAr=o(" (throws an error)."),_Ar=l(),qt=a("div"),F(y9.$$.fragment),uAr=l(),nTe=a("p"),bAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vAr=l(),Tc=a("p"),FAr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),TAr=o("not"),MAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),EAr=o("from_pretrained()"),CAr=o(" to load the model weights."),wAr=l(),F(QE.$$.fragment),AAr=l(),Br=a("div"),F(x9.$$.fragment),LAr=l(),lTe=a("p"),yAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xAr=l(),cn=a("p"),$Ar=o("The model class to instantiate is selected based on the "),iTe=a("code"),kAr=o("model_type"),SAr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),RAr=o("pretrained_model_name_or_path"),PAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),BAr=o("pretrained_model_name_or_path"),IAr=o(":"),NAr=l(),de=a("ul"),HE=a("li"),fTe=a("strong"),qAr=o("albert"),jAr=o(" \u2014 "),CJ=a("a"),DAr=o("TFAlbertForTokenClassification"),GAr=o(" (ALBERT model)"),OAr=l(),UE=a("li"),mTe=a("strong"),VAr=o("bert"),XAr=o(" \u2014 "),wJ=a("a"),zAr=o("TFBertForTokenClassification"),WAr=o(" (BERT model)"),QAr=l(),JE=a("li"),gTe=a("strong"),HAr=o("camembert"),UAr=o(" \u2014 "),AJ=a("a"),JAr=o("TFCamembertForTokenClassification"),YAr=o(" (CamemBERT model)"),KAr=l(),YE=a("li"),hTe=a("strong"),ZAr=o("convbert"),e6r=o(" \u2014 "),LJ=a("a"),o6r=o("TFConvBertForTokenClassification"),r6r=o(" (ConvBERT model)"),t6r=l(),KE=a("li"),pTe=a("strong"),a6r=o("deberta"),n6r=o(" \u2014 "),yJ=a("a"),s6r=o("TFDebertaForTokenClassification"),l6r=o(" (DeBERTa model)"),i6r=l(),ZE=a("li"),_Te=a("strong"),d6r=o("deberta-v2"),c6r=o(" \u2014 "),xJ=a("a"),f6r=o("TFDebertaV2ForTokenClassification"),m6r=o(" (DeBERTa-v2 model)"),g6r=l(),eC=a("li"),uTe=a("strong"),h6r=o("distilbert"),p6r=o(" \u2014 "),$J=a("a"),_6r=o("TFDistilBertForTokenClassification"),u6r=o(" (DistilBERT model)"),b6r=l(),oC=a("li"),bTe=a("strong"),v6r=o("electra"),F6r=o(" \u2014 "),kJ=a("a"),T6r=o("TFElectraForTokenClassification"),M6r=o(" (ELECTRA model)"),E6r=l(),rC=a("li"),vTe=a("strong"),C6r=o("flaubert"),w6r=o(" \u2014 "),SJ=a("a"),A6r=o("TFFlaubertForTokenClassification"),L6r=o(" (FlauBERT model)"),y6r=l(),tC=a("li"),FTe=a("strong"),x6r=o("funnel"),$6r=o(" \u2014 "),RJ=a("a"),k6r=o("TFFunnelForTokenClassification"),S6r=o(" (Funnel Transformer model)"),R6r=l(),aC=a("li"),TTe=a("strong"),P6r=o("layoutlm"),B6r=o(" \u2014 "),PJ=a("a"),I6r=o("TFLayoutLMForTokenClassification"),N6r=o(" (LayoutLM model)"),q6r=l(),nC=a("li"),MTe=a("strong"),j6r=o("longformer"),D6r=o(" \u2014 "),BJ=a("a"),G6r=o("TFLongformerForTokenClassification"),O6r=o(" (Longformer model)"),V6r=l(),sC=a("li"),ETe=a("strong"),X6r=o("mobilebert"),z6r=o(" \u2014 "),IJ=a("a"),W6r=o("TFMobileBertForTokenClassification"),Q6r=o(" (MobileBERT model)"),H6r=l(),lC=a("li"),CTe=a("strong"),U6r=o("mpnet"),J6r=o(" \u2014 "),NJ=a("a"),Y6r=o("TFMPNetForTokenClassification"),K6r=o(" (MPNet model)"),Z6r=l(),iC=a("li"),wTe=a("strong"),eLr=o("rembert"),oLr=o(" \u2014 "),qJ=a("a"),rLr=o("TFRemBertForTokenClassification"),tLr=o(" (RemBERT model)"),aLr=l(),dC=a("li"),ATe=a("strong"),nLr=o("roberta"),sLr=o(" \u2014 "),jJ=a("a"),lLr=o("TFRobertaForTokenClassification"),iLr=o(" (RoBERTa model)"),dLr=l(),cC=a("li"),LTe=a("strong"),cLr=o("roformer"),fLr=o(" \u2014 "),DJ=a("a"),mLr=o("TFRoFormerForTokenClassification"),gLr=o(" (RoFormer model)"),hLr=l(),fC=a("li"),yTe=a("strong"),pLr=o("xlm"),_Lr=o(" \u2014 "),GJ=a("a"),uLr=o("TFXLMForTokenClassification"),bLr=o(" (XLM model)"),vLr=l(),mC=a("li"),xTe=a("strong"),FLr=o("xlm-roberta"),TLr=o(" \u2014 "),OJ=a("a"),MLr=o("TFXLMRobertaForTokenClassification"),ELr=o(" (XLM-RoBERTa model)"),CLr=l(),gC=a("li"),$Te=a("strong"),wLr=o("xlnet"),ALr=o(" \u2014 "),VJ=a("a"),LLr=o("TFXLNetForTokenClassification"),yLr=o(" (XLNet model)"),xLr=l(),F(hC.$$.fragment),KDe=l(),Mc=a("h2"),pC=a("a"),kTe=a("span"),F($9.$$.fragment),$Lr=l(),STe=a("span"),kLr=o("TFAutoModelForQuestionAnswering"),ZDe=l(),ir=a("div"),F(k9.$$.fragment),SLr=l(),Ec=a("p"),RLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XJ=a("a"),PLr=o("from_pretrained()"),BLr=o(" class method or the "),zJ=a("a"),ILr=o("from_config()"),NLr=o(` class
method.`),qLr=l(),S9=a("p"),jLr=o("This class cannot be instantiated directly using "),RTe=a("code"),DLr=o("__init__()"),GLr=o(" (throws an error)."),OLr=l(),jt=a("div"),F(R9.$$.fragment),VLr=l(),PTe=a("p"),XLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zLr=l(),Cc=a("p"),WLr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),QLr=o("not"),HLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),ULr=o("from_pretrained()"),JLr=o(" to load the model weights."),YLr=l(),F(_C.$$.fragment),KLr=l(),Ir=a("div"),F(P9.$$.fragment),ZLr=l(),ITe=a("p"),eyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oyr=l(),fn=a("p"),ryr=o("The model class to instantiate is selected based on the "),NTe=a("code"),tyr=o("model_type"),ayr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(":"),dyr=l(),ce=a("ul"),uC=a("li"),DTe=a("strong"),cyr=o("albert"),fyr=o(" \u2014 "),QJ=a("a"),myr=o("TFAlbertForQuestionAnswering"),gyr=o(" (ALBERT model)"),hyr=l(),bC=a("li"),GTe=a("strong"),pyr=o("bert"),_yr=o(" \u2014 "),HJ=a("a"),uyr=o("TFBertForQuestionAnswering"),byr=o(" (BERT model)"),vyr=l(),vC=a("li"),OTe=a("strong"),Fyr=o("camembert"),Tyr=o(" \u2014 "),UJ=a("a"),Myr=o("TFCamembertForQuestionAnswering"),Eyr=o(" (CamemBERT model)"),Cyr=l(),FC=a("li"),VTe=a("strong"),wyr=o("convbert"),Ayr=o(" \u2014 "),JJ=a("a"),Lyr=o("TFConvBertForQuestionAnswering"),yyr=o(" (ConvBERT model)"),xyr=l(),TC=a("li"),XTe=a("strong"),$yr=o("deberta"),kyr=o(" \u2014 "),YJ=a("a"),Syr=o("TFDebertaForQuestionAnswering"),Ryr=o(" (DeBERTa model)"),Pyr=l(),MC=a("li"),zTe=a("strong"),Byr=o("deberta-v2"),Iyr=o(" \u2014 "),KJ=a("a"),Nyr=o("TFDebertaV2ForQuestionAnswering"),qyr=o(" (DeBERTa-v2 model)"),jyr=l(),EC=a("li"),WTe=a("strong"),Dyr=o("distilbert"),Gyr=o(" \u2014 "),ZJ=a("a"),Oyr=o("TFDistilBertForQuestionAnswering"),Vyr=o(" (DistilBERT model)"),Xyr=l(),CC=a("li"),QTe=a("strong"),zyr=o("electra"),Wyr=o(" \u2014 "),eY=a("a"),Qyr=o("TFElectraForQuestionAnswering"),Hyr=o(" (ELECTRA model)"),Uyr=l(),wC=a("li"),HTe=a("strong"),Jyr=o("flaubert"),Yyr=o(" \u2014 "),oY=a("a"),Kyr=o("TFFlaubertForQuestionAnsweringSimple"),Zyr=o(" (FlauBERT model)"),e8r=l(),AC=a("li"),UTe=a("strong"),o8r=o("funnel"),r8r=o(" \u2014 "),rY=a("a"),t8r=o("TFFunnelForQuestionAnswering"),a8r=o(" (Funnel Transformer model)"),n8r=l(),LC=a("li"),JTe=a("strong"),s8r=o("gptj"),l8r=o(" \u2014 "),tY=a("a"),i8r=o("TFGPTJForQuestionAnswering"),d8r=o(" (GPT-J model)"),c8r=l(),yC=a("li"),YTe=a("strong"),f8r=o("longformer"),m8r=o(" \u2014 "),aY=a("a"),g8r=o("TFLongformerForQuestionAnswering"),h8r=o(" (Longformer model)"),p8r=l(),xC=a("li"),KTe=a("strong"),_8r=o("mobilebert"),u8r=o(" \u2014 "),nY=a("a"),b8r=o("TFMobileBertForQuestionAnswering"),v8r=o(" (MobileBERT model)"),F8r=l(),$C=a("li"),ZTe=a("strong"),T8r=o("mpnet"),M8r=o(" \u2014 "),sY=a("a"),E8r=o("TFMPNetForQuestionAnswering"),C8r=o(" (MPNet model)"),w8r=l(),kC=a("li"),e7e=a("strong"),A8r=o("rembert"),L8r=o(" \u2014 "),lY=a("a"),y8r=o("TFRemBertForQuestionAnswering"),x8r=o(" (RemBERT model)"),$8r=l(),SC=a("li"),o7e=a("strong"),k8r=o("roberta"),S8r=o(" \u2014 "),iY=a("a"),R8r=o("TFRobertaForQuestionAnswering"),P8r=o(" (RoBERTa model)"),B8r=l(),RC=a("li"),r7e=a("strong"),I8r=o("roformer"),N8r=o(" \u2014 "),dY=a("a"),q8r=o("TFRoFormerForQuestionAnswering"),j8r=o(" (RoFormer model)"),D8r=l(),PC=a("li"),t7e=a("strong"),G8r=o("xlm"),O8r=o(" \u2014 "),cY=a("a"),V8r=o("TFXLMForQuestionAnsweringSimple"),X8r=o(" (XLM model)"),z8r=l(),BC=a("li"),a7e=a("strong"),W8r=o("xlm-roberta"),Q8r=o(" \u2014 "),fY=a("a"),H8r=o("TFXLMRobertaForQuestionAnswering"),U8r=o(" (XLM-RoBERTa model)"),J8r=l(),IC=a("li"),n7e=a("strong"),Y8r=o("xlnet"),K8r=o(" \u2014 "),mY=a("a"),Z8r=o("TFXLNetForQuestionAnsweringSimple"),e9r=o(" (XLNet model)"),o9r=l(),F(NC.$$.fragment),eGe=l(),wc=a("h2"),qC=a("a"),s7e=a("span"),F(B9.$$.fragment),r9r=l(),l7e=a("span"),t9r=o("TFAutoModelForVision2Seq"),oGe=l(),dr=a("div"),F(I9.$$.fragment),a9r=l(),Ac=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gY=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),hY=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),N9=a("p"),f9r=o("This class cannot be instantiated directly using "),i7e=a("code"),m9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),Dt=a("div"),F(q9.$$.fragment),p9r=l(),d7e=a("p"),_9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u9r=l(),Lc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(jC.$$.fragment),C9r=l(),Nr=a("div"),F(j9.$$.fragment),w9r=l(),f7e=a("p"),A9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L9r=l(),mn=a("p"),y9r=o("The model class to instantiate is selected based on the "),m7e=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),p7e=a("ul"),DC=a("li"),_7e=a("strong"),I9r=o("vision-encoder-decoder"),N9r=o(" \u2014 "),_Y=a("a"),q9r=o("TFVisionEncoderDecoderModel"),j9r=o(" (Vision Encoder decoder model)"),D9r=l(),F(GC.$$.fragment),rGe=l(),yc=a("h2"),OC=a("a"),u7e=a("span"),F(D9.$$.fragment),G9r=l(),b7e=a("span"),O9r=o("TFAutoModelForSpeechSeq2Seq"),tGe=l(),cr=a("div"),F(G9.$$.fragment),V9r=l(),xc=a("p"),X9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uY=a("a"),z9r=o("from_pretrained()"),W9r=o(" class method or the "),bY=a("a"),Q9r=o("from_config()"),H9r=o(` class
method.`),U9r=l(),O9=a("p"),J9r=o("This class cannot be instantiated directly using "),v7e=a("code"),Y9r=o("__init__()"),K9r=o(" (throws an error)."),Z9r=l(),Gt=a("div"),F(V9.$$.fragment),exr=l(),F7e=a("p"),oxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rxr=l(),$c=a("p"),txr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),axr=o("not"),nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),sxr=o("from_pretrained()"),lxr=o(" to load the model weights."),ixr=l(),F(VC.$$.fragment),dxr=l(),qr=a("div"),F(X9.$$.fragment),cxr=l(),M7e=a("p"),fxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mxr=l(),gn=a("p"),gxr=o("The model class to instantiate is selected based on the "),E7e=a("code"),hxr=o("model_type"),pxr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),_xr=o("pretrained_model_name_or_path"),uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(":"),Fxr=l(),A7e=a("ul"),XC=a("li"),L7e=a("strong"),Txr=o("speech_to_text"),Mxr=o(" \u2014 "),FY=a("a"),Exr=o("TFSpeech2TextForConditionalGeneration"),Cxr=o(" (Speech2Text model)"),wxr=l(),F(zC.$$.fragment),aGe=l(),kc=a("h2"),WC=a("a"),y7e=a("span"),F(z9.$$.fragment),Axr=l(),x7e=a("span"),Lxr=o("FlaxAutoModel"),nGe=l(),fr=a("div"),F(W9.$$.fragment),yxr=l(),Sc=a("p"),xxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TY=a("a"),$xr=o("from_pretrained()"),kxr=o(" class method or the "),MY=a("a"),Sxr=o("from_config()"),Rxr=o(` class
method.`),Pxr=l(),Q9=a("p"),Bxr=o("This class cannot be instantiated directly using "),$7e=a("code"),Ixr=o("__init__()"),Nxr=o(" (throws an error)."),qxr=l(),Ot=a("div"),F(H9.$$.fragment),jxr=l(),k7e=a("p"),Dxr=o("Instantiates one of the base model classes of the library from a configuration."),Gxr=l(),Rc=a("p"),Oxr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),Vxr=o("not"),Xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),zxr=o("from_pretrained()"),Wxr=o(" to load the model weights."),Qxr=l(),F(QC.$$.fragment),Hxr=l(),jr=a("div"),F(U9.$$.fragment),Uxr=l(),R7e=a("p"),Jxr=o("Instantiate one of the base model classes of the library from a pretrained model."),Yxr=l(),hn=a("p"),Kxr=o("The model class to instantiate is selected based on the "),P7e=a("code"),Zxr=o("model_type"),e$r=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),o$r=o("pretrained_model_name_or_path"),r$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),t$r=o("pretrained_model_name_or_path"),a$r=o(":"),n$r=l(),re=a("ul"),HC=a("li"),N7e=a("strong"),s$r=o("albert"),l$r=o(" \u2014 "),CY=a("a"),i$r=o("FlaxAlbertModel"),d$r=o(" (ALBERT model)"),c$r=l(),UC=a("li"),q7e=a("strong"),f$r=o("bart"),m$r=o(" \u2014 "),wY=a("a"),g$r=o("FlaxBartModel"),h$r=o(" (BART model)"),p$r=l(),JC=a("li"),j7e=a("strong"),_$r=o("beit"),u$r=o(" \u2014 "),AY=a("a"),b$r=o("FlaxBeitModel"),v$r=o(" (BEiT model)"),F$r=l(),YC=a("li"),D7e=a("strong"),T$r=o("bert"),M$r=o(" \u2014 "),LY=a("a"),E$r=o("FlaxBertModel"),C$r=o(" (BERT model)"),w$r=l(),KC=a("li"),G7e=a("strong"),A$r=o("big_bird"),L$r=o(" \u2014 "),yY=a("a"),y$r=o("FlaxBigBirdModel"),x$r=o(" (BigBird model)"),$$r=l(),ZC=a("li"),O7e=a("strong"),k$r=o("blenderbot"),S$r=o(" \u2014 "),xY=a("a"),R$r=o("FlaxBlenderbotModel"),P$r=o(" (Blenderbot model)"),B$r=l(),e3=a("li"),V7e=a("strong"),I$r=o("blenderbot-small"),N$r=o(" \u2014 "),$Y=a("a"),q$r=o("FlaxBlenderbotSmallModel"),j$r=o(" (BlenderbotSmall model)"),D$r=l(),o3=a("li"),X7e=a("strong"),G$r=o("clip"),O$r=o(" \u2014 "),kY=a("a"),V$r=o("FlaxCLIPModel"),X$r=o(" (CLIP model)"),z$r=l(),r3=a("li"),z7e=a("strong"),W$r=o("distilbert"),Q$r=o(" \u2014 "),SY=a("a"),H$r=o("FlaxDistilBertModel"),U$r=o(" (DistilBERT model)"),J$r=l(),t3=a("li"),W7e=a("strong"),Y$r=o("electra"),K$r=o(" \u2014 "),RY=a("a"),Z$r=o("FlaxElectraModel"),ekr=o(" (ELECTRA model)"),okr=l(),a3=a("li"),Q7e=a("strong"),rkr=o("gpt2"),tkr=o(" \u2014 "),PY=a("a"),akr=o("FlaxGPT2Model"),nkr=o(" (OpenAI GPT-2 model)"),skr=l(),n3=a("li"),H7e=a("strong"),lkr=o("gpt_neo"),ikr=o(" \u2014 "),BY=a("a"),dkr=o("FlaxGPTNeoModel"),ckr=o(" (GPT Neo model)"),fkr=l(),s3=a("li"),U7e=a("strong"),mkr=o("gptj"),gkr=o(" \u2014 "),IY=a("a"),hkr=o("FlaxGPTJModel"),pkr=o(" (GPT-J model)"),_kr=l(),l3=a("li"),J7e=a("strong"),ukr=o("marian"),bkr=o(" \u2014 "),NY=a("a"),vkr=o("FlaxMarianModel"),Fkr=o(" (Marian model)"),Tkr=l(),i3=a("li"),Y7e=a("strong"),Mkr=o("mbart"),Ekr=o(" \u2014 "),qY=a("a"),Ckr=o("FlaxMBartModel"),wkr=o(" (mBART model)"),Akr=l(),d3=a("li"),K7e=a("strong"),Lkr=o("mt5"),ykr=o(" \u2014 "),jY=a("a"),xkr=o("FlaxMT5Model"),$kr=o(" (MT5 model)"),kkr=l(),c3=a("li"),Z7e=a("strong"),Skr=o("opt"),Rkr=o(" \u2014 "),DY=a("a"),Pkr=o("FlaxOPTModel"),Bkr=o(" (OPT model)"),Ikr=l(),f3=a("li"),eMe=a("strong"),Nkr=o("pegasus"),qkr=o(" \u2014 "),GY=a("a"),jkr=o("FlaxPegasusModel"),Dkr=o(" (Pegasus model)"),Gkr=l(),m3=a("li"),oMe=a("strong"),Okr=o("roberta"),Vkr=o(" \u2014 "),OY=a("a"),Xkr=o("FlaxRobertaModel"),zkr=o(" (RoBERTa model)"),Wkr=l(),g3=a("li"),rMe=a("strong"),Qkr=o("roformer"),Hkr=o(" \u2014 "),VY=a("a"),Ukr=o("FlaxRoFormerModel"),Jkr=o(" (RoFormer model)"),Ykr=l(),h3=a("li"),tMe=a("strong"),Kkr=o("t5"),Zkr=o(" \u2014 "),XY=a("a"),eSr=o("FlaxT5Model"),oSr=o(" (T5 model)"),rSr=l(),p3=a("li"),aMe=a("strong"),tSr=o("vision-text-dual-encoder"),aSr=o(" \u2014 "),zY=a("a"),nSr=o("FlaxVisionTextDualEncoderModel"),sSr=o(" (VisionTextDualEncoder model)"),lSr=l(),_3=a("li"),nMe=a("strong"),iSr=o("vit"),dSr=o(" \u2014 "),WY=a("a"),cSr=o("FlaxViTModel"),fSr=o(" (ViT model)"),mSr=l(),u3=a("li"),sMe=a("strong"),gSr=o("wav2vec2"),hSr=o(" \u2014 "),QY=a("a"),pSr=o("FlaxWav2Vec2Model"),_Sr=o(" (Wav2Vec2 model)"),uSr=l(),b3=a("li"),lMe=a("strong"),bSr=o("xglm"),vSr=o(" \u2014 "),HY=a("a"),FSr=o("FlaxXGLMModel"),TSr=o(" (XGLM model)"),MSr=l(),v3=a("li"),iMe=a("strong"),ESr=o("xlm-roberta"),CSr=o(" \u2014 "),UY=a("a"),wSr=o("FlaxXLMRobertaModel"),ASr=o(" (XLM-RoBERTa model)"),LSr=l(),F(F3.$$.fragment),sGe=l(),Pc=a("h2"),T3=a("a"),dMe=a("span"),F(J9.$$.fragment),ySr=l(),cMe=a("span"),xSr=o("FlaxAutoModelForCausalLM"),lGe=l(),mr=a("div"),F(Y9.$$.fragment),$Sr=l(),Bc=a("p"),kSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JY=a("a"),SSr=o("from_pretrained()"),RSr=o(" class method or the "),YY=a("a"),PSr=o("from_config()"),BSr=o(` class
method.`),ISr=l(),K9=a("p"),NSr=o("This class cannot be instantiated directly using "),fMe=a("code"),qSr=o("__init__()"),jSr=o(" (throws an error)."),DSr=l(),Vt=a("div"),F(Z9.$$.fragment),GSr=l(),mMe=a("p"),OSr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VSr=l(),Ic=a("p"),XSr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),zSr=o("not"),WSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),QSr=o("from_pretrained()"),HSr=o(" to load the model weights."),USr=l(),F(M3.$$.fragment),JSr=l(),Dr=a("div"),F(ex.$$.fragment),YSr=l(),hMe=a("p"),KSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZSr=l(),pn=a("p"),eRr=o("The model class to instantiate is selected based on the "),pMe=a("code"),oRr=o("model_type"),rRr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(":"),lRr=l(),xe=a("ul"),E3=a("li"),bMe=a("strong"),iRr=o("bart"),dRr=o(" \u2014 "),ZY=a("a"),cRr=o("FlaxBartForCausalLM"),fRr=o(" (BART model)"),mRr=l(),C3=a("li"),vMe=a("strong"),gRr=o("bert"),hRr=o(" \u2014 "),eK=a("a"),pRr=o("FlaxBertForCausalLM"),_Rr=o(" (BERT model)"),uRr=l(),w3=a("li"),FMe=a("strong"),bRr=o("big_bird"),vRr=o(" \u2014 "),oK=a("a"),FRr=o("FlaxBigBirdForCausalLM"),TRr=o(" (BigBird model)"),MRr=l(),A3=a("li"),TMe=a("strong"),ERr=o("electra"),CRr=o(" \u2014 "),rK=a("a"),wRr=o("FlaxElectraForCausalLM"),ARr=o(" (ELECTRA model)"),LRr=l(),L3=a("li"),MMe=a("strong"),yRr=o("gpt2"),xRr=o(" \u2014 "),tK=a("a"),$Rr=o("FlaxGPT2LMHeadModel"),kRr=o(" (OpenAI GPT-2 model)"),SRr=l(),y3=a("li"),EMe=a("strong"),RRr=o("gpt_neo"),PRr=o(" \u2014 "),aK=a("a"),BRr=o("FlaxGPTNeoForCausalLM"),IRr=o(" (GPT Neo model)"),NRr=l(),x3=a("li"),CMe=a("strong"),qRr=o("gptj"),jRr=o(" \u2014 "),nK=a("a"),DRr=o("FlaxGPTJForCausalLM"),GRr=o(" (GPT-J model)"),ORr=l(),$3=a("li"),wMe=a("strong"),VRr=o("opt"),XRr=o(" \u2014 "),sK=a("a"),zRr=o("FlaxOPTForCausalLM"),WRr=o(" (OPT model)"),QRr=l(),k3=a("li"),AMe=a("strong"),HRr=o("roberta"),URr=o(" \u2014 "),lK=a("a"),JRr=o("FlaxRobertaForCausalLM"),YRr=o(" (RoBERTa model)"),KRr=l(),S3=a("li"),LMe=a("strong"),ZRr=o("xglm"),ePr=o(" \u2014 "),iK=a("a"),oPr=o("FlaxXGLMForCausalLM"),rPr=o(" (XGLM model)"),tPr=l(),F(R3.$$.fragment),iGe=l(),Nc=a("h2"),P3=a("a"),yMe=a("span"),F(ox.$$.fragment),aPr=l(),xMe=a("span"),nPr=o("FlaxAutoModelForPreTraining"),dGe=l(),gr=a("div"),F(rx.$$.fragment),sPr=l(),qc=a("p"),lPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dK=a("a"),iPr=o("from_pretrained()"),dPr=o(" class method or the "),cK=a("a"),cPr=o("from_config()"),fPr=o(` class
method.`),mPr=l(),tx=a("p"),gPr=o("This class cannot be instantiated directly using "),$Me=a("code"),hPr=o("__init__()"),pPr=o(" (throws an error)."),_Pr=l(),Xt=a("div"),F(ax.$$.fragment),uPr=l(),kMe=a("p"),bPr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vPr=l(),jc=a("p"),FPr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),TPr=o("not"),MPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),EPr=o("from_pretrained()"),CPr=o(" to load the model weights."),wPr=l(),F(B3.$$.fragment),APr=l(),Gr=a("div"),F(nx.$$.fragment),LPr=l(),RMe=a("p"),yPr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xPr=l(),_n=a("p"),$Pr=o("The model class to instantiate is selected based on the "),PMe=a("code"),kPr=o("model_type"),SPr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),RPr=o("pretrained_model_name_or_path"),PPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(":"),NPr=l(),Ee=a("ul"),I3=a("li"),NMe=a("strong"),qPr=o("albert"),jPr=o(" \u2014 "),mK=a("a"),DPr=o("FlaxAlbertForPreTraining"),GPr=o(" (ALBERT model)"),OPr=l(),N3=a("li"),qMe=a("strong"),VPr=o("bart"),XPr=o(" \u2014 "),gK=a("a"),zPr=o("FlaxBartForConditionalGeneration"),WPr=o(" (BART model)"),QPr=l(),q3=a("li"),jMe=a("strong"),HPr=o("bert"),UPr=o(" \u2014 "),hK=a("a"),JPr=o("FlaxBertForPreTraining"),YPr=o(" (BERT model)"),KPr=l(),j3=a("li"),DMe=a("strong"),ZPr=o("big_bird"),eBr=o(" \u2014 "),pK=a("a"),oBr=o("FlaxBigBirdForPreTraining"),rBr=o(" (BigBird model)"),tBr=l(),D3=a("li"),GMe=a("strong"),aBr=o("electra"),nBr=o(" \u2014 "),_K=a("a"),sBr=o("FlaxElectraForPreTraining"),lBr=o(" (ELECTRA model)"),iBr=l(),G3=a("li"),OMe=a("strong"),dBr=o("mbart"),cBr=o(" \u2014 "),uK=a("a"),fBr=o("FlaxMBartForConditionalGeneration"),mBr=o(" (mBART model)"),gBr=l(),O3=a("li"),VMe=a("strong"),hBr=o("mt5"),pBr=o(" \u2014 "),bK=a("a"),_Br=o("FlaxMT5ForConditionalGeneration"),uBr=o(" (MT5 model)"),bBr=l(),V3=a("li"),XMe=a("strong"),vBr=o("roberta"),FBr=o(" \u2014 "),vK=a("a"),TBr=o("FlaxRobertaForMaskedLM"),MBr=o(" (RoBERTa model)"),EBr=l(),X3=a("li"),zMe=a("strong"),CBr=o("roformer"),wBr=o(" \u2014 "),FK=a("a"),ABr=o("FlaxRoFormerForMaskedLM"),LBr=o(" (RoFormer model)"),yBr=l(),z3=a("li"),WMe=a("strong"),xBr=o("t5"),$Br=o(" \u2014 "),TK=a("a"),kBr=o("FlaxT5ForConditionalGeneration"),SBr=o(" (T5 model)"),RBr=l(),W3=a("li"),QMe=a("strong"),PBr=o("wav2vec2"),BBr=o(" \u2014 "),MK=a("a"),IBr=o("FlaxWav2Vec2ForPreTraining"),NBr=o(" (Wav2Vec2 model)"),qBr=l(),Q3=a("li"),HMe=a("strong"),jBr=o("xlm-roberta"),DBr=o(" \u2014 "),EK=a("a"),GBr=o("FlaxXLMRobertaForMaskedLM"),OBr=o(" (XLM-RoBERTa model)"),VBr=l(),F(H3.$$.fragment),cGe=l(),Dc=a("h2"),U3=a("a"),UMe=a("span"),F(sx.$$.fragment),XBr=l(),JMe=a("span"),zBr=o("FlaxAutoModelForMaskedLM"),fGe=l(),hr=a("div"),F(lx.$$.fragment),WBr=l(),Gc=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CK=a("a"),HBr=o("from_pretrained()"),UBr=o(" class method or the "),wK=a("a"),JBr=o("from_config()"),YBr=o(` class
method.`),KBr=l(),ix=a("p"),ZBr=o("This class cannot be instantiated directly using "),YMe=a("code"),eIr=o("__init__()"),oIr=o(" (throws an error)."),rIr=l(),zt=a("div"),F(dx.$$.fragment),tIr=l(),KMe=a("p"),aIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nIr=l(),Oc=a("p"),sIr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),lIr=o("not"),iIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),dIr=o("from_pretrained()"),cIr=o(" to load the model weights."),fIr=l(),F(J3.$$.fragment),mIr=l(),Or=a("div"),F(cx.$$.fragment),gIr=l(),eEe=a("p"),hIr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pIr=l(),un=a("p"),_Ir=o("The model class to instantiate is selected based on the "),oEe=a("code"),uIr=o("model_type"),bIr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(":"),EIr=l(),$e=a("ul"),Y3=a("li"),aEe=a("strong"),CIr=o("albert"),wIr=o(" \u2014 "),LK=a("a"),AIr=o("FlaxAlbertForMaskedLM"),LIr=o(" (ALBERT model)"),yIr=l(),K3=a("li"),nEe=a("strong"),xIr=o("bart"),$Ir=o(" \u2014 "),yK=a("a"),kIr=o("FlaxBartForConditionalGeneration"),SIr=o(" (BART model)"),RIr=l(),Z3=a("li"),sEe=a("strong"),PIr=o("bert"),BIr=o(" \u2014 "),xK=a("a"),IIr=o("FlaxBertForMaskedLM"),NIr=o(" (BERT model)"),qIr=l(),e0=a("li"),lEe=a("strong"),jIr=o("big_bird"),DIr=o(" \u2014 "),$K=a("a"),GIr=o("FlaxBigBirdForMaskedLM"),OIr=o(" (BigBird model)"),VIr=l(),o0=a("li"),iEe=a("strong"),XIr=o("distilbert"),zIr=o(" \u2014 "),kK=a("a"),WIr=o("FlaxDistilBertForMaskedLM"),QIr=o(" (DistilBERT model)"),HIr=l(),r0=a("li"),dEe=a("strong"),UIr=o("electra"),JIr=o(" \u2014 "),SK=a("a"),YIr=o("FlaxElectraForMaskedLM"),KIr=o(" (ELECTRA model)"),ZIr=l(),t0=a("li"),cEe=a("strong"),eNr=o("mbart"),oNr=o(" \u2014 "),RK=a("a"),rNr=o("FlaxMBartForConditionalGeneration"),tNr=o(" (mBART model)"),aNr=l(),a0=a("li"),fEe=a("strong"),nNr=o("roberta"),sNr=o(" \u2014 "),PK=a("a"),lNr=o("FlaxRobertaForMaskedLM"),iNr=o(" (RoBERTa model)"),dNr=l(),n0=a("li"),mEe=a("strong"),cNr=o("roformer"),fNr=o(" \u2014 "),BK=a("a"),mNr=o("FlaxRoFormerForMaskedLM"),gNr=o(" (RoFormer model)"),hNr=l(),s0=a("li"),gEe=a("strong"),pNr=o("xlm-roberta"),_Nr=o(" \u2014 "),IK=a("a"),uNr=o("FlaxXLMRobertaForMaskedLM"),bNr=o(" (XLM-RoBERTa model)"),vNr=l(),F(l0.$$.fragment),mGe=l(),Vc=a("h2"),i0=a("a"),hEe=a("span"),F(fx.$$.fragment),FNr=l(),pEe=a("span"),TNr=o("FlaxAutoModelForSeq2SeqLM"),gGe=l(),pr=a("div"),F(mx.$$.fragment),MNr=l(),Xc=a("p"),ENr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NK=a("a"),CNr=o("from_pretrained()"),wNr=o(" class method or the "),qK=a("a"),ANr=o("from_config()"),LNr=o(` class
method.`),yNr=l(),gx=a("p"),xNr=o("This class cannot be instantiated directly using "),_Ee=a("code"),$Nr=o("__init__()"),kNr=o(" (throws an error)."),SNr=l(),Wt=a("div"),F(hx.$$.fragment),RNr=l(),uEe=a("p"),PNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BNr=l(),zc=a("p"),INr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),NNr=o("not"),qNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),jNr=o("from_pretrained()"),DNr=o(" to load the model weights."),GNr=l(),F(d0.$$.fragment),ONr=l(),Vr=a("div"),F(px.$$.fragment),VNr=l(),vEe=a("p"),XNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zNr=l(),bn=a("p"),WNr=o("The model class to instantiate is selected based on the "),FEe=a("code"),QNr=o("model_type"),HNr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(":"),ZNr=l(),Pe=a("ul"),c0=a("li"),EEe=a("strong"),eqr=o("bart"),oqr=o(" \u2014 "),DK=a("a"),rqr=o("FlaxBartForConditionalGeneration"),tqr=o(" (BART model)"),aqr=l(),f0=a("li"),CEe=a("strong"),nqr=o("blenderbot"),sqr=o(" \u2014 "),GK=a("a"),lqr=o("FlaxBlenderbotForConditionalGeneration"),iqr=o(" (Blenderbot model)"),dqr=l(),m0=a("li"),wEe=a("strong"),cqr=o("blenderbot-small"),fqr=o(" \u2014 "),OK=a("a"),mqr=o("FlaxBlenderbotSmallForConditionalGeneration"),gqr=o(" (BlenderbotSmall model)"),hqr=l(),g0=a("li"),AEe=a("strong"),pqr=o("encoder-decoder"),_qr=o(" \u2014 "),VK=a("a"),uqr=o("FlaxEncoderDecoderModel"),bqr=o(" (Encoder decoder model)"),vqr=l(),h0=a("li"),LEe=a("strong"),Fqr=o("marian"),Tqr=o(" \u2014 "),XK=a("a"),Mqr=o("FlaxMarianMTModel"),Eqr=o(" (Marian model)"),Cqr=l(),p0=a("li"),yEe=a("strong"),wqr=o("mbart"),Aqr=o(" \u2014 "),zK=a("a"),Lqr=o("FlaxMBartForConditionalGeneration"),yqr=o(" (mBART model)"),xqr=l(),_0=a("li"),xEe=a("strong"),$qr=o("mt5"),kqr=o(" \u2014 "),WK=a("a"),Sqr=o("FlaxMT5ForConditionalGeneration"),Rqr=o(" (MT5 model)"),Pqr=l(),u0=a("li"),$Ee=a("strong"),Bqr=o("pegasus"),Iqr=o(" \u2014 "),QK=a("a"),Nqr=o("FlaxPegasusForConditionalGeneration"),qqr=o(" (Pegasus model)"),jqr=l(),b0=a("li"),kEe=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),HK=a("a"),Oqr=o("FlaxT5ForConditionalGeneration"),Vqr=o(" (T5 model)"),Xqr=l(),F(v0.$$.fragment),hGe=l(),Wc=a("h2"),F0=a("a"),SEe=a("span"),F(_x.$$.fragment),zqr=l(),REe=a("span"),Wqr=o("FlaxAutoModelForSequenceClassification"),pGe=l(),_r=a("div"),F(ux.$$.fragment),Qqr=l(),Qc=a("p"),Hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UK=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" class method or the "),JK=a("a"),Yqr=o("from_config()"),Kqr=o(` class
method.`),Zqr=l(),bx=a("p"),ejr=o("This class cannot be instantiated directly using "),PEe=a("code"),ojr=o("__init__()"),rjr=o(" (throws an error)."),tjr=l(),Qt=a("div"),F(vx.$$.fragment),ajr=l(),BEe=a("p"),njr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sjr=l(),Hc=a("p"),ljr=o(`Note:
Loading a model from its configuration file does `),IEe=a("strong"),ijr=o("not"),djr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),cjr=o("from_pretrained()"),fjr=o(" to load the model weights."),mjr=l(),F(T0.$$.fragment),gjr=l(),Xr=a("div"),F(Fx.$$.fragment),hjr=l(),NEe=a("p"),pjr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_jr=l(),vn=a("p"),ujr=o("The model class to instantiate is selected based on the "),qEe=a("code"),bjr=o("model_type"),vjr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),Mjr=o("pretrained_model_name_or_path"),Ejr=o(":"),Cjr=l(),ke=a("ul"),M0=a("li"),GEe=a("strong"),wjr=o("albert"),Ajr=o(" \u2014 "),KK=a("a"),Ljr=o("FlaxAlbertForSequenceClassification"),yjr=o(" (ALBERT model)"),xjr=l(),E0=a("li"),OEe=a("strong"),$jr=o("bart"),kjr=o(" \u2014 "),ZK=a("a"),Sjr=o("FlaxBartForSequenceClassification"),Rjr=o(" (BART model)"),Pjr=l(),C0=a("li"),VEe=a("strong"),Bjr=o("bert"),Ijr=o(" \u2014 "),eZ=a("a"),Njr=o("FlaxBertForSequenceClassification"),qjr=o(" (BERT model)"),jjr=l(),w0=a("li"),XEe=a("strong"),Djr=o("big_bird"),Gjr=o(" \u2014 "),oZ=a("a"),Ojr=o("FlaxBigBirdForSequenceClassification"),Vjr=o(" (BigBird model)"),Xjr=l(),A0=a("li"),zEe=a("strong"),zjr=o("distilbert"),Wjr=o(" \u2014 "),rZ=a("a"),Qjr=o("FlaxDistilBertForSequenceClassification"),Hjr=o(" (DistilBERT model)"),Ujr=l(),L0=a("li"),WEe=a("strong"),Jjr=o("electra"),Yjr=o(" \u2014 "),tZ=a("a"),Kjr=o("FlaxElectraForSequenceClassification"),Zjr=o(" (ELECTRA model)"),eDr=l(),y0=a("li"),QEe=a("strong"),oDr=o("mbart"),rDr=o(" \u2014 "),aZ=a("a"),tDr=o("FlaxMBartForSequenceClassification"),aDr=o(" (mBART model)"),nDr=l(),x0=a("li"),HEe=a("strong"),sDr=o("roberta"),lDr=o(" \u2014 "),nZ=a("a"),iDr=o("FlaxRobertaForSequenceClassification"),dDr=o(" (RoBERTa model)"),cDr=l(),$0=a("li"),UEe=a("strong"),fDr=o("roformer"),mDr=o(" \u2014 "),sZ=a("a"),gDr=o("FlaxRoFormerForSequenceClassification"),hDr=o(" (RoFormer model)"),pDr=l(),k0=a("li"),JEe=a("strong"),_Dr=o("xlm-roberta"),uDr=o(" \u2014 "),lZ=a("a"),bDr=o("FlaxXLMRobertaForSequenceClassification"),vDr=o(" (XLM-RoBERTa model)"),FDr=l(),F(S0.$$.fragment),_Ge=l(),Uc=a("h2"),R0=a("a"),YEe=a("span"),F(Tx.$$.fragment),TDr=l(),KEe=a("span"),MDr=o("FlaxAutoModelForQuestionAnswering"),uGe=l(),ur=a("div"),F(Mx.$$.fragment),EDr=l(),Jc=a("p"),CDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iZ=a("a"),wDr=o("from_pretrained()"),ADr=o(" class method or the "),dZ=a("a"),LDr=o("from_config()"),yDr=o(` class
method.`),xDr=l(),Ex=a("p"),$Dr=o("This class cannot be instantiated directly using "),ZEe=a("code"),kDr=o("__init__()"),SDr=o(" (throws an error)."),RDr=l(),Ht=a("div"),F(Cx.$$.fragment),PDr=l(),eCe=a("p"),BDr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IDr=l(),Yc=a("p"),NDr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),qDr=o("not"),jDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=a("a"),DDr=o("from_pretrained()"),GDr=o(" to load the model weights."),ODr=l(),F(P0.$$.fragment),VDr=l(),zr=a("div"),F(wx.$$.fragment),XDr=l(),rCe=a("p"),zDr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WDr=l(),Fn=a("p"),QDr=o("The model class to instantiate is selected based on the "),tCe=a("code"),HDr=o("model_type"),UDr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),JDr=o("pretrained_model_name_or_path"),YDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),KDr=o("pretrained_model_name_or_path"),ZDr=o(":"),eGr=l(),Se=a("ul"),B0=a("li"),sCe=a("strong"),oGr=o("albert"),rGr=o(" \u2014 "),fZ=a("a"),tGr=o("FlaxAlbertForQuestionAnswering"),aGr=o(" (ALBERT model)"),nGr=l(),I0=a("li"),lCe=a("strong"),sGr=o("bart"),lGr=o(" \u2014 "),mZ=a("a"),iGr=o("FlaxBartForQuestionAnswering"),dGr=o(" (BART model)"),cGr=l(),N0=a("li"),iCe=a("strong"),fGr=o("bert"),mGr=o(" \u2014 "),gZ=a("a"),gGr=o("FlaxBertForQuestionAnswering"),hGr=o(" (BERT model)"),pGr=l(),q0=a("li"),dCe=a("strong"),_Gr=o("big_bird"),uGr=o(" \u2014 "),hZ=a("a"),bGr=o("FlaxBigBirdForQuestionAnswering"),vGr=o(" (BigBird model)"),FGr=l(),j0=a("li"),cCe=a("strong"),TGr=o("distilbert"),MGr=o(" \u2014 "),pZ=a("a"),EGr=o("FlaxDistilBertForQuestionAnswering"),CGr=o(" (DistilBERT model)"),wGr=l(),D0=a("li"),fCe=a("strong"),AGr=o("electra"),LGr=o(" \u2014 "),_Z=a("a"),yGr=o("FlaxElectraForQuestionAnswering"),xGr=o(" (ELECTRA model)"),$Gr=l(),G0=a("li"),mCe=a("strong"),kGr=o("mbart"),SGr=o(" \u2014 "),uZ=a("a"),RGr=o("FlaxMBartForQuestionAnswering"),PGr=o(" (mBART model)"),BGr=l(),O0=a("li"),gCe=a("strong"),IGr=o("roberta"),NGr=o(" \u2014 "),bZ=a("a"),qGr=o("FlaxRobertaForQuestionAnswering"),jGr=o(" (RoBERTa model)"),DGr=l(),V0=a("li"),hCe=a("strong"),GGr=o("roformer"),OGr=o(" \u2014 "),vZ=a("a"),VGr=o("FlaxRoFormerForQuestionAnswering"),XGr=o(" (RoFormer model)"),zGr=l(),X0=a("li"),pCe=a("strong"),WGr=o("xlm-roberta"),QGr=o(" \u2014 "),FZ=a("a"),HGr=o("FlaxXLMRobertaForQuestionAnswering"),UGr=o(" (XLM-RoBERTa model)"),JGr=l(),F(z0.$$.fragment),bGe=l(),Kc=a("h2"),W0=a("a"),_Ce=a("span"),F(Ax.$$.fragment),YGr=l(),uCe=a("span"),KGr=o("FlaxAutoModelForTokenClassification"),vGe=l(),br=a("div"),F(Lx.$$.fragment),ZGr=l(),Zc=a("p"),eOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TZ=a("a"),oOr=o("from_pretrained()"),rOr=o(" class method or the "),MZ=a("a"),tOr=o("from_config()"),aOr=o(` class
method.`),nOr=l(),yx=a("p"),sOr=o("This class cannot be instantiated directly using "),bCe=a("code"),lOr=o("__init__()"),iOr=o(" (throws an error)."),dOr=l(),Ut=a("div"),F(xx.$$.fragment),cOr=l(),vCe=a("p"),fOr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mOr=l(),ef=a("p"),gOr=o(`Note:
Loading a model from its configuration file does `),FCe=a("strong"),hOr=o("not"),pOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),_Or=o("from_pretrained()"),uOr=o(" to load the model weights."),bOr=l(),F(Q0.$$.fragment),vOr=l(),Wr=a("div"),F($x.$$.fragment),FOr=l(),TCe=a("p"),TOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MOr=l(),Tn=a("p"),EOr=o("The model class to instantiate is selected based on the "),MCe=a("code"),COr=o("model_type"),wOr=o(` property of the config object (either
passed as an argument or loaded from `),ECe=a("code"),AOr=o("pretrained_model_name_or_path"),LOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=a("code"),yOr=o("pretrained_model_name_or_path"),xOr=o(":"),$Or=l(),Oe=a("ul"),H0=a("li"),wCe=a("strong"),kOr=o("albert"),SOr=o(" \u2014 "),CZ=a("a"),ROr=o("FlaxAlbertForTokenClassification"),POr=o(" (ALBERT model)"),BOr=l(),U0=a("li"),ACe=a("strong"),IOr=o("bert"),NOr=o(" \u2014 "),wZ=a("a"),qOr=o("FlaxBertForTokenClassification"),jOr=o(" (BERT model)"),DOr=l(),J0=a("li"),LCe=a("strong"),GOr=o("big_bird"),OOr=o(" \u2014 "),AZ=a("a"),VOr=o("FlaxBigBirdForTokenClassification"),XOr=o(" (BigBird model)"),zOr=l(),Y0=a("li"),yCe=a("strong"),WOr=o("distilbert"),QOr=o(" \u2014 "),LZ=a("a"),HOr=o("FlaxDistilBertForTokenClassification"),UOr=o(" (DistilBERT model)"),JOr=l(),K0=a("li"),xCe=a("strong"),YOr=o("electra"),KOr=o(" \u2014 "),yZ=a("a"),ZOr=o("FlaxElectraForTokenClassification"),eVr=o(" (ELECTRA model)"),oVr=l(),Z0=a("li"),$Ce=a("strong"),rVr=o("roberta"),tVr=o(" \u2014 "),xZ=a("a"),aVr=o("FlaxRobertaForTokenClassification"),nVr=o(" (RoBERTa model)"),sVr=l(),ew=a("li"),kCe=a("strong"),lVr=o("roformer"),iVr=o(" \u2014 "),$Z=a("a"),dVr=o("FlaxRoFormerForTokenClassification"),cVr=o(" (RoFormer model)"),fVr=l(),ow=a("li"),SCe=a("strong"),mVr=o("xlm-roberta"),gVr=o(" \u2014 "),kZ=a("a"),hVr=o("FlaxXLMRobertaForTokenClassification"),pVr=o(" (XLM-RoBERTa model)"),_Vr=l(),F(rw.$$.fragment),FGe=l(),of=a("h2"),tw=a("a"),RCe=a("span"),F(kx.$$.fragment),uVr=l(),PCe=a("span"),bVr=o("FlaxAutoModelForMultipleChoice"),TGe=l(),vr=a("div"),F(Sx.$$.fragment),vVr=l(),rf=a("p"),FVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SZ=a("a"),TVr=o("from_pretrained()"),MVr=o(" class method or the "),RZ=a("a"),EVr=o("from_config()"),CVr=o(` class
method.`),wVr=l(),Rx=a("p"),AVr=o("This class cannot be instantiated directly using "),BCe=a("code"),LVr=o("__init__()"),yVr=o(" (throws an error)."),xVr=l(),Jt=a("div"),F(Px.$$.fragment),$Vr=l(),ICe=a("p"),kVr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SVr=l(),tf=a("p"),RVr=o(`Note:
Loading a model from its configuration file does `),NCe=a("strong"),PVr=o("not"),BVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),IVr=o("from_pretrained()"),NVr=o(" to load the model weights."),qVr=l(),F(aw.$$.fragment),jVr=l(),Qr=a("div"),F(Bx.$$.fragment),DVr=l(),qCe=a("p"),GVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OVr=l(),Mn=a("p"),VVr=o("The model class to instantiate is selected based on the "),jCe=a("code"),XVr=o("model_type"),zVr=o(` property of the config object (either
passed as an argument or loaded from `),DCe=a("code"),WVr=o("pretrained_model_name_or_path"),QVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=a("code"),HVr=o("pretrained_model_name_or_path"),UVr=o(":"),JVr=l(),Ve=a("ul"),nw=a("li"),OCe=a("strong"),YVr=o("albert"),KVr=o(" \u2014 "),BZ=a("a"),ZVr=o("FlaxAlbertForMultipleChoice"),eXr=o(" (ALBERT model)"),oXr=l(),sw=a("li"),VCe=a("strong"),rXr=o("bert"),tXr=o(" \u2014 "),IZ=a("a"),aXr=o("FlaxBertForMultipleChoice"),nXr=o(" (BERT model)"),sXr=l(),lw=a("li"),XCe=a("strong"),lXr=o("big_bird"),iXr=o(" \u2014 "),NZ=a("a"),dXr=o("FlaxBigBirdForMultipleChoice"),cXr=o(" (BigBird model)"),fXr=l(),iw=a("li"),zCe=a("strong"),mXr=o("distilbert"),gXr=o(" \u2014 "),qZ=a("a"),hXr=o("FlaxDistilBertForMultipleChoice"),pXr=o(" (DistilBERT model)"),_Xr=l(),dw=a("li"),WCe=a("strong"),uXr=o("electra"),bXr=o(" \u2014 "),jZ=a("a"),vXr=o("FlaxElectraForMultipleChoice"),FXr=o(" (ELECTRA model)"),TXr=l(),cw=a("li"),QCe=a("strong"),MXr=o("roberta"),EXr=o(" \u2014 "),DZ=a("a"),CXr=o("FlaxRobertaForMultipleChoice"),wXr=o(" (RoBERTa model)"),AXr=l(),fw=a("li"),HCe=a("strong"),LXr=o("roformer"),yXr=o(" \u2014 "),GZ=a("a"),xXr=o("FlaxRoFormerForMultipleChoice"),$Xr=o(" (RoFormer model)"),kXr=l(),mw=a("li"),UCe=a("strong"),SXr=o("xlm-roberta"),RXr=o(" \u2014 "),OZ=a("a"),PXr=o("FlaxXLMRobertaForMultipleChoice"),BXr=o(" (XLM-RoBERTa model)"),IXr=l(),F(gw.$$.fragment),MGe=l(),af=a("h2"),hw=a("a"),JCe=a("span"),F(Ix.$$.fragment),NXr=l(),YCe=a("span"),qXr=o("FlaxAutoModelForNextSentencePrediction"),EGe=l(),Fr=a("div"),F(Nx.$$.fragment),jXr=l(),nf=a("p"),DXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VZ=a("a"),GXr=o("from_pretrained()"),OXr=o(" class method or the "),XZ=a("a"),VXr=o("from_config()"),XXr=o(` class
method.`),zXr=l(),qx=a("p"),WXr=o("This class cannot be instantiated directly using "),KCe=a("code"),QXr=o("__init__()"),HXr=o(" (throws an error)."),UXr=l(),Yt=a("div"),F(jx.$$.fragment),JXr=l(),ZCe=a("p"),YXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KXr=l(),sf=a("p"),ZXr=o(`Note:
Loading a model from its configuration file does `),e3e=a("strong"),ezr=o("not"),ozr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),rzr=o("from_pretrained()"),tzr=o(" to load the model weights."),azr=l(),F(pw.$$.fragment),nzr=l(),Hr=a("div"),F(Dx.$$.fragment),szr=l(),o3e=a("p"),lzr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),izr=l(),En=a("p"),dzr=o("The model class to instantiate is selected based on the "),r3e=a("code"),czr=o("model_type"),fzr=o(` property of the config object (either
passed as an argument or loaded from `),t3e=a("code"),mzr=o("pretrained_model_name_or_path"),gzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=a("code"),hzr=o("pretrained_model_name_or_path"),pzr=o(":"),_zr=l(),n3e=a("ul"),_w=a("li"),s3e=a("strong"),uzr=o("bert"),bzr=o(" \u2014 "),WZ=a("a"),vzr=o("FlaxBertForNextSentencePrediction"),Fzr=o(" (BERT model)"),Tzr=l(),F(uw.$$.fragment),CGe=l(),lf=a("h2"),bw=a("a"),l3e=a("span"),F(Gx.$$.fragment),Mzr=l(),i3e=a("span"),Ezr=o("FlaxAutoModelForImageClassification"),wGe=l(),Tr=a("div"),F(Ox.$$.fragment),Czr=l(),df=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QZ=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),HZ=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),Vx=a("p"),kzr=o("This class cannot be instantiated directly using "),d3e=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Kt=a("div"),F(Xx.$$.fragment),Bzr=l(),c3e=a("p"),Izr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nzr=l(),cf=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(vw.$$.fragment),Xzr=l(),Ur=a("div"),F(zx.$$.fragment),zzr=l(),m3e=a("p"),Wzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qzr=l(),Cn=a("p"),Hzr=o("The model class to instantiate is selected based on the "),g3e=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),Zzr=o("pretrained_model_name_or_path"),eWr=o(":"),oWr=l(),Wx=a("ul"),Fw=a("li"),_3e=a("strong"),rWr=o("beit"),tWr=o(" \u2014 "),JZ=a("a"),aWr=o("FlaxBeitForImageClassification"),nWr=o(" (BEiT model)"),sWr=l(),Tw=a("li"),u3e=a("strong"),lWr=o("vit"),iWr=o(" \u2014 "),YZ=a("a"),dWr=o("FlaxViTForImageClassification"),cWr=o(" (ViT model)"),fWr=l(),F(Mw.$$.fragment),AGe=l(),ff=a("h2"),Ew=a("a"),b3e=a("span"),F(Qx.$$.fragment),mWr=l(),v3e=a("span"),gWr=o("FlaxAutoModelForVision2Seq"),LGe=l(),Mr=a("div"),F(Hx.$$.fragment),hWr=l(),mf=a("p"),pWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KZ=a("a"),_Wr=o("from_pretrained()"),uWr=o(" class method or the "),ZZ=a("a"),bWr=o("from_config()"),vWr=o(` class
method.`),FWr=l(),Ux=a("p"),TWr=o("This class cannot be instantiated directly using "),F3e=a("code"),MWr=o("__init__()"),EWr=o(" (throws an error)."),CWr=l(),Zt=a("div"),F(Jx.$$.fragment),wWr=l(),T3e=a("p"),AWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LWr=l(),gf=a("p"),yWr=o(`Note:
Loading a model from its configuration file does `),M3e=a("strong"),xWr=o("not"),$Wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),kWr=o("from_pretrained()"),SWr=o(" to load the model weights."),RWr=l(),F(Cw.$$.fragment),PWr=l(),Jr=a("div"),F(Yx.$$.fragment),BWr=l(),E3e=a("p"),IWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NWr=l(),wn=a("p"),qWr=o("The model class to instantiate is selected based on the "),C3e=a("code"),jWr=o("model_type"),DWr=o(` property of the config object (either
passed as an argument or loaded from `),w3e=a("code"),GWr=o("pretrained_model_name_or_path"),OWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=a("code"),VWr=o("pretrained_model_name_or_path"),XWr=o(":"),zWr=l(),L3e=a("ul"),ww=a("li"),y3e=a("strong"),WWr=o("vision-encoder-decoder"),QWr=o(" \u2014 "),oee=a("a"),HWr=o("FlaxVisionEncoderDecoderModel"),UWr=o(" (Vision Encoder decoder model)"),JWr=l(),F(Aw.$$.fragment),this.h()},l(f){const u=uPt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Kx=s(p);m=n(Kx,"A",{id:!0,class:!0,href:!0});var x3e=s(m);_=n(x3e,"SPAN",{});var $3e=s(_);T(d.$$.fragment,$3e),$3e.forEach(t),x3e.forEach(t),h=i(Kx),Mo=n(Kx,"SPAN",{});var k3e=s(Mo);gi=r(k3e,"Auto Classes"),k3e.forEach(t),Kx.forEach(t),uf=i(f),tt=n(f,"P",{});var Zx=s(tt);hi=r(Zx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Zx,"CODE",{});var S3e=s(pi);V6=r(S3e,"from_pretrained()"),S3e.forEach(t),bf=r(Zx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Zx.forEach(t),Ge=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var R3e=s(Ln);X6=r(R3e,"AutoConfig"),R3e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var P3e=s(xn);z6=r(P3e,"AutoModel"),P3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var B3e=s($n);W6=r(B3e,"AutoTokenizer"),B3e.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var e$=s(Ae);mk=r(e$,"will create a model that is an instance of "),vi=n(e$,"A",{href:!0});var I3e=s(vi);gk=r(I3e,"BertModel"),I3e.forEach(t),hk=r(e$,"."),e$.forEach(t),Eo=i(f),Aa=n(f,"P",{});var o$=s(Aa);pk=r(o$,"There is one class of "),Ff=n(o$,"CODE",{});var N3e=s(Ff);_k=r(N3e,"AutoModel"),N3e.forEach(t),IVe=r(o$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),o$.forEach(t),wje=i(f),Fi=n(f,"H2",{class:!0});var r$=s(Fi);Tf=n(r$,"A",{id:!0,class:!0,href:!0});var q3e=s(Tf);Hoe=n(q3e,"SPAN",{});var j3e=s(Hoe);T(Q6.$$.fragment,j3e),j3e.forEach(t),q3e.forEach(t),NVe=i(r$),Uoe=n(r$,"SPAN",{});var D3e=s(Uoe);qVe=r(D3e,"Extending the Auto Classes"),D3e.forEach(t),r$.forEach(t),Aje=i(f),kn=n(f,"P",{});var hf=s(kn);jVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Joe=n(hf,"CODE",{});var G3e=s(Joe);DVe=r(G3e,"NewModel"),G3e.forEach(t),GVe=r(hf,", make sure you have a "),Yoe=n(hf,"CODE",{});var O3e=s(Yoe);OVe=r(O3e,"NewModelConfig"),O3e.forEach(t),VVe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),Lje=i(f),T(H6.$$.fragment,f),yje=i(f),uk=n(f,"P",{});var V3e=s(uk);XVe=r(V3e,"You will then be able to use the auto classes like you would usually do!"),V3e.forEach(t),xje=i(f),T(Mf.$$.fragment,f),$je=i(f),Ti=n(f,"H2",{class:!0});var t$=s(Ti);Ef=n(t$,"A",{id:!0,class:!0,href:!0});var X3e=s(Ef);Koe=n(X3e,"SPAN",{});var z3e=s(Koe);T(U6.$$.fragment,z3e),z3e.forEach(t),X3e.forEach(t),zVe=i(t$),Zoe=n(t$,"SPAN",{});var W3e=s(Zoe);WVe=r(W3e,"AutoConfig"),W3e.forEach(t),t$.forEach(t),kje=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(J6.$$.fragment,ot),QVe=i(ot),Y6=n(ot,"P",{});var a$=s(Y6);HVe=r(a$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bk=n(a$,"A",{href:!0});var Q3e=s(bk);UVe=r(Q3e,"from_pretrained()"),Q3e.forEach(t),JVe=r(a$," class method."),a$.forEach(t),YVe=i(ot),K6=n(ot,"P",{});var n$=s(K6);KVe=r(n$,"This class cannot be instantiated directly using "),ere=n(n$,"CODE",{});var H3e=s(ere);ZVe=r(H3e,"__init__()"),H3e.forEach(t),eXe=r(n$," (throws an error)."),n$.forEach(t),oXe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(Z6.$$.fragment,rt),rXe=i(rt),ore=n(rt,"P",{});var U3e=s(ore);tXe=r(U3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),U3e.forEach(t),aXe=i(rt),Mi=n(rt,"P",{});var pf=s(Mi);nXe=r(pf,"The configuration class to instantiate is selected based on the "),rre=n(pf,"CODE",{});var J3e=s(rre);sXe=r(J3e,"model_type"),J3e.forEach(t),lXe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tre=n(pf,"CODE",{});var Y3e=s(tre);iXe=r(Y3e,"pretrained_model_name_or_path"),Y3e.forEach(t),dXe=r(pf,":"),pf.forEach(t),cXe=i(rt),A=n(rt,"UL",{});var L=s(A);Cf=n(L,"LI",{});var Lw=s(Cf);are=n(Lw,"STRONG",{});var K3e=s(are);fXe=r(K3e,"albert"),K3e.forEach(t),mXe=r(Lw," \u2014 "),vk=n(Lw,"A",{href:!0});var Z3e=s(vk);gXe=r(Z3e,"AlbertConfig"),Z3e.forEach(t),hXe=r(Lw," (ALBERT model)"),Lw.forEach(t),pXe=i(L),wf=n(L,"LI",{});var yw=s(wf);nre=n(yw,"STRONG",{});var e0e=s(nre);_Xe=r(e0e,"bart"),e0e.forEach(t),uXe=r(yw," \u2014 "),Fk=n(yw,"A",{href:!0});var o0e=s(Fk);bXe=r(o0e,"BartConfig"),o0e.forEach(t),vXe=r(yw," (BART model)"),yw.forEach(t),FXe=i(L),Af=n(L,"LI",{});var xw=s(Af);sre=n(xw,"STRONG",{});var r0e=s(sre);TXe=r(r0e,"beit"),r0e.forEach(t),MXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var t0e=s(Tk);EXe=r(t0e,"BeitConfig"),t0e.forEach(t),CXe=r(xw," (BEiT model)"),xw.forEach(t),wXe=i(L),Lf=n(L,"LI",{});var $w=s(Lf);lre=n($w,"STRONG",{});var a0e=s(lre);AXe=r(a0e,"bert"),a0e.forEach(t),LXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var n0e=s(Mk);yXe=r(n0e,"BertConfig"),n0e.forEach(t),xXe=r($w," (BERT model)"),$w.forEach(t),$Xe=i(L),yf=n(L,"LI",{});var kw=s(yf);ire=n(kw,"STRONG",{});var s0e=s(ire);kXe=r(s0e,"bert-generation"),s0e.forEach(t),SXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var l0e=s(Ek);RXe=r(l0e,"BertGenerationConfig"),l0e.forEach(t),PXe=r(kw," (Bert Generation model)"),kw.forEach(t),BXe=i(L),xf=n(L,"LI",{});var Sw=s(xf);dre=n(Sw,"STRONG",{});var i0e=s(dre);IXe=r(i0e,"big_bird"),i0e.forEach(t),NXe=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var d0e=s(Ck);qXe=r(d0e,"BigBirdConfig"),d0e.forEach(t),jXe=r(Sw," (BigBird model)"),Sw.forEach(t),DXe=i(L),$f=n(L,"LI",{});var Rw=s($f);cre=n(Rw,"STRONG",{});var c0e=s(cre);GXe=r(c0e,"bigbird_pegasus"),c0e.forEach(t),OXe=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var f0e=s(wk);VXe=r(f0e,"BigBirdPegasusConfig"),f0e.forEach(t),XXe=r(Rw," (BigBird-Pegasus model)"),Rw.forEach(t),zXe=i(L),kf=n(L,"LI",{});var Pw=s(kf);fre=n(Pw,"STRONG",{});var m0e=s(fre);WXe=r(m0e,"blenderbot"),m0e.forEach(t),QXe=r(Pw," \u2014 "),Ak=n(Pw,"A",{href:!0});var g0e=s(Ak);HXe=r(g0e,"BlenderbotConfig"),g0e.forEach(t),UXe=r(Pw," (Blenderbot model)"),Pw.forEach(t),JXe=i(L),Sf=n(L,"LI",{});var Bw=s(Sf);mre=n(Bw,"STRONG",{});var h0e=s(mre);YXe=r(h0e,"blenderbot-small"),h0e.forEach(t),KXe=r(Bw," \u2014 "),Lk=n(Bw,"A",{href:!0});var p0e=s(Lk);ZXe=r(p0e,"BlenderbotSmallConfig"),p0e.forEach(t),eze=r(Bw," (BlenderbotSmall model)"),Bw.forEach(t),oze=i(L),Rf=n(L,"LI",{});var Iw=s(Rf);gre=n(Iw,"STRONG",{});var _0e=s(gre);rze=r(_0e,"bloom"),_0e.forEach(t),tze=r(Iw," \u2014 "),yk=n(Iw,"A",{href:!0});var u0e=s(yk);aze=r(u0e,"BloomConfig"),u0e.forEach(t),nze=r(Iw," (BLOOM model)"),Iw.forEach(t),sze=i(L),Pf=n(L,"LI",{});var Nw=s(Pf);hre=n(Nw,"STRONG",{});var b0e=s(hre);lze=r(b0e,"camembert"),b0e.forEach(t),ize=r(Nw," \u2014 "),xk=n(Nw,"A",{href:!0});var v0e=s(xk);dze=r(v0e,"CamembertConfig"),v0e.forEach(t),cze=r(Nw," (CamemBERT model)"),Nw.forEach(t),fze=i(L),Bf=n(L,"LI",{});var qw=s(Bf);pre=n(qw,"STRONG",{});var F0e=s(pre);mze=r(F0e,"canine"),F0e.forEach(t),gze=r(qw," \u2014 "),$k=n(qw,"A",{href:!0});var T0e=s($k);hze=r(T0e,"CanineConfig"),T0e.forEach(t),pze=r(qw," (CANINE model)"),qw.forEach(t),_ze=i(L),If=n(L,"LI",{});var jw=s(If);_re=n(jw,"STRONG",{});var M0e=s(_re);uze=r(M0e,"clip"),M0e.forEach(t),bze=r(jw," \u2014 "),kk=n(jw,"A",{href:!0});var E0e=s(kk);vze=r(E0e,"CLIPConfig"),E0e.forEach(t),Fze=r(jw," (CLIP model)"),jw.forEach(t),Tze=i(L),Nf=n(L,"LI",{});var Dw=s(Nf);ure=n(Dw,"STRONG",{});var C0e=s(ure);Mze=r(C0e,"convbert"),C0e.forEach(t),Eze=r(Dw," \u2014 "),Sk=n(Dw,"A",{href:!0});var w0e=s(Sk);Cze=r(w0e,"ConvBertConfig"),w0e.forEach(t),wze=r(Dw," (ConvBERT model)"),Dw.forEach(t),Aze=i(L),qf=n(L,"LI",{});var Gw=s(qf);bre=n(Gw,"STRONG",{});var A0e=s(bre);Lze=r(A0e,"convnext"),A0e.forEach(t),yze=r(Gw," \u2014 "),Rk=n(Gw,"A",{href:!0});var L0e=s(Rk);xze=r(L0e,"ConvNextConfig"),L0e.forEach(t),$ze=r(Gw," (ConvNeXT model)"),Gw.forEach(t),kze=i(L),jf=n(L,"LI",{});var Ow=s(jf);vre=n(Ow,"STRONG",{});var y0e=s(vre);Sze=r(y0e,"ctrl"),y0e.forEach(t),Rze=r(Ow," \u2014 "),Pk=n(Ow,"A",{href:!0});var x0e=s(Pk);Pze=r(x0e,"CTRLConfig"),x0e.forEach(t),Bze=r(Ow," (CTRL model)"),Ow.forEach(t),Ize=i(L),Df=n(L,"LI",{});var Vw=s(Df);Fre=n(Vw,"STRONG",{});var $0e=s(Fre);Nze=r($0e,"cvt"),$0e.forEach(t),qze=r(Vw," \u2014 "),Bk=n(Vw,"A",{href:!0});var k0e=s(Bk);jze=r(k0e,"CvtConfig"),k0e.forEach(t),Dze=r(Vw," (CvT model)"),Vw.forEach(t),Gze=i(L),Gf=n(L,"LI",{});var Xw=s(Gf);Tre=n(Xw,"STRONG",{});var S0e=s(Tre);Oze=r(S0e,"data2vec-audio"),S0e.forEach(t),Vze=r(Xw," \u2014 "),Ik=n(Xw,"A",{href:!0});var R0e=s(Ik);Xze=r(R0e,"Data2VecAudioConfig"),R0e.forEach(t),zze=r(Xw," (Data2VecAudio model)"),Xw.forEach(t),Wze=i(L),Of=n(L,"LI",{});var zw=s(Of);Mre=n(zw,"STRONG",{});var P0e=s(Mre);Qze=r(P0e,"data2vec-text"),P0e.forEach(t),Hze=r(zw," \u2014 "),Nk=n(zw,"A",{href:!0});var B0e=s(Nk);Uze=r(B0e,"Data2VecTextConfig"),B0e.forEach(t),Jze=r(zw," (Data2VecText model)"),zw.forEach(t),Yze=i(L),Vf=n(L,"LI",{});var Ww=s(Vf);Ere=n(Ww,"STRONG",{});var I0e=s(Ere);Kze=r(I0e,"data2vec-vision"),I0e.forEach(t),Zze=r(Ww," \u2014 "),qk=n(Ww,"A",{href:!0});var N0e=s(qk);eWe=r(N0e,"Data2VecVisionConfig"),N0e.forEach(t),oWe=r(Ww," (Data2VecVision model)"),Ww.forEach(t),rWe=i(L),Xf=n(L,"LI",{});var Qw=s(Xf);Cre=n(Qw,"STRONG",{});var q0e=s(Cre);tWe=r(q0e,"deberta"),q0e.forEach(t),aWe=r(Qw," \u2014 "),jk=n(Qw,"A",{href:!0});var j0e=s(jk);nWe=r(j0e,"DebertaConfig"),j0e.forEach(t),sWe=r(Qw," (DeBERTa model)"),Qw.forEach(t),lWe=i(L),zf=n(L,"LI",{});var Hw=s(zf);wre=n(Hw,"STRONG",{});var D0e=s(wre);iWe=r(D0e,"deberta-v2"),D0e.forEach(t),dWe=r(Hw," \u2014 "),Dk=n(Hw,"A",{href:!0});var G0e=s(Dk);cWe=r(G0e,"DebertaV2Config"),G0e.forEach(t),fWe=r(Hw," (DeBERTa-v2 model)"),Hw.forEach(t),mWe=i(L),Wf=n(L,"LI",{});var Uw=s(Wf);Are=n(Uw,"STRONG",{});var O0e=s(Are);gWe=r(O0e,"decision_transformer"),O0e.forEach(t),hWe=r(Uw," \u2014 "),Gk=n(Uw,"A",{href:!0});var KWr=s(Gk);pWe=r(KWr,"DecisionTransformerConfig"),KWr.forEach(t),_We=r(Uw," (Decision Transformer model)"),Uw.forEach(t),uWe=i(L),Qf=n(L,"LI",{});var V0e=s(Qf);Lre=n(V0e,"STRONG",{});var ZWr=s(Lre);bWe=r(ZWr,"deit"),ZWr.forEach(t),vWe=r(V0e," \u2014 "),Ok=n(V0e,"A",{href:!0});var eQr=s(Ok);FWe=r(eQr,"DeiTConfig"),eQr.forEach(t),TWe=r(V0e," (DeiT model)"),V0e.forEach(t),MWe=i(L),Hf=n(L,"LI",{});var X0e=s(Hf);yre=n(X0e,"STRONG",{});var oQr=s(yre);EWe=r(oQr,"detr"),oQr.forEach(t),CWe=r(X0e," \u2014 "),Vk=n(X0e,"A",{href:!0});var rQr=s(Vk);wWe=r(rQr,"DetrConfig"),rQr.forEach(t),AWe=r(X0e," (DETR model)"),X0e.forEach(t),LWe=i(L),Uf=n(L,"LI",{});var z0e=s(Uf);xre=n(z0e,"STRONG",{});var tQr=s(xre);yWe=r(tQr,"distilbert"),tQr.forEach(t),xWe=r(z0e," \u2014 "),Xk=n(z0e,"A",{href:!0});var aQr=s(Xk);$We=r(aQr,"DistilBertConfig"),aQr.forEach(t),kWe=r(z0e," (DistilBERT model)"),z0e.forEach(t),SWe=i(L),Jf=n(L,"LI",{});var W0e=s(Jf);$re=n(W0e,"STRONG",{});var nQr=s($re);RWe=r(nQr,"dpr"),nQr.forEach(t),PWe=r(W0e," \u2014 "),zk=n(W0e,"A",{href:!0});var sQr=s(zk);BWe=r(sQr,"DPRConfig"),sQr.forEach(t),IWe=r(W0e," (DPR model)"),W0e.forEach(t),NWe=i(L),Yf=n(L,"LI",{});var Q0e=s(Yf);kre=n(Q0e,"STRONG",{});var lQr=s(kre);qWe=r(lQr,"dpt"),lQr.forEach(t),jWe=r(Q0e," \u2014 "),Wk=n(Q0e,"A",{href:!0});var iQr=s(Wk);DWe=r(iQr,"DPTConfig"),iQr.forEach(t),GWe=r(Q0e," (DPT model)"),Q0e.forEach(t),OWe=i(L),Kf=n(L,"LI",{});var H0e=s(Kf);Sre=n(H0e,"STRONG",{});var dQr=s(Sre);VWe=r(dQr,"electra"),dQr.forEach(t),XWe=r(H0e," \u2014 "),Qk=n(H0e,"A",{href:!0});var cQr=s(Qk);zWe=r(cQr,"ElectraConfig"),cQr.forEach(t),WWe=r(H0e," (ELECTRA model)"),H0e.forEach(t),QWe=i(L),Zf=n(L,"LI",{});var U0e=s(Zf);Rre=n(U0e,"STRONG",{});var fQr=s(Rre);HWe=r(fQr,"encoder-decoder"),fQr.forEach(t),UWe=r(U0e," \u2014 "),Hk=n(U0e,"A",{href:!0});var mQr=s(Hk);JWe=r(mQr,"EncoderDecoderConfig"),mQr.forEach(t),YWe=r(U0e," (Encoder decoder model)"),U0e.forEach(t),KWe=i(L),em=n(L,"LI",{});var J0e=s(em);Pre=n(J0e,"STRONG",{});var gQr=s(Pre);ZWe=r(gQr,"flaubert"),gQr.forEach(t),eQe=r(J0e," \u2014 "),Uk=n(J0e,"A",{href:!0});var hQr=s(Uk);oQe=r(hQr,"FlaubertConfig"),hQr.forEach(t),rQe=r(J0e," (FlauBERT model)"),J0e.forEach(t),tQe=i(L),om=n(L,"LI",{});var Y0e=s(om);Bre=n(Y0e,"STRONG",{});var pQr=s(Bre);aQe=r(pQr,"flava"),pQr.forEach(t),nQe=r(Y0e," \u2014 "),Jk=n(Y0e,"A",{href:!0});var _Qr=s(Jk);sQe=r(_Qr,"FlavaConfig"),_Qr.forEach(t),lQe=r(Y0e," (FLAVA model)"),Y0e.forEach(t),iQe=i(L),rm=n(L,"LI",{});var K0e=s(rm);Ire=n(K0e,"STRONG",{});var uQr=s(Ire);dQe=r(uQr,"fnet"),uQr.forEach(t),cQe=r(K0e," \u2014 "),Yk=n(K0e,"A",{href:!0});var bQr=s(Yk);fQe=r(bQr,"FNetConfig"),bQr.forEach(t),mQe=r(K0e," (FNet model)"),K0e.forEach(t),gQe=i(L),tm=n(L,"LI",{});var Z0e=s(tm);Nre=n(Z0e,"STRONG",{});var vQr=s(Nre);hQe=r(vQr,"fsmt"),vQr.forEach(t),pQe=r(Z0e," \u2014 "),Kk=n(Z0e,"A",{href:!0});var FQr=s(Kk);_Qe=r(FQr,"FSMTConfig"),FQr.forEach(t),uQe=r(Z0e," (FairSeq Machine-Translation model)"),Z0e.forEach(t),bQe=i(L),am=n(L,"LI",{});var ewe=s(am);qre=n(ewe,"STRONG",{});var TQr=s(qre);vQe=r(TQr,"funnel"),TQr.forEach(t),FQe=r(ewe," \u2014 "),Zk=n(ewe,"A",{href:!0});var MQr=s(Zk);TQe=r(MQr,"FunnelConfig"),MQr.forEach(t),MQe=r(ewe," (Funnel Transformer model)"),ewe.forEach(t),EQe=i(L),nm=n(L,"LI",{});var owe=s(nm);jre=n(owe,"STRONG",{});var EQr=s(jre);CQe=r(EQr,"glpn"),EQr.forEach(t),wQe=r(owe," \u2014 "),eS=n(owe,"A",{href:!0});var CQr=s(eS);AQe=r(CQr,"GLPNConfig"),CQr.forEach(t),LQe=r(owe," (GLPN model)"),owe.forEach(t),yQe=i(L),sm=n(L,"LI",{});var rwe=s(sm);Dre=n(rwe,"STRONG",{});var wQr=s(Dre);xQe=r(wQr,"gpt2"),wQr.forEach(t),$Qe=r(rwe," \u2014 "),oS=n(rwe,"A",{href:!0});var AQr=s(oS);kQe=r(AQr,"GPT2Config"),AQr.forEach(t),SQe=r(rwe," (OpenAI GPT-2 model)"),rwe.forEach(t),RQe=i(L),lm=n(L,"LI",{});var twe=s(lm);Gre=n(twe,"STRONG",{});var LQr=s(Gre);PQe=r(LQr,"gpt_neo"),LQr.forEach(t),BQe=r(twe," \u2014 "),rS=n(twe,"A",{href:!0});var yQr=s(rS);IQe=r(yQr,"GPTNeoConfig"),yQr.forEach(t),NQe=r(twe," (GPT Neo model)"),twe.forEach(t),qQe=i(L),im=n(L,"LI",{});var awe=s(im);Ore=n(awe,"STRONG",{});var xQr=s(Ore);jQe=r(xQr,"gpt_neox"),xQr.forEach(t),DQe=r(awe," \u2014 "),tS=n(awe,"A",{href:!0});var $Qr=s(tS);GQe=r($Qr,"GPTNeoXConfig"),$Qr.forEach(t),OQe=r(awe," (GPT NeoX model)"),awe.forEach(t),VQe=i(L),dm=n(L,"LI",{});var nwe=s(dm);Vre=n(nwe,"STRONG",{});var kQr=s(Vre);XQe=r(kQr,"gptj"),kQr.forEach(t),zQe=r(nwe," \u2014 "),aS=n(nwe,"A",{href:!0});var SQr=s(aS);WQe=r(SQr,"GPTJConfig"),SQr.forEach(t),QQe=r(nwe," (GPT-J model)"),nwe.forEach(t),HQe=i(L),cm=n(L,"LI",{});var swe=s(cm);Xre=n(swe,"STRONG",{});var RQr=s(Xre);UQe=r(RQr,"hubert"),RQr.forEach(t),JQe=r(swe," \u2014 "),nS=n(swe,"A",{href:!0});var PQr=s(nS);YQe=r(PQr,"HubertConfig"),PQr.forEach(t),KQe=r(swe," (Hubert model)"),swe.forEach(t),ZQe=i(L),fm=n(L,"LI",{});var lwe=s(fm);zre=n(lwe,"STRONG",{});var BQr=s(zre);eHe=r(BQr,"ibert"),BQr.forEach(t),oHe=r(lwe," \u2014 "),sS=n(lwe,"A",{href:!0});var IQr=s(sS);rHe=r(IQr,"IBertConfig"),IQr.forEach(t),tHe=r(lwe," (I-BERT model)"),lwe.forEach(t),aHe=i(L),mm=n(L,"LI",{});var iwe=s(mm);Wre=n(iwe,"STRONG",{});var NQr=s(Wre);nHe=r(NQr,"imagegpt"),NQr.forEach(t),sHe=r(iwe," \u2014 "),lS=n(iwe,"A",{href:!0});var qQr=s(lS);lHe=r(qQr,"ImageGPTConfig"),qQr.forEach(t),iHe=r(iwe," (ImageGPT model)"),iwe.forEach(t),dHe=i(L),gm=n(L,"LI",{});var dwe=s(gm);Qre=n(dwe,"STRONG",{});var jQr=s(Qre);cHe=r(jQr,"layoutlm"),jQr.forEach(t),fHe=r(dwe," \u2014 "),iS=n(dwe,"A",{href:!0});var DQr=s(iS);mHe=r(DQr,"LayoutLMConfig"),DQr.forEach(t),gHe=r(dwe," (LayoutLM model)"),dwe.forEach(t),hHe=i(L),hm=n(L,"LI",{});var cwe=s(hm);Hre=n(cwe,"STRONG",{});var GQr=s(Hre);pHe=r(GQr,"layoutlmv2"),GQr.forEach(t),_He=r(cwe," \u2014 "),dS=n(cwe,"A",{href:!0});var OQr=s(dS);uHe=r(OQr,"LayoutLMv2Config"),OQr.forEach(t),bHe=r(cwe," (LayoutLMv2 model)"),cwe.forEach(t),vHe=i(L),pm=n(L,"LI",{});var fwe=s(pm);Ure=n(fwe,"STRONG",{});var VQr=s(Ure);FHe=r(VQr,"layoutlmv3"),VQr.forEach(t),THe=r(fwe," \u2014 "),cS=n(fwe,"A",{href:!0});var XQr=s(cS);MHe=r(XQr,"LayoutLMv3Config"),XQr.forEach(t),EHe=r(fwe," (LayoutLMv3 model)"),fwe.forEach(t),CHe=i(L),_m=n(L,"LI",{});var mwe=s(_m);Jre=n(mwe,"STRONG",{});var zQr=s(Jre);wHe=r(zQr,"led"),zQr.forEach(t),AHe=r(mwe," \u2014 "),fS=n(mwe,"A",{href:!0});var WQr=s(fS);LHe=r(WQr,"LEDConfig"),WQr.forEach(t),yHe=r(mwe," (LED model)"),mwe.forEach(t),xHe=i(L),um=n(L,"LI",{});var gwe=s(um);Yre=n(gwe,"STRONG",{});var QQr=s(Yre);$He=r(QQr,"levit"),QQr.forEach(t),kHe=r(gwe," \u2014 "),mS=n(gwe,"A",{href:!0});var HQr=s(mS);SHe=r(HQr,"LevitConfig"),HQr.forEach(t),RHe=r(gwe," (LeViT model)"),gwe.forEach(t),PHe=i(L),bm=n(L,"LI",{});var hwe=s(bm);Kre=n(hwe,"STRONG",{});var UQr=s(Kre);BHe=r(UQr,"longformer"),UQr.forEach(t),IHe=r(hwe," \u2014 "),gS=n(hwe,"A",{href:!0});var JQr=s(gS);NHe=r(JQr,"LongformerConfig"),JQr.forEach(t),qHe=r(hwe," (Longformer model)"),hwe.forEach(t),jHe=i(L),vm=n(L,"LI",{});var pwe=s(vm);Zre=n(pwe,"STRONG",{});var YQr=s(Zre);DHe=r(YQr,"luke"),YQr.forEach(t),GHe=r(pwe," \u2014 "),hS=n(pwe,"A",{href:!0});var KQr=s(hS);OHe=r(KQr,"LukeConfig"),KQr.forEach(t),VHe=r(pwe," (LUKE model)"),pwe.forEach(t),XHe=i(L),Fm=n(L,"LI",{});var _we=s(Fm);ete=n(_we,"STRONG",{});var ZQr=s(ete);zHe=r(ZQr,"lxmert"),ZQr.forEach(t),WHe=r(_we," \u2014 "),pS=n(_we,"A",{href:!0});var eHr=s(pS);QHe=r(eHr,"LxmertConfig"),eHr.forEach(t),HHe=r(_we," (LXMERT model)"),_we.forEach(t),UHe=i(L),Tm=n(L,"LI",{});var uwe=s(Tm);ote=n(uwe,"STRONG",{});var oHr=s(ote);JHe=r(oHr,"m2m_100"),oHr.forEach(t),YHe=r(uwe," \u2014 "),_S=n(uwe,"A",{href:!0});var rHr=s(_S);KHe=r(rHr,"M2M100Config"),rHr.forEach(t),ZHe=r(uwe," (M2M100 model)"),uwe.forEach(t),eUe=i(L),Mm=n(L,"LI",{});var bwe=s(Mm);rte=n(bwe,"STRONG",{});var tHr=s(rte);oUe=r(tHr,"marian"),tHr.forEach(t),rUe=r(bwe," \u2014 "),uS=n(bwe,"A",{href:!0});var aHr=s(uS);tUe=r(aHr,"MarianConfig"),aHr.forEach(t),aUe=r(bwe," (Marian model)"),bwe.forEach(t),nUe=i(L),Em=n(L,"LI",{});var vwe=s(Em);tte=n(vwe,"STRONG",{});var nHr=s(tte);sUe=r(nHr,"maskformer"),nHr.forEach(t),lUe=r(vwe," \u2014 "),bS=n(vwe,"A",{href:!0});var sHr=s(bS);iUe=r(sHr,"MaskFormerConfig"),sHr.forEach(t),dUe=r(vwe," (MaskFormer model)"),vwe.forEach(t),cUe=i(L),Cm=n(L,"LI",{});var Fwe=s(Cm);ate=n(Fwe,"STRONG",{});var lHr=s(ate);fUe=r(lHr,"mbart"),lHr.forEach(t),mUe=r(Fwe," \u2014 "),vS=n(Fwe,"A",{href:!0});var iHr=s(vS);gUe=r(iHr,"MBartConfig"),iHr.forEach(t),hUe=r(Fwe," (mBART model)"),Fwe.forEach(t),pUe=i(L),wm=n(L,"LI",{});var Twe=s(wm);nte=n(Twe,"STRONG",{});var dHr=s(nte);_Ue=r(dHr,"mctct"),dHr.forEach(t),uUe=r(Twe," \u2014 "),FS=n(Twe,"A",{href:!0});var cHr=s(FS);bUe=r(cHr,"MCTCTConfig"),cHr.forEach(t),vUe=r(Twe," (M-CTC-T model)"),Twe.forEach(t),FUe=i(L),Am=n(L,"LI",{});var Mwe=s(Am);ste=n(Mwe,"STRONG",{});var fHr=s(ste);TUe=r(fHr,"megatron-bert"),fHr.forEach(t),MUe=r(Mwe," \u2014 "),TS=n(Mwe,"A",{href:!0});var mHr=s(TS);EUe=r(mHr,"MegatronBertConfig"),mHr.forEach(t),CUe=r(Mwe," (Megatron-BERT model)"),Mwe.forEach(t),wUe=i(L),Lm=n(L,"LI",{});var Ewe=s(Lm);lte=n(Ewe,"STRONG",{});var gHr=s(lte);AUe=r(gHr,"mobilebert"),gHr.forEach(t),LUe=r(Ewe," \u2014 "),MS=n(Ewe,"A",{href:!0});var hHr=s(MS);yUe=r(hHr,"MobileBertConfig"),hHr.forEach(t),xUe=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),$Ue=i(L),ym=n(L,"LI",{});var Cwe=s(ym);ite=n(Cwe,"STRONG",{});var pHr=s(ite);kUe=r(pHr,"mpnet"),pHr.forEach(t),SUe=r(Cwe," \u2014 "),ES=n(Cwe,"A",{href:!0});var _Hr=s(ES);RUe=r(_Hr,"MPNetConfig"),_Hr.forEach(t),PUe=r(Cwe," (MPNet model)"),Cwe.forEach(t),BUe=i(L),xm=n(L,"LI",{});var wwe=s(xm);dte=n(wwe,"STRONG",{});var uHr=s(dte);IUe=r(uHr,"mt5"),uHr.forEach(t),NUe=r(wwe," \u2014 "),CS=n(wwe,"A",{href:!0});var bHr=s(CS);qUe=r(bHr,"MT5Config"),bHr.forEach(t),jUe=r(wwe," (MT5 model)"),wwe.forEach(t),DUe=i(L),$m=n(L,"LI",{});var Awe=s($m);cte=n(Awe,"STRONG",{});var vHr=s(cte);GUe=r(vHr,"nystromformer"),vHr.forEach(t),OUe=r(Awe," \u2014 "),wS=n(Awe,"A",{href:!0});var FHr=s(wS);VUe=r(FHr,"NystromformerConfig"),FHr.forEach(t),XUe=r(Awe," (Nystr\xF6mformer model)"),Awe.forEach(t),zUe=i(L),km=n(L,"LI",{});var Lwe=s(km);fte=n(Lwe,"STRONG",{});var THr=s(fte);WUe=r(THr,"openai-gpt"),THr.forEach(t),QUe=r(Lwe," \u2014 "),AS=n(Lwe,"A",{href:!0});var MHr=s(AS);HUe=r(MHr,"OpenAIGPTConfig"),MHr.forEach(t),UUe=r(Lwe," (OpenAI GPT model)"),Lwe.forEach(t),JUe=i(L),Sm=n(L,"LI",{});var ywe=s(Sm);mte=n(ywe,"STRONG",{});var EHr=s(mte);YUe=r(EHr,"opt"),EHr.forEach(t),KUe=r(ywe," \u2014 "),LS=n(ywe,"A",{href:!0});var CHr=s(LS);ZUe=r(CHr,"OPTConfig"),CHr.forEach(t),eJe=r(ywe," (OPT model)"),ywe.forEach(t),oJe=i(L),Rm=n(L,"LI",{});var xwe=s(Rm);gte=n(xwe,"STRONG",{});var wHr=s(gte);rJe=r(wHr,"pegasus"),wHr.forEach(t),tJe=r(xwe," \u2014 "),yS=n(xwe,"A",{href:!0});var AHr=s(yS);aJe=r(AHr,"PegasusConfig"),AHr.forEach(t),nJe=r(xwe," (Pegasus model)"),xwe.forEach(t),sJe=i(L),Pm=n(L,"LI",{});var $we=s(Pm);hte=n($we,"STRONG",{});var LHr=s(hte);lJe=r(LHr,"perceiver"),LHr.forEach(t),iJe=r($we," \u2014 "),xS=n($we,"A",{href:!0});var yHr=s(xS);dJe=r(yHr,"PerceiverConfig"),yHr.forEach(t),cJe=r($we," (Perceiver model)"),$we.forEach(t),fJe=i(L),Bm=n(L,"LI",{});var kwe=s(Bm);pte=n(kwe,"STRONG",{});var xHr=s(pte);mJe=r(xHr,"plbart"),xHr.forEach(t),gJe=r(kwe," \u2014 "),$S=n(kwe,"A",{href:!0});var $Hr=s($S);hJe=r($Hr,"PLBartConfig"),$Hr.forEach(t),pJe=r(kwe," (PLBart model)"),kwe.forEach(t),_Je=i(L),Im=n(L,"LI",{});var Swe=s(Im);_te=n(Swe,"STRONG",{});var kHr=s(_te);uJe=r(kHr,"poolformer"),kHr.forEach(t),bJe=r(Swe," \u2014 "),kS=n(Swe,"A",{href:!0});var SHr=s(kS);vJe=r(SHr,"PoolFormerConfig"),SHr.forEach(t),FJe=r(Swe," (PoolFormer model)"),Swe.forEach(t),TJe=i(L),Nm=n(L,"LI",{});var Rwe=s(Nm);ute=n(Rwe,"STRONG",{});var RHr=s(ute);MJe=r(RHr,"prophetnet"),RHr.forEach(t),EJe=r(Rwe," \u2014 "),SS=n(Rwe,"A",{href:!0});var PHr=s(SS);CJe=r(PHr,"ProphetNetConfig"),PHr.forEach(t),wJe=r(Rwe," (ProphetNet model)"),Rwe.forEach(t),AJe=i(L),qm=n(L,"LI",{});var Pwe=s(qm);bte=n(Pwe,"STRONG",{});var BHr=s(bte);LJe=r(BHr,"qdqbert"),BHr.forEach(t),yJe=r(Pwe," \u2014 "),RS=n(Pwe,"A",{href:!0});var IHr=s(RS);xJe=r(IHr,"QDQBertConfig"),IHr.forEach(t),$Je=r(Pwe," (QDQBert model)"),Pwe.forEach(t),kJe=i(L),jm=n(L,"LI",{});var Bwe=s(jm);vte=n(Bwe,"STRONG",{});var NHr=s(vte);SJe=r(NHr,"rag"),NHr.forEach(t),RJe=r(Bwe," \u2014 "),PS=n(Bwe,"A",{href:!0});var qHr=s(PS);PJe=r(qHr,"RagConfig"),qHr.forEach(t),BJe=r(Bwe," (RAG model)"),Bwe.forEach(t),IJe=i(L),Dm=n(L,"LI",{});var Iwe=s(Dm);Fte=n(Iwe,"STRONG",{});var jHr=s(Fte);NJe=r(jHr,"realm"),jHr.forEach(t),qJe=r(Iwe," \u2014 "),BS=n(Iwe,"A",{href:!0});var DHr=s(BS);jJe=r(DHr,"RealmConfig"),DHr.forEach(t),DJe=r(Iwe," (REALM model)"),Iwe.forEach(t),GJe=i(L),Gm=n(L,"LI",{});var Nwe=s(Gm);Tte=n(Nwe,"STRONG",{});var GHr=s(Tte);OJe=r(GHr,"reformer"),GHr.forEach(t),VJe=r(Nwe," \u2014 "),IS=n(Nwe,"A",{href:!0});var OHr=s(IS);XJe=r(OHr,"ReformerConfig"),OHr.forEach(t),zJe=r(Nwe," (Reformer model)"),Nwe.forEach(t),WJe=i(L),Om=n(L,"LI",{});var qwe=s(Om);Mte=n(qwe,"STRONG",{});var VHr=s(Mte);QJe=r(VHr,"regnet"),VHr.forEach(t),HJe=r(qwe," \u2014 "),NS=n(qwe,"A",{href:!0});var XHr=s(NS);UJe=r(XHr,"RegNetConfig"),XHr.forEach(t),JJe=r(qwe," (RegNet model)"),qwe.forEach(t),YJe=i(L),Vm=n(L,"LI",{});var jwe=s(Vm);Ete=n(jwe,"STRONG",{});var zHr=s(Ete);KJe=r(zHr,"rembert"),zHr.forEach(t),ZJe=r(jwe," \u2014 "),qS=n(jwe,"A",{href:!0});var WHr=s(qS);eYe=r(WHr,"RemBertConfig"),WHr.forEach(t),oYe=r(jwe," (RemBERT model)"),jwe.forEach(t),rYe=i(L),Xm=n(L,"LI",{});var Dwe=s(Xm);Cte=n(Dwe,"STRONG",{});var QHr=s(Cte);tYe=r(QHr,"resnet"),QHr.forEach(t),aYe=r(Dwe," \u2014 "),jS=n(Dwe,"A",{href:!0});var HHr=s(jS);nYe=r(HHr,"ResNetConfig"),HHr.forEach(t),sYe=r(Dwe," (ResNet model)"),Dwe.forEach(t),lYe=i(L),zm=n(L,"LI",{});var Gwe=s(zm);wte=n(Gwe,"STRONG",{});var UHr=s(wte);iYe=r(UHr,"retribert"),UHr.forEach(t),dYe=r(Gwe," \u2014 "),DS=n(Gwe,"A",{href:!0});var JHr=s(DS);cYe=r(JHr,"RetriBertConfig"),JHr.forEach(t),fYe=r(Gwe," (RetriBERT model)"),Gwe.forEach(t),mYe=i(L),Wm=n(L,"LI",{});var Owe=s(Wm);Ate=n(Owe,"STRONG",{});var YHr=s(Ate);gYe=r(YHr,"roberta"),YHr.forEach(t),hYe=r(Owe," \u2014 "),GS=n(Owe,"A",{href:!0});var KHr=s(GS);pYe=r(KHr,"RobertaConfig"),KHr.forEach(t),_Ye=r(Owe," (RoBERTa model)"),Owe.forEach(t),uYe=i(L),Qm=n(L,"LI",{});var Vwe=s(Qm);Lte=n(Vwe,"STRONG",{});var ZHr=s(Lte);bYe=r(ZHr,"roformer"),ZHr.forEach(t),vYe=r(Vwe," \u2014 "),OS=n(Vwe,"A",{href:!0});var eUr=s(OS);FYe=r(eUr,"RoFormerConfig"),eUr.forEach(t),TYe=r(Vwe," (RoFormer model)"),Vwe.forEach(t),MYe=i(L),Hm=n(L,"LI",{});var Xwe=s(Hm);yte=n(Xwe,"STRONG",{});var oUr=s(yte);EYe=r(oUr,"segformer"),oUr.forEach(t),CYe=r(Xwe," \u2014 "),VS=n(Xwe,"A",{href:!0});var rUr=s(VS);wYe=r(rUr,"SegformerConfig"),rUr.forEach(t),AYe=r(Xwe," (SegFormer model)"),Xwe.forEach(t),LYe=i(L),Um=n(L,"LI",{});var zwe=s(Um);xte=n(zwe,"STRONG",{});var tUr=s(xte);yYe=r(tUr,"sew"),tUr.forEach(t),xYe=r(zwe," \u2014 "),XS=n(zwe,"A",{href:!0});var aUr=s(XS);$Ye=r(aUr,"SEWConfig"),aUr.forEach(t),kYe=r(zwe," (SEW model)"),zwe.forEach(t),SYe=i(L),Jm=n(L,"LI",{});var Wwe=s(Jm);$te=n(Wwe,"STRONG",{});var nUr=s($te);RYe=r(nUr,"sew-d"),nUr.forEach(t),PYe=r(Wwe," \u2014 "),zS=n(Wwe,"A",{href:!0});var sUr=s(zS);BYe=r(sUr,"SEWDConfig"),sUr.forEach(t),IYe=r(Wwe," (SEW-D model)"),Wwe.forEach(t),NYe=i(L),Ym=n(L,"LI",{});var Qwe=s(Ym);kte=n(Qwe,"STRONG",{});var lUr=s(kte);qYe=r(lUr,"speech-encoder-decoder"),lUr.forEach(t),jYe=r(Qwe," \u2014 "),WS=n(Qwe,"A",{href:!0});var iUr=s(WS);DYe=r(iUr,"SpeechEncoderDecoderConfig"),iUr.forEach(t),GYe=r(Qwe," (Speech Encoder decoder model)"),Qwe.forEach(t),OYe=i(L),Km=n(L,"LI",{});var Hwe=s(Km);Ste=n(Hwe,"STRONG",{});var dUr=s(Ste);VYe=r(dUr,"speech_to_text"),dUr.forEach(t),XYe=r(Hwe," \u2014 "),QS=n(Hwe,"A",{href:!0});var cUr=s(QS);zYe=r(cUr,"Speech2TextConfig"),cUr.forEach(t),WYe=r(Hwe," (Speech2Text model)"),Hwe.forEach(t),QYe=i(L),Zm=n(L,"LI",{});var Uwe=s(Zm);Rte=n(Uwe,"STRONG",{});var fUr=s(Rte);HYe=r(fUr,"speech_to_text_2"),fUr.forEach(t),UYe=r(Uwe," \u2014 "),HS=n(Uwe,"A",{href:!0});var mUr=s(HS);JYe=r(mUr,"Speech2Text2Config"),mUr.forEach(t),YYe=r(Uwe," (Speech2Text2 model)"),Uwe.forEach(t),KYe=i(L),eg=n(L,"LI",{});var Jwe=s(eg);Pte=n(Jwe,"STRONG",{});var gUr=s(Pte);ZYe=r(gUr,"splinter"),gUr.forEach(t),eKe=r(Jwe," \u2014 "),US=n(Jwe,"A",{href:!0});var hUr=s(US);oKe=r(hUr,"SplinterConfig"),hUr.forEach(t),rKe=r(Jwe," (Splinter model)"),Jwe.forEach(t),tKe=i(L),og=n(L,"LI",{});var Ywe=s(og);Bte=n(Ywe,"STRONG",{});var pUr=s(Bte);aKe=r(pUr,"squeezebert"),pUr.forEach(t),nKe=r(Ywe," \u2014 "),JS=n(Ywe,"A",{href:!0});var _Ur=s(JS);sKe=r(_Ur,"SqueezeBertConfig"),_Ur.forEach(t),lKe=r(Ywe," (SqueezeBERT model)"),Ywe.forEach(t),iKe=i(L),rg=n(L,"LI",{});var Kwe=s(rg);Ite=n(Kwe,"STRONG",{});var uUr=s(Ite);dKe=r(uUr,"swin"),uUr.forEach(t),cKe=r(Kwe," \u2014 "),YS=n(Kwe,"A",{href:!0});var bUr=s(YS);fKe=r(bUr,"SwinConfig"),bUr.forEach(t),mKe=r(Kwe," (Swin Transformer model)"),Kwe.forEach(t),gKe=i(L),tg=n(L,"LI",{});var Zwe=s(tg);Nte=n(Zwe,"STRONG",{});var vUr=s(Nte);hKe=r(vUr,"t5"),vUr.forEach(t),pKe=r(Zwe," \u2014 "),KS=n(Zwe,"A",{href:!0});var FUr=s(KS);_Ke=r(FUr,"T5Config"),FUr.forEach(t),uKe=r(Zwe," (T5 model)"),Zwe.forEach(t),bKe=i(L),ag=n(L,"LI",{});var eAe=s(ag);qte=n(eAe,"STRONG",{});var TUr=s(qte);vKe=r(TUr,"tapas"),TUr.forEach(t),FKe=r(eAe," \u2014 "),ZS=n(eAe,"A",{href:!0});var MUr=s(ZS);TKe=r(MUr,"TapasConfig"),MUr.forEach(t),MKe=r(eAe," (TAPAS model)"),eAe.forEach(t),EKe=i(L),ng=n(L,"LI",{});var oAe=s(ng);jte=n(oAe,"STRONG",{});var EUr=s(jte);CKe=r(EUr,"trajectory_transformer"),EUr.forEach(t),wKe=r(oAe," \u2014 "),eR=n(oAe,"A",{href:!0});var CUr=s(eR);AKe=r(CUr,"TrajectoryTransformerConfig"),CUr.forEach(t),LKe=r(oAe," (Trajectory Transformer model)"),oAe.forEach(t),yKe=i(L),sg=n(L,"LI",{});var rAe=s(sg);Dte=n(rAe,"STRONG",{});var wUr=s(Dte);xKe=r(wUr,"transfo-xl"),wUr.forEach(t),$Ke=r(rAe," \u2014 "),oR=n(rAe,"A",{href:!0});var AUr=s(oR);kKe=r(AUr,"TransfoXLConfig"),AUr.forEach(t),SKe=r(rAe," (Transformer-XL model)"),rAe.forEach(t),RKe=i(L),lg=n(L,"LI",{});var tAe=s(lg);Gte=n(tAe,"STRONG",{});var LUr=s(Gte);PKe=r(LUr,"trocr"),LUr.forEach(t),BKe=r(tAe," \u2014 "),rR=n(tAe,"A",{href:!0});var yUr=s(rR);IKe=r(yUr,"TrOCRConfig"),yUr.forEach(t),NKe=r(tAe," (TrOCR model)"),tAe.forEach(t),qKe=i(L),ig=n(L,"LI",{});var aAe=s(ig);Ote=n(aAe,"STRONG",{});var xUr=s(Ote);jKe=r(xUr,"unispeech"),xUr.forEach(t),DKe=r(aAe," \u2014 "),tR=n(aAe,"A",{href:!0});var $Ur=s(tR);GKe=r($Ur,"UniSpeechConfig"),$Ur.forEach(t),OKe=r(aAe," (UniSpeech model)"),aAe.forEach(t),VKe=i(L),dg=n(L,"LI",{});var nAe=s(dg);Vte=n(nAe,"STRONG",{});var kUr=s(Vte);XKe=r(kUr,"unispeech-sat"),kUr.forEach(t),zKe=r(nAe," \u2014 "),aR=n(nAe,"A",{href:!0});var SUr=s(aR);WKe=r(SUr,"UniSpeechSatConfig"),SUr.forEach(t),QKe=r(nAe," (UniSpeechSat model)"),nAe.forEach(t),HKe=i(L),cg=n(L,"LI",{});var sAe=s(cg);Xte=n(sAe,"STRONG",{});var RUr=s(Xte);UKe=r(RUr,"van"),RUr.forEach(t),JKe=r(sAe," \u2014 "),nR=n(sAe,"A",{href:!0});var PUr=s(nR);YKe=r(PUr,"VanConfig"),PUr.forEach(t),KKe=r(sAe," (VAN model)"),sAe.forEach(t),ZKe=i(L),fg=n(L,"LI",{});var lAe=s(fg);zte=n(lAe,"STRONG",{});var BUr=s(zte);eZe=r(BUr,"vilt"),BUr.forEach(t),oZe=r(lAe," \u2014 "),sR=n(lAe,"A",{href:!0});var IUr=s(sR);rZe=r(IUr,"ViltConfig"),IUr.forEach(t),tZe=r(lAe," (ViLT model)"),lAe.forEach(t),aZe=i(L),mg=n(L,"LI",{});var iAe=s(mg);Wte=n(iAe,"STRONG",{});var NUr=s(Wte);nZe=r(NUr,"vision-encoder-decoder"),NUr.forEach(t),sZe=r(iAe," \u2014 "),lR=n(iAe,"A",{href:!0});var qUr=s(lR);lZe=r(qUr,"VisionEncoderDecoderConfig"),qUr.forEach(t),iZe=r(iAe," (Vision Encoder decoder model)"),iAe.forEach(t),dZe=i(L),gg=n(L,"LI",{});var dAe=s(gg);Qte=n(dAe,"STRONG",{});var jUr=s(Qte);cZe=r(jUr,"vision-text-dual-encoder"),jUr.forEach(t),fZe=r(dAe," \u2014 "),iR=n(dAe,"A",{href:!0});var DUr=s(iR);mZe=r(DUr,"VisionTextDualEncoderConfig"),DUr.forEach(t),gZe=r(dAe," (VisionTextDualEncoder model)"),dAe.forEach(t),hZe=i(L),hg=n(L,"LI",{});var cAe=s(hg);Hte=n(cAe,"STRONG",{});var GUr=s(Hte);pZe=r(GUr,"visual_bert"),GUr.forEach(t),_Ze=r(cAe," \u2014 "),dR=n(cAe,"A",{href:!0});var OUr=s(dR);uZe=r(OUr,"VisualBertConfig"),OUr.forEach(t),bZe=r(cAe," (VisualBERT model)"),cAe.forEach(t),vZe=i(L),pg=n(L,"LI",{});var fAe=s(pg);Ute=n(fAe,"STRONG",{});var VUr=s(Ute);FZe=r(VUr,"vit"),VUr.forEach(t),TZe=r(fAe," \u2014 "),cR=n(fAe,"A",{href:!0});var XUr=s(cR);MZe=r(XUr,"ViTConfig"),XUr.forEach(t),EZe=r(fAe," (ViT model)"),fAe.forEach(t),CZe=i(L),_g=n(L,"LI",{});var mAe=s(_g);Jte=n(mAe,"STRONG",{});var zUr=s(Jte);wZe=r(zUr,"vit_mae"),zUr.forEach(t),AZe=r(mAe," \u2014 "),fR=n(mAe,"A",{href:!0});var WUr=s(fR);LZe=r(WUr,"ViTMAEConfig"),WUr.forEach(t),yZe=r(mAe," (ViTMAE model)"),mAe.forEach(t),xZe=i(L),ug=n(L,"LI",{});var gAe=s(ug);Yte=n(gAe,"STRONG",{});var QUr=s(Yte);$Ze=r(QUr,"wav2vec2"),QUr.forEach(t),kZe=r(gAe," \u2014 "),mR=n(gAe,"A",{href:!0});var HUr=s(mR);SZe=r(HUr,"Wav2Vec2Config"),HUr.forEach(t),RZe=r(gAe," (Wav2Vec2 model)"),gAe.forEach(t),PZe=i(L),bg=n(L,"LI",{});var hAe=s(bg);Kte=n(hAe,"STRONG",{});var UUr=s(Kte);BZe=r(UUr,"wav2vec2-conformer"),UUr.forEach(t),IZe=r(hAe," \u2014 "),gR=n(hAe,"A",{href:!0});var JUr=s(gR);NZe=r(JUr,"Wav2Vec2ConformerConfig"),JUr.forEach(t),qZe=r(hAe," (Wav2Vec2-Conformer model)"),hAe.forEach(t),jZe=i(L),vg=n(L,"LI",{});var pAe=s(vg);Zte=n(pAe,"STRONG",{});var YUr=s(Zte);DZe=r(YUr,"wavlm"),YUr.forEach(t),GZe=r(pAe," \u2014 "),hR=n(pAe,"A",{href:!0});var KUr=s(hR);OZe=r(KUr,"WavLMConfig"),KUr.forEach(t),VZe=r(pAe," (WavLM model)"),pAe.forEach(t),XZe=i(L),Fg=n(L,"LI",{});var _Ae=s(Fg);eae=n(_Ae,"STRONG",{});var ZUr=s(eae);zZe=r(ZUr,"xglm"),ZUr.forEach(t),WZe=r(_Ae," \u2014 "),pR=n(_Ae,"A",{href:!0});var eJr=s(pR);QZe=r(eJr,"XGLMConfig"),eJr.forEach(t),HZe=r(_Ae," (XGLM model)"),_Ae.forEach(t),UZe=i(L),Tg=n(L,"LI",{});var uAe=s(Tg);oae=n(uAe,"STRONG",{});var oJr=s(oae);JZe=r(oJr,"xlm"),oJr.forEach(t),YZe=r(uAe," \u2014 "),_R=n(uAe,"A",{href:!0});var rJr=s(_R);KZe=r(rJr,"XLMConfig"),rJr.forEach(t),ZZe=r(uAe," (XLM model)"),uAe.forEach(t),eeo=i(L),Mg=n(L,"LI",{});var bAe=s(Mg);rae=n(bAe,"STRONG",{});var tJr=s(rae);oeo=r(tJr,"xlm-prophetnet"),tJr.forEach(t),reo=r(bAe," \u2014 "),uR=n(bAe,"A",{href:!0});var aJr=s(uR);teo=r(aJr,"XLMProphetNetConfig"),aJr.forEach(t),aeo=r(bAe," (XLM-ProphetNet model)"),bAe.forEach(t),neo=i(L),Eg=n(L,"LI",{});var vAe=s(Eg);tae=n(vAe,"STRONG",{});var nJr=s(tae);seo=r(nJr,"xlm-roberta"),nJr.forEach(t),leo=r(vAe," \u2014 "),bR=n(vAe,"A",{href:!0});var sJr=s(bR);ieo=r(sJr,"XLMRobertaConfig"),sJr.forEach(t),deo=r(vAe," (XLM-RoBERTa model)"),vAe.forEach(t),ceo=i(L),Cg=n(L,"LI",{});var FAe=s(Cg);aae=n(FAe,"STRONG",{});var lJr=s(aae);feo=r(lJr,"xlm-roberta-xl"),lJr.forEach(t),meo=r(FAe," \u2014 "),vR=n(FAe,"A",{href:!0});var iJr=s(vR);geo=r(iJr,"XLMRobertaXLConfig"),iJr.forEach(t),heo=r(FAe," (XLM-RoBERTa-XL model)"),FAe.forEach(t),peo=i(L),wg=n(L,"LI",{});var TAe=s(wg);nae=n(TAe,"STRONG",{});var dJr=s(nae);_eo=r(dJr,"xlnet"),dJr.forEach(t),ueo=r(TAe," \u2014 "),FR=n(TAe,"A",{href:!0});var cJr=s(FR);beo=r(cJr,"XLNetConfig"),cJr.forEach(t),veo=r(TAe," (XLNet model)"),TAe.forEach(t),Feo=i(L),Ag=n(L,"LI",{});var MAe=s(Ag);sae=n(MAe,"STRONG",{});var fJr=s(sae);Teo=r(fJr,"yolos"),fJr.forEach(t),Meo=r(MAe," \u2014 "),TR=n(MAe,"A",{href:!0});var mJr=s(TR);Eeo=r(mJr,"YolosConfig"),mJr.forEach(t),Ceo=r(MAe," (YOLOS model)"),MAe.forEach(t),weo=i(L),Lg=n(L,"LI",{});var EAe=s(Lg);lae=n(EAe,"STRONG",{});var gJr=s(lae);Aeo=r(gJr,"yoso"),gJr.forEach(t),Leo=r(EAe," \u2014 "),MR=n(EAe,"A",{href:!0});var hJr=s(MR);yeo=r(hJr,"YosoConfig"),hJr.forEach(t),xeo=r(EAe," (YOSO model)"),EAe.forEach(t),L.forEach(t),$eo=i(rt),T(yg.$$.fragment,rt),rt.forEach(t),keo=i(ot),xg=n(ot,"DIV",{class:!0});var xGe=s(xg);T(eL.$$.fragment,xGe),Seo=i(xGe),iae=n(xGe,"P",{});var pJr=s(iae);Reo=r(pJr,"Register a new configuration for this class."),pJr.forEach(t),xGe.forEach(t),ot.forEach(t),Sje=i(f),Ei=n(f,"H2",{class:!0});var $Ge=s(Ei);$g=n($Ge,"A",{id:!0,class:!0,href:!0});var _Jr=s($g);dae=n(_Jr,"SPAN",{});var uJr=s(dae);T(oL.$$.fragment,uJr),uJr.forEach(t),_Jr.forEach(t),Peo=i($Ge),cae=n($Ge,"SPAN",{});var bJr=s(cae);Beo=r(bJr,"AutoTokenizer"),bJr.forEach(t),$Ge.forEach(t),Rje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(rL.$$.fragment,qs),Ieo=i(qs),tL=n(qs,"P",{});var kGe=s(tL);Neo=r(kGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ER=n(kGe,"A",{href:!0});var vJr=s(ER);qeo=r(vJr,"AutoTokenizer.from_pretrained()"),vJr.forEach(t),jeo=r(kGe," class method."),kGe.forEach(t),Deo=i(qs),aL=n(qs,"P",{});var SGe=s(aL);Geo=r(SGe,"This class cannot be instantiated directly using "),fae=n(SGe,"CODE",{});var FJr=s(fae);Oeo=r(FJr,"__init__()"),FJr.forEach(t),Veo=r(SGe," (throws an error)."),SGe.forEach(t),Xeo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(nL.$$.fragment,js),zeo=i(js),mae=n(js,"P",{});var TJr=s(mae);Weo=r(TJr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TJr.forEach(t),Qeo=i(js),La=n(js,"P",{});var Jw=s(La);Heo=r(Jw,"The tokenizer class to instantiate is selected based on the "),gae=n(Jw,"CODE",{});var MJr=s(gae);Ueo=r(MJr,"model_type"),MJr.forEach(t),Jeo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),hae=n(Jw,"CODE",{});var EJr=s(hae);Yeo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),Keo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(Jw,"CODE",{});var CJr=s(pae);Zeo=r(CJr,"pretrained_model_name_or_path"),CJr.forEach(t),eoo=r(Jw,":"),Jw.forEach(t),ooo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var s$=s(Sn);_ae=n(s$,"STRONG",{});var wJr=s(_ae);roo=r(wJr,"albert"),wJr.forEach(t),too=r(s$," \u2014 "),CR=n(s$,"A",{href:!0});var AJr=s(CR);aoo=r(AJr,"AlbertTokenizer"),AJr.forEach(t),noo=r(s$," or "),wR=n(s$,"A",{href:!0});var LJr=s(wR);soo=r(LJr,"AlbertTokenizerFast"),LJr.forEach(t),loo=r(s$," (ALBERT model)"),s$.forEach(t),ioo=i(S),Rn=n(S,"LI",{});var l$=s(Rn);uae=n(l$,"STRONG",{});var yJr=s(uae);doo=r(yJr,"bart"),yJr.forEach(t),coo=r(l$," \u2014 "),AR=n(l$,"A",{href:!0});var xJr=s(AR);foo=r(xJr,"BartTokenizer"),xJr.forEach(t),moo=r(l$," or "),LR=n(l$,"A",{href:!0});var $Jr=s(LR);goo=r($Jr,"BartTokenizerFast"),$Jr.forEach(t),hoo=r(l$," (BART model)"),l$.forEach(t),poo=i(S),Pn=n(S,"LI",{});var i$=s(Pn);bae=n(i$,"STRONG",{});var kJr=s(bae);_oo=r(kJr,"barthez"),kJr.forEach(t),uoo=r(i$," \u2014 "),yR=n(i$,"A",{href:!0});var SJr=s(yR);boo=r(SJr,"BarthezTokenizer"),SJr.forEach(t),voo=r(i$," or "),xR=n(i$,"A",{href:!0});var RJr=s(xR);Foo=r(RJr,"BarthezTokenizerFast"),RJr.forEach(t),Too=r(i$," (BARThez model)"),i$.forEach(t),Moo=i(S),kg=n(S,"LI",{});var CAe=s(kg);vae=n(CAe,"STRONG",{});var PJr=s(vae);Eoo=r(PJr,"bartpho"),PJr.forEach(t),Coo=r(CAe," \u2014 "),$R=n(CAe,"A",{href:!0});var BJr=s($R);woo=r(BJr,"BartphoTokenizer"),BJr.forEach(t),Aoo=r(CAe," (BARTpho model)"),CAe.forEach(t),Loo=i(S),Bn=n(S,"LI",{});var d$=s(Bn);Fae=n(d$,"STRONG",{});var IJr=s(Fae);yoo=r(IJr,"bert"),IJr.forEach(t),xoo=r(d$," \u2014 "),kR=n(d$,"A",{href:!0});var NJr=s(kR);$oo=r(NJr,"BertTokenizer"),NJr.forEach(t),koo=r(d$," or "),SR=n(d$,"A",{href:!0});var qJr=s(SR);Soo=r(qJr,"BertTokenizerFast"),qJr.forEach(t),Roo=r(d$," (BERT model)"),d$.forEach(t),Poo=i(S),Sg=n(S,"LI",{});var wAe=s(Sg);Tae=n(wAe,"STRONG",{});var jJr=s(Tae);Boo=r(jJr,"bert-generation"),jJr.forEach(t),Ioo=r(wAe," \u2014 "),RR=n(wAe,"A",{href:!0});var DJr=s(RR);Noo=r(DJr,"BertGenerationTokenizer"),DJr.forEach(t),qoo=r(wAe," (Bert Generation model)"),wAe.forEach(t),joo=i(S),Rg=n(S,"LI",{});var AAe=s(Rg);Mae=n(AAe,"STRONG",{});var GJr=s(Mae);Doo=r(GJr,"bert-japanese"),GJr.forEach(t),Goo=r(AAe," \u2014 "),PR=n(AAe,"A",{href:!0});var OJr=s(PR);Ooo=r(OJr,"BertJapaneseTokenizer"),OJr.forEach(t),Voo=r(AAe," (BertJapanese model)"),AAe.forEach(t),Xoo=i(S),Pg=n(S,"LI",{});var LAe=s(Pg);Eae=n(LAe,"STRONG",{});var VJr=s(Eae);zoo=r(VJr,"bertweet"),VJr.forEach(t),Woo=r(LAe," \u2014 "),BR=n(LAe,"A",{href:!0});var XJr=s(BR);Qoo=r(XJr,"BertweetTokenizer"),XJr.forEach(t),Hoo=r(LAe," (BERTweet model)"),LAe.forEach(t),Uoo=i(S),In=n(S,"LI",{});var c$=s(In);Cae=n(c$,"STRONG",{});var zJr=s(Cae);Joo=r(zJr,"big_bird"),zJr.forEach(t),Yoo=r(c$," \u2014 "),IR=n(c$,"A",{href:!0});var WJr=s(IR);Koo=r(WJr,"BigBirdTokenizer"),WJr.forEach(t),Zoo=r(c$," or "),NR=n(c$,"A",{href:!0});var QJr=s(NR);ero=r(QJr,"BigBirdTokenizerFast"),QJr.forEach(t),oro=r(c$," (BigBird model)"),c$.forEach(t),rro=i(S),Nn=n(S,"LI",{});var f$=s(Nn);wae=n(f$,"STRONG",{});var HJr=s(wae);tro=r(HJr,"bigbird_pegasus"),HJr.forEach(t),aro=r(f$," \u2014 "),qR=n(f$,"A",{href:!0});var UJr=s(qR);nro=r(UJr,"PegasusTokenizer"),UJr.forEach(t),sro=r(f$," or "),jR=n(f$,"A",{href:!0});var JJr=s(jR);lro=r(JJr,"PegasusTokenizerFast"),JJr.forEach(t),iro=r(f$," (BigBird-Pegasus model)"),f$.forEach(t),dro=i(S),qn=n(S,"LI",{});var m$=s(qn);Aae=n(m$,"STRONG",{});var YJr=s(Aae);cro=r(YJr,"blenderbot"),YJr.forEach(t),fro=r(m$," \u2014 "),DR=n(m$,"A",{href:!0});var KJr=s(DR);mro=r(KJr,"BlenderbotTokenizer"),KJr.forEach(t),gro=r(m$," or "),GR=n(m$,"A",{href:!0});var ZJr=s(GR);hro=r(ZJr,"BlenderbotTokenizerFast"),ZJr.forEach(t),pro=r(m$," (Blenderbot model)"),m$.forEach(t),_ro=i(S),Bg=n(S,"LI",{});var yAe=s(Bg);Lae=n(yAe,"STRONG",{});var eYr=s(Lae);uro=r(eYr,"blenderbot-small"),eYr.forEach(t),bro=r(yAe," \u2014 "),OR=n(yAe,"A",{href:!0});var oYr=s(OR);vro=r(oYr,"BlenderbotSmallTokenizer"),oYr.forEach(t),Fro=r(yAe," (BlenderbotSmall model)"),yAe.forEach(t),Tro=i(S),Ig=n(S,"LI",{});var xAe=s(Ig);yae=n(xAe,"STRONG",{});var rYr=s(yae);Mro=r(rYr,"bloom"),rYr.forEach(t),Ero=r(xAe," \u2014 "),VR=n(xAe,"A",{href:!0});var tYr=s(VR);Cro=r(tYr,"BloomTokenizerFast"),tYr.forEach(t),wro=r(xAe," (BLOOM model)"),xAe.forEach(t),Aro=i(S),Ng=n(S,"LI",{});var $Ae=s(Ng);xae=n($Ae,"STRONG",{});var aYr=s(xae);Lro=r(aYr,"byt5"),aYr.forEach(t),yro=r($Ae," \u2014 "),XR=n($Ae,"A",{href:!0});var nYr=s(XR);xro=r(nYr,"ByT5Tokenizer"),nYr.forEach(t),$ro=r($Ae," (ByT5 model)"),$Ae.forEach(t),kro=i(S),jn=n(S,"LI",{});var g$=s(jn);$ae=n(g$,"STRONG",{});var sYr=s($ae);Sro=r(sYr,"camembert"),sYr.forEach(t),Rro=r(g$," \u2014 "),zR=n(g$,"A",{href:!0});var lYr=s(zR);Pro=r(lYr,"CamembertTokenizer"),lYr.forEach(t),Bro=r(g$," or "),WR=n(g$,"A",{href:!0});var iYr=s(WR);Iro=r(iYr,"CamembertTokenizerFast"),iYr.forEach(t),Nro=r(g$," (CamemBERT model)"),g$.forEach(t),qro=i(S),qg=n(S,"LI",{});var kAe=s(qg);kae=n(kAe,"STRONG",{});var dYr=s(kae);jro=r(dYr,"canine"),dYr.forEach(t),Dro=r(kAe," \u2014 "),QR=n(kAe,"A",{href:!0});var cYr=s(QR);Gro=r(cYr,"CanineTokenizer"),cYr.forEach(t),Oro=r(kAe," (CANINE model)"),kAe.forEach(t),Vro=i(S),Dn=n(S,"LI",{});var h$=s(Dn);Sae=n(h$,"STRONG",{});var fYr=s(Sae);Xro=r(fYr,"clip"),fYr.forEach(t),zro=r(h$," \u2014 "),HR=n(h$,"A",{href:!0});var mYr=s(HR);Wro=r(mYr,"CLIPTokenizer"),mYr.forEach(t),Qro=r(h$," or "),UR=n(h$,"A",{href:!0});var gYr=s(UR);Hro=r(gYr,"CLIPTokenizerFast"),gYr.forEach(t),Uro=r(h$," (CLIP model)"),h$.forEach(t),Jro=i(S),Gn=n(S,"LI",{});var p$=s(Gn);Rae=n(p$,"STRONG",{});var hYr=s(Rae);Yro=r(hYr,"convbert"),hYr.forEach(t),Kro=r(p$," \u2014 "),JR=n(p$,"A",{href:!0});var pYr=s(JR);Zro=r(pYr,"ConvBertTokenizer"),pYr.forEach(t),eto=r(p$," or "),YR=n(p$,"A",{href:!0});var _Yr=s(YR);oto=r(_Yr,"ConvBertTokenizerFast"),_Yr.forEach(t),rto=r(p$," (ConvBERT model)"),p$.forEach(t),tto=i(S),On=n(S,"LI",{});var _$=s(On);Pae=n(_$,"STRONG",{});var uYr=s(Pae);ato=r(uYr,"cpm"),uYr.forEach(t),nto=r(_$," \u2014 "),KR=n(_$,"A",{href:!0});var bYr=s(KR);sto=r(bYr,"CpmTokenizer"),bYr.forEach(t),lto=r(_$," or "),ZR=n(_$,"A",{href:!0});var vYr=s(ZR);ito=r(vYr,"CpmTokenizerFast"),vYr.forEach(t),dto=r(_$," (CPM model)"),_$.forEach(t),cto=i(S),jg=n(S,"LI",{});var SAe=s(jg);Bae=n(SAe,"STRONG",{});var FYr=s(Bae);fto=r(FYr,"ctrl"),FYr.forEach(t),mto=r(SAe," \u2014 "),eP=n(SAe,"A",{href:!0});var TYr=s(eP);gto=r(TYr,"CTRLTokenizer"),TYr.forEach(t),hto=r(SAe," (CTRL model)"),SAe.forEach(t),pto=i(S),Vn=n(S,"LI",{});var u$=s(Vn);Iae=n(u$,"STRONG",{});var MYr=s(Iae);_to=r(MYr,"data2vec-text"),MYr.forEach(t),uto=r(u$," \u2014 "),oP=n(u$,"A",{href:!0});var EYr=s(oP);bto=r(EYr,"RobertaTokenizer"),EYr.forEach(t),vto=r(u$," or "),rP=n(u$,"A",{href:!0});var CYr=s(rP);Fto=r(CYr,"RobertaTokenizerFast"),CYr.forEach(t),Tto=r(u$," (Data2VecText model)"),u$.forEach(t),Mto=i(S),Xn=n(S,"LI",{});var b$=s(Xn);Nae=n(b$,"STRONG",{});var wYr=s(Nae);Eto=r(wYr,"deberta"),wYr.forEach(t),Cto=r(b$," \u2014 "),tP=n(b$,"A",{href:!0});var AYr=s(tP);wto=r(AYr,"DebertaTokenizer"),AYr.forEach(t),Ato=r(b$," or "),aP=n(b$,"A",{href:!0});var LYr=s(aP);Lto=r(LYr,"DebertaTokenizerFast"),LYr.forEach(t),yto=r(b$," (DeBERTa model)"),b$.forEach(t),xto=i(S),zn=n(S,"LI",{});var v$=s(zn);qae=n(v$,"STRONG",{});var yYr=s(qae);$to=r(yYr,"deberta-v2"),yYr.forEach(t),kto=r(v$," \u2014 "),nP=n(v$,"A",{href:!0});var xYr=s(nP);Sto=r(xYr,"DebertaV2Tokenizer"),xYr.forEach(t),Rto=r(v$," or "),sP=n(v$,"A",{href:!0});var $Yr=s(sP);Pto=r($Yr,"DebertaV2TokenizerFast"),$Yr.forEach(t),Bto=r(v$," (DeBERTa-v2 model)"),v$.forEach(t),Ito=i(S),Wn=n(S,"LI",{});var F$=s(Wn);jae=n(F$,"STRONG",{});var kYr=s(jae);Nto=r(kYr,"distilbert"),kYr.forEach(t),qto=r(F$," \u2014 "),lP=n(F$,"A",{href:!0});var SYr=s(lP);jto=r(SYr,"DistilBertTokenizer"),SYr.forEach(t),Dto=r(F$," or "),iP=n(F$,"A",{href:!0});var RYr=s(iP);Gto=r(RYr,"DistilBertTokenizerFast"),RYr.forEach(t),Oto=r(F$," (DistilBERT model)"),F$.forEach(t),Vto=i(S),Qn=n(S,"LI",{});var T$=s(Qn);Dae=n(T$,"STRONG",{});var PYr=s(Dae);Xto=r(PYr,"dpr"),PYr.forEach(t),zto=r(T$," \u2014 "),dP=n(T$,"A",{href:!0});var BYr=s(dP);Wto=r(BYr,"DPRQuestionEncoderTokenizer"),BYr.forEach(t),Qto=r(T$," or "),cP=n(T$,"A",{href:!0});var IYr=s(cP);Hto=r(IYr,"DPRQuestionEncoderTokenizerFast"),IYr.forEach(t),Uto=r(T$," (DPR model)"),T$.forEach(t),Jto=i(S),Hn=n(S,"LI",{});var M$=s(Hn);Gae=n(M$,"STRONG",{});var NYr=s(Gae);Yto=r(NYr,"electra"),NYr.forEach(t),Kto=r(M$," \u2014 "),fP=n(M$,"A",{href:!0});var qYr=s(fP);Zto=r(qYr,"ElectraTokenizer"),qYr.forEach(t),eao=r(M$," or "),mP=n(M$,"A",{href:!0});var jYr=s(mP);oao=r(jYr,"ElectraTokenizerFast"),jYr.forEach(t),rao=r(M$," (ELECTRA model)"),M$.forEach(t),tao=i(S),Dg=n(S,"LI",{});var RAe=s(Dg);Oae=n(RAe,"STRONG",{});var DYr=s(Oae);aao=r(DYr,"flaubert"),DYr.forEach(t),nao=r(RAe," \u2014 "),gP=n(RAe,"A",{href:!0});var GYr=s(gP);sao=r(GYr,"FlaubertTokenizer"),GYr.forEach(t),lao=r(RAe," (FlauBERT model)"),RAe.forEach(t),iao=i(S),Un=n(S,"LI",{});var E$=s(Un);Vae=n(E$,"STRONG",{});var OYr=s(Vae);dao=r(OYr,"fnet"),OYr.forEach(t),cao=r(E$," \u2014 "),hP=n(E$,"A",{href:!0});var VYr=s(hP);fao=r(VYr,"FNetTokenizer"),VYr.forEach(t),mao=r(E$," or "),pP=n(E$,"A",{href:!0});var XYr=s(pP);gao=r(XYr,"FNetTokenizerFast"),XYr.forEach(t),hao=r(E$," (FNet model)"),E$.forEach(t),pao=i(S),Gg=n(S,"LI",{});var PAe=s(Gg);Xae=n(PAe,"STRONG",{});var zYr=s(Xae);_ao=r(zYr,"fsmt"),zYr.forEach(t),uao=r(PAe," \u2014 "),_P=n(PAe,"A",{href:!0});var WYr=s(_P);bao=r(WYr,"FSMTTokenizer"),WYr.forEach(t),vao=r(PAe," (FairSeq Machine-Translation model)"),PAe.forEach(t),Fao=i(S),Jn=n(S,"LI",{});var C$=s(Jn);zae=n(C$,"STRONG",{});var QYr=s(zae);Tao=r(QYr,"funnel"),QYr.forEach(t),Mao=r(C$," \u2014 "),uP=n(C$,"A",{href:!0});var HYr=s(uP);Eao=r(HYr,"FunnelTokenizer"),HYr.forEach(t),Cao=r(C$," or "),bP=n(C$,"A",{href:!0});var UYr=s(bP);wao=r(UYr,"FunnelTokenizerFast"),UYr.forEach(t),Aao=r(C$," (Funnel Transformer model)"),C$.forEach(t),Lao=i(S),Yn=n(S,"LI",{});var w$=s(Yn);Wae=n(w$,"STRONG",{});var JYr=s(Wae);yao=r(JYr,"gpt2"),JYr.forEach(t),xao=r(w$," \u2014 "),vP=n(w$,"A",{href:!0});var YYr=s(vP);$ao=r(YYr,"GPT2Tokenizer"),YYr.forEach(t),kao=r(w$," or "),FP=n(w$,"A",{href:!0});var KYr=s(FP);Sao=r(KYr,"GPT2TokenizerFast"),KYr.forEach(t),Rao=r(w$," (OpenAI GPT-2 model)"),w$.forEach(t),Pao=i(S),Kn=n(S,"LI",{});var A$=s(Kn);Qae=n(A$,"STRONG",{});var ZYr=s(Qae);Bao=r(ZYr,"gpt_neo"),ZYr.forEach(t),Iao=r(A$," \u2014 "),TP=n(A$,"A",{href:!0});var eKr=s(TP);Nao=r(eKr,"GPT2Tokenizer"),eKr.forEach(t),qao=r(A$," or "),MP=n(A$,"A",{href:!0});var oKr=s(MP);jao=r(oKr,"GPT2TokenizerFast"),oKr.forEach(t),Dao=r(A$," (GPT Neo model)"),A$.forEach(t),Gao=i(S),Og=n(S,"LI",{});var BAe=s(Og);Hae=n(BAe,"STRONG",{});var rKr=s(Hae);Oao=r(rKr,"gpt_neox"),rKr.forEach(t),Vao=r(BAe," \u2014 "),EP=n(BAe,"A",{href:!0});var tKr=s(EP);Xao=r(tKr,"GPTNeoXTokenizerFast"),tKr.forEach(t),zao=r(BAe," (GPT NeoX model)"),BAe.forEach(t),Wao=i(S),Zn=n(S,"LI",{});var L$=s(Zn);Uae=n(L$,"STRONG",{});var aKr=s(Uae);Qao=r(aKr,"gptj"),aKr.forEach(t),Hao=r(L$," \u2014 "),CP=n(L$,"A",{href:!0});var nKr=s(CP);Uao=r(nKr,"GPT2Tokenizer"),nKr.forEach(t),Jao=r(L$," or "),wP=n(L$,"A",{href:!0});var sKr=s(wP);Yao=r(sKr,"GPT2TokenizerFast"),sKr.forEach(t),Kao=r(L$," (GPT-J model)"),L$.forEach(t),Zao=i(S),es=n(S,"LI",{});var y$=s(es);Jae=n(y$,"STRONG",{});var lKr=s(Jae);eno=r(lKr,"herbert"),lKr.forEach(t),ono=r(y$," \u2014 "),AP=n(y$,"A",{href:!0});var iKr=s(AP);rno=r(iKr,"HerbertTokenizer"),iKr.forEach(t),tno=r(y$," or "),LP=n(y$,"A",{href:!0});var dKr=s(LP);ano=r(dKr,"HerbertTokenizerFast"),dKr.forEach(t),nno=r(y$," (HerBERT model)"),y$.forEach(t),sno=i(S),Vg=n(S,"LI",{});var IAe=s(Vg);Yae=n(IAe,"STRONG",{});var cKr=s(Yae);lno=r(cKr,"hubert"),cKr.forEach(t),ino=r(IAe," \u2014 "),yP=n(IAe,"A",{href:!0});var fKr=s(yP);dno=r(fKr,"Wav2Vec2CTCTokenizer"),fKr.forEach(t),cno=r(IAe," (Hubert model)"),IAe.forEach(t),fno=i(S),os=n(S,"LI",{});var x$=s(os);Kae=n(x$,"STRONG",{});var mKr=s(Kae);mno=r(mKr,"ibert"),mKr.forEach(t),gno=r(x$," \u2014 "),xP=n(x$,"A",{href:!0});var gKr=s(xP);hno=r(gKr,"RobertaTokenizer"),gKr.forEach(t),pno=r(x$," or "),$P=n(x$,"A",{href:!0});var hKr=s($P);_no=r(hKr,"RobertaTokenizerFast"),hKr.forEach(t),uno=r(x$," (I-BERT model)"),x$.forEach(t),bno=i(S),rs=n(S,"LI",{});var $$=s(rs);Zae=n($$,"STRONG",{});var pKr=s(Zae);vno=r(pKr,"layoutlm"),pKr.forEach(t),Fno=r($$," \u2014 "),kP=n($$,"A",{href:!0});var _Kr=s(kP);Tno=r(_Kr,"LayoutLMTokenizer"),_Kr.forEach(t),Mno=r($$," or "),SP=n($$,"A",{href:!0});var uKr=s(SP);Eno=r(uKr,"LayoutLMTokenizerFast"),uKr.forEach(t),Cno=r($$," (LayoutLM model)"),$$.forEach(t),wno=i(S),ts=n(S,"LI",{});var k$=s(ts);ene=n(k$,"STRONG",{});var bKr=s(ene);Ano=r(bKr,"layoutlmv2"),bKr.forEach(t),Lno=r(k$," \u2014 "),RP=n(k$,"A",{href:!0});var vKr=s(RP);yno=r(vKr,"LayoutLMv2Tokenizer"),vKr.forEach(t),xno=r(k$," or "),PP=n(k$,"A",{href:!0});var FKr=s(PP);$no=r(FKr,"LayoutLMv2TokenizerFast"),FKr.forEach(t),kno=r(k$," (LayoutLMv2 model)"),k$.forEach(t),Sno=i(S),as=n(S,"LI",{});var S$=s(as);one=n(S$,"STRONG",{});var TKr=s(one);Rno=r(TKr,"layoutlmv3"),TKr.forEach(t),Pno=r(S$," \u2014 "),BP=n(S$,"A",{href:!0});var MKr=s(BP);Bno=r(MKr,"LayoutLMv3Tokenizer"),MKr.forEach(t),Ino=r(S$," or "),IP=n(S$,"A",{href:!0});var EKr=s(IP);Nno=r(EKr,"LayoutLMv3TokenizerFast"),EKr.forEach(t),qno=r(S$," (LayoutLMv3 model)"),S$.forEach(t),jno=i(S),ns=n(S,"LI",{});var R$=s(ns);rne=n(R$,"STRONG",{});var CKr=s(rne);Dno=r(CKr,"layoutxlm"),CKr.forEach(t),Gno=r(R$," \u2014 "),NP=n(R$,"A",{href:!0});var wKr=s(NP);Ono=r(wKr,"LayoutXLMTokenizer"),wKr.forEach(t),Vno=r(R$," or "),qP=n(R$,"A",{href:!0});var AKr=s(qP);Xno=r(AKr,"LayoutXLMTokenizerFast"),AKr.forEach(t),zno=r(R$," (LayoutXLM model)"),R$.forEach(t),Wno=i(S),ss=n(S,"LI",{});var P$=s(ss);tne=n(P$,"STRONG",{});var LKr=s(tne);Qno=r(LKr,"led"),LKr.forEach(t),Hno=r(P$," \u2014 "),jP=n(P$,"A",{href:!0});var yKr=s(jP);Uno=r(yKr,"LEDTokenizer"),yKr.forEach(t),Jno=r(P$," or "),DP=n(P$,"A",{href:!0});var xKr=s(DP);Yno=r(xKr,"LEDTokenizerFast"),xKr.forEach(t),Kno=r(P$," (LED model)"),P$.forEach(t),Zno=i(S),ls=n(S,"LI",{});var B$=s(ls);ane=n(B$,"STRONG",{});var $Kr=s(ane);eso=r($Kr,"longformer"),$Kr.forEach(t),oso=r(B$," \u2014 "),GP=n(B$,"A",{href:!0});var kKr=s(GP);rso=r(kKr,"LongformerTokenizer"),kKr.forEach(t),tso=r(B$," or "),OP=n(B$,"A",{href:!0});var SKr=s(OP);aso=r(SKr,"LongformerTokenizerFast"),SKr.forEach(t),nso=r(B$," (Longformer model)"),B$.forEach(t),sso=i(S),Xg=n(S,"LI",{});var NAe=s(Xg);nne=n(NAe,"STRONG",{});var RKr=s(nne);lso=r(RKr,"luke"),RKr.forEach(t),iso=r(NAe," \u2014 "),VP=n(NAe,"A",{href:!0});var PKr=s(VP);dso=r(PKr,"LukeTokenizer"),PKr.forEach(t),cso=r(NAe," (LUKE model)"),NAe.forEach(t),fso=i(S),is=n(S,"LI",{});var I$=s(is);sne=n(I$,"STRONG",{});var BKr=s(sne);mso=r(BKr,"lxmert"),BKr.forEach(t),gso=r(I$," \u2014 "),XP=n(I$,"A",{href:!0});var IKr=s(XP);hso=r(IKr,"LxmertTokenizer"),IKr.forEach(t),pso=r(I$," or "),zP=n(I$,"A",{href:!0});var NKr=s(zP);_so=r(NKr,"LxmertTokenizerFast"),NKr.forEach(t),uso=r(I$," (LXMERT model)"),I$.forEach(t),bso=i(S),zg=n(S,"LI",{});var qAe=s(zg);lne=n(qAe,"STRONG",{});var qKr=s(lne);vso=r(qKr,"m2m_100"),qKr.forEach(t),Fso=r(qAe," \u2014 "),WP=n(qAe,"A",{href:!0});var jKr=s(WP);Tso=r(jKr,"M2M100Tokenizer"),jKr.forEach(t),Mso=r(qAe," (M2M100 model)"),qAe.forEach(t),Eso=i(S),Wg=n(S,"LI",{});var jAe=s(Wg);ine=n(jAe,"STRONG",{});var DKr=s(ine);Cso=r(DKr,"marian"),DKr.forEach(t),wso=r(jAe," \u2014 "),QP=n(jAe,"A",{href:!0});var GKr=s(QP);Aso=r(GKr,"MarianTokenizer"),GKr.forEach(t),Lso=r(jAe," (Marian model)"),jAe.forEach(t),yso=i(S),ds=n(S,"LI",{});var N$=s(ds);dne=n(N$,"STRONG",{});var OKr=s(dne);xso=r(OKr,"mbart"),OKr.forEach(t),$so=r(N$," \u2014 "),HP=n(N$,"A",{href:!0});var VKr=s(HP);kso=r(VKr,"MBartTokenizer"),VKr.forEach(t),Sso=r(N$," or "),UP=n(N$,"A",{href:!0});var XKr=s(UP);Rso=r(XKr,"MBartTokenizerFast"),XKr.forEach(t),Pso=r(N$," (mBART model)"),N$.forEach(t),Bso=i(S),cs=n(S,"LI",{});var q$=s(cs);cne=n(q$,"STRONG",{});var zKr=s(cne);Iso=r(zKr,"mbart50"),zKr.forEach(t),Nso=r(q$," \u2014 "),JP=n(q$,"A",{href:!0});var WKr=s(JP);qso=r(WKr,"MBart50Tokenizer"),WKr.forEach(t),jso=r(q$," or "),YP=n(q$,"A",{href:!0});var QKr=s(YP);Dso=r(QKr,"MBart50TokenizerFast"),QKr.forEach(t),Gso=r(q$," (mBART-50 model)"),q$.forEach(t),Oso=i(S),fs=n(S,"LI",{});var j$=s(fs);fne=n(j$,"STRONG",{});var HKr=s(fne);Vso=r(HKr,"megatron-bert"),HKr.forEach(t),Xso=r(j$," \u2014 "),KP=n(j$,"A",{href:!0});var UKr=s(KP);zso=r(UKr,"BertTokenizer"),UKr.forEach(t),Wso=r(j$," or "),ZP=n(j$,"A",{href:!0});var JKr=s(ZP);Qso=r(JKr,"BertTokenizerFast"),JKr.forEach(t),Hso=r(j$," (Megatron-BERT model)"),j$.forEach(t),Uso=i(S),Qg=n(S,"LI",{});var DAe=s(Qg);mne=n(DAe,"STRONG",{});var YKr=s(mne);Jso=r(YKr,"mluke"),YKr.forEach(t),Yso=r(DAe," \u2014 "),eB=n(DAe,"A",{href:!0});var KKr=s(eB);Kso=r(KKr,"MLukeTokenizer"),KKr.forEach(t),Zso=r(DAe," (mLUKE model)"),DAe.forEach(t),elo=i(S),ms=n(S,"LI",{});var D$=s(ms);gne=n(D$,"STRONG",{});var ZKr=s(gne);olo=r(ZKr,"mobilebert"),ZKr.forEach(t),rlo=r(D$," \u2014 "),oB=n(D$,"A",{href:!0});var eZr=s(oB);tlo=r(eZr,"MobileBertTokenizer"),eZr.forEach(t),alo=r(D$," or "),rB=n(D$,"A",{href:!0});var oZr=s(rB);nlo=r(oZr,"MobileBertTokenizerFast"),oZr.forEach(t),slo=r(D$," (MobileBERT model)"),D$.forEach(t),llo=i(S),gs=n(S,"LI",{});var G$=s(gs);hne=n(G$,"STRONG",{});var rZr=s(hne);ilo=r(rZr,"mpnet"),rZr.forEach(t),dlo=r(G$," \u2014 "),tB=n(G$,"A",{href:!0});var tZr=s(tB);clo=r(tZr,"MPNetTokenizer"),tZr.forEach(t),flo=r(G$," or "),aB=n(G$,"A",{href:!0});var aZr=s(aB);mlo=r(aZr,"MPNetTokenizerFast"),aZr.forEach(t),glo=r(G$," (MPNet model)"),G$.forEach(t),hlo=i(S),hs=n(S,"LI",{});var O$=s(hs);pne=n(O$,"STRONG",{});var nZr=s(pne);plo=r(nZr,"mt5"),nZr.forEach(t),_lo=r(O$," \u2014 "),nB=n(O$,"A",{href:!0});var sZr=s(nB);ulo=r(sZr,"MT5Tokenizer"),sZr.forEach(t),blo=r(O$," or "),sB=n(O$,"A",{href:!0});var lZr=s(sB);vlo=r(lZr,"MT5TokenizerFast"),lZr.forEach(t),Flo=r(O$," (MT5 model)"),O$.forEach(t),Tlo=i(S),ps=n(S,"LI",{});var V$=s(ps);_ne=n(V$,"STRONG",{});var iZr=s(_ne);Mlo=r(iZr,"nystromformer"),iZr.forEach(t),Elo=r(V$," \u2014 "),lB=n(V$,"A",{href:!0});var dZr=s(lB);Clo=r(dZr,"AlbertTokenizer"),dZr.forEach(t),wlo=r(V$," or "),iB=n(V$,"A",{href:!0});var cZr=s(iB);Alo=r(cZr,"AlbertTokenizerFast"),cZr.forEach(t),Llo=r(V$," (Nystr\xF6mformer model)"),V$.forEach(t),ylo=i(S),_s=n(S,"LI",{});var X$=s(_s);une=n(X$,"STRONG",{});var fZr=s(une);xlo=r(fZr,"openai-gpt"),fZr.forEach(t),$lo=r(X$," \u2014 "),dB=n(X$,"A",{href:!0});var mZr=s(dB);klo=r(mZr,"OpenAIGPTTokenizer"),mZr.forEach(t),Slo=r(X$," or "),cB=n(X$,"A",{href:!0});var gZr=s(cB);Rlo=r(gZr,"OpenAIGPTTokenizerFast"),gZr.forEach(t),Plo=r(X$," (OpenAI GPT model)"),X$.forEach(t),Blo=i(S),Hg=n(S,"LI",{});var GAe=s(Hg);bne=n(GAe,"STRONG",{});var hZr=s(bne);Ilo=r(hZr,"opt"),hZr.forEach(t),Nlo=r(GAe," \u2014 "),fB=n(GAe,"A",{href:!0});var pZr=s(fB);qlo=r(pZr,"GPT2Tokenizer"),pZr.forEach(t),jlo=r(GAe," (OPT model)"),GAe.forEach(t),Dlo=i(S),us=n(S,"LI",{});var z$=s(us);vne=n(z$,"STRONG",{});var _Zr=s(vne);Glo=r(_Zr,"pegasus"),_Zr.forEach(t),Olo=r(z$," \u2014 "),mB=n(z$,"A",{href:!0});var uZr=s(mB);Vlo=r(uZr,"PegasusTokenizer"),uZr.forEach(t),Xlo=r(z$," or "),gB=n(z$,"A",{href:!0});var bZr=s(gB);zlo=r(bZr,"PegasusTokenizerFast"),bZr.forEach(t),Wlo=r(z$," (Pegasus model)"),z$.forEach(t),Qlo=i(S),Ug=n(S,"LI",{});var OAe=s(Ug);Fne=n(OAe,"STRONG",{});var vZr=s(Fne);Hlo=r(vZr,"perceiver"),vZr.forEach(t),Ulo=r(OAe," \u2014 "),hB=n(OAe,"A",{href:!0});var FZr=s(hB);Jlo=r(FZr,"PerceiverTokenizer"),FZr.forEach(t),Ylo=r(OAe," (Perceiver model)"),OAe.forEach(t),Klo=i(S),Jg=n(S,"LI",{});var VAe=s(Jg);Tne=n(VAe,"STRONG",{});var TZr=s(Tne);Zlo=r(TZr,"phobert"),TZr.forEach(t),eio=r(VAe," \u2014 "),pB=n(VAe,"A",{href:!0});var MZr=s(pB);oio=r(MZr,"PhobertTokenizer"),MZr.forEach(t),rio=r(VAe," (PhoBERT model)"),VAe.forEach(t),tio=i(S),Yg=n(S,"LI",{});var XAe=s(Yg);Mne=n(XAe,"STRONG",{});var EZr=s(Mne);aio=r(EZr,"plbart"),EZr.forEach(t),nio=r(XAe," \u2014 "),_B=n(XAe,"A",{href:!0});var CZr=s(_B);sio=r(CZr,"PLBartTokenizer"),CZr.forEach(t),lio=r(XAe," (PLBart model)"),XAe.forEach(t),iio=i(S),Kg=n(S,"LI",{});var zAe=s(Kg);Ene=n(zAe,"STRONG",{});var wZr=s(Ene);dio=r(wZr,"prophetnet"),wZr.forEach(t),cio=r(zAe," \u2014 "),uB=n(zAe,"A",{href:!0});var AZr=s(uB);fio=r(AZr,"ProphetNetTokenizer"),AZr.forEach(t),mio=r(zAe," (ProphetNet model)"),zAe.forEach(t),gio=i(S),bs=n(S,"LI",{});var W$=s(bs);Cne=n(W$,"STRONG",{});var LZr=s(Cne);hio=r(LZr,"qdqbert"),LZr.forEach(t),pio=r(W$," \u2014 "),bB=n(W$,"A",{href:!0});var yZr=s(bB);_io=r(yZr,"BertTokenizer"),yZr.forEach(t),uio=r(W$," or "),vB=n(W$,"A",{href:!0});var xZr=s(vB);bio=r(xZr,"BertTokenizerFast"),xZr.forEach(t),vio=r(W$," (QDQBert model)"),W$.forEach(t),Fio=i(S),Zg=n(S,"LI",{});var WAe=s(Zg);wne=n(WAe,"STRONG",{});var $Zr=s(wne);Tio=r($Zr,"rag"),$Zr.forEach(t),Mio=r(WAe," \u2014 "),FB=n(WAe,"A",{href:!0});var kZr=s(FB);Eio=r(kZr,"RagTokenizer"),kZr.forEach(t),Cio=r(WAe," (RAG model)"),WAe.forEach(t),wio=i(S),vs=n(S,"LI",{});var Q$=s(vs);Ane=n(Q$,"STRONG",{});var SZr=s(Ane);Aio=r(SZr,"realm"),SZr.forEach(t),Lio=r(Q$," \u2014 "),TB=n(Q$,"A",{href:!0});var RZr=s(TB);yio=r(RZr,"RealmTokenizer"),RZr.forEach(t),xio=r(Q$," or "),MB=n(Q$,"A",{href:!0});var PZr=s(MB);$io=r(PZr,"RealmTokenizerFast"),PZr.forEach(t),kio=r(Q$," (REALM model)"),Q$.forEach(t),Sio=i(S),Fs=n(S,"LI",{});var H$=s(Fs);Lne=n(H$,"STRONG",{});var BZr=s(Lne);Rio=r(BZr,"reformer"),BZr.forEach(t),Pio=r(H$," \u2014 "),EB=n(H$,"A",{href:!0});var IZr=s(EB);Bio=r(IZr,"ReformerTokenizer"),IZr.forEach(t),Iio=r(H$," or "),CB=n(H$,"A",{href:!0});var NZr=s(CB);Nio=r(NZr,"ReformerTokenizerFast"),NZr.forEach(t),qio=r(H$," (Reformer model)"),H$.forEach(t),jio=i(S),Ts=n(S,"LI",{});var U$=s(Ts);yne=n(U$,"STRONG",{});var qZr=s(yne);Dio=r(qZr,"rembert"),qZr.forEach(t),Gio=r(U$," \u2014 "),wB=n(U$,"A",{href:!0});var jZr=s(wB);Oio=r(jZr,"RemBertTokenizer"),jZr.forEach(t),Vio=r(U$," or "),AB=n(U$,"A",{href:!0});var DZr=s(AB);Xio=r(DZr,"RemBertTokenizerFast"),DZr.forEach(t),zio=r(U$," (RemBERT model)"),U$.forEach(t),Wio=i(S),Ms=n(S,"LI",{});var J$=s(Ms);xne=n(J$,"STRONG",{});var GZr=s(xne);Qio=r(GZr,"retribert"),GZr.forEach(t),Hio=r(J$," \u2014 "),LB=n(J$,"A",{href:!0});var OZr=s(LB);Uio=r(OZr,"RetriBertTokenizer"),OZr.forEach(t),Jio=r(J$," or "),yB=n(J$,"A",{href:!0});var VZr=s(yB);Yio=r(VZr,"RetriBertTokenizerFast"),VZr.forEach(t),Kio=r(J$," (RetriBERT model)"),J$.forEach(t),Zio=i(S),Es=n(S,"LI",{});var Y$=s(Es);$ne=n(Y$,"STRONG",{});var XZr=s($ne);edo=r(XZr,"roberta"),XZr.forEach(t),odo=r(Y$," \u2014 "),xB=n(Y$,"A",{href:!0});var zZr=s(xB);rdo=r(zZr,"RobertaTokenizer"),zZr.forEach(t),tdo=r(Y$," or "),$B=n(Y$,"A",{href:!0});var WZr=s($B);ado=r(WZr,"RobertaTokenizerFast"),WZr.forEach(t),ndo=r(Y$," (RoBERTa model)"),Y$.forEach(t),sdo=i(S),Cs=n(S,"LI",{});var K$=s(Cs);kne=n(K$,"STRONG",{});var QZr=s(kne);ldo=r(QZr,"roformer"),QZr.forEach(t),ido=r(K$," \u2014 "),kB=n(K$,"A",{href:!0});var HZr=s(kB);ddo=r(HZr,"RoFormerTokenizer"),HZr.forEach(t),cdo=r(K$," or "),SB=n(K$,"A",{href:!0});var UZr=s(SB);fdo=r(UZr,"RoFormerTokenizerFast"),UZr.forEach(t),mdo=r(K$," (RoFormer model)"),K$.forEach(t),gdo=i(S),eh=n(S,"LI",{});var QAe=s(eh);Sne=n(QAe,"STRONG",{});var JZr=s(Sne);hdo=r(JZr,"speech_to_text"),JZr.forEach(t),pdo=r(QAe," \u2014 "),RB=n(QAe,"A",{href:!0});var YZr=s(RB);_do=r(YZr,"Speech2TextTokenizer"),YZr.forEach(t),udo=r(QAe," (Speech2Text model)"),QAe.forEach(t),bdo=i(S),oh=n(S,"LI",{});var HAe=s(oh);Rne=n(HAe,"STRONG",{});var KZr=s(Rne);vdo=r(KZr,"speech_to_text_2"),KZr.forEach(t),Fdo=r(HAe," \u2014 "),PB=n(HAe,"A",{href:!0});var ZZr=s(PB);Tdo=r(ZZr,"Speech2Text2Tokenizer"),ZZr.forEach(t),Mdo=r(HAe," (Speech2Text2 model)"),HAe.forEach(t),Edo=i(S),ws=n(S,"LI",{});var Z$=s(ws);Pne=n(Z$,"STRONG",{});var eet=s(Pne);Cdo=r(eet,"splinter"),eet.forEach(t),wdo=r(Z$," \u2014 "),BB=n(Z$,"A",{href:!0});var oet=s(BB);Ado=r(oet,"SplinterTokenizer"),oet.forEach(t),Ldo=r(Z$," or "),IB=n(Z$,"A",{href:!0});var ret=s(IB);ydo=r(ret,"SplinterTokenizerFast"),ret.forEach(t),xdo=r(Z$," (Splinter model)"),Z$.forEach(t),$do=i(S),As=n(S,"LI",{});var ek=s(As);Bne=n(ek,"STRONG",{});var tet=s(Bne);kdo=r(tet,"squeezebert"),tet.forEach(t),Sdo=r(ek," \u2014 "),NB=n(ek,"A",{href:!0});var aet=s(NB);Rdo=r(aet,"SqueezeBertTokenizer"),aet.forEach(t),Pdo=r(ek," or "),qB=n(ek,"A",{href:!0});var net=s(qB);Bdo=r(net,"SqueezeBertTokenizerFast"),net.forEach(t),Ido=r(ek," (SqueezeBERT model)"),ek.forEach(t),Ndo=i(S),Ls=n(S,"LI",{});var ok=s(Ls);Ine=n(ok,"STRONG",{});var set=s(Ine);qdo=r(set,"t5"),set.forEach(t),jdo=r(ok," \u2014 "),jB=n(ok,"A",{href:!0});var iet=s(jB);Ddo=r(iet,"T5Tokenizer"),iet.forEach(t),Gdo=r(ok," or "),DB=n(ok,"A",{href:!0});var det=s(DB);Odo=r(det,"T5TokenizerFast"),det.forEach(t),Vdo=r(ok," (T5 model)"),ok.forEach(t),Xdo=i(S),rh=n(S,"LI",{});var UAe=s(rh);Nne=n(UAe,"STRONG",{});var cet=s(Nne);zdo=r(cet,"tapas"),cet.forEach(t),Wdo=r(UAe," \u2014 "),GB=n(UAe,"A",{href:!0});var fet=s(GB);Qdo=r(fet,"TapasTokenizer"),fet.forEach(t),Hdo=r(UAe," (TAPAS model)"),UAe.forEach(t),Udo=i(S),th=n(S,"LI",{});var JAe=s(th);qne=n(JAe,"STRONG",{});var met=s(qne);Jdo=r(met,"tapex"),met.forEach(t),Ydo=r(JAe," \u2014 "),OB=n(JAe,"A",{href:!0});var get=s(OB);Kdo=r(get,"TapexTokenizer"),get.forEach(t),Zdo=r(JAe," (TAPEX model)"),JAe.forEach(t),eco=i(S),ah=n(S,"LI",{});var YAe=s(ah);jne=n(YAe,"STRONG",{});var het=s(jne);oco=r(het,"transfo-xl"),het.forEach(t),rco=r(YAe," \u2014 "),VB=n(YAe,"A",{href:!0});var pet=s(VB);tco=r(pet,"TransfoXLTokenizer"),pet.forEach(t),aco=r(YAe," (Transformer-XL model)"),YAe.forEach(t),nco=i(S),ys=n(S,"LI",{});var rk=s(ys);Dne=n(rk,"STRONG",{});var _et=s(Dne);sco=r(_et,"visual_bert"),_et.forEach(t),lco=r(rk," \u2014 "),XB=n(rk,"A",{href:!0});var uet=s(XB);ico=r(uet,"BertTokenizer"),uet.forEach(t),dco=r(rk," or "),zB=n(rk,"A",{href:!0});var bet=s(zB);cco=r(bet,"BertTokenizerFast"),bet.forEach(t),fco=r(rk," (VisualBERT model)"),rk.forEach(t),mco=i(S),nh=n(S,"LI",{});var KAe=s(nh);Gne=n(KAe,"STRONG",{});var vet=s(Gne);gco=r(vet,"wav2vec2"),vet.forEach(t),hco=r(KAe," \u2014 "),WB=n(KAe,"A",{href:!0});var Fet=s(WB);pco=r(Fet,"Wav2Vec2CTCTokenizer"),Fet.forEach(t),_co=r(KAe," (Wav2Vec2 model)"),KAe.forEach(t),uco=i(S),sh=n(S,"LI",{});var ZAe=s(sh);One=n(ZAe,"STRONG",{});var Tet=s(One);bco=r(Tet,"wav2vec2-conformer"),Tet.forEach(t),vco=r(ZAe," \u2014 "),QB=n(ZAe,"A",{href:!0});var Met=s(QB);Fco=r(Met,"Wav2Vec2CTCTokenizer"),Met.forEach(t),Tco=r(ZAe," (Wav2Vec2-Conformer model)"),ZAe.forEach(t),Mco=i(S),lh=n(S,"LI",{});var e6e=s(lh);Vne=n(e6e,"STRONG",{});var Eet=s(Vne);Eco=r(Eet,"wav2vec2_phoneme"),Eet.forEach(t),Cco=r(e6e," \u2014 "),HB=n(e6e,"A",{href:!0});var Cet=s(HB);wco=r(Cet,"Wav2Vec2PhonemeCTCTokenizer"),Cet.forEach(t),Aco=r(e6e," (Wav2Vec2Phoneme model)"),e6e.forEach(t),Lco=i(S),xs=n(S,"LI",{});var tk=s(xs);Xne=n(tk,"STRONG",{});var wet=s(Xne);yco=r(wet,"xglm"),wet.forEach(t),xco=r(tk," \u2014 "),UB=n(tk,"A",{href:!0});var Aet=s(UB);$co=r(Aet,"XGLMTokenizer"),Aet.forEach(t),kco=r(tk," or "),JB=n(tk,"A",{href:!0});var Let=s(JB);Sco=r(Let,"XGLMTokenizerFast"),Let.forEach(t),Rco=r(tk," (XGLM model)"),tk.forEach(t),Pco=i(S),ih=n(S,"LI",{});var o6e=s(ih);zne=n(o6e,"STRONG",{});var yet=s(zne);Bco=r(yet,"xlm"),yet.forEach(t),Ico=r(o6e," \u2014 "),YB=n(o6e,"A",{href:!0});var xet=s(YB);Nco=r(xet,"XLMTokenizer"),xet.forEach(t),qco=r(o6e," (XLM model)"),o6e.forEach(t),jco=i(S),dh=n(S,"LI",{});var r6e=s(dh);Wne=n(r6e,"STRONG",{});var $et=s(Wne);Dco=r($et,"xlm-prophetnet"),$et.forEach(t),Gco=r(r6e," \u2014 "),KB=n(r6e,"A",{href:!0});var ket=s(KB);Oco=r(ket,"XLMProphetNetTokenizer"),ket.forEach(t),Vco=r(r6e," (XLM-ProphetNet model)"),r6e.forEach(t),Xco=i(S),$s=n(S,"LI",{});var ak=s($s);Qne=n(ak,"STRONG",{});var Set=s(Qne);zco=r(Set,"xlm-roberta"),Set.forEach(t),Wco=r(ak," \u2014 "),ZB=n(ak,"A",{href:!0});var Ret=s(ZB);Qco=r(Ret,"XLMRobertaTokenizer"),Ret.forEach(t),Hco=r(ak," or "),eI=n(ak,"A",{href:!0});var Pet=s(eI);Uco=r(Pet,"XLMRobertaTokenizerFast"),Pet.forEach(t),Jco=r(ak," (XLM-RoBERTa model)"),ak.forEach(t),Yco=i(S),ks=n(S,"LI",{});var nk=s(ks);Hne=n(nk,"STRONG",{});var Bet=s(Hne);Kco=r(Bet,"xlm-roberta-xl"),Bet.forEach(t),Zco=r(nk," \u2014 "),oI=n(nk,"A",{href:!0});var Iet=s(oI);efo=r(Iet,"RobertaTokenizer"),Iet.forEach(t),ofo=r(nk," or "),rI=n(nk,"A",{href:!0});var Net=s(rI);rfo=r(Net,"RobertaTokenizerFast"),Net.forEach(t),tfo=r(nk," (XLM-RoBERTa-XL model)"),nk.forEach(t),afo=i(S),Ss=n(S,"LI",{});var sk=s(Ss);Une=n(sk,"STRONG",{});var qet=s(Une);nfo=r(qet,"xlnet"),qet.forEach(t),sfo=r(sk," \u2014 "),tI=n(sk,"A",{href:!0});var jet=s(tI);lfo=r(jet,"XLNetTokenizer"),jet.forEach(t),ifo=r(sk," or "),aI=n(sk,"A",{href:!0});var Det=s(aI);dfo=r(Det,"XLNetTokenizerFast"),Det.forEach(t),cfo=r(sk," (XLNet model)"),sk.forEach(t),ffo=i(S),Rs=n(S,"LI",{});var lk=s(Rs);Jne=n(lk,"STRONG",{});var Get=s(Jne);mfo=r(Get,"yoso"),Get.forEach(t),gfo=r(lk," \u2014 "),nI=n(lk,"A",{href:!0});var Oet=s(nI);hfo=r(Oet,"AlbertTokenizer"),Oet.forEach(t),pfo=r(lk," or "),sI=n(lk,"A",{href:!0});var Vet=s(sI);_fo=r(Vet,"AlbertTokenizerFast"),Vet.forEach(t),ufo=r(lk," (YOSO model)"),lk.forEach(t),S.forEach(t),bfo=i(js),T(ch.$$.fragment,js),js.forEach(t),vfo=i(qs),fh=n(qs,"DIV",{class:!0});var RGe=s(fh);T(sL.$$.fragment,RGe),Ffo=i(RGe),Yne=n(RGe,"P",{});var Xet=s(Yne);Tfo=r(Xet,"Register a new tokenizer in this mapping."),Xet.forEach(t),RGe.forEach(t),qs.forEach(t),Pje=i(f),Ci=n(f,"H2",{class:!0});var PGe=s(Ci);mh=n(PGe,"A",{id:!0,class:!0,href:!0});var zet=s(mh);Kne=n(zet,"SPAN",{});var Wet=s(Kne);T(lL.$$.fragment,Wet),Wet.forEach(t),zet.forEach(t),Mfo=i(PGe),Zne=n(PGe,"SPAN",{});var Qet=s(Zne);Efo=r(Qet,"AutoFeatureExtractor"),Qet.forEach(t),PGe.forEach(t),Bje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(iL.$$.fragment,Ds),Cfo=i(Ds),dL=n(Ds,"P",{});var BGe=s(dL);wfo=r(BGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lI=n(BGe,"A",{href:!0});var Het=s(lI);Afo=r(Het,"AutoFeatureExtractor.from_pretrained()"),Het.forEach(t),Lfo=r(BGe," class method."),BGe.forEach(t),yfo=i(Ds),cL=n(Ds,"P",{});var IGe=s(cL);xfo=r(IGe,"This class cannot be instantiated directly using "),ese=n(IGe,"CODE",{});var Uet=s(ese);$fo=r(Uet,"__init__()"),Uet.forEach(t),kfo=r(IGe," (throws an error)."),IGe.forEach(t),Sfo=i(Ds),He=n(Ds,"DIV",{class:!0});var ea=s(He);T(fL.$$.fragment,ea),Rfo=i(ea),ose=n(ea,"P",{});var Jet=s(ose);Pfo=r(Jet,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jet.forEach(t),Bfo=i(ea),ya=n(ea,"P",{});var Yw=s(ya);Ifo=r(Yw,"The feature extractor class to instantiate is selected based on the "),rse=n(Yw,"CODE",{});var Yet=s(rse);Nfo=r(Yet,"model_type"),Yet.forEach(t),qfo=r(Yw,` property of the config object
(either passed as an argument or loaded from `),tse=n(Yw,"CODE",{});var Ket=s(tse);jfo=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),Dfo=r(Yw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ase=n(Yw,"CODE",{});var Zet=s(ase);Gfo=r(Zet,"pretrained_model_name_or_path"),Zet.forEach(t),Ofo=r(Yw,":"),Yw.forEach(t),Vfo=i(ea),Y=n(ea,"UL",{});var K=s(Y);gh=n(K,"LI",{});var t6e=s(gh);nse=n(t6e,"STRONG",{});var eot=s(nse);Xfo=r(eot,"beit"),eot.forEach(t),zfo=r(t6e," \u2014 "),iI=n(t6e,"A",{href:!0});var oot=s(iI);Wfo=r(oot,"BeitFeatureExtractor"),oot.forEach(t),Qfo=r(t6e," (BEiT model)"),t6e.forEach(t),Hfo=i(K),hh=n(K,"LI",{});var a6e=s(hh);sse=n(a6e,"STRONG",{});var rot=s(sse);Ufo=r(rot,"clip"),rot.forEach(t),Jfo=r(a6e," \u2014 "),dI=n(a6e,"A",{href:!0});var tot=s(dI);Yfo=r(tot,"CLIPFeatureExtractor"),tot.forEach(t),Kfo=r(a6e," (CLIP model)"),a6e.forEach(t),Zfo=i(K),ph=n(K,"LI",{});var n6e=s(ph);lse=n(n6e,"STRONG",{});var aot=s(lse);emo=r(aot,"convnext"),aot.forEach(t),omo=r(n6e," \u2014 "),cI=n(n6e,"A",{href:!0});var not=s(cI);rmo=r(not,"ConvNextFeatureExtractor"),not.forEach(t),tmo=r(n6e," (ConvNeXT model)"),n6e.forEach(t),amo=i(K),_h=n(K,"LI",{});var s6e=s(_h);ise=n(s6e,"STRONG",{});var sot=s(ise);nmo=r(sot,"cvt"),sot.forEach(t),smo=r(s6e," \u2014 "),fI=n(s6e,"A",{href:!0});var lot=s(fI);lmo=r(lot,"ConvNextFeatureExtractor"),lot.forEach(t),imo=r(s6e," (CvT model)"),s6e.forEach(t),dmo=i(K),uh=n(K,"LI",{});var l6e=s(uh);dse=n(l6e,"STRONG",{});var iot=s(dse);cmo=r(iot,"data2vec-audio"),iot.forEach(t),fmo=r(l6e," \u2014 "),mI=n(l6e,"A",{href:!0});var dot=s(mI);mmo=r(dot,"Wav2Vec2FeatureExtractor"),dot.forEach(t),gmo=r(l6e," (Data2VecAudio model)"),l6e.forEach(t),hmo=i(K),bh=n(K,"LI",{});var i6e=s(bh);cse=n(i6e,"STRONG",{});var cot=s(cse);pmo=r(cot,"data2vec-vision"),cot.forEach(t),_mo=r(i6e," \u2014 "),gI=n(i6e,"A",{href:!0});var fot=s(gI);umo=r(fot,"BeitFeatureExtractor"),fot.forEach(t),bmo=r(i6e," (Data2VecVision model)"),i6e.forEach(t),vmo=i(K),vh=n(K,"LI",{});var d6e=s(vh);fse=n(d6e,"STRONG",{});var mot=s(fse);Fmo=r(mot,"deit"),mot.forEach(t),Tmo=r(d6e," \u2014 "),hI=n(d6e,"A",{href:!0});var got=s(hI);Mmo=r(got,"DeiTFeatureExtractor"),got.forEach(t),Emo=r(d6e," (DeiT model)"),d6e.forEach(t),Cmo=i(K),Fh=n(K,"LI",{});var c6e=s(Fh);mse=n(c6e,"STRONG",{});var hot=s(mse);wmo=r(hot,"detr"),hot.forEach(t),Amo=r(c6e," \u2014 "),pI=n(c6e,"A",{href:!0});var pot=s(pI);Lmo=r(pot,"DetrFeatureExtractor"),pot.forEach(t),ymo=r(c6e," (DETR model)"),c6e.forEach(t),xmo=i(K),Th=n(K,"LI",{});var f6e=s(Th);gse=n(f6e,"STRONG",{});var _ot=s(gse);$mo=r(_ot,"dpt"),_ot.forEach(t),kmo=r(f6e," \u2014 "),_I=n(f6e,"A",{href:!0});var uot=s(_I);Smo=r(uot,"DPTFeatureExtractor"),uot.forEach(t),Rmo=r(f6e," (DPT model)"),f6e.forEach(t),Pmo=i(K),Mh=n(K,"LI",{});var m6e=s(Mh);hse=n(m6e,"STRONG",{});var bot=s(hse);Bmo=r(bot,"flava"),bot.forEach(t),Imo=r(m6e," \u2014 "),uI=n(m6e,"A",{href:!0});var vot=s(uI);Nmo=r(vot,"FlavaFeatureExtractor"),vot.forEach(t),qmo=r(m6e," (FLAVA model)"),m6e.forEach(t),jmo=i(K),Eh=n(K,"LI",{});var g6e=s(Eh);pse=n(g6e,"STRONG",{});var Fot=s(pse);Dmo=r(Fot,"glpn"),Fot.forEach(t),Gmo=r(g6e," \u2014 "),bI=n(g6e,"A",{href:!0});var Tot=s(bI);Omo=r(Tot,"GLPNFeatureExtractor"),Tot.forEach(t),Vmo=r(g6e," (GLPN model)"),g6e.forEach(t),Xmo=i(K),Ch=n(K,"LI",{});var h6e=s(Ch);_se=n(h6e,"STRONG",{});var Mot=s(_se);zmo=r(Mot,"hubert"),Mot.forEach(t),Wmo=r(h6e," \u2014 "),vI=n(h6e,"A",{href:!0});var Eot=s(vI);Qmo=r(Eot,"Wav2Vec2FeatureExtractor"),Eot.forEach(t),Hmo=r(h6e," (Hubert model)"),h6e.forEach(t),Umo=i(K),wh=n(K,"LI",{});var p6e=s(wh);use=n(p6e,"STRONG",{});var Cot=s(use);Jmo=r(Cot,"imagegpt"),Cot.forEach(t),Ymo=r(p6e," \u2014 "),FI=n(p6e,"A",{href:!0});var wot=s(FI);Kmo=r(wot,"ImageGPTFeatureExtractor"),wot.forEach(t),Zmo=r(p6e," (ImageGPT model)"),p6e.forEach(t),ego=i(K),Ah=n(K,"LI",{});var _6e=s(Ah);bse=n(_6e,"STRONG",{});var Aot=s(bse);ogo=r(Aot,"layoutlmv2"),Aot.forEach(t),rgo=r(_6e," \u2014 "),TI=n(_6e,"A",{href:!0});var Lot=s(TI);tgo=r(Lot,"LayoutLMv2FeatureExtractor"),Lot.forEach(t),ago=r(_6e," (LayoutLMv2 model)"),_6e.forEach(t),ngo=i(K),Lh=n(K,"LI",{});var u6e=s(Lh);vse=n(u6e,"STRONG",{});var yot=s(vse);sgo=r(yot,"layoutlmv3"),yot.forEach(t),lgo=r(u6e," \u2014 "),MI=n(u6e,"A",{href:!0});var xot=s(MI);igo=r(xot,"LayoutLMv3FeatureExtractor"),xot.forEach(t),dgo=r(u6e," (LayoutLMv3 model)"),u6e.forEach(t),cgo=i(K),yh=n(K,"LI",{});var b6e=s(yh);Fse=n(b6e,"STRONG",{});var $ot=s(Fse);fgo=r($ot,"levit"),$ot.forEach(t),mgo=r(b6e," \u2014 "),EI=n(b6e,"A",{href:!0});var kot=s(EI);ggo=r(kot,"LevitFeatureExtractor"),kot.forEach(t),hgo=r(b6e," (LeViT model)"),b6e.forEach(t),pgo=i(K),xh=n(K,"LI",{});var v6e=s(xh);Tse=n(v6e,"STRONG",{});var Sot=s(Tse);_go=r(Sot,"maskformer"),Sot.forEach(t),ugo=r(v6e," \u2014 "),CI=n(v6e,"A",{href:!0});var Rot=s(CI);bgo=r(Rot,"MaskFormerFeatureExtractor"),Rot.forEach(t),vgo=r(v6e," (MaskFormer model)"),v6e.forEach(t),Fgo=i(K),$h=n(K,"LI",{});var F6e=s($h);Mse=n(F6e,"STRONG",{});var Pot=s(Mse);Tgo=r(Pot,"mctct"),Pot.forEach(t),Mgo=r(F6e," \u2014 "),wI=n(F6e,"A",{href:!0});var Bot=s(wI);Ego=r(Bot,"MCTCTFeatureExtractor"),Bot.forEach(t),Cgo=r(F6e," (M-CTC-T model)"),F6e.forEach(t),wgo=i(K),kh=n(K,"LI",{});var T6e=s(kh);Ese=n(T6e,"STRONG",{});var Iot=s(Ese);Ago=r(Iot,"perceiver"),Iot.forEach(t),Lgo=r(T6e," \u2014 "),AI=n(T6e,"A",{href:!0});var Not=s(AI);ygo=r(Not,"PerceiverFeatureExtractor"),Not.forEach(t),xgo=r(T6e," (Perceiver model)"),T6e.forEach(t),$go=i(K),Sh=n(K,"LI",{});var M6e=s(Sh);Cse=n(M6e,"STRONG",{});var qot=s(Cse);kgo=r(qot,"poolformer"),qot.forEach(t),Sgo=r(M6e," \u2014 "),LI=n(M6e,"A",{href:!0});var jot=s(LI);Rgo=r(jot,"PoolFormerFeatureExtractor"),jot.forEach(t),Pgo=r(M6e," (PoolFormer model)"),M6e.forEach(t),Bgo=i(K),Rh=n(K,"LI",{});var E6e=s(Rh);wse=n(E6e,"STRONG",{});var Dot=s(wse);Igo=r(Dot,"regnet"),Dot.forEach(t),Ngo=r(E6e," \u2014 "),yI=n(E6e,"A",{href:!0});var Got=s(yI);qgo=r(Got,"ConvNextFeatureExtractor"),Got.forEach(t),jgo=r(E6e," (RegNet model)"),E6e.forEach(t),Dgo=i(K),Ph=n(K,"LI",{});var C6e=s(Ph);Ase=n(C6e,"STRONG",{});var Oot=s(Ase);Ggo=r(Oot,"resnet"),Oot.forEach(t),Ogo=r(C6e," \u2014 "),xI=n(C6e,"A",{href:!0});var Vot=s(xI);Vgo=r(Vot,"ConvNextFeatureExtractor"),Vot.forEach(t),Xgo=r(C6e," (ResNet model)"),C6e.forEach(t),zgo=i(K),Bh=n(K,"LI",{});var w6e=s(Bh);Lse=n(w6e,"STRONG",{});var Xot=s(Lse);Wgo=r(Xot,"segformer"),Xot.forEach(t),Qgo=r(w6e," \u2014 "),$I=n(w6e,"A",{href:!0});var zot=s($I);Hgo=r(zot,"SegformerFeatureExtractor"),zot.forEach(t),Ugo=r(w6e," (SegFormer model)"),w6e.forEach(t),Jgo=i(K),Ih=n(K,"LI",{});var A6e=s(Ih);yse=n(A6e,"STRONG",{});var Wot=s(yse);Ygo=r(Wot,"speech_to_text"),Wot.forEach(t),Kgo=r(A6e," \u2014 "),kI=n(A6e,"A",{href:!0});var Qot=s(kI);Zgo=r(Qot,"Speech2TextFeatureExtractor"),Qot.forEach(t),eho=r(A6e," (Speech2Text model)"),A6e.forEach(t),oho=i(K),Nh=n(K,"LI",{});var L6e=s(Nh);xse=n(L6e,"STRONG",{});var Hot=s(xse);rho=r(Hot,"swin"),Hot.forEach(t),tho=r(L6e," \u2014 "),SI=n(L6e,"A",{href:!0});var Uot=s(SI);aho=r(Uot,"ViTFeatureExtractor"),Uot.forEach(t),nho=r(L6e," (Swin Transformer model)"),L6e.forEach(t),sho=i(K),qh=n(K,"LI",{});var y6e=s(qh);$se=n(y6e,"STRONG",{});var Jot=s($se);lho=r(Jot,"van"),Jot.forEach(t),iho=r(y6e," \u2014 "),RI=n(y6e,"A",{href:!0});var Yot=s(RI);dho=r(Yot,"ConvNextFeatureExtractor"),Yot.forEach(t),cho=r(y6e," (VAN model)"),y6e.forEach(t),fho=i(K),jh=n(K,"LI",{});var x6e=s(jh);kse=n(x6e,"STRONG",{});var Kot=s(kse);mho=r(Kot,"vit"),Kot.forEach(t),gho=r(x6e," \u2014 "),PI=n(x6e,"A",{href:!0});var Zot=s(PI);hho=r(Zot,"ViTFeatureExtractor"),Zot.forEach(t),pho=r(x6e," (ViT model)"),x6e.forEach(t),_ho=i(K),Dh=n(K,"LI",{});var $6e=s(Dh);Sse=n($6e,"STRONG",{});var ert=s(Sse);uho=r(ert,"vit_mae"),ert.forEach(t),bho=r($6e," \u2014 "),BI=n($6e,"A",{href:!0});var ort=s(BI);vho=r(ort,"ViTFeatureExtractor"),ort.forEach(t),Fho=r($6e," (ViTMAE model)"),$6e.forEach(t),Tho=i(K),Gh=n(K,"LI",{});var k6e=s(Gh);Rse=n(k6e,"STRONG",{});var rrt=s(Rse);Mho=r(rrt,"wav2vec2"),rrt.forEach(t),Eho=r(k6e," \u2014 "),II=n(k6e,"A",{href:!0});var trt=s(II);Cho=r(trt,"Wav2Vec2FeatureExtractor"),trt.forEach(t),who=r(k6e," (Wav2Vec2 model)"),k6e.forEach(t),Aho=i(K),Oh=n(K,"LI",{});var S6e=s(Oh);Pse=n(S6e,"STRONG",{});var art=s(Pse);Lho=r(art,"wav2vec2-conformer"),art.forEach(t),yho=r(S6e," \u2014 "),NI=n(S6e,"A",{href:!0});var nrt=s(NI);xho=r(nrt,"Wav2Vec2FeatureExtractor"),nrt.forEach(t),$ho=r(S6e," (Wav2Vec2-Conformer model)"),S6e.forEach(t),kho=i(K),Vh=n(K,"LI",{});var R6e=s(Vh);Bse=n(R6e,"STRONG",{});var srt=s(Bse);Sho=r(srt,"yolos"),srt.forEach(t),Rho=r(R6e," \u2014 "),qI=n(R6e,"A",{href:!0});var lrt=s(qI);Pho=r(lrt,"YolosFeatureExtractor"),lrt.forEach(t),Bho=r(R6e," (YOLOS model)"),R6e.forEach(t),K.forEach(t),Iho=i(ea),T(Xh.$$.fragment,ea),Nho=i(ea),T(zh.$$.fragment,ea),ea.forEach(t),qho=i(Ds),Wh=n(Ds,"DIV",{class:!0});var NGe=s(Wh);T(mL.$$.fragment,NGe),jho=i(NGe),Ise=n(NGe,"P",{});var irt=s(Ise);Dho=r(irt,"Register a new feature extractor for this class."),irt.forEach(t),NGe.forEach(t),Ds.forEach(t),Ije=i(f),wi=n(f,"H2",{class:!0});var qGe=s(wi);Qh=n(qGe,"A",{id:!0,class:!0,href:!0});var drt=s(Qh);Nse=n(drt,"SPAN",{});var crt=s(Nse);T(gL.$$.fragment,crt),crt.forEach(t),drt.forEach(t),Gho=i(qGe),qse=n(qGe,"SPAN",{});var frt=s(qse);Oho=r(frt,"AutoProcessor"),frt.forEach(t),qGe.forEach(t),Nje=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(hL.$$.fragment,Gs),Vho=i(Gs),pL=n(Gs,"P",{});var jGe=s(pL);Xho=r(jGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jI=n(jGe,"A",{href:!0});var mrt=s(jI);zho=r(mrt,"AutoProcessor.from_pretrained()"),mrt.forEach(t),Who=r(jGe," class method."),jGe.forEach(t),Qho=i(Gs),_L=n(Gs,"P",{});var DGe=s(_L);Hho=r(DGe,"This class cannot be instantiated directly using "),jse=n(DGe,"CODE",{});var grt=s(jse);Uho=r(grt,"__init__()"),grt.forEach(t),Jho=r(DGe," (throws an error)."),DGe.forEach(t),Yho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var oa=s(Ue);T(uL.$$.fragment,oa),Kho=i(oa),Dse=n(oa,"P",{});var hrt=s(Dse);Zho=r(hrt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hrt.forEach(t),epo=i(oa),Ai=n(oa,"P",{});var ree=s(Ai);opo=r(ree,"The processor class to instantiate is selected based on the "),Gse=n(ree,"CODE",{});var prt=s(Gse);rpo=r(prt,"model_type"),prt.forEach(t),tpo=r(ree,` property of the config object (either
passed as an argument or loaded from `),Ose=n(ree,"CODE",{});var _rt=s(Ose);apo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),npo=r(ree," if possible):"),ree.forEach(t),spo=i(oa),he=n(oa,"UL",{});var ue=s(he);Hh=n(ue,"LI",{});var P6e=s(Hh);Vse=n(P6e,"STRONG",{});var urt=s(Vse);lpo=r(urt,"clip"),urt.forEach(t),ipo=r(P6e," \u2014 "),DI=n(P6e,"A",{href:!0});var brt=s(DI);dpo=r(brt,"CLIPProcessor"),brt.forEach(t),cpo=r(P6e," (CLIP model)"),P6e.forEach(t),fpo=i(ue),Uh=n(ue,"LI",{});var B6e=s(Uh);Xse=n(B6e,"STRONG",{});var vrt=s(Xse);mpo=r(vrt,"flava"),vrt.forEach(t),gpo=r(B6e," \u2014 "),zse=n(B6e,"CODE",{});var Frt=s(zse);hpo=r(Frt,"FLAVAProcessor"),Frt.forEach(t),ppo=r(B6e," (FLAVA model)"),B6e.forEach(t),_po=i(ue),Jh=n(ue,"LI",{});var I6e=s(Jh);Wse=n(I6e,"STRONG",{});var Trt=s(Wse);upo=r(Trt,"layoutlmv2"),Trt.forEach(t),bpo=r(I6e," \u2014 "),GI=n(I6e,"A",{href:!0});var Mrt=s(GI);vpo=r(Mrt,"LayoutLMv2Processor"),Mrt.forEach(t),Fpo=r(I6e," (LayoutLMv2 model)"),I6e.forEach(t),Tpo=i(ue),Yh=n(ue,"LI",{});var N6e=s(Yh);Qse=n(N6e,"STRONG",{});var Ert=s(Qse);Mpo=r(Ert,"layoutlmv3"),Ert.forEach(t),Epo=r(N6e," \u2014 "),OI=n(N6e,"A",{href:!0});var Crt=s(OI);Cpo=r(Crt,"LayoutLMv3Processor"),Crt.forEach(t),wpo=r(N6e," (LayoutLMv3 model)"),N6e.forEach(t),Apo=i(ue),Kh=n(ue,"LI",{});var q6e=s(Kh);Hse=n(q6e,"STRONG",{});var wrt=s(Hse);Lpo=r(wrt,"layoutxlm"),wrt.forEach(t),ypo=r(q6e," \u2014 "),VI=n(q6e,"A",{href:!0});var Art=s(VI);xpo=r(Art,"LayoutXLMProcessor"),Art.forEach(t),$po=r(q6e," (LayoutXLM model)"),q6e.forEach(t),kpo=i(ue),Zh=n(ue,"LI",{});var j6e=s(Zh);Use=n(j6e,"STRONG",{});var Lrt=s(Use);Spo=r(Lrt,"sew"),Lrt.forEach(t),Rpo=r(j6e," \u2014 "),XI=n(j6e,"A",{href:!0});var yrt=s(XI);Ppo=r(yrt,"Wav2Vec2Processor"),yrt.forEach(t),Bpo=r(j6e," (SEW model)"),j6e.forEach(t),Ipo=i(ue),ep=n(ue,"LI",{});var D6e=s(ep);Jse=n(D6e,"STRONG",{});var xrt=s(Jse);Npo=r(xrt,"sew-d"),xrt.forEach(t),qpo=r(D6e," \u2014 "),zI=n(D6e,"A",{href:!0});var $rt=s(zI);jpo=r($rt,"Wav2Vec2Processor"),$rt.forEach(t),Dpo=r(D6e," (SEW-D model)"),D6e.forEach(t),Gpo=i(ue),op=n(ue,"LI",{});var G6e=s(op);Yse=n(G6e,"STRONG",{});var krt=s(Yse);Opo=r(krt,"speech_to_text"),krt.forEach(t),Vpo=r(G6e," \u2014 "),WI=n(G6e,"A",{href:!0});var Srt=s(WI);Xpo=r(Srt,"Speech2TextProcessor"),Srt.forEach(t),zpo=r(G6e," (Speech2Text model)"),G6e.forEach(t),Wpo=i(ue),rp=n(ue,"LI",{});var O6e=s(rp);Kse=n(O6e,"STRONG",{});var Rrt=s(Kse);Qpo=r(Rrt,"speech_to_text_2"),Rrt.forEach(t),Hpo=r(O6e," \u2014 "),QI=n(O6e,"A",{href:!0});var Prt=s(QI);Upo=r(Prt,"Speech2Text2Processor"),Prt.forEach(t),Jpo=r(O6e," (Speech2Text2 model)"),O6e.forEach(t),Ypo=i(ue),tp=n(ue,"LI",{});var V6e=s(tp);Zse=n(V6e,"STRONG",{});var Brt=s(Zse);Kpo=r(Brt,"trocr"),Brt.forEach(t),Zpo=r(V6e," \u2014 "),HI=n(V6e,"A",{href:!0});var Irt=s(HI);e_o=r(Irt,"TrOCRProcessor"),Irt.forEach(t),o_o=r(V6e," (TrOCR model)"),V6e.forEach(t),r_o=i(ue),ap=n(ue,"LI",{});var X6e=s(ap);ele=n(X6e,"STRONG",{});var Nrt=s(ele);t_o=r(Nrt,"unispeech"),Nrt.forEach(t),a_o=r(X6e," \u2014 "),UI=n(X6e,"A",{href:!0});var qrt=s(UI);n_o=r(qrt,"Wav2Vec2Processor"),qrt.forEach(t),s_o=r(X6e," (UniSpeech model)"),X6e.forEach(t),l_o=i(ue),np=n(ue,"LI",{});var z6e=s(np);ole=n(z6e,"STRONG",{});var jrt=s(ole);i_o=r(jrt,"unispeech-sat"),jrt.forEach(t),d_o=r(z6e," \u2014 "),JI=n(z6e,"A",{href:!0});var Drt=s(JI);c_o=r(Drt,"Wav2Vec2Processor"),Drt.forEach(t),f_o=r(z6e," (UniSpeechSat model)"),z6e.forEach(t),m_o=i(ue),sp=n(ue,"LI",{});var W6e=s(sp);rle=n(W6e,"STRONG",{});var Grt=s(rle);g_o=r(Grt,"vilt"),Grt.forEach(t),h_o=r(W6e," \u2014 "),YI=n(W6e,"A",{href:!0});var Ort=s(YI);p_o=r(Ort,"ViltProcessor"),Ort.forEach(t),__o=r(W6e," (ViLT model)"),W6e.forEach(t),u_o=i(ue),lp=n(ue,"LI",{});var Q6e=s(lp);tle=n(Q6e,"STRONG",{});var Vrt=s(tle);b_o=r(Vrt,"vision-text-dual-encoder"),Vrt.forEach(t),v_o=r(Q6e," \u2014 "),KI=n(Q6e,"A",{href:!0});var Xrt=s(KI);F_o=r(Xrt,"VisionTextDualEncoderProcessor"),Xrt.forEach(t),T_o=r(Q6e," (VisionTextDualEncoder model)"),Q6e.forEach(t),M_o=i(ue),ip=n(ue,"LI",{});var H6e=s(ip);ale=n(H6e,"STRONG",{});var zrt=s(ale);E_o=r(zrt,"wav2vec2"),zrt.forEach(t),C_o=r(H6e," \u2014 "),ZI=n(H6e,"A",{href:!0});var Wrt=s(ZI);w_o=r(Wrt,"Wav2Vec2Processor"),Wrt.forEach(t),A_o=r(H6e," (Wav2Vec2 model)"),H6e.forEach(t),L_o=i(ue),dp=n(ue,"LI",{});var U6e=s(dp);nle=n(U6e,"STRONG",{});var Qrt=s(nle);y_o=r(Qrt,"wav2vec2-conformer"),Qrt.forEach(t),x_o=r(U6e," \u2014 "),eN=n(U6e,"A",{href:!0});var Hrt=s(eN);$_o=r(Hrt,"Wav2Vec2Processor"),Hrt.forEach(t),k_o=r(U6e," (Wav2Vec2-Conformer model)"),U6e.forEach(t),S_o=i(ue),cp=n(ue,"LI",{});var J6e=s(cp);sle=n(J6e,"STRONG",{});var Urt=s(sle);R_o=r(Urt,"wavlm"),Urt.forEach(t),P_o=r(J6e," \u2014 "),oN=n(J6e,"A",{href:!0});var Jrt=s(oN);B_o=r(Jrt,"Wav2Vec2Processor"),Jrt.forEach(t),I_o=r(J6e," (WavLM model)"),J6e.forEach(t),ue.forEach(t),N_o=i(oa),T(fp.$$.fragment,oa),q_o=i(oa),T(mp.$$.fragment,oa),oa.forEach(t),j_o=i(Gs),gp=n(Gs,"DIV",{class:!0});var GGe=s(gp);T(bL.$$.fragment,GGe),D_o=i(GGe),lle=n(GGe,"P",{});var Yrt=s(lle);G_o=r(Yrt,"Register a new processor for this class."),Yrt.forEach(t),GGe.forEach(t),Gs.forEach(t),qje=i(f),Li=n(f,"H2",{class:!0});var OGe=s(Li);hp=n(OGe,"A",{id:!0,class:!0,href:!0});var Krt=s(hp);ile=n(Krt,"SPAN",{});var Zrt=s(ile);T(vL.$$.fragment,Zrt),Zrt.forEach(t),Krt.forEach(t),O_o=i(OGe),dle=n(OGe,"SPAN",{});var ett=s(dle);V_o=r(ett,"AutoModel"),ett.forEach(t),OGe.forEach(t),jje=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(FL.$$.fragment,Os),X_o=i(Os),yi=n(Os,"P",{});var tee=s(yi);z_o=r(tee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rN=n(tee,"A",{href:!0});var ott=s(rN);W_o=r(ott,"from_pretrained()"),ott.forEach(t),Q_o=r(tee," class method or the "),tN=n(tee,"A",{href:!0});var rtt=s(tN);H_o=r(rtt,"from_config()"),rtt.forEach(t),U_o=r(tee,` class
method.`),tee.forEach(t),J_o=i(Os),TL=n(Os,"P",{});var VGe=s(TL);Y_o=r(VGe,"This class cannot be instantiated directly using "),cle=n(VGe,"CODE",{});var ttt=s(cle);K_o=r(ttt,"__init__()"),ttt.forEach(t),Z_o=r(VGe," (throws an error)."),VGe.forEach(t),euo=i(Os),at=n(Os,"DIV",{class:!0});var Kw=s(at);T(ML.$$.fragment,Kw),ouo=i(Kw),fle=n(Kw,"P",{});var att=s(fle);ruo=r(att,"Instantiates one of the base model classes of the library from a configuration."),att.forEach(t),tuo=i(Kw),xi=n(Kw,"P",{});var aee=s(xi);auo=r(aee,`Note:
Loading a model from its configuration file does `),mle=n(aee,"STRONG",{});var ntt=s(mle);nuo=r(ntt,"not"),ntt.forEach(t),suo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aN=n(aee,"A",{href:!0});var stt=s(aN);luo=r(stt,"from_pretrained()"),stt.forEach(t),iuo=r(aee," to load the model weights."),aee.forEach(t),duo=i(Kw),T(pp.$$.fragment,Kw),Kw.forEach(t),cuo=i(Os),Je=n(Os,"DIV",{class:!0});var ra=s(Je);T(EL.$$.fragment,ra),fuo=i(ra),gle=n(ra,"P",{});var ltt=s(gle);muo=r(ltt,"Instantiate one of the base model classes of the library from a pretrained model."),ltt.forEach(t),guo=i(ra),xa=n(ra,"P",{});var Zw=s(xa);huo=r(Zw,"The model class to instantiate is selected based on the "),hle=n(Zw,"CODE",{});var itt=s(hle);puo=r(itt,"model_type"),itt.forEach(t),_uo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),ple=n(Zw,"CODE",{});var dtt=s(ple);uuo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),buo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(Zw,"CODE",{});var ctt=s(_le);vuo=r(ctt,"pretrained_model_name_or_path"),ctt.forEach(t),Fuo=r(Zw,":"),Zw.forEach(t),Tuo=i(ra),y=n(ra,"UL",{});var $=s(y);_p=n($,"LI",{});var Y6e=s(_p);ule=n(Y6e,"STRONG",{});var ftt=s(ule);Muo=r(ftt,"albert"),ftt.forEach(t),Euo=r(Y6e," \u2014 "),nN=n(Y6e,"A",{href:!0});var mtt=s(nN);Cuo=r(mtt,"AlbertModel"),mtt.forEach(t),wuo=r(Y6e," (ALBERT model)"),Y6e.forEach(t),Auo=i($),up=n($,"LI",{});var K6e=s(up);ble=n(K6e,"STRONG",{});var gtt=s(ble);Luo=r(gtt,"bart"),gtt.forEach(t),yuo=r(K6e," \u2014 "),sN=n(K6e,"A",{href:!0});var htt=s(sN);xuo=r(htt,"BartModel"),htt.forEach(t),$uo=r(K6e," (BART model)"),K6e.forEach(t),kuo=i($),bp=n($,"LI",{});var Z6e=s(bp);vle=n(Z6e,"STRONG",{});var ptt=s(vle);Suo=r(ptt,"beit"),ptt.forEach(t),Ruo=r(Z6e," \u2014 "),lN=n(Z6e,"A",{href:!0});var _tt=s(lN);Puo=r(_tt,"BeitModel"),_tt.forEach(t),Buo=r(Z6e," (BEiT model)"),Z6e.forEach(t),Iuo=i($),vp=n($,"LI",{});var eLe=s(vp);Fle=n(eLe,"STRONG",{});var utt=s(Fle);Nuo=r(utt,"bert"),utt.forEach(t),quo=r(eLe," \u2014 "),iN=n(eLe,"A",{href:!0});var btt=s(iN);juo=r(btt,"BertModel"),btt.forEach(t),Duo=r(eLe," (BERT model)"),eLe.forEach(t),Guo=i($),Fp=n($,"LI",{});var oLe=s(Fp);Tle=n(oLe,"STRONG",{});var vtt=s(Tle);Ouo=r(vtt,"bert-generation"),vtt.forEach(t),Vuo=r(oLe," \u2014 "),dN=n(oLe,"A",{href:!0});var Ftt=s(dN);Xuo=r(Ftt,"BertGenerationEncoder"),Ftt.forEach(t),zuo=r(oLe," (Bert Generation model)"),oLe.forEach(t),Wuo=i($),Tp=n($,"LI",{});var rLe=s(Tp);Mle=n(rLe,"STRONG",{});var Ttt=s(Mle);Quo=r(Ttt,"big_bird"),Ttt.forEach(t),Huo=r(rLe," \u2014 "),cN=n(rLe,"A",{href:!0});var Mtt=s(cN);Uuo=r(Mtt,"BigBirdModel"),Mtt.forEach(t),Juo=r(rLe," (BigBird model)"),rLe.forEach(t),Yuo=i($),Mp=n($,"LI",{});var tLe=s(Mp);Ele=n(tLe,"STRONG",{});var Ett=s(Ele);Kuo=r(Ett,"bigbird_pegasus"),Ett.forEach(t),Zuo=r(tLe," \u2014 "),fN=n(tLe,"A",{href:!0});var Ctt=s(fN);e5o=r(Ctt,"BigBirdPegasusModel"),Ctt.forEach(t),o5o=r(tLe," (BigBird-Pegasus model)"),tLe.forEach(t),r5o=i($),Ep=n($,"LI",{});var aLe=s(Ep);Cle=n(aLe,"STRONG",{});var wtt=s(Cle);t5o=r(wtt,"blenderbot"),wtt.forEach(t),a5o=r(aLe," \u2014 "),mN=n(aLe,"A",{href:!0});var Att=s(mN);n5o=r(Att,"BlenderbotModel"),Att.forEach(t),s5o=r(aLe," (Blenderbot model)"),aLe.forEach(t),l5o=i($),Cp=n($,"LI",{});var nLe=s(Cp);wle=n(nLe,"STRONG",{});var Ltt=s(wle);i5o=r(Ltt,"blenderbot-small"),Ltt.forEach(t),d5o=r(nLe," \u2014 "),gN=n(nLe,"A",{href:!0});var ytt=s(gN);c5o=r(ytt,"BlenderbotSmallModel"),ytt.forEach(t),f5o=r(nLe," (BlenderbotSmall model)"),nLe.forEach(t),m5o=i($),wp=n($,"LI",{});var sLe=s(wp);Ale=n(sLe,"STRONG",{});var xtt=s(Ale);g5o=r(xtt,"bloom"),xtt.forEach(t),h5o=r(sLe," \u2014 "),hN=n(sLe,"A",{href:!0});var $tt=s(hN);p5o=r($tt,"BloomModel"),$tt.forEach(t),_5o=r(sLe," (BLOOM model)"),sLe.forEach(t),u5o=i($),Ap=n($,"LI",{});var lLe=s(Ap);Lle=n(lLe,"STRONG",{});var ktt=s(Lle);b5o=r(ktt,"camembert"),ktt.forEach(t),v5o=r(lLe," \u2014 "),pN=n(lLe,"A",{href:!0});var Stt=s(pN);F5o=r(Stt,"CamembertModel"),Stt.forEach(t),T5o=r(lLe," (CamemBERT model)"),lLe.forEach(t),M5o=i($),Lp=n($,"LI",{});var iLe=s(Lp);yle=n(iLe,"STRONG",{});var Rtt=s(yle);E5o=r(Rtt,"canine"),Rtt.forEach(t),C5o=r(iLe," \u2014 "),_N=n(iLe,"A",{href:!0});var Ptt=s(_N);w5o=r(Ptt,"CanineModel"),Ptt.forEach(t),A5o=r(iLe," (CANINE model)"),iLe.forEach(t),L5o=i($),yp=n($,"LI",{});var dLe=s(yp);xle=n(dLe,"STRONG",{});var Btt=s(xle);y5o=r(Btt,"clip"),Btt.forEach(t),x5o=r(dLe," \u2014 "),uN=n(dLe,"A",{href:!0});var Itt=s(uN);$5o=r(Itt,"CLIPModel"),Itt.forEach(t),k5o=r(dLe," (CLIP model)"),dLe.forEach(t),S5o=i($),xp=n($,"LI",{});var cLe=s(xp);$le=n(cLe,"STRONG",{});var Ntt=s($le);R5o=r(Ntt,"convbert"),Ntt.forEach(t),P5o=r(cLe," \u2014 "),bN=n(cLe,"A",{href:!0});var qtt=s(bN);B5o=r(qtt,"ConvBertModel"),qtt.forEach(t),I5o=r(cLe," (ConvBERT model)"),cLe.forEach(t),N5o=i($),$p=n($,"LI",{});var fLe=s($p);kle=n(fLe,"STRONG",{});var jtt=s(kle);q5o=r(jtt,"convnext"),jtt.forEach(t),j5o=r(fLe," \u2014 "),vN=n(fLe,"A",{href:!0});var Dtt=s(vN);D5o=r(Dtt,"ConvNextModel"),Dtt.forEach(t),G5o=r(fLe," (ConvNeXT model)"),fLe.forEach(t),O5o=i($),kp=n($,"LI",{});var mLe=s(kp);Sle=n(mLe,"STRONG",{});var Gtt=s(Sle);V5o=r(Gtt,"ctrl"),Gtt.forEach(t),X5o=r(mLe," \u2014 "),FN=n(mLe,"A",{href:!0});var Ott=s(FN);z5o=r(Ott,"CTRLModel"),Ott.forEach(t),W5o=r(mLe," (CTRL model)"),mLe.forEach(t),Q5o=i($),Sp=n($,"LI",{});var gLe=s(Sp);Rle=n(gLe,"STRONG",{});var Vtt=s(Rle);H5o=r(Vtt,"cvt"),Vtt.forEach(t),U5o=r(gLe," \u2014 "),TN=n(gLe,"A",{href:!0});var Xtt=s(TN);J5o=r(Xtt,"CvtModel"),Xtt.forEach(t),Y5o=r(gLe," (CvT model)"),gLe.forEach(t),K5o=i($),Rp=n($,"LI",{});var hLe=s(Rp);Ple=n(hLe,"STRONG",{});var ztt=s(Ple);Z5o=r(ztt,"data2vec-audio"),ztt.forEach(t),e1o=r(hLe," \u2014 "),MN=n(hLe,"A",{href:!0});var Wtt=s(MN);o1o=r(Wtt,"Data2VecAudioModel"),Wtt.forEach(t),r1o=r(hLe," (Data2VecAudio model)"),hLe.forEach(t),t1o=i($),Pp=n($,"LI",{});var pLe=s(Pp);Ble=n(pLe,"STRONG",{});var Qtt=s(Ble);a1o=r(Qtt,"data2vec-text"),Qtt.forEach(t),n1o=r(pLe," \u2014 "),EN=n(pLe,"A",{href:!0});var Htt=s(EN);s1o=r(Htt,"Data2VecTextModel"),Htt.forEach(t),l1o=r(pLe," (Data2VecText model)"),pLe.forEach(t),i1o=i($),Bp=n($,"LI",{});var _Le=s(Bp);Ile=n(_Le,"STRONG",{});var Utt=s(Ile);d1o=r(Utt,"data2vec-vision"),Utt.forEach(t),c1o=r(_Le," \u2014 "),CN=n(_Le,"A",{href:!0});var Jtt=s(CN);f1o=r(Jtt,"Data2VecVisionModel"),Jtt.forEach(t),m1o=r(_Le," (Data2VecVision model)"),_Le.forEach(t),g1o=i($),Ip=n($,"LI",{});var uLe=s(Ip);Nle=n(uLe,"STRONG",{});var Ytt=s(Nle);h1o=r(Ytt,"deberta"),Ytt.forEach(t),p1o=r(uLe," \u2014 "),wN=n(uLe,"A",{href:!0});var Ktt=s(wN);_1o=r(Ktt,"DebertaModel"),Ktt.forEach(t),u1o=r(uLe," (DeBERTa model)"),uLe.forEach(t),b1o=i($),Np=n($,"LI",{});var bLe=s(Np);qle=n(bLe,"STRONG",{});var Ztt=s(qle);v1o=r(Ztt,"deberta-v2"),Ztt.forEach(t),F1o=r(bLe," \u2014 "),AN=n(bLe,"A",{href:!0});var eat=s(AN);T1o=r(eat,"DebertaV2Model"),eat.forEach(t),M1o=r(bLe," (DeBERTa-v2 model)"),bLe.forEach(t),E1o=i($),qp=n($,"LI",{});var vLe=s(qp);jle=n(vLe,"STRONG",{});var oat=s(jle);C1o=r(oat,"decision_transformer"),oat.forEach(t),w1o=r(vLe," \u2014 "),LN=n(vLe,"A",{href:!0});var rat=s(LN);A1o=r(rat,"DecisionTransformerModel"),rat.forEach(t),L1o=r(vLe," (Decision Transformer model)"),vLe.forEach(t),y1o=i($),jp=n($,"LI",{});var FLe=s(jp);Dle=n(FLe,"STRONG",{});var tat=s(Dle);x1o=r(tat,"deit"),tat.forEach(t),$1o=r(FLe," \u2014 "),yN=n(FLe,"A",{href:!0});var aat=s(yN);k1o=r(aat,"DeiTModel"),aat.forEach(t),S1o=r(FLe," (DeiT model)"),FLe.forEach(t),R1o=i($),Dp=n($,"LI",{});var TLe=s(Dp);Gle=n(TLe,"STRONG",{});var nat=s(Gle);P1o=r(nat,"detr"),nat.forEach(t),B1o=r(TLe," \u2014 "),xN=n(TLe,"A",{href:!0});var sat=s(xN);I1o=r(sat,"DetrModel"),sat.forEach(t),N1o=r(TLe," (DETR model)"),TLe.forEach(t),q1o=i($),Gp=n($,"LI",{});var MLe=s(Gp);Ole=n(MLe,"STRONG",{});var lat=s(Ole);j1o=r(lat,"distilbert"),lat.forEach(t),D1o=r(MLe," \u2014 "),$N=n(MLe,"A",{href:!0});var iat=s($N);G1o=r(iat,"DistilBertModel"),iat.forEach(t),O1o=r(MLe," (DistilBERT model)"),MLe.forEach(t),V1o=i($),Op=n($,"LI",{});var ELe=s(Op);Vle=n(ELe,"STRONG",{});var dat=s(Vle);X1o=r(dat,"dpr"),dat.forEach(t),z1o=r(ELe," \u2014 "),kN=n(ELe,"A",{href:!0});var cat=s(kN);W1o=r(cat,"DPRQuestionEncoder"),cat.forEach(t),Q1o=r(ELe," (DPR model)"),ELe.forEach(t),H1o=i($),Vp=n($,"LI",{});var CLe=s(Vp);Xle=n(CLe,"STRONG",{});var fat=s(Xle);U1o=r(fat,"dpt"),fat.forEach(t),J1o=r(CLe," \u2014 "),SN=n(CLe,"A",{href:!0});var mat=s(SN);Y1o=r(mat,"DPTModel"),mat.forEach(t),K1o=r(CLe," (DPT model)"),CLe.forEach(t),Z1o=i($),Xp=n($,"LI",{});var wLe=s(Xp);zle=n(wLe,"STRONG",{});var gat=s(zle);ebo=r(gat,"electra"),gat.forEach(t),obo=r(wLe," \u2014 "),RN=n(wLe,"A",{href:!0});var hat=s(RN);rbo=r(hat,"ElectraModel"),hat.forEach(t),tbo=r(wLe," (ELECTRA model)"),wLe.forEach(t),abo=i($),zp=n($,"LI",{});var ALe=s(zp);Wle=n(ALe,"STRONG",{});var pat=s(Wle);nbo=r(pat,"flaubert"),pat.forEach(t),sbo=r(ALe," \u2014 "),PN=n(ALe,"A",{href:!0});var _at=s(PN);lbo=r(_at,"FlaubertModel"),_at.forEach(t),ibo=r(ALe," (FlauBERT model)"),ALe.forEach(t),dbo=i($),Wp=n($,"LI",{});var LLe=s(Wp);Qle=n(LLe,"STRONG",{});var uat=s(Qle);cbo=r(uat,"flava"),uat.forEach(t),fbo=r(LLe," \u2014 "),BN=n(LLe,"A",{href:!0});var bat=s(BN);mbo=r(bat,"FlavaModel"),bat.forEach(t),gbo=r(LLe," (FLAVA model)"),LLe.forEach(t),hbo=i($),Qp=n($,"LI",{});var yLe=s(Qp);Hle=n(yLe,"STRONG",{});var vat=s(Hle);pbo=r(vat,"fnet"),vat.forEach(t),_bo=r(yLe," \u2014 "),IN=n(yLe,"A",{href:!0});var Fat=s(IN);ubo=r(Fat,"FNetModel"),Fat.forEach(t),bbo=r(yLe," (FNet model)"),yLe.forEach(t),vbo=i($),Hp=n($,"LI",{});var xLe=s(Hp);Ule=n(xLe,"STRONG",{});var Tat=s(Ule);Fbo=r(Tat,"fsmt"),Tat.forEach(t),Tbo=r(xLe," \u2014 "),NN=n(xLe,"A",{href:!0});var Mat=s(NN);Mbo=r(Mat,"FSMTModel"),Mat.forEach(t),Ebo=r(xLe," (FairSeq Machine-Translation model)"),xLe.forEach(t),Cbo=i($),Ps=n($,"LI",{});var ik=s(Ps);Jle=n(ik,"STRONG",{});var Eat=s(Jle);wbo=r(Eat,"funnel"),Eat.forEach(t),Abo=r(ik," \u2014 "),qN=n(ik,"A",{href:!0});var Cat=s(qN);Lbo=r(Cat,"FunnelModel"),Cat.forEach(t),ybo=r(ik," or "),jN=n(ik,"A",{href:!0});var wat=s(jN);xbo=r(wat,"FunnelBaseModel"),wat.forEach(t),$bo=r(ik," (Funnel Transformer model)"),ik.forEach(t),kbo=i($),Up=n($,"LI",{});var $Le=s(Up);Yle=n($Le,"STRONG",{});var Aat=s(Yle);Sbo=r(Aat,"glpn"),Aat.forEach(t),Rbo=r($Le," \u2014 "),DN=n($Le,"A",{href:!0});var Lat=s(DN);Pbo=r(Lat,"GLPNModel"),Lat.forEach(t),Bbo=r($Le," (GLPN model)"),$Le.forEach(t),Ibo=i($),Jp=n($,"LI",{});var kLe=s(Jp);Kle=n(kLe,"STRONG",{});var yat=s(Kle);Nbo=r(yat,"gpt2"),yat.forEach(t),qbo=r(kLe," \u2014 "),GN=n(kLe,"A",{href:!0});var xat=s(GN);jbo=r(xat,"GPT2Model"),xat.forEach(t),Dbo=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),Gbo=i($),Yp=n($,"LI",{});var SLe=s(Yp);Zle=n(SLe,"STRONG",{});var $at=s(Zle);Obo=r($at,"gpt_neo"),$at.forEach(t),Vbo=r(SLe," \u2014 "),ON=n(SLe,"A",{href:!0});var kat=s(ON);Xbo=r(kat,"GPTNeoModel"),kat.forEach(t),zbo=r(SLe," (GPT Neo model)"),SLe.forEach(t),Wbo=i($),Kp=n($,"LI",{});var RLe=s(Kp);eie=n(RLe,"STRONG",{});var Sat=s(eie);Qbo=r(Sat,"gpt_neox"),Sat.forEach(t),Hbo=r(RLe," \u2014 "),VN=n(RLe,"A",{href:!0});var Rat=s(VN);Ubo=r(Rat,"GPTNeoXModel"),Rat.forEach(t),Jbo=r(RLe," (GPT NeoX model)"),RLe.forEach(t),Ybo=i($),Zp=n($,"LI",{});var PLe=s(Zp);oie=n(PLe,"STRONG",{});var Pat=s(oie);Kbo=r(Pat,"gptj"),Pat.forEach(t),Zbo=r(PLe," \u2014 "),XN=n(PLe,"A",{href:!0});var Bat=s(XN);e2o=r(Bat,"GPTJModel"),Bat.forEach(t),o2o=r(PLe," (GPT-J model)"),PLe.forEach(t),r2o=i($),e_=n($,"LI",{});var BLe=s(e_);rie=n(BLe,"STRONG",{});var Iat=s(rie);t2o=r(Iat,"hubert"),Iat.forEach(t),a2o=r(BLe," \u2014 "),zN=n(BLe,"A",{href:!0});var Nat=s(zN);n2o=r(Nat,"HubertModel"),Nat.forEach(t),s2o=r(BLe," (Hubert model)"),BLe.forEach(t),l2o=i($),o_=n($,"LI",{});var ILe=s(o_);tie=n(ILe,"STRONG",{});var qat=s(tie);i2o=r(qat,"ibert"),qat.forEach(t),d2o=r(ILe," \u2014 "),WN=n(ILe,"A",{href:!0});var jat=s(WN);c2o=r(jat,"IBertModel"),jat.forEach(t),f2o=r(ILe," (I-BERT model)"),ILe.forEach(t),m2o=i($),r_=n($,"LI",{});var NLe=s(r_);aie=n(NLe,"STRONG",{});var Dat=s(aie);g2o=r(Dat,"imagegpt"),Dat.forEach(t),h2o=r(NLe," \u2014 "),QN=n(NLe,"A",{href:!0});var Gat=s(QN);p2o=r(Gat,"ImageGPTModel"),Gat.forEach(t),_2o=r(NLe," (ImageGPT model)"),NLe.forEach(t),u2o=i($),t_=n($,"LI",{});var qLe=s(t_);nie=n(qLe,"STRONG",{});var Oat=s(nie);b2o=r(Oat,"layoutlm"),Oat.forEach(t),v2o=r(qLe," \u2014 "),HN=n(qLe,"A",{href:!0});var Vat=s(HN);F2o=r(Vat,"LayoutLMModel"),Vat.forEach(t),T2o=r(qLe," (LayoutLM model)"),qLe.forEach(t),M2o=i($),a_=n($,"LI",{});var jLe=s(a_);sie=n(jLe,"STRONG",{});var Xat=s(sie);E2o=r(Xat,"layoutlmv2"),Xat.forEach(t),C2o=r(jLe," \u2014 "),UN=n(jLe,"A",{href:!0});var zat=s(UN);w2o=r(zat,"LayoutLMv2Model"),zat.forEach(t),A2o=r(jLe," (LayoutLMv2 model)"),jLe.forEach(t),L2o=i($),n_=n($,"LI",{});var DLe=s(n_);lie=n(DLe,"STRONG",{});var Wat=s(lie);y2o=r(Wat,"layoutlmv3"),Wat.forEach(t),x2o=r(DLe," \u2014 "),JN=n(DLe,"A",{href:!0});var Qat=s(JN);$2o=r(Qat,"LayoutLMv3Model"),Qat.forEach(t),k2o=r(DLe," (LayoutLMv3 model)"),DLe.forEach(t),S2o=i($),s_=n($,"LI",{});var GLe=s(s_);iie=n(GLe,"STRONG",{});var Hat=s(iie);R2o=r(Hat,"led"),Hat.forEach(t),P2o=r(GLe," \u2014 "),YN=n(GLe,"A",{href:!0});var Uat=s(YN);B2o=r(Uat,"LEDModel"),Uat.forEach(t),I2o=r(GLe," (LED model)"),GLe.forEach(t),N2o=i($),l_=n($,"LI",{});var OLe=s(l_);die=n(OLe,"STRONG",{});var Jat=s(die);q2o=r(Jat,"levit"),Jat.forEach(t),j2o=r(OLe," \u2014 "),KN=n(OLe,"A",{href:!0});var Yat=s(KN);D2o=r(Yat,"LevitModel"),Yat.forEach(t),G2o=r(OLe," (LeViT model)"),OLe.forEach(t),O2o=i($),i_=n($,"LI",{});var VLe=s(i_);cie=n(VLe,"STRONG",{});var Kat=s(cie);V2o=r(Kat,"longformer"),Kat.forEach(t),X2o=r(VLe," \u2014 "),ZN=n(VLe,"A",{href:!0});var Zat=s(ZN);z2o=r(Zat,"LongformerModel"),Zat.forEach(t),W2o=r(VLe," (Longformer model)"),VLe.forEach(t),Q2o=i($),d_=n($,"LI",{});var XLe=s(d_);fie=n(XLe,"STRONG",{});var ent=s(fie);H2o=r(ent,"luke"),ent.forEach(t),U2o=r(XLe," \u2014 "),eq=n(XLe,"A",{href:!0});var ont=s(eq);J2o=r(ont,"LukeModel"),ont.forEach(t),Y2o=r(XLe," (LUKE model)"),XLe.forEach(t),K2o=i($),c_=n($,"LI",{});var zLe=s(c_);mie=n(zLe,"STRONG",{});var rnt=s(mie);Z2o=r(rnt,"lxmert"),rnt.forEach(t),e4o=r(zLe," \u2014 "),oq=n(zLe,"A",{href:!0});var tnt=s(oq);o4o=r(tnt,"LxmertModel"),tnt.forEach(t),r4o=r(zLe," (LXMERT model)"),zLe.forEach(t),t4o=i($),f_=n($,"LI",{});var WLe=s(f_);gie=n(WLe,"STRONG",{});var ant=s(gie);a4o=r(ant,"m2m_100"),ant.forEach(t),n4o=r(WLe," \u2014 "),rq=n(WLe,"A",{href:!0});var nnt=s(rq);s4o=r(nnt,"M2M100Model"),nnt.forEach(t),l4o=r(WLe," (M2M100 model)"),WLe.forEach(t),i4o=i($),m_=n($,"LI",{});var QLe=s(m_);hie=n(QLe,"STRONG",{});var snt=s(hie);d4o=r(snt,"marian"),snt.forEach(t),c4o=r(QLe," \u2014 "),tq=n(QLe,"A",{href:!0});var lnt=s(tq);f4o=r(lnt,"MarianModel"),lnt.forEach(t),m4o=r(QLe," (Marian model)"),QLe.forEach(t),g4o=i($),g_=n($,"LI",{});var HLe=s(g_);pie=n(HLe,"STRONG",{});var int=s(pie);h4o=r(int,"maskformer"),int.forEach(t),p4o=r(HLe," \u2014 "),aq=n(HLe,"A",{href:!0});var dnt=s(aq);_4o=r(dnt,"MaskFormerModel"),dnt.forEach(t),u4o=r(HLe," (MaskFormer model)"),HLe.forEach(t),b4o=i($),h_=n($,"LI",{});var ULe=s(h_);_ie=n(ULe,"STRONG",{});var cnt=s(_ie);v4o=r(cnt,"mbart"),cnt.forEach(t),F4o=r(ULe," \u2014 "),nq=n(ULe,"A",{href:!0});var fnt=s(nq);T4o=r(fnt,"MBartModel"),fnt.forEach(t),M4o=r(ULe," (mBART model)"),ULe.forEach(t),E4o=i($),p_=n($,"LI",{});var JLe=s(p_);uie=n(JLe,"STRONG",{});var mnt=s(uie);C4o=r(mnt,"mctct"),mnt.forEach(t),w4o=r(JLe," \u2014 "),sq=n(JLe,"A",{href:!0});var gnt=s(sq);A4o=r(gnt,"MCTCTModel"),gnt.forEach(t),L4o=r(JLe," (M-CTC-T model)"),JLe.forEach(t),y4o=i($),__=n($,"LI",{});var YLe=s(__);bie=n(YLe,"STRONG",{});var hnt=s(bie);x4o=r(hnt,"megatron-bert"),hnt.forEach(t),$4o=r(YLe," \u2014 "),lq=n(YLe,"A",{href:!0});var pnt=s(lq);k4o=r(pnt,"MegatronBertModel"),pnt.forEach(t),S4o=r(YLe," (Megatron-BERT model)"),YLe.forEach(t),R4o=i($),u_=n($,"LI",{});var KLe=s(u_);vie=n(KLe,"STRONG",{});var _nt=s(vie);P4o=r(_nt,"mobilebert"),_nt.forEach(t),B4o=r(KLe," \u2014 "),iq=n(KLe,"A",{href:!0});var unt=s(iq);I4o=r(unt,"MobileBertModel"),unt.forEach(t),N4o=r(KLe," (MobileBERT model)"),KLe.forEach(t),q4o=i($),b_=n($,"LI",{});var ZLe=s(b_);Fie=n(ZLe,"STRONG",{});var bnt=s(Fie);j4o=r(bnt,"mpnet"),bnt.forEach(t),D4o=r(ZLe," \u2014 "),dq=n(ZLe,"A",{href:!0});var vnt=s(dq);G4o=r(vnt,"MPNetModel"),vnt.forEach(t),O4o=r(ZLe," (MPNet model)"),ZLe.forEach(t),V4o=i($),v_=n($,"LI",{});var eye=s(v_);Tie=n(eye,"STRONG",{});var Fnt=s(Tie);X4o=r(Fnt,"mt5"),Fnt.forEach(t),z4o=r(eye," \u2014 "),cq=n(eye,"A",{href:!0});var Tnt=s(cq);W4o=r(Tnt,"MT5Model"),Tnt.forEach(t),Q4o=r(eye," (MT5 model)"),eye.forEach(t),H4o=i($),F_=n($,"LI",{});var oye=s(F_);Mie=n(oye,"STRONG",{});var Mnt=s(Mie);U4o=r(Mnt,"nystromformer"),Mnt.forEach(t),J4o=r(oye," \u2014 "),fq=n(oye,"A",{href:!0});var Ent=s(fq);Y4o=r(Ent,"NystromformerModel"),Ent.forEach(t),K4o=r(oye," (Nystr\xF6mformer model)"),oye.forEach(t),Z4o=i($),T_=n($,"LI",{});var rye=s(T_);Eie=n(rye,"STRONG",{});var Cnt=s(Eie);evo=r(Cnt,"openai-gpt"),Cnt.forEach(t),ovo=r(rye," \u2014 "),mq=n(rye,"A",{href:!0});var wnt=s(mq);rvo=r(wnt,"OpenAIGPTModel"),wnt.forEach(t),tvo=r(rye," (OpenAI GPT model)"),rye.forEach(t),avo=i($),M_=n($,"LI",{});var tye=s(M_);Cie=n(tye,"STRONG",{});var Ant=s(Cie);nvo=r(Ant,"opt"),Ant.forEach(t),svo=r(tye," \u2014 "),gq=n(tye,"A",{href:!0});var Lnt=s(gq);lvo=r(Lnt,"OPTModel"),Lnt.forEach(t),ivo=r(tye," (OPT model)"),tye.forEach(t),dvo=i($),E_=n($,"LI",{});var aye=s(E_);wie=n(aye,"STRONG",{});var ynt=s(wie);cvo=r(ynt,"pegasus"),ynt.forEach(t),fvo=r(aye," \u2014 "),hq=n(aye,"A",{href:!0});var xnt=s(hq);mvo=r(xnt,"PegasusModel"),xnt.forEach(t),gvo=r(aye," (Pegasus model)"),aye.forEach(t),hvo=i($),C_=n($,"LI",{});var nye=s(C_);Aie=n(nye,"STRONG",{});var $nt=s(Aie);pvo=r($nt,"perceiver"),$nt.forEach(t),_vo=r(nye," \u2014 "),pq=n(nye,"A",{href:!0});var knt=s(pq);uvo=r(knt,"PerceiverModel"),knt.forEach(t),bvo=r(nye," (Perceiver model)"),nye.forEach(t),vvo=i($),w_=n($,"LI",{});var sye=s(w_);Lie=n(sye,"STRONG",{});var Snt=s(Lie);Fvo=r(Snt,"plbart"),Snt.forEach(t),Tvo=r(sye," \u2014 "),_q=n(sye,"A",{href:!0});var Rnt=s(_q);Mvo=r(Rnt,"PLBartModel"),Rnt.forEach(t),Evo=r(sye," (PLBart model)"),sye.forEach(t),Cvo=i($),A_=n($,"LI",{});var lye=s(A_);yie=n(lye,"STRONG",{});var Pnt=s(yie);wvo=r(Pnt,"poolformer"),Pnt.forEach(t),Avo=r(lye," \u2014 "),uq=n(lye,"A",{href:!0});var Bnt=s(uq);Lvo=r(Bnt,"PoolFormerModel"),Bnt.forEach(t),yvo=r(lye," (PoolFormer model)"),lye.forEach(t),xvo=i($),L_=n($,"LI",{});var iye=s(L_);xie=n(iye,"STRONG",{});var Int=s(xie);$vo=r(Int,"prophetnet"),Int.forEach(t),kvo=r(iye," \u2014 "),bq=n(iye,"A",{href:!0});var Nnt=s(bq);Svo=r(Nnt,"ProphetNetModel"),Nnt.forEach(t),Rvo=r(iye," (ProphetNet model)"),iye.forEach(t),Pvo=i($),y_=n($,"LI",{});var dye=s(y_);$ie=n(dye,"STRONG",{});var qnt=s($ie);Bvo=r(qnt,"qdqbert"),qnt.forEach(t),Ivo=r(dye," \u2014 "),vq=n(dye,"A",{href:!0});var jnt=s(vq);Nvo=r(jnt,"QDQBertModel"),jnt.forEach(t),qvo=r(dye," (QDQBert model)"),dye.forEach(t),jvo=i($),x_=n($,"LI",{});var cye=s(x_);kie=n(cye,"STRONG",{});var Dnt=s(kie);Dvo=r(Dnt,"reformer"),Dnt.forEach(t),Gvo=r(cye," \u2014 "),Fq=n(cye,"A",{href:!0});var Gnt=s(Fq);Ovo=r(Gnt,"ReformerModel"),Gnt.forEach(t),Vvo=r(cye," (Reformer model)"),cye.forEach(t),Xvo=i($),$_=n($,"LI",{});var fye=s($_);Sie=n(fye,"STRONG",{});var Ont=s(Sie);zvo=r(Ont,"regnet"),Ont.forEach(t),Wvo=r(fye," \u2014 "),Tq=n(fye,"A",{href:!0});var Vnt=s(Tq);Qvo=r(Vnt,"RegNetModel"),Vnt.forEach(t),Hvo=r(fye," (RegNet model)"),fye.forEach(t),Uvo=i($),k_=n($,"LI",{});var mye=s(k_);Rie=n(mye,"STRONG",{});var Xnt=s(Rie);Jvo=r(Xnt,"rembert"),Xnt.forEach(t),Yvo=r(mye," \u2014 "),Mq=n(mye,"A",{href:!0});var znt=s(Mq);Kvo=r(znt,"RemBertModel"),znt.forEach(t),Zvo=r(mye," (RemBERT model)"),mye.forEach(t),eFo=i($),S_=n($,"LI",{});var gye=s(S_);Pie=n(gye,"STRONG",{});var Wnt=s(Pie);oFo=r(Wnt,"resnet"),Wnt.forEach(t),rFo=r(gye," \u2014 "),Eq=n(gye,"A",{href:!0});var Qnt=s(Eq);tFo=r(Qnt,"ResNetModel"),Qnt.forEach(t),aFo=r(gye," (ResNet model)"),gye.forEach(t),nFo=i($),R_=n($,"LI",{});var hye=s(R_);Bie=n(hye,"STRONG",{});var Hnt=s(Bie);sFo=r(Hnt,"retribert"),Hnt.forEach(t),lFo=r(hye," \u2014 "),Cq=n(hye,"A",{href:!0});var Unt=s(Cq);iFo=r(Unt,"RetriBertModel"),Unt.forEach(t),dFo=r(hye," (RetriBERT model)"),hye.forEach(t),cFo=i($),P_=n($,"LI",{});var pye=s(P_);Iie=n(pye,"STRONG",{});var Jnt=s(Iie);fFo=r(Jnt,"roberta"),Jnt.forEach(t),mFo=r(pye," \u2014 "),wq=n(pye,"A",{href:!0});var Ynt=s(wq);gFo=r(Ynt,"RobertaModel"),Ynt.forEach(t),hFo=r(pye," (RoBERTa model)"),pye.forEach(t),pFo=i($),B_=n($,"LI",{});var _ye=s(B_);Nie=n(_ye,"STRONG",{});var Knt=s(Nie);_Fo=r(Knt,"roformer"),Knt.forEach(t),uFo=r(_ye," \u2014 "),Aq=n(_ye,"A",{href:!0});var Znt=s(Aq);bFo=r(Znt,"RoFormerModel"),Znt.forEach(t),vFo=r(_ye," (RoFormer model)"),_ye.forEach(t),FFo=i($),I_=n($,"LI",{});var uye=s(I_);qie=n(uye,"STRONG",{});var est=s(qie);TFo=r(est,"segformer"),est.forEach(t),MFo=r(uye," \u2014 "),Lq=n(uye,"A",{href:!0});var ost=s(Lq);EFo=r(ost,"SegformerModel"),ost.forEach(t),CFo=r(uye," (SegFormer model)"),uye.forEach(t),wFo=i($),N_=n($,"LI",{});var bye=s(N_);jie=n(bye,"STRONG",{});var rst=s(jie);AFo=r(rst,"sew"),rst.forEach(t),LFo=r(bye," \u2014 "),yq=n(bye,"A",{href:!0});var tst=s(yq);yFo=r(tst,"SEWModel"),tst.forEach(t),xFo=r(bye," (SEW model)"),bye.forEach(t),$Fo=i($),q_=n($,"LI",{});var vye=s(q_);Die=n(vye,"STRONG",{});var ast=s(Die);kFo=r(ast,"sew-d"),ast.forEach(t),SFo=r(vye," \u2014 "),xq=n(vye,"A",{href:!0});var nst=s(xq);RFo=r(nst,"SEWDModel"),nst.forEach(t),PFo=r(vye," (SEW-D model)"),vye.forEach(t),BFo=i($),j_=n($,"LI",{});var Fye=s(j_);Gie=n(Fye,"STRONG",{});var sst=s(Gie);IFo=r(sst,"speech_to_text"),sst.forEach(t),NFo=r(Fye," \u2014 "),$q=n(Fye,"A",{href:!0});var lst=s($q);qFo=r(lst,"Speech2TextModel"),lst.forEach(t),jFo=r(Fye," (Speech2Text model)"),Fye.forEach(t),DFo=i($),D_=n($,"LI",{});var Tye=s(D_);Oie=n(Tye,"STRONG",{});var ist=s(Oie);GFo=r(ist,"splinter"),ist.forEach(t),OFo=r(Tye," \u2014 "),kq=n(Tye,"A",{href:!0});var dst=s(kq);VFo=r(dst,"SplinterModel"),dst.forEach(t),XFo=r(Tye," (Splinter model)"),Tye.forEach(t),zFo=i($),G_=n($,"LI",{});var Mye=s(G_);Vie=n(Mye,"STRONG",{});var cst=s(Vie);WFo=r(cst,"squeezebert"),cst.forEach(t),QFo=r(Mye," \u2014 "),Sq=n(Mye,"A",{href:!0});var fst=s(Sq);HFo=r(fst,"SqueezeBertModel"),fst.forEach(t),UFo=r(Mye," (SqueezeBERT model)"),Mye.forEach(t),JFo=i($),O_=n($,"LI",{});var Eye=s(O_);Xie=n(Eye,"STRONG",{});var mst=s(Xie);YFo=r(mst,"swin"),mst.forEach(t),KFo=r(Eye," \u2014 "),Rq=n(Eye,"A",{href:!0});var gst=s(Rq);ZFo=r(gst,"SwinModel"),gst.forEach(t),eTo=r(Eye," (Swin Transformer model)"),Eye.forEach(t),oTo=i($),V_=n($,"LI",{});var Cye=s(V_);zie=n(Cye,"STRONG",{});var hst=s(zie);rTo=r(hst,"t5"),hst.forEach(t),tTo=r(Cye," \u2014 "),Pq=n(Cye,"A",{href:!0});var pst=s(Pq);aTo=r(pst,"T5Model"),pst.forEach(t),nTo=r(Cye," (T5 model)"),Cye.forEach(t),sTo=i($),X_=n($,"LI",{});var wye=s(X_);Wie=n(wye,"STRONG",{});var _st=s(Wie);lTo=r(_st,"tapas"),_st.forEach(t),iTo=r(wye," \u2014 "),Bq=n(wye,"A",{href:!0});var ust=s(Bq);dTo=r(ust,"TapasModel"),ust.forEach(t),cTo=r(wye," (TAPAS model)"),wye.forEach(t),fTo=i($),z_=n($,"LI",{});var Aye=s(z_);Qie=n(Aye,"STRONG",{});var bst=s(Qie);mTo=r(bst,"trajectory_transformer"),bst.forEach(t),gTo=r(Aye," \u2014 "),Iq=n(Aye,"A",{href:!0});var vst=s(Iq);hTo=r(vst,"TrajectoryTransformerModel"),vst.forEach(t),pTo=r(Aye," (Trajectory Transformer model)"),Aye.forEach(t),_To=i($),W_=n($,"LI",{});var Lye=s(W_);Hie=n(Lye,"STRONG",{});var Fst=s(Hie);uTo=r(Fst,"transfo-xl"),Fst.forEach(t),bTo=r(Lye," \u2014 "),Nq=n(Lye,"A",{href:!0});var Tst=s(Nq);vTo=r(Tst,"TransfoXLModel"),Tst.forEach(t),FTo=r(Lye," (Transformer-XL model)"),Lye.forEach(t),TTo=i($),Q_=n($,"LI",{});var yye=s(Q_);Uie=n(yye,"STRONG",{});var Mst=s(Uie);MTo=r(Mst,"unispeech"),Mst.forEach(t),ETo=r(yye," \u2014 "),qq=n(yye,"A",{href:!0});var Est=s(qq);CTo=r(Est,"UniSpeechModel"),Est.forEach(t),wTo=r(yye," (UniSpeech model)"),yye.forEach(t),ATo=i($),H_=n($,"LI",{});var xye=s(H_);Jie=n(xye,"STRONG",{});var Cst=s(Jie);LTo=r(Cst,"unispeech-sat"),Cst.forEach(t),yTo=r(xye," \u2014 "),jq=n(xye,"A",{href:!0});var wst=s(jq);xTo=r(wst,"UniSpeechSatModel"),wst.forEach(t),$To=r(xye," (UniSpeechSat model)"),xye.forEach(t),kTo=i($),U_=n($,"LI",{});var $ye=s(U_);Yie=n($ye,"STRONG",{});var Ast=s(Yie);STo=r(Ast,"van"),Ast.forEach(t),RTo=r($ye," \u2014 "),Dq=n($ye,"A",{href:!0});var Lst=s(Dq);PTo=r(Lst,"VanModel"),Lst.forEach(t),BTo=r($ye," (VAN model)"),$ye.forEach(t),ITo=i($),J_=n($,"LI",{});var kye=s(J_);Kie=n(kye,"STRONG",{});var yst=s(Kie);NTo=r(yst,"vilt"),yst.forEach(t),qTo=r(kye," \u2014 "),Gq=n(kye,"A",{href:!0});var xst=s(Gq);jTo=r(xst,"ViltModel"),xst.forEach(t),DTo=r(kye," (ViLT model)"),kye.forEach(t),GTo=i($),Y_=n($,"LI",{});var Sye=s(Y_);Zie=n(Sye,"STRONG",{});var $st=s(Zie);OTo=r($st,"vision-text-dual-encoder"),$st.forEach(t),VTo=r(Sye," \u2014 "),Oq=n(Sye,"A",{href:!0});var kst=s(Oq);XTo=r(kst,"VisionTextDualEncoderModel"),kst.forEach(t),zTo=r(Sye," (VisionTextDualEncoder model)"),Sye.forEach(t),WTo=i($),K_=n($,"LI",{});var Rye=s(K_);ede=n(Rye,"STRONG",{});var Sst=s(ede);QTo=r(Sst,"visual_bert"),Sst.forEach(t),HTo=r(Rye," \u2014 "),Vq=n(Rye,"A",{href:!0});var Rst=s(Vq);UTo=r(Rst,"VisualBertModel"),Rst.forEach(t),JTo=r(Rye," (VisualBERT model)"),Rye.forEach(t),YTo=i($),Z_=n($,"LI",{});var Pye=s(Z_);ode=n(Pye,"STRONG",{});var Pst=s(ode);KTo=r(Pst,"vit"),Pst.forEach(t),ZTo=r(Pye," \u2014 "),Xq=n(Pye,"A",{href:!0});var Bst=s(Xq);e7o=r(Bst,"ViTModel"),Bst.forEach(t),o7o=r(Pye," (ViT model)"),Pye.forEach(t),r7o=i($),eu=n($,"LI",{});var Bye=s(eu);rde=n(Bye,"STRONG",{});var Ist=s(rde);t7o=r(Ist,"vit_mae"),Ist.forEach(t),a7o=r(Bye," \u2014 "),zq=n(Bye,"A",{href:!0});var Nst=s(zq);n7o=r(Nst,"ViTMAEModel"),Nst.forEach(t),s7o=r(Bye," (ViTMAE model)"),Bye.forEach(t),l7o=i($),ou=n($,"LI",{});var Iye=s(ou);tde=n(Iye,"STRONG",{});var qst=s(tde);i7o=r(qst,"wav2vec2"),qst.forEach(t),d7o=r(Iye," \u2014 "),Wq=n(Iye,"A",{href:!0});var jst=s(Wq);c7o=r(jst,"Wav2Vec2Model"),jst.forEach(t),f7o=r(Iye," (Wav2Vec2 model)"),Iye.forEach(t),m7o=i($),ru=n($,"LI",{});var Nye=s(ru);ade=n(Nye,"STRONG",{});var Dst=s(ade);g7o=r(Dst,"wav2vec2-conformer"),Dst.forEach(t),h7o=r(Nye," \u2014 "),Qq=n(Nye,"A",{href:!0});var Gst=s(Qq);p7o=r(Gst,"Wav2Vec2ConformerModel"),Gst.forEach(t),_7o=r(Nye," (Wav2Vec2-Conformer model)"),Nye.forEach(t),u7o=i($),tu=n($,"LI",{});var qye=s(tu);nde=n(qye,"STRONG",{});var Ost=s(nde);b7o=r(Ost,"wavlm"),Ost.forEach(t),v7o=r(qye," \u2014 "),Hq=n(qye,"A",{href:!0});var Vst=s(Hq);F7o=r(Vst,"WavLMModel"),Vst.forEach(t),T7o=r(qye," (WavLM model)"),qye.forEach(t),M7o=i($),au=n($,"LI",{});var jye=s(au);sde=n(jye,"STRONG",{});var Xst=s(sde);E7o=r(Xst,"xglm"),Xst.forEach(t),C7o=r(jye," \u2014 "),Uq=n(jye,"A",{href:!0});var zst=s(Uq);w7o=r(zst,"XGLMModel"),zst.forEach(t),A7o=r(jye," (XGLM model)"),jye.forEach(t),L7o=i($),nu=n($,"LI",{});var Dye=s(nu);lde=n(Dye,"STRONG",{});var Wst=s(lde);y7o=r(Wst,"xlm"),Wst.forEach(t),x7o=r(Dye," \u2014 "),Jq=n(Dye,"A",{href:!0});var Qst=s(Jq);$7o=r(Qst,"XLMModel"),Qst.forEach(t),k7o=r(Dye," (XLM model)"),Dye.forEach(t),S7o=i($),su=n($,"LI",{});var Gye=s(su);ide=n(Gye,"STRONG",{});var Hst=s(ide);R7o=r(Hst,"xlm-prophetnet"),Hst.forEach(t),P7o=r(Gye," \u2014 "),Yq=n(Gye,"A",{href:!0});var Ust=s(Yq);B7o=r(Ust,"XLMProphetNetModel"),Ust.forEach(t),I7o=r(Gye," (XLM-ProphetNet model)"),Gye.forEach(t),N7o=i($),lu=n($,"LI",{});var Oye=s(lu);dde=n(Oye,"STRONG",{});var Jst=s(dde);q7o=r(Jst,"xlm-roberta"),Jst.forEach(t),j7o=r(Oye," \u2014 "),Kq=n(Oye,"A",{href:!0});var Yst=s(Kq);D7o=r(Yst,"XLMRobertaModel"),Yst.forEach(t),G7o=r(Oye," (XLM-RoBERTa model)"),Oye.forEach(t),O7o=i($),iu=n($,"LI",{});var Vye=s(iu);cde=n(Vye,"STRONG",{});var Kst=s(cde);V7o=r(Kst,"xlm-roberta-xl"),Kst.forEach(t),X7o=r(Vye," \u2014 "),Zq=n(Vye,"A",{href:!0});var Zst=s(Zq);z7o=r(Zst,"XLMRobertaXLModel"),Zst.forEach(t),W7o=r(Vye," (XLM-RoBERTa-XL model)"),Vye.forEach(t),Q7o=i($),du=n($,"LI",{});var Xye=s(du);fde=n(Xye,"STRONG",{});var elt=s(fde);H7o=r(elt,"xlnet"),elt.forEach(t),U7o=r(Xye," \u2014 "),ej=n(Xye,"A",{href:!0});var olt=s(ej);J7o=r(olt,"XLNetModel"),olt.forEach(t),Y7o=r(Xye," (XLNet model)"),Xye.forEach(t),K7o=i($),cu=n($,"LI",{});var zye=s(cu);mde=n(zye,"STRONG",{});var rlt=s(mde);Z7o=r(rlt,"yolos"),rlt.forEach(t),eMo=r(zye," \u2014 "),oj=n(zye,"A",{href:!0});var tlt=s(oj);oMo=r(tlt,"YolosModel"),tlt.forEach(t),rMo=r(zye," (YOLOS model)"),zye.forEach(t),tMo=i($),fu=n($,"LI",{});var Wye=s(fu);gde=n(Wye,"STRONG",{});var alt=s(gde);aMo=r(alt,"yoso"),alt.forEach(t),nMo=r(Wye," \u2014 "),rj=n(Wye,"A",{href:!0});var nlt=s(rj);sMo=r(nlt,"YosoModel"),nlt.forEach(t),lMo=r(Wye," (YOSO model)"),Wye.forEach(t),$.forEach(t),iMo=i(ra),mu=n(ra,"P",{});var Qye=s(mu);dMo=r(Qye,"The model is set in evaluation mode by default using "),hde=n(Qye,"CODE",{});var slt=s(hde);cMo=r(slt,"model.eval()"),slt.forEach(t),fMo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=n(Qye,"CODE",{});var llt=s(pde);mMo=r(llt,"model.train()"),llt.forEach(t),Qye.forEach(t),gMo=i(ra),T(gu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Dje=i(f),$i=n(f,"H2",{class:!0});var XGe=s($i);hu=n(XGe,"A",{id:!0,class:!0,href:!0});var ilt=s(hu);_de=n(ilt,"SPAN",{});var dlt=s(_de);T(CL.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),hMo=i(XGe),ude=n(XGe,"SPAN",{});var clt=s(ude);pMo=r(clt,"AutoModelForPreTraining"),clt.forEach(t),XGe.forEach(t),Gje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(wL.$$.fragment,Vs),_Mo=i(Vs),ki=n(Vs,"P",{});var nee=s(ki);uMo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tj=n(nee,"A",{href:!0});var flt=s(tj);bMo=r(flt,"from_pretrained()"),flt.forEach(t),vMo=r(nee," class method or the "),aj=n(nee,"A",{href:!0});var mlt=s(aj);FMo=r(mlt,"from_config()"),mlt.forEach(t),TMo=r(nee,` class
method.`),nee.forEach(t),MMo=i(Vs),AL=n(Vs,"P",{});var zGe=s(AL);EMo=r(zGe,"This class cannot be instantiated directly using "),bde=n(zGe,"CODE",{});var glt=s(bde);CMo=r(glt,"__init__()"),glt.forEach(t),wMo=r(zGe," (throws an error)."),zGe.forEach(t),AMo=i(Vs),nt=n(Vs,"DIV",{class:!0});var eA=s(nt);T(LL.$$.fragment,eA),LMo=i(eA),vde=n(eA,"P",{});var hlt=s(vde);yMo=r(hlt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hlt.forEach(t),xMo=i(eA),Si=n(eA,"P",{});var see=s(Si);$Mo=r(see,`Note:
Loading a model from its configuration file does `),Fde=n(see,"STRONG",{});var plt=s(Fde);kMo=r(plt,"not"),plt.forEach(t),SMo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(see,"A",{href:!0});var _lt=s(nj);RMo=r(_lt,"from_pretrained()"),_lt.forEach(t),PMo=r(see," to load the model weights."),see.forEach(t),BMo=i(eA),T(pu.$$.fragment,eA),eA.forEach(t),IMo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ta=s(Ye);T(yL.$$.fragment,ta),NMo=i(ta),Tde=n(ta,"P",{});var ult=s(Tde);qMo=r(ult,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ult.forEach(t),jMo=i(ta),$a=n(ta,"P",{});var oA=s($a);DMo=r(oA,"The model class to instantiate is selected based on the "),Mde=n(oA,"CODE",{});var blt=s(Mde);GMo=r(blt,"model_type"),blt.forEach(t),OMo=r(oA,` property of the config object (either
passed as an argument or loaded from `),Ede=n(oA,"CODE",{});var vlt=s(Ede);VMo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),XMo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(oA,"CODE",{});var Flt=s(Cde);zMo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),WMo=r(oA,":"),oA.forEach(t),QMo=i(ta),G=n(ta,"UL",{});var O=s(G);_u=n(O,"LI",{});var Hye=s(_u);wde=n(Hye,"STRONG",{});var Tlt=s(wde);HMo=r(Tlt,"albert"),Tlt.forEach(t),UMo=r(Hye," \u2014 "),sj=n(Hye,"A",{href:!0});var Mlt=s(sj);JMo=r(Mlt,"AlbertForPreTraining"),Mlt.forEach(t),YMo=r(Hye," (ALBERT model)"),Hye.forEach(t),KMo=i(O),uu=n(O,"LI",{});var Uye=s(uu);Ade=n(Uye,"STRONG",{});var Elt=s(Ade);ZMo=r(Elt,"bart"),Elt.forEach(t),eEo=r(Uye," \u2014 "),lj=n(Uye,"A",{href:!0});var Clt=s(lj);oEo=r(Clt,"BartForConditionalGeneration"),Clt.forEach(t),rEo=r(Uye," (BART model)"),Uye.forEach(t),tEo=i(O),bu=n(O,"LI",{});var Jye=s(bu);Lde=n(Jye,"STRONG",{});var wlt=s(Lde);aEo=r(wlt,"bert"),wlt.forEach(t),nEo=r(Jye," \u2014 "),ij=n(Jye,"A",{href:!0});var Alt=s(ij);sEo=r(Alt,"BertForPreTraining"),Alt.forEach(t),lEo=r(Jye," (BERT model)"),Jye.forEach(t),iEo=i(O),vu=n(O,"LI",{});var Yye=s(vu);yde=n(Yye,"STRONG",{});var Llt=s(yde);dEo=r(Llt,"big_bird"),Llt.forEach(t),cEo=r(Yye," \u2014 "),dj=n(Yye,"A",{href:!0});var ylt=s(dj);fEo=r(ylt,"BigBirdForPreTraining"),ylt.forEach(t),mEo=r(Yye," (BigBird model)"),Yye.forEach(t),gEo=i(O),Fu=n(O,"LI",{});var Kye=s(Fu);xde=n(Kye,"STRONG",{});var xlt=s(xde);hEo=r(xlt,"bloom"),xlt.forEach(t),pEo=r(Kye," \u2014 "),cj=n(Kye,"A",{href:!0});var $lt=s(cj);_Eo=r($lt,"BloomForCausalLM"),$lt.forEach(t),uEo=r(Kye," (BLOOM model)"),Kye.forEach(t),bEo=i(O),Tu=n(O,"LI",{});var Zye=s(Tu);$de=n(Zye,"STRONG",{});var klt=s($de);vEo=r(klt,"camembert"),klt.forEach(t),FEo=r(Zye," \u2014 "),fj=n(Zye,"A",{href:!0});var Slt=s(fj);TEo=r(Slt,"CamembertForMaskedLM"),Slt.forEach(t),MEo=r(Zye," (CamemBERT model)"),Zye.forEach(t),EEo=i(O),Mu=n(O,"LI",{});var e8e=s(Mu);kde=n(e8e,"STRONG",{});var Rlt=s(kde);CEo=r(Rlt,"ctrl"),Rlt.forEach(t),wEo=r(e8e," \u2014 "),mj=n(e8e,"A",{href:!0});var Plt=s(mj);AEo=r(Plt,"CTRLLMHeadModel"),Plt.forEach(t),LEo=r(e8e," (CTRL model)"),e8e.forEach(t),yEo=i(O),Eu=n(O,"LI",{});var o8e=s(Eu);Sde=n(o8e,"STRONG",{});var Blt=s(Sde);xEo=r(Blt,"data2vec-text"),Blt.forEach(t),$Eo=r(o8e," \u2014 "),gj=n(o8e,"A",{href:!0});var Ilt=s(gj);kEo=r(Ilt,"Data2VecTextForMaskedLM"),Ilt.forEach(t),SEo=r(o8e," (Data2VecText model)"),o8e.forEach(t),REo=i(O),Cu=n(O,"LI",{});var r8e=s(Cu);Rde=n(r8e,"STRONG",{});var Nlt=s(Rde);PEo=r(Nlt,"deberta"),Nlt.forEach(t),BEo=r(r8e," \u2014 "),hj=n(r8e,"A",{href:!0});var qlt=s(hj);IEo=r(qlt,"DebertaForMaskedLM"),qlt.forEach(t),NEo=r(r8e," (DeBERTa model)"),r8e.forEach(t),qEo=i(O),wu=n(O,"LI",{});var t8e=s(wu);Pde=n(t8e,"STRONG",{});var jlt=s(Pde);jEo=r(jlt,"deberta-v2"),jlt.forEach(t),DEo=r(t8e," \u2014 "),pj=n(t8e,"A",{href:!0});var Dlt=s(pj);GEo=r(Dlt,"DebertaV2ForMaskedLM"),Dlt.forEach(t),OEo=r(t8e," (DeBERTa-v2 model)"),t8e.forEach(t),VEo=i(O),Au=n(O,"LI",{});var a8e=s(Au);Bde=n(a8e,"STRONG",{});var Glt=s(Bde);XEo=r(Glt,"distilbert"),Glt.forEach(t),zEo=r(a8e," \u2014 "),_j=n(a8e,"A",{href:!0});var Olt=s(_j);WEo=r(Olt,"DistilBertForMaskedLM"),Olt.forEach(t),QEo=r(a8e," (DistilBERT model)"),a8e.forEach(t),HEo=i(O),Lu=n(O,"LI",{});var n8e=s(Lu);Ide=n(n8e,"STRONG",{});var Vlt=s(Ide);UEo=r(Vlt,"electra"),Vlt.forEach(t),JEo=r(n8e," \u2014 "),uj=n(n8e,"A",{href:!0});var Xlt=s(uj);YEo=r(Xlt,"ElectraForPreTraining"),Xlt.forEach(t),KEo=r(n8e," (ELECTRA model)"),n8e.forEach(t),ZEo=i(O),yu=n(O,"LI",{});var s8e=s(yu);Nde=n(s8e,"STRONG",{});var zlt=s(Nde);eCo=r(zlt,"flaubert"),zlt.forEach(t),oCo=r(s8e," \u2014 "),bj=n(s8e,"A",{href:!0});var Wlt=s(bj);rCo=r(Wlt,"FlaubertWithLMHeadModel"),Wlt.forEach(t),tCo=r(s8e," (FlauBERT model)"),s8e.forEach(t),aCo=i(O),xu=n(O,"LI",{});var l8e=s(xu);qde=n(l8e,"STRONG",{});var Qlt=s(qde);nCo=r(Qlt,"flava"),Qlt.forEach(t),sCo=r(l8e," \u2014 "),vj=n(l8e,"A",{href:!0});var Hlt=s(vj);lCo=r(Hlt,"FlavaForPreTraining"),Hlt.forEach(t),iCo=r(l8e," (FLAVA model)"),l8e.forEach(t),dCo=i(O),$u=n(O,"LI",{});var i8e=s($u);jde=n(i8e,"STRONG",{});var Ult=s(jde);cCo=r(Ult,"fnet"),Ult.forEach(t),fCo=r(i8e," \u2014 "),Fj=n(i8e,"A",{href:!0});var Jlt=s(Fj);mCo=r(Jlt,"FNetForPreTraining"),Jlt.forEach(t),gCo=r(i8e," (FNet model)"),i8e.forEach(t),hCo=i(O),ku=n(O,"LI",{});var d8e=s(ku);Dde=n(d8e,"STRONG",{});var Ylt=s(Dde);pCo=r(Ylt,"fsmt"),Ylt.forEach(t),_Co=r(d8e," \u2014 "),Tj=n(d8e,"A",{href:!0});var Klt=s(Tj);uCo=r(Klt,"FSMTForConditionalGeneration"),Klt.forEach(t),bCo=r(d8e," (FairSeq Machine-Translation model)"),d8e.forEach(t),vCo=i(O),Su=n(O,"LI",{});var c8e=s(Su);Gde=n(c8e,"STRONG",{});var Zlt=s(Gde);FCo=r(Zlt,"funnel"),Zlt.forEach(t),TCo=r(c8e," \u2014 "),Mj=n(c8e,"A",{href:!0});var eit=s(Mj);MCo=r(eit,"FunnelForPreTraining"),eit.forEach(t),ECo=r(c8e," (Funnel Transformer model)"),c8e.forEach(t),CCo=i(O),Ru=n(O,"LI",{});var f8e=s(Ru);Ode=n(f8e,"STRONG",{});var oit=s(Ode);wCo=r(oit,"gpt2"),oit.forEach(t),ACo=r(f8e," \u2014 "),Ej=n(f8e,"A",{href:!0});var rit=s(Ej);LCo=r(rit,"GPT2LMHeadModel"),rit.forEach(t),yCo=r(f8e," (OpenAI GPT-2 model)"),f8e.forEach(t),xCo=i(O),Pu=n(O,"LI",{});var m8e=s(Pu);Vde=n(m8e,"STRONG",{});var tit=s(Vde);$Co=r(tit,"ibert"),tit.forEach(t),kCo=r(m8e," \u2014 "),Cj=n(m8e,"A",{href:!0});var ait=s(Cj);SCo=r(ait,"IBertForMaskedLM"),ait.forEach(t),RCo=r(m8e," (I-BERT model)"),m8e.forEach(t),PCo=i(O),Bu=n(O,"LI",{});var g8e=s(Bu);Xde=n(g8e,"STRONG",{});var nit=s(Xde);BCo=r(nit,"layoutlm"),nit.forEach(t),ICo=r(g8e," \u2014 "),wj=n(g8e,"A",{href:!0});var sit=s(wj);NCo=r(sit,"LayoutLMForMaskedLM"),sit.forEach(t),qCo=r(g8e," (LayoutLM model)"),g8e.forEach(t),jCo=i(O),Iu=n(O,"LI",{});var h8e=s(Iu);zde=n(h8e,"STRONG",{});var lit=s(zde);DCo=r(lit,"longformer"),lit.forEach(t),GCo=r(h8e," \u2014 "),Aj=n(h8e,"A",{href:!0});var iit=s(Aj);OCo=r(iit,"LongformerForMaskedLM"),iit.forEach(t),VCo=r(h8e," (Longformer model)"),h8e.forEach(t),XCo=i(O),Nu=n(O,"LI",{});var p8e=s(Nu);Wde=n(p8e,"STRONG",{});var dit=s(Wde);zCo=r(dit,"lxmert"),dit.forEach(t),WCo=r(p8e," \u2014 "),Lj=n(p8e,"A",{href:!0});var cit=s(Lj);QCo=r(cit,"LxmertForPreTraining"),cit.forEach(t),HCo=r(p8e," (LXMERT model)"),p8e.forEach(t),UCo=i(O),qu=n(O,"LI",{});var _8e=s(qu);Qde=n(_8e,"STRONG",{});var fit=s(Qde);JCo=r(fit,"megatron-bert"),fit.forEach(t),YCo=r(_8e," \u2014 "),yj=n(_8e,"A",{href:!0});var mit=s(yj);KCo=r(mit,"MegatronBertForPreTraining"),mit.forEach(t),ZCo=r(_8e," (Megatron-BERT model)"),_8e.forEach(t),e3o=i(O),ju=n(O,"LI",{});var u8e=s(ju);Hde=n(u8e,"STRONG",{});var git=s(Hde);o3o=r(git,"mobilebert"),git.forEach(t),r3o=r(u8e," \u2014 "),xj=n(u8e,"A",{href:!0});var hit=s(xj);t3o=r(hit,"MobileBertForPreTraining"),hit.forEach(t),a3o=r(u8e," (MobileBERT model)"),u8e.forEach(t),n3o=i(O),Du=n(O,"LI",{});var b8e=s(Du);Ude=n(b8e,"STRONG",{});var pit=s(Ude);s3o=r(pit,"mpnet"),pit.forEach(t),l3o=r(b8e," \u2014 "),$j=n(b8e,"A",{href:!0});var _it=s($j);i3o=r(_it,"MPNetForMaskedLM"),_it.forEach(t),d3o=r(b8e," (MPNet model)"),b8e.forEach(t),c3o=i(O),Gu=n(O,"LI",{});var v8e=s(Gu);Jde=n(v8e,"STRONG",{});var uit=s(Jde);f3o=r(uit,"openai-gpt"),uit.forEach(t),m3o=r(v8e," \u2014 "),kj=n(v8e,"A",{href:!0});var bit=s(kj);g3o=r(bit,"OpenAIGPTLMHeadModel"),bit.forEach(t),h3o=r(v8e," (OpenAI GPT model)"),v8e.forEach(t),p3o=i(O),Ou=n(O,"LI",{});var F8e=s(Ou);Yde=n(F8e,"STRONG",{});var vit=s(Yde);_3o=r(vit,"retribert"),vit.forEach(t),u3o=r(F8e," \u2014 "),Sj=n(F8e,"A",{href:!0});var Fit=s(Sj);b3o=r(Fit,"RetriBertModel"),Fit.forEach(t),v3o=r(F8e," (RetriBERT model)"),F8e.forEach(t),F3o=i(O),Vu=n(O,"LI",{});var T8e=s(Vu);Kde=n(T8e,"STRONG",{});var Tit=s(Kde);T3o=r(Tit,"roberta"),Tit.forEach(t),M3o=r(T8e," \u2014 "),Rj=n(T8e,"A",{href:!0});var Mit=s(Rj);E3o=r(Mit,"RobertaForMaskedLM"),Mit.forEach(t),C3o=r(T8e," (RoBERTa model)"),T8e.forEach(t),w3o=i(O),Xu=n(O,"LI",{});var M8e=s(Xu);Zde=n(M8e,"STRONG",{});var Eit=s(Zde);A3o=r(Eit,"splinter"),Eit.forEach(t),L3o=r(M8e," \u2014 "),Pj=n(M8e,"A",{href:!0});var Cit=s(Pj);y3o=r(Cit,"SplinterForPreTraining"),Cit.forEach(t),x3o=r(M8e," (Splinter model)"),M8e.forEach(t),$3o=i(O),zu=n(O,"LI",{});var E8e=s(zu);ece=n(E8e,"STRONG",{});var wit=s(ece);k3o=r(wit,"squeezebert"),wit.forEach(t),S3o=r(E8e," \u2014 "),Bj=n(E8e,"A",{href:!0});var Ait=s(Bj);R3o=r(Ait,"SqueezeBertForMaskedLM"),Ait.forEach(t),P3o=r(E8e," (SqueezeBERT model)"),E8e.forEach(t),B3o=i(O),Wu=n(O,"LI",{});var C8e=s(Wu);oce=n(C8e,"STRONG",{});var Lit=s(oce);I3o=r(Lit,"t5"),Lit.forEach(t),N3o=r(C8e," \u2014 "),Ij=n(C8e,"A",{href:!0});var yit=s(Ij);q3o=r(yit,"T5ForConditionalGeneration"),yit.forEach(t),j3o=r(C8e," (T5 model)"),C8e.forEach(t),D3o=i(O),Qu=n(O,"LI",{});var w8e=s(Qu);rce=n(w8e,"STRONG",{});var xit=s(rce);G3o=r(xit,"tapas"),xit.forEach(t),O3o=r(w8e," \u2014 "),Nj=n(w8e,"A",{href:!0});var $it=s(Nj);V3o=r($it,"TapasForMaskedLM"),$it.forEach(t),X3o=r(w8e," (TAPAS model)"),w8e.forEach(t),z3o=i(O),Hu=n(O,"LI",{});var A8e=s(Hu);tce=n(A8e,"STRONG",{});var kit=s(tce);W3o=r(kit,"transfo-xl"),kit.forEach(t),Q3o=r(A8e," \u2014 "),qj=n(A8e,"A",{href:!0});var Sit=s(qj);H3o=r(Sit,"TransfoXLLMHeadModel"),Sit.forEach(t),U3o=r(A8e," (Transformer-XL model)"),A8e.forEach(t),J3o=i(O),Uu=n(O,"LI",{});var L8e=s(Uu);ace=n(L8e,"STRONG",{});var Rit=s(ace);Y3o=r(Rit,"unispeech"),Rit.forEach(t),K3o=r(L8e," \u2014 "),jj=n(L8e,"A",{href:!0});var Pit=s(jj);Z3o=r(Pit,"UniSpeechForPreTraining"),Pit.forEach(t),e0o=r(L8e," (UniSpeech model)"),L8e.forEach(t),o0o=i(O),Ju=n(O,"LI",{});var y8e=s(Ju);nce=n(y8e,"STRONG",{});var Bit=s(nce);r0o=r(Bit,"unispeech-sat"),Bit.forEach(t),t0o=r(y8e," \u2014 "),Dj=n(y8e,"A",{href:!0});var Iit=s(Dj);a0o=r(Iit,"UniSpeechSatForPreTraining"),Iit.forEach(t),n0o=r(y8e," (UniSpeechSat model)"),y8e.forEach(t),s0o=i(O),Yu=n(O,"LI",{});var x8e=s(Yu);sce=n(x8e,"STRONG",{});var Nit=s(sce);l0o=r(Nit,"visual_bert"),Nit.forEach(t),i0o=r(x8e," \u2014 "),Gj=n(x8e,"A",{href:!0});var qit=s(Gj);d0o=r(qit,"VisualBertForPreTraining"),qit.forEach(t),c0o=r(x8e," (VisualBERT model)"),x8e.forEach(t),f0o=i(O),Ku=n(O,"LI",{});var $8e=s(Ku);lce=n($8e,"STRONG",{});var jit=s(lce);m0o=r(jit,"vit_mae"),jit.forEach(t),g0o=r($8e," \u2014 "),Oj=n($8e,"A",{href:!0});var Dit=s(Oj);h0o=r(Dit,"ViTMAEForPreTraining"),Dit.forEach(t),p0o=r($8e," (ViTMAE model)"),$8e.forEach(t),_0o=i(O),Zu=n(O,"LI",{});var k8e=s(Zu);ice=n(k8e,"STRONG",{});var Git=s(ice);u0o=r(Git,"wav2vec2"),Git.forEach(t),b0o=r(k8e," \u2014 "),Vj=n(k8e,"A",{href:!0});var Oit=s(Vj);v0o=r(Oit,"Wav2Vec2ForPreTraining"),Oit.forEach(t),F0o=r(k8e," (Wav2Vec2 model)"),k8e.forEach(t),T0o=i(O),e5=n(O,"LI",{});var S8e=s(e5);dce=n(S8e,"STRONG",{});var Vit=s(dce);M0o=r(Vit,"wav2vec2-conformer"),Vit.forEach(t),E0o=r(S8e," \u2014 "),Xj=n(S8e,"A",{href:!0});var Xit=s(Xj);C0o=r(Xit,"Wav2Vec2ConformerForPreTraining"),Xit.forEach(t),w0o=r(S8e," (Wav2Vec2-Conformer model)"),S8e.forEach(t),A0o=i(O),o5=n(O,"LI",{});var R8e=s(o5);cce=n(R8e,"STRONG",{});var zit=s(cce);L0o=r(zit,"xlm"),zit.forEach(t),y0o=r(R8e," \u2014 "),zj=n(R8e,"A",{href:!0});var Wit=s(zj);x0o=r(Wit,"XLMWithLMHeadModel"),Wit.forEach(t),$0o=r(R8e," (XLM model)"),R8e.forEach(t),k0o=i(O),r5=n(O,"LI",{});var P8e=s(r5);fce=n(P8e,"STRONG",{});var Qit=s(fce);S0o=r(Qit,"xlm-roberta"),Qit.forEach(t),R0o=r(P8e," \u2014 "),Wj=n(P8e,"A",{href:!0});var Hit=s(Wj);P0o=r(Hit,"XLMRobertaForMaskedLM"),Hit.forEach(t),B0o=r(P8e," (XLM-RoBERTa model)"),P8e.forEach(t),I0o=i(O),t5=n(O,"LI",{});var B8e=s(t5);mce=n(B8e,"STRONG",{});var Uit=s(mce);N0o=r(Uit,"xlm-roberta-xl"),Uit.forEach(t),q0o=r(B8e," \u2014 "),Qj=n(B8e,"A",{href:!0});var Jit=s(Qj);j0o=r(Jit,"XLMRobertaXLForMaskedLM"),Jit.forEach(t),D0o=r(B8e," (XLM-RoBERTa-XL model)"),B8e.forEach(t),G0o=i(O),a5=n(O,"LI",{});var I8e=s(a5);gce=n(I8e,"STRONG",{});var Yit=s(gce);O0o=r(Yit,"xlnet"),Yit.forEach(t),V0o=r(I8e," \u2014 "),Hj=n(I8e,"A",{href:!0});var Kit=s(Hj);X0o=r(Kit,"XLNetLMHeadModel"),Kit.forEach(t),z0o=r(I8e," (XLNet model)"),I8e.forEach(t),O.forEach(t),W0o=i(ta),n5=n(ta,"P",{});var N8e=s(n5);Q0o=r(N8e,"The model is set in evaluation mode by default using "),hce=n(N8e,"CODE",{});var Zit=s(hce);H0o=r(Zit,"model.eval()"),Zit.forEach(t),U0o=r(N8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(N8e,"CODE",{});var edt=s(pce);J0o=r(edt,"model.train()"),edt.forEach(t),N8e.forEach(t),Y0o=i(ta),T(s5.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Oje=i(f),Ri=n(f,"H2",{class:!0});var WGe=s(Ri);l5=n(WGe,"A",{id:!0,class:!0,href:!0});var odt=s(l5);_ce=n(odt,"SPAN",{});var rdt=s(_ce);T(xL.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),K0o=i(WGe),uce=n(WGe,"SPAN",{});var tdt=s(uce);Z0o=r(tdt,"AutoModelForCausalLM"),tdt.forEach(t),WGe.forEach(t),Vje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T($L.$$.fragment,Xs),ewo=i(Xs),Pi=n(Xs,"P",{});var lee=s(Pi);owo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uj=n(lee,"A",{href:!0});var adt=s(Uj);rwo=r(adt,"from_pretrained()"),adt.forEach(t),two=r(lee," class method or the "),Jj=n(lee,"A",{href:!0});var ndt=s(Jj);awo=r(ndt,"from_config()"),ndt.forEach(t),nwo=r(lee,` class
method.`),lee.forEach(t),swo=i(Xs),kL=n(Xs,"P",{});var QGe=s(kL);lwo=r(QGe,"This class cannot be instantiated directly using "),bce=n(QGe,"CODE",{});var sdt=s(bce);iwo=r(sdt,"__init__()"),sdt.forEach(t),dwo=r(QGe," (throws an error)."),QGe.forEach(t),cwo=i(Xs),st=n(Xs,"DIV",{class:!0});var rA=s(st);T(SL.$$.fragment,rA),fwo=i(rA),vce=n(rA,"P",{});var ldt=s(vce);mwo=r(ldt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ldt.forEach(t),gwo=i(rA),Bi=n(rA,"P",{});var iee=s(Bi);hwo=r(iee,`Note:
Loading a model from its configuration file does `),Fce=n(iee,"STRONG",{});var idt=s(Fce);pwo=r(idt,"not"),idt.forEach(t),_wo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=n(iee,"A",{href:!0});var ddt=s(Yj);uwo=r(ddt,"from_pretrained()"),ddt.forEach(t),bwo=r(iee," to load the model weights."),iee.forEach(t),vwo=i(rA),T(i5.$$.fragment,rA),rA.forEach(t),Fwo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var aa=s(Ke);T(RL.$$.fragment,aa),Two=i(aa),Tce=n(aa,"P",{});var cdt=s(Tce);Mwo=r(cdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cdt.forEach(t),Ewo=i(aa),ka=n(aa,"P",{});var tA=s(ka);Cwo=r(tA,"The model class to instantiate is selected based on the "),Mce=n(tA,"CODE",{});var fdt=s(Mce);wwo=r(fdt,"model_type"),fdt.forEach(t),Awo=r(tA,` property of the config object (either
passed as an argument or loaded from `),Ece=n(tA,"CODE",{});var mdt=s(Ece);Lwo=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),ywo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(tA,"CODE",{});var gdt=s(Cce);xwo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),$wo=r(tA,":"),tA.forEach(t),kwo=i(aa),z=n(aa,"UL",{});var W=s(z);d5=n(W,"LI",{});var q8e=s(d5);wce=n(q8e,"STRONG",{});var hdt=s(wce);Swo=r(hdt,"bart"),hdt.forEach(t),Rwo=r(q8e," \u2014 "),Kj=n(q8e,"A",{href:!0});var pdt=s(Kj);Pwo=r(pdt,"BartForCausalLM"),pdt.forEach(t),Bwo=r(q8e," (BART model)"),q8e.forEach(t),Iwo=i(W),c5=n(W,"LI",{});var j8e=s(c5);Ace=n(j8e,"STRONG",{});var _dt=s(Ace);Nwo=r(_dt,"bert"),_dt.forEach(t),qwo=r(j8e," \u2014 "),Zj=n(j8e,"A",{href:!0});var udt=s(Zj);jwo=r(udt,"BertLMHeadModel"),udt.forEach(t),Dwo=r(j8e," (BERT model)"),j8e.forEach(t),Gwo=i(W),f5=n(W,"LI",{});var D8e=s(f5);Lce=n(D8e,"STRONG",{});var bdt=s(Lce);Owo=r(bdt,"bert-generation"),bdt.forEach(t),Vwo=r(D8e," \u2014 "),eD=n(D8e,"A",{href:!0});var vdt=s(eD);Xwo=r(vdt,"BertGenerationDecoder"),vdt.forEach(t),zwo=r(D8e," (Bert Generation model)"),D8e.forEach(t),Wwo=i(W),m5=n(W,"LI",{});var G8e=s(m5);yce=n(G8e,"STRONG",{});var Fdt=s(yce);Qwo=r(Fdt,"big_bird"),Fdt.forEach(t),Hwo=r(G8e," \u2014 "),oD=n(G8e,"A",{href:!0});var Tdt=s(oD);Uwo=r(Tdt,"BigBirdForCausalLM"),Tdt.forEach(t),Jwo=r(G8e," (BigBird model)"),G8e.forEach(t),Ywo=i(W),g5=n(W,"LI",{});var O8e=s(g5);xce=n(O8e,"STRONG",{});var Mdt=s(xce);Kwo=r(Mdt,"bigbird_pegasus"),Mdt.forEach(t),Zwo=r(O8e," \u2014 "),rD=n(O8e,"A",{href:!0});var Edt=s(rD);eAo=r(Edt,"BigBirdPegasusForCausalLM"),Edt.forEach(t),oAo=r(O8e," (BigBird-Pegasus model)"),O8e.forEach(t),rAo=i(W),h5=n(W,"LI",{});var V8e=s(h5);$ce=n(V8e,"STRONG",{});var Cdt=s($ce);tAo=r(Cdt,"blenderbot"),Cdt.forEach(t),aAo=r(V8e," \u2014 "),tD=n(V8e,"A",{href:!0});var wdt=s(tD);nAo=r(wdt,"BlenderbotForCausalLM"),wdt.forEach(t),sAo=r(V8e," (Blenderbot model)"),V8e.forEach(t),lAo=i(W),p5=n(W,"LI",{});var X8e=s(p5);kce=n(X8e,"STRONG",{});var Adt=s(kce);iAo=r(Adt,"blenderbot-small"),Adt.forEach(t),dAo=r(X8e," \u2014 "),aD=n(X8e,"A",{href:!0});var Ldt=s(aD);cAo=r(Ldt,"BlenderbotSmallForCausalLM"),Ldt.forEach(t),fAo=r(X8e," (BlenderbotSmall model)"),X8e.forEach(t),mAo=i(W),_5=n(W,"LI",{});var z8e=s(_5);Sce=n(z8e,"STRONG",{});var ydt=s(Sce);gAo=r(ydt,"bloom"),ydt.forEach(t),hAo=r(z8e," \u2014 "),nD=n(z8e,"A",{href:!0});var xdt=s(nD);pAo=r(xdt,"BloomForCausalLM"),xdt.forEach(t),_Ao=r(z8e," (BLOOM model)"),z8e.forEach(t),uAo=i(W),u5=n(W,"LI",{});var W8e=s(u5);Rce=n(W8e,"STRONG",{});var $dt=s(Rce);bAo=r($dt,"camembert"),$dt.forEach(t),vAo=r(W8e," \u2014 "),sD=n(W8e,"A",{href:!0});var kdt=s(sD);FAo=r(kdt,"CamembertForCausalLM"),kdt.forEach(t),TAo=r(W8e," (CamemBERT model)"),W8e.forEach(t),MAo=i(W),b5=n(W,"LI",{});var Q8e=s(b5);Pce=n(Q8e,"STRONG",{});var Sdt=s(Pce);EAo=r(Sdt,"ctrl"),Sdt.forEach(t),CAo=r(Q8e," \u2014 "),lD=n(Q8e,"A",{href:!0});var Rdt=s(lD);wAo=r(Rdt,"CTRLLMHeadModel"),Rdt.forEach(t),AAo=r(Q8e," (CTRL model)"),Q8e.forEach(t),LAo=i(W),v5=n(W,"LI",{});var H8e=s(v5);Bce=n(H8e,"STRONG",{});var Pdt=s(Bce);yAo=r(Pdt,"data2vec-text"),Pdt.forEach(t),xAo=r(H8e," \u2014 "),iD=n(H8e,"A",{href:!0});var Bdt=s(iD);$Ao=r(Bdt,"Data2VecTextForCausalLM"),Bdt.forEach(t),kAo=r(H8e," (Data2VecText model)"),H8e.forEach(t),SAo=i(W),F5=n(W,"LI",{});var U8e=s(F5);Ice=n(U8e,"STRONG",{});var Idt=s(Ice);RAo=r(Idt,"electra"),Idt.forEach(t),PAo=r(U8e," \u2014 "),dD=n(U8e,"A",{href:!0});var Ndt=s(dD);BAo=r(Ndt,"ElectraForCausalLM"),Ndt.forEach(t),IAo=r(U8e," (ELECTRA model)"),U8e.forEach(t),NAo=i(W),T5=n(W,"LI",{});var J8e=s(T5);Nce=n(J8e,"STRONG",{});var qdt=s(Nce);qAo=r(qdt,"gpt2"),qdt.forEach(t),jAo=r(J8e," \u2014 "),cD=n(J8e,"A",{href:!0});var jdt=s(cD);DAo=r(jdt,"GPT2LMHeadModel"),jdt.forEach(t),GAo=r(J8e," (OpenAI GPT-2 model)"),J8e.forEach(t),OAo=i(W),M5=n(W,"LI",{});var Y8e=s(M5);qce=n(Y8e,"STRONG",{});var Ddt=s(qce);VAo=r(Ddt,"gpt_neo"),Ddt.forEach(t),XAo=r(Y8e," \u2014 "),fD=n(Y8e,"A",{href:!0});var Gdt=s(fD);zAo=r(Gdt,"GPTNeoForCausalLM"),Gdt.forEach(t),WAo=r(Y8e," (GPT Neo model)"),Y8e.forEach(t),QAo=i(W),E5=n(W,"LI",{});var K8e=s(E5);jce=n(K8e,"STRONG",{});var Odt=s(jce);HAo=r(Odt,"gpt_neox"),Odt.forEach(t),UAo=r(K8e," \u2014 "),mD=n(K8e,"A",{href:!0});var Vdt=s(mD);JAo=r(Vdt,"GPTNeoXForCausalLM"),Vdt.forEach(t),YAo=r(K8e," (GPT NeoX model)"),K8e.forEach(t),KAo=i(W),C5=n(W,"LI",{});var Z8e=s(C5);Dce=n(Z8e,"STRONG",{});var Xdt=s(Dce);ZAo=r(Xdt,"gptj"),Xdt.forEach(t),e6o=r(Z8e," \u2014 "),gD=n(Z8e,"A",{href:!0});var zdt=s(gD);o6o=r(zdt,"GPTJForCausalLM"),zdt.forEach(t),r6o=r(Z8e," (GPT-J model)"),Z8e.forEach(t),t6o=i(W),w5=n(W,"LI",{});var e9e=s(w5);Gce=n(e9e,"STRONG",{});var Wdt=s(Gce);a6o=r(Wdt,"marian"),Wdt.forEach(t),n6o=r(e9e," \u2014 "),hD=n(e9e,"A",{href:!0});var Qdt=s(hD);s6o=r(Qdt,"MarianForCausalLM"),Qdt.forEach(t),l6o=r(e9e," (Marian model)"),e9e.forEach(t),i6o=i(W),A5=n(W,"LI",{});var o9e=s(A5);Oce=n(o9e,"STRONG",{});var Hdt=s(Oce);d6o=r(Hdt,"mbart"),Hdt.forEach(t),c6o=r(o9e," \u2014 "),pD=n(o9e,"A",{href:!0});var Udt=s(pD);f6o=r(Udt,"MBartForCausalLM"),Udt.forEach(t),m6o=r(o9e," (mBART model)"),o9e.forEach(t),g6o=i(W),L5=n(W,"LI",{});var r9e=s(L5);Vce=n(r9e,"STRONG",{});var Jdt=s(Vce);h6o=r(Jdt,"megatron-bert"),Jdt.forEach(t),p6o=r(r9e," \u2014 "),_D=n(r9e,"A",{href:!0});var Ydt=s(_D);_6o=r(Ydt,"MegatronBertForCausalLM"),Ydt.forEach(t),u6o=r(r9e," (Megatron-BERT model)"),r9e.forEach(t),b6o=i(W),y5=n(W,"LI",{});var t9e=s(y5);Xce=n(t9e,"STRONG",{});var Kdt=s(Xce);v6o=r(Kdt,"openai-gpt"),Kdt.forEach(t),F6o=r(t9e," \u2014 "),uD=n(t9e,"A",{href:!0});var Zdt=s(uD);T6o=r(Zdt,"OpenAIGPTLMHeadModel"),Zdt.forEach(t),M6o=r(t9e," (OpenAI GPT model)"),t9e.forEach(t),E6o=i(W),x5=n(W,"LI",{});var a9e=s(x5);zce=n(a9e,"STRONG",{});var ect=s(zce);C6o=r(ect,"opt"),ect.forEach(t),w6o=r(a9e," \u2014 "),bD=n(a9e,"A",{href:!0});var oct=s(bD);A6o=r(oct,"OPTForCausalLM"),oct.forEach(t),L6o=r(a9e," (OPT model)"),a9e.forEach(t),y6o=i(W),$5=n(W,"LI",{});var n9e=s($5);Wce=n(n9e,"STRONG",{});var rct=s(Wce);x6o=r(rct,"pegasus"),rct.forEach(t),$6o=r(n9e," \u2014 "),vD=n(n9e,"A",{href:!0});var tct=s(vD);k6o=r(tct,"PegasusForCausalLM"),tct.forEach(t),S6o=r(n9e," (Pegasus model)"),n9e.forEach(t),R6o=i(W),k5=n(W,"LI",{});var s9e=s(k5);Qce=n(s9e,"STRONG",{});var act=s(Qce);P6o=r(act,"plbart"),act.forEach(t),B6o=r(s9e," \u2014 "),FD=n(s9e,"A",{href:!0});var nct=s(FD);I6o=r(nct,"PLBartForCausalLM"),nct.forEach(t),N6o=r(s9e," (PLBart model)"),s9e.forEach(t),q6o=i(W),S5=n(W,"LI",{});var l9e=s(S5);Hce=n(l9e,"STRONG",{});var sct=s(Hce);j6o=r(sct,"prophetnet"),sct.forEach(t),D6o=r(l9e," \u2014 "),TD=n(l9e,"A",{href:!0});var lct=s(TD);G6o=r(lct,"ProphetNetForCausalLM"),lct.forEach(t),O6o=r(l9e," (ProphetNet model)"),l9e.forEach(t),V6o=i(W),R5=n(W,"LI",{});var i9e=s(R5);Uce=n(i9e,"STRONG",{});var ict=s(Uce);X6o=r(ict,"qdqbert"),ict.forEach(t),z6o=r(i9e," \u2014 "),MD=n(i9e,"A",{href:!0});var dct=s(MD);W6o=r(dct,"QDQBertLMHeadModel"),dct.forEach(t),Q6o=r(i9e," (QDQBert model)"),i9e.forEach(t),H6o=i(W),P5=n(W,"LI",{});var d9e=s(P5);Jce=n(d9e,"STRONG",{});var cct=s(Jce);U6o=r(cct,"reformer"),cct.forEach(t),J6o=r(d9e," \u2014 "),ED=n(d9e,"A",{href:!0});var fct=s(ED);Y6o=r(fct,"ReformerModelWithLMHead"),fct.forEach(t),K6o=r(d9e," (Reformer model)"),d9e.forEach(t),Z6o=i(W),B5=n(W,"LI",{});var c9e=s(B5);Yce=n(c9e,"STRONG",{});var mct=s(Yce);eLo=r(mct,"rembert"),mct.forEach(t),oLo=r(c9e," \u2014 "),CD=n(c9e,"A",{href:!0});var gct=s(CD);rLo=r(gct,"RemBertForCausalLM"),gct.forEach(t),tLo=r(c9e," (RemBERT model)"),c9e.forEach(t),aLo=i(W),I5=n(W,"LI",{});var f9e=s(I5);Kce=n(f9e,"STRONG",{});var hct=s(Kce);nLo=r(hct,"roberta"),hct.forEach(t),sLo=r(f9e," \u2014 "),wD=n(f9e,"A",{href:!0});var pct=s(wD);lLo=r(pct,"RobertaForCausalLM"),pct.forEach(t),iLo=r(f9e," (RoBERTa model)"),f9e.forEach(t),dLo=i(W),N5=n(W,"LI",{});var m9e=s(N5);Zce=n(m9e,"STRONG",{});var _ct=s(Zce);cLo=r(_ct,"roformer"),_ct.forEach(t),fLo=r(m9e," \u2014 "),AD=n(m9e,"A",{href:!0});var uct=s(AD);mLo=r(uct,"RoFormerForCausalLM"),uct.forEach(t),gLo=r(m9e," (RoFormer model)"),m9e.forEach(t),hLo=i(W),q5=n(W,"LI",{});var g9e=s(q5);efe=n(g9e,"STRONG",{});var bct=s(efe);pLo=r(bct,"speech_to_text_2"),bct.forEach(t),_Lo=r(g9e," \u2014 "),LD=n(g9e,"A",{href:!0});var vct=s(LD);uLo=r(vct,"Speech2Text2ForCausalLM"),vct.forEach(t),bLo=r(g9e," (Speech2Text2 model)"),g9e.forEach(t),vLo=i(W),j5=n(W,"LI",{});var h9e=s(j5);ofe=n(h9e,"STRONG",{});var Fct=s(ofe);FLo=r(Fct,"transfo-xl"),Fct.forEach(t),TLo=r(h9e," \u2014 "),yD=n(h9e,"A",{href:!0});var Tct=s(yD);MLo=r(Tct,"TransfoXLLMHeadModel"),Tct.forEach(t),ELo=r(h9e," (Transformer-XL model)"),h9e.forEach(t),CLo=i(W),D5=n(W,"LI",{});var p9e=s(D5);rfe=n(p9e,"STRONG",{});var Mct=s(rfe);wLo=r(Mct,"trocr"),Mct.forEach(t),ALo=r(p9e," \u2014 "),xD=n(p9e,"A",{href:!0});var Ect=s(xD);LLo=r(Ect,"TrOCRForCausalLM"),Ect.forEach(t),yLo=r(p9e," (TrOCR model)"),p9e.forEach(t),xLo=i(W),G5=n(W,"LI",{});var _9e=s(G5);tfe=n(_9e,"STRONG",{});var Cct=s(tfe);$Lo=r(Cct,"xglm"),Cct.forEach(t),kLo=r(_9e," \u2014 "),$D=n(_9e,"A",{href:!0});var wct=s($D);SLo=r(wct,"XGLMForCausalLM"),wct.forEach(t),RLo=r(_9e," (XGLM model)"),_9e.forEach(t),PLo=i(W),O5=n(W,"LI",{});var u9e=s(O5);afe=n(u9e,"STRONG",{});var Act=s(afe);BLo=r(Act,"xlm"),Act.forEach(t),ILo=r(u9e," \u2014 "),kD=n(u9e,"A",{href:!0});var Lct=s(kD);NLo=r(Lct,"XLMWithLMHeadModel"),Lct.forEach(t),qLo=r(u9e," (XLM model)"),u9e.forEach(t),jLo=i(W),V5=n(W,"LI",{});var b9e=s(V5);nfe=n(b9e,"STRONG",{});var yct=s(nfe);DLo=r(yct,"xlm-prophetnet"),yct.forEach(t),GLo=r(b9e," \u2014 "),SD=n(b9e,"A",{href:!0});var xct=s(SD);OLo=r(xct,"XLMProphetNetForCausalLM"),xct.forEach(t),VLo=r(b9e," (XLM-ProphetNet model)"),b9e.forEach(t),XLo=i(W),X5=n(W,"LI",{});var v9e=s(X5);sfe=n(v9e,"STRONG",{});var $ct=s(sfe);zLo=r($ct,"xlm-roberta"),$ct.forEach(t),WLo=r(v9e," \u2014 "),RD=n(v9e,"A",{href:!0});var kct=s(RD);QLo=r(kct,"XLMRobertaForCausalLM"),kct.forEach(t),HLo=r(v9e," (XLM-RoBERTa model)"),v9e.forEach(t),ULo=i(W),z5=n(W,"LI",{});var F9e=s(z5);lfe=n(F9e,"STRONG",{});var Sct=s(lfe);JLo=r(Sct,"xlm-roberta-xl"),Sct.forEach(t),YLo=r(F9e," \u2014 "),PD=n(F9e,"A",{href:!0});var Rct=s(PD);KLo=r(Rct,"XLMRobertaXLForCausalLM"),Rct.forEach(t),ZLo=r(F9e," (XLM-RoBERTa-XL model)"),F9e.forEach(t),eyo=i(W),W5=n(W,"LI",{});var T9e=s(W5);ife=n(T9e,"STRONG",{});var Pct=s(ife);oyo=r(Pct,"xlnet"),Pct.forEach(t),ryo=r(T9e," \u2014 "),BD=n(T9e,"A",{href:!0});var Bct=s(BD);tyo=r(Bct,"XLNetLMHeadModel"),Bct.forEach(t),ayo=r(T9e," (XLNet model)"),T9e.forEach(t),W.forEach(t),nyo=i(aa),Q5=n(aa,"P",{});var M9e=s(Q5);syo=r(M9e,"The model is set in evaluation mode by default using "),dfe=n(M9e,"CODE",{});var Ict=s(dfe);lyo=r(Ict,"model.eval()"),Ict.forEach(t),iyo=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=n(M9e,"CODE",{});var Nct=s(cfe);dyo=r(Nct,"model.train()"),Nct.forEach(t),M9e.forEach(t),cyo=i(aa),T(H5.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Xje=i(f),Ii=n(f,"H2",{class:!0});var HGe=s(Ii);U5=n(HGe,"A",{id:!0,class:!0,href:!0});var qct=s(U5);ffe=n(qct,"SPAN",{});var jct=s(ffe);T(PL.$$.fragment,jct),jct.forEach(t),qct.forEach(t),fyo=i(HGe),mfe=n(HGe,"SPAN",{});var Dct=s(mfe);myo=r(Dct,"AutoModelForMaskedLM"),Dct.forEach(t),HGe.forEach(t),zje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(BL.$$.fragment,zs),gyo=i(zs),Ni=n(zs,"P",{});var dee=s(Ni);hyo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ID=n(dee,"A",{href:!0});var Gct=s(ID);pyo=r(Gct,"from_pretrained()"),Gct.forEach(t),_yo=r(dee," class method or the "),ND=n(dee,"A",{href:!0});var Oct=s(ND);uyo=r(Oct,"from_config()"),Oct.forEach(t),byo=r(dee,` class
method.`),dee.forEach(t),vyo=i(zs),IL=n(zs,"P",{});var UGe=s(IL);Fyo=r(UGe,"This class cannot be instantiated directly using "),gfe=n(UGe,"CODE",{});var Vct=s(gfe);Tyo=r(Vct,"__init__()"),Vct.forEach(t),Myo=r(UGe," (throws an error)."),UGe.forEach(t),Eyo=i(zs),lt=n(zs,"DIV",{class:!0});var aA=s(lt);T(NL.$$.fragment,aA),Cyo=i(aA),hfe=n(aA,"P",{});var Xct=s(hfe);wyo=r(Xct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xct.forEach(t),Ayo=i(aA),qi=n(aA,"P",{});var cee=s(qi);Lyo=r(cee,`Note:
Loading a model from its configuration file does `),pfe=n(cee,"STRONG",{});var zct=s(pfe);yyo=r(zct,"not"),zct.forEach(t),xyo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(cee,"A",{href:!0});var Wct=s(qD);$yo=r(Wct,"from_pretrained()"),Wct.forEach(t),kyo=r(cee," to load the model weights."),cee.forEach(t),Syo=i(aA),T(J5.$$.fragment,aA),aA.forEach(t),Ryo=i(zs),Ze=n(zs,"DIV",{class:!0});var na=s(Ze);T(qL.$$.fragment,na),Pyo=i(na),_fe=n(na,"P",{});var Qct=s(_fe);Byo=r(Qct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qct.forEach(t),Iyo=i(na),Sa=n(na,"P",{});var nA=s(Sa);Nyo=r(nA,"The model class to instantiate is selected based on the "),ufe=n(nA,"CODE",{});var Hct=s(ufe);qyo=r(Hct,"model_type"),Hct.forEach(t),jyo=r(nA,` property of the config object (either
passed as an argument or loaded from `),bfe=n(nA,"CODE",{});var Uct=s(bfe);Dyo=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),Gyo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(nA,"CODE",{});var Jct=s(vfe);Oyo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),Vyo=r(nA,":"),nA.forEach(t),Xyo=i(na),Q=n(na,"UL",{});var H=s(Q);Y5=n(H,"LI",{});var E9e=s(Y5);Ffe=n(E9e,"STRONG",{});var Yct=s(Ffe);zyo=r(Yct,"albert"),Yct.forEach(t),Wyo=r(E9e," \u2014 "),jD=n(E9e,"A",{href:!0});var Kct=s(jD);Qyo=r(Kct,"AlbertForMaskedLM"),Kct.forEach(t),Hyo=r(E9e," (ALBERT model)"),E9e.forEach(t),Uyo=i(H),K5=n(H,"LI",{});var C9e=s(K5);Tfe=n(C9e,"STRONG",{});var Zct=s(Tfe);Jyo=r(Zct,"bart"),Zct.forEach(t),Yyo=r(C9e," \u2014 "),DD=n(C9e,"A",{href:!0});var eft=s(DD);Kyo=r(eft,"BartForConditionalGeneration"),eft.forEach(t),Zyo=r(C9e," (BART model)"),C9e.forEach(t),e8o=i(H),Z5=n(H,"LI",{});var w9e=s(Z5);Mfe=n(w9e,"STRONG",{});var oft=s(Mfe);o8o=r(oft,"bert"),oft.forEach(t),r8o=r(w9e," \u2014 "),GD=n(w9e,"A",{href:!0});var rft=s(GD);t8o=r(rft,"BertForMaskedLM"),rft.forEach(t),a8o=r(w9e," (BERT model)"),w9e.forEach(t),n8o=i(H),e1=n(H,"LI",{});var A9e=s(e1);Efe=n(A9e,"STRONG",{});var tft=s(Efe);s8o=r(tft,"big_bird"),tft.forEach(t),l8o=r(A9e," \u2014 "),OD=n(A9e,"A",{href:!0});var aft=s(OD);i8o=r(aft,"BigBirdForMaskedLM"),aft.forEach(t),d8o=r(A9e," (BigBird model)"),A9e.forEach(t),c8o=i(H),o1=n(H,"LI",{});var L9e=s(o1);Cfe=n(L9e,"STRONG",{});var nft=s(Cfe);f8o=r(nft,"camembert"),nft.forEach(t),m8o=r(L9e," \u2014 "),VD=n(L9e,"A",{href:!0});var sft=s(VD);g8o=r(sft,"CamembertForMaskedLM"),sft.forEach(t),h8o=r(L9e," (CamemBERT model)"),L9e.forEach(t),p8o=i(H),r1=n(H,"LI",{});var y9e=s(r1);wfe=n(y9e,"STRONG",{});var lft=s(wfe);_8o=r(lft,"convbert"),lft.forEach(t),u8o=r(y9e," \u2014 "),XD=n(y9e,"A",{href:!0});var ift=s(XD);b8o=r(ift,"ConvBertForMaskedLM"),ift.forEach(t),v8o=r(y9e," (ConvBERT model)"),y9e.forEach(t),F8o=i(H),t1=n(H,"LI",{});var x9e=s(t1);Afe=n(x9e,"STRONG",{});var dft=s(Afe);T8o=r(dft,"data2vec-text"),dft.forEach(t),M8o=r(x9e," \u2014 "),zD=n(x9e,"A",{href:!0});var cft=s(zD);E8o=r(cft,"Data2VecTextForMaskedLM"),cft.forEach(t),C8o=r(x9e," (Data2VecText model)"),x9e.forEach(t),w8o=i(H),a1=n(H,"LI",{});var $9e=s(a1);Lfe=n($9e,"STRONG",{});var fft=s(Lfe);A8o=r(fft,"deberta"),fft.forEach(t),L8o=r($9e," \u2014 "),WD=n($9e,"A",{href:!0});var mft=s(WD);y8o=r(mft,"DebertaForMaskedLM"),mft.forEach(t),x8o=r($9e," (DeBERTa model)"),$9e.forEach(t),$8o=i(H),n1=n(H,"LI",{});var k9e=s(n1);yfe=n(k9e,"STRONG",{});var gft=s(yfe);k8o=r(gft,"deberta-v2"),gft.forEach(t),S8o=r(k9e," \u2014 "),QD=n(k9e,"A",{href:!0});var hft=s(QD);R8o=r(hft,"DebertaV2ForMaskedLM"),hft.forEach(t),P8o=r(k9e," (DeBERTa-v2 model)"),k9e.forEach(t),B8o=i(H),s1=n(H,"LI",{});var S9e=s(s1);xfe=n(S9e,"STRONG",{});var pft=s(xfe);I8o=r(pft,"distilbert"),pft.forEach(t),N8o=r(S9e," \u2014 "),HD=n(S9e,"A",{href:!0});var _ft=s(HD);q8o=r(_ft,"DistilBertForMaskedLM"),_ft.forEach(t),j8o=r(S9e," (DistilBERT model)"),S9e.forEach(t),D8o=i(H),l1=n(H,"LI",{});var R9e=s(l1);$fe=n(R9e,"STRONG",{});var uft=s($fe);G8o=r(uft,"electra"),uft.forEach(t),O8o=r(R9e," \u2014 "),UD=n(R9e,"A",{href:!0});var bft=s(UD);V8o=r(bft,"ElectraForMaskedLM"),bft.forEach(t),X8o=r(R9e," (ELECTRA model)"),R9e.forEach(t),z8o=i(H),i1=n(H,"LI",{});var P9e=s(i1);kfe=n(P9e,"STRONG",{});var vft=s(kfe);W8o=r(vft,"flaubert"),vft.forEach(t),Q8o=r(P9e," \u2014 "),JD=n(P9e,"A",{href:!0});var Fft=s(JD);H8o=r(Fft,"FlaubertWithLMHeadModel"),Fft.forEach(t),U8o=r(P9e," (FlauBERT model)"),P9e.forEach(t),J8o=i(H),d1=n(H,"LI",{});var B9e=s(d1);Sfe=n(B9e,"STRONG",{});var Tft=s(Sfe);Y8o=r(Tft,"fnet"),Tft.forEach(t),K8o=r(B9e," \u2014 "),YD=n(B9e,"A",{href:!0});var Mft=s(YD);Z8o=r(Mft,"FNetForMaskedLM"),Mft.forEach(t),e9o=r(B9e," (FNet model)"),B9e.forEach(t),o9o=i(H),c1=n(H,"LI",{});var I9e=s(c1);Rfe=n(I9e,"STRONG",{});var Eft=s(Rfe);r9o=r(Eft,"funnel"),Eft.forEach(t),t9o=r(I9e," \u2014 "),KD=n(I9e,"A",{href:!0});var Cft=s(KD);a9o=r(Cft,"FunnelForMaskedLM"),Cft.forEach(t),n9o=r(I9e," (Funnel Transformer model)"),I9e.forEach(t),s9o=i(H),f1=n(H,"LI",{});var N9e=s(f1);Pfe=n(N9e,"STRONG",{});var wft=s(Pfe);l9o=r(wft,"ibert"),wft.forEach(t),i9o=r(N9e," \u2014 "),ZD=n(N9e,"A",{href:!0});var Aft=s(ZD);d9o=r(Aft,"IBertForMaskedLM"),Aft.forEach(t),c9o=r(N9e," (I-BERT model)"),N9e.forEach(t),f9o=i(H),m1=n(H,"LI",{});var q9e=s(m1);Bfe=n(q9e,"STRONG",{});var Lft=s(Bfe);m9o=r(Lft,"layoutlm"),Lft.forEach(t),g9o=r(q9e," \u2014 "),eG=n(q9e,"A",{href:!0});var yft=s(eG);h9o=r(yft,"LayoutLMForMaskedLM"),yft.forEach(t),p9o=r(q9e," (LayoutLM model)"),q9e.forEach(t),_9o=i(H),g1=n(H,"LI",{});var j9e=s(g1);Ife=n(j9e,"STRONG",{});var xft=s(Ife);u9o=r(xft,"longformer"),xft.forEach(t),b9o=r(j9e," \u2014 "),oG=n(j9e,"A",{href:!0});var $ft=s(oG);v9o=r($ft,"LongformerForMaskedLM"),$ft.forEach(t),F9o=r(j9e," (Longformer model)"),j9e.forEach(t),T9o=i(H),h1=n(H,"LI",{});var D9e=s(h1);Nfe=n(D9e,"STRONG",{});var kft=s(Nfe);M9o=r(kft,"luke"),kft.forEach(t),E9o=r(D9e," \u2014 "),rG=n(D9e,"A",{href:!0});var Sft=s(rG);C9o=r(Sft,"LukeForMaskedLM"),Sft.forEach(t),w9o=r(D9e," (LUKE model)"),D9e.forEach(t),A9o=i(H),p1=n(H,"LI",{});var G9e=s(p1);qfe=n(G9e,"STRONG",{});var Rft=s(qfe);L9o=r(Rft,"mbart"),Rft.forEach(t),y9o=r(G9e," \u2014 "),tG=n(G9e,"A",{href:!0});var Pft=s(tG);x9o=r(Pft,"MBartForConditionalGeneration"),Pft.forEach(t),$9o=r(G9e," (mBART model)"),G9e.forEach(t),k9o=i(H),_1=n(H,"LI",{});var O9e=s(_1);jfe=n(O9e,"STRONG",{});var Bft=s(jfe);S9o=r(Bft,"megatron-bert"),Bft.forEach(t),R9o=r(O9e," \u2014 "),aG=n(O9e,"A",{href:!0});var Ift=s(aG);P9o=r(Ift,"MegatronBertForMaskedLM"),Ift.forEach(t),B9o=r(O9e," (Megatron-BERT model)"),O9e.forEach(t),I9o=i(H),u1=n(H,"LI",{});var V9e=s(u1);Dfe=n(V9e,"STRONG",{});var Nft=s(Dfe);N9o=r(Nft,"mobilebert"),Nft.forEach(t),q9o=r(V9e," \u2014 "),nG=n(V9e,"A",{href:!0});var qft=s(nG);j9o=r(qft,"MobileBertForMaskedLM"),qft.forEach(t),D9o=r(V9e," (MobileBERT model)"),V9e.forEach(t),G9o=i(H),b1=n(H,"LI",{});var X9e=s(b1);Gfe=n(X9e,"STRONG",{});var jft=s(Gfe);O9o=r(jft,"mpnet"),jft.forEach(t),V9o=r(X9e," \u2014 "),sG=n(X9e,"A",{href:!0});var Dft=s(sG);X9o=r(Dft,"MPNetForMaskedLM"),Dft.forEach(t),z9o=r(X9e," (MPNet model)"),X9e.forEach(t),W9o=i(H),v1=n(H,"LI",{});var z9e=s(v1);Ofe=n(z9e,"STRONG",{});var Gft=s(Ofe);Q9o=r(Gft,"nystromformer"),Gft.forEach(t),H9o=r(z9e," \u2014 "),lG=n(z9e,"A",{href:!0});var Oft=s(lG);U9o=r(Oft,"NystromformerForMaskedLM"),Oft.forEach(t),J9o=r(z9e," (Nystr\xF6mformer model)"),z9e.forEach(t),Y9o=i(H),F1=n(H,"LI",{});var W9e=s(F1);Vfe=n(W9e,"STRONG",{});var Vft=s(Vfe);K9o=r(Vft,"perceiver"),Vft.forEach(t),Z9o=r(W9e," \u2014 "),iG=n(W9e,"A",{href:!0});var Xft=s(iG);exo=r(Xft,"PerceiverForMaskedLM"),Xft.forEach(t),oxo=r(W9e," (Perceiver model)"),W9e.forEach(t),rxo=i(H),T1=n(H,"LI",{});var Q9e=s(T1);Xfe=n(Q9e,"STRONG",{});var zft=s(Xfe);txo=r(zft,"qdqbert"),zft.forEach(t),axo=r(Q9e," \u2014 "),dG=n(Q9e,"A",{href:!0});var Wft=s(dG);nxo=r(Wft,"QDQBertForMaskedLM"),Wft.forEach(t),sxo=r(Q9e," (QDQBert model)"),Q9e.forEach(t),lxo=i(H),M1=n(H,"LI",{});var H9e=s(M1);zfe=n(H9e,"STRONG",{});var Qft=s(zfe);ixo=r(Qft,"reformer"),Qft.forEach(t),dxo=r(H9e," \u2014 "),cG=n(H9e,"A",{href:!0});var Hft=s(cG);cxo=r(Hft,"ReformerForMaskedLM"),Hft.forEach(t),fxo=r(H9e," (Reformer model)"),H9e.forEach(t),mxo=i(H),E1=n(H,"LI",{});var U9e=s(E1);Wfe=n(U9e,"STRONG",{});var Uft=s(Wfe);gxo=r(Uft,"rembert"),Uft.forEach(t),hxo=r(U9e," \u2014 "),fG=n(U9e,"A",{href:!0});var Jft=s(fG);pxo=r(Jft,"RemBertForMaskedLM"),Jft.forEach(t),_xo=r(U9e," (RemBERT model)"),U9e.forEach(t),uxo=i(H),C1=n(H,"LI",{});var J9e=s(C1);Qfe=n(J9e,"STRONG",{});var Yft=s(Qfe);bxo=r(Yft,"roberta"),Yft.forEach(t),vxo=r(J9e," \u2014 "),mG=n(J9e,"A",{href:!0});var Kft=s(mG);Fxo=r(Kft,"RobertaForMaskedLM"),Kft.forEach(t),Txo=r(J9e," (RoBERTa model)"),J9e.forEach(t),Mxo=i(H),w1=n(H,"LI",{});var Y9e=s(w1);Hfe=n(Y9e,"STRONG",{});var Zft=s(Hfe);Exo=r(Zft,"roformer"),Zft.forEach(t),Cxo=r(Y9e," \u2014 "),gG=n(Y9e,"A",{href:!0});var emt=s(gG);wxo=r(emt,"RoFormerForMaskedLM"),emt.forEach(t),Axo=r(Y9e," (RoFormer model)"),Y9e.forEach(t),Lxo=i(H),A1=n(H,"LI",{});var K9e=s(A1);Ufe=n(K9e,"STRONG",{});var omt=s(Ufe);yxo=r(omt,"squeezebert"),omt.forEach(t),xxo=r(K9e," \u2014 "),hG=n(K9e,"A",{href:!0});var rmt=s(hG);$xo=r(rmt,"SqueezeBertForMaskedLM"),rmt.forEach(t),kxo=r(K9e," (SqueezeBERT model)"),K9e.forEach(t),Sxo=i(H),L1=n(H,"LI",{});var Z9e=s(L1);Jfe=n(Z9e,"STRONG",{});var tmt=s(Jfe);Rxo=r(tmt,"tapas"),tmt.forEach(t),Pxo=r(Z9e," \u2014 "),pG=n(Z9e,"A",{href:!0});var amt=s(pG);Bxo=r(amt,"TapasForMaskedLM"),amt.forEach(t),Ixo=r(Z9e," (TAPAS model)"),Z9e.forEach(t),Nxo=i(H),y1=n(H,"LI",{});var exe=s(y1);Yfe=n(exe,"STRONG",{});var nmt=s(Yfe);qxo=r(nmt,"wav2vec2"),nmt.forEach(t),jxo=r(exe," \u2014 "),Kfe=n(exe,"CODE",{});var smt=s(Kfe);Dxo=r(smt,"Wav2Vec2ForMaskedLM"),smt.forEach(t),Gxo=r(exe," (Wav2Vec2 model)"),exe.forEach(t),Oxo=i(H),x1=n(H,"LI",{});var oxe=s(x1);Zfe=n(oxe,"STRONG",{});var lmt=s(Zfe);Vxo=r(lmt,"xlm"),lmt.forEach(t),Xxo=r(oxe," \u2014 "),_G=n(oxe,"A",{href:!0});var imt=s(_G);zxo=r(imt,"XLMWithLMHeadModel"),imt.forEach(t),Wxo=r(oxe," (XLM model)"),oxe.forEach(t),Qxo=i(H),$1=n(H,"LI",{});var rxe=s($1);eme=n(rxe,"STRONG",{});var dmt=s(eme);Hxo=r(dmt,"xlm-roberta"),dmt.forEach(t),Uxo=r(rxe," \u2014 "),uG=n(rxe,"A",{href:!0});var cmt=s(uG);Jxo=r(cmt,"XLMRobertaForMaskedLM"),cmt.forEach(t),Yxo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),Kxo=i(H),k1=n(H,"LI",{});var txe=s(k1);ome=n(txe,"STRONG",{});var fmt=s(ome);Zxo=r(fmt,"xlm-roberta-xl"),fmt.forEach(t),e$o=r(txe," \u2014 "),bG=n(txe,"A",{href:!0});var mmt=s(bG);o$o=r(mmt,"XLMRobertaXLForMaskedLM"),mmt.forEach(t),r$o=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),t$o=i(H),S1=n(H,"LI",{});var axe=s(S1);rme=n(axe,"STRONG",{});var gmt=s(rme);a$o=r(gmt,"yoso"),gmt.forEach(t),n$o=r(axe," \u2014 "),vG=n(axe,"A",{href:!0});var hmt=s(vG);s$o=r(hmt,"YosoForMaskedLM"),hmt.forEach(t),l$o=r(axe," (YOSO model)"),axe.forEach(t),H.forEach(t),i$o=i(na),R1=n(na,"P",{});var nxe=s(R1);d$o=r(nxe,"The model is set in evaluation mode by default using "),tme=n(nxe,"CODE",{});var pmt=s(tme);c$o=r(pmt,"model.eval()"),pmt.forEach(t),f$o=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(nxe,"CODE",{});var _mt=s(ame);m$o=r(_mt,"model.train()"),_mt.forEach(t),nxe.forEach(t),g$o=i(na),T(P1.$$.fragment,na),na.forEach(t),zs.forEach(t),Wje=i(f),ji=n(f,"H2",{class:!0});var JGe=s(ji);B1=n(JGe,"A",{id:!0,class:!0,href:!0});var umt=s(B1);nme=n(umt,"SPAN",{});var bmt=s(nme);T(jL.$$.fragment,bmt),bmt.forEach(t),umt.forEach(t),h$o=i(JGe),sme=n(JGe,"SPAN",{});var vmt=s(sme);p$o=r(vmt,"AutoModelForSeq2SeqLM"),vmt.forEach(t),JGe.forEach(t),Qje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(DL.$$.fragment,Ws),_$o=i(Ws),Di=n(Ws,"P",{});var fee=s(Di);u$o=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FG=n(fee,"A",{href:!0});var Fmt=s(FG);b$o=r(Fmt,"from_pretrained()"),Fmt.forEach(t),v$o=r(fee," class method or the "),TG=n(fee,"A",{href:!0});var Tmt=s(TG);F$o=r(Tmt,"from_config()"),Tmt.forEach(t),T$o=r(fee,` class
method.`),fee.forEach(t),M$o=i(Ws),GL=n(Ws,"P",{});var YGe=s(GL);E$o=r(YGe,"This class cannot be instantiated directly using "),lme=n(YGe,"CODE",{});var Mmt=s(lme);C$o=r(Mmt,"__init__()"),Mmt.forEach(t),w$o=r(YGe," (throws an error)."),YGe.forEach(t),A$o=i(Ws),it=n(Ws,"DIV",{class:!0});var sA=s(it);T(OL.$$.fragment,sA),L$o=i(sA),ime=n(sA,"P",{});var Emt=s(ime);y$o=r(Emt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Emt.forEach(t),x$o=i(sA),Gi=n(sA,"P",{});var mee=s(Gi);$$o=r(mee,`Note:
Loading a model from its configuration file does `),dme=n(mee,"STRONG",{});var Cmt=s(dme);k$o=r(Cmt,"not"),Cmt.forEach(t),S$o=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(mee,"A",{href:!0});var wmt=s(MG);R$o=r(wmt,"from_pretrained()"),wmt.forEach(t),P$o=r(mee," to load the model weights."),mee.forEach(t),B$o=i(sA),T(I1.$$.fragment,sA),sA.forEach(t),I$o=i(Ws),eo=n(Ws,"DIV",{class:!0});var sa=s(eo);T(VL.$$.fragment,sa),N$o=i(sa),cme=n(sa,"P",{});var Amt=s(cme);q$o=r(Amt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Amt.forEach(t),j$o=i(sa),Ra=n(sa,"P",{});var lA=s(Ra);D$o=r(lA,"The model class to instantiate is selected based on the "),fme=n(lA,"CODE",{});var Lmt=s(fme);G$o=r(Lmt,"model_type"),Lmt.forEach(t),O$o=r(lA,` property of the config object (either
passed as an argument or loaded from `),mme=n(lA,"CODE",{});var ymt=s(mme);V$o=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),X$o=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(lA,"CODE",{});var xmt=s(gme);z$o=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),W$o=r(lA,":"),lA.forEach(t),Q$o=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);N1=n(Fe,"LI",{});var sxe=s(N1);hme=n(sxe,"STRONG",{});var $mt=s(hme);H$o=r($mt,"bart"),$mt.forEach(t),U$o=r(sxe," \u2014 "),EG=n(sxe,"A",{href:!0});var kmt=s(EG);J$o=r(kmt,"BartForConditionalGeneration"),kmt.forEach(t),Y$o=r(sxe," (BART model)"),sxe.forEach(t),K$o=i(Fe),q1=n(Fe,"LI",{});var lxe=s(q1);pme=n(lxe,"STRONG",{});var Smt=s(pme);Z$o=r(Smt,"bigbird_pegasus"),Smt.forEach(t),eko=r(lxe," \u2014 "),CG=n(lxe,"A",{href:!0});var Rmt=s(CG);oko=r(Rmt,"BigBirdPegasusForConditionalGeneration"),Rmt.forEach(t),rko=r(lxe," (BigBird-Pegasus model)"),lxe.forEach(t),tko=i(Fe),j1=n(Fe,"LI",{});var ixe=s(j1);_me=n(ixe,"STRONG",{});var Pmt=s(_me);ako=r(Pmt,"blenderbot"),Pmt.forEach(t),nko=r(ixe," \u2014 "),wG=n(ixe,"A",{href:!0});var Bmt=s(wG);sko=r(Bmt,"BlenderbotForConditionalGeneration"),Bmt.forEach(t),lko=r(ixe," (Blenderbot model)"),ixe.forEach(t),iko=i(Fe),D1=n(Fe,"LI",{});var dxe=s(D1);ume=n(dxe,"STRONG",{});var Imt=s(ume);dko=r(Imt,"blenderbot-small"),Imt.forEach(t),cko=r(dxe," \u2014 "),AG=n(dxe,"A",{href:!0});var Nmt=s(AG);fko=r(Nmt,"BlenderbotSmallForConditionalGeneration"),Nmt.forEach(t),mko=r(dxe," (BlenderbotSmall model)"),dxe.forEach(t),gko=i(Fe),G1=n(Fe,"LI",{});var cxe=s(G1);bme=n(cxe,"STRONG",{});var qmt=s(bme);hko=r(qmt,"encoder-decoder"),qmt.forEach(t),pko=r(cxe," \u2014 "),LG=n(cxe,"A",{href:!0});var jmt=s(LG);_ko=r(jmt,"EncoderDecoderModel"),jmt.forEach(t),uko=r(cxe," (Encoder decoder model)"),cxe.forEach(t),bko=i(Fe),O1=n(Fe,"LI",{});var fxe=s(O1);vme=n(fxe,"STRONG",{});var Dmt=s(vme);vko=r(Dmt,"fsmt"),Dmt.forEach(t),Fko=r(fxe," \u2014 "),yG=n(fxe,"A",{href:!0});var Gmt=s(yG);Tko=r(Gmt,"FSMTForConditionalGeneration"),Gmt.forEach(t),Mko=r(fxe," (FairSeq Machine-Translation model)"),fxe.forEach(t),Eko=i(Fe),V1=n(Fe,"LI",{});var mxe=s(V1);Fme=n(mxe,"STRONG",{});var Omt=s(Fme);Cko=r(Omt,"led"),Omt.forEach(t),wko=r(mxe," \u2014 "),xG=n(mxe,"A",{href:!0});var Vmt=s(xG);Ako=r(Vmt,"LEDForConditionalGeneration"),Vmt.forEach(t),Lko=r(mxe," (LED model)"),mxe.forEach(t),yko=i(Fe),X1=n(Fe,"LI",{});var gxe=s(X1);Tme=n(gxe,"STRONG",{});var Xmt=s(Tme);xko=r(Xmt,"m2m_100"),Xmt.forEach(t),$ko=r(gxe," \u2014 "),$G=n(gxe,"A",{href:!0});var zmt=s($G);kko=r(zmt,"M2M100ForConditionalGeneration"),zmt.forEach(t),Sko=r(gxe," (M2M100 model)"),gxe.forEach(t),Rko=i(Fe),z1=n(Fe,"LI",{});var hxe=s(z1);Mme=n(hxe,"STRONG",{});var Wmt=s(Mme);Pko=r(Wmt,"marian"),Wmt.forEach(t),Bko=r(hxe," \u2014 "),kG=n(hxe,"A",{href:!0});var Qmt=s(kG);Iko=r(Qmt,"MarianMTModel"),Qmt.forEach(t),Nko=r(hxe," (Marian model)"),hxe.forEach(t),qko=i(Fe),W1=n(Fe,"LI",{});var pxe=s(W1);Eme=n(pxe,"STRONG",{});var Hmt=s(Eme);jko=r(Hmt,"mbart"),Hmt.forEach(t),Dko=r(pxe," \u2014 "),SG=n(pxe,"A",{href:!0});var Umt=s(SG);Gko=r(Umt,"MBartForConditionalGeneration"),Umt.forEach(t),Oko=r(pxe," (mBART model)"),pxe.forEach(t),Vko=i(Fe),Q1=n(Fe,"LI",{});var _xe=s(Q1);Cme=n(_xe,"STRONG",{});var Jmt=s(Cme);Xko=r(Jmt,"mt5"),Jmt.forEach(t),zko=r(_xe," \u2014 "),RG=n(_xe,"A",{href:!0});var Ymt=s(RG);Wko=r(Ymt,"MT5ForConditionalGeneration"),Ymt.forEach(t),Qko=r(_xe," (MT5 model)"),_xe.forEach(t),Hko=i(Fe),H1=n(Fe,"LI",{});var uxe=s(H1);wme=n(uxe,"STRONG",{});var Kmt=s(wme);Uko=r(Kmt,"pegasus"),Kmt.forEach(t),Jko=r(uxe," \u2014 "),PG=n(uxe,"A",{href:!0});var Zmt=s(PG);Yko=r(Zmt,"PegasusForConditionalGeneration"),Zmt.forEach(t),Kko=r(uxe," (Pegasus model)"),uxe.forEach(t),Zko=i(Fe),U1=n(Fe,"LI",{});var bxe=s(U1);Ame=n(bxe,"STRONG",{});var egt=s(Ame);eSo=r(egt,"plbart"),egt.forEach(t),oSo=r(bxe," \u2014 "),BG=n(bxe,"A",{href:!0});var ogt=s(BG);rSo=r(ogt,"PLBartForConditionalGeneration"),ogt.forEach(t),tSo=r(bxe," (PLBart model)"),bxe.forEach(t),aSo=i(Fe),J1=n(Fe,"LI",{});var vxe=s(J1);Lme=n(vxe,"STRONG",{});var rgt=s(Lme);nSo=r(rgt,"prophetnet"),rgt.forEach(t),sSo=r(vxe," \u2014 "),IG=n(vxe,"A",{href:!0});var tgt=s(IG);lSo=r(tgt,"ProphetNetForConditionalGeneration"),tgt.forEach(t),iSo=r(vxe," (ProphetNet model)"),vxe.forEach(t),dSo=i(Fe),Y1=n(Fe,"LI",{});var Fxe=s(Y1);yme=n(Fxe,"STRONG",{});var agt=s(yme);cSo=r(agt,"t5"),agt.forEach(t),fSo=r(Fxe," \u2014 "),NG=n(Fxe,"A",{href:!0});var ngt=s(NG);mSo=r(ngt,"T5ForConditionalGeneration"),ngt.forEach(t),gSo=r(Fxe," (T5 model)"),Fxe.forEach(t),hSo=i(Fe),K1=n(Fe,"LI",{});var Txe=s(K1);xme=n(Txe,"STRONG",{});var sgt=s(xme);pSo=r(sgt,"xlm-prophetnet"),sgt.forEach(t),_So=r(Txe," \u2014 "),qG=n(Txe,"A",{href:!0});var lgt=s(qG);uSo=r(lgt,"XLMProphetNetForConditionalGeneration"),lgt.forEach(t),bSo=r(Txe," (XLM-ProphetNet model)"),Txe.forEach(t),Fe.forEach(t),vSo=i(sa),Z1=n(sa,"P",{});var Mxe=s(Z1);FSo=r(Mxe,"The model is set in evaluation mode by default using "),$me=n(Mxe,"CODE",{});var igt=s($me);TSo=r(igt,"model.eval()"),igt.forEach(t),MSo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(Mxe,"CODE",{});var dgt=s(kme);ESo=r(dgt,"model.train()"),dgt.forEach(t),Mxe.forEach(t),CSo=i(sa),T(eb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Hje=i(f),Oi=n(f,"H2",{class:!0});var KGe=s(Oi);ob=n(KGe,"A",{id:!0,class:!0,href:!0});var cgt=s(ob);Sme=n(cgt,"SPAN",{});var fgt=s(Sme);T(XL.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),wSo=i(KGe),Rme=n(KGe,"SPAN",{});var mgt=s(Rme);ASo=r(mgt,"AutoModelForSequenceClassification"),mgt.forEach(t),KGe.forEach(t),Uje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(zL.$$.fragment,Qs),LSo=i(Qs),Vi=n(Qs,"P",{});var gee=s(Vi);ySo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jG=n(gee,"A",{href:!0});var ggt=s(jG);xSo=r(ggt,"from_pretrained()"),ggt.forEach(t),$So=r(gee," class method or the "),DG=n(gee,"A",{href:!0});var hgt=s(DG);kSo=r(hgt,"from_config()"),hgt.forEach(t),SSo=r(gee,` class
method.`),gee.forEach(t),RSo=i(Qs),WL=n(Qs,"P",{});var ZGe=s(WL);PSo=r(ZGe,"This class cannot be instantiated directly using "),Pme=n(ZGe,"CODE",{});var pgt=s(Pme);BSo=r(pgt,"__init__()"),pgt.forEach(t),ISo=r(ZGe," (throws an error)."),ZGe.forEach(t),NSo=i(Qs),dt=n(Qs,"DIV",{class:!0});var iA=s(dt);T(QL.$$.fragment,iA),qSo=i(iA),Bme=n(iA,"P",{});var _gt=s(Bme);jSo=r(_gt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_gt.forEach(t),DSo=i(iA),Xi=n(iA,"P",{});var hee=s(Xi);GSo=r(hee,`Note:
Loading a model from its configuration file does `),Ime=n(hee,"STRONG",{});var ugt=s(Ime);OSo=r(ugt,"not"),ugt.forEach(t),VSo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(hee,"A",{href:!0});var bgt=s(GG);XSo=r(bgt,"from_pretrained()"),bgt.forEach(t),zSo=r(hee," to load the model weights."),hee.forEach(t),WSo=i(iA),T(rb.$$.fragment,iA),iA.forEach(t),QSo=i(Qs),oo=n(Qs,"DIV",{class:!0});var la=s(oo);T(HL.$$.fragment,la),HSo=i(la),Nme=n(la,"P",{});var vgt=s(Nme);USo=r(vgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vgt.forEach(t),JSo=i(la),Pa=n(la,"P",{});var dA=s(Pa);YSo=r(dA,"The model class to instantiate is selected based on the "),qme=n(dA,"CODE",{});var Fgt=s(qme);KSo=r(Fgt,"model_type"),Fgt.forEach(t),ZSo=r(dA,` property of the config object (either
passed as an argument or loaded from `),jme=n(dA,"CODE",{});var Tgt=s(jme);eRo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),oRo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(dA,"CODE",{});var Mgt=s(Dme);rRo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),tRo=r(dA,":"),dA.forEach(t),aRo=i(la),q=n(la,"UL",{});var D=s(q);tb=n(D,"LI",{});var Exe=s(tb);Gme=n(Exe,"STRONG",{});var Egt=s(Gme);nRo=r(Egt,"albert"),Egt.forEach(t),sRo=r(Exe," \u2014 "),OG=n(Exe,"A",{href:!0});var Cgt=s(OG);lRo=r(Cgt,"AlbertForSequenceClassification"),Cgt.forEach(t),iRo=r(Exe," (ALBERT model)"),Exe.forEach(t),dRo=i(D),ab=n(D,"LI",{});var Cxe=s(ab);Ome=n(Cxe,"STRONG",{});var wgt=s(Ome);cRo=r(wgt,"bart"),wgt.forEach(t),fRo=r(Cxe," \u2014 "),VG=n(Cxe,"A",{href:!0});var Agt=s(VG);mRo=r(Agt,"BartForSequenceClassification"),Agt.forEach(t),gRo=r(Cxe," (BART model)"),Cxe.forEach(t),hRo=i(D),nb=n(D,"LI",{});var wxe=s(nb);Vme=n(wxe,"STRONG",{});var Lgt=s(Vme);pRo=r(Lgt,"bert"),Lgt.forEach(t),_Ro=r(wxe," \u2014 "),XG=n(wxe,"A",{href:!0});var ygt=s(XG);uRo=r(ygt,"BertForSequenceClassification"),ygt.forEach(t),bRo=r(wxe," (BERT model)"),wxe.forEach(t),vRo=i(D),sb=n(D,"LI",{});var Axe=s(sb);Xme=n(Axe,"STRONG",{});var xgt=s(Xme);FRo=r(xgt,"big_bird"),xgt.forEach(t),TRo=r(Axe," \u2014 "),zG=n(Axe,"A",{href:!0});var $gt=s(zG);MRo=r($gt,"BigBirdForSequenceClassification"),$gt.forEach(t),ERo=r(Axe," (BigBird model)"),Axe.forEach(t),CRo=i(D),lb=n(D,"LI",{});var Lxe=s(lb);zme=n(Lxe,"STRONG",{});var kgt=s(zme);wRo=r(kgt,"bigbird_pegasus"),kgt.forEach(t),ARo=r(Lxe," \u2014 "),WG=n(Lxe,"A",{href:!0});var Sgt=s(WG);LRo=r(Sgt,"BigBirdPegasusForSequenceClassification"),Sgt.forEach(t),yRo=r(Lxe," (BigBird-Pegasus model)"),Lxe.forEach(t),xRo=i(D),ib=n(D,"LI",{});var yxe=s(ib);Wme=n(yxe,"STRONG",{});var Rgt=s(Wme);$Ro=r(Rgt,"camembert"),Rgt.forEach(t),kRo=r(yxe," \u2014 "),QG=n(yxe,"A",{href:!0});var Pgt=s(QG);SRo=r(Pgt,"CamembertForSequenceClassification"),Pgt.forEach(t),RRo=r(yxe," (CamemBERT model)"),yxe.forEach(t),PRo=i(D),db=n(D,"LI",{});var xxe=s(db);Qme=n(xxe,"STRONG",{});var Bgt=s(Qme);BRo=r(Bgt,"canine"),Bgt.forEach(t),IRo=r(xxe," \u2014 "),HG=n(xxe,"A",{href:!0});var Igt=s(HG);NRo=r(Igt,"CanineForSequenceClassification"),Igt.forEach(t),qRo=r(xxe," (CANINE model)"),xxe.forEach(t),jRo=i(D),cb=n(D,"LI",{});var $xe=s(cb);Hme=n($xe,"STRONG",{});var Ngt=s(Hme);DRo=r(Ngt,"convbert"),Ngt.forEach(t),GRo=r($xe," \u2014 "),UG=n($xe,"A",{href:!0});var qgt=s(UG);ORo=r(qgt,"ConvBertForSequenceClassification"),qgt.forEach(t),VRo=r($xe," (ConvBERT model)"),$xe.forEach(t),XRo=i(D),fb=n(D,"LI",{});var kxe=s(fb);Ume=n(kxe,"STRONG",{});var jgt=s(Ume);zRo=r(jgt,"ctrl"),jgt.forEach(t),WRo=r(kxe," \u2014 "),JG=n(kxe,"A",{href:!0});var Dgt=s(JG);QRo=r(Dgt,"CTRLForSequenceClassification"),Dgt.forEach(t),HRo=r(kxe," (CTRL model)"),kxe.forEach(t),URo=i(D),mb=n(D,"LI",{});var Sxe=s(mb);Jme=n(Sxe,"STRONG",{});var Ggt=s(Jme);JRo=r(Ggt,"data2vec-text"),Ggt.forEach(t),YRo=r(Sxe," \u2014 "),YG=n(Sxe,"A",{href:!0});var Ogt=s(YG);KRo=r(Ogt,"Data2VecTextForSequenceClassification"),Ogt.forEach(t),ZRo=r(Sxe," (Data2VecText model)"),Sxe.forEach(t),ePo=i(D),gb=n(D,"LI",{});var Rxe=s(gb);Yme=n(Rxe,"STRONG",{});var Vgt=s(Yme);oPo=r(Vgt,"deberta"),Vgt.forEach(t),rPo=r(Rxe," \u2014 "),KG=n(Rxe,"A",{href:!0});var Xgt=s(KG);tPo=r(Xgt,"DebertaForSequenceClassification"),Xgt.forEach(t),aPo=r(Rxe," (DeBERTa model)"),Rxe.forEach(t),nPo=i(D),hb=n(D,"LI",{});var Pxe=s(hb);Kme=n(Pxe,"STRONG",{});var zgt=s(Kme);sPo=r(zgt,"deberta-v2"),zgt.forEach(t),lPo=r(Pxe," \u2014 "),ZG=n(Pxe,"A",{href:!0});var Wgt=s(ZG);iPo=r(Wgt,"DebertaV2ForSequenceClassification"),Wgt.forEach(t),dPo=r(Pxe," (DeBERTa-v2 model)"),Pxe.forEach(t),cPo=i(D),pb=n(D,"LI",{});var Bxe=s(pb);Zme=n(Bxe,"STRONG",{});var Qgt=s(Zme);fPo=r(Qgt,"distilbert"),Qgt.forEach(t),mPo=r(Bxe," \u2014 "),eO=n(Bxe,"A",{href:!0});var Hgt=s(eO);gPo=r(Hgt,"DistilBertForSequenceClassification"),Hgt.forEach(t),hPo=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),pPo=i(D),_b=n(D,"LI",{});var Ixe=s(_b);ege=n(Ixe,"STRONG",{});var Ugt=s(ege);_Po=r(Ugt,"electra"),Ugt.forEach(t),uPo=r(Ixe," \u2014 "),oO=n(Ixe,"A",{href:!0});var Jgt=s(oO);bPo=r(Jgt,"ElectraForSequenceClassification"),Jgt.forEach(t),vPo=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),FPo=i(D),ub=n(D,"LI",{});var Nxe=s(ub);oge=n(Nxe,"STRONG",{});var Ygt=s(oge);TPo=r(Ygt,"flaubert"),Ygt.forEach(t),MPo=r(Nxe," \u2014 "),rO=n(Nxe,"A",{href:!0});var Kgt=s(rO);EPo=r(Kgt,"FlaubertForSequenceClassification"),Kgt.forEach(t),CPo=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),wPo=i(D),bb=n(D,"LI",{});var qxe=s(bb);rge=n(qxe,"STRONG",{});var Zgt=s(rge);APo=r(Zgt,"fnet"),Zgt.forEach(t),LPo=r(qxe," \u2014 "),tO=n(qxe,"A",{href:!0});var eht=s(tO);yPo=r(eht,"FNetForSequenceClassification"),eht.forEach(t),xPo=r(qxe," (FNet model)"),qxe.forEach(t),$Po=i(D),vb=n(D,"LI",{});var jxe=s(vb);tge=n(jxe,"STRONG",{});var oht=s(tge);kPo=r(oht,"funnel"),oht.forEach(t),SPo=r(jxe," \u2014 "),aO=n(jxe,"A",{href:!0});var rht=s(aO);RPo=r(rht,"FunnelForSequenceClassification"),rht.forEach(t),PPo=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),BPo=i(D),Fb=n(D,"LI",{});var Dxe=s(Fb);age=n(Dxe,"STRONG",{});var tht=s(age);IPo=r(tht,"gpt2"),tht.forEach(t),NPo=r(Dxe," \u2014 "),nO=n(Dxe,"A",{href:!0});var aht=s(nO);qPo=r(aht,"GPT2ForSequenceClassification"),aht.forEach(t),jPo=r(Dxe," (OpenAI GPT-2 model)"),Dxe.forEach(t),DPo=i(D),Tb=n(D,"LI",{});var Gxe=s(Tb);nge=n(Gxe,"STRONG",{});var nht=s(nge);GPo=r(nht,"gpt_neo"),nht.forEach(t),OPo=r(Gxe," \u2014 "),sO=n(Gxe,"A",{href:!0});var sht=s(sO);VPo=r(sht,"GPTNeoForSequenceClassification"),sht.forEach(t),XPo=r(Gxe," (GPT Neo model)"),Gxe.forEach(t),zPo=i(D),Mb=n(D,"LI",{});var Oxe=s(Mb);sge=n(Oxe,"STRONG",{});var lht=s(sge);WPo=r(lht,"gptj"),lht.forEach(t),QPo=r(Oxe," \u2014 "),lO=n(Oxe,"A",{href:!0});var iht=s(lO);HPo=r(iht,"GPTJForSequenceClassification"),iht.forEach(t),UPo=r(Oxe," (GPT-J model)"),Oxe.forEach(t),JPo=i(D),Eb=n(D,"LI",{});var Vxe=s(Eb);lge=n(Vxe,"STRONG",{});var dht=s(lge);YPo=r(dht,"ibert"),dht.forEach(t),KPo=r(Vxe," \u2014 "),iO=n(Vxe,"A",{href:!0});var cht=s(iO);ZPo=r(cht,"IBertForSequenceClassification"),cht.forEach(t),eBo=r(Vxe," (I-BERT model)"),Vxe.forEach(t),oBo=i(D),Cb=n(D,"LI",{});var Xxe=s(Cb);ige=n(Xxe,"STRONG",{});var fht=s(ige);rBo=r(fht,"layoutlm"),fht.forEach(t),tBo=r(Xxe," \u2014 "),dO=n(Xxe,"A",{href:!0});var mht=s(dO);aBo=r(mht,"LayoutLMForSequenceClassification"),mht.forEach(t),nBo=r(Xxe," (LayoutLM model)"),Xxe.forEach(t),sBo=i(D),wb=n(D,"LI",{});var zxe=s(wb);dge=n(zxe,"STRONG",{});var ght=s(dge);lBo=r(ght,"layoutlmv2"),ght.forEach(t),iBo=r(zxe," \u2014 "),cO=n(zxe,"A",{href:!0});var hht=s(cO);dBo=r(hht,"LayoutLMv2ForSequenceClassification"),hht.forEach(t),cBo=r(zxe," (LayoutLMv2 model)"),zxe.forEach(t),fBo=i(D),Ab=n(D,"LI",{});var Wxe=s(Ab);cge=n(Wxe,"STRONG",{});var pht=s(cge);mBo=r(pht,"layoutlmv3"),pht.forEach(t),gBo=r(Wxe," \u2014 "),fO=n(Wxe,"A",{href:!0});var _ht=s(fO);hBo=r(_ht,"LayoutLMv3ForSequenceClassification"),_ht.forEach(t),pBo=r(Wxe," (LayoutLMv3 model)"),Wxe.forEach(t),_Bo=i(D),Lb=n(D,"LI",{});var Qxe=s(Lb);fge=n(Qxe,"STRONG",{});var uht=s(fge);uBo=r(uht,"led"),uht.forEach(t),bBo=r(Qxe," \u2014 "),mO=n(Qxe,"A",{href:!0});var bht=s(mO);vBo=r(bht,"LEDForSequenceClassification"),bht.forEach(t),FBo=r(Qxe," (LED model)"),Qxe.forEach(t),TBo=i(D),yb=n(D,"LI",{});var Hxe=s(yb);mge=n(Hxe,"STRONG",{});var vht=s(mge);MBo=r(vht,"longformer"),vht.forEach(t),EBo=r(Hxe," \u2014 "),gO=n(Hxe,"A",{href:!0});var Fht=s(gO);CBo=r(Fht,"LongformerForSequenceClassification"),Fht.forEach(t),wBo=r(Hxe," (Longformer model)"),Hxe.forEach(t),ABo=i(D),xb=n(D,"LI",{});var Uxe=s(xb);gge=n(Uxe,"STRONG",{});var Tht=s(gge);LBo=r(Tht,"mbart"),Tht.forEach(t),yBo=r(Uxe," \u2014 "),hO=n(Uxe,"A",{href:!0});var Mht=s(hO);xBo=r(Mht,"MBartForSequenceClassification"),Mht.forEach(t),$Bo=r(Uxe," (mBART model)"),Uxe.forEach(t),kBo=i(D),$b=n(D,"LI",{});var Jxe=s($b);hge=n(Jxe,"STRONG",{});var Eht=s(hge);SBo=r(Eht,"megatron-bert"),Eht.forEach(t),RBo=r(Jxe," \u2014 "),pO=n(Jxe,"A",{href:!0});var Cht=s(pO);PBo=r(Cht,"MegatronBertForSequenceClassification"),Cht.forEach(t),BBo=r(Jxe," (Megatron-BERT model)"),Jxe.forEach(t),IBo=i(D),kb=n(D,"LI",{});var Yxe=s(kb);pge=n(Yxe,"STRONG",{});var wht=s(pge);NBo=r(wht,"mobilebert"),wht.forEach(t),qBo=r(Yxe," \u2014 "),_O=n(Yxe,"A",{href:!0});var Aht=s(_O);jBo=r(Aht,"MobileBertForSequenceClassification"),Aht.forEach(t),DBo=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),GBo=i(D),Sb=n(D,"LI",{});var Kxe=s(Sb);_ge=n(Kxe,"STRONG",{});var Lht=s(_ge);OBo=r(Lht,"mpnet"),Lht.forEach(t),VBo=r(Kxe," \u2014 "),uO=n(Kxe,"A",{href:!0});var yht=s(uO);XBo=r(yht,"MPNetForSequenceClassification"),yht.forEach(t),zBo=r(Kxe," (MPNet model)"),Kxe.forEach(t),WBo=i(D),Rb=n(D,"LI",{});var Zxe=s(Rb);uge=n(Zxe,"STRONG",{});var xht=s(uge);QBo=r(xht,"nystromformer"),xht.forEach(t),HBo=r(Zxe," \u2014 "),bO=n(Zxe,"A",{href:!0});var $ht=s(bO);UBo=r($ht,"NystromformerForSequenceClassification"),$ht.forEach(t),JBo=r(Zxe," (Nystr\xF6mformer model)"),Zxe.forEach(t),YBo=i(D),Pb=n(D,"LI",{});var e$e=s(Pb);bge=n(e$e,"STRONG",{});var kht=s(bge);KBo=r(kht,"openai-gpt"),kht.forEach(t),ZBo=r(e$e," \u2014 "),vO=n(e$e,"A",{href:!0});var Sht=s(vO);eIo=r(Sht,"OpenAIGPTForSequenceClassification"),Sht.forEach(t),oIo=r(e$e," (OpenAI GPT model)"),e$e.forEach(t),rIo=i(D),Bb=n(D,"LI",{});var o$e=s(Bb);vge=n(o$e,"STRONG",{});var Rht=s(vge);tIo=r(Rht,"perceiver"),Rht.forEach(t),aIo=r(o$e," \u2014 "),FO=n(o$e,"A",{href:!0});var Pht=s(FO);nIo=r(Pht,"PerceiverForSequenceClassification"),Pht.forEach(t),sIo=r(o$e," (Perceiver model)"),o$e.forEach(t),lIo=i(D),Ib=n(D,"LI",{});var r$e=s(Ib);Fge=n(r$e,"STRONG",{});var Bht=s(Fge);iIo=r(Bht,"plbart"),Bht.forEach(t),dIo=r(r$e," \u2014 "),TO=n(r$e,"A",{href:!0});var Iht=s(TO);cIo=r(Iht,"PLBartForSequenceClassification"),Iht.forEach(t),fIo=r(r$e," (PLBart model)"),r$e.forEach(t),mIo=i(D),Nb=n(D,"LI",{});var t$e=s(Nb);Tge=n(t$e,"STRONG",{});var Nht=s(Tge);gIo=r(Nht,"qdqbert"),Nht.forEach(t),hIo=r(t$e," \u2014 "),MO=n(t$e,"A",{href:!0});var qht=s(MO);pIo=r(qht,"QDQBertForSequenceClassification"),qht.forEach(t),_Io=r(t$e," (QDQBert model)"),t$e.forEach(t),uIo=i(D),qb=n(D,"LI",{});var a$e=s(qb);Mge=n(a$e,"STRONG",{});var jht=s(Mge);bIo=r(jht,"reformer"),jht.forEach(t),vIo=r(a$e," \u2014 "),EO=n(a$e,"A",{href:!0});var Dht=s(EO);FIo=r(Dht,"ReformerForSequenceClassification"),Dht.forEach(t),TIo=r(a$e," (Reformer model)"),a$e.forEach(t),MIo=i(D),jb=n(D,"LI",{});var n$e=s(jb);Ege=n(n$e,"STRONG",{});var Ght=s(Ege);EIo=r(Ght,"rembert"),Ght.forEach(t),CIo=r(n$e," \u2014 "),CO=n(n$e,"A",{href:!0});var Oht=s(CO);wIo=r(Oht,"RemBertForSequenceClassification"),Oht.forEach(t),AIo=r(n$e," (RemBERT model)"),n$e.forEach(t),LIo=i(D),Db=n(D,"LI",{});var s$e=s(Db);Cge=n(s$e,"STRONG",{});var Vht=s(Cge);yIo=r(Vht,"roberta"),Vht.forEach(t),xIo=r(s$e," \u2014 "),wO=n(s$e,"A",{href:!0});var Xht=s(wO);$Io=r(Xht,"RobertaForSequenceClassification"),Xht.forEach(t),kIo=r(s$e," (RoBERTa model)"),s$e.forEach(t),SIo=i(D),Gb=n(D,"LI",{});var l$e=s(Gb);wge=n(l$e,"STRONG",{});var zht=s(wge);RIo=r(zht,"roformer"),zht.forEach(t),PIo=r(l$e," \u2014 "),AO=n(l$e,"A",{href:!0});var Wht=s(AO);BIo=r(Wht,"RoFormerForSequenceClassification"),Wht.forEach(t),IIo=r(l$e," (RoFormer model)"),l$e.forEach(t),NIo=i(D),Ob=n(D,"LI",{});var i$e=s(Ob);Age=n(i$e,"STRONG",{});var Qht=s(Age);qIo=r(Qht,"squeezebert"),Qht.forEach(t),jIo=r(i$e," \u2014 "),LO=n(i$e,"A",{href:!0});var Hht=s(LO);DIo=r(Hht,"SqueezeBertForSequenceClassification"),Hht.forEach(t),GIo=r(i$e," (SqueezeBERT model)"),i$e.forEach(t),OIo=i(D),Vb=n(D,"LI",{});var d$e=s(Vb);Lge=n(d$e,"STRONG",{});var Uht=s(Lge);VIo=r(Uht,"tapas"),Uht.forEach(t),XIo=r(d$e," \u2014 "),yO=n(d$e,"A",{href:!0});var Jht=s(yO);zIo=r(Jht,"TapasForSequenceClassification"),Jht.forEach(t),WIo=r(d$e," (TAPAS model)"),d$e.forEach(t),QIo=i(D),Xb=n(D,"LI",{});var c$e=s(Xb);yge=n(c$e,"STRONG",{});var Yht=s(yge);HIo=r(Yht,"transfo-xl"),Yht.forEach(t),UIo=r(c$e," \u2014 "),xO=n(c$e,"A",{href:!0});var Kht=s(xO);JIo=r(Kht,"TransfoXLForSequenceClassification"),Kht.forEach(t),YIo=r(c$e," (Transformer-XL model)"),c$e.forEach(t),KIo=i(D),zb=n(D,"LI",{});var f$e=s(zb);xge=n(f$e,"STRONG",{});var Zht=s(xge);ZIo=r(Zht,"xlm"),Zht.forEach(t),eNo=r(f$e," \u2014 "),$O=n(f$e,"A",{href:!0});var ept=s($O);oNo=r(ept,"XLMForSequenceClassification"),ept.forEach(t),rNo=r(f$e," (XLM model)"),f$e.forEach(t),tNo=i(D),Wb=n(D,"LI",{});var m$e=s(Wb);$ge=n(m$e,"STRONG",{});var opt=s($ge);aNo=r(opt,"xlm-roberta"),opt.forEach(t),nNo=r(m$e," \u2014 "),kO=n(m$e,"A",{href:!0});var rpt=s(kO);sNo=r(rpt,"XLMRobertaForSequenceClassification"),rpt.forEach(t),lNo=r(m$e," (XLM-RoBERTa model)"),m$e.forEach(t),iNo=i(D),Qb=n(D,"LI",{});var g$e=s(Qb);kge=n(g$e,"STRONG",{});var tpt=s(kge);dNo=r(tpt,"xlm-roberta-xl"),tpt.forEach(t),cNo=r(g$e," \u2014 "),SO=n(g$e,"A",{href:!0});var apt=s(SO);fNo=r(apt,"XLMRobertaXLForSequenceClassification"),apt.forEach(t),mNo=r(g$e," (XLM-RoBERTa-XL model)"),g$e.forEach(t),gNo=i(D),Hb=n(D,"LI",{});var h$e=s(Hb);Sge=n(h$e,"STRONG",{});var npt=s(Sge);hNo=r(npt,"xlnet"),npt.forEach(t),pNo=r(h$e," \u2014 "),RO=n(h$e,"A",{href:!0});var spt=s(RO);_No=r(spt,"XLNetForSequenceClassification"),spt.forEach(t),uNo=r(h$e," (XLNet model)"),h$e.forEach(t),bNo=i(D),Ub=n(D,"LI",{});var p$e=s(Ub);Rge=n(p$e,"STRONG",{});var lpt=s(Rge);vNo=r(lpt,"yoso"),lpt.forEach(t),FNo=r(p$e," \u2014 "),PO=n(p$e,"A",{href:!0});var ipt=s(PO);TNo=r(ipt,"YosoForSequenceClassification"),ipt.forEach(t),MNo=r(p$e," (YOSO model)"),p$e.forEach(t),D.forEach(t),ENo=i(la),Jb=n(la,"P",{});var _$e=s(Jb);CNo=r(_$e,"The model is set in evaluation mode by default using "),Pge=n(_$e,"CODE",{});var dpt=s(Pge);wNo=r(dpt,"model.eval()"),dpt.forEach(t),ANo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(_$e,"CODE",{});var cpt=s(Bge);LNo=r(cpt,"model.train()"),cpt.forEach(t),_$e.forEach(t),yNo=i(la),T(Yb.$$.fragment,la),la.forEach(t),Qs.forEach(t),Jje=i(f),zi=n(f,"H2",{class:!0});var eOe=s(zi);Kb=n(eOe,"A",{id:!0,class:!0,href:!0});var fpt=s(Kb);Ige=n(fpt,"SPAN",{});var mpt=s(Ige);T(UL.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),xNo=i(eOe),Nge=n(eOe,"SPAN",{});var gpt=s(Nge);$No=r(gpt,"AutoModelForMultipleChoice"),gpt.forEach(t),eOe.forEach(t),Yje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(JL.$$.fragment,Hs),kNo=i(Hs),Wi=n(Hs,"P",{});var pee=s(Wi);SNo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BO=n(pee,"A",{href:!0});var hpt=s(BO);RNo=r(hpt,"from_pretrained()"),hpt.forEach(t),PNo=r(pee," class method or the "),IO=n(pee,"A",{href:!0});var ppt=s(IO);BNo=r(ppt,"from_config()"),ppt.forEach(t),INo=r(pee,` class
method.`),pee.forEach(t),NNo=i(Hs),YL=n(Hs,"P",{});var oOe=s(YL);qNo=r(oOe,"This class cannot be instantiated directly using "),qge=n(oOe,"CODE",{});var _pt=s(qge);jNo=r(_pt,"__init__()"),_pt.forEach(t),DNo=r(oOe," (throws an error)."),oOe.forEach(t),GNo=i(Hs),ct=n(Hs,"DIV",{class:!0});var cA=s(ct);T(KL.$$.fragment,cA),ONo=i(cA),jge=n(cA,"P",{});var upt=s(jge);VNo=r(upt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),upt.forEach(t),XNo=i(cA),Qi=n(cA,"P",{});var _ee=s(Qi);zNo=r(_ee,`Note:
Loading a model from its configuration file does `),Dge=n(_ee,"STRONG",{});var bpt=s(Dge);WNo=r(bpt,"not"),bpt.forEach(t),QNo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(_ee,"A",{href:!0});var vpt=s(NO);HNo=r(vpt,"from_pretrained()"),vpt.forEach(t),UNo=r(_ee," to load the model weights."),_ee.forEach(t),JNo=i(cA),T(Zb.$$.fragment,cA),cA.forEach(t),YNo=i(Hs),ro=n(Hs,"DIV",{class:!0});var ia=s(ro);T(ZL.$$.fragment,ia),KNo=i(ia),Gge=n(ia,"P",{});var Fpt=s(Gge);ZNo=r(Fpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fpt.forEach(t),eqo=i(ia),Ba=n(ia,"P",{});var fA=s(Ba);oqo=r(fA,"The model class to instantiate is selected based on the "),Oge=n(fA,"CODE",{});var Tpt=s(Oge);rqo=r(Tpt,"model_type"),Tpt.forEach(t),tqo=r(fA,` property of the config object (either
passed as an argument or loaded from `),Vge=n(fA,"CODE",{});var Mpt=s(Vge);aqo=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),nqo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(fA,"CODE",{});var Ept=s(Xge);sqo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),lqo=r(fA,":"),fA.forEach(t),iqo=i(ia),Z=n(ia,"UL",{});var ee=s(Z);e2=n(ee,"LI",{});var u$e=s(e2);zge=n(u$e,"STRONG",{});var Cpt=s(zge);dqo=r(Cpt,"albert"),Cpt.forEach(t),cqo=r(u$e," \u2014 "),qO=n(u$e,"A",{href:!0});var wpt=s(qO);fqo=r(wpt,"AlbertForMultipleChoice"),wpt.forEach(t),mqo=r(u$e," (ALBERT model)"),u$e.forEach(t),gqo=i(ee),o2=n(ee,"LI",{});var b$e=s(o2);Wge=n(b$e,"STRONG",{});var Apt=s(Wge);hqo=r(Apt,"bert"),Apt.forEach(t),pqo=r(b$e," \u2014 "),jO=n(b$e,"A",{href:!0});var Lpt=s(jO);_qo=r(Lpt,"BertForMultipleChoice"),Lpt.forEach(t),uqo=r(b$e," (BERT model)"),b$e.forEach(t),bqo=i(ee),r2=n(ee,"LI",{});var v$e=s(r2);Qge=n(v$e,"STRONG",{});var ypt=s(Qge);vqo=r(ypt,"big_bird"),ypt.forEach(t),Fqo=r(v$e," \u2014 "),DO=n(v$e,"A",{href:!0});var xpt=s(DO);Tqo=r(xpt,"BigBirdForMultipleChoice"),xpt.forEach(t),Mqo=r(v$e," (BigBird model)"),v$e.forEach(t),Eqo=i(ee),t2=n(ee,"LI",{});var F$e=s(t2);Hge=n(F$e,"STRONG",{});var $pt=s(Hge);Cqo=r($pt,"camembert"),$pt.forEach(t),wqo=r(F$e," \u2014 "),GO=n(F$e,"A",{href:!0});var kpt=s(GO);Aqo=r(kpt,"CamembertForMultipleChoice"),kpt.forEach(t),Lqo=r(F$e," (CamemBERT model)"),F$e.forEach(t),yqo=i(ee),a2=n(ee,"LI",{});var T$e=s(a2);Uge=n(T$e,"STRONG",{});var Spt=s(Uge);xqo=r(Spt,"canine"),Spt.forEach(t),$qo=r(T$e," \u2014 "),OO=n(T$e,"A",{href:!0});var Rpt=s(OO);kqo=r(Rpt,"CanineForMultipleChoice"),Rpt.forEach(t),Sqo=r(T$e," (CANINE model)"),T$e.forEach(t),Rqo=i(ee),n2=n(ee,"LI",{});var M$e=s(n2);Jge=n(M$e,"STRONG",{});var Ppt=s(Jge);Pqo=r(Ppt,"convbert"),Ppt.forEach(t),Bqo=r(M$e," \u2014 "),VO=n(M$e,"A",{href:!0});var Bpt=s(VO);Iqo=r(Bpt,"ConvBertForMultipleChoice"),Bpt.forEach(t),Nqo=r(M$e," (ConvBERT model)"),M$e.forEach(t),qqo=i(ee),s2=n(ee,"LI",{});var E$e=s(s2);Yge=n(E$e,"STRONG",{});var Ipt=s(Yge);jqo=r(Ipt,"data2vec-text"),Ipt.forEach(t),Dqo=r(E$e," \u2014 "),XO=n(E$e,"A",{href:!0});var Npt=s(XO);Gqo=r(Npt,"Data2VecTextForMultipleChoice"),Npt.forEach(t),Oqo=r(E$e," (Data2VecText model)"),E$e.forEach(t),Vqo=i(ee),l2=n(ee,"LI",{});var C$e=s(l2);Kge=n(C$e,"STRONG",{});var qpt=s(Kge);Xqo=r(qpt,"deberta-v2"),qpt.forEach(t),zqo=r(C$e," \u2014 "),zO=n(C$e,"A",{href:!0});var jpt=s(zO);Wqo=r(jpt,"DebertaV2ForMultipleChoice"),jpt.forEach(t),Qqo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),Hqo=i(ee),i2=n(ee,"LI",{});var w$e=s(i2);Zge=n(w$e,"STRONG",{});var Dpt=s(Zge);Uqo=r(Dpt,"distilbert"),Dpt.forEach(t),Jqo=r(w$e," \u2014 "),WO=n(w$e,"A",{href:!0});var Gpt=s(WO);Yqo=r(Gpt,"DistilBertForMultipleChoice"),Gpt.forEach(t),Kqo=r(w$e," (DistilBERT model)"),w$e.forEach(t),Zqo=i(ee),d2=n(ee,"LI",{});var A$e=s(d2);ehe=n(A$e,"STRONG",{});var Opt=s(ehe);ejo=r(Opt,"electra"),Opt.forEach(t),ojo=r(A$e," \u2014 "),QO=n(A$e,"A",{href:!0});var Vpt=s(QO);rjo=r(Vpt,"ElectraForMultipleChoice"),Vpt.forEach(t),tjo=r(A$e," (ELECTRA model)"),A$e.forEach(t),ajo=i(ee),c2=n(ee,"LI",{});var L$e=s(c2);ohe=n(L$e,"STRONG",{});var Xpt=s(ohe);njo=r(Xpt,"flaubert"),Xpt.forEach(t),sjo=r(L$e," \u2014 "),HO=n(L$e,"A",{href:!0});var zpt=s(HO);ljo=r(zpt,"FlaubertForMultipleChoice"),zpt.forEach(t),ijo=r(L$e," (FlauBERT model)"),L$e.forEach(t),djo=i(ee),f2=n(ee,"LI",{});var y$e=s(f2);rhe=n(y$e,"STRONG",{});var Wpt=s(rhe);cjo=r(Wpt,"fnet"),Wpt.forEach(t),fjo=r(y$e," \u2014 "),UO=n(y$e,"A",{href:!0});var Qpt=s(UO);mjo=r(Qpt,"FNetForMultipleChoice"),Qpt.forEach(t),gjo=r(y$e," (FNet model)"),y$e.forEach(t),hjo=i(ee),m2=n(ee,"LI",{});var x$e=s(m2);the=n(x$e,"STRONG",{});var Hpt=s(the);pjo=r(Hpt,"funnel"),Hpt.forEach(t),_jo=r(x$e," \u2014 "),JO=n(x$e,"A",{href:!0});var Upt=s(JO);ujo=r(Upt,"FunnelForMultipleChoice"),Upt.forEach(t),bjo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),vjo=i(ee),g2=n(ee,"LI",{});var $$e=s(g2);ahe=n($$e,"STRONG",{});var Jpt=s(ahe);Fjo=r(Jpt,"ibert"),Jpt.forEach(t),Tjo=r($$e," \u2014 "),YO=n($$e,"A",{href:!0});var Ypt=s(YO);Mjo=r(Ypt,"IBertForMultipleChoice"),Ypt.forEach(t),Ejo=r($$e," (I-BERT model)"),$$e.forEach(t),Cjo=i(ee),h2=n(ee,"LI",{});var k$e=s(h2);nhe=n(k$e,"STRONG",{});var Kpt=s(nhe);wjo=r(Kpt,"longformer"),Kpt.forEach(t),Ajo=r(k$e," \u2014 "),KO=n(k$e,"A",{href:!0});var Zpt=s(KO);Ljo=r(Zpt,"LongformerForMultipleChoice"),Zpt.forEach(t),yjo=r(k$e," (Longformer model)"),k$e.forEach(t),xjo=i(ee),p2=n(ee,"LI",{});var S$e=s(p2);she=n(S$e,"STRONG",{});var e_t=s(she);$jo=r(e_t,"megatron-bert"),e_t.forEach(t),kjo=r(S$e," \u2014 "),ZO=n(S$e,"A",{href:!0});var o_t=s(ZO);Sjo=r(o_t,"MegatronBertForMultipleChoice"),o_t.forEach(t),Rjo=r(S$e," (Megatron-BERT model)"),S$e.forEach(t),Pjo=i(ee),_2=n(ee,"LI",{});var R$e=s(_2);lhe=n(R$e,"STRONG",{});var r_t=s(lhe);Bjo=r(r_t,"mobilebert"),r_t.forEach(t),Ijo=r(R$e," \u2014 "),eV=n(R$e,"A",{href:!0});var t_t=s(eV);Njo=r(t_t,"MobileBertForMultipleChoice"),t_t.forEach(t),qjo=r(R$e," (MobileBERT model)"),R$e.forEach(t),jjo=i(ee),u2=n(ee,"LI",{});var P$e=s(u2);ihe=n(P$e,"STRONG",{});var a_t=s(ihe);Djo=r(a_t,"mpnet"),a_t.forEach(t),Gjo=r(P$e," \u2014 "),oV=n(P$e,"A",{href:!0});var n_t=s(oV);Ojo=r(n_t,"MPNetForMultipleChoice"),n_t.forEach(t),Vjo=r(P$e," (MPNet model)"),P$e.forEach(t),Xjo=i(ee),b2=n(ee,"LI",{});var B$e=s(b2);dhe=n(B$e,"STRONG",{});var s_t=s(dhe);zjo=r(s_t,"nystromformer"),s_t.forEach(t),Wjo=r(B$e," \u2014 "),rV=n(B$e,"A",{href:!0});var l_t=s(rV);Qjo=r(l_t,"NystromformerForMultipleChoice"),l_t.forEach(t),Hjo=r(B$e," (Nystr\xF6mformer model)"),B$e.forEach(t),Ujo=i(ee),v2=n(ee,"LI",{});var I$e=s(v2);che=n(I$e,"STRONG",{});var i_t=s(che);Jjo=r(i_t,"qdqbert"),i_t.forEach(t),Yjo=r(I$e," \u2014 "),tV=n(I$e,"A",{href:!0});var d_t=s(tV);Kjo=r(d_t,"QDQBertForMultipleChoice"),d_t.forEach(t),Zjo=r(I$e," (QDQBert model)"),I$e.forEach(t),eDo=i(ee),F2=n(ee,"LI",{});var N$e=s(F2);fhe=n(N$e,"STRONG",{});var c_t=s(fhe);oDo=r(c_t,"rembert"),c_t.forEach(t),rDo=r(N$e," \u2014 "),aV=n(N$e,"A",{href:!0});var f_t=s(aV);tDo=r(f_t,"RemBertForMultipleChoice"),f_t.forEach(t),aDo=r(N$e," (RemBERT model)"),N$e.forEach(t),nDo=i(ee),T2=n(ee,"LI",{});var q$e=s(T2);mhe=n(q$e,"STRONG",{});var m_t=s(mhe);sDo=r(m_t,"roberta"),m_t.forEach(t),lDo=r(q$e," \u2014 "),nV=n(q$e,"A",{href:!0});var g_t=s(nV);iDo=r(g_t,"RobertaForMultipleChoice"),g_t.forEach(t),dDo=r(q$e," (RoBERTa model)"),q$e.forEach(t),cDo=i(ee),M2=n(ee,"LI",{});var j$e=s(M2);ghe=n(j$e,"STRONG",{});var h_t=s(ghe);fDo=r(h_t,"roformer"),h_t.forEach(t),mDo=r(j$e," \u2014 "),sV=n(j$e,"A",{href:!0});var p_t=s(sV);gDo=r(p_t,"RoFormerForMultipleChoice"),p_t.forEach(t),hDo=r(j$e," (RoFormer model)"),j$e.forEach(t),pDo=i(ee),E2=n(ee,"LI",{});var D$e=s(E2);hhe=n(D$e,"STRONG",{});var __t=s(hhe);_Do=r(__t,"squeezebert"),__t.forEach(t),uDo=r(D$e," \u2014 "),lV=n(D$e,"A",{href:!0});var u_t=s(lV);bDo=r(u_t,"SqueezeBertForMultipleChoice"),u_t.forEach(t),vDo=r(D$e," (SqueezeBERT model)"),D$e.forEach(t),FDo=i(ee),C2=n(ee,"LI",{});var G$e=s(C2);phe=n(G$e,"STRONG",{});var b_t=s(phe);TDo=r(b_t,"xlm"),b_t.forEach(t),MDo=r(G$e," \u2014 "),iV=n(G$e,"A",{href:!0});var v_t=s(iV);EDo=r(v_t,"XLMForMultipleChoice"),v_t.forEach(t),CDo=r(G$e," (XLM model)"),G$e.forEach(t),wDo=i(ee),w2=n(ee,"LI",{});var O$e=s(w2);_he=n(O$e,"STRONG",{});var F_t=s(_he);ADo=r(F_t,"xlm-roberta"),F_t.forEach(t),LDo=r(O$e," \u2014 "),dV=n(O$e,"A",{href:!0});var T_t=s(dV);yDo=r(T_t,"XLMRobertaForMultipleChoice"),T_t.forEach(t),xDo=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),$Do=i(ee),A2=n(ee,"LI",{});var V$e=s(A2);uhe=n(V$e,"STRONG",{});var M_t=s(uhe);kDo=r(M_t,"xlm-roberta-xl"),M_t.forEach(t),SDo=r(V$e," \u2014 "),cV=n(V$e,"A",{href:!0});var E_t=s(cV);RDo=r(E_t,"XLMRobertaXLForMultipleChoice"),E_t.forEach(t),PDo=r(V$e," (XLM-RoBERTa-XL model)"),V$e.forEach(t),BDo=i(ee),L2=n(ee,"LI",{});var X$e=s(L2);bhe=n(X$e,"STRONG",{});var C_t=s(bhe);IDo=r(C_t,"xlnet"),C_t.forEach(t),NDo=r(X$e," \u2014 "),fV=n(X$e,"A",{href:!0});var w_t=s(fV);qDo=r(w_t,"XLNetForMultipleChoice"),w_t.forEach(t),jDo=r(X$e," (XLNet model)"),X$e.forEach(t),DDo=i(ee),y2=n(ee,"LI",{});var z$e=s(y2);vhe=n(z$e,"STRONG",{});var A_t=s(vhe);GDo=r(A_t,"yoso"),A_t.forEach(t),ODo=r(z$e," \u2014 "),mV=n(z$e,"A",{href:!0});var L_t=s(mV);VDo=r(L_t,"YosoForMultipleChoice"),L_t.forEach(t),XDo=r(z$e," (YOSO model)"),z$e.forEach(t),ee.forEach(t),zDo=i(ia),x2=n(ia,"P",{});var W$e=s(x2);WDo=r(W$e,"The model is set in evaluation mode by default using "),Fhe=n(W$e,"CODE",{});var y_t=s(Fhe);QDo=r(y_t,"model.eval()"),y_t.forEach(t),HDo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(W$e,"CODE",{});var x_t=s(The);UDo=r(x_t,"model.train()"),x_t.forEach(t),W$e.forEach(t),JDo=i(ia),T($2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Kje=i(f),Hi=n(f,"H2",{class:!0});var rOe=s(Hi);k2=n(rOe,"A",{id:!0,class:!0,href:!0});var $_t=s(k2);Mhe=n($_t,"SPAN",{});var k_t=s(Mhe);T(ey.$$.fragment,k_t),k_t.forEach(t),$_t.forEach(t),YDo=i(rOe),Ehe=n(rOe,"SPAN",{});var S_t=s(Ehe);KDo=r(S_t,"AutoModelForNextSentencePrediction"),S_t.forEach(t),rOe.forEach(t),Zje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(oy.$$.fragment,Us),ZDo=i(Us),Ui=n(Us,"P",{});var uee=s(Ui);eGo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gV=n(uee,"A",{href:!0});var R_t=s(gV);oGo=r(R_t,"from_pretrained()"),R_t.forEach(t),rGo=r(uee," class method or the "),hV=n(uee,"A",{href:!0});var P_t=s(hV);tGo=r(P_t,"from_config()"),P_t.forEach(t),aGo=r(uee,` class
method.`),uee.forEach(t),nGo=i(Us),ry=n(Us,"P",{});var tOe=s(ry);sGo=r(tOe,"This class cannot be instantiated directly using "),Che=n(tOe,"CODE",{});var B_t=s(Che);lGo=r(B_t,"__init__()"),B_t.forEach(t),iGo=r(tOe," (throws an error)."),tOe.forEach(t),dGo=i(Us),ft=n(Us,"DIV",{class:!0});var mA=s(ft);T(ty.$$.fragment,mA),cGo=i(mA),whe=n(mA,"P",{});var I_t=s(whe);fGo=r(I_t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),I_t.forEach(t),mGo=i(mA),Ji=n(mA,"P",{});var bee=s(Ji);gGo=r(bee,`Note:
Loading a model from its configuration file does `),Ahe=n(bee,"STRONG",{});var N_t=s(Ahe);hGo=r(N_t,"not"),N_t.forEach(t),pGo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(bee,"A",{href:!0});var q_t=s(pV);_Go=r(q_t,"from_pretrained()"),q_t.forEach(t),uGo=r(bee," to load the model weights."),bee.forEach(t),bGo=i(mA),T(S2.$$.fragment,mA),mA.forEach(t),vGo=i(Us),to=n(Us,"DIV",{class:!0});var da=s(to);T(ay.$$.fragment,da),FGo=i(da),Lhe=n(da,"P",{});var j_t=s(Lhe);TGo=r(j_t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),j_t.forEach(t),MGo=i(da),Ia=n(da,"P",{});var gA=s(Ia);EGo=r(gA,"The model class to instantiate is selected based on the "),yhe=n(gA,"CODE",{});var D_t=s(yhe);CGo=r(D_t,"model_type"),D_t.forEach(t),wGo=r(gA,` property of the config object (either
passed as an argument or loaded from `),xhe=n(gA,"CODE",{});var G_t=s(xhe);AGo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),LGo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(gA,"CODE",{});var O_t=s($he);yGo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),xGo=r(gA,":"),gA.forEach(t),$Go=i(da),Yr=n(da,"UL",{});var Js=s(Yr);R2=n(Js,"LI",{});var Q$e=s(R2);khe=n(Q$e,"STRONG",{});var V_t=s(khe);kGo=r(V_t,"bert"),V_t.forEach(t),SGo=r(Q$e," \u2014 "),_V=n(Q$e,"A",{href:!0});var X_t=s(_V);RGo=r(X_t,"BertForNextSentencePrediction"),X_t.forEach(t),PGo=r(Q$e," (BERT model)"),Q$e.forEach(t),BGo=i(Js),P2=n(Js,"LI",{});var H$e=s(P2);She=n(H$e,"STRONG",{});var z_t=s(She);IGo=r(z_t,"fnet"),z_t.forEach(t),NGo=r(H$e," \u2014 "),uV=n(H$e,"A",{href:!0});var W_t=s(uV);qGo=r(W_t,"FNetForNextSentencePrediction"),W_t.forEach(t),jGo=r(H$e," (FNet model)"),H$e.forEach(t),DGo=i(Js),B2=n(Js,"LI",{});var U$e=s(B2);Rhe=n(U$e,"STRONG",{});var Q_t=s(Rhe);GGo=r(Q_t,"megatron-bert"),Q_t.forEach(t),OGo=r(U$e," \u2014 "),bV=n(U$e,"A",{href:!0});var H_t=s(bV);VGo=r(H_t,"MegatronBertForNextSentencePrediction"),H_t.forEach(t),XGo=r(U$e," (Megatron-BERT model)"),U$e.forEach(t),zGo=i(Js),I2=n(Js,"LI",{});var J$e=s(I2);Phe=n(J$e,"STRONG",{});var U_t=s(Phe);WGo=r(U_t,"mobilebert"),U_t.forEach(t),QGo=r(J$e," \u2014 "),vV=n(J$e,"A",{href:!0});var J_t=s(vV);HGo=r(J_t,"MobileBertForNextSentencePrediction"),J_t.forEach(t),UGo=r(J$e," (MobileBERT model)"),J$e.forEach(t),JGo=i(Js),N2=n(Js,"LI",{});var Y$e=s(N2);Bhe=n(Y$e,"STRONG",{});var Y_t=s(Bhe);YGo=r(Y_t,"qdqbert"),Y_t.forEach(t),KGo=r(Y$e," \u2014 "),FV=n(Y$e,"A",{href:!0});var K_t=s(FV);ZGo=r(K_t,"QDQBertForNextSentencePrediction"),K_t.forEach(t),eOo=r(Y$e," (QDQBert model)"),Y$e.forEach(t),Js.forEach(t),oOo=i(da),q2=n(da,"P",{});var K$e=s(q2);rOo=r(K$e,"The model is set in evaluation mode by default using "),Ihe=n(K$e,"CODE",{});var Z_t=s(Ihe);tOo=r(Z_t,"model.eval()"),Z_t.forEach(t),aOo=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(K$e,"CODE",{});var eut=s(Nhe);nOo=r(eut,"model.train()"),eut.forEach(t),K$e.forEach(t),sOo=i(da),T(j2.$$.fragment,da),da.forEach(t),Us.forEach(t),eDe=i(f),Yi=n(f,"H2",{class:!0});var aOe=s(Yi);D2=n(aOe,"A",{id:!0,class:!0,href:!0});var out=s(D2);qhe=n(out,"SPAN",{});var rut=s(qhe);T(ny.$$.fragment,rut),rut.forEach(t),out.forEach(t),lOo=i(aOe),jhe=n(aOe,"SPAN",{});var tut=s(jhe);iOo=r(tut,"AutoModelForTokenClassification"),tut.forEach(t),aOe.forEach(t),oDe=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(sy.$$.fragment,Ys),dOo=i(Ys),Ki=n(Ys,"P",{});var vee=s(Ki);cOo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TV=n(vee,"A",{href:!0});var aut=s(TV);fOo=r(aut,"from_pretrained()"),aut.forEach(t),mOo=r(vee," class method or the "),MV=n(vee,"A",{href:!0});var nut=s(MV);gOo=r(nut,"from_config()"),nut.forEach(t),hOo=r(vee,` class
method.`),vee.forEach(t),pOo=i(Ys),ly=n(Ys,"P",{});var nOe=s(ly);_Oo=r(nOe,"This class cannot be instantiated directly using "),Dhe=n(nOe,"CODE",{});var sut=s(Dhe);uOo=r(sut,"__init__()"),sut.forEach(t),bOo=r(nOe," (throws an error)."),nOe.forEach(t),vOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var hA=s(mt);T(iy.$$.fragment,hA),FOo=i(hA),Ghe=n(hA,"P",{});var lut=s(Ghe);TOo=r(lut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lut.forEach(t),MOo=i(hA),Zi=n(hA,"P",{});var Fee=s(Zi);EOo=r(Fee,`Note:
Loading a model from its configuration file does `),Ohe=n(Fee,"STRONG",{});var iut=s(Ohe);COo=r(iut,"not"),iut.forEach(t),wOo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(Fee,"A",{href:!0});var dut=s(EV);AOo=r(dut,"from_pretrained()"),dut.forEach(t),LOo=r(Fee," to load the model weights."),Fee.forEach(t),yOo=i(hA),T(G2.$$.fragment,hA),hA.forEach(t),xOo=i(Ys),ao=n(Ys,"DIV",{class:!0});var ca=s(ao);T(dy.$$.fragment,ca),$Oo=i(ca),Vhe=n(ca,"P",{});var cut=s(Vhe);kOo=r(cut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cut.forEach(t),SOo=i(ca),Na=n(ca,"P",{});var pA=s(Na);ROo=r(pA,"The model class to instantiate is selected based on the "),Xhe=n(pA,"CODE",{});var fut=s(Xhe);POo=r(fut,"model_type"),fut.forEach(t),BOo=r(pA,` property of the config object (either
passed as an argument or loaded from `),zhe=n(pA,"CODE",{});var mut=s(zhe);IOo=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),NOo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(pA,"CODE",{});var gut=s(Whe);qOo=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),jOo=r(pA,":"),pA.forEach(t),DOo=i(ca),U=n(ca,"UL",{});var J=s(U);O2=n(J,"LI",{});var Z$e=s(O2);Qhe=n(Z$e,"STRONG",{});var hut=s(Qhe);GOo=r(hut,"albert"),hut.forEach(t),OOo=r(Z$e," \u2014 "),CV=n(Z$e,"A",{href:!0});var put=s(CV);VOo=r(put,"AlbertForTokenClassification"),put.forEach(t),XOo=r(Z$e," (ALBERT model)"),Z$e.forEach(t),zOo=i(J),V2=n(J,"LI",{});var eke=s(V2);Hhe=n(eke,"STRONG",{});var _ut=s(Hhe);WOo=r(_ut,"bert"),_ut.forEach(t),QOo=r(eke," \u2014 "),wV=n(eke,"A",{href:!0});var uut=s(wV);HOo=r(uut,"BertForTokenClassification"),uut.forEach(t),UOo=r(eke," (BERT model)"),eke.forEach(t),JOo=i(J),X2=n(J,"LI",{});var oke=s(X2);Uhe=n(oke,"STRONG",{});var but=s(Uhe);YOo=r(but,"big_bird"),but.forEach(t),KOo=r(oke," \u2014 "),AV=n(oke,"A",{href:!0});var vut=s(AV);ZOo=r(vut,"BigBirdForTokenClassification"),vut.forEach(t),eVo=r(oke," (BigBird model)"),oke.forEach(t),oVo=i(J),z2=n(J,"LI",{});var rke=s(z2);Jhe=n(rke,"STRONG",{});var Fut=s(Jhe);rVo=r(Fut,"camembert"),Fut.forEach(t),tVo=r(rke," \u2014 "),LV=n(rke,"A",{href:!0});var Tut=s(LV);aVo=r(Tut,"CamembertForTokenClassification"),Tut.forEach(t),nVo=r(rke," (CamemBERT model)"),rke.forEach(t),sVo=i(J),W2=n(J,"LI",{});var tke=s(W2);Yhe=n(tke,"STRONG",{});var Mut=s(Yhe);lVo=r(Mut,"canine"),Mut.forEach(t),iVo=r(tke," \u2014 "),yV=n(tke,"A",{href:!0});var Eut=s(yV);dVo=r(Eut,"CanineForTokenClassification"),Eut.forEach(t),cVo=r(tke," (CANINE model)"),tke.forEach(t),fVo=i(J),Q2=n(J,"LI",{});var ake=s(Q2);Khe=n(ake,"STRONG",{});var Cut=s(Khe);mVo=r(Cut,"convbert"),Cut.forEach(t),gVo=r(ake," \u2014 "),xV=n(ake,"A",{href:!0});var wut=s(xV);hVo=r(wut,"ConvBertForTokenClassification"),wut.forEach(t),pVo=r(ake," (ConvBERT model)"),ake.forEach(t),_Vo=i(J),H2=n(J,"LI",{});var nke=s(H2);Zhe=n(nke,"STRONG",{});var Aut=s(Zhe);uVo=r(Aut,"data2vec-text"),Aut.forEach(t),bVo=r(nke," \u2014 "),$V=n(nke,"A",{href:!0});var Lut=s($V);vVo=r(Lut,"Data2VecTextForTokenClassification"),Lut.forEach(t),FVo=r(nke," (Data2VecText model)"),nke.forEach(t),TVo=i(J),U2=n(J,"LI",{});var ske=s(U2);epe=n(ske,"STRONG",{});var yut=s(epe);MVo=r(yut,"deberta"),yut.forEach(t),EVo=r(ske," \u2014 "),kV=n(ske,"A",{href:!0});var xut=s(kV);CVo=r(xut,"DebertaForTokenClassification"),xut.forEach(t),wVo=r(ske," (DeBERTa model)"),ske.forEach(t),AVo=i(J),J2=n(J,"LI",{});var lke=s(J2);ope=n(lke,"STRONG",{});var $ut=s(ope);LVo=r($ut,"deberta-v2"),$ut.forEach(t),yVo=r(lke," \u2014 "),SV=n(lke,"A",{href:!0});var kut=s(SV);xVo=r(kut,"DebertaV2ForTokenClassification"),kut.forEach(t),$Vo=r(lke," (DeBERTa-v2 model)"),lke.forEach(t),kVo=i(J),Y2=n(J,"LI",{});var ike=s(Y2);rpe=n(ike,"STRONG",{});var Sut=s(rpe);SVo=r(Sut,"distilbert"),Sut.forEach(t),RVo=r(ike," \u2014 "),RV=n(ike,"A",{href:!0});var Rut=s(RV);PVo=r(Rut,"DistilBertForTokenClassification"),Rut.forEach(t),BVo=r(ike," (DistilBERT model)"),ike.forEach(t),IVo=i(J),K2=n(J,"LI",{});var dke=s(K2);tpe=n(dke,"STRONG",{});var Put=s(tpe);NVo=r(Put,"electra"),Put.forEach(t),qVo=r(dke," \u2014 "),PV=n(dke,"A",{href:!0});var But=s(PV);jVo=r(But,"ElectraForTokenClassification"),But.forEach(t),DVo=r(dke," (ELECTRA model)"),dke.forEach(t),GVo=i(J),Z2=n(J,"LI",{});var cke=s(Z2);ape=n(cke,"STRONG",{});var Iut=s(ape);OVo=r(Iut,"flaubert"),Iut.forEach(t),VVo=r(cke," \u2014 "),BV=n(cke,"A",{href:!0});var Nut=s(BV);XVo=r(Nut,"FlaubertForTokenClassification"),Nut.forEach(t),zVo=r(cke," (FlauBERT model)"),cke.forEach(t),WVo=i(J),e4=n(J,"LI",{});var fke=s(e4);npe=n(fke,"STRONG",{});var qut=s(npe);QVo=r(qut,"fnet"),qut.forEach(t),HVo=r(fke," \u2014 "),IV=n(fke,"A",{href:!0});var jut=s(IV);UVo=r(jut,"FNetForTokenClassification"),jut.forEach(t),JVo=r(fke," (FNet model)"),fke.forEach(t),YVo=i(J),o4=n(J,"LI",{});var mke=s(o4);spe=n(mke,"STRONG",{});var Dut=s(spe);KVo=r(Dut,"funnel"),Dut.forEach(t),ZVo=r(mke," \u2014 "),NV=n(mke,"A",{href:!0});var Gut=s(NV);eXo=r(Gut,"FunnelForTokenClassification"),Gut.forEach(t),oXo=r(mke," (Funnel Transformer model)"),mke.forEach(t),rXo=i(J),r4=n(J,"LI",{});var gke=s(r4);lpe=n(gke,"STRONG",{});var Out=s(lpe);tXo=r(Out,"gpt2"),Out.forEach(t),aXo=r(gke," \u2014 "),qV=n(gke,"A",{href:!0});var Vut=s(qV);nXo=r(Vut,"GPT2ForTokenClassification"),Vut.forEach(t),sXo=r(gke," (OpenAI GPT-2 model)"),gke.forEach(t),lXo=i(J),t4=n(J,"LI",{});var hke=s(t4);ipe=n(hke,"STRONG",{});var Xut=s(ipe);iXo=r(Xut,"ibert"),Xut.forEach(t),dXo=r(hke," \u2014 "),jV=n(hke,"A",{href:!0});var zut=s(jV);cXo=r(zut,"IBertForTokenClassification"),zut.forEach(t),fXo=r(hke," (I-BERT model)"),hke.forEach(t),mXo=i(J),a4=n(J,"LI",{});var pke=s(a4);dpe=n(pke,"STRONG",{});var Wut=s(dpe);gXo=r(Wut,"layoutlm"),Wut.forEach(t),hXo=r(pke," \u2014 "),DV=n(pke,"A",{href:!0});var Qut=s(DV);pXo=r(Qut,"LayoutLMForTokenClassification"),Qut.forEach(t),_Xo=r(pke," (LayoutLM model)"),pke.forEach(t),uXo=i(J),n4=n(J,"LI",{});var _ke=s(n4);cpe=n(_ke,"STRONG",{});var Hut=s(cpe);bXo=r(Hut,"layoutlmv2"),Hut.forEach(t),vXo=r(_ke," \u2014 "),GV=n(_ke,"A",{href:!0});var Uut=s(GV);FXo=r(Uut,"LayoutLMv2ForTokenClassification"),Uut.forEach(t),TXo=r(_ke," (LayoutLMv2 model)"),_ke.forEach(t),MXo=i(J),s4=n(J,"LI",{});var uke=s(s4);fpe=n(uke,"STRONG",{});var Jut=s(fpe);EXo=r(Jut,"layoutlmv3"),Jut.forEach(t),CXo=r(uke," \u2014 "),OV=n(uke,"A",{href:!0});var Yut=s(OV);wXo=r(Yut,"LayoutLMv3ForTokenClassification"),Yut.forEach(t),AXo=r(uke," (LayoutLMv3 model)"),uke.forEach(t),LXo=i(J),l4=n(J,"LI",{});var bke=s(l4);mpe=n(bke,"STRONG",{});var Kut=s(mpe);yXo=r(Kut,"longformer"),Kut.forEach(t),xXo=r(bke," \u2014 "),VV=n(bke,"A",{href:!0});var Zut=s(VV);$Xo=r(Zut,"LongformerForTokenClassification"),Zut.forEach(t),kXo=r(bke," (Longformer model)"),bke.forEach(t),SXo=i(J),i4=n(J,"LI",{});var vke=s(i4);gpe=n(vke,"STRONG",{});var e5t=s(gpe);RXo=r(e5t,"megatron-bert"),e5t.forEach(t),PXo=r(vke," \u2014 "),XV=n(vke,"A",{href:!0});var o5t=s(XV);BXo=r(o5t,"MegatronBertForTokenClassification"),o5t.forEach(t),IXo=r(vke," (Megatron-BERT model)"),vke.forEach(t),NXo=i(J),d4=n(J,"LI",{});var Fke=s(d4);hpe=n(Fke,"STRONG",{});var r5t=s(hpe);qXo=r(r5t,"mobilebert"),r5t.forEach(t),jXo=r(Fke," \u2014 "),zV=n(Fke,"A",{href:!0});var t5t=s(zV);DXo=r(t5t,"MobileBertForTokenClassification"),t5t.forEach(t),GXo=r(Fke," (MobileBERT model)"),Fke.forEach(t),OXo=i(J),c4=n(J,"LI",{});var Tke=s(c4);ppe=n(Tke,"STRONG",{});var a5t=s(ppe);VXo=r(a5t,"mpnet"),a5t.forEach(t),XXo=r(Tke," \u2014 "),WV=n(Tke,"A",{href:!0});var n5t=s(WV);zXo=r(n5t,"MPNetForTokenClassification"),n5t.forEach(t),WXo=r(Tke," (MPNet model)"),Tke.forEach(t),QXo=i(J),f4=n(J,"LI",{});var Mke=s(f4);_pe=n(Mke,"STRONG",{});var s5t=s(_pe);HXo=r(s5t,"nystromformer"),s5t.forEach(t),UXo=r(Mke," \u2014 "),QV=n(Mke,"A",{href:!0});var l5t=s(QV);JXo=r(l5t,"NystromformerForTokenClassification"),l5t.forEach(t),YXo=r(Mke," (Nystr\xF6mformer model)"),Mke.forEach(t),KXo=i(J),m4=n(J,"LI",{});var Eke=s(m4);upe=n(Eke,"STRONG",{});var i5t=s(upe);ZXo=r(i5t,"qdqbert"),i5t.forEach(t),ezo=r(Eke," \u2014 "),HV=n(Eke,"A",{href:!0});var d5t=s(HV);ozo=r(d5t,"QDQBertForTokenClassification"),d5t.forEach(t),rzo=r(Eke," (QDQBert model)"),Eke.forEach(t),tzo=i(J),g4=n(J,"LI",{});var Cke=s(g4);bpe=n(Cke,"STRONG",{});var c5t=s(bpe);azo=r(c5t,"rembert"),c5t.forEach(t),nzo=r(Cke," \u2014 "),UV=n(Cke,"A",{href:!0});var f5t=s(UV);szo=r(f5t,"RemBertForTokenClassification"),f5t.forEach(t),lzo=r(Cke," (RemBERT model)"),Cke.forEach(t),izo=i(J),h4=n(J,"LI",{});var wke=s(h4);vpe=n(wke,"STRONG",{});var m5t=s(vpe);dzo=r(m5t,"roberta"),m5t.forEach(t),czo=r(wke," \u2014 "),JV=n(wke,"A",{href:!0});var g5t=s(JV);fzo=r(g5t,"RobertaForTokenClassification"),g5t.forEach(t),mzo=r(wke," (RoBERTa model)"),wke.forEach(t),gzo=i(J),p4=n(J,"LI",{});var Ake=s(p4);Fpe=n(Ake,"STRONG",{});var h5t=s(Fpe);hzo=r(h5t,"roformer"),h5t.forEach(t),pzo=r(Ake," \u2014 "),YV=n(Ake,"A",{href:!0});var p5t=s(YV);_zo=r(p5t,"RoFormerForTokenClassification"),p5t.forEach(t),uzo=r(Ake," (RoFormer model)"),Ake.forEach(t),bzo=i(J),_4=n(J,"LI",{});var Lke=s(_4);Tpe=n(Lke,"STRONG",{});var _5t=s(Tpe);vzo=r(_5t,"squeezebert"),_5t.forEach(t),Fzo=r(Lke," \u2014 "),KV=n(Lke,"A",{href:!0});var u5t=s(KV);Tzo=r(u5t,"SqueezeBertForTokenClassification"),u5t.forEach(t),Mzo=r(Lke," (SqueezeBERT model)"),Lke.forEach(t),Ezo=i(J),u4=n(J,"LI",{});var yke=s(u4);Mpe=n(yke,"STRONG",{});var b5t=s(Mpe);Czo=r(b5t,"xlm"),b5t.forEach(t),wzo=r(yke," \u2014 "),ZV=n(yke,"A",{href:!0});var v5t=s(ZV);Azo=r(v5t,"XLMForTokenClassification"),v5t.forEach(t),Lzo=r(yke," (XLM model)"),yke.forEach(t),yzo=i(J),b4=n(J,"LI",{});var xke=s(b4);Epe=n(xke,"STRONG",{});var F5t=s(Epe);xzo=r(F5t,"xlm-roberta"),F5t.forEach(t),$zo=r(xke," \u2014 "),eX=n(xke,"A",{href:!0});var T5t=s(eX);kzo=r(T5t,"XLMRobertaForTokenClassification"),T5t.forEach(t),Szo=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),Rzo=i(J),v4=n(J,"LI",{});var $ke=s(v4);Cpe=n($ke,"STRONG",{});var M5t=s(Cpe);Pzo=r(M5t,"xlm-roberta-xl"),M5t.forEach(t),Bzo=r($ke," \u2014 "),oX=n($ke,"A",{href:!0});var E5t=s(oX);Izo=r(E5t,"XLMRobertaXLForTokenClassification"),E5t.forEach(t),Nzo=r($ke," (XLM-RoBERTa-XL model)"),$ke.forEach(t),qzo=i(J),F4=n(J,"LI",{});var kke=s(F4);wpe=n(kke,"STRONG",{});var C5t=s(wpe);jzo=r(C5t,"xlnet"),C5t.forEach(t),Dzo=r(kke," \u2014 "),rX=n(kke,"A",{href:!0});var w5t=s(rX);Gzo=r(w5t,"XLNetForTokenClassification"),w5t.forEach(t),Ozo=r(kke," (XLNet model)"),kke.forEach(t),Vzo=i(J),T4=n(J,"LI",{});var Ske=s(T4);Ape=n(Ske,"STRONG",{});var A5t=s(Ape);Xzo=r(A5t,"yoso"),A5t.forEach(t),zzo=r(Ske," \u2014 "),tX=n(Ske,"A",{href:!0});var L5t=s(tX);Wzo=r(L5t,"YosoForTokenClassification"),L5t.forEach(t),Qzo=r(Ske," (YOSO model)"),Ske.forEach(t),J.forEach(t),Hzo=i(ca),M4=n(ca,"P",{});var Rke=s(M4);Uzo=r(Rke,"The model is set in evaluation mode by default using "),Lpe=n(Rke,"CODE",{});var y5t=s(Lpe);Jzo=r(y5t,"model.eval()"),y5t.forEach(t),Yzo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(Rke,"CODE",{});var x5t=s(ype);Kzo=r(x5t,"model.train()"),x5t.forEach(t),Rke.forEach(t),Zzo=i(ca),T(E4.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),rDe=i(f),ed=n(f,"H2",{class:!0});var sOe=s(ed);C4=n(sOe,"A",{id:!0,class:!0,href:!0});var $5t=s(C4);xpe=n($5t,"SPAN",{});var k5t=s(xpe);T(cy.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),eWo=i(sOe),$pe=n(sOe,"SPAN",{});var S5t=s($pe);oWo=r(S5t,"AutoModelForQuestionAnswering"),S5t.forEach(t),sOe.forEach(t),tDe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(fy.$$.fragment,Ks),rWo=i(Ks),od=n(Ks,"P",{});var Tee=s(od);tWo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aX=n(Tee,"A",{href:!0});var R5t=s(aX);aWo=r(R5t,"from_pretrained()"),R5t.forEach(t),nWo=r(Tee," class method or the "),nX=n(Tee,"A",{href:!0});var P5t=s(nX);sWo=r(P5t,"from_config()"),P5t.forEach(t),lWo=r(Tee,` class
method.`),Tee.forEach(t),iWo=i(Ks),my=n(Ks,"P",{});var lOe=s(my);dWo=r(lOe,"This class cannot be instantiated directly using "),kpe=n(lOe,"CODE",{});var B5t=s(kpe);cWo=r(B5t,"__init__()"),B5t.forEach(t),fWo=r(lOe," (throws an error)."),lOe.forEach(t),mWo=i(Ks),gt=n(Ks,"DIV",{class:!0});var _A=s(gt);T(gy.$$.fragment,_A),gWo=i(_A),Spe=n(_A,"P",{});var I5t=s(Spe);hWo=r(I5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I5t.forEach(t),pWo=i(_A),rd=n(_A,"P",{});var Mee=s(rd);_Wo=r(Mee,`Note:
Loading a model from its configuration file does `),Rpe=n(Mee,"STRONG",{});var N5t=s(Rpe);uWo=r(N5t,"not"),N5t.forEach(t),bWo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(Mee,"A",{href:!0});var q5t=s(sX);vWo=r(q5t,"from_pretrained()"),q5t.forEach(t),FWo=r(Mee," to load the model weights."),Mee.forEach(t),TWo=i(_A),T(w4.$$.fragment,_A),_A.forEach(t),MWo=i(Ks),no=n(Ks,"DIV",{class:!0});var fa=s(no);T(hy.$$.fragment,fa),EWo=i(fa),Ppe=n(fa,"P",{});var j5t=s(Ppe);CWo=r(j5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j5t.forEach(t),wWo=i(fa),qa=n(fa,"P",{});var uA=s(qa);AWo=r(uA,"The model class to instantiate is selected based on the "),Bpe=n(uA,"CODE",{});var D5t=s(Bpe);LWo=r(D5t,"model_type"),D5t.forEach(t),yWo=r(uA,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(uA,"CODE",{});var G5t=s(Ipe);xWo=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),$Wo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(uA,"CODE",{});var O5t=s(Npe);kWo=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),SWo=r(uA,":"),uA.forEach(t),RWo=i(fa),V=n(fa,"UL",{});var X=s(V);A4=n(X,"LI",{});var Pke=s(A4);qpe=n(Pke,"STRONG",{});var V5t=s(qpe);PWo=r(V5t,"albert"),V5t.forEach(t),BWo=r(Pke," \u2014 "),lX=n(Pke,"A",{href:!0});var X5t=s(lX);IWo=r(X5t,"AlbertForQuestionAnswering"),X5t.forEach(t),NWo=r(Pke," (ALBERT model)"),Pke.forEach(t),qWo=i(X),L4=n(X,"LI",{});var Bke=s(L4);jpe=n(Bke,"STRONG",{});var z5t=s(jpe);jWo=r(z5t,"bart"),z5t.forEach(t),DWo=r(Bke," \u2014 "),iX=n(Bke,"A",{href:!0});var W5t=s(iX);GWo=r(W5t,"BartForQuestionAnswering"),W5t.forEach(t),OWo=r(Bke," (BART model)"),Bke.forEach(t),VWo=i(X),y4=n(X,"LI",{});var Ike=s(y4);Dpe=n(Ike,"STRONG",{});var Q5t=s(Dpe);XWo=r(Q5t,"bert"),Q5t.forEach(t),zWo=r(Ike," \u2014 "),dX=n(Ike,"A",{href:!0});var H5t=s(dX);WWo=r(H5t,"BertForQuestionAnswering"),H5t.forEach(t),QWo=r(Ike," (BERT model)"),Ike.forEach(t),HWo=i(X),x4=n(X,"LI",{});var Nke=s(x4);Gpe=n(Nke,"STRONG",{});var U5t=s(Gpe);UWo=r(U5t,"big_bird"),U5t.forEach(t),JWo=r(Nke," \u2014 "),cX=n(Nke,"A",{href:!0});var J5t=s(cX);YWo=r(J5t,"BigBirdForQuestionAnswering"),J5t.forEach(t),KWo=r(Nke," (BigBird model)"),Nke.forEach(t),ZWo=i(X),$4=n(X,"LI",{});var qke=s($4);Ope=n(qke,"STRONG",{});var Y5t=s(Ope);eQo=r(Y5t,"bigbird_pegasus"),Y5t.forEach(t),oQo=r(qke," \u2014 "),fX=n(qke,"A",{href:!0});var K5t=s(fX);rQo=r(K5t,"BigBirdPegasusForQuestionAnswering"),K5t.forEach(t),tQo=r(qke," (BigBird-Pegasus model)"),qke.forEach(t),aQo=i(X),k4=n(X,"LI",{});var jke=s(k4);Vpe=n(jke,"STRONG",{});var Z5t=s(Vpe);nQo=r(Z5t,"camembert"),Z5t.forEach(t),sQo=r(jke," \u2014 "),mX=n(jke,"A",{href:!0});var e1t=s(mX);lQo=r(e1t,"CamembertForQuestionAnswering"),e1t.forEach(t),iQo=r(jke," (CamemBERT model)"),jke.forEach(t),dQo=i(X),S4=n(X,"LI",{});var Dke=s(S4);Xpe=n(Dke,"STRONG",{});var o1t=s(Xpe);cQo=r(o1t,"canine"),o1t.forEach(t),fQo=r(Dke," \u2014 "),gX=n(Dke,"A",{href:!0});var r1t=s(gX);mQo=r(r1t,"CanineForQuestionAnswering"),r1t.forEach(t),gQo=r(Dke," (CANINE model)"),Dke.forEach(t),hQo=i(X),R4=n(X,"LI",{});var Gke=s(R4);zpe=n(Gke,"STRONG",{});var t1t=s(zpe);pQo=r(t1t,"convbert"),t1t.forEach(t),_Qo=r(Gke," \u2014 "),hX=n(Gke,"A",{href:!0});var a1t=s(hX);uQo=r(a1t,"ConvBertForQuestionAnswering"),a1t.forEach(t),bQo=r(Gke," (ConvBERT model)"),Gke.forEach(t),vQo=i(X),P4=n(X,"LI",{});var Oke=s(P4);Wpe=n(Oke,"STRONG",{});var n1t=s(Wpe);FQo=r(n1t,"data2vec-text"),n1t.forEach(t),TQo=r(Oke," \u2014 "),pX=n(Oke,"A",{href:!0});var s1t=s(pX);MQo=r(s1t,"Data2VecTextForQuestionAnswering"),s1t.forEach(t),EQo=r(Oke," (Data2VecText model)"),Oke.forEach(t),CQo=i(X),B4=n(X,"LI",{});var Vke=s(B4);Qpe=n(Vke,"STRONG",{});var l1t=s(Qpe);wQo=r(l1t,"deberta"),l1t.forEach(t),AQo=r(Vke," \u2014 "),_X=n(Vke,"A",{href:!0});var i1t=s(_X);LQo=r(i1t,"DebertaForQuestionAnswering"),i1t.forEach(t),yQo=r(Vke," (DeBERTa model)"),Vke.forEach(t),xQo=i(X),I4=n(X,"LI",{});var Xke=s(I4);Hpe=n(Xke,"STRONG",{});var d1t=s(Hpe);$Qo=r(d1t,"deberta-v2"),d1t.forEach(t),kQo=r(Xke," \u2014 "),uX=n(Xke,"A",{href:!0});var c1t=s(uX);SQo=r(c1t,"DebertaV2ForQuestionAnswering"),c1t.forEach(t),RQo=r(Xke," (DeBERTa-v2 model)"),Xke.forEach(t),PQo=i(X),N4=n(X,"LI",{});var zke=s(N4);Upe=n(zke,"STRONG",{});var f1t=s(Upe);BQo=r(f1t,"distilbert"),f1t.forEach(t),IQo=r(zke," \u2014 "),bX=n(zke,"A",{href:!0});var m1t=s(bX);NQo=r(m1t,"DistilBertForQuestionAnswering"),m1t.forEach(t),qQo=r(zke," (DistilBERT model)"),zke.forEach(t),jQo=i(X),q4=n(X,"LI",{});var Wke=s(q4);Jpe=n(Wke,"STRONG",{});var g1t=s(Jpe);DQo=r(g1t,"electra"),g1t.forEach(t),GQo=r(Wke," \u2014 "),vX=n(Wke,"A",{href:!0});var h1t=s(vX);OQo=r(h1t,"ElectraForQuestionAnswering"),h1t.forEach(t),VQo=r(Wke," (ELECTRA model)"),Wke.forEach(t),XQo=i(X),j4=n(X,"LI",{});var Qke=s(j4);Ype=n(Qke,"STRONG",{});var p1t=s(Ype);zQo=r(p1t,"flaubert"),p1t.forEach(t),WQo=r(Qke," \u2014 "),FX=n(Qke,"A",{href:!0});var _1t=s(FX);QQo=r(_1t,"FlaubertForQuestionAnsweringSimple"),_1t.forEach(t),HQo=r(Qke," (FlauBERT model)"),Qke.forEach(t),UQo=i(X),D4=n(X,"LI",{});var Hke=s(D4);Kpe=n(Hke,"STRONG",{});var u1t=s(Kpe);JQo=r(u1t,"fnet"),u1t.forEach(t),YQo=r(Hke," \u2014 "),TX=n(Hke,"A",{href:!0});var b1t=s(TX);KQo=r(b1t,"FNetForQuestionAnswering"),b1t.forEach(t),ZQo=r(Hke," (FNet model)"),Hke.forEach(t),eHo=i(X),G4=n(X,"LI",{});var Uke=s(G4);Zpe=n(Uke,"STRONG",{});var v1t=s(Zpe);oHo=r(v1t,"funnel"),v1t.forEach(t),rHo=r(Uke," \u2014 "),MX=n(Uke,"A",{href:!0});var F1t=s(MX);tHo=r(F1t,"FunnelForQuestionAnswering"),F1t.forEach(t),aHo=r(Uke," (Funnel Transformer model)"),Uke.forEach(t),nHo=i(X),O4=n(X,"LI",{});var Jke=s(O4);e_e=n(Jke,"STRONG",{});var T1t=s(e_e);sHo=r(T1t,"gptj"),T1t.forEach(t),lHo=r(Jke," \u2014 "),EX=n(Jke,"A",{href:!0});var M1t=s(EX);iHo=r(M1t,"GPTJForQuestionAnswering"),M1t.forEach(t),dHo=r(Jke," (GPT-J model)"),Jke.forEach(t),cHo=i(X),V4=n(X,"LI",{});var Yke=s(V4);o_e=n(Yke,"STRONG",{});var E1t=s(o_e);fHo=r(E1t,"ibert"),E1t.forEach(t),mHo=r(Yke," \u2014 "),CX=n(Yke,"A",{href:!0});var C1t=s(CX);gHo=r(C1t,"IBertForQuestionAnswering"),C1t.forEach(t),hHo=r(Yke," (I-BERT model)"),Yke.forEach(t),pHo=i(X),X4=n(X,"LI",{});var Kke=s(X4);r_e=n(Kke,"STRONG",{});var w1t=s(r_e);_Ho=r(w1t,"layoutlmv2"),w1t.forEach(t),uHo=r(Kke," \u2014 "),wX=n(Kke,"A",{href:!0});var A1t=s(wX);bHo=r(A1t,"LayoutLMv2ForQuestionAnswering"),A1t.forEach(t),vHo=r(Kke," (LayoutLMv2 model)"),Kke.forEach(t),FHo=i(X),z4=n(X,"LI",{});var Zke=s(z4);t_e=n(Zke,"STRONG",{});var L1t=s(t_e);THo=r(L1t,"layoutlmv3"),L1t.forEach(t),MHo=r(Zke," \u2014 "),AX=n(Zke,"A",{href:!0});var y1t=s(AX);EHo=r(y1t,"LayoutLMv3ForQuestionAnswering"),y1t.forEach(t),CHo=r(Zke," (LayoutLMv3 model)"),Zke.forEach(t),wHo=i(X),W4=n(X,"LI",{});var eSe=s(W4);a_e=n(eSe,"STRONG",{});var x1t=s(a_e);AHo=r(x1t,"led"),x1t.forEach(t),LHo=r(eSe," \u2014 "),LX=n(eSe,"A",{href:!0});var $1t=s(LX);yHo=r($1t,"LEDForQuestionAnswering"),$1t.forEach(t),xHo=r(eSe," (LED model)"),eSe.forEach(t),$Ho=i(X),Q4=n(X,"LI",{});var oSe=s(Q4);n_e=n(oSe,"STRONG",{});var k1t=s(n_e);kHo=r(k1t,"longformer"),k1t.forEach(t),SHo=r(oSe," \u2014 "),yX=n(oSe,"A",{href:!0});var S1t=s(yX);RHo=r(S1t,"LongformerForQuestionAnswering"),S1t.forEach(t),PHo=r(oSe," (Longformer model)"),oSe.forEach(t),BHo=i(X),H4=n(X,"LI",{});var rSe=s(H4);s_e=n(rSe,"STRONG",{});var R1t=s(s_e);IHo=r(R1t,"lxmert"),R1t.forEach(t),NHo=r(rSe," \u2014 "),xX=n(rSe,"A",{href:!0});var P1t=s(xX);qHo=r(P1t,"LxmertForQuestionAnswering"),P1t.forEach(t),jHo=r(rSe," (LXMERT model)"),rSe.forEach(t),DHo=i(X),U4=n(X,"LI",{});var tSe=s(U4);l_e=n(tSe,"STRONG",{});var B1t=s(l_e);GHo=r(B1t,"mbart"),B1t.forEach(t),OHo=r(tSe," \u2014 "),$X=n(tSe,"A",{href:!0});var I1t=s($X);VHo=r(I1t,"MBartForQuestionAnswering"),I1t.forEach(t),XHo=r(tSe," (mBART model)"),tSe.forEach(t),zHo=i(X),J4=n(X,"LI",{});var aSe=s(J4);i_e=n(aSe,"STRONG",{});var N1t=s(i_e);WHo=r(N1t,"megatron-bert"),N1t.forEach(t),QHo=r(aSe," \u2014 "),kX=n(aSe,"A",{href:!0});var q1t=s(kX);HHo=r(q1t,"MegatronBertForQuestionAnswering"),q1t.forEach(t),UHo=r(aSe," (Megatron-BERT model)"),aSe.forEach(t),JHo=i(X),Y4=n(X,"LI",{});var nSe=s(Y4);d_e=n(nSe,"STRONG",{});var j1t=s(d_e);YHo=r(j1t,"mobilebert"),j1t.forEach(t),KHo=r(nSe," \u2014 "),SX=n(nSe,"A",{href:!0});var D1t=s(SX);ZHo=r(D1t,"MobileBertForQuestionAnswering"),D1t.forEach(t),eUo=r(nSe," (MobileBERT model)"),nSe.forEach(t),oUo=i(X),K4=n(X,"LI",{});var sSe=s(K4);c_e=n(sSe,"STRONG",{});var G1t=s(c_e);rUo=r(G1t,"mpnet"),G1t.forEach(t),tUo=r(sSe," \u2014 "),RX=n(sSe,"A",{href:!0});var O1t=s(RX);aUo=r(O1t,"MPNetForQuestionAnswering"),O1t.forEach(t),nUo=r(sSe," (MPNet model)"),sSe.forEach(t),sUo=i(X),Z4=n(X,"LI",{});var lSe=s(Z4);f_e=n(lSe,"STRONG",{});var V1t=s(f_e);lUo=r(V1t,"nystromformer"),V1t.forEach(t),iUo=r(lSe," \u2014 "),PX=n(lSe,"A",{href:!0});var X1t=s(PX);dUo=r(X1t,"NystromformerForQuestionAnswering"),X1t.forEach(t),cUo=r(lSe," (Nystr\xF6mformer model)"),lSe.forEach(t),fUo=i(X),ev=n(X,"LI",{});var iSe=s(ev);m_e=n(iSe,"STRONG",{});var z1t=s(m_e);mUo=r(z1t,"qdqbert"),z1t.forEach(t),gUo=r(iSe," \u2014 "),BX=n(iSe,"A",{href:!0});var W1t=s(BX);hUo=r(W1t,"QDQBertForQuestionAnswering"),W1t.forEach(t),pUo=r(iSe," (QDQBert model)"),iSe.forEach(t),_Uo=i(X),ov=n(X,"LI",{});var dSe=s(ov);g_e=n(dSe,"STRONG",{});var Q1t=s(g_e);uUo=r(Q1t,"reformer"),Q1t.forEach(t),bUo=r(dSe," \u2014 "),IX=n(dSe,"A",{href:!0});var H1t=s(IX);vUo=r(H1t,"ReformerForQuestionAnswering"),H1t.forEach(t),FUo=r(dSe," (Reformer model)"),dSe.forEach(t),TUo=i(X),rv=n(X,"LI",{});var cSe=s(rv);h_e=n(cSe,"STRONG",{});var U1t=s(h_e);MUo=r(U1t,"rembert"),U1t.forEach(t),EUo=r(cSe," \u2014 "),NX=n(cSe,"A",{href:!0});var J1t=s(NX);CUo=r(J1t,"RemBertForQuestionAnswering"),J1t.forEach(t),wUo=r(cSe," (RemBERT model)"),cSe.forEach(t),AUo=i(X),tv=n(X,"LI",{});var fSe=s(tv);p_e=n(fSe,"STRONG",{});var Y1t=s(p_e);LUo=r(Y1t,"roberta"),Y1t.forEach(t),yUo=r(fSe," \u2014 "),qX=n(fSe,"A",{href:!0});var K1t=s(qX);xUo=r(K1t,"RobertaForQuestionAnswering"),K1t.forEach(t),$Uo=r(fSe," (RoBERTa model)"),fSe.forEach(t),kUo=i(X),av=n(X,"LI",{});var mSe=s(av);__e=n(mSe,"STRONG",{});var Z1t=s(__e);SUo=r(Z1t,"roformer"),Z1t.forEach(t),RUo=r(mSe," \u2014 "),jX=n(mSe,"A",{href:!0});var ebt=s(jX);PUo=r(ebt,"RoFormerForQuestionAnswering"),ebt.forEach(t),BUo=r(mSe," (RoFormer model)"),mSe.forEach(t),IUo=i(X),nv=n(X,"LI",{});var gSe=s(nv);u_e=n(gSe,"STRONG",{});var obt=s(u_e);NUo=r(obt,"splinter"),obt.forEach(t),qUo=r(gSe," \u2014 "),DX=n(gSe,"A",{href:!0});var rbt=s(DX);jUo=r(rbt,"SplinterForQuestionAnswering"),rbt.forEach(t),DUo=r(gSe," (Splinter model)"),gSe.forEach(t),GUo=i(X),sv=n(X,"LI",{});var hSe=s(sv);b_e=n(hSe,"STRONG",{});var tbt=s(b_e);OUo=r(tbt,"squeezebert"),tbt.forEach(t),VUo=r(hSe," \u2014 "),GX=n(hSe,"A",{href:!0});var abt=s(GX);XUo=r(abt,"SqueezeBertForQuestionAnswering"),abt.forEach(t),zUo=r(hSe," (SqueezeBERT model)"),hSe.forEach(t),WUo=i(X),lv=n(X,"LI",{});var pSe=s(lv);v_e=n(pSe,"STRONG",{});var nbt=s(v_e);QUo=r(nbt,"xlm"),nbt.forEach(t),HUo=r(pSe," \u2014 "),OX=n(pSe,"A",{href:!0});var sbt=s(OX);UUo=r(sbt,"XLMForQuestionAnsweringSimple"),sbt.forEach(t),JUo=r(pSe," (XLM model)"),pSe.forEach(t),YUo=i(X),iv=n(X,"LI",{});var _Se=s(iv);F_e=n(_Se,"STRONG",{});var lbt=s(F_e);KUo=r(lbt,"xlm-roberta"),lbt.forEach(t),ZUo=r(_Se," \u2014 "),VX=n(_Se,"A",{href:!0});var ibt=s(VX);eJo=r(ibt,"XLMRobertaForQuestionAnswering"),ibt.forEach(t),oJo=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),rJo=i(X),dv=n(X,"LI",{});var uSe=s(dv);T_e=n(uSe,"STRONG",{});var dbt=s(T_e);tJo=r(dbt,"xlm-roberta-xl"),dbt.forEach(t),aJo=r(uSe," \u2014 "),XX=n(uSe,"A",{href:!0});var cbt=s(XX);nJo=r(cbt,"XLMRobertaXLForQuestionAnswering"),cbt.forEach(t),sJo=r(uSe," (XLM-RoBERTa-XL model)"),uSe.forEach(t),lJo=i(X),cv=n(X,"LI",{});var bSe=s(cv);M_e=n(bSe,"STRONG",{});var fbt=s(M_e);iJo=r(fbt,"xlnet"),fbt.forEach(t),dJo=r(bSe," \u2014 "),zX=n(bSe,"A",{href:!0});var mbt=s(zX);cJo=r(mbt,"XLNetForQuestionAnsweringSimple"),mbt.forEach(t),fJo=r(bSe," (XLNet model)"),bSe.forEach(t),mJo=i(X),fv=n(X,"LI",{});var vSe=s(fv);E_e=n(vSe,"STRONG",{});var gbt=s(E_e);gJo=r(gbt,"yoso"),gbt.forEach(t),hJo=r(vSe," \u2014 "),WX=n(vSe,"A",{href:!0});var hbt=s(WX);pJo=r(hbt,"YosoForQuestionAnswering"),hbt.forEach(t),_Jo=r(vSe," (YOSO model)"),vSe.forEach(t),X.forEach(t),uJo=i(fa),mv=n(fa,"P",{});var FSe=s(mv);bJo=r(FSe,"The model is set in evaluation mode by default using "),C_e=n(FSe,"CODE",{});var pbt=s(C_e);vJo=r(pbt,"model.eval()"),pbt.forEach(t),FJo=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(FSe,"CODE",{});var _bt=s(w_e);TJo=r(_bt,"model.train()"),_bt.forEach(t),FSe.forEach(t),MJo=i(fa),T(gv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),aDe=i(f),td=n(f,"H2",{class:!0});var iOe=s(td);hv=n(iOe,"A",{id:!0,class:!0,href:!0});var ubt=s(hv);A_e=n(ubt,"SPAN",{});var bbt=s(A_e);T(py.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),EJo=i(iOe),L_e=n(iOe,"SPAN",{});var vbt=s(L_e);CJo=r(vbt,"AutoModelForTableQuestionAnswering"),vbt.forEach(t),iOe.forEach(t),nDe=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(_y.$$.fragment,Zs),wJo=i(Zs),ad=n(Zs,"P",{});var Eee=s(ad);AJo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QX=n(Eee,"A",{href:!0});var Fbt=s(QX);LJo=r(Fbt,"from_pretrained()"),Fbt.forEach(t),yJo=r(Eee," class method or the "),HX=n(Eee,"A",{href:!0});var Tbt=s(HX);xJo=r(Tbt,"from_config()"),Tbt.forEach(t),$Jo=r(Eee,` class
method.`),Eee.forEach(t),kJo=i(Zs),uy=n(Zs,"P",{});var dOe=s(uy);SJo=r(dOe,"This class cannot be instantiated directly using "),y_e=n(dOe,"CODE",{});var Mbt=s(y_e);RJo=r(Mbt,"__init__()"),Mbt.forEach(t),PJo=r(dOe," (throws an error)."),dOe.forEach(t),BJo=i(Zs),ht=n(Zs,"DIV",{class:!0});var bA=s(ht);T(by.$$.fragment,bA),IJo=i(bA),x_e=n(bA,"P",{});var Ebt=s(x_e);NJo=r(Ebt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ebt.forEach(t),qJo=i(bA),nd=n(bA,"P",{});var Cee=s(nd);jJo=r(Cee,`Note:
Loading a model from its configuration file does `),$_e=n(Cee,"STRONG",{});var Cbt=s($_e);DJo=r(Cbt,"not"),Cbt.forEach(t),GJo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(Cee,"A",{href:!0});var wbt=s(UX);OJo=r(wbt,"from_pretrained()"),wbt.forEach(t),VJo=r(Cee," to load the model weights."),Cee.forEach(t),XJo=i(bA),T(pv.$$.fragment,bA),bA.forEach(t),zJo=i(Zs),so=n(Zs,"DIV",{class:!0});var ma=s(so);T(vy.$$.fragment,ma),WJo=i(ma),k_e=n(ma,"P",{});var Abt=s(k_e);QJo=r(Abt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Abt.forEach(t),HJo=i(ma),ja=n(ma,"P",{});var vA=s(ja);UJo=r(vA,"The model class to instantiate is selected based on the "),S_e=n(vA,"CODE",{});var Lbt=s(S_e);JJo=r(Lbt,"model_type"),Lbt.forEach(t),YJo=r(vA,` property of the config object (either
passed as an argument or loaded from `),R_e=n(vA,"CODE",{});var ybt=s(R_e);KJo=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),ZJo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(vA,"CODE",{});var xbt=s(P_e);eYo=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),oYo=r(vA,":"),vA.forEach(t),rYo=i(ma),B_e=n(ma,"UL",{});var $bt=s(B_e);_v=n($bt,"LI",{});var TSe=s(_v);I_e=n(TSe,"STRONG",{});var kbt=s(I_e);tYo=r(kbt,"tapas"),kbt.forEach(t),aYo=r(TSe," \u2014 "),JX=n(TSe,"A",{href:!0});var Sbt=s(JX);nYo=r(Sbt,"TapasForQuestionAnswering"),Sbt.forEach(t),sYo=r(TSe," (TAPAS model)"),TSe.forEach(t),$bt.forEach(t),lYo=i(ma),uv=n(ma,"P",{});var MSe=s(uv);iYo=r(MSe,"The model is set in evaluation mode by default using "),N_e=n(MSe,"CODE",{});var Rbt=s(N_e);dYo=r(Rbt,"model.eval()"),Rbt.forEach(t),cYo=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(MSe,"CODE",{});var Pbt=s(q_e);fYo=r(Pbt,"model.train()"),Pbt.forEach(t),MSe.forEach(t),mYo=i(ma),T(bv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),sDe=i(f),sd=n(f,"H2",{class:!0});var cOe=s(sd);vv=n(cOe,"A",{id:!0,class:!0,href:!0});var Bbt=s(vv);j_e=n(Bbt,"SPAN",{});var Ibt=s(j_e);T(Fy.$$.fragment,Ibt),Ibt.forEach(t),Bbt.forEach(t),gYo=i(cOe),D_e=n(cOe,"SPAN",{});var Nbt=s(D_e);hYo=r(Nbt,"AutoModelForImageClassification"),Nbt.forEach(t),cOe.forEach(t),lDe=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(Ty.$$.fragment,el),pYo=i(el),ld=n(el,"P",{});var wee=s(ld);_Yo=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YX=n(wee,"A",{href:!0});var qbt=s(YX);uYo=r(qbt,"from_pretrained()"),qbt.forEach(t),bYo=r(wee," class method or the "),KX=n(wee,"A",{href:!0});var jbt=s(KX);vYo=r(jbt,"from_config()"),jbt.forEach(t),FYo=r(wee,` class
method.`),wee.forEach(t),TYo=i(el),My=n(el,"P",{});var fOe=s(My);MYo=r(fOe,"This class cannot be instantiated directly using "),G_e=n(fOe,"CODE",{});var Dbt=s(G_e);EYo=r(Dbt,"__init__()"),Dbt.forEach(t),CYo=r(fOe," (throws an error)."),fOe.forEach(t),wYo=i(el),pt=n(el,"DIV",{class:!0});var FA=s(pt);T(Ey.$$.fragment,FA),AYo=i(FA),O_e=n(FA,"P",{});var Gbt=s(O_e);LYo=r(Gbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gbt.forEach(t),yYo=i(FA),id=n(FA,"P",{});var Aee=s(id);xYo=r(Aee,`Note:
Loading a model from its configuration file does `),V_e=n(Aee,"STRONG",{});var Obt=s(V_e);$Yo=r(Obt,"not"),Obt.forEach(t),kYo=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Aee,"A",{href:!0});var Vbt=s(ZX);SYo=r(Vbt,"from_pretrained()"),Vbt.forEach(t),RYo=r(Aee," to load the model weights."),Aee.forEach(t),PYo=i(FA),T(Fv.$$.fragment,FA),FA.forEach(t),BYo=i(el),lo=n(el,"DIV",{class:!0});var ga=s(lo);T(Cy.$$.fragment,ga),IYo=i(ga),X_e=n(ga,"P",{});var Xbt=s(X_e);NYo=r(Xbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xbt.forEach(t),qYo=i(ga),Da=n(ga,"P",{});var TA=s(Da);jYo=r(TA,"The model class to instantiate is selected based on the "),z_e=n(TA,"CODE",{});var zbt=s(z_e);DYo=r(zbt,"model_type"),zbt.forEach(t),GYo=r(TA,` property of the config object (either
passed as an argument or loaded from `),W_e=n(TA,"CODE",{});var Wbt=s(W_e);OYo=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),VYo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(TA,"CODE",{});var Qbt=s(Q_e);XYo=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),zYo=r(TA,":"),TA.forEach(t),WYo=i(ga),ve=n(ga,"UL",{});var Te=s(ve);Tv=n(Te,"LI",{});var ESe=s(Tv);H_e=n(ESe,"STRONG",{});var Hbt=s(H_e);QYo=r(Hbt,"beit"),Hbt.forEach(t),HYo=r(ESe," \u2014 "),ez=n(ESe,"A",{href:!0});var Ubt=s(ez);UYo=r(Ubt,"BeitForImageClassification"),Ubt.forEach(t),JYo=r(ESe," (BEiT model)"),ESe.forEach(t),YYo=i(Te),Mv=n(Te,"LI",{});var CSe=s(Mv);U_e=n(CSe,"STRONG",{});var Jbt=s(U_e);KYo=r(Jbt,"convnext"),Jbt.forEach(t),ZYo=r(CSe," \u2014 "),oz=n(CSe,"A",{href:!0});var Ybt=s(oz);eKo=r(Ybt,"ConvNextForImageClassification"),Ybt.forEach(t),oKo=r(CSe," (ConvNeXT model)"),CSe.forEach(t),rKo=i(Te),Ev=n(Te,"LI",{});var wSe=s(Ev);J_e=n(wSe,"STRONG",{});var Kbt=s(J_e);tKo=r(Kbt,"cvt"),Kbt.forEach(t),aKo=r(wSe," \u2014 "),rz=n(wSe,"A",{href:!0});var Zbt=s(rz);nKo=r(Zbt,"CvtForImageClassification"),Zbt.forEach(t),sKo=r(wSe," (CvT model)"),wSe.forEach(t),lKo=i(Te),Cv=n(Te,"LI",{});var ASe=s(Cv);Y_e=n(ASe,"STRONG",{});var e2t=s(Y_e);iKo=r(e2t,"data2vec-vision"),e2t.forEach(t),dKo=r(ASe," \u2014 "),tz=n(ASe,"A",{href:!0});var o2t=s(tz);cKo=r(o2t,"Data2VecVisionForImageClassification"),o2t.forEach(t),fKo=r(ASe," (Data2VecVision model)"),ASe.forEach(t),mKo=i(Te),Bs=n(Te,"LI",{});var dk=s(Bs);K_e=n(dk,"STRONG",{});var r2t=s(K_e);gKo=r(r2t,"deit"),r2t.forEach(t),hKo=r(dk," \u2014 "),az=n(dk,"A",{href:!0});var t2t=s(az);pKo=r(t2t,"DeiTForImageClassification"),t2t.forEach(t),_Ko=r(dk," or "),nz=n(dk,"A",{href:!0});var a2t=s(nz);uKo=r(a2t,"DeiTForImageClassificationWithTeacher"),a2t.forEach(t),bKo=r(dk," (DeiT model)"),dk.forEach(t),vKo=i(Te),wv=n(Te,"LI",{});var LSe=s(wv);Z_e=n(LSe,"STRONG",{});var n2t=s(Z_e);FKo=r(n2t,"imagegpt"),n2t.forEach(t),TKo=r(LSe," \u2014 "),sz=n(LSe,"A",{href:!0});var s2t=s(sz);MKo=r(s2t,"ImageGPTForImageClassification"),s2t.forEach(t),EKo=r(LSe," (ImageGPT model)"),LSe.forEach(t),CKo=i(Te),Is=n(Te,"LI",{});var ck=s(Is);eue=n(ck,"STRONG",{});var l2t=s(eue);wKo=r(l2t,"levit"),l2t.forEach(t),AKo=r(ck," \u2014 "),lz=n(ck,"A",{href:!0});var i2t=s(lz);LKo=r(i2t,"LevitForImageClassification"),i2t.forEach(t),yKo=r(ck," or "),iz=n(ck,"A",{href:!0});var d2t=s(iz);xKo=r(d2t,"LevitForImageClassificationWithTeacher"),d2t.forEach(t),$Ko=r(ck," (LeViT model)"),ck.forEach(t),kKo=i(Te),_t=n(Te,"LI",{});var _f=s(_t);oue=n(_f,"STRONG",{});var c2t=s(oue);SKo=r(c2t,"perceiver"),c2t.forEach(t),RKo=r(_f," \u2014 "),dz=n(_f,"A",{href:!0});var f2t=s(dz);PKo=r(f2t,"PerceiverForImageClassificationLearned"),f2t.forEach(t),BKo=r(_f," or "),cz=n(_f,"A",{href:!0});var m2t=s(cz);IKo=r(m2t,"PerceiverForImageClassificationFourier"),m2t.forEach(t),NKo=r(_f," or "),fz=n(_f,"A",{href:!0});var g2t=s(fz);qKo=r(g2t,"PerceiverForImageClassificationConvProcessing"),g2t.forEach(t),jKo=r(_f," (Perceiver model)"),_f.forEach(t),DKo=i(Te),Av=n(Te,"LI",{});var ySe=s(Av);rue=n(ySe,"STRONG",{});var h2t=s(rue);GKo=r(h2t,"poolformer"),h2t.forEach(t),OKo=r(ySe," \u2014 "),mz=n(ySe,"A",{href:!0});var p2t=s(mz);VKo=r(p2t,"PoolFormerForImageClassification"),p2t.forEach(t),XKo=r(ySe," (PoolFormer model)"),ySe.forEach(t),zKo=i(Te),Lv=n(Te,"LI",{});var xSe=s(Lv);tue=n(xSe,"STRONG",{});var _2t=s(tue);WKo=r(_2t,"regnet"),_2t.forEach(t),QKo=r(xSe," \u2014 "),gz=n(xSe,"A",{href:!0});var u2t=s(gz);HKo=r(u2t,"RegNetForImageClassification"),u2t.forEach(t),UKo=r(xSe," (RegNet model)"),xSe.forEach(t),JKo=i(Te),yv=n(Te,"LI",{});var $Se=s(yv);aue=n($Se,"STRONG",{});var b2t=s(aue);YKo=r(b2t,"resnet"),b2t.forEach(t),KKo=r($Se," \u2014 "),hz=n($Se,"A",{href:!0});var v2t=s(hz);ZKo=r(v2t,"ResNetForImageClassification"),v2t.forEach(t),eZo=r($Se," (ResNet model)"),$Se.forEach(t),oZo=i(Te),xv=n(Te,"LI",{});var kSe=s(xv);nue=n(kSe,"STRONG",{});var F2t=s(nue);rZo=r(F2t,"segformer"),F2t.forEach(t),tZo=r(kSe," \u2014 "),pz=n(kSe,"A",{href:!0});var T2t=s(pz);aZo=r(T2t,"SegformerForImageClassification"),T2t.forEach(t),nZo=r(kSe," (SegFormer model)"),kSe.forEach(t),sZo=i(Te),$v=n(Te,"LI",{});var SSe=s($v);sue=n(SSe,"STRONG",{});var M2t=s(sue);lZo=r(M2t,"swin"),M2t.forEach(t),iZo=r(SSe," \u2014 "),_z=n(SSe,"A",{href:!0});var E2t=s(_z);dZo=r(E2t,"SwinForImageClassification"),E2t.forEach(t),cZo=r(SSe," (Swin Transformer model)"),SSe.forEach(t),fZo=i(Te),kv=n(Te,"LI",{});var RSe=s(kv);lue=n(RSe,"STRONG",{});var C2t=s(lue);mZo=r(C2t,"van"),C2t.forEach(t),gZo=r(RSe," \u2014 "),uz=n(RSe,"A",{href:!0});var w2t=s(uz);hZo=r(w2t,"VanForImageClassification"),w2t.forEach(t),pZo=r(RSe," (VAN model)"),RSe.forEach(t),_Zo=i(Te),Sv=n(Te,"LI",{});var PSe=s(Sv);iue=n(PSe,"STRONG",{});var A2t=s(iue);uZo=r(A2t,"vit"),A2t.forEach(t),bZo=r(PSe," \u2014 "),bz=n(PSe,"A",{href:!0});var L2t=s(bz);vZo=r(L2t,"ViTForImageClassification"),L2t.forEach(t),FZo=r(PSe," (ViT model)"),PSe.forEach(t),Te.forEach(t),TZo=i(ga),Rv=n(ga,"P",{});var BSe=s(Rv);MZo=r(BSe,"The model is set in evaluation mode by default using "),due=n(BSe,"CODE",{});var y2t=s(due);EZo=r(y2t,"model.eval()"),y2t.forEach(t),CZo=r(BSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(BSe,"CODE",{});var x2t=s(cue);wZo=r(x2t,"model.train()"),x2t.forEach(t),BSe.forEach(t),AZo=i(ga),T(Pv.$$.fragment,ga),ga.forEach(t),el.forEach(t),iDe=i(f),dd=n(f,"H2",{class:!0});var mOe=s(dd);Bv=n(mOe,"A",{id:!0,class:!0,href:!0});var $2t=s(Bv);fue=n($2t,"SPAN",{});var k2t=s(fue);T(wy.$$.fragment,k2t),k2t.forEach(t),$2t.forEach(t),LZo=i(mOe),mue=n(mOe,"SPAN",{});var S2t=s(mue);yZo=r(S2t,"AutoModelForVision2Seq"),S2t.forEach(t),mOe.forEach(t),dDe=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(Ay.$$.fragment,ol),xZo=i(ol),cd=n(ol,"P",{});var Lee=s(cd);$Zo=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vz=n(Lee,"A",{href:!0});var R2t=s(vz);kZo=r(R2t,"from_pretrained()"),R2t.forEach(t),SZo=r(Lee," class method or the "),Fz=n(Lee,"A",{href:!0});var P2t=s(Fz);RZo=r(P2t,"from_config()"),P2t.forEach(t),PZo=r(Lee,` class
method.`),Lee.forEach(t),BZo=i(ol),Ly=n(ol,"P",{});var gOe=s(Ly);IZo=r(gOe,"This class cannot be instantiated directly using "),gue=n(gOe,"CODE",{});var B2t=s(gue);NZo=r(B2t,"__init__()"),B2t.forEach(t),qZo=r(gOe," (throws an error)."),gOe.forEach(t),jZo=i(ol),ut=n(ol,"DIV",{class:!0});var MA=s(ut);T(yy.$$.fragment,MA),DZo=i(MA),hue=n(MA,"P",{});var I2t=s(hue);GZo=r(I2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),I2t.forEach(t),OZo=i(MA),fd=n(MA,"P",{});var yee=s(fd);VZo=r(yee,`Note:
Loading a model from its configuration file does `),pue=n(yee,"STRONG",{});var N2t=s(pue);XZo=r(N2t,"not"),N2t.forEach(t),zZo=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(yee,"A",{href:!0});var q2t=s(Tz);WZo=r(q2t,"from_pretrained()"),q2t.forEach(t),QZo=r(yee," to load the model weights."),yee.forEach(t),HZo=i(MA),T(Iv.$$.fragment,MA),MA.forEach(t),UZo=i(ol),io=n(ol,"DIV",{class:!0});var ha=s(io);T(xy.$$.fragment,ha),JZo=i(ha),_ue=n(ha,"P",{});var j2t=s(_ue);YZo=r(j2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j2t.forEach(t),KZo=i(ha),Ga=n(ha,"P",{});var EA=s(Ga);ZZo=r(EA,"The model class to instantiate is selected based on the "),uue=n(EA,"CODE",{});var D2t=s(uue);eer=r(D2t,"model_type"),D2t.forEach(t),oer=r(EA,` property of the config object (either
passed as an argument or loaded from `),bue=n(EA,"CODE",{});var G2t=s(bue);rer=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),ter=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(EA,"CODE",{});var O2t=s(vue);aer=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),ner=r(EA,":"),EA.forEach(t),ser=i(ha),Fue=n(ha,"UL",{});var V2t=s(Fue);Nv=n(V2t,"LI",{});var ISe=s(Nv);Tue=n(ISe,"STRONG",{});var X2t=s(Tue);ler=r(X2t,"vision-encoder-decoder"),X2t.forEach(t),ier=r(ISe," \u2014 "),Mz=n(ISe,"A",{href:!0});var z2t=s(Mz);der=r(z2t,"VisionEncoderDecoderModel"),z2t.forEach(t),cer=r(ISe," (Vision Encoder decoder model)"),ISe.forEach(t),V2t.forEach(t),fer=i(ha),qv=n(ha,"P",{});var NSe=s(qv);mer=r(NSe,"The model is set in evaluation mode by default using "),Mue=n(NSe,"CODE",{});var W2t=s(Mue);ger=r(W2t,"model.eval()"),W2t.forEach(t),her=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(NSe,"CODE",{});var Q2t=s(Eue);per=r(Q2t,"model.train()"),Q2t.forEach(t),NSe.forEach(t),_er=i(ha),T(jv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),cDe=i(f),md=n(f,"H2",{class:!0});var hOe=s(md);Dv=n(hOe,"A",{id:!0,class:!0,href:!0});var H2t=s(Dv);Cue=n(H2t,"SPAN",{});var U2t=s(Cue);T($y.$$.fragment,U2t),U2t.forEach(t),H2t.forEach(t),uer=i(hOe),wue=n(hOe,"SPAN",{});var J2t=s(wue);ber=r(J2t,"AutoModelForAudioClassification"),J2t.forEach(t),hOe.forEach(t),fDe=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(ky.$$.fragment,rl),ver=i(rl),gd=n(rl,"P",{});var xee=s(gd);Fer=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Ez=n(xee,"A",{href:!0});var Y2t=s(Ez);Ter=r(Y2t,"from_pretrained()"),Y2t.forEach(t),Mer=r(xee," class method or the "),Cz=n(xee,"A",{href:!0});var K2t=s(Cz);Eer=r(K2t,"from_config()"),K2t.forEach(t),Cer=r(xee,` class
method.`),xee.forEach(t),wer=i(rl),Sy=n(rl,"P",{});var pOe=s(Sy);Aer=r(pOe,"This class cannot be instantiated directly using "),Aue=n(pOe,"CODE",{});var Z2t=s(Aue);Ler=r(Z2t,"__init__()"),Z2t.forEach(t),yer=r(pOe," (throws an error)."),pOe.forEach(t),xer=i(rl),bt=n(rl,"DIV",{class:!0});var CA=s(bt);T(Ry.$$.fragment,CA),$er=i(CA),Lue=n(CA,"P",{});var e4t=s(Lue);ker=r(e4t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),e4t.forEach(t),Ser=i(CA),hd=n(CA,"P",{});var $ee=s(hd);Rer=r($ee,`Note:
Loading a model from its configuration file does `),yue=n($ee,"STRONG",{});var o4t=s(yue);Per=r(o4t,"not"),o4t.forEach(t),Ber=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n($ee,"A",{href:!0});var r4t=s(wz);Ier=r(r4t,"from_pretrained()"),r4t.forEach(t),Ner=r($ee," to load the model weights."),$ee.forEach(t),qer=i(CA),T(Gv.$$.fragment,CA),CA.forEach(t),jer=i(rl),co=n(rl,"DIV",{class:!0});var pa=s(co);T(Py.$$.fragment,pa),Der=i(pa),xue=n(pa,"P",{});var t4t=s(xue);Ger=r(t4t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),t4t.forEach(t),Oer=i(pa),Oa=n(pa,"P",{});var wA=s(Oa);Ver=r(wA,"The model class to instantiate is selected based on the "),$ue=n(wA,"CODE",{});var a4t=s($ue);Xer=r(a4t,"model_type"),a4t.forEach(t),zer=r(wA,` property of the config object (either
passed as an argument or loaded from `),kue=n(wA,"CODE",{});var n4t=s(kue);Wer=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),Qer=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(wA,"CODE",{});var s4t=s(Sue);Her=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),Uer=r(wA,":"),wA.forEach(t),Jer=i(pa),Re=n(pa,"UL",{});var Xe=s(Re);Ov=n(Xe,"LI",{});var qSe=s(Ov);Rue=n(qSe,"STRONG",{});var l4t=s(Rue);Yer=r(l4t,"data2vec-audio"),l4t.forEach(t),Ker=r(qSe," \u2014 "),Az=n(qSe,"A",{href:!0});var i4t=s(Az);Zer=r(i4t,"Data2VecAudioForSequenceClassification"),i4t.forEach(t),eor=r(qSe," (Data2VecAudio model)"),qSe.forEach(t),oor=i(Xe),Vv=n(Xe,"LI",{});var jSe=s(Vv);Pue=n(jSe,"STRONG",{});var d4t=s(Pue);ror=r(d4t,"hubert"),d4t.forEach(t),tor=r(jSe," \u2014 "),Lz=n(jSe,"A",{href:!0});var c4t=s(Lz);aor=r(c4t,"HubertForSequenceClassification"),c4t.forEach(t),nor=r(jSe," (Hubert model)"),jSe.forEach(t),sor=i(Xe),Xv=n(Xe,"LI",{});var DSe=s(Xv);Bue=n(DSe,"STRONG",{});var f4t=s(Bue);lor=r(f4t,"sew"),f4t.forEach(t),ior=r(DSe," \u2014 "),yz=n(DSe,"A",{href:!0});var m4t=s(yz);dor=r(m4t,"SEWForSequenceClassification"),m4t.forEach(t),cor=r(DSe," (SEW model)"),DSe.forEach(t),mor=i(Xe),zv=n(Xe,"LI",{});var GSe=s(zv);Iue=n(GSe,"STRONG",{});var g4t=s(Iue);gor=r(g4t,"sew-d"),g4t.forEach(t),hor=r(GSe," \u2014 "),xz=n(GSe,"A",{href:!0});var h4t=s(xz);por=r(h4t,"SEWDForSequenceClassification"),h4t.forEach(t),_or=r(GSe," (SEW-D model)"),GSe.forEach(t),uor=i(Xe),Wv=n(Xe,"LI",{});var OSe=s(Wv);Nue=n(OSe,"STRONG",{});var p4t=s(Nue);bor=r(p4t,"unispeech"),p4t.forEach(t),vor=r(OSe," \u2014 "),$z=n(OSe,"A",{href:!0});var _4t=s($z);For=r(_4t,"UniSpeechForSequenceClassification"),_4t.forEach(t),Tor=r(OSe," (UniSpeech model)"),OSe.forEach(t),Mor=i(Xe),Qv=n(Xe,"LI",{});var VSe=s(Qv);que=n(VSe,"STRONG",{});var u4t=s(que);Eor=r(u4t,"unispeech-sat"),u4t.forEach(t),Cor=r(VSe," \u2014 "),kz=n(VSe,"A",{href:!0});var b4t=s(kz);wor=r(b4t,"UniSpeechSatForSequenceClassification"),b4t.forEach(t),Aor=r(VSe," (UniSpeechSat model)"),VSe.forEach(t),Lor=i(Xe),Hv=n(Xe,"LI",{});var XSe=s(Hv);jue=n(XSe,"STRONG",{});var v4t=s(jue);yor=r(v4t,"wav2vec2"),v4t.forEach(t),xor=r(XSe," \u2014 "),Sz=n(XSe,"A",{href:!0});var F4t=s(Sz);$or=r(F4t,"Wav2Vec2ForSequenceClassification"),F4t.forEach(t),kor=r(XSe," (Wav2Vec2 model)"),XSe.forEach(t),Sor=i(Xe),Uv=n(Xe,"LI",{});var zSe=s(Uv);Due=n(zSe,"STRONG",{});var T4t=s(Due);Ror=r(T4t,"wav2vec2-conformer"),T4t.forEach(t),Por=r(zSe," \u2014 "),Rz=n(zSe,"A",{href:!0});var M4t=s(Rz);Bor=r(M4t,"Wav2Vec2ConformerForSequenceClassification"),M4t.forEach(t),Ior=r(zSe," (Wav2Vec2-Conformer model)"),zSe.forEach(t),Nor=i(Xe),Jv=n(Xe,"LI",{});var WSe=s(Jv);Gue=n(WSe,"STRONG",{});var E4t=s(Gue);qor=r(E4t,"wavlm"),E4t.forEach(t),jor=r(WSe," \u2014 "),Pz=n(WSe,"A",{href:!0});var C4t=s(Pz);Dor=r(C4t,"WavLMForSequenceClassification"),C4t.forEach(t),Gor=r(WSe," (WavLM model)"),WSe.forEach(t),Xe.forEach(t),Oor=i(pa),Yv=n(pa,"P",{});var QSe=s(Yv);Vor=r(QSe,"The model is set in evaluation mode by default using "),Oue=n(QSe,"CODE",{});var w4t=s(Oue);Xor=r(w4t,"model.eval()"),w4t.forEach(t),zor=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(QSe,"CODE",{});var A4t=s(Vue);Wor=r(A4t,"model.train()"),A4t.forEach(t),QSe.forEach(t),Qor=i(pa),T(Kv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),mDe=i(f),pd=n(f,"H2",{class:!0});var _Oe=s(pd);Zv=n(_Oe,"A",{id:!0,class:!0,href:!0});var L4t=s(Zv);Xue=n(L4t,"SPAN",{});var y4t=s(Xue);T(By.$$.fragment,y4t),y4t.forEach(t),L4t.forEach(t),Hor=i(_Oe),zue=n(_Oe,"SPAN",{});var x4t=s(zue);Uor=r(x4t,"AutoModelForAudioFrameClassification"),x4t.forEach(t),_Oe.forEach(t),gDe=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(Iy.$$.fragment,tl),Jor=i(tl),_d=n(tl,"P",{});var kee=s(_d);Yor=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Bz=n(kee,"A",{href:!0});var $4t=s(Bz);Kor=r($4t,"from_pretrained()"),$4t.forEach(t),Zor=r(kee," class method or the "),Iz=n(kee,"A",{href:!0});var k4t=s(Iz);err=r(k4t,"from_config()"),k4t.forEach(t),orr=r(kee,` class
method.`),kee.forEach(t),rrr=i(tl),Ny=n(tl,"P",{});var uOe=s(Ny);trr=r(uOe,"This class cannot be instantiated directly using "),Wue=n(uOe,"CODE",{});var S4t=s(Wue);arr=r(S4t,"__init__()"),S4t.forEach(t),nrr=r(uOe," (throws an error)."),uOe.forEach(t),srr=i(tl),vt=n(tl,"DIV",{class:!0});var AA=s(vt);T(qy.$$.fragment,AA),lrr=i(AA),Que=n(AA,"P",{});var R4t=s(Que);irr=r(R4t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),R4t.forEach(t),drr=i(AA),ud=n(AA,"P",{});var See=s(ud);crr=r(See,`Note:
Loading a model from its configuration file does `),Hue=n(See,"STRONG",{});var P4t=s(Hue);frr=r(P4t,"not"),P4t.forEach(t),mrr=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(See,"A",{href:!0});var B4t=s(Nz);grr=r(B4t,"from_pretrained()"),B4t.forEach(t),hrr=r(See," to load the model weights."),See.forEach(t),prr=i(AA),T(eF.$$.fragment,AA),AA.forEach(t),_rr=i(tl),fo=n(tl,"DIV",{class:!0});var _a=s(fo);T(jy.$$.fragment,_a),urr=i(_a),Uue=n(_a,"P",{});var I4t=s(Uue);brr=r(I4t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),I4t.forEach(t),vrr=i(_a),Va=n(_a,"P",{});var LA=s(Va);Frr=r(LA,"The model class to instantiate is selected based on the "),Jue=n(LA,"CODE",{});var N4t=s(Jue);Trr=r(N4t,"model_type"),N4t.forEach(t),Mrr=r(LA,` property of the config object (either
passed as an argument or loaded from `),Yue=n(LA,"CODE",{});var q4t=s(Yue);Err=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),Crr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(LA,"CODE",{});var j4t=s(Kue);wrr=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),Arr=r(LA,":"),LA.forEach(t),Lrr=i(_a),Kr=n(_a,"UL",{});var al=s(Kr);oF=n(al,"LI",{});var HSe=s(oF);Zue=n(HSe,"STRONG",{});var D4t=s(Zue);yrr=r(D4t,"data2vec-audio"),D4t.forEach(t),xrr=r(HSe," \u2014 "),qz=n(HSe,"A",{href:!0});var G4t=s(qz);$rr=r(G4t,"Data2VecAudioForAudioFrameClassification"),G4t.forEach(t),krr=r(HSe," (Data2VecAudio model)"),HSe.forEach(t),Srr=i(al),rF=n(al,"LI",{});var USe=s(rF);e5e=n(USe,"STRONG",{});var O4t=s(e5e);Rrr=r(O4t,"unispeech-sat"),O4t.forEach(t),Prr=r(USe," \u2014 "),jz=n(USe,"A",{href:!0});var V4t=s(jz);Brr=r(V4t,"UniSpeechSatForAudioFrameClassification"),V4t.forEach(t),Irr=r(USe," (UniSpeechSat model)"),USe.forEach(t),Nrr=i(al),tF=n(al,"LI",{});var JSe=s(tF);o5e=n(JSe,"STRONG",{});var X4t=s(o5e);qrr=r(X4t,"wav2vec2"),X4t.forEach(t),jrr=r(JSe," \u2014 "),Dz=n(JSe,"A",{href:!0});var z4t=s(Dz);Drr=r(z4t,"Wav2Vec2ForAudioFrameClassification"),z4t.forEach(t),Grr=r(JSe," (Wav2Vec2 model)"),JSe.forEach(t),Orr=i(al),aF=n(al,"LI",{});var YSe=s(aF);r5e=n(YSe,"STRONG",{});var W4t=s(r5e);Vrr=r(W4t,"wav2vec2-conformer"),W4t.forEach(t),Xrr=r(YSe," \u2014 "),Gz=n(YSe,"A",{href:!0});var Q4t=s(Gz);zrr=r(Q4t,"Wav2Vec2ConformerForAudioFrameClassification"),Q4t.forEach(t),Wrr=r(YSe," (Wav2Vec2-Conformer model)"),YSe.forEach(t),Qrr=i(al),nF=n(al,"LI",{});var KSe=s(nF);t5e=n(KSe,"STRONG",{});var H4t=s(t5e);Hrr=r(H4t,"wavlm"),H4t.forEach(t),Urr=r(KSe," \u2014 "),Oz=n(KSe,"A",{href:!0});var U4t=s(Oz);Jrr=r(U4t,"WavLMForAudioFrameClassification"),U4t.forEach(t),Yrr=r(KSe," (WavLM model)"),KSe.forEach(t),al.forEach(t),Krr=i(_a),sF=n(_a,"P",{});var ZSe=s(sF);Zrr=r(ZSe,"The model is set in evaluation mode by default using "),a5e=n(ZSe,"CODE",{});var J4t=s(a5e);etr=r(J4t,"model.eval()"),J4t.forEach(t),otr=r(ZSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n5e=n(ZSe,"CODE",{});var Y4t=s(n5e);rtr=r(Y4t,"model.train()"),Y4t.forEach(t),ZSe.forEach(t),ttr=i(_a),T(lF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),hDe=i(f),bd=n(f,"H2",{class:!0});var bOe=s(bd);iF=n(bOe,"A",{id:!0,class:!0,href:!0});var K4t=s(iF);s5e=n(K4t,"SPAN",{});var Z4t=s(s5e);T(Dy.$$.fragment,Z4t),Z4t.forEach(t),K4t.forEach(t),atr=i(bOe),l5e=n(bOe,"SPAN",{});var evt=s(l5e);ntr=r(evt,"AutoModelForCTC"),evt.forEach(t),bOe.forEach(t),pDe=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(Gy.$$.fragment,nl),str=i(nl),vd=n(nl,"P",{});var Ree=s(vd);ltr=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vz=n(Ree,"A",{href:!0});var ovt=s(Vz);itr=r(ovt,"from_pretrained()"),ovt.forEach(t),dtr=r(Ree," class method or the "),Xz=n(Ree,"A",{href:!0});var rvt=s(Xz);ctr=r(rvt,"from_config()"),rvt.forEach(t),ftr=r(Ree,` class
method.`),Ree.forEach(t),mtr=i(nl),Oy=n(nl,"P",{});var vOe=s(Oy);gtr=r(vOe,"This class cannot be instantiated directly using "),i5e=n(vOe,"CODE",{});var tvt=s(i5e);htr=r(tvt,"__init__()"),tvt.forEach(t),ptr=r(vOe," (throws an error)."),vOe.forEach(t),_tr=i(nl),Ft=n(nl,"DIV",{class:!0});var yA=s(Ft);T(Vy.$$.fragment,yA),utr=i(yA),d5e=n(yA,"P",{});var avt=s(d5e);btr=r(avt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),avt.forEach(t),vtr=i(yA),Fd=n(yA,"P",{});var Pee=s(Fd);Ftr=r(Pee,`Note:
Loading a model from its configuration file does `),c5e=n(Pee,"STRONG",{});var nvt=s(c5e);Ttr=r(nvt,"not"),nvt.forEach(t),Mtr=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(Pee,"A",{href:!0});var svt=s(zz);Etr=r(svt,"from_pretrained()"),svt.forEach(t),Ctr=r(Pee," to load the model weights."),Pee.forEach(t),wtr=i(yA),T(dF.$$.fragment,yA),yA.forEach(t),Atr=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(Xy.$$.fragment,ua),Ltr=i(ua),f5e=n(ua,"P",{});var lvt=s(f5e);ytr=r(lvt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lvt.forEach(t),xtr=i(ua),Xa=n(ua,"P",{});var xA=s(Xa);$tr=r(xA,"The model class to instantiate is selected based on the "),m5e=n(xA,"CODE",{});var ivt=s(m5e);ktr=r(ivt,"model_type"),ivt.forEach(t),Str=r(xA,` property of the config object (either
passed as an argument or loaded from `),g5e=n(xA,"CODE",{});var dvt=s(g5e);Rtr=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),Ptr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(xA,"CODE",{});var cvt=s(h5e);Btr=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),Itr=r(xA,":"),xA.forEach(t),Ntr=i(ua),Le=n(ua,"UL",{});var Be=s(Le);cF=n(Be,"LI",{});var eRe=s(cF);p5e=n(eRe,"STRONG",{});var fvt=s(p5e);qtr=r(fvt,"data2vec-audio"),fvt.forEach(t),jtr=r(eRe," \u2014 "),Wz=n(eRe,"A",{href:!0});var mvt=s(Wz);Dtr=r(mvt,"Data2VecAudioForCTC"),mvt.forEach(t),Gtr=r(eRe," (Data2VecAudio model)"),eRe.forEach(t),Otr=i(Be),fF=n(Be,"LI",{});var oRe=s(fF);_5e=n(oRe,"STRONG",{});var gvt=s(_5e);Vtr=r(gvt,"hubert"),gvt.forEach(t),Xtr=r(oRe," \u2014 "),Qz=n(oRe,"A",{href:!0});var hvt=s(Qz);ztr=r(hvt,"HubertForCTC"),hvt.forEach(t),Wtr=r(oRe," (Hubert model)"),oRe.forEach(t),Qtr=i(Be),mF=n(Be,"LI",{});var rRe=s(mF);u5e=n(rRe,"STRONG",{});var pvt=s(u5e);Htr=r(pvt,"mctct"),pvt.forEach(t),Utr=r(rRe," \u2014 "),Hz=n(rRe,"A",{href:!0});var _vt=s(Hz);Jtr=r(_vt,"MCTCTForCTC"),_vt.forEach(t),Ytr=r(rRe," (M-CTC-T model)"),rRe.forEach(t),Ktr=i(Be),gF=n(Be,"LI",{});var tRe=s(gF);b5e=n(tRe,"STRONG",{});var uvt=s(b5e);Ztr=r(uvt,"sew"),uvt.forEach(t),ear=r(tRe," \u2014 "),Uz=n(tRe,"A",{href:!0});var bvt=s(Uz);oar=r(bvt,"SEWForCTC"),bvt.forEach(t),rar=r(tRe," (SEW model)"),tRe.forEach(t),tar=i(Be),hF=n(Be,"LI",{});var aRe=s(hF);v5e=n(aRe,"STRONG",{});var vvt=s(v5e);aar=r(vvt,"sew-d"),vvt.forEach(t),nar=r(aRe," \u2014 "),Jz=n(aRe,"A",{href:!0});var Fvt=s(Jz);sar=r(Fvt,"SEWDForCTC"),Fvt.forEach(t),lar=r(aRe," (SEW-D model)"),aRe.forEach(t),iar=i(Be),pF=n(Be,"LI",{});var nRe=s(pF);F5e=n(nRe,"STRONG",{});var Tvt=s(F5e);dar=r(Tvt,"unispeech"),Tvt.forEach(t),car=r(nRe," \u2014 "),Yz=n(nRe,"A",{href:!0});var Mvt=s(Yz);far=r(Mvt,"UniSpeechForCTC"),Mvt.forEach(t),mar=r(nRe," (UniSpeech model)"),nRe.forEach(t),gar=i(Be),_F=n(Be,"LI",{});var sRe=s(_F);T5e=n(sRe,"STRONG",{});var Evt=s(T5e);har=r(Evt,"unispeech-sat"),Evt.forEach(t),par=r(sRe," \u2014 "),Kz=n(sRe,"A",{href:!0});var Cvt=s(Kz);_ar=r(Cvt,"UniSpeechSatForCTC"),Cvt.forEach(t),uar=r(sRe," (UniSpeechSat model)"),sRe.forEach(t),bar=i(Be),uF=n(Be,"LI",{});var lRe=s(uF);M5e=n(lRe,"STRONG",{});var wvt=s(M5e);Far=r(wvt,"wav2vec2"),wvt.forEach(t),Tar=r(lRe," \u2014 "),Zz=n(lRe,"A",{href:!0});var Avt=s(Zz);Mar=r(Avt,"Wav2Vec2ForCTC"),Avt.forEach(t),Ear=r(lRe," (Wav2Vec2 model)"),lRe.forEach(t),Car=i(Be),bF=n(Be,"LI",{});var iRe=s(bF);E5e=n(iRe,"STRONG",{});var Lvt=s(E5e);war=r(Lvt,"wav2vec2-conformer"),Lvt.forEach(t),Aar=r(iRe," \u2014 "),eW=n(iRe,"A",{href:!0});var yvt=s(eW);Lar=r(yvt,"Wav2Vec2ConformerForCTC"),yvt.forEach(t),yar=r(iRe," (Wav2Vec2-Conformer model)"),iRe.forEach(t),xar=i(Be),vF=n(Be,"LI",{});var dRe=s(vF);C5e=n(dRe,"STRONG",{});var xvt=s(C5e);$ar=r(xvt,"wavlm"),xvt.forEach(t),kar=r(dRe," \u2014 "),oW=n(dRe,"A",{href:!0});var $vt=s(oW);Sar=r($vt,"WavLMForCTC"),$vt.forEach(t),Rar=r(dRe," (WavLM model)"),dRe.forEach(t),Be.forEach(t),Par=i(ua),FF=n(ua,"P",{});var cRe=s(FF);Bar=r(cRe,"The model is set in evaluation mode by default using "),w5e=n(cRe,"CODE",{});var kvt=s(w5e);Iar=r(kvt,"model.eval()"),kvt.forEach(t),Nar=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=n(cRe,"CODE",{});var Svt=s(A5e);qar=r(Svt,"model.train()"),Svt.forEach(t),cRe.forEach(t),jar=i(ua),T(TF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),_De=i(f),Td=n(f,"H2",{class:!0});var FOe=s(Td);MF=n(FOe,"A",{id:!0,class:!0,href:!0});var Rvt=s(MF);L5e=n(Rvt,"SPAN",{});var Pvt=s(L5e);T(zy.$$.fragment,Pvt),Pvt.forEach(t),Rvt.forEach(t),Dar=i(FOe),y5e=n(FOe,"SPAN",{});var Bvt=s(y5e);Gar=r(Bvt,"AutoModelForSpeechSeq2Seq"),Bvt.forEach(t),FOe.forEach(t),uDe=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Wy.$$.fragment,sl),Oar=i(sl),Md=n(sl,"P",{});var Bee=s(Md);Var=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rW=n(Bee,"A",{href:!0});var Ivt=s(rW);Xar=r(Ivt,"from_pretrained()"),Ivt.forEach(t),zar=r(Bee," class method or the "),tW=n(Bee,"A",{href:!0});var Nvt=s(tW);War=r(Nvt,"from_config()"),Nvt.forEach(t),Qar=r(Bee,` class
method.`),Bee.forEach(t),Har=i(sl),Qy=n(sl,"P",{});var TOe=s(Qy);Uar=r(TOe,"This class cannot be instantiated directly using "),x5e=n(TOe,"CODE",{});var qvt=s(x5e);Jar=r(qvt,"__init__()"),qvt.forEach(t),Yar=r(TOe," (throws an error)."),TOe.forEach(t),Kar=i(sl),Tt=n(sl,"DIV",{class:!0});var $A=s(Tt);T(Hy.$$.fragment,$A),Zar=i($A),$5e=n($A,"P",{});var jvt=s($5e);enr=r(jvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jvt.forEach(t),onr=i($A),Ed=n($A,"P",{});var Iee=s(Ed);rnr=r(Iee,`Note:
Loading a model from its configuration file does `),k5e=n(Iee,"STRONG",{});var Dvt=s(k5e);tnr=r(Dvt,"not"),Dvt.forEach(t),anr=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(Iee,"A",{href:!0});var Gvt=s(aW);nnr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),snr=r(Iee," to load the model weights."),Iee.forEach(t),lnr=i($A),T(EF.$$.fragment,$A),$A.forEach(t),inr=i(sl),go=n(sl,"DIV",{class:!0});var ba=s(go);T(Uy.$$.fragment,ba),dnr=i(ba),S5e=n(ba,"P",{});var Ovt=s(S5e);cnr=r(Ovt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ovt.forEach(t),fnr=i(ba),za=n(ba,"P",{});var kA=s(za);mnr=r(kA,"The model class to instantiate is selected based on the "),R5e=n(kA,"CODE",{});var Vvt=s(R5e);gnr=r(Vvt,"model_type"),Vvt.forEach(t),hnr=r(kA,` property of the config object (either
passed as an argument or loaded from `),P5e=n(kA,"CODE",{});var Xvt=s(P5e);pnr=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),_nr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(kA,"CODE",{});var zvt=s(B5e);unr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),bnr=r(kA,":"),kA.forEach(t),vnr=i(ba),Jy=n(ba,"UL",{});var MOe=s(Jy);CF=n(MOe,"LI",{});var fRe=s(CF);I5e=n(fRe,"STRONG",{});var Wvt=s(I5e);Fnr=r(Wvt,"speech-encoder-decoder"),Wvt.forEach(t),Tnr=r(fRe," \u2014 "),nW=n(fRe,"A",{href:!0});var Qvt=s(nW);Mnr=r(Qvt,"SpeechEncoderDecoderModel"),Qvt.forEach(t),Enr=r(fRe," (Speech Encoder decoder model)"),fRe.forEach(t),Cnr=i(MOe),wF=n(MOe,"LI",{});var mRe=s(wF);N5e=n(mRe,"STRONG",{});var Hvt=s(N5e);wnr=r(Hvt,"speech_to_text"),Hvt.forEach(t),Anr=r(mRe," \u2014 "),sW=n(mRe,"A",{href:!0});var Uvt=s(sW);Lnr=r(Uvt,"Speech2TextForConditionalGeneration"),Uvt.forEach(t),ynr=r(mRe," (Speech2Text model)"),mRe.forEach(t),MOe.forEach(t),xnr=i(ba),AF=n(ba,"P",{});var gRe=s(AF);$nr=r(gRe,"The model is set in evaluation mode by default using "),q5e=n(gRe,"CODE",{});var Jvt=s(q5e);knr=r(Jvt,"model.eval()"),Jvt.forEach(t),Snr=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j5e=n(gRe,"CODE",{});var Yvt=s(j5e);Rnr=r(Yvt,"model.train()"),Yvt.forEach(t),gRe.forEach(t),Pnr=i(ba),T(LF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),bDe=i(f),Cd=n(f,"H2",{class:!0});var EOe=s(Cd);yF=n(EOe,"A",{id:!0,class:!0,href:!0});var Kvt=s(yF);D5e=n(Kvt,"SPAN",{});var Zvt=s(D5e);T(Yy.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),Bnr=i(EOe),G5e=n(EOe,"SPAN",{});var eFt=s(G5e);Inr=r(eFt,"AutoModelForAudioXVector"),eFt.forEach(t),EOe.forEach(t),vDe=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(Ky.$$.fragment,ll),Nnr=i(ll),wd=n(ll,"P",{});var Nee=s(wd);qnr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lW=n(Nee,"A",{href:!0});var oFt=s(lW);jnr=r(oFt,"from_pretrained()"),oFt.forEach(t),Dnr=r(Nee," class method or the "),iW=n(Nee,"A",{href:!0});var rFt=s(iW);Gnr=r(rFt,"from_config()"),rFt.forEach(t),Onr=r(Nee,` class
method.`),Nee.forEach(t),Vnr=i(ll),Zy=n(ll,"P",{});var COe=s(Zy);Xnr=r(COe,"This class cannot be instantiated directly using "),O5e=n(COe,"CODE",{});var tFt=s(O5e);znr=r(tFt,"__init__()"),tFt.forEach(t),Wnr=r(COe," (throws an error)."),COe.forEach(t),Qnr=i(ll),Mt=n(ll,"DIV",{class:!0});var SA=s(Mt);T(e8.$$.fragment,SA),Hnr=i(SA),V5e=n(SA,"P",{});var aFt=s(V5e);Unr=r(aFt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),aFt.forEach(t),Jnr=i(SA),Ad=n(SA,"P",{});var qee=s(Ad);Ynr=r(qee,`Note:
Loading a model from its configuration file does `),X5e=n(qee,"STRONG",{});var nFt=s(X5e);Knr=r(nFt,"not"),nFt.forEach(t),Znr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(qee,"A",{href:!0});var sFt=s(dW);esr=r(sFt,"from_pretrained()"),sFt.forEach(t),osr=r(qee," to load the model weights."),qee.forEach(t),rsr=i(SA),T(xF.$$.fragment,SA),SA.forEach(t),tsr=i(ll),ho=n(ll,"DIV",{class:!0});var va=s(ho);T(o8.$$.fragment,va),asr=i(va),z5e=n(va,"P",{});var lFt=s(z5e);nsr=r(lFt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lFt.forEach(t),ssr=i(va),Wa=n(va,"P",{});var RA=s(Wa);lsr=r(RA,"The model class to instantiate is selected based on the "),W5e=n(RA,"CODE",{});var iFt=s(W5e);isr=r(iFt,"model_type"),iFt.forEach(t),dsr=r(RA,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(RA,"CODE",{});var dFt=s(Q5e);csr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),fsr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(RA,"CODE",{});var cFt=s(H5e);msr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),gsr=r(RA,":"),RA.forEach(t),hsr=i(va),Zr=n(va,"UL",{});var il=s(Zr);$F=n(il,"LI",{});var hRe=s($F);U5e=n(hRe,"STRONG",{});var fFt=s(U5e);psr=r(fFt,"data2vec-audio"),fFt.forEach(t),_sr=r(hRe," \u2014 "),cW=n(hRe,"A",{href:!0});var mFt=s(cW);usr=r(mFt,"Data2VecAudioForXVector"),mFt.forEach(t),bsr=r(hRe," (Data2VecAudio model)"),hRe.forEach(t),vsr=i(il),kF=n(il,"LI",{});var pRe=s(kF);J5e=n(pRe,"STRONG",{});var gFt=s(J5e);Fsr=r(gFt,"unispeech-sat"),gFt.forEach(t),Tsr=r(pRe," \u2014 "),fW=n(pRe,"A",{href:!0});var hFt=s(fW);Msr=r(hFt,"UniSpeechSatForXVector"),hFt.forEach(t),Esr=r(pRe," (UniSpeechSat model)"),pRe.forEach(t),Csr=i(il),SF=n(il,"LI",{});var _Re=s(SF);Y5e=n(_Re,"STRONG",{});var pFt=s(Y5e);wsr=r(pFt,"wav2vec2"),pFt.forEach(t),Asr=r(_Re," \u2014 "),mW=n(_Re,"A",{href:!0});var _Ft=s(mW);Lsr=r(_Ft,"Wav2Vec2ForXVector"),_Ft.forEach(t),ysr=r(_Re," (Wav2Vec2 model)"),_Re.forEach(t),xsr=i(il),RF=n(il,"LI",{});var uRe=s(RF);K5e=n(uRe,"STRONG",{});var uFt=s(K5e);$sr=r(uFt,"wav2vec2-conformer"),uFt.forEach(t),ksr=r(uRe," \u2014 "),gW=n(uRe,"A",{href:!0});var bFt=s(gW);Ssr=r(bFt,"Wav2Vec2ConformerForXVector"),bFt.forEach(t),Rsr=r(uRe," (Wav2Vec2-Conformer model)"),uRe.forEach(t),Psr=i(il),PF=n(il,"LI",{});var bRe=s(PF);Z5e=n(bRe,"STRONG",{});var vFt=s(Z5e);Bsr=r(vFt,"wavlm"),vFt.forEach(t),Isr=r(bRe," \u2014 "),hW=n(bRe,"A",{href:!0});var FFt=s(hW);Nsr=r(FFt,"WavLMForXVector"),FFt.forEach(t),qsr=r(bRe," (WavLM model)"),bRe.forEach(t),il.forEach(t),jsr=i(va),BF=n(va,"P",{});var vRe=s(BF);Dsr=r(vRe,"The model is set in evaluation mode by default using "),e1e=n(vRe,"CODE",{});var TFt=s(e1e);Gsr=r(TFt,"model.eval()"),TFt.forEach(t),Osr=r(vRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(vRe,"CODE",{});var MFt=s(o1e);Vsr=r(MFt,"model.train()"),MFt.forEach(t),vRe.forEach(t),Xsr=i(va),T(IF.$$.fragment,va),va.forEach(t),ll.forEach(t),FDe=i(f),Ld=n(f,"H2",{class:!0});var wOe=s(Ld);NF=n(wOe,"A",{id:!0,class:!0,href:!0});var EFt=s(NF);r1e=n(EFt,"SPAN",{});var CFt=s(r1e);T(r8.$$.fragment,CFt),CFt.forEach(t),EFt.forEach(t),zsr=i(wOe),t1e=n(wOe,"SPAN",{});var wFt=s(t1e);Wsr=r(wFt,"AutoModelForMaskedImageModeling"),wFt.forEach(t),wOe.forEach(t),TDe=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(t8.$$.fragment,dl),Qsr=i(dl),yd=n(dl,"P",{});var jee=s(yd);Hsr=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pW=n(jee,"A",{href:!0});var AFt=s(pW);Usr=r(AFt,"from_pretrained()"),AFt.forEach(t),Jsr=r(jee," class method or the "),_W=n(jee,"A",{href:!0});var LFt=s(_W);Ysr=r(LFt,"from_config()"),LFt.forEach(t),Ksr=r(jee,` class
method.`),jee.forEach(t),Zsr=i(dl),a8=n(dl,"P",{});var AOe=s(a8);elr=r(AOe,"This class cannot be instantiated directly using "),a1e=n(AOe,"CODE",{});var yFt=s(a1e);olr=r(yFt,"__init__()"),yFt.forEach(t),rlr=r(AOe," (throws an error)."),AOe.forEach(t),tlr=i(dl),Et=n(dl,"DIV",{class:!0});var PA=s(Et);T(n8.$$.fragment,PA),alr=i(PA),n1e=n(PA,"P",{});var xFt=s(n1e);nlr=r(xFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xFt.forEach(t),slr=i(PA),xd=n(PA,"P",{});var Dee=s(xd);llr=r(Dee,`Note:
Loading a model from its configuration file does `),s1e=n(Dee,"STRONG",{});var $Ft=s(s1e);ilr=r($Ft,"not"),$Ft.forEach(t),dlr=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(Dee,"A",{href:!0});var kFt=s(uW);clr=r(kFt,"from_pretrained()"),kFt.forEach(t),flr=r(Dee," to load the model weights."),Dee.forEach(t),mlr=i(PA),T(qF.$$.fragment,PA),PA.forEach(t),glr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(s8.$$.fragment,Fa),hlr=i(Fa),l1e=n(Fa,"P",{});var SFt=s(l1e);plr=r(SFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),SFt.forEach(t),_lr=i(Fa),Qa=n(Fa,"P",{});var BA=s(Qa);ulr=r(BA,"The model class to instantiate is selected based on the "),i1e=n(BA,"CODE",{});var RFt=s(i1e);blr=r(RFt,"model_type"),RFt.forEach(t),vlr=r(BA,` property of the config object (either
passed as an argument or loaded from `),d1e=n(BA,"CODE",{});var PFt=s(d1e);Flr=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),Tlr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(BA,"CODE",{});var BFt=s(c1e);Mlr=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),Elr=r(BA,":"),BA.forEach(t),Clr=i(Fa),$d=n(Fa,"UL",{});var Gee=s($d);jF=n(Gee,"LI",{});var FRe=s(jF);f1e=n(FRe,"STRONG",{});var IFt=s(f1e);wlr=r(IFt,"deit"),IFt.forEach(t),Alr=r(FRe," \u2014 "),bW=n(FRe,"A",{href:!0});var NFt=s(bW);Llr=r(NFt,"DeiTForMaskedImageModeling"),NFt.forEach(t),ylr=r(FRe," (DeiT model)"),FRe.forEach(t),xlr=i(Gee),DF=n(Gee,"LI",{});var TRe=s(DF);m1e=n(TRe,"STRONG",{});var qFt=s(m1e);$lr=r(qFt,"swin"),qFt.forEach(t),klr=r(TRe," \u2014 "),vW=n(TRe,"A",{href:!0});var jFt=s(vW);Slr=r(jFt,"SwinForMaskedImageModeling"),jFt.forEach(t),Rlr=r(TRe," (Swin Transformer model)"),TRe.forEach(t),Plr=i(Gee),GF=n(Gee,"LI",{});var MRe=s(GF);g1e=n(MRe,"STRONG",{});var DFt=s(g1e);Blr=r(DFt,"vit"),DFt.forEach(t),Ilr=r(MRe," \u2014 "),FW=n(MRe,"A",{href:!0});var GFt=s(FW);Nlr=r(GFt,"ViTForMaskedImageModeling"),GFt.forEach(t),qlr=r(MRe," (ViT model)"),MRe.forEach(t),Gee.forEach(t),jlr=i(Fa),OF=n(Fa,"P",{});var ERe=s(OF);Dlr=r(ERe,"The model is set in evaluation mode by default using "),h1e=n(ERe,"CODE",{});var OFt=s(h1e);Glr=r(OFt,"model.eval()"),OFt.forEach(t),Olr=r(ERe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(ERe,"CODE",{});var VFt=s(p1e);Vlr=r(VFt,"model.train()"),VFt.forEach(t),ERe.forEach(t),Xlr=i(Fa),T(VF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),MDe=i(f),kd=n(f,"H2",{class:!0});var LOe=s(kd);XF=n(LOe,"A",{id:!0,class:!0,href:!0});var XFt=s(XF);_1e=n(XFt,"SPAN",{});var zFt=s(_1e);T(l8.$$.fragment,zFt),zFt.forEach(t),XFt.forEach(t),zlr=i(LOe),u1e=n(LOe,"SPAN",{});var WFt=s(u1e);Wlr=r(WFt,"AutoModelForObjectDetection"),WFt.forEach(t),LOe.forEach(t),EDe=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(i8.$$.fragment,cl),Qlr=i(cl),Sd=n(cl,"P",{});var Oee=s(Sd);Hlr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),TW=n(Oee,"A",{href:!0});var QFt=s(TW);Ulr=r(QFt,"from_pretrained()"),QFt.forEach(t),Jlr=r(Oee," class method or the "),MW=n(Oee,"A",{href:!0});var HFt=s(MW);Ylr=r(HFt,"from_config()"),HFt.forEach(t),Klr=r(Oee,` class
method.`),Oee.forEach(t),Zlr=i(cl),d8=n(cl,"P",{});var yOe=s(d8);eir=r(yOe,"This class cannot be instantiated directly using "),b1e=n(yOe,"CODE",{});var UFt=s(b1e);oir=r(UFt,"__init__()"),UFt.forEach(t),rir=r(yOe," (throws an error)."),yOe.forEach(t),tir=i(cl),Ct=n(cl,"DIV",{class:!0});var IA=s(Ct);T(c8.$$.fragment,IA),air=i(IA),v1e=n(IA,"P",{});var JFt=s(v1e);nir=r(JFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JFt.forEach(t),sir=i(IA),Rd=n(IA,"P",{});var Vee=s(Rd);lir=r(Vee,`Note:
Loading a model from its configuration file does `),F1e=n(Vee,"STRONG",{});var YFt=s(F1e);iir=r(YFt,"not"),YFt.forEach(t),dir=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(Vee,"A",{href:!0});var KFt=s(EW);cir=r(KFt,"from_pretrained()"),KFt.forEach(t),fir=r(Vee," to load the model weights."),Vee.forEach(t),mir=i(IA),T(zF.$$.fragment,IA),IA.forEach(t),gir=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(f8.$$.fragment,Ta),hir=i(Ta),T1e=n(Ta,"P",{});var ZFt=s(T1e);pir=r(ZFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ZFt.forEach(t),_ir=i(Ta),Ha=n(Ta,"P",{});var NA=s(Ha);uir=r(NA,"The model class to instantiate is selected based on the "),M1e=n(NA,"CODE",{});var eTt=s(M1e);bir=r(eTt,"model_type"),eTt.forEach(t),vir=r(NA,` property of the config object (either
passed as an argument or loaded from `),E1e=n(NA,"CODE",{});var oTt=s(E1e);Fir=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),Tir=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(NA,"CODE",{});var rTt=s(C1e);Mir=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),Eir=r(NA,":"),NA.forEach(t),Cir=i(Ta),m8=n(Ta,"UL",{});var xOe=s(m8);WF=n(xOe,"LI",{});var CRe=s(WF);w1e=n(CRe,"STRONG",{});var tTt=s(w1e);wir=r(tTt,"detr"),tTt.forEach(t),Air=r(CRe," \u2014 "),CW=n(CRe,"A",{href:!0});var aTt=s(CW);Lir=r(aTt,"DetrForObjectDetection"),aTt.forEach(t),yir=r(CRe," (DETR model)"),CRe.forEach(t),xir=i(xOe),QF=n(xOe,"LI",{});var wRe=s(QF);A1e=n(wRe,"STRONG",{});var nTt=s(A1e);$ir=r(nTt,"yolos"),nTt.forEach(t),kir=r(wRe," \u2014 "),wW=n(wRe,"A",{href:!0});var sTt=s(wW);Sir=r(sTt,"YolosForObjectDetection"),sTt.forEach(t),Rir=r(wRe," (YOLOS model)"),wRe.forEach(t),xOe.forEach(t),Pir=i(Ta),HF=n(Ta,"P",{});var ARe=s(HF);Bir=r(ARe,"The model is set in evaluation mode by default using "),L1e=n(ARe,"CODE",{});var lTt=s(L1e);Iir=r(lTt,"model.eval()"),lTt.forEach(t),Nir=r(ARe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y1e=n(ARe,"CODE",{});var iTt=s(y1e);qir=r(iTt,"model.train()"),iTt.forEach(t),ARe.forEach(t),jir=i(Ta),T(UF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),CDe=i(f),Pd=n(f,"H2",{class:!0});var $Oe=s(Pd);JF=n($Oe,"A",{id:!0,class:!0,href:!0});var dTt=s(JF);x1e=n(dTt,"SPAN",{});var cTt=s(x1e);T(g8.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),Dir=i($Oe),$1e=n($Oe,"SPAN",{});var fTt=s($1e);Gir=r(fTt,"AutoModelForImageSegmentation"),fTt.forEach(t),$Oe.forEach(t),wDe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(h8.$$.fragment,fl),Oir=i(fl),Bd=n(fl,"P",{});var Xee=s(Bd);Vir=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),AW=n(Xee,"A",{href:!0});var mTt=s(AW);Xir=r(mTt,"from_pretrained()"),mTt.forEach(t),zir=r(Xee," class method or the "),LW=n(Xee,"A",{href:!0});var gTt=s(LW);Wir=r(gTt,"from_config()"),gTt.forEach(t),Qir=r(Xee,` class
method.`),Xee.forEach(t),Hir=i(fl),p8=n(fl,"P",{});var kOe=s(p8);Uir=r(kOe,"This class cannot be instantiated directly using "),k1e=n(kOe,"CODE",{});var hTt=s(k1e);Jir=r(hTt,"__init__()"),hTt.forEach(t),Yir=r(kOe," (throws an error)."),kOe.forEach(t),Kir=i(fl),wt=n(fl,"DIV",{class:!0});var qA=s(wt);T(_8.$$.fragment,qA),Zir=i(qA),S1e=n(qA,"P",{});var pTt=s(S1e);edr=r(pTt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),pTt.forEach(t),odr=i(qA),Id=n(qA,"P",{});var zee=s(Id);rdr=r(zee,`Note:
Loading a model from its configuration file does `),R1e=n(zee,"STRONG",{});var _Tt=s(R1e);tdr=r(_Tt,"not"),_Tt.forEach(t),adr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(zee,"A",{href:!0});var uTt=s(yW);ndr=r(uTt,"from_pretrained()"),uTt.forEach(t),sdr=r(zee," to load the model weights."),zee.forEach(t),ldr=i(qA),T(YF.$$.fragment,qA),qA.forEach(t),idr=i(fl),uo=n(fl,"DIV",{class:!0});var Ma=s(uo);T(u8.$$.fragment,Ma),ddr=i(Ma),P1e=n(Ma,"P",{});var bTt=s(P1e);cdr=r(bTt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),bTt.forEach(t),fdr=i(Ma),Ua=n(Ma,"P",{});var jA=s(Ua);mdr=r(jA,"The model class to instantiate is selected based on the "),B1e=n(jA,"CODE",{});var vTt=s(B1e);gdr=r(vTt,"model_type"),vTt.forEach(t),hdr=r(jA,` property of the config object (either
passed as an argument or loaded from `),I1e=n(jA,"CODE",{});var FTt=s(I1e);pdr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),_dr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(jA,"CODE",{});var TTt=s(N1e);udr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),bdr=r(jA,":"),jA.forEach(t),vdr=i(Ma),q1e=n(Ma,"UL",{});var MTt=s(q1e);KF=n(MTt,"LI",{});var LRe=s(KF);j1e=n(LRe,"STRONG",{});var ETt=s(j1e);Fdr=r(ETt,"detr"),ETt.forEach(t),Tdr=r(LRe," \u2014 "),xW=n(LRe,"A",{href:!0});var CTt=s(xW);Mdr=r(CTt,"DetrForSegmentation"),CTt.forEach(t),Edr=r(LRe," (DETR model)"),LRe.forEach(t),MTt.forEach(t),Cdr=i(Ma),ZF=n(Ma,"P",{});var yRe=s(ZF);wdr=r(yRe,"The model is set in evaluation mode by default using "),D1e=n(yRe,"CODE",{});var wTt=s(D1e);Adr=r(wTt,"model.eval()"),wTt.forEach(t),Ldr=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(yRe,"CODE",{});var ATt=s(G1e);ydr=r(ATt,"model.train()"),ATt.forEach(t),yRe.forEach(t),xdr=i(Ma),T(eT.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),ADe=i(f),Nd=n(f,"H2",{class:!0});var SOe=s(Nd);oT=n(SOe,"A",{id:!0,class:!0,href:!0});var LTt=s(oT);O1e=n(LTt,"SPAN",{});var yTt=s(O1e);T(b8.$$.fragment,yTt),yTt.forEach(t),LTt.forEach(t),$dr=i(SOe),V1e=n(SOe,"SPAN",{});var xTt=s(V1e);kdr=r(xTt,"AutoModelForSemanticSegmentation"),xTt.forEach(t),SOe.forEach(t),LDe=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(v8.$$.fragment,ml),Sdr=i(ml),qd=n(ml,"P",{});var Wee=s(qd);Rdr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$W=n(Wee,"A",{href:!0});var $Tt=s($W);Pdr=r($Tt,"from_pretrained()"),$Tt.forEach(t),Bdr=r(Wee," class method or the "),kW=n(Wee,"A",{href:!0});var kTt=s(kW);Idr=r(kTt,"from_config()"),kTt.forEach(t),Ndr=r(Wee,` class
method.`),Wee.forEach(t),qdr=i(ml),F8=n(ml,"P",{});var ROe=s(F8);jdr=r(ROe,"This class cannot be instantiated directly using "),X1e=n(ROe,"CODE",{});var STt=s(X1e);Ddr=r(STt,"__init__()"),STt.forEach(t),Gdr=r(ROe," (throws an error)."),ROe.forEach(t),Odr=i(ml),At=n(ml,"DIV",{class:!0});var DA=s(At);T(T8.$$.fragment,DA),Vdr=i(DA),z1e=n(DA,"P",{});var RTt=s(z1e);Xdr=r(RTt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),RTt.forEach(t),zdr=i(DA),jd=n(DA,"P",{});var Qee=s(jd);Wdr=r(Qee,`Note:
Loading a model from its configuration file does `),W1e=n(Qee,"STRONG",{});var PTt=s(W1e);Qdr=r(PTt,"not"),PTt.forEach(t),Hdr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(Qee,"A",{href:!0});var BTt=s(SW);Udr=r(BTt,"from_pretrained()"),BTt.forEach(t),Jdr=r(Qee," to load the model weights."),Qee.forEach(t),Ydr=i(DA),T(rT.$$.fragment,DA),DA.forEach(t),Kdr=i(ml),bo=n(ml,"DIV",{class:!0});var Ea=s(bo);T(M8.$$.fragment,Ea),Zdr=i(Ea),Q1e=n(Ea,"P",{});var ITt=s(Q1e);ecr=r(ITt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ITt.forEach(t),ocr=i(Ea),Ja=n(Ea,"P",{});var GA=s(Ja);rcr=r(GA,"The model class to instantiate is selected based on the "),H1e=n(GA,"CODE",{});var NTt=s(H1e);tcr=r(NTt,"model_type"),NTt.forEach(t),acr=r(GA,` property of the config object (either
passed as an argument or loaded from `),U1e=n(GA,"CODE",{});var qTt=s(U1e);ncr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),scr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(GA,"CODE",{});var jTt=s(J1e);lcr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),icr=r(GA,":"),GA.forEach(t),dcr=i(Ea),Ya=n(Ea,"UL",{});var OA=s(Ya);tT=n(OA,"LI",{});var xRe=s(tT);Y1e=n(xRe,"STRONG",{});var DTt=s(Y1e);ccr=r(DTt,"beit"),DTt.forEach(t),fcr=r(xRe," \u2014 "),RW=n(xRe,"A",{href:!0});var GTt=s(RW);mcr=r(GTt,"BeitForSemanticSegmentation"),GTt.forEach(t),gcr=r(xRe," (BEiT model)"),xRe.forEach(t),hcr=i(OA),aT=n(OA,"LI",{});var $Re=s(aT);K1e=n($Re,"STRONG",{});var OTt=s(K1e);pcr=r(OTt,"data2vec-vision"),OTt.forEach(t),_cr=r($Re," \u2014 "),PW=n($Re,"A",{href:!0});var VTt=s(PW);ucr=r(VTt,"Data2VecVisionForSemanticSegmentation"),VTt.forEach(t),bcr=r($Re," (Data2VecVision model)"),$Re.forEach(t),vcr=i(OA),nT=n(OA,"LI",{});var kRe=s(nT);Z1e=n(kRe,"STRONG",{});var XTt=s(Z1e);Fcr=r(XTt,"dpt"),XTt.forEach(t),Tcr=r(kRe," \u2014 "),BW=n(kRe,"A",{href:!0});var zTt=s(BW);Mcr=r(zTt,"DPTForSemanticSegmentation"),zTt.forEach(t),Ecr=r(kRe," (DPT model)"),kRe.forEach(t),Ccr=i(OA),sT=n(OA,"LI",{});var SRe=s(sT);ebe=n(SRe,"STRONG",{});var WTt=s(ebe);wcr=r(WTt,"segformer"),WTt.forEach(t),Acr=r(SRe," \u2014 "),IW=n(SRe,"A",{href:!0});var QTt=s(IW);Lcr=r(QTt,"SegformerForSemanticSegmentation"),QTt.forEach(t),ycr=r(SRe," (SegFormer model)"),SRe.forEach(t),OA.forEach(t),xcr=i(Ea),lT=n(Ea,"P",{});var RRe=s(lT);$cr=r(RRe,"The model is set in evaluation mode by default using "),obe=n(RRe,"CODE",{});var HTt=s(obe);kcr=r(HTt,"model.eval()"),HTt.forEach(t),Scr=r(RRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(RRe,"CODE",{});var UTt=s(rbe);Rcr=r(UTt,"model.train()"),UTt.forEach(t),RRe.forEach(t),Pcr=i(Ea),T(iT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),yDe=i(f),Dd=n(f,"H2",{class:!0});var POe=s(Dd);dT=n(POe,"A",{id:!0,class:!0,href:!0});var JTt=s(dT);tbe=n(JTt,"SPAN",{});var YTt=s(tbe);T(E8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),Bcr=i(POe),abe=n(POe,"SPAN",{});var KTt=s(abe);Icr=r(KTt,"AutoModelForInstanceSegmentation"),KTt.forEach(t),POe.forEach(t),xDe=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(C8.$$.fragment,gl),Ncr=i(gl),Gd=n(gl,"P",{});var Hee=s(Gd);qcr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),NW=n(Hee,"A",{href:!0});var ZTt=s(NW);jcr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),Dcr=r(Hee," class method or the "),qW=n(Hee,"A",{href:!0});var e7t=s(qW);Gcr=r(e7t,"from_config()"),e7t.forEach(t),Ocr=r(Hee,` class
method.`),Hee.forEach(t),Vcr=i(gl),w8=n(gl,"P",{});var BOe=s(w8);Xcr=r(BOe,"This class cannot be instantiated directly using "),nbe=n(BOe,"CODE",{});var o7t=s(nbe);zcr=r(o7t,"__init__()"),o7t.forEach(t),Wcr=r(BOe," (throws an error)."),BOe.forEach(t),Qcr=i(gl),Lt=n(gl,"DIV",{class:!0});var VA=s(Lt);T(A8.$$.fragment,VA),Hcr=i(VA),sbe=n(VA,"P",{});var r7t=s(sbe);Ucr=r(r7t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),r7t.forEach(t),Jcr=i(VA),Od=n(VA,"P",{});var Uee=s(Od);Ycr=r(Uee,`Note:
Loading a model from its configuration file does `),lbe=n(Uee,"STRONG",{});var t7t=s(lbe);Kcr=r(t7t,"not"),t7t.forEach(t),Zcr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(Uee,"A",{href:!0});var a7t=s(jW);efr=r(a7t,"from_pretrained()"),a7t.forEach(t),ofr=r(Uee," to load the model weights."),Uee.forEach(t),rfr=i(VA),T(cT.$$.fragment,VA),VA.forEach(t),tfr=i(gl),vo=n(gl,"DIV",{class:!0});var Ca=s(vo);T(L8.$$.fragment,Ca),afr=i(Ca),ibe=n(Ca,"P",{});var n7t=s(ibe);nfr=r(n7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),n7t.forEach(t),sfr=i(Ca),Ka=n(Ca,"P",{});var XA=s(Ka);lfr=r(XA,"The model class to instantiate is selected based on the "),dbe=n(XA,"CODE",{});var s7t=s(dbe);ifr=r(s7t,"model_type"),s7t.forEach(t),dfr=r(XA,` property of the config object (either
passed as an argument or loaded from `),cbe=n(XA,"CODE",{});var l7t=s(cbe);cfr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),ffr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(XA,"CODE",{});var i7t=s(fbe);mfr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),gfr=r(XA,":"),XA.forEach(t),hfr=i(Ca),mbe=n(Ca,"UL",{});var d7t=s(mbe);fT=n(d7t,"LI",{});var PRe=s(fT);gbe=n(PRe,"STRONG",{});var c7t=s(gbe);pfr=r(c7t,"maskformer"),c7t.forEach(t),_fr=r(PRe," \u2014 "),DW=n(PRe,"A",{href:!0});var f7t=s(DW);ufr=r(f7t,"MaskFormerForInstanceSegmentation"),f7t.forEach(t),bfr=r(PRe," (MaskFormer model)"),PRe.forEach(t),d7t.forEach(t),vfr=i(Ca),mT=n(Ca,"P",{});var BRe=s(mT);Ffr=r(BRe,"The model is set in evaluation mode by default using "),hbe=n(BRe,"CODE",{});var m7t=s(hbe);Tfr=r(m7t,"model.eval()"),m7t.forEach(t),Mfr=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=n(BRe,"CODE",{});var g7t=s(pbe);Efr=r(g7t,"model.train()"),g7t.forEach(t),BRe.forEach(t),Cfr=i(Ca),T(gT.$$.fragment,Ca),Ca.forEach(t),gl.forEach(t),$De=i(f),Vd=n(f,"H2",{class:!0});var IOe=s(Vd);hT=n(IOe,"A",{id:!0,class:!0,href:!0});var h7t=s(hT);_be=n(h7t,"SPAN",{});var p7t=s(_be);T(y8.$$.fragment,p7t),p7t.forEach(t),h7t.forEach(t),wfr=i(IOe),ube=n(IOe,"SPAN",{});var _7t=s(ube);Afr=r(_7t,"TFAutoModel"),_7t.forEach(t),IOe.forEach(t),kDe=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(x8.$$.fragment,hl),Lfr=i(hl),Xd=n(hl,"P",{});var Jee=s(Xd);yfr=r(Jee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GW=n(Jee,"A",{href:!0});var u7t=s(GW);xfr=r(u7t,"from_pretrained()"),u7t.forEach(t),$fr=r(Jee," class method or the "),OW=n(Jee,"A",{href:!0});var b7t=s(OW);kfr=r(b7t,"from_config()"),b7t.forEach(t),Sfr=r(Jee,` class
method.`),Jee.forEach(t),Rfr=i(hl),$8=n(hl,"P",{});var NOe=s($8);Pfr=r(NOe,"This class cannot be instantiated directly using "),bbe=n(NOe,"CODE",{});var v7t=s(bbe);Bfr=r(v7t,"__init__()"),v7t.forEach(t),Ifr=r(NOe," (throws an error)."),NOe.forEach(t),Nfr=i(hl),yt=n(hl,"DIV",{class:!0});var zA=s(yt);T(k8.$$.fragment,zA),qfr=i(zA),vbe=n(zA,"P",{});var F7t=s(vbe);jfr=r(F7t,"Instantiates one of the base model classes of the library from a configuration."),F7t.forEach(t),Dfr=i(zA),zd=n(zA,"P",{});var Yee=s(zd);Gfr=r(Yee,`Note:
Loading a model from its configuration file does `),Fbe=n(Yee,"STRONG",{});var T7t=s(Fbe);Ofr=r(T7t,"not"),T7t.forEach(t),Vfr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Yee,"A",{href:!0});var M7t=s(VW);Xfr=r(M7t,"from_pretrained()"),M7t.forEach(t),zfr=r(Yee," to load the model weights."),Yee.forEach(t),Wfr=i(zA),T(pT.$$.fragment,zA),zA.forEach(t),Qfr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(S8.$$.fragment,pl),Hfr=i(pl),Tbe=n(pl,"P",{});var E7t=s(Tbe);Ufr=r(E7t,"Instantiate one of the base model classes of the library from a pretrained model."),E7t.forEach(t),Jfr=i(pl),Za=n(pl,"P",{});var WA=s(Za);Yfr=r(WA,"The model class to instantiate is selected based on the "),Mbe=n(WA,"CODE",{});var C7t=s(Mbe);Kfr=r(C7t,"model_type"),C7t.forEach(t),Zfr=r(WA,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(WA,"CODE",{});var w7t=s(Ebe);emr=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),omr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(WA,"CODE",{});var A7t=s(Cbe);rmr=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),tmr=r(WA,":"),WA.forEach(t),amr=i(pl),N=n(pl,"UL",{});var j=s(N);_T=n(j,"LI",{});var IRe=s(_T);wbe=n(IRe,"STRONG",{});var L7t=s(wbe);nmr=r(L7t,"albert"),L7t.forEach(t),smr=r(IRe," \u2014 "),XW=n(IRe,"A",{href:!0});var y7t=s(XW);lmr=r(y7t,"TFAlbertModel"),y7t.forEach(t),imr=r(IRe," (ALBERT model)"),IRe.forEach(t),dmr=i(j),uT=n(j,"LI",{});var NRe=s(uT);Abe=n(NRe,"STRONG",{});var x7t=s(Abe);cmr=r(x7t,"bart"),x7t.forEach(t),fmr=r(NRe," \u2014 "),zW=n(NRe,"A",{href:!0});var $7t=s(zW);mmr=r($7t,"TFBartModel"),$7t.forEach(t),gmr=r(NRe," (BART model)"),NRe.forEach(t),hmr=i(j),bT=n(j,"LI",{});var qRe=s(bT);Lbe=n(qRe,"STRONG",{});var k7t=s(Lbe);pmr=r(k7t,"bert"),k7t.forEach(t),_mr=r(qRe," \u2014 "),WW=n(qRe,"A",{href:!0});var S7t=s(WW);umr=r(S7t,"TFBertModel"),S7t.forEach(t),bmr=r(qRe," (BERT model)"),qRe.forEach(t),vmr=i(j),vT=n(j,"LI",{});var jRe=s(vT);ybe=n(jRe,"STRONG",{});var R7t=s(ybe);Fmr=r(R7t,"blenderbot"),R7t.forEach(t),Tmr=r(jRe," \u2014 "),QW=n(jRe,"A",{href:!0});var P7t=s(QW);Mmr=r(P7t,"TFBlenderbotModel"),P7t.forEach(t),Emr=r(jRe," (Blenderbot model)"),jRe.forEach(t),Cmr=i(j),FT=n(j,"LI",{});var DRe=s(FT);xbe=n(DRe,"STRONG",{});var B7t=s(xbe);wmr=r(B7t,"blenderbot-small"),B7t.forEach(t),Amr=r(DRe," \u2014 "),HW=n(DRe,"A",{href:!0});var I7t=s(HW);Lmr=r(I7t,"TFBlenderbotSmallModel"),I7t.forEach(t),ymr=r(DRe," (BlenderbotSmall model)"),DRe.forEach(t),xmr=i(j),TT=n(j,"LI",{});var GRe=s(TT);$be=n(GRe,"STRONG",{});var N7t=s($be);$mr=r(N7t,"camembert"),N7t.forEach(t),kmr=r(GRe," \u2014 "),UW=n(GRe,"A",{href:!0});var q7t=s(UW);Smr=r(q7t,"TFCamembertModel"),q7t.forEach(t),Rmr=r(GRe," (CamemBERT model)"),GRe.forEach(t),Pmr=i(j),MT=n(j,"LI",{});var ORe=s(MT);kbe=n(ORe,"STRONG",{});var j7t=s(kbe);Bmr=r(j7t,"clip"),j7t.forEach(t),Imr=r(ORe," \u2014 "),JW=n(ORe,"A",{href:!0});var D7t=s(JW);Nmr=r(D7t,"TFCLIPModel"),D7t.forEach(t),qmr=r(ORe," (CLIP model)"),ORe.forEach(t),jmr=i(j),ET=n(j,"LI",{});var VRe=s(ET);Sbe=n(VRe,"STRONG",{});var G7t=s(Sbe);Dmr=r(G7t,"convbert"),G7t.forEach(t),Gmr=r(VRe," \u2014 "),YW=n(VRe,"A",{href:!0});var O7t=s(YW);Omr=r(O7t,"TFConvBertModel"),O7t.forEach(t),Vmr=r(VRe," (ConvBERT model)"),VRe.forEach(t),Xmr=i(j),CT=n(j,"LI",{});var XRe=s(CT);Rbe=n(XRe,"STRONG",{});var V7t=s(Rbe);zmr=r(V7t,"convnext"),V7t.forEach(t),Wmr=r(XRe," \u2014 "),KW=n(XRe,"A",{href:!0});var X7t=s(KW);Qmr=r(X7t,"TFConvNextModel"),X7t.forEach(t),Hmr=r(XRe," (ConvNeXT model)"),XRe.forEach(t),Umr=i(j),wT=n(j,"LI",{});var zRe=s(wT);Pbe=n(zRe,"STRONG",{});var z7t=s(Pbe);Jmr=r(z7t,"ctrl"),z7t.forEach(t),Ymr=r(zRe," \u2014 "),ZW=n(zRe,"A",{href:!0});var W7t=s(ZW);Kmr=r(W7t,"TFCTRLModel"),W7t.forEach(t),Zmr=r(zRe," (CTRL model)"),zRe.forEach(t),egr=i(j),AT=n(j,"LI",{});var WRe=s(AT);Bbe=n(WRe,"STRONG",{});var Q7t=s(Bbe);ogr=r(Q7t,"data2vec-vision"),Q7t.forEach(t),rgr=r(WRe," \u2014 "),eQ=n(WRe,"A",{href:!0});var H7t=s(eQ);tgr=r(H7t,"TFData2VecVisionModel"),H7t.forEach(t),agr=r(WRe," (Data2VecVision model)"),WRe.forEach(t),ngr=i(j),LT=n(j,"LI",{});var QRe=s(LT);Ibe=n(QRe,"STRONG",{});var U7t=s(Ibe);sgr=r(U7t,"deberta"),U7t.forEach(t),lgr=r(QRe," \u2014 "),oQ=n(QRe,"A",{href:!0});var J7t=s(oQ);igr=r(J7t,"TFDebertaModel"),J7t.forEach(t),dgr=r(QRe," (DeBERTa model)"),QRe.forEach(t),cgr=i(j),yT=n(j,"LI",{});var HRe=s(yT);Nbe=n(HRe,"STRONG",{});var Y7t=s(Nbe);fgr=r(Y7t,"deberta-v2"),Y7t.forEach(t),mgr=r(HRe," \u2014 "),rQ=n(HRe,"A",{href:!0});var K7t=s(rQ);ggr=r(K7t,"TFDebertaV2Model"),K7t.forEach(t),hgr=r(HRe," (DeBERTa-v2 model)"),HRe.forEach(t),pgr=i(j),xT=n(j,"LI",{});var URe=s(xT);qbe=n(URe,"STRONG",{});var Z7t=s(qbe);_gr=r(Z7t,"distilbert"),Z7t.forEach(t),ugr=r(URe," \u2014 "),tQ=n(URe,"A",{href:!0});var eMt=s(tQ);bgr=r(eMt,"TFDistilBertModel"),eMt.forEach(t),vgr=r(URe," (DistilBERT model)"),URe.forEach(t),Fgr=i(j),$T=n(j,"LI",{});var JRe=s($T);jbe=n(JRe,"STRONG",{});var oMt=s(jbe);Tgr=r(oMt,"dpr"),oMt.forEach(t),Mgr=r(JRe," \u2014 "),aQ=n(JRe,"A",{href:!0});var rMt=s(aQ);Egr=r(rMt,"TFDPRQuestionEncoder"),rMt.forEach(t),Cgr=r(JRe," (DPR model)"),JRe.forEach(t),wgr=i(j),kT=n(j,"LI",{});var YRe=s(kT);Dbe=n(YRe,"STRONG",{});var tMt=s(Dbe);Agr=r(tMt,"electra"),tMt.forEach(t),Lgr=r(YRe," \u2014 "),nQ=n(YRe,"A",{href:!0});var aMt=s(nQ);ygr=r(aMt,"TFElectraModel"),aMt.forEach(t),xgr=r(YRe," (ELECTRA model)"),YRe.forEach(t),$gr=i(j),ST=n(j,"LI",{});var KRe=s(ST);Gbe=n(KRe,"STRONG",{});var nMt=s(Gbe);kgr=r(nMt,"flaubert"),nMt.forEach(t),Sgr=r(KRe," \u2014 "),sQ=n(KRe,"A",{href:!0});var sMt=s(sQ);Rgr=r(sMt,"TFFlaubertModel"),sMt.forEach(t),Pgr=r(KRe," (FlauBERT model)"),KRe.forEach(t),Bgr=i(j),Ns=n(j,"LI",{});var fk=s(Ns);Obe=n(fk,"STRONG",{});var lMt=s(Obe);Igr=r(lMt,"funnel"),lMt.forEach(t),Ngr=r(fk," \u2014 "),lQ=n(fk,"A",{href:!0});var iMt=s(lQ);qgr=r(iMt,"TFFunnelModel"),iMt.forEach(t),jgr=r(fk," or "),iQ=n(fk,"A",{href:!0});var dMt=s(iQ);Dgr=r(dMt,"TFFunnelBaseModel"),dMt.forEach(t),Ggr=r(fk," (Funnel Transformer model)"),fk.forEach(t),Ogr=i(j),RT=n(j,"LI",{});var ZRe=s(RT);Vbe=n(ZRe,"STRONG",{});var cMt=s(Vbe);Vgr=r(cMt,"gpt2"),cMt.forEach(t),Xgr=r(ZRe," \u2014 "),dQ=n(ZRe,"A",{href:!0});var fMt=s(dQ);zgr=r(fMt,"TFGPT2Model"),fMt.forEach(t),Wgr=r(ZRe," (OpenAI GPT-2 model)"),ZRe.forEach(t),Qgr=i(j),PT=n(j,"LI",{});var ePe=s(PT);Xbe=n(ePe,"STRONG",{});var mMt=s(Xbe);Hgr=r(mMt,"gptj"),mMt.forEach(t),Ugr=r(ePe," \u2014 "),cQ=n(ePe,"A",{href:!0});var gMt=s(cQ);Jgr=r(gMt,"TFGPTJModel"),gMt.forEach(t),Ygr=r(ePe," (GPT-J model)"),ePe.forEach(t),Kgr=i(j),BT=n(j,"LI",{});var oPe=s(BT);zbe=n(oPe,"STRONG",{});var hMt=s(zbe);Zgr=r(hMt,"hubert"),hMt.forEach(t),ehr=r(oPe," \u2014 "),fQ=n(oPe,"A",{href:!0});var pMt=s(fQ);ohr=r(pMt,"TFHubertModel"),pMt.forEach(t),rhr=r(oPe," (Hubert model)"),oPe.forEach(t),thr=i(j),IT=n(j,"LI",{});var rPe=s(IT);Wbe=n(rPe,"STRONG",{});var _Mt=s(Wbe);ahr=r(_Mt,"layoutlm"),_Mt.forEach(t),nhr=r(rPe," \u2014 "),mQ=n(rPe,"A",{href:!0});var uMt=s(mQ);shr=r(uMt,"TFLayoutLMModel"),uMt.forEach(t),lhr=r(rPe," (LayoutLM model)"),rPe.forEach(t),ihr=i(j),NT=n(j,"LI",{});var tPe=s(NT);Qbe=n(tPe,"STRONG",{});var bMt=s(Qbe);dhr=r(bMt,"led"),bMt.forEach(t),chr=r(tPe," \u2014 "),gQ=n(tPe,"A",{href:!0});var vMt=s(gQ);fhr=r(vMt,"TFLEDModel"),vMt.forEach(t),mhr=r(tPe," (LED model)"),tPe.forEach(t),ghr=i(j),qT=n(j,"LI",{});var aPe=s(qT);Hbe=n(aPe,"STRONG",{});var FMt=s(Hbe);hhr=r(FMt,"longformer"),FMt.forEach(t),phr=r(aPe," \u2014 "),hQ=n(aPe,"A",{href:!0});var TMt=s(hQ);_hr=r(TMt,"TFLongformerModel"),TMt.forEach(t),uhr=r(aPe," (Longformer model)"),aPe.forEach(t),bhr=i(j),jT=n(j,"LI",{});var nPe=s(jT);Ube=n(nPe,"STRONG",{});var MMt=s(Ube);vhr=r(MMt,"lxmert"),MMt.forEach(t),Fhr=r(nPe," \u2014 "),pQ=n(nPe,"A",{href:!0});var EMt=s(pQ);Thr=r(EMt,"TFLxmertModel"),EMt.forEach(t),Mhr=r(nPe," (LXMERT model)"),nPe.forEach(t),Ehr=i(j),DT=n(j,"LI",{});var sPe=s(DT);Jbe=n(sPe,"STRONG",{});var CMt=s(Jbe);Chr=r(CMt,"marian"),CMt.forEach(t),whr=r(sPe," \u2014 "),_Q=n(sPe,"A",{href:!0});var wMt=s(_Q);Ahr=r(wMt,"TFMarianModel"),wMt.forEach(t),Lhr=r(sPe," (Marian model)"),sPe.forEach(t),yhr=i(j),GT=n(j,"LI",{});var lPe=s(GT);Ybe=n(lPe,"STRONG",{});var AMt=s(Ybe);xhr=r(AMt,"mbart"),AMt.forEach(t),$hr=r(lPe," \u2014 "),uQ=n(lPe,"A",{href:!0});var LMt=s(uQ);khr=r(LMt,"TFMBartModel"),LMt.forEach(t),Shr=r(lPe," (mBART model)"),lPe.forEach(t),Rhr=i(j),OT=n(j,"LI",{});var iPe=s(OT);Kbe=n(iPe,"STRONG",{});var yMt=s(Kbe);Phr=r(yMt,"mobilebert"),yMt.forEach(t),Bhr=r(iPe," \u2014 "),bQ=n(iPe,"A",{href:!0});var xMt=s(bQ);Ihr=r(xMt,"TFMobileBertModel"),xMt.forEach(t),Nhr=r(iPe," (MobileBERT model)"),iPe.forEach(t),qhr=i(j),VT=n(j,"LI",{});var dPe=s(VT);Zbe=n(dPe,"STRONG",{});var $Mt=s(Zbe);jhr=r($Mt,"mpnet"),$Mt.forEach(t),Dhr=r(dPe," \u2014 "),vQ=n(dPe,"A",{href:!0});var kMt=s(vQ);Ghr=r(kMt,"TFMPNetModel"),kMt.forEach(t),Ohr=r(dPe," (MPNet model)"),dPe.forEach(t),Vhr=i(j),XT=n(j,"LI",{});var cPe=s(XT);e2e=n(cPe,"STRONG",{});var SMt=s(e2e);Xhr=r(SMt,"mt5"),SMt.forEach(t),zhr=r(cPe," \u2014 "),FQ=n(cPe,"A",{href:!0});var RMt=s(FQ);Whr=r(RMt,"TFMT5Model"),RMt.forEach(t),Qhr=r(cPe," (MT5 model)"),cPe.forEach(t),Hhr=i(j),zT=n(j,"LI",{});var fPe=s(zT);o2e=n(fPe,"STRONG",{});var PMt=s(o2e);Uhr=r(PMt,"openai-gpt"),PMt.forEach(t),Jhr=r(fPe," \u2014 "),TQ=n(fPe,"A",{href:!0});var BMt=s(TQ);Yhr=r(BMt,"TFOpenAIGPTModel"),BMt.forEach(t),Khr=r(fPe," (OpenAI GPT model)"),fPe.forEach(t),Zhr=i(j),WT=n(j,"LI",{});var mPe=s(WT);r2e=n(mPe,"STRONG",{});var IMt=s(r2e);epr=r(IMt,"opt"),IMt.forEach(t),opr=r(mPe," \u2014 "),MQ=n(mPe,"A",{href:!0});var NMt=s(MQ);rpr=r(NMt,"TFOPTModel"),NMt.forEach(t),tpr=r(mPe," (OPT model)"),mPe.forEach(t),apr=i(j),QT=n(j,"LI",{});var gPe=s(QT);t2e=n(gPe,"STRONG",{});var qMt=s(t2e);npr=r(qMt,"pegasus"),qMt.forEach(t),spr=r(gPe," \u2014 "),EQ=n(gPe,"A",{href:!0});var jMt=s(EQ);lpr=r(jMt,"TFPegasusModel"),jMt.forEach(t),ipr=r(gPe," (Pegasus model)"),gPe.forEach(t),dpr=i(j),HT=n(j,"LI",{});var hPe=s(HT);a2e=n(hPe,"STRONG",{});var DMt=s(a2e);cpr=r(DMt,"regnet"),DMt.forEach(t),fpr=r(hPe," \u2014 "),CQ=n(hPe,"A",{href:!0});var GMt=s(CQ);mpr=r(GMt,"TFRegNetModel"),GMt.forEach(t),gpr=r(hPe," (RegNet model)"),hPe.forEach(t),hpr=i(j),UT=n(j,"LI",{});var pPe=s(UT);n2e=n(pPe,"STRONG",{});var OMt=s(n2e);ppr=r(OMt,"rembert"),OMt.forEach(t),_pr=r(pPe," \u2014 "),wQ=n(pPe,"A",{href:!0});var VMt=s(wQ);upr=r(VMt,"TFRemBertModel"),VMt.forEach(t),bpr=r(pPe," (RemBERT model)"),pPe.forEach(t),vpr=i(j),JT=n(j,"LI",{});var _Pe=s(JT);s2e=n(_Pe,"STRONG",{});var XMt=s(s2e);Fpr=r(XMt,"roberta"),XMt.forEach(t),Tpr=r(_Pe," \u2014 "),AQ=n(_Pe,"A",{href:!0});var zMt=s(AQ);Mpr=r(zMt,"TFRobertaModel"),zMt.forEach(t),Epr=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),Cpr=i(j),YT=n(j,"LI",{});var uPe=s(YT);l2e=n(uPe,"STRONG",{});var WMt=s(l2e);wpr=r(WMt,"roformer"),WMt.forEach(t),Apr=r(uPe," \u2014 "),LQ=n(uPe,"A",{href:!0});var QMt=s(LQ);Lpr=r(QMt,"TFRoFormerModel"),QMt.forEach(t),ypr=r(uPe," (RoFormer model)"),uPe.forEach(t),xpr=i(j),KT=n(j,"LI",{});var bPe=s(KT);i2e=n(bPe,"STRONG",{});var HMt=s(i2e);$pr=r(HMt,"speech_to_text"),HMt.forEach(t),kpr=r(bPe," \u2014 "),yQ=n(bPe,"A",{href:!0});var UMt=s(yQ);Spr=r(UMt,"TFSpeech2TextModel"),UMt.forEach(t),Rpr=r(bPe," (Speech2Text model)"),bPe.forEach(t),Ppr=i(j),ZT=n(j,"LI",{});var vPe=s(ZT);d2e=n(vPe,"STRONG",{});var JMt=s(d2e);Bpr=r(JMt,"swin"),JMt.forEach(t),Ipr=r(vPe," \u2014 "),xQ=n(vPe,"A",{href:!0});var YMt=s(xQ);Npr=r(YMt,"TFSwinModel"),YMt.forEach(t),qpr=r(vPe," (Swin Transformer model)"),vPe.forEach(t),jpr=i(j),e7=n(j,"LI",{});var FPe=s(e7);c2e=n(FPe,"STRONG",{});var KMt=s(c2e);Dpr=r(KMt,"t5"),KMt.forEach(t),Gpr=r(FPe," \u2014 "),$Q=n(FPe,"A",{href:!0});var ZMt=s($Q);Opr=r(ZMt,"TFT5Model"),ZMt.forEach(t),Vpr=r(FPe," (T5 model)"),FPe.forEach(t),Xpr=i(j),o7=n(j,"LI",{});var TPe=s(o7);f2e=n(TPe,"STRONG",{});var eEt=s(f2e);zpr=r(eEt,"tapas"),eEt.forEach(t),Wpr=r(TPe," \u2014 "),kQ=n(TPe,"A",{href:!0});var oEt=s(kQ);Qpr=r(oEt,"TFTapasModel"),oEt.forEach(t),Hpr=r(TPe," (TAPAS model)"),TPe.forEach(t),Upr=i(j),r7=n(j,"LI",{});var MPe=s(r7);m2e=n(MPe,"STRONG",{});var rEt=s(m2e);Jpr=r(rEt,"transfo-xl"),rEt.forEach(t),Ypr=r(MPe," \u2014 "),SQ=n(MPe,"A",{href:!0});var tEt=s(SQ);Kpr=r(tEt,"TFTransfoXLModel"),tEt.forEach(t),Zpr=r(MPe," (Transformer-XL model)"),MPe.forEach(t),e_r=i(j),t7=n(j,"LI",{});var EPe=s(t7);g2e=n(EPe,"STRONG",{});var aEt=s(g2e);o_r=r(aEt,"vit"),aEt.forEach(t),r_r=r(EPe," \u2014 "),RQ=n(EPe,"A",{href:!0});var nEt=s(RQ);t_r=r(nEt,"TFViTModel"),nEt.forEach(t),a_r=r(EPe," (ViT model)"),EPe.forEach(t),n_r=i(j),a7=n(j,"LI",{});var CPe=s(a7);h2e=n(CPe,"STRONG",{});var sEt=s(h2e);s_r=r(sEt,"vit_mae"),sEt.forEach(t),l_r=r(CPe," \u2014 "),PQ=n(CPe,"A",{href:!0});var lEt=s(PQ);i_r=r(lEt,"TFViTMAEModel"),lEt.forEach(t),d_r=r(CPe," (ViTMAE model)"),CPe.forEach(t),c_r=i(j),n7=n(j,"LI",{});var wPe=s(n7);p2e=n(wPe,"STRONG",{});var iEt=s(p2e);f_r=r(iEt,"wav2vec2"),iEt.forEach(t),m_r=r(wPe," \u2014 "),BQ=n(wPe,"A",{href:!0});var dEt=s(BQ);g_r=r(dEt,"TFWav2Vec2Model"),dEt.forEach(t),h_r=r(wPe," (Wav2Vec2 model)"),wPe.forEach(t),p_r=i(j),s7=n(j,"LI",{});var APe=s(s7);_2e=n(APe,"STRONG",{});var cEt=s(_2e);__r=r(cEt,"xlm"),cEt.forEach(t),u_r=r(APe," \u2014 "),IQ=n(APe,"A",{href:!0});var fEt=s(IQ);b_r=r(fEt,"TFXLMModel"),fEt.forEach(t),v_r=r(APe," (XLM model)"),APe.forEach(t),F_r=i(j),l7=n(j,"LI",{});var LPe=s(l7);u2e=n(LPe,"STRONG",{});var mEt=s(u2e);T_r=r(mEt,"xlm-roberta"),mEt.forEach(t),M_r=r(LPe," \u2014 "),NQ=n(LPe,"A",{href:!0});var gEt=s(NQ);E_r=r(gEt,"TFXLMRobertaModel"),gEt.forEach(t),C_r=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),w_r=i(j),i7=n(j,"LI",{});var yPe=s(i7);b2e=n(yPe,"STRONG",{});var hEt=s(b2e);A_r=r(hEt,"xlnet"),hEt.forEach(t),L_r=r(yPe," \u2014 "),qQ=n(yPe,"A",{href:!0});var pEt=s(qQ);y_r=r(pEt,"TFXLNetModel"),pEt.forEach(t),x_r=r(yPe," (XLNet model)"),yPe.forEach(t),j.forEach(t),$_r=i(pl),T(d7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),SDe=i(f),Wd=n(f,"H2",{class:!0});var qOe=s(Wd);c7=n(qOe,"A",{id:!0,class:!0,href:!0});var _Et=s(c7);v2e=n(_Et,"SPAN",{});var uEt=s(v2e);T(R8.$$.fragment,uEt),uEt.forEach(t),_Et.forEach(t),k_r=i(qOe),F2e=n(qOe,"SPAN",{});var bEt=s(F2e);S_r=r(bEt,"TFAutoModelForPreTraining"),bEt.forEach(t),qOe.forEach(t),RDe=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(P8.$$.fragment,_l),R_r=i(_l),Qd=n(_l,"P",{});var Kee=s(Qd);P_r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jQ=n(Kee,"A",{href:!0});var vEt=s(jQ);B_r=r(vEt,"from_pretrained()"),vEt.forEach(t),I_r=r(Kee," class method or the "),DQ=n(Kee,"A",{href:!0});var FEt=s(DQ);N_r=r(FEt,"from_config()"),FEt.forEach(t),q_r=r(Kee,` class
method.`),Kee.forEach(t),j_r=i(_l),B8=n(_l,"P",{});var jOe=s(B8);D_r=r(jOe,"This class cannot be instantiated directly using "),T2e=n(jOe,"CODE",{});var TEt=s(T2e);G_r=r(TEt,"__init__()"),TEt.forEach(t),O_r=r(jOe," (throws an error)."),jOe.forEach(t),V_r=i(_l),xt=n(_l,"DIV",{class:!0});var QA=s(xt);T(I8.$$.fragment,QA),X_r=i(QA),M2e=n(QA,"P",{});var MEt=s(M2e);z_r=r(MEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MEt.forEach(t),W_r=i(QA),Hd=n(QA,"P",{});var Zee=s(Hd);Q_r=r(Zee,`Note:
Loading a model from its configuration file does `),E2e=n(Zee,"STRONG",{});var EEt=s(E2e);H_r=r(EEt,"not"),EEt.forEach(t),U_r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(Zee,"A",{href:!0});var CEt=s(GQ);J_r=r(CEt,"from_pretrained()"),CEt.forEach(t),Y_r=r(Zee," to load the model weights."),Zee.forEach(t),K_r=i(QA),T(f7.$$.fragment,QA),QA.forEach(t),Z_r=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(N8.$$.fragment,ul),eur=i(ul),C2e=n(ul,"P",{});var wEt=s(C2e);our=r(wEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wEt.forEach(t),rur=i(ul),en=n(ul,"P",{});var HA=s(en);tur=r(HA,"The model class to instantiate is selected based on the "),w2e=n(HA,"CODE",{});var AEt=s(w2e);aur=r(AEt,"model_type"),AEt.forEach(t),nur=r(HA,` property of the config object (either
passed as an argument or loaded from `),A2e=n(HA,"CODE",{});var LEt=s(A2e);sur=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),lur=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(HA,"CODE",{});var yEt=s(L2e);iur=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),dur=r(HA,":"),HA.forEach(t),cur=i(ul),se=n(ul,"UL",{});var le=s(se);m7=n(le,"LI",{});var xPe=s(m7);y2e=n(xPe,"STRONG",{});var xEt=s(y2e);fur=r(xEt,"albert"),xEt.forEach(t),mur=r(xPe," \u2014 "),OQ=n(xPe,"A",{href:!0});var $Et=s(OQ);gur=r($Et,"TFAlbertForPreTraining"),$Et.forEach(t),hur=r(xPe," (ALBERT model)"),xPe.forEach(t),pur=i(le),g7=n(le,"LI",{});var $Pe=s(g7);x2e=n($Pe,"STRONG",{});var kEt=s(x2e);_ur=r(kEt,"bart"),kEt.forEach(t),uur=r($Pe," \u2014 "),VQ=n($Pe,"A",{href:!0});var SEt=s(VQ);bur=r(SEt,"TFBartForConditionalGeneration"),SEt.forEach(t),vur=r($Pe," (BART model)"),$Pe.forEach(t),Fur=i(le),h7=n(le,"LI",{});var kPe=s(h7);$2e=n(kPe,"STRONG",{});var REt=s($2e);Tur=r(REt,"bert"),REt.forEach(t),Mur=r(kPe," \u2014 "),XQ=n(kPe,"A",{href:!0});var PEt=s(XQ);Eur=r(PEt,"TFBertForPreTraining"),PEt.forEach(t),Cur=r(kPe," (BERT model)"),kPe.forEach(t),wur=i(le),p7=n(le,"LI",{});var SPe=s(p7);k2e=n(SPe,"STRONG",{});var BEt=s(k2e);Aur=r(BEt,"camembert"),BEt.forEach(t),Lur=r(SPe," \u2014 "),zQ=n(SPe,"A",{href:!0});var IEt=s(zQ);yur=r(IEt,"TFCamembertForMaskedLM"),IEt.forEach(t),xur=r(SPe," (CamemBERT model)"),SPe.forEach(t),$ur=i(le),_7=n(le,"LI",{});var RPe=s(_7);S2e=n(RPe,"STRONG",{});var NEt=s(S2e);kur=r(NEt,"ctrl"),NEt.forEach(t),Sur=r(RPe," \u2014 "),WQ=n(RPe,"A",{href:!0});var qEt=s(WQ);Rur=r(qEt,"TFCTRLLMHeadModel"),qEt.forEach(t),Pur=r(RPe," (CTRL model)"),RPe.forEach(t),Bur=i(le),u7=n(le,"LI",{});var PPe=s(u7);R2e=n(PPe,"STRONG",{});var jEt=s(R2e);Iur=r(jEt,"distilbert"),jEt.forEach(t),Nur=r(PPe," \u2014 "),QQ=n(PPe,"A",{href:!0});var DEt=s(QQ);qur=r(DEt,"TFDistilBertForMaskedLM"),DEt.forEach(t),jur=r(PPe," (DistilBERT model)"),PPe.forEach(t),Dur=i(le),b7=n(le,"LI",{});var BPe=s(b7);P2e=n(BPe,"STRONG",{});var GEt=s(P2e);Gur=r(GEt,"electra"),GEt.forEach(t),Our=r(BPe," \u2014 "),HQ=n(BPe,"A",{href:!0});var OEt=s(HQ);Vur=r(OEt,"TFElectraForPreTraining"),OEt.forEach(t),Xur=r(BPe," (ELECTRA model)"),BPe.forEach(t),zur=i(le),v7=n(le,"LI",{});var IPe=s(v7);B2e=n(IPe,"STRONG",{});var VEt=s(B2e);Wur=r(VEt,"flaubert"),VEt.forEach(t),Qur=r(IPe," \u2014 "),UQ=n(IPe,"A",{href:!0});var XEt=s(UQ);Hur=r(XEt,"TFFlaubertWithLMHeadModel"),XEt.forEach(t),Uur=r(IPe," (FlauBERT model)"),IPe.forEach(t),Jur=i(le),F7=n(le,"LI",{});var NPe=s(F7);I2e=n(NPe,"STRONG",{});var zEt=s(I2e);Yur=r(zEt,"funnel"),zEt.forEach(t),Kur=r(NPe," \u2014 "),JQ=n(NPe,"A",{href:!0});var WEt=s(JQ);Zur=r(WEt,"TFFunnelForPreTraining"),WEt.forEach(t),e5r=r(NPe," (Funnel Transformer model)"),NPe.forEach(t),o5r=i(le),T7=n(le,"LI",{});var qPe=s(T7);N2e=n(qPe,"STRONG",{});var QEt=s(N2e);r5r=r(QEt,"gpt2"),QEt.forEach(t),t5r=r(qPe," \u2014 "),YQ=n(qPe,"A",{href:!0});var HEt=s(YQ);a5r=r(HEt,"TFGPT2LMHeadModel"),HEt.forEach(t),n5r=r(qPe," (OpenAI GPT-2 model)"),qPe.forEach(t),s5r=i(le),M7=n(le,"LI",{});var jPe=s(M7);q2e=n(jPe,"STRONG",{});var UEt=s(q2e);l5r=r(UEt,"layoutlm"),UEt.forEach(t),i5r=r(jPe," \u2014 "),KQ=n(jPe,"A",{href:!0});var JEt=s(KQ);d5r=r(JEt,"TFLayoutLMForMaskedLM"),JEt.forEach(t),c5r=r(jPe," (LayoutLM model)"),jPe.forEach(t),f5r=i(le),E7=n(le,"LI",{});var DPe=s(E7);j2e=n(DPe,"STRONG",{});var YEt=s(j2e);m5r=r(YEt,"lxmert"),YEt.forEach(t),g5r=r(DPe," \u2014 "),ZQ=n(DPe,"A",{href:!0});var KEt=s(ZQ);h5r=r(KEt,"TFLxmertForPreTraining"),KEt.forEach(t),p5r=r(DPe," (LXMERT model)"),DPe.forEach(t),_5r=i(le),C7=n(le,"LI",{});var GPe=s(C7);D2e=n(GPe,"STRONG",{});var ZEt=s(D2e);u5r=r(ZEt,"mobilebert"),ZEt.forEach(t),b5r=r(GPe," \u2014 "),eH=n(GPe,"A",{href:!0});var eCt=s(eH);v5r=r(eCt,"TFMobileBertForPreTraining"),eCt.forEach(t),F5r=r(GPe," (MobileBERT model)"),GPe.forEach(t),T5r=i(le),w7=n(le,"LI",{});var OPe=s(w7);G2e=n(OPe,"STRONG",{});var oCt=s(G2e);M5r=r(oCt,"mpnet"),oCt.forEach(t),E5r=r(OPe," \u2014 "),oH=n(OPe,"A",{href:!0});var rCt=s(oH);C5r=r(rCt,"TFMPNetForMaskedLM"),rCt.forEach(t),w5r=r(OPe," (MPNet model)"),OPe.forEach(t),A5r=i(le),A7=n(le,"LI",{});var VPe=s(A7);O2e=n(VPe,"STRONG",{});var tCt=s(O2e);L5r=r(tCt,"openai-gpt"),tCt.forEach(t),y5r=r(VPe," \u2014 "),rH=n(VPe,"A",{href:!0});var aCt=s(rH);x5r=r(aCt,"TFOpenAIGPTLMHeadModel"),aCt.forEach(t),$5r=r(VPe," (OpenAI GPT model)"),VPe.forEach(t),k5r=i(le),L7=n(le,"LI",{});var XPe=s(L7);V2e=n(XPe,"STRONG",{});var nCt=s(V2e);S5r=r(nCt,"roberta"),nCt.forEach(t),R5r=r(XPe," \u2014 "),tH=n(XPe,"A",{href:!0});var sCt=s(tH);P5r=r(sCt,"TFRobertaForMaskedLM"),sCt.forEach(t),B5r=r(XPe," (RoBERTa model)"),XPe.forEach(t),I5r=i(le),y7=n(le,"LI",{});var zPe=s(y7);X2e=n(zPe,"STRONG",{});var lCt=s(X2e);N5r=r(lCt,"t5"),lCt.forEach(t),q5r=r(zPe," \u2014 "),aH=n(zPe,"A",{href:!0});var iCt=s(aH);j5r=r(iCt,"TFT5ForConditionalGeneration"),iCt.forEach(t),D5r=r(zPe," (T5 model)"),zPe.forEach(t),G5r=i(le),x7=n(le,"LI",{});var WPe=s(x7);z2e=n(WPe,"STRONG",{});var dCt=s(z2e);O5r=r(dCt,"tapas"),dCt.forEach(t),V5r=r(WPe," \u2014 "),nH=n(WPe,"A",{href:!0});var cCt=s(nH);X5r=r(cCt,"TFTapasForMaskedLM"),cCt.forEach(t),z5r=r(WPe," (TAPAS model)"),WPe.forEach(t),W5r=i(le),$7=n(le,"LI",{});var QPe=s($7);W2e=n(QPe,"STRONG",{});var fCt=s(W2e);Q5r=r(fCt,"transfo-xl"),fCt.forEach(t),H5r=r(QPe," \u2014 "),sH=n(QPe,"A",{href:!0});var mCt=s(sH);U5r=r(mCt,"TFTransfoXLLMHeadModel"),mCt.forEach(t),J5r=r(QPe," (Transformer-XL model)"),QPe.forEach(t),Y5r=i(le),k7=n(le,"LI",{});var HPe=s(k7);Q2e=n(HPe,"STRONG",{});var gCt=s(Q2e);K5r=r(gCt,"vit_mae"),gCt.forEach(t),Z5r=r(HPe," \u2014 "),lH=n(HPe,"A",{href:!0});var hCt=s(lH);e1r=r(hCt,"TFViTMAEForPreTraining"),hCt.forEach(t),o1r=r(HPe," (ViTMAE model)"),HPe.forEach(t),r1r=i(le),S7=n(le,"LI",{});var UPe=s(S7);H2e=n(UPe,"STRONG",{});var pCt=s(H2e);t1r=r(pCt,"xlm"),pCt.forEach(t),a1r=r(UPe," \u2014 "),iH=n(UPe,"A",{href:!0});var _Ct=s(iH);n1r=r(_Ct,"TFXLMWithLMHeadModel"),_Ct.forEach(t),s1r=r(UPe," (XLM model)"),UPe.forEach(t),l1r=i(le),R7=n(le,"LI",{});var JPe=s(R7);U2e=n(JPe,"STRONG",{});var uCt=s(U2e);i1r=r(uCt,"xlm-roberta"),uCt.forEach(t),d1r=r(JPe," \u2014 "),dH=n(JPe,"A",{href:!0});var bCt=s(dH);c1r=r(bCt,"TFXLMRobertaForMaskedLM"),bCt.forEach(t),f1r=r(JPe," (XLM-RoBERTa model)"),JPe.forEach(t),m1r=i(le),P7=n(le,"LI",{});var YPe=s(P7);J2e=n(YPe,"STRONG",{});var vCt=s(J2e);g1r=r(vCt,"xlnet"),vCt.forEach(t),h1r=r(YPe," \u2014 "),cH=n(YPe,"A",{href:!0});var FCt=s(cH);p1r=r(FCt,"TFXLNetLMHeadModel"),FCt.forEach(t),_1r=r(YPe," (XLNet model)"),YPe.forEach(t),le.forEach(t),u1r=i(ul),T(B7.$$.fragment,ul),ul.forEach(t),_l.forEach(t),PDe=i(f),Ud=n(f,"H2",{class:!0});var DOe=s(Ud);I7=n(DOe,"A",{id:!0,class:!0,href:!0});var TCt=s(I7);Y2e=n(TCt,"SPAN",{});var MCt=s(Y2e);T(q8.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),b1r=i(DOe),K2e=n(DOe,"SPAN",{});var ECt=s(K2e);v1r=r(ECt,"TFAutoModelForCausalLM"),ECt.forEach(t),DOe.forEach(t),BDe=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(j8.$$.fragment,bl),F1r=i(bl),Jd=n(bl,"P",{});var eoe=s(Jd);T1r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fH=n(eoe,"A",{href:!0});var CCt=s(fH);M1r=r(CCt,"from_pretrained()"),CCt.forEach(t),E1r=r(eoe," class method or the "),mH=n(eoe,"A",{href:!0});var wCt=s(mH);C1r=r(wCt,"from_config()"),wCt.forEach(t),w1r=r(eoe,` class
method.`),eoe.forEach(t),A1r=i(bl),D8=n(bl,"P",{});var GOe=s(D8);L1r=r(GOe,"This class cannot be instantiated directly using "),Z2e=n(GOe,"CODE",{});var ACt=s(Z2e);y1r=r(ACt,"__init__()"),ACt.forEach(t),x1r=r(GOe," (throws an error)."),GOe.forEach(t),$1r=i(bl),$t=n(bl,"DIV",{class:!0});var UA=s($t);T(G8.$$.fragment,UA),k1r=i(UA),e4e=n(UA,"P",{});var LCt=s(e4e);S1r=r(LCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LCt.forEach(t),R1r=i(UA),Yd=n(UA,"P",{});var ooe=s(Yd);P1r=r(ooe,`Note:
Loading a model from its configuration file does `),o4e=n(ooe,"STRONG",{});var yCt=s(o4e);B1r=r(yCt,"not"),yCt.forEach(t),I1r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(ooe,"A",{href:!0});var xCt=s(gH);N1r=r(xCt,"from_pretrained()"),xCt.forEach(t),q1r=r(ooe," to load the model weights."),ooe.forEach(t),j1r=i(UA),T(N7.$$.fragment,UA),UA.forEach(t),D1r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(O8.$$.fragment,vl),G1r=i(vl),r4e=n(vl,"P",{});var $Ct=s(r4e);O1r=r($Ct,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Ct.forEach(t),V1r=i(vl),on=n(vl,"P",{});var JA=s(on);X1r=r(JA,"The model class to instantiate is selected based on the "),t4e=n(JA,"CODE",{});var kCt=s(t4e);z1r=r(kCt,"model_type"),kCt.forEach(t),W1r=r(JA,` property of the config object (either
passed as an argument or loaded from `),a4e=n(JA,"CODE",{});var SCt=s(a4e);Q1r=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),H1r=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(JA,"CODE",{});var RCt=s(n4e);U1r=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),J1r=r(JA,":"),JA.forEach(t),Y1r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);q7=n(Ce,"LI",{});var KPe=s(q7);s4e=n(KPe,"STRONG",{});var PCt=s(s4e);K1r=r(PCt,"bert"),PCt.forEach(t),Z1r=r(KPe," \u2014 "),hH=n(KPe,"A",{href:!0});var BCt=s(hH);ebr=r(BCt,"TFBertLMHeadModel"),BCt.forEach(t),obr=r(KPe," (BERT model)"),KPe.forEach(t),rbr=i(Ce),j7=n(Ce,"LI",{});var ZPe=s(j7);l4e=n(ZPe,"STRONG",{});var ICt=s(l4e);tbr=r(ICt,"camembert"),ICt.forEach(t),abr=r(ZPe," \u2014 "),pH=n(ZPe,"A",{href:!0});var NCt=s(pH);nbr=r(NCt,"TFCamembertForCausalLM"),NCt.forEach(t),sbr=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),lbr=i(Ce),D7=n(Ce,"LI",{});var eBe=s(D7);i4e=n(eBe,"STRONG",{});var qCt=s(i4e);ibr=r(qCt,"ctrl"),qCt.forEach(t),dbr=r(eBe," \u2014 "),_H=n(eBe,"A",{href:!0});var jCt=s(_H);cbr=r(jCt,"TFCTRLLMHeadModel"),jCt.forEach(t),fbr=r(eBe," (CTRL model)"),eBe.forEach(t),mbr=i(Ce),G7=n(Ce,"LI",{});var oBe=s(G7);d4e=n(oBe,"STRONG",{});var DCt=s(d4e);gbr=r(DCt,"gpt2"),DCt.forEach(t),hbr=r(oBe," \u2014 "),uH=n(oBe,"A",{href:!0});var GCt=s(uH);pbr=r(GCt,"TFGPT2LMHeadModel"),GCt.forEach(t),_br=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),ubr=i(Ce),O7=n(Ce,"LI",{});var rBe=s(O7);c4e=n(rBe,"STRONG",{});var OCt=s(c4e);bbr=r(OCt,"gptj"),OCt.forEach(t),vbr=r(rBe," \u2014 "),bH=n(rBe,"A",{href:!0});var VCt=s(bH);Fbr=r(VCt,"TFGPTJForCausalLM"),VCt.forEach(t),Tbr=r(rBe," (GPT-J model)"),rBe.forEach(t),Mbr=i(Ce),V7=n(Ce,"LI",{});var tBe=s(V7);f4e=n(tBe,"STRONG",{});var XCt=s(f4e);Ebr=r(XCt,"openai-gpt"),XCt.forEach(t),Cbr=r(tBe," \u2014 "),vH=n(tBe,"A",{href:!0});var zCt=s(vH);wbr=r(zCt,"TFOpenAIGPTLMHeadModel"),zCt.forEach(t),Abr=r(tBe," (OpenAI GPT model)"),tBe.forEach(t),Lbr=i(Ce),X7=n(Ce,"LI",{});var aBe=s(X7);m4e=n(aBe,"STRONG",{});var WCt=s(m4e);ybr=r(WCt,"opt"),WCt.forEach(t),xbr=r(aBe," \u2014 "),FH=n(aBe,"A",{href:!0});var QCt=s(FH);$br=r(QCt,"TFOPTForCausalLM"),QCt.forEach(t),kbr=r(aBe," (OPT model)"),aBe.forEach(t),Sbr=i(Ce),z7=n(Ce,"LI",{});var nBe=s(z7);g4e=n(nBe,"STRONG",{});var HCt=s(g4e);Rbr=r(HCt,"rembert"),HCt.forEach(t),Pbr=r(nBe," \u2014 "),TH=n(nBe,"A",{href:!0});var UCt=s(TH);Bbr=r(UCt,"TFRemBertForCausalLM"),UCt.forEach(t),Ibr=r(nBe," (RemBERT model)"),nBe.forEach(t),Nbr=i(Ce),W7=n(Ce,"LI",{});var sBe=s(W7);h4e=n(sBe,"STRONG",{});var JCt=s(h4e);qbr=r(JCt,"roberta"),JCt.forEach(t),jbr=r(sBe," \u2014 "),MH=n(sBe,"A",{href:!0});var YCt=s(MH);Dbr=r(YCt,"TFRobertaForCausalLM"),YCt.forEach(t),Gbr=r(sBe," (RoBERTa model)"),sBe.forEach(t),Obr=i(Ce),Q7=n(Ce,"LI",{});var lBe=s(Q7);p4e=n(lBe,"STRONG",{});var KCt=s(p4e);Vbr=r(KCt,"roformer"),KCt.forEach(t),Xbr=r(lBe," \u2014 "),EH=n(lBe,"A",{href:!0});var ZCt=s(EH);zbr=r(ZCt,"TFRoFormerForCausalLM"),ZCt.forEach(t),Wbr=r(lBe," (RoFormer model)"),lBe.forEach(t),Qbr=i(Ce),H7=n(Ce,"LI",{});var iBe=s(H7);_4e=n(iBe,"STRONG",{});var e3t=s(_4e);Hbr=r(e3t,"transfo-xl"),e3t.forEach(t),Ubr=r(iBe," \u2014 "),CH=n(iBe,"A",{href:!0});var o3t=s(CH);Jbr=r(o3t,"TFTransfoXLLMHeadModel"),o3t.forEach(t),Ybr=r(iBe," (Transformer-XL model)"),iBe.forEach(t),Kbr=i(Ce),U7=n(Ce,"LI",{});var dBe=s(U7);u4e=n(dBe,"STRONG",{});var r3t=s(u4e);Zbr=r(r3t,"xlm"),r3t.forEach(t),e2r=r(dBe," \u2014 "),wH=n(dBe,"A",{href:!0});var t3t=s(wH);o2r=r(t3t,"TFXLMWithLMHeadModel"),t3t.forEach(t),r2r=r(dBe," (XLM model)"),dBe.forEach(t),t2r=i(Ce),J7=n(Ce,"LI",{});var cBe=s(J7);b4e=n(cBe,"STRONG",{});var a3t=s(b4e);a2r=r(a3t,"xlnet"),a3t.forEach(t),n2r=r(cBe," \u2014 "),AH=n(cBe,"A",{href:!0});var n3t=s(AH);s2r=r(n3t,"TFXLNetLMHeadModel"),n3t.forEach(t),l2r=r(cBe," (XLNet model)"),cBe.forEach(t),Ce.forEach(t),i2r=i(vl),T(Y7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),IDe=i(f),Kd=n(f,"H2",{class:!0});var OOe=s(Kd);K7=n(OOe,"A",{id:!0,class:!0,href:!0});var s3t=s(K7);v4e=n(s3t,"SPAN",{});var l3t=s(v4e);T(V8.$$.fragment,l3t),l3t.forEach(t),s3t.forEach(t),d2r=i(OOe),F4e=n(OOe,"SPAN",{});var i3t=s(F4e);c2r=r(i3t,"TFAutoModelForImageClassification"),i3t.forEach(t),OOe.forEach(t),NDe=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(X8.$$.fragment,Fl),f2r=i(Fl),Zd=n(Fl,"P",{});var roe=s(Zd);m2r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LH=n(roe,"A",{href:!0});var d3t=s(LH);g2r=r(d3t,"from_pretrained()"),d3t.forEach(t),h2r=r(roe," class method or the "),yH=n(roe,"A",{href:!0});var c3t=s(yH);p2r=r(c3t,"from_config()"),c3t.forEach(t),_2r=r(roe,` class
method.`),roe.forEach(t),u2r=i(Fl),z8=n(Fl,"P",{});var VOe=s(z8);b2r=r(VOe,"This class cannot be instantiated directly using "),T4e=n(VOe,"CODE",{});var f3t=s(T4e);v2r=r(f3t,"__init__()"),f3t.forEach(t),F2r=r(VOe," (throws an error)."),VOe.forEach(t),T2r=i(Fl),kt=n(Fl,"DIV",{class:!0});var YA=s(kt);T(W8.$$.fragment,YA),M2r=i(YA),M4e=n(YA,"P",{});var m3t=s(M4e);E2r=r(m3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m3t.forEach(t),C2r=i(YA),ec=n(YA,"P",{});var toe=s(ec);w2r=r(toe,`Note:
Loading a model from its configuration file does `),E4e=n(toe,"STRONG",{});var g3t=s(E4e);A2r=r(g3t,"not"),g3t.forEach(t),L2r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(toe,"A",{href:!0});var h3t=s(xH);y2r=r(h3t,"from_pretrained()"),h3t.forEach(t),x2r=r(toe," to load the model weights."),toe.forEach(t),$2r=i(YA),T(Z7.$$.fragment,YA),YA.forEach(t),k2r=i(Fl),yr=n(Fl,"DIV",{class:!0});var Tl=s(yr);T(Q8.$$.fragment,Tl),S2r=i(Tl),C4e=n(Tl,"P",{});var p3t=s(C4e);R2r=r(p3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p3t.forEach(t),P2r=i(Tl),rn=n(Tl,"P",{});var KA=s(rn);B2r=r(KA,"The model class to instantiate is selected based on the "),w4e=n(KA,"CODE",{});var _3t=s(w4e);I2r=r(_3t,"model_type"),_3t.forEach(t),N2r=r(KA,` property of the config object (either
passed as an argument or loaded from `),A4e=n(KA,"CODE",{});var u3t=s(A4e);q2r=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),j2r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(KA,"CODE",{});var b3t=s(L4e);D2r=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),G2r=r(KA,":"),KA.forEach(t),O2r=i(Tl),et=n(Tl,"UL",{});var Ml=s(et);eM=n(Ml,"LI",{});var fBe=s(eM);y4e=n(fBe,"STRONG",{});var v3t=s(y4e);V2r=r(v3t,"convnext"),v3t.forEach(t),X2r=r(fBe," \u2014 "),$H=n(fBe,"A",{href:!0});var F3t=s($H);z2r=r(F3t,"TFConvNextForImageClassification"),F3t.forEach(t),W2r=r(fBe," (ConvNeXT model)"),fBe.forEach(t),Q2r=i(Ml),oM=n(Ml,"LI",{});var mBe=s(oM);x4e=n(mBe,"STRONG",{});var T3t=s(x4e);H2r=r(T3t,"data2vec-vision"),T3t.forEach(t),U2r=r(mBe," \u2014 "),kH=n(mBe,"A",{href:!0});var M3t=s(kH);J2r=r(M3t,"TFData2VecVisionForImageClassification"),M3t.forEach(t),Y2r=r(mBe," (Data2VecVision model)"),mBe.forEach(t),K2r=i(Ml),rM=n(Ml,"LI",{});var gBe=s(rM);$4e=n(gBe,"STRONG",{});var E3t=s($4e);Z2r=r(E3t,"regnet"),E3t.forEach(t),e4r=r(gBe," \u2014 "),SH=n(gBe,"A",{href:!0});var C3t=s(SH);o4r=r(C3t,"TFRegNetForImageClassification"),C3t.forEach(t),r4r=r(gBe," (RegNet model)"),gBe.forEach(t),t4r=i(Ml),tM=n(Ml,"LI",{});var hBe=s(tM);k4e=n(hBe,"STRONG",{});var w3t=s(k4e);a4r=r(w3t,"swin"),w3t.forEach(t),n4r=r(hBe," \u2014 "),RH=n(hBe,"A",{href:!0});var A3t=s(RH);s4r=r(A3t,"TFSwinForImageClassification"),A3t.forEach(t),l4r=r(hBe," (Swin Transformer model)"),hBe.forEach(t),i4r=i(Ml),aM=n(Ml,"LI",{});var pBe=s(aM);S4e=n(pBe,"STRONG",{});var L3t=s(S4e);d4r=r(L3t,"vit"),L3t.forEach(t),c4r=r(pBe," \u2014 "),PH=n(pBe,"A",{href:!0});var y3t=s(PH);f4r=r(y3t,"TFViTForImageClassification"),y3t.forEach(t),m4r=r(pBe," (ViT model)"),pBe.forEach(t),Ml.forEach(t),g4r=i(Tl),T(nM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),qDe=i(f),oc=n(f,"H2",{class:!0});var XOe=s(oc);sM=n(XOe,"A",{id:!0,class:!0,href:!0});var x3t=s(sM);R4e=n(x3t,"SPAN",{});var $3t=s(R4e);T(H8.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),h4r=i(XOe),P4e=n(XOe,"SPAN",{});var k3t=s(P4e);p4r=r(k3t,"TFAutoModelForMaskedLM"),k3t.forEach(t),XOe.forEach(t),jDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(U8.$$.fragment,El),_4r=i(El),rc=n(El,"P",{});var aoe=s(rc);u4r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BH=n(aoe,"A",{href:!0});var S3t=s(BH);b4r=r(S3t,"from_pretrained()"),S3t.forEach(t),v4r=r(aoe," class method or the "),IH=n(aoe,"A",{href:!0});var R3t=s(IH);F4r=r(R3t,"from_config()"),R3t.forEach(t),T4r=r(aoe,` class
method.`),aoe.forEach(t),M4r=i(El),J8=n(El,"P",{});var zOe=s(J8);E4r=r(zOe,"This class cannot be instantiated directly using "),B4e=n(zOe,"CODE",{});var P3t=s(B4e);C4r=r(P3t,"__init__()"),P3t.forEach(t),w4r=r(zOe," (throws an error)."),zOe.forEach(t),A4r=i(El),St=n(El,"DIV",{class:!0});var ZA=s(St);T(Y8.$$.fragment,ZA),L4r=i(ZA),I4e=n(ZA,"P",{});var B3t=s(I4e);y4r=r(B3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B3t.forEach(t),x4r=i(ZA),tc=n(ZA,"P",{});var noe=s(tc);$4r=r(noe,`Note:
Loading a model from its configuration file does `),N4e=n(noe,"STRONG",{});var I3t=s(N4e);k4r=r(I3t,"not"),I3t.forEach(t),S4r=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(noe,"A",{href:!0});var N3t=s(NH);R4r=r(N3t,"from_pretrained()"),N3t.forEach(t),P4r=r(noe," to load the model weights."),noe.forEach(t),B4r=i(ZA),T(lM.$$.fragment,ZA),ZA.forEach(t),I4r=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(K8.$$.fragment,Cl),N4r=i(Cl),q4e=n(Cl,"P",{});var q3t=s(q4e);q4r=r(q3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q3t.forEach(t),j4r=i(Cl),tn=n(Cl,"P",{});var e6=s(tn);D4r=r(e6,"The model class to instantiate is selected based on the "),j4e=n(e6,"CODE",{});var j3t=s(j4e);G4r=r(j3t,"model_type"),j3t.forEach(t),O4r=r(e6,` property of the config object (either
passed as an argument or loaded from `),D4e=n(e6,"CODE",{});var D3t=s(D4e);V4r=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),X4r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(e6,"CODE",{});var G3t=s(G4e);z4r=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),W4r=r(e6,":"),e6.forEach(t),Q4r=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);iM=n(fe,"LI",{});var _Be=s(iM);O4e=n(_Be,"STRONG",{});var O3t=s(O4e);H4r=r(O3t,"albert"),O3t.forEach(t),U4r=r(_Be," \u2014 "),qH=n(_Be,"A",{href:!0});var V3t=s(qH);J4r=r(V3t,"TFAlbertForMaskedLM"),V3t.forEach(t),Y4r=r(_Be," (ALBERT model)"),_Be.forEach(t),K4r=i(fe),dM=n(fe,"LI",{});var uBe=s(dM);V4e=n(uBe,"STRONG",{});var X3t=s(V4e);Z4r=r(X3t,"bert"),X3t.forEach(t),evr=r(uBe," \u2014 "),jH=n(uBe,"A",{href:!0});var z3t=s(jH);ovr=r(z3t,"TFBertForMaskedLM"),z3t.forEach(t),rvr=r(uBe," (BERT model)"),uBe.forEach(t),tvr=i(fe),cM=n(fe,"LI",{});var bBe=s(cM);X4e=n(bBe,"STRONG",{});var W3t=s(X4e);avr=r(W3t,"camembert"),W3t.forEach(t),nvr=r(bBe," \u2014 "),DH=n(bBe,"A",{href:!0});var Q3t=s(DH);svr=r(Q3t,"TFCamembertForMaskedLM"),Q3t.forEach(t),lvr=r(bBe," (CamemBERT model)"),bBe.forEach(t),ivr=i(fe),fM=n(fe,"LI",{});var vBe=s(fM);z4e=n(vBe,"STRONG",{});var H3t=s(z4e);dvr=r(H3t,"convbert"),H3t.forEach(t),cvr=r(vBe," \u2014 "),GH=n(vBe,"A",{href:!0});var U3t=s(GH);fvr=r(U3t,"TFConvBertForMaskedLM"),U3t.forEach(t),mvr=r(vBe," (ConvBERT model)"),vBe.forEach(t),gvr=i(fe),mM=n(fe,"LI",{});var FBe=s(mM);W4e=n(FBe,"STRONG",{});var J3t=s(W4e);hvr=r(J3t,"deberta"),J3t.forEach(t),pvr=r(FBe," \u2014 "),OH=n(FBe,"A",{href:!0});var Y3t=s(OH);_vr=r(Y3t,"TFDebertaForMaskedLM"),Y3t.forEach(t),uvr=r(FBe," (DeBERTa model)"),FBe.forEach(t),bvr=i(fe),gM=n(fe,"LI",{});var TBe=s(gM);Q4e=n(TBe,"STRONG",{});var K3t=s(Q4e);vvr=r(K3t,"deberta-v2"),K3t.forEach(t),Fvr=r(TBe," \u2014 "),VH=n(TBe,"A",{href:!0});var Z3t=s(VH);Tvr=r(Z3t,"TFDebertaV2ForMaskedLM"),Z3t.forEach(t),Mvr=r(TBe," (DeBERTa-v2 model)"),TBe.forEach(t),Evr=i(fe),hM=n(fe,"LI",{});var MBe=s(hM);H4e=n(MBe,"STRONG",{});var e0t=s(H4e);Cvr=r(e0t,"distilbert"),e0t.forEach(t),wvr=r(MBe," \u2014 "),XH=n(MBe,"A",{href:!0});var o0t=s(XH);Avr=r(o0t,"TFDistilBertForMaskedLM"),o0t.forEach(t),Lvr=r(MBe," (DistilBERT model)"),MBe.forEach(t),yvr=i(fe),pM=n(fe,"LI",{});var EBe=s(pM);U4e=n(EBe,"STRONG",{});var r0t=s(U4e);xvr=r(r0t,"electra"),r0t.forEach(t),$vr=r(EBe," \u2014 "),zH=n(EBe,"A",{href:!0});var t0t=s(zH);kvr=r(t0t,"TFElectraForMaskedLM"),t0t.forEach(t),Svr=r(EBe," (ELECTRA model)"),EBe.forEach(t),Rvr=i(fe),_M=n(fe,"LI",{});var CBe=s(_M);J4e=n(CBe,"STRONG",{});var a0t=s(J4e);Pvr=r(a0t,"flaubert"),a0t.forEach(t),Bvr=r(CBe," \u2014 "),WH=n(CBe,"A",{href:!0});var n0t=s(WH);Ivr=r(n0t,"TFFlaubertWithLMHeadModel"),n0t.forEach(t),Nvr=r(CBe," (FlauBERT model)"),CBe.forEach(t),qvr=i(fe),uM=n(fe,"LI",{});var wBe=s(uM);Y4e=n(wBe,"STRONG",{});var s0t=s(Y4e);jvr=r(s0t,"funnel"),s0t.forEach(t),Dvr=r(wBe," \u2014 "),QH=n(wBe,"A",{href:!0});var l0t=s(QH);Gvr=r(l0t,"TFFunnelForMaskedLM"),l0t.forEach(t),Ovr=r(wBe," (Funnel Transformer model)"),wBe.forEach(t),Vvr=i(fe),bM=n(fe,"LI",{});var ABe=s(bM);K4e=n(ABe,"STRONG",{});var i0t=s(K4e);Xvr=r(i0t,"layoutlm"),i0t.forEach(t),zvr=r(ABe," \u2014 "),HH=n(ABe,"A",{href:!0});var d0t=s(HH);Wvr=r(d0t,"TFLayoutLMForMaskedLM"),d0t.forEach(t),Qvr=r(ABe," (LayoutLM model)"),ABe.forEach(t),Hvr=i(fe),vM=n(fe,"LI",{});var LBe=s(vM);Z4e=n(LBe,"STRONG",{});var c0t=s(Z4e);Uvr=r(c0t,"longformer"),c0t.forEach(t),Jvr=r(LBe," \u2014 "),UH=n(LBe,"A",{href:!0});var f0t=s(UH);Yvr=r(f0t,"TFLongformerForMaskedLM"),f0t.forEach(t),Kvr=r(LBe," (Longformer model)"),LBe.forEach(t),Zvr=i(fe),FM=n(fe,"LI",{});var yBe=s(FM);eve=n(yBe,"STRONG",{});var m0t=s(eve);eFr=r(m0t,"mobilebert"),m0t.forEach(t),oFr=r(yBe," \u2014 "),JH=n(yBe,"A",{href:!0});var g0t=s(JH);rFr=r(g0t,"TFMobileBertForMaskedLM"),g0t.forEach(t),tFr=r(yBe," (MobileBERT model)"),yBe.forEach(t),aFr=i(fe),TM=n(fe,"LI",{});var xBe=s(TM);ove=n(xBe,"STRONG",{});var h0t=s(ove);nFr=r(h0t,"mpnet"),h0t.forEach(t),sFr=r(xBe," \u2014 "),YH=n(xBe,"A",{href:!0});var p0t=s(YH);lFr=r(p0t,"TFMPNetForMaskedLM"),p0t.forEach(t),iFr=r(xBe," (MPNet model)"),xBe.forEach(t),dFr=i(fe),MM=n(fe,"LI",{});var $Be=s(MM);rve=n($Be,"STRONG",{});var _0t=s(rve);cFr=r(_0t,"rembert"),_0t.forEach(t),fFr=r($Be," \u2014 "),KH=n($Be,"A",{href:!0});var u0t=s(KH);mFr=r(u0t,"TFRemBertForMaskedLM"),u0t.forEach(t),gFr=r($Be," (RemBERT model)"),$Be.forEach(t),hFr=i(fe),EM=n(fe,"LI",{});var kBe=s(EM);tve=n(kBe,"STRONG",{});var b0t=s(tve);pFr=r(b0t,"roberta"),b0t.forEach(t),_Fr=r(kBe," \u2014 "),ZH=n(kBe,"A",{href:!0});var v0t=s(ZH);uFr=r(v0t,"TFRobertaForMaskedLM"),v0t.forEach(t),bFr=r(kBe," (RoBERTa model)"),kBe.forEach(t),vFr=i(fe),CM=n(fe,"LI",{});var SBe=s(CM);ave=n(SBe,"STRONG",{});var F0t=s(ave);FFr=r(F0t,"roformer"),F0t.forEach(t),TFr=r(SBe," \u2014 "),eU=n(SBe,"A",{href:!0});var T0t=s(eU);MFr=r(T0t,"TFRoFormerForMaskedLM"),T0t.forEach(t),EFr=r(SBe," (RoFormer model)"),SBe.forEach(t),CFr=i(fe),wM=n(fe,"LI",{});var RBe=s(wM);nve=n(RBe,"STRONG",{});var M0t=s(nve);wFr=r(M0t,"tapas"),M0t.forEach(t),AFr=r(RBe," \u2014 "),oU=n(RBe,"A",{href:!0});var E0t=s(oU);LFr=r(E0t,"TFTapasForMaskedLM"),E0t.forEach(t),yFr=r(RBe," (TAPAS model)"),RBe.forEach(t),xFr=i(fe),AM=n(fe,"LI",{});var PBe=s(AM);sve=n(PBe,"STRONG",{});var C0t=s(sve);$Fr=r(C0t,"xlm"),C0t.forEach(t),kFr=r(PBe," \u2014 "),rU=n(PBe,"A",{href:!0});var w0t=s(rU);SFr=r(w0t,"TFXLMWithLMHeadModel"),w0t.forEach(t),RFr=r(PBe," (XLM model)"),PBe.forEach(t),PFr=i(fe),LM=n(fe,"LI",{});var BBe=s(LM);lve=n(BBe,"STRONG",{});var A0t=s(lve);BFr=r(A0t,"xlm-roberta"),A0t.forEach(t),IFr=r(BBe," \u2014 "),tU=n(BBe,"A",{href:!0});var L0t=s(tU);NFr=r(L0t,"TFXLMRobertaForMaskedLM"),L0t.forEach(t),qFr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),fe.forEach(t),jFr=i(Cl),T(yM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),DDe=i(f),ac=n(f,"H2",{class:!0});var WOe=s(ac);xM=n(WOe,"A",{id:!0,class:!0,href:!0});var y0t=s(xM);ive=n(y0t,"SPAN",{});var x0t=s(ive);T(Z8.$$.fragment,x0t),x0t.forEach(t),y0t.forEach(t),DFr=i(WOe),dve=n(WOe,"SPAN",{});var $0t=s(dve);GFr=r($0t,"TFAutoModelForSeq2SeqLM"),$0t.forEach(t),WOe.forEach(t),GDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(e9.$$.fragment,wl),OFr=i(wl),nc=n(wl,"P",{});var soe=s(nc);VFr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aU=n(soe,"A",{href:!0});var k0t=s(aU);XFr=r(k0t,"from_pretrained()"),k0t.forEach(t),zFr=r(soe," class method or the "),nU=n(soe,"A",{href:!0});var S0t=s(nU);WFr=r(S0t,"from_config()"),S0t.forEach(t),QFr=r(soe,` class
method.`),soe.forEach(t),HFr=i(wl),o9=n(wl,"P",{});var QOe=s(o9);UFr=r(QOe,"This class cannot be instantiated directly using "),cve=n(QOe,"CODE",{});var R0t=s(cve);JFr=r(R0t,"__init__()"),R0t.forEach(t),YFr=r(QOe," (throws an error)."),QOe.forEach(t),KFr=i(wl),Rt=n(wl,"DIV",{class:!0});var o6=s(Rt);T(r9.$$.fragment,o6),ZFr=i(o6),fve=n(o6,"P",{});var P0t=s(fve);eTr=r(P0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P0t.forEach(t),oTr=i(o6),sc=n(o6,"P",{});var loe=s(sc);rTr=r(loe,`Note:
Loading a model from its configuration file does `),mve=n(loe,"STRONG",{});var B0t=s(mve);tTr=r(B0t,"not"),B0t.forEach(t),aTr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(loe,"A",{href:!0});var I0t=s(sU);nTr=r(I0t,"from_pretrained()"),I0t.forEach(t),sTr=r(loe," to load the model weights."),loe.forEach(t),lTr=i(o6),T($M.$$.fragment,o6),o6.forEach(t),iTr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(t9.$$.fragment,Al),dTr=i(Al),gve=n(Al,"P",{});var N0t=s(gve);cTr=r(N0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),N0t.forEach(t),fTr=i(Al),an=n(Al,"P",{});var r6=s(an);mTr=r(r6,"The model class to instantiate is selected based on the "),hve=n(r6,"CODE",{});var q0t=s(hve);gTr=r(q0t,"model_type"),q0t.forEach(t),hTr=r(r6,` property of the config object (either
passed as an argument or loaded from `),pve=n(r6,"CODE",{});var j0t=s(pve);pTr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),_Tr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(r6,"CODE",{});var D0t=s(_ve);uTr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),bTr=r(r6,":"),r6.forEach(t),vTr=i(Al),ye=n(Al,"UL",{});var Ie=s(ye);kM=n(Ie,"LI",{});var IBe=s(kM);uve=n(IBe,"STRONG",{});var G0t=s(uve);FTr=r(G0t,"bart"),G0t.forEach(t),TTr=r(IBe," \u2014 "),lU=n(IBe,"A",{href:!0});var O0t=s(lU);MTr=r(O0t,"TFBartForConditionalGeneration"),O0t.forEach(t),ETr=r(IBe," (BART model)"),IBe.forEach(t),CTr=i(Ie),SM=n(Ie,"LI",{});var NBe=s(SM);bve=n(NBe,"STRONG",{});var V0t=s(bve);wTr=r(V0t,"blenderbot"),V0t.forEach(t),ATr=r(NBe," \u2014 "),iU=n(NBe,"A",{href:!0});var X0t=s(iU);LTr=r(X0t,"TFBlenderbotForConditionalGeneration"),X0t.forEach(t),yTr=r(NBe," (Blenderbot model)"),NBe.forEach(t),xTr=i(Ie),RM=n(Ie,"LI",{});var qBe=s(RM);vve=n(qBe,"STRONG",{});var z0t=s(vve);$Tr=r(z0t,"blenderbot-small"),z0t.forEach(t),kTr=r(qBe," \u2014 "),dU=n(qBe,"A",{href:!0});var W0t=s(dU);STr=r(W0t,"TFBlenderbotSmallForConditionalGeneration"),W0t.forEach(t),RTr=r(qBe," (BlenderbotSmall model)"),qBe.forEach(t),PTr=i(Ie),PM=n(Ie,"LI",{});var jBe=s(PM);Fve=n(jBe,"STRONG",{});var Q0t=s(Fve);BTr=r(Q0t,"encoder-decoder"),Q0t.forEach(t),ITr=r(jBe," \u2014 "),cU=n(jBe,"A",{href:!0});var H0t=s(cU);NTr=r(H0t,"TFEncoderDecoderModel"),H0t.forEach(t),qTr=r(jBe," (Encoder decoder model)"),jBe.forEach(t),jTr=i(Ie),BM=n(Ie,"LI",{});var DBe=s(BM);Tve=n(DBe,"STRONG",{});var U0t=s(Tve);DTr=r(U0t,"led"),U0t.forEach(t),GTr=r(DBe," \u2014 "),fU=n(DBe,"A",{href:!0});var J0t=s(fU);OTr=r(J0t,"TFLEDForConditionalGeneration"),J0t.forEach(t),VTr=r(DBe," (LED model)"),DBe.forEach(t),XTr=i(Ie),IM=n(Ie,"LI",{});var GBe=s(IM);Mve=n(GBe,"STRONG",{});var Y0t=s(Mve);zTr=r(Y0t,"marian"),Y0t.forEach(t),WTr=r(GBe," \u2014 "),mU=n(GBe,"A",{href:!0});var K0t=s(mU);QTr=r(K0t,"TFMarianMTModel"),K0t.forEach(t),HTr=r(GBe," (Marian model)"),GBe.forEach(t),UTr=i(Ie),NM=n(Ie,"LI",{});var OBe=s(NM);Eve=n(OBe,"STRONG",{});var Z0t=s(Eve);JTr=r(Z0t,"mbart"),Z0t.forEach(t),YTr=r(OBe," \u2014 "),gU=n(OBe,"A",{href:!0});var ewt=s(gU);KTr=r(ewt,"TFMBartForConditionalGeneration"),ewt.forEach(t),ZTr=r(OBe," (mBART model)"),OBe.forEach(t),e7r=i(Ie),qM=n(Ie,"LI",{});var VBe=s(qM);Cve=n(VBe,"STRONG",{});var owt=s(Cve);o7r=r(owt,"mt5"),owt.forEach(t),r7r=r(VBe," \u2014 "),hU=n(VBe,"A",{href:!0});var rwt=s(hU);t7r=r(rwt,"TFMT5ForConditionalGeneration"),rwt.forEach(t),a7r=r(VBe," (MT5 model)"),VBe.forEach(t),n7r=i(Ie),jM=n(Ie,"LI",{});var XBe=s(jM);wve=n(XBe,"STRONG",{});var twt=s(wve);s7r=r(twt,"pegasus"),twt.forEach(t),l7r=r(XBe," \u2014 "),pU=n(XBe,"A",{href:!0});var awt=s(pU);i7r=r(awt,"TFPegasusForConditionalGeneration"),awt.forEach(t),d7r=r(XBe," (Pegasus model)"),XBe.forEach(t),c7r=i(Ie),DM=n(Ie,"LI",{});var zBe=s(DM);Ave=n(zBe,"STRONG",{});var nwt=s(Ave);f7r=r(nwt,"t5"),nwt.forEach(t),m7r=r(zBe," \u2014 "),_U=n(zBe,"A",{href:!0});var swt=s(_U);g7r=r(swt,"TFT5ForConditionalGeneration"),swt.forEach(t),h7r=r(zBe," (T5 model)"),zBe.forEach(t),Ie.forEach(t),p7r=i(Al),T(GM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),ODe=i(f),lc=n(f,"H2",{class:!0});var HOe=s(lc);OM=n(HOe,"A",{id:!0,class:!0,href:!0});var lwt=s(OM);Lve=n(lwt,"SPAN",{});var iwt=s(Lve);T(a9.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),_7r=i(HOe),yve=n(HOe,"SPAN",{});var dwt=s(yve);u7r=r(dwt,"TFAutoModelForSequenceClassification"),dwt.forEach(t),HOe.forEach(t),VDe=i(f),tr=n(f,"DIV",{class:!0});var Ll=s(tr);T(n9.$$.fragment,Ll),b7r=i(Ll),ic=n(Ll,"P",{});var ioe=s(ic);v7r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uU=n(ioe,"A",{href:!0});var cwt=s(uU);F7r=r(cwt,"from_pretrained()"),cwt.forEach(t),T7r=r(ioe," class method or the "),bU=n(ioe,"A",{href:!0});var fwt=s(bU);M7r=r(fwt,"from_config()"),fwt.forEach(t),E7r=r(ioe,` class
method.`),ioe.forEach(t),C7r=i(Ll),s9=n(Ll,"P",{});var UOe=s(s9);w7r=r(UOe,"This class cannot be instantiated directly using "),xve=n(UOe,"CODE",{});var mwt=s(xve);A7r=r(mwt,"__init__()"),mwt.forEach(t),L7r=r(UOe," (throws an error)."),UOe.forEach(t),y7r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var t6=s(Pt);T(l9.$$.fragment,t6),x7r=i(t6),$ve=n(t6,"P",{});var gwt=s($ve);$7r=r(gwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gwt.forEach(t),k7r=i(t6),dc=n(t6,"P",{});var doe=s(dc);S7r=r(doe,`Note:
Loading a model from its configuration file does `),kve=n(doe,"STRONG",{});var hwt=s(kve);R7r=r(hwt,"not"),hwt.forEach(t),P7r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(doe,"A",{href:!0});var pwt=s(vU);B7r=r(pwt,"from_pretrained()"),pwt.forEach(t),I7r=r(doe," to load the model weights."),doe.forEach(t),N7r=i(t6),T(VM.$$.fragment,t6),t6.forEach(t),q7r=i(Ll),kr=n(Ll,"DIV",{class:!0});var yl=s(kr);T(i9.$$.fragment,yl),j7r=i(yl),Sve=n(yl,"P",{});var _wt=s(Sve);D7r=r(_wt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_wt.forEach(t),G7r=i(yl),nn=n(yl,"P",{});var a6=s(nn);O7r=r(a6,"The model class to instantiate is selected based on the "),Rve=n(a6,"CODE",{});var uwt=s(Rve);V7r=r(uwt,"model_type"),uwt.forEach(t),X7r=r(a6,` property of the config object (either
passed as an argument or loaded from `),Pve=n(a6,"CODE",{});var bwt=s(Pve);z7r=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),W7r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(a6,"CODE",{});var vwt=s(Bve);Q7r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),H7r=r(a6,":"),a6.forEach(t),U7r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);XM=n(ae,"LI",{});var WBe=s(XM);Ive=n(WBe,"STRONG",{});var Fwt=s(Ive);J7r=r(Fwt,"albert"),Fwt.forEach(t),Y7r=r(WBe," \u2014 "),FU=n(WBe,"A",{href:!0});var Twt=s(FU);K7r=r(Twt,"TFAlbertForSequenceClassification"),Twt.forEach(t),Z7r=r(WBe," (ALBERT model)"),WBe.forEach(t),eMr=i(ae),zM=n(ae,"LI",{});var QBe=s(zM);Nve=n(QBe,"STRONG",{});var Mwt=s(Nve);oMr=r(Mwt,"bert"),Mwt.forEach(t),rMr=r(QBe," \u2014 "),TU=n(QBe,"A",{href:!0});var Ewt=s(TU);tMr=r(Ewt,"TFBertForSequenceClassification"),Ewt.forEach(t),aMr=r(QBe," (BERT model)"),QBe.forEach(t),nMr=i(ae),WM=n(ae,"LI",{});var HBe=s(WM);qve=n(HBe,"STRONG",{});var Cwt=s(qve);sMr=r(Cwt,"camembert"),Cwt.forEach(t),lMr=r(HBe," \u2014 "),MU=n(HBe,"A",{href:!0});var wwt=s(MU);iMr=r(wwt,"TFCamembertForSequenceClassification"),wwt.forEach(t),dMr=r(HBe," (CamemBERT model)"),HBe.forEach(t),cMr=i(ae),QM=n(ae,"LI",{});var UBe=s(QM);jve=n(UBe,"STRONG",{});var Awt=s(jve);fMr=r(Awt,"convbert"),Awt.forEach(t),mMr=r(UBe," \u2014 "),EU=n(UBe,"A",{href:!0});var Lwt=s(EU);gMr=r(Lwt,"TFConvBertForSequenceClassification"),Lwt.forEach(t),hMr=r(UBe," (ConvBERT model)"),UBe.forEach(t),pMr=i(ae),HM=n(ae,"LI",{});var JBe=s(HM);Dve=n(JBe,"STRONG",{});var ywt=s(Dve);_Mr=r(ywt,"ctrl"),ywt.forEach(t),uMr=r(JBe," \u2014 "),CU=n(JBe,"A",{href:!0});var xwt=s(CU);bMr=r(xwt,"TFCTRLForSequenceClassification"),xwt.forEach(t),vMr=r(JBe," (CTRL model)"),JBe.forEach(t),FMr=i(ae),UM=n(ae,"LI",{});var YBe=s(UM);Gve=n(YBe,"STRONG",{});var $wt=s(Gve);TMr=r($wt,"deberta"),$wt.forEach(t),MMr=r(YBe," \u2014 "),wU=n(YBe,"A",{href:!0});var kwt=s(wU);EMr=r(kwt,"TFDebertaForSequenceClassification"),kwt.forEach(t),CMr=r(YBe," (DeBERTa model)"),YBe.forEach(t),wMr=i(ae),JM=n(ae,"LI",{});var KBe=s(JM);Ove=n(KBe,"STRONG",{});var Swt=s(Ove);AMr=r(Swt,"deberta-v2"),Swt.forEach(t),LMr=r(KBe," \u2014 "),AU=n(KBe,"A",{href:!0});var Rwt=s(AU);yMr=r(Rwt,"TFDebertaV2ForSequenceClassification"),Rwt.forEach(t),xMr=r(KBe," (DeBERTa-v2 model)"),KBe.forEach(t),$Mr=i(ae),YM=n(ae,"LI",{});var ZBe=s(YM);Vve=n(ZBe,"STRONG",{});var Pwt=s(Vve);kMr=r(Pwt,"distilbert"),Pwt.forEach(t),SMr=r(ZBe," \u2014 "),LU=n(ZBe,"A",{href:!0});var Bwt=s(LU);RMr=r(Bwt,"TFDistilBertForSequenceClassification"),Bwt.forEach(t),PMr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),BMr=i(ae),KM=n(ae,"LI",{});var eIe=s(KM);Xve=n(eIe,"STRONG",{});var Iwt=s(Xve);IMr=r(Iwt,"electra"),Iwt.forEach(t),NMr=r(eIe," \u2014 "),yU=n(eIe,"A",{href:!0});var Nwt=s(yU);qMr=r(Nwt,"TFElectraForSequenceClassification"),Nwt.forEach(t),jMr=r(eIe," (ELECTRA model)"),eIe.forEach(t),DMr=i(ae),ZM=n(ae,"LI",{});var oIe=s(ZM);zve=n(oIe,"STRONG",{});var qwt=s(zve);GMr=r(qwt,"flaubert"),qwt.forEach(t),OMr=r(oIe," \u2014 "),xU=n(oIe,"A",{href:!0});var jwt=s(xU);VMr=r(jwt,"TFFlaubertForSequenceClassification"),jwt.forEach(t),XMr=r(oIe," (FlauBERT model)"),oIe.forEach(t),zMr=i(ae),eE=n(ae,"LI",{});var rIe=s(eE);Wve=n(rIe,"STRONG",{});var Dwt=s(Wve);WMr=r(Dwt,"funnel"),Dwt.forEach(t),QMr=r(rIe," \u2014 "),$U=n(rIe,"A",{href:!0});var Gwt=s($U);HMr=r(Gwt,"TFFunnelForSequenceClassification"),Gwt.forEach(t),UMr=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),JMr=i(ae),oE=n(ae,"LI",{});var tIe=s(oE);Qve=n(tIe,"STRONG",{});var Owt=s(Qve);YMr=r(Owt,"gpt2"),Owt.forEach(t),KMr=r(tIe," \u2014 "),kU=n(tIe,"A",{href:!0});var Vwt=s(kU);ZMr=r(Vwt,"TFGPT2ForSequenceClassification"),Vwt.forEach(t),eEr=r(tIe," (OpenAI GPT-2 model)"),tIe.forEach(t),oEr=i(ae),rE=n(ae,"LI",{});var aIe=s(rE);Hve=n(aIe,"STRONG",{});var Xwt=s(Hve);rEr=r(Xwt,"gptj"),Xwt.forEach(t),tEr=r(aIe," \u2014 "),SU=n(aIe,"A",{href:!0});var zwt=s(SU);aEr=r(zwt,"TFGPTJForSequenceClassification"),zwt.forEach(t),nEr=r(aIe," (GPT-J model)"),aIe.forEach(t),sEr=i(ae),tE=n(ae,"LI",{});var nIe=s(tE);Uve=n(nIe,"STRONG",{});var Wwt=s(Uve);lEr=r(Wwt,"layoutlm"),Wwt.forEach(t),iEr=r(nIe," \u2014 "),RU=n(nIe,"A",{href:!0});var Qwt=s(RU);dEr=r(Qwt,"TFLayoutLMForSequenceClassification"),Qwt.forEach(t),cEr=r(nIe," (LayoutLM model)"),nIe.forEach(t),fEr=i(ae),aE=n(ae,"LI",{});var sIe=s(aE);Jve=n(sIe,"STRONG",{});var Hwt=s(Jve);mEr=r(Hwt,"longformer"),Hwt.forEach(t),gEr=r(sIe," \u2014 "),PU=n(sIe,"A",{href:!0});var Uwt=s(PU);hEr=r(Uwt,"TFLongformerForSequenceClassification"),Uwt.forEach(t),pEr=r(sIe," (Longformer model)"),sIe.forEach(t),_Er=i(ae),nE=n(ae,"LI",{});var lIe=s(nE);Yve=n(lIe,"STRONG",{});var Jwt=s(Yve);uEr=r(Jwt,"mobilebert"),Jwt.forEach(t),bEr=r(lIe," \u2014 "),BU=n(lIe,"A",{href:!0});var Ywt=s(BU);vEr=r(Ywt,"TFMobileBertForSequenceClassification"),Ywt.forEach(t),FEr=r(lIe," (MobileBERT model)"),lIe.forEach(t),TEr=i(ae),sE=n(ae,"LI",{});var iIe=s(sE);Kve=n(iIe,"STRONG",{});var Kwt=s(Kve);MEr=r(Kwt,"mpnet"),Kwt.forEach(t),EEr=r(iIe," \u2014 "),IU=n(iIe,"A",{href:!0});var Zwt=s(IU);CEr=r(Zwt,"TFMPNetForSequenceClassification"),Zwt.forEach(t),wEr=r(iIe," (MPNet model)"),iIe.forEach(t),AEr=i(ae),lE=n(ae,"LI",{});var dIe=s(lE);Zve=n(dIe,"STRONG",{});var eAt=s(Zve);LEr=r(eAt,"openai-gpt"),eAt.forEach(t),yEr=r(dIe," \u2014 "),NU=n(dIe,"A",{href:!0});var oAt=s(NU);xEr=r(oAt,"TFOpenAIGPTForSequenceClassification"),oAt.forEach(t),$Er=r(dIe," (OpenAI GPT model)"),dIe.forEach(t),kEr=i(ae),iE=n(ae,"LI",{});var cIe=s(iE);eFe=n(cIe,"STRONG",{});var rAt=s(eFe);SEr=r(rAt,"rembert"),rAt.forEach(t),REr=r(cIe," \u2014 "),qU=n(cIe,"A",{href:!0});var tAt=s(qU);PEr=r(tAt,"TFRemBertForSequenceClassification"),tAt.forEach(t),BEr=r(cIe," (RemBERT model)"),cIe.forEach(t),IEr=i(ae),dE=n(ae,"LI",{});var fIe=s(dE);oFe=n(fIe,"STRONG",{});var aAt=s(oFe);NEr=r(aAt,"roberta"),aAt.forEach(t),qEr=r(fIe," \u2014 "),jU=n(fIe,"A",{href:!0});var nAt=s(jU);jEr=r(nAt,"TFRobertaForSequenceClassification"),nAt.forEach(t),DEr=r(fIe," (RoBERTa model)"),fIe.forEach(t),GEr=i(ae),cE=n(ae,"LI",{});var mIe=s(cE);rFe=n(mIe,"STRONG",{});var sAt=s(rFe);OEr=r(sAt,"roformer"),sAt.forEach(t),VEr=r(mIe," \u2014 "),DU=n(mIe,"A",{href:!0});var lAt=s(DU);XEr=r(lAt,"TFRoFormerForSequenceClassification"),lAt.forEach(t),zEr=r(mIe," (RoFormer model)"),mIe.forEach(t),WEr=i(ae),fE=n(ae,"LI",{});var gIe=s(fE);tFe=n(gIe,"STRONG",{});var iAt=s(tFe);QEr=r(iAt,"tapas"),iAt.forEach(t),HEr=r(gIe," \u2014 "),GU=n(gIe,"A",{href:!0});var dAt=s(GU);UEr=r(dAt,"TFTapasForSequenceClassification"),dAt.forEach(t),JEr=r(gIe," (TAPAS model)"),gIe.forEach(t),YEr=i(ae),mE=n(ae,"LI",{});var hIe=s(mE);aFe=n(hIe,"STRONG",{});var cAt=s(aFe);KEr=r(cAt,"transfo-xl"),cAt.forEach(t),ZEr=r(hIe," \u2014 "),OU=n(hIe,"A",{href:!0});var fAt=s(OU);eCr=r(fAt,"TFTransfoXLForSequenceClassification"),fAt.forEach(t),oCr=r(hIe," (Transformer-XL model)"),hIe.forEach(t),rCr=i(ae),gE=n(ae,"LI",{});var pIe=s(gE);nFe=n(pIe,"STRONG",{});var mAt=s(nFe);tCr=r(mAt,"xlm"),mAt.forEach(t),aCr=r(pIe," \u2014 "),VU=n(pIe,"A",{href:!0});var gAt=s(VU);nCr=r(gAt,"TFXLMForSequenceClassification"),gAt.forEach(t),sCr=r(pIe," (XLM model)"),pIe.forEach(t),lCr=i(ae),hE=n(ae,"LI",{});var _Ie=s(hE);sFe=n(_Ie,"STRONG",{});var hAt=s(sFe);iCr=r(hAt,"xlm-roberta"),hAt.forEach(t),dCr=r(_Ie," \u2014 "),XU=n(_Ie,"A",{href:!0});var pAt=s(XU);cCr=r(pAt,"TFXLMRobertaForSequenceClassification"),pAt.forEach(t),fCr=r(_Ie," (XLM-RoBERTa model)"),_Ie.forEach(t),mCr=i(ae),pE=n(ae,"LI",{});var uIe=s(pE);lFe=n(uIe,"STRONG",{});var _At=s(lFe);gCr=r(_At,"xlnet"),_At.forEach(t),hCr=r(uIe," \u2014 "),zU=n(uIe,"A",{href:!0});var uAt=s(zU);pCr=r(uAt,"TFXLNetForSequenceClassification"),uAt.forEach(t),_Cr=r(uIe," (XLNet model)"),uIe.forEach(t),ae.forEach(t),uCr=i(yl),T(_E.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),XDe=i(f),cc=n(f,"H2",{class:!0});var JOe=s(cc);uE=n(JOe,"A",{id:!0,class:!0,href:!0});var bAt=s(uE);iFe=n(bAt,"SPAN",{});var vAt=s(iFe);T(d9.$$.fragment,vAt),vAt.forEach(t),bAt.forEach(t),bCr=i(JOe),dFe=n(JOe,"SPAN",{});var FAt=s(dFe);vCr=r(FAt,"TFAutoModelForMultipleChoice"),FAt.forEach(t),JOe.forEach(t),zDe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(c9.$$.fragment,xl),FCr=i(xl),fc=n(xl,"P",{});var coe=s(fc);TCr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WU=n(coe,"A",{href:!0});var TAt=s(WU);MCr=r(TAt,"from_pretrained()"),TAt.forEach(t),ECr=r(coe," class method or the "),QU=n(coe,"A",{href:!0});var MAt=s(QU);CCr=r(MAt,"from_config()"),MAt.forEach(t),wCr=r(coe,` class
method.`),coe.forEach(t),ACr=i(xl),f9=n(xl,"P",{});var YOe=s(f9);LCr=r(YOe,"This class cannot be instantiated directly using "),cFe=n(YOe,"CODE",{});var EAt=s(cFe);yCr=r(EAt,"__init__()"),EAt.forEach(t),xCr=r(YOe," (throws an error)."),YOe.forEach(t),$Cr=i(xl),Bt=n(xl,"DIV",{class:!0});var n6=s(Bt);T(m9.$$.fragment,n6),kCr=i(n6),fFe=n(n6,"P",{});var CAt=s(fFe);SCr=r(CAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CAt.forEach(t),RCr=i(n6),mc=n(n6,"P",{});var foe=s(mc);PCr=r(foe,`Note:
Loading a model from its configuration file does `),mFe=n(foe,"STRONG",{});var wAt=s(mFe);BCr=r(wAt,"not"),wAt.forEach(t),ICr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=n(foe,"A",{href:!0});var AAt=s(HU);NCr=r(AAt,"from_pretrained()"),AAt.forEach(t),qCr=r(foe," to load the model weights."),foe.forEach(t),jCr=i(n6),T(bE.$$.fragment,n6),n6.forEach(t),DCr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(g9.$$.fragment,$l),GCr=i($l),gFe=n($l,"P",{});var LAt=s(gFe);OCr=r(LAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LAt.forEach(t),VCr=i($l),sn=n($l,"P",{});var s6=s(sn);XCr=r(s6,"The model class to instantiate is selected based on the "),hFe=n(s6,"CODE",{});var yAt=s(hFe);zCr=r(yAt,"model_type"),yAt.forEach(t),WCr=r(s6,` property of the config object (either
passed as an argument or loaded from `),pFe=n(s6,"CODE",{});var xAt=s(pFe);QCr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),HCr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(s6,"CODE",{});var $At=s(_Fe);UCr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),JCr=r(s6,":"),s6.forEach(t),YCr=i($l),pe=n($l,"UL",{});var be=s(pe);vE=n(be,"LI",{});var bIe=s(vE);uFe=n(bIe,"STRONG",{});var kAt=s(uFe);KCr=r(kAt,"albert"),kAt.forEach(t),ZCr=r(bIe," \u2014 "),UU=n(bIe,"A",{href:!0});var SAt=s(UU);e3r=r(SAt,"TFAlbertForMultipleChoice"),SAt.forEach(t),o3r=r(bIe," (ALBERT model)"),bIe.forEach(t),r3r=i(be),FE=n(be,"LI",{});var vIe=s(FE);bFe=n(vIe,"STRONG",{});var RAt=s(bFe);t3r=r(RAt,"bert"),RAt.forEach(t),a3r=r(vIe," \u2014 "),JU=n(vIe,"A",{href:!0});var PAt=s(JU);n3r=r(PAt,"TFBertForMultipleChoice"),PAt.forEach(t),s3r=r(vIe," (BERT model)"),vIe.forEach(t),l3r=i(be),TE=n(be,"LI",{});var FIe=s(TE);vFe=n(FIe,"STRONG",{});var BAt=s(vFe);i3r=r(BAt,"camembert"),BAt.forEach(t),d3r=r(FIe," \u2014 "),YU=n(FIe,"A",{href:!0});var IAt=s(YU);c3r=r(IAt,"TFCamembertForMultipleChoice"),IAt.forEach(t),f3r=r(FIe," (CamemBERT model)"),FIe.forEach(t),m3r=i(be),ME=n(be,"LI",{});var TIe=s(ME);FFe=n(TIe,"STRONG",{});var NAt=s(FFe);g3r=r(NAt,"convbert"),NAt.forEach(t),h3r=r(TIe," \u2014 "),KU=n(TIe,"A",{href:!0});var qAt=s(KU);p3r=r(qAt,"TFConvBertForMultipleChoice"),qAt.forEach(t),_3r=r(TIe," (ConvBERT model)"),TIe.forEach(t),u3r=i(be),EE=n(be,"LI",{});var MIe=s(EE);TFe=n(MIe,"STRONG",{});var jAt=s(TFe);b3r=r(jAt,"distilbert"),jAt.forEach(t),v3r=r(MIe," \u2014 "),ZU=n(MIe,"A",{href:!0});var DAt=s(ZU);F3r=r(DAt,"TFDistilBertForMultipleChoice"),DAt.forEach(t),T3r=r(MIe," (DistilBERT model)"),MIe.forEach(t),M3r=i(be),CE=n(be,"LI",{});var EIe=s(CE);MFe=n(EIe,"STRONG",{});var GAt=s(MFe);E3r=r(GAt,"electra"),GAt.forEach(t),C3r=r(EIe," \u2014 "),eJ=n(EIe,"A",{href:!0});var OAt=s(eJ);w3r=r(OAt,"TFElectraForMultipleChoice"),OAt.forEach(t),A3r=r(EIe," (ELECTRA model)"),EIe.forEach(t),L3r=i(be),wE=n(be,"LI",{});var CIe=s(wE);EFe=n(CIe,"STRONG",{});var VAt=s(EFe);y3r=r(VAt,"flaubert"),VAt.forEach(t),x3r=r(CIe," \u2014 "),oJ=n(CIe,"A",{href:!0});var XAt=s(oJ);$3r=r(XAt,"TFFlaubertForMultipleChoice"),XAt.forEach(t),k3r=r(CIe," (FlauBERT model)"),CIe.forEach(t),S3r=i(be),AE=n(be,"LI",{});var wIe=s(AE);CFe=n(wIe,"STRONG",{});var zAt=s(CFe);R3r=r(zAt,"funnel"),zAt.forEach(t),P3r=r(wIe," \u2014 "),rJ=n(wIe,"A",{href:!0});var WAt=s(rJ);B3r=r(WAt,"TFFunnelForMultipleChoice"),WAt.forEach(t),I3r=r(wIe," (Funnel Transformer model)"),wIe.forEach(t),N3r=i(be),LE=n(be,"LI",{});var AIe=s(LE);wFe=n(AIe,"STRONG",{});var QAt=s(wFe);q3r=r(QAt,"longformer"),QAt.forEach(t),j3r=r(AIe," \u2014 "),tJ=n(AIe,"A",{href:!0});var HAt=s(tJ);D3r=r(HAt,"TFLongformerForMultipleChoice"),HAt.forEach(t),G3r=r(AIe," (Longformer model)"),AIe.forEach(t),O3r=i(be),yE=n(be,"LI",{});var LIe=s(yE);AFe=n(LIe,"STRONG",{});var UAt=s(AFe);V3r=r(UAt,"mobilebert"),UAt.forEach(t),X3r=r(LIe," \u2014 "),aJ=n(LIe,"A",{href:!0});var JAt=s(aJ);z3r=r(JAt,"TFMobileBertForMultipleChoice"),JAt.forEach(t),W3r=r(LIe," (MobileBERT model)"),LIe.forEach(t),Q3r=i(be),xE=n(be,"LI",{});var yIe=s(xE);LFe=n(yIe,"STRONG",{});var YAt=s(LFe);H3r=r(YAt,"mpnet"),YAt.forEach(t),U3r=r(yIe," \u2014 "),nJ=n(yIe,"A",{href:!0});var KAt=s(nJ);J3r=r(KAt,"TFMPNetForMultipleChoice"),KAt.forEach(t),Y3r=r(yIe," (MPNet model)"),yIe.forEach(t),K3r=i(be),$E=n(be,"LI",{});var xIe=s($E);yFe=n(xIe,"STRONG",{});var ZAt=s(yFe);Z3r=r(ZAt,"rembert"),ZAt.forEach(t),e0r=r(xIe," \u2014 "),sJ=n(xIe,"A",{href:!0});var e6t=s(sJ);o0r=r(e6t,"TFRemBertForMultipleChoice"),e6t.forEach(t),r0r=r(xIe," (RemBERT model)"),xIe.forEach(t),t0r=i(be),kE=n(be,"LI",{});var $Ie=s(kE);xFe=n($Ie,"STRONG",{});var o6t=s(xFe);a0r=r(o6t,"roberta"),o6t.forEach(t),n0r=r($Ie," \u2014 "),lJ=n($Ie,"A",{href:!0});var r6t=s(lJ);s0r=r(r6t,"TFRobertaForMultipleChoice"),r6t.forEach(t),l0r=r($Ie," (RoBERTa model)"),$Ie.forEach(t),i0r=i(be),SE=n(be,"LI",{});var kIe=s(SE);$Fe=n(kIe,"STRONG",{});var t6t=s($Fe);d0r=r(t6t,"roformer"),t6t.forEach(t),c0r=r(kIe," \u2014 "),iJ=n(kIe,"A",{href:!0});var a6t=s(iJ);f0r=r(a6t,"TFRoFormerForMultipleChoice"),a6t.forEach(t),m0r=r(kIe," (RoFormer model)"),kIe.forEach(t),g0r=i(be),RE=n(be,"LI",{});var SIe=s(RE);kFe=n(SIe,"STRONG",{});var n6t=s(kFe);h0r=r(n6t,"xlm"),n6t.forEach(t),p0r=r(SIe," \u2014 "),dJ=n(SIe,"A",{href:!0});var s6t=s(dJ);_0r=r(s6t,"TFXLMForMultipleChoice"),s6t.forEach(t),u0r=r(SIe," (XLM model)"),SIe.forEach(t),b0r=i(be),PE=n(be,"LI",{});var RIe=s(PE);SFe=n(RIe,"STRONG",{});var l6t=s(SFe);v0r=r(l6t,"xlm-roberta"),l6t.forEach(t),F0r=r(RIe," \u2014 "),cJ=n(RIe,"A",{href:!0});var i6t=s(cJ);T0r=r(i6t,"TFXLMRobertaForMultipleChoice"),i6t.forEach(t),M0r=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),E0r=i(be),BE=n(be,"LI",{});var PIe=s(BE);RFe=n(PIe,"STRONG",{});var d6t=s(RFe);C0r=r(d6t,"xlnet"),d6t.forEach(t),w0r=r(PIe," \u2014 "),fJ=n(PIe,"A",{href:!0});var c6t=s(fJ);A0r=r(c6t,"TFXLNetForMultipleChoice"),c6t.forEach(t),L0r=r(PIe," (XLNet model)"),PIe.forEach(t),be.forEach(t),y0r=i($l),T(IE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),WDe=i(f),gc=n(f,"H2",{class:!0});var KOe=s(gc);NE=n(KOe,"A",{id:!0,class:!0,href:!0});var f6t=s(NE);PFe=n(f6t,"SPAN",{});var m6t=s(PFe);T(h9.$$.fragment,m6t),m6t.forEach(t),f6t.forEach(t),x0r=i(KOe),BFe=n(KOe,"SPAN",{});var g6t=s(BFe);$0r=r(g6t,"TFAutoModelForNextSentencePrediction"),g6t.forEach(t),KOe.forEach(t),QDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(p9.$$.fragment,kl),k0r=i(kl),hc=n(kl,"P",{});var moe=s(hc);S0r=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mJ=n(moe,"A",{href:!0});var h6t=s(mJ);R0r=r(h6t,"from_pretrained()"),h6t.forEach(t),P0r=r(moe," class method or the "),gJ=n(moe,"A",{href:!0});var p6t=s(gJ);B0r=r(p6t,"from_config()"),p6t.forEach(t),I0r=r(moe,` class
method.`),moe.forEach(t),N0r=i(kl),_9=n(kl,"P",{});var ZOe=s(_9);q0r=r(ZOe,"This class cannot be instantiated directly using "),IFe=n(ZOe,"CODE",{});var _6t=s(IFe);j0r=r(_6t,"__init__()"),_6t.forEach(t),D0r=r(ZOe," (throws an error)."),ZOe.forEach(t),G0r=i(kl),It=n(kl,"DIV",{class:!0});var l6=s(It);T(u9.$$.fragment,l6),O0r=i(l6),NFe=n(l6,"P",{});var u6t=s(NFe);V0r=r(u6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u6t.forEach(t),X0r=i(l6),pc=n(l6,"P",{});var goe=s(pc);z0r=r(goe,`Note:
Loading a model from its configuration file does `),qFe=n(goe,"STRONG",{});var b6t=s(qFe);W0r=r(b6t,"not"),b6t.forEach(t),Q0r=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(goe,"A",{href:!0});var v6t=s(hJ);H0r=r(v6t,"from_pretrained()"),v6t.forEach(t),U0r=r(goe," to load the model weights."),goe.forEach(t),J0r=i(l6),T(qE.$$.fragment,l6),l6.forEach(t),Y0r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(b9.$$.fragment,Sl),K0r=i(Sl),jFe=n(Sl,"P",{});var F6t=s(jFe);Z0r=r(F6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F6t.forEach(t),ewr=i(Sl),ln=n(Sl,"P",{});var i6=s(ln);owr=r(i6,"The model class to instantiate is selected based on the "),DFe=n(i6,"CODE",{});var T6t=s(DFe);rwr=r(T6t,"model_type"),T6t.forEach(t),twr=r(i6,` property of the config object (either
passed as an argument or loaded from `),GFe=n(i6,"CODE",{});var M6t=s(GFe);awr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),nwr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(i6,"CODE",{});var E6t=s(OFe);swr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),lwr=r(i6,":"),i6.forEach(t),iwr=i(Sl),v9=n(Sl,"UL",{});var eVe=s(v9);jE=n(eVe,"LI",{});var BIe=s(jE);VFe=n(BIe,"STRONG",{});var C6t=s(VFe);dwr=r(C6t,"bert"),C6t.forEach(t),cwr=r(BIe," \u2014 "),pJ=n(BIe,"A",{href:!0});var w6t=s(pJ);fwr=r(w6t,"TFBertForNextSentencePrediction"),w6t.forEach(t),mwr=r(BIe," (BERT model)"),BIe.forEach(t),gwr=i(eVe),DE=n(eVe,"LI",{});var IIe=s(DE);XFe=n(IIe,"STRONG",{});var A6t=s(XFe);hwr=r(A6t,"mobilebert"),A6t.forEach(t),pwr=r(IIe," \u2014 "),_J=n(IIe,"A",{href:!0});var L6t=s(_J);_wr=r(L6t,"TFMobileBertForNextSentencePrediction"),L6t.forEach(t),uwr=r(IIe," (MobileBERT model)"),IIe.forEach(t),eVe.forEach(t),bwr=i(Sl),T(GE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),HDe=i(f),_c=n(f,"H2",{class:!0});var oVe=s(_c);OE=n(oVe,"A",{id:!0,class:!0,href:!0});var y6t=s(OE);zFe=n(y6t,"SPAN",{});var x6t=s(zFe);T(F9.$$.fragment,x6t),x6t.forEach(t),y6t.forEach(t),vwr=i(oVe),WFe=n(oVe,"SPAN",{});var $6t=s(WFe);Fwr=r($6t,"TFAutoModelForTableQuestionAnswering"),$6t.forEach(t),oVe.forEach(t),UDe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(T9.$$.fragment,Rl),Twr=i(Rl),uc=n(Rl,"P",{});var hoe=s(uc);Mwr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uJ=n(hoe,"A",{href:!0});var k6t=s(uJ);Ewr=r(k6t,"from_pretrained()"),k6t.forEach(t),Cwr=r(hoe," class method or the "),bJ=n(hoe,"A",{href:!0});var S6t=s(bJ);wwr=r(S6t,"from_config()"),S6t.forEach(t),Awr=r(hoe,` class
method.`),hoe.forEach(t),Lwr=i(Rl),M9=n(Rl,"P",{});var rVe=s(M9);ywr=r(rVe,"This class cannot be instantiated directly using "),QFe=n(rVe,"CODE",{});var R6t=s(QFe);xwr=r(R6t,"__init__()"),R6t.forEach(t),$wr=r(rVe," (throws an error)."),rVe.forEach(t),kwr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var d6=s(Nt);T(E9.$$.fragment,d6),Swr=i(d6),HFe=n(d6,"P",{});var P6t=s(HFe);Rwr=r(P6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P6t.forEach(t),Pwr=i(d6),bc=n(d6,"P",{});var poe=s(bc);Bwr=r(poe,`Note:
Loading a model from its configuration file does `),UFe=n(poe,"STRONG",{});var B6t=s(UFe);Iwr=r(B6t,"not"),B6t.forEach(t),Nwr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(poe,"A",{href:!0});var I6t=s(vJ);qwr=r(I6t,"from_pretrained()"),I6t.forEach(t),jwr=r(poe," to load the model weights."),poe.forEach(t),Dwr=i(d6),T(VE.$$.fragment,d6),d6.forEach(t),Gwr=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(C9.$$.fragment,Pl),Owr=i(Pl),JFe=n(Pl,"P",{});var N6t=s(JFe);Vwr=r(N6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),N6t.forEach(t),Xwr=i(Pl),dn=n(Pl,"P",{});var c6=s(dn);zwr=r(c6,"The model class to instantiate is selected based on the "),YFe=n(c6,"CODE",{});var q6t=s(YFe);Wwr=r(q6t,"model_type"),q6t.forEach(t),Qwr=r(c6,` property of the config object (either
passed as an argument or loaded from `),KFe=n(c6,"CODE",{});var j6t=s(KFe);Hwr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),Uwr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(c6,"CODE",{});var D6t=s(ZFe);Jwr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),Ywr=r(c6,":"),c6.forEach(t),Kwr=i(Pl),eTe=n(Pl,"UL",{});var G6t=s(eTe);XE=n(G6t,"LI",{});var NIe=s(XE);oTe=n(NIe,"STRONG",{});var O6t=s(oTe);Zwr=r(O6t,"tapas"),O6t.forEach(t),eAr=r(NIe," \u2014 "),FJ=n(NIe,"A",{href:!0});var V6t=s(FJ);oAr=r(V6t,"TFTapasForQuestionAnswering"),V6t.forEach(t),rAr=r(NIe," (TAPAS model)"),NIe.forEach(t),G6t.forEach(t),tAr=i(Pl),T(zE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),JDe=i(f),vc=n(f,"H2",{class:!0});var tVe=s(vc);WE=n(tVe,"A",{id:!0,class:!0,href:!0});var X6t=s(WE);rTe=n(X6t,"SPAN",{});var z6t=s(rTe);T(w9.$$.fragment,z6t),z6t.forEach(t),X6t.forEach(t),aAr=i(tVe),tTe=n(tVe,"SPAN",{});var W6t=s(tTe);nAr=r(W6t,"TFAutoModelForTokenClassification"),W6t.forEach(t),tVe.forEach(t),YDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(A9.$$.fragment,Bl),sAr=i(Bl),Fc=n(Bl,"P",{});var _oe=s(Fc);lAr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=n(_oe,"A",{href:!0});var Q6t=s(TJ);iAr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),dAr=r(_oe," class method or the "),MJ=n(_oe,"A",{href:!0});var H6t=s(MJ);cAr=r(H6t,"from_config()"),H6t.forEach(t),fAr=r(_oe,` class
method.`),_oe.forEach(t),mAr=i(Bl),L9=n(Bl,"P",{});var aVe=s(L9);gAr=r(aVe,"This class cannot be instantiated directly using "),aTe=n(aVe,"CODE",{});var U6t=s(aTe);hAr=r(U6t,"__init__()"),U6t.forEach(t),pAr=r(aVe," (throws an error)."),aVe.forEach(t),_Ar=i(Bl),qt=n(Bl,"DIV",{class:!0});var f6=s(qt);T(y9.$$.fragment,f6),uAr=i(f6),nTe=n(f6,"P",{});var J6t=s(nTe);bAr=r(J6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J6t.forEach(t),vAr=i(f6),Tc=n(f6,"P",{});var uoe=s(Tc);FAr=r(uoe,`Note:
Loading a model from its configuration file does `),sTe=n(uoe,"STRONG",{});var Y6t=s(sTe);TAr=r(Y6t,"not"),Y6t.forEach(t),MAr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(uoe,"A",{href:!0});var K6t=s(EJ);EAr=r(K6t,"from_pretrained()"),K6t.forEach(t),CAr=r(uoe," to load the model weights."),uoe.forEach(t),wAr=i(f6),T(QE.$$.fragment,f6),f6.forEach(t),AAr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(x9.$$.fragment,Il),LAr=i(Il),lTe=n(Il,"P",{});var Z6t=s(lTe);yAr=r(Z6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z6t.forEach(t),xAr=i(Il),cn=n(Il,"P",{});var m6=s(cn);$Ar=r(m6,"The model class to instantiate is selected based on the "),iTe=n(m6,"CODE",{});var eLt=s(iTe);kAr=r(eLt,"model_type"),eLt.forEach(t),SAr=r(m6,` property of the config object (either
passed as an argument or loaded from `),dTe=n(m6,"CODE",{});var oLt=s(dTe);RAr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),PAr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(m6,"CODE",{});var rLt=s(cTe);BAr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),IAr=r(m6,":"),m6.forEach(t),NAr=i(Il),de=n(Il,"UL",{});var me=s(de);HE=n(me,"LI",{});var qIe=s(HE);fTe=n(qIe,"STRONG",{});var tLt=s(fTe);qAr=r(tLt,"albert"),tLt.forEach(t),jAr=r(qIe," \u2014 "),CJ=n(qIe,"A",{href:!0});var aLt=s(CJ);DAr=r(aLt,"TFAlbertForTokenClassification"),aLt.forEach(t),GAr=r(qIe," (ALBERT model)"),qIe.forEach(t),OAr=i(me),UE=n(me,"LI",{});var jIe=s(UE);mTe=n(jIe,"STRONG",{});var nLt=s(mTe);VAr=r(nLt,"bert"),nLt.forEach(t),XAr=r(jIe," \u2014 "),wJ=n(jIe,"A",{href:!0});var sLt=s(wJ);zAr=r(sLt,"TFBertForTokenClassification"),sLt.forEach(t),WAr=r(jIe," (BERT model)"),jIe.forEach(t),QAr=i(me),JE=n(me,"LI",{});var DIe=s(JE);gTe=n(DIe,"STRONG",{});var lLt=s(gTe);HAr=r(lLt,"camembert"),lLt.forEach(t),UAr=r(DIe," \u2014 "),AJ=n(DIe,"A",{href:!0});var iLt=s(AJ);JAr=r(iLt,"TFCamembertForTokenClassification"),iLt.forEach(t),YAr=r(DIe," (CamemBERT model)"),DIe.forEach(t),KAr=i(me),YE=n(me,"LI",{});var GIe=s(YE);hTe=n(GIe,"STRONG",{});var dLt=s(hTe);ZAr=r(dLt,"convbert"),dLt.forEach(t),e6r=r(GIe," \u2014 "),LJ=n(GIe,"A",{href:!0});var cLt=s(LJ);o6r=r(cLt,"TFConvBertForTokenClassification"),cLt.forEach(t),r6r=r(GIe," (ConvBERT model)"),GIe.forEach(t),t6r=i(me),KE=n(me,"LI",{});var OIe=s(KE);pTe=n(OIe,"STRONG",{});var fLt=s(pTe);a6r=r(fLt,"deberta"),fLt.forEach(t),n6r=r(OIe," \u2014 "),yJ=n(OIe,"A",{href:!0});var mLt=s(yJ);s6r=r(mLt,"TFDebertaForTokenClassification"),mLt.forEach(t),l6r=r(OIe," (DeBERTa model)"),OIe.forEach(t),i6r=i(me),ZE=n(me,"LI",{});var VIe=s(ZE);_Te=n(VIe,"STRONG",{});var gLt=s(_Te);d6r=r(gLt,"deberta-v2"),gLt.forEach(t),c6r=r(VIe," \u2014 "),xJ=n(VIe,"A",{href:!0});var hLt=s(xJ);f6r=r(hLt,"TFDebertaV2ForTokenClassification"),hLt.forEach(t),m6r=r(VIe," (DeBERTa-v2 model)"),VIe.forEach(t),g6r=i(me),eC=n(me,"LI",{});var XIe=s(eC);uTe=n(XIe,"STRONG",{});var pLt=s(uTe);h6r=r(pLt,"distilbert"),pLt.forEach(t),p6r=r(XIe," \u2014 "),$J=n(XIe,"A",{href:!0});var _Lt=s($J);_6r=r(_Lt,"TFDistilBertForTokenClassification"),_Lt.forEach(t),u6r=r(XIe," (DistilBERT model)"),XIe.forEach(t),b6r=i(me),oC=n(me,"LI",{});var zIe=s(oC);bTe=n(zIe,"STRONG",{});var uLt=s(bTe);v6r=r(uLt,"electra"),uLt.forEach(t),F6r=r(zIe," \u2014 "),kJ=n(zIe,"A",{href:!0});var bLt=s(kJ);T6r=r(bLt,"TFElectraForTokenClassification"),bLt.forEach(t),M6r=r(zIe," (ELECTRA model)"),zIe.forEach(t),E6r=i(me),rC=n(me,"LI",{});var WIe=s(rC);vTe=n(WIe,"STRONG",{});var vLt=s(vTe);C6r=r(vLt,"flaubert"),vLt.forEach(t),w6r=r(WIe," \u2014 "),SJ=n(WIe,"A",{href:!0});var FLt=s(SJ);A6r=r(FLt,"TFFlaubertForTokenClassification"),FLt.forEach(t),L6r=r(WIe," (FlauBERT model)"),WIe.forEach(t),y6r=i(me),tC=n(me,"LI",{});var QIe=s(tC);FTe=n(QIe,"STRONG",{});var TLt=s(FTe);x6r=r(TLt,"funnel"),TLt.forEach(t),$6r=r(QIe," \u2014 "),RJ=n(QIe,"A",{href:!0});var MLt=s(RJ);k6r=r(MLt,"TFFunnelForTokenClassification"),MLt.forEach(t),S6r=r(QIe," (Funnel Transformer model)"),QIe.forEach(t),R6r=i(me),aC=n(me,"LI",{});var HIe=s(aC);TTe=n(HIe,"STRONG",{});var ELt=s(TTe);P6r=r(ELt,"layoutlm"),ELt.forEach(t),B6r=r(HIe," \u2014 "),PJ=n(HIe,"A",{href:!0});var CLt=s(PJ);I6r=r(CLt,"TFLayoutLMForTokenClassification"),CLt.forEach(t),N6r=r(HIe," (LayoutLM model)"),HIe.forEach(t),q6r=i(me),nC=n(me,"LI",{});var UIe=s(nC);MTe=n(UIe,"STRONG",{});var wLt=s(MTe);j6r=r(wLt,"longformer"),wLt.forEach(t),D6r=r(UIe," \u2014 "),BJ=n(UIe,"A",{href:!0});var ALt=s(BJ);G6r=r(ALt,"TFLongformerForTokenClassification"),ALt.forEach(t),O6r=r(UIe," (Longformer model)"),UIe.forEach(t),V6r=i(me),sC=n(me,"LI",{});var JIe=s(sC);ETe=n(JIe,"STRONG",{});var LLt=s(ETe);X6r=r(LLt,"mobilebert"),LLt.forEach(t),z6r=r(JIe," \u2014 "),IJ=n(JIe,"A",{href:!0});var yLt=s(IJ);W6r=r(yLt,"TFMobileBertForTokenClassification"),yLt.forEach(t),Q6r=r(JIe," (MobileBERT model)"),JIe.forEach(t),H6r=i(me),lC=n(me,"LI",{});var YIe=s(lC);CTe=n(YIe,"STRONG",{});var xLt=s(CTe);U6r=r(xLt,"mpnet"),xLt.forEach(t),J6r=r(YIe," \u2014 "),NJ=n(YIe,"A",{href:!0});var $Lt=s(NJ);Y6r=r($Lt,"TFMPNetForTokenClassification"),$Lt.forEach(t),K6r=r(YIe," (MPNet model)"),YIe.forEach(t),Z6r=i(me),iC=n(me,"LI",{});var KIe=s(iC);wTe=n(KIe,"STRONG",{});var kLt=s(wTe);eLr=r(kLt,"rembert"),kLt.forEach(t),oLr=r(KIe," \u2014 "),qJ=n(KIe,"A",{href:!0});var SLt=s(qJ);rLr=r(SLt,"TFRemBertForTokenClassification"),SLt.forEach(t),tLr=r(KIe," (RemBERT model)"),KIe.forEach(t),aLr=i(me),dC=n(me,"LI",{});var ZIe=s(dC);ATe=n(ZIe,"STRONG",{});var RLt=s(ATe);nLr=r(RLt,"roberta"),RLt.forEach(t),sLr=r(ZIe," \u2014 "),jJ=n(ZIe,"A",{href:!0});var PLt=s(jJ);lLr=r(PLt,"TFRobertaForTokenClassification"),PLt.forEach(t),iLr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),dLr=i(me),cC=n(me,"LI",{});var eNe=s(cC);LTe=n(eNe,"STRONG",{});var BLt=s(LTe);cLr=r(BLt,"roformer"),BLt.forEach(t),fLr=r(eNe," \u2014 "),DJ=n(eNe,"A",{href:!0});var ILt=s(DJ);mLr=r(ILt,"TFRoFormerForTokenClassification"),ILt.forEach(t),gLr=r(eNe," (RoFormer model)"),eNe.forEach(t),hLr=i(me),fC=n(me,"LI",{});var oNe=s(fC);yTe=n(oNe,"STRONG",{});var NLt=s(yTe);pLr=r(NLt,"xlm"),NLt.forEach(t),_Lr=r(oNe," \u2014 "),GJ=n(oNe,"A",{href:!0});var qLt=s(GJ);uLr=r(qLt,"TFXLMForTokenClassification"),qLt.forEach(t),bLr=r(oNe," (XLM model)"),oNe.forEach(t),vLr=i(me),mC=n(me,"LI",{});var rNe=s(mC);xTe=n(rNe,"STRONG",{});var jLt=s(xTe);FLr=r(jLt,"xlm-roberta"),jLt.forEach(t),TLr=r(rNe," \u2014 "),OJ=n(rNe,"A",{href:!0});var DLt=s(OJ);MLr=r(DLt,"TFXLMRobertaForTokenClassification"),DLt.forEach(t),ELr=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),CLr=i(me),gC=n(me,"LI",{});var tNe=s(gC);$Te=n(tNe,"STRONG",{});var GLt=s($Te);wLr=r(GLt,"xlnet"),GLt.forEach(t),ALr=r(tNe," \u2014 "),VJ=n(tNe,"A",{href:!0});var OLt=s(VJ);LLr=r(OLt,"TFXLNetForTokenClassification"),OLt.forEach(t),yLr=r(tNe," (XLNet model)"),tNe.forEach(t),me.forEach(t),xLr=i(Il),T(hC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),KDe=i(f),Mc=n(f,"H2",{class:!0});var nVe=s(Mc);pC=n(nVe,"A",{id:!0,class:!0,href:!0});var VLt=s(pC);kTe=n(VLt,"SPAN",{});var XLt=s(kTe);T($9.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),$Lr=i(nVe),STe=n(nVe,"SPAN",{});var zLt=s(STe);kLr=r(zLt,"TFAutoModelForQuestionAnswering"),zLt.forEach(t),nVe.forEach(t),ZDe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(k9.$$.fragment,Nl),SLr=i(Nl),Ec=n(Nl,"P",{});var boe=s(Ec);RLr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XJ=n(boe,"A",{href:!0});var WLt=s(XJ);PLr=r(WLt,"from_pretrained()"),WLt.forEach(t),BLr=r(boe," class method or the "),zJ=n(boe,"A",{href:!0});var QLt=s(zJ);ILr=r(QLt,"from_config()"),QLt.forEach(t),NLr=r(boe,` class
method.`),boe.forEach(t),qLr=i(Nl),S9=n(Nl,"P",{});var sVe=s(S9);jLr=r(sVe,"This class cannot be instantiated directly using "),RTe=n(sVe,"CODE",{});var HLt=s(RTe);DLr=r(HLt,"__init__()"),HLt.forEach(t),GLr=r(sVe," (throws an error)."),sVe.forEach(t),OLr=i(Nl),jt=n(Nl,"DIV",{class:!0});var g6=s(jt);T(R9.$$.fragment,g6),VLr=i(g6),PTe=n(g6,"P",{});var ULt=s(PTe);XLr=r(ULt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ULt.forEach(t),zLr=i(g6),Cc=n(g6,"P",{});var voe=s(Cc);WLr=r(voe,`Note:
Loading a model from its configuration file does `),BTe=n(voe,"STRONG",{});var JLt=s(BTe);QLr=r(JLt,"not"),JLt.forEach(t),HLr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(voe,"A",{href:!0});var YLt=s(WJ);ULr=r(YLt,"from_pretrained()"),YLt.forEach(t),JLr=r(voe," to load the model weights."),voe.forEach(t),YLr=i(g6),T(_C.$$.fragment,g6),g6.forEach(t),KLr=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(P9.$$.fragment,ql),ZLr=i(ql),ITe=n(ql,"P",{});var KLt=s(ITe);eyr=r(KLt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KLt.forEach(t),oyr=i(ql),fn=n(ql,"P",{});var h6=s(fn);ryr=r(h6,"The model class to instantiate is selected based on the "),NTe=n(h6,"CODE",{});var ZLt=s(NTe);tyr=r(ZLt,"model_type"),ZLt.forEach(t),ayr=r(h6,` property of the config object (either
passed as an argument or loaded from `),qTe=n(h6,"CODE",{});var eyt=s(qTe);nyr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),syr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(h6,"CODE",{});var oyt=s(jTe);lyr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),iyr=r(h6,":"),h6.forEach(t),dyr=i(ql),ce=n(ql,"UL",{});var ge=s(ce);uC=n(ge,"LI",{});var aNe=s(uC);DTe=n(aNe,"STRONG",{});var ryt=s(DTe);cyr=r(ryt,"albert"),ryt.forEach(t),fyr=r(aNe," \u2014 "),QJ=n(aNe,"A",{href:!0});var tyt=s(QJ);myr=r(tyt,"TFAlbertForQuestionAnswering"),tyt.forEach(t),gyr=r(aNe," (ALBERT model)"),aNe.forEach(t),hyr=i(ge),bC=n(ge,"LI",{});var nNe=s(bC);GTe=n(nNe,"STRONG",{});var ayt=s(GTe);pyr=r(ayt,"bert"),ayt.forEach(t),_yr=r(nNe," \u2014 "),HJ=n(nNe,"A",{href:!0});var nyt=s(HJ);uyr=r(nyt,"TFBertForQuestionAnswering"),nyt.forEach(t),byr=r(nNe," (BERT model)"),nNe.forEach(t),vyr=i(ge),vC=n(ge,"LI",{});var sNe=s(vC);OTe=n(sNe,"STRONG",{});var syt=s(OTe);Fyr=r(syt,"camembert"),syt.forEach(t),Tyr=r(sNe," \u2014 "),UJ=n(sNe,"A",{href:!0});var lyt=s(UJ);Myr=r(lyt,"TFCamembertForQuestionAnswering"),lyt.forEach(t),Eyr=r(sNe," (CamemBERT model)"),sNe.forEach(t),Cyr=i(ge),FC=n(ge,"LI",{});var lNe=s(FC);VTe=n(lNe,"STRONG",{});var iyt=s(VTe);wyr=r(iyt,"convbert"),iyt.forEach(t),Ayr=r(lNe," \u2014 "),JJ=n(lNe,"A",{href:!0});var dyt=s(JJ);Lyr=r(dyt,"TFConvBertForQuestionAnswering"),dyt.forEach(t),yyr=r(lNe," (ConvBERT model)"),lNe.forEach(t),xyr=i(ge),TC=n(ge,"LI",{});var iNe=s(TC);XTe=n(iNe,"STRONG",{});var cyt=s(XTe);$yr=r(cyt,"deberta"),cyt.forEach(t),kyr=r(iNe," \u2014 "),YJ=n(iNe,"A",{href:!0});var fyt=s(YJ);Syr=r(fyt,"TFDebertaForQuestionAnswering"),fyt.forEach(t),Ryr=r(iNe," (DeBERTa model)"),iNe.forEach(t),Pyr=i(ge),MC=n(ge,"LI",{});var dNe=s(MC);zTe=n(dNe,"STRONG",{});var myt=s(zTe);Byr=r(myt,"deberta-v2"),myt.forEach(t),Iyr=r(dNe," \u2014 "),KJ=n(dNe,"A",{href:!0});var gyt=s(KJ);Nyr=r(gyt,"TFDebertaV2ForQuestionAnswering"),gyt.forEach(t),qyr=r(dNe," (DeBERTa-v2 model)"),dNe.forEach(t),jyr=i(ge),EC=n(ge,"LI",{});var cNe=s(EC);WTe=n(cNe,"STRONG",{});var hyt=s(WTe);Dyr=r(hyt,"distilbert"),hyt.forEach(t),Gyr=r(cNe," \u2014 "),ZJ=n(cNe,"A",{href:!0});var pyt=s(ZJ);Oyr=r(pyt,"TFDistilBertForQuestionAnswering"),pyt.forEach(t),Vyr=r(cNe," (DistilBERT model)"),cNe.forEach(t),Xyr=i(ge),CC=n(ge,"LI",{});var fNe=s(CC);QTe=n(fNe,"STRONG",{});var _yt=s(QTe);zyr=r(_yt,"electra"),_yt.forEach(t),Wyr=r(fNe," \u2014 "),eY=n(fNe,"A",{href:!0});var uyt=s(eY);Qyr=r(uyt,"TFElectraForQuestionAnswering"),uyt.forEach(t),Hyr=r(fNe," (ELECTRA model)"),fNe.forEach(t),Uyr=i(ge),wC=n(ge,"LI",{});var mNe=s(wC);HTe=n(mNe,"STRONG",{});var byt=s(HTe);Jyr=r(byt,"flaubert"),byt.forEach(t),Yyr=r(mNe," \u2014 "),oY=n(mNe,"A",{href:!0});var vyt=s(oY);Kyr=r(vyt,"TFFlaubertForQuestionAnsweringSimple"),vyt.forEach(t),Zyr=r(mNe," (FlauBERT model)"),mNe.forEach(t),e8r=i(ge),AC=n(ge,"LI",{});var gNe=s(AC);UTe=n(gNe,"STRONG",{});var Fyt=s(UTe);o8r=r(Fyt,"funnel"),Fyt.forEach(t),r8r=r(gNe," \u2014 "),rY=n(gNe,"A",{href:!0});var Tyt=s(rY);t8r=r(Tyt,"TFFunnelForQuestionAnswering"),Tyt.forEach(t),a8r=r(gNe," (Funnel Transformer model)"),gNe.forEach(t),n8r=i(ge),LC=n(ge,"LI",{});var hNe=s(LC);JTe=n(hNe,"STRONG",{});var Myt=s(JTe);s8r=r(Myt,"gptj"),Myt.forEach(t),l8r=r(hNe," \u2014 "),tY=n(hNe,"A",{href:!0});var Eyt=s(tY);i8r=r(Eyt,"TFGPTJForQuestionAnswering"),Eyt.forEach(t),d8r=r(hNe," (GPT-J model)"),hNe.forEach(t),c8r=i(ge),yC=n(ge,"LI",{});var pNe=s(yC);YTe=n(pNe,"STRONG",{});var Cyt=s(YTe);f8r=r(Cyt,"longformer"),Cyt.forEach(t),m8r=r(pNe," \u2014 "),aY=n(pNe,"A",{href:!0});var wyt=s(aY);g8r=r(wyt,"TFLongformerForQuestionAnswering"),wyt.forEach(t),h8r=r(pNe," (Longformer model)"),pNe.forEach(t),p8r=i(ge),xC=n(ge,"LI",{});var _Ne=s(xC);KTe=n(_Ne,"STRONG",{});var Ayt=s(KTe);_8r=r(Ayt,"mobilebert"),Ayt.forEach(t),u8r=r(_Ne," \u2014 "),nY=n(_Ne,"A",{href:!0});var Lyt=s(nY);b8r=r(Lyt,"TFMobileBertForQuestionAnswering"),Lyt.forEach(t),v8r=r(_Ne," (MobileBERT model)"),_Ne.forEach(t),F8r=i(ge),$C=n(ge,"LI",{});var uNe=s($C);ZTe=n(uNe,"STRONG",{});var yyt=s(ZTe);T8r=r(yyt,"mpnet"),yyt.forEach(t),M8r=r(uNe," \u2014 "),sY=n(uNe,"A",{href:!0});var xyt=s(sY);E8r=r(xyt,"TFMPNetForQuestionAnswering"),xyt.forEach(t),C8r=r(uNe," (MPNet model)"),uNe.forEach(t),w8r=i(ge),kC=n(ge,"LI",{});var bNe=s(kC);e7e=n(bNe,"STRONG",{});var $yt=s(e7e);A8r=r($yt,"rembert"),$yt.forEach(t),L8r=r(bNe," \u2014 "),lY=n(bNe,"A",{href:!0});var kyt=s(lY);y8r=r(kyt,"TFRemBertForQuestionAnswering"),kyt.forEach(t),x8r=r(bNe," (RemBERT model)"),bNe.forEach(t),$8r=i(ge),SC=n(ge,"LI",{});var vNe=s(SC);o7e=n(vNe,"STRONG",{});var Syt=s(o7e);k8r=r(Syt,"roberta"),Syt.forEach(t),S8r=r(vNe," \u2014 "),iY=n(vNe,"A",{href:!0});var Ryt=s(iY);R8r=r(Ryt,"TFRobertaForQuestionAnswering"),Ryt.forEach(t),P8r=r(vNe," (RoBERTa model)"),vNe.forEach(t),B8r=i(ge),RC=n(ge,"LI",{});var FNe=s(RC);r7e=n(FNe,"STRONG",{});var Pyt=s(r7e);I8r=r(Pyt,"roformer"),Pyt.forEach(t),N8r=r(FNe," \u2014 "),dY=n(FNe,"A",{href:!0});var Byt=s(dY);q8r=r(Byt,"TFRoFormerForQuestionAnswering"),Byt.forEach(t),j8r=r(FNe," (RoFormer model)"),FNe.forEach(t),D8r=i(ge),PC=n(ge,"LI",{});var TNe=s(PC);t7e=n(TNe,"STRONG",{});var Iyt=s(t7e);G8r=r(Iyt,"xlm"),Iyt.forEach(t),O8r=r(TNe," \u2014 "),cY=n(TNe,"A",{href:!0});var Nyt=s(cY);V8r=r(Nyt,"TFXLMForQuestionAnsweringSimple"),Nyt.forEach(t),X8r=r(TNe," (XLM model)"),TNe.forEach(t),z8r=i(ge),BC=n(ge,"LI",{});var MNe=s(BC);a7e=n(MNe,"STRONG",{});var qyt=s(a7e);W8r=r(qyt,"xlm-roberta"),qyt.forEach(t),Q8r=r(MNe," \u2014 "),fY=n(MNe,"A",{href:!0});var jyt=s(fY);H8r=r(jyt,"TFXLMRobertaForQuestionAnswering"),jyt.forEach(t),U8r=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),J8r=i(ge),IC=n(ge,"LI",{});var ENe=s(IC);n7e=n(ENe,"STRONG",{});var Dyt=s(n7e);Y8r=r(Dyt,"xlnet"),Dyt.forEach(t),K8r=r(ENe," \u2014 "),mY=n(ENe,"A",{href:!0});var Gyt=s(mY);Z8r=r(Gyt,"TFXLNetForQuestionAnsweringSimple"),Gyt.forEach(t),e9r=r(ENe," (XLNet model)"),ENe.forEach(t),ge.forEach(t),o9r=i(ql),T(NC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),eGe=i(f),wc=n(f,"H2",{class:!0});var lVe=s(wc);qC=n(lVe,"A",{id:!0,class:!0,href:!0});var Oyt=s(qC);s7e=n(Oyt,"SPAN",{});var Vyt=s(s7e);T(B9.$$.fragment,Vyt),Vyt.forEach(t),Oyt.forEach(t),r9r=i(lVe),l7e=n(lVe,"SPAN",{});var Xyt=s(l7e);t9r=r(Xyt,"TFAutoModelForVision2Seq"),Xyt.forEach(t),lVe.forEach(t),oGe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(I9.$$.fragment,jl),a9r=i(jl),Ac=n(jl,"P",{});var Foe=s(Ac);n9r=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gY=n(Foe,"A",{href:!0});var zyt=s(gY);s9r=r(zyt,"from_pretrained()"),zyt.forEach(t),l9r=r(Foe," class method or the "),hY=n(Foe,"A",{href:!0});var Wyt=s(hY);i9r=r(Wyt,"from_config()"),Wyt.forEach(t),d9r=r(Foe,` class
method.`),Foe.forEach(t),c9r=i(jl),N9=n(jl,"P",{});var iVe=s(N9);f9r=r(iVe,"This class cannot be instantiated directly using "),i7e=n(iVe,"CODE",{});var Qyt=s(i7e);m9r=r(Qyt,"__init__()"),Qyt.forEach(t),g9r=r(iVe," (throws an error)."),iVe.forEach(t),h9r=i(jl),Dt=n(jl,"DIV",{class:!0});var p6=s(Dt);T(q9.$$.fragment,p6),p9r=i(p6),d7e=n(p6,"P",{});var Hyt=s(d7e);_9r=r(Hyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hyt.forEach(t),u9r=i(p6),Lc=n(p6,"P",{});var Toe=s(Lc);b9r=r(Toe,`Note:
Loading a model from its configuration file does `),c7e=n(Toe,"STRONG",{});var Uyt=s(c7e);v9r=r(Uyt,"not"),Uyt.forEach(t),F9r=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Toe,"A",{href:!0});var Jyt=s(pY);T9r=r(Jyt,"from_pretrained()"),Jyt.forEach(t),M9r=r(Toe," to load the model weights."),Toe.forEach(t),E9r=i(p6),T(jC.$$.fragment,p6),p6.forEach(t),C9r=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(j9.$$.fragment,Dl),w9r=i(Dl),f7e=n(Dl,"P",{});var Yyt=s(f7e);A9r=r(Yyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yyt.forEach(t),L9r=i(Dl),mn=n(Dl,"P",{});var _6=s(mn);y9r=r(_6,"The model class to instantiate is selected based on the "),m7e=n(_6,"CODE",{});var Kyt=s(m7e);x9r=r(Kyt,"model_type"),Kyt.forEach(t),$9r=r(_6,` property of the config object (either
passed as an argument or loaded from `),g7e=n(_6,"CODE",{});var Zyt=s(g7e);k9r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),S9r=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(_6,"CODE",{});var e8t=s(h7e);R9r=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),P9r=r(_6,":"),_6.forEach(t),B9r=i(Dl),p7e=n(Dl,"UL",{});var o8t=s(p7e);DC=n(o8t,"LI",{});var CNe=s(DC);_7e=n(CNe,"STRONG",{});var r8t=s(_7e);I9r=r(r8t,"vision-encoder-decoder"),r8t.forEach(t),N9r=r(CNe," \u2014 "),_Y=n(CNe,"A",{href:!0});var t8t=s(_Y);q9r=r(t8t,"TFVisionEncoderDecoderModel"),t8t.forEach(t),j9r=r(CNe," (Vision Encoder decoder model)"),CNe.forEach(t),o8t.forEach(t),D9r=i(Dl),T(GC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),rGe=i(f),yc=n(f,"H2",{class:!0});var dVe=s(yc);OC=n(dVe,"A",{id:!0,class:!0,href:!0});var a8t=s(OC);u7e=n(a8t,"SPAN",{});var n8t=s(u7e);T(D9.$$.fragment,n8t),n8t.forEach(t),a8t.forEach(t),G9r=i(dVe),b7e=n(dVe,"SPAN",{});var s8t=s(b7e);O9r=r(s8t,"TFAutoModelForSpeechSeq2Seq"),s8t.forEach(t),dVe.forEach(t),tGe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(G9.$$.fragment,Gl),V9r=i(Gl),xc=n(Gl,"P",{});var Moe=s(xc);X9r=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uY=n(Moe,"A",{href:!0});var l8t=s(uY);z9r=r(l8t,"from_pretrained()"),l8t.forEach(t),W9r=r(Moe," class method or the "),bY=n(Moe,"A",{href:!0});var i8t=s(bY);Q9r=r(i8t,"from_config()"),i8t.forEach(t),H9r=r(Moe,` class
method.`),Moe.forEach(t),U9r=i(Gl),O9=n(Gl,"P",{});var cVe=s(O9);J9r=r(cVe,"This class cannot be instantiated directly using "),v7e=n(cVe,"CODE",{});var d8t=s(v7e);Y9r=r(d8t,"__init__()"),d8t.forEach(t),K9r=r(cVe," (throws an error)."),cVe.forEach(t),Z9r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var u6=s(Gt);T(V9.$$.fragment,u6),exr=i(u6),F7e=n(u6,"P",{});var c8t=s(F7e);oxr=r(c8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c8t.forEach(t),rxr=i(u6),$c=n(u6,"P",{});var Eoe=s($c);txr=r(Eoe,`Note:
Loading a model from its configuration file does `),T7e=n(Eoe,"STRONG",{});var f8t=s(T7e);axr=r(f8t,"not"),f8t.forEach(t),nxr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(Eoe,"A",{href:!0});var m8t=s(vY);sxr=r(m8t,"from_pretrained()"),m8t.forEach(t),lxr=r(Eoe," to load the model weights."),Eoe.forEach(t),ixr=i(u6),T(VC.$$.fragment,u6),u6.forEach(t),dxr=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(X9.$$.fragment,Ol),cxr=i(Ol),M7e=n(Ol,"P",{});var g8t=s(M7e);fxr=r(g8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),g8t.forEach(t),mxr=i(Ol),gn=n(Ol,"P",{});var b6=s(gn);gxr=r(b6,"The model class to instantiate is selected based on the "),E7e=n(b6,"CODE",{});var h8t=s(E7e);hxr=r(h8t,"model_type"),h8t.forEach(t),pxr=r(b6,` property of the config object (either
passed as an argument or loaded from `),C7e=n(b6,"CODE",{});var p8t=s(C7e);_xr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),uxr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(b6,"CODE",{});var _8t=s(w7e);bxr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),vxr=r(b6,":"),b6.forEach(t),Fxr=i(Ol),A7e=n(Ol,"UL",{});var u8t=s(A7e);XC=n(u8t,"LI",{});var wNe=s(XC);L7e=n(wNe,"STRONG",{});var b8t=s(L7e);Txr=r(b8t,"speech_to_text"),b8t.forEach(t),Mxr=r(wNe," \u2014 "),FY=n(wNe,"A",{href:!0});var v8t=s(FY);Exr=r(v8t,"TFSpeech2TextForConditionalGeneration"),v8t.forEach(t),Cxr=r(wNe," (Speech2Text model)"),wNe.forEach(t),u8t.forEach(t),wxr=i(Ol),T(zC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),aGe=i(f),kc=n(f,"H2",{class:!0});var fVe=s(kc);WC=n(fVe,"A",{id:!0,class:!0,href:!0});var F8t=s(WC);y7e=n(F8t,"SPAN",{});var T8t=s(y7e);T(z9.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),Axr=i(fVe),x7e=n(fVe,"SPAN",{});var M8t=s(x7e);Lxr=r(M8t,"FlaxAutoModel"),M8t.forEach(t),fVe.forEach(t),nGe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(W9.$$.fragment,Vl),yxr=i(Vl),Sc=n(Vl,"P",{});var Coe=s(Sc);xxr=r(Coe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TY=n(Coe,"A",{href:!0});var E8t=s(TY);$xr=r(E8t,"from_pretrained()"),E8t.forEach(t),kxr=r(Coe," class method or the "),MY=n(Coe,"A",{href:!0});var C8t=s(MY);Sxr=r(C8t,"from_config()"),C8t.forEach(t),Rxr=r(Coe,` class
method.`),Coe.forEach(t),Pxr=i(Vl),Q9=n(Vl,"P",{});var mVe=s(Q9);Bxr=r(mVe,"This class cannot be instantiated directly using "),$7e=n(mVe,"CODE",{});var w8t=s($7e);Ixr=r(w8t,"__init__()"),w8t.forEach(t),Nxr=r(mVe," (throws an error)."),mVe.forEach(t),qxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var v6=s(Ot);T(H9.$$.fragment,v6),jxr=i(v6),k7e=n(v6,"P",{});var A8t=s(k7e);Dxr=r(A8t,"Instantiates one of the base model classes of the library from a configuration."),A8t.forEach(t),Gxr=i(v6),Rc=n(v6,"P",{});var woe=s(Rc);Oxr=r(woe,`Note:
Loading a model from its configuration file does `),S7e=n(woe,"STRONG",{});var L8t=s(S7e);Vxr=r(L8t,"not"),L8t.forEach(t),Xxr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(woe,"A",{href:!0});var y8t=s(EY);zxr=r(y8t,"from_pretrained()"),y8t.forEach(t),Wxr=r(woe," to load the model weights."),woe.forEach(t),Qxr=i(v6),T(QC.$$.fragment,v6),v6.forEach(t),Hxr=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(U9.$$.fragment,Xl),Uxr=i(Xl),R7e=n(Xl,"P",{});var x8t=s(R7e);Jxr=r(x8t,"Instantiate one of the base model classes of the library from a pretrained model."),x8t.forEach(t),Yxr=i(Xl),hn=n(Xl,"P",{});var F6=s(hn);Kxr=r(F6,"The model class to instantiate is selected based on the "),P7e=n(F6,"CODE",{});var $8t=s(P7e);Zxr=r($8t,"model_type"),$8t.forEach(t),e$r=r(F6,` property of the config object (either
passed as an argument or loaded from `),B7e=n(F6,"CODE",{});var k8t=s(B7e);o$r=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),r$r=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(F6,"CODE",{});var S8t=s(I7e);t$r=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),a$r=r(F6,":"),F6.forEach(t),n$r=i(Xl),re=n(Xl,"UL",{});var ne=s(re);HC=n(ne,"LI",{});var ANe=s(HC);N7e=n(ANe,"STRONG",{});var R8t=s(N7e);s$r=r(R8t,"albert"),R8t.forEach(t),l$r=r(ANe," \u2014 "),CY=n(ANe,"A",{href:!0});var P8t=s(CY);i$r=r(P8t,"FlaxAlbertModel"),P8t.forEach(t),d$r=r(ANe," (ALBERT model)"),ANe.forEach(t),c$r=i(ne),UC=n(ne,"LI",{});var LNe=s(UC);q7e=n(LNe,"STRONG",{});var B8t=s(q7e);f$r=r(B8t,"bart"),B8t.forEach(t),m$r=r(LNe," \u2014 "),wY=n(LNe,"A",{href:!0});var I8t=s(wY);g$r=r(I8t,"FlaxBartModel"),I8t.forEach(t),h$r=r(LNe," (BART model)"),LNe.forEach(t),p$r=i(ne),JC=n(ne,"LI",{});var yNe=s(JC);j7e=n(yNe,"STRONG",{});var N8t=s(j7e);_$r=r(N8t,"beit"),N8t.forEach(t),u$r=r(yNe," \u2014 "),AY=n(yNe,"A",{href:!0});var q8t=s(AY);b$r=r(q8t,"FlaxBeitModel"),q8t.forEach(t),v$r=r(yNe," (BEiT model)"),yNe.forEach(t),F$r=i(ne),YC=n(ne,"LI",{});var xNe=s(YC);D7e=n(xNe,"STRONG",{});var j8t=s(D7e);T$r=r(j8t,"bert"),j8t.forEach(t),M$r=r(xNe," \u2014 "),LY=n(xNe,"A",{href:!0});var D8t=s(LY);E$r=r(D8t,"FlaxBertModel"),D8t.forEach(t),C$r=r(xNe," (BERT model)"),xNe.forEach(t),w$r=i(ne),KC=n(ne,"LI",{});var $Ne=s(KC);G7e=n($Ne,"STRONG",{});var G8t=s(G7e);A$r=r(G8t,"big_bird"),G8t.forEach(t),L$r=r($Ne," \u2014 "),yY=n($Ne,"A",{href:!0});var O8t=s(yY);y$r=r(O8t,"FlaxBigBirdModel"),O8t.forEach(t),x$r=r($Ne," (BigBird model)"),$Ne.forEach(t),$$r=i(ne),ZC=n(ne,"LI",{});var kNe=s(ZC);O7e=n(kNe,"STRONG",{});var V8t=s(O7e);k$r=r(V8t,"blenderbot"),V8t.forEach(t),S$r=r(kNe," \u2014 "),xY=n(kNe,"A",{href:!0});var X8t=s(xY);R$r=r(X8t,"FlaxBlenderbotModel"),X8t.forEach(t),P$r=r(kNe," (Blenderbot model)"),kNe.forEach(t),B$r=i(ne),e3=n(ne,"LI",{});var SNe=s(e3);V7e=n(SNe,"STRONG",{});var z8t=s(V7e);I$r=r(z8t,"blenderbot-small"),z8t.forEach(t),N$r=r(SNe," \u2014 "),$Y=n(SNe,"A",{href:!0});var W8t=s($Y);q$r=r(W8t,"FlaxBlenderbotSmallModel"),W8t.forEach(t),j$r=r(SNe," (BlenderbotSmall model)"),SNe.forEach(t),D$r=i(ne),o3=n(ne,"LI",{});var RNe=s(o3);X7e=n(RNe,"STRONG",{});var Q8t=s(X7e);G$r=r(Q8t,"clip"),Q8t.forEach(t),O$r=r(RNe," \u2014 "),kY=n(RNe,"A",{href:!0});var H8t=s(kY);V$r=r(H8t,"FlaxCLIPModel"),H8t.forEach(t),X$r=r(RNe," (CLIP model)"),RNe.forEach(t),z$r=i(ne),r3=n(ne,"LI",{});var PNe=s(r3);z7e=n(PNe,"STRONG",{});var U8t=s(z7e);W$r=r(U8t,"distilbert"),U8t.forEach(t),Q$r=r(PNe," \u2014 "),SY=n(PNe,"A",{href:!0});var J8t=s(SY);H$r=r(J8t,"FlaxDistilBertModel"),J8t.forEach(t),U$r=r(PNe," (DistilBERT model)"),PNe.forEach(t),J$r=i(ne),t3=n(ne,"LI",{});var BNe=s(t3);W7e=n(BNe,"STRONG",{});var Y8t=s(W7e);Y$r=r(Y8t,"electra"),Y8t.forEach(t),K$r=r(BNe," \u2014 "),RY=n(BNe,"A",{href:!0});var K8t=s(RY);Z$r=r(K8t,"FlaxElectraModel"),K8t.forEach(t),ekr=r(BNe," (ELECTRA model)"),BNe.forEach(t),okr=i(ne),a3=n(ne,"LI",{});var INe=s(a3);Q7e=n(INe,"STRONG",{});var Z8t=s(Q7e);rkr=r(Z8t,"gpt2"),Z8t.forEach(t),tkr=r(INe," \u2014 "),PY=n(INe,"A",{href:!0});var e9t=s(PY);akr=r(e9t,"FlaxGPT2Model"),e9t.forEach(t),nkr=r(INe," (OpenAI GPT-2 model)"),INe.forEach(t),skr=i(ne),n3=n(ne,"LI",{});var NNe=s(n3);H7e=n(NNe,"STRONG",{});var o9t=s(H7e);lkr=r(o9t,"gpt_neo"),o9t.forEach(t),ikr=r(NNe," \u2014 "),BY=n(NNe,"A",{href:!0});var r9t=s(BY);dkr=r(r9t,"FlaxGPTNeoModel"),r9t.forEach(t),ckr=r(NNe," (GPT Neo model)"),NNe.forEach(t),fkr=i(ne),s3=n(ne,"LI",{});var qNe=s(s3);U7e=n(qNe,"STRONG",{});var t9t=s(U7e);mkr=r(t9t,"gptj"),t9t.forEach(t),gkr=r(qNe," \u2014 "),IY=n(qNe,"A",{href:!0});var a9t=s(IY);hkr=r(a9t,"FlaxGPTJModel"),a9t.forEach(t),pkr=r(qNe," (GPT-J model)"),qNe.forEach(t),_kr=i(ne),l3=n(ne,"LI",{});var jNe=s(l3);J7e=n(jNe,"STRONG",{});var n9t=s(J7e);ukr=r(n9t,"marian"),n9t.forEach(t),bkr=r(jNe," \u2014 "),NY=n(jNe,"A",{href:!0});var s9t=s(NY);vkr=r(s9t,"FlaxMarianModel"),s9t.forEach(t),Fkr=r(jNe," (Marian model)"),jNe.forEach(t),Tkr=i(ne),i3=n(ne,"LI",{});var DNe=s(i3);Y7e=n(DNe,"STRONG",{});var l9t=s(Y7e);Mkr=r(l9t,"mbart"),l9t.forEach(t),Ekr=r(DNe," \u2014 "),qY=n(DNe,"A",{href:!0});var i9t=s(qY);Ckr=r(i9t,"FlaxMBartModel"),i9t.forEach(t),wkr=r(DNe," (mBART model)"),DNe.forEach(t),Akr=i(ne),d3=n(ne,"LI",{});var GNe=s(d3);K7e=n(GNe,"STRONG",{});var d9t=s(K7e);Lkr=r(d9t,"mt5"),d9t.forEach(t),ykr=r(GNe," \u2014 "),jY=n(GNe,"A",{href:!0});var c9t=s(jY);xkr=r(c9t,"FlaxMT5Model"),c9t.forEach(t),$kr=r(GNe," (MT5 model)"),GNe.forEach(t),kkr=i(ne),c3=n(ne,"LI",{});var ONe=s(c3);Z7e=n(ONe,"STRONG",{});var f9t=s(Z7e);Skr=r(f9t,"opt"),f9t.forEach(t),Rkr=r(ONe," \u2014 "),DY=n(ONe,"A",{href:!0});var m9t=s(DY);Pkr=r(m9t,"FlaxOPTModel"),m9t.forEach(t),Bkr=r(ONe," (OPT model)"),ONe.forEach(t),Ikr=i(ne),f3=n(ne,"LI",{});var VNe=s(f3);eMe=n(VNe,"STRONG",{});var g9t=s(eMe);Nkr=r(g9t,"pegasus"),g9t.forEach(t),qkr=r(VNe," \u2014 "),GY=n(VNe,"A",{href:!0});var h9t=s(GY);jkr=r(h9t,"FlaxPegasusModel"),h9t.forEach(t),Dkr=r(VNe," (Pegasus model)"),VNe.forEach(t),Gkr=i(ne),m3=n(ne,"LI",{});var XNe=s(m3);oMe=n(XNe,"STRONG",{});var p9t=s(oMe);Okr=r(p9t,"roberta"),p9t.forEach(t),Vkr=r(XNe," \u2014 "),OY=n(XNe,"A",{href:!0});var _9t=s(OY);Xkr=r(_9t,"FlaxRobertaModel"),_9t.forEach(t),zkr=r(XNe," (RoBERTa model)"),XNe.forEach(t),Wkr=i(ne),g3=n(ne,"LI",{});var zNe=s(g3);rMe=n(zNe,"STRONG",{});var u9t=s(rMe);Qkr=r(u9t,"roformer"),u9t.forEach(t),Hkr=r(zNe," \u2014 "),VY=n(zNe,"A",{href:!0});var b9t=s(VY);Ukr=r(b9t,"FlaxRoFormerModel"),b9t.forEach(t),Jkr=r(zNe," (RoFormer model)"),zNe.forEach(t),Ykr=i(ne),h3=n(ne,"LI",{});var WNe=s(h3);tMe=n(WNe,"STRONG",{});var v9t=s(tMe);Kkr=r(v9t,"t5"),v9t.forEach(t),Zkr=r(WNe," \u2014 "),XY=n(WNe,"A",{href:!0});var F9t=s(XY);eSr=r(F9t,"FlaxT5Model"),F9t.forEach(t),oSr=r(WNe," (T5 model)"),WNe.forEach(t),rSr=i(ne),p3=n(ne,"LI",{});var QNe=s(p3);aMe=n(QNe,"STRONG",{});var T9t=s(aMe);tSr=r(T9t,"vision-text-dual-encoder"),T9t.forEach(t),aSr=r(QNe," \u2014 "),zY=n(QNe,"A",{href:!0});var M9t=s(zY);nSr=r(M9t,"FlaxVisionTextDualEncoderModel"),M9t.forEach(t),sSr=r(QNe," (VisionTextDualEncoder model)"),QNe.forEach(t),lSr=i(ne),_3=n(ne,"LI",{});var HNe=s(_3);nMe=n(HNe,"STRONG",{});var E9t=s(nMe);iSr=r(E9t,"vit"),E9t.forEach(t),dSr=r(HNe," \u2014 "),WY=n(HNe,"A",{href:!0});var C9t=s(WY);cSr=r(C9t,"FlaxViTModel"),C9t.forEach(t),fSr=r(HNe," (ViT model)"),HNe.forEach(t),mSr=i(ne),u3=n(ne,"LI",{});var UNe=s(u3);sMe=n(UNe,"STRONG",{});var w9t=s(sMe);gSr=r(w9t,"wav2vec2"),w9t.forEach(t),hSr=r(UNe," \u2014 "),QY=n(UNe,"A",{href:!0});var A9t=s(QY);pSr=r(A9t,"FlaxWav2Vec2Model"),A9t.forEach(t),_Sr=r(UNe," (Wav2Vec2 model)"),UNe.forEach(t),uSr=i(ne),b3=n(ne,"LI",{});var JNe=s(b3);lMe=n(JNe,"STRONG",{});var L9t=s(lMe);bSr=r(L9t,"xglm"),L9t.forEach(t),vSr=r(JNe," \u2014 "),HY=n(JNe,"A",{href:!0});var y9t=s(HY);FSr=r(y9t,"FlaxXGLMModel"),y9t.forEach(t),TSr=r(JNe," (XGLM model)"),JNe.forEach(t),MSr=i(ne),v3=n(ne,"LI",{});var YNe=s(v3);iMe=n(YNe,"STRONG",{});var x9t=s(iMe);ESr=r(x9t,"xlm-roberta"),x9t.forEach(t),CSr=r(YNe," \u2014 "),UY=n(YNe,"A",{href:!0});var $9t=s(UY);wSr=r($9t,"FlaxXLMRobertaModel"),$9t.forEach(t),ASr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),ne.forEach(t),LSr=i(Xl),T(F3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),sGe=i(f),Pc=n(f,"H2",{class:!0});var gVe=s(Pc);T3=n(gVe,"A",{id:!0,class:!0,href:!0});var k9t=s(T3);dMe=n(k9t,"SPAN",{});var S9t=s(dMe);T(J9.$$.fragment,S9t),S9t.forEach(t),k9t.forEach(t),ySr=i(gVe),cMe=n(gVe,"SPAN",{});var R9t=s(cMe);xSr=r(R9t,"FlaxAutoModelForCausalLM"),R9t.forEach(t),gVe.forEach(t),lGe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(Y9.$$.fragment,zl),$Sr=i(zl),Bc=n(zl,"P",{});var Aoe=s(Bc);kSr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JY=n(Aoe,"A",{href:!0});var P9t=s(JY);SSr=r(P9t,"from_pretrained()"),P9t.forEach(t),RSr=r(Aoe," class method or the "),YY=n(Aoe,"A",{href:!0});var B9t=s(YY);PSr=r(B9t,"from_config()"),B9t.forEach(t),BSr=r(Aoe,` class
method.`),Aoe.forEach(t),ISr=i(zl),K9=n(zl,"P",{});var hVe=s(K9);NSr=r(hVe,"This class cannot be instantiated directly using "),fMe=n(hVe,"CODE",{});var I9t=s(fMe);qSr=r(I9t,"__init__()"),I9t.forEach(t),jSr=r(hVe," (throws an error)."),hVe.forEach(t),DSr=i(zl),Vt=n(zl,"DIV",{class:!0});var T6=s(Vt);T(Z9.$$.fragment,T6),GSr=i(T6),mMe=n(T6,"P",{});var N9t=s(mMe);OSr=r(N9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),N9t.forEach(t),VSr=i(T6),Ic=n(T6,"P",{});var Loe=s(Ic);XSr=r(Loe,`Note:
Loading a model from its configuration file does `),gMe=n(Loe,"STRONG",{});var q9t=s(gMe);zSr=r(q9t,"not"),q9t.forEach(t),WSr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(Loe,"A",{href:!0});var j9t=s(KY);QSr=r(j9t,"from_pretrained()"),j9t.forEach(t),HSr=r(Loe," to load the model weights."),Loe.forEach(t),USr=i(T6),T(M3.$$.fragment,T6),T6.forEach(t),JSr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(ex.$$.fragment,Wl),YSr=i(Wl),hMe=n(Wl,"P",{});var D9t=s(hMe);KSr=r(D9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D9t.forEach(t),ZSr=i(Wl),pn=n(Wl,"P",{});var M6=s(pn);eRr=r(M6,"The model class to instantiate is selected based on the "),pMe=n(M6,"CODE",{});var G9t=s(pMe);oRr=r(G9t,"model_type"),G9t.forEach(t),rRr=r(M6,` property of the config object (either
passed as an argument or loaded from `),_Me=n(M6,"CODE",{});var O9t=s(_Me);tRr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),aRr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(M6,"CODE",{});var V9t=s(uMe);nRr=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),sRr=r(M6,":"),M6.forEach(t),lRr=i(Wl),xe=n(Wl,"UL",{});var Ne=s(xe);E3=n(Ne,"LI",{});var KNe=s(E3);bMe=n(KNe,"STRONG",{});var X9t=s(bMe);iRr=r(X9t,"bart"),X9t.forEach(t),dRr=r(KNe," \u2014 "),ZY=n(KNe,"A",{href:!0});var z9t=s(ZY);cRr=r(z9t,"FlaxBartForCausalLM"),z9t.forEach(t),fRr=r(KNe," (BART model)"),KNe.forEach(t),mRr=i(Ne),C3=n(Ne,"LI",{});var ZNe=s(C3);vMe=n(ZNe,"STRONG",{});var W9t=s(vMe);gRr=r(W9t,"bert"),W9t.forEach(t),hRr=r(ZNe," \u2014 "),eK=n(ZNe,"A",{href:!0});var Q9t=s(eK);pRr=r(Q9t,"FlaxBertForCausalLM"),Q9t.forEach(t),_Rr=r(ZNe," (BERT model)"),ZNe.forEach(t),uRr=i(Ne),w3=n(Ne,"LI",{});var eqe=s(w3);FMe=n(eqe,"STRONG",{});var H9t=s(FMe);bRr=r(H9t,"big_bird"),H9t.forEach(t),vRr=r(eqe," \u2014 "),oK=n(eqe,"A",{href:!0});var U9t=s(oK);FRr=r(U9t,"FlaxBigBirdForCausalLM"),U9t.forEach(t),TRr=r(eqe," (BigBird model)"),eqe.forEach(t),MRr=i(Ne),A3=n(Ne,"LI",{});var oqe=s(A3);TMe=n(oqe,"STRONG",{});var J9t=s(TMe);ERr=r(J9t,"electra"),J9t.forEach(t),CRr=r(oqe," \u2014 "),rK=n(oqe,"A",{href:!0});var Y9t=s(rK);wRr=r(Y9t,"FlaxElectraForCausalLM"),Y9t.forEach(t),ARr=r(oqe," (ELECTRA model)"),oqe.forEach(t),LRr=i(Ne),L3=n(Ne,"LI",{});var rqe=s(L3);MMe=n(rqe,"STRONG",{});var K9t=s(MMe);yRr=r(K9t,"gpt2"),K9t.forEach(t),xRr=r(rqe," \u2014 "),tK=n(rqe,"A",{href:!0});var Z9t=s(tK);$Rr=r(Z9t,"FlaxGPT2LMHeadModel"),Z9t.forEach(t),kRr=r(rqe," (OpenAI GPT-2 model)"),rqe.forEach(t),SRr=i(Ne),y3=n(Ne,"LI",{});var tqe=s(y3);EMe=n(tqe,"STRONG",{});var ext=s(EMe);RRr=r(ext,"gpt_neo"),ext.forEach(t),PRr=r(tqe," \u2014 "),aK=n(tqe,"A",{href:!0});var oxt=s(aK);BRr=r(oxt,"FlaxGPTNeoForCausalLM"),oxt.forEach(t),IRr=r(tqe," (GPT Neo model)"),tqe.forEach(t),NRr=i(Ne),x3=n(Ne,"LI",{});var aqe=s(x3);CMe=n(aqe,"STRONG",{});var rxt=s(CMe);qRr=r(rxt,"gptj"),rxt.forEach(t),jRr=r(aqe," \u2014 "),nK=n(aqe,"A",{href:!0});var txt=s(nK);DRr=r(txt,"FlaxGPTJForCausalLM"),txt.forEach(t),GRr=r(aqe," (GPT-J model)"),aqe.forEach(t),ORr=i(Ne),$3=n(Ne,"LI",{});var nqe=s($3);wMe=n(nqe,"STRONG",{});var axt=s(wMe);VRr=r(axt,"opt"),axt.forEach(t),XRr=r(nqe," \u2014 "),sK=n(nqe,"A",{href:!0});var nxt=s(sK);zRr=r(nxt,"FlaxOPTForCausalLM"),nxt.forEach(t),WRr=r(nqe," (OPT model)"),nqe.forEach(t),QRr=i(Ne),k3=n(Ne,"LI",{});var sqe=s(k3);AMe=n(sqe,"STRONG",{});var sxt=s(AMe);HRr=r(sxt,"roberta"),sxt.forEach(t),URr=r(sqe," \u2014 "),lK=n(sqe,"A",{href:!0});var lxt=s(lK);JRr=r(lxt,"FlaxRobertaForCausalLM"),lxt.forEach(t),YRr=r(sqe," (RoBERTa model)"),sqe.forEach(t),KRr=i(Ne),S3=n(Ne,"LI",{});var lqe=s(S3);LMe=n(lqe,"STRONG",{});var ixt=s(LMe);ZRr=r(ixt,"xglm"),ixt.forEach(t),ePr=r(lqe," \u2014 "),iK=n(lqe,"A",{href:!0});var dxt=s(iK);oPr=r(dxt,"FlaxXGLMForCausalLM"),dxt.forEach(t),rPr=r(lqe," (XGLM model)"),lqe.forEach(t),Ne.forEach(t),tPr=i(Wl),T(R3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),iGe=i(f),Nc=n(f,"H2",{class:!0});var pVe=s(Nc);P3=n(pVe,"A",{id:!0,class:!0,href:!0});var cxt=s(P3);yMe=n(cxt,"SPAN",{});var fxt=s(yMe);T(ox.$$.fragment,fxt),fxt.forEach(t),cxt.forEach(t),aPr=i(pVe),xMe=n(pVe,"SPAN",{});var mxt=s(xMe);nPr=r(mxt,"FlaxAutoModelForPreTraining"),mxt.forEach(t),pVe.forEach(t),dGe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(rx.$$.fragment,Ql),sPr=i(Ql),qc=n(Ql,"P",{});var yoe=s(qc);lPr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dK=n(yoe,"A",{href:!0});var gxt=s(dK);iPr=r(gxt,"from_pretrained()"),gxt.forEach(t),dPr=r(yoe," class method or the "),cK=n(yoe,"A",{href:!0});var hxt=s(cK);cPr=r(hxt,"from_config()"),hxt.forEach(t),fPr=r(yoe,` class
method.`),yoe.forEach(t),mPr=i(Ql),tx=n(Ql,"P",{});var _Ve=s(tx);gPr=r(_Ve,"This class cannot be instantiated directly using "),$Me=n(_Ve,"CODE",{});var pxt=s($Me);hPr=r(pxt,"__init__()"),pxt.forEach(t),pPr=r(_Ve," (throws an error)."),_Ve.forEach(t),_Pr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var E6=s(Xt);T(ax.$$.fragment,E6),uPr=i(E6),kMe=n(E6,"P",{});var _xt=s(kMe);bPr=r(_xt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_xt.forEach(t),vPr=i(E6),jc=n(E6,"P",{});var xoe=s(jc);FPr=r(xoe,`Note:
Loading a model from its configuration file does `),SMe=n(xoe,"STRONG",{});var uxt=s(SMe);TPr=r(uxt,"not"),uxt.forEach(t),MPr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(xoe,"A",{href:!0});var bxt=s(fK);EPr=r(bxt,"from_pretrained()"),bxt.forEach(t),CPr=r(xoe," to load the model weights."),xoe.forEach(t),wPr=i(E6),T(B3.$$.fragment,E6),E6.forEach(t),APr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(nx.$$.fragment,Hl),LPr=i(Hl),RMe=n(Hl,"P",{});var vxt=s(RMe);yPr=r(vxt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vxt.forEach(t),xPr=i(Hl),_n=n(Hl,"P",{});var C6=s(_n);$Pr=r(C6,"The model class to instantiate is selected based on the "),PMe=n(C6,"CODE",{});var Fxt=s(PMe);kPr=r(Fxt,"model_type"),Fxt.forEach(t),SPr=r(C6,` property of the config object (either
passed as an argument or loaded from `),BMe=n(C6,"CODE",{});var Txt=s(BMe);RPr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),PPr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(C6,"CODE",{});var Mxt=s(IMe);BPr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),IPr=r(C6,":"),C6.forEach(t),NPr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);I3=n(we,"LI",{});var iqe=s(I3);NMe=n(iqe,"STRONG",{});var Ext=s(NMe);qPr=r(Ext,"albert"),Ext.forEach(t),jPr=r(iqe," \u2014 "),mK=n(iqe,"A",{href:!0});var Cxt=s(mK);DPr=r(Cxt,"FlaxAlbertForPreTraining"),Cxt.forEach(t),GPr=r(iqe," (ALBERT model)"),iqe.forEach(t),OPr=i(we),N3=n(we,"LI",{});var dqe=s(N3);qMe=n(dqe,"STRONG",{});var wxt=s(qMe);VPr=r(wxt,"bart"),wxt.forEach(t),XPr=r(dqe," \u2014 "),gK=n(dqe,"A",{href:!0});var Axt=s(gK);zPr=r(Axt,"FlaxBartForConditionalGeneration"),Axt.forEach(t),WPr=r(dqe," (BART model)"),dqe.forEach(t),QPr=i(we),q3=n(we,"LI",{});var cqe=s(q3);jMe=n(cqe,"STRONG",{});var Lxt=s(jMe);HPr=r(Lxt,"bert"),Lxt.forEach(t),UPr=r(cqe," \u2014 "),hK=n(cqe,"A",{href:!0});var yxt=s(hK);JPr=r(yxt,"FlaxBertForPreTraining"),yxt.forEach(t),YPr=r(cqe," (BERT model)"),cqe.forEach(t),KPr=i(we),j3=n(we,"LI",{});var fqe=s(j3);DMe=n(fqe,"STRONG",{});var xxt=s(DMe);ZPr=r(xxt,"big_bird"),xxt.forEach(t),eBr=r(fqe," \u2014 "),pK=n(fqe,"A",{href:!0});var $xt=s(pK);oBr=r($xt,"FlaxBigBirdForPreTraining"),$xt.forEach(t),rBr=r(fqe," (BigBird model)"),fqe.forEach(t),tBr=i(we),D3=n(we,"LI",{});var mqe=s(D3);GMe=n(mqe,"STRONG",{});var kxt=s(GMe);aBr=r(kxt,"electra"),kxt.forEach(t),nBr=r(mqe," \u2014 "),_K=n(mqe,"A",{href:!0});var Sxt=s(_K);sBr=r(Sxt,"FlaxElectraForPreTraining"),Sxt.forEach(t),lBr=r(mqe," (ELECTRA model)"),mqe.forEach(t),iBr=i(we),G3=n(we,"LI",{});var gqe=s(G3);OMe=n(gqe,"STRONG",{});var Rxt=s(OMe);dBr=r(Rxt,"mbart"),Rxt.forEach(t),cBr=r(gqe," \u2014 "),uK=n(gqe,"A",{href:!0});var Pxt=s(uK);fBr=r(Pxt,"FlaxMBartForConditionalGeneration"),Pxt.forEach(t),mBr=r(gqe," (mBART model)"),gqe.forEach(t),gBr=i(we),O3=n(we,"LI",{});var hqe=s(O3);VMe=n(hqe,"STRONG",{});var Bxt=s(VMe);hBr=r(Bxt,"mt5"),Bxt.forEach(t),pBr=r(hqe," \u2014 "),bK=n(hqe,"A",{href:!0});var Ixt=s(bK);_Br=r(Ixt,"FlaxMT5ForConditionalGeneration"),Ixt.forEach(t),uBr=r(hqe," (MT5 model)"),hqe.forEach(t),bBr=i(we),V3=n(we,"LI",{});var pqe=s(V3);XMe=n(pqe,"STRONG",{});var Nxt=s(XMe);vBr=r(Nxt,"roberta"),Nxt.forEach(t),FBr=r(pqe," \u2014 "),vK=n(pqe,"A",{href:!0});var qxt=s(vK);TBr=r(qxt,"FlaxRobertaForMaskedLM"),qxt.forEach(t),MBr=r(pqe," (RoBERTa model)"),pqe.forEach(t),EBr=i(we),X3=n(we,"LI",{});var _qe=s(X3);zMe=n(_qe,"STRONG",{});var jxt=s(zMe);CBr=r(jxt,"roformer"),jxt.forEach(t),wBr=r(_qe," \u2014 "),FK=n(_qe,"A",{href:!0});var Dxt=s(FK);ABr=r(Dxt,"FlaxRoFormerForMaskedLM"),Dxt.forEach(t),LBr=r(_qe," (RoFormer model)"),_qe.forEach(t),yBr=i(we),z3=n(we,"LI",{});var uqe=s(z3);WMe=n(uqe,"STRONG",{});var Gxt=s(WMe);xBr=r(Gxt,"t5"),Gxt.forEach(t),$Br=r(uqe," \u2014 "),TK=n(uqe,"A",{href:!0});var Oxt=s(TK);kBr=r(Oxt,"FlaxT5ForConditionalGeneration"),Oxt.forEach(t),SBr=r(uqe," (T5 model)"),uqe.forEach(t),RBr=i(we),W3=n(we,"LI",{});var bqe=s(W3);QMe=n(bqe,"STRONG",{});var Vxt=s(QMe);PBr=r(Vxt,"wav2vec2"),Vxt.forEach(t),BBr=r(bqe," \u2014 "),MK=n(bqe,"A",{href:!0});var Xxt=s(MK);IBr=r(Xxt,"FlaxWav2Vec2ForPreTraining"),Xxt.forEach(t),NBr=r(bqe," (Wav2Vec2 model)"),bqe.forEach(t),qBr=i(we),Q3=n(we,"LI",{});var vqe=s(Q3);HMe=n(vqe,"STRONG",{});var zxt=s(HMe);jBr=r(zxt,"xlm-roberta"),zxt.forEach(t),DBr=r(vqe," \u2014 "),EK=n(vqe,"A",{href:!0});var Wxt=s(EK);GBr=r(Wxt,"FlaxXLMRobertaForMaskedLM"),Wxt.forEach(t),OBr=r(vqe," (XLM-RoBERTa model)"),vqe.forEach(t),we.forEach(t),VBr=i(Hl),T(H3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),cGe=i(f),Dc=n(f,"H2",{class:!0});var uVe=s(Dc);U3=n(uVe,"A",{id:!0,class:!0,href:!0});var Qxt=s(U3);UMe=n(Qxt,"SPAN",{});var Hxt=s(UMe);T(sx.$$.fragment,Hxt),Hxt.forEach(t),Qxt.forEach(t),XBr=i(uVe),JMe=n(uVe,"SPAN",{});var Uxt=s(JMe);zBr=r(Uxt,"FlaxAutoModelForMaskedLM"),Uxt.forEach(t),uVe.forEach(t),fGe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(lx.$$.fragment,Ul),WBr=i(Ul),Gc=n(Ul,"P",{});var $oe=s(Gc);QBr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CK=n($oe,"A",{href:!0});var Jxt=s(CK);HBr=r(Jxt,"from_pretrained()"),Jxt.forEach(t),UBr=r($oe," class method or the "),wK=n($oe,"A",{href:!0});var Yxt=s(wK);JBr=r(Yxt,"from_config()"),Yxt.forEach(t),YBr=r($oe,` class
method.`),$oe.forEach(t),KBr=i(Ul),ix=n(Ul,"P",{});var bVe=s(ix);ZBr=r(bVe,"This class cannot be instantiated directly using "),YMe=n(bVe,"CODE",{});var Kxt=s(YMe);eIr=r(Kxt,"__init__()"),Kxt.forEach(t),oIr=r(bVe," (throws an error)."),bVe.forEach(t),rIr=i(Ul),zt=n(Ul,"DIV",{class:!0});var w6=s(zt);T(dx.$$.fragment,w6),tIr=i(w6),KMe=n(w6,"P",{});var Zxt=s(KMe);aIr=r(Zxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zxt.forEach(t),nIr=i(w6),Oc=n(w6,"P",{});var koe=s(Oc);sIr=r(koe,`Note:
Loading a model from its configuration file does `),ZMe=n(koe,"STRONG",{});var e$t=s(ZMe);lIr=r(e$t,"not"),e$t.forEach(t),iIr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(koe,"A",{href:!0});var o$t=s(AK);dIr=r(o$t,"from_pretrained()"),o$t.forEach(t),cIr=r(koe," to load the model weights."),koe.forEach(t),fIr=i(w6),T(J3.$$.fragment,w6),w6.forEach(t),mIr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(cx.$$.fragment,Jl),gIr=i(Jl),eEe=n(Jl,"P",{});var r$t=s(eEe);hIr=r(r$t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r$t.forEach(t),pIr=i(Jl),un=n(Jl,"P",{});var A6=s(un);_Ir=r(A6,"The model class to instantiate is selected based on the "),oEe=n(A6,"CODE",{});var t$t=s(oEe);uIr=r(t$t,"model_type"),t$t.forEach(t),bIr=r(A6,` property of the config object (either
passed as an argument or loaded from `),rEe=n(A6,"CODE",{});var a$t=s(rEe);vIr=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),FIr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(A6,"CODE",{});var n$t=s(tEe);TIr=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),MIr=r(A6,":"),A6.forEach(t),EIr=i(Jl),$e=n(Jl,"UL",{});var qe=s($e);Y3=n(qe,"LI",{});var Fqe=s(Y3);aEe=n(Fqe,"STRONG",{});var s$t=s(aEe);CIr=r(s$t,"albert"),s$t.forEach(t),wIr=r(Fqe," \u2014 "),LK=n(Fqe,"A",{href:!0});var l$t=s(LK);AIr=r(l$t,"FlaxAlbertForMaskedLM"),l$t.forEach(t),LIr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),yIr=i(qe),K3=n(qe,"LI",{});var Tqe=s(K3);nEe=n(Tqe,"STRONG",{});var i$t=s(nEe);xIr=r(i$t,"bart"),i$t.forEach(t),$Ir=r(Tqe," \u2014 "),yK=n(Tqe,"A",{href:!0});var d$t=s(yK);kIr=r(d$t,"FlaxBartForConditionalGeneration"),d$t.forEach(t),SIr=r(Tqe," (BART model)"),Tqe.forEach(t),RIr=i(qe),Z3=n(qe,"LI",{});var Mqe=s(Z3);sEe=n(Mqe,"STRONG",{});var c$t=s(sEe);PIr=r(c$t,"bert"),c$t.forEach(t),BIr=r(Mqe," \u2014 "),xK=n(Mqe,"A",{href:!0});var f$t=s(xK);IIr=r(f$t,"FlaxBertForMaskedLM"),f$t.forEach(t),NIr=r(Mqe," (BERT model)"),Mqe.forEach(t),qIr=i(qe),e0=n(qe,"LI",{});var Eqe=s(e0);lEe=n(Eqe,"STRONG",{});var m$t=s(lEe);jIr=r(m$t,"big_bird"),m$t.forEach(t),DIr=r(Eqe," \u2014 "),$K=n(Eqe,"A",{href:!0});var g$t=s($K);GIr=r(g$t,"FlaxBigBirdForMaskedLM"),g$t.forEach(t),OIr=r(Eqe," (BigBird model)"),Eqe.forEach(t),VIr=i(qe),o0=n(qe,"LI",{});var Cqe=s(o0);iEe=n(Cqe,"STRONG",{});var h$t=s(iEe);XIr=r(h$t,"distilbert"),h$t.forEach(t),zIr=r(Cqe," \u2014 "),kK=n(Cqe,"A",{href:!0});var p$t=s(kK);WIr=r(p$t,"FlaxDistilBertForMaskedLM"),p$t.forEach(t),QIr=r(Cqe," (DistilBERT model)"),Cqe.forEach(t),HIr=i(qe),r0=n(qe,"LI",{});var wqe=s(r0);dEe=n(wqe,"STRONG",{});var _$t=s(dEe);UIr=r(_$t,"electra"),_$t.forEach(t),JIr=r(wqe," \u2014 "),SK=n(wqe,"A",{href:!0});var u$t=s(SK);YIr=r(u$t,"FlaxElectraForMaskedLM"),u$t.forEach(t),KIr=r(wqe," (ELECTRA model)"),wqe.forEach(t),ZIr=i(qe),t0=n(qe,"LI",{});var Aqe=s(t0);cEe=n(Aqe,"STRONG",{});var b$t=s(cEe);eNr=r(b$t,"mbart"),b$t.forEach(t),oNr=r(Aqe," \u2014 "),RK=n(Aqe,"A",{href:!0});var v$t=s(RK);rNr=r(v$t,"FlaxMBartForConditionalGeneration"),v$t.forEach(t),tNr=r(Aqe," (mBART model)"),Aqe.forEach(t),aNr=i(qe),a0=n(qe,"LI",{});var Lqe=s(a0);fEe=n(Lqe,"STRONG",{});var F$t=s(fEe);nNr=r(F$t,"roberta"),F$t.forEach(t),sNr=r(Lqe," \u2014 "),PK=n(Lqe,"A",{href:!0});var T$t=s(PK);lNr=r(T$t,"FlaxRobertaForMaskedLM"),T$t.forEach(t),iNr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),dNr=i(qe),n0=n(qe,"LI",{});var yqe=s(n0);mEe=n(yqe,"STRONG",{});var M$t=s(mEe);cNr=r(M$t,"roformer"),M$t.forEach(t),fNr=r(yqe," \u2014 "),BK=n(yqe,"A",{href:!0});var E$t=s(BK);mNr=r(E$t,"FlaxRoFormerForMaskedLM"),E$t.forEach(t),gNr=r(yqe," (RoFormer model)"),yqe.forEach(t),hNr=i(qe),s0=n(qe,"LI",{});var xqe=s(s0);gEe=n(xqe,"STRONG",{});var C$t=s(gEe);pNr=r(C$t,"xlm-roberta"),C$t.forEach(t),_Nr=r(xqe," \u2014 "),IK=n(xqe,"A",{href:!0});var w$t=s(IK);uNr=r(w$t,"FlaxXLMRobertaForMaskedLM"),w$t.forEach(t),bNr=r(xqe," (XLM-RoBERTa model)"),xqe.forEach(t),qe.forEach(t),vNr=i(Jl),T(l0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),mGe=i(f),Vc=n(f,"H2",{class:!0});var vVe=s(Vc);i0=n(vVe,"A",{id:!0,class:!0,href:!0});var A$t=s(i0);hEe=n(A$t,"SPAN",{});var L$t=s(hEe);T(fx.$$.fragment,L$t),L$t.forEach(t),A$t.forEach(t),FNr=i(vVe),pEe=n(vVe,"SPAN",{});var y$t=s(pEe);TNr=r(y$t,"FlaxAutoModelForSeq2SeqLM"),y$t.forEach(t),vVe.forEach(t),gGe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(mx.$$.fragment,Yl),MNr=i(Yl),Xc=n(Yl,"P",{});var Soe=s(Xc);ENr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NK=n(Soe,"A",{href:!0});var x$t=s(NK);CNr=r(x$t,"from_pretrained()"),x$t.forEach(t),wNr=r(Soe," class method or the "),qK=n(Soe,"A",{href:!0});var $$t=s(qK);ANr=r($$t,"from_config()"),$$t.forEach(t),LNr=r(Soe,` class
method.`),Soe.forEach(t),yNr=i(Yl),gx=n(Yl,"P",{});var FVe=s(gx);xNr=r(FVe,"This class cannot be instantiated directly using "),_Ee=n(FVe,"CODE",{});var k$t=s(_Ee);$Nr=r(k$t,"__init__()"),k$t.forEach(t),kNr=r(FVe," (throws an error)."),FVe.forEach(t),SNr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var L6=s(Wt);T(hx.$$.fragment,L6),RNr=i(L6),uEe=n(L6,"P",{});var S$t=s(uEe);PNr=r(S$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S$t.forEach(t),BNr=i(L6),zc=n(L6,"P",{});var Roe=s(zc);INr=r(Roe,`Note:
Loading a model from its configuration file does `),bEe=n(Roe,"STRONG",{});var R$t=s(bEe);NNr=r(R$t,"not"),R$t.forEach(t),qNr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Roe,"A",{href:!0});var P$t=s(jK);jNr=r(P$t,"from_pretrained()"),P$t.forEach(t),DNr=r(Roe," to load the model weights."),Roe.forEach(t),GNr=i(L6),T(d0.$$.fragment,L6),L6.forEach(t),ONr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(px.$$.fragment,Kl),VNr=i(Kl),vEe=n(Kl,"P",{});var B$t=s(vEe);XNr=r(B$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B$t.forEach(t),zNr=i(Kl),bn=n(Kl,"P",{});var y6=s(bn);WNr=r(y6,"The model class to instantiate is selected based on the "),FEe=n(y6,"CODE",{});var I$t=s(FEe);QNr=r(I$t,"model_type"),I$t.forEach(t),HNr=r(y6,` property of the config object (either
passed as an argument or loaded from `),TEe=n(y6,"CODE",{});var N$t=s(TEe);UNr=r(N$t,"pretrained_model_name_or_path"),N$t.forEach(t),JNr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(y6,"CODE",{});var q$t=s(MEe);YNr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),KNr=r(y6,":"),y6.forEach(t),ZNr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);c0=n(ze,"LI",{});var $qe=s(c0);EEe=n($qe,"STRONG",{});var j$t=s(EEe);eqr=r(j$t,"bart"),j$t.forEach(t),oqr=r($qe," \u2014 "),DK=n($qe,"A",{href:!0});var D$t=s(DK);rqr=r(D$t,"FlaxBartForConditionalGeneration"),D$t.forEach(t),tqr=r($qe," (BART model)"),$qe.forEach(t),aqr=i(ze),f0=n(ze,"LI",{});var kqe=s(f0);CEe=n(kqe,"STRONG",{});var G$t=s(CEe);nqr=r(G$t,"blenderbot"),G$t.forEach(t),sqr=r(kqe," \u2014 "),GK=n(kqe,"A",{href:!0});var O$t=s(GK);lqr=r(O$t,"FlaxBlenderbotForConditionalGeneration"),O$t.forEach(t),iqr=r(kqe," (Blenderbot model)"),kqe.forEach(t),dqr=i(ze),m0=n(ze,"LI",{});var Sqe=s(m0);wEe=n(Sqe,"STRONG",{});var V$t=s(wEe);cqr=r(V$t,"blenderbot-small"),V$t.forEach(t),fqr=r(Sqe," \u2014 "),OK=n(Sqe,"A",{href:!0});var X$t=s(OK);mqr=r(X$t,"FlaxBlenderbotSmallForConditionalGeneration"),X$t.forEach(t),gqr=r(Sqe," (BlenderbotSmall model)"),Sqe.forEach(t),hqr=i(ze),g0=n(ze,"LI",{});var Rqe=s(g0);AEe=n(Rqe,"STRONG",{});var z$t=s(AEe);pqr=r(z$t,"encoder-decoder"),z$t.forEach(t),_qr=r(Rqe," \u2014 "),VK=n(Rqe,"A",{href:!0});var W$t=s(VK);uqr=r(W$t,"FlaxEncoderDecoderModel"),W$t.forEach(t),bqr=r(Rqe," (Encoder decoder model)"),Rqe.forEach(t),vqr=i(ze),h0=n(ze,"LI",{});var Pqe=s(h0);LEe=n(Pqe,"STRONG",{});var Q$t=s(LEe);Fqr=r(Q$t,"marian"),Q$t.forEach(t),Tqr=r(Pqe," \u2014 "),XK=n(Pqe,"A",{href:!0});var H$t=s(XK);Mqr=r(H$t,"FlaxMarianMTModel"),H$t.forEach(t),Eqr=r(Pqe," (Marian model)"),Pqe.forEach(t),Cqr=i(ze),p0=n(ze,"LI",{});var Bqe=s(p0);yEe=n(Bqe,"STRONG",{});var U$t=s(yEe);wqr=r(U$t,"mbart"),U$t.forEach(t),Aqr=r(Bqe," \u2014 "),zK=n(Bqe,"A",{href:!0});var J$t=s(zK);Lqr=r(J$t,"FlaxMBartForConditionalGeneration"),J$t.forEach(t),yqr=r(Bqe," (mBART model)"),Bqe.forEach(t),xqr=i(ze),_0=n(ze,"LI",{});var Iqe=s(_0);xEe=n(Iqe,"STRONG",{});var Y$t=s(xEe);$qr=r(Y$t,"mt5"),Y$t.forEach(t),kqr=r(Iqe," \u2014 "),WK=n(Iqe,"A",{href:!0});var K$t=s(WK);Sqr=r(K$t,"FlaxMT5ForConditionalGeneration"),K$t.forEach(t),Rqr=r(Iqe," (MT5 model)"),Iqe.forEach(t),Pqr=i(ze),u0=n(ze,"LI",{});var Nqe=s(u0);$Ee=n(Nqe,"STRONG",{});var Z$t=s($Ee);Bqr=r(Z$t,"pegasus"),Z$t.forEach(t),Iqr=r(Nqe," \u2014 "),QK=n(Nqe,"A",{href:!0});var ekt=s(QK);Nqr=r(ekt,"FlaxPegasusForConditionalGeneration"),ekt.forEach(t),qqr=r(Nqe," (Pegasus model)"),Nqe.forEach(t),jqr=i(ze),b0=n(ze,"LI",{});var qqe=s(b0);kEe=n(qqe,"STRONG",{});var okt=s(kEe);Dqr=r(okt,"t5"),okt.forEach(t),Gqr=r(qqe," \u2014 "),HK=n(qqe,"A",{href:!0});var rkt=s(HK);Oqr=r(rkt,"FlaxT5ForConditionalGeneration"),rkt.forEach(t),Vqr=r(qqe," (T5 model)"),qqe.forEach(t),ze.forEach(t),Xqr=i(Kl),T(v0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),hGe=i(f),Wc=n(f,"H2",{class:!0});var TVe=s(Wc);F0=n(TVe,"A",{id:!0,class:!0,href:!0});var tkt=s(F0);SEe=n(tkt,"SPAN",{});var akt=s(SEe);T(_x.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),zqr=i(TVe),REe=n(TVe,"SPAN",{});var nkt=s(REe);Wqr=r(nkt,"FlaxAutoModelForSequenceClassification"),nkt.forEach(t),TVe.forEach(t),pGe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(ux.$$.fragment,Zl),Qqr=i(Zl),Qc=n(Zl,"P",{});var Poe=s(Qc);Hqr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UK=n(Poe,"A",{href:!0});var skt=s(UK);Uqr=r(skt,"from_pretrained()"),skt.forEach(t),Jqr=r(Poe," class method or the "),JK=n(Poe,"A",{href:!0});var lkt=s(JK);Yqr=r(lkt,"from_config()"),lkt.forEach(t),Kqr=r(Poe,` class
method.`),Poe.forEach(t),Zqr=i(Zl),bx=n(Zl,"P",{});var MVe=s(bx);ejr=r(MVe,"This class cannot be instantiated directly using "),PEe=n(MVe,"CODE",{});var ikt=s(PEe);ojr=r(ikt,"__init__()"),ikt.forEach(t),rjr=r(MVe," (throws an error)."),MVe.forEach(t),tjr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var x6=s(Qt);T(vx.$$.fragment,x6),ajr=i(x6),BEe=n(x6,"P",{});var dkt=s(BEe);njr=r(dkt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dkt.forEach(t),sjr=i(x6),Hc=n(x6,"P",{});var Boe=s(Hc);ljr=r(Boe,`Note:
Loading a model from its configuration file does `),IEe=n(Boe,"STRONG",{});var ckt=s(IEe);ijr=r(ckt,"not"),ckt.forEach(t),djr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(Boe,"A",{href:!0});var fkt=s(YK);cjr=r(fkt,"from_pretrained()"),fkt.forEach(t),fjr=r(Boe," to load the model weights."),Boe.forEach(t),mjr=i(x6),T(T0.$$.fragment,x6),x6.forEach(t),gjr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(Fx.$$.fragment,ei),hjr=i(ei),NEe=n(ei,"P",{});var mkt=s(NEe);pjr=r(mkt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mkt.forEach(t),_jr=i(ei),vn=n(ei,"P",{});var $6=s(vn);ujr=r($6,"The model class to instantiate is selected based on the "),qEe=n($6,"CODE",{});var gkt=s(qEe);bjr=r(gkt,"model_type"),gkt.forEach(t),vjr=r($6,` property of the config object (either
passed as an argument or loaded from `),jEe=n($6,"CODE",{});var hkt=s(jEe);Fjr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),Tjr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n($6,"CODE",{});var pkt=s(DEe);Mjr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),Ejr=r($6,":"),$6.forEach(t),Cjr=i(ei),ke=n(ei,"UL",{});var je=s(ke);M0=n(je,"LI",{});var jqe=s(M0);GEe=n(jqe,"STRONG",{});var _kt=s(GEe);wjr=r(_kt,"albert"),_kt.forEach(t),Ajr=r(jqe," \u2014 "),KK=n(jqe,"A",{href:!0});var ukt=s(KK);Ljr=r(ukt,"FlaxAlbertForSequenceClassification"),ukt.forEach(t),yjr=r(jqe," (ALBERT model)"),jqe.forEach(t),xjr=i(je),E0=n(je,"LI",{});var Dqe=s(E0);OEe=n(Dqe,"STRONG",{});var bkt=s(OEe);$jr=r(bkt,"bart"),bkt.forEach(t),kjr=r(Dqe," \u2014 "),ZK=n(Dqe,"A",{href:!0});var vkt=s(ZK);Sjr=r(vkt,"FlaxBartForSequenceClassification"),vkt.forEach(t),Rjr=r(Dqe," (BART model)"),Dqe.forEach(t),Pjr=i(je),C0=n(je,"LI",{});var Gqe=s(C0);VEe=n(Gqe,"STRONG",{});var Fkt=s(VEe);Bjr=r(Fkt,"bert"),Fkt.forEach(t),Ijr=r(Gqe," \u2014 "),eZ=n(Gqe,"A",{href:!0});var Tkt=s(eZ);Njr=r(Tkt,"FlaxBertForSequenceClassification"),Tkt.forEach(t),qjr=r(Gqe," (BERT model)"),Gqe.forEach(t),jjr=i(je),w0=n(je,"LI",{});var Oqe=s(w0);XEe=n(Oqe,"STRONG",{});var Mkt=s(XEe);Djr=r(Mkt,"big_bird"),Mkt.forEach(t),Gjr=r(Oqe," \u2014 "),oZ=n(Oqe,"A",{href:!0});var Ekt=s(oZ);Ojr=r(Ekt,"FlaxBigBirdForSequenceClassification"),Ekt.forEach(t),Vjr=r(Oqe," (BigBird model)"),Oqe.forEach(t),Xjr=i(je),A0=n(je,"LI",{});var Vqe=s(A0);zEe=n(Vqe,"STRONG",{});var Ckt=s(zEe);zjr=r(Ckt,"distilbert"),Ckt.forEach(t),Wjr=r(Vqe," \u2014 "),rZ=n(Vqe,"A",{href:!0});var wkt=s(rZ);Qjr=r(wkt,"FlaxDistilBertForSequenceClassification"),wkt.forEach(t),Hjr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),Ujr=i(je),L0=n(je,"LI",{});var Xqe=s(L0);WEe=n(Xqe,"STRONG",{});var Akt=s(WEe);Jjr=r(Akt,"electra"),Akt.forEach(t),Yjr=r(Xqe," \u2014 "),tZ=n(Xqe,"A",{href:!0});var Lkt=s(tZ);Kjr=r(Lkt,"FlaxElectraForSequenceClassification"),Lkt.forEach(t),Zjr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),eDr=i(je),y0=n(je,"LI",{});var zqe=s(y0);QEe=n(zqe,"STRONG",{});var ykt=s(QEe);oDr=r(ykt,"mbart"),ykt.forEach(t),rDr=r(zqe," \u2014 "),aZ=n(zqe,"A",{href:!0});var xkt=s(aZ);tDr=r(xkt,"FlaxMBartForSequenceClassification"),xkt.forEach(t),aDr=r(zqe," (mBART model)"),zqe.forEach(t),nDr=i(je),x0=n(je,"LI",{});var Wqe=s(x0);HEe=n(Wqe,"STRONG",{});var $kt=s(HEe);sDr=r($kt,"roberta"),$kt.forEach(t),lDr=r(Wqe," \u2014 "),nZ=n(Wqe,"A",{href:!0});var kkt=s(nZ);iDr=r(kkt,"FlaxRobertaForSequenceClassification"),kkt.forEach(t),dDr=r(Wqe," (RoBERTa model)"),Wqe.forEach(t),cDr=i(je),$0=n(je,"LI",{});var Qqe=s($0);UEe=n(Qqe,"STRONG",{});var Skt=s(UEe);fDr=r(Skt,"roformer"),Skt.forEach(t),mDr=r(Qqe," \u2014 "),sZ=n(Qqe,"A",{href:!0});var Rkt=s(sZ);gDr=r(Rkt,"FlaxRoFormerForSequenceClassification"),Rkt.forEach(t),hDr=r(Qqe," (RoFormer model)"),Qqe.forEach(t),pDr=i(je),k0=n(je,"LI",{});var Hqe=s(k0);JEe=n(Hqe,"STRONG",{});var Pkt=s(JEe);_Dr=r(Pkt,"xlm-roberta"),Pkt.forEach(t),uDr=r(Hqe," \u2014 "),lZ=n(Hqe,"A",{href:!0});var Bkt=s(lZ);bDr=r(Bkt,"FlaxXLMRobertaForSequenceClassification"),Bkt.forEach(t),vDr=r(Hqe," (XLM-RoBERTa model)"),Hqe.forEach(t),je.forEach(t),FDr=i(ei),T(S0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),_Ge=i(f),Uc=n(f,"H2",{class:!0});var EVe=s(Uc);R0=n(EVe,"A",{id:!0,class:!0,href:!0});var Ikt=s(R0);YEe=n(Ikt,"SPAN",{});var Nkt=s(YEe);T(Tx.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),TDr=i(EVe),KEe=n(EVe,"SPAN",{});var qkt=s(KEe);MDr=r(qkt,"FlaxAutoModelForQuestionAnswering"),qkt.forEach(t),EVe.forEach(t),uGe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(Mx.$$.fragment,oi),EDr=i(oi),Jc=n(oi,"P",{});var Ioe=s(Jc);CDr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iZ=n(Ioe,"A",{href:!0});var jkt=s(iZ);wDr=r(jkt,"from_pretrained()"),jkt.forEach(t),ADr=r(Ioe," class method or the "),dZ=n(Ioe,"A",{href:!0});var Dkt=s(dZ);LDr=r(Dkt,"from_config()"),Dkt.forEach(t),yDr=r(Ioe,` class
method.`),Ioe.forEach(t),xDr=i(oi),Ex=n(oi,"P",{});var CVe=s(Ex);$Dr=r(CVe,"This class cannot be instantiated directly using "),ZEe=n(CVe,"CODE",{});var Gkt=s(ZEe);kDr=r(Gkt,"__init__()"),Gkt.forEach(t),SDr=r(CVe," (throws an error)."),CVe.forEach(t),RDr=i(oi),Ht=n(oi,"DIV",{class:!0});var k6=s(Ht);T(Cx.$$.fragment,k6),PDr=i(k6),eCe=n(k6,"P",{});var Okt=s(eCe);BDr=r(Okt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Okt.forEach(t),IDr=i(k6),Yc=n(k6,"P",{});var Noe=s(Yc);NDr=r(Noe,`Note:
Loading a model from its configuration file does `),oCe=n(Noe,"STRONG",{});var Vkt=s(oCe);qDr=r(Vkt,"not"),Vkt.forEach(t),jDr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cZ=n(Noe,"A",{href:!0});var Xkt=s(cZ);DDr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),GDr=r(Noe," to load the model weights."),Noe.forEach(t),ODr=i(k6),T(P0.$$.fragment,k6),k6.forEach(t),VDr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(wx.$$.fragment,ri),XDr=i(ri),rCe=n(ri,"P",{});var zkt=s(rCe);zDr=r(zkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zkt.forEach(t),WDr=i(ri),Fn=n(ri,"P",{});var S6=s(Fn);QDr=r(S6,"The model class to instantiate is selected based on the "),tCe=n(S6,"CODE",{});var Wkt=s(tCe);HDr=r(Wkt,"model_type"),Wkt.forEach(t),UDr=r(S6,` property of the config object (either
passed as an argument or loaded from `),aCe=n(S6,"CODE",{});var Qkt=s(aCe);JDr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),YDr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(S6,"CODE",{});var Hkt=s(nCe);KDr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),ZDr=r(S6,":"),S6.forEach(t),eGr=i(ri),Se=n(ri,"UL",{});var De=s(Se);B0=n(De,"LI",{});var Uqe=s(B0);sCe=n(Uqe,"STRONG",{});var Ukt=s(sCe);oGr=r(Ukt,"albert"),Ukt.forEach(t),rGr=r(Uqe," \u2014 "),fZ=n(Uqe,"A",{href:!0});var Jkt=s(fZ);tGr=r(Jkt,"FlaxAlbertForQuestionAnswering"),Jkt.forEach(t),aGr=r(Uqe," (ALBERT model)"),Uqe.forEach(t),nGr=i(De),I0=n(De,"LI",{});var Jqe=s(I0);lCe=n(Jqe,"STRONG",{});var Ykt=s(lCe);sGr=r(Ykt,"bart"),Ykt.forEach(t),lGr=r(Jqe," \u2014 "),mZ=n(Jqe,"A",{href:!0});var Kkt=s(mZ);iGr=r(Kkt,"FlaxBartForQuestionAnswering"),Kkt.forEach(t),dGr=r(Jqe," (BART model)"),Jqe.forEach(t),cGr=i(De),N0=n(De,"LI",{});var Yqe=s(N0);iCe=n(Yqe,"STRONG",{});var Zkt=s(iCe);fGr=r(Zkt,"bert"),Zkt.forEach(t),mGr=r(Yqe," \u2014 "),gZ=n(Yqe,"A",{href:!0});var eSt=s(gZ);gGr=r(eSt,"FlaxBertForQuestionAnswering"),eSt.forEach(t),hGr=r(Yqe," (BERT model)"),Yqe.forEach(t),pGr=i(De),q0=n(De,"LI",{});var Kqe=s(q0);dCe=n(Kqe,"STRONG",{});var oSt=s(dCe);_Gr=r(oSt,"big_bird"),oSt.forEach(t),uGr=r(Kqe," \u2014 "),hZ=n(Kqe,"A",{href:!0});var rSt=s(hZ);bGr=r(rSt,"FlaxBigBirdForQuestionAnswering"),rSt.forEach(t),vGr=r(Kqe," (BigBird model)"),Kqe.forEach(t),FGr=i(De),j0=n(De,"LI",{});var Zqe=s(j0);cCe=n(Zqe,"STRONG",{});var tSt=s(cCe);TGr=r(tSt,"distilbert"),tSt.forEach(t),MGr=r(Zqe," \u2014 "),pZ=n(Zqe,"A",{href:!0});var aSt=s(pZ);EGr=r(aSt,"FlaxDistilBertForQuestionAnswering"),aSt.forEach(t),CGr=r(Zqe," (DistilBERT model)"),Zqe.forEach(t),wGr=i(De),D0=n(De,"LI",{});var eje=s(D0);fCe=n(eje,"STRONG",{});var nSt=s(fCe);AGr=r(nSt,"electra"),nSt.forEach(t),LGr=r(eje," \u2014 "),_Z=n(eje,"A",{href:!0});var sSt=s(_Z);yGr=r(sSt,"FlaxElectraForQuestionAnswering"),sSt.forEach(t),xGr=r(eje," (ELECTRA model)"),eje.forEach(t),$Gr=i(De),G0=n(De,"LI",{});var oje=s(G0);mCe=n(oje,"STRONG",{});var lSt=s(mCe);kGr=r(lSt,"mbart"),lSt.forEach(t),SGr=r(oje," \u2014 "),uZ=n(oje,"A",{href:!0});var iSt=s(uZ);RGr=r(iSt,"FlaxMBartForQuestionAnswering"),iSt.forEach(t),PGr=r(oje," (mBART model)"),oje.forEach(t),BGr=i(De),O0=n(De,"LI",{});var rje=s(O0);gCe=n(rje,"STRONG",{});var dSt=s(gCe);IGr=r(dSt,"roberta"),dSt.forEach(t),NGr=r(rje," \u2014 "),bZ=n(rje,"A",{href:!0});var cSt=s(bZ);qGr=r(cSt,"FlaxRobertaForQuestionAnswering"),cSt.forEach(t),jGr=r(rje," (RoBERTa model)"),rje.forEach(t),DGr=i(De),V0=n(De,"LI",{});var tje=s(V0);hCe=n(tje,"STRONG",{});var fSt=s(hCe);GGr=r(fSt,"roformer"),fSt.forEach(t),OGr=r(tje," \u2014 "),vZ=n(tje,"A",{href:!0});var mSt=s(vZ);VGr=r(mSt,"FlaxRoFormerForQuestionAnswering"),mSt.forEach(t),XGr=r(tje," (RoFormer model)"),tje.forEach(t),zGr=i(De),X0=n(De,"LI",{});var aje=s(X0);pCe=n(aje,"STRONG",{});var gSt=s(pCe);WGr=r(gSt,"xlm-roberta"),gSt.forEach(t),QGr=r(aje," \u2014 "),FZ=n(aje,"A",{href:!0});var hSt=s(FZ);HGr=r(hSt,"FlaxXLMRobertaForQuestionAnswering"),hSt.forEach(t),UGr=r(aje," (XLM-RoBERTa model)"),aje.forEach(t),De.forEach(t),JGr=i(ri),T(z0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),bGe=i(f),Kc=n(f,"H2",{class:!0});var wVe=s(Kc);W0=n(wVe,"A",{id:!0,class:!0,href:!0});var pSt=s(W0);_Ce=n(pSt,"SPAN",{});var _St=s(_Ce);T(Ax.$$.fragment,_St),_St.forEach(t),pSt.forEach(t),YGr=i(wVe),uCe=n(wVe,"SPAN",{});var uSt=s(uCe);KGr=r(uSt,"FlaxAutoModelForTokenClassification"),uSt.forEach(t),wVe.forEach(t),vGe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(Lx.$$.fragment,ti),ZGr=i(ti),Zc=n(ti,"P",{});var qoe=s(Zc);eOr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TZ=n(qoe,"A",{href:!0});var bSt=s(TZ);oOr=r(bSt,"from_pretrained()"),bSt.forEach(t),rOr=r(qoe," class method or the "),MZ=n(qoe,"A",{href:!0});var vSt=s(MZ);tOr=r(vSt,"from_config()"),vSt.forEach(t),aOr=r(qoe,` class
method.`),qoe.forEach(t),nOr=i(ti),yx=n(ti,"P",{});var AVe=s(yx);sOr=r(AVe,"This class cannot be instantiated directly using "),bCe=n(AVe,"CODE",{});var FSt=s(bCe);lOr=r(FSt,"__init__()"),FSt.forEach(t),iOr=r(AVe," (throws an error)."),AVe.forEach(t),dOr=i(ti),Ut=n(ti,"DIV",{class:!0});var R6=s(Ut);T(xx.$$.fragment,R6),cOr=i(R6),vCe=n(R6,"P",{});var TSt=s(vCe);fOr=r(TSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TSt.forEach(t),mOr=i(R6),ef=n(R6,"P",{});var joe=s(ef);gOr=r(joe,`Note:
Loading a model from its configuration file does `),FCe=n(joe,"STRONG",{});var MSt=s(FCe);hOr=r(MSt,"not"),MSt.forEach(t),pOr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(joe,"A",{href:!0});var ESt=s(EZ);_Or=r(ESt,"from_pretrained()"),ESt.forEach(t),uOr=r(joe," to load the model weights."),joe.forEach(t),bOr=i(R6),T(Q0.$$.fragment,R6),R6.forEach(t),vOr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T($x.$$.fragment,ai),FOr=i(ai),TCe=n(ai,"P",{});var CSt=s(TCe);TOr=r(CSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CSt.forEach(t),MOr=i(ai),Tn=n(ai,"P",{});var P6=s(Tn);EOr=r(P6,"The model class to instantiate is selected based on the "),MCe=n(P6,"CODE",{});var wSt=s(MCe);COr=r(wSt,"model_type"),wSt.forEach(t),wOr=r(P6,` property of the config object (either
passed as an argument or loaded from `),ECe=n(P6,"CODE",{});var ASt=s(ECe);AOr=r(ASt,"pretrained_model_name_or_path"),ASt.forEach(t),LOr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=n(P6,"CODE",{});var LSt=s(CCe);yOr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),xOr=r(P6,":"),P6.forEach(t),$Or=i(ai),Oe=n(ai,"UL",{});var Fo=s(Oe);H0=n(Fo,"LI",{});var nje=s(H0);wCe=n(nje,"STRONG",{});var ySt=s(wCe);kOr=r(ySt,"albert"),ySt.forEach(t),SOr=r(nje," \u2014 "),CZ=n(nje,"A",{href:!0});var xSt=s(CZ);ROr=r(xSt,"FlaxAlbertForTokenClassification"),xSt.forEach(t),POr=r(nje," (ALBERT model)"),nje.forEach(t),BOr=i(Fo),U0=n(Fo,"LI",{});var sje=s(U0);ACe=n(sje,"STRONG",{});var $St=s(ACe);IOr=r($St,"bert"),$St.forEach(t),NOr=r(sje," \u2014 "),wZ=n(sje,"A",{href:!0});var kSt=s(wZ);qOr=r(kSt,"FlaxBertForTokenClassification"),kSt.forEach(t),jOr=r(sje," (BERT model)"),sje.forEach(t),DOr=i(Fo),J0=n(Fo,"LI",{});var lje=s(J0);LCe=n(lje,"STRONG",{});var SSt=s(LCe);GOr=r(SSt,"big_bird"),SSt.forEach(t),OOr=r(lje," \u2014 "),AZ=n(lje,"A",{href:!0});var RSt=s(AZ);VOr=r(RSt,"FlaxBigBirdForTokenClassification"),RSt.forEach(t),XOr=r(lje," (BigBird model)"),lje.forEach(t),zOr=i(Fo),Y0=n(Fo,"LI",{});var ije=s(Y0);yCe=n(ije,"STRONG",{});var PSt=s(yCe);WOr=r(PSt,"distilbert"),PSt.forEach(t),QOr=r(ije," \u2014 "),LZ=n(ije,"A",{href:!0});var BSt=s(LZ);HOr=r(BSt,"FlaxDistilBertForTokenClassification"),BSt.forEach(t),UOr=r(ije," (DistilBERT model)"),ije.forEach(t),JOr=i(Fo),K0=n(Fo,"LI",{});var dje=s(K0);xCe=n(dje,"STRONG",{});var ISt=s(xCe);YOr=r(ISt,"electra"),ISt.forEach(t),KOr=r(dje," \u2014 "),yZ=n(dje,"A",{href:!0});var NSt=s(yZ);ZOr=r(NSt,"FlaxElectraForTokenClassification"),NSt.forEach(t),eVr=r(dje," (ELECTRA model)"),dje.forEach(t),oVr=i(Fo),Z0=n(Fo,"LI",{});var cje=s(Z0);$Ce=n(cje,"STRONG",{});var qSt=s($Ce);rVr=r(qSt,"roberta"),qSt.forEach(t),tVr=r(cje," \u2014 "),xZ=n(cje,"A",{href:!0});var jSt=s(xZ);aVr=r(jSt,"FlaxRobertaForTokenClassification"),jSt.forEach(t),nVr=r(cje," (RoBERTa model)"),cje.forEach(t),sVr=i(Fo),ew=n(Fo,"LI",{});var fje=s(ew);kCe=n(fje,"STRONG",{});var DSt=s(kCe);lVr=r(DSt,"roformer"),DSt.forEach(t),iVr=r(fje," \u2014 "),$Z=n(fje,"A",{href:!0});var GSt=s($Z);dVr=r(GSt,"FlaxRoFormerForTokenClassification"),GSt.forEach(t),cVr=r(fje," (RoFormer model)"),fje.forEach(t),fVr=i(Fo),ow=n(Fo,"LI",{});var mje=s(ow);SCe=n(mje,"STRONG",{});var OSt=s(SCe);mVr=r(OSt,"xlm-roberta"),OSt.forEach(t),gVr=r(mje," \u2014 "),kZ=n(mje,"A",{href:!0});var VSt=s(kZ);hVr=r(VSt,"FlaxXLMRobertaForTokenClassification"),VSt.forEach(t),pVr=r(mje," (XLM-RoBERTa model)"),mje.forEach(t),Fo.forEach(t),_Vr=i(ai),T(rw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),FGe=i(f),of=n(f,"H2",{class:!0});var LVe=s(of);tw=n(LVe,"A",{id:!0,class:!0,href:!0});var XSt=s(tw);RCe=n(XSt,"SPAN",{});var zSt=s(RCe);T(kx.$$.fragment,zSt),zSt.forEach(t),XSt.forEach(t),uVr=i(LVe),PCe=n(LVe,"SPAN",{});var WSt=s(PCe);bVr=r(WSt,"FlaxAutoModelForMultipleChoice"),WSt.forEach(t),LVe.forEach(t),TGe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Sx.$$.fragment,ni),vVr=i(ni),rf=n(ni,"P",{});var Doe=s(rf);FVr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SZ=n(Doe,"A",{href:!0});var QSt=s(SZ);TVr=r(QSt,"from_pretrained()"),QSt.forEach(t),MVr=r(Doe," class method or the "),RZ=n(Doe,"A",{href:!0});var HSt=s(RZ);EVr=r(HSt,"from_config()"),HSt.forEach(t),CVr=r(Doe,` class
method.`),Doe.forEach(t),wVr=i(ni),Rx=n(ni,"P",{});var yVe=s(Rx);AVr=r(yVe,"This class cannot be instantiated directly using "),BCe=n(yVe,"CODE",{});var USt=s(BCe);LVr=r(USt,"__init__()"),USt.forEach(t),yVr=r(yVe," (throws an error)."),yVe.forEach(t),xVr=i(ni),Jt=n(ni,"DIV",{class:!0});var B6=s(Jt);T(Px.$$.fragment,B6),$Vr=i(B6),ICe=n(B6,"P",{});var JSt=s(ICe);kVr=r(JSt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JSt.forEach(t),SVr=i(B6),tf=n(B6,"P",{});var Goe=s(tf);RVr=r(Goe,`Note:
Loading a model from its configuration file does `),NCe=n(Goe,"STRONG",{});var YSt=s(NCe);PVr=r(YSt,"not"),YSt.forEach(t),BVr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(Goe,"A",{href:!0});var KSt=s(PZ);IVr=r(KSt,"from_pretrained()"),KSt.forEach(t),NVr=r(Goe," to load the model weights."),Goe.forEach(t),qVr=i(B6),T(aw.$$.fragment,B6),B6.forEach(t),jVr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(Bx.$$.fragment,si),DVr=i(si),qCe=n(si,"P",{});var ZSt=s(qCe);GVr=r(ZSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZSt.forEach(t),OVr=i(si),Mn=n(si,"P",{});var I6=s(Mn);VVr=r(I6,"The model class to instantiate is selected based on the "),jCe=n(I6,"CODE",{});var eRt=s(jCe);XVr=r(eRt,"model_type"),eRt.forEach(t),zVr=r(I6,` property of the config object (either
passed as an argument or loaded from `),DCe=n(I6,"CODE",{});var oRt=s(DCe);WVr=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),QVr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=n(I6,"CODE",{});var rRt=s(GCe);HVr=r(rRt,"pretrained_model_name_or_path"),rRt.forEach(t),UVr=r(I6,":"),I6.forEach(t),JVr=i(si),Ve=n(si,"UL",{});var To=s(Ve);nw=n(To,"LI",{});var gje=s(nw);OCe=n(gje,"STRONG",{});var tRt=s(OCe);YVr=r(tRt,"albert"),tRt.forEach(t),KVr=r(gje," \u2014 "),BZ=n(gje,"A",{href:!0});var aRt=s(BZ);ZVr=r(aRt,"FlaxAlbertForMultipleChoice"),aRt.forEach(t),eXr=r(gje," (ALBERT model)"),gje.forEach(t),oXr=i(To),sw=n(To,"LI",{});var hje=s(sw);VCe=n(hje,"STRONG",{});var nRt=s(VCe);rXr=r(nRt,"bert"),nRt.forEach(t),tXr=r(hje," \u2014 "),IZ=n(hje,"A",{href:!0});var sRt=s(IZ);aXr=r(sRt,"FlaxBertForMultipleChoice"),sRt.forEach(t),nXr=r(hje," (BERT model)"),hje.forEach(t),sXr=i(To),lw=n(To,"LI",{});var pje=s(lw);XCe=n(pje,"STRONG",{});var lRt=s(XCe);lXr=r(lRt,"big_bird"),lRt.forEach(t),iXr=r(pje," \u2014 "),NZ=n(pje,"A",{href:!0});var iRt=s(NZ);dXr=r(iRt,"FlaxBigBirdForMultipleChoice"),iRt.forEach(t),cXr=r(pje," (BigBird model)"),pje.forEach(t),fXr=i(To),iw=n(To,"LI",{});var _je=s(iw);zCe=n(_je,"STRONG",{});var dRt=s(zCe);mXr=r(dRt,"distilbert"),dRt.forEach(t),gXr=r(_je," \u2014 "),qZ=n(_je,"A",{href:!0});var cRt=s(qZ);hXr=r(cRt,"FlaxDistilBertForMultipleChoice"),cRt.forEach(t),pXr=r(_je," (DistilBERT model)"),_je.forEach(t),_Xr=i(To),dw=n(To,"LI",{});var uje=s(dw);WCe=n(uje,"STRONG",{});var fRt=s(WCe);uXr=r(fRt,"electra"),fRt.forEach(t),bXr=r(uje," \u2014 "),jZ=n(uje,"A",{href:!0});var mRt=s(jZ);vXr=r(mRt,"FlaxElectraForMultipleChoice"),mRt.forEach(t),FXr=r(uje," (ELECTRA model)"),uje.forEach(t),TXr=i(To),cw=n(To,"LI",{});var bje=s(cw);QCe=n(bje,"STRONG",{});var gRt=s(QCe);MXr=r(gRt,"roberta"),gRt.forEach(t),EXr=r(bje," \u2014 "),DZ=n(bje,"A",{href:!0});var hRt=s(DZ);CXr=r(hRt,"FlaxRobertaForMultipleChoice"),hRt.forEach(t),wXr=r(bje," (RoBERTa model)"),bje.forEach(t),AXr=i(To),fw=n(To,"LI",{});var vje=s(fw);HCe=n(vje,"STRONG",{});var pRt=s(HCe);LXr=r(pRt,"roformer"),pRt.forEach(t),yXr=r(vje," \u2014 "),GZ=n(vje,"A",{href:!0});var _Rt=s(GZ);xXr=r(_Rt,"FlaxRoFormerForMultipleChoice"),_Rt.forEach(t),$Xr=r(vje," (RoFormer model)"),vje.forEach(t),kXr=i(To),mw=n(To,"LI",{});var Fje=s(mw);UCe=n(Fje,"STRONG",{});var uRt=s(UCe);SXr=r(uRt,"xlm-roberta"),uRt.forEach(t),RXr=r(Fje," \u2014 "),OZ=n(Fje,"A",{href:!0});var bRt=s(OZ);PXr=r(bRt,"FlaxXLMRobertaForMultipleChoice"),bRt.forEach(t),BXr=r(Fje," (XLM-RoBERTa model)"),Fje.forEach(t),To.forEach(t),IXr=i(si),T(gw.$$.fragment,si),si.forEach(t),ni.forEach(t),MGe=i(f),af=n(f,"H2",{class:!0});var xVe=s(af);hw=n(xVe,"A",{id:!0,class:!0,href:!0});var vRt=s(hw);JCe=n(vRt,"SPAN",{});var FRt=s(JCe);T(Ix.$$.fragment,FRt),FRt.forEach(t),vRt.forEach(t),NXr=i(xVe),YCe=n(xVe,"SPAN",{});var TRt=s(YCe);qXr=r(TRt,"FlaxAutoModelForNextSentencePrediction"),TRt.forEach(t),xVe.forEach(t),EGe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Nx.$$.fragment,li),jXr=i(li),nf=n(li,"P",{});var Ooe=s(nf);DXr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VZ=n(Ooe,"A",{href:!0});var MRt=s(VZ);GXr=r(MRt,"from_pretrained()"),MRt.forEach(t),OXr=r(Ooe," class method or the "),XZ=n(Ooe,"A",{href:!0});var ERt=s(XZ);VXr=r(ERt,"from_config()"),ERt.forEach(t),XXr=r(Ooe,` class
method.`),Ooe.forEach(t),zXr=i(li),qx=n(li,"P",{});var $Ve=s(qx);WXr=r($Ve,"This class cannot be instantiated directly using "),KCe=n($Ve,"CODE",{});var CRt=s(KCe);QXr=r(CRt,"__init__()"),CRt.forEach(t),HXr=r($Ve," (throws an error)."),$Ve.forEach(t),UXr=i(li),Yt=n(li,"DIV",{class:!0});var N6=s(Yt);T(jx.$$.fragment,N6),JXr=i(N6),ZCe=n(N6,"P",{});var wRt=s(ZCe);YXr=r(wRt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wRt.forEach(t),KXr=i(N6),sf=n(N6,"P",{});var Voe=s(sf);ZXr=r(Voe,`Note:
Loading a model from its configuration file does `),e3e=n(Voe,"STRONG",{});var ARt=s(e3e);ezr=r(ARt,"not"),ARt.forEach(t),ozr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(Voe,"A",{href:!0});var LRt=s(zZ);rzr=r(LRt,"from_pretrained()"),LRt.forEach(t),tzr=r(Voe," to load the model weights."),Voe.forEach(t),azr=i(N6),T(pw.$$.fragment,N6),N6.forEach(t),nzr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(Dx.$$.fragment,ii),szr=i(ii),o3e=n(ii,"P",{});var yRt=s(o3e);lzr=r(yRt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yRt.forEach(t),izr=i(ii),En=n(ii,"P",{});var q6=s(En);dzr=r(q6,"The model class to instantiate is selected based on the "),r3e=n(q6,"CODE",{});var xRt=s(r3e);czr=r(xRt,"model_type"),xRt.forEach(t),fzr=r(q6,` property of the config object (either
passed as an argument or loaded from `),t3e=n(q6,"CODE",{});var $Rt=s(t3e);mzr=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),gzr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=n(q6,"CODE",{});var kRt=s(a3e);hzr=r(kRt,"pretrained_model_name_or_path"),kRt.forEach(t),pzr=r(q6,":"),q6.forEach(t),_zr=i(ii),n3e=n(ii,"UL",{});var SRt=s(n3e);_w=n(SRt,"LI",{});var Tje=s(_w);s3e=n(Tje,"STRONG",{});var RRt=s(s3e);uzr=r(RRt,"bert"),RRt.forEach(t),bzr=r(Tje," \u2014 "),WZ=n(Tje,"A",{href:!0});var PRt=s(WZ);vzr=r(PRt,"FlaxBertForNextSentencePrediction"),PRt.forEach(t),Fzr=r(Tje," (BERT model)"),Tje.forEach(t),SRt.forEach(t),Tzr=i(ii),T(uw.$$.fragment,ii),ii.forEach(t),li.forEach(t),CGe=i(f),lf=n(f,"H2",{class:!0});var kVe=s(lf);bw=n(kVe,"A",{id:!0,class:!0,href:!0});var BRt=s(bw);l3e=n(BRt,"SPAN",{});var IRt=s(l3e);T(Gx.$$.fragment,IRt),IRt.forEach(t),BRt.forEach(t),Mzr=i(kVe),i3e=n(kVe,"SPAN",{});var NRt=s(i3e);Ezr=r(NRt,"FlaxAutoModelForImageClassification"),NRt.forEach(t),kVe.forEach(t),wGe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Ox.$$.fragment,di),Czr=i(di),df=n(di,"P",{});var Xoe=s(df);wzr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QZ=n(Xoe,"A",{href:!0});var qRt=s(QZ);Azr=r(qRt,"from_pretrained()"),qRt.forEach(t),Lzr=r(Xoe," class method or the "),HZ=n(Xoe,"A",{href:!0});var jRt=s(HZ);yzr=r(jRt,"from_config()"),jRt.forEach(t),xzr=r(Xoe,` class
method.`),Xoe.forEach(t),$zr=i(di),Vx=n(di,"P",{});var SVe=s(Vx);kzr=r(SVe,"This class cannot be instantiated directly using "),d3e=n(SVe,"CODE",{});var DRt=s(d3e);Szr=r(DRt,"__init__()"),DRt.forEach(t),Rzr=r(SVe," (throws an error)."),SVe.forEach(t),Pzr=i(di),Kt=n(di,"DIV",{class:!0});var j6=s(Kt);T(Xx.$$.fragment,j6),Bzr=i(j6),c3e=n(j6,"P",{});var GRt=s(c3e);Izr=r(GRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GRt.forEach(t),Nzr=i(j6),cf=n(j6,"P",{});var zoe=s(cf);qzr=r(zoe,`Note:
Loading a model from its configuration file does `),f3e=n(zoe,"STRONG",{});var ORt=s(f3e);jzr=r(ORt,"not"),ORt.forEach(t),Dzr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(zoe,"A",{href:!0});var VRt=s(UZ);Gzr=r(VRt,"from_pretrained()"),VRt.forEach(t),Ozr=r(zoe," to load the model weights."),zoe.forEach(t),Vzr=i(j6),T(vw.$$.fragment,j6),j6.forEach(t),Xzr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(zx.$$.fragment,ci),zzr=i(ci),m3e=n(ci,"P",{});var XRt=s(m3e);Wzr=r(XRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XRt.forEach(t),Qzr=i(ci),Cn=n(ci,"P",{});var D6=s(Cn);Hzr=r(D6,"The model class to instantiate is selected based on the "),g3e=n(D6,"CODE",{});var zRt=s(g3e);Uzr=r(zRt,"model_type"),zRt.forEach(t),Jzr=r(D6,` property of the config object (either
passed as an argument or loaded from `),h3e=n(D6,"CODE",{});var WRt=s(h3e);Yzr=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),Kzr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(D6,"CODE",{});var QRt=s(p3e);Zzr=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),eWr=r(D6,":"),D6.forEach(t),oWr=i(ci),Wx=n(ci,"UL",{});var RVe=s(Wx);Fw=n(RVe,"LI",{});var Mje=s(Fw);_3e=n(Mje,"STRONG",{});var HRt=s(_3e);rWr=r(HRt,"beit"),HRt.forEach(t),tWr=r(Mje," \u2014 "),JZ=n(Mje,"A",{href:!0});var URt=s(JZ);aWr=r(URt,"FlaxBeitForImageClassification"),URt.forEach(t),nWr=r(Mje," (BEiT model)"),Mje.forEach(t),sWr=i(RVe),Tw=n(RVe,"LI",{});var Eje=s(Tw);u3e=n(Eje,"STRONG",{});var JRt=s(u3e);lWr=r(JRt,"vit"),JRt.forEach(t),iWr=r(Eje," \u2014 "),YZ=n(Eje,"A",{href:!0});var YRt=s(YZ);dWr=r(YRt,"FlaxViTForImageClassification"),YRt.forEach(t),cWr=r(Eje," (ViT model)"),Eje.forEach(t),RVe.forEach(t),fWr=i(ci),T(Mw.$$.fragment,ci),ci.forEach(t),di.forEach(t),AGe=i(f),ff=n(f,"H2",{class:!0});var PVe=s(ff);Ew=n(PVe,"A",{id:!0,class:!0,href:!0});var KRt=s(Ew);b3e=n(KRt,"SPAN",{});var ZRt=s(b3e);T(Qx.$$.fragment,ZRt),ZRt.forEach(t),KRt.forEach(t),mWr=i(PVe),v3e=n(PVe,"SPAN",{});var ePt=s(v3e);gWr=r(ePt,"FlaxAutoModelForVision2Seq"),ePt.forEach(t),PVe.forEach(t),LGe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(Hx.$$.fragment,fi),hWr=i(fi),mf=n(fi,"P",{});var Woe=s(mf);pWr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KZ=n(Woe,"A",{href:!0});var oPt=s(KZ);_Wr=r(oPt,"from_pretrained()"),oPt.forEach(t),uWr=r(Woe," class method or the "),ZZ=n(Woe,"A",{href:!0});var rPt=s(ZZ);bWr=r(rPt,"from_config()"),rPt.forEach(t),vWr=r(Woe,` class
method.`),Woe.forEach(t),FWr=i(fi),Ux=n(fi,"P",{});var BVe=s(Ux);TWr=r(BVe,"This class cannot be instantiated directly using "),F3e=n(BVe,"CODE",{});var tPt=s(F3e);MWr=r(tPt,"__init__()"),tPt.forEach(t),EWr=r(BVe," (throws an error)."),BVe.forEach(t),CWr=i(fi),Zt=n(fi,"DIV",{class:!0});var G6=s(Zt);T(Jx.$$.fragment,G6),wWr=i(G6),T3e=n(G6,"P",{});var aPt=s(T3e);AWr=r(aPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aPt.forEach(t),LWr=i(G6),gf=n(G6,"P",{});var Qoe=s(gf);yWr=r(Qoe,`Note:
Loading a model from its configuration file does `),M3e=n(Qoe,"STRONG",{});var nPt=s(M3e);xWr=r(nPt,"not"),nPt.forEach(t),$Wr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(Qoe,"A",{href:!0});var sPt=s(eee);kWr=r(sPt,"from_pretrained()"),sPt.forEach(t),SWr=r(Qoe," to load the model weights."),Qoe.forEach(t),RWr=i(G6),T(Cw.$$.fragment,G6),G6.forEach(t),PWr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(Yx.$$.fragment,mi),BWr=i(mi),E3e=n(mi,"P",{});var lPt=s(E3e);IWr=r(lPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lPt.forEach(t),NWr=i(mi),wn=n(mi,"P",{});var O6=s(wn);qWr=r(O6,"The model class to instantiate is selected based on the "),C3e=n(O6,"CODE",{});var iPt=s(C3e);jWr=r(iPt,"model_type"),iPt.forEach(t),DWr=r(O6,` property of the config object (either
passed as an argument or loaded from `),w3e=n(O6,"CODE",{});var dPt=s(w3e);GWr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),OWr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=n(O6,"CODE",{});var cPt=s(A3e);VWr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),XWr=r(O6,":"),O6.forEach(t),zWr=i(mi),L3e=n(mi,"UL",{});var fPt=s(L3e);ww=n(fPt,"LI",{});var Cje=s(ww);y3e=n(Cje,"STRONG",{});var mPt=s(y3e);WWr=r(mPt,"vision-encoder-decoder"),mPt.forEach(t),QWr=r(Cje," \u2014 "),oee=n(Cje,"A",{href:!0});var gPt=s(oee);HWr=r(gPt,"FlaxVisionEncoderDecoderModel"),gPt.forEach(t),UWr=r(Cje," (Vision Encoder decoder model)"),Cje.forEach(t),fPt.forEach(t),JWr=i(mi),T(Aw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(uIt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(bk,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(vk,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig"),c(Fk,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig"),c(Tk,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig"),c(Mk,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig"),c(Ek,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Ck,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig"),c(wk,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Ak,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Lk,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(yk,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig"),c(xk,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig"),c($k,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig"),c(kk,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig"),c(Sk,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig"),c(Rk,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig"),c(Pk,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig"),c(Bk,"href","/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtConfig"),c(Ik,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Nk,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(qk,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(jk,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig"),c(Dk,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Gk,"href","/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ok,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig"),c(Vk,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig"),c(Xk,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig"),c(zk,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRConfig"),c(Wk,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTConfig"),c(Qk,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig"),c(Hk,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Uk,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Jk,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaConfig"),c(Yk,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig"),c(Kk,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig"),c(Zk,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig"),c(eS,"href","/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNConfig"),c(oS,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config"),c(rS,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tS,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(aS,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig"),c(nS,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig"),c(sS,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig"),c(lS,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(iS,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dS,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(cS,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(fS,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig"),c(mS,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitConfig"),c(gS,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig"),c(hS,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeConfig"),c(pS,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig"),c(_S,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Config"),c(uS,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig"),c(bS,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(vS,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig"),c(FS,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTConfig"),c(TS,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(MS,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ES,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig"),c(CS,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config"),c(wS,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(AS,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(LS,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig"),c(yS,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig"),c(xS,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig"),c($S,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig"),c(kS,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(SS,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(RS,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(PS,"href","/docs/transformers/pr_17554/en/model_doc/rag#transformers.RagConfig"),c(BS,"href","/docs/transformers/pr_17554/en/model_doc/realm#transformers.RealmConfig"),c(IS,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig"),c(NS,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig"),c(qS,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig"),c(jS,"href","/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetConfig"),c(DS,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertConfig"),c(GS,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig"),c(OS,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig"),c(VS,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig"),c(XS,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig"),c(zS,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig"),c(WS,"href","/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(QS,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(HS,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(US,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig"),c(JS,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(YS,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig"),c(KS,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config"),c(ZS,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig"),c(eR,"href","/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(oR,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(rR,"href","/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRConfig"),c(tR,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(aR,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(nR,"href","/docs/transformers/pr_17554/en/model_doc/van#transformers.VanConfig"),c(sR,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltConfig"),c(lR,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(iR,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(dR,"href","/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(cR,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig"),c(fR,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(mR,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(gR,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(hR,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig"),c(pR,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig"),c(_R,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig"),c(uR,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(bR,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(vR,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(FR,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig"),c(TR,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosConfig"),c(MR,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($g,"id","transformers.AutoTokenizer"),c($g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($g,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(ER,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(CR,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizer"),c(wR,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartTokenizer"),c(LR,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartTokenizerFast"),c(yR,"href","/docs/transformers/pr_17554/en/model_doc/barthez#transformers.BarthezTokenizer"),c(xR,"href","/docs/transformers/pr_17554/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c($R,"href","/docs/transformers/pr_17554/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(kR,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(SR,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(RR,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(PR,"href","/docs/transformers/pr_17554/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(BR,"href","/docs/transformers/pr_17554/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(IR,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(NR,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(qR,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jR,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DR,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(GR,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(OR,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(VR,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(XR,"href","/docs/transformers/pr_17554/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(zR,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertTokenizer"),c(WR,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineTokenizer"),c(HR,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPTokenizer"),c(UR,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(JR,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(YR,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17554/en/model_doc/cpm#transformers.CpmTokenizer"),c(ZR,"href","/docs/transformers/pr_17554/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(eP,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(oP,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rP,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tP,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaTokenizer"),c(aP,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nP,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sP,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(lP,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(iP,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(cP,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(fP,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraTokenizer"),c(mP,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(gP,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(hP,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetTokenizer"),c(pP,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(_P,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uP,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelTokenizer"),c(bP,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(vP,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FP,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TP,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MP,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(EP,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(CP,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wP,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AP,"href","/docs/transformers/pr_17554/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LP,"href","/docs/transformers/pr_17554/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yP,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xP,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c($P,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kP,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SP,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RP,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PP,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BP,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IP,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NP,"href","/docs/transformers/pr_17554/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qP,"href","/docs/transformers/pr_17554/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jP,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDTokenizer"),c(DP,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDTokenizerFast"),c(GP,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OP,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VP,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeTokenizer"),c(XP,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zP,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(QP,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianTokenizer"),c(HP,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartTokenizer"),c(UP,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(JP,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(YP,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(KP,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(ZP,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17554/en/model_doc/mluke#transformers.MLukeTokenizer"),c(oB,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(rB,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(aB,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(nB,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Tokenizer"),c(sB,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5TokenizerFast"),c(lB,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(cB,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fB,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mB,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gB,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hB,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(pB,"href","/docs/transformers/pr_17554/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_B,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uB,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(bB,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(vB,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17554/en/model_doc/rag#transformers.RagTokenizer"),c(TB,"href","/docs/transformers/pr_17554/en/model_doc/realm#transformers.RealmTokenizer"),c(MB,"href","/docs/transformers/pr_17554/en/model_doc/realm#transformers.RealmTokenizerFast"),c(EB,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CB,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wB,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AB,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(yB,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SB,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(PB,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(BB,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IB,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NB,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(qB,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Tokenizer"),c(DB,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5TokenizerFast"),c(GB,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasTokenizer"),c(OB,"href","/docs/transformers/pr_17554/en/model_doc/tapex#transformers.TapexTokenizer"),c(VB,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(XB,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(zB,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(WB,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QB,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HB,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(UB,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMTokenizer"),c(JB,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(YB,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMTokenizer"),c(KB,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ZB,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(eI,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(oI,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rI,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tI,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(aI,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(nI,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizer"),c(sI,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoFeatureExtractor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(lI,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(iI,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FI,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(MI,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(EI,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($I,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PI,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(II,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qI,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoProcessor"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(jI,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(DI,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPProcessor"),c(GI,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(OI,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(VI,"href","/docs/transformers/pr_17554/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(XI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(QI,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(HI,"href","/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRProcessor"),c(UI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YI,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltProcessor"),c(KI,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ZI,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"id","transformers.AutoModel"),c(hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hp,"href","#transformers.AutoModel"),c(Li,"class","relative group"),c(rN,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tN,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aN,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nN,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertModel"),c(sN,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartModel"),c(lN,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitModel"),c(iN,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertModel"),c(dN,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(cN,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdModel"),c(fN,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(mN,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(gN,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(hN,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomModel"),c(pN,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertModel"),c(_N,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineModel"),c(uN,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPModel"),c(bN,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertModel"),c(vN,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextModel"),c(FN,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLModel"),c(TN,"href","/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtModel"),c(MN,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(EN,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(CN,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wN,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaModel"),c(AN,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(LN,"href","/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(yN,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTModel"),c(xN,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrModel"),c($N,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertModel"),c(kN,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SN,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTModel"),c(RN,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraModel"),c(PN,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertModel"),c(BN,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaModel"),c(IN,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetModel"),c(NN,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTModel"),c(qN,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelModel"),c(jN,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelBaseModel"),c(DN,"href","/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNModel"),c(GN,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Model"),c(ON,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(VN,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(XN,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJModel"),c(zN,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertModel"),c(WN,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertModel"),c(QN,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HN,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(UN,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(JN,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(YN,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDModel"),c(KN,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitModel"),c(ZN,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerModel"),c(eq,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeModel"),c(oq,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertModel"),c(rq,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Model"),c(tq,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianModel"),c(aq,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nq,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartModel"),c(sq,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTModel"),c(lq,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(iq,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertModel"),c(dq,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetModel"),c(cq,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Model"),c(fq,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerModel"),c(mq,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gq,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTModel"),c(hq,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusModel"),c(pq,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverModel"),c(_q,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartModel"),c(uq,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerModel"),c(bq,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vq,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Fq,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModel"),c(Tq,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetModel"),c(Mq,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertModel"),c(Eq,"href","/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetModel"),c(Cq,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel"),c(wq,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaModel"),c(Aq,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerModel"),c(Lq,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerModel"),c(yq,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWModel"),c(xq,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDModel"),c($q,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kq,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterModel"),c(Sq,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Rq,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinModel"),c(Pq,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Model"),c(Bq,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasModel"),c(Iq,"href","/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Nq,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qq,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jq,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Dq,"href","/docs/transformers/pr_17554/en/model_doc/van#transformers.VanModel"),c(Gq,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltModel"),c(Oq,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Vq,"href","/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Xq,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTModel"),c(zq,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Wq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Qq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Hq,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMModel"),c(Uq,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMModel"),c(Jq,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMModel"),c(Yq,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kq,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zq,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(ej,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetModel"),c(oj,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosModel"),c(rj,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hu,"id","transformers.AutoModelForPreTraining"),c(hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(tj,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForPreTraining"),c(lj,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForPreTraining"),c(dj,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(cj,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fj,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mj,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gj,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hj,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_j,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForPreTraining"),c(bj,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Fj,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Tj,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Ej,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cj,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yj,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(xj,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c($j,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kj,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel"),c(Rj,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Bj,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qj,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jj,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Dj,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Gj,"href","/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Oj,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Vj,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Xj,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(zj,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Wj,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForCausalLM"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Uj,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jj,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yj,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kj,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForCausalLM"),c(Zj,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertLMHeadModel"),c(eD,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(oD,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(rD,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(tD,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(aD,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(nD,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM"),c(sD,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lD,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iD,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dD,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cD,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fD,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mD,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(gD,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(hD,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianForCausalLM"),c(pD,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForCausalLM"),c(_D,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uD,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bD,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTForCausalLM"),c(vD,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(FD,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(TD,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(MD,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(ED,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(CD,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wD,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(AD,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(LD,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yD,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xD,"href","/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($D,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kD,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(RD,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(PD,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(BD,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.AutoModelForMaskedLM"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(ID,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(VD,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XD,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(WD,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(QD,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(HD,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(JD,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(YD,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(KD,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eG,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oG,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rG,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeForMaskedLM"),c(tG,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nG,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lG,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iG,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dG,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cG,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(fG,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mG,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gG,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hG,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pG,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_G,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bG,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vG,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B1,"id","transformers.AutoModelForSeq2SeqLM"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(FG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yG,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianMTModel"),c(SG,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(IG,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ob,"id","transformers.AutoModelForSequenceClassification"),c(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ob,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(jG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c($O,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kb,"id","transformers.AutoModelForMultipleChoice"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(BO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(aV,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(nV,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(sV,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(lV,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(iV,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(dV,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(cV,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(fV,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(mV,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForNextSentencePrediction"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(gV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(uV,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(bV,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(vV,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(FV,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D2,"id","transformers.AutoModelForTokenClassification"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(TV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(LV,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForTokenClassification"),c(xV,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(kV,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(RV,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(PV,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(BV,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(NV,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(qV,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(jV,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(DV,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(GV,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(OV,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(VV,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(XV,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(zV,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WV,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(QV,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(HV,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UV,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(JV,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(YV,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(KV,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(eX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(oX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(rX,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(tX,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.AutoModelForQuestionAnswering"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(aX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(TX,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(PX,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(VX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WX,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForTableQuestionAnswering"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(QX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForImageClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForImageClassification"),c(oz,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(rz,"href","/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtForImageClassification"),c(tz,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(az,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassification"),c(nz,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(sz,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(lz,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassification"),c(iz,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(dz,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(cz,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fz,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(mz,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(gz,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(hz,"href","/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(pz,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_z,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForImageClassification"),c(uz,"href","/docs/transformers/pr_17554/en/model_doc/van#transformers.VanForImageClassification"),c(bz,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForVision2Seq"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(vz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForAudioClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(yz,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(xz,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c($z,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(kz,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Rz,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForAudioFrameClassification"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(jz,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Dz,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Gz,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Oz,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForCTC"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Qz,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForCTC"),c(Hz,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Uz,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForCTC"),c(Jz,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Yz,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Kz,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Zz,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(eW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(oW,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(rW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(sW,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForAudioXVector"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(lW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(fW,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(mW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(gW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(hW,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForMaskedImageModeling"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(pW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(vW,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(FW,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForObjectDetection"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForObjectDetection"),c(wW,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForImageSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(AW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForSemanticSegmentation"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c($W,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(PW,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(BW,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(IW,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForInstanceSegmentation"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.TFAutoModel"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertModel"),c(zW,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartModel"),c(WW,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertModel"),c(QW,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(HW,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(UW,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertModel"),c(JW,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.TFCLIPModel"),c(YW,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertModel"),c(KW,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextModel"),c(ZW,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLModel"),c(eQ,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(oQ,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaModel"),c(rQ,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(tQ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(aQ,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(nQ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraModel"),c(sQ,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(lQ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelModel"),c(iQ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(dQ,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2Model"),c(cQ,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJModel"),c(fQ,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.TFHubertModel"),c(mQ,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(gQ,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDModel"),c(hQ,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerModel"),c(pQ,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertModel"),c(_Q,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianModel"),c(uQ,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartModel"),c(bQ,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(vQ,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetModel"),c(FQ,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5Model"),c(TQ,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(MQ,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTModel"),c(EQ,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusModel"),c(CQ,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetModel"),c(wQ,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertModel"),c(AQ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaModel"),c(LQ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerModel"),c(yQ,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xQ,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinModel"),c($Q,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5Model"),c(kQ,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasModel"),c(SQ,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(RQ,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTModel"),c(PQ,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(BQ,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(IQ,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMModel"),c(NQ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qQ,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.TFAutoModelForPreTraining"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(jQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(VQ,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zQ,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(UQ,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(YQ,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KQ,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eH,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oH,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rH,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tH,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aH,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nH,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sH,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lH,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(iH,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dH,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(cH,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForCausalLM"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(fH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(pH,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(_H,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uH,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bH,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(vH,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FH,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(TH,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(MH,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(EH,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(CH,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wH,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AH,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForImageClassification"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(LH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(kH,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(SH,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(RH,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(PH,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForMaskedLM"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(DH,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(OH,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(VH,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(XH,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(zH,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(WH,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(QH,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(HH,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(UH,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(JH,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(YH,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(KH,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(eU,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(oU,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(rU,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tU,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(aU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iU,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(dU,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(cU,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(fU,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianMTModel"),c(gU,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForSequenceClassification"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c($U,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(PU,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(BU,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(IU,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(NU,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(qU,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(jU,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(DU,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(GU,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(OU,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(VU,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(XU,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(zU,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForMultipleChoice"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(WU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UU,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(eJ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(oJ,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(rJ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(tJ,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(aJ,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(nJ,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(sJ,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(lJ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(iJ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(dJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(cJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(fJ,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(_J,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForTokenClassification"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c($J,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(SJ,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(RJ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(PJ,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(BJ,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(IJ,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(NJ,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(qJ,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jJ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(DJ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(GJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(OJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(VJ,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForQuestionAnswering"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(rY,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(fY,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForVision2Seq"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(uY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModel"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertModel"),c(wY,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartModel"),c(AY,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitModel"),c(LY,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertModel"),c(yY,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(xY,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c($Y,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(kY,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.FlaxCLIPModel"),c(SY,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(RY,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraModel"),c(PY,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(BY,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(IY,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(NY,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianModel"),c(qY,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartModel"),c(jY,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5Model"),c(DY,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTModel"),c(GY,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(OY,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VY,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(XY,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5Model"),c(zY,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(WY,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTModel"),c(QY,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(HY,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(UY,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForCausalLM"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(eK,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(oK,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(rK,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(tK,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aK,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nK,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sK,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(lK,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(iK,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForPreTraining"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gK,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(pK,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(_K,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(uK,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bK,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vK,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(FK,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(TK,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(EK,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForMaskedLM"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(CK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yK,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($K,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kK,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(SK,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(RK,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(BK,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(IK,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GK,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(OK,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(VK,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(XK,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(zK,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WK,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QK,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(HK,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(UK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ZK,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(eZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(oZ,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(rZ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(tZ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(aZ,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(nZ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(sZ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(lZ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(iZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForTokenClassification"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(yZ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(xZ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c($Z,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(kZ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(IZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(NZ,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qZ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(jZ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(DZ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(GZ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(OZ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForImageClassification"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(QZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(YZ,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForVision2Seq"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(KZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,tt,u),e(tt,hi),e(tt,pi),e(pi,V6),e(tt,bf),b(f,Ge,u),b(f,We,u),e(We,_i),e(We,Ln),e(Ln,X6),e(We,yn),e(We,xn),e(xn,z6),e(We,ui),e(We,$n),e($n,W6),e(We,bi),b(f,vf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,mk),e(Ae,vi),e(vi,gk),e(Ae,hk),b(f,Eo,u),b(f,Aa,u),e(Aa,pk),e(Aa,Ff),e(Ff,_k),e(Aa,IVe),b(f,wje,u),b(f,Fi,u),e(Fi,Tf),e(Tf,Hoe),M(Q6,Hoe,null),e(Fi,NVe),e(Fi,Uoe),e(Uoe,qVe),b(f,Aje,u),b(f,kn,u),e(kn,jVe),e(kn,Joe),e(Joe,DVe),e(kn,GVe),e(kn,Yoe),e(Yoe,OVe),e(kn,VVe),b(f,Lje,u),M(H6,f,u),b(f,yje,u),b(f,uk,u),e(uk,XVe),b(f,xje,u),M(Mf,f,u),b(f,$je,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Koe),M(U6,Koe,null),e(Ti,zVe),e(Ti,Zoe),e(Zoe,WVe),b(f,kje,u),b(f,Co,u),M(J6,Co,null),e(Co,QVe),e(Co,Y6),e(Y6,HVe),e(Y6,bk),e(bk,UVe),e(Y6,JVe),e(Co,YVe),e(Co,K6),e(K6,KVe),e(K6,ere),e(ere,ZVe),e(K6,eXe),e(Co,oXe),e(Co,Er),M(Z6,Er,null),e(Er,rXe),e(Er,ore),e(ore,tXe),e(Er,aXe),e(Er,Mi),e(Mi,nXe),e(Mi,rre),e(rre,sXe),e(Mi,lXe),e(Mi,tre),e(tre,iXe),e(Mi,dXe),e(Er,cXe),e(Er,A),e(A,Cf),e(Cf,are),e(are,fXe),e(Cf,mXe),e(Cf,vk),e(vk,gXe),e(Cf,hXe),e(A,pXe),e(A,wf),e(wf,nre),e(nre,_Xe),e(wf,uXe),e(wf,Fk),e(Fk,bXe),e(wf,vXe),e(A,FXe),e(A,Af),e(Af,sre),e(sre,TXe),e(Af,MXe),e(Af,Tk),e(Tk,EXe),e(Af,CXe),e(A,wXe),e(A,Lf),e(Lf,lre),e(lre,AXe),e(Lf,LXe),e(Lf,Mk),e(Mk,yXe),e(Lf,xXe),e(A,$Xe),e(A,yf),e(yf,ire),e(ire,kXe),e(yf,SXe),e(yf,Ek),e(Ek,RXe),e(yf,PXe),e(A,BXe),e(A,xf),e(xf,dre),e(dre,IXe),e(xf,NXe),e(xf,Ck),e(Ck,qXe),e(xf,jXe),e(A,DXe),e(A,$f),e($f,cre),e(cre,GXe),e($f,OXe),e($f,wk),e(wk,VXe),e($f,XXe),e(A,zXe),e(A,kf),e(kf,fre),e(fre,WXe),e(kf,QXe),e(kf,Ak),e(Ak,HXe),e(kf,UXe),e(A,JXe),e(A,Sf),e(Sf,mre),e(mre,YXe),e(Sf,KXe),e(Sf,Lk),e(Lk,ZXe),e(Sf,eze),e(A,oze),e(A,Rf),e(Rf,gre),e(gre,rze),e(Rf,tze),e(Rf,yk),e(yk,aze),e(Rf,nze),e(A,sze),e(A,Pf),e(Pf,hre),e(hre,lze),e(Pf,ize),e(Pf,xk),e(xk,dze),e(Pf,cze),e(A,fze),e(A,Bf),e(Bf,pre),e(pre,mze),e(Bf,gze),e(Bf,$k),e($k,hze),e(Bf,pze),e(A,_ze),e(A,If),e(If,_re),e(_re,uze),e(If,bze),e(If,kk),e(kk,vze),e(If,Fze),e(A,Tze),e(A,Nf),e(Nf,ure),e(ure,Mze),e(Nf,Eze),e(Nf,Sk),e(Sk,Cze),e(Nf,wze),e(A,Aze),e(A,qf),e(qf,bre),e(bre,Lze),e(qf,yze),e(qf,Rk),e(Rk,xze),e(qf,$ze),e(A,kze),e(A,jf),e(jf,vre),e(vre,Sze),e(jf,Rze),e(jf,Pk),e(Pk,Pze),e(jf,Bze),e(A,Ize),e(A,Df),e(Df,Fre),e(Fre,Nze),e(Df,qze),e(Df,Bk),e(Bk,jze),e(Df,Dze),e(A,Gze),e(A,Gf),e(Gf,Tre),e(Tre,Oze),e(Gf,Vze),e(Gf,Ik),e(Ik,Xze),e(Gf,zze),e(A,Wze),e(A,Of),e(Of,Mre),e(Mre,Qze),e(Of,Hze),e(Of,Nk),e(Nk,Uze),e(Of,Jze),e(A,Yze),e(A,Vf),e(Vf,Ere),e(Ere,Kze),e(Vf,Zze),e(Vf,qk),e(qk,eWe),e(Vf,oWe),e(A,rWe),e(A,Xf),e(Xf,Cre),e(Cre,tWe),e(Xf,aWe),e(Xf,jk),e(jk,nWe),e(Xf,sWe),e(A,lWe),e(A,zf),e(zf,wre),e(wre,iWe),e(zf,dWe),e(zf,Dk),e(Dk,cWe),e(zf,fWe),e(A,mWe),e(A,Wf),e(Wf,Are),e(Are,gWe),e(Wf,hWe),e(Wf,Gk),e(Gk,pWe),e(Wf,_We),e(A,uWe),e(A,Qf),e(Qf,Lre),e(Lre,bWe),e(Qf,vWe),e(Qf,Ok),e(Ok,FWe),e(Qf,TWe),e(A,MWe),e(A,Hf),e(Hf,yre),e(yre,EWe),e(Hf,CWe),e(Hf,Vk),e(Vk,wWe),e(Hf,AWe),e(A,LWe),e(A,Uf),e(Uf,xre),e(xre,yWe),e(Uf,xWe),e(Uf,Xk),e(Xk,$We),e(Uf,kWe),e(A,SWe),e(A,Jf),e(Jf,$re),e($re,RWe),e(Jf,PWe),e(Jf,zk),e(zk,BWe),e(Jf,IWe),e(A,NWe),e(A,Yf),e(Yf,kre),e(kre,qWe),e(Yf,jWe),e(Yf,Wk),e(Wk,DWe),e(Yf,GWe),e(A,OWe),e(A,Kf),e(Kf,Sre),e(Sre,VWe),e(Kf,XWe),e(Kf,Qk),e(Qk,zWe),e(Kf,WWe),e(A,QWe),e(A,Zf),e(Zf,Rre),e(Rre,HWe),e(Zf,UWe),e(Zf,Hk),e(Hk,JWe),e(Zf,YWe),e(A,KWe),e(A,em),e(em,Pre),e(Pre,ZWe),e(em,eQe),e(em,Uk),e(Uk,oQe),e(em,rQe),e(A,tQe),e(A,om),e(om,Bre),e(Bre,aQe),e(om,nQe),e(om,Jk),e(Jk,sQe),e(om,lQe),e(A,iQe),e(A,rm),e(rm,Ire),e(Ire,dQe),e(rm,cQe),e(rm,Yk),e(Yk,fQe),e(rm,mQe),e(A,gQe),e(A,tm),e(tm,Nre),e(Nre,hQe),e(tm,pQe),e(tm,Kk),e(Kk,_Qe),e(tm,uQe),e(A,bQe),e(A,am),e(am,qre),e(qre,vQe),e(am,FQe),e(am,Zk),e(Zk,TQe),e(am,MQe),e(A,EQe),e(A,nm),e(nm,jre),e(jre,CQe),e(nm,wQe),e(nm,eS),e(eS,AQe),e(nm,LQe),e(A,yQe),e(A,sm),e(sm,Dre),e(Dre,xQe),e(sm,$Qe),e(sm,oS),e(oS,kQe),e(sm,SQe),e(A,RQe),e(A,lm),e(lm,Gre),e(Gre,PQe),e(lm,BQe),e(lm,rS),e(rS,IQe),e(lm,NQe),e(A,qQe),e(A,im),e(im,Ore),e(Ore,jQe),e(im,DQe),e(im,tS),e(tS,GQe),e(im,OQe),e(A,VQe),e(A,dm),e(dm,Vre),e(Vre,XQe),e(dm,zQe),e(dm,aS),e(aS,WQe),e(dm,QQe),e(A,HQe),e(A,cm),e(cm,Xre),e(Xre,UQe),e(cm,JQe),e(cm,nS),e(nS,YQe),e(cm,KQe),e(A,ZQe),e(A,fm),e(fm,zre),e(zre,eHe),e(fm,oHe),e(fm,sS),e(sS,rHe),e(fm,tHe),e(A,aHe),e(A,mm),e(mm,Wre),e(Wre,nHe),e(mm,sHe),e(mm,lS),e(lS,lHe),e(mm,iHe),e(A,dHe),e(A,gm),e(gm,Qre),e(Qre,cHe),e(gm,fHe),e(gm,iS),e(iS,mHe),e(gm,gHe),e(A,hHe),e(A,hm),e(hm,Hre),e(Hre,pHe),e(hm,_He),e(hm,dS),e(dS,uHe),e(hm,bHe),e(A,vHe),e(A,pm),e(pm,Ure),e(Ure,FHe),e(pm,THe),e(pm,cS),e(cS,MHe),e(pm,EHe),e(A,CHe),e(A,_m),e(_m,Jre),e(Jre,wHe),e(_m,AHe),e(_m,fS),e(fS,LHe),e(_m,yHe),e(A,xHe),e(A,um),e(um,Yre),e(Yre,$He),e(um,kHe),e(um,mS),e(mS,SHe),e(um,RHe),e(A,PHe),e(A,bm),e(bm,Kre),e(Kre,BHe),e(bm,IHe),e(bm,gS),e(gS,NHe),e(bm,qHe),e(A,jHe),e(A,vm),e(vm,Zre),e(Zre,DHe),e(vm,GHe),e(vm,hS),e(hS,OHe),e(vm,VHe),e(A,XHe),e(A,Fm),e(Fm,ete),e(ete,zHe),e(Fm,WHe),e(Fm,pS),e(pS,QHe),e(Fm,HHe),e(A,UHe),e(A,Tm),e(Tm,ote),e(ote,JHe),e(Tm,YHe),e(Tm,_S),e(_S,KHe),e(Tm,ZHe),e(A,eUe),e(A,Mm),e(Mm,rte),e(rte,oUe),e(Mm,rUe),e(Mm,uS),e(uS,tUe),e(Mm,aUe),e(A,nUe),e(A,Em),e(Em,tte),e(tte,sUe),e(Em,lUe),e(Em,bS),e(bS,iUe),e(Em,dUe),e(A,cUe),e(A,Cm),e(Cm,ate),e(ate,fUe),e(Cm,mUe),e(Cm,vS),e(vS,gUe),e(Cm,hUe),e(A,pUe),e(A,wm),e(wm,nte),e(nte,_Ue),e(wm,uUe),e(wm,FS),e(FS,bUe),e(wm,vUe),e(A,FUe),e(A,Am),e(Am,ste),e(ste,TUe),e(Am,MUe),e(Am,TS),e(TS,EUe),e(Am,CUe),e(A,wUe),e(A,Lm),e(Lm,lte),e(lte,AUe),e(Lm,LUe),e(Lm,MS),e(MS,yUe),e(Lm,xUe),e(A,$Ue),e(A,ym),e(ym,ite),e(ite,kUe),e(ym,SUe),e(ym,ES),e(ES,RUe),e(ym,PUe),e(A,BUe),e(A,xm),e(xm,dte),e(dte,IUe),e(xm,NUe),e(xm,CS),e(CS,qUe),e(xm,jUe),e(A,DUe),e(A,$m),e($m,cte),e(cte,GUe),e($m,OUe),e($m,wS),e(wS,VUe),e($m,XUe),e(A,zUe),e(A,km),e(km,fte),e(fte,WUe),e(km,QUe),e(km,AS),e(AS,HUe),e(km,UUe),e(A,JUe),e(A,Sm),e(Sm,mte),e(mte,YUe),e(Sm,KUe),e(Sm,LS),e(LS,ZUe),e(Sm,eJe),e(A,oJe),e(A,Rm),e(Rm,gte),e(gte,rJe),e(Rm,tJe),e(Rm,yS),e(yS,aJe),e(Rm,nJe),e(A,sJe),e(A,Pm),e(Pm,hte),e(hte,lJe),e(Pm,iJe),e(Pm,xS),e(xS,dJe),e(Pm,cJe),e(A,fJe),e(A,Bm),e(Bm,pte),e(pte,mJe),e(Bm,gJe),e(Bm,$S),e($S,hJe),e(Bm,pJe),e(A,_Je),e(A,Im),e(Im,_te),e(_te,uJe),e(Im,bJe),e(Im,kS),e(kS,vJe),e(Im,FJe),e(A,TJe),e(A,Nm),e(Nm,ute),e(ute,MJe),e(Nm,EJe),e(Nm,SS),e(SS,CJe),e(Nm,wJe),e(A,AJe),e(A,qm),e(qm,bte),e(bte,LJe),e(qm,yJe),e(qm,RS),e(RS,xJe),e(qm,$Je),e(A,kJe),e(A,jm),e(jm,vte),e(vte,SJe),e(jm,RJe),e(jm,PS),e(PS,PJe),e(jm,BJe),e(A,IJe),e(A,Dm),e(Dm,Fte),e(Fte,NJe),e(Dm,qJe),e(Dm,BS),e(BS,jJe),e(Dm,DJe),e(A,GJe),e(A,Gm),e(Gm,Tte),e(Tte,OJe),e(Gm,VJe),e(Gm,IS),e(IS,XJe),e(Gm,zJe),e(A,WJe),e(A,Om),e(Om,Mte),e(Mte,QJe),e(Om,HJe),e(Om,NS),e(NS,UJe),e(Om,JJe),e(A,YJe),e(A,Vm),e(Vm,Ete),e(Ete,KJe),e(Vm,ZJe),e(Vm,qS),e(qS,eYe),e(Vm,oYe),e(A,rYe),e(A,Xm),e(Xm,Cte),e(Cte,tYe),e(Xm,aYe),e(Xm,jS),e(jS,nYe),e(Xm,sYe),e(A,lYe),e(A,zm),e(zm,wte),e(wte,iYe),e(zm,dYe),e(zm,DS),e(DS,cYe),e(zm,fYe),e(A,mYe),e(A,Wm),e(Wm,Ate),e(Ate,gYe),e(Wm,hYe),e(Wm,GS),e(GS,pYe),e(Wm,_Ye),e(A,uYe),e(A,Qm),e(Qm,Lte),e(Lte,bYe),e(Qm,vYe),e(Qm,OS),e(OS,FYe),e(Qm,TYe),e(A,MYe),e(A,Hm),e(Hm,yte),e(yte,EYe),e(Hm,CYe),e(Hm,VS),e(VS,wYe),e(Hm,AYe),e(A,LYe),e(A,Um),e(Um,xte),e(xte,yYe),e(Um,xYe),e(Um,XS),e(XS,$Ye),e(Um,kYe),e(A,SYe),e(A,Jm),e(Jm,$te),e($te,RYe),e(Jm,PYe),e(Jm,zS),e(zS,BYe),e(Jm,IYe),e(A,NYe),e(A,Ym),e(Ym,kte),e(kte,qYe),e(Ym,jYe),e(Ym,WS),e(WS,DYe),e(Ym,GYe),e(A,OYe),e(A,Km),e(Km,Ste),e(Ste,VYe),e(Km,XYe),e(Km,QS),e(QS,zYe),e(Km,WYe),e(A,QYe),e(A,Zm),e(Zm,Rte),e(Rte,HYe),e(Zm,UYe),e(Zm,HS),e(HS,JYe),e(Zm,YYe),e(A,KYe),e(A,eg),e(eg,Pte),e(Pte,ZYe),e(eg,eKe),e(eg,US),e(US,oKe),e(eg,rKe),e(A,tKe),e(A,og),e(og,Bte),e(Bte,aKe),e(og,nKe),e(og,JS),e(JS,sKe),e(og,lKe),e(A,iKe),e(A,rg),e(rg,Ite),e(Ite,dKe),e(rg,cKe),e(rg,YS),e(YS,fKe),e(rg,mKe),e(A,gKe),e(A,tg),e(tg,Nte),e(Nte,hKe),e(tg,pKe),e(tg,KS),e(KS,_Ke),e(tg,uKe),e(A,bKe),e(A,ag),e(ag,qte),e(qte,vKe),e(ag,FKe),e(ag,ZS),e(ZS,TKe),e(ag,MKe),e(A,EKe),e(A,ng),e(ng,jte),e(jte,CKe),e(ng,wKe),e(ng,eR),e(eR,AKe),e(ng,LKe),e(A,yKe),e(A,sg),e(sg,Dte),e(Dte,xKe),e(sg,$Ke),e(sg,oR),e(oR,kKe),e(sg,SKe),e(A,RKe),e(A,lg),e(lg,Gte),e(Gte,PKe),e(lg,BKe),e(lg,rR),e(rR,IKe),e(lg,NKe),e(A,qKe),e(A,ig),e(ig,Ote),e(Ote,jKe),e(ig,DKe),e(ig,tR),e(tR,GKe),e(ig,OKe),e(A,VKe),e(A,dg),e(dg,Vte),e(Vte,XKe),e(dg,zKe),e(dg,aR),e(aR,WKe),e(dg,QKe),e(A,HKe),e(A,cg),e(cg,Xte),e(Xte,UKe),e(cg,JKe),e(cg,nR),e(nR,YKe),e(cg,KKe),e(A,ZKe),e(A,fg),e(fg,zte),e(zte,eZe),e(fg,oZe),e(fg,sR),e(sR,rZe),e(fg,tZe),e(A,aZe),e(A,mg),e(mg,Wte),e(Wte,nZe),e(mg,sZe),e(mg,lR),e(lR,lZe),e(mg,iZe),e(A,dZe),e(A,gg),e(gg,Qte),e(Qte,cZe),e(gg,fZe),e(gg,iR),e(iR,mZe),e(gg,gZe),e(A,hZe),e(A,hg),e(hg,Hte),e(Hte,pZe),e(hg,_Ze),e(hg,dR),e(dR,uZe),e(hg,bZe),e(A,vZe),e(A,pg),e(pg,Ute),e(Ute,FZe),e(pg,TZe),e(pg,cR),e(cR,MZe),e(pg,EZe),e(A,CZe),e(A,_g),e(_g,Jte),e(Jte,wZe),e(_g,AZe),e(_g,fR),e(fR,LZe),e(_g,yZe),e(A,xZe),e(A,ug),e(ug,Yte),e(Yte,$Ze),e(ug,kZe),e(ug,mR),e(mR,SZe),e(ug,RZe),e(A,PZe),e(A,bg),e(bg,Kte),e(Kte,BZe),e(bg,IZe),e(bg,gR),e(gR,NZe),e(bg,qZe),e(A,jZe),e(A,vg),e(vg,Zte),e(Zte,DZe),e(vg,GZe),e(vg,hR),e(hR,OZe),e(vg,VZe),e(A,XZe),e(A,Fg),e(Fg,eae),e(eae,zZe),e(Fg,WZe),e(Fg,pR),e(pR,QZe),e(Fg,HZe),e(A,UZe),e(A,Tg),e(Tg,oae),e(oae,JZe),e(Tg,YZe),e(Tg,_R),e(_R,KZe),e(Tg,ZZe),e(A,eeo),e(A,Mg),e(Mg,rae),e(rae,oeo),e(Mg,reo),e(Mg,uR),e(uR,teo),e(Mg,aeo),e(A,neo),e(A,Eg),e(Eg,tae),e(tae,seo),e(Eg,leo),e(Eg,bR),e(bR,ieo),e(Eg,deo),e(A,ceo),e(A,Cg),e(Cg,aae),e(aae,feo),e(Cg,meo),e(Cg,vR),e(vR,geo),e(Cg,heo),e(A,peo),e(A,wg),e(wg,nae),e(nae,_eo),e(wg,ueo),e(wg,FR),e(FR,beo),e(wg,veo),e(A,Feo),e(A,Ag),e(Ag,sae),e(sae,Teo),e(Ag,Meo),e(Ag,TR),e(TR,Eeo),e(Ag,Ceo),e(A,weo),e(A,Lg),e(Lg,lae),e(lae,Aeo),e(Lg,Leo),e(Lg,MR),e(MR,yeo),e(Lg,xeo),e(Er,$eo),M(yg,Er,null),e(Co,keo),e(Co,xg),M(eL,xg,null),e(xg,Seo),e(xg,iae),e(iae,Reo),b(f,Sje,u),b(f,Ei,u),e(Ei,$g),e($g,dae),M(oL,dae,null),e(Ei,Peo),e(Ei,cae),e(cae,Beo),b(f,Rje,u),b(f,wo,u),M(rL,wo,null),e(wo,Ieo),e(wo,tL),e(tL,Neo),e(tL,ER),e(ER,qeo),e(tL,jeo),e(wo,Deo),e(wo,aL),e(aL,Geo),e(aL,fae),e(fae,Oeo),e(aL,Veo),e(wo,Xeo),e(wo,Cr),M(nL,Cr,null),e(Cr,zeo),e(Cr,mae),e(mae,Weo),e(Cr,Qeo),e(Cr,La),e(La,Heo),e(La,gae),e(gae,Ueo),e(La,Jeo),e(La,hae),e(hae,Yeo),e(La,Keo),e(La,pae),e(pae,Zeo),e(La,eoo),e(Cr,ooo),e(Cr,k),e(k,Sn),e(Sn,_ae),e(_ae,roo),e(Sn,too),e(Sn,CR),e(CR,aoo),e(Sn,noo),e(Sn,wR),e(wR,soo),e(Sn,loo),e(k,ioo),e(k,Rn),e(Rn,uae),e(uae,doo),e(Rn,coo),e(Rn,AR),e(AR,foo),e(Rn,moo),e(Rn,LR),e(LR,goo),e(Rn,hoo),e(k,poo),e(k,Pn),e(Pn,bae),e(bae,_oo),e(Pn,uoo),e(Pn,yR),e(yR,boo),e(Pn,voo),e(Pn,xR),e(xR,Foo),e(Pn,Too),e(k,Moo),e(k,kg),e(kg,vae),e(vae,Eoo),e(kg,Coo),e(kg,$R),e($R,woo),e(kg,Aoo),e(k,Loo),e(k,Bn),e(Bn,Fae),e(Fae,yoo),e(Bn,xoo),e(Bn,kR),e(kR,$oo),e(Bn,koo),e(Bn,SR),e(SR,Soo),e(Bn,Roo),e(k,Poo),e(k,Sg),e(Sg,Tae),e(Tae,Boo),e(Sg,Ioo),e(Sg,RR),e(RR,Noo),e(Sg,qoo),e(k,joo),e(k,Rg),e(Rg,Mae),e(Mae,Doo),e(Rg,Goo),e(Rg,PR),e(PR,Ooo),e(Rg,Voo),e(k,Xoo),e(k,Pg),e(Pg,Eae),e(Eae,zoo),e(Pg,Woo),e(Pg,BR),e(BR,Qoo),e(Pg,Hoo),e(k,Uoo),e(k,In),e(In,Cae),e(Cae,Joo),e(In,Yoo),e(In,IR),e(IR,Koo),e(In,Zoo),e(In,NR),e(NR,ero),e(In,oro),e(k,rro),e(k,Nn),e(Nn,wae),e(wae,tro),e(Nn,aro),e(Nn,qR),e(qR,nro),e(Nn,sro),e(Nn,jR),e(jR,lro),e(Nn,iro),e(k,dro),e(k,qn),e(qn,Aae),e(Aae,cro),e(qn,fro),e(qn,DR),e(DR,mro),e(qn,gro),e(qn,GR),e(GR,hro),e(qn,pro),e(k,_ro),e(k,Bg),e(Bg,Lae),e(Lae,uro),e(Bg,bro),e(Bg,OR),e(OR,vro),e(Bg,Fro),e(k,Tro),e(k,Ig),e(Ig,yae),e(yae,Mro),e(Ig,Ero),e(Ig,VR),e(VR,Cro),e(Ig,wro),e(k,Aro),e(k,Ng),e(Ng,xae),e(xae,Lro),e(Ng,yro),e(Ng,XR),e(XR,xro),e(Ng,$ro),e(k,kro),e(k,jn),e(jn,$ae),e($ae,Sro),e(jn,Rro),e(jn,zR),e(zR,Pro),e(jn,Bro),e(jn,WR),e(WR,Iro),e(jn,Nro),e(k,qro),e(k,qg),e(qg,kae),e(kae,jro),e(qg,Dro),e(qg,QR),e(QR,Gro),e(qg,Oro),e(k,Vro),e(k,Dn),e(Dn,Sae),e(Sae,Xro),e(Dn,zro),e(Dn,HR),e(HR,Wro),e(Dn,Qro),e(Dn,UR),e(UR,Hro),e(Dn,Uro),e(k,Jro),e(k,Gn),e(Gn,Rae),e(Rae,Yro),e(Gn,Kro),e(Gn,JR),e(JR,Zro),e(Gn,eto),e(Gn,YR),e(YR,oto),e(Gn,rto),e(k,tto),e(k,On),e(On,Pae),e(Pae,ato),e(On,nto),e(On,KR),e(KR,sto),e(On,lto),e(On,ZR),e(ZR,ito),e(On,dto),e(k,cto),e(k,jg),e(jg,Bae),e(Bae,fto),e(jg,mto),e(jg,eP),e(eP,gto),e(jg,hto),e(k,pto),e(k,Vn),e(Vn,Iae),e(Iae,_to),e(Vn,uto),e(Vn,oP),e(oP,bto),e(Vn,vto),e(Vn,rP),e(rP,Fto),e(Vn,Tto),e(k,Mto),e(k,Xn),e(Xn,Nae),e(Nae,Eto),e(Xn,Cto),e(Xn,tP),e(tP,wto),e(Xn,Ato),e(Xn,aP),e(aP,Lto),e(Xn,yto),e(k,xto),e(k,zn),e(zn,qae),e(qae,$to),e(zn,kto),e(zn,nP),e(nP,Sto),e(zn,Rto),e(zn,sP),e(sP,Pto),e(zn,Bto),e(k,Ito),e(k,Wn),e(Wn,jae),e(jae,Nto),e(Wn,qto),e(Wn,lP),e(lP,jto),e(Wn,Dto),e(Wn,iP),e(iP,Gto),e(Wn,Oto),e(k,Vto),e(k,Qn),e(Qn,Dae),e(Dae,Xto),e(Qn,zto),e(Qn,dP),e(dP,Wto),e(Qn,Qto),e(Qn,cP),e(cP,Hto),e(Qn,Uto),e(k,Jto),e(k,Hn),e(Hn,Gae),e(Gae,Yto),e(Hn,Kto),e(Hn,fP),e(fP,Zto),e(Hn,eao),e(Hn,mP),e(mP,oao),e(Hn,rao),e(k,tao),e(k,Dg),e(Dg,Oae),e(Oae,aao),e(Dg,nao),e(Dg,gP),e(gP,sao),e(Dg,lao),e(k,iao),e(k,Un),e(Un,Vae),e(Vae,dao),e(Un,cao),e(Un,hP),e(hP,fao),e(Un,mao),e(Un,pP),e(pP,gao),e(Un,hao),e(k,pao),e(k,Gg),e(Gg,Xae),e(Xae,_ao),e(Gg,uao),e(Gg,_P),e(_P,bao),e(Gg,vao),e(k,Fao),e(k,Jn),e(Jn,zae),e(zae,Tao),e(Jn,Mao),e(Jn,uP),e(uP,Eao),e(Jn,Cao),e(Jn,bP),e(bP,wao),e(Jn,Aao),e(k,Lao),e(k,Yn),e(Yn,Wae),e(Wae,yao),e(Yn,xao),e(Yn,vP),e(vP,$ao),e(Yn,kao),e(Yn,FP),e(FP,Sao),e(Yn,Rao),e(k,Pao),e(k,Kn),e(Kn,Qae),e(Qae,Bao),e(Kn,Iao),e(Kn,TP),e(TP,Nao),e(Kn,qao),e(Kn,MP),e(MP,jao),e(Kn,Dao),e(k,Gao),e(k,Og),e(Og,Hae),e(Hae,Oao),e(Og,Vao),e(Og,EP),e(EP,Xao),e(Og,zao),e(k,Wao),e(k,Zn),e(Zn,Uae),e(Uae,Qao),e(Zn,Hao),e(Zn,CP),e(CP,Uao),e(Zn,Jao),e(Zn,wP),e(wP,Yao),e(Zn,Kao),e(k,Zao),e(k,es),e(es,Jae),e(Jae,eno),e(es,ono),e(es,AP),e(AP,rno),e(es,tno),e(es,LP),e(LP,ano),e(es,nno),e(k,sno),e(k,Vg),e(Vg,Yae),e(Yae,lno),e(Vg,ino),e(Vg,yP),e(yP,dno),e(Vg,cno),e(k,fno),e(k,os),e(os,Kae),e(Kae,mno),e(os,gno),e(os,xP),e(xP,hno),e(os,pno),e(os,$P),e($P,_no),e(os,uno),e(k,bno),e(k,rs),e(rs,Zae),e(Zae,vno),e(rs,Fno),e(rs,kP),e(kP,Tno),e(rs,Mno),e(rs,SP),e(SP,Eno),e(rs,Cno),e(k,wno),e(k,ts),e(ts,ene),e(ene,Ano),e(ts,Lno),e(ts,RP),e(RP,yno),e(ts,xno),e(ts,PP),e(PP,$no),e(ts,kno),e(k,Sno),e(k,as),e(as,one),e(one,Rno),e(as,Pno),e(as,BP),e(BP,Bno),e(as,Ino),e(as,IP),e(IP,Nno),e(as,qno),e(k,jno),e(k,ns),e(ns,rne),e(rne,Dno),e(ns,Gno),e(ns,NP),e(NP,Ono),e(ns,Vno),e(ns,qP),e(qP,Xno),e(ns,zno),e(k,Wno),e(k,ss),e(ss,tne),e(tne,Qno),e(ss,Hno),e(ss,jP),e(jP,Uno),e(ss,Jno),e(ss,DP),e(DP,Yno),e(ss,Kno),e(k,Zno),e(k,ls),e(ls,ane),e(ane,eso),e(ls,oso),e(ls,GP),e(GP,rso),e(ls,tso),e(ls,OP),e(OP,aso),e(ls,nso),e(k,sso),e(k,Xg),e(Xg,nne),e(nne,lso),e(Xg,iso),e(Xg,VP),e(VP,dso),e(Xg,cso),e(k,fso),e(k,is),e(is,sne),e(sne,mso),e(is,gso),e(is,XP),e(XP,hso),e(is,pso),e(is,zP),e(zP,_so),e(is,uso),e(k,bso),e(k,zg),e(zg,lne),e(lne,vso),e(zg,Fso),e(zg,WP),e(WP,Tso),e(zg,Mso),e(k,Eso),e(k,Wg),e(Wg,ine),e(ine,Cso),e(Wg,wso),e(Wg,QP),e(QP,Aso),e(Wg,Lso),e(k,yso),e(k,ds),e(ds,dne),e(dne,xso),e(ds,$so),e(ds,HP),e(HP,kso),e(ds,Sso),e(ds,UP),e(UP,Rso),e(ds,Pso),e(k,Bso),e(k,cs),e(cs,cne),e(cne,Iso),e(cs,Nso),e(cs,JP),e(JP,qso),e(cs,jso),e(cs,YP),e(YP,Dso),e(cs,Gso),e(k,Oso),e(k,fs),e(fs,fne),e(fne,Vso),e(fs,Xso),e(fs,KP),e(KP,zso),e(fs,Wso),e(fs,ZP),e(ZP,Qso),e(fs,Hso),e(k,Uso),e(k,Qg),e(Qg,mne),e(mne,Jso),e(Qg,Yso),e(Qg,eB),e(eB,Kso),e(Qg,Zso),e(k,elo),e(k,ms),e(ms,gne),e(gne,olo),e(ms,rlo),e(ms,oB),e(oB,tlo),e(ms,alo),e(ms,rB),e(rB,nlo),e(ms,slo),e(k,llo),e(k,gs),e(gs,hne),e(hne,ilo),e(gs,dlo),e(gs,tB),e(tB,clo),e(gs,flo),e(gs,aB),e(aB,mlo),e(gs,glo),e(k,hlo),e(k,hs),e(hs,pne),e(pne,plo),e(hs,_lo),e(hs,nB),e(nB,ulo),e(hs,blo),e(hs,sB),e(sB,vlo),e(hs,Flo),e(k,Tlo),e(k,ps),e(ps,_ne),e(_ne,Mlo),e(ps,Elo),e(ps,lB),e(lB,Clo),e(ps,wlo),e(ps,iB),e(iB,Alo),e(ps,Llo),e(k,ylo),e(k,_s),e(_s,une),e(une,xlo),e(_s,$lo),e(_s,dB),e(dB,klo),e(_s,Slo),e(_s,cB),e(cB,Rlo),e(_s,Plo),e(k,Blo),e(k,Hg),e(Hg,bne),e(bne,Ilo),e(Hg,Nlo),e(Hg,fB),e(fB,qlo),e(Hg,jlo),e(k,Dlo),e(k,us),e(us,vne),e(vne,Glo),e(us,Olo),e(us,mB),e(mB,Vlo),e(us,Xlo),e(us,gB),e(gB,zlo),e(us,Wlo),e(k,Qlo),e(k,Ug),e(Ug,Fne),e(Fne,Hlo),e(Ug,Ulo),e(Ug,hB),e(hB,Jlo),e(Ug,Ylo),e(k,Klo),e(k,Jg),e(Jg,Tne),e(Tne,Zlo),e(Jg,eio),e(Jg,pB),e(pB,oio),e(Jg,rio),e(k,tio),e(k,Yg),e(Yg,Mne),e(Mne,aio),e(Yg,nio),e(Yg,_B),e(_B,sio),e(Yg,lio),e(k,iio),e(k,Kg),e(Kg,Ene),e(Ene,dio),e(Kg,cio),e(Kg,uB),e(uB,fio),e(Kg,mio),e(k,gio),e(k,bs),e(bs,Cne),e(Cne,hio),e(bs,pio),e(bs,bB),e(bB,_io),e(bs,uio),e(bs,vB),e(vB,bio),e(bs,vio),e(k,Fio),e(k,Zg),e(Zg,wne),e(wne,Tio),e(Zg,Mio),e(Zg,FB),e(FB,Eio),e(Zg,Cio),e(k,wio),e(k,vs),e(vs,Ane),e(Ane,Aio),e(vs,Lio),e(vs,TB),e(TB,yio),e(vs,xio),e(vs,MB),e(MB,$io),e(vs,kio),e(k,Sio),e(k,Fs),e(Fs,Lne),e(Lne,Rio),e(Fs,Pio),e(Fs,EB),e(EB,Bio),e(Fs,Iio),e(Fs,CB),e(CB,Nio),e(Fs,qio),e(k,jio),e(k,Ts),e(Ts,yne),e(yne,Dio),e(Ts,Gio),e(Ts,wB),e(wB,Oio),e(Ts,Vio),e(Ts,AB),e(AB,Xio),e(Ts,zio),e(k,Wio),e(k,Ms),e(Ms,xne),e(xne,Qio),e(Ms,Hio),e(Ms,LB),e(LB,Uio),e(Ms,Jio),e(Ms,yB),e(yB,Yio),e(Ms,Kio),e(k,Zio),e(k,Es),e(Es,$ne),e($ne,edo),e(Es,odo),e(Es,xB),e(xB,rdo),e(Es,tdo),e(Es,$B),e($B,ado),e(Es,ndo),e(k,sdo),e(k,Cs),e(Cs,kne),e(kne,ldo),e(Cs,ido),e(Cs,kB),e(kB,ddo),e(Cs,cdo),e(Cs,SB),e(SB,fdo),e(Cs,mdo),e(k,gdo),e(k,eh),e(eh,Sne),e(Sne,hdo),e(eh,pdo),e(eh,RB),e(RB,_do),e(eh,udo),e(k,bdo),e(k,oh),e(oh,Rne),e(Rne,vdo),e(oh,Fdo),e(oh,PB),e(PB,Tdo),e(oh,Mdo),e(k,Edo),e(k,ws),e(ws,Pne),e(Pne,Cdo),e(ws,wdo),e(ws,BB),e(BB,Ado),e(ws,Ldo),e(ws,IB),e(IB,ydo),e(ws,xdo),e(k,$do),e(k,As),e(As,Bne),e(Bne,kdo),e(As,Sdo),e(As,NB),e(NB,Rdo),e(As,Pdo),e(As,qB),e(qB,Bdo),e(As,Ido),e(k,Ndo),e(k,Ls),e(Ls,Ine),e(Ine,qdo),e(Ls,jdo),e(Ls,jB),e(jB,Ddo),e(Ls,Gdo),e(Ls,DB),e(DB,Odo),e(Ls,Vdo),e(k,Xdo),e(k,rh),e(rh,Nne),e(Nne,zdo),e(rh,Wdo),e(rh,GB),e(GB,Qdo),e(rh,Hdo),e(k,Udo),e(k,th),e(th,qne),e(qne,Jdo),e(th,Ydo),e(th,OB),e(OB,Kdo),e(th,Zdo),e(k,eco),e(k,ah),e(ah,jne),e(jne,oco),e(ah,rco),e(ah,VB),e(VB,tco),e(ah,aco),e(k,nco),e(k,ys),e(ys,Dne),e(Dne,sco),e(ys,lco),e(ys,XB),e(XB,ico),e(ys,dco),e(ys,zB),e(zB,cco),e(ys,fco),e(k,mco),e(k,nh),e(nh,Gne),e(Gne,gco),e(nh,hco),e(nh,WB),e(WB,pco),e(nh,_co),e(k,uco),e(k,sh),e(sh,One),e(One,bco),e(sh,vco),e(sh,QB),e(QB,Fco),e(sh,Tco),e(k,Mco),e(k,lh),e(lh,Vne),e(Vne,Eco),e(lh,Cco),e(lh,HB),e(HB,wco),e(lh,Aco),e(k,Lco),e(k,xs),e(xs,Xne),e(Xne,yco),e(xs,xco),e(xs,UB),e(UB,$co),e(xs,kco),e(xs,JB),e(JB,Sco),e(xs,Rco),e(k,Pco),e(k,ih),e(ih,zne),e(zne,Bco),e(ih,Ico),e(ih,YB),e(YB,Nco),e(ih,qco),e(k,jco),e(k,dh),e(dh,Wne),e(Wne,Dco),e(dh,Gco),e(dh,KB),e(KB,Oco),e(dh,Vco),e(k,Xco),e(k,$s),e($s,Qne),e(Qne,zco),e($s,Wco),e($s,ZB),e(ZB,Qco),e($s,Hco),e($s,eI),e(eI,Uco),e($s,Jco),e(k,Yco),e(k,ks),e(ks,Hne),e(Hne,Kco),e(ks,Zco),e(ks,oI),e(oI,efo),e(ks,ofo),e(ks,rI),e(rI,rfo),e(ks,tfo),e(k,afo),e(k,Ss),e(Ss,Une),e(Une,nfo),e(Ss,sfo),e(Ss,tI),e(tI,lfo),e(Ss,ifo),e(Ss,aI),e(aI,dfo),e(Ss,cfo),e(k,ffo),e(k,Rs),e(Rs,Jne),e(Jne,mfo),e(Rs,gfo),e(Rs,nI),e(nI,hfo),e(Rs,pfo),e(Rs,sI),e(sI,_fo),e(Rs,ufo),e(Cr,bfo),M(ch,Cr,null),e(wo,vfo),e(wo,fh),M(sL,fh,null),e(fh,Ffo),e(fh,Yne),e(Yne,Tfo),b(f,Pje,u),b(f,Ci,u),e(Ci,mh),e(mh,Kne),M(lL,Kne,null),e(Ci,Mfo),e(Ci,Zne),e(Zne,Efo),b(f,Bje,u),b(f,Ao,u),M(iL,Ao,null),e(Ao,Cfo),e(Ao,dL),e(dL,wfo),e(dL,lI),e(lI,Afo),e(dL,Lfo),e(Ao,yfo),e(Ao,cL),e(cL,xfo),e(cL,ese),e(ese,$fo),e(cL,kfo),e(Ao,Sfo),e(Ao,He),M(fL,He,null),e(He,Rfo),e(He,ose),e(ose,Pfo),e(He,Bfo),e(He,ya),e(ya,Ifo),e(ya,rse),e(rse,Nfo),e(ya,qfo),e(ya,tse),e(tse,jfo),e(ya,Dfo),e(ya,ase),e(ase,Gfo),e(ya,Ofo),e(He,Vfo),e(He,Y),e(Y,gh),e(gh,nse),e(nse,Xfo),e(gh,zfo),e(gh,iI),e(iI,Wfo),e(gh,Qfo),e(Y,Hfo),e(Y,hh),e(hh,sse),e(sse,Ufo),e(hh,Jfo),e(hh,dI),e(dI,Yfo),e(hh,Kfo),e(Y,Zfo),e(Y,ph),e(ph,lse),e(lse,emo),e(ph,omo),e(ph,cI),e(cI,rmo),e(ph,tmo),e(Y,amo),e(Y,_h),e(_h,ise),e(ise,nmo),e(_h,smo),e(_h,fI),e(fI,lmo),e(_h,imo),e(Y,dmo),e(Y,uh),e(uh,dse),e(dse,cmo),e(uh,fmo),e(uh,mI),e(mI,mmo),e(uh,gmo),e(Y,hmo),e(Y,bh),e(bh,cse),e(cse,pmo),e(bh,_mo),e(bh,gI),e(gI,umo),e(bh,bmo),e(Y,vmo),e(Y,vh),e(vh,fse),e(fse,Fmo),e(vh,Tmo),e(vh,hI),e(hI,Mmo),e(vh,Emo),e(Y,Cmo),e(Y,Fh),e(Fh,mse),e(mse,wmo),e(Fh,Amo),e(Fh,pI),e(pI,Lmo),e(Fh,ymo),e(Y,xmo),e(Y,Th),e(Th,gse),e(gse,$mo),e(Th,kmo),e(Th,_I),e(_I,Smo),e(Th,Rmo),e(Y,Pmo),e(Y,Mh),e(Mh,hse),e(hse,Bmo),e(Mh,Imo),e(Mh,uI),e(uI,Nmo),e(Mh,qmo),e(Y,jmo),e(Y,Eh),e(Eh,pse),e(pse,Dmo),e(Eh,Gmo),e(Eh,bI),e(bI,Omo),e(Eh,Vmo),e(Y,Xmo),e(Y,Ch),e(Ch,_se),e(_se,zmo),e(Ch,Wmo),e(Ch,vI),e(vI,Qmo),e(Ch,Hmo),e(Y,Umo),e(Y,wh),e(wh,use),e(use,Jmo),e(wh,Ymo),e(wh,FI),e(FI,Kmo),e(wh,Zmo),e(Y,ego),e(Y,Ah),e(Ah,bse),e(bse,ogo),e(Ah,rgo),e(Ah,TI),e(TI,tgo),e(Ah,ago),e(Y,ngo),e(Y,Lh),e(Lh,vse),e(vse,sgo),e(Lh,lgo),e(Lh,MI),e(MI,igo),e(Lh,dgo),e(Y,cgo),e(Y,yh),e(yh,Fse),e(Fse,fgo),e(yh,mgo),e(yh,EI),e(EI,ggo),e(yh,hgo),e(Y,pgo),e(Y,xh),e(xh,Tse),e(Tse,_go),e(xh,ugo),e(xh,CI),e(CI,bgo),e(xh,vgo),e(Y,Fgo),e(Y,$h),e($h,Mse),e(Mse,Tgo),e($h,Mgo),e($h,wI),e(wI,Ego),e($h,Cgo),e(Y,wgo),e(Y,kh),e(kh,Ese),e(Ese,Ago),e(kh,Lgo),e(kh,AI),e(AI,ygo),e(kh,xgo),e(Y,$go),e(Y,Sh),e(Sh,Cse),e(Cse,kgo),e(Sh,Sgo),e(Sh,LI),e(LI,Rgo),e(Sh,Pgo),e(Y,Bgo),e(Y,Rh),e(Rh,wse),e(wse,Igo),e(Rh,Ngo),e(Rh,yI),e(yI,qgo),e(Rh,jgo),e(Y,Dgo),e(Y,Ph),e(Ph,Ase),e(Ase,Ggo),e(Ph,Ogo),e(Ph,xI),e(xI,Vgo),e(Ph,Xgo),e(Y,zgo),e(Y,Bh),e(Bh,Lse),e(Lse,Wgo),e(Bh,Qgo),e(Bh,$I),e($I,Hgo),e(Bh,Ugo),e(Y,Jgo),e(Y,Ih),e(Ih,yse),e(yse,Ygo),e(Ih,Kgo),e(Ih,kI),e(kI,Zgo),e(Ih,eho),e(Y,oho),e(Y,Nh),e(Nh,xse),e(xse,rho),e(Nh,tho),e(Nh,SI),e(SI,aho),e(Nh,nho),e(Y,sho),e(Y,qh),e(qh,$se),e($se,lho),e(qh,iho),e(qh,RI),e(RI,dho),e(qh,cho),e(Y,fho),e(Y,jh),e(jh,kse),e(kse,mho),e(jh,gho),e(jh,PI),e(PI,hho),e(jh,pho),e(Y,_ho),e(Y,Dh),e(Dh,Sse),e(Sse,uho),e(Dh,bho),e(Dh,BI),e(BI,vho),e(Dh,Fho),e(Y,Tho),e(Y,Gh),e(Gh,Rse),e(Rse,Mho),e(Gh,Eho),e(Gh,II),e(II,Cho),e(Gh,who),e(Y,Aho),e(Y,Oh),e(Oh,Pse),e(Pse,Lho),e(Oh,yho),e(Oh,NI),e(NI,xho),e(Oh,$ho),e(Y,kho),e(Y,Vh),e(Vh,Bse),e(Bse,Sho),e(Vh,Rho),e(Vh,qI),e(qI,Pho),e(Vh,Bho),e(He,Iho),M(Xh,He,null),e(He,Nho),M(zh,He,null),e(Ao,qho),e(Ao,Wh),M(mL,Wh,null),e(Wh,jho),e(Wh,Ise),e(Ise,Dho),b(f,Ije,u),b(f,wi,u),e(wi,Qh),e(Qh,Nse),M(gL,Nse,null),e(wi,Gho),e(wi,qse),e(qse,Oho),b(f,Nje,u),b(f,Lo,u),M(hL,Lo,null),e(Lo,Vho),e(Lo,pL),e(pL,Xho),e(pL,jI),e(jI,zho),e(pL,Who),e(Lo,Qho),e(Lo,_L),e(_L,Hho),e(_L,jse),e(jse,Uho),e(_L,Jho),e(Lo,Yho),e(Lo,Ue),M(uL,Ue,null),e(Ue,Kho),e(Ue,Dse),e(Dse,Zho),e(Ue,epo),e(Ue,Ai),e(Ai,opo),e(Ai,Gse),e(Gse,rpo),e(Ai,tpo),e(Ai,Ose),e(Ose,apo),e(Ai,npo),e(Ue,spo),e(Ue,he),e(he,Hh),e(Hh,Vse),e(Vse,lpo),e(Hh,ipo),e(Hh,DI),e(DI,dpo),e(Hh,cpo),e(he,fpo),e(he,Uh),e(Uh,Xse),e(Xse,mpo),e(Uh,gpo),e(Uh,zse),e(zse,hpo),e(Uh,ppo),e(he,_po),e(he,Jh),e(Jh,Wse),e(Wse,upo),e(Jh,bpo),e(Jh,GI),e(GI,vpo),e(Jh,Fpo),e(he,Tpo),e(he,Yh),e(Yh,Qse),e(Qse,Mpo),e(Yh,Epo),e(Yh,OI),e(OI,Cpo),e(Yh,wpo),e(he,Apo),e(he,Kh),e(Kh,Hse),e(Hse,Lpo),e(Kh,ypo),e(Kh,VI),e(VI,xpo),e(Kh,$po),e(he,kpo),e(he,Zh),e(Zh,Use),e(Use,Spo),e(Zh,Rpo),e(Zh,XI),e(XI,Ppo),e(Zh,Bpo),e(he,Ipo),e(he,ep),e(ep,Jse),e(Jse,Npo),e(ep,qpo),e(ep,zI),e(zI,jpo),e(ep,Dpo),e(he,Gpo),e(he,op),e(op,Yse),e(Yse,Opo),e(op,Vpo),e(op,WI),e(WI,Xpo),e(op,zpo),e(he,Wpo),e(he,rp),e(rp,Kse),e(Kse,Qpo),e(rp,Hpo),e(rp,QI),e(QI,Upo),e(rp,Jpo),e(he,Ypo),e(he,tp),e(tp,Zse),e(Zse,Kpo),e(tp,Zpo),e(tp,HI),e(HI,e_o),e(tp,o_o),e(he,r_o),e(he,ap),e(ap,ele),e(ele,t_o),e(ap,a_o),e(ap,UI),e(UI,n_o),e(ap,s_o),e(he,l_o),e(he,np),e(np,ole),e(ole,i_o),e(np,d_o),e(np,JI),e(JI,c_o),e(np,f_o),e(he,m_o),e(he,sp),e(sp,rle),e(rle,g_o),e(sp,h_o),e(sp,YI),e(YI,p_o),e(sp,__o),e(he,u_o),e(he,lp),e(lp,tle),e(tle,b_o),e(lp,v_o),e(lp,KI),e(KI,F_o),e(lp,T_o),e(he,M_o),e(he,ip),e(ip,ale),e(ale,E_o),e(ip,C_o),e(ip,ZI),e(ZI,w_o),e(ip,A_o),e(he,L_o),e(he,dp),e(dp,nle),e(nle,y_o),e(dp,x_o),e(dp,eN),e(eN,$_o),e(dp,k_o),e(he,S_o),e(he,cp),e(cp,sle),e(sle,R_o),e(cp,P_o),e(cp,oN),e(oN,B_o),e(cp,I_o),e(Ue,N_o),M(fp,Ue,null),e(Ue,q_o),M(mp,Ue,null),e(Lo,j_o),e(Lo,gp),M(bL,gp,null),e(gp,D_o),e(gp,lle),e(lle,G_o),b(f,qje,u),b(f,Li,u),e(Li,hp),e(hp,ile),M(vL,ile,null),e(Li,O_o),e(Li,dle),e(dle,V_o),b(f,jje,u),b(f,yo,u),M(FL,yo,null),e(yo,X_o),e(yo,yi),e(yi,z_o),e(yi,rN),e(rN,W_o),e(yi,Q_o),e(yi,tN),e(tN,H_o),e(yi,U_o),e(yo,J_o),e(yo,TL),e(TL,Y_o),e(TL,cle),e(cle,K_o),e(TL,Z_o),e(yo,euo),e(yo,at),M(ML,at,null),e(at,ouo),e(at,fle),e(fle,ruo),e(at,tuo),e(at,xi),e(xi,auo),e(xi,mle),e(mle,nuo),e(xi,suo),e(xi,aN),e(aN,luo),e(xi,iuo),e(at,duo),M(pp,at,null),e(yo,cuo),e(yo,Je),M(EL,Je,null),e(Je,fuo),e(Je,gle),e(gle,muo),e(Je,guo),e(Je,xa),e(xa,huo),e(xa,hle),e(hle,puo),e(xa,_uo),e(xa,ple),e(ple,uuo),e(xa,buo),e(xa,_le),e(_le,vuo),e(xa,Fuo),e(Je,Tuo),e(Je,y),e(y,_p),e(_p,ule),e(ule,Muo),e(_p,Euo),e(_p,nN),e(nN,Cuo),e(_p,wuo),e(y,Auo),e(y,up),e(up,ble),e(ble,Luo),e(up,yuo),e(up,sN),e(sN,xuo),e(up,$uo),e(y,kuo),e(y,bp),e(bp,vle),e(vle,Suo),e(bp,Ruo),e(bp,lN),e(lN,Puo),e(bp,Buo),e(y,Iuo),e(y,vp),e(vp,Fle),e(Fle,Nuo),e(vp,quo),e(vp,iN),e(iN,juo),e(vp,Duo),e(y,Guo),e(y,Fp),e(Fp,Tle),e(Tle,Ouo),e(Fp,Vuo),e(Fp,dN),e(dN,Xuo),e(Fp,zuo),e(y,Wuo),e(y,Tp),e(Tp,Mle),e(Mle,Quo),e(Tp,Huo),e(Tp,cN),e(cN,Uuo),e(Tp,Juo),e(y,Yuo),e(y,Mp),e(Mp,Ele),e(Ele,Kuo),e(Mp,Zuo),e(Mp,fN),e(fN,e5o),e(Mp,o5o),e(y,r5o),e(y,Ep),e(Ep,Cle),e(Cle,t5o),e(Ep,a5o),e(Ep,mN),e(mN,n5o),e(Ep,s5o),e(y,l5o),e(y,Cp),e(Cp,wle),e(wle,i5o),e(Cp,d5o),e(Cp,gN),e(gN,c5o),e(Cp,f5o),e(y,m5o),e(y,wp),e(wp,Ale),e(Ale,g5o),e(wp,h5o),e(wp,hN),e(hN,p5o),e(wp,_5o),e(y,u5o),e(y,Ap),e(Ap,Lle),e(Lle,b5o),e(Ap,v5o),e(Ap,pN),e(pN,F5o),e(Ap,T5o),e(y,M5o),e(y,Lp),e(Lp,yle),e(yle,E5o),e(Lp,C5o),e(Lp,_N),e(_N,w5o),e(Lp,A5o),e(y,L5o),e(y,yp),e(yp,xle),e(xle,y5o),e(yp,x5o),e(yp,uN),e(uN,$5o),e(yp,k5o),e(y,S5o),e(y,xp),e(xp,$le),e($le,R5o),e(xp,P5o),e(xp,bN),e(bN,B5o),e(xp,I5o),e(y,N5o),e(y,$p),e($p,kle),e(kle,q5o),e($p,j5o),e($p,vN),e(vN,D5o),e($p,G5o),e(y,O5o),e(y,kp),e(kp,Sle),e(Sle,V5o),e(kp,X5o),e(kp,FN),e(FN,z5o),e(kp,W5o),e(y,Q5o),e(y,Sp),e(Sp,Rle),e(Rle,H5o),e(Sp,U5o),e(Sp,TN),e(TN,J5o),e(Sp,Y5o),e(y,K5o),e(y,Rp),e(Rp,Ple),e(Ple,Z5o),e(Rp,e1o),e(Rp,MN),e(MN,o1o),e(Rp,r1o),e(y,t1o),e(y,Pp),e(Pp,Ble),e(Ble,a1o),e(Pp,n1o),e(Pp,EN),e(EN,s1o),e(Pp,l1o),e(y,i1o),e(y,Bp),e(Bp,Ile),e(Ile,d1o),e(Bp,c1o),e(Bp,CN),e(CN,f1o),e(Bp,m1o),e(y,g1o),e(y,Ip),e(Ip,Nle),e(Nle,h1o),e(Ip,p1o),e(Ip,wN),e(wN,_1o),e(Ip,u1o),e(y,b1o),e(y,Np),e(Np,qle),e(qle,v1o),e(Np,F1o),e(Np,AN),e(AN,T1o),e(Np,M1o),e(y,E1o),e(y,qp),e(qp,jle),e(jle,C1o),e(qp,w1o),e(qp,LN),e(LN,A1o),e(qp,L1o),e(y,y1o),e(y,jp),e(jp,Dle),e(Dle,x1o),e(jp,$1o),e(jp,yN),e(yN,k1o),e(jp,S1o),e(y,R1o),e(y,Dp),e(Dp,Gle),e(Gle,P1o),e(Dp,B1o),e(Dp,xN),e(xN,I1o),e(Dp,N1o),e(y,q1o),e(y,Gp),e(Gp,Ole),e(Ole,j1o),e(Gp,D1o),e(Gp,$N),e($N,G1o),e(Gp,O1o),e(y,V1o),e(y,Op),e(Op,Vle),e(Vle,X1o),e(Op,z1o),e(Op,kN),e(kN,W1o),e(Op,Q1o),e(y,H1o),e(y,Vp),e(Vp,Xle),e(Xle,U1o),e(Vp,J1o),e(Vp,SN),e(SN,Y1o),e(Vp,K1o),e(y,Z1o),e(y,Xp),e(Xp,zle),e(zle,ebo),e(Xp,obo),e(Xp,RN),e(RN,rbo),e(Xp,tbo),e(y,abo),e(y,zp),e(zp,Wle),e(Wle,nbo),e(zp,sbo),e(zp,PN),e(PN,lbo),e(zp,ibo),e(y,dbo),e(y,Wp),e(Wp,Qle),e(Qle,cbo),e(Wp,fbo),e(Wp,BN),e(BN,mbo),e(Wp,gbo),e(y,hbo),e(y,Qp),e(Qp,Hle),e(Hle,pbo),e(Qp,_bo),e(Qp,IN),e(IN,ubo),e(Qp,bbo),e(y,vbo),e(y,Hp),e(Hp,Ule),e(Ule,Fbo),e(Hp,Tbo),e(Hp,NN),e(NN,Mbo),e(Hp,Ebo),e(y,Cbo),e(y,Ps),e(Ps,Jle),e(Jle,wbo),e(Ps,Abo),e(Ps,qN),e(qN,Lbo),e(Ps,ybo),e(Ps,jN),e(jN,xbo),e(Ps,$bo),e(y,kbo),e(y,Up),e(Up,Yle),e(Yle,Sbo),e(Up,Rbo),e(Up,DN),e(DN,Pbo),e(Up,Bbo),e(y,Ibo),e(y,Jp),e(Jp,Kle),e(Kle,Nbo),e(Jp,qbo),e(Jp,GN),e(GN,jbo),e(Jp,Dbo),e(y,Gbo),e(y,Yp),e(Yp,Zle),e(Zle,Obo),e(Yp,Vbo),e(Yp,ON),e(ON,Xbo),e(Yp,zbo),e(y,Wbo),e(y,Kp),e(Kp,eie),e(eie,Qbo),e(Kp,Hbo),e(Kp,VN),e(VN,Ubo),e(Kp,Jbo),e(y,Ybo),e(y,Zp),e(Zp,oie),e(oie,Kbo),e(Zp,Zbo),e(Zp,XN),e(XN,e2o),e(Zp,o2o),e(y,r2o),e(y,e_),e(e_,rie),e(rie,t2o),e(e_,a2o),e(e_,zN),e(zN,n2o),e(e_,s2o),e(y,l2o),e(y,o_),e(o_,tie),e(tie,i2o),e(o_,d2o),e(o_,WN),e(WN,c2o),e(o_,f2o),e(y,m2o),e(y,r_),e(r_,aie),e(aie,g2o),e(r_,h2o),e(r_,QN),e(QN,p2o),e(r_,_2o),e(y,u2o),e(y,t_),e(t_,nie),e(nie,b2o),e(t_,v2o),e(t_,HN),e(HN,F2o),e(t_,T2o),e(y,M2o),e(y,a_),e(a_,sie),e(sie,E2o),e(a_,C2o),e(a_,UN),e(UN,w2o),e(a_,A2o),e(y,L2o),e(y,n_),e(n_,lie),e(lie,y2o),e(n_,x2o),e(n_,JN),e(JN,$2o),e(n_,k2o),e(y,S2o),e(y,s_),e(s_,iie),e(iie,R2o),e(s_,P2o),e(s_,YN),e(YN,B2o),e(s_,I2o),e(y,N2o),e(y,l_),e(l_,die),e(die,q2o),e(l_,j2o),e(l_,KN),e(KN,D2o),e(l_,G2o),e(y,O2o),e(y,i_),e(i_,cie),e(cie,V2o),e(i_,X2o),e(i_,ZN),e(ZN,z2o),e(i_,W2o),e(y,Q2o),e(y,d_),e(d_,fie),e(fie,H2o),e(d_,U2o),e(d_,eq),e(eq,J2o),e(d_,Y2o),e(y,K2o),e(y,c_),e(c_,mie),e(mie,Z2o),e(c_,e4o),e(c_,oq),e(oq,o4o),e(c_,r4o),e(y,t4o),e(y,f_),e(f_,gie),e(gie,a4o),e(f_,n4o),e(f_,rq),e(rq,s4o),e(f_,l4o),e(y,i4o),e(y,m_),e(m_,hie),e(hie,d4o),e(m_,c4o),e(m_,tq),e(tq,f4o),e(m_,m4o),e(y,g4o),e(y,g_),e(g_,pie),e(pie,h4o),e(g_,p4o),e(g_,aq),e(aq,_4o),e(g_,u4o),e(y,b4o),e(y,h_),e(h_,_ie),e(_ie,v4o),e(h_,F4o),e(h_,nq),e(nq,T4o),e(h_,M4o),e(y,E4o),e(y,p_),e(p_,uie),e(uie,C4o),e(p_,w4o),e(p_,sq),e(sq,A4o),e(p_,L4o),e(y,y4o),e(y,__),e(__,bie),e(bie,x4o),e(__,$4o),e(__,lq),e(lq,k4o),e(__,S4o),e(y,R4o),e(y,u_),e(u_,vie),e(vie,P4o),e(u_,B4o),e(u_,iq),e(iq,I4o),e(u_,N4o),e(y,q4o),e(y,b_),e(b_,Fie),e(Fie,j4o),e(b_,D4o),e(b_,dq),e(dq,G4o),e(b_,O4o),e(y,V4o),e(y,v_),e(v_,Tie),e(Tie,X4o),e(v_,z4o),e(v_,cq),e(cq,W4o),e(v_,Q4o),e(y,H4o),e(y,F_),e(F_,Mie),e(Mie,U4o),e(F_,J4o),e(F_,fq),e(fq,Y4o),e(F_,K4o),e(y,Z4o),e(y,T_),e(T_,Eie),e(Eie,evo),e(T_,ovo),e(T_,mq),e(mq,rvo),e(T_,tvo),e(y,avo),e(y,M_),e(M_,Cie),e(Cie,nvo),e(M_,svo),e(M_,gq),e(gq,lvo),e(M_,ivo),e(y,dvo),e(y,E_),e(E_,wie),e(wie,cvo),e(E_,fvo),e(E_,hq),e(hq,mvo),e(E_,gvo),e(y,hvo),e(y,C_),e(C_,Aie),e(Aie,pvo),e(C_,_vo),e(C_,pq),e(pq,uvo),e(C_,bvo),e(y,vvo),e(y,w_),e(w_,Lie),e(Lie,Fvo),e(w_,Tvo),e(w_,_q),e(_q,Mvo),e(w_,Evo),e(y,Cvo),e(y,A_),e(A_,yie),e(yie,wvo),e(A_,Avo),e(A_,uq),e(uq,Lvo),e(A_,yvo),e(y,xvo),e(y,L_),e(L_,xie),e(xie,$vo),e(L_,kvo),e(L_,bq),e(bq,Svo),e(L_,Rvo),e(y,Pvo),e(y,y_),e(y_,$ie),e($ie,Bvo),e(y_,Ivo),e(y_,vq),e(vq,Nvo),e(y_,qvo),e(y,jvo),e(y,x_),e(x_,kie),e(kie,Dvo),e(x_,Gvo),e(x_,Fq),e(Fq,Ovo),e(x_,Vvo),e(y,Xvo),e(y,$_),e($_,Sie),e(Sie,zvo),e($_,Wvo),e($_,Tq),e(Tq,Qvo),e($_,Hvo),e(y,Uvo),e(y,k_),e(k_,Rie),e(Rie,Jvo),e(k_,Yvo),e(k_,Mq),e(Mq,Kvo),e(k_,Zvo),e(y,eFo),e(y,S_),e(S_,Pie),e(Pie,oFo),e(S_,rFo),e(S_,Eq),e(Eq,tFo),e(S_,aFo),e(y,nFo),e(y,R_),e(R_,Bie),e(Bie,sFo),e(R_,lFo),e(R_,Cq),e(Cq,iFo),e(R_,dFo),e(y,cFo),e(y,P_),e(P_,Iie),e(Iie,fFo),e(P_,mFo),e(P_,wq),e(wq,gFo),e(P_,hFo),e(y,pFo),e(y,B_),e(B_,Nie),e(Nie,_Fo),e(B_,uFo),e(B_,Aq),e(Aq,bFo),e(B_,vFo),e(y,FFo),e(y,I_),e(I_,qie),e(qie,TFo),e(I_,MFo),e(I_,Lq),e(Lq,EFo),e(I_,CFo),e(y,wFo),e(y,N_),e(N_,jie),e(jie,AFo),e(N_,LFo),e(N_,yq),e(yq,yFo),e(N_,xFo),e(y,$Fo),e(y,q_),e(q_,Die),e(Die,kFo),e(q_,SFo),e(q_,xq),e(xq,RFo),e(q_,PFo),e(y,BFo),e(y,j_),e(j_,Gie),e(Gie,IFo),e(j_,NFo),e(j_,$q),e($q,qFo),e(j_,jFo),e(y,DFo),e(y,D_),e(D_,Oie),e(Oie,GFo),e(D_,OFo),e(D_,kq),e(kq,VFo),e(D_,XFo),e(y,zFo),e(y,G_),e(G_,Vie),e(Vie,WFo),e(G_,QFo),e(G_,Sq),e(Sq,HFo),e(G_,UFo),e(y,JFo),e(y,O_),e(O_,Xie),e(Xie,YFo),e(O_,KFo),e(O_,Rq),e(Rq,ZFo),e(O_,eTo),e(y,oTo),e(y,V_),e(V_,zie),e(zie,rTo),e(V_,tTo),e(V_,Pq),e(Pq,aTo),e(V_,nTo),e(y,sTo),e(y,X_),e(X_,Wie),e(Wie,lTo),e(X_,iTo),e(X_,Bq),e(Bq,dTo),e(X_,cTo),e(y,fTo),e(y,z_),e(z_,Qie),e(Qie,mTo),e(z_,gTo),e(z_,Iq),e(Iq,hTo),e(z_,pTo),e(y,_To),e(y,W_),e(W_,Hie),e(Hie,uTo),e(W_,bTo),e(W_,Nq),e(Nq,vTo),e(W_,FTo),e(y,TTo),e(y,Q_),e(Q_,Uie),e(Uie,MTo),e(Q_,ETo),e(Q_,qq),e(qq,CTo),e(Q_,wTo),e(y,ATo),e(y,H_),e(H_,Jie),e(Jie,LTo),e(H_,yTo),e(H_,jq),e(jq,xTo),e(H_,$To),e(y,kTo),e(y,U_),e(U_,Yie),e(Yie,STo),e(U_,RTo),e(U_,Dq),e(Dq,PTo),e(U_,BTo),e(y,ITo),e(y,J_),e(J_,Kie),e(Kie,NTo),e(J_,qTo),e(J_,Gq),e(Gq,jTo),e(J_,DTo),e(y,GTo),e(y,Y_),e(Y_,Zie),e(Zie,OTo),e(Y_,VTo),e(Y_,Oq),e(Oq,XTo),e(Y_,zTo),e(y,WTo),e(y,K_),e(K_,ede),e(ede,QTo),e(K_,HTo),e(K_,Vq),e(Vq,UTo),e(K_,JTo),e(y,YTo),e(y,Z_),e(Z_,ode),e(ode,KTo),e(Z_,ZTo),e(Z_,Xq),e(Xq,e7o),e(Z_,o7o),e(y,r7o),e(y,eu),e(eu,rde),e(rde,t7o),e(eu,a7o),e(eu,zq),e(zq,n7o),e(eu,s7o),e(y,l7o),e(y,ou),e(ou,tde),e(tde,i7o),e(ou,d7o),e(ou,Wq),e(Wq,c7o),e(ou,f7o),e(y,m7o),e(y,ru),e(ru,ade),e(ade,g7o),e(ru,h7o),e(ru,Qq),e(Qq,p7o),e(ru,_7o),e(y,u7o),e(y,tu),e(tu,nde),e(nde,b7o),e(tu,v7o),e(tu,Hq),e(Hq,F7o),e(tu,T7o),e(y,M7o),e(y,au),e(au,sde),e(sde,E7o),e(au,C7o),e(au,Uq),e(Uq,w7o),e(au,A7o),e(y,L7o),e(y,nu),e(nu,lde),e(lde,y7o),e(nu,x7o),e(nu,Jq),e(Jq,$7o),e(nu,k7o),e(y,S7o),e(y,su),e(su,ide),e(ide,R7o),e(su,P7o),e(su,Yq),e(Yq,B7o),e(su,I7o),e(y,N7o),e(y,lu),e(lu,dde),e(dde,q7o),e(lu,j7o),e(lu,Kq),e(Kq,D7o),e(lu,G7o),e(y,O7o),e(y,iu),e(iu,cde),e(cde,V7o),e(iu,X7o),e(iu,Zq),e(Zq,z7o),e(iu,W7o),e(y,Q7o),e(y,du),e(du,fde),e(fde,H7o),e(du,U7o),e(du,ej),e(ej,J7o),e(du,Y7o),e(y,K7o),e(y,cu),e(cu,mde),e(mde,Z7o),e(cu,eMo),e(cu,oj),e(oj,oMo),e(cu,rMo),e(y,tMo),e(y,fu),e(fu,gde),e(gde,aMo),e(fu,nMo),e(fu,rj),e(rj,sMo),e(fu,lMo),e(Je,iMo),e(Je,mu),e(mu,dMo),e(mu,hde),e(hde,cMo),e(mu,fMo),e(mu,pde),e(pde,mMo),e(Je,gMo),M(gu,Je,null),b(f,Dje,u),b(f,$i,u),e($i,hu),e(hu,_de),M(CL,_de,null),e($i,hMo),e($i,ude),e(ude,pMo),b(f,Gje,u),b(f,xo,u),M(wL,xo,null),e(xo,_Mo),e(xo,ki),e(ki,uMo),e(ki,tj),e(tj,bMo),e(ki,vMo),e(ki,aj),e(aj,FMo),e(ki,TMo),e(xo,MMo),e(xo,AL),e(AL,EMo),e(AL,bde),e(bde,CMo),e(AL,wMo),e(xo,AMo),e(xo,nt),M(LL,nt,null),e(nt,LMo),e(nt,vde),e(vde,yMo),e(nt,xMo),e(nt,Si),e(Si,$Mo),e(Si,Fde),e(Fde,kMo),e(Si,SMo),e(Si,nj),e(nj,RMo),e(Si,PMo),e(nt,BMo),M(pu,nt,null),e(xo,IMo),e(xo,Ye),M(yL,Ye,null),e(Ye,NMo),e(Ye,Tde),e(Tde,qMo),e(Ye,jMo),e(Ye,$a),e($a,DMo),e($a,Mde),e(Mde,GMo),e($a,OMo),e($a,Ede),e(Ede,VMo),e($a,XMo),e($a,Cde),e(Cde,zMo),e($a,WMo),e(Ye,QMo),e(Ye,G),e(G,_u),e(_u,wde),e(wde,HMo),e(_u,UMo),e(_u,sj),e(sj,JMo),e(_u,YMo),e(G,KMo),e(G,uu),e(uu,Ade),e(Ade,ZMo),e(uu,eEo),e(uu,lj),e(lj,oEo),e(uu,rEo),e(G,tEo),e(G,bu),e(bu,Lde),e(Lde,aEo),e(bu,nEo),e(bu,ij),e(ij,sEo),e(bu,lEo),e(G,iEo),e(G,vu),e(vu,yde),e(yde,dEo),e(vu,cEo),e(vu,dj),e(dj,fEo),e(vu,mEo),e(G,gEo),e(G,Fu),e(Fu,xde),e(xde,hEo),e(Fu,pEo),e(Fu,cj),e(cj,_Eo),e(Fu,uEo),e(G,bEo),e(G,Tu),e(Tu,$de),e($de,vEo),e(Tu,FEo),e(Tu,fj),e(fj,TEo),e(Tu,MEo),e(G,EEo),e(G,Mu),e(Mu,kde),e(kde,CEo),e(Mu,wEo),e(Mu,mj),e(mj,AEo),e(Mu,LEo),e(G,yEo),e(G,Eu),e(Eu,Sde),e(Sde,xEo),e(Eu,$Eo),e(Eu,gj),e(gj,kEo),e(Eu,SEo),e(G,REo),e(G,Cu),e(Cu,Rde),e(Rde,PEo),e(Cu,BEo),e(Cu,hj),e(hj,IEo),e(Cu,NEo),e(G,qEo),e(G,wu),e(wu,Pde),e(Pde,jEo),e(wu,DEo),e(wu,pj),e(pj,GEo),e(wu,OEo),e(G,VEo),e(G,Au),e(Au,Bde),e(Bde,XEo),e(Au,zEo),e(Au,_j),e(_j,WEo),e(Au,QEo),e(G,HEo),e(G,Lu),e(Lu,Ide),e(Ide,UEo),e(Lu,JEo),e(Lu,uj),e(uj,YEo),e(Lu,KEo),e(G,ZEo),e(G,yu),e(yu,Nde),e(Nde,eCo),e(yu,oCo),e(yu,bj),e(bj,rCo),e(yu,tCo),e(G,aCo),e(G,xu),e(xu,qde),e(qde,nCo),e(xu,sCo),e(xu,vj),e(vj,lCo),e(xu,iCo),e(G,dCo),e(G,$u),e($u,jde),e(jde,cCo),e($u,fCo),e($u,Fj),e(Fj,mCo),e($u,gCo),e(G,hCo),e(G,ku),e(ku,Dde),e(Dde,pCo),e(ku,_Co),e(ku,Tj),e(Tj,uCo),e(ku,bCo),e(G,vCo),e(G,Su),e(Su,Gde),e(Gde,FCo),e(Su,TCo),e(Su,Mj),e(Mj,MCo),e(Su,ECo),e(G,CCo),e(G,Ru),e(Ru,Ode),e(Ode,wCo),e(Ru,ACo),e(Ru,Ej),e(Ej,LCo),e(Ru,yCo),e(G,xCo),e(G,Pu),e(Pu,Vde),e(Vde,$Co),e(Pu,kCo),e(Pu,Cj),e(Cj,SCo),e(Pu,RCo),e(G,PCo),e(G,Bu),e(Bu,Xde),e(Xde,BCo),e(Bu,ICo),e(Bu,wj),e(wj,NCo),e(Bu,qCo),e(G,jCo),e(G,Iu),e(Iu,zde),e(zde,DCo),e(Iu,GCo),e(Iu,Aj),e(Aj,OCo),e(Iu,VCo),e(G,XCo),e(G,Nu),e(Nu,Wde),e(Wde,zCo),e(Nu,WCo),e(Nu,Lj),e(Lj,QCo),e(Nu,HCo),e(G,UCo),e(G,qu),e(qu,Qde),e(Qde,JCo),e(qu,YCo),e(qu,yj),e(yj,KCo),e(qu,ZCo),e(G,e3o),e(G,ju),e(ju,Hde),e(Hde,o3o),e(ju,r3o),e(ju,xj),e(xj,t3o),e(ju,a3o),e(G,n3o),e(G,Du),e(Du,Ude),e(Ude,s3o),e(Du,l3o),e(Du,$j),e($j,i3o),e(Du,d3o),e(G,c3o),e(G,Gu),e(Gu,Jde),e(Jde,f3o),e(Gu,m3o),e(Gu,kj),e(kj,g3o),e(Gu,h3o),e(G,p3o),e(G,Ou),e(Ou,Yde),e(Yde,_3o),e(Ou,u3o),e(Ou,Sj),e(Sj,b3o),e(Ou,v3o),e(G,F3o),e(G,Vu),e(Vu,Kde),e(Kde,T3o),e(Vu,M3o),e(Vu,Rj),e(Rj,E3o),e(Vu,C3o),e(G,w3o),e(G,Xu),e(Xu,Zde),e(Zde,A3o),e(Xu,L3o),e(Xu,Pj),e(Pj,y3o),e(Xu,x3o),e(G,$3o),e(G,zu),e(zu,ece),e(ece,k3o),e(zu,S3o),e(zu,Bj),e(Bj,R3o),e(zu,P3o),e(G,B3o),e(G,Wu),e(Wu,oce),e(oce,I3o),e(Wu,N3o),e(Wu,Ij),e(Ij,q3o),e(Wu,j3o),e(G,D3o),e(G,Qu),e(Qu,rce),e(rce,G3o),e(Qu,O3o),e(Qu,Nj),e(Nj,V3o),e(Qu,X3o),e(G,z3o),e(G,Hu),e(Hu,tce),e(tce,W3o),e(Hu,Q3o),e(Hu,qj),e(qj,H3o),e(Hu,U3o),e(G,J3o),e(G,Uu),e(Uu,ace),e(ace,Y3o),e(Uu,K3o),e(Uu,jj),e(jj,Z3o),e(Uu,e0o),e(G,o0o),e(G,Ju),e(Ju,nce),e(nce,r0o),e(Ju,t0o),e(Ju,Dj),e(Dj,a0o),e(Ju,n0o),e(G,s0o),e(G,Yu),e(Yu,sce),e(sce,l0o),e(Yu,i0o),e(Yu,Gj),e(Gj,d0o),e(Yu,c0o),e(G,f0o),e(G,Ku),e(Ku,lce),e(lce,m0o),e(Ku,g0o),e(Ku,Oj),e(Oj,h0o),e(Ku,p0o),e(G,_0o),e(G,Zu),e(Zu,ice),e(ice,u0o),e(Zu,b0o),e(Zu,Vj),e(Vj,v0o),e(Zu,F0o),e(G,T0o),e(G,e5),e(e5,dce),e(dce,M0o),e(e5,E0o),e(e5,Xj),e(Xj,C0o),e(e5,w0o),e(G,A0o),e(G,o5),e(o5,cce),e(cce,L0o),e(o5,y0o),e(o5,zj),e(zj,x0o),e(o5,$0o),e(G,k0o),e(G,r5),e(r5,fce),e(fce,S0o),e(r5,R0o),e(r5,Wj),e(Wj,P0o),e(r5,B0o),e(G,I0o),e(G,t5),e(t5,mce),e(mce,N0o),e(t5,q0o),e(t5,Qj),e(Qj,j0o),e(t5,D0o),e(G,G0o),e(G,a5),e(a5,gce),e(gce,O0o),e(a5,V0o),e(a5,Hj),e(Hj,X0o),e(a5,z0o),e(Ye,W0o),e(Ye,n5),e(n5,Q0o),e(n5,hce),e(hce,H0o),e(n5,U0o),e(n5,pce),e(pce,J0o),e(Ye,Y0o),M(s5,Ye,null),b(f,Oje,u),b(f,Ri,u),e(Ri,l5),e(l5,_ce),M(xL,_ce,null),e(Ri,K0o),e(Ri,uce),e(uce,Z0o),b(f,Vje,u),b(f,$o,u),M($L,$o,null),e($o,ewo),e($o,Pi),e(Pi,owo),e(Pi,Uj),e(Uj,rwo),e(Pi,two),e(Pi,Jj),e(Jj,awo),e(Pi,nwo),e($o,swo),e($o,kL),e(kL,lwo),e(kL,bce),e(bce,iwo),e(kL,dwo),e($o,cwo),e($o,st),M(SL,st,null),e(st,fwo),e(st,vce),e(vce,mwo),e(st,gwo),e(st,Bi),e(Bi,hwo),e(Bi,Fce),e(Fce,pwo),e(Bi,_wo),e(Bi,Yj),e(Yj,uwo),e(Bi,bwo),e(st,vwo),M(i5,st,null),e($o,Fwo),e($o,Ke),M(RL,Ke,null),e(Ke,Two),e(Ke,Tce),e(Tce,Mwo),e(Ke,Ewo),e(Ke,ka),e(ka,Cwo),e(ka,Mce),e(Mce,wwo),e(ka,Awo),e(ka,Ece),e(Ece,Lwo),e(ka,ywo),e(ka,Cce),e(Cce,xwo),e(ka,$wo),e(Ke,kwo),e(Ke,z),e(z,d5),e(d5,wce),e(wce,Swo),e(d5,Rwo),e(d5,Kj),e(Kj,Pwo),e(d5,Bwo),e(z,Iwo),e(z,c5),e(c5,Ace),e(Ace,Nwo),e(c5,qwo),e(c5,Zj),e(Zj,jwo),e(c5,Dwo),e(z,Gwo),e(z,f5),e(f5,Lce),e(Lce,Owo),e(f5,Vwo),e(f5,eD),e(eD,Xwo),e(f5,zwo),e(z,Wwo),e(z,m5),e(m5,yce),e(yce,Qwo),e(m5,Hwo),e(m5,oD),e(oD,Uwo),e(m5,Jwo),e(z,Ywo),e(z,g5),e(g5,xce),e(xce,Kwo),e(g5,Zwo),e(g5,rD),e(rD,eAo),e(g5,oAo),e(z,rAo),e(z,h5),e(h5,$ce),e($ce,tAo),e(h5,aAo),e(h5,tD),e(tD,nAo),e(h5,sAo),e(z,lAo),e(z,p5),e(p5,kce),e(kce,iAo),e(p5,dAo),e(p5,aD),e(aD,cAo),e(p5,fAo),e(z,mAo),e(z,_5),e(_5,Sce),e(Sce,gAo),e(_5,hAo),e(_5,nD),e(nD,pAo),e(_5,_Ao),e(z,uAo),e(z,u5),e(u5,Rce),e(Rce,bAo),e(u5,vAo),e(u5,sD),e(sD,FAo),e(u5,TAo),e(z,MAo),e(z,b5),e(b5,Pce),e(Pce,EAo),e(b5,CAo),e(b5,lD),e(lD,wAo),e(b5,AAo),e(z,LAo),e(z,v5),e(v5,Bce),e(Bce,yAo),e(v5,xAo),e(v5,iD),e(iD,$Ao),e(v5,kAo),e(z,SAo),e(z,F5),e(F5,Ice),e(Ice,RAo),e(F5,PAo),e(F5,dD),e(dD,BAo),e(F5,IAo),e(z,NAo),e(z,T5),e(T5,Nce),e(Nce,qAo),e(T5,jAo),e(T5,cD),e(cD,DAo),e(T5,GAo),e(z,OAo),e(z,M5),e(M5,qce),e(qce,VAo),e(M5,XAo),e(M5,fD),e(fD,zAo),e(M5,WAo),e(z,QAo),e(z,E5),e(E5,jce),e(jce,HAo),e(E5,UAo),e(E5,mD),e(mD,JAo),e(E5,YAo),e(z,KAo),e(z,C5),e(C5,Dce),e(Dce,ZAo),e(C5,e6o),e(C5,gD),e(gD,o6o),e(C5,r6o),e(z,t6o),e(z,w5),e(w5,Gce),e(Gce,a6o),e(w5,n6o),e(w5,hD),e(hD,s6o),e(w5,l6o),e(z,i6o),e(z,A5),e(A5,Oce),e(Oce,d6o),e(A5,c6o),e(A5,pD),e(pD,f6o),e(A5,m6o),e(z,g6o),e(z,L5),e(L5,Vce),e(Vce,h6o),e(L5,p6o),e(L5,_D),e(_D,_6o),e(L5,u6o),e(z,b6o),e(z,y5),e(y5,Xce),e(Xce,v6o),e(y5,F6o),e(y5,uD),e(uD,T6o),e(y5,M6o),e(z,E6o),e(z,x5),e(x5,zce),e(zce,C6o),e(x5,w6o),e(x5,bD),e(bD,A6o),e(x5,L6o),e(z,y6o),e(z,$5),e($5,Wce),e(Wce,x6o),e($5,$6o),e($5,vD),e(vD,k6o),e($5,S6o),e(z,R6o),e(z,k5),e(k5,Qce),e(Qce,P6o),e(k5,B6o),e(k5,FD),e(FD,I6o),e(k5,N6o),e(z,q6o),e(z,S5),e(S5,Hce),e(Hce,j6o),e(S5,D6o),e(S5,TD),e(TD,G6o),e(S5,O6o),e(z,V6o),e(z,R5),e(R5,Uce),e(Uce,X6o),e(R5,z6o),e(R5,MD),e(MD,W6o),e(R5,Q6o),e(z,H6o),e(z,P5),e(P5,Jce),e(Jce,U6o),e(P5,J6o),e(P5,ED),e(ED,Y6o),e(P5,K6o),e(z,Z6o),e(z,B5),e(B5,Yce),e(Yce,eLo),e(B5,oLo),e(B5,CD),e(CD,rLo),e(B5,tLo),e(z,aLo),e(z,I5),e(I5,Kce),e(Kce,nLo),e(I5,sLo),e(I5,wD),e(wD,lLo),e(I5,iLo),e(z,dLo),e(z,N5),e(N5,Zce),e(Zce,cLo),e(N5,fLo),e(N5,AD),e(AD,mLo),e(N5,gLo),e(z,hLo),e(z,q5),e(q5,efe),e(efe,pLo),e(q5,_Lo),e(q5,LD),e(LD,uLo),e(q5,bLo),e(z,vLo),e(z,j5),e(j5,ofe),e(ofe,FLo),e(j5,TLo),e(j5,yD),e(yD,MLo),e(j5,ELo),e(z,CLo),e(z,D5),e(D5,rfe),e(rfe,wLo),e(D5,ALo),e(D5,xD),e(xD,LLo),e(D5,yLo),e(z,xLo),e(z,G5),e(G5,tfe),e(tfe,$Lo),e(G5,kLo),e(G5,$D),e($D,SLo),e(G5,RLo),e(z,PLo),e(z,O5),e(O5,afe),e(afe,BLo),e(O5,ILo),e(O5,kD),e(kD,NLo),e(O5,qLo),e(z,jLo),e(z,V5),e(V5,nfe),e(nfe,DLo),e(V5,GLo),e(V5,SD),e(SD,OLo),e(V5,VLo),e(z,XLo),e(z,X5),e(X5,sfe),e(sfe,zLo),e(X5,WLo),e(X5,RD),e(RD,QLo),e(X5,HLo),e(z,ULo),e(z,z5),e(z5,lfe),e(lfe,JLo),e(z5,YLo),e(z5,PD),e(PD,KLo),e(z5,ZLo),e(z,eyo),e(z,W5),e(W5,ife),e(ife,oyo),e(W5,ryo),e(W5,BD),e(BD,tyo),e(W5,ayo),e(Ke,nyo),e(Ke,Q5),e(Q5,syo),e(Q5,dfe),e(dfe,lyo),e(Q5,iyo),e(Q5,cfe),e(cfe,dyo),e(Ke,cyo),M(H5,Ke,null),b(f,Xje,u),b(f,Ii,u),e(Ii,U5),e(U5,ffe),M(PL,ffe,null),e(Ii,fyo),e(Ii,mfe),e(mfe,myo),b(f,zje,u),b(f,ko,u),M(BL,ko,null),e(ko,gyo),e(ko,Ni),e(Ni,hyo),e(Ni,ID),e(ID,pyo),e(Ni,_yo),e(Ni,ND),e(ND,uyo),e(Ni,byo),e(ko,vyo),e(ko,IL),e(IL,Fyo),e(IL,gfe),e(gfe,Tyo),e(IL,Myo),e(ko,Eyo),e(ko,lt),M(NL,lt,null),e(lt,Cyo),e(lt,hfe),e(hfe,wyo),e(lt,Ayo),e(lt,qi),e(qi,Lyo),e(qi,pfe),e(pfe,yyo),e(qi,xyo),e(qi,qD),e(qD,$yo),e(qi,kyo),e(lt,Syo),M(J5,lt,null),e(ko,Ryo),e(ko,Ze),M(qL,Ze,null),e(Ze,Pyo),e(Ze,_fe),e(_fe,Byo),e(Ze,Iyo),e(Ze,Sa),e(Sa,Nyo),e(Sa,ufe),e(ufe,qyo),e(Sa,jyo),e(Sa,bfe),e(bfe,Dyo),e(Sa,Gyo),e(Sa,vfe),e(vfe,Oyo),e(Sa,Vyo),e(Ze,Xyo),e(Ze,Q),e(Q,Y5),e(Y5,Ffe),e(Ffe,zyo),e(Y5,Wyo),e(Y5,jD),e(jD,Qyo),e(Y5,Hyo),e(Q,Uyo),e(Q,K5),e(K5,Tfe),e(Tfe,Jyo),e(K5,Yyo),e(K5,DD),e(DD,Kyo),e(K5,Zyo),e(Q,e8o),e(Q,Z5),e(Z5,Mfe),e(Mfe,o8o),e(Z5,r8o),e(Z5,GD),e(GD,t8o),e(Z5,a8o),e(Q,n8o),e(Q,e1),e(e1,Efe),e(Efe,s8o),e(e1,l8o),e(e1,OD),e(OD,i8o),e(e1,d8o),e(Q,c8o),e(Q,o1),e(o1,Cfe),e(Cfe,f8o),e(o1,m8o),e(o1,VD),e(VD,g8o),e(o1,h8o),e(Q,p8o),e(Q,r1),e(r1,wfe),e(wfe,_8o),e(r1,u8o),e(r1,XD),e(XD,b8o),e(r1,v8o),e(Q,F8o),e(Q,t1),e(t1,Afe),e(Afe,T8o),e(t1,M8o),e(t1,zD),e(zD,E8o),e(t1,C8o),e(Q,w8o),e(Q,a1),e(a1,Lfe),e(Lfe,A8o),e(a1,L8o),e(a1,WD),e(WD,y8o),e(a1,x8o),e(Q,$8o),e(Q,n1),e(n1,yfe),e(yfe,k8o),e(n1,S8o),e(n1,QD),e(QD,R8o),e(n1,P8o),e(Q,B8o),e(Q,s1),e(s1,xfe),e(xfe,I8o),e(s1,N8o),e(s1,HD),e(HD,q8o),e(s1,j8o),e(Q,D8o),e(Q,l1),e(l1,$fe),e($fe,G8o),e(l1,O8o),e(l1,UD),e(UD,V8o),e(l1,X8o),e(Q,z8o),e(Q,i1),e(i1,kfe),e(kfe,W8o),e(i1,Q8o),e(i1,JD),e(JD,H8o),e(i1,U8o),e(Q,J8o),e(Q,d1),e(d1,Sfe),e(Sfe,Y8o),e(d1,K8o),e(d1,YD),e(YD,Z8o),e(d1,e9o),e(Q,o9o),e(Q,c1),e(c1,Rfe),e(Rfe,r9o),e(c1,t9o),e(c1,KD),e(KD,a9o),e(c1,n9o),e(Q,s9o),e(Q,f1),e(f1,Pfe),e(Pfe,l9o),e(f1,i9o),e(f1,ZD),e(ZD,d9o),e(f1,c9o),e(Q,f9o),e(Q,m1),e(m1,Bfe),e(Bfe,m9o),e(m1,g9o),e(m1,eG),e(eG,h9o),e(m1,p9o),e(Q,_9o),e(Q,g1),e(g1,Ife),e(Ife,u9o),e(g1,b9o),e(g1,oG),e(oG,v9o),e(g1,F9o),e(Q,T9o),e(Q,h1),e(h1,Nfe),e(Nfe,M9o),e(h1,E9o),e(h1,rG),e(rG,C9o),e(h1,w9o),e(Q,A9o),e(Q,p1),e(p1,qfe),e(qfe,L9o),e(p1,y9o),e(p1,tG),e(tG,x9o),e(p1,$9o),e(Q,k9o),e(Q,_1),e(_1,jfe),e(jfe,S9o),e(_1,R9o),e(_1,aG),e(aG,P9o),e(_1,B9o),e(Q,I9o),e(Q,u1),e(u1,Dfe),e(Dfe,N9o),e(u1,q9o),e(u1,nG),e(nG,j9o),e(u1,D9o),e(Q,G9o),e(Q,b1),e(b1,Gfe),e(Gfe,O9o),e(b1,V9o),e(b1,sG),e(sG,X9o),e(b1,z9o),e(Q,W9o),e(Q,v1),e(v1,Ofe),e(Ofe,Q9o),e(v1,H9o),e(v1,lG),e(lG,U9o),e(v1,J9o),e(Q,Y9o),e(Q,F1),e(F1,Vfe),e(Vfe,K9o),e(F1,Z9o),e(F1,iG),e(iG,exo),e(F1,oxo),e(Q,rxo),e(Q,T1),e(T1,Xfe),e(Xfe,txo),e(T1,axo),e(T1,dG),e(dG,nxo),e(T1,sxo),e(Q,lxo),e(Q,M1),e(M1,zfe),e(zfe,ixo),e(M1,dxo),e(M1,cG),e(cG,cxo),e(M1,fxo),e(Q,mxo),e(Q,E1),e(E1,Wfe),e(Wfe,gxo),e(E1,hxo),e(E1,fG),e(fG,pxo),e(E1,_xo),e(Q,uxo),e(Q,C1),e(C1,Qfe),e(Qfe,bxo),e(C1,vxo),e(C1,mG),e(mG,Fxo),e(C1,Txo),e(Q,Mxo),e(Q,w1),e(w1,Hfe),e(Hfe,Exo),e(w1,Cxo),e(w1,gG),e(gG,wxo),e(w1,Axo),e(Q,Lxo),e(Q,A1),e(A1,Ufe),e(Ufe,yxo),e(A1,xxo),e(A1,hG),e(hG,$xo),e(A1,kxo),e(Q,Sxo),e(Q,L1),e(L1,Jfe),e(Jfe,Rxo),e(L1,Pxo),e(L1,pG),e(pG,Bxo),e(L1,Ixo),e(Q,Nxo),e(Q,y1),e(y1,Yfe),e(Yfe,qxo),e(y1,jxo),e(y1,Kfe),e(Kfe,Dxo),e(y1,Gxo),e(Q,Oxo),e(Q,x1),e(x1,Zfe),e(Zfe,Vxo),e(x1,Xxo),e(x1,_G),e(_G,zxo),e(x1,Wxo),e(Q,Qxo),e(Q,$1),e($1,eme),e(eme,Hxo),e($1,Uxo),e($1,uG),e(uG,Jxo),e($1,Yxo),e(Q,Kxo),e(Q,k1),e(k1,ome),e(ome,Zxo),e(k1,e$o),e(k1,bG),e(bG,o$o),e(k1,r$o),e(Q,t$o),e(Q,S1),e(S1,rme),e(rme,a$o),e(S1,n$o),e(S1,vG),e(vG,s$o),e(S1,l$o),e(Ze,i$o),e(Ze,R1),e(R1,d$o),e(R1,tme),e(tme,c$o),e(R1,f$o),e(R1,ame),e(ame,m$o),e(Ze,g$o),M(P1,Ze,null),b(f,Wje,u),b(f,ji,u),e(ji,B1),e(B1,nme),M(jL,nme,null),e(ji,h$o),e(ji,sme),e(sme,p$o),b(f,Qje,u),b(f,So,u),M(DL,So,null),e(So,_$o),e(So,Di),e(Di,u$o),e(Di,FG),e(FG,b$o),e(Di,v$o),e(Di,TG),e(TG,F$o),e(Di,T$o),e(So,M$o),e(So,GL),e(GL,E$o),e(GL,lme),e(lme,C$o),e(GL,w$o),e(So,A$o),e(So,it),M(OL,it,null),e(it,L$o),e(it,ime),e(ime,y$o),e(it,x$o),e(it,Gi),e(Gi,$$o),e(Gi,dme),e(dme,k$o),e(Gi,S$o),e(Gi,MG),e(MG,R$o),e(Gi,P$o),e(it,B$o),M(I1,it,null),e(So,I$o),e(So,eo),M(VL,eo,null),e(eo,N$o),e(eo,cme),e(cme,q$o),e(eo,j$o),e(eo,Ra),e(Ra,D$o),e(Ra,fme),e(fme,G$o),e(Ra,O$o),e(Ra,mme),e(mme,V$o),e(Ra,X$o),e(Ra,gme),e(gme,z$o),e(Ra,W$o),e(eo,Q$o),e(eo,_e),e(_e,N1),e(N1,hme),e(hme,H$o),e(N1,U$o),e(N1,EG),e(EG,J$o),e(N1,Y$o),e(_e,K$o),e(_e,q1),e(q1,pme),e(pme,Z$o),e(q1,eko),e(q1,CG),e(CG,oko),e(q1,rko),e(_e,tko),e(_e,j1),e(j1,_me),e(_me,ako),e(j1,nko),e(j1,wG),e(wG,sko),e(j1,lko),e(_e,iko),e(_e,D1),e(D1,ume),e(ume,dko),e(D1,cko),e(D1,AG),e(AG,fko),e(D1,mko),e(_e,gko),e(_e,G1),e(G1,bme),e(bme,hko),e(G1,pko),e(G1,LG),e(LG,_ko),e(G1,uko),e(_e,bko),e(_e,O1),e(O1,vme),e(vme,vko),e(O1,Fko),e(O1,yG),e(yG,Tko),e(O1,Mko),e(_e,Eko),e(_e,V1),e(V1,Fme),e(Fme,Cko),e(V1,wko),e(V1,xG),e(xG,Ako),e(V1,Lko),e(_e,yko),e(_e,X1),e(X1,Tme),e(Tme,xko),e(X1,$ko),e(X1,$G),e($G,kko),e(X1,Sko),e(_e,Rko),e(_e,z1),e(z1,Mme),e(Mme,Pko),e(z1,Bko),e(z1,kG),e(kG,Iko),e(z1,Nko),e(_e,qko),e(_e,W1),e(W1,Eme),e(Eme,jko),e(W1,Dko),e(W1,SG),e(SG,Gko),e(W1,Oko),e(_e,Vko),e(_e,Q1),e(Q1,Cme),e(Cme,Xko),e(Q1,zko),e(Q1,RG),e(RG,Wko),e(Q1,Qko),e(_e,Hko),e(_e,H1),e(H1,wme),e(wme,Uko),e(H1,Jko),e(H1,PG),e(PG,Yko),e(H1,Kko),e(_e,Zko),e(_e,U1),e(U1,Ame),e(Ame,eSo),e(U1,oSo),e(U1,BG),e(BG,rSo),e(U1,tSo),e(_e,aSo),e(_e,J1),e(J1,Lme),e(Lme,nSo),e(J1,sSo),e(J1,IG),e(IG,lSo),e(J1,iSo),e(_e,dSo),e(_e,Y1),e(Y1,yme),e(yme,cSo),e(Y1,fSo),e(Y1,NG),e(NG,mSo),e(Y1,gSo),e(_e,hSo),e(_e,K1),e(K1,xme),e(xme,pSo),e(K1,_So),e(K1,qG),e(qG,uSo),e(K1,bSo),e(eo,vSo),e(eo,Z1),e(Z1,FSo),e(Z1,$me),e($me,TSo),e(Z1,MSo),e(Z1,kme),e(kme,ESo),e(eo,CSo),M(eb,eo,null),b(f,Hje,u),b(f,Oi,u),e(Oi,ob),e(ob,Sme),M(XL,Sme,null),e(Oi,wSo),e(Oi,Rme),e(Rme,ASo),b(f,Uje,u),b(f,Ro,u),M(zL,Ro,null),e(Ro,LSo),e(Ro,Vi),e(Vi,ySo),e(Vi,jG),e(jG,xSo),e(Vi,$So),e(Vi,DG),e(DG,kSo),e(Vi,SSo),e(Ro,RSo),e(Ro,WL),e(WL,PSo),e(WL,Pme),e(Pme,BSo),e(WL,ISo),e(Ro,NSo),e(Ro,dt),M(QL,dt,null),e(dt,qSo),e(dt,Bme),e(Bme,jSo),e(dt,DSo),e(dt,Xi),e(Xi,GSo),e(Xi,Ime),e(Ime,OSo),e(Xi,VSo),e(Xi,GG),e(GG,XSo),e(Xi,zSo),e(dt,WSo),M(rb,dt,null),e(Ro,QSo),e(Ro,oo),M(HL,oo,null),e(oo,HSo),e(oo,Nme),e(Nme,USo),e(oo,JSo),e(oo,Pa),e(Pa,YSo),e(Pa,qme),e(qme,KSo),e(Pa,ZSo),e(Pa,jme),e(jme,eRo),e(Pa,oRo),e(Pa,Dme),e(Dme,rRo),e(Pa,tRo),e(oo,aRo),e(oo,q),e(q,tb),e(tb,Gme),e(Gme,nRo),e(tb,sRo),e(tb,OG),e(OG,lRo),e(tb,iRo),e(q,dRo),e(q,ab),e(ab,Ome),e(Ome,cRo),e(ab,fRo),e(ab,VG),e(VG,mRo),e(ab,gRo),e(q,hRo),e(q,nb),e(nb,Vme),e(Vme,pRo),e(nb,_Ro),e(nb,XG),e(XG,uRo),e(nb,bRo),e(q,vRo),e(q,sb),e(sb,Xme),e(Xme,FRo),e(sb,TRo),e(sb,zG),e(zG,MRo),e(sb,ERo),e(q,CRo),e(q,lb),e(lb,zme),e(zme,wRo),e(lb,ARo),e(lb,WG),e(WG,LRo),e(lb,yRo),e(q,xRo),e(q,ib),e(ib,Wme),e(Wme,$Ro),e(ib,kRo),e(ib,QG),e(QG,SRo),e(ib,RRo),e(q,PRo),e(q,db),e(db,Qme),e(Qme,BRo),e(db,IRo),e(db,HG),e(HG,NRo),e(db,qRo),e(q,jRo),e(q,cb),e(cb,Hme),e(Hme,DRo),e(cb,GRo),e(cb,UG),e(UG,ORo),e(cb,VRo),e(q,XRo),e(q,fb),e(fb,Ume),e(Ume,zRo),e(fb,WRo),e(fb,JG),e(JG,QRo),e(fb,HRo),e(q,URo),e(q,mb),e(mb,Jme),e(Jme,JRo),e(mb,YRo),e(mb,YG),e(YG,KRo),e(mb,ZRo),e(q,ePo),e(q,gb),e(gb,Yme),e(Yme,oPo),e(gb,rPo),e(gb,KG),e(KG,tPo),e(gb,aPo),e(q,nPo),e(q,hb),e(hb,Kme),e(Kme,sPo),e(hb,lPo),e(hb,ZG),e(ZG,iPo),e(hb,dPo),e(q,cPo),e(q,pb),e(pb,Zme),e(Zme,fPo),e(pb,mPo),e(pb,eO),e(eO,gPo),e(pb,hPo),e(q,pPo),e(q,_b),e(_b,ege),e(ege,_Po),e(_b,uPo),e(_b,oO),e(oO,bPo),e(_b,vPo),e(q,FPo),e(q,ub),e(ub,oge),e(oge,TPo),e(ub,MPo),e(ub,rO),e(rO,EPo),e(ub,CPo),e(q,wPo),e(q,bb),e(bb,rge),e(rge,APo),e(bb,LPo),e(bb,tO),e(tO,yPo),e(bb,xPo),e(q,$Po),e(q,vb),e(vb,tge),e(tge,kPo),e(vb,SPo),e(vb,aO),e(aO,RPo),e(vb,PPo),e(q,BPo),e(q,Fb),e(Fb,age),e(age,IPo),e(Fb,NPo),e(Fb,nO),e(nO,qPo),e(Fb,jPo),e(q,DPo),e(q,Tb),e(Tb,nge),e(nge,GPo),e(Tb,OPo),e(Tb,sO),e(sO,VPo),e(Tb,XPo),e(q,zPo),e(q,Mb),e(Mb,sge),e(sge,WPo),e(Mb,QPo),e(Mb,lO),e(lO,HPo),e(Mb,UPo),e(q,JPo),e(q,Eb),e(Eb,lge),e(lge,YPo),e(Eb,KPo),e(Eb,iO),e(iO,ZPo),e(Eb,eBo),e(q,oBo),e(q,Cb),e(Cb,ige),e(ige,rBo),e(Cb,tBo),e(Cb,dO),e(dO,aBo),e(Cb,nBo),e(q,sBo),e(q,wb),e(wb,dge),e(dge,lBo),e(wb,iBo),e(wb,cO),e(cO,dBo),e(wb,cBo),e(q,fBo),e(q,Ab),e(Ab,cge),e(cge,mBo),e(Ab,gBo),e(Ab,fO),e(fO,hBo),e(Ab,pBo),e(q,_Bo),e(q,Lb),e(Lb,fge),e(fge,uBo),e(Lb,bBo),e(Lb,mO),e(mO,vBo),e(Lb,FBo),e(q,TBo),e(q,yb),e(yb,mge),e(mge,MBo),e(yb,EBo),e(yb,gO),e(gO,CBo),e(yb,wBo),e(q,ABo),e(q,xb),e(xb,gge),e(gge,LBo),e(xb,yBo),e(xb,hO),e(hO,xBo),e(xb,$Bo),e(q,kBo),e(q,$b),e($b,hge),e(hge,SBo),e($b,RBo),e($b,pO),e(pO,PBo),e($b,BBo),e(q,IBo),e(q,kb),e(kb,pge),e(pge,NBo),e(kb,qBo),e(kb,_O),e(_O,jBo),e(kb,DBo),e(q,GBo),e(q,Sb),e(Sb,_ge),e(_ge,OBo),e(Sb,VBo),e(Sb,uO),e(uO,XBo),e(Sb,zBo),e(q,WBo),e(q,Rb),e(Rb,uge),e(uge,QBo),e(Rb,HBo),e(Rb,bO),e(bO,UBo),e(Rb,JBo),e(q,YBo),e(q,Pb),e(Pb,bge),e(bge,KBo),e(Pb,ZBo),e(Pb,vO),e(vO,eIo),e(Pb,oIo),e(q,rIo),e(q,Bb),e(Bb,vge),e(vge,tIo),e(Bb,aIo),e(Bb,FO),e(FO,nIo),e(Bb,sIo),e(q,lIo),e(q,Ib),e(Ib,Fge),e(Fge,iIo),e(Ib,dIo),e(Ib,TO),e(TO,cIo),e(Ib,fIo),e(q,mIo),e(q,Nb),e(Nb,Tge),e(Tge,gIo),e(Nb,hIo),e(Nb,MO),e(MO,pIo),e(Nb,_Io),e(q,uIo),e(q,qb),e(qb,Mge),e(Mge,bIo),e(qb,vIo),e(qb,EO),e(EO,FIo),e(qb,TIo),e(q,MIo),e(q,jb),e(jb,Ege),e(Ege,EIo),e(jb,CIo),e(jb,CO),e(CO,wIo),e(jb,AIo),e(q,LIo),e(q,Db),e(Db,Cge),e(Cge,yIo),e(Db,xIo),e(Db,wO),e(wO,$Io),e(Db,kIo),e(q,SIo),e(q,Gb),e(Gb,wge),e(wge,RIo),e(Gb,PIo),e(Gb,AO),e(AO,BIo),e(Gb,IIo),e(q,NIo),e(q,Ob),e(Ob,Age),e(Age,qIo),e(Ob,jIo),e(Ob,LO),e(LO,DIo),e(Ob,GIo),e(q,OIo),e(q,Vb),e(Vb,Lge),e(Lge,VIo),e(Vb,XIo),e(Vb,yO),e(yO,zIo),e(Vb,WIo),e(q,QIo),e(q,Xb),e(Xb,yge),e(yge,HIo),e(Xb,UIo),e(Xb,xO),e(xO,JIo),e(Xb,YIo),e(q,KIo),e(q,zb),e(zb,xge),e(xge,ZIo),e(zb,eNo),e(zb,$O),e($O,oNo),e(zb,rNo),e(q,tNo),e(q,Wb),e(Wb,$ge),e($ge,aNo),e(Wb,nNo),e(Wb,kO),e(kO,sNo),e(Wb,lNo),e(q,iNo),e(q,Qb),e(Qb,kge),e(kge,dNo),e(Qb,cNo),e(Qb,SO),e(SO,fNo),e(Qb,mNo),e(q,gNo),e(q,Hb),e(Hb,Sge),e(Sge,hNo),e(Hb,pNo),e(Hb,RO),e(RO,_No),e(Hb,uNo),e(q,bNo),e(q,Ub),e(Ub,Rge),e(Rge,vNo),e(Ub,FNo),e(Ub,PO),e(PO,TNo),e(Ub,MNo),e(oo,ENo),e(oo,Jb),e(Jb,CNo),e(Jb,Pge),e(Pge,wNo),e(Jb,ANo),e(Jb,Bge),e(Bge,LNo),e(oo,yNo),M(Yb,oo,null),b(f,Jje,u),b(f,zi,u),e(zi,Kb),e(Kb,Ige),M(UL,Ige,null),e(zi,xNo),e(zi,Nge),e(Nge,$No),b(f,Yje,u),b(f,Po,u),M(JL,Po,null),e(Po,kNo),e(Po,Wi),e(Wi,SNo),e(Wi,BO),e(BO,RNo),e(Wi,PNo),e(Wi,IO),e(IO,BNo),e(Wi,INo),e(Po,NNo),e(Po,YL),e(YL,qNo),e(YL,qge),e(qge,jNo),e(YL,DNo),e(Po,GNo),e(Po,ct),M(KL,ct,null),e(ct,ONo),e(ct,jge),e(jge,VNo),e(ct,XNo),e(ct,Qi),e(Qi,zNo),e(Qi,Dge),e(Dge,WNo),e(Qi,QNo),e(Qi,NO),e(NO,HNo),e(Qi,UNo),e(ct,JNo),M(Zb,ct,null),e(Po,YNo),e(Po,ro),M(ZL,ro,null),e(ro,KNo),e(ro,Gge),e(Gge,ZNo),e(ro,eqo),e(ro,Ba),e(Ba,oqo),e(Ba,Oge),e(Oge,rqo),e(Ba,tqo),e(Ba,Vge),e(Vge,aqo),e(Ba,nqo),e(Ba,Xge),e(Xge,sqo),e(Ba,lqo),e(ro,iqo),e(ro,Z),e(Z,e2),e(e2,zge),e(zge,dqo),e(e2,cqo),e(e2,qO),e(qO,fqo),e(e2,mqo),e(Z,gqo),e(Z,o2),e(o2,Wge),e(Wge,hqo),e(o2,pqo),e(o2,jO),e(jO,_qo),e(o2,uqo),e(Z,bqo),e(Z,r2),e(r2,Qge),e(Qge,vqo),e(r2,Fqo),e(r2,DO),e(DO,Tqo),e(r2,Mqo),e(Z,Eqo),e(Z,t2),e(t2,Hge),e(Hge,Cqo),e(t2,wqo),e(t2,GO),e(GO,Aqo),e(t2,Lqo),e(Z,yqo),e(Z,a2),e(a2,Uge),e(Uge,xqo),e(a2,$qo),e(a2,OO),e(OO,kqo),e(a2,Sqo),e(Z,Rqo),e(Z,n2),e(n2,Jge),e(Jge,Pqo),e(n2,Bqo),e(n2,VO),e(VO,Iqo),e(n2,Nqo),e(Z,qqo),e(Z,s2),e(s2,Yge),e(Yge,jqo),e(s2,Dqo),e(s2,XO),e(XO,Gqo),e(s2,Oqo),e(Z,Vqo),e(Z,l2),e(l2,Kge),e(Kge,Xqo),e(l2,zqo),e(l2,zO),e(zO,Wqo),e(l2,Qqo),e(Z,Hqo),e(Z,i2),e(i2,Zge),e(Zge,Uqo),e(i2,Jqo),e(i2,WO),e(WO,Yqo),e(i2,Kqo),e(Z,Zqo),e(Z,d2),e(d2,ehe),e(ehe,ejo),e(d2,ojo),e(d2,QO),e(QO,rjo),e(d2,tjo),e(Z,ajo),e(Z,c2),e(c2,ohe),e(ohe,njo),e(c2,sjo),e(c2,HO),e(HO,ljo),e(c2,ijo),e(Z,djo),e(Z,f2),e(f2,rhe),e(rhe,cjo),e(f2,fjo),e(f2,UO),e(UO,mjo),e(f2,gjo),e(Z,hjo),e(Z,m2),e(m2,the),e(the,pjo),e(m2,_jo),e(m2,JO),e(JO,ujo),e(m2,bjo),e(Z,vjo),e(Z,g2),e(g2,ahe),e(ahe,Fjo),e(g2,Tjo),e(g2,YO),e(YO,Mjo),e(g2,Ejo),e(Z,Cjo),e(Z,h2),e(h2,nhe),e(nhe,wjo),e(h2,Ajo),e(h2,KO),e(KO,Ljo),e(h2,yjo),e(Z,xjo),e(Z,p2),e(p2,she),e(she,$jo),e(p2,kjo),e(p2,ZO),e(ZO,Sjo),e(p2,Rjo),e(Z,Pjo),e(Z,_2),e(_2,lhe),e(lhe,Bjo),e(_2,Ijo),e(_2,eV),e(eV,Njo),e(_2,qjo),e(Z,jjo),e(Z,u2),e(u2,ihe),e(ihe,Djo),e(u2,Gjo),e(u2,oV),e(oV,Ojo),e(u2,Vjo),e(Z,Xjo),e(Z,b2),e(b2,dhe),e(dhe,zjo),e(b2,Wjo),e(b2,rV),e(rV,Qjo),e(b2,Hjo),e(Z,Ujo),e(Z,v2),e(v2,che),e(che,Jjo),e(v2,Yjo),e(v2,tV),e(tV,Kjo),e(v2,Zjo),e(Z,eDo),e(Z,F2),e(F2,fhe),e(fhe,oDo),e(F2,rDo),e(F2,aV),e(aV,tDo),e(F2,aDo),e(Z,nDo),e(Z,T2),e(T2,mhe),e(mhe,sDo),e(T2,lDo),e(T2,nV),e(nV,iDo),e(T2,dDo),e(Z,cDo),e(Z,M2),e(M2,ghe),e(ghe,fDo),e(M2,mDo),e(M2,sV),e(sV,gDo),e(M2,hDo),e(Z,pDo),e(Z,E2),e(E2,hhe),e(hhe,_Do),e(E2,uDo),e(E2,lV),e(lV,bDo),e(E2,vDo),e(Z,FDo),e(Z,C2),e(C2,phe),e(phe,TDo),e(C2,MDo),e(C2,iV),e(iV,EDo),e(C2,CDo),e(Z,wDo),e(Z,w2),e(w2,_he),e(_he,ADo),e(w2,LDo),e(w2,dV),e(dV,yDo),e(w2,xDo),e(Z,$Do),e(Z,A2),e(A2,uhe),e(uhe,kDo),e(A2,SDo),e(A2,cV),e(cV,RDo),e(A2,PDo),e(Z,BDo),e(Z,L2),e(L2,bhe),e(bhe,IDo),e(L2,NDo),e(L2,fV),e(fV,qDo),e(L2,jDo),e(Z,DDo),e(Z,y2),e(y2,vhe),e(vhe,GDo),e(y2,ODo),e(y2,mV),e(mV,VDo),e(y2,XDo),e(ro,zDo),e(ro,x2),e(x2,WDo),e(x2,Fhe),e(Fhe,QDo),e(x2,HDo),e(x2,The),e(The,UDo),e(ro,JDo),M($2,ro,null),b(f,Kje,u),b(f,Hi,u),e(Hi,k2),e(k2,Mhe),M(ey,Mhe,null),e(Hi,YDo),e(Hi,Ehe),e(Ehe,KDo),b(f,Zje,u),b(f,Bo,u),M(oy,Bo,null),e(Bo,ZDo),e(Bo,Ui),e(Ui,eGo),e(Ui,gV),e(gV,oGo),e(Ui,rGo),e(Ui,hV),e(hV,tGo),e(Ui,aGo),e(Bo,nGo),e(Bo,ry),e(ry,sGo),e(ry,Che),e(Che,lGo),e(ry,iGo),e(Bo,dGo),e(Bo,ft),M(ty,ft,null),e(ft,cGo),e(ft,whe),e(whe,fGo),e(ft,mGo),e(ft,Ji),e(Ji,gGo),e(Ji,Ahe),e(Ahe,hGo),e(Ji,pGo),e(Ji,pV),e(pV,_Go),e(Ji,uGo),e(ft,bGo),M(S2,ft,null),e(Bo,vGo),e(Bo,to),M(ay,to,null),e(to,FGo),e(to,Lhe),e(Lhe,TGo),e(to,MGo),e(to,Ia),e(Ia,EGo),e(Ia,yhe),e(yhe,CGo),e(Ia,wGo),e(Ia,xhe),e(xhe,AGo),e(Ia,LGo),e(Ia,$he),e($he,yGo),e(Ia,xGo),e(to,$Go),e(to,Yr),e(Yr,R2),e(R2,khe),e(khe,kGo),e(R2,SGo),e(R2,_V),e(_V,RGo),e(R2,PGo),e(Yr,BGo),e(Yr,P2),e(P2,She),e(She,IGo),e(P2,NGo),e(P2,uV),e(uV,qGo),e(P2,jGo),e(Yr,DGo),e(Yr,B2),e(B2,Rhe),e(Rhe,GGo),e(B2,OGo),e(B2,bV),e(bV,VGo),e(B2,XGo),e(Yr,zGo),e(Yr,I2),e(I2,Phe),e(Phe,WGo),e(I2,QGo),e(I2,vV),e(vV,HGo),e(I2,UGo),e(Yr,JGo),e(Yr,N2),e(N2,Bhe),e(Bhe,YGo),e(N2,KGo),e(N2,FV),e(FV,ZGo),e(N2,eOo),e(to,oOo),e(to,q2),e(q2,rOo),e(q2,Ihe),e(Ihe,tOo),e(q2,aOo),e(q2,Nhe),e(Nhe,nOo),e(to,sOo),M(j2,to,null),b(f,eDe,u),b(f,Yi,u),e(Yi,D2),e(D2,qhe),M(ny,qhe,null),e(Yi,lOo),e(Yi,jhe),e(jhe,iOo),b(f,oDe,u),b(f,Io,u),M(sy,Io,null),e(Io,dOo),e(Io,Ki),e(Ki,cOo),e(Ki,TV),e(TV,fOo),e(Ki,mOo),e(Ki,MV),e(MV,gOo),e(Ki,hOo),e(Io,pOo),e(Io,ly),e(ly,_Oo),e(ly,Dhe),e(Dhe,uOo),e(ly,bOo),e(Io,vOo),e(Io,mt),M(iy,mt,null),e(mt,FOo),e(mt,Ghe),e(Ghe,TOo),e(mt,MOo),e(mt,Zi),e(Zi,EOo),e(Zi,Ohe),e(Ohe,COo),e(Zi,wOo),e(Zi,EV),e(EV,AOo),e(Zi,LOo),e(mt,yOo),M(G2,mt,null),e(Io,xOo),e(Io,ao),M(dy,ao,null),e(ao,$Oo),e(ao,Vhe),e(Vhe,kOo),e(ao,SOo),e(ao,Na),e(Na,ROo),e(Na,Xhe),e(Xhe,POo),e(Na,BOo),e(Na,zhe),e(zhe,IOo),e(Na,NOo),e(Na,Whe),e(Whe,qOo),e(Na,jOo),e(ao,DOo),e(ao,U),e(U,O2),e(O2,Qhe),e(Qhe,GOo),e(O2,OOo),e(O2,CV),e(CV,VOo),e(O2,XOo),e(U,zOo),e(U,V2),e(V2,Hhe),e(Hhe,WOo),e(V2,QOo),e(V2,wV),e(wV,HOo),e(V2,UOo),e(U,JOo),e(U,X2),e(X2,Uhe),e(Uhe,YOo),e(X2,KOo),e(X2,AV),e(AV,ZOo),e(X2,eVo),e(U,oVo),e(U,z2),e(z2,Jhe),e(Jhe,rVo),e(z2,tVo),e(z2,LV),e(LV,aVo),e(z2,nVo),e(U,sVo),e(U,W2),e(W2,Yhe),e(Yhe,lVo),e(W2,iVo),e(W2,yV),e(yV,dVo),e(W2,cVo),e(U,fVo),e(U,Q2),e(Q2,Khe),e(Khe,mVo),e(Q2,gVo),e(Q2,xV),e(xV,hVo),e(Q2,pVo),e(U,_Vo),e(U,H2),e(H2,Zhe),e(Zhe,uVo),e(H2,bVo),e(H2,$V),e($V,vVo),e(H2,FVo),e(U,TVo),e(U,U2),e(U2,epe),e(epe,MVo),e(U2,EVo),e(U2,kV),e(kV,CVo),e(U2,wVo),e(U,AVo),e(U,J2),e(J2,ope),e(ope,LVo),e(J2,yVo),e(J2,SV),e(SV,xVo),e(J2,$Vo),e(U,kVo),e(U,Y2),e(Y2,rpe),e(rpe,SVo),e(Y2,RVo),e(Y2,RV),e(RV,PVo),e(Y2,BVo),e(U,IVo),e(U,K2),e(K2,tpe),e(tpe,NVo),e(K2,qVo),e(K2,PV),e(PV,jVo),e(K2,DVo),e(U,GVo),e(U,Z2),e(Z2,ape),e(ape,OVo),e(Z2,VVo),e(Z2,BV),e(BV,XVo),e(Z2,zVo),e(U,WVo),e(U,e4),e(e4,npe),e(npe,QVo),e(e4,HVo),e(e4,IV),e(IV,UVo),e(e4,JVo),e(U,YVo),e(U,o4),e(o4,spe),e(spe,KVo),e(o4,ZVo),e(o4,NV),e(NV,eXo),e(o4,oXo),e(U,rXo),e(U,r4),e(r4,lpe),e(lpe,tXo),e(r4,aXo),e(r4,qV),e(qV,nXo),e(r4,sXo),e(U,lXo),e(U,t4),e(t4,ipe),e(ipe,iXo),e(t4,dXo),e(t4,jV),e(jV,cXo),e(t4,fXo),e(U,mXo),e(U,a4),e(a4,dpe),e(dpe,gXo),e(a4,hXo),e(a4,DV),e(DV,pXo),e(a4,_Xo),e(U,uXo),e(U,n4),e(n4,cpe),e(cpe,bXo),e(n4,vXo),e(n4,GV),e(GV,FXo),e(n4,TXo),e(U,MXo),e(U,s4),e(s4,fpe),e(fpe,EXo),e(s4,CXo),e(s4,OV),e(OV,wXo),e(s4,AXo),e(U,LXo),e(U,l4),e(l4,mpe),e(mpe,yXo),e(l4,xXo),e(l4,VV),e(VV,$Xo),e(l4,kXo),e(U,SXo),e(U,i4),e(i4,gpe),e(gpe,RXo),e(i4,PXo),e(i4,XV),e(XV,BXo),e(i4,IXo),e(U,NXo),e(U,d4),e(d4,hpe),e(hpe,qXo),e(d4,jXo),e(d4,zV),e(zV,DXo),e(d4,GXo),e(U,OXo),e(U,c4),e(c4,ppe),e(ppe,VXo),e(c4,XXo),e(c4,WV),e(WV,zXo),e(c4,WXo),e(U,QXo),e(U,f4),e(f4,_pe),e(_pe,HXo),e(f4,UXo),e(f4,QV),e(QV,JXo),e(f4,YXo),e(U,KXo),e(U,m4),e(m4,upe),e(upe,ZXo),e(m4,ezo),e(m4,HV),e(HV,ozo),e(m4,rzo),e(U,tzo),e(U,g4),e(g4,bpe),e(bpe,azo),e(g4,nzo),e(g4,UV),e(UV,szo),e(g4,lzo),e(U,izo),e(U,h4),e(h4,vpe),e(vpe,dzo),e(h4,czo),e(h4,JV),e(JV,fzo),e(h4,mzo),e(U,gzo),e(U,p4),e(p4,Fpe),e(Fpe,hzo),e(p4,pzo),e(p4,YV),e(YV,_zo),e(p4,uzo),e(U,bzo),e(U,_4),e(_4,Tpe),e(Tpe,vzo),e(_4,Fzo),e(_4,KV),e(KV,Tzo),e(_4,Mzo),e(U,Ezo),e(U,u4),e(u4,Mpe),e(Mpe,Czo),e(u4,wzo),e(u4,ZV),e(ZV,Azo),e(u4,Lzo),e(U,yzo),e(U,b4),e(b4,Epe),e(Epe,xzo),e(b4,$zo),e(b4,eX),e(eX,kzo),e(b4,Szo),e(U,Rzo),e(U,v4),e(v4,Cpe),e(Cpe,Pzo),e(v4,Bzo),e(v4,oX),e(oX,Izo),e(v4,Nzo),e(U,qzo),e(U,F4),e(F4,wpe),e(wpe,jzo),e(F4,Dzo),e(F4,rX),e(rX,Gzo),e(F4,Ozo),e(U,Vzo),e(U,T4),e(T4,Ape),e(Ape,Xzo),e(T4,zzo),e(T4,tX),e(tX,Wzo),e(T4,Qzo),e(ao,Hzo),e(ao,M4),e(M4,Uzo),e(M4,Lpe),e(Lpe,Jzo),e(M4,Yzo),e(M4,ype),e(ype,Kzo),e(ao,Zzo),M(E4,ao,null),b(f,rDe,u),b(f,ed,u),e(ed,C4),e(C4,xpe),M(cy,xpe,null),e(ed,eWo),e(ed,$pe),e($pe,oWo),b(f,tDe,u),b(f,No,u),M(fy,No,null),e(No,rWo),e(No,od),e(od,tWo),e(od,aX),e(aX,aWo),e(od,nWo),e(od,nX),e(nX,sWo),e(od,lWo),e(No,iWo),e(No,my),e(my,dWo),e(my,kpe),e(kpe,cWo),e(my,fWo),e(No,mWo),e(No,gt),M(gy,gt,null),e(gt,gWo),e(gt,Spe),e(Spe,hWo),e(gt,pWo),e(gt,rd),e(rd,_Wo),e(rd,Rpe),e(Rpe,uWo),e(rd,bWo),e(rd,sX),e(sX,vWo),e(rd,FWo),e(gt,TWo),M(w4,gt,null),e(No,MWo),e(No,no),M(hy,no,null),e(no,EWo),e(no,Ppe),e(Ppe,CWo),e(no,wWo),e(no,qa),e(qa,AWo),e(qa,Bpe),e(Bpe,LWo),e(qa,yWo),e(qa,Ipe),e(Ipe,xWo),e(qa,$Wo),e(qa,Npe),e(Npe,kWo),e(qa,SWo),e(no,RWo),e(no,V),e(V,A4),e(A4,qpe),e(qpe,PWo),e(A4,BWo),e(A4,lX),e(lX,IWo),e(A4,NWo),e(V,qWo),e(V,L4),e(L4,jpe),e(jpe,jWo),e(L4,DWo),e(L4,iX),e(iX,GWo),e(L4,OWo),e(V,VWo),e(V,y4),e(y4,Dpe),e(Dpe,XWo),e(y4,zWo),e(y4,dX),e(dX,WWo),e(y4,QWo),e(V,HWo),e(V,x4),e(x4,Gpe),e(Gpe,UWo),e(x4,JWo),e(x4,cX),e(cX,YWo),e(x4,KWo),e(V,ZWo),e(V,$4),e($4,Ope),e(Ope,eQo),e($4,oQo),e($4,fX),e(fX,rQo),e($4,tQo),e(V,aQo),e(V,k4),e(k4,Vpe),e(Vpe,nQo),e(k4,sQo),e(k4,mX),e(mX,lQo),e(k4,iQo),e(V,dQo),e(V,S4),e(S4,Xpe),e(Xpe,cQo),e(S4,fQo),e(S4,gX),e(gX,mQo),e(S4,gQo),e(V,hQo),e(V,R4),e(R4,zpe),e(zpe,pQo),e(R4,_Qo),e(R4,hX),e(hX,uQo),e(R4,bQo),e(V,vQo),e(V,P4),e(P4,Wpe),e(Wpe,FQo),e(P4,TQo),e(P4,pX),e(pX,MQo),e(P4,EQo),e(V,CQo),e(V,B4),e(B4,Qpe),e(Qpe,wQo),e(B4,AQo),e(B4,_X),e(_X,LQo),e(B4,yQo),e(V,xQo),e(V,I4),e(I4,Hpe),e(Hpe,$Qo),e(I4,kQo),e(I4,uX),e(uX,SQo),e(I4,RQo),e(V,PQo),e(V,N4),e(N4,Upe),e(Upe,BQo),e(N4,IQo),e(N4,bX),e(bX,NQo),e(N4,qQo),e(V,jQo),e(V,q4),e(q4,Jpe),e(Jpe,DQo),e(q4,GQo),e(q4,vX),e(vX,OQo),e(q4,VQo),e(V,XQo),e(V,j4),e(j4,Ype),e(Ype,zQo),e(j4,WQo),e(j4,FX),e(FX,QQo),e(j4,HQo),e(V,UQo),e(V,D4),e(D4,Kpe),e(Kpe,JQo),e(D4,YQo),e(D4,TX),e(TX,KQo),e(D4,ZQo),e(V,eHo),e(V,G4),e(G4,Zpe),e(Zpe,oHo),e(G4,rHo),e(G4,MX),e(MX,tHo),e(G4,aHo),e(V,nHo),e(V,O4),e(O4,e_e),e(e_e,sHo),e(O4,lHo),e(O4,EX),e(EX,iHo),e(O4,dHo),e(V,cHo),e(V,V4),e(V4,o_e),e(o_e,fHo),e(V4,mHo),e(V4,CX),e(CX,gHo),e(V4,hHo),e(V,pHo),e(V,X4),e(X4,r_e),e(r_e,_Ho),e(X4,uHo),e(X4,wX),e(wX,bHo),e(X4,vHo),e(V,FHo),e(V,z4),e(z4,t_e),e(t_e,THo),e(z4,MHo),e(z4,AX),e(AX,EHo),e(z4,CHo),e(V,wHo),e(V,W4),e(W4,a_e),e(a_e,AHo),e(W4,LHo),e(W4,LX),e(LX,yHo),e(W4,xHo),e(V,$Ho),e(V,Q4),e(Q4,n_e),e(n_e,kHo),e(Q4,SHo),e(Q4,yX),e(yX,RHo),e(Q4,PHo),e(V,BHo),e(V,H4),e(H4,s_e),e(s_e,IHo),e(H4,NHo),e(H4,xX),e(xX,qHo),e(H4,jHo),e(V,DHo),e(V,U4),e(U4,l_e),e(l_e,GHo),e(U4,OHo),e(U4,$X),e($X,VHo),e(U4,XHo),e(V,zHo),e(V,J4),e(J4,i_e),e(i_e,WHo),e(J4,QHo),e(J4,kX),e(kX,HHo),e(J4,UHo),e(V,JHo),e(V,Y4),e(Y4,d_e),e(d_e,YHo),e(Y4,KHo),e(Y4,SX),e(SX,ZHo),e(Y4,eUo),e(V,oUo),e(V,K4),e(K4,c_e),e(c_e,rUo),e(K4,tUo),e(K4,RX),e(RX,aUo),e(K4,nUo),e(V,sUo),e(V,Z4),e(Z4,f_e),e(f_e,lUo),e(Z4,iUo),e(Z4,PX),e(PX,dUo),e(Z4,cUo),e(V,fUo),e(V,ev),e(ev,m_e),e(m_e,mUo),e(ev,gUo),e(ev,BX),e(BX,hUo),e(ev,pUo),e(V,_Uo),e(V,ov),e(ov,g_e),e(g_e,uUo),e(ov,bUo),e(ov,IX),e(IX,vUo),e(ov,FUo),e(V,TUo),e(V,rv),e(rv,h_e),e(h_e,MUo),e(rv,EUo),e(rv,NX),e(NX,CUo),e(rv,wUo),e(V,AUo),e(V,tv),e(tv,p_e),e(p_e,LUo),e(tv,yUo),e(tv,qX),e(qX,xUo),e(tv,$Uo),e(V,kUo),e(V,av),e(av,__e),e(__e,SUo),e(av,RUo),e(av,jX),e(jX,PUo),e(av,BUo),e(V,IUo),e(V,nv),e(nv,u_e),e(u_e,NUo),e(nv,qUo),e(nv,DX),e(DX,jUo),e(nv,DUo),e(V,GUo),e(V,sv),e(sv,b_e),e(b_e,OUo),e(sv,VUo),e(sv,GX),e(GX,XUo),e(sv,zUo),e(V,WUo),e(V,lv),e(lv,v_e),e(v_e,QUo),e(lv,HUo),e(lv,OX),e(OX,UUo),e(lv,JUo),e(V,YUo),e(V,iv),e(iv,F_e),e(F_e,KUo),e(iv,ZUo),e(iv,VX),e(VX,eJo),e(iv,oJo),e(V,rJo),e(V,dv),e(dv,T_e),e(T_e,tJo),e(dv,aJo),e(dv,XX),e(XX,nJo),e(dv,sJo),e(V,lJo),e(V,cv),e(cv,M_e),e(M_e,iJo),e(cv,dJo),e(cv,zX),e(zX,cJo),e(cv,fJo),e(V,mJo),e(V,fv),e(fv,E_e),e(E_e,gJo),e(fv,hJo),e(fv,WX),e(WX,pJo),e(fv,_Jo),e(no,uJo),e(no,mv),e(mv,bJo),e(mv,C_e),e(C_e,vJo),e(mv,FJo),e(mv,w_e),e(w_e,TJo),e(no,MJo),M(gv,no,null),b(f,aDe,u),b(f,td,u),e(td,hv),e(hv,A_e),M(py,A_e,null),e(td,EJo),e(td,L_e),e(L_e,CJo),b(f,nDe,u),b(f,qo,u),M(_y,qo,null),e(qo,wJo),e(qo,ad),e(ad,AJo),e(ad,QX),e(QX,LJo),e(ad,yJo),e(ad,HX),e(HX,xJo),e(ad,$Jo),e(qo,kJo),e(qo,uy),e(uy,SJo),e(uy,y_e),e(y_e,RJo),e(uy,PJo),e(qo,BJo),e(qo,ht),M(by,ht,null),e(ht,IJo),e(ht,x_e),e(x_e,NJo),e(ht,qJo),e(ht,nd),e(nd,jJo),e(nd,$_e),e($_e,DJo),e(nd,GJo),e(nd,UX),e(UX,OJo),e(nd,VJo),e(ht,XJo),M(pv,ht,null),e(qo,zJo),e(qo,so),M(vy,so,null),e(so,WJo),e(so,k_e),e(k_e,QJo),e(so,HJo),e(so,ja),e(ja,UJo),e(ja,S_e),e(S_e,JJo),e(ja,YJo),e(ja,R_e),e(R_e,KJo),e(ja,ZJo),e(ja,P_e),e(P_e,eYo),e(ja,oYo),e(so,rYo),e(so,B_e),e(B_e,_v),e(_v,I_e),e(I_e,tYo),e(_v,aYo),e(_v,JX),e(JX,nYo),e(_v,sYo),e(so,lYo),e(so,uv),e(uv,iYo),e(uv,N_e),e(N_e,dYo),e(uv,cYo),e(uv,q_e),e(q_e,fYo),e(so,mYo),M(bv,so,null),b(f,sDe,u),b(f,sd,u),e(sd,vv),e(vv,j_e),M(Fy,j_e,null),e(sd,gYo),e(sd,D_e),e(D_e,hYo),b(f,lDe,u),b(f,jo,u),M(Ty,jo,null),e(jo,pYo),e(jo,ld),e(ld,_Yo),e(ld,YX),e(YX,uYo),e(ld,bYo),e(ld,KX),e(KX,vYo),e(ld,FYo),e(jo,TYo),e(jo,My),e(My,MYo),e(My,G_e),e(G_e,EYo),e(My,CYo),e(jo,wYo),e(jo,pt),M(Ey,pt,null),e(pt,AYo),e(pt,O_e),e(O_e,LYo),e(pt,yYo),e(pt,id),e(id,xYo),e(id,V_e),e(V_e,$Yo),e(id,kYo),e(id,ZX),e(ZX,SYo),e(id,RYo),e(pt,PYo),M(Fv,pt,null),e(jo,BYo),e(jo,lo),M(Cy,lo,null),e(lo,IYo),e(lo,X_e),e(X_e,NYo),e(lo,qYo),e(lo,Da),e(Da,jYo),e(Da,z_e),e(z_e,DYo),e(Da,GYo),e(Da,W_e),e(W_e,OYo),e(Da,VYo),e(Da,Q_e),e(Q_e,XYo),e(Da,zYo),e(lo,WYo),e(lo,ve),e(ve,Tv),e(Tv,H_e),e(H_e,QYo),e(Tv,HYo),e(Tv,ez),e(ez,UYo),e(Tv,JYo),e(ve,YYo),e(ve,Mv),e(Mv,U_e),e(U_e,KYo),e(Mv,ZYo),e(Mv,oz),e(oz,eKo),e(Mv,oKo),e(ve,rKo),e(ve,Ev),e(Ev,J_e),e(J_e,tKo),e(Ev,aKo),e(Ev,rz),e(rz,nKo),e(Ev,sKo),e(ve,lKo),e(ve,Cv),e(Cv,Y_e),e(Y_e,iKo),e(Cv,dKo),e(Cv,tz),e(tz,cKo),e(Cv,fKo),e(ve,mKo),e(ve,Bs),e(Bs,K_e),e(K_e,gKo),e(Bs,hKo),e(Bs,az),e(az,pKo),e(Bs,_Ko),e(Bs,nz),e(nz,uKo),e(Bs,bKo),e(ve,vKo),e(ve,wv),e(wv,Z_e),e(Z_e,FKo),e(wv,TKo),e(wv,sz),e(sz,MKo),e(wv,EKo),e(ve,CKo),e(ve,Is),e(Is,eue),e(eue,wKo),e(Is,AKo),e(Is,lz),e(lz,LKo),e(Is,yKo),e(Is,iz),e(iz,xKo),e(Is,$Ko),e(ve,kKo),e(ve,_t),e(_t,oue),e(oue,SKo),e(_t,RKo),e(_t,dz),e(dz,PKo),e(_t,BKo),e(_t,cz),e(cz,IKo),e(_t,NKo),e(_t,fz),e(fz,qKo),e(_t,jKo),e(ve,DKo),e(ve,Av),e(Av,rue),e(rue,GKo),e(Av,OKo),e(Av,mz),e(mz,VKo),e(Av,XKo),e(ve,zKo),e(ve,Lv),e(Lv,tue),e(tue,WKo),e(Lv,QKo),e(Lv,gz),e(gz,HKo),e(Lv,UKo),e(ve,JKo),e(ve,yv),e(yv,aue),e(aue,YKo),e(yv,KKo),e(yv,hz),e(hz,ZKo),e(yv,eZo),e(ve,oZo),e(ve,xv),e(xv,nue),e(nue,rZo),e(xv,tZo),e(xv,pz),e(pz,aZo),e(xv,nZo),e(ve,sZo),e(ve,$v),e($v,sue),e(sue,lZo),e($v,iZo),e($v,_z),e(_z,dZo),e($v,cZo),e(ve,fZo),e(ve,kv),e(kv,lue),e(lue,mZo),e(kv,gZo),e(kv,uz),e(uz,hZo),e(kv,pZo),e(ve,_Zo),e(ve,Sv),e(Sv,iue),e(iue,uZo),e(Sv,bZo),e(Sv,bz),e(bz,vZo),e(Sv,FZo),e(lo,TZo),e(lo,Rv),e(Rv,MZo),e(Rv,due),e(due,EZo),e(Rv,CZo),e(Rv,cue),e(cue,wZo),e(lo,AZo),M(Pv,lo,null),b(f,iDe,u),b(f,dd,u),e(dd,Bv),e(Bv,fue),M(wy,fue,null),e(dd,LZo),e(dd,mue),e(mue,yZo),b(f,dDe,u),b(f,Do,u),M(Ay,Do,null),e(Do,xZo),e(Do,cd),e(cd,$Zo),e(cd,vz),e(vz,kZo),e(cd,SZo),e(cd,Fz),e(Fz,RZo),e(cd,PZo),e(Do,BZo),e(Do,Ly),e(Ly,IZo),e(Ly,gue),e(gue,NZo),e(Ly,qZo),e(Do,jZo),e(Do,ut),M(yy,ut,null),e(ut,DZo),e(ut,hue),e(hue,GZo),e(ut,OZo),e(ut,fd),e(fd,VZo),e(fd,pue),e(pue,XZo),e(fd,zZo),e(fd,Tz),e(Tz,WZo),e(fd,QZo),e(ut,HZo),M(Iv,ut,null),e(Do,UZo),e(Do,io),M(xy,io,null),e(io,JZo),e(io,_ue),e(_ue,YZo),e(io,KZo),e(io,Ga),e(Ga,ZZo),e(Ga,uue),e(uue,eer),e(Ga,oer),e(Ga,bue),e(bue,rer),e(Ga,ter),e(Ga,vue),e(vue,aer),e(Ga,ner),e(io,ser),e(io,Fue),e(Fue,Nv),e(Nv,Tue),e(Tue,ler),e(Nv,ier),e(Nv,Mz),e(Mz,der),e(Nv,cer),e(io,fer),e(io,qv),e(qv,mer),e(qv,Mue),e(Mue,ger),e(qv,her),e(qv,Eue),e(Eue,per),e(io,_er),M(jv,io,null),b(f,cDe,u),b(f,md,u),e(md,Dv),e(Dv,Cue),M($y,Cue,null),e(md,uer),e(md,wue),e(wue,ber),b(f,fDe,u),b(f,Go,u),M(ky,Go,null),e(Go,ver),e(Go,gd),e(gd,Fer),e(gd,Ez),e(Ez,Ter),e(gd,Mer),e(gd,Cz),e(Cz,Eer),e(gd,Cer),e(Go,wer),e(Go,Sy),e(Sy,Aer),e(Sy,Aue),e(Aue,Ler),e(Sy,yer),e(Go,xer),e(Go,bt),M(Ry,bt,null),e(bt,$er),e(bt,Lue),e(Lue,ker),e(bt,Ser),e(bt,hd),e(hd,Rer),e(hd,yue),e(yue,Per),e(hd,Ber),e(hd,wz),e(wz,Ier),e(hd,Ner),e(bt,qer),M(Gv,bt,null),e(Go,jer),e(Go,co),M(Py,co,null),e(co,Der),e(co,xue),e(xue,Ger),e(co,Oer),e(co,Oa),e(Oa,Ver),e(Oa,$ue),e($ue,Xer),e(Oa,zer),e(Oa,kue),e(kue,Wer),e(Oa,Qer),e(Oa,Sue),e(Sue,Her),e(Oa,Uer),e(co,Jer),e(co,Re),e(Re,Ov),e(Ov,Rue),e(Rue,Yer),e(Ov,Ker),e(Ov,Az),e(Az,Zer),e(Ov,eor),e(Re,oor),e(Re,Vv),e(Vv,Pue),e(Pue,ror),e(Vv,tor),e(Vv,Lz),e(Lz,aor),e(Vv,nor),e(Re,sor),e(Re,Xv),e(Xv,Bue),e(Bue,lor),e(Xv,ior),e(Xv,yz),e(yz,dor),e(Xv,cor),e(Re,mor),e(Re,zv),e(zv,Iue),e(Iue,gor),e(zv,hor),e(zv,xz),e(xz,por),e(zv,_or),e(Re,uor),e(Re,Wv),e(Wv,Nue),e(Nue,bor),e(Wv,vor),e(Wv,$z),e($z,For),e(Wv,Tor),e(Re,Mor),e(Re,Qv),e(Qv,que),e(que,Eor),e(Qv,Cor),e(Qv,kz),e(kz,wor),e(Qv,Aor),e(Re,Lor),e(Re,Hv),e(Hv,jue),e(jue,yor),e(Hv,xor),e(Hv,Sz),e(Sz,$or),e(Hv,kor),e(Re,Sor),e(Re,Uv),e(Uv,Due),e(Due,Ror),e(Uv,Por),e(Uv,Rz),e(Rz,Bor),e(Uv,Ior),e(Re,Nor),e(Re,Jv),e(Jv,Gue),e(Gue,qor),e(Jv,jor),e(Jv,Pz),e(Pz,Dor),e(Jv,Gor),e(co,Oor),e(co,Yv),e(Yv,Vor),e(Yv,Oue),e(Oue,Xor),e(Yv,zor),e(Yv,Vue),e(Vue,Wor),e(co,Qor),M(Kv,co,null),b(f,mDe,u),b(f,pd,u),e(pd,Zv),e(Zv,Xue),M(By,Xue,null),e(pd,Hor),e(pd,zue),e(zue,Uor),b(f,gDe,u),b(f,Oo,u),M(Iy,Oo,null),e(Oo,Jor),e(Oo,_d),e(_d,Yor),e(_d,Bz),e(Bz,Kor),e(_d,Zor),e(_d,Iz),e(Iz,err),e(_d,orr),e(Oo,rrr),e(Oo,Ny),e(Ny,trr),e(Ny,Wue),e(Wue,arr),e(Ny,nrr),e(Oo,srr),e(Oo,vt),M(qy,vt,null),e(vt,lrr),e(vt,Que),e(Que,irr),e(vt,drr),e(vt,ud),e(ud,crr),e(ud,Hue),e(Hue,frr),e(ud,mrr),e(ud,Nz),e(Nz,grr),e(ud,hrr),e(vt,prr),M(eF,vt,null),e(Oo,_rr),e(Oo,fo),M(jy,fo,null),e(fo,urr),e(fo,Uue),e(Uue,brr),e(fo,vrr),e(fo,Va),e(Va,Frr),e(Va,Jue),e(Jue,Trr),e(Va,Mrr),e(Va,Yue),e(Yue,Err),e(Va,Crr),e(Va,Kue),e(Kue,wrr),e(Va,Arr),e(fo,Lrr),e(fo,Kr),e(Kr,oF),e(oF,Zue),e(Zue,yrr),e(oF,xrr),e(oF,qz),e(qz,$rr),e(oF,krr),e(Kr,Srr),e(Kr,rF),e(rF,e5e),e(e5e,Rrr),e(rF,Prr),e(rF,jz),e(jz,Brr),e(rF,Irr),e(Kr,Nrr),e(Kr,tF),e(tF,o5e),e(o5e,qrr),e(tF,jrr),e(tF,Dz),e(Dz,Drr),e(tF,Grr),e(Kr,Orr),e(Kr,aF),e(aF,r5e),e(r5e,Vrr),e(aF,Xrr),e(aF,Gz),e(Gz,zrr),e(aF,Wrr),e(Kr,Qrr),e(Kr,nF),e(nF,t5e),e(t5e,Hrr),e(nF,Urr),e(nF,Oz),e(Oz,Jrr),e(nF,Yrr),e(fo,Krr),e(fo,sF),e(sF,Zrr),e(sF,a5e),e(a5e,etr),e(sF,otr),e(sF,n5e),e(n5e,rtr),e(fo,ttr),M(lF,fo,null),b(f,hDe,u),b(f,bd,u),e(bd,iF),e(iF,s5e),M(Dy,s5e,null),e(bd,atr),e(bd,l5e),e(l5e,ntr),b(f,pDe,u),b(f,Vo,u),M(Gy,Vo,null),e(Vo,str),e(Vo,vd),e(vd,ltr),e(vd,Vz),e(Vz,itr),e(vd,dtr),e(vd,Xz),e(Xz,ctr),e(vd,ftr),e(Vo,mtr),e(Vo,Oy),e(Oy,gtr),e(Oy,i5e),e(i5e,htr),e(Oy,ptr),e(Vo,_tr),e(Vo,Ft),M(Vy,Ft,null),e(Ft,utr),e(Ft,d5e),e(d5e,btr),e(Ft,vtr),e(Ft,Fd),e(Fd,Ftr),e(Fd,c5e),e(c5e,Ttr),e(Fd,Mtr),e(Fd,zz),e(zz,Etr),e(Fd,Ctr),e(Ft,wtr),M(dF,Ft,null),e(Vo,Atr),e(Vo,mo),M(Xy,mo,null),e(mo,Ltr),e(mo,f5e),e(f5e,ytr),e(mo,xtr),e(mo,Xa),e(Xa,$tr),e(Xa,m5e),e(m5e,ktr),e(Xa,Str),e(Xa,g5e),e(g5e,Rtr),e(Xa,Ptr),e(Xa,h5e),e(h5e,Btr),e(Xa,Itr),e(mo,Ntr),e(mo,Le),e(Le,cF),e(cF,p5e),e(p5e,qtr),e(cF,jtr),e(cF,Wz),e(Wz,Dtr),e(cF,Gtr),e(Le,Otr),e(Le,fF),e(fF,_5e),e(_5e,Vtr),e(fF,Xtr),e(fF,Qz),e(Qz,ztr),e(fF,Wtr),e(Le,Qtr),e(Le,mF),e(mF,u5e),e(u5e,Htr),e(mF,Utr),e(mF,Hz),e(Hz,Jtr),e(mF,Ytr),e(Le,Ktr),e(Le,gF),e(gF,b5e),e(b5e,Ztr),e(gF,ear),e(gF,Uz),e(Uz,oar),e(gF,rar),e(Le,tar),e(Le,hF),e(hF,v5e),e(v5e,aar),e(hF,nar),e(hF,Jz),e(Jz,sar),e(hF,lar),e(Le,iar),e(Le,pF),e(pF,F5e),e(F5e,dar),e(pF,car),e(pF,Yz),e(Yz,far),e(pF,mar),e(Le,gar),e(Le,_F),e(_F,T5e),e(T5e,har),e(_F,par),e(_F,Kz),e(Kz,_ar),e(_F,uar),e(Le,bar),e(Le,uF),e(uF,M5e),e(M5e,Far),e(uF,Tar),e(uF,Zz),e(Zz,Mar),e(uF,Ear),e(Le,Car),e(Le,bF),e(bF,E5e),e(E5e,war),e(bF,Aar),e(bF,eW),e(eW,Lar),e(bF,yar),e(Le,xar),e(Le,vF),e(vF,C5e),e(C5e,$ar),e(vF,kar),e(vF,oW),e(oW,Sar),e(vF,Rar),e(mo,Par),e(mo,FF),e(FF,Bar),e(FF,w5e),e(w5e,Iar),e(FF,Nar),e(FF,A5e),e(A5e,qar),e(mo,jar),M(TF,mo,null),b(f,_De,u),b(f,Td,u),e(Td,MF),e(MF,L5e),M(zy,L5e,null),e(Td,Dar),e(Td,y5e),e(y5e,Gar),b(f,uDe,u),b(f,Xo,u),M(Wy,Xo,null),e(Xo,Oar),e(Xo,Md),e(Md,Var),e(Md,rW),e(rW,Xar),e(Md,zar),e(Md,tW),e(tW,War),e(Md,Qar),e(Xo,Har),e(Xo,Qy),e(Qy,Uar),e(Qy,x5e),e(x5e,Jar),e(Qy,Yar),e(Xo,Kar),e(Xo,Tt),M(Hy,Tt,null),e(Tt,Zar),e(Tt,$5e),e($5e,enr),e(Tt,onr),e(Tt,Ed),e(Ed,rnr),e(Ed,k5e),e(k5e,tnr),e(Ed,anr),e(Ed,aW),e(aW,nnr),e(Ed,snr),e(Tt,lnr),M(EF,Tt,null),e(Xo,inr),e(Xo,go),M(Uy,go,null),e(go,dnr),e(go,S5e),e(S5e,cnr),e(go,fnr),e(go,za),e(za,mnr),e(za,R5e),e(R5e,gnr),e(za,hnr),e(za,P5e),e(P5e,pnr),e(za,_nr),e(za,B5e),e(B5e,unr),e(za,bnr),e(go,vnr),e(go,Jy),e(Jy,CF),e(CF,I5e),e(I5e,Fnr),e(CF,Tnr),e(CF,nW),e(nW,Mnr),e(CF,Enr),e(Jy,Cnr),e(Jy,wF),e(wF,N5e),e(N5e,wnr),e(wF,Anr),e(wF,sW),e(sW,Lnr),e(wF,ynr),e(go,xnr),e(go,AF),e(AF,$nr),e(AF,q5e),e(q5e,knr),e(AF,Snr),e(AF,j5e),e(j5e,Rnr),e(go,Pnr),M(LF,go,null),b(f,bDe,u),b(f,Cd,u),e(Cd,yF),e(yF,D5e),M(Yy,D5e,null),e(Cd,Bnr),e(Cd,G5e),e(G5e,Inr),b(f,vDe,u),b(f,zo,u),M(Ky,zo,null),e(zo,Nnr),e(zo,wd),e(wd,qnr),e(wd,lW),e(lW,jnr),e(wd,Dnr),e(wd,iW),e(iW,Gnr),e(wd,Onr),e(zo,Vnr),e(zo,Zy),e(Zy,Xnr),e(Zy,O5e),e(O5e,znr),e(Zy,Wnr),e(zo,Qnr),e(zo,Mt),M(e8,Mt,null),e(Mt,Hnr),e(Mt,V5e),e(V5e,Unr),e(Mt,Jnr),e(Mt,Ad),e(Ad,Ynr),e(Ad,X5e),e(X5e,Knr),e(Ad,Znr),e(Ad,dW),e(dW,esr),e(Ad,osr),e(Mt,rsr),M(xF,Mt,null),e(zo,tsr),e(zo,ho),M(o8,ho,null),e(ho,asr),e(ho,z5e),e(z5e,nsr),e(ho,ssr),e(ho,Wa),e(Wa,lsr),e(Wa,W5e),e(W5e,isr),e(Wa,dsr),e(Wa,Q5e),e(Q5e,csr),e(Wa,fsr),e(Wa,H5e),e(H5e,msr),e(Wa,gsr),e(ho,hsr),e(ho,Zr),e(Zr,$F),e($F,U5e),e(U5e,psr),e($F,_sr),e($F,cW),e(cW,usr),e($F,bsr),e(Zr,vsr),e(Zr,kF),e(kF,J5e),e(J5e,Fsr),e(kF,Tsr),e(kF,fW),e(fW,Msr),e(kF,Esr),e(Zr,Csr),e(Zr,SF),e(SF,Y5e),e(Y5e,wsr),e(SF,Asr),e(SF,mW),e(mW,Lsr),e(SF,ysr),e(Zr,xsr),e(Zr,RF),e(RF,K5e),e(K5e,$sr),e(RF,ksr),e(RF,gW),e(gW,Ssr),e(RF,Rsr),e(Zr,Psr),e(Zr,PF),e(PF,Z5e),e(Z5e,Bsr),e(PF,Isr),e(PF,hW),e(hW,Nsr),e(PF,qsr),e(ho,jsr),e(ho,BF),e(BF,Dsr),e(BF,e1e),e(e1e,Gsr),e(BF,Osr),e(BF,o1e),e(o1e,Vsr),e(ho,Xsr),M(IF,ho,null),b(f,FDe,u),b(f,Ld,u),e(Ld,NF),e(NF,r1e),M(r8,r1e,null),e(Ld,zsr),e(Ld,t1e),e(t1e,Wsr),b(f,TDe,u),b(f,Wo,u),M(t8,Wo,null),e(Wo,Qsr),e(Wo,yd),e(yd,Hsr),e(yd,pW),e(pW,Usr),e(yd,Jsr),e(yd,_W),e(_W,Ysr),e(yd,Ksr),e(Wo,Zsr),e(Wo,a8),e(a8,elr),e(a8,a1e),e(a1e,olr),e(a8,rlr),e(Wo,tlr),e(Wo,Et),M(n8,Et,null),e(Et,alr),e(Et,n1e),e(n1e,nlr),e(Et,slr),e(Et,xd),e(xd,llr),e(xd,s1e),e(s1e,ilr),e(xd,dlr),e(xd,uW),e(uW,clr),e(xd,flr),e(Et,mlr),M(qF,Et,null),e(Wo,glr),e(Wo,po),M(s8,po,null),e(po,hlr),e(po,l1e),e(l1e,plr),e(po,_lr),e(po,Qa),e(Qa,ulr),e(Qa,i1e),e(i1e,blr),e(Qa,vlr),e(Qa,d1e),e(d1e,Flr),e(Qa,Tlr),e(Qa,c1e),e(c1e,Mlr),e(Qa,Elr),e(po,Clr),e(po,$d),e($d,jF),e(jF,f1e),e(f1e,wlr),e(jF,Alr),e(jF,bW),e(bW,Llr),e(jF,ylr),e($d,xlr),e($d,DF),e(DF,m1e),e(m1e,$lr),e(DF,klr),e(DF,vW),e(vW,Slr),e(DF,Rlr),e($d,Plr),e($d,GF),e(GF,g1e),e(g1e,Blr),e(GF,Ilr),e(GF,FW),e(FW,Nlr),e(GF,qlr),e(po,jlr),e(po,OF),e(OF,Dlr),e(OF,h1e),e(h1e,Glr),e(OF,Olr),e(OF,p1e),e(p1e,Vlr),e(po,Xlr),M(VF,po,null),b(f,MDe,u),b(f,kd,u),e(kd,XF),e(XF,_1e),M(l8,_1e,null),e(kd,zlr),e(kd,u1e),e(u1e,Wlr),b(f,EDe,u),b(f,Qo,u),M(i8,Qo,null),e(Qo,Qlr),e(Qo,Sd),e(Sd,Hlr),e(Sd,TW),e(TW,Ulr),e(Sd,Jlr),e(Sd,MW),e(MW,Ylr),e(Sd,Klr),e(Qo,Zlr),e(Qo,d8),e(d8,eir),e(d8,b1e),e(b1e,oir),e(d8,rir),e(Qo,tir),e(Qo,Ct),M(c8,Ct,null),e(Ct,air),e(Ct,v1e),e(v1e,nir),e(Ct,sir),e(Ct,Rd),e(Rd,lir),e(Rd,F1e),e(F1e,iir),e(Rd,dir),e(Rd,EW),e(EW,cir),e(Rd,fir),e(Ct,mir),M(zF,Ct,null),e(Qo,gir),e(Qo,_o),M(f8,_o,null),e(_o,hir),e(_o,T1e),e(T1e,pir),e(_o,_ir),e(_o,Ha),e(Ha,uir),e(Ha,M1e),e(M1e,bir),e(Ha,vir),e(Ha,E1e),e(E1e,Fir),e(Ha,Tir),e(Ha,C1e),e(C1e,Mir),e(Ha,Eir),e(_o,Cir),e(_o,m8),e(m8,WF),e(WF,w1e),e(w1e,wir),e(WF,Air),e(WF,CW),e(CW,Lir),e(WF,yir),e(m8,xir),e(m8,QF),e(QF,A1e),e(A1e,$ir),e(QF,kir),e(QF,wW),e(wW,Sir),e(QF,Rir),e(_o,Pir),e(_o,HF),e(HF,Bir),e(HF,L1e),e(L1e,Iir),e(HF,Nir),e(HF,y1e),e(y1e,qir),e(_o,jir),M(UF,_o,null),b(f,CDe,u),b(f,Pd,u),e(Pd,JF),e(JF,x1e),M(g8,x1e,null),e(Pd,Dir),e(Pd,$1e),e($1e,Gir),b(f,wDe,u),b(f,Ho,u),M(h8,Ho,null),e(Ho,Oir),e(Ho,Bd),e(Bd,Vir),e(Bd,AW),e(AW,Xir),e(Bd,zir),e(Bd,LW),e(LW,Wir),e(Bd,Qir),e(Ho,Hir),e(Ho,p8),e(p8,Uir),e(p8,k1e),e(k1e,Jir),e(p8,Yir),e(Ho,Kir),e(Ho,wt),M(_8,wt,null),e(wt,Zir),e(wt,S1e),e(S1e,edr),e(wt,odr),e(wt,Id),e(Id,rdr),e(Id,R1e),e(R1e,tdr),e(Id,adr),e(Id,yW),e(yW,ndr),e(Id,sdr),e(wt,ldr),M(YF,wt,null),e(Ho,idr),e(Ho,uo),M(u8,uo,null),e(uo,ddr),e(uo,P1e),e(P1e,cdr),e(uo,fdr),e(uo,Ua),e(Ua,mdr),e(Ua,B1e),e(B1e,gdr),e(Ua,hdr),e(Ua,I1e),e(I1e,pdr),e(Ua,_dr),e(Ua,N1e),e(N1e,udr),e(Ua,bdr),e(uo,vdr),e(uo,q1e),e(q1e,KF),e(KF,j1e),e(j1e,Fdr),e(KF,Tdr),e(KF,xW),e(xW,Mdr),e(KF,Edr),e(uo,Cdr),e(uo,ZF),e(ZF,wdr),e(ZF,D1e),e(D1e,Adr),e(ZF,Ldr),e(ZF,G1e),e(G1e,ydr),e(uo,xdr),M(eT,uo,null),b(f,ADe,u),b(f,Nd,u),e(Nd,oT),e(oT,O1e),M(b8,O1e,null),e(Nd,$dr),e(Nd,V1e),e(V1e,kdr),b(f,LDe,u),b(f,Uo,u),M(v8,Uo,null),e(Uo,Sdr),e(Uo,qd),e(qd,Rdr),e(qd,$W),e($W,Pdr),e(qd,Bdr),e(qd,kW),e(kW,Idr),e(qd,Ndr),e(Uo,qdr),e(Uo,F8),e(F8,jdr),e(F8,X1e),e(X1e,Ddr),e(F8,Gdr),e(Uo,Odr),e(Uo,At),M(T8,At,null),e(At,Vdr),e(At,z1e),e(z1e,Xdr),e(At,zdr),e(At,jd),e(jd,Wdr),e(jd,W1e),e(W1e,Qdr),e(jd,Hdr),e(jd,SW),e(SW,Udr),e(jd,Jdr),e(At,Ydr),M(rT,At,null),e(Uo,Kdr),e(Uo,bo),M(M8,bo,null),e(bo,Zdr),e(bo,Q1e),e(Q1e,ecr),e(bo,ocr),e(bo,Ja),e(Ja,rcr),e(Ja,H1e),e(H1e,tcr),e(Ja,acr),e(Ja,U1e),e(U1e,ncr),e(Ja,scr),e(Ja,J1e),e(J1e,lcr),e(Ja,icr),e(bo,dcr),e(bo,Ya),e(Ya,tT),e(tT,Y1e),e(Y1e,ccr),e(tT,fcr),e(tT,RW),e(RW,mcr),e(tT,gcr),e(Ya,hcr),e(Ya,aT),e(aT,K1e),e(K1e,pcr),e(aT,_cr),e(aT,PW),e(PW,ucr),e(aT,bcr),e(Ya,vcr),e(Ya,nT),e(nT,Z1e),e(Z1e,Fcr),e(nT,Tcr),e(nT,BW),e(BW,Mcr),e(nT,Ecr),e(Ya,Ccr),e(Ya,sT),e(sT,ebe),e(ebe,wcr),e(sT,Acr),e(sT,IW),e(IW,Lcr),e(sT,ycr),e(bo,xcr),e(bo,lT),e(lT,$cr),e(lT,obe),e(obe,kcr),e(lT,Scr),e(lT,rbe),e(rbe,Rcr),e(bo,Pcr),M(iT,bo,null),b(f,yDe,u),b(f,Dd,u),e(Dd,dT),e(dT,tbe),M(E8,tbe,null),e(Dd,Bcr),e(Dd,abe),e(abe,Icr),b(f,xDe,u),b(f,Jo,u),M(C8,Jo,null),e(Jo,Ncr),e(Jo,Gd),e(Gd,qcr),e(Gd,NW),e(NW,jcr),e(Gd,Dcr),e(Gd,qW),e(qW,Gcr),e(Gd,Ocr),e(Jo,Vcr),e(Jo,w8),e(w8,Xcr),e(w8,nbe),e(nbe,zcr),e(w8,Wcr),e(Jo,Qcr),e(Jo,Lt),M(A8,Lt,null),e(Lt,Hcr),e(Lt,sbe),e(sbe,Ucr),e(Lt,Jcr),e(Lt,Od),e(Od,Ycr),e(Od,lbe),e(lbe,Kcr),e(Od,Zcr),e(Od,jW),e(jW,efr),e(Od,ofr),e(Lt,rfr),M(cT,Lt,null),e(Jo,tfr),e(Jo,vo),M(L8,vo,null),e(vo,afr),e(vo,ibe),e(ibe,nfr),e(vo,sfr),e(vo,Ka),e(Ka,lfr),e(Ka,dbe),e(dbe,ifr),e(Ka,dfr),e(Ka,cbe),e(cbe,cfr),e(Ka,ffr),e(Ka,fbe),e(fbe,mfr),e(Ka,gfr),e(vo,hfr),e(vo,mbe),e(mbe,fT),e(fT,gbe),e(gbe,pfr),e(fT,_fr),e(fT,DW),e(DW,ufr),e(fT,bfr),e(vo,vfr),e(vo,mT),e(mT,Ffr),e(mT,hbe),e(hbe,Tfr),e(mT,Mfr),e(mT,pbe),e(pbe,Efr),e(vo,Cfr),M(gT,vo,null),b(f,$De,u),b(f,Vd,u),e(Vd,hT),e(hT,_be),M(y8,_be,null),e(Vd,wfr),e(Vd,ube),e(ube,Afr),b(f,kDe,u),b(f,Yo,u),M(x8,Yo,null),e(Yo,Lfr),e(Yo,Xd),e(Xd,yfr),e(Xd,GW),e(GW,xfr),e(Xd,$fr),e(Xd,OW),e(OW,kfr),e(Xd,Sfr),e(Yo,Rfr),e(Yo,$8),e($8,Pfr),e($8,bbe),e(bbe,Bfr),e($8,Ifr),e(Yo,Nfr),e(Yo,yt),M(k8,yt,null),e(yt,qfr),e(yt,vbe),e(vbe,jfr),e(yt,Dfr),e(yt,zd),e(zd,Gfr),e(zd,Fbe),e(Fbe,Ofr),e(zd,Vfr),e(zd,VW),e(VW,Xfr),e(zd,zfr),e(yt,Wfr),M(pT,yt,null),e(Yo,Qfr),e(Yo,wr),M(S8,wr,null),e(wr,Hfr),e(wr,Tbe),e(Tbe,Ufr),e(wr,Jfr),e(wr,Za),e(Za,Yfr),e(Za,Mbe),e(Mbe,Kfr),e(Za,Zfr),e(Za,Ebe),e(Ebe,emr),e(Za,omr),e(Za,Cbe),e(Cbe,rmr),e(Za,tmr),e(wr,amr),e(wr,N),e(N,_T),e(_T,wbe),e(wbe,nmr),e(_T,smr),e(_T,XW),e(XW,lmr),e(_T,imr),e(N,dmr),e(N,uT),e(uT,Abe),e(Abe,cmr),e(uT,fmr),e(uT,zW),e(zW,mmr),e(uT,gmr),e(N,hmr),e(N,bT),e(bT,Lbe),e(Lbe,pmr),e(bT,_mr),e(bT,WW),e(WW,umr),e(bT,bmr),e(N,vmr),e(N,vT),e(vT,ybe),e(ybe,Fmr),e(vT,Tmr),e(vT,QW),e(QW,Mmr),e(vT,Emr),e(N,Cmr),e(N,FT),e(FT,xbe),e(xbe,wmr),e(FT,Amr),e(FT,HW),e(HW,Lmr),e(FT,ymr),e(N,xmr),e(N,TT),e(TT,$be),e($be,$mr),e(TT,kmr),e(TT,UW),e(UW,Smr),e(TT,Rmr),e(N,Pmr),e(N,MT),e(MT,kbe),e(kbe,Bmr),e(MT,Imr),e(MT,JW),e(JW,Nmr),e(MT,qmr),e(N,jmr),e(N,ET),e(ET,Sbe),e(Sbe,Dmr),e(ET,Gmr),e(ET,YW),e(YW,Omr),e(ET,Vmr),e(N,Xmr),e(N,CT),e(CT,Rbe),e(Rbe,zmr),e(CT,Wmr),e(CT,KW),e(KW,Qmr),e(CT,Hmr),e(N,Umr),e(N,wT),e(wT,Pbe),e(Pbe,Jmr),e(wT,Ymr),e(wT,ZW),e(ZW,Kmr),e(wT,Zmr),e(N,egr),e(N,AT),e(AT,Bbe),e(Bbe,ogr),e(AT,rgr),e(AT,eQ),e(eQ,tgr),e(AT,agr),e(N,ngr),e(N,LT),e(LT,Ibe),e(Ibe,sgr),e(LT,lgr),e(LT,oQ),e(oQ,igr),e(LT,dgr),e(N,cgr),e(N,yT),e(yT,Nbe),e(Nbe,fgr),e(yT,mgr),e(yT,rQ),e(rQ,ggr),e(yT,hgr),e(N,pgr),e(N,xT),e(xT,qbe),e(qbe,_gr),e(xT,ugr),e(xT,tQ),e(tQ,bgr),e(xT,vgr),e(N,Fgr),e(N,$T),e($T,jbe),e(jbe,Tgr),e($T,Mgr),e($T,aQ),e(aQ,Egr),e($T,Cgr),e(N,wgr),e(N,kT),e(kT,Dbe),e(Dbe,Agr),e(kT,Lgr),e(kT,nQ),e(nQ,ygr),e(kT,xgr),e(N,$gr),e(N,ST),e(ST,Gbe),e(Gbe,kgr),e(ST,Sgr),e(ST,sQ),e(sQ,Rgr),e(ST,Pgr),e(N,Bgr),e(N,Ns),e(Ns,Obe),e(Obe,Igr),e(Ns,Ngr),e(Ns,lQ),e(lQ,qgr),e(Ns,jgr),e(Ns,iQ),e(iQ,Dgr),e(Ns,Ggr),e(N,Ogr),e(N,RT),e(RT,Vbe),e(Vbe,Vgr),e(RT,Xgr),e(RT,dQ),e(dQ,zgr),e(RT,Wgr),e(N,Qgr),e(N,PT),e(PT,Xbe),e(Xbe,Hgr),e(PT,Ugr),e(PT,cQ),e(cQ,Jgr),e(PT,Ygr),e(N,Kgr),e(N,BT),e(BT,zbe),e(zbe,Zgr),e(BT,ehr),e(BT,fQ),e(fQ,ohr),e(BT,rhr),e(N,thr),e(N,IT),e(IT,Wbe),e(Wbe,ahr),e(IT,nhr),e(IT,mQ),e(mQ,shr),e(IT,lhr),e(N,ihr),e(N,NT),e(NT,Qbe),e(Qbe,dhr),e(NT,chr),e(NT,gQ),e(gQ,fhr),e(NT,mhr),e(N,ghr),e(N,qT),e(qT,Hbe),e(Hbe,hhr),e(qT,phr),e(qT,hQ),e(hQ,_hr),e(qT,uhr),e(N,bhr),e(N,jT),e(jT,Ube),e(Ube,vhr),e(jT,Fhr),e(jT,pQ),e(pQ,Thr),e(jT,Mhr),e(N,Ehr),e(N,DT),e(DT,Jbe),e(Jbe,Chr),e(DT,whr),e(DT,_Q),e(_Q,Ahr),e(DT,Lhr),e(N,yhr),e(N,GT),e(GT,Ybe),e(Ybe,xhr),e(GT,$hr),e(GT,uQ),e(uQ,khr),e(GT,Shr),e(N,Rhr),e(N,OT),e(OT,Kbe),e(Kbe,Phr),e(OT,Bhr),e(OT,bQ),e(bQ,Ihr),e(OT,Nhr),e(N,qhr),e(N,VT),e(VT,Zbe),e(Zbe,jhr),e(VT,Dhr),e(VT,vQ),e(vQ,Ghr),e(VT,Ohr),e(N,Vhr),e(N,XT),e(XT,e2e),e(e2e,Xhr),e(XT,zhr),e(XT,FQ),e(FQ,Whr),e(XT,Qhr),e(N,Hhr),e(N,zT),e(zT,o2e),e(o2e,Uhr),e(zT,Jhr),e(zT,TQ),e(TQ,Yhr),e(zT,Khr),e(N,Zhr),e(N,WT),e(WT,r2e),e(r2e,epr),e(WT,opr),e(WT,MQ),e(MQ,rpr),e(WT,tpr),e(N,apr),e(N,QT),e(QT,t2e),e(t2e,npr),e(QT,spr),e(QT,EQ),e(EQ,lpr),e(QT,ipr),e(N,dpr),e(N,HT),e(HT,a2e),e(a2e,cpr),e(HT,fpr),e(HT,CQ),e(CQ,mpr),e(HT,gpr),e(N,hpr),e(N,UT),e(UT,n2e),e(n2e,ppr),e(UT,_pr),e(UT,wQ),e(wQ,upr),e(UT,bpr),e(N,vpr),e(N,JT),e(JT,s2e),e(s2e,Fpr),e(JT,Tpr),e(JT,AQ),e(AQ,Mpr),e(JT,Epr),e(N,Cpr),e(N,YT),e(YT,l2e),e(l2e,wpr),e(YT,Apr),e(YT,LQ),e(LQ,Lpr),e(YT,ypr),e(N,xpr),e(N,KT),e(KT,i2e),e(i2e,$pr),e(KT,kpr),e(KT,yQ),e(yQ,Spr),e(KT,Rpr),e(N,Ppr),e(N,ZT),e(ZT,d2e),e(d2e,Bpr),e(ZT,Ipr),e(ZT,xQ),e(xQ,Npr),e(ZT,qpr),e(N,jpr),e(N,e7),e(e7,c2e),e(c2e,Dpr),e(e7,Gpr),e(e7,$Q),e($Q,Opr),e(e7,Vpr),e(N,Xpr),e(N,o7),e(o7,f2e),e(f2e,zpr),e(o7,Wpr),e(o7,kQ),e(kQ,Qpr),e(o7,Hpr),e(N,Upr),e(N,r7),e(r7,m2e),e(m2e,Jpr),e(r7,Ypr),e(r7,SQ),e(SQ,Kpr),e(r7,Zpr),e(N,e_r),e(N,t7),e(t7,g2e),e(g2e,o_r),e(t7,r_r),e(t7,RQ),e(RQ,t_r),e(t7,a_r),e(N,n_r),e(N,a7),e(a7,h2e),e(h2e,s_r),e(a7,l_r),e(a7,PQ),e(PQ,i_r),e(a7,d_r),e(N,c_r),e(N,n7),e(n7,p2e),e(p2e,f_r),e(n7,m_r),e(n7,BQ),e(BQ,g_r),e(n7,h_r),e(N,p_r),e(N,s7),e(s7,_2e),e(_2e,__r),e(s7,u_r),e(s7,IQ),e(IQ,b_r),e(s7,v_r),e(N,F_r),e(N,l7),e(l7,u2e),e(u2e,T_r),e(l7,M_r),e(l7,NQ),e(NQ,E_r),e(l7,C_r),e(N,w_r),e(N,i7),e(i7,b2e),e(b2e,A_r),e(i7,L_r),e(i7,qQ),e(qQ,y_r),e(i7,x_r),e(wr,$_r),M(d7,wr,null),b(f,SDe,u),b(f,Wd,u),e(Wd,c7),e(c7,v2e),M(R8,v2e,null),e(Wd,k_r),e(Wd,F2e),e(F2e,S_r),b(f,RDe,u),b(f,Ko,u),M(P8,Ko,null),e(Ko,R_r),e(Ko,Qd),e(Qd,P_r),e(Qd,jQ),e(jQ,B_r),e(Qd,I_r),e(Qd,DQ),e(DQ,N_r),e(Qd,q_r),e(Ko,j_r),e(Ko,B8),e(B8,D_r),e(B8,T2e),e(T2e,G_r),e(B8,O_r),e(Ko,V_r),e(Ko,xt),M(I8,xt,null),e(xt,X_r),e(xt,M2e),e(M2e,z_r),e(xt,W_r),e(xt,Hd),e(Hd,Q_r),e(Hd,E2e),e(E2e,H_r),e(Hd,U_r),e(Hd,GQ),e(GQ,J_r),e(Hd,Y_r),e(xt,K_r),M(f7,xt,null),e(Ko,Z_r),e(Ko,Ar),M(N8,Ar,null),e(Ar,eur),e(Ar,C2e),e(C2e,our),e(Ar,rur),e(Ar,en),e(en,tur),e(en,w2e),e(w2e,aur),e(en,nur),e(en,A2e),e(A2e,sur),e(en,lur),e(en,L2e),e(L2e,iur),e(en,dur),e(Ar,cur),e(Ar,se),e(se,m7),e(m7,y2e),e(y2e,fur),e(m7,mur),e(m7,OQ),e(OQ,gur),e(m7,hur),e(se,pur),e(se,g7),e(g7,x2e),e(x2e,_ur),e(g7,uur),e(g7,VQ),e(VQ,bur),e(g7,vur),e(se,Fur),e(se,h7),e(h7,$2e),e($2e,Tur),e(h7,Mur),e(h7,XQ),e(XQ,Eur),e(h7,Cur),e(se,wur),e(se,p7),e(p7,k2e),e(k2e,Aur),e(p7,Lur),e(p7,zQ),e(zQ,yur),e(p7,xur),e(se,$ur),e(se,_7),e(_7,S2e),e(S2e,kur),e(_7,Sur),e(_7,WQ),e(WQ,Rur),e(_7,Pur),e(se,Bur),e(se,u7),e(u7,R2e),e(R2e,Iur),e(u7,Nur),e(u7,QQ),e(QQ,qur),e(u7,jur),e(se,Dur),e(se,b7),e(b7,P2e),e(P2e,Gur),e(b7,Our),e(b7,HQ),e(HQ,Vur),e(b7,Xur),e(se,zur),e(se,v7),e(v7,B2e),e(B2e,Wur),e(v7,Qur),e(v7,UQ),e(UQ,Hur),e(v7,Uur),e(se,Jur),e(se,F7),e(F7,I2e),e(I2e,Yur),e(F7,Kur),e(F7,JQ),e(JQ,Zur),e(F7,e5r),e(se,o5r),e(se,T7),e(T7,N2e),e(N2e,r5r),e(T7,t5r),e(T7,YQ),e(YQ,a5r),e(T7,n5r),e(se,s5r),e(se,M7),e(M7,q2e),e(q2e,l5r),e(M7,i5r),e(M7,KQ),e(KQ,d5r),e(M7,c5r),e(se,f5r),e(se,E7),e(E7,j2e),e(j2e,m5r),e(E7,g5r),e(E7,ZQ),e(ZQ,h5r),e(E7,p5r),e(se,_5r),e(se,C7),e(C7,D2e),e(D2e,u5r),e(C7,b5r),e(C7,eH),e(eH,v5r),e(C7,F5r),e(se,T5r),e(se,w7),e(w7,G2e),e(G2e,M5r),e(w7,E5r),e(w7,oH),e(oH,C5r),e(w7,w5r),e(se,A5r),e(se,A7),e(A7,O2e),e(O2e,L5r),e(A7,y5r),e(A7,rH),e(rH,x5r),e(A7,$5r),e(se,k5r),e(se,L7),e(L7,V2e),e(V2e,S5r),e(L7,R5r),e(L7,tH),e(tH,P5r),e(L7,B5r),e(se,I5r),e(se,y7),e(y7,X2e),e(X2e,N5r),e(y7,q5r),e(y7,aH),e(aH,j5r),e(y7,D5r),e(se,G5r),e(se,x7),e(x7,z2e),e(z2e,O5r),e(x7,V5r),e(x7,nH),e(nH,X5r),e(x7,z5r),e(se,W5r),e(se,$7),e($7,W2e),e(W2e,Q5r),e($7,H5r),e($7,sH),e(sH,U5r),e($7,J5r),e(se,Y5r),e(se,k7),e(k7,Q2e),e(Q2e,K5r),e(k7,Z5r),e(k7,lH),e(lH,e1r),e(k7,o1r),e(se,r1r),e(se,S7),e(S7,H2e),e(H2e,t1r),e(S7,a1r),e(S7,iH),e(iH,n1r),e(S7,s1r),e(se,l1r),e(se,R7),e(R7,U2e),e(U2e,i1r),e(R7,d1r),e(R7,dH),e(dH,c1r),e(R7,f1r),e(se,m1r),e(se,P7),e(P7,J2e),e(J2e,g1r),e(P7,h1r),e(P7,cH),e(cH,p1r),e(P7,_1r),e(Ar,u1r),M(B7,Ar,null),b(f,PDe,u),b(f,Ud,u),e(Ud,I7),e(I7,Y2e),M(q8,Y2e,null),e(Ud,b1r),e(Ud,K2e),e(K2e,v1r),b(f,BDe,u),b(f,Zo,u),M(j8,Zo,null),e(Zo,F1r),e(Zo,Jd),e(Jd,T1r),e(Jd,fH),e(fH,M1r),e(Jd,E1r),e(Jd,mH),e(mH,C1r),e(Jd,w1r),e(Zo,A1r),e(Zo,D8),e(D8,L1r),e(D8,Z2e),e(Z2e,y1r),e(D8,x1r),e(Zo,$1r),e(Zo,$t),M(G8,$t,null),e($t,k1r),e($t,e4e),e(e4e,S1r),e($t,R1r),e($t,Yd),e(Yd,P1r),e(Yd,o4e),e(o4e,B1r),e(Yd,I1r),e(Yd,gH),e(gH,N1r),e(Yd,q1r),e($t,j1r),M(N7,$t,null),e(Zo,D1r),e(Zo,Lr),M(O8,Lr,null),e(Lr,G1r),e(Lr,r4e),e(r4e,O1r),e(Lr,V1r),e(Lr,on),e(on,X1r),e(on,t4e),e(t4e,z1r),e(on,W1r),e(on,a4e),e(a4e,Q1r),e(on,H1r),e(on,n4e),e(n4e,U1r),e(on,J1r),e(Lr,Y1r),e(Lr,Me),e(Me,q7),e(q7,s4e),e(s4e,K1r),e(q7,Z1r),e(q7,hH),e(hH,ebr),e(q7,obr),e(Me,rbr),e(Me,j7),e(j7,l4e),e(l4e,tbr),e(j7,abr),e(j7,pH),e(pH,nbr),e(j7,sbr),e(Me,lbr),e(Me,D7),e(D7,i4e),e(i4e,ibr),e(D7,dbr),e(D7,_H),e(_H,cbr),e(D7,fbr),e(Me,mbr),e(Me,G7),e(G7,d4e),e(d4e,gbr),e(G7,hbr),e(G7,uH),e(uH,pbr),e(G7,_br),e(Me,ubr),e(Me,O7),e(O7,c4e),e(c4e,bbr),e(O7,vbr),e(O7,bH),e(bH,Fbr),e(O7,Tbr),e(Me,Mbr),e(Me,V7),e(V7,f4e),e(f4e,Ebr),e(V7,Cbr),e(V7,vH),e(vH,wbr),e(V7,Abr),e(Me,Lbr),e(Me,X7),e(X7,m4e),e(m4e,ybr),e(X7,xbr),e(X7,FH),e(FH,$br),e(X7,kbr),e(Me,Sbr),e(Me,z7),e(z7,g4e),e(g4e,Rbr),e(z7,Pbr),e(z7,TH),e(TH,Bbr),e(z7,Ibr),e(Me,Nbr),e(Me,W7),e(W7,h4e),e(h4e,qbr),e(W7,jbr),e(W7,MH),e(MH,Dbr),e(W7,Gbr),e(Me,Obr),e(Me,Q7),e(Q7,p4e),e(p4e,Vbr),e(Q7,Xbr),e(Q7,EH),e(EH,zbr),e(Q7,Wbr),e(Me,Qbr),e(Me,H7),e(H7,_4e),e(_4e,Hbr),e(H7,Ubr),e(H7,CH),e(CH,Jbr),e(H7,Ybr),e(Me,Kbr),e(Me,U7),e(U7,u4e),e(u4e,Zbr),e(U7,e2r),e(U7,wH),e(wH,o2r),e(U7,r2r),e(Me,t2r),e(Me,J7),e(J7,b4e),e(b4e,a2r),e(J7,n2r),e(J7,AH),e(AH,s2r),e(J7,l2r),e(Lr,i2r),M(Y7,Lr,null),b(f,IDe,u),b(f,Kd,u),e(Kd,K7),e(K7,v4e),M(V8,v4e,null),e(Kd,d2r),e(Kd,F4e),e(F4e,c2r),b(f,NDe,u),b(f,er,u),M(X8,er,null),e(er,f2r),e(er,Zd),e(Zd,m2r),e(Zd,LH),e(LH,g2r),e(Zd,h2r),e(Zd,yH),e(yH,p2r),e(Zd,_2r),e(er,u2r),e(er,z8),e(z8,b2r),e(z8,T4e),e(T4e,v2r),e(z8,F2r),e(er,T2r),e(er,kt),M(W8,kt,null),e(kt,M2r),e(kt,M4e),e(M4e,E2r),e(kt,C2r),e(kt,ec),e(ec,w2r),e(ec,E4e),e(E4e,A2r),e(ec,L2r),e(ec,xH),e(xH,y2r),e(ec,x2r),e(kt,$2r),M(Z7,kt,null),e(er,k2r),e(er,yr),M(Q8,yr,null),e(yr,S2r),e(yr,C4e),e(C4e,R2r),e(yr,P2r),e(yr,rn),e(rn,B2r),e(rn,w4e),e(w4e,I2r),e(rn,N2r),e(rn,A4e),e(A4e,q2r),e(rn,j2r),e(rn,L4e),e(L4e,D2r),e(rn,G2r),e(yr,O2r),e(yr,et),e(et,eM),e(eM,y4e),e(y4e,V2r),e(eM,X2r),e(eM,$H),e($H,z2r),e(eM,W2r),e(et,Q2r),e(et,oM),e(oM,x4e),e(x4e,H2r),e(oM,U2r),e(oM,kH),e(kH,J2r),e(oM,Y2r),e(et,K2r),e(et,rM),e(rM,$4e),e($4e,Z2r),e(rM,e4r),e(rM,SH),e(SH,o4r),e(rM,r4r),e(et,t4r),e(et,tM),e(tM,k4e),e(k4e,a4r),e(tM,n4r),e(tM,RH),e(RH,s4r),e(tM,l4r),e(et,i4r),e(et,aM),e(aM,S4e),e(S4e,d4r),e(aM,c4r),e(aM,PH),e(PH,f4r),e(aM,m4r),e(yr,g4r),M(nM,yr,null),b(f,qDe,u),b(f,oc,u),e(oc,sM),e(sM,R4e),M(H8,R4e,null),e(oc,h4r),e(oc,P4e),e(P4e,p4r),b(f,jDe,u),b(f,or,u),M(U8,or,null),e(or,_4r),e(or,rc),e(rc,u4r),e(rc,BH),e(BH,b4r),e(rc,v4r),e(rc,IH),e(IH,F4r),e(rc,T4r),e(or,M4r),e(or,J8),e(J8,E4r),e(J8,B4e),e(B4e,C4r),e(J8,w4r),e(or,A4r),e(or,St),M(Y8,St,null),e(St,L4r),e(St,I4e),e(I4e,y4r),e(St,x4r),e(St,tc),e(tc,$4r),e(tc,N4e),e(N4e,k4r),e(tc,S4r),e(tc,NH),e(NH,R4r),e(tc,P4r),e(St,B4r),M(lM,St,null),e(or,I4r),e(or,xr),M(K8,xr,null),e(xr,N4r),e(xr,q4e),e(q4e,q4r),e(xr,j4r),e(xr,tn),e(tn,D4r),e(tn,j4e),e(j4e,G4r),e(tn,O4r),e(tn,D4e),e(D4e,V4r),e(tn,X4r),e(tn,G4e),e(G4e,z4r),e(tn,W4r),e(xr,Q4r),e(xr,ie),e(ie,iM),e(iM,O4e),e(O4e,H4r),e(iM,U4r),e(iM,qH),e(qH,J4r),e(iM,Y4r),e(ie,K4r),e(ie,dM),e(dM,V4e),e(V4e,Z4r),e(dM,evr),e(dM,jH),e(jH,ovr),e(dM,rvr),e(ie,tvr),e(ie,cM),e(cM,X4e),e(X4e,avr),e(cM,nvr),e(cM,DH),e(DH,svr),e(cM,lvr),e(ie,ivr),e(ie,fM),e(fM,z4e),e(z4e,dvr),e(fM,cvr),e(fM,GH),e(GH,fvr),e(fM,mvr),e(ie,gvr),e(ie,mM),e(mM,W4e),e(W4e,hvr),e(mM,pvr),e(mM,OH),e(OH,_vr),e(mM,uvr),e(ie,bvr),e(ie,gM),e(gM,Q4e),e(Q4e,vvr),e(gM,Fvr),e(gM,VH),e(VH,Tvr),e(gM,Mvr),e(ie,Evr),e(ie,hM),e(hM,H4e),e(H4e,Cvr),e(hM,wvr),e(hM,XH),e(XH,Avr),e(hM,Lvr),e(ie,yvr),e(ie,pM),e(pM,U4e),e(U4e,xvr),e(pM,$vr),e(pM,zH),e(zH,kvr),e(pM,Svr),e(ie,Rvr),e(ie,_M),e(_M,J4e),e(J4e,Pvr),e(_M,Bvr),e(_M,WH),e(WH,Ivr),e(_M,Nvr),e(ie,qvr),e(ie,uM),e(uM,Y4e),e(Y4e,jvr),e(uM,Dvr),e(uM,QH),e(QH,Gvr),e(uM,Ovr),e(ie,Vvr),e(ie,bM),e(bM,K4e),e(K4e,Xvr),e(bM,zvr),e(bM,HH),e(HH,Wvr),e(bM,Qvr),e(ie,Hvr),e(ie,vM),e(vM,Z4e),e(Z4e,Uvr),e(vM,Jvr),e(vM,UH),e(UH,Yvr),e(vM,Kvr),e(ie,Zvr),e(ie,FM),e(FM,eve),e(eve,eFr),e(FM,oFr),e(FM,JH),e(JH,rFr),e(FM,tFr),e(ie,aFr),e(ie,TM),e(TM,ove),e(ove,nFr),e(TM,sFr),e(TM,YH),e(YH,lFr),e(TM,iFr),e(ie,dFr),e(ie,MM),e(MM,rve),e(rve,cFr),e(MM,fFr),e(MM,KH),e(KH,mFr),e(MM,gFr),e(ie,hFr),e(ie,EM),e(EM,tve),e(tve,pFr),e(EM,_Fr),e(EM,ZH),e(ZH,uFr),e(EM,bFr),e(ie,vFr),e(ie,CM),e(CM,ave),e(ave,FFr),e(CM,TFr),e(CM,eU),e(eU,MFr),e(CM,EFr),e(ie,CFr),e(ie,wM),e(wM,nve),e(nve,wFr),e(wM,AFr),e(wM,oU),e(oU,LFr),e(wM,yFr),e(ie,xFr),e(ie,AM),e(AM,sve),e(sve,$Fr),e(AM,kFr),e(AM,rU),e(rU,SFr),e(AM,RFr),e(ie,PFr),e(ie,LM),e(LM,lve),e(lve,BFr),e(LM,IFr),e(LM,tU),e(tU,NFr),e(LM,qFr),e(xr,jFr),M(yM,xr,null),b(f,DDe,u),b(f,ac,u),e(ac,xM),e(xM,ive),M(Z8,ive,null),e(ac,DFr),e(ac,dve),e(dve,GFr),b(f,GDe,u),b(f,rr,u),M(e9,rr,null),e(rr,OFr),e(rr,nc),e(nc,VFr),e(nc,aU),e(aU,XFr),e(nc,zFr),e(nc,nU),e(nU,WFr),e(nc,QFr),e(rr,HFr),e(rr,o9),e(o9,UFr),e(o9,cve),e(cve,JFr),e(o9,YFr),e(rr,KFr),e(rr,Rt),M(r9,Rt,null),e(Rt,ZFr),e(Rt,fve),e(fve,eTr),e(Rt,oTr),e(Rt,sc),e(sc,rTr),e(sc,mve),e(mve,tTr),e(sc,aTr),e(sc,sU),e(sU,nTr),e(sc,sTr),e(Rt,lTr),M($M,Rt,null),e(rr,iTr),e(rr,$r),M(t9,$r,null),e($r,dTr),e($r,gve),e(gve,cTr),e($r,fTr),e($r,an),e(an,mTr),e(an,hve),e(hve,gTr),e(an,hTr),e(an,pve),e(pve,pTr),e(an,_Tr),e(an,_ve),e(_ve,uTr),e(an,bTr),e($r,vTr),e($r,ye),e(ye,kM),e(kM,uve),e(uve,FTr),e(kM,TTr),e(kM,lU),e(lU,MTr),e(kM,ETr),e(ye,CTr),e(ye,SM),e(SM,bve),e(bve,wTr),e(SM,ATr),e(SM,iU),e(iU,LTr),e(SM,yTr),e(ye,xTr),e(ye,RM),e(RM,vve),e(vve,$Tr),e(RM,kTr),e(RM,dU),e(dU,STr),e(RM,RTr),e(ye,PTr),e(ye,PM),e(PM,Fve),e(Fve,BTr),e(PM,ITr),e(PM,cU),e(cU,NTr),e(PM,qTr),e(ye,jTr),e(ye,BM),e(BM,Tve),e(Tve,DTr),e(BM,GTr),e(BM,fU),e(fU,OTr),e(BM,VTr),e(ye,XTr),e(ye,IM),e(IM,Mve),e(Mve,zTr),e(IM,WTr),e(IM,mU),e(mU,QTr),e(IM,HTr),e(ye,UTr),e(ye,NM),e(NM,Eve),e(Eve,JTr),e(NM,YTr),e(NM,gU),e(gU,KTr),e(NM,ZTr),e(ye,e7r),e(ye,qM),e(qM,Cve),e(Cve,o7r),e(qM,r7r),e(qM,hU),e(hU,t7r),e(qM,a7r),e(ye,n7r),e(ye,jM),e(jM,wve),e(wve,s7r),e(jM,l7r),e(jM,pU),e(pU,i7r),e(jM,d7r),e(ye,c7r),e(ye,DM),e(DM,Ave),e(Ave,f7r),e(DM,m7r),e(DM,_U),e(_U,g7r),e(DM,h7r),e($r,p7r),M(GM,$r,null),b(f,ODe,u),b(f,lc,u),e(lc,OM),e(OM,Lve),M(a9,Lve,null),e(lc,_7r),e(lc,yve),e(yve,u7r),b(f,VDe,u),b(f,tr,u),M(n9,tr,null),e(tr,b7r),e(tr,ic),e(ic,v7r),e(ic,uU),e(uU,F7r),e(ic,T7r),e(ic,bU),e(bU,M7r),e(ic,E7r),e(tr,C7r),e(tr,s9),e(s9,w7r),e(s9,xve),e(xve,A7r),e(s9,L7r),e(tr,y7r),e(tr,Pt),M(l9,Pt,null),e(Pt,x7r),e(Pt,$ve),e($ve,$7r),e(Pt,k7r),e(Pt,dc),e(dc,S7r),e(dc,kve),e(kve,R7r),e(dc,P7r),e(dc,vU),e(vU,B7r),e(dc,I7r),e(Pt,N7r),M(VM,Pt,null),e(tr,q7r),e(tr,kr),M(i9,kr,null),e(kr,j7r),e(kr,Sve),e(Sve,D7r),e(kr,G7r),e(kr,nn),e(nn,O7r),e(nn,Rve),e(Rve,V7r),e(nn,X7r),e(nn,Pve),e(Pve,z7r),e(nn,W7r),e(nn,Bve),e(Bve,Q7r),e(nn,H7r),e(kr,U7r),e(kr,oe),e(oe,XM),e(XM,Ive),e(Ive,J7r),e(XM,Y7r),e(XM,FU),e(FU,K7r),e(XM,Z7r),e(oe,eMr),e(oe,zM),e(zM,Nve),e(Nve,oMr),e(zM,rMr),e(zM,TU),e(TU,tMr),e(zM,aMr),e(oe,nMr),e(oe,WM),e(WM,qve),e(qve,sMr),e(WM,lMr),e(WM,MU),e(MU,iMr),e(WM,dMr),e(oe,cMr),e(oe,QM),e(QM,jve),e(jve,fMr),e(QM,mMr),e(QM,EU),e(EU,gMr),e(QM,hMr),e(oe,pMr),e(oe,HM),e(HM,Dve),e(Dve,_Mr),e(HM,uMr),e(HM,CU),e(CU,bMr),e(HM,vMr),e(oe,FMr),e(oe,UM),e(UM,Gve),e(Gve,TMr),e(UM,MMr),e(UM,wU),e(wU,EMr),e(UM,CMr),e(oe,wMr),e(oe,JM),e(JM,Ove),e(Ove,AMr),e(JM,LMr),e(JM,AU),e(AU,yMr),e(JM,xMr),e(oe,$Mr),e(oe,YM),e(YM,Vve),e(Vve,kMr),e(YM,SMr),e(YM,LU),e(LU,RMr),e(YM,PMr),e(oe,BMr),e(oe,KM),e(KM,Xve),e(Xve,IMr),e(KM,NMr),e(KM,yU),e(yU,qMr),e(KM,jMr),e(oe,DMr),e(oe,ZM),e(ZM,zve),e(zve,GMr),e(ZM,OMr),e(ZM,xU),e(xU,VMr),e(ZM,XMr),e(oe,zMr),e(oe,eE),e(eE,Wve),e(Wve,WMr),e(eE,QMr),e(eE,$U),e($U,HMr),e(eE,UMr),e(oe,JMr),e(oe,oE),e(oE,Qve),e(Qve,YMr),e(oE,KMr),e(oE,kU),e(kU,ZMr),e(oE,eEr),e(oe,oEr),e(oe,rE),e(rE,Hve),e(Hve,rEr),e(rE,tEr),e(rE,SU),e(SU,aEr),e(rE,nEr),e(oe,sEr),e(oe,tE),e(tE,Uve),e(Uve,lEr),e(tE,iEr),e(tE,RU),e(RU,dEr),e(tE,cEr),e(oe,fEr),e(oe,aE),e(aE,Jve),e(Jve,mEr),e(aE,gEr),e(aE,PU),e(PU,hEr),e(aE,pEr),e(oe,_Er),e(oe,nE),e(nE,Yve),e(Yve,uEr),e(nE,bEr),e(nE,BU),e(BU,vEr),e(nE,FEr),e(oe,TEr),e(oe,sE),e(sE,Kve),e(Kve,MEr),e(sE,EEr),e(sE,IU),e(IU,CEr),e(sE,wEr),e(oe,AEr),e(oe,lE),e(lE,Zve),e(Zve,LEr),e(lE,yEr),e(lE,NU),e(NU,xEr),e(lE,$Er),e(oe,kEr),e(oe,iE),e(iE,eFe),e(eFe,SEr),e(iE,REr),e(iE,qU),e(qU,PEr),e(iE,BEr),e(oe,IEr),e(oe,dE),e(dE,oFe),e(oFe,NEr),e(dE,qEr),e(dE,jU),e(jU,jEr),e(dE,DEr),e(oe,GEr),e(oe,cE),e(cE,rFe),e(rFe,OEr),e(cE,VEr),e(cE,DU),e(DU,XEr),e(cE,zEr),e(oe,WEr),e(oe,fE),e(fE,tFe),e(tFe,QEr),e(fE,HEr),e(fE,GU),e(GU,UEr),e(fE,JEr),e(oe,YEr),e(oe,mE),e(mE,aFe),e(aFe,KEr),e(mE,ZEr),e(mE,OU),e(OU,eCr),e(mE,oCr),e(oe,rCr),e(oe,gE),e(gE,nFe),e(nFe,tCr),e(gE,aCr),e(gE,VU),e(VU,nCr),e(gE,sCr),e(oe,lCr),e(oe,hE),e(hE,sFe),e(sFe,iCr),e(hE,dCr),e(hE,XU),e(XU,cCr),e(hE,fCr),e(oe,mCr),e(oe,pE),e(pE,lFe),e(lFe,gCr),e(pE,hCr),e(pE,zU),e(zU,pCr),e(pE,_Cr),e(kr,uCr),M(_E,kr,null),b(f,XDe,u),b(f,cc,u),e(cc,uE),e(uE,iFe),M(d9,iFe,null),e(cc,bCr),e(cc,dFe),e(dFe,vCr),b(f,zDe,u),b(f,ar,u),M(c9,ar,null),e(ar,FCr),e(ar,fc),e(fc,TCr),e(fc,WU),e(WU,MCr),e(fc,ECr),e(fc,QU),e(QU,CCr),e(fc,wCr),e(ar,ACr),e(ar,f9),e(f9,LCr),e(f9,cFe),e(cFe,yCr),e(f9,xCr),e(ar,$Cr),e(ar,Bt),M(m9,Bt,null),e(Bt,kCr),e(Bt,fFe),e(fFe,SCr),e(Bt,RCr),e(Bt,mc),e(mc,PCr),e(mc,mFe),e(mFe,BCr),e(mc,ICr),e(mc,HU),e(HU,NCr),e(mc,qCr),e(Bt,jCr),M(bE,Bt,null),e(ar,DCr),e(ar,Sr),M(g9,Sr,null),e(Sr,GCr),e(Sr,gFe),e(gFe,OCr),e(Sr,VCr),e(Sr,sn),e(sn,XCr),e(sn,hFe),e(hFe,zCr),e(sn,WCr),e(sn,pFe),e(pFe,QCr),e(sn,HCr),e(sn,_Fe),e(_Fe,UCr),e(sn,JCr),e(Sr,YCr),e(Sr,pe),e(pe,vE),e(vE,uFe),e(uFe,KCr),e(vE,ZCr),e(vE,UU),e(UU,e3r),e(vE,o3r),e(pe,r3r),e(pe,FE),e(FE,bFe),e(bFe,t3r),e(FE,a3r),e(FE,JU),e(JU,n3r),e(FE,s3r),e(pe,l3r),e(pe,TE),e(TE,vFe),e(vFe,i3r),e(TE,d3r),e(TE,YU),e(YU,c3r),e(TE,f3r),e(pe,m3r),e(pe,ME),e(ME,FFe),e(FFe,g3r),e(ME,h3r),e(ME,KU),e(KU,p3r),e(ME,_3r),e(pe,u3r),e(pe,EE),e(EE,TFe),e(TFe,b3r),e(EE,v3r),e(EE,ZU),e(ZU,F3r),e(EE,T3r),e(pe,M3r),e(pe,CE),e(CE,MFe),e(MFe,E3r),e(CE,C3r),e(CE,eJ),e(eJ,w3r),e(CE,A3r),e(pe,L3r),e(pe,wE),e(wE,EFe),e(EFe,y3r),e(wE,x3r),e(wE,oJ),e(oJ,$3r),e(wE,k3r),e(pe,S3r),e(pe,AE),e(AE,CFe),e(CFe,R3r),e(AE,P3r),e(AE,rJ),e(rJ,B3r),e(AE,I3r),e(pe,N3r),e(pe,LE),e(LE,wFe),e(wFe,q3r),e(LE,j3r),e(LE,tJ),e(tJ,D3r),e(LE,G3r),e(pe,O3r),e(pe,yE),e(yE,AFe),e(AFe,V3r),e(yE,X3r),e(yE,aJ),e(aJ,z3r),e(yE,W3r),e(pe,Q3r),e(pe,xE),e(xE,LFe),e(LFe,H3r),e(xE,U3r),e(xE,nJ),e(nJ,J3r),e(xE,Y3r),e(pe,K3r),e(pe,$E),e($E,yFe),e(yFe,Z3r),e($E,e0r),e($E,sJ),e(sJ,o0r),e($E,r0r),e(pe,t0r),e(pe,kE),e(kE,xFe),e(xFe,a0r),e(kE,n0r),e(kE,lJ),e(lJ,s0r),e(kE,l0r),e(pe,i0r),e(pe,SE),e(SE,$Fe),e($Fe,d0r),e(SE,c0r),e(SE,iJ),e(iJ,f0r),e(SE,m0r),e(pe,g0r),e(pe,RE),e(RE,kFe),e(kFe,h0r),e(RE,p0r),e(RE,dJ),e(dJ,_0r),e(RE,u0r),e(pe,b0r),e(pe,PE),e(PE,SFe),e(SFe,v0r),e(PE,F0r),e(PE,cJ),e(cJ,T0r),e(PE,M0r),e(pe,E0r),e(pe,BE),e(BE,RFe),e(RFe,C0r),e(BE,w0r),e(BE,fJ),e(fJ,A0r),e(BE,L0r),e(Sr,y0r),M(IE,Sr,null),b(f,WDe,u),b(f,gc,u),e(gc,NE),e(NE,PFe),M(h9,PFe,null),e(gc,x0r),e(gc,BFe),e(BFe,$0r),b(f,QDe,u),b(f,nr,u),M(p9,nr,null),e(nr,k0r),e(nr,hc),e(hc,S0r),e(hc,mJ),e(mJ,R0r),e(hc,P0r),e(hc,gJ),e(gJ,B0r),e(hc,I0r),e(nr,N0r),e(nr,_9),e(_9,q0r),e(_9,IFe),e(IFe,j0r),e(_9,D0r),e(nr,G0r),e(nr,It),M(u9,It,null),e(It,O0r),e(It,NFe),e(NFe,V0r),e(It,X0r),e(It,pc),e(pc,z0r),e(pc,qFe),e(qFe,W0r),e(pc,Q0r),e(pc,hJ),e(hJ,H0r),e(pc,U0r),e(It,J0r),M(qE,It,null),e(nr,Y0r),e(nr,Rr),M(b9,Rr,null),e(Rr,K0r),e(Rr,jFe),e(jFe,Z0r),e(Rr,ewr),e(Rr,ln),e(ln,owr),e(ln,DFe),e(DFe,rwr),e(ln,twr),e(ln,GFe),e(GFe,awr),e(ln,nwr),e(ln,OFe),e(OFe,swr),e(ln,lwr),e(Rr,iwr),e(Rr,v9),e(v9,jE),e(jE,VFe),e(VFe,dwr),e(jE,cwr),e(jE,pJ),e(pJ,fwr),e(jE,mwr),e(v9,gwr),e(v9,DE),e(DE,XFe),e(XFe,hwr),e(DE,pwr),e(DE,_J),e(_J,_wr),e(DE,uwr),e(Rr,bwr),M(GE,Rr,null),b(f,HDe,u),b(f,_c,u),e(_c,OE),e(OE,zFe),M(F9,zFe,null),e(_c,vwr),e(_c,WFe),e(WFe,Fwr),b(f,UDe,u),b(f,sr,u),M(T9,sr,null),e(sr,Twr),e(sr,uc),e(uc,Mwr),e(uc,uJ),e(uJ,Ewr),e(uc,Cwr),e(uc,bJ),e(bJ,wwr),e(uc,Awr),e(sr,Lwr),e(sr,M9),e(M9,ywr),e(M9,QFe),e(QFe,xwr),e(M9,$wr),e(sr,kwr),e(sr,Nt),M(E9,Nt,null),e(Nt,Swr),e(Nt,HFe),e(HFe,Rwr),e(Nt,Pwr),e(Nt,bc),e(bc,Bwr),e(bc,UFe),e(UFe,Iwr),e(bc,Nwr),e(bc,vJ),e(vJ,qwr),e(bc,jwr),e(Nt,Dwr),M(VE,Nt,null),e(sr,Gwr),e(sr,Pr),M(C9,Pr,null),e(Pr,Owr),e(Pr,JFe),e(JFe,Vwr),e(Pr,Xwr),e(Pr,dn),e(dn,zwr),e(dn,YFe),e(YFe,Wwr),e(dn,Qwr),e(dn,KFe),e(KFe,Hwr),e(dn,Uwr),e(dn,ZFe),e(ZFe,Jwr),e(dn,Ywr),e(Pr,Kwr),e(Pr,eTe),e(eTe,XE),e(XE,oTe),e(oTe,Zwr),e(XE,eAr),e(XE,FJ),e(FJ,oAr),e(XE,rAr),e(Pr,tAr),M(zE,Pr,null),b(f,JDe,u),b(f,vc,u),e(vc,WE),e(WE,rTe),M(w9,rTe,null),e(vc,aAr),e(vc,tTe),e(tTe,nAr),b(f,YDe,u),b(f,lr,u),M(A9,lr,null),e(lr,sAr),e(lr,Fc),e(Fc,lAr),e(Fc,TJ),e(TJ,iAr),e(Fc,dAr),e(Fc,MJ),e(MJ,cAr),e(Fc,fAr),e(lr,mAr),e(lr,L9),e(L9,gAr),e(L9,aTe),e(aTe,hAr),e(L9,pAr),e(lr,_Ar),e(lr,qt),M(y9,qt,null),e(qt,uAr),e(qt,nTe),e(nTe,bAr),e(qt,vAr),e(qt,Tc),e(Tc,FAr),e(Tc,sTe),e(sTe,TAr),e(Tc,MAr),e(Tc,EJ),e(EJ,EAr),e(Tc,CAr),e(qt,wAr),M(QE,qt,null),e(lr,AAr),e(lr,Br),M(x9,Br,null),e(Br,LAr),e(Br,lTe),e(lTe,yAr),e(Br,xAr),e(Br,cn),e(cn,$Ar),e(cn,iTe),e(iTe,kAr),e(cn,SAr),e(cn,dTe),e(dTe,RAr),e(cn,PAr),e(cn,cTe),e(cTe,BAr),e(cn,IAr),e(Br,NAr),e(Br,de),e(de,HE),e(HE,fTe),e(fTe,qAr),e(HE,jAr),e(HE,CJ),e(CJ,DAr),e(HE,GAr),e(de,OAr),e(de,UE),e(UE,mTe),e(mTe,VAr),e(UE,XAr),e(UE,wJ),e(wJ,zAr),e(UE,WAr),e(de,QAr),e(de,JE),e(JE,gTe),e(gTe,HAr),e(JE,UAr),e(JE,AJ),e(AJ,JAr),e(JE,YAr),e(de,KAr),e(de,YE),e(YE,hTe),e(hTe,ZAr),e(YE,e6r),e(YE,LJ),e(LJ,o6r),e(YE,r6r),e(de,t6r),e(de,KE),e(KE,pTe),e(pTe,a6r),e(KE,n6r),e(KE,yJ),e(yJ,s6r),e(KE,l6r),e(de,i6r),e(de,ZE),e(ZE,_Te),e(_Te,d6r),e(ZE,c6r),e(ZE,xJ),e(xJ,f6r),e(ZE,m6r),e(de,g6r),e(de,eC),e(eC,uTe),e(uTe,h6r),e(eC,p6r),e(eC,$J),e($J,_6r),e(eC,u6r),e(de,b6r),e(de,oC),e(oC,bTe),e(bTe,v6r),e(oC,F6r),e(oC,kJ),e(kJ,T6r),e(oC,M6r),e(de,E6r),e(de,rC),e(rC,vTe),e(vTe,C6r),e(rC,w6r),e(rC,SJ),e(SJ,A6r),e(rC,L6r),e(de,y6r),e(de,tC),e(tC,FTe),e(FTe,x6r),e(tC,$6r),e(tC,RJ),e(RJ,k6r),e(tC,S6r),e(de,R6r),e(de,aC),e(aC,TTe),e(TTe,P6r),e(aC,B6r),e(aC,PJ),e(PJ,I6r),e(aC,N6r),e(de,q6r),e(de,nC),e(nC,MTe),e(MTe,j6r),e(nC,D6r),e(nC,BJ),e(BJ,G6r),e(nC,O6r),e(de,V6r),e(de,sC),e(sC,ETe),e(ETe,X6r),e(sC,z6r),e(sC,IJ),e(IJ,W6r),e(sC,Q6r),e(de,H6r),e(de,lC),e(lC,CTe),e(CTe,U6r),e(lC,J6r),e(lC,NJ),e(NJ,Y6r),e(lC,K6r),e(de,Z6r),e(de,iC),e(iC,wTe),e(wTe,eLr),e(iC,oLr),e(iC,qJ),e(qJ,rLr),e(iC,tLr),e(de,aLr),e(de,dC),e(dC,ATe),e(ATe,nLr),e(dC,sLr),e(dC,jJ),e(jJ,lLr),e(dC,iLr),e(de,dLr),e(de,cC),e(cC,LTe),e(LTe,cLr),e(cC,fLr),e(cC,DJ),e(DJ,mLr),e(cC,gLr),e(de,hLr),e(de,fC),e(fC,yTe),e(yTe,pLr),e(fC,_Lr),e(fC,GJ),e(GJ,uLr),e(fC,bLr),e(de,vLr),e(de,mC),e(mC,xTe),e(xTe,FLr),e(mC,TLr),e(mC,OJ),e(OJ,MLr),e(mC,ELr),e(de,CLr),e(de,gC),e(gC,$Te),e($Te,wLr),e(gC,ALr),e(gC,VJ),e(VJ,LLr),e(gC,yLr),e(Br,xLr),M(hC,Br,null),b(f,KDe,u),b(f,Mc,u),e(Mc,pC),e(pC,kTe),M($9,kTe,null),e(Mc,$Lr),e(Mc,STe),e(STe,kLr),b(f,ZDe,u),b(f,ir,u),M(k9,ir,null),e(ir,SLr),e(ir,Ec),e(Ec,RLr),e(Ec,XJ),e(XJ,PLr),e(Ec,BLr),e(Ec,zJ),e(zJ,ILr),e(Ec,NLr),e(ir,qLr),e(ir,S9),e(S9,jLr),e(S9,RTe),e(RTe,DLr),e(S9,GLr),e(ir,OLr),e(ir,jt),M(R9,jt,null),e(jt,VLr),e(jt,PTe),e(PTe,XLr),e(jt,zLr),e(jt,Cc),e(Cc,WLr),e(Cc,BTe),e(BTe,QLr),e(Cc,HLr),e(Cc,WJ),e(WJ,ULr),e(Cc,JLr),e(jt,YLr),M(_C,jt,null),e(ir,KLr),e(ir,Ir),M(P9,Ir,null),e(Ir,ZLr),e(Ir,ITe),e(ITe,eyr),e(Ir,oyr),e(Ir,fn),e(fn,ryr),e(fn,NTe),e(NTe,tyr),e(fn,ayr),e(fn,qTe),e(qTe,nyr),e(fn,syr),e(fn,jTe),e(jTe,lyr),e(fn,iyr),e(Ir,dyr),e(Ir,ce),e(ce,uC),e(uC,DTe),e(DTe,cyr),e(uC,fyr),e(uC,QJ),e(QJ,myr),e(uC,gyr),e(ce,hyr),e(ce,bC),e(bC,GTe),e(GTe,pyr),e(bC,_yr),e(bC,HJ),e(HJ,uyr),e(bC,byr),e(ce,vyr),e(ce,vC),e(vC,OTe),e(OTe,Fyr),e(vC,Tyr),e(vC,UJ),e(UJ,Myr),e(vC,Eyr),e(ce,Cyr),e(ce,FC),e(FC,VTe),e(VTe,wyr),e(FC,Ayr),e(FC,JJ),e(JJ,Lyr),e(FC,yyr),e(ce,xyr),e(ce,TC),e(TC,XTe),e(XTe,$yr),e(TC,kyr),e(TC,YJ),e(YJ,Syr),e(TC,Ryr),e(ce,Pyr),e(ce,MC),e(MC,zTe),e(zTe,Byr),e(MC,Iyr),e(MC,KJ),e(KJ,Nyr),e(MC,qyr),e(ce,jyr),e(ce,EC),e(EC,WTe),e(WTe,Dyr),e(EC,Gyr),e(EC,ZJ),e(ZJ,Oyr),e(EC,Vyr),e(ce,Xyr),e(ce,CC),e(CC,QTe),e(QTe,zyr),e(CC,Wyr),e(CC,eY),e(eY,Qyr),e(CC,Hyr),e(ce,Uyr),e(ce,wC),e(wC,HTe),e(HTe,Jyr),e(wC,Yyr),e(wC,oY),e(oY,Kyr),e(wC,Zyr),e(ce,e8r),e(ce,AC),e(AC,UTe),e(UTe,o8r),e(AC,r8r),e(AC,rY),e(rY,t8r),e(AC,a8r),e(ce,n8r),e(ce,LC),e(LC,JTe),e(JTe,s8r),e(LC,l8r),e(LC,tY),e(tY,i8r),e(LC,d8r),e(ce,c8r),e(ce,yC),e(yC,YTe),e(YTe,f8r),e(yC,m8r),e(yC,aY),e(aY,g8r),e(yC,h8r),e(ce,p8r),e(ce,xC),e(xC,KTe),e(KTe,_8r),e(xC,u8r),e(xC,nY),e(nY,b8r),e(xC,v8r),e(ce,F8r),e(ce,$C),e($C,ZTe),e(ZTe,T8r),e($C,M8r),e($C,sY),e(sY,E8r),e($C,C8r),e(ce,w8r),e(ce,kC),e(kC,e7e),e(e7e,A8r),e(kC,L8r),e(kC,lY),e(lY,y8r),e(kC,x8r),e(ce,$8r),e(ce,SC),e(SC,o7e),e(o7e,k8r),e(SC,S8r),e(SC,iY),e(iY,R8r),e(SC,P8r),e(ce,B8r),e(ce,RC),e(RC,r7e),e(r7e,I8r),e(RC,N8r),e(RC,dY),e(dY,q8r),e(RC,j8r),e(ce,D8r),e(ce,PC),e(PC,t7e),e(t7e,G8r),e(PC,O8r),e(PC,cY),e(cY,V8r),e(PC,X8r),e(ce,z8r),e(ce,BC),e(BC,a7e),e(a7e,W8r),e(BC,Q8r),e(BC,fY),e(fY,H8r),e(BC,U8r),e(ce,J8r),e(ce,IC),e(IC,n7e),e(n7e,Y8r),e(IC,K8r),e(IC,mY),e(mY,Z8r),e(IC,e9r),e(Ir,o9r),M(NC,Ir,null),b(f,eGe,u),b(f,wc,u),e(wc,qC),e(qC,s7e),M(B9,s7e,null),e(wc,r9r),e(wc,l7e),e(l7e,t9r),b(f,oGe,u),b(f,dr,u),M(I9,dr,null),e(dr,a9r),e(dr,Ac),e(Ac,n9r),e(Ac,gY),e(gY,s9r),e(Ac,l9r),e(Ac,hY),e(hY,i9r),e(Ac,d9r),e(dr,c9r),e(dr,N9),e(N9,f9r),e(N9,i7e),e(i7e,m9r),e(N9,g9r),e(dr,h9r),e(dr,Dt),M(q9,Dt,null),e(Dt,p9r),e(Dt,d7e),e(d7e,_9r),e(Dt,u9r),e(Dt,Lc),e(Lc,b9r),e(Lc,c7e),e(c7e,v9r),e(Lc,F9r),e(Lc,pY),e(pY,T9r),e(Lc,M9r),e(Dt,E9r),M(jC,Dt,null),e(dr,C9r),e(dr,Nr),M(j9,Nr,null),e(Nr,w9r),e(Nr,f7e),e(f7e,A9r),e(Nr,L9r),e(Nr,mn),e(mn,y9r),e(mn,m7e),e(m7e,x9r),e(mn,$9r),e(mn,g7e),e(g7e,k9r),e(mn,S9r),e(mn,h7e),e(h7e,R9r),e(mn,P9r),e(Nr,B9r),e(Nr,p7e),e(p7e,DC),e(DC,_7e),e(_7e,I9r),e(DC,N9r),e(DC,_Y),e(_Y,q9r),e(DC,j9r),e(Nr,D9r),M(GC,Nr,null),b(f,rGe,u),b(f,yc,u),e(yc,OC),e(OC,u7e),M(D9,u7e,null),e(yc,G9r),e(yc,b7e),e(b7e,O9r),b(f,tGe,u),b(f,cr,u),M(G9,cr,null),e(cr,V9r),e(cr,xc),e(xc,X9r),e(xc,uY),e(uY,z9r),e(xc,W9r),e(xc,bY),e(bY,Q9r),e(xc,H9r),e(cr,U9r),e(cr,O9),e(O9,J9r),e(O9,v7e),e(v7e,Y9r),e(O9,K9r),e(cr,Z9r),e(cr,Gt),M(V9,Gt,null),e(Gt,exr),e(Gt,F7e),e(F7e,oxr),e(Gt,rxr),e(Gt,$c),e($c,txr),e($c,T7e),e(T7e,axr),e($c,nxr),e($c,vY),e(vY,sxr),e($c,lxr),e(Gt,ixr),M(VC,Gt,null),e(cr,dxr),e(cr,qr),M(X9,qr,null),e(qr,cxr),e(qr,M7e),e(M7e,fxr),e(qr,mxr),e(qr,gn),e(gn,gxr),e(gn,E7e),e(E7e,hxr),e(gn,pxr),e(gn,C7e),e(C7e,_xr),e(gn,uxr),e(gn,w7e),e(w7e,bxr),e(gn,vxr),e(qr,Fxr),e(qr,A7e),e(A7e,XC),e(XC,L7e),e(L7e,Txr),e(XC,Mxr),e(XC,FY),e(FY,Exr),e(XC,Cxr),e(qr,wxr),M(zC,qr,null),b(f,aGe,u),b(f,kc,u),e(kc,WC),e(WC,y7e),M(z9,y7e,null),e(kc,Axr),e(kc,x7e),e(x7e,Lxr),b(f,nGe,u),b(f,fr,u),M(W9,fr,null),e(fr,yxr),e(fr,Sc),e(Sc,xxr),e(Sc,TY),e(TY,$xr),e(Sc,kxr),e(Sc,MY),e(MY,Sxr),e(Sc,Rxr),e(fr,Pxr),e(fr,Q9),e(Q9,Bxr),e(Q9,$7e),e($7e,Ixr),e(Q9,Nxr),e(fr,qxr),e(fr,Ot),M(H9,Ot,null),e(Ot,jxr),e(Ot,k7e),e(k7e,Dxr),e(Ot,Gxr),e(Ot,Rc),e(Rc,Oxr),e(Rc,S7e),e(S7e,Vxr),e(Rc,Xxr),e(Rc,EY),e(EY,zxr),e(Rc,Wxr),e(Ot,Qxr),M(QC,Ot,null),e(fr,Hxr),e(fr,jr),M(U9,jr,null),e(jr,Uxr),e(jr,R7e),e(R7e,Jxr),e(jr,Yxr),e(jr,hn),e(hn,Kxr),e(hn,P7e),e(P7e,Zxr),e(hn,e$r),e(hn,B7e),e(B7e,o$r),e(hn,r$r),e(hn,I7e),e(I7e,t$r),e(hn,a$r),e(jr,n$r),e(jr,re),e(re,HC),e(HC,N7e),e(N7e,s$r),e(HC,l$r),e(HC,CY),e(CY,i$r),e(HC,d$r),e(re,c$r),e(re,UC),e(UC,q7e),e(q7e,f$r),e(UC,m$r),e(UC,wY),e(wY,g$r),e(UC,h$r),e(re,p$r),e(re,JC),e(JC,j7e),e(j7e,_$r),e(JC,u$r),e(JC,AY),e(AY,b$r),e(JC,v$r),e(re,F$r),e(re,YC),e(YC,D7e),e(D7e,T$r),e(YC,M$r),e(YC,LY),e(LY,E$r),e(YC,C$r),e(re,w$r),e(re,KC),e(KC,G7e),e(G7e,A$r),e(KC,L$r),e(KC,yY),e(yY,y$r),e(KC,x$r),e(re,$$r),e(re,ZC),e(ZC,O7e),e(O7e,k$r),e(ZC,S$r),e(ZC,xY),e(xY,R$r),e(ZC,P$r),e(re,B$r),e(re,e3),e(e3,V7e),e(V7e,I$r),e(e3,N$r),e(e3,$Y),e($Y,q$r),e(e3,j$r),e(re,D$r),e(re,o3),e(o3,X7e),e(X7e,G$r),e(o3,O$r),e(o3,kY),e(kY,V$r),e(o3,X$r),e(re,z$r),e(re,r3),e(r3,z7e),e(z7e,W$r),e(r3,Q$r),e(r3,SY),e(SY,H$r),e(r3,U$r),e(re,J$r),e(re,t3),e(t3,W7e),e(W7e,Y$r),e(t3,K$r),e(t3,RY),e(RY,Z$r),e(t3,ekr),e(re,okr),e(re,a3),e(a3,Q7e),e(Q7e,rkr),e(a3,tkr),e(a3,PY),e(PY,akr),e(a3,nkr),e(re,skr),e(re,n3),e(n3,H7e),e(H7e,lkr),e(n3,ikr),e(n3,BY),e(BY,dkr),e(n3,ckr),e(re,fkr),e(re,s3),e(s3,U7e),e(U7e,mkr),e(s3,gkr),e(s3,IY),e(IY,hkr),e(s3,pkr),e(re,_kr),e(re,l3),e(l3,J7e),e(J7e,ukr),e(l3,bkr),e(l3,NY),e(NY,vkr),e(l3,Fkr),e(re,Tkr),e(re,i3),e(i3,Y7e),e(Y7e,Mkr),e(i3,Ekr),e(i3,qY),e(qY,Ckr),e(i3,wkr),e(re,Akr),e(re,d3),e(d3,K7e),e(K7e,Lkr),e(d3,ykr),e(d3,jY),e(jY,xkr),e(d3,$kr),e(re,kkr),e(re,c3),e(c3,Z7e),e(Z7e,Skr),e(c3,Rkr),e(c3,DY),e(DY,Pkr),e(c3,Bkr),e(re,Ikr),e(re,f3),e(f3,eMe),e(eMe,Nkr),e(f3,qkr),e(f3,GY),e(GY,jkr),e(f3,Dkr),e(re,Gkr),e(re,m3),e(m3,oMe),e(oMe,Okr),e(m3,Vkr),e(m3,OY),e(OY,Xkr),e(m3,zkr),e(re,Wkr),e(re,g3),e(g3,rMe),e(rMe,Qkr),e(g3,Hkr),e(g3,VY),e(VY,Ukr),e(g3,Jkr),e(re,Ykr),e(re,h3),e(h3,tMe),e(tMe,Kkr),e(h3,Zkr),e(h3,XY),e(XY,eSr),e(h3,oSr),e(re,rSr),e(re,p3),e(p3,aMe),e(aMe,tSr),e(p3,aSr),e(p3,zY),e(zY,nSr),e(p3,sSr),e(re,lSr),e(re,_3),e(_3,nMe),e(nMe,iSr),e(_3,dSr),e(_3,WY),e(WY,cSr),e(_3,fSr),e(re,mSr),e(re,u3),e(u3,sMe),e(sMe,gSr),e(u3,hSr),e(u3,QY),e(QY,pSr),e(u3,_Sr),e(re,uSr),e(re,b3),e(b3,lMe),e(lMe,bSr),e(b3,vSr),e(b3,HY),e(HY,FSr),e(b3,TSr),e(re,MSr),e(re,v3),e(v3,iMe),e(iMe,ESr),e(v3,CSr),e(v3,UY),e(UY,wSr),e(v3,ASr),e(jr,LSr),M(F3,jr,null),b(f,sGe,u),b(f,Pc,u),e(Pc,T3),e(T3,dMe),M(J9,dMe,null),e(Pc,ySr),e(Pc,cMe),e(cMe,xSr),b(f,lGe,u),b(f,mr,u),M(Y9,mr,null),e(mr,$Sr),e(mr,Bc),e(Bc,kSr),e(Bc,JY),e(JY,SSr),e(Bc,RSr),e(Bc,YY),e(YY,PSr),e(Bc,BSr),e(mr,ISr),e(mr,K9),e(K9,NSr),e(K9,fMe),e(fMe,qSr),e(K9,jSr),e(mr,DSr),e(mr,Vt),M(Z9,Vt,null),e(Vt,GSr),e(Vt,mMe),e(mMe,OSr),e(Vt,VSr),e(Vt,Ic),e(Ic,XSr),e(Ic,gMe),e(gMe,zSr),e(Ic,WSr),e(Ic,KY),e(KY,QSr),e(Ic,HSr),e(Vt,USr),M(M3,Vt,null),e(mr,JSr),e(mr,Dr),M(ex,Dr,null),e(Dr,YSr),e(Dr,hMe),e(hMe,KSr),e(Dr,ZSr),e(Dr,pn),e(pn,eRr),e(pn,pMe),e(pMe,oRr),e(pn,rRr),e(pn,_Me),e(_Me,tRr),e(pn,aRr),e(pn,uMe),e(uMe,nRr),e(pn,sRr),e(Dr,lRr),e(Dr,xe),e(xe,E3),e(E3,bMe),e(bMe,iRr),e(E3,dRr),e(E3,ZY),e(ZY,cRr),e(E3,fRr),e(xe,mRr),e(xe,C3),e(C3,vMe),e(vMe,gRr),e(C3,hRr),e(C3,eK),e(eK,pRr),e(C3,_Rr),e(xe,uRr),e(xe,w3),e(w3,FMe),e(FMe,bRr),e(w3,vRr),e(w3,oK),e(oK,FRr),e(w3,TRr),e(xe,MRr),e(xe,A3),e(A3,TMe),e(TMe,ERr),e(A3,CRr),e(A3,rK),e(rK,wRr),e(A3,ARr),e(xe,LRr),e(xe,L3),e(L3,MMe),e(MMe,yRr),e(L3,xRr),e(L3,tK),e(tK,$Rr),e(L3,kRr),e(xe,SRr),e(xe,y3),e(y3,EMe),e(EMe,RRr),e(y3,PRr),e(y3,aK),e(aK,BRr),e(y3,IRr),e(xe,NRr),e(xe,x3),e(x3,CMe),e(CMe,qRr),e(x3,jRr),e(x3,nK),e(nK,DRr),e(x3,GRr),e(xe,ORr),e(xe,$3),e($3,wMe),e(wMe,VRr),e($3,XRr),e($3,sK),e(sK,zRr),e($3,WRr),e(xe,QRr),e(xe,k3),e(k3,AMe),e(AMe,HRr),e(k3,URr),e(k3,lK),e(lK,JRr),e(k3,YRr),e(xe,KRr),e(xe,S3),e(S3,LMe),e(LMe,ZRr),e(S3,ePr),e(S3,iK),e(iK,oPr),e(S3,rPr),e(Dr,tPr),M(R3,Dr,null),b(f,iGe,u),b(f,Nc,u),e(Nc,P3),e(P3,yMe),M(ox,yMe,null),e(Nc,aPr),e(Nc,xMe),e(xMe,nPr),b(f,dGe,u),b(f,gr,u),M(rx,gr,null),e(gr,sPr),e(gr,qc),e(qc,lPr),e(qc,dK),e(dK,iPr),e(qc,dPr),e(qc,cK),e(cK,cPr),e(qc,fPr),e(gr,mPr),e(gr,tx),e(tx,gPr),e(tx,$Me),e($Me,hPr),e(tx,pPr),e(gr,_Pr),e(gr,Xt),M(ax,Xt,null),e(Xt,uPr),e(Xt,kMe),e(kMe,bPr),e(Xt,vPr),e(Xt,jc),e(jc,FPr),e(jc,SMe),e(SMe,TPr),e(jc,MPr),e(jc,fK),e(fK,EPr),e(jc,CPr),e(Xt,wPr),M(B3,Xt,null),e(gr,APr),e(gr,Gr),M(nx,Gr,null),e(Gr,LPr),e(Gr,RMe),e(RMe,yPr),e(Gr,xPr),e(Gr,_n),e(_n,$Pr),e(_n,PMe),e(PMe,kPr),e(_n,SPr),e(_n,BMe),e(BMe,RPr),e(_n,PPr),e(_n,IMe),e(IMe,BPr),e(_n,IPr),e(Gr,NPr),e(Gr,Ee),e(Ee,I3),e(I3,NMe),e(NMe,qPr),e(I3,jPr),e(I3,mK),e(mK,DPr),e(I3,GPr),e(Ee,OPr),e(Ee,N3),e(N3,qMe),e(qMe,VPr),e(N3,XPr),e(N3,gK),e(gK,zPr),e(N3,WPr),e(Ee,QPr),e(Ee,q3),e(q3,jMe),e(jMe,HPr),e(q3,UPr),e(q3,hK),e(hK,JPr),e(q3,YPr),e(Ee,KPr),e(Ee,j3),e(j3,DMe),e(DMe,ZPr),e(j3,eBr),e(j3,pK),e(pK,oBr),e(j3,rBr),e(Ee,tBr),e(Ee,D3),e(D3,GMe),e(GMe,aBr),e(D3,nBr),e(D3,_K),e(_K,sBr),e(D3,lBr),e(Ee,iBr),e(Ee,G3),e(G3,OMe),e(OMe,dBr),e(G3,cBr),e(G3,uK),e(uK,fBr),e(G3,mBr),e(Ee,gBr),e(Ee,O3),e(O3,VMe),e(VMe,hBr),e(O3,pBr),e(O3,bK),e(bK,_Br),e(O3,uBr),e(Ee,bBr),e(Ee,V3),e(V3,XMe),e(XMe,vBr),e(V3,FBr),e(V3,vK),e(vK,TBr),e(V3,MBr),e(Ee,EBr),e(Ee,X3),e(X3,zMe),e(zMe,CBr),e(X3,wBr),e(X3,FK),e(FK,ABr),e(X3,LBr),e(Ee,yBr),e(Ee,z3),e(z3,WMe),e(WMe,xBr),e(z3,$Br),e(z3,TK),e(TK,kBr),e(z3,SBr),e(Ee,RBr),e(Ee,W3),e(W3,QMe),e(QMe,PBr),e(W3,BBr),e(W3,MK),e(MK,IBr),e(W3,NBr),e(Ee,qBr),e(Ee,Q3),e(Q3,HMe),e(HMe,jBr),e(Q3,DBr),e(Q3,EK),e(EK,GBr),e(Q3,OBr),e(Gr,VBr),M(H3,Gr,null),b(f,cGe,u),b(f,Dc,u),e(Dc,U3),e(U3,UMe),M(sx,UMe,null),e(Dc,XBr),e(Dc,JMe),e(JMe,zBr),b(f,fGe,u),b(f,hr,u),M(lx,hr,null),e(hr,WBr),e(hr,Gc),e(Gc,QBr),e(Gc,CK),e(CK,HBr),e(Gc,UBr),e(Gc,wK),e(wK,JBr),e(Gc,YBr),e(hr,KBr),e(hr,ix),e(ix,ZBr),e(ix,YMe),e(YMe,eIr),e(ix,oIr),e(hr,rIr),e(hr,zt),M(dx,zt,null),e(zt,tIr),e(zt,KMe),e(KMe,aIr),e(zt,nIr),e(zt,Oc),e(Oc,sIr),e(Oc,ZMe),e(ZMe,lIr),e(Oc,iIr),e(Oc,AK),e(AK,dIr),e(Oc,cIr),e(zt,fIr),M(J3,zt,null),e(hr,mIr),e(hr,Or),M(cx,Or,null),e(Or,gIr),e(Or,eEe),e(eEe,hIr),e(Or,pIr),e(Or,un),e(un,_Ir),e(un,oEe),e(oEe,uIr),e(un,bIr),e(un,rEe),e(rEe,vIr),e(un,FIr),e(un,tEe),e(tEe,TIr),e(un,MIr),e(Or,EIr),e(Or,$e),e($e,Y3),e(Y3,aEe),e(aEe,CIr),e(Y3,wIr),e(Y3,LK),e(LK,AIr),e(Y3,LIr),e($e,yIr),e($e,K3),e(K3,nEe),e(nEe,xIr),e(K3,$Ir),e(K3,yK),e(yK,kIr),e(K3,SIr),e($e,RIr),e($e,Z3),e(Z3,sEe),e(sEe,PIr),e(Z3,BIr),e(Z3,xK),e(xK,IIr),e(Z3,NIr),e($e,qIr),e($e,e0),e(e0,lEe),e(lEe,jIr),e(e0,DIr),e(e0,$K),e($K,GIr),e(e0,OIr),e($e,VIr),e($e,o0),e(o0,iEe),e(iEe,XIr),e(o0,zIr),e(o0,kK),e(kK,WIr),e(o0,QIr),e($e,HIr),e($e,r0),e(r0,dEe),e(dEe,UIr),e(r0,JIr),e(r0,SK),e(SK,YIr),e(r0,KIr),e($e,ZIr),e($e,t0),e(t0,cEe),e(cEe,eNr),e(t0,oNr),e(t0,RK),e(RK,rNr),e(t0,tNr),e($e,aNr),e($e,a0),e(a0,fEe),e(fEe,nNr),e(a0,sNr),e(a0,PK),e(PK,lNr),e(a0,iNr),e($e,dNr),e($e,n0),e(n0,mEe),e(mEe,cNr),e(n0,fNr),e(n0,BK),e(BK,mNr),e(n0,gNr),e($e,hNr),e($e,s0),e(s0,gEe),e(gEe,pNr),e(s0,_Nr),e(s0,IK),e(IK,uNr),e(s0,bNr),e(Or,vNr),M(l0,Or,null),b(f,mGe,u),b(f,Vc,u),e(Vc,i0),e(i0,hEe),M(fx,hEe,null),e(Vc,FNr),e(Vc,pEe),e(pEe,TNr),b(f,gGe,u),b(f,pr,u),M(mx,pr,null),e(pr,MNr),e(pr,Xc),e(Xc,ENr),e(Xc,NK),e(NK,CNr),e(Xc,wNr),e(Xc,qK),e(qK,ANr),e(Xc,LNr),e(pr,yNr),e(pr,gx),e(gx,xNr),e(gx,_Ee),e(_Ee,$Nr),e(gx,kNr),e(pr,SNr),e(pr,Wt),M(hx,Wt,null),e(Wt,RNr),e(Wt,uEe),e(uEe,PNr),e(Wt,BNr),e(Wt,zc),e(zc,INr),e(zc,bEe),e(bEe,NNr),e(zc,qNr),e(zc,jK),e(jK,jNr),e(zc,DNr),e(Wt,GNr),M(d0,Wt,null),e(pr,ONr),e(pr,Vr),M(px,Vr,null),e(Vr,VNr),e(Vr,vEe),e(vEe,XNr),e(Vr,zNr),e(Vr,bn),e(bn,WNr),e(bn,FEe),e(FEe,QNr),e(bn,HNr),e(bn,TEe),e(TEe,UNr),e(bn,JNr),e(bn,MEe),e(MEe,YNr),e(bn,KNr),e(Vr,ZNr),e(Vr,Pe),e(Pe,c0),e(c0,EEe),e(EEe,eqr),e(c0,oqr),e(c0,DK),e(DK,rqr),e(c0,tqr),e(Pe,aqr),e(Pe,f0),e(f0,CEe),e(CEe,nqr),e(f0,sqr),e(f0,GK),e(GK,lqr),e(f0,iqr),e(Pe,dqr),e(Pe,m0),e(m0,wEe),e(wEe,cqr),e(m0,fqr),e(m0,OK),e(OK,mqr),e(m0,gqr),e(Pe,hqr),e(Pe,g0),e(g0,AEe),e(AEe,pqr),e(g0,_qr),e(g0,VK),e(VK,uqr),e(g0,bqr),e(Pe,vqr),e(Pe,h0),e(h0,LEe),e(LEe,Fqr),e(h0,Tqr),e(h0,XK),e(XK,Mqr),e(h0,Eqr),e(Pe,Cqr),e(Pe,p0),e(p0,yEe),e(yEe,wqr),e(p0,Aqr),e(p0,zK),e(zK,Lqr),e(p0,yqr),e(Pe,xqr),e(Pe,_0),e(_0,xEe),e(xEe,$qr),e(_0,kqr),e(_0,WK),e(WK,Sqr),e(_0,Rqr),e(Pe,Pqr),e(Pe,u0),e(u0,$Ee),e($Ee,Bqr),e(u0,Iqr),e(u0,QK),e(QK,Nqr),e(u0,qqr),e(Pe,jqr),e(Pe,b0),e(b0,kEe),e(kEe,Dqr),e(b0,Gqr),e(b0,HK),e(HK,Oqr),e(b0,Vqr),e(Vr,Xqr),M(v0,Vr,null),b(f,hGe,u),b(f,Wc,u),e(Wc,F0),e(F0,SEe),M(_x,SEe,null),e(Wc,zqr),e(Wc,REe),e(REe,Wqr),b(f,pGe,u),b(f,_r,u),M(ux,_r,null),e(_r,Qqr),e(_r,Qc),e(Qc,Hqr),e(Qc,UK),e(UK,Uqr),e(Qc,Jqr),e(Qc,JK),e(JK,Yqr),e(Qc,Kqr),e(_r,Zqr),e(_r,bx),e(bx,ejr),e(bx,PEe),e(PEe,ojr),e(bx,rjr),e(_r,tjr),e(_r,Qt),M(vx,Qt,null),e(Qt,ajr),e(Qt,BEe),e(BEe,njr),e(Qt,sjr),e(Qt,Hc),e(Hc,ljr),e(Hc,IEe),e(IEe,ijr),e(Hc,djr),e(Hc,YK),e(YK,cjr),e(Hc,fjr),e(Qt,mjr),M(T0,Qt,null),e(_r,gjr),e(_r,Xr),M(Fx,Xr,null),e(Xr,hjr),e(Xr,NEe),e(NEe,pjr),e(Xr,_jr),e(Xr,vn),e(vn,ujr),e(vn,qEe),e(qEe,bjr),e(vn,vjr),e(vn,jEe),e(jEe,Fjr),e(vn,Tjr),e(vn,DEe),e(DEe,Mjr),e(vn,Ejr),e(Xr,Cjr),e(Xr,ke),e(ke,M0),e(M0,GEe),e(GEe,wjr),e(M0,Ajr),e(M0,KK),e(KK,Ljr),e(M0,yjr),e(ke,xjr),e(ke,E0),e(E0,OEe),e(OEe,$jr),e(E0,kjr),e(E0,ZK),e(ZK,Sjr),e(E0,Rjr),e(ke,Pjr),e(ke,C0),e(C0,VEe),e(VEe,Bjr),e(C0,Ijr),e(C0,eZ),e(eZ,Njr),e(C0,qjr),e(ke,jjr),e(ke,w0),e(w0,XEe),e(XEe,Djr),e(w0,Gjr),e(w0,oZ),e(oZ,Ojr),e(w0,Vjr),e(ke,Xjr),e(ke,A0),e(A0,zEe),e(zEe,zjr),e(A0,Wjr),e(A0,rZ),e(rZ,Qjr),e(A0,Hjr),e(ke,Ujr),e(ke,L0),e(L0,WEe),e(WEe,Jjr),e(L0,Yjr),e(L0,tZ),e(tZ,Kjr),e(L0,Zjr),e(ke,eDr),e(ke,y0),e(y0,QEe),e(QEe,oDr),e(y0,rDr),e(y0,aZ),e(aZ,tDr),e(y0,aDr),e(ke,nDr),e(ke,x0),e(x0,HEe),e(HEe,sDr),e(x0,lDr),e(x0,nZ),e(nZ,iDr),e(x0,dDr),e(ke,cDr),e(ke,$0),e($0,UEe),e(UEe,fDr),e($0,mDr),e($0,sZ),e(sZ,gDr),e($0,hDr),e(ke,pDr),e(ke,k0),e(k0,JEe),e(JEe,_Dr),e(k0,uDr),e(k0,lZ),e(lZ,bDr),e(k0,vDr),e(Xr,FDr),M(S0,Xr,null),b(f,_Ge,u),b(f,Uc,u),e(Uc,R0),e(R0,YEe),M(Tx,YEe,null),e(Uc,TDr),e(Uc,KEe),e(KEe,MDr),b(f,uGe,u),b(f,ur,u),M(Mx,ur,null),e(ur,EDr),e(ur,Jc),e(Jc,CDr),e(Jc,iZ),e(iZ,wDr),e(Jc,ADr),e(Jc,dZ),e(dZ,LDr),e(Jc,yDr),e(ur,xDr),e(ur,Ex),e(Ex,$Dr),e(Ex,ZEe),e(ZEe,kDr),e(Ex,SDr),e(ur,RDr),e(ur,Ht),M(Cx,Ht,null),e(Ht,PDr),e(Ht,eCe),e(eCe,BDr),e(Ht,IDr),e(Ht,Yc),e(Yc,NDr),e(Yc,oCe),e(oCe,qDr),e(Yc,jDr),e(Yc,cZ),e(cZ,DDr),e(Yc,GDr),e(Ht,ODr),M(P0,Ht,null),e(ur,VDr),e(ur,zr),M(wx,zr,null),e(zr,XDr),e(zr,rCe),e(rCe,zDr),e(zr,WDr),e(zr,Fn),e(Fn,QDr),e(Fn,tCe),e(tCe,HDr),e(Fn,UDr),e(Fn,aCe),e(aCe,JDr),e(Fn,YDr),e(Fn,nCe),e(nCe,KDr),e(Fn,ZDr),e(zr,eGr),e(zr,Se),e(Se,B0),e(B0,sCe),e(sCe,oGr),e(B0,rGr),e(B0,fZ),e(fZ,tGr),e(B0,aGr),e(Se,nGr),e(Se,I0),e(I0,lCe),e(lCe,sGr),e(I0,lGr),e(I0,mZ),e(mZ,iGr),e(I0,dGr),e(Se,cGr),e(Se,N0),e(N0,iCe),e(iCe,fGr),e(N0,mGr),e(N0,gZ),e(gZ,gGr),e(N0,hGr),e(Se,pGr),e(Se,q0),e(q0,dCe),e(dCe,_Gr),e(q0,uGr),e(q0,hZ),e(hZ,bGr),e(q0,vGr),e(Se,FGr),e(Se,j0),e(j0,cCe),e(cCe,TGr),e(j0,MGr),e(j0,pZ),e(pZ,EGr),e(j0,CGr),e(Se,wGr),e(Se,D0),e(D0,fCe),e(fCe,AGr),e(D0,LGr),e(D0,_Z),e(_Z,yGr),e(D0,xGr),e(Se,$Gr),e(Se,G0),e(G0,mCe),e(mCe,kGr),e(G0,SGr),e(G0,uZ),e(uZ,RGr),e(G0,PGr),e(Se,BGr),e(Se,O0),e(O0,gCe),e(gCe,IGr),e(O0,NGr),e(O0,bZ),e(bZ,qGr),e(O0,jGr),e(Se,DGr),e(Se,V0),e(V0,hCe),e(hCe,GGr),e(V0,OGr),e(V0,vZ),e(vZ,VGr),e(V0,XGr),e(Se,zGr),e(Se,X0),e(X0,pCe),e(pCe,WGr),e(X0,QGr),e(X0,FZ),e(FZ,HGr),e(X0,UGr),e(zr,JGr),M(z0,zr,null),b(f,bGe,u),b(f,Kc,u),e(Kc,W0),e(W0,_Ce),M(Ax,_Ce,null),e(Kc,YGr),e(Kc,uCe),e(uCe,KGr),b(f,vGe,u),b(f,br,u),M(Lx,br,null),e(br,ZGr),e(br,Zc),e(Zc,eOr),e(Zc,TZ),e(TZ,oOr),e(Zc,rOr),e(Zc,MZ),e(MZ,tOr),e(Zc,aOr),e(br,nOr),e(br,yx),e(yx,sOr),e(yx,bCe),e(bCe,lOr),e(yx,iOr),e(br,dOr),e(br,Ut),M(xx,Ut,null),e(Ut,cOr),e(Ut,vCe),e(vCe,fOr),e(Ut,mOr),e(Ut,ef),e(ef,gOr),e(ef,FCe),e(FCe,hOr),e(ef,pOr),e(ef,EZ),e(EZ,_Or),e(ef,uOr),e(Ut,bOr),M(Q0,Ut,null),e(br,vOr),e(br,Wr),M($x,Wr,null),e(Wr,FOr),e(Wr,TCe),e(TCe,TOr),e(Wr,MOr),e(Wr,Tn),e(Tn,EOr),e(Tn,MCe),e(MCe,COr),e(Tn,wOr),e(Tn,ECe),e(ECe,AOr),e(Tn,LOr),e(Tn,CCe),e(CCe,yOr),e(Tn,xOr),e(Wr,$Or),e(Wr,Oe),e(Oe,H0),e(H0,wCe),e(wCe,kOr),e(H0,SOr),e(H0,CZ),e(CZ,ROr),e(H0,POr),e(Oe,BOr),e(Oe,U0),e(U0,ACe),e(ACe,IOr),e(U0,NOr),e(U0,wZ),e(wZ,qOr),e(U0,jOr),e(Oe,DOr),e(Oe,J0),e(J0,LCe),e(LCe,GOr),e(J0,OOr),e(J0,AZ),e(AZ,VOr),e(J0,XOr),e(Oe,zOr),e(Oe,Y0),e(Y0,yCe),e(yCe,WOr),e(Y0,QOr),e(Y0,LZ),e(LZ,HOr),e(Y0,UOr),e(Oe,JOr),e(Oe,K0),e(K0,xCe),e(xCe,YOr),e(K0,KOr),e(K0,yZ),e(yZ,ZOr),e(K0,eVr),e(Oe,oVr),e(Oe,Z0),e(Z0,$Ce),e($Ce,rVr),e(Z0,tVr),e(Z0,xZ),e(xZ,aVr),e(Z0,nVr),e(Oe,sVr),e(Oe,ew),e(ew,kCe),e(kCe,lVr),e(ew,iVr),e(ew,$Z),e($Z,dVr),e(ew,cVr),e(Oe,fVr),e(Oe,ow),e(ow,SCe),e(SCe,mVr),e(ow,gVr),e(ow,kZ),e(kZ,hVr),e(ow,pVr),e(Wr,_Vr),M(rw,Wr,null),b(f,FGe,u),b(f,of,u),e(of,tw),e(tw,RCe),M(kx,RCe,null),e(of,uVr),e(of,PCe),e(PCe,bVr),b(f,TGe,u),b(f,vr,u),M(Sx,vr,null),e(vr,vVr),e(vr,rf),e(rf,FVr),e(rf,SZ),e(SZ,TVr),e(rf,MVr),e(rf,RZ),e(RZ,EVr),e(rf,CVr),e(vr,wVr),e(vr,Rx),e(Rx,AVr),e(Rx,BCe),e(BCe,LVr),e(Rx,yVr),e(vr,xVr),e(vr,Jt),M(Px,Jt,null),e(Jt,$Vr),e(Jt,ICe),e(ICe,kVr),e(Jt,SVr),e(Jt,tf),e(tf,RVr),e(tf,NCe),e(NCe,PVr),e(tf,BVr),e(tf,PZ),e(PZ,IVr),e(tf,NVr),e(Jt,qVr),M(aw,Jt,null),e(vr,jVr),e(vr,Qr),M(Bx,Qr,null),e(Qr,DVr),e(Qr,qCe),e(qCe,GVr),e(Qr,OVr),e(Qr,Mn),e(Mn,VVr),e(Mn,jCe),e(jCe,XVr),e(Mn,zVr),e(Mn,DCe),e(DCe,WVr),e(Mn,QVr),e(Mn,GCe),e(GCe,HVr),e(Mn,UVr),e(Qr,JVr),e(Qr,Ve),e(Ve,nw),e(nw,OCe),e(OCe,YVr),e(nw,KVr),e(nw,BZ),e(BZ,ZVr),e(nw,eXr),e(Ve,oXr),e(Ve,sw),e(sw,VCe),e(VCe,rXr),e(sw,tXr),e(sw,IZ),e(IZ,aXr),e(sw,nXr),e(Ve,sXr),e(Ve,lw),e(lw,XCe),e(XCe,lXr),e(lw,iXr),e(lw,NZ),e(NZ,dXr),e(lw,cXr),e(Ve,fXr),e(Ve,iw),e(iw,zCe),e(zCe,mXr),e(iw,gXr),e(iw,qZ),e(qZ,hXr),e(iw,pXr),e(Ve,_Xr),e(Ve,dw),e(dw,WCe),e(WCe,uXr),e(dw,bXr),e(dw,jZ),e(jZ,vXr),e(dw,FXr),e(Ve,TXr),e(Ve,cw),e(cw,QCe),e(QCe,MXr),e(cw,EXr),e(cw,DZ),e(DZ,CXr),e(cw,wXr),e(Ve,AXr),e(Ve,fw),e(fw,HCe),e(HCe,LXr),e(fw,yXr),e(fw,GZ),e(GZ,xXr),e(fw,$Xr),e(Ve,kXr),e(Ve,mw),e(mw,UCe),e(UCe,SXr),e(mw,RXr),e(mw,OZ),e(OZ,PXr),e(mw,BXr),e(Qr,IXr),M(gw,Qr,null),b(f,MGe,u),b(f,af,u),e(af,hw),e(hw,JCe),M(Ix,JCe,null),e(af,NXr),e(af,YCe),e(YCe,qXr),b(f,EGe,u),b(f,Fr,u),M(Nx,Fr,null),e(Fr,jXr),e(Fr,nf),e(nf,DXr),e(nf,VZ),e(VZ,GXr),e(nf,OXr),e(nf,XZ),e(XZ,VXr),e(nf,XXr),e(Fr,zXr),e(Fr,qx),e(qx,WXr),e(qx,KCe),e(KCe,QXr),e(qx,HXr),e(Fr,UXr),e(Fr,Yt),M(jx,Yt,null),e(Yt,JXr),e(Yt,ZCe),e(ZCe,YXr),e(Yt,KXr),e(Yt,sf),e(sf,ZXr),e(sf,e3e),e(e3e,ezr),e(sf,ozr),e(sf,zZ),e(zZ,rzr),e(sf,tzr),e(Yt,azr),M(pw,Yt,null),e(Fr,nzr),e(Fr,Hr),M(Dx,Hr,null),e(Hr,szr),e(Hr,o3e),e(o3e,lzr),e(Hr,izr),e(Hr,En),e(En,dzr),e(En,r3e),e(r3e,czr),e(En,fzr),e(En,t3e),e(t3e,mzr),e(En,gzr),e(En,a3e),e(a3e,hzr),e(En,pzr),e(Hr,_zr),e(Hr,n3e),e(n3e,_w),e(_w,s3e),e(s3e,uzr),e(_w,bzr),e(_w,WZ),e(WZ,vzr),e(_w,Fzr),e(Hr,Tzr),M(uw,Hr,null),b(f,CGe,u),b(f,lf,u),e(lf,bw),e(bw,l3e),M(Gx,l3e,null),e(lf,Mzr),e(lf,i3e),e(i3e,Ezr),b(f,wGe,u),b(f,Tr,u),M(Ox,Tr,null),e(Tr,Czr),e(Tr,df),e(df,wzr),e(df,QZ),e(QZ,Azr),e(df,Lzr),e(df,HZ),e(HZ,yzr),e(df,xzr),e(Tr,$zr),e(Tr,Vx),e(Vx,kzr),e(Vx,d3e),e(d3e,Szr),e(Vx,Rzr),e(Tr,Pzr),e(Tr,Kt),M(Xx,Kt,null),e(Kt,Bzr),e(Kt,c3e),e(c3e,Izr),e(Kt,Nzr),e(Kt,cf),e(cf,qzr),e(cf,f3e),e(f3e,jzr),e(cf,Dzr),e(cf,UZ),e(UZ,Gzr),e(cf,Ozr),e(Kt,Vzr),M(vw,Kt,null),e(Tr,Xzr),e(Tr,Ur),M(zx,Ur,null),e(Ur,zzr),e(Ur,m3e),e(m3e,Wzr),e(Ur,Qzr),e(Ur,Cn),e(Cn,Hzr),e(Cn,g3e),e(g3e,Uzr),e(Cn,Jzr),e(Cn,h3e),e(h3e,Yzr),e(Cn,Kzr),e(Cn,p3e),e(p3e,Zzr),e(Cn,eWr),e(Ur,oWr),e(Ur,Wx),e(Wx,Fw),e(Fw,_3e),e(_3e,rWr),e(Fw,tWr),e(Fw,JZ),e(JZ,aWr),e(Fw,nWr),e(Wx,sWr),e(Wx,Tw),e(Tw,u3e),e(u3e,lWr),e(Tw,iWr),e(Tw,YZ),e(YZ,dWr),e(Tw,cWr),e(Ur,fWr),M(Mw,Ur,null),b(f,AGe,u),b(f,ff,u),e(ff,Ew),e(Ew,b3e),M(Qx,b3e,null),e(ff,mWr),e(ff,v3e),e(v3e,gWr),b(f,LGe,u),b(f,Mr,u),M(Hx,Mr,null),e(Mr,hWr),e(Mr,mf),e(mf,pWr),e(mf,KZ),e(KZ,_Wr),e(mf,uWr),e(mf,ZZ),e(ZZ,bWr),e(mf,vWr),e(Mr,FWr),e(Mr,Ux),e(Ux,TWr),e(Ux,F3e),e(F3e,MWr),e(Ux,EWr),e(Mr,CWr),e(Mr,Zt),M(Jx,Zt,null),e(Zt,wWr),e(Zt,T3e),e(T3e,AWr),e(Zt,LWr),e(Zt,gf),e(gf,yWr),e(gf,M3e),e(M3e,xWr),e(gf,$Wr),e(gf,eee),e(eee,kWr),e(gf,SWr),e(Zt,RWr),M(Cw,Zt,null),e(Mr,PWr),e(Mr,Jr),M(Yx,Jr,null),e(Jr,BWr),e(Jr,E3e),e(E3e,IWr),e(Jr,NWr),e(Jr,wn),e(wn,qWr),e(wn,C3e),e(C3e,jWr),e(wn,DWr),e(wn,w3e),e(w3e,GWr),e(wn,OWr),e(wn,A3e),e(A3e,VWr),e(wn,XWr),e(Jr,zWr),e(Jr,L3e),e(L3e,ww),e(ww,y3e),e(y3e,WWr),e(ww,QWr),e(ww,oee),e(oee,HWr),e(ww,UWr),e(Jr,JWr),M(Aw,Jr,null),yGe=!0},p(f,[u]){const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),Mf.$set(Kx);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),yg.$set(x3e);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),ch.$set($3e);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),Xh.$set(k3e);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),zh.$set(Zx);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),fp.$set(S3e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),mp.$set(An);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),pp.$set(R3e);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),gu.$set(P3e);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),pu.$set(B3e);const e$={};u&2&&(e$.$$scope={dirty:u,ctx:f}),s5.$set(e$);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),i5.$set(I3e);const o$={};u&2&&(o$.$$scope={dirty:u,ctx:f}),H5.$set(o$);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),J5.$set(N3e);const r$={};u&2&&(r$.$$scope={dirty:u,ctx:f}),P1.$set(r$);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),I1.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),eb.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),rb.$set(D3e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Yb.$set(hf);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),Zb.$set(G3e);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),$2.$set(O3e);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),S2.$set(V3e);const t$={};u&2&&(t$.$$scope={dirty:u,ctx:f}),j2.$set(t$);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),G2.$set(X3e);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),E4.$set(z3e);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),w4.$set(W3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),gv.$set(ot);const a$={};u&2&&(a$.$$scope={dirty:u,ctx:f}),pv.$set(a$);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),bv.$set(Q3e);const n$={};u&2&&(n$.$$scope={dirty:u,ctx:f}),Fv.$set(n$);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),Pv.$set(H3e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Iv.$set(rt);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),jv.$set(U3e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),Gv.$set(pf);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),Kv.$set(J3e);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),eF.$set(Y3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),lF.$set(L);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),dF.$set(Lw);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),TF.$set(K3e);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),EF.$set(Z3e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),LF.$set(yw);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),xF.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),IF.$set(o0e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),qF.$set(xw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),VF.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),zF.$set(t0e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),UF.$set($w);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),YF.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),eT.$set(n0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),rT.$set(kw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),iT.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),cT.$set(l0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),gT.$set(Sw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),pT.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),d7.$set(d0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),f7.$set(Rw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),B7.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),N7.$set(f0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),Y7.$set(Pw);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),Z7.$set(m0e);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),nM.$set(g0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),lM.$set(Bw);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),yM.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),$M.$set(p0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),GM.$set(Iw);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),VM.$set(_0e);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),_E.$set(u0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),bE.$set(Nw);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),IE.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),qE.$set(v0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),GE.$set(qw);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),VE.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),zE.$set(T0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),QE.$set(jw);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),hC.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),_C.$set(E0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),NC.$set(Dw);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),jC.$set(C0e);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),GC.$set(w0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),VC.$set(Gw);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),zC.$set(A0e);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),QC.$set(L0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),F3.$set(Ow);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),M3.$set(y0e);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),R3.$set(x0e);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),B3.$set(Vw);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),H3.$set($0e);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),J3.$set(k0e);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),l0.$set(Xw);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),d0.$set(S0e);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),v0.$set(R0e);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),T0.$set(zw);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),S0.$set(P0e);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),P0.$set(B0e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),z0.$set(Ww);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),Q0.$set(I0e);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),rw.$set(N0e);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),aw.$set(Qw);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),gw.$set(q0e);const j0e={};u&2&&(j0e.$$scope={dirty:u,ctx:f}),pw.$set(j0e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),uw.$set(Hw);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:f}),vw.$set(D0e);const G0e={};u&2&&(G0e.$$scope={dirty:u,ctx:f}),Mw.$set(G0e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),Cw.$set(Uw);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),Aw.$set(O0e)},i(f){yGe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(Q6.$$.fragment,f),E(H6.$$.fragment,f),E(Mf.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(Z6.$$.fragment,f),E(yg.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(nL.$$.fragment,f),E(ch.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(Xh.$$.fragment,f),E(zh.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(fp.$$.fragment,f),E(mp.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(pp.$$.fragment,f),E(EL.$$.fragment,f),E(gu.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(pu.$$.fragment,f),E(yL.$$.fragment,f),E(s5.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(i5.$$.fragment,f),E(RL.$$.fragment,f),E(H5.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(J5.$$.fragment,f),E(qL.$$.fragment,f),E(P1.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(I1.$$.fragment,f),E(VL.$$.fragment,f),E(eb.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(rb.$$.fragment,f),E(HL.$$.fragment,f),E(Yb.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(Zb.$$.fragment,f),E(ZL.$$.fragment,f),E($2.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(S2.$$.fragment,f),E(ay.$$.fragment,f),E(j2.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(G2.$$.fragment,f),E(dy.$$.fragment,f),E(E4.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(w4.$$.fragment,f),E(hy.$$.fragment,f),E(gv.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(pv.$$.fragment,f),E(vy.$$.fragment,f),E(bv.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(Fv.$$.fragment,f),E(Cy.$$.fragment,f),E(Pv.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(Iv.$$.fragment,f),E(xy.$$.fragment,f),E(jv.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(Gv.$$.fragment,f),E(Py.$$.fragment,f),E(Kv.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(eF.$$.fragment,f),E(jy.$$.fragment,f),E(lF.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(dF.$$.fragment,f),E(Xy.$$.fragment,f),E(TF.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(EF.$$.fragment,f),E(Uy.$$.fragment,f),E(LF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(xF.$$.fragment,f),E(o8.$$.fragment,f),E(IF.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(qF.$$.fragment,f),E(s8.$$.fragment,f),E(VF.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(zF.$$.fragment,f),E(f8.$$.fragment,f),E(UF.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(YF.$$.fragment,f),E(u8.$$.fragment,f),E(eT.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(rT.$$.fragment,f),E(M8.$$.fragment,f),E(iT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(cT.$$.fragment,f),E(L8.$$.fragment,f),E(gT.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(pT.$$.fragment,f),E(S8.$$.fragment,f),E(d7.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(f7.$$.fragment,f),E(N8.$$.fragment,f),E(B7.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(N7.$$.fragment,f),E(O8.$$.fragment,f),E(Y7.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(Z7.$$.fragment,f),E(Q8.$$.fragment,f),E(nM.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(lM.$$.fragment,f),E(K8.$$.fragment,f),E(yM.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E($M.$$.fragment,f),E(t9.$$.fragment,f),E(GM.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(VM.$$.fragment,f),E(i9.$$.fragment,f),E(_E.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(bE.$$.fragment,f),E(g9.$$.fragment,f),E(IE.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(qE.$$.fragment,f),E(b9.$$.fragment,f),E(GE.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(VE.$$.fragment,f),E(C9.$$.fragment,f),E(zE.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(QE.$$.fragment,f),E(x9.$$.fragment,f),E(hC.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(_C.$$.fragment,f),E(P9.$$.fragment,f),E(NC.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(jC.$$.fragment,f),E(j9.$$.fragment,f),E(GC.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(VC.$$.fragment,f),E(X9.$$.fragment,f),E(zC.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(QC.$$.fragment,f),E(U9.$$.fragment,f),E(F3.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(M3.$$.fragment,f),E(ex.$$.fragment,f),E(R3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(B3.$$.fragment,f),E(nx.$$.fragment,f),E(H3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(J3.$$.fragment,f),E(cx.$$.fragment,f),E(l0.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(d0.$$.fragment,f),E(px.$$.fragment,f),E(v0.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(T0.$$.fragment,f),E(Fx.$$.fragment,f),E(S0.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(P0.$$.fragment,f),E(wx.$$.fragment,f),E(z0.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(Q0.$$.fragment,f),E($x.$$.fragment,f),E(rw.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(aw.$$.fragment,f),E(Bx.$$.fragment,f),E(gw.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(pw.$$.fragment,f),E(Dx.$$.fragment,f),E(uw.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(vw.$$.fragment,f),E(zx.$$.fragment,f),E(Mw.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(Cw.$$.fragment,f),E(Yx.$$.fragment,f),E(Aw.$$.fragment,f),yGe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(Q6.$$.fragment,f),C(H6.$$.fragment,f),C(Mf.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(Z6.$$.fragment,f),C(yg.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(nL.$$.fragment,f),C(ch.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(Xh.$$.fragment,f),C(zh.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(fp.$$.fragment,f),C(mp.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(pp.$$.fragment,f),C(EL.$$.fragment,f),C(gu.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(pu.$$.fragment,f),C(yL.$$.fragment,f),C(s5.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(i5.$$.fragment,f),C(RL.$$.fragment,f),C(H5.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(J5.$$.fragment,f),C(qL.$$.fragment,f),C(P1.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(I1.$$.fragment,f),C(VL.$$.fragment,f),C(eb.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(rb.$$.fragment,f),C(HL.$$.fragment,f),C(Yb.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(Zb.$$.fragment,f),C(ZL.$$.fragment,f),C($2.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(S2.$$.fragment,f),C(ay.$$.fragment,f),C(j2.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(G2.$$.fragment,f),C(dy.$$.fragment,f),C(E4.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(w4.$$.fragment,f),C(hy.$$.fragment,f),C(gv.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(pv.$$.fragment,f),C(vy.$$.fragment,f),C(bv.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(Fv.$$.fragment,f),C(Cy.$$.fragment,f),C(Pv.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(Iv.$$.fragment,f),C(xy.$$.fragment,f),C(jv.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(Gv.$$.fragment,f),C(Py.$$.fragment,f),C(Kv.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(eF.$$.fragment,f),C(jy.$$.fragment,f),C(lF.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(dF.$$.fragment,f),C(Xy.$$.fragment,f),C(TF.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(EF.$$.fragment,f),C(Uy.$$.fragment,f),C(LF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(xF.$$.fragment,f),C(o8.$$.fragment,f),C(IF.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(qF.$$.fragment,f),C(s8.$$.fragment,f),C(VF.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(zF.$$.fragment,f),C(f8.$$.fragment,f),C(UF.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(YF.$$.fragment,f),C(u8.$$.fragment,f),C(eT.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(rT.$$.fragment,f),C(M8.$$.fragment,f),C(iT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(cT.$$.fragment,f),C(L8.$$.fragment,f),C(gT.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(pT.$$.fragment,f),C(S8.$$.fragment,f),C(d7.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(f7.$$.fragment,f),C(N8.$$.fragment,f),C(B7.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(N7.$$.fragment,f),C(O8.$$.fragment,f),C(Y7.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(Z7.$$.fragment,f),C(Q8.$$.fragment,f),C(nM.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(lM.$$.fragment,f),C(K8.$$.fragment,f),C(yM.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C($M.$$.fragment,f),C(t9.$$.fragment,f),C(GM.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(VM.$$.fragment,f),C(i9.$$.fragment,f),C(_E.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(bE.$$.fragment,f),C(g9.$$.fragment,f),C(IE.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(qE.$$.fragment,f),C(b9.$$.fragment,f),C(GE.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(VE.$$.fragment,f),C(C9.$$.fragment,f),C(zE.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(QE.$$.fragment,f),C(x9.$$.fragment,f),C(hC.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(_C.$$.fragment,f),C(P9.$$.fragment,f),C(NC.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(jC.$$.fragment,f),C(j9.$$.fragment,f),C(GC.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(VC.$$.fragment,f),C(X9.$$.fragment,f),C(zC.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(QC.$$.fragment,f),C(U9.$$.fragment,f),C(F3.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(M3.$$.fragment,f),C(ex.$$.fragment,f),C(R3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(B3.$$.fragment,f),C(nx.$$.fragment,f),C(H3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(J3.$$.fragment,f),C(cx.$$.fragment,f),C(l0.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(d0.$$.fragment,f),C(px.$$.fragment,f),C(v0.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(T0.$$.fragment,f),C(Fx.$$.fragment,f),C(S0.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(P0.$$.fragment,f),C(wx.$$.fragment,f),C(z0.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(Q0.$$.fragment,f),C($x.$$.fragment,f),C(rw.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(aw.$$.fragment,f),C(Bx.$$.fragment,f),C(gw.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(pw.$$.fragment,f),C(Dx.$$.fragment,f),C(uw.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(vw.$$.fragment,f),C(zx.$$.fragment,f),C(Mw.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(Cw.$$.fragment,f),C(Yx.$$.fragment,f),C(Aw.$$.fragment,f),yGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(tt),f&&t(Ge),f&&t(We),f&&t(vf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(wje),f&&t(Fi),w(Q6),f&&t(Aje),f&&t(kn),f&&t(Lje),w(H6,f),f&&t(yje),f&&t(uk),f&&t(xje),w(Mf,f),f&&t($je),f&&t(Ti),w(U6),f&&t(kje),f&&t(Co),w(J6),w(Z6),w(yg),w(eL),f&&t(Sje),f&&t(Ei),w(oL),f&&t(Rje),f&&t(wo),w(rL),w(nL),w(ch),w(sL),f&&t(Pje),f&&t(Ci),w(lL),f&&t(Bje),f&&t(Ao),w(iL),w(fL),w(Xh),w(zh),w(mL),f&&t(Ije),f&&t(wi),w(gL),f&&t(Nje),f&&t(Lo),w(hL),w(uL),w(fp),w(mp),w(bL),f&&t(qje),f&&t(Li),w(vL),f&&t(jje),f&&t(yo),w(FL),w(ML),w(pp),w(EL),w(gu),f&&t(Dje),f&&t($i),w(CL),f&&t(Gje),f&&t(xo),w(wL),w(LL),w(pu),w(yL),w(s5),f&&t(Oje),f&&t(Ri),w(xL),f&&t(Vje),f&&t($o),w($L),w(SL),w(i5),w(RL),w(H5),f&&t(Xje),f&&t(Ii),w(PL),f&&t(zje),f&&t(ko),w(BL),w(NL),w(J5),w(qL),w(P1),f&&t(Wje),f&&t(ji),w(jL),f&&t(Qje),f&&t(So),w(DL),w(OL),w(I1),w(VL),w(eb),f&&t(Hje),f&&t(Oi),w(XL),f&&t(Uje),f&&t(Ro),w(zL),w(QL),w(rb),w(HL),w(Yb),f&&t(Jje),f&&t(zi),w(UL),f&&t(Yje),f&&t(Po),w(JL),w(KL),w(Zb),w(ZL),w($2),f&&t(Kje),f&&t(Hi),w(ey),f&&t(Zje),f&&t(Bo),w(oy),w(ty),w(S2),w(ay),w(j2),f&&t(eDe),f&&t(Yi),w(ny),f&&t(oDe),f&&t(Io),w(sy),w(iy),w(G2),w(dy),w(E4),f&&t(rDe),f&&t(ed),w(cy),f&&t(tDe),f&&t(No),w(fy),w(gy),w(w4),w(hy),w(gv),f&&t(aDe),f&&t(td),w(py),f&&t(nDe),f&&t(qo),w(_y),w(by),w(pv),w(vy),w(bv),f&&t(sDe),f&&t(sd),w(Fy),f&&t(lDe),f&&t(jo),w(Ty),w(Ey),w(Fv),w(Cy),w(Pv),f&&t(iDe),f&&t(dd),w(wy),f&&t(dDe),f&&t(Do),w(Ay),w(yy),w(Iv),w(xy),w(jv),f&&t(cDe),f&&t(md),w($y),f&&t(fDe),f&&t(Go),w(ky),w(Ry),w(Gv),w(Py),w(Kv),f&&t(mDe),f&&t(pd),w(By),f&&t(gDe),f&&t(Oo),w(Iy),w(qy),w(eF),w(jy),w(lF),f&&t(hDe),f&&t(bd),w(Dy),f&&t(pDe),f&&t(Vo),w(Gy),w(Vy),w(dF),w(Xy),w(TF),f&&t(_De),f&&t(Td),w(zy),f&&t(uDe),f&&t(Xo),w(Wy),w(Hy),w(EF),w(Uy),w(LF),f&&t(bDe),f&&t(Cd),w(Yy),f&&t(vDe),f&&t(zo),w(Ky),w(e8),w(xF),w(o8),w(IF),f&&t(FDe),f&&t(Ld),w(r8),f&&t(TDe),f&&t(Wo),w(t8),w(n8),w(qF),w(s8),w(VF),f&&t(MDe),f&&t(kd),w(l8),f&&t(EDe),f&&t(Qo),w(i8),w(c8),w(zF),w(f8),w(UF),f&&t(CDe),f&&t(Pd),w(g8),f&&t(wDe),f&&t(Ho),w(h8),w(_8),w(YF),w(u8),w(eT),f&&t(ADe),f&&t(Nd),w(b8),f&&t(LDe),f&&t(Uo),w(v8),w(T8),w(rT),w(M8),w(iT),f&&t(yDe),f&&t(Dd),w(E8),f&&t(xDe),f&&t(Jo),w(C8),w(A8),w(cT),w(L8),w(gT),f&&t($De),f&&t(Vd),w(y8),f&&t(kDe),f&&t(Yo),w(x8),w(k8),w(pT),w(S8),w(d7),f&&t(SDe),f&&t(Wd),w(R8),f&&t(RDe),f&&t(Ko),w(P8),w(I8),w(f7),w(N8),w(B7),f&&t(PDe),f&&t(Ud),w(q8),f&&t(BDe),f&&t(Zo),w(j8),w(G8),w(N7),w(O8),w(Y7),f&&t(IDe),f&&t(Kd),w(V8),f&&t(NDe),f&&t(er),w(X8),w(W8),w(Z7),w(Q8),w(nM),f&&t(qDe),f&&t(oc),w(H8),f&&t(jDe),f&&t(or),w(U8),w(Y8),w(lM),w(K8),w(yM),f&&t(DDe),f&&t(ac),w(Z8),f&&t(GDe),f&&t(rr),w(e9),w(r9),w($M),w(t9),w(GM),f&&t(ODe),f&&t(lc),w(a9),f&&t(VDe),f&&t(tr),w(n9),w(l9),w(VM),w(i9),w(_E),f&&t(XDe),f&&t(cc),w(d9),f&&t(zDe),f&&t(ar),w(c9),w(m9),w(bE),w(g9),w(IE),f&&t(WDe),f&&t(gc),w(h9),f&&t(QDe),f&&t(nr),w(p9),w(u9),w(qE),w(b9),w(GE),f&&t(HDe),f&&t(_c),w(F9),f&&t(UDe),f&&t(sr),w(T9),w(E9),w(VE),w(C9),w(zE),f&&t(JDe),f&&t(vc),w(w9),f&&t(YDe),f&&t(lr),w(A9),w(y9),w(QE),w(x9),w(hC),f&&t(KDe),f&&t(Mc),w($9),f&&t(ZDe),f&&t(ir),w(k9),w(R9),w(_C),w(P9),w(NC),f&&t(eGe),f&&t(wc),w(B9),f&&t(oGe),f&&t(dr),w(I9),w(q9),w(jC),w(j9),w(GC),f&&t(rGe),f&&t(yc),w(D9),f&&t(tGe),f&&t(cr),w(G9),w(V9),w(VC),w(X9),w(zC),f&&t(aGe),f&&t(kc),w(z9),f&&t(nGe),f&&t(fr),w(W9),w(H9),w(QC),w(U9),w(F3),f&&t(sGe),f&&t(Pc),w(J9),f&&t(lGe),f&&t(mr),w(Y9),w(Z9),w(M3),w(ex),w(R3),f&&t(iGe),f&&t(Nc),w(ox),f&&t(dGe),f&&t(gr),w(rx),w(ax),w(B3),w(nx),w(H3),f&&t(cGe),f&&t(Dc),w(sx),f&&t(fGe),f&&t(hr),w(lx),w(dx),w(J3),w(cx),w(l0),f&&t(mGe),f&&t(Vc),w(fx),f&&t(gGe),f&&t(pr),w(mx),w(hx),w(d0),w(px),w(v0),f&&t(hGe),f&&t(Wc),w(_x),f&&t(pGe),f&&t(_r),w(ux),w(vx),w(T0),w(Fx),w(S0),f&&t(_Ge),f&&t(Uc),w(Tx),f&&t(uGe),f&&t(ur),w(Mx),w(Cx),w(P0),w(wx),w(z0),f&&t(bGe),f&&t(Kc),w(Ax),f&&t(vGe),f&&t(br),w(Lx),w(xx),w(Q0),w($x),w(rw),f&&t(FGe),f&&t(of),w(kx),f&&t(TGe),f&&t(vr),w(Sx),w(Px),w(aw),w(Bx),w(gw),f&&t(MGe),f&&t(af),w(Ix),f&&t(EGe),f&&t(Fr),w(Nx),w(jx),w(pw),w(Dx),w(uw),f&&t(CGe),f&&t(lf),w(Gx),f&&t(wGe),f&&t(Tr),w(Ox),w(Xx),w(vw),w(zx),w(Mw),f&&t(AGe),f&&t(ff),w(Qx),f&&t(LGe),f&&t(Mr),w(Hx),w(Jx),w(Cw),w(Yx),w(Aw)}}}const uIt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function bIt(x){return bPt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wIt extends hPt{constructor(g){super();pPt(this,g,bIt,_It,_Pt,{})}}export{wIt as default,uIt as metadata};
