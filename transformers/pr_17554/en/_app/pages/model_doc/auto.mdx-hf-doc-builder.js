import{S as DOt,i as GOt,s as OOt,e as a,k as l,w as F,t as o,M as VOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as XOt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as UZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function zOt($){let g,v,p,m,_,d,h,Eo,Ci,kf,nt,wi,Ai,IL,Sf,Oe,Qe,Li,Rn,NL,Pn,Bn,qL,yi,In,jL,xi,Rf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ci=a("code"),kf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),wi=a("code"),Ai=o('"new-model"'),IL=o(")."),Sf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Li=a("code"),Rn=o("NewModel"),NL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),qL=o(`, make sure its
`),yi=a("code"),In=o("config_class"),jL=o(` attribute is set to the same class you use when registering the model (here
`),xi=a("code"),Rf=o("NewModelConfig"),$a=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var pS=s(p);m=r(pS,"NewModelConfig"),pS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var $i=s(d);h=r($i,"PretrainedConfig"),$i.forEach(t),Eo=r(Ae,`, make sure its
`),Ci=n(Ae,"CODE",{});var _S=s(Ci);kf=r(_S,"model_type"),_S.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),wi=n(Ae,"CODE",{});var uS=s(wi);Ai=r(uS,'"new-model"'),uS.forEach(t),IL=r(Ae,")."),Ae.forEach(t),Sf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Li=n(Co,"CODE",{});var ka=s(Li);Rn=r(ka,"NewModel"),ka.forEach(t),NL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var bS=s(Pn);Bn=r(bS,"PreTrainedModel"),bS.forEach(t),qL=r(Co,`, make sure its
`),yi=n(Co,"CODE",{});var Pf=s(yi);In=r(Pf,"config_class"),Pf.forEach(t),jL=r(Co,` attribute is set to the same class you use when registering the model (here
`),xi=n(Co,"CODE",{});var vS=s(xi);Rf=r(vS,"NewModelConfig"),vS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ci),e(Ci,kf),e(g,nt),e(g,wi),e(wi,Ai),e(g,IL),b(We,Sf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Li),e(Li,Rn),e(Oe,NL),e(Oe,Pn),e(Pn,Bn),e(Oe,qL),e(Oe,yi),e(yi,In),e(Oe,jL),e(Oe,xi),e(xi,Rf),e(Oe,$a)},d(We){We&&t(g),We&&t(Sf),We&&t(Oe)}}}function QOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function UOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function YOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XXt($){let g,v,p,m,_,d,h,Eo,Ci,kf,nt,wi,Ai,IL,Sf,Oe,Qe,Li,Rn,NL,Pn,Bn,qL,yi,In,jL,xi,Rf,$a,We,Ae,pS,$i,_S,uS,Co,ka,bS,Pf,vS,QQe,kOe,ki,Bf,qte,DL,WQe,jte,HQe,SOe,Nn,UQe,Dte,JQe,YQe,Gte,KQe,ZQe,ROe,GL,POe,FS,eWe,BOe,If,IOe,Si,Nf,Ote,OL,oWe,Vte,rWe,NOe,wo,VL,tWe,XL,aWe,TS,nWe,sWe,lWe,zL,iWe,Xte,dWe,cWe,fWe,Ar,QL,mWe,zte,gWe,hWe,Ri,pWe,Qte,_We,uWe,Wte,bWe,vWe,FWe,A,qf,Hte,TWe,MWe,MS,EWe,CWe,wWe,jf,Ute,AWe,LWe,ES,yWe,xWe,$We,Df,Jte,kWe,SWe,CS,RWe,PWe,BWe,Gf,Yte,IWe,NWe,wS,qWe,jWe,DWe,Of,Kte,GWe,OWe,AS,VWe,XWe,zWe,Vf,Zte,QWe,WWe,LS,HWe,UWe,JWe,Xf,eae,YWe,KWe,yS,ZWe,eHe,oHe,zf,oae,rHe,tHe,xS,aHe,nHe,sHe,Qf,rae,lHe,iHe,$S,dHe,cHe,fHe,Wf,tae,mHe,gHe,kS,hHe,pHe,_He,Hf,aae,uHe,bHe,SS,vHe,FHe,THe,Uf,nae,MHe,EHe,RS,CHe,wHe,AHe,Jf,sae,LHe,yHe,PS,xHe,$He,kHe,Yf,lae,SHe,RHe,BS,PHe,BHe,IHe,Kf,iae,NHe,qHe,IS,jHe,DHe,GHe,Zf,dae,OHe,VHe,NS,XHe,zHe,QHe,em,cae,WHe,HHe,qS,UHe,JHe,YHe,om,fae,KHe,ZHe,jS,eUe,oUe,rUe,rm,mae,tUe,aUe,DS,nUe,sUe,lUe,tm,gae,iUe,dUe,GS,cUe,fUe,mUe,am,hae,gUe,hUe,OS,pUe,_Ue,uUe,nm,pae,bUe,vUe,VS,FUe,TUe,MUe,sm,_ae,EUe,CUe,XS,wUe,AUe,LUe,lm,uae,yUe,xUe,zS,$Ue,kUe,SUe,im,bae,RUe,PUe,QS,BUe,IUe,NUe,dm,vae,qUe,jUe,WS,DUe,GUe,OUe,cm,Fae,VUe,XUe,HS,zUe,QUe,WUe,fm,Tae,HUe,UUe,US,JUe,YUe,KUe,mm,Mae,ZUe,eJe,JS,oJe,rJe,tJe,gm,Eae,aJe,nJe,YS,sJe,lJe,iJe,hm,Cae,dJe,cJe,KS,fJe,mJe,gJe,pm,wae,hJe,pJe,ZS,_Je,uJe,bJe,_m,Aae,vJe,FJe,eR,TJe,MJe,EJe,um,Lae,CJe,wJe,oR,AJe,LJe,yJe,bm,yae,xJe,$Je,rR,kJe,SJe,RJe,vm,xae,PJe,BJe,tR,IJe,NJe,qJe,Fm,$ae,jJe,DJe,aR,GJe,OJe,VJe,Tm,kae,XJe,zJe,nR,QJe,WJe,HJe,Mm,Sae,UJe,JJe,sR,YJe,KJe,ZJe,Em,Rae,eYe,oYe,lR,rYe,tYe,aYe,Cm,Pae,nYe,sYe,iR,lYe,iYe,dYe,wm,Bae,cYe,fYe,dR,mYe,gYe,hYe,Am,Iae,pYe,_Ye,cR,uYe,bYe,vYe,Lm,Nae,FYe,TYe,fR,MYe,EYe,CYe,ym,qae,wYe,AYe,mR,LYe,yYe,xYe,xm,jae,$Ye,kYe,gR,SYe,RYe,PYe,$m,Dae,BYe,IYe,hR,NYe,qYe,jYe,km,Gae,DYe,GYe,pR,OYe,VYe,XYe,Sm,Oae,zYe,QYe,_R,WYe,HYe,UYe,Rm,Vae,JYe,YYe,uR,KYe,ZYe,eKe,Pm,Xae,oKe,rKe,bR,tKe,aKe,nKe,Bm,zae,sKe,lKe,vR,iKe,dKe,cKe,Im,Qae,fKe,mKe,FR,gKe,hKe,pKe,Nm,Wae,_Ke,uKe,TR,bKe,vKe,FKe,qm,Hae,TKe,MKe,MR,EKe,CKe,wKe,jm,Uae,AKe,LKe,ER,yKe,xKe,$Ke,Dm,Jae,kKe,SKe,CR,RKe,PKe,BKe,Gm,Yae,IKe,NKe,wR,qKe,jKe,DKe,Om,Kae,GKe,OKe,AR,VKe,XKe,zKe,Vm,Zae,QKe,WKe,LR,HKe,UKe,JKe,Xm,ene,YKe,KKe,yR,ZKe,eZe,oZe,zm,one,rZe,tZe,xR,aZe,nZe,sZe,Qm,rne,lZe,iZe,$R,dZe,cZe,fZe,Wm,tne,mZe,gZe,kR,hZe,pZe,_Ze,Hm,ane,uZe,bZe,SR,vZe,FZe,TZe,Um,nne,MZe,EZe,RR,CZe,wZe,AZe,Jm,sne,LZe,yZe,PR,xZe,$Ze,kZe,Ym,lne,SZe,RZe,BR,PZe,BZe,IZe,Km,ine,NZe,qZe,IR,jZe,DZe,GZe,Zm,dne,OZe,VZe,NR,XZe,zZe,QZe,eg,cne,WZe,HZe,qR,UZe,JZe,YZe,og,fne,KZe,ZZe,jR,eeo,oeo,reo,rg,mne,teo,aeo,DR,neo,seo,leo,tg,gne,ieo,deo,GR,ceo,feo,meo,ag,hne,geo,heo,OR,peo,_eo,ueo,ng,pne,beo,veo,VR,Feo,Teo,Meo,sg,_ne,Eeo,Ceo,XR,weo,Aeo,Leo,lg,une,yeo,xeo,zR,$eo,keo,Seo,ig,bne,Reo,Peo,QR,Beo,Ieo,Neo,dg,vne,qeo,jeo,WR,Deo,Geo,Oeo,cg,Fne,Veo,Xeo,HR,zeo,Qeo,Weo,fg,Tne,Heo,Ueo,UR,Jeo,Yeo,Keo,mg,Mne,Zeo,eoo,JR,ooo,roo,too,gg,Ene,aoo,noo,YR,soo,loo,ioo,hg,Cne,doo,coo,KR,foo,moo,goo,pg,wne,hoo,poo,ZR,_oo,uoo,boo,_g,Ane,voo,Foo,eP,Too,Moo,Eoo,ug,Lne,Coo,woo,oP,Aoo,Loo,yoo,bg,yne,xoo,$oo,rP,koo,Soo,Roo,vg,xne,Poo,Boo,tP,Ioo,Noo,qoo,Fg,$ne,joo,Doo,aP,Goo,Ooo,Voo,Tg,kne,Xoo,zoo,nP,Qoo,Woo,Hoo,Mg,Sne,Uoo,Joo,sP,Yoo,Koo,Zoo,Eg,Rne,ero,oro,lP,rro,tro,aro,Cg,Pne,nro,sro,iP,lro,iro,dro,wg,Bne,cro,fro,dP,mro,gro,hro,Ag,Ine,pro,_ro,cP,uro,bro,vro,Lg,Nne,Fro,Tro,fP,Mro,Ero,Cro,yg,qne,wro,Aro,mP,Lro,yro,xro,xg,jne,$ro,kro,gP,Sro,Rro,Pro,$g,Dne,Bro,Iro,hP,Nro,qro,jro,kg,Gne,Dro,Gro,pP,Oro,Vro,Xro,Sg,One,zro,Qro,_P,Wro,Hro,Uro,Rg,Vne,Jro,Yro,uP,Kro,Zro,eto,Pg,Xne,oto,rto,bP,tto,ato,nto,Bg,zne,sto,lto,vP,ito,dto,cto,Ig,Qne,fto,mto,FP,gto,hto,pto,Ng,Wne,_to,uto,TP,bto,vto,Fto,qg,Hne,Tto,Mto,MP,Eto,Cto,wto,jg,Une,Ato,Lto,EP,yto,xto,$to,Dg,Jne,kto,Sto,CP,Rto,Pto,Bto,Gg,Yne,Ito,Nto,wP,qto,jto,Dto,Og,Kne,Gto,Oto,AP,Vto,Xto,zto,Vg,Zne,Qto,Wto,LP,Hto,Uto,Jto,Xg,ese,Yto,Kto,yP,Zto,eao,oao,zg,ose,rao,tao,xP,aao,nao,sao,Qg,lao,Wg,WL,iao,rse,dao,qOe,Pi,Hg,tse,HL,cao,ase,fao,jOe,Ao,UL,mao,JL,gao,$P,hao,pao,_ao,YL,uao,nse,bao,vao,Fao,Lr,KL,Tao,sse,Mao,Eao,Sa,Cao,lse,wao,Aao,ise,Lao,yao,dse,xao,$ao,kao,k,qn,cse,Sao,Rao,kP,Pao,Bao,SP,Iao,Nao,qao,jn,fse,jao,Dao,RP,Gao,Oao,PP,Vao,Xao,zao,Dn,mse,Qao,Wao,BP,Hao,Uao,IP,Jao,Yao,Kao,Ug,gse,Zao,eno,NP,ono,rno,tno,Gn,hse,ano,nno,qP,sno,lno,jP,ino,dno,cno,Jg,pse,fno,mno,DP,gno,hno,pno,Yg,_se,_no,uno,GP,bno,vno,Fno,Kg,use,Tno,Mno,OP,Eno,Cno,wno,On,bse,Ano,Lno,VP,yno,xno,XP,$no,kno,Sno,Vn,vse,Rno,Pno,zP,Bno,Ino,QP,Nno,qno,jno,Xn,Fse,Dno,Gno,WP,Ono,Vno,HP,Xno,zno,Qno,Zg,Tse,Wno,Hno,UP,Uno,Jno,Yno,eh,Mse,Kno,Zno,JP,eso,oso,rso,oh,Ese,tso,aso,YP,nso,sso,lso,zn,Cse,iso,dso,KP,cso,fso,ZP,mso,gso,hso,rh,wse,pso,_so,eB,uso,bso,vso,Qn,Ase,Fso,Tso,oB,Mso,Eso,rB,Cso,wso,Aso,Wn,Lse,Lso,yso,tB,xso,$so,aB,kso,Sso,Rso,Hn,yse,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,Un,xse,Gso,Oso,lB,Vso,Xso,iB,zso,Qso,Wso,th,$se,Hso,Uso,dB,Jso,Yso,Kso,Jn,kse,Zso,elo,cB,olo,rlo,fB,tlo,alo,nlo,Yn,Sse,slo,llo,mB,ilo,dlo,gB,clo,flo,mlo,Kn,Rse,glo,hlo,hB,plo,_lo,pB,ulo,blo,vlo,Zn,Pse,Flo,Tlo,_B,Mlo,Elo,uB,Clo,wlo,Alo,es,Bse,Llo,ylo,bB,xlo,$lo,vB,klo,Slo,Rlo,os,Ise,Plo,Blo,FB,Ilo,Nlo,TB,qlo,jlo,Dlo,ah,Nse,Glo,Olo,MB,Vlo,Xlo,zlo,rs,qse,Qlo,Wlo,EB,Hlo,Ulo,CB,Jlo,Ylo,Klo,nh,jse,Zlo,eio,wB,oio,rio,tio,ts,Dse,aio,nio,AB,sio,lio,LB,iio,dio,cio,as,Gse,fio,mio,yB,gio,hio,xB,pio,_io,uio,ns,Ose,bio,vio,$B,Fio,Tio,kB,Mio,Eio,Cio,sh,Vse,wio,Aio,SB,Lio,yio,xio,ss,Xse,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Iio,ls,zse,Nio,qio,BB,jio,Dio,IB,Gio,Oio,Vio,is,Qse,Xio,zio,NB,Qio,Wio,qB,Hio,Uio,Jio,lh,Wse,Yio,Kio,jB,Zio,edo,odo,ds,Hse,rdo,tdo,DB,ado,ndo,GB,sdo,ldo,ido,cs,Use,ddo,cdo,OB,fdo,mdo,VB,gdo,hdo,pdo,fs,Jse,_do,udo,XB,bdo,vdo,zB,Fdo,Tdo,Mdo,ms,Yse,Edo,Cdo,QB,wdo,Ado,WB,Ldo,ydo,xdo,gs,Kse,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,hs,Zse,Ndo,qdo,JB,jdo,Ddo,YB,Gdo,Odo,Vdo,ps,ele,Xdo,zdo,KB,Qdo,Wdo,ZB,Hdo,Udo,Jdo,_s,ole,Ydo,Kdo,eI,Zdo,eco,oI,oco,rco,tco,ih,rle,aco,nco,rI,sco,lco,ico,us,tle,dco,cco,tI,fco,mco,aI,gco,hco,pco,dh,ale,_co,uco,nI,bco,vco,Fco,ch,nle,Tco,Mco,sI,Eco,Cco,wco,bs,sle,Aco,Lco,lI,yco,xco,iI,$co,kco,Sco,vs,lle,Rco,Pco,dI,Bco,Ico,cI,Nco,qco,jco,Fs,ile,Dco,Gco,fI,Oco,Vco,mI,Xco,zco,Qco,fh,dle,Wco,Hco,gI,Uco,Jco,Yco,Ts,cle,Kco,Zco,hI,efo,ofo,pI,rfo,tfo,afo,Ms,fle,nfo,sfo,_I,lfo,ifo,uI,dfo,cfo,ffo,Es,mle,mfo,gfo,bI,hfo,pfo,vI,_fo,ufo,bfo,Cs,gle,vfo,Ffo,FI,Tfo,Mfo,TI,Efo,Cfo,wfo,ws,hle,Afo,Lfo,MI,yfo,xfo,EI,$fo,kfo,Sfo,As,ple,Rfo,Pfo,CI,Bfo,Ifo,wI,Nfo,qfo,jfo,mh,_le,Dfo,Gfo,AI,Ofo,Vfo,Xfo,Ls,ule,zfo,Qfo,LI,Wfo,Hfo,yI,Ufo,Jfo,Yfo,gh,ble,Kfo,Zfo,xI,emo,omo,rmo,hh,vle,tmo,amo,$I,nmo,smo,lmo,ph,Fle,imo,dmo,kI,cmo,fmo,mmo,_h,Tle,gmo,hmo,SI,pmo,_mo,umo,ys,Mle,bmo,vmo,RI,Fmo,Tmo,PI,Mmo,Emo,Cmo,uh,Ele,wmo,Amo,BI,Lmo,ymo,xmo,xs,Cle,$mo,kmo,II,Smo,Rmo,NI,Pmo,Bmo,Imo,$s,wle,Nmo,qmo,qI,jmo,Dmo,jI,Gmo,Omo,Vmo,ks,Ale,Xmo,zmo,DI,Qmo,Wmo,GI,Hmo,Umo,Jmo,Ss,Lle,Ymo,Kmo,OI,Zmo,ego,VI,ogo,rgo,tgo,Rs,yle,ago,ngo,XI,sgo,lgo,zI,igo,dgo,cgo,Ps,xle,fgo,mgo,QI,ggo,hgo,WI,pgo,_go,ugo,bh,$le,bgo,vgo,HI,Fgo,Tgo,Mgo,vh,kle,Ego,Cgo,UI,wgo,Ago,Lgo,Bs,Sle,ygo,xgo,JI,$go,kgo,YI,Sgo,Rgo,Pgo,Is,Rle,Bgo,Igo,KI,Ngo,qgo,ZI,jgo,Dgo,Ggo,Ns,Ple,Ogo,Vgo,eN,Xgo,zgo,oN,Qgo,Wgo,Hgo,Fh,Ble,Ugo,Jgo,rN,Ygo,Kgo,Zgo,Th,Ile,eho,oho,tN,rho,tho,aho,Mh,Nle,nho,sho,aN,lho,iho,dho,qs,qle,cho,fho,nN,mho,gho,sN,hho,pho,_ho,js,jle,uho,bho,lN,vho,Fho,iN,Tho,Mho,Eho,Eh,Dle,Cho,who,dN,Aho,Lho,yho,Ch,Gle,xho,$ho,cN,kho,Sho,Rho,wh,Ole,Pho,Bho,fN,Iho,Nho,qho,Ds,Vle,jho,Dho,mN,Gho,Oho,gN,Vho,Xho,zho,Ah,Xle,Qho,Who,hN,Hho,Uho,Jho,Lh,zle,Yho,Kho,pN,Zho,epo,opo,Gs,Qle,rpo,tpo,_N,apo,npo,uN,spo,lpo,ipo,Os,Wle,dpo,cpo,bN,fpo,mpo,vN,gpo,hpo,ppo,Vs,Hle,_po,upo,FN,bpo,vpo,TN,Fpo,Tpo,Mpo,Xs,Ule,Epo,Cpo,MN,wpo,Apo,EN,Lpo,ypo,xpo,yh,$po,xh,ZL,kpo,Jle,Spo,DOe,Bi,$h,Yle,ey,Rpo,Kle,Ppo,GOe,Lo,oy,Bpo,ry,Ipo,CN,Npo,qpo,jpo,ty,Dpo,Zle,Gpo,Opo,Vpo,He,ay,Xpo,eie,zpo,Qpo,Ra,Wpo,oie,Hpo,Upo,rie,Jpo,Ypo,tie,Kpo,Zpo,e_o,Y,kh,aie,o_o,r_o,wN,t_o,a_o,n_o,Sh,nie,s_o,l_o,AN,i_o,d_o,c_o,Rh,sie,f_o,m_o,LN,g_o,h_o,p_o,Ph,lie,__o,u_o,yN,b_o,v_o,F_o,Bh,iie,T_o,M_o,xN,E_o,C_o,w_o,Ih,die,A_o,L_o,$N,y_o,x_o,$_o,Nh,cie,k_o,S_o,kN,R_o,P_o,B_o,qh,fie,I_o,N_o,SN,q_o,j_o,D_o,jh,mie,G_o,O_o,RN,V_o,X_o,z_o,Dh,gie,Q_o,W_o,PN,H_o,U_o,J_o,Gh,hie,Y_o,K_o,BN,Z_o,euo,ouo,Oh,pie,ruo,tuo,IN,auo,nuo,suo,Vh,_ie,luo,iuo,NN,duo,cuo,fuo,Xh,uie,muo,guo,qN,huo,puo,_uo,zh,bie,uuo,buo,jN,vuo,Fuo,Tuo,Qh,vie,Muo,Euo,DN,Cuo,wuo,Auo,Wh,Fie,Luo,yuo,GN,xuo,$uo,kuo,Hh,Tie,Suo,Ruo,ON,Puo,Buo,Iuo,Uh,Mie,Nuo,quo,VN,juo,Duo,Guo,Jh,Eie,Ouo,Vuo,XN,Xuo,zuo,Quo,Yh,Cie,Wuo,Huo,zN,Uuo,Juo,Yuo,Kh,wie,Kuo,Zuo,QN,e5o,o5o,r5o,Zh,Aie,t5o,a5o,WN,n5o,s5o,l5o,ep,Lie,i5o,d5o,HN,c5o,f5o,m5o,op,yie,g5o,h5o,UN,p5o,_5o,u5o,rp,xie,b5o,v5o,JN,F5o,T5o,M5o,tp,$ie,E5o,C5o,YN,w5o,A5o,L5o,ap,kie,y5o,x5o,KN,$5o,k5o,S5o,np,Sie,R5o,P5o,ZN,B5o,I5o,N5o,sp,Rie,q5o,j5o,eq,D5o,G5o,O5o,lp,Pie,V5o,X5o,oq,z5o,Q5o,W5o,ip,Bie,H5o,U5o,rq,J5o,Y5o,K5o,dp,Iie,Z5o,e1o,tq,o1o,r1o,t1o,cp,a1o,fp,n1o,mp,ny,s1o,Nie,l1o,OOe,Ii,gp,qie,sy,i1o,jie,d1o,VOe,yo,ly,c1o,iy,f1o,aq,m1o,g1o,h1o,dy,p1o,Die,_1o,u1o,b1o,Ue,cy,v1o,Gie,F1o,T1o,Ni,M1o,Oie,E1o,C1o,Vie,w1o,A1o,L1o,he,hp,Xie,y1o,x1o,nq,$1o,k1o,S1o,pp,zie,R1o,P1o,Qie,B1o,I1o,N1o,_p,Wie,q1o,j1o,sq,D1o,G1o,O1o,up,Hie,V1o,X1o,lq,z1o,Q1o,W1o,bp,Uie,H1o,U1o,iq,J1o,Y1o,K1o,vp,Jie,Z1o,e2o,dq,o2o,r2o,t2o,Fp,Yie,a2o,n2o,cq,s2o,l2o,i2o,Tp,Kie,d2o,c2o,fq,f2o,m2o,g2o,Mp,Zie,h2o,p2o,mq,_2o,u2o,b2o,Ep,ede,v2o,F2o,gq,T2o,M2o,E2o,Cp,ode,C2o,w2o,hq,A2o,L2o,y2o,wp,rde,x2o,$2o,pq,k2o,S2o,R2o,Ap,tde,P2o,B2o,_q,I2o,N2o,q2o,Lp,ade,j2o,D2o,uq,G2o,O2o,V2o,yp,nde,X2o,z2o,bq,Q2o,W2o,H2o,xp,sde,U2o,J2o,vq,Y2o,K2o,Z2o,$p,lde,e4o,o4o,Fq,r4o,t4o,a4o,kp,ide,n4o,s4o,Tq,l4o,i4o,d4o,Sp,c4o,Rp,f4o,Pp,fy,m4o,dde,g4o,XOe,qi,Bp,cde,my,h4o,fde,p4o,zOe,xo,gy,_4o,ji,u4o,Mq,b4o,v4o,Eq,F4o,T4o,M4o,hy,E4o,mde,C4o,w4o,A4o,st,py,L4o,gde,y4o,x4o,Di,$4o,hde,k4o,S4o,Cq,R4o,P4o,B4o,Ip,I4o,Je,_y,N4o,pde,q4o,j4o,Pa,D4o,_de,G4o,O4o,ude,V4o,X4o,bde,z4o,Q4o,W4o,y,Np,vde,H4o,U4o,wq,J4o,Y4o,K4o,qp,Fde,Z4o,ebo,Aq,obo,rbo,tbo,jp,Tde,abo,nbo,Lq,sbo,lbo,ibo,Dp,Mde,dbo,cbo,yq,fbo,mbo,gbo,Gp,Ede,hbo,pbo,xq,_bo,ubo,bbo,Op,Cde,vbo,Fbo,$q,Tbo,Mbo,Ebo,Vp,wde,Cbo,wbo,kq,Abo,Lbo,ybo,Xp,Ade,xbo,$bo,Sq,kbo,Sbo,Rbo,zp,Lde,Pbo,Bbo,Rq,Ibo,Nbo,qbo,Qp,yde,jbo,Dbo,Pq,Gbo,Obo,Vbo,Wp,xde,Xbo,zbo,Bq,Qbo,Wbo,Hbo,Hp,$de,Ubo,Jbo,Iq,Ybo,Kbo,Zbo,Up,kde,evo,ovo,Nq,rvo,tvo,avo,Jp,Sde,nvo,svo,qq,lvo,ivo,dvo,Yp,Rde,cvo,fvo,jq,mvo,gvo,hvo,Kp,Pde,pvo,_vo,Dq,uvo,bvo,vvo,Zp,Bde,Fvo,Tvo,Gq,Mvo,Evo,Cvo,e_,Ide,wvo,Avo,Oq,Lvo,yvo,xvo,o_,Nde,$vo,kvo,Vq,Svo,Rvo,Pvo,r_,qde,Bvo,Ivo,Xq,Nvo,qvo,jvo,t_,jde,Dvo,Gvo,zq,Ovo,Vvo,Xvo,a_,Dde,zvo,Qvo,Qq,Wvo,Hvo,Uvo,n_,Gde,Jvo,Yvo,Wq,Kvo,Zvo,eFo,s_,Ode,oFo,rFo,Hq,tFo,aFo,nFo,l_,Vde,sFo,lFo,Uq,iFo,dFo,cFo,i_,Xde,fFo,mFo,Jq,gFo,hFo,pFo,d_,zde,_Fo,uFo,Yq,bFo,vFo,FFo,c_,Qde,TFo,MFo,Kq,EFo,CFo,wFo,f_,Wde,AFo,LFo,Zq,yFo,xFo,$Fo,m_,Hde,kFo,SFo,ej,RFo,PFo,BFo,g_,Ude,IFo,NFo,oj,qFo,jFo,DFo,h_,Jde,GFo,OFo,rj,VFo,XFo,zFo,p_,Yde,QFo,WFo,tj,HFo,UFo,JFo,__,Kde,YFo,KFo,aj,ZFo,eTo,oTo,zs,Zde,rTo,tTo,nj,aTo,nTo,sj,sTo,lTo,iTo,u_,ece,dTo,cTo,lj,fTo,mTo,gTo,b_,oce,hTo,pTo,ij,_To,uTo,bTo,v_,rce,vTo,FTo,dj,TTo,MTo,ETo,F_,tce,CTo,wTo,cj,ATo,LTo,yTo,T_,ace,xTo,$To,fj,kTo,STo,RTo,M_,nce,PTo,BTo,mj,ITo,NTo,qTo,E_,sce,jTo,DTo,gj,GTo,OTo,VTo,C_,lce,XTo,zTo,hj,QTo,WTo,HTo,w_,ice,UTo,JTo,pj,YTo,KTo,ZTo,A_,dce,e7o,o7o,_j,r7o,t7o,a7o,L_,cce,n7o,s7o,uj,l7o,i7o,d7o,y_,fce,c7o,f7o,bj,m7o,g7o,h7o,x_,mce,p7o,_7o,vj,u7o,b7o,v7o,$_,gce,F7o,T7o,Fj,M7o,E7o,C7o,k_,hce,w7o,A7o,Tj,L7o,y7o,x7o,S_,pce,$7o,k7o,Mj,S7o,R7o,P7o,R_,_ce,B7o,I7o,Ej,N7o,q7o,j7o,P_,uce,D7o,G7o,Cj,O7o,V7o,X7o,B_,bce,z7o,Q7o,wj,W7o,H7o,U7o,I_,vce,J7o,Y7o,Aj,K7o,Z7o,eMo,N_,Fce,oMo,rMo,Lj,tMo,aMo,nMo,q_,Tce,sMo,lMo,yj,iMo,dMo,cMo,j_,Mce,fMo,mMo,xj,gMo,hMo,pMo,D_,Ece,_Mo,uMo,$j,bMo,vMo,FMo,G_,Cce,TMo,MMo,kj,EMo,CMo,wMo,O_,wce,AMo,LMo,Sj,yMo,xMo,$Mo,V_,Ace,kMo,SMo,Rj,RMo,PMo,BMo,X_,Lce,IMo,NMo,Pj,qMo,jMo,DMo,z_,yce,GMo,OMo,Bj,VMo,XMo,zMo,Q_,xce,QMo,WMo,Ij,HMo,UMo,JMo,W_,$ce,YMo,KMo,Nj,ZMo,eEo,oEo,H_,kce,rEo,tEo,qj,aEo,nEo,sEo,U_,Sce,lEo,iEo,jj,dEo,cEo,fEo,J_,Rce,mEo,gEo,Dj,hEo,pEo,_Eo,Y_,Pce,uEo,bEo,Gj,vEo,FEo,TEo,K_,Bce,MEo,EEo,Oj,CEo,wEo,AEo,Z_,Ice,LEo,yEo,Vj,xEo,$Eo,kEo,eu,Nce,SEo,REo,Xj,PEo,BEo,IEo,ou,qce,NEo,qEo,zj,jEo,DEo,GEo,ru,jce,OEo,VEo,Qj,XEo,zEo,QEo,tu,Dce,WEo,HEo,Wj,UEo,JEo,YEo,au,Gce,KEo,ZEo,Hj,eCo,oCo,rCo,nu,Oce,tCo,aCo,Uj,nCo,sCo,lCo,su,Vce,iCo,dCo,Jj,cCo,fCo,mCo,lu,Xce,gCo,hCo,Yj,pCo,_Co,uCo,iu,zce,bCo,vCo,Kj,FCo,TCo,MCo,du,Qce,ECo,CCo,Zj,wCo,ACo,LCo,cu,Wce,yCo,xCo,eD,$Co,kCo,SCo,fu,Hce,RCo,PCo,oD,BCo,ICo,NCo,mu,Uce,qCo,jCo,rD,DCo,GCo,OCo,gu,Jce,VCo,XCo,tD,zCo,QCo,WCo,hu,Yce,HCo,UCo,aD,JCo,YCo,KCo,pu,Kce,ZCo,e3o,nD,o3o,r3o,t3o,_u,Zce,a3o,n3o,sD,s3o,l3o,i3o,uu,efe,d3o,c3o,lD,f3o,m3o,g3o,bu,ofe,h3o,p3o,iD,_3o,u3o,b3o,vu,rfe,v3o,F3o,dD,T3o,M3o,E3o,Fu,tfe,C3o,w3o,cD,A3o,L3o,y3o,Tu,afe,x3o,$3o,fD,k3o,S3o,R3o,Mu,nfe,P3o,B3o,mD,I3o,N3o,q3o,Eu,sfe,j3o,D3o,gD,G3o,O3o,V3o,Cu,lfe,X3o,z3o,hD,Q3o,W3o,H3o,wu,ife,U3o,J3o,pD,Y3o,K3o,Z3o,Au,dfe,e0o,o0o,_D,r0o,t0o,a0o,Lu,cfe,n0o,s0o,uD,l0o,i0o,d0o,yu,ffe,c0o,f0o,bD,m0o,g0o,h0o,xu,mfe,p0o,_0o,vD,u0o,b0o,v0o,$u,gfe,F0o,T0o,FD,M0o,E0o,C0o,ku,hfe,w0o,A0o,TD,L0o,y0o,x0o,Su,pfe,$0o,k0o,MD,S0o,R0o,P0o,Ru,_fe,B0o,I0o,ED,N0o,q0o,j0o,Pu,ufe,D0o,G0o,CD,O0o,V0o,X0o,Bu,bfe,z0o,Q0o,wD,W0o,H0o,U0o,Iu,vfe,J0o,Y0o,AD,K0o,Z0o,ewo,Nu,owo,Ffe,rwo,two,Tfe,awo,nwo,qu,QOe,Gi,ju,Mfe,uy,swo,Efe,lwo,WOe,$o,by,iwo,Oi,dwo,LD,cwo,fwo,yD,mwo,gwo,hwo,vy,pwo,Cfe,_wo,uwo,bwo,lt,Fy,vwo,wfe,Fwo,Two,Vi,Mwo,Afe,Ewo,Cwo,xD,wwo,Awo,Lwo,Du,ywo,Ye,Ty,xwo,Lfe,$wo,kwo,Ba,Swo,yfe,Rwo,Pwo,xfe,Bwo,Iwo,$fe,Nwo,qwo,jwo,G,Gu,kfe,Dwo,Gwo,$D,Owo,Vwo,Xwo,Ou,Sfe,zwo,Qwo,kD,Wwo,Hwo,Uwo,Vu,Rfe,Jwo,Ywo,SD,Kwo,Zwo,eAo,Xu,Pfe,oAo,rAo,RD,tAo,aAo,nAo,zu,Bfe,sAo,lAo,PD,iAo,dAo,cAo,Qu,Ife,fAo,mAo,BD,gAo,hAo,pAo,Wu,Nfe,_Ao,uAo,ID,bAo,vAo,FAo,Hu,qfe,TAo,MAo,ND,EAo,CAo,wAo,Uu,jfe,AAo,LAo,qD,yAo,xAo,$Ao,Ju,Dfe,kAo,SAo,jD,RAo,PAo,BAo,Yu,Gfe,IAo,NAo,DD,qAo,jAo,DAo,Ku,Ofe,GAo,OAo,GD,VAo,XAo,zAo,Zu,Vfe,QAo,WAo,OD,HAo,UAo,JAo,e5,Xfe,YAo,KAo,VD,ZAo,e6o,o6o,o5,zfe,r6o,t6o,XD,a6o,n6o,s6o,r5,Qfe,l6o,i6o,zD,d6o,c6o,f6o,t5,Wfe,m6o,g6o,QD,h6o,p6o,_6o,a5,Hfe,u6o,b6o,WD,v6o,F6o,T6o,n5,Ufe,M6o,E6o,HD,C6o,w6o,A6o,s5,Jfe,L6o,y6o,UD,x6o,$6o,k6o,l5,Yfe,S6o,R6o,JD,P6o,B6o,I6o,i5,Kfe,N6o,q6o,YD,j6o,D6o,G6o,d5,Zfe,O6o,V6o,KD,X6o,z6o,Q6o,c5,eme,W6o,H6o,ZD,U6o,J6o,Y6o,f5,ome,K6o,Z6o,eG,eLo,oLo,rLo,m5,rme,tLo,aLo,oG,nLo,sLo,lLo,g5,tme,iLo,dLo,rG,cLo,fLo,mLo,h5,ame,gLo,hLo,tG,pLo,_Lo,uLo,p5,nme,bLo,vLo,aG,FLo,TLo,MLo,_5,sme,ELo,CLo,nG,wLo,ALo,LLo,u5,lme,yLo,xLo,sG,$Lo,kLo,SLo,b5,ime,RLo,PLo,lG,BLo,ILo,NLo,v5,dme,qLo,jLo,iG,DLo,GLo,OLo,F5,cme,VLo,XLo,dG,zLo,QLo,WLo,T5,fme,HLo,ULo,cG,JLo,YLo,KLo,M5,mme,ZLo,eyo,fG,oyo,ryo,tyo,E5,gme,ayo,nyo,mG,syo,lyo,iyo,C5,hme,dyo,cyo,gG,fyo,myo,gyo,w5,pme,hyo,pyo,hG,_yo,uyo,byo,A5,_me,vyo,Fyo,pG,Tyo,Myo,Eyo,L5,ume,Cyo,wyo,_G,Ayo,Lyo,yyo,y5,bme,xyo,$yo,uG,kyo,Syo,Ryo,x5,vme,Pyo,Byo,bG,Iyo,Nyo,qyo,$5,Fme,jyo,Dyo,vG,Gyo,Oyo,Vyo,k5,Xyo,Tme,zyo,Qyo,Mme,Wyo,Hyo,S5,HOe,Xi,R5,Eme,My,Uyo,Cme,Jyo,UOe,ko,Ey,Yyo,zi,Kyo,FG,Zyo,e8o,TG,o8o,r8o,t8o,Cy,a8o,wme,n8o,s8o,l8o,it,wy,i8o,Ame,d8o,c8o,Qi,f8o,Lme,m8o,g8o,MG,h8o,p8o,_8o,P5,u8o,Ke,Ay,b8o,yme,v8o,F8o,Ia,T8o,xme,M8o,E8o,$me,C8o,w8o,kme,A8o,L8o,y8o,z,B5,Sme,x8o,$8o,EG,k8o,S8o,R8o,I5,Rme,P8o,B8o,CG,I8o,N8o,q8o,N5,Pme,j8o,D8o,wG,G8o,O8o,V8o,q5,Bme,X8o,z8o,AG,Q8o,W8o,H8o,j5,Ime,U8o,J8o,LG,Y8o,K8o,Z8o,D5,Nme,e9o,o9o,yG,r9o,t9o,a9o,G5,qme,n9o,s9o,xG,l9o,i9o,d9o,O5,jme,c9o,f9o,$G,m9o,g9o,h9o,V5,Dme,p9o,_9o,kG,u9o,b9o,v9o,X5,Gme,F9o,T9o,SG,M9o,E9o,C9o,z5,Ome,w9o,A9o,RG,L9o,y9o,x9o,Q5,Vme,$9o,k9o,PG,S9o,R9o,P9o,W5,Xme,B9o,I9o,BG,N9o,q9o,j9o,H5,zme,D9o,G9o,IG,O9o,V9o,X9o,U5,Qme,z9o,Q9o,NG,W9o,H9o,U9o,J5,Wme,J9o,Y9o,qG,K9o,Z9o,exo,Y5,Hme,oxo,rxo,jG,txo,axo,nxo,K5,Ume,sxo,lxo,DG,ixo,dxo,cxo,Z5,Jme,fxo,mxo,GG,gxo,hxo,pxo,e1,Yme,_xo,uxo,OG,bxo,vxo,Fxo,o1,Kme,Txo,Mxo,VG,Exo,Cxo,wxo,r1,Zme,Axo,Lxo,XG,yxo,xxo,$xo,t1,ege,kxo,Sxo,zG,Rxo,Pxo,Bxo,a1,oge,Ixo,Nxo,QG,qxo,jxo,Dxo,n1,rge,Gxo,Oxo,WG,Vxo,Xxo,zxo,s1,tge,Qxo,Wxo,HG,Hxo,Uxo,Jxo,l1,age,Yxo,Kxo,UG,Zxo,e$o,o$o,i1,nge,r$o,t$o,JG,a$o,n$o,s$o,d1,sge,l$o,i$o,YG,d$o,c$o,f$o,c1,lge,m$o,g$o,KG,h$o,p$o,_$o,f1,ige,u$o,b$o,ZG,v$o,F$o,T$o,m1,dge,M$o,E$o,eO,C$o,w$o,A$o,g1,cge,L$o,y$o,oO,x$o,$$o,k$o,h1,fge,S$o,R$o,rO,P$o,B$o,I$o,p1,mge,N$o,q$o,tO,j$o,D$o,G$o,_1,gge,O$o,V$o,aO,X$o,z$o,Q$o,u1,hge,W$o,H$o,nO,U$o,J$o,Y$o,b1,pge,K$o,Z$o,sO,eko,oko,rko,v1,_ge,tko,ako,lO,nko,sko,lko,F1,iko,uge,dko,cko,bge,fko,mko,T1,JOe,Wi,M1,vge,Ly,gko,Fge,hko,YOe,So,yy,pko,Hi,_ko,iO,uko,bko,dO,vko,Fko,Tko,xy,Mko,Tge,Eko,Cko,wko,dt,$y,Ako,Mge,Lko,yko,Ui,xko,Ege,$ko,kko,cO,Sko,Rko,Pko,E1,Bko,Ze,ky,Iko,Cge,Nko,qko,Na,jko,wge,Dko,Gko,Age,Oko,Vko,Lge,Xko,zko,Qko,W,C1,yge,Wko,Hko,fO,Uko,Jko,Yko,w1,xge,Kko,Zko,mO,eSo,oSo,rSo,A1,$ge,tSo,aSo,gO,nSo,sSo,lSo,L1,kge,iSo,dSo,hO,cSo,fSo,mSo,y1,Sge,gSo,hSo,pO,pSo,_So,uSo,x1,Rge,bSo,vSo,_O,FSo,TSo,MSo,$1,Pge,ESo,CSo,uO,wSo,ASo,LSo,k1,Bge,ySo,xSo,bO,$So,kSo,SSo,S1,Ige,RSo,PSo,vO,BSo,ISo,NSo,R1,Nge,qSo,jSo,FO,DSo,GSo,OSo,P1,qge,VSo,XSo,TO,zSo,QSo,WSo,B1,jge,HSo,USo,MO,JSo,YSo,KSo,I1,Dge,ZSo,eRo,EO,oRo,rRo,tRo,N1,Gge,aRo,nRo,CO,sRo,lRo,iRo,q1,Oge,dRo,cRo,wO,fRo,mRo,gRo,j1,Vge,hRo,pRo,AO,_Ro,uRo,bRo,D1,Xge,vRo,FRo,LO,TRo,MRo,ERo,G1,zge,CRo,wRo,yO,ARo,LRo,yRo,O1,Qge,xRo,$Ro,xO,kRo,SRo,RRo,V1,Wge,PRo,BRo,$O,IRo,NRo,qRo,X1,Hge,jRo,DRo,kO,GRo,ORo,VRo,z1,Uge,XRo,zRo,SO,QRo,WRo,HRo,Q1,Jge,URo,JRo,RO,YRo,KRo,ZRo,W1,Yge,ePo,oPo,PO,rPo,tPo,aPo,H1,Kge,nPo,sPo,BO,lPo,iPo,dPo,U1,Zge,cPo,fPo,IO,mPo,gPo,hPo,J1,ehe,pPo,_Po,NO,uPo,bPo,vPo,Y1,ohe,FPo,TPo,qO,MPo,EPo,CPo,K1,rhe,wPo,APo,jO,LPo,yPo,xPo,Z1,the,$Po,kPo,DO,SPo,RPo,PPo,e2,ahe,BPo,IPo,GO,NPo,qPo,jPo,o2,nhe,DPo,GPo,OO,OPo,VPo,XPo,r2,she,zPo,QPo,lhe,WPo,HPo,UPo,t2,ihe,JPo,YPo,VO,KPo,ZPo,eBo,a2,dhe,oBo,rBo,XO,tBo,aBo,nBo,n2,che,sBo,lBo,zO,iBo,dBo,cBo,s2,fhe,fBo,mBo,QO,gBo,hBo,pBo,l2,_Bo,mhe,uBo,bBo,ghe,vBo,FBo,i2,KOe,Ji,d2,hhe,Sy,TBo,phe,MBo,ZOe,Ro,Ry,EBo,Yi,CBo,WO,wBo,ABo,HO,LBo,yBo,xBo,Py,$Bo,_he,kBo,SBo,RBo,ct,By,PBo,uhe,BBo,IBo,Ki,NBo,bhe,qBo,jBo,UO,DBo,GBo,OBo,c2,VBo,eo,Iy,XBo,vhe,zBo,QBo,qa,WBo,Fhe,HBo,UBo,The,JBo,YBo,Mhe,KBo,ZBo,eIo,pe,f2,Ehe,oIo,rIo,JO,tIo,aIo,nIo,m2,Che,sIo,lIo,YO,iIo,dIo,cIo,g2,whe,fIo,mIo,KO,gIo,hIo,pIo,h2,Ahe,_Io,uIo,ZO,bIo,vIo,FIo,p2,Lhe,TIo,MIo,eV,EIo,CIo,wIo,_2,yhe,AIo,LIo,oV,yIo,xIo,$Io,u2,xhe,kIo,SIo,rV,RIo,PIo,BIo,b2,$he,IIo,NIo,tV,qIo,jIo,DIo,v2,khe,GIo,OIo,aV,VIo,XIo,zIo,F2,She,QIo,WIo,nV,HIo,UIo,JIo,T2,Rhe,YIo,KIo,sV,ZIo,eNo,oNo,M2,Phe,rNo,tNo,lV,aNo,nNo,sNo,E2,Bhe,lNo,iNo,iV,dNo,cNo,fNo,C2,Ihe,mNo,gNo,dV,hNo,pNo,_No,w2,Nhe,uNo,bNo,cV,vNo,FNo,TNo,A2,qhe,MNo,ENo,fV,CNo,wNo,ANo,L2,jhe,LNo,yNo,mV,xNo,$No,kNo,y2,SNo,Dhe,RNo,PNo,Ghe,BNo,INo,x2,eVe,Zi,$2,Ohe,Ny,NNo,Vhe,qNo,oVe,Po,qy,jNo,ed,DNo,gV,GNo,ONo,hV,VNo,XNo,zNo,jy,QNo,Xhe,WNo,HNo,UNo,ft,Dy,JNo,zhe,YNo,KNo,od,ZNo,Qhe,eqo,oqo,pV,rqo,tqo,aqo,k2,nqo,oo,Gy,sqo,Whe,lqo,iqo,ja,dqo,Hhe,cqo,fqo,Uhe,mqo,gqo,Jhe,hqo,pqo,_qo,N,S2,Yhe,uqo,bqo,_V,vqo,Fqo,Tqo,R2,Khe,Mqo,Eqo,uV,Cqo,wqo,Aqo,P2,Zhe,Lqo,yqo,bV,xqo,$qo,kqo,B2,epe,Sqo,Rqo,vV,Pqo,Bqo,Iqo,I2,ope,Nqo,qqo,FV,jqo,Dqo,Gqo,N2,rpe,Oqo,Vqo,TV,Xqo,zqo,Qqo,q2,tpe,Wqo,Hqo,MV,Uqo,Jqo,Yqo,j2,ape,Kqo,Zqo,EV,ejo,ojo,rjo,D2,npe,tjo,ajo,CV,njo,sjo,ljo,G2,spe,ijo,djo,wV,cjo,fjo,mjo,O2,lpe,gjo,hjo,AV,pjo,_jo,ujo,V2,ipe,bjo,vjo,LV,Fjo,Tjo,Mjo,X2,dpe,Ejo,Cjo,yV,wjo,Ajo,Ljo,z2,cpe,yjo,xjo,xV,$jo,kjo,Sjo,Q2,fpe,Rjo,Pjo,$V,Bjo,Ijo,Njo,W2,mpe,qjo,jjo,kV,Djo,Gjo,Ojo,H2,gpe,Vjo,Xjo,SV,zjo,Qjo,Wjo,U2,hpe,Hjo,Ujo,RV,Jjo,Yjo,Kjo,J2,ppe,Zjo,eDo,PV,oDo,rDo,tDo,Y2,_pe,aDo,nDo,BV,sDo,lDo,iDo,K2,upe,dDo,cDo,IV,fDo,mDo,gDo,Z2,bpe,hDo,pDo,NV,_Do,uDo,bDo,e4,vpe,vDo,FDo,qV,TDo,MDo,EDo,o4,Fpe,CDo,wDo,jV,ADo,LDo,yDo,r4,Tpe,xDo,$Do,DV,kDo,SDo,RDo,t4,Mpe,PDo,BDo,GV,IDo,NDo,qDo,a4,Epe,jDo,DDo,OV,GDo,ODo,VDo,n4,Cpe,XDo,zDo,VV,QDo,WDo,HDo,s4,wpe,UDo,JDo,XV,YDo,KDo,ZDo,l4,Ape,eGo,oGo,zV,rGo,tGo,aGo,i4,Lpe,nGo,sGo,QV,lGo,iGo,dGo,d4,ype,cGo,fGo,WV,mGo,gGo,hGo,c4,xpe,pGo,_Go,HV,uGo,bGo,vGo,f4,$pe,FGo,TGo,UV,MGo,EGo,CGo,m4,kpe,wGo,AGo,JV,LGo,yGo,xGo,g4,Spe,$Go,kGo,YV,SGo,RGo,PGo,h4,Rpe,BGo,IGo,KV,NGo,qGo,jGo,p4,Ppe,DGo,GGo,ZV,OGo,VGo,XGo,_4,Bpe,zGo,QGo,eX,WGo,HGo,UGo,u4,Ipe,JGo,YGo,oX,KGo,ZGo,eOo,b4,Npe,oOo,rOo,rX,tOo,aOo,nOo,v4,qpe,sOo,lOo,tX,iOo,dOo,cOo,F4,jpe,fOo,mOo,aX,gOo,hOo,pOo,T4,Dpe,_Oo,uOo,nX,bOo,vOo,FOo,M4,Gpe,TOo,MOo,sX,EOo,COo,wOo,E4,Ope,AOo,LOo,lX,yOo,xOo,$Oo,C4,Vpe,kOo,SOo,iX,ROo,POo,BOo,w4,Xpe,IOo,NOo,dX,qOo,jOo,DOo,A4,zpe,GOo,OOo,cX,VOo,XOo,zOo,L4,QOo,Qpe,WOo,HOo,Wpe,UOo,JOo,y4,rVe,rd,x4,Hpe,Oy,YOo,Upe,KOo,tVe,Bo,Vy,ZOo,td,eVo,fX,oVo,rVo,mX,tVo,aVo,nVo,Xy,sVo,Jpe,lVo,iVo,dVo,mt,zy,cVo,Ype,fVo,mVo,ad,gVo,Kpe,hVo,pVo,gX,_Vo,uVo,bVo,$4,vVo,ro,Qy,FVo,Zpe,TVo,MVo,Da,EVo,e_e,CVo,wVo,o_e,AVo,LVo,r_e,yVo,xVo,$Vo,Z,k4,t_e,kVo,SVo,hX,RVo,PVo,BVo,S4,a_e,IVo,NVo,pX,qVo,jVo,DVo,R4,n_e,GVo,OVo,_X,VVo,XVo,zVo,P4,s_e,QVo,WVo,uX,HVo,UVo,JVo,B4,l_e,YVo,KVo,bX,ZVo,eXo,oXo,I4,i_e,rXo,tXo,vX,aXo,nXo,sXo,N4,d_e,lXo,iXo,FX,dXo,cXo,fXo,q4,c_e,mXo,gXo,TX,hXo,pXo,_Xo,j4,f_e,uXo,bXo,MX,vXo,FXo,TXo,D4,m_e,MXo,EXo,EX,CXo,wXo,AXo,G4,g_e,LXo,yXo,CX,xXo,$Xo,kXo,O4,h_e,SXo,RXo,wX,PXo,BXo,IXo,V4,p_e,NXo,qXo,AX,jXo,DXo,GXo,X4,__e,OXo,VXo,LX,XXo,zXo,QXo,z4,u_e,WXo,HXo,yX,UXo,JXo,YXo,Q4,b_e,KXo,ZXo,xX,ezo,ozo,rzo,W4,v_e,tzo,azo,$X,nzo,szo,lzo,H4,F_e,izo,dzo,kX,czo,fzo,mzo,U4,T_e,gzo,hzo,SX,pzo,_zo,uzo,J4,M_e,bzo,vzo,RX,Fzo,Tzo,Mzo,Y4,E_e,Ezo,Czo,PX,wzo,Azo,Lzo,K4,C_e,yzo,xzo,BX,$zo,kzo,Szo,Z4,w_e,Rzo,Pzo,IX,Bzo,Izo,Nzo,eb,A_e,qzo,jzo,NX,Dzo,Gzo,Ozo,ob,L_e,Vzo,Xzo,qX,zzo,Qzo,Wzo,rb,y_e,Hzo,Uzo,jX,Jzo,Yzo,Kzo,tb,x_e,Zzo,eQo,DX,oQo,rQo,tQo,ab,$_e,aQo,nQo,GX,sQo,lQo,iQo,nb,k_e,dQo,cQo,OX,fQo,mQo,gQo,sb,S_e,hQo,pQo,VX,_Qo,uQo,bQo,lb,vQo,R_e,FQo,TQo,P_e,MQo,EQo,ib,aVe,nd,db,B_e,Wy,CQo,I_e,wQo,nVe,Io,Hy,AQo,sd,LQo,XX,yQo,xQo,zX,$Qo,kQo,SQo,Uy,RQo,N_e,PQo,BQo,IQo,gt,Jy,NQo,q_e,qQo,jQo,ld,DQo,j_e,GQo,OQo,QX,VQo,XQo,zQo,cb,QQo,to,Yy,WQo,D_e,HQo,UQo,Ga,JQo,G_e,YQo,KQo,O_e,ZQo,eWo,V_e,oWo,rWo,tWo,No,fb,X_e,aWo,nWo,WX,sWo,lWo,iWo,mb,z_e,dWo,cWo,HX,fWo,mWo,gWo,gb,Q_e,hWo,pWo,UX,_Wo,uWo,bWo,hb,W_e,vWo,FWo,JX,TWo,MWo,EWo,pb,H_e,CWo,wWo,YX,AWo,LWo,yWo,_b,U_e,xWo,$Wo,KX,kWo,SWo,RWo,ub,PWo,J_e,BWo,IWo,Y_e,NWo,qWo,bb,sVe,id,vb,K_e,Ky,jWo,Z_e,DWo,lVe,qo,Zy,GWo,dd,OWo,ZX,VWo,XWo,ez,zWo,QWo,WWo,e8,HWo,eue,UWo,JWo,YWo,ht,o8,KWo,oue,ZWo,eHo,cd,oHo,rue,rHo,tHo,oz,aHo,nHo,sHo,Fb,lHo,ao,r8,iHo,tue,dHo,cHo,Oa,fHo,aue,mHo,gHo,nue,hHo,pHo,sue,_Ho,uHo,bHo,H,Tb,lue,vHo,FHo,rz,THo,MHo,EHo,Mb,iue,CHo,wHo,tz,AHo,LHo,yHo,Eb,due,xHo,$Ho,az,kHo,SHo,RHo,Cb,cue,PHo,BHo,nz,IHo,NHo,qHo,wb,fue,jHo,DHo,sz,GHo,OHo,VHo,Ab,mue,XHo,zHo,lz,QHo,WHo,HHo,Lb,gue,UHo,JHo,iz,YHo,KHo,ZHo,yb,hue,eUo,oUo,dz,rUo,tUo,aUo,xb,pue,nUo,sUo,cz,lUo,iUo,dUo,$b,_ue,cUo,fUo,fz,mUo,gUo,hUo,kb,uue,pUo,_Uo,mz,uUo,bUo,vUo,Sb,bue,FUo,TUo,gz,MUo,EUo,CUo,Rb,vue,wUo,AUo,hz,LUo,yUo,xUo,Pb,Fue,$Uo,kUo,pz,SUo,RUo,PUo,Bb,Tue,BUo,IUo,_z,NUo,qUo,jUo,Ib,Mue,DUo,GUo,uz,OUo,VUo,XUo,Nb,Eue,zUo,QUo,bz,WUo,HUo,UUo,qb,Cue,JUo,YUo,vz,KUo,ZUo,eJo,jb,wue,oJo,rJo,Fz,tJo,aJo,nJo,Db,Aue,sJo,lJo,Tz,iJo,dJo,cJo,Gb,Lue,fJo,mJo,Mz,gJo,hJo,pJo,Ob,yue,_Jo,uJo,Ez,bJo,vJo,FJo,Vb,xue,TJo,MJo,Cz,EJo,CJo,wJo,Xb,$ue,AJo,LJo,wz,yJo,xJo,$Jo,zb,kue,kJo,SJo,Az,RJo,PJo,BJo,Qb,Sue,IJo,NJo,Lz,qJo,jJo,DJo,Wb,Rue,GJo,OJo,yz,VJo,XJo,zJo,Hb,Pue,QJo,WJo,xz,HJo,UJo,JJo,Ub,Bue,YJo,KJo,$z,ZJo,eYo,oYo,Jb,Iue,rYo,tYo,kz,aYo,nYo,sYo,Yb,Nue,lYo,iYo,Sz,dYo,cYo,fYo,Kb,que,mYo,gYo,Rz,hYo,pYo,_Yo,Zb,jue,uYo,bYo,Pz,vYo,FYo,TYo,ev,Due,MYo,EYo,Bz,CYo,wYo,AYo,ov,Gue,LYo,yYo,Iz,xYo,$Yo,kYo,rv,Oue,SYo,RYo,Nz,PYo,BYo,IYo,tv,NYo,Vue,qYo,jYo,Xue,DYo,GYo,av,iVe,fd,nv,zue,t8,OYo,Que,VYo,dVe,jo,a8,XYo,md,zYo,qz,QYo,WYo,jz,HYo,UYo,JYo,n8,YYo,Wue,KYo,ZYo,eKo,pt,s8,oKo,Hue,rKo,tKo,gd,aKo,Uue,nKo,sKo,Dz,lKo,iKo,dKo,sv,cKo,no,l8,fKo,Jue,mKo,gKo,Va,hKo,Yue,pKo,_Ko,Kue,uKo,bKo,Zue,vKo,FKo,TKo,V,lv,e5e,MKo,EKo,Gz,CKo,wKo,AKo,iv,o5e,LKo,yKo,Oz,xKo,$Ko,kKo,dv,r5e,SKo,RKo,Vz,PKo,BKo,IKo,cv,t5e,NKo,qKo,Xz,jKo,DKo,GKo,fv,a5e,OKo,VKo,zz,XKo,zKo,QKo,mv,n5e,WKo,HKo,Qz,UKo,JKo,YKo,gv,s5e,KKo,ZKo,Wz,eZo,oZo,rZo,hv,l5e,tZo,aZo,Hz,nZo,sZo,lZo,pv,i5e,iZo,dZo,Uz,cZo,fZo,mZo,_v,d5e,gZo,hZo,Jz,pZo,_Zo,uZo,uv,c5e,bZo,vZo,Yz,FZo,TZo,MZo,bv,f5e,EZo,CZo,Kz,wZo,AZo,LZo,vv,m5e,yZo,xZo,Zz,$Zo,kZo,SZo,Fv,g5e,RZo,PZo,eQ,BZo,IZo,NZo,Tv,h5e,qZo,jZo,oQ,DZo,GZo,OZo,Mv,p5e,VZo,XZo,rQ,zZo,QZo,WZo,Ev,_5e,HZo,UZo,tQ,JZo,YZo,KZo,Cv,u5e,ZZo,eer,aQ,oer,rer,ter,wv,b5e,aer,ner,nQ,ser,ler,ier,Av,v5e,der,cer,sQ,fer,mer,ger,Lv,F5e,her,per,lQ,_er,uer,ber,yv,T5e,ver,Fer,iQ,Ter,Mer,Eer,xv,M5e,Cer,wer,dQ,Aer,Ler,yer,$v,E5e,xer,$er,cQ,ker,Ser,Rer,kv,C5e,Per,Ber,fQ,Ier,Ner,qer,Sv,w5e,jer,Der,mQ,Ger,Oer,Ver,Rv,A5e,Xer,zer,gQ,Qer,Wer,Her,Pv,L5e,Uer,Jer,hQ,Yer,Ker,Zer,Bv,y5e,eor,oor,pQ,ror,tor,aor,Iv,x5e,nor,sor,_Q,lor,ior,dor,Nv,$5e,cor,mor,uQ,gor,hor,por,qv,k5e,_or,uor,bQ,bor,vor,For,jv,S5e,Tor,Mor,vQ,Eor,Cor,wor,Dv,R5e,Aor,Lor,FQ,yor,xor,$or,Gv,P5e,kor,Sor,TQ,Ror,Por,Bor,Ov,B5e,Ior,Nor,MQ,qor,jor,Dor,Vv,I5e,Gor,Oor,EQ,Vor,Xor,zor,Xv,N5e,Qor,Wor,CQ,Hor,Uor,Jor,zv,q5e,Yor,Kor,wQ,Zor,err,orr,Qv,j5e,rrr,trr,AQ,arr,nrr,srr,Wv,D5e,lrr,irr,LQ,drr,crr,frr,Hv,mrr,G5e,grr,hrr,O5e,prr,_rr,Uv,cVe,hd,Jv,V5e,i8,urr,X5e,brr,fVe,Do,d8,vrr,pd,Frr,yQ,Trr,Mrr,xQ,Err,Crr,wrr,c8,Arr,z5e,Lrr,yrr,xrr,_t,f8,$rr,Q5e,krr,Srr,_d,Rrr,W5e,Prr,Brr,$Q,Irr,Nrr,qrr,Yv,jrr,so,m8,Drr,H5e,Grr,Orr,Xa,Vrr,U5e,Xrr,zrr,J5e,Qrr,Wrr,Y5e,Hrr,Urr,Jrr,K5e,Kv,Z5e,Yrr,Krr,kQ,Zrr,etr,otr,Zv,rtr,e1e,ttr,atr,o1e,ntr,str,eF,mVe,ud,oF,r1e,g8,ltr,t1e,itr,gVe,Go,h8,dtr,bd,ctr,SQ,ftr,mtr,RQ,gtr,htr,ptr,p8,_tr,a1e,utr,btr,vtr,ut,_8,Ftr,n1e,Ttr,Mtr,vd,Etr,s1e,Ctr,wtr,PQ,Atr,Ltr,ytr,rF,xtr,lo,u8,$tr,l1e,ktr,Str,za,Rtr,i1e,Ptr,Btr,d1e,Itr,Ntr,c1e,qtr,jtr,Dtr,Fe,tF,f1e,Gtr,Otr,BQ,Vtr,Xtr,ztr,aF,m1e,Qtr,Wtr,IQ,Htr,Utr,Jtr,nF,g1e,Ytr,Ktr,NQ,Ztr,ear,oar,sF,h1e,rar,tar,qQ,aar,nar,sar,Qs,p1e,lar,iar,jQ,dar,car,DQ,far,mar,gar,lF,_1e,har,par,GQ,_ar,uar,bar,Ws,u1e,Far,Tar,OQ,Mar,Ear,VQ,Car,war,Aar,bt,b1e,Lar,yar,XQ,xar,$ar,zQ,kar,Sar,QQ,Rar,Par,Bar,iF,v1e,Iar,Nar,WQ,qar,jar,Dar,dF,F1e,Gar,Oar,HQ,Var,Xar,zar,cF,T1e,Qar,War,UQ,Har,Uar,Jar,fF,M1e,Yar,Kar,JQ,Zar,enr,onr,mF,E1e,rnr,tnr,YQ,anr,nnr,snr,gF,C1e,lnr,inr,KQ,dnr,cnr,fnr,hF,w1e,mnr,gnr,ZQ,hnr,pnr,_nr,pF,unr,A1e,bnr,vnr,L1e,Fnr,Tnr,_F,hVe,Fd,uF,y1e,b8,Mnr,x1e,Enr,pVe,Oo,v8,Cnr,Td,wnr,eW,Anr,Lnr,oW,ynr,xnr,$nr,F8,knr,$1e,Snr,Rnr,Pnr,vt,T8,Bnr,k1e,Inr,Nnr,Md,qnr,S1e,jnr,Dnr,rW,Gnr,Onr,Vnr,bF,Xnr,io,M8,znr,R1e,Qnr,Wnr,Qa,Hnr,P1e,Unr,Jnr,B1e,Ynr,Knr,I1e,Znr,esr,osr,N1e,vF,q1e,rsr,tsr,tW,asr,nsr,ssr,FF,lsr,j1e,isr,dsr,D1e,csr,fsr,TF,_Ve,Ed,MF,G1e,E8,msr,O1e,gsr,uVe,Vo,C8,hsr,Cd,psr,aW,_sr,usr,nW,bsr,vsr,Fsr,w8,Tsr,V1e,Msr,Esr,Csr,Ft,A8,wsr,X1e,Asr,Lsr,wd,ysr,z1e,xsr,$sr,sW,ksr,Ssr,Rsr,EF,Psr,co,L8,Bsr,Q1e,Isr,Nsr,Wa,qsr,W1e,jsr,Dsr,H1e,Gsr,Osr,U1e,Vsr,Xsr,zsr,J1e,CF,Y1e,Qsr,Wsr,lW,Hsr,Usr,Jsr,wF,Ysr,K1e,Ksr,Zsr,Z1e,elr,olr,AF,bVe,Ad,LF,e2e,y8,rlr,o2e,tlr,vVe,Xo,x8,alr,Ld,nlr,iW,slr,llr,dW,ilr,dlr,clr,$8,flr,r2e,mlr,glr,hlr,Tt,k8,plr,t2e,_lr,ulr,yd,blr,a2e,vlr,Flr,cW,Tlr,Mlr,Elr,yF,Clr,fo,S8,wlr,n2e,Alr,Llr,Ha,ylr,s2e,xlr,$lr,l2e,klr,Slr,i2e,Rlr,Plr,Blr,Pe,xF,d2e,Ilr,Nlr,fW,qlr,jlr,Dlr,$F,c2e,Glr,Olr,mW,Vlr,Xlr,zlr,kF,f2e,Qlr,Wlr,gW,Hlr,Ulr,Jlr,SF,m2e,Ylr,Klr,hW,Zlr,eir,oir,RF,g2e,rir,tir,pW,air,nir,sir,PF,h2e,lir,iir,_W,dir,cir,fir,BF,p2e,mir,gir,uW,hir,pir,_ir,IF,_2e,uir,bir,bW,vir,Fir,Tir,NF,u2e,Mir,Eir,vW,Cir,wir,Air,qF,Lir,b2e,yir,xir,v2e,$ir,kir,jF,FVe,xd,DF,F2e,R8,Sir,T2e,Rir,TVe,zo,P8,Pir,$d,Bir,FW,Iir,Nir,TW,qir,jir,Dir,B8,Gir,M2e,Oir,Vir,Xir,Mt,I8,zir,E2e,Qir,Wir,kd,Hir,C2e,Uir,Jir,MW,Yir,Kir,Zir,GF,edr,mo,N8,odr,w2e,rdr,tdr,Ua,adr,A2e,ndr,sdr,L2e,ldr,idr,y2e,ddr,cdr,fdr,et,OF,x2e,mdr,gdr,EW,hdr,pdr,_dr,VF,$2e,udr,bdr,CW,vdr,Fdr,Tdr,XF,k2e,Mdr,Edr,wW,Cdr,wdr,Adr,zF,S2e,Ldr,ydr,AW,xdr,$dr,kdr,QF,R2e,Sdr,Rdr,LW,Pdr,Bdr,Idr,WF,Ndr,P2e,qdr,jdr,B2e,Ddr,Gdr,HF,MVe,Sd,UF,I2e,q8,Odr,N2e,Vdr,EVe,Qo,j8,Xdr,Rd,zdr,yW,Qdr,Wdr,xW,Hdr,Udr,Jdr,D8,Ydr,q2e,Kdr,Zdr,ecr,Et,G8,ocr,j2e,rcr,tcr,Pd,acr,D2e,ncr,scr,$W,lcr,icr,dcr,JF,ccr,go,O8,fcr,G2e,mcr,gcr,Ja,hcr,O2e,pcr,_cr,V2e,ucr,bcr,X2e,vcr,Fcr,Tcr,Le,YF,z2e,Mcr,Ecr,kW,Ccr,wcr,Acr,KF,Q2e,Lcr,ycr,SW,xcr,$cr,kcr,ZF,W2e,Scr,Rcr,RW,Pcr,Bcr,Icr,eT,H2e,Ncr,qcr,PW,jcr,Dcr,Gcr,oT,U2e,Ocr,Vcr,BW,Xcr,zcr,Qcr,rT,J2e,Wcr,Hcr,IW,Ucr,Jcr,Ycr,tT,Y2e,Kcr,Zcr,NW,efr,ofr,rfr,aT,K2e,tfr,afr,qW,nfr,sfr,lfr,nT,Z2e,ifr,dfr,jW,cfr,ffr,mfr,sT,e4e,gfr,hfr,DW,pfr,_fr,ufr,lT,bfr,o4e,vfr,Ffr,r4e,Tfr,Mfr,iT,CVe,Bd,dT,t4e,V8,Efr,a4e,Cfr,wVe,Wo,X8,wfr,Id,Afr,GW,Lfr,yfr,OW,xfr,$fr,kfr,z8,Sfr,n4e,Rfr,Pfr,Bfr,Ct,Q8,Ifr,s4e,Nfr,qfr,Nd,jfr,l4e,Dfr,Gfr,VW,Ofr,Vfr,Xfr,cT,zfr,ho,W8,Qfr,i4e,Wfr,Hfr,Ya,Ufr,d4e,Jfr,Yfr,c4e,Kfr,Zfr,f4e,emr,omr,rmr,H8,fT,m4e,tmr,amr,XW,nmr,smr,lmr,mT,g4e,imr,dmr,zW,cmr,fmr,mmr,gT,gmr,h4e,hmr,pmr,p4e,_mr,umr,hT,AVe,qd,pT,_4e,U8,bmr,u4e,vmr,LVe,Ho,J8,Fmr,jd,Tmr,QW,Mmr,Emr,WW,Cmr,wmr,Amr,Y8,Lmr,b4e,ymr,xmr,$mr,wt,K8,kmr,v4e,Smr,Rmr,Dd,Pmr,F4e,Bmr,Imr,HW,Nmr,qmr,jmr,_T,Dmr,po,Z8,Gmr,T4e,Omr,Vmr,Ka,Xmr,M4e,zmr,Qmr,E4e,Wmr,Hmr,C4e,Umr,Jmr,Ymr,ot,uT,w4e,Kmr,Zmr,UW,egr,ogr,rgr,bT,A4e,tgr,agr,JW,ngr,sgr,lgr,vT,L4e,igr,dgr,YW,cgr,fgr,mgr,FT,y4e,ggr,hgr,KW,pgr,_gr,ugr,TT,x4e,bgr,vgr,ZW,Fgr,Tgr,Mgr,MT,Egr,$4e,Cgr,wgr,k4e,Agr,Lgr,ET,yVe,Gd,CT,S4e,e9,ygr,R4e,xgr,xVe,Uo,o9,$gr,Od,kgr,eH,Sgr,Rgr,oH,Pgr,Bgr,Igr,r9,Ngr,P4e,qgr,jgr,Dgr,At,t9,Ggr,B4e,Ogr,Vgr,Vd,Xgr,I4e,zgr,Qgr,rH,Wgr,Hgr,Ugr,wT,Jgr,_o,a9,Ygr,N4e,Kgr,Zgr,Za,ehr,q4e,ohr,rhr,j4e,thr,ahr,D4e,nhr,shr,lhr,Xd,AT,G4e,ihr,dhr,tH,chr,fhr,mhr,LT,O4e,ghr,hhr,aH,phr,_hr,uhr,yT,V4e,bhr,vhr,nH,Fhr,Thr,Mhr,xT,Ehr,X4e,Chr,whr,z4e,Ahr,Lhr,$T,$Ve,zd,kT,Q4e,n9,yhr,W4e,xhr,kVe,Jo,s9,$hr,Qd,khr,sH,Shr,Rhr,lH,Phr,Bhr,Ihr,l9,Nhr,H4e,qhr,jhr,Dhr,Lt,i9,Ghr,U4e,Ohr,Vhr,Wd,Xhr,J4e,zhr,Qhr,iH,Whr,Hhr,Uhr,ST,Jhr,uo,d9,Yhr,Y4e,Khr,Zhr,en,epr,K4e,opr,rpr,Z4e,tpr,apr,ebe,npr,spr,lpr,c9,RT,obe,ipr,dpr,dH,cpr,fpr,mpr,PT,rbe,gpr,hpr,cH,ppr,_pr,upr,BT,bpr,tbe,vpr,Fpr,abe,Tpr,Mpr,IT,SVe,Hd,NT,nbe,f9,Epr,sbe,Cpr,RVe,Yo,m9,wpr,Ud,Apr,fH,Lpr,ypr,mH,xpr,$pr,kpr,g9,Spr,lbe,Rpr,Ppr,Bpr,yt,h9,Ipr,ibe,Npr,qpr,Jd,jpr,dbe,Dpr,Gpr,gH,Opr,Vpr,Xpr,qT,zpr,bo,p9,Qpr,cbe,Wpr,Hpr,on,Upr,fbe,Jpr,Ypr,mbe,Kpr,Zpr,gbe,e_r,o_r,r_r,hbe,jT,pbe,t_r,a_r,hH,n_r,s_r,l_r,DT,i_r,_be,d_r,c_r,ube,f_r,m_r,GT,PVe,Yd,OT,bbe,_9,g_r,vbe,h_r,BVe,Ko,u9,p_r,Kd,__r,pH,u_r,b_r,_H,v_r,F_r,T_r,b9,M_r,Fbe,E_r,C_r,w_r,xt,v9,A_r,Tbe,L_r,y_r,Zd,x_r,Mbe,$_r,k_r,uH,S_r,R_r,P_r,VT,B_r,vo,F9,I_r,Ebe,N_r,q_r,rn,j_r,Cbe,D_r,G_r,wbe,O_r,V_r,Abe,X_r,z_r,Q_r,tn,XT,Lbe,W_r,H_r,bH,U_r,J_r,Y_r,zT,ybe,K_r,Z_r,vH,eur,our,rur,QT,xbe,tur,aur,FH,nur,sur,lur,WT,$be,iur,dur,TH,cur,fur,mur,HT,gur,kbe,hur,pur,Sbe,_ur,uur,UT,IVe,ec,JT,Rbe,T9,bur,Pbe,vur,NVe,Zo,M9,Fur,oc,Tur,MH,Mur,Eur,EH,Cur,wur,Aur,E9,Lur,Bbe,yur,xur,$ur,$t,C9,kur,Ibe,Sur,Rur,rc,Pur,Nbe,Bur,Iur,CH,Nur,qur,jur,YT,Dur,Fo,w9,Gur,qbe,Our,Vur,an,Xur,jbe,zur,Qur,Dbe,Wur,Hur,Gbe,Uur,Jur,Yur,Obe,KT,Vbe,Kur,Zur,wH,e5r,o5r,r5r,ZT,t5r,Xbe,a5r,n5r,zbe,s5r,l5r,e7,qVe,tc,o7,Qbe,A9,i5r,Wbe,d5r,jVe,er,L9,c5r,ac,f5r,AH,m5r,g5r,LH,h5r,p5r,_5r,y9,u5r,Hbe,b5r,v5r,F5r,kt,x9,T5r,Ube,M5r,E5r,nc,C5r,Jbe,w5r,A5r,yH,L5r,y5r,x5r,r7,$5r,yr,$9,k5r,Ybe,S5r,R5r,nn,P5r,Kbe,B5r,I5r,Zbe,N5r,q5r,eve,j5r,D5r,G5r,q,t7,ove,O5r,V5r,xH,X5r,z5r,Q5r,a7,rve,W5r,H5r,$H,U5r,J5r,Y5r,n7,tve,K5r,Z5r,kH,e1r,o1r,r1r,s7,ave,t1r,a1r,SH,n1r,s1r,l1r,l7,nve,i1r,d1r,RH,c1r,f1r,m1r,i7,sve,g1r,h1r,PH,p1r,_1r,u1r,d7,lve,b1r,v1r,BH,F1r,T1r,M1r,c7,ive,E1r,C1r,IH,w1r,A1r,L1r,f7,dve,y1r,x1r,NH,$1r,k1r,S1r,m7,cve,R1r,P1r,qH,B1r,I1r,N1r,g7,fve,q1r,j1r,jH,D1r,G1r,O1r,h7,mve,V1r,X1r,DH,z1r,Q1r,W1r,p7,gve,H1r,U1r,GH,J1r,Y1r,K1r,_7,hve,Z1r,e2r,OH,o2r,r2r,t2r,u7,pve,a2r,n2r,VH,s2r,l2r,i2r,b7,_ve,d2r,c2r,XH,f2r,m2r,g2r,v7,uve,h2r,p2r,zH,_2r,u2r,b2r,Hs,bve,v2r,F2r,QH,T2r,M2r,WH,E2r,C2r,w2r,F7,vve,A2r,L2r,HH,y2r,x2r,$2r,T7,Fve,k2r,S2r,UH,R2r,P2r,B2r,M7,Tve,I2r,N2r,JH,q2r,j2r,D2r,E7,Mve,G2r,O2r,YH,V2r,X2r,z2r,C7,Eve,Q2r,W2r,KH,H2r,U2r,J2r,w7,Cve,Y2r,K2r,ZH,Z2r,e4r,o4r,A7,wve,r4r,t4r,eU,a4r,n4r,s4r,L7,Ave,l4r,i4r,oU,d4r,c4r,f4r,y7,Lve,m4r,g4r,rU,h4r,p4r,_4r,x7,yve,u4r,b4r,tU,v4r,F4r,T4r,$7,xve,M4r,E4r,aU,C4r,w4r,A4r,k7,$ve,L4r,y4r,nU,x4r,$4r,k4r,S7,kve,S4r,R4r,sU,P4r,B4r,I4r,R7,Sve,N4r,q4r,lU,j4r,D4r,G4r,P7,Rve,O4r,V4r,iU,X4r,z4r,Q4r,B7,Pve,W4r,H4r,dU,U4r,J4r,Y4r,I7,Bve,K4r,Z4r,cU,ebr,obr,rbr,N7,Ive,tbr,abr,fU,nbr,sbr,lbr,q7,Nve,ibr,dbr,mU,cbr,fbr,mbr,j7,qve,gbr,hbr,gU,pbr,_br,ubr,D7,jve,bbr,vbr,hU,Fbr,Tbr,Mbr,G7,Dve,Ebr,Cbr,pU,wbr,Abr,Lbr,O7,Gve,ybr,xbr,_U,$br,kbr,Sbr,V7,Ove,Rbr,Pbr,uU,Bbr,Ibr,Nbr,X7,Vve,qbr,jbr,bU,Dbr,Gbr,Obr,z7,Xve,Vbr,Xbr,vU,zbr,Qbr,Wbr,Q7,zve,Hbr,Ubr,FU,Jbr,Ybr,Kbr,W7,Qve,Zbr,evr,TU,ovr,rvr,tvr,H7,Wve,avr,nvr,MU,svr,lvr,ivr,U7,Hve,dvr,cvr,EU,fvr,mvr,gvr,J7,DVe,sc,Y7,Uve,k9,hvr,Jve,pvr,GVe,or,S9,_vr,lc,uvr,CU,bvr,vvr,wU,Fvr,Tvr,Mvr,R9,Evr,Yve,Cvr,wvr,Avr,St,P9,Lvr,Kve,yvr,xvr,ic,$vr,Zve,kvr,Svr,AU,Rvr,Pvr,Bvr,K7,Ivr,xr,B9,Nvr,eFe,qvr,jvr,sn,Dvr,oFe,Gvr,Ovr,rFe,Vvr,Xvr,tFe,zvr,Qvr,Wvr,se,Z7,aFe,Hvr,Uvr,LU,Jvr,Yvr,Kvr,eM,nFe,Zvr,eFr,yU,oFr,rFr,tFr,oM,sFe,aFr,nFr,xU,sFr,lFr,iFr,rM,lFe,dFr,cFr,$U,fFr,mFr,gFr,tM,iFe,hFr,pFr,kU,_Fr,uFr,bFr,aM,dFe,vFr,FFr,SU,TFr,MFr,EFr,nM,cFe,CFr,wFr,RU,AFr,LFr,yFr,sM,fFe,xFr,$Fr,PU,kFr,SFr,RFr,lM,mFe,PFr,BFr,BU,IFr,NFr,qFr,iM,gFe,jFr,DFr,IU,GFr,OFr,VFr,dM,hFe,XFr,zFr,NU,QFr,WFr,HFr,cM,pFe,UFr,JFr,qU,YFr,KFr,ZFr,fM,_Fe,eTr,oTr,jU,rTr,tTr,aTr,mM,uFe,nTr,sTr,DU,lTr,iTr,dTr,gM,bFe,cTr,fTr,GU,mTr,gTr,hTr,hM,vFe,pTr,_Tr,OU,uTr,bTr,vTr,pM,FFe,FTr,TTr,VU,MTr,ETr,CTr,_M,TFe,wTr,ATr,XU,LTr,yTr,xTr,uM,MFe,$Tr,kTr,zU,STr,RTr,PTr,bM,EFe,BTr,ITr,QU,NTr,qTr,jTr,vM,CFe,DTr,GTr,WU,OTr,VTr,XTr,FM,wFe,zTr,QTr,HU,WTr,HTr,UTr,TM,AFe,JTr,YTr,UU,KTr,ZTr,e7r,MM,OVe,dc,EM,LFe,I9,o7r,yFe,r7r,VVe,rr,N9,t7r,cc,a7r,JU,n7r,s7r,YU,l7r,i7r,d7r,q9,c7r,xFe,f7r,m7r,g7r,Rt,j9,h7r,$Fe,p7r,_7r,fc,u7r,kFe,b7r,v7r,KU,F7r,T7r,M7r,CM,E7r,$r,D9,C7r,SFe,w7r,A7r,ln,L7r,RFe,y7r,x7r,PFe,$7r,k7r,BFe,S7r,R7r,P7r,Me,wM,IFe,B7r,I7r,ZU,N7r,q7r,j7r,AM,NFe,D7r,G7r,eJ,O7r,V7r,X7r,LM,qFe,z7r,Q7r,oJ,W7r,H7r,U7r,yM,jFe,J7r,Y7r,rJ,K7r,Z7r,eMr,xM,DFe,oMr,rMr,tJ,tMr,aMr,nMr,$M,GFe,sMr,lMr,aJ,iMr,dMr,cMr,kM,OFe,fMr,mMr,nJ,gMr,hMr,pMr,SM,VFe,_Mr,uMr,sJ,bMr,vMr,FMr,RM,XFe,TMr,MMr,lJ,EMr,CMr,wMr,PM,zFe,AMr,LMr,iJ,yMr,xMr,$Mr,BM,QFe,kMr,SMr,dJ,RMr,PMr,BMr,IM,WFe,IMr,NMr,cJ,qMr,jMr,DMr,NM,HFe,GMr,OMr,fJ,VMr,XMr,zMr,qM,XVe,mc,jM,UFe,G9,QMr,JFe,WMr,zVe,tr,O9,HMr,gc,UMr,mJ,JMr,YMr,gJ,KMr,ZMr,eEr,V9,oEr,YFe,rEr,tEr,aEr,Pt,X9,nEr,KFe,sEr,lEr,hc,iEr,ZFe,dEr,cEr,hJ,fEr,mEr,gEr,DM,hEr,kr,z9,pEr,eTe,_Er,uEr,dn,bEr,oTe,vEr,FEr,rTe,TEr,MEr,tTe,EEr,CEr,wEr,rt,GM,aTe,AEr,LEr,pJ,yEr,xEr,$Er,OM,nTe,kEr,SEr,_J,REr,PEr,BEr,VM,sTe,IEr,NEr,uJ,qEr,jEr,DEr,XM,lTe,GEr,OEr,bJ,VEr,XEr,zEr,zM,iTe,QEr,WEr,vJ,HEr,UEr,JEr,QM,QVe,pc,WM,dTe,Q9,YEr,cTe,KEr,WVe,ar,W9,ZEr,_c,eCr,FJ,oCr,rCr,TJ,tCr,aCr,nCr,H9,sCr,fTe,lCr,iCr,dCr,Bt,U9,cCr,mTe,fCr,mCr,uc,gCr,gTe,hCr,pCr,MJ,_Cr,uCr,bCr,HM,vCr,Sr,J9,FCr,hTe,TCr,MCr,cn,ECr,pTe,CCr,wCr,_Te,ACr,LCr,uTe,yCr,xCr,$Cr,ie,UM,bTe,kCr,SCr,EJ,RCr,PCr,BCr,JM,vTe,ICr,NCr,CJ,qCr,jCr,DCr,YM,FTe,GCr,OCr,wJ,VCr,XCr,zCr,KM,TTe,QCr,WCr,AJ,HCr,UCr,JCr,ZM,MTe,YCr,KCr,LJ,ZCr,e3r,o3r,eE,ETe,r3r,t3r,yJ,a3r,n3r,s3r,oE,CTe,l3r,i3r,xJ,d3r,c3r,f3r,rE,wTe,m3r,g3r,$J,h3r,p3r,_3r,tE,ATe,u3r,b3r,kJ,v3r,F3r,T3r,aE,LTe,M3r,E3r,SJ,C3r,w3r,A3r,nE,yTe,L3r,y3r,RJ,x3r,$3r,k3r,sE,xTe,S3r,R3r,PJ,P3r,B3r,I3r,lE,$Te,N3r,q3r,BJ,j3r,D3r,G3r,iE,kTe,O3r,V3r,IJ,X3r,z3r,Q3r,dE,STe,W3r,H3r,NJ,U3r,J3r,Y3r,cE,RTe,K3r,Z3r,qJ,e0r,o0r,r0r,fE,PTe,t0r,a0r,jJ,n0r,s0r,l0r,mE,BTe,i0r,d0r,DJ,c0r,f0r,m0r,gE,ITe,g0r,h0r,GJ,p0r,_0r,u0r,hE,NTe,b0r,v0r,OJ,F0r,T0r,M0r,pE,HVe,bc,_E,qTe,Y9,E0r,jTe,C0r,UVe,nr,K9,w0r,vc,A0r,VJ,L0r,y0r,XJ,x0r,$0r,k0r,Z9,S0r,DTe,R0r,P0r,B0r,It,ex,I0r,GTe,N0r,q0r,Fc,j0r,OTe,D0r,G0r,zJ,O0r,V0r,X0r,uE,z0r,Rr,ox,Q0r,VTe,W0r,H0r,fn,U0r,XTe,J0r,Y0r,zTe,K0r,Z0r,QTe,ewr,owr,rwr,ye,bE,WTe,twr,awr,QJ,nwr,swr,lwr,vE,HTe,iwr,dwr,WJ,cwr,fwr,mwr,FE,UTe,gwr,hwr,HJ,pwr,_wr,uwr,TE,JTe,bwr,vwr,UJ,Fwr,Twr,Mwr,ME,YTe,Ewr,Cwr,JJ,wwr,Awr,Lwr,EE,KTe,ywr,xwr,YJ,$wr,kwr,Swr,CE,ZTe,Rwr,Pwr,KJ,Bwr,Iwr,Nwr,wE,e7e,qwr,jwr,ZJ,Dwr,Gwr,Owr,AE,o7e,Vwr,Xwr,eY,zwr,Qwr,Wwr,LE,r7e,Hwr,Uwr,oY,Jwr,Ywr,Kwr,yE,JVe,Tc,xE,t7e,rx,Zwr,a7e,eAr,YVe,sr,tx,oAr,Mc,rAr,rY,tAr,aAr,tY,nAr,sAr,lAr,ax,iAr,n7e,dAr,cAr,fAr,Nt,nx,mAr,s7e,gAr,hAr,Ec,pAr,l7e,_Ar,uAr,aY,bAr,vAr,FAr,$E,TAr,Pr,sx,MAr,i7e,EAr,CAr,mn,wAr,d7e,AAr,LAr,c7e,yAr,xAr,f7e,$Ar,kAr,SAr,te,kE,m7e,RAr,PAr,nY,BAr,IAr,NAr,SE,g7e,qAr,jAr,sY,DAr,GAr,OAr,RE,h7e,VAr,XAr,lY,zAr,QAr,WAr,PE,p7e,HAr,UAr,iY,JAr,YAr,KAr,BE,_7e,ZAr,e6r,dY,o6r,r6r,t6r,IE,u7e,a6r,n6r,cY,s6r,l6r,i6r,NE,b7e,d6r,c6r,fY,f6r,m6r,g6r,qE,v7e,h6r,p6r,mY,_6r,u6r,b6r,jE,F7e,v6r,F6r,gY,T6r,M6r,E6r,DE,T7e,C6r,w6r,hY,A6r,L6r,y6r,GE,M7e,x6r,$6r,pY,k6r,S6r,R6r,OE,E7e,P6r,B6r,_Y,I6r,N6r,q6r,VE,C7e,j6r,D6r,uY,G6r,O6r,V6r,XE,w7e,X6r,z6r,bY,Q6r,W6r,H6r,zE,A7e,U6r,J6r,vY,Y6r,K6r,Z6r,QE,L7e,eLr,oLr,FY,rLr,tLr,aLr,WE,y7e,nLr,sLr,TY,lLr,iLr,dLr,HE,x7e,cLr,fLr,MY,mLr,gLr,hLr,UE,$7e,pLr,_Lr,EY,uLr,bLr,vLr,JE,k7e,FLr,TLr,CY,MLr,ELr,CLr,YE,S7e,wLr,ALr,wY,LLr,yLr,xLr,KE,R7e,$Lr,kLr,AY,SLr,RLr,PLr,ZE,P7e,BLr,ILr,LY,NLr,qLr,jLr,eC,B7e,DLr,GLr,yY,OLr,VLr,XLr,oC,I7e,zLr,QLr,xY,WLr,HLr,ULr,rC,N7e,JLr,YLr,$Y,KLr,ZLr,eyr,tC,KVe,Cc,aC,q7e,lx,oyr,j7e,ryr,ZVe,lr,ix,tyr,wc,ayr,kY,nyr,syr,SY,lyr,iyr,dyr,dx,cyr,D7e,fyr,myr,gyr,qt,cx,hyr,G7e,pyr,_yr,Ac,uyr,O7e,byr,vyr,RY,Fyr,Tyr,Myr,nC,Eyr,Br,fx,Cyr,V7e,wyr,Ayr,gn,Lyr,X7e,yyr,xyr,z7e,$yr,kyr,Q7e,Syr,Ryr,Pyr,_e,sC,W7e,Byr,Iyr,PY,Nyr,qyr,jyr,lC,H7e,Dyr,Gyr,BY,Oyr,Vyr,Xyr,iC,U7e,zyr,Qyr,IY,Wyr,Hyr,Uyr,dC,J7e,Jyr,Yyr,NY,Kyr,Zyr,e8r,cC,Y7e,o8r,r8r,qY,t8r,a8r,n8r,fC,K7e,s8r,l8r,jY,i8r,d8r,c8r,mC,Z7e,f8r,m8r,DY,g8r,h8r,p8r,gC,eMe,_8r,u8r,GY,b8r,v8r,F8r,hC,oMe,T8r,M8r,OY,E8r,C8r,w8r,pC,rMe,A8r,L8r,VY,y8r,x8r,$8r,_C,tMe,k8r,S8r,XY,R8r,P8r,B8r,uC,aMe,I8r,N8r,zY,q8r,j8r,D8r,bC,nMe,G8r,O8r,QY,V8r,X8r,z8r,vC,sMe,Q8r,W8r,WY,H8r,U8r,J8r,FC,lMe,Y8r,K8r,HY,Z8r,e9r,o9r,TC,iMe,r9r,t9r,UY,a9r,n9r,s9r,MC,dMe,l9r,i9r,JY,d9r,c9r,f9r,EC,eXe,Lc,CC,cMe,mx,m9r,fMe,g9r,oXe,ir,gx,h9r,yc,p9r,YY,_9r,u9r,KY,b9r,v9r,F9r,hx,T9r,mMe,M9r,E9r,C9r,jt,px,w9r,gMe,A9r,L9r,xc,y9r,hMe,x9r,$9r,ZY,k9r,S9r,R9r,wC,P9r,Ir,_x,B9r,pMe,I9r,N9r,hn,q9r,_Me,j9r,D9r,uMe,G9r,O9r,bMe,V9r,X9r,z9r,ux,AC,vMe,Q9r,W9r,eK,H9r,U9r,J9r,LC,FMe,Y9r,K9r,oK,Z9r,exr,oxr,yC,rXe,$c,xC,TMe,bx,rxr,MMe,txr,tXe,dr,vx,axr,kc,nxr,rK,sxr,lxr,tK,ixr,dxr,cxr,Fx,fxr,EMe,mxr,gxr,hxr,Dt,Tx,pxr,CMe,_xr,uxr,Sc,bxr,wMe,vxr,Fxr,aK,Txr,Mxr,Exr,$C,Cxr,Nr,Mx,wxr,AMe,Axr,Lxr,pn,yxr,LMe,xxr,$xr,yMe,kxr,Sxr,xMe,Rxr,Pxr,Bxr,$Me,kC,kMe,Ixr,Nxr,nK,qxr,jxr,Dxr,SC,aXe,Rc,RC,SMe,Ex,Gxr,RMe,Oxr,nXe,cr,Cx,Vxr,Pc,Xxr,sK,zxr,Qxr,lK,Wxr,Hxr,Uxr,wx,Jxr,PMe,Yxr,Kxr,Zxr,Gt,Ax,e$r,BMe,o$r,r$r,Bc,t$r,IMe,a$r,n$r,iK,s$r,l$r,i$r,PC,d$r,qr,Lx,c$r,NMe,f$r,m$r,_n,g$r,qMe,h$r,p$r,jMe,_$r,u$r,DMe,b$r,v$r,F$r,de,BC,GMe,T$r,M$r,dK,E$r,C$r,w$r,IC,OMe,A$r,L$r,cK,y$r,x$r,$$r,NC,VMe,k$r,S$r,fK,R$r,P$r,B$r,qC,XMe,I$r,N$r,mK,q$r,j$r,D$r,jC,zMe,G$r,O$r,gK,V$r,X$r,z$r,DC,QMe,Q$r,W$r,hK,H$r,U$r,J$r,GC,WMe,Y$r,K$r,pK,Z$r,ekr,okr,OC,HMe,rkr,tkr,_K,akr,nkr,skr,VC,UMe,lkr,ikr,uK,dkr,ckr,fkr,XC,JMe,mkr,gkr,bK,hkr,pkr,_kr,zC,YMe,ukr,bkr,vK,vkr,Fkr,Tkr,QC,KMe,Mkr,Ekr,FK,Ckr,wkr,Akr,WC,ZMe,Lkr,ykr,TK,xkr,$kr,kkr,HC,eEe,Skr,Rkr,MK,Pkr,Bkr,Ikr,UC,oEe,Nkr,qkr,EK,jkr,Dkr,Gkr,JC,rEe,Okr,Vkr,CK,Xkr,zkr,Qkr,YC,tEe,Wkr,Hkr,wK,Ukr,Jkr,Ykr,KC,aEe,Kkr,Zkr,AK,eSr,oSr,rSr,ZC,nEe,tSr,aSr,LK,nSr,sSr,lSr,e3,sEe,iSr,dSr,yK,cSr,fSr,mSr,o3,sXe,Ic,r3,lEe,yx,gSr,iEe,hSr,lXe,fr,xx,pSr,Nc,_Sr,xK,uSr,bSr,$K,vSr,FSr,TSr,$x,MSr,dEe,ESr,CSr,wSr,Ot,kx,ASr,cEe,LSr,ySr,qc,xSr,fEe,$Sr,kSr,kK,SSr,RSr,PSr,t3,BSr,jr,Sx,ISr,mEe,NSr,qSr,un,jSr,gEe,DSr,GSr,hEe,OSr,VSr,pEe,XSr,zSr,QSr,ce,a3,_Ee,WSr,HSr,SK,USr,JSr,YSr,n3,uEe,KSr,ZSr,RK,eRr,oRr,rRr,s3,bEe,tRr,aRr,PK,nRr,sRr,lRr,l3,vEe,iRr,dRr,BK,cRr,fRr,mRr,i3,FEe,gRr,hRr,IK,pRr,_Rr,uRr,d3,TEe,bRr,vRr,NK,FRr,TRr,MRr,c3,MEe,ERr,CRr,qK,wRr,ARr,LRr,f3,EEe,yRr,xRr,jK,$Rr,kRr,SRr,m3,CEe,RRr,PRr,DK,BRr,IRr,NRr,g3,wEe,qRr,jRr,GK,DRr,GRr,ORr,h3,AEe,VRr,XRr,OK,zRr,QRr,WRr,p3,LEe,HRr,URr,VK,JRr,YRr,KRr,_3,yEe,ZRr,ePr,XK,oPr,rPr,tPr,u3,xEe,aPr,nPr,zK,sPr,lPr,iPr,b3,$Ee,dPr,cPr,QK,fPr,mPr,gPr,v3,kEe,hPr,pPr,WK,_Pr,uPr,bPr,F3,SEe,vPr,FPr,HK,TPr,MPr,EPr,T3,REe,CPr,wPr,UK,APr,LPr,yPr,M3,PEe,xPr,$Pr,JK,kPr,SPr,RPr,E3,BEe,PPr,BPr,YK,IPr,NPr,qPr,C3,iXe,jc,w3,IEe,Rx,jPr,NEe,DPr,dXe,mr,Px,GPr,Dc,OPr,KK,VPr,XPr,ZK,zPr,QPr,WPr,Bx,HPr,qEe,UPr,JPr,YPr,Vt,Ix,KPr,jEe,ZPr,eBr,Gc,oBr,DEe,rBr,tBr,eZ,aBr,nBr,sBr,A3,lBr,Dr,Nx,iBr,GEe,dBr,cBr,bn,fBr,OEe,mBr,gBr,VEe,hBr,pBr,XEe,_Br,uBr,bBr,zEe,L3,QEe,vBr,FBr,oZ,TBr,MBr,EBr,y3,cXe,Oc,x3,WEe,qx,CBr,HEe,wBr,fXe,gr,jx,ABr,Vc,LBr,rZ,yBr,xBr,tZ,$Br,kBr,SBr,Dx,RBr,UEe,PBr,BBr,IBr,Xt,Gx,NBr,JEe,qBr,jBr,Xc,DBr,YEe,GBr,OBr,aZ,VBr,XBr,zBr,$3,QBr,Gr,Ox,WBr,KEe,HBr,UBr,vn,JBr,ZEe,YBr,KBr,eCe,ZBr,eIr,oCe,oIr,rIr,tIr,rCe,k3,tCe,aIr,nIr,nZ,sIr,lIr,iIr,S3,mXe,zc,R3,aCe,Vx,dIr,nCe,cIr,gXe,hr,Xx,fIr,Qc,mIr,sZ,gIr,hIr,lZ,pIr,_Ir,uIr,zx,bIr,sCe,vIr,FIr,TIr,zt,Qx,MIr,lCe,EIr,CIr,Wc,wIr,iCe,AIr,LIr,iZ,yIr,xIr,$Ir,P3,kIr,Or,Wx,SIr,dCe,RIr,PIr,Fn,BIr,cCe,IIr,NIr,fCe,qIr,jIr,mCe,DIr,GIr,OIr,oe,B3,gCe,VIr,XIr,dZ,zIr,QIr,WIr,I3,hCe,HIr,UIr,cZ,JIr,YIr,KIr,N3,pCe,ZIr,eNr,fZ,oNr,rNr,tNr,q3,_Ce,aNr,nNr,mZ,sNr,lNr,iNr,j3,uCe,dNr,cNr,gZ,fNr,mNr,gNr,D3,bCe,hNr,pNr,hZ,_Nr,uNr,bNr,G3,vCe,vNr,FNr,pZ,TNr,MNr,ENr,O3,FCe,CNr,wNr,_Z,ANr,LNr,yNr,V3,TCe,xNr,$Nr,uZ,kNr,SNr,RNr,X3,MCe,PNr,BNr,bZ,INr,NNr,qNr,z3,ECe,jNr,DNr,vZ,GNr,ONr,VNr,Q3,CCe,XNr,zNr,FZ,QNr,WNr,HNr,W3,wCe,UNr,JNr,TZ,YNr,KNr,ZNr,H3,ACe,eqr,oqr,MZ,rqr,tqr,aqr,U3,LCe,nqr,sqr,EZ,lqr,iqr,dqr,J3,yCe,cqr,fqr,CZ,mqr,gqr,hqr,Y3,xCe,pqr,_qr,wZ,uqr,bqr,vqr,K3,$Ce,Fqr,Tqr,AZ,Mqr,Eqr,Cqr,Z3,kCe,wqr,Aqr,LZ,Lqr,yqr,xqr,e0,SCe,$qr,kqr,yZ,Sqr,Rqr,Pqr,o0,RCe,Bqr,Iqr,xZ,Nqr,qqr,jqr,r0,PCe,Dqr,Gqr,$Z,Oqr,Vqr,Xqr,t0,BCe,zqr,Qqr,kZ,Wqr,Hqr,Uqr,a0,ICe,Jqr,Yqr,SZ,Kqr,Zqr,ejr,n0,NCe,ojr,rjr,RZ,tjr,ajr,njr,s0,qCe,sjr,ljr,PZ,ijr,djr,cjr,l0,jCe,fjr,mjr,BZ,gjr,hjr,pjr,i0,hXe,Hc,d0,DCe,Hx,_jr,GCe,ujr,pXe,pr,Ux,bjr,Uc,vjr,IZ,Fjr,Tjr,NZ,Mjr,Ejr,Cjr,Jx,wjr,OCe,Ajr,Ljr,yjr,Qt,Yx,xjr,VCe,$jr,kjr,Jc,Sjr,XCe,Rjr,Pjr,qZ,Bjr,Ijr,Njr,c0,qjr,Vr,Kx,jjr,zCe,Djr,Gjr,Tn,Ojr,QCe,Vjr,Xjr,WCe,zjr,Qjr,HCe,Wjr,Hjr,Ujr,xe,f0,UCe,Jjr,Yjr,jZ,Kjr,Zjr,eDr,m0,JCe,oDr,rDr,DZ,tDr,aDr,nDr,g0,YCe,sDr,lDr,GZ,iDr,dDr,cDr,h0,KCe,fDr,mDr,OZ,gDr,hDr,pDr,p0,ZCe,_Dr,uDr,VZ,bDr,vDr,FDr,_0,e3e,TDr,MDr,XZ,EDr,CDr,wDr,u0,o3e,ADr,LDr,zZ,yDr,xDr,$Dr,b0,r3e,kDr,SDr,QZ,RDr,PDr,BDr,v0,t3e,IDr,NDr,WZ,qDr,jDr,DDr,F0,a3e,GDr,ODr,HZ,VDr,XDr,zDr,T0,_Xe,Yc,M0,n3e,Zx,QDr,s3e,WDr,uXe,_r,e$,HDr,Kc,UDr,UZ,JDr,YDr,JZ,KDr,ZDr,eGr,o$,oGr,l3e,rGr,tGr,aGr,Wt,r$,nGr,i3e,sGr,lGr,Zc,iGr,d3e,dGr,cGr,YZ,fGr,mGr,gGr,E0,hGr,Xr,t$,pGr,c3e,_Gr,uGr,Mn,bGr,f3e,vGr,FGr,m3e,TGr,MGr,g3e,EGr,CGr,wGr,Ee,C0,h3e,AGr,LGr,KZ,yGr,xGr,$Gr,w0,p3e,kGr,SGr,ZZ,RGr,PGr,BGr,A0,_3e,IGr,NGr,eee,qGr,jGr,DGr,L0,u3e,GGr,OGr,oee,VGr,XGr,zGr,y0,b3e,QGr,WGr,ree,HGr,UGr,JGr,x0,v3e,YGr,KGr,tee,ZGr,eOr,oOr,$0,F3e,rOr,tOr,aee,aOr,nOr,sOr,k0,T3e,lOr,iOr,nee,dOr,cOr,fOr,S0,M3e,mOr,gOr,see,hOr,pOr,_Or,R0,E3e,uOr,bOr,lee,vOr,FOr,TOr,P0,C3e,MOr,EOr,iee,COr,wOr,AOr,B0,w3e,LOr,yOr,dee,xOr,$Or,kOr,I0,A3e,SOr,ROr,cee,POr,BOr,IOr,N0,bXe,ef,q0,L3e,a$,NOr,y3e,qOr,vXe,ur,n$,jOr,of,DOr,fee,GOr,OOr,mee,VOr,XOr,zOr,s$,QOr,x3e,WOr,HOr,UOr,Ht,l$,JOr,$3e,YOr,KOr,rf,ZOr,k3e,eVr,oVr,gee,rVr,tVr,aVr,j0,nVr,zr,i$,sVr,S3e,lVr,iVr,En,dVr,R3e,cVr,fVr,P3e,mVr,gVr,B3e,hVr,pVr,_Vr,$e,D0,I3e,uVr,bVr,hee,vVr,FVr,TVr,G0,N3e,MVr,EVr,pee,CVr,wVr,AVr,O0,q3e,LVr,yVr,_ee,xVr,$Vr,kVr,V0,j3e,SVr,RVr,uee,PVr,BVr,IVr,X0,D3e,NVr,qVr,bee,jVr,DVr,GVr,z0,G3e,OVr,VVr,vee,XVr,zVr,QVr,Q0,O3e,WVr,HVr,Fee,UVr,JVr,YVr,W0,V3e,KVr,ZVr,Tee,eXr,oXr,rXr,H0,X3e,tXr,aXr,Mee,nXr,sXr,lXr,U0,z3e,iXr,dXr,Eee,cXr,fXr,mXr,J0,FXe,tf,Y0,Q3e,d$,gXr,W3e,hXr,TXe,br,c$,pXr,af,_Xr,Cee,uXr,bXr,wee,vXr,FXr,TXr,f$,MXr,H3e,EXr,CXr,wXr,Ut,m$,AXr,U3e,LXr,yXr,nf,xXr,J3e,$Xr,kXr,Aee,SXr,RXr,PXr,K0,BXr,Qr,g$,IXr,Y3e,NXr,qXr,Cn,jXr,K3e,DXr,GXr,Z3e,OXr,VXr,e0e,XXr,zXr,QXr,ke,Z0,o0e,WXr,HXr,Lee,UXr,JXr,YXr,ew,r0e,KXr,ZXr,yee,ezr,ozr,rzr,ow,t0e,tzr,azr,xee,nzr,szr,lzr,rw,a0e,izr,dzr,$ee,czr,fzr,mzr,tw,n0e,gzr,hzr,kee,pzr,_zr,uzr,aw,s0e,bzr,vzr,See,Fzr,Tzr,Mzr,nw,l0e,Ezr,Czr,Ree,wzr,Azr,Lzr,sw,i0e,yzr,xzr,Pee,$zr,kzr,Szr,lw,d0e,Rzr,Pzr,Bee,Bzr,Izr,Nzr,iw,c0e,qzr,jzr,Iee,Dzr,Gzr,Ozr,dw,MXe,sf,cw,f0e,h$,Vzr,m0e,Xzr,EXe,vr,p$,zzr,lf,Qzr,Nee,Wzr,Hzr,qee,Uzr,Jzr,Yzr,_$,Kzr,g0e,Zzr,eQr,oQr,Jt,u$,rQr,h0e,tQr,aQr,df,nQr,p0e,sQr,lQr,jee,iQr,dQr,cQr,fw,fQr,Wr,b$,mQr,_0e,gQr,hQr,wn,pQr,u0e,_Qr,uQr,b0e,bQr,vQr,v0e,FQr,TQr,MQr,Se,mw,F0e,EQr,CQr,Dee,wQr,AQr,LQr,gw,T0e,yQr,xQr,Gee,$Qr,kQr,SQr,hw,M0e,RQr,PQr,Oee,BQr,IQr,NQr,pw,E0e,qQr,jQr,Vee,DQr,GQr,OQr,_w,C0e,VQr,XQr,Xee,zQr,QQr,WQr,uw,w0e,HQr,UQr,zee,JQr,YQr,KQr,bw,A0e,ZQr,eWr,Qee,oWr,rWr,tWr,vw,L0e,aWr,nWr,Wee,sWr,lWr,iWr,Fw,y0e,dWr,cWr,Hee,fWr,mWr,gWr,Tw,x0e,hWr,pWr,Uee,_Wr,uWr,bWr,Mw,CXe,cf,Ew,$0e,v$,vWr,k0e,FWr,wXe,Fr,F$,TWr,ff,MWr,Jee,EWr,CWr,Yee,wWr,AWr,LWr,T$,yWr,S0e,xWr,$Wr,kWr,Yt,M$,SWr,R0e,RWr,PWr,mf,BWr,P0e,IWr,NWr,Kee,qWr,jWr,DWr,Cw,GWr,Hr,E$,OWr,B0e,VWr,XWr,An,zWr,I0e,QWr,WWr,N0e,HWr,UWr,q0e,JWr,YWr,KWr,Re,ww,j0e,ZWr,eHr,Zee,oHr,rHr,tHr,Aw,D0e,aHr,nHr,eoe,sHr,lHr,iHr,Lw,G0e,dHr,cHr,ooe,fHr,mHr,gHr,yw,O0e,hHr,pHr,roe,_Hr,uHr,bHr,xw,V0e,vHr,FHr,toe,THr,MHr,EHr,$w,X0e,CHr,wHr,aoe,AHr,LHr,yHr,kw,z0e,xHr,$Hr,noe,kHr,SHr,RHr,Sw,Q0e,PHr,BHr,soe,IHr,NHr,qHr,Rw,W0e,jHr,DHr,loe,GHr,OHr,VHr,Pw,H0e,XHr,zHr,ioe,QHr,WHr,HHr,Bw,AXe,gf,Iw,U0e,C$,UHr,J0e,JHr,LXe,Tr,w$,YHr,hf,KHr,doe,ZHr,eUr,coe,oUr,rUr,tUr,A$,aUr,Y0e,nUr,sUr,lUr,Kt,L$,iUr,K0e,dUr,cUr,pf,fUr,Z0e,mUr,gUr,foe,hUr,pUr,_Ur,Nw,uUr,Ur,y$,bUr,ewe,vUr,FUr,Ln,TUr,owe,MUr,EUr,rwe,CUr,wUr,twe,AUr,LUr,yUr,Ve,qw,awe,xUr,$Ur,moe,kUr,SUr,RUr,jw,nwe,PUr,BUr,goe,IUr,NUr,qUr,Dw,swe,jUr,DUr,hoe,GUr,OUr,VUr,Gw,lwe,XUr,zUr,poe,QUr,WUr,HUr,Ow,iwe,UUr,JUr,_oe,YUr,KUr,ZUr,Vw,dwe,eJr,oJr,uoe,rJr,tJr,aJr,Xw,cwe,nJr,sJr,boe,lJr,iJr,dJr,zw,fwe,cJr,fJr,voe,mJr,gJr,hJr,Qw,yXe,_f,Ww,mwe,x$,pJr,gwe,_Jr,xXe,Mr,$$,uJr,uf,bJr,Foe,vJr,FJr,Toe,TJr,MJr,EJr,k$,CJr,hwe,wJr,AJr,LJr,Zt,S$,yJr,pwe,xJr,$Jr,bf,kJr,_we,SJr,RJr,Moe,PJr,BJr,IJr,Hw,NJr,Jr,R$,qJr,uwe,jJr,DJr,yn,GJr,bwe,OJr,VJr,vwe,XJr,zJr,Fwe,QJr,WJr,HJr,Xe,Uw,Twe,UJr,JJr,Eoe,YJr,KJr,ZJr,Jw,Mwe,eYr,oYr,Coe,rYr,tYr,aYr,Yw,Ewe,nYr,sYr,woe,lYr,iYr,dYr,Kw,Cwe,cYr,fYr,Aoe,mYr,gYr,hYr,Zw,wwe,pYr,_Yr,Loe,uYr,bYr,vYr,eA,Awe,FYr,TYr,yoe,MYr,EYr,CYr,oA,Lwe,wYr,AYr,xoe,LYr,yYr,xYr,rA,ywe,$Yr,kYr,$oe,SYr,RYr,PYr,tA,$Xe,vf,aA,xwe,P$,BYr,$we,IYr,kXe,Er,B$,NYr,Ff,qYr,koe,jYr,DYr,Soe,GYr,OYr,VYr,I$,XYr,kwe,zYr,QYr,WYr,ea,N$,HYr,Swe,UYr,JYr,Tf,YYr,Rwe,KYr,ZYr,Roe,eKr,oKr,rKr,nA,tKr,Yr,q$,aKr,Pwe,nKr,sKr,xn,lKr,Bwe,iKr,dKr,Iwe,cKr,fKr,Nwe,mKr,gKr,hKr,qwe,sA,jwe,pKr,_Kr,Poe,uKr,bKr,vKr,lA,SXe,Mf,iA,Dwe,j$,FKr,Gwe,TKr,RXe,Cr,D$,MKr,Ef,EKr,Boe,CKr,wKr,Ioe,AKr,LKr,yKr,G$,xKr,Owe,$Kr,kKr,SKr,oa,O$,RKr,Vwe,PKr,BKr,Cf,IKr,Xwe,NKr,qKr,Noe,jKr,DKr,GKr,dA,OKr,Kr,V$,VKr,zwe,XKr,zKr,$n,QKr,Qwe,WKr,HKr,Wwe,UKr,JKr,Hwe,YKr,KKr,ZKr,X$,cA,Uwe,eZr,oZr,qoe,rZr,tZr,aZr,fA,Jwe,nZr,sZr,joe,lZr,iZr,dZr,mA,PXe,wf,gA,Ywe,z$,cZr,Kwe,fZr,BXe,wr,Q$,mZr,Af,gZr,Doe,hZr,pZr,Goe,_Zr,uZr,bZr,W$,vZr,Zwe,FZr,TZr,MZr,ra,H$,EZr,eAe,CZr,wZr,Lf,AZr,oAe,LZr,yZr,Ooe,xZr,$Zr,kZr,hA,SZr,Zr,U$,RZr,rAe,PZr,BZr,kn,IZr,tAe,NZr,qZr,aAe,jZr,DZr,nAe,GZr,OZr,VZr,sAe,pA,lAe,XZr,zZr,Voe,QZr,WZr,HZr,_A,IXe;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),DL=new re({}),GL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),If=new UZr({props:{warning:!0,$$slots:{default:[zOt]},$$scope:{ctx:$}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/configuration_auto.py#L604"}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/configuration_auto.py#L627"}}),Qg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),WL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/configuration_auto.py#L750"}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/tokenization_auto.py#L402"}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17554/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/tokenization_auto.py#L416"}}),yh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/tokenization_auto.py#L615"}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17554/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),cp=new UZr({props:{$$slots:{default:[HOt]},$$scope:{ctx:$}}}),fp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/processing_auto.py#L89"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/processing_auto.py#L103"}}),Sp=new UZr({props:{$$slots:{default:[JOt]},$$scope:{ctx:$}}}),Rp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/processing_auto.py#L256"}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L771"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Ip=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),qu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L778"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Du=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L793"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L800"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),i2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L807"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),c2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L816"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L861"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),ib=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L868"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),cb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),bb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L854"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Fb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L825"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L832"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L877"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L916"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L843"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L923"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L946"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L930"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L937"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L955"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L962"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L909"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),f9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L884"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),_9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L891"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_auto.py#L900"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),A9=new re({}),L9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),k9=new re({}),S9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),I9=new re({}),N9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),G9=new re({}),O9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),X9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),Q9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bXt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vXt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[FXt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[TXt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[MXt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[EXt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[CXt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wXt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[AXt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LXt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yXt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xXt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Xt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kXt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SXt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RXt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[PXt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BXt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[IXt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[NXt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qXt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jXt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[DXt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[GXt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[OXt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17554/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17554/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17554/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[VXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ci=o("Auto Classes"),kf=l(),nt=a("p"),wi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ai=a("code"),IL=o("from_pretrained()"),Sf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Li=o("Instantiating one of "),Rn=a("a"),NL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),qL=o("AutoModel"),yi=o(`, and
`),In=a("a"),jL=o("AutoTokenizer"),xi=o(" will directly create a class of the relevant architecture. For instance"),Rf=l(),F($a.$$.fragment),We=l(),Ae=a("p"),pS=o("will create a model that is an instance of "),$i=a("a"),_S=o("BertModel"),uS=o("."),Co=l(),ka=a("p"),bS=o("There is one class of "),Pf=a("code"),vS=o("AutoModel"),QQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kOe=l(),ki=a("h2"),Bf=a("a"),qte=a("span"),F(DL.$$.fragment),WQe=l(),jte=a("span"),HQe=o("Extending the Auto Classes"),SOe=l(),Nn=a("p"),UQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dte=a("code"),JQe=o("NewModel"),YQe=o(", make sure you have a "),Gte=a("code"),KQe=o("NewModelConfig"),ZQe=o(` then you can add those to the auto
classes like this:`),ROe=l(),F(GL.$$.fragment),POe=l(),FS=a("p"),eWe=o("You will then be able to use the auto classes like you would usually do!"),BOe=l(),F(If.$$.fragment),IOe=l(),Si=a("h2"),Nf=a("a"),Ote=a("span"),F(OL.$$.fragment),oWe=l(),Vte=a("span"),rWe=o("AutoConfig"),NOe=l(),wo=a("div"),F(VL.$$.fragment),tWe=l(),XL=a("p"),aWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TS=a("a"),nWe=o("from_pretrained()"),sWe=o(" class method."),lWe=l(),zL=a("p"),iWe=o("This class cannot be instantiated directly using "),Xte=a("code"),dWe=o("__init__()"),cWe=o(" (throws an error)."),fWe=l(),Ar=a("div"),F(QL.$$.fragment),mWe=l(),zte=a("p"),gWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hWe=l(),Ri=a("p"),pWe=o("The configuration class to instantiate is selected based on the "),Qte=a("code"),_We=o("model_type"),uWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wte=a("code"),bWe=o("pretrained_model_name_or_path"),vWe=o(":"),FWe=l(),A=a("ul"),qf=a("li"),Hte=a("strong"),TWe=o("albert"),MWe=o(" \u2014 "),MS=a("a"),EWe=o("AlbertConfig"),CWe=o(" (ALBERT model)"),wWe=l(),jf=a("li"),Ute=a("strong"),AWe=o("bart"),LWe=o(" \u2014 "),ES=a("a"),yWe=o("BartConfig"),xWe=o(" (BART model)"),$We=l(),Df=a("li"),Jte=a("strong"),kWe=o("beit"),SWe=o(" \u2014 "),CS=a("a"),RWe=o("BeitConfig"),PWe=o(" (BEiT model)"),BWe=l(),Gf=a("li"),Yte=a("strong"),IWe=o("bert"),NWe=o(" \u2014 "),wS=a("a"),qWe=o("BertConfig"),jWe=o(" (BERT model)"),DWe=l(),Of=a("li"),Kte=a("strong"),GWe=o("bert-generation"),OWe=o(" \u2014 "),AS=a("a"),VWe=o("BertGenerationConfig"),XWe=o(" (Bert Generation model)"),zWe=l(),Vf=a("li"),Zte=a("strong"),QWe=o("big_bird"),WWe=o(" \u2014 "),LS=a("a"),HWe=o("BigBirdConfig"),UWe=o(" (BigBird model)"),JWe=l(),Xf=a("li"),eae=a("strong"),YWe=o("bigbird_pegasus"),KWe=o(" \u2014 "),yS=a("a"),ZWe=o("BigBirdPegasusConfig"),eHe=o(" (BigBird-Pegasus model)"),oHe=l(),zf=a("li"),oae=a("strong"),rHe=o("blenderbot"),tHe=o(" \u2014 "),xS=a("a"),aHe=o("BlenderbotConfig"),nHe=o(" (Blenderbot model)"),sHe=l(),Qf=a("li"),rae=a("strong"),lHe=o("blenderbot-small"),iHe=o(" \u2014 "),$S=a("a"),dHe=o("BlenderbotSmallConfig"),cHe=o(" (BlenderbotSmall model)"),fHe=l(),Wf=a("li"),tae=a("strong"),mHe=o("bloom"),gHe=o(" \u2014 "),kS=a("a"),hHe=o("BloomConfig"),pHe=o(" (BLOOM model)"),_He=l(),Hf=a("li"),aae=a("strong"),uHe=o("camembert"),bHe=o(" \u2014 "),SS=a("a"),vHe=o("CamembertConfig"),FHe=o(" (CamemBERT model)"),THe=l(),Uf=a("li"),nae=a("strong"),MHe=o("canine"),EHe=o(" \u2014 "),RS=a("a"),CHe=o("CanineConfig"),wHe=o(" (CANINE model)"),AHe=l(),Jf=a("li"),sae=a("strong"),LHe=o("clip"),yHe=o(" \u2014 "),PS=a("a"),xHe=o("CLIPConfig"),$He=o(" (CLIP model)"),kHe=l(),Yf=a("li"),lae=a("strong"),SHe=o("codegen"),RHe=o(" \u2014 "),BS=a("a"),PHe=o("CodeGenConfig"),BHe=o(" (CodeGen model)"),IHe=l(),Kf=a("li"),iae=a("strong"),NHe=o("convbert"),qHe=o(" \u2014 "),IS=a("a"),jHe=o("ConvBertConfig"),DHe=o(" (ConvBERT model)"),GHe=l(),Zf=a("li"),dae=a("strong"),OHe=o("convnext"),VHe=o(" \u2014 "),NS=a("a"),XHe=o("ConvNextConfig"),zHe=o(" (ConvNeXT model)"),QHe=l(),em=a("li"),cae=a("strong"),WHe=o("ctrl"),HHe=o(" \u2014 "),qS=a("a"),UHe=o("CTRLConfig"),JHe=o(" (CTRL model)"),YHe=l(),om=a("li"),fae=a("strong"),KHe=o("cvt"),ZHe=o(" \u2014 "),jS=a("a"),eUe=o("CvtConfig"),oUe=o(" (CvT model)"),rUe=l(),rm=a("li"),mae=a("strong"),tUe=o("data2vec-audio"),aUe=o(" \u2014 "),DS=a("a"),nUe=o("Data2VecAudioConfig"),sUe=o(" (Data2VecAudio model)"),lUe=l(),tm=a("li"),gae=a("strong"),iUe=o("data2vec-text"),dUe=o(" \u2014 "),GS=a("a"),cUe=o("Data2VecTextConfig"),fUe=o(" (Data2VecText model)"),mUe=l(),am=a("li"),hae=a("strong"),gUe=o("data2vec-vision"),hUe=o(" \u2014 "),OS=a("a"),pUe=o("Data2VecVisionConfig"),_Ue=o(" (Data2VecVision model)"),uUe=l(),nm=a("li"),pae=a("strong"),bUe=o("deberta"),vUe=o(" \u2014 "),VS=a("a"),FUe=o("DebertaConfig"),TUe=o(" (DeBERTa model)"),MUe=l(),sm=a("li"),_ae=a("strong"),EUe=o("deberta-v2"),CUe=o(" \u2014 "),XS=a("a"),wUe=o("DebertaV2Config"),AUe=o(" (DeBERTa-v2 model)"),LUe=l(),lm=a("li"),uae=a("strong"),yUe=o("decision_transformer"),xUe=o(" \u2014 "),zS=a("a"),$Ue=o("DecisionTransformerConfig"),kUe=o(" (Decision Transformer model)"),SUe=l(),im=a("li"),bae=a("strong"),RUe=o("deit"),PUe=o(" \u2014 "),QS=a("a"),BUe=o("DeiTConfig"),IUe=o(" (DeiT model)"),NUe=l(),dm=a("li"),vae=a("strong"),qUe=o("detr"),jUe=o(" \u2014 "),WS=a("a"),DUe=o("DetrConfig"),GUe=o(" (DETR model)"),OUe=l(),cm=a("li"),Fae=a("strong"),VUe=o("distilbert"),XUe=o(" \u2014 "),HS=a("a"),zUe=o("DistilBertConfig"),QUe=o(" (DistilBERT model)"),WUe=l(),fm=a("li"),Tae=a("strong"),HUe=o("dpr"),UUe=o(" \u2014 "),US=a("a"),JUe=o("DPRConfig"),YUe=o(" (DPR model)"),KUe=l(),mm=a("li"),Mae=a("strong"),ZUe=o("dpt"),eJe=o(" \u2014 "),JS=a("a"),oJe=o("DPTConfig"),rJe=o(" (DPT model)"),tJe=l(),gm=a("li"),Eae=a("strong"),aJe=o("electra"),nJe=o(" \u2014 "),YS=a("a"),sJe=o("ElectraConfig"),lJe=o(" (ELECTRA model)"),iJe=l(),hm=a("li"),Cae=a("strong"),dJe=o("encoder-decoder"),cJe=o(" \u2014 "),KS=a("a"),fJe=o("EncoderDecoderConfig"),mJe=o(" (Encoder decoder model)"),gJe=l(),pm=a("li"),wae=a("strong"),hJe=o("flaubert"),pJe=o(" \u2014 "),ZS=a("a"),_Je=o("FlaubertConfig"),uJe=o(" (FlauBERT model)"),bJe=l(),_m=a("li"),Aae=a("strong"),vJe=o("flava"),FJe=o(" \u2014 "),eR=a("a"),TJe=o("FlavaConfig"),MJe=o(" (FLAVA model)"),EJe=l(),um=a("li"),Lae=a("strong"),CJe=o("fnet"),wJe=o(" \u2014 "),oR=a("a"),AJe=o("FNetConfig"),LJe=o(" (FNet model)"),yJe=l(),bm=a("li"),yae=a("strong"),xJe=o("fsmt"),$Je=o(" \u2014 "),rR=a("a"),kJe=o("FSMTConfig"),SJe=o(" (FairSeq Machine-Translation model)"),RJe=l(),vm=a("li"),xae=a("strong"),PJe=o("funnel"),BJe=o(" \u2014 "),tR=a("a"),IJe=o("FunnelConfig"),NJe=o(" (Funnel Transformer model)"),qJe=l(),Fm=a("li"),$ae=a("strong"),jJe=o("glpn"),DJe=o(" \u2014 "),aR=a("a"),GJe=o("GLPNConfig"),OJe=o(" (GLPN model)"),VJe=l(),Tm=a("li"),kae=a("strong"),XJe=o("gpt2"),zJe=o(" \u2014 "),nR=a("a"),QJe=o("GPT2Config"),WJe=o(" (OpenAI GPT-2 model)"),HJe=l(),Mm=a("li"),Sae=a("strong"),UJe=o("gpt_neo"),JJe=o(" \u2014 "),sR=a("a"),YJe=o("GPTNeoConfig"),KJe=o(" (GPT Neo model)"),ZJe=l(),Em=a("li"),Rae=a("strong"),eYe=o("gpt_neox"),oYe=o(" \u2014 "),lR=a("a"),rYe=o("GPTNeoXConfig"),tYe=o(" (GPT NeoX model)"),aYe=l(),Cm=a("li"),Pae=a("strong"),nYe=o("gptj"),sYe=o(" \u2014 "),iR=a("a"),lYe=o("GPTJConfig"),iYe=o(" (GPT-J model)"),dYe=l(),wm=a("li"),Bae=a("strong"),cYe=o("groupvit"),fYe=o(" \u2014 "),dR=a("a"),mYe=o("GroupViTConfig"),gYe=o(" (GroupViT model)"),hYe=l(),Am=a("li"),Iae=a("strong"),pYe=o("hubert"),_Ye=o(" \u2014 "),cR=a("a"),uYe=o("HubertConfig"),bYe=o(" (Hubert model)"),vYe=l(),Lm=a("li"),Nae=a("strong"),FYe=o("ibert"),TYe=o(" \u2014 "),fR=a("a"),MYe=o("IBertConfig"),EYe=o(" (I-BERT model)"),CYe=l(),ym=a("li"),qae=a("strong"),wYe=o("imagegpt"),AYe=o(" \u2014 "),mR=a("a"),LYe=o("ImageGPTConfig"),yYe=o(" (ImageGPT model)"),xYe=l(),xm=a("li"),jae=a("strong"),$Ye=o("layoutlm"),kYe=o(" \u2014 "),gR=a("a"),SYe=o("LayoutLMConfig"),RYe=o(" (LayoutLM model)"),PYe=l(),$m=a("li"),Dae=a("strong"),BYe=o("layoutlmv2"),IYe=o(" \u2014 "),hR=a("a"),NYe=o("LayoutLMv2Config"),qYe=o(" (LayoutLMv2 model)"),jYe=l(),km=a("li"),Gae=a("strong"),DYe=o("layoutlmv3"),GYe=o(" \u2014 "),pR=a("a"),OYe=o("LayoutLMv3Config"),VYe=o(" (LayoutLMv3 model)"),XYe=l(),Sm=a("li"),Oae=a("strong"),zYe=o("led"),QYe=o(" \u2014 "),_R=a("a"),WYe=o("LEDConfig"),HYe=o(" (LED model)"),UYe=l(),Rm=a("li"),Vae=a("strong"),JYe=o("levit"),YYe=o(" \u2014 "),uR=a("a"),KYe=o("LevitConfig"),ZYe=o(" (LeViT model)"),eKe=l(),Pm=a("li"),Xae=a("strong"),oKe=o("longformer"),rKe=o(" \u2014 "),bR=a("a"),tKe=o("LongformerConfig"),aKe=o(" (Longformer model)"),nKe=l(),Bm=a("li"),zae=a("strong"),sKe=o("longt5"),lKe=o(" \u2014 "),vR=a("a"),iKe=o("LongT5Config"),dKe=o(" (LongT5 model)"),cKe=l(),Im=a("li"),Qae=a("strong"),fKe=o("luke"),mKe=o(" \u2014 "),FR=a("a"),gKe=o("LukeConfig"),hKe=o(" (LUKE model)"),pKe=l(),Nm=a("li"),Wae=a("strong"),_Ke=o("lxmert"),uKe=o(" \u2014 "),TR=a("a"),bKe=o("LxmertConfig"),vKe=o(" (LXMERT model)"),FKe=l(),qm=a("li"),Hae=a("strong"),TKe=o("m2m_100"),MKe=o(" \u2014 "),MR=a("a"),EKe=o("M2M100Config"),CKe=o(" (M2M100 model)"),wKe=l(),jm=a("li"),Uae=a("strong"),AKe=o("marian"),LKe=o(" \u2014 "),ER=a("a"),yKe=o("MarianConfig"),xKe=o(" (Marian model)"),$Ke=l(),Dm=a("li"),Jae=a("strong"),kKe=o("maskformer"),SKe=o(" \u2014 "),CR=a("a"),RKe=o("MaskFormerConfig"),PKe=o(" (MaskFormer model)"),BKe=l(),Gm=a("li"),Yae=a("strong"),IKe=o("mbart"),NKe=o(" \u2014 "),wR=a("a"),qKe=o("MBartConfig"),jKe=o(" (mBART model)"),DKe=l(),Om=a("li"),Kae=a("strong"),GKe=o("mctct"),OKe=o(" \u2014 "),AR=a("a"),VKe=o("MCTCTConfig"),XKe=o(" (M-CTC-T model)"),zKe=l(),Vm=a("li"),Zae=a("strong"),QKe=o("megatron-bert"),WKe=o(" \u2014 "),LR=a("a"),HKe=o("MegatronBertConfig"),UKe=o(" (Megatron-BERT model)"),JKe=l(),Xm=a("li"),ene=a("strong"),YKe=o("mobilebert"),KKe=o(" \u2014 "),yR=a("a"),ZKe=o("MobileBertConfig"),eZe=o(" (MobileBERT model)"),oZe=l(),zm=a("li"),one=a("strong"),rZe=o("mpnet"),tZe=o(" \u2014 "),xR=a("a"),aZe=o("MPNetConfig"),nZe=o(" (MPNet model)"),sZe=l(),Qm=a("li"),rne=a("strong"),lZe=o("mt5"),iZe=o(" \u2014 "),$R=a("a"),dZe=o("MT5Config"),cZe=o(" (MT5 model)"),fZe=l(),Wm=a("li"),tne=a("strong"),mZe=o("nezha"),gZe=o(" \u2014 "),kR=a("a"),hZe=o("NezhaConfig"),pZe=o(" (Nezha model)"),_Ze=l(),Hm=a("li"),ane=a("strong"),uZe=o("nystromformer"),bZe=o(" \u2014 "),SR=a("a"),vZe=o("NystromformerConfig"),FZe=o(" (Nystr\xF6mformer model)"),TZe=l(),Um=a("li"),nne=a("strong"),MZe=o("openai-gpt"),EZe=o(" \u2014 "),RR=a("a"),CZe=o("OpenAIGPTConfig"),wZe=o(" (OpenAI GPT model)"),AZe=l(),Jm=a("li"),sne=a("strong"),LZe=o("opt"),yZe=o(" \u2014 "),PR=a("a"),xZe=o("OPTConfig"),$Ze=o(" (OPT model)"),kZe=l(),Ym=a("li"),lne=a("strong"),SZe=o("pegasus"),RZe=o(" \u2014 "),BR=a("a"),PZe=o("PegasusConfig"),BZe=o(" (Pegasus model)"),IZe=l(),Km=a("li"),ine=a("strong"),NZe=o("perceiver"),qZe=o(" \u2014 "),IR=a("a"),jZe=o("PerceiverConfig"),DZe=o(" (Perceiver model)"),GZe=l(),Zm=a("li"),dne=a("strong"),OZe=o("plbart"),VZe=o(" \u2014 "),NR=a("a"),XZe=o("PLBartConfig"),zZe=o(" (PLBart model)"),QZe=l(),eg=a("li"),cne=a("strong"),WZe=o("poolformer"),HZe=o(" \u2014 "),qR=a("a"),UZe=o("PoolFormerConfig"),JZe=o(" (PoolFormer model)"),YZe=l(),og=a("li"),fne=a("strong"),KZe=o("prophetnet"),ZZe=o(" \u2014 "),jR=a("a"),eeo=o("ProphetNetConfig"),oeo=o(" (ProphetNet model)"),reo=l(),rg=a("li"),mne=a("strong"),teo=o("qdqbert"),aeo=o(" \u2014 "),DR=a("a"),neo=o("QDQBertConfig"),seo=o(" (QDQBert model)"),leo=l(),tg=a("li"),gne=a("strong"),ieo=o("rag"),deo=o(" \u2014 "),GR=a("a"),ceo=o("RagConfig"),feo=o(" (RAG model)"),meo=l(),ag=a("li"),hne=a("strong"),geo=o("realm"),heo=o(" \u2014 "),OR=a("a"),peo=o("RealmConfig"),_eo=o(" (REALM model)"),ueo=l(),ng=a("li"),pne=a("strong"),beo=o("reformer"),veo=o(" \u2014 "),VR=a("a"),Feo=o("ReformerConfig"),Teo=o(" (Reformer model)"),Meo=l(),sg=a("li"),_ne=a("strong"),Eeo=o("regnet"),Ceo=o(" \u2014 "),XR=a("a"),weo=o("RegNetConfig"),Aeo=o(" (RegNet model)"),Leo=l(),lg=a("li"),une=a("strong"),yeo=o("rembert"),xeo=o(" \u2014 "),zR=a("a"),$eo=o("RemBertConfig"),keo=o(" (RemBERT model)"),Seo=l(),ig=a("li"),bne=a("strong"),Reo=o("resnet"),Peo=o(" \u2014 "),QR=a("a"),Beo=o("ResNetConfig"),Ieo=o(" (ResNet model)"),Neo=l(),dg=a("li"),vne=a("strong"),qeo=o("retribert"),jeo=o(" \u2014 "),WR=a("a"),Deo=o("RetriBertConfig"),Geo=o(" (RetriBERT model)"),Oeo=l(),cg=a("li"),Fne=a("strong"),Veo=o("roberta"),Xeo=o(" \u2014 "),HR=a("a"),zeo=o("RobertaConfig"),Qeo=o(" (RoBERTa model)"),Weo=l(),fg=a("li"),Tne=a("strong"),Heo=o("roformer"),Ueo=o(" \u2014 "),UR=a("a"),Jeo=o("RoFormerConfig"),Yeo=o(" (RoFormer model)"),Keo=l(),mg=a("li"),Mne=a("strong"),Zeo=o("segformer"),eoo=o(" \u2014 "),JR=a("a"),ooo=o("SegformerConfig"),roo=o(" (SegFormer model)"),too=l(),gg=a("li"),Ene=a("strong"),aoo=o("sew"),noo=o(" \u2014 "),YR=a("a"),soo=o("SEWConfig"),loo=o(" (SEW model)"),ioo=l(),hg=a("li"),Cne=a("strong"),doo=o("sew-d"),coo=o(" \u2014 "),KR=a("a"),foo=o("SEWDConfig"),moo=o(" (SEW-D model)"),goo=l(),pg=a("li"),wne=a("strong"),hoo=o("speech-encoder-decoder"),poo=o(" \u2014 "),ZR=a("a"),_oo=o("SpeechEncoderDecoderConfig"),uoo=o(" (Speech Encoder decoder model)"),boo=l(),_g=a("li"),Ane=a("strong"),voo=o("speech_to_text"),Foo=o(" \u2014 "),eP=a("a"),Too=o("Speech2TextConfig"),Moo=o(" (Speech2Text model)"),Eoo=l(),ug=a("li"),Lne=a("strong"),Coo=o("speech_to_text_2"),woo=o(" \u2014 "),oP=a("a"),Aoo=o("Speech2Text2Config"),Loo=o(" (Speech2Text2 model)"),yoo=l(),bg=a("li"),yne=a("strong"),xoo=o("splinter"),$oo=o(" \u2014 "),rP=a("a"),koo=o("SplinterConfig"),Soo=o(" (Splinter model)"),Roo=l(),vg=a("li"),xne=a("strong"),Poo=o("squeezebert"),Boo=o(" \u2014 "),tP=a("a"),Ioo=o("SqueezeBertConfig"),Noo=o(" (SqueezeBERT model)"),qoo=l(),Fg=a("li"),$ne=a("strong"),joo=o("swin"),Doo=o(" \u2014 "),aP=a("a"),Goo=o("SwinConfig"),Ooo=o(" (Swin Transformer model)"),Voo=l(),Tg=a("li"),kne=a("strong"),Xoo=o("t5"),zoo=o(" \u2014 "),nP=a("a"),Qoo=o("T5Config"),Woo=o(" (T5 model)"),Hoo=l(),Mg=a("li"),Sne=a("strong"),Uoo=o("tapas"),Joo=o(" \u2014 "),sP=a("a"),Yoo=o("TapasConfig"),Koo=o(" (TAPAS model)"),Zoo=l(),Eg=a("li"),Rne=a("strong"),ero=o("trajectory_transformer"),oro=o(" \u2014 "),lP=a("a"),rro=o("TrajectoryTransformerConfig"),tro=o(" (Trajectory Transformer model)"),aro=l(),Cg=a("li"),Pne=a("strong"),nro=o("transfo-xl"),sro=o(" \u2014 "),iP=a("a"),lro=o("TransfoXLConfig"),iro=o(" (Transformer-XL model)"),dro=l(),wg=a("li"),Bne=a("strong"),cro=o("trocr"),fro=o(" \u2014 "),dP=a("a"),mro=o("TrOCRConfig"),gro=o(" (TrOCR model)"),hro=l(),Ag=a("li"),Ine=a("strong"),pro=o("unispeech"),_ro=o(" \u2014 "),cP=a("a"),uro=o("UniSpeechConfig"),bro=o(" (UniSpeech model)"),vro=l(),Lg=a("li"),Nne=a("strong"),Fro=o("unispeech-sat"),Tro=o(" \u2014 "),fP=a("a"),Mro=o("UniSpeechSatConfig"),Ero=o(" (UniSpeechSat model)"),Cro=l(),yg=a("li"),qne=a("strong"),wro=o("van"),Aro=o(" \u2014 "),mP=a("a"),Lro=o("VanConfig"),yro=o(" (VAN model)"),xro=l(),xg=a("li"),jne=a("strong"),$ro=o("vilt"),kro=o(" \u2014 "),gP=a("a"),Sro=o("ViltConfig"),Rro=o(" (ViLT model)"),Pro=l(),$g=a("li"),Dne=a("strong"),Bro=o("vision-encoder-decoder"),Iro=o(" \u2014 "),hP=a("a"),Nro=o("VisionEncoderDecoderConfig"),qro=o(" (Vision Encoder decoder model)"),jro=l(),kg=a("li"),Gne=a("strong"),Dro=o("vision-text-dual-encoder"),Gro=o(" \u2014 "),pP=a("a"),Oro=o("VisionTextDualEncoderConfig"),Vro=o(" (VisionTextDualEncoder model)"),Xro=l(),Sg=a("li"),One=a("strong"),zro=o("visual_bert"),Qro=o(" \u2014 "),_P=a("a"),Wro=o("VisualBertConfig"),Hro=o(" (VisualBERT model)"),Uro=l(),Rg=a("li"),Vne=a("strong"),Jro=o("vit"),Yro=o(" \u2014 "),uP=a("a"),Kro=o("ViTConfig"),Zro=o(" (ViT model)"),eto=l(),Pg=a("li"),Xne=a("strong"),oto=o("vit_mae"),rto=o(" \u2014 "),bP=a("a"),tto=o("ViTMAEConfig"),ato=o(" (ViTMAE model)"),nto=l(),Bg=a("li"),zne=a("strong"),sto=o("wav2vec2"),lto=o(" \u2014 "),vP=a("a"),ito=o("Wav2Vec2Config"),dto=o(" (Wav2Vec2 model)"),cto=l(),Ig=a("li"),Qne=a("strong"),fto=o("wav2vec2-conformer"),mto=o(" \u2014 "),FP=a("a"),gto=o("Wav2Vec2ConformerConfig"),hto=o(" (Wav2Vec2-Conformer model)"),pto=l(),Ng=a("li"),Wne=a("strong"),_to=o("wavlm"),uto=o(" \u2014 "),TP=a("a"),bto=o("WavLMConfig"),vto=o(" (WavLM model)"),Fto=l(),qg=a("li"),Hne=a("strong"),Tto=o("xglm"),Mto=o(" \u2014 "),MP=a("a"),Eto=o("XGLMConfig"),Cto=o(" (XGLM model)"),wto=l(),jg=a("li"),Une=a("strong"),Ato=o("xlm"),Lto=o(" \u2014 "),EP=a("a"),yto=o("XLMConfig"),xto=o(" (XLM model)"),$to=l(),Dg=a("li"),Jne=a("strong"),kto=o("xlm-prophetnet"),Sto=o(" \u2014 "),CP=a("a"),Rto=o("XLMProphetNetConfig"),Pto=o(" (XLM-ProphetNet model)"),Bto=l(),Gg=a("li"),Yne=a("strong"),Ito=o("xlm-roberta"),Nto=o(" \u2014 "),wP=a("a"),qto=o("XLMRobertaConfig"),jto=o(" (XLM-RoBERTa model)"),Dto=l(),Og=a("li"),Kne=a("strong"),Gto=o("xlm-roberta-xl"),Oto=o(" \u2014 "),AP=a("a"),Vto=o("XLMRobertaXLConfig"),Xto=o(" (XLM-RoBERTa-XL model)"),zto=l(),Vg=a("li"),Zne=a("strong"),Qto=o("xlnet"),Wto=o(" \u2014 "),LP=a("a"),Hto=o("XLNetConfig"),Uto=o(" (XLNet model)"),Jto=l(),Xg=a("li"),ese=a("strong"),Yto=o("yolos"),Kto=o(" \u2014 "),yP=a("a"),Zto=o("YolosConfig"),eao=o(" (YOLOS model)"),oao=l(),zg=a("li"),ose=a("strong"),rao=o("yoso"),tao=o(" \u2014 "),xP=a("a"),aao=o("YosoConfig"),nao=o(" (YOSO model)"),sao=l(),F(Qg.$$.fragment),lao=l(),Wg=a("div"),F(WL.$$.fragment),iao=l(),rse=a("p"),dao=o("Register a new configuration for this class."),qOe=l(),Pi=a("h2"),Hg=a("a"),tse=a("span"),F(HL.$$.fragment),cao=l(),ase=a("span"),fao=o("AutoTokenizer"),jOe=l(),Ao=a("div"),F(UL.$$.fragment),mao=l(),JL=a("p"),gao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$P=a("a"),hao=o("AutoTokenizer.from_pretrained()"),pao=o(" class method."),_ao=l(),YL=a("p"),uao=o("This class cannot be instantiated directly using "),nse=a("code"),bao=o("__init__()"),vao=o(" (throws an error)."),Fao=l(),Lr=a("div"),F(KL.$$.fragment),Tao=l(),sse=a("p"),Mao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eao=l(),Sa=a("p"),Cao=o("The tokenizer class to instantiate is selected based on the "),lse=a("code"),wao=o("model_type"),Aao=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),Lao=o("pretrained_model_name_or_path"),yao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),xao=o("pretrained_model_name_or_path"),$ao=o(":"),kao=l(),k=a("ul"),qn=a("li"),cse=a("strong"),Sao=o("albert"),Rao=o(" \u2014 "),kP=a("a"),Pao=o("AlbertTokenizer"),Bao=o(" or "),SP=a("a"),Iao=o("AlbertTokenizerFast"),Nao=o(" (ALBERT model)"),qao=l(),jn=a("li"),fse=a("strong"),jao=o("bart"),Dao=o(" \u2014 "),RP=a("a"),Gao=o("BartTokenizer"),Oao=o(" or "),PP=a("a"),Vao=o("BartTokenizerFast"),Xao=o(" (BART model)"),zao=l(),Dn=a("li"),mse=a("strong"),Qao=o("barthez"),Wao=o(" \u2014 "),BP=a("a"),Hao=o("BarthezTokenizer"),Uao=o(" or "),IP=a("a"),Jao=o("BarthezTokenizerFast"),Yao=o(" (BARThez model)"),Kao=l(),Ug=a("li"),gse=a("strong"),Zao=o("bartpho"),eno=o(" \u2014 "),NP=a("a"),ono=o("BartphoTokenizer"),rno=o(" (BARTpho model)"),tno=l(),Gn=a("li"),hse=a("strong"),ano=o("bert"),nno=o(" \u2014 "),qP=a("a"),sno=o("BertTokenizer"),lno=o(" or "),jP=a("a"),ino=o("BertTokenizerFast"),dno=o(" (BERT model)"),cno=l(),Jg=a("li"),pse=a("strong"),fno=o("bert-generation"),mno=o(" \u2014 "),DP=a("a"),gno=o("BertGenerationTokenizer"),hno=o(" (Bert Generation model)"),pno=l(),Yg=a("li"),_se=a("strong"),_no=o("bert-japanese"),uno=o(" \u2014 "),GP=a("a"),bno=o("BertJapaneseTokenizer"),vno=o(" (BertJapanese model)"),Fno=l(),Kg=a("li"),use=a("strong"),Tno=o("bertweet"),Mno=o(" \u2014 "),OP=a("a"),Eno=o("BertweetTokenizer"),Cno=o(" (BERTweet model)"),wno=l(),On=a("li"),bse=a("strong"),Ano=o("big_bird"),Lno=o(" \u2014 "),VP=a("a"),yno=o("BigBirdTokenizer"),xno=o(" or "),XP=a("a"),$no=o("BigBirdTokenizerFast"),kno=o(" (BigBird model)"),Sno=l(),Vn=a("li"),vse=a("strong"),Rno=o("bigbird_pegasus"),Pno=o(" \u2014 "),zP=a("a"),Bno=o("PegasusTokenizer"),Ino=o(" or "),QP=a("a"),Nno=o("PegasusTokenizerFast"),qno=o(" (BigBird-Pegasus model)"),jno=l(),Xn=a("li"),Fse=a("strong"),Dno=o("blenderbot"),Gno=o(" \u2014 "),WP=a("a"),Ono=o("BlenderbotTokenizer"),Vno=o(" or "),HP=a("a"),Xno=o("BlenderbotTokenizerFast"),zno=o(" (Blenderbot model)"),Qno=l(),Zg=a("li"),Tse=a("strong"),Wno=o("blenderbot-small"),Hno=o(" \u2014 "),UP=a("a"),Uno=o("BlenderbotSmallTokenizer"),Jno=o(" (BlenderbotSmall model)"),Yno=l(),eh=a("li"),Mse=a("strong"),Kno=o("bloom"),Zno=o(" \u2014 "),JP=a("a"),eso=o("BloomTokenizerFast"),oso=o(" (BLOOM model)"),rso=l(),oh=a("li"),Ese=a("strong"),tso=o("byt5"),aso=o(" \u2014 "),YP=a("a"),nso=o("ByT5Tokenizer"),sso=o(" (ByT5 model)"),lso=l(),zn=a("li"),Cse=a("strong"),iso=o("camembert"),dso=o(" \u2014 "),KP=a("a"),cso=o("CamembertTokenizer"),fso=o(" or "),ZP=a("a"),mso=o("CamembertTokenizerFast"),gso=o(" (CamemBERT model)"),hso=l(),rh=a("li"),wse=a("strong"),pso=o("canine"),_so=o(" \u2014 "),eB=a("a"),uso=o("CanineTokenizer"),bso=o(" (CANINE model)"),vso=l(),Qn=a("li"),Ase=a("strong"),Fso=o("clip"),Tso=o(" \u2014 "),oB=a("a"),Mso=o("CLIPTokenizer"),Eso=o(" or "),rB=a("a"),Cso=o("CLIPTokenizerFast"),wso=o(" (CLIP model)"),Aso=l(),Wn=a("li"),Lse=a("strong"),Lso=o("codegen"),yso=o(" \u2014 "),tB=a("a"),xso=o("CodeGenTokenizer"),$so=o(" or "),aB=a("a"),kso=o("CodeGenTokenizerFast"),Sso=o(" (CodeGen model)"),Rso=l(),Hn=a("li"),yse=a("strong"),Pso=o("convbert"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("ConvBertTokenizer"),Nso=o(" or "),sB=a("a"),qso=o("ConvBertTokenizerFast"),jso=o(" (ConvBERT model)"),Dso=l(),Un=a("li"),xse=a("strong"),Gso=o("cpm"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("CpmTokenizer"),Xso=o(" or "),iB=a("a"),zso=o("CpmTokenizerFast"),Qso=o(" (CPM model)"),Wso=l(),th=a("li"),$se=a("strong"),Hso=o("ctrl"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("CTRLTokenizer"),Yso=o(" (CTRL model)"),Kso=l(),Jn=a("li"),kse=a("strong"),Zso=o("data2vec-text"),elo=o(" \u2014 "),cB=a("a"),olo=o("RobertaTokenizer"),rlo=o(" or "),fB=a("a"),tlo=o("RobertaTokenizerFast"),alo=o(" (Data2VecText model)"),nlo=l(),Yn=a("li"),Sse=a("strong"),slo=o("deberta"),llo=o(" \u2014 "),mB=a("a"),ilo=o("DebertaTokenizer"),dlo=o(" or "),gB=a("a"),clo=o("DebertaTokenizerFast"),flo=o(" (DeBERTa model)"),mlo=l(),Kn=a("li"),Rse=a("strong"),glo=o("deberta-v2"),hlo=o(" \u2014 "),hB=a("a"),plo=o("DebertaV2Tokenizer"),_lo=o(" or "),pB=a("a"),ulo=o("DebertaV2TokenizerFast"),blo=o(" (DeBERTa-v2 model)"),vlo=l(),Zn=a("li"),Pse=a("strong"),Flo=o("distilbert"),Tlo=o(" \u2014 "),_B=a("a"),Mlo=o("DistilBertTokenizer"),Elo=o(" or "),uB=a("a"),Clo=o("DistilBertTokenizerFast"),wlo=o(" (DistilBERT model)"),Alo=l(),es=a("li"),Bse=a("strong"),Llo=o("dpr"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("DPRQuestionEncoderTokenizer"),$lo=o(" or "),vB=a("a"),klo=o("DPRQuestionEncoderTokenizerFast"),Slo=o(" (DPR model)"),Rlo=l(),os=a("li"),Ise=a("strong"),Plo=o("electra"),Blo=o(" \u2014 "),FB=a("a"),Ilo=o("ElectraTokenizer"),Nlo=o(" or "),TB=a("a"),qlo=o("ElectraTokenizerFast"),jlo=o(" (ELECTRA model)"),Dlo=l(),ah=a("li"),Nse=a("strong"),Glo=o("flaubert"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("FlaubertTokenizer"),Xlo=o(" (FlauBERT model)"),zlo=l(),rs=a("li"),qse=a("strong"),Qlo=o("fnet"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("FNetTokenizer"),Ulo=o(" or "),CB=a("a"),Jlo=o("FNetTokenizerFast"),Ylo=o(" (FNet model)"),Klo=l(),nh=a("li"),jse=a("strong"),Zlo=o("fsmt"),eio=o(" \u2014 "),wB=a("a"),oio=o("FSMTTokenizer"),rio=o(" (FairSeq Machine-Translation model)"),tio=l(),ts=a("li"),Dse=a("strong"),aio=o("funnel"),nio=o(" \u2014 "),AB=a("a"),sio=o("FunnelTokenizer"),lio=o(" or "),LB=a("a"),iio=o("FunnelTokenizerFast"),dio=o(" (Funnel Transformer model)"),cio=l(),as=a("li"),Gse=a("strong"),fio=o("gpt2"),mio=o(" \u2014 "),yB=a("a"),gio=o("GPT2Tokenizer"),hio=o(" or "),xB=a("a"),pio=o("GPT2TokenizerFast"),_io=o(" (OpenAI GPT-2 model)"),uio=l(),ns=a("li"),Ose=a("strong"),bio=o("gpt_neo"),vio=o(" \u2014 "),$B=a("a"),Fio=o("GPT2Tokenizer"),Tio=o(" or "),kB=a("a"),Mio=o("GPT2TokenizerFast"),Eio=o(" (GPT Neo model)"),Cio=l(),sh=a("li"),Vse=a("strong"),wio=o("gpt_neox"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("GPTNeoXTokenizerFast"),yio=o(" (GPT NeoX model)"),xio=l(),ss=a("li"),Xse=a("strong"),$io=o("gptj"),kio=o(" \u2014 "),RB=a("a"),Sio=o("GPT2Tokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("GPT2TokenizerFast"),Bio=o(" (GPT-J model)"),Iio=l(),ls=a("li"),zse=a("strong"),Nio=o("groupvit"),qio=o(" \u2014 "),BB=a("a"),jio=o("CLIPTokenizer"),Dio=o(" or "),IB=a("a"),Gio=o("CLIPTokenizerFast"),Oio=o(" (GroupViT model)"),Vio=l(),is=a("li"),Qse=a("strong"),Xio=o("herbert"),zio=o(" \u2014 "),NB=a("a"),Qio=o("HerbertTokenizer"),Wio=o(" or "),qB=a("a"),Hio=o("HerbertTokenizerFast"),Uio=o(" (HerBERT model)"),Jio=l(),lh=a("li"),Wse=a("strong"),Yio=o("hubert"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("Wav2Vec2CTCTokenizer"),edo=o(" (Hubert model)"),odo=l(),ds=a("li"),Hse=a("strong"),rdo=o("ibert"),tdo=o(" \u2014 "),DB=a("a"),ado=o("RobertaTokenizer"),ndo=o(" or "),GB=a("a"),sdo=o("RobertaTokenizerFast"),ldo=o(" (I-BERT model)"),ido=l(),cs=a("li"),Use=a("strong"),ddo=o("layoutlm"),cdo=o(" \u2014 "),OB=a("a"),fdo=o("LayoutLMTokenizer"),mdo=o(" or "),VB=a("a"),gdo=o("LayoutLMTokenizerFast"),hdo=o(" (LayoutLM model)"),pdo=l(),fs=a("li"),Jse=a("strong"),_do=o("layoutlmv2"),udo=o(" \u2014 "),XB=a("a"),bdo=o("LayoutLMv2Tokenizer"),vdo=o(" or "),zB=a("a"),Fdo=o("LayoutLMv2TokenizerFast"),Tdo=o(" (LayoutLMv2 model)"),Mdo=l(),ms=a("li"),Yse=a("strong"),Edo=o("layoutlmv3"),Cdo=o(" \u2014 "),QB=a("a"),wdo=o("LayoutLMv3Tokenizer"),Ado=o(" or "),WB=a("a"),Ldo=o("LayoutLMv3TokenizerFast"),ydo=o(" (LayoutLMv3 model)"),xdo=l(),gs=a("li"),Kse=a("strong"),$do=o("layoutxlm"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("LayoutXLMTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("LayoutXLMTokenizerFast"),Bdo=o(" (LayoutXLM model)"),Ido=l(),hs=a("li"),Zse=a("strong"),Ndo=o("led"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("LEDTokenizer"),Ddo=o(" or "),YB=a("a"),Gdo=o("LEDTokenizerFast"),Odo=o(" (LED model)"),Vdo=l(),ps=a("li"),ele=a("strong"),Xdo=o("longformer"),zdo=o(" \u2014 "),KB=a("a"),Qdo=o("LongformerTokenizer"),Wdo=o(" or "),ZB=a("a"),Hdo=o("LongformerTokenizerFast"),Udo=o(" (Longformer model)"),Jdo=l(),_s=a("li"),ole=a("strong"),Ydo=o("longt5"),Kdo=o(" \u2014 "),eI=a("a"),Zdo=o("T5Tokenizer"),eco=o(" or "),oI=a("a"),oco=o("T5TokenizerFast"),rco=o(" (LongT5 model)"),tco=l(),ih=a("li"),rle=a("strong"),aco=o("luke"),nco=o(" \u2014 "),rI=a("a"),sco=o("LukeTokenizer"),lco=o(" (LUKE model)"),ico=l(),us=a("li"),tle=a("strong"),dco=o("lxmert"),cco=o(" \u2014 "),tI=a("a"),fco=o("LxmertTokenizer"),mco=o(" or "),aI=a("a"),gco=o("LxmertTokenizerFast"),hco=o(" (LXMERT model)"),pco=l(),dh=a("li"),ale=a("strong"),_co=o("m2m_100"),uco=o(" \u2014 "),nI=a("a"),bco=o("M2M100Tokenizer"),vco=o(" (M2M100 model)"),Fco=l(),ch=a("li"),nle=a("strong"),Tco=o("marian"),Mco=o(" \u2014 "),sI=a("a"),Eco=o("MarianTokenizer"),Cco=o(" (Marian model)"),wco=l(),bs=a("li"),sle=a("strong"),Aco=o("mbart"),Lco=o(" \u2014 "),lI=a("a"),yco=o("MBartTokenizer"),xco=o(" or "),iI=a("a"),$co=o("MBartTokenizerFast"),kco=o(" (mBART model)"),Sco=l(),vs=a("li"),lle=a("strong"),Rco=o("mbart50"),Pco=o(" \u2014 "),dI=a("a"),Bco=o("MBart50Tokenizer"),Ico=o(" or "),cI=a("a"),Nco=o("MBart50TokenizerFast"),qco=o(" (mBART-50 model)"),jco=l(),Fs=a("li"),ile=a("strong"),Dco=o("megatron-bert"),Gco=o(" \u2014 "),fI=a("a"),Oco=o("BertTokenizer"),Vco=o(" or "),mI=a("a"),Xco=o("BertTokenizerFast"),zco=o(" (Megatron-BERT model)"),Qco=l(),fh=a("li"),dle=a("strong"),Wco=o("mluke"),Hco=o(" \u2014 "),gI=a("a"),Uco=o("MLukeTokenizer"),Jco=o(" (mLUKE model)"),Yco=l(),Ts=a("li"),cle=a("strong"),Kco=o("mobilebert"),Zco=o(" \u2014 "),hI=a("a"),efo=o("MobileBertTokenizer"),ofo=o(" or "),pI=a("a"),rfo=o("MobileBertTokenizerFast"),tfo=o(" (MobileBERT model)"),afo=l(),Ms=a("li"),fle=a("strong"),nfo=o("mpnet"),sfo=o(" \u2014 "),_I=a("a"),lfo=o("MPNetTokenizer"),ifo=o(" or "),uI=a("a"),dfo=o("MPNetTokenizerFast"),cfo=o(" (MPNet model)"),ffo=l(),Es=a("li"),mle=a("strong"),mfo=o("mt5"),gfo=o(" \u2014 "),bI=a("a"),hfo=o("MT5Tokenizer"),pfo=o(" or "),vI=a("a"),_fo=o("MT5TokenizerFast"),ufo=o(" (MT5 model)"),bfo=l(),Cs=a("li"),gle=a("strong"),vfo=o("nezha"),Ffo=o(" \u2014 "),FI=a("a"),Tfo=o("BertTokenizer"),Mfo=o(" or "),TI=a("a"),Efo=o("BertTokenizerFast"),Cfo=o(" (Nezha model)"),wfo=l(),ws=a("li"),hle=a("strong"),Afo=o("nystromformer"),Lfo=o(" \u2014 "),MI=a("a"),yfo=o("AlbertTokenizer"),xfo=o(" or "),EI=a("a"),$fo=o("AlbertTokenizerFast"),kfo=o(" (Nystr\xF6mformer model)"),Sfo=l(),As=a("li"),ple=a("strong"),Rfo=o("openai-gpt"),Pfo=o(" \u2014 "),CI=a("a"),Bfo=o("OpenAIGPTTokenizer"),Ifo=o(" or "),wI=a("a"),Nfo=o("OpenAIGPTTokenizerFast"),qfo=o(" (OpenAI GPT model)"),jfo=l(),mh=a("li"),_le=a("strong"),Dfo=o("opt"),Gfo=o(" \u2014 "),AI=a("a"),Ofo=o("GPT2Tokenizer"),Vfo=o(" (OPT model)"),Xfo=l(),Ls=a("li"),ule=a("strong"),zfo=o("pegasus"),Qfo=o(" \u2014 "),LI=a("a"),Wfo=o("PegasusTokenizer"),Hfo=o(" or "),yI=a("a"),Ufo=o("PegasusTokenizerFast"),Jfo=o(" (Pegasus model)"),Yfo=l(),gh=a("li"),ble=a("strong"),Kfo=o("perceiver"),Zfo=o(" \u2014 "),xI=a("a"),emo=o("PerceiverTokenizer"),omo=o(" (Perceiver model)"),rmo=l(),hh=a("li"),vle=a("strong"),tmo=o("phobert"),amo=o(" \u2014 "),$I=a("a"),nmo=o("PhobertTokenizer"),smo=o(" (PhoBERT model)"),lmo=l(),ph=a("li"),Fle=a("strong"),imo=o("plbart"),dmo=o(" \u2014 "),kI=a("a"),cmo=o("PLBartTokenizer"),fmo=o(" (PLBart model)"),mmo=l(),_h=a("li"),Tle=a("strong"),gmo=o("prophetnet"),hmo=o(" \u2014 "),SI=a("a"),pmo=o("ProphetNetTokenizer"),_mo=o(" (ProphetNet model)"),umo=l(),ys=a("li"),Mle=a("strong"),bmo=o("qdqbert"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("BertTokenizer"),Tmo=o(" or "),PI=a("a"),Mmo=o("BertTokenizerFast"),Emo=o(" (QDQBert model)"),Cmo=l(),uh=a("li"),Ele=a("strong"),wmo=o("rag"),Amo=o(" \u2014 "),BI=a("a"),Lmo=o("RagTokenizer"),ymo=o(" (RAG model)"),xmo=l(),xs=a("li"),Cle=a("strong"),$mo=o("realm"),kmo=o(" \u2014 "),II=a("a"),Smo=o("RealmTokenizer"),Rmo=o(" or "),NI=a("a"),Pmo=o("RealmTokenizerFast"),Bmo=o(" (REALM model)"),Imo=l(),$s=a("li"),wle=a("strong"),Nmo=o("reformer"),qmo=o(" \u2014 "),qI=a("a"),jmo=o("ReformerTokenizer"),Dmo=o(" or "),jI=a("a"),Gmo=o("ReformerTokenizerFast"),Omo=o(" (Reformer model)"),Vmo=l(),ks=a("li"),Ale=a("strong"),Xmo=o("rembert"),zmo=o(" \u2014 "),DI=a("a"),Qmo=o("RemBertTokenizer"),Wmo=o(" or "),GI=a("a"),Hmo=o("RemBertTokenizerFast"),Umo=o(" (RemBERT model)"),Jmo=l(),Ss=a("li"),Lle=a("strong"),Ymo=o("retribert"),Kmo=o(" \u2014 "),OI=a("a"),Zmo=o("RetriBertTokenizer"),ego=o(" or "),VI=a("a"),ogo=o("RetriBertTokenizerFast"),rgo=o(" (RetriBERT model)"),tgo=l(),Rs=a("li"),yle=a("strong"),ago=o("roberta"),ngo=o(" \u2014 "),XI=a("a"),sgo=o("RobertaTokenizer"),lgo=o(" or "),zI=a("a"),igo=o("RobertaTokenizerFast"),dgo=o(" (RoBERTa model)"),cgo=l(),Ps=a("li"),xle=a("strong"),fgo=o("roformer"),mgo=o(" \u2014 "),QI=a("a"),ggo=o("RoFormerTokenizer"),hgo=o(" or "),WI=a("a"),pgo=o("RoFormerTokenizerFast"),_go=o(" (RoFormer model)"),ugo=l(),bh=a("li"),$le=a("strong"),bgo=o("speech_to_text"),vgo=o(" \u2014 "),HI=a("a"),Fgo=o("Speech2TextTokenizer"),Tgo=o(" (Speech2Text model)"),Mgo=l(),vh=a("li"),kle=a("strong"),Ego=o("speech_to_text_2"),Cgo=o(" \u2014 "),UI=a("a"),wgo=o("Speech2Text2Tokenizer"),Ago=o(" (Speech2Text2 model)"),Lgo=l(),Bs=a("li"),Sle=a("strong"),ygo=o("splinter"),xgo=o(" \u2014 "),JI=a("a"),$go=o("SplinterTokenizer"),kgo=o(" or "),YI=a("a"),Sgo=o("SplinterTokenizerFast"),Rgo=o(" (Splinter model)"),Pgo=l(),Is=a("li"),Rle=a("strong"),Bgo=o("squeezebert"),Igo=o(" \u2014 "),KI=a("a"),Ngo=o("SqueezeBertTokenizer"),qgo=o(" or "),ZI=a("a"),jgo=o("SqueezeBertTokenizerFast"),Dgo=o(" (SqueezeBERT model)"),Ggo=l(),Ns=a("li"),Ple=a("strong"),Ogo=o("t5"),Vgo=o(" \u2014 "),eN=a("a"),Xgo=o("T5Tokenizer"),zgo=o(" or "),oN=a("a"),Qgo=o("T5TokenizerFast"),Wgo=o(" (T5 model)"),Hgo=l(),Fh=a("li"),Ble=a("strong"),Ugo=o("tapas"),Jgo=o(" \u2014 "),rN=a("a"),Ygo=o("TapasTokenizer"),Kgo=o(" (TAPAS model)"),Zgo=l(),Th=a("li"),Ile=a("strong"),eho=o("tapex"),oho=o(" \u2014 "),tN=a("a"),rho=o("TapexTokenizer"),tho=o(" (TAPEX model)"),aho=l(),Mh=a("li"),Nle=a("strong"),nho=o("transfo-xl"),sho=o(" \u2014 "),aN=a("a"),lho=o("TransfoXLTokenizer"),iho=o(" (Transformer-XL model)"),dho=l(),qs=a("li"),qle=a("strong"),cho=o("vilt"),fho=o(" \u2014 "),nN=a("a"),mho=o("BertTokenizer"),gho=o(" or "),sN=a("a"),hho=o("BertTokenizerFast"),pho=o(" (ViLT model)"),_ho=l(),js=a("li"),jle=a("strong"),uho=o("visual_bert"),bho=o(" \u2014 "),lN=a("a"),vho=o("BertTokenizer"),Fho=o(" or "),iN=a("a"),Tho=o("BertTokenizerFast"),Mho=o(" (VisualBERT model)"),Eho=l(),Eh=a("li"),Dle=a("strong"),Cho=o("wav2vec2"),who=o(" \u2014 "),dN=a("a"),Aho=o("Wav2Vec2CTCTokenizer"),Lho=o(" (Wav2Vec2 model)"),yho=l(),Ch=a("li"),Gle=a("strong"),xho=o("wav2vec2-conformer"),$ho=o(" \u2014 "),cN=a("a"),kho=o("Wav2Vec2CTCTokenizer"),Sho=o(" (Wav2Vec2-Conformer model)"),Rho=l(),wh=a("li"),Ole=a("strong"),Pho=o("wav2vec2_phoneme"),Bho=o(" \u2014 "),fN=a("a"),Iho=o("Wav2Vec2PhonemeCTCTokenizer"),Nho=o(" (Wav2Vec2Phoneme model)"),qho=l(),Ds=a("li"),Vle=a("strong"),jho=o("xglm"),Dho=o(" \u2014 "),mN=a("a"),Gho=o("XGLMTokenizer"),Oho=o(" or "),gN=a("a"),Vho=o("XGLMTokenizerFast"),Xho=o(" (XGLM model)"),zho=l(),Ah=a("li"),Xle=a("strong"),Qho=o("xlm"),Who=o(" \u2014 "),hN=a("a"),Hho=o("XLMTokenizer"),Uho=o(" (XLM model)"),Jho=l(),Lh=a("li"),zle=a("strong"),Yho=o("xlm-prophetnet"),Kho=o(" \u2014 "),pN=a("a"),Zho=o("XLMProphetNetTokenizer"),epo=o(" (XLM-ProphetNet model)"),opo=l(),Gs=a("li"),Qle=a("strong"),rpo=o("xlm-roberta"),tpo=o(" \u2014 "),_N=a("a"),apo=o("XLMRobertaTokenizer"),npo=o(" or "),uN=a("a"),spo=o("XLMRobertaTokenizerFast"),lpo=o(" (XLM-RoBERTa model)"),ipo=l(),Os=a("li"),Wle=a("strong"),dpo=o("xlm-roberta-xl"),cpo=o(" \u2014 "),bN=a("a"),fpo=o("RobertaTokenizer"),mpo=o(" or "),vN=a("a"),gpo=o("RobertaTokenizerFast"),hpo=o(" (XLM-RoBERTa-XL model)"),ppo=l(),Vs=a("li"),Hle=a("strong"),_po=o("xlnet"),upo=o(" \u2014 "),FN=a("a"),bpo=o("XLNetTokenizer"),vpo=o(" or "),TN=a("a"),Fpo=o("XLNetTokenizerFast"),Tpo=o(" (XLNet model)"),Mpo=l(),Xs=a("li"),Ule=a("strong"),Epo=o("yoso"),Cpo=o(" \u2014 "),MN=a("a"),wpo=o("AlbertTokenizer"),Apo=o(" or "),EN=a("a"),Lpo=o("AlbertTokenizerFast"),ypo=o(" (YOSO model)"),xpo=l(),F(yh.$$.fragment),$po=l(),xh=a("div"),F(ZL.$$.fragment),kpo=l(),Jle=a("p"),Spo=o("Register a new tokenizer in this mapping."),DOe=l(),Bi=a("h2"),$h=a("a"),Yle=a("span"),F(ey.$$.fragment),Rpo=l(),Kle=a("span"),Ppo=o("AutoFeatureExtractor"),GOe=l(),Lo=a("div"),F(oy.$$.fragment),Bpo=l(),ry=a("p"),Ipo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CN=a("a"),Npo=o("AutoFeatureExtractor.from_pretrained()"),qpo=o(" class method."),jpo=l(),ty=a("p"),Dpo=o("This class cannot be instantiated directly using "),Zle=a("code"),Gpo=o("__init__()"),Opo=o(" (throws an error)."),Vpo=l(),He=a("div"),F(ay.$$.fragment),Xpo=l(),eie=a("p"),zpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qpo=l(),Ra=a("p"),Wpo=o("The feature extractor class to instantiate is selected based on the "),oie=a("code"),Hpo=o("model_type"),Upo=o(` property of the config object
(either passed as an argument or loaded from `),rie=a("code"),Jpo=o("pretrained_model_name_or_path"),Ypo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tie=a("code"),Kpo=o("pretrained_model_name_or_path"),Zpo=o(":"),e_o=l(),Y=a("ul"),kh=a("li"),aie=a("strong"),o_o=o("beit"),r_o=o(" \u2014 "),wN=a("a"),t_o=o("BeitFeatureExtractor"),a_o=o(" (BEiT model)"),n_o=l(),Sh=a("li"),nie=a("strong"),s_o=o("clip"),l_o=o(" \u2014 "),AN=a("a"),i_o=o("CLIPFeatureExtractor"),d_o=o(" (CLIP model)"),c_o=l(),Rh=a("li"),sie=a("strong"),f_o=o("convnext"),m_o=o(" \u2014 "),LN=a("a"),g_o=o("ConvNextFeatureExtractor"),h_o=o(" (ConvNeXT model)"),p_o=l(),Ph=a("li"),lie=a("strong"),__o=o("cvt"),u_o=o(" \u2014 "),yN=a("a"),b_o=o("ConvNextFeatureExtractor"),v_o=o(" (CvT model)"),F_o=l(),Bh=a("li"),iie=a("strong"),T_o=o("data2vec-audio"),M_o=o(" \u2014 "),xN=a("a"),E_o=o("Wav2Vec2FeatureExtractor"),C_o=o(" (Data2VecAudio model)"),w_o=l(),Ih=a("li"),die=a("strong"),A_o=o("data2vec-vision"),L_o=o(" \u2014 "),$N=a("a"),y_o=o("BeitFeatureExtractor"),x_o=o(" (Data2VecVision model)"),$_o=l(),Nh=a("li"),cie=a("strong"),k_o=o("deit"),S_o=o(" \u2014 "),kN=a("a"),R_o=o("DeiTFeatureExtractor"),P_o=o(" (DeiT model)"),B_o=l(),qh=a("li"),fie=a("strong"),I_o=o("detr"),N_o=o(" \u2014 "),SN=a("a"),q_o=o("DetrFeatureExtractor"),j_o=o(" (DETR model)"),D_o=l(),jh=a("li"),mie=a("strong"),G_o=o("dpt"),O_o=o(" \u2014 "),RN=a("a"),V_o=o("DPTFeatureExtractor"),X_o=o(" (DPT model)"),z_o=l(),Dh=a("li"),gie=a("strong"),Q_o=o("flava"),W_o=o(" \u2014 "),PN=a("a"),H_o=o("FlavaFeatureExtractor"),U_o=o(" (FLAVA model)"),J_o=l(),Gh=a("li"),hie=a("strong"),Y_o=o("glpn"),K_o=o(" \u2014 "),BN=a("a"),Z_o=o("GLPNFeatureExtractor"),euo=o(" (GLPN model)"),ouo=l(),Oh=a("li"),pie=a("strong"),ruo=o("groupvit"),tuo=o(" \u2014 "),IN=a("a"),auo=o("CLIPFeatureExtractor"),nuo=o(" (GroupViT model)"),suo=l(),Vh=a("li"),_ie=a("strong"),luo=o("hubert"),iuo=o(" \u2014 "),NN=a("a"),duo=o("Wav2Vec2FeatureExtractor"),cuo=o(" (Hubert model)"),fuo=l(),Xh=a("li"),uie=a("strong"),muo=o("imagegpt"),guo=o(" \u2014 "),qN=a("a"),huo=o("ImageGPTFeatureExtractor"),puo=o(" (ImageGPT model)"),_uo=l(),zh=a("li"),bie=a("strong"),uuo=o("layoutlmv2"),buo=o(" \u2014 "),jN=a("a"),vuo=o("LayoutLMv2FeatureExtractor"),Fuo=o(" (LayoutLMv2 model)"),Tuo=l(),Qh=a("li"),vie=a("strong"),Muo=o("layoutlmv3"),Euo=o(" \u2014 "),DN=a("a"),Cuo=o("LayoutLMv3FeatureExtractor"),wuo=o(" (LayoutLMv3 model)"),Auo=l(),Wh=a("li"),Fie=a("strong"),Luo=o("levit"),yuo=o(" \u2014 "),GN=a("a"),xuo=o("LevitFeatureExtractor"),$uo=o(" (LeViT model)"),kuo=l(),Hh=a("li"),Tie=a("strong"),Suo=o("maskformer"),Ruo=o(" \u2014 "),ON=a("a"),Puo=o("MaskFormerFeatureExtractor"),Buo=o(" (MaskFormer model)"),Iuo=l(),Uh=a("li"),Mie=a("strong"),Nuo=o("mctct"),quo=o(" \u2014 "),VN=a("a"),juo=o("MCTCTFeatureExtractor"),Duo=o(" (M-CTC-T model)"),Guo=l(),Jh=a("li"),Eie=a("strong"),Ouo=o("perceiver"),Vuo=o(" \u2014 "),XN=a("a"),Xuo=o("PerceiverFeatureExtractor"),zuo=o(" (Perceiver model)"),Quo=l(),Yh=a("li"),Cie=a("strong"),Wuo=o("poolformer"),Huo=o(" \u2014 "),zN=a("a"),Uuo=o("PoolFormerFeatureExtractor"),Juo=o(" (PoolFormer model)"),Yuo=l(),Kh=a("li"),wie=a("strong"),Kuo=o("regnet"),Zuo=o(" \u2014 "),QN=a("a"),e5o=o("ConvNextFeatureExtractor"),o5o=o(" (RegNet model)"),r5o=l(),Zh=a("li"),Aie=a("strong"),t5o=o("resnet"),a5o=o(" \u2014 "),WN=a("a"),n5o=o("ConvNextFeatureExtractor"),s5o=o(" (ResNet model)"),l5o=l(),ep=a("li"),Lie=a("strong"),i5o=o("segformer"),d5o=o(" \u2014 "),HN=a("a"),c5o=o("SegformerFeatureExtractor"),f5o=o(" (SegFormer model)"),m5o=l(),op=a("li"),yie=a("strong"),g5o=o("speech_to_text"),h5o=o(" \u2014 "),UN=a("a"),p5o=o("Speech2TextFeatureExtractor"),_5o=o(" (Speech2Text model)"),u5o=l(),rp=a("li"),xie=a("strong"),b5o=o("swin"),v5o=o(" \u2014 "),JN=a("a"),F5o=o("ViTFeatureExtractor"),T5o=o(" (Swin Transformer model)"),M5o=l(),tp=a("li"),$ie=a("strong"),E5o=o("van"),C5o=o(" \u2014 "),YN=a("a"),w5o=o("ConvNextFeatureExtractor"),A5o=o(" (VAN model)"),L5o=l(),ap=a("li"),kie=a("strong"),y5o=o("vilt"),x5o=o(" \u2014 "),KN=a("a"),$5o=o("ViltFeatureExtractor"),k5o=o(" (ViLT model)"),S5o=l(),np=a("li"),Sie=a("strong"),R5o=o("vit"),P5o=o(" \u2014 "),ZN=a("a"),B5o=o("ViTFeatureExtractor"),I5o=o(" (ViT model)"),N5o=l(),sp=a("li"),Rie=a("strong"),q5o=o("vit_mae"),j5o=o(" \u2014 "),eq=a("a"),D5o=o("ViTFeatureExtractor"),G5o=o(" (ViTMAE model)"),O5o=l(),lp=a("li"),Pie=a("strong"),V5o=o("wav2vec2"),X5o=o(" \u2014 "),oq=a("a"),z5o=o("Wav2Vec2FeatureExtractor"),Q5o=o(" (Wav2Vec2 model)"),W5o=l(),ip=a("li"),Bie=a("strong"),H5o=o("wav2vec2-conformer"),U5o=o(" \u2014 "),rq=a("a"),J5o=o("Wav2Vec2FeatureExtractor"),Y5o=o(" (Wav2Vec2-Conformer model)"),K5o=l(),dp=a("li"),Iie=a("strong"),Z5o=o("yolos"),e1o=o(" \u2014 "),tq=a("a"),o1o=o("YolosFeatureExtractor"),r1o=o(" (YOLOS model)"),t1o=l(),F(cp.$$.fragment),a1o=l(),F(fp.$$.fragment),n1o=l(),mp=a("div"),F(ny.$$.fragment),s1o=l(),Nie=a("p"),l1o=o("Register a new feature extractor for this class."),OOe=l(),Ii=a("h2"),gp=a("a"),qie=a("span"),F(sy.$$.fragment),i1o=l(),jie=a("span"),d1o=o("AutoProcessor"),VOe=l(),yo=a("div"),F(ly.$$.fragment),c1o=l(),iy=a("p"),f1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aq=a("a"),m1o=o("AutoProcessor.from_pretrained()"),g1o=o(" class method."),h1o=l(),dy=a("p"),p1o=o("This class cannot be instantiated directly using "),Die=a("code"),_1o=o("__init__()"),u1o=o(" (throws an error)."),b1o=l(),Ue=a("div"),F(cy.$$.fragment),v1o=l(),Gie=a("p"),F1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),T1o=l(),Ni=a("p"),M1o=o("The processor class to instantiate is selected based on the "),Oie=a("code"),E1o=o("model_type"),C1o=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),w1o=o("pretrained_model_name_or_path"),A1o=o(" if possible):"),L1o=l(),he=a("ul"),hp=a("li"),Xie=a("strong"),y1o=o("clip"),x1o=o(" \u2014 "),nq=a("a"),$1o=o("CLIPProcessor"),k1o=o(" (CLIP model)"),S1o=l(),pp=a("li"),zie=a("strong"),R1o=o("flava"),P1o=o(" \u2014 "),Qie=a("code"),B1o=o("FLAVAProcessor"),I1o=o(" (FLAVA model)"),N1o=l(),_p=a("li"),Wie=a("strong"),q1o=o("groupvit"),j1o=o(" \u2014 "),sq=a("a"),D1o=o("CLIPProcessor"),G1o=o(" (GroupViT model)"),O1o=l(),up=a("li"),Hie=a("strong"),V1o=o("layoutlmv2"),X1o=o(" \u2014 "),lq=a("a"),z1o=o("LayoutLMv2Processor"),Q1o=o(" (LayoutLMv2 model)"),W1o=l(),bp=a("li"),Uie=a("strong"),H1o=o("layoutlmv3"),U1o=o(" \u2014 "),iq=a("a"),J1o=o("LayoutLMv3Processor"),Y1o=o(" (LayoutLMv3 model)"),K1o=l(),vp=a("li"),Jie=a("strong"),Z1o=o("layoutxlm"),e2o=o(" \u2014 "),dq=a("a"),o2o=o("LayoutXLMProcessor"),r2o=o(" (LayoutXLM model)"),t2o=l(),Fp=a("li"),Yie=a("strong"),a2o=o("sew"),n2o=o(" \u2014 "),cq=a("a"),s2o=o("Wav2Vec2Processor"),l2o=o(" (SEW model)"),i2o=l(),Tp=a("li"),Kie=a("strong"),d2o=o("sew-d"),c2o=o(" \u2014 "),fq=a("a"),f2o=o("Wav2Vec2Processor"),m2o=o(" (SEW-D model)"),g2o=l(),Mp=a("li"),Zie=a("strong"),h2o=o("speech_to_text"),p2o=o(" \u2014 "),mq=a("a"),_2o=o("Speech2TextProcessor"),u2o=o(" (Speech2Text model)"),b2o=l(),Ep=a("li"),ede=a("strong"),v2o=o("speech_to_text_2"),F2o=o(" \u2014 "),gq=a("a"),T2o=o("Speech2Text2Processor"),M2o=o(" (Speech2Text2 model)"),E2o=l(),Cp=a("li"),ode=a("strong"),C2o=o("trocr"),w2o=o(" \u2014 "),hq=a("a"),A2o=o("TrOCRProcessor"),L2o=o(" (TrOCR model)"),y2o=l(),wp=a("li"),rde=a("strong"),x2o=o("unispeech"),$2o=o(" \u2014 "),pq=a("a"),k2o=o("Wav2Vec2Processor"),S2o=o(" (UniSpeech model)"),R2o=l(),Ap=a("li"),tde=a("strong"),P2o=o("unispeech-sat"),B2o=o(" \u2014 "),_q=a("a"),I2o=o("Wav2Vec2Processor"),N2o=o(" (UniSpeechSat model)"),q2o=l(),Lp=a("li"),ade=a("strong"),j2o=o("vilt"),D2o=o(" \u2014 "),uq=a("a"),G2o=o("ViltProcessor"),O2o=o(" (ViLT model)"),V2o=l(),yp=a("li"),nde=a("strong"),X2o=o("vision-text-dual-encoder"),z2o=o(" \u2014 "),bq=a("a"),Q2o=o("VisionTextDualEncoderProcessor"),W2o=o(" (VisionTextDualEncoder model)"),H2o=l(),xp=a("li"),sde=a("strong"),U2o=o("wav2vec2"),J2o=o(" \u2014 "),vq=a("a"),Y2o=o("Wav2Vec2Processor"),K2o=o(" (Wav2Vec2 model)"),Z2o=l(),$p=a("li"),lde=a("strong"),e4o=o("wav2vec2-conformer"),o4o=o(" \u2014 "),Fq=a("a"),r4o=o("Wav2Vec2Processor"),t4o=o(" (Wav2Vec2-Conformer model)"),a4o=l(),kp=a("li"),ide=a("strong"),n4o=o("wavlm"),s4o=o(" \u2014 "),Tq=a("a"),l4o=o("Wav2Vec2Processor"),i4o=o(" (WavLM model)"),d4o=l(),F(Sp.$$.fragment),c4o=l(),F(Rp.$$.fragment),f4o=l(),Pp=a("div"),F(fy.$$.fragment),m4o=l(),dde=a("p"),g4o=o("Register a new processor for this class."),XOe=l(),qi=a("h2"),Bp=a("a"),cde=a("span"),F(my.$$.fragment),h4o=l(),fde=a("span"),p4o=o("AutoModel"),zOe=l(),xo=a("div"),F(gy.$$.fragment),_4o=l(),ji=a("p"),u4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=a("a"),b4o=o("from_pretrained()"),v4o=o(" class method or the "),Eq=a("a"),F4o=o("from_config()"),T4o=o(` class
method.`),M4o=l(),hy=a("p"),E4o=o("This class cannot be instantiated directly using "),mde=a("code"),C4o=o("__init__()"),w4o=o(" (throws an error)."),A4o=l(),st=a("div"),F(py.$$.fragment),L4o=l(),gde=a("p"),y4o=o("Instantiates one of the base model classes of the library from a configuration."),x4o=l(),Di=a("p"),$4o=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),k4o=o("not"),S4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=a("a"),R4o=o("from_pretrained()"),P4o=o(" to load the model weights."),B4o=l(),F(Ip.$$.fragment),I4o=l(),Je=a("div"),F(_y.$$.fragment),N4o=l(),pde=a("p"),q4o=o("Instantiate one of the base model classes of the library from a pretrained model."),j4o=l(),Pa=a("p"),D4o=o("The model class to instantiate is selected based on the "),_de=a("code"),G4o=o("model_type"),O4o=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),V4o=o("pretrained_model_name_or_path"),X4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),z4o=o("pretrained_model_name_or_path"),Q4o=o(":"),W4o=l(),y=a("ul"),Np=a("li"),vde=a("strong"),H4o=o("albert"),U4o=o(" \u2014 "),wq=a("a"),J4o=o("AlbertModel"),Y4o=o(" (ALBERT model)"),K4o=l(),qp=a("li"),Fde=a("strong"),Z4o=o("bart"),ebo=o(" \u2014 "),Aq=a("a"),obo=o("BartModel"),rbo=o(" (BART model)"),tbo=l(),jp=a("li"),Tde=a("strong"),abo=o("beit"),nbo=o(" \u2014 "),Lq=a("a"),sbo=o("BeitModel"),lbo=o(" (BEiT model)"),ibo=l(),Dp=a("li"),Mde=a("strong"),dbo=o("bert"),cbo=o(" \u2014 "),yq=a("a"),fbo=o("BertModel"),mbo=o(" (BERT model)"),gbo=l(),Gp=a("li"),Ede=a("strong"),hbo=o("bert-generation"),pbo=o(" \u2014 "),xq=a("a"),_bo=o("BertGenerationEncoder"),ubo=o(" (Bert Generation model)"),bbo=l(),Op=a("li"),Cde=a("strong"),vbo=o("big_bird"),Fbo=o(" \u2014 "),$q=a("a"),Tbo=o("BigBirdModel"),Mbo=o(" (BigBird model)"),Ebo=l(),Vp=a("li"),wde=a("strong"),Cbo=o("bigbird_pegasus"),wbo=o(" \u2014 "),kq=a("a"),Abo=o("BigBirdPegasusModel"),Lbo=o(" (BigBird-Pegasus model)"),ybo=l(),Xp=a("li"),Ade=a("strong"),xbo=o("blenderbot"),$bo=o(" \u2014 "),Sq=a("a"),kbo=o("BlenderbotModel"),Sbo=o(" (Blenderbot model)"),Rbo=l(),zp=a("li"),Lde=a("strong"),Pbo=o("blenderbot-small"),Bbo=o(" \u2014 "),Rq=a("a"),Ibo=o("BlenderbotSmallModel"),Nbo=o(" (BlenderbotSmall model)"),qbo=l(),Qp=a("li"),yde=a("strong"),jbo=o("bloom"),Dbo=o(" \u2014 "),Pq=a("a"),Gbo=o("BloomModel"),Obo=o(" (BLOOM model)"),Vbo=l(),Wp=a("li"),xde=a("strong"),Xbo=o("camembert"),zbo=o(" \u2014 "),Bq=a("a"),Qbo=o("CamembertModel"),Wbo=o(" (CamemBERT model)"),Hbo=l(),Hp=a("li"),$de=a("strong"),Ubo=o("canine"),Jbo=o(" \u2014 "),Iq=a("a"),Ybo=o("CanineModel"),Kbo=o(" (CANINE model)"),Zbo=l(),Up=a("li"),kde=a("strong"),evo=o("clip"),ovo=o(" \u2014 "),Nq=a("a"),rvo=o("CLIPModel"),tvo=o(" (CLIP model)"),avo=l(),Jp=a("li"),Sde=a("strong"),nvo=o("codegen"),svo=o(" \u2014 "),qq=a("a"),lvo=o("CodeGenModel"),ivo=o(" (CodeGen model)"),dvo=l(),Yp=a("li"),Rde=a("strong"),cvo=o("convbert"),fvo=o(" \u2014 "),jq=a("a"),mvo=o("ConvBertModel"),gvo=o(" (ConvBERT model)"),hvo=l(),Kp=a("li"),Pde=a("strong"),pvo=o("convnext"),_vo=o(" \u2014 "),Dq=a("a"),uvo=o("ConvNextModel"),bvo=o(" (ConvNeXT model)"),vvo=l(),Zp=a("li"),Bde=a("strong"),Fvo=o("ctrl"),Tvo=o(" \u2014 "),Gq=a("a"),Mvo=o("CTRLModel"),Evo=o(" (CTRL model)"),Cvo=l(),e_=a("li"),Ide=a("strong"),wvo=o("cvt"),Avo=o(" \u2014 "),Oq=a("a"),Lvo=o("CvtModel"),yvo=o(" (CvT model)"),xvo=l(),o_=a("li"),Nde=a("strong"),$vo=o("data2vec-audio"),kvo=o(" \u2014 "),Vq=a("a"),Svo=o("Data2VecAudioModel"),Rvo=o(" (Data2VecAudio model)"),Pvo=l(),r_=a("li"),qde=a("strong"),Bvo=o("data2vec-text"),Ivo=o(" \u2014 "),Xq=a("a"),Nvo=o("Data2VecTextModel"),qvo=o(" (Data2VecText model)"),jvo=l(),t_=a("li"),jde=a("strong"),Dvo=o("data2vec-vision"),Gvo=o(" \u2014 "),zq=a("a"),Ovo=o("Data2VecVisionModel"),Vvo=o(" (Data2VecVision model)"),Xvo=l(),a_=a("li"),Dde=a("strong"),zvo=o("deberta"),Qvo=o(" \u2014 "),Qq=a("a"),Wvo=o("DebertaModel"),Hvo=o(" (DeBERTa model)"),Uvo=l(),n_=a("li"),Gde=a("strong"),Jvo=o("deberta-v2"),Yvo=o(" \u2014 "),Wq=a("a"),Kvo=o("DebertaV2Model"),Zvo=o(" (DeBERTa-v2 model)"),eFo=l(),s_=a("li"),Ode=a("strong"),oFo=o("decision_transformer"),rFo=o(" \u2014 "),Hq=a("a"),tFo=o("DecisionTransformerModel"),aFo=o(" (Decision Transformer model)"),nFo=l(),l_=a("li"),Vde=a("strong"),sFo=o("deit"),lFo=o(" \u2014 "),Uq=a("a"),iFo=o("DeiTModel"),dFo=o(" (DeiT model)"),cFo=l(),i_=a("li"),Xde=a("strong"),fFo=o("detr"),mFo=o(" \u2014 "),Jq=a("a"),gFo=o("DetrModel"),hFo=o(" (DETR model)"),pFo=l(),d_=a("li"),zde=a("strong"),_Fo=o("distilbert"),uFo=o(" \u2014 "),Yq=a("a"),bFo=o("DistilBertModel"),vFo=o(" (DistilBERT model)"),FFo=l(),c_=a("li"),Qde=a("strong"),TFo=o("dpr"),MFo=o(" \u2014 "),Kq=a("a"),EFo=o("DPRQuestionEncoder"),CFo=o(" (DPR model)"),wFo=l(),f_=a("li"),Wde=a("strong"),AFo=o("dpt"),LFo=o(" \u2014 "),Zq=a("a"),yFo=o("DPTModel"),xFo=o(" (DPT model)"),$Fo=l(),m_=a("li"),Hde=a("strong"),kFo=o("electra"),SFo=o(" \u2014 "),ej=a("a"),RFo=o("ElectraModel"),PFo=o(" (ELECTRA model)"),BFo=l(),g_=a("li"),Ude=a("strong"),IFo=o("flaubert"),NFo=o(" \u2014 "),oj=a("a"),qFo=o("FlaubertModel"),jFo=o(" (FlauBERT model)"),DFo=l(),h_=a("li"),Jde=a("strong"),GFo=o("flava"),OFo=o(" \u2014 "),rj=a("a"),VFo=o("FlavaModel"),XFo=o(" (FLAVA model)"),zFo=l(),p_=a("li"),Yde=a("strong"),QFo=o("fnet"),WFo=o(" \u2014 "),tj=a("a"),HFo=o("FNetModel"),UFo=o(" (FNet model)"),JFo=l(),__=a("li"),Kde=a("strong"),YFo=o("fsmt"),KFo=o(" \u2014 "),aj=a("a"),ZFo=o("FSMTModel"),eTo=o(" (FairSeq Machine-Translation model)"),oTo=l(),zs=a("li"),Zde=a("strong"),rTo=o("funnel"),tTo=o(" \u2014 "),nj=a("a"),aTo=o("FunnelModel"),nTo=o(" or "),sj=a("a"),sTo=o("FunnelBaseModel"),lTo=o(" (Funnel Transformer model)"),iTo=l(),u_=a("li"),ece=a("strong"),dTo=o("glpn"),cTo=o(" \u2014 "),lj=a("a"),fTo=o("GLPNModel"),mTo=o(" (GLPN model)"),gTo=l(),b_=a("li"),oce=a("strong"),hTo=o("gpt2"),pTo=o(" \u2014 "),ij=a("a"),_To=o("GPT2Model"),uTo=o(" (OpenAI GPT-2 model)"),bTo=l(),v_=a("li"),rce=a("strong"),vTo=o("gpt_neo"),FTo=o(" \u2014 "),dj=a("a"),TTo=o("GPTNeoModel"),MTo=o(" (GPT Neo model)"),ETo=l(),F_=a("li"),tce=a("strong"),CTo=o("gpt_neox"),wTo=o(" \u2014 "),cj=a("a"),ATo=o("GPTNeoXModel"),LTo=o(" (GPT NeoX model)"),yTo=l(),T_=a("li"),ace=a("strong"),xTo=o("gptj"),$To=o(" \u2014 "),fj=a("a"),kTo=o("GPTJModel"),STo=o(" (GPT-J model)"),RTo=l(),M_=a("li"),nce=a("strong"),PTo=o("groupvit"),BTo=o(" \u2014 "),mj=a("a"),ITo=o("GroupViTModel"),NTo=o(" (GroupViT model)"),qTo=l(),E_=a("li"),sce=a("strong"),jTo=o("hubert"),DTo=o(" \u2014 "),gj=a("a"),GTo=o("HubertModel"),OTo=o(" (Hubert model)"),VTo=l(),C_=a("li"),lce=a("strong"),XTo=o("ibert"),zTo=o(" \u2014 "),hj=a("a"),QTo=o("IBertModel"),WTo=o(" (I-BERT model)"),HTo=l(),w_=a("li"),ice=a("strong"),UTo=o("imagegpt"),JTo=o(" \u2014 "),pj=a("a"),YTo=o("ImageGPTModel"),KTo=o(" (ImageGPT model)"),ZTo=l(),A_=a("li"),dce=a("strong"),e7o=o("layoutlm"),o7o=o(" \u2014 "),_j=a("a"),r7o=o("LayoutLMModel"),t7o=o(" (LayoutLM model)"),a7o=l(),L_=a("li"),cce=a("strong"),n7o=o("layoutlmv2"),s7o=o(" \u2014 "),uj=a("a"),l7o=o("LayoutLMv2Model"),i7o=o(" (LayoutLMv2 model)"),d7o=l(),y_=a("li"),fce=a("strong"),c7o=o("layoutlmv3"),f7o=o(" \u2014 "),bj=a("a"),m7o=o("LayoutLMv3Model"),g7o=o(" (LayoutLMv3 model)"),h7o=l(),x_=a("li"),mce=a("strong"),p7o=o("led"),_7o=o(" \u2014 "),vj=a("a"),u7o=o("LEDModel"),b7o=o(" (LED model)"),v7o=l(),$_=a("li"),gce=a("strong"),F7o=o("levit"),T7o=o(" \u2014 "),Fj=a("a"),M7o=o("LevitModel"),E7o=o(" (LeViT model)"),C7o=l(),k_=a("li"),hce=a("strong"),w7o=o("longformer"),A7o=o(" \u2014 "),Tj=a("a"),L7o=o("LongformerModel"),y7o=o(" (Longformer model)"),x7o=l(),S_=a("li"),pce=a("strong"),$7o=o("longt5"),k7o=o(" \u2014 "),Mj=a("a"),S7o=o("LongT5Model"),R7o=o(" (LongT5 model)"),P7o=l(),R_=a("li"),_ce=a("strong"),B7o=o("luke"),I7o=o(" \u2014 "),Ej=a("a"),N7o=o("LukeModel"),q7o=o(" (LUKE model)"),j7o=l(),P_=a("li"),uce=a("strong"),D7o=o("lxmert"),G7o=o(" \u2014 "),Cj=a("a"),O7o=o("LxmertModel"),V7o=o(" (LXMERT model)"),X7o=l(),B_=a("li"),bce=a("strong"),z7o=o("m2m_100"),Q7o=o(" \u2014 "),wj=a("a"),W7o=o("M2M100Model"),H7o=o(" (M2M100 model)"),U7o=l(),I_=a("li"),vce=a("strong"),J7o=o("marian"),Y7o=o(" \u2014 "),Aj=a("a"),K7o=o("MarianModel"),Z7o=o(" (Marian model)"),eMo=l(),N_=a("li"),Fce=a("strong"),oMo=o("maskformer"),rMo=o(" \u2014 "),Lj=a("a"),tMo=o("MaskFormerModel"),aMo=o(" (MaskFormer model)"),nMo=l(),q_=a("li"),Tce=a("strong"),sMo=o("mbart"),lMo=o(" \u2014 "),yj=a("a"),iMo=o("MBartModel"),dMo=o(" (mBART model)"),cMo=l(),j_=a("li"),Mce=a("strong"),fMo=o("mctct"),mMo=o(" \u2014 "),xj=a("a"),gMo=o("MCTCTModel"),hMo=o(" (M-CTC-T model)"),pMo=l(),D_=a("li"),Ece=a("strong"),_Mo=o("megatron-bert"),uMo=o(" \u2014 "),$j=a("a"),bMo=o("MegatronBertModel"),vMo=o(" (Megatron-BERT model)"),FMo=l(),G_=a("li"),Cce=a("strong"),TMo=o("mobilebert"),MMo=o(" \u2014 "),kj=a("a"),EMo=o("MobileBertModel"),CMo=o(" (MobileBERT model)"),wMo=l(),O_=a("li"),wce=a("strong"),AMo=o("mpnet"),LMo=o(" \u2014 "),Sj=a("a"),yMo=o("MPNetModel"),xMo=o(" (MPNet model)"),$Mo=l(),V_=a("li"),Ace=a("strong"),kMo=o("mt5"),SMo=o(" \u2014 "),Rj=a("a"),RMo=o("MT5Model"),PMo=o(" (MT5 model)"),BMo=l(),X_=a("li"),Lce=a("strong"),IMo=o("nezha"),NMo=o(" \u2014 "),Pj=a("a"),qMo=o("NezhaModel"),jMo=o(" (Nezha model)"),DMo=l(),z_=a("li"),yce=a("strong"),GMo=o("nystromformer"),OMo=o(" \u2014 "),Bj=a("a"),VMo=o("NystromformerModel"),XMo=o(" (Nystr\xF6mformer model)"),zMo=l(),Q_=a("li"),xce=a("strong"),QMo=o("openai-gpt"),WMo=o(" \u2014 "),Ij=a("a"),HMo=o("OpenAIGPTModel"),UMo=o(" (OpenAI GPT model)"),JMo=l(),W_=a("li"),$ce=a("strong"),YMo=o("opt"),KMo=o(" \u2014 "),Nj=a("a"),ZMo=o("OPTModel"),eEo=o(" (OPT model)"),oEo=l(),H_=a("li"),kce=a("strong"),rEo=o("pegasus"),tEo=o(" \u2014 "),qj=a("a"),aEo=o("PegasusModel"),nEo=o(" (Pegasus model)"),sEo=l(),U_=a("li"),Sce=a("strong"),lEo=o("perceiver"),iEo=o(" \u2014 "),jj=a("a"),dEo=o("PerceiverModel"),cEo=o(" (Perceiver model)"),fEo=l(),J_=a("li"),Rce=a("strong"),mEo=o("plbart"),gEo=o(" \u2014 "),Dj=a("a"),hEo=o("PLBartModel"),pEo=o(" (PLBart model)"),_Eo=l(),Y_=a("li"),Pce=a("strong"),uEo=o("poolformer"),bEo=o(" \u2014 "),Gj=a("a"),vEo=o("PoolFormerModel"),FEo=o(" (PoolFormer model)"),TEo=l(),K_=a("li"),Bce=a("strong"),MEo=o("prophetnet"),EEo=o(" \u2014 "),Oj=a("a"),CEo=o("ProphetNetModel"),wEo=o(" (ProphetNet model)"),AEo=l(),Z_=a("li"),Ice=a("strong"),LEo=o("qdqbert"),yEo=o(" \u2014 "),Vj=a("a"),xEo=o("QDQBertModel"),$Eo=o(" (QDQBert model)"),kEo=l(),eu=a("li"),Nce=a("strong"),SEo=o("reformer"),REo=o(" \u2014 "),Xj=a("a"),PEo=o("ReformerModel"),BEo=o(" (Reformer model)"),IEo=l(),ou=a("li"),qce=a("strong"),NEo=o("regnet"),qEo=o(" \u2014 "),zj=a("a"),jEo=o("RegNetModel"),DEo=o(" (RegNet model)"),GEo=l(),ru=a("li"),jce=a("strong"),OEo=o("rembert"),VEo=o(" \u2014 "),Qj=a("a"),XEo=o("RemBertModel"),zEo=o(" (RemBERT model)"),QEo=l(),tu=a("li"),Dce=a("strong"),WEo=o("resnet"),HEo=o(" \u2014 "),Wj=a("a"),UEo=o("ResNetModel"),JEo=o(" (ResNet model)"),YEo=l(),au=a("li"),Gce=a("strong"),KEo=o("retribert"),ZEo=o(" \u2014 "),Hj=a("a"),eCo=o("RetriBertModel"),oCo=o(" (RetriBERT model)"),rCo=l(),nu=a("li"),Oce=a("strong"),tCo=o("roberta"),aCo=o(" \u2014 "),Uj=a("a"),nCo=o("RobertaModel"),sCo=o(" (RoBERTa model)"),lCo=l(),su=a("li"),Vce=a("strong"),iCo=o("roformer"),dCo=o(" \u2014 "),Jj=a("a"),cCo=o("RoFormerModel"),fCo=o(" (RoFormer model)"),mCo=l(),lu=a("li"),Xce=a("strong"),gCo=o("segformer"),hCo=o(" \u2014 "),Yj=a("a"),pCo=o("SegformerModel"),_Co=o(" (SegFormer model)"),uCo=l(),iu=a("li"),zce=a("strong"),bCo=o("sew"),vCo=o(" \u2014 "),Kj=a("a"),FCo=o("SEWModel"),TCo=o(" (SEW model)"),MCo=l(),du=a("li"),Qce=a("strong"),ECo=o("sew-d"),CCo=o(" \u2014 "),Zj=a("a"),wCo=o("SEWDModel"),ACo=o(" (SEW-D model)"),LCo=l(),cu=a("li"),Wce=a("strong"),yCo=o("speech_to_text"),xCo=o(" \u2014 "),eD=a("a"),$Co=o("Speech2TextModel"),kCo=o(" (Speech2Text model)"),SCo=l(),fu=a("li"),Hce=a("strong"),RCo=o("splinter"),PCo=o(" \u2014 "),oD=a("a"),BCo=o("SplinterModel"),ICo=o(" (Splinter model)"),NCo=l(),mu=a("li"),Uce=a("strong"),qCo=o("squeezebert"),jCo=o(" \u2014 "),rD=a("a"),DCo=o("SqueezeBertModel"),GCo=o(" (SqueezeBERT model)"),OCo=l(),gu=a("li"),Jce=a("strong"),VCo=o("swin"),XCo=o(" \u2014 "),tD=a("a"),zCo=o("SwinModel"),QCo=o(" (Swin Transformer model)"),WCo=l(),hu=a("li"),Yce=a("strong"),HCo=o("t5"),UCo=o(" \u2014 "),aD=a("a"),JCo=o("T5Model"),YCo=o(" (T5 model)"),KCo=l(),pu=a("li"),Kce=a("strong"),ZCo=o("tapas"),e3o=o(" \u2014 "),nD=a("a"),o3o=o("TapasModel"),r3o=o(" (TAPAS model)"),t3o=l(),_u=a("li"),Zce=a("strong"),a3o=o("trajectory_transformer"),n3o=o(" \u2014 "),sD=a("a"),s3o=o("TrajectoryTransformerModel"),l3o=o(" (Trajectory Transformer model)"),i3o=l(),uu=a("li"),efe=a("strong"),d3o=o("transfo-xl"),c3o=o(" \u2014 "),lD=a("a"),f3o=o("TransfoXLModel"),m3o=o(" (Transformer-XL model)"),g3o=l(),bu=a("li"),ofe=a("strong"),h3o=o("unispeech"),p3o=o(" \u2014 "),iD=a("a"),_3o=o("UniSpeechModel"),u3o=o(" (UniSpeech model)"),b3o=l(),vu=a("li"),rfe=a("strong"),v3o=o("unispeech-sat"),F3o=o(" \u2014 "),dD=a("a"),T3o=o("UniSpeechSatModel"),M3o=o(" (UniSpeechSat model)"),E3o=l(),Fu=a("li"),tfe=a("strong"),C3o=o("van"),w3o=o(" \u2014 "),cD=a("a"),A3o=o("VanModel"),L3o=o(" (VAN model)"),y3o=l(),Tu=a("li"),afe=a("strong"),x3o=o("vilt"),$3o=o(" \u2014 "),fD=a("a"),k3o=o("ViltModel"),S3o=o(" (ViLT model)"),R3o=l(),Mu=a("li"),nfe=a("strong"),P3o=o("vision-text-dual-encoder"),B3o=o(" \u2014 "),mD=a("a"),I3o=o("VisionTextDualEncoderModel"),N3o=o(" (VisionTextDualEncoder model)"),q3o=l(),Eu=a("li"),sfe=a("strong"),j3o=o("visual_bert"),D3o=o(" \u2014 "),gD=a("a"),G3o=o("VisualBertModel"),O3o=o(" (VisualBERT model)"),V3o=l(),Cu=a("li"),lfe=a("strong"),X3o=o("vit"),z3o=o(" \u2014 "),hD=a("a"),Q3o=o("ViTModel"),W3o=o(" (ViT model)"),H3o=l(),wu=a("li"),ife=a("strong"),U3o=o("vit_mae"),J3o=o(" \u2014 "),pD=a("a"),Y3o=o("ViTMAEModel"),K3o=o(" (ViTMAE model)"),Z3o=l(),Au=a("li"),dfe=a("strong"),e0o=o("wav2vec2"),o0o=o(" \u2014 "),_D=a("a"),r0o=o("Wav2Vec2Model"),t0o=o(" (Wav2Vec2 model)"),a0o=l(),Lu=a("li"),cfe=a("strong"),n0o=o("wav2vec2-conformer"),s0o=o(" \u2014 "),uD=a("a"),l0o=o("Wav2Vec2ConformerModel"),i0o=o(" (Wav2Vec2-Conformer model)"),d0o=l(),yu=a("li"),ffe=a("strong"),c0o=o("wavlm"),f0o=o(" \u2014 "),bD=a("a"),m0o=o("WavLMModel"),g0o=o(" (WavLM model)"),h0o=l(),xu=a("li"),mfe=a("strong"),p0o=o("xglm"),_0o=o(" \u2014 "),vD=a("a"),u0o=o("XGLMModel"),b0o=o(" (XGLM model)"),v0o=l(),$u=a("li"),gfe=a("strong"),F0o=o("xlm"),T0o=o(" \u2014 "),FD=a("a"),M0o=o("XLMModel"),E0o=o(" (XLM model)"),C0o=l(),ku=a("li"),hfe=a("strong"),w0o=o("xlm-prophetnet"),A0o=o(" \u2014 "),TD=a("a"),L0o=o("XLMProphetNetModel"),y0o=o(" (XLM-ProphetNet model)"),x0o=l(),Su=a("li"),pfe=a("strong"),$0o=o("xlm-roberta"),k0o=o(" \u2014 "),MD=a("a"),S0o=o("XLMRobertaModel"),R0o=o(" (XLM-RoBERTa model)"),P0o=l(),Ru=a("li"),_fe=a("strong"),B0o=o("xlm-roberta-xl"),I0o=o(" \u2014 "),ED=a("a"),N0o=o("XLMRobertaXLModel"),q0o=o(" (XLM-RoBERTa-XL model)"),j0o=l(),Pu=a("li"),ufe=a("strong"),D0o=o("xlnet"),G0o=o(" \u2014 "),CD=a("a"),O0o=o("XLNetModel"),V0o=o(" (XLNet model)"),X0o=l(),Bu=a("li"),bfe=a("strong"),z0o=o("yolos"),Q0o=o(" \u2014 "),wD=a("a"),W0o=o("YolosModel"),H0o=o(" (YOLOS model)"),U0o=l(),Iu=a("li"),vfe=a("strong"),J0o=o("yoso"),Y0o=o(" \u2014 "),AD=a("a"),K0o=o("YosoModel"),Z0o=o(" (YOSO model)"),ewo=l(),Nu=a("p"),owo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),rwo=o("model.eval()"),two=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),awo=o("model.train()"),nwo=l(),F(qu.$$.fragment),QOe=l(),Gi=a("h2"),ju=a("a"),Mfe=a("span"),F(uy.$$.fragment),swo=l(),Efe=a("span"),lwo=o("AutoModelForPreTraining"),WOe=l(),$o=a("div"),F(by.$$.fragment),iwo=l(),Oi=a("p"),dwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=a("a"),cwo=o("from_pretrained()"),fwo=o(" class method or the "),yD=a("a"),mwo=o("from_config()"),gwo=o(` class
method.`),hwo=l(),vy=a("p"),pwo=o("This class cannot be instantiated directly using "),Cfe=a("code"),_wo=o("__init__()"),uwo=o(" (throws an error)."),bwo=l(),lt=a("div"),F(Fy.$$.fragment),vwo=l(),wfe=a("p"),Fwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Two=l(),Vi=a("p"),Mwo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),Ewo=o("not"),Cwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),wwo=o("from_pretrained()"),Awo=o(" to load the model weights."),Lwo=l(),F(Du.$$.fragment),ywo=l(),Ye=a("div"),F(Ty.$$.fragment),xwo=l(),Lfe=a("p"),$wo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kwo=l(),Ba=a("p"),Swo=o("The model class to instantiate is selected based on the "),yfe=a("code"),Rwo=o("model_type"),Pwo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),Bwo=o("pretrained_model_name_or_path"),Iwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),Nwo=o("pretrained_model_name_or_path"),qwo=o(":"),jwo=l(),G=a("ul"),Gu=a("li"),kfe=a("strong"),Dwo=o("albert"),Gwo=o(" \u2014 "),$D=a("a"),Owo=o("AlbertForPreTraining"),Vwo=o(" (ALBERT model)"),Xwo=l(),Ou=a("li"),Sfe=a("strong"),zwo=o("bart"),Qwo=o(" \u2014 "),kD=a("a"),Wwo=o("BartForConditionalGeneration"),Hwo=o(" (BART model)"),Uwo=l(),Vu=a("li"),Rfe=a("strong"),Jwo=o("bert"),Ywo=o(" \u2014 "),SD=a("a"),Kwo=o("BertForPreTraining"),Zwo=o(" (BERT model)"),eAo=l(),Xu=a("li"),Pfe=a("strong"),oAo=o("big_bird"),rAo=o(" \u2014 "),RD=a("a"),tAo=o("BigBirdForPreTraining"),aAo=o(" (BigBird model)"),nAo=l(),zu=a("li"),Bfe=a("strong"),sAo=o("bloom"),lAo=o(" \u2014 "),PD=a("a"),iAo=o("BloomForCausalLM"),dAo=o(" (BLOOM model)"),cAo=l(),Qu=a("li"),Ife=a("strong"),fAo=o("camembert"),mAo=o(" \u2014 "),BD=a("a"),gAo=o("CamembertForMaskedLM"),hAo=o(" (CamemBERT model)"),pAo=l(),Wu=a("li"),Nfe=a("strong"),_Ao=o("ctrl"),uAo=o(" \u2014 "),ID=a("a"),bAo=o("CTRLLMHeadModel"),vAo=o(" (CTRL model)"),FAo=l(),Hu=a("li"),qfe=a("strong"),TAo=o("data2vec-text"),MAo=o(" \u2014 "),ND=a("a"),EAo=o("Data2VecTextForMaskedLM"),CAo=o(" (Data2VecText model)"),wAo=l(),Uu=a("li"),jfe=a("strong"),AAo=o("deberta"),LAo=o(" \u2014 "),qD=a("a"),yAo=o("DebertaForMaskedLM"),xAo=o(" (DeBERTa model)"),$Ao=l(),Ju=a("li"),Dfe=a("strong"),kAo=o("deberta-v2"),SAo=o(" \u2014 "),jD=a("a"),RAo=o("DebertaV2ForMaskedLM"),PAo=o(" (DeBERTa-v2 model)"),BAo=l(),Yu=a("li"),Gfe=a("strong"),IAo=o("distilbert"),NAo=o(" \u2014 "),DD=a("a"),qAo=o("DistilBertForMaskedLM"),jAo=o(" (DistilBERT model)"),DAo=l(),Ku=a("li"),Ofe=a("strong"),GAo=o("electra"),OAo=o(" \u2014 "),GD=a("a"),VAo=o("ElectraForPreTraining"),XAo=o(" (ELECTRA model)"),zAo=l(),Zu=a("li"),Vfe=a("strong"),QAo=o("flaubert"),WAo=o(" \u2014 "),OD=a("a"),HAo=o("FlaubertWithLMHeadModel"),UAo=o(" (FlauBERT model)"),JAo=l(),e5=a("li"),Xfe=a("strong"),YAo=o("flava"),KAo=o(" \u2014 "),VD=a("a"),ZAo=o("FlavaForPreTraining"),e6o=o(" (FLAVA model)"),o6o=l(),o5=a("li"),zfe=a("strong"),r6o=o("fnet"),t6o=o(" \u2014 "),XD=a("a"),a6o=o("FNetForPreTraining"),n6o=o(" (FNet model)"),s6o=l(),r5=a("li"),Qfe=a("strong"),l6o=o("fsmt"),i6o=o(" \u2014 "),zD=a("a"),d6o=o("FSMTForConditionalGeneration"),c6o=o(" (FairSeq Machine-Translation model)"),f6o=l(),t5=a("li"),Wfe=a("strong"),m6o=o("funnel"),g6o=o(" \u2014 "),QD=a("a"),h6o=o("FunnelForPreTraining"),p6o=o(" (Funnel Transformer model)"),_6o=l(),a5=a("li"),Hfe=a("strong"),u6o=o("gpt2"),b6o=o(" \u2014 "),WD=a("a"),v6o=o("GPT2LMHeadModel"),F6o=o(" (OpenAI GPT-2 model)"),T6o=l(),n5=a("li"),Ufe=a("strong"),M6o=o("ibert"),E6o=o(" \u2014 "),HD=a("a"),C6o=o("IBertForMaskedLM"),w6o=o(" (I-BERT model)"),A6o=l(),s5=a("li"),Jfe=a("strong"),L6o=o("layoutlm"),y6o=o(" \u2014 "),UD=a("a"),x6o=o("LayoutLMForMaskedLM"),$6o=o(" (LayoutLM model)"),k6o=l(),l5=a("li"),Yfe=a("strong"),S6o=o("longformer"),R6o=o(" \u2014 "),JD=a("a"),P6o=o("LongformerForMaskedLM"),B6o=o(" (Longformer model)"),I6o=l(),i5=a("li"),Kfe=a("strong"),N6o=o("lxmert"),q6o=o(" \u2014 "),YD=a("a"),j6o=o("LxmertForPreTraining"),D6o=o(" (LXMERT model)"),G6o=l(),d5=a("li"),Zfe=a("strong"),O6o=o("megatron-bert"),V6o=o(" \u2014 "),KD=a("a"),X6o=o("MegatronBertForPreTraining"),z6o=o(" (Megatron-BERT model)"),Q6o=l(),c5=a("li"),eme=a("strong"),W6o=o("mobilebert"),H6o=o(" \u2014 "),ZD=a("a"),U6o=o("MobileBertForPreTraining"),J6o=o(" (MobileBERT model)"),Y6o=l(),f5=a("li"),ome=a("strong"),K6o=o("mpnet"),Z6o=o(" \u2014 "),eG=a("a"),eLo=o("MPNetForMaskedLM"),oLo=o(" (MPNet model)"),rLo=l(),m5=a("li"),rme=a("strong"),tLo=o("nezha"),aLo=o(" \u2014 "),oG=a("a"),nLo=o("NezhaForPreTraining"),sLo=o(" (Nezha model)"),lLo=l(),g5=a("li"),tme=a("strong"),iLo=o("openai-gpt"),dLo=o(" \u2014 "),rG=a("a"),cLo=o("OpenAIGPTLMHeadModel"),fLo=o(" (OpenAI GPT model)"),mLo=l(),h5=a("li"),ame=a("strong"),gLo=o("retribert"),hLo=o(" \u2014 "),tG=a("a"),pLo=o("RetriBertModel"),_Lo=o(" (RetriBERT model)"),uLo=l(),p5=a("li"),nme=a("strong"),bLo=o("roberta"),vLo=o(" \u2014 "),aG=a("a"),FLo=o("RobertaForMaskedLM"),TLo=o(" (RoBERTa model)"),MLo=l(),_5=a("li"),sme=a("strong"),ELo=o("splinter"),CLo=o(" \u2014 "),nG=a("a"),wLo=o("SplinterForPreTraining"),ALo=o(" (Splinter model)"),LLo=l(),u5=a("li"),lme=a("strong"),yLo=o("squeezebert"),xLo=o(" \u2014 "),sG=a("a"),$Lo=o("SqueezeBertForMaskedLM"),kLo=o(" (SqueezeBERT model)"),SLo=l(),b5=a("li"),ime=a("strong"),RLo=o("t5"),PLo=o(" \u2014 "),lG=a("a"),BLo=o("T5ForConditionalGeneration"),ILo=o(" (T5 model)"),NLo=l(),v5=a("li"),dme=a("strong"),qLo=o("tapas"),jLo=o(" \u2014 "),iG=a("a"),DLo=o("TapasForMaskedLM"),GLo=o(" (TAPAS model)"),OLo=l(),F5=a("li"),cme=a("strong"),VLo=o("transfo-xl"),XLo=o(" \u2014 "),dG=a("a"),zLo=o("TransfoXLLMHeadModel"),QLo=o(" (Transformer-XL model)"),WLo=l(),T5=a("li"),fme=a("strong"),HLo=o("unispeech"),ULo=o(" \u2014 "),cG=a("a"),JLo=o("UniSpeechForPreTraining"),YLo=o(" (UniSpeech model)"),KLo=l(),M5=a("li"),mme=a("strong"),ZLo=o("unispeech-sat"),eyo=o(" \u2014 "),fG=a("a"),oyo=o("UniSpeechSatForPreTraining"),ryo=o(" (UniSpeechSat model)"),tyo=l(),E5=a("li"),gme=a("strong"),ayo=o("visual_bert"),nyo=o(" \u2014 "),mG=a("a"),syo=o("VisualBertForPreTraining"),lyo=o(" (VisualBERT model)"),iyo=l(),C5=a("li"),hme=a("strong"),dyo=o("vit_mae"),cyo=o(" \u2014 "),gG=a("a"),fyo=o("ViTMAEForPreTraining"),myo=o(" (ViTMAE model)"),gyo=l(),w5=a("li"),pme=a("strong"),hyo=o("wav2vec2"),pyo=o(" \u2014 "),hG=a("a"),_yo=o("Wav2Vec2ForPreTraining"),uyo=o(" (Wav2Vec2 model)"),byo=l(),A5=a("li"),_me=a("strong"),vyo=o("wav2vec2-conformer"),Fyo=o(" \u2014 "),pG=a("a"),Tyo=o("Wav2Vec2ConformerForPreTraining"),Myo=o(" (Wav2Vec2-Conformer model)"),Eyo=l(),L5=a("li"),ume=a("strong"),Cyo=o("xlm"),wyo=o(" \u2014 "),_G=a("a"),Ayo=o("XLMWithLMHeadModel"),Lyo=o(" (XLM model)"),yyo=l(),y5=a("li"),bme=a("strong"),xyo=o("xlm-roberta"),$yo=o(" \u2014 "),uG=a("a"),kyo=o("XLMRobertaForMaskedLM"),Syo=o(" (XLM-RoBERTa model)"),Ryo=l(),x5=a("li"),vme=a("strong"),Pyo=o("xlm-roberta-xl"),Byo=o(" \u2014 "),bG=a("a"),Iyo=o("XLMRobertaXLForMaskedLM"),Nyo=o(" (XLM-RoBERTa-XL model)"),qyo=l(),$5=a("li"),Fme=a("strong"),jyo=o("xlnet"),Dyo=o(" \u2014 "),vG=a("a"),Gyo=o("XLNetLMHeadModel"),Oyo=o(" (XLNet model)"),Vyo=l(),k5=a("p"),Xyo=o("The model is set in evaluation mode by default using "),Tme=a("code"),zyo=o("model.eval()"),Qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),Wyo=o("model.train()"),Hyo=l(),F(S5.$$.fragment),HOe=l(),Xi=a("h2"),R5=a("a"),Eme=a("span"),F(My.$$.fragment),Uyo=l(),Cme=a("span"),Jyo=o("AutoModelForCausalLM"),UOe=l(),ko=a("div"),F(Ey.$$.fragment),Yyo=l(),zi=a("p"),Kyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FG=a("a"),Zyo=o("from_pretrained()"),e8o=o(" class method or the "),TG=a("a"),o8o=o("from_config()"),r8o=o(` class
method.`),t8o=l(),Cy=a("p"),a8o=o("This class cannot be instantiated directly using "),wme=a("code"),n8o=o("__init__()"),s8o=o(" (throws an error)."),l8o=l(),it=a("div"),F(wy.$$.fragment),i8o=l(),Ame=a("p"),d8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c8o=l(),Qi=a("p"),f8o=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),m8o=o("not"),g8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),h8o=o("from_pretrained()"),p8o=o(" to load the model weights."),_8o=l(),F(P5.$$.fragment),u8o=l(),Ke=a("div"),F(Ay.$$.fragment),b8o=l(),yme=a("p"),v8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F8o=l(),Ia=a("p"),T8o=o("The model class to instantiate is selected based on the "),xme=a("code"),M8o=o("model_type"),E8o=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),C8o=o("pretrained_model_name_or_path"),w8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),A8o=o("pretrained_model_name_or_path"),L8o=o(":"),y8o=l(),z=a("ul"),B5=a("li"),Sme=a("strong"),x8o=o("bart"),$8o=o(" \u2014 "),EG=a("a"),k8o=o("BartForCausalLM"),S8o=o(" (BART model)"),R8o=l(),I5=a("li"),Rme=a("strong"),P8o=o("bert"),B8o=o(" \u2014 "),CG=a("a"),I8o=o("BertLMHeadModel"),N8o=o(" (BERT model)"),q8o=l(),N5=a("li"),Pme=a("strong"),j8o=o("bert-generation"),D8o=o(" \u2014 "),wG=a("a"),G8o=o("BertGenerationDecoder"),O8o=o(" (Bert Generation model)"),V8o=l(),q5=a("li"),Bme=a("strong"),X8o=o("big_bird"),z8o=o(" \u2014 "),AG=a("a"),Q8o=o("BigBirdForCausalLM"),W8o=o(" (BigBird model)"),H8o=l(),j5=a("li"),Ime=a("strong"),U8o=o("bigbird_pegasus"),J8o=o(" \u2014 "),LG=a("a"),Y8o=o("BigBirdPegasusForCausalLM"),K8o=o(" (BigBird-Pegasus model)"),Z8o=l(),D5=a("li"),Nme=a("strong"),e9o=o("blenderbot"),o9o=o(" \u2014 "),yG=a("a"),r9o=o("BlenderbotForCausalLM"),t9o=o(" (Blenderbot model)"),a9o=l(),G5=a("li"),qme=a("strong"),n9o=o("blenderbot-small"),s9o=o(" \u2014 "),xG=a("a"),l9o=o("BlenderbotSmallForCausalLM"),i9o=o(" (BlenderbotSmall model)"),d9o=l(),O5=a("li"),jme=a("strong"),c9o=o("bloom"),f9o=o(" \u2014 "),$G=a("a"),m9o=o("BloomForCausalLM"),g9o=o(" (BLOOM model)"),h9o=l(),V5=a("li"),Dme=a("strong"),p9o=o("camembert"),_9o=o(" \u2014 "),kG=a("a"),u9o=o("CamembertForCausalLM"),b9o=o(" (CamemBERT model)"),v9o=l(),X5=a("li"),Gme=a("strong"),F9o=o("codegen"),T9o=o(" \u2014 "),SG=a("a"),M9o=o("CodeGenForCausalLM"),E9o=o(" (CodeGen model)"),C9o=l(),z5=a("li"),Ome=a("strong"),w9o=o("ctrl"),A9o=o(" \u2014 "),RG=a("a"),L9o=o("CTRLLMHeadModel"),y9o=o(" (CTRL model)"),x9o=l(),Q5=a("li"),Vme=a("strong"),$9o=o("data2vec-text"),k9o=o(" \u2014 "),PG=a("a"),S9o=o("Data2VecTextForCausalLM"),R9o=o(" (Data2VecText model)"),P9o=l(),W5=a("li"),Xme=a("strong"),B9o=o("electra"),I9o=o(" \u2014 "),BG=a("a"),N9o=o("ElectraForCausalLM"),q9o=o(" (ELECTRA model)"),j9o=l(),H5=a("li"),zme=a("strong"),D9o=o("gpt2"),G9o=o(" \u2014 "),IG=a("a"),O9o=o("GPT2LMHeadModel"),V9o=o(" (OpenAI GPT-2 model)"),X9o=l(),U5=a("li"),Qme=a("strong"),z9o=o("gpt_neo"),Q9o=o(" \u2014 "),NG=a("a"),W9o=o("GPTNeoForCausalLM"),H9o=o(" (GPT Neo model)"),U9o=l(),J5=a("li"),Wme=a("strong"),J9o=o("gpt_neox"),Y9o=o(" \u2014 "),qG=a("a"),K9o=o("GPTNeoXForCausalLM"),Z9o=o(" (GPT NeoX model)"),exo=l(),Y5=a("li"),Hme=a("strong"),oxo=o("gptj"),rxo=o(" \u2014 "),jG=a("a"),txo=o("GPTJForCausalLM"),axo=o(" (GPT-J model)"),nxo=l(),K5=a("li"),Ume=a("strong"),sxo=o("marian"),lxo=o(" \u2014 "),DG=a("a"),ixo=o("MarianForCausalLM"),dxo=o(" (Marian model)"),cxo=l(),Z5=a("li"),Jme=a("strong"),fxo=o("mbart"),mxo=o(" \u2014 "),GG=a("a"),gxo=o("MBartForCausalLM"),hxo=o(" (mBART model)"),pxo=l(),e1=a("li"),Yme=a("strong"),_xo=o("megatron-bert"),uxo=o(" \u2014 "),OG=a("a"),bxo=o("MegatronBertForCausalLM"),vxo=o(" (Megatron-BERT model)"),Fxo=l(),o1=a("li"),Kme=a("strong"),Txo=o("openai-gpt"),Mxo=o(" \u2014 "),VG=a("a"),Exo=o("OpenAIGPTLMHeadModel"),Cxo=o(" (OpenAI GPT model)"),wxo=l(),r1=a("li"),Zme=a("strong"),Axo=o("opt"),Lxo=o(" \u2014 "),XG=a("a"),yxo=o("OPTForCausalLM"),xxo=o(" (OPT model)"),$xo=l(),t1=a("li"),ege=a("strong"),kxo=o("pegasus"),Sxo=o(" \u2014 "),zG=a("a"),Rxo=o("PegasusForCausalLM"),Pxo=o(" (Pegasus model)"),Bxo=l(),a1=a("li"),oge=a("strong"),Ixo=o("plbart"),Nxo=o(" \u2014 "),QG=a("a"),qxo=o("PLBartForCausalLM"),jxo=o(" (PLBart model)"),Dxo=l(),n1=a("li"),rge=a("strong"),Gxo=o("prophetnet"),Oxo=o(" \u2014 "),WG=a("a"),Vxo=o("ProphetNetForCausalLM"),Xxo=o(" (ProphetNet model)"),zxo=l(),s1=a("li"),tge=a("strong"),Qxo=o("qdqbert"),Wxo=o(" \u2014 "),HG=a("a"),Hxo=o("QDQBertLMHeadModel"),Uxo=o(" (QDQBert model)"),Jxo=l(),l1=a("li"),age=a("strong"),Yxo=o("reformer"),Kxo=o(" \u2014 "),UG=a("a"),Zxo=o("ReformerModelWithLMHead"),e$o=o(" (Reformer model)"),o$o=l(),i1=a("li"),nge=a("strong"),r$o=o("rembert"),t$o=o(" \u2014 "),JG=a("a"),a$o=o("RemBertForCausalLM"),n$o=o(" (RemBERT model)"),s$o=l(),d1=a("li"),sge=a("strong"),l$o=o("roberta"),i$o=o(" \u2014 "),YG=a("a"),d$o=o("RobertaForCausalLM"),c$o=o(" (RoBERTa model)"),f$o=l(),c1=a("li"),lge=a("strong"),m$o=o("roformer"),g$o=o(" \u2014 "),KG=a("a"),h$o=o("RoFormerForCausalLM"),p$o=o(" (RoFormer model)"),_$o=l(),f1=a("li"),ige=a("strong"),u$o=o("speech_to_text_2"),b$o=o(" \u2014 "),ZG=a("a"),v$o=o("Speech2Text2ForCausalLM"),F$o=o(" (Speech2Text2 model)"),T$o=l(),m1=a("li"),dge=a("strong"),M$o=o("transfo-xl"),E$o=o(" \u2014 "),eO=a("a"),C$o=o("TransfoXLLMHeadModel"),w$o=o(" (Transformer-XL model)"),A$o=l(),g1=a("li"),cge=a("strong"),L$o=o("trocr"),y$o=o(" \u2014 "),oO=a("a"),x$o=o("TrOCRForCausalLM"),$$o=o(" (TrOCR model)"),k$o=l(),h1=a("li"),fge=a("strong"),S$o=o("xglm"),R$o=o(" \u2014 "),rO=a("a"),P$o=o("XGLMForCausalLM"),B$o=o(" (XGLM model)"),I$o=l(),p1=a("li"),mge=a("strong"),N$o=o("xlm"),q$o=o(" \u2014 "),tO=a("a"),j$o=o("XLMWithLMHeadModel"),D$o=o(" (XLM model)"),G$o=l(),_1=a("li"),gge=a("strong"),O$o=o("xlm-prophetnet"),V$o=o(" \u2014 "),aO=a("a"),X$o=o("XLMProphetNetForCausalLM"),z$o=o(" (XLM-ProphetNet model)"),Q$o=l(),u1=a("li"),hge=a("strong"),W$o=o("xlm-roberta"),H$o=o(" \u2014 "),nO=a("a"),U$o=o("XLMRobertaForCausalLM"),J$o=o(" (XLM-RoBERTa model)"),Y$o=l(),b1=a("li"),pge=a("strong"),K$o=o("xlm-roberta-xl"),Z$o=o(" \u2014 "),sO=a("a"),eko=o("XLMRobertaXLForCausalLM"),oko=o(" (XLM-RoBERTa-XL model)"),rko=l(),v1=a("li"),_ge=a("strong"),tko=o("xlnet"),ako=o(" \u2014 "),lO=a("a"),nko=o("XLNetLMHeadModel"),sko=o(" (XLNet model)"),lko=l(),F1=a("p"),iko=o("The model is set in evaluation mode by default using "),uge=a("code"),dko=o("model.eval()"),cko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),fko=o("model.train()"),mko=l(),F(T1.$$.fragment),JOe=l(),Wi=a("h2"),M1=a("a"),vge=a("span"),F(Ly.$$.fragment),gko=l(),Fge=a("span"),hko=o("AutoModelForMaskedLM"),YOe=l(),So=a("div"),F(yy.$$.fragment),pko=l(),Hi=a("p"),_ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iO=a("a"),uko=o("from_pretrained()"),bko=o(" class method or the "),dO=a("a"),vko=o("from_config()"),Fko=o(` class
method.`),Tko=l(),xy=a("p"),Mko=o("This class cannot be instantiated directly using "),Tge=a("code"),Eko=o("__init__()"),Cko=o(" (throws an error)."),wko=l(),dt=a("div"),F($y.$$.fragment),Ako=l(),Mge=a("p"),Lko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yko=l(),Ui=a("p"),xko=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),$ko=o("not"),kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),Sko=o("from_pretrained()"),Rko=o(" to load the model weights."),Pko=l(),F(E1.$$.fragment),Bko=l(),Ze=a("div"),F(ky.$$.fragment),Iko=l(),Cge=a("p"),Nko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qko=l(),Na=a("p"),jko=o("The model class to instantiate is selected based on the "),wge=a("code"),Dko=o("model_type"),Gko=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),Oko=o("pretrained_model_name_or_path"),Vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),Xko=o("pretrained_model_name_or_path"),zko=o(":"),Qko=l(),W=a("ul"),C1=a("li"),yge=a("strong"),Wko=o("albert"),Hko=o(" \u2014 "),fO=a("a"),Uko=o("AlbertForMaskedLM"),Jko=o(" (ALBERT model)"),Yko=l(),w1=a("li"),xge=a("strong"),Kko=o("bart"),Zko=o(" \u2014 "),mO=a("a"),eSo=o("BartForConditionalGeneration"),oSo=o(" (BART model)"),rSo=l(),A1=a("li"),$ge=a("strong"),tSo=o("bert"),aSo=o(" \u2014 "),gO=a("a"),nSo=o("BertForMaskedLM"),sSo=o(" (BERT model)"),lSo=l(),L1=a("li"),kge=a("strong"),iSo=o("big_bird"),dSo=o(" \u2014 "),hO=a("a"),cSo=o("BigBirdForMaskedLM"),fSo=o(" (BigBird model)"),mSo=l(),y1=a("li"),Sge=a("strong"),gSo=o("camembert"),hSo=o(" \u2014 "),pO=a("a"),pSo=o("CamembertForMaskedLM"),_So=o(" (CamemBERT model)"),uSo=l(),x1=a("li"),Rge=a("strong"),bSo=o("convbert"),vSo=o(" \u2014 "),_O=a("a"),FSo=o("ConvBertForMaskedLM"),TSo=o(" (ConvBERT model)"),MSo=l(),$1=a("li"),Pge=a("strong"),ESo=o("data2vec-text"),CSo=o(" \u2014 "),uO=a("a"),wSo=o("Data2VecTextForMaskedLM"),ASo=o(" (Data2VecText model)"),LSo=l(),k1=a("li"),Bge=a("strong"),ySo=o("deberta"),xSo=o(" \u2014 "),bO=a("a"),$So=o("DebertaForMaskedLM"),kSo=o(" (DeBERTa model)"),SSo=l(),S1=a("li"),Ige=a("strong"),RSo=o("deberta-v2"),PSo=o(" \u2014 "),vO=a("a"),BSo=o("DebertaV2ForMaskedLM"),ISo=o(" (DeBERTa-v2 model)"),NSo=l(),R1=a("li"),Nge=a("strong"),qSo=o("distilbert"),jSo=o(" \u2014 "),FO=a("a"),DSo=o("DistilBertForMaskedLM"),GSo=o(" (DistilBERT model)"),OSo=l(),P1=a("li"),qge=a("strong"),VSo=o("electra"),XSo=o(" \u2014 "),TO=a("a"),zSo=o("ElectraForMaskedLM"),QSo=o(" (ELECTRA model)"),WSo=l(),B1=a("li"),jge=a("strong"),HSo=o("flaubert"),USo=o(" \u2014 "),MO=a("a"),JSo=o("FlaubertWithLMHeadModel"),YSo=o(" (FlauBERT model)"),KSo=l(),I1=a("li"),Dge=a("strong"),ZSo=o("fnet"),eRo=o(" \u2014 "),EO=a("a"),oRo=o("FNetForMaskedLM"),rRo=o(" (FNet model)"),tRo=l(),N1=a("li"),Gge=a("strong"),aRo=o("funnel"),nRo=o(" \u2014 "),CO=a("a"),sRo=o("FunnelForMaskedLM"),lRo=o(" (Funnel Transformer model)"),iRo=l(),q1=a("li"),Oge=a("strong"),dRo=o("ibert"),cRo=o(" \u2014 "),wO=a("a"),fRo=o("IBertForMaskedLM"),mRo=o(" (I-BERT model)"),gRo=l(),j1=a("li"),Vge=a("strong"),hRo=o("layoutlm"),pRo=o(" \u2014 "),AO=a("a"),_Ro=o("LayoutLMForMaskedLM"),uRo=o(" (LayoutLM model)"),bRo=l(),D1=a("li"),Xge=a("strong"),vRo=o("longformer"),FRo=o(" \u2014 "),LO=a("a"),TRo=o("LongformerForMaskedLM"),MRo=o(" (Longformer model)"),ERo=l(),G1=a("li"),zge=a("strong"),CRo=o("luke"),wRo=o(" \u2014 "),yO=a("a"),ARo=o("LukeForMaskedLM"),LRo=o(" (LUKE model)"),yRo=l(),O1=a("li"),Qge=a("strong"),xRo=o("mbart"),$Ro=o(" \u2014 "),xO=a("a"),kRo=o("MBartForConditionalGeneration"),SRo=o(" (mBART model)"),RRo=l(),V1=a("li"),Wge=a("strong"),PRo=o("megatron-bert"),BRo=o(" \u2014 "),$O=a("a"),IRo=o("MegatronBertForMaskedLM"),NRo=o(" (Megatron-BERT model)"),qRo=l(),X1=a("li"),Hge=a("strong"),jRo=o("mobilebert"),DRo=o(" \u2014 "),kO=a("a"),GRo=o("MobileBertForMaskedLM"),ORo=o(" (MobileBERT model)"),VRo=l(),z1=a("li"),Uge=a("strong"),XRo=o("mpnet"),zRo=o(" \u2014 "),SO=a("a"),QRo=o("MPNetForMaskedLM"),WRo=o(" (MPNet model)"),HRo=l(),Q1=a("li"),Jge=a("strong"),URo=o("nezha"),JRo=o(" \u2014 "),RO=a("a"),YRo=o("NezhaForMaskedLM"),KRo=o(" (Nezha model)"),ZRo=l(),W1=a("li"),Yge=a("strong"),ePo=o("nystromformer"),oPo=o(" \u2014 "),PO=a("a"),rPo=o("NystromformerForMaskedLM"),tPo=o(" (Nystr\xF6mformer model)"),aPo=l(),H1=a("li"),Kge=a("strong"),nPo=o("perceiver"),sPo=o(" \u2014 "),BO=a("a"),lPo=o("PerceiverForMaskedLM"),iPo=o(" (Perceiver model)"),dPo=l(),U1=a("li"),Zge=a("strong"),cPo=o("qdqbert"),fPo=o(" \u2014 "),IO=a("a"),mPo=o("QDQBertForMaskedLM"),gPo=o(" (QDQBert model)"),hPo=l(),J1=a("li"),ehe=a("strong"),pPo=o("reformer"),_Po=o(" \u2014 "),NO=a("a"),uPo=o("ReformerForMaskedLM"),bPo=o(" (Reformer model)"),vPo=l(),Y1=a("li"),ohe=a("strong"),FPo=o("rembert"),TPo=o(" \u2014 "),qO=a("a"),MPo=o("RemBertForMaskedLM"),EPo=o(" (RemBERT model)"),CPo=l(),K1=a("li"),rhe=a("strong"),wPo=o("roberta"),APo=o(" \u2014 "),jO=a("a"),LPo=o("RobertaForMaskedLM"),yPo=o(" (RoBERTa model)"),xPo=l(),Z1=a("li"),the=a("strong"),$Po=o("roformer"),kPo=o(" \u2014 "),DO=a("a"),SPo=o("RoFormerForMaskedLM"),RPo=o(" (RoFormer model)"),PPo=l(),e2=a("li"),ahe=a("strong"),BPo=o("squeezebert"),IPo=o(" \u2014 "),GO=a("a"),NPo=o("SqueezeBertForMaskedLM"),qPo=o(" (SqueezeBERT model)"),jPo=l(),o2=a("li"),nhe=a("strong"),DPo=o("tapas"),GPo=o(" \u2014 "),OO=a("a"),OPo=o("TapasForMaskedLM"),VPo=o(" (TAPAS model)"),XPo=l(),r2=a("li"),she=a("strong"),zPo=o("wav2vec2"),QPo=o(" \u2014 "),lhe=a("code"),WPo=o("Wav2Vec2ForMaskedLM"),HPo=o(" (Wav2Vec2 model)"),UPo=l(),t2=a("li"),ihe=a("strong"),JPo=o("xlm"),YPo=o(" \u2014 "),VO=a("a"),KPo=o("XLMWithLMHeadModel"),ZPo=o(" (XLM model)"),eBo=l(),a2=a("li"),dhe=a("strong"),oBo=o("xlm-roberta"),rBo=o(" \u2014 "),XO=a("a"),tBo=o("XLMRobertaForMaskedLM"),aBo=o(" (XLM-RoBERTa model)"),nBo=l(),n2=a("li"),che=a("strong"),sBo=o("xlm-roberta-xl"),lBo=o(" \u2014 "),zO=a("a"),iBo=o("XLMRobertaXLForMaskedLM"),dBo=o(" (XLM-RoBERTa-XL model)"),cBo=l(),s2=a("li"),fhe=a("strong"),fBo=o("yoso"),mBo=o(" \u2014 "),QO=a("a"),gBo=o("YosoForMaskedLM"),hBo=o(" (YOSO model)"),pBo=l(),l2=a("p"),_Bo=o("The model is set in evaluation mode by default using "),mhe=a("code"),uBo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),vBo=o("model.train()"),FBo=l(),F(i2.$$.fragment),KOe=l(),Ji=a("h2"),d2=a("a"),hhe=a("span"),F(Sy.$$.fragment),TBo=l(),phe=a("span"),MBo=o("AutoModelForSeq2SeqLM"),ZOe=l(),Ro=a("div"),F(Ry.$$.fragment),EBo=l(),Yi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WO=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),HO=a("a"),LBo=o("from_config()"),yBo=o(` class
method.`),xBo=l(),Py=a("p"),$Bo=o("This class cannot be instantiated directly using "),_he=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),ct=a("div"),F(By.$$.fragment),PBo=l(),uhe=a("p"),BBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IBo=l(),Ki=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),qBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(c2.$$.fragment),VBo=l(),eo=a("div"),F(Iy.$$.fragment),XBo=l(),vhe=a("p"),zBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QBo=l(),qa=a("p"),WBo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),pe=a("ul"),f2=a("li"),Ehe=a("strong"),oIo=o("bart"),rIo=o(" \u2014 "),JO=a("a"),tIo=o("BartForConditionalGeneration"),aIo=o(" (BART model)"),nIo=l(),m2=a("li"),Che=a("strong"),sIo=o("bigbird_pegasus"),lIo=o(" \u2014 "),YO=a("a"),iIo=o("BigBirdPegasusForConditionalGeneration"),dIo=o(" (BigBird-Pegasus model)"),cIo=l(),g2=a("li"),whe=a("strong"),fIo=o("blenderbot"),mIo=o(" \u2014 "),KO=a("a"),gIo=o("BlenderbotForConditionalGeneration"),hIo=o(" (Blenderbot model)"),pIo=l(),h2=a("li"),Ahe=a("strong"),_Io=o("blenderbot-small"),uIo=o(" \u2014 "),ZO=a("a"),bIo=o("BlenderbotSmallForConditionalGeneration"),vIo=o(" (BlenderbotSmall model)"),FIo=l(),p2=a("li"),Lhe=a("strong"),TIo=o("encoder-decoder"),MIo=o(" \u2014 "),eV=a("a"),EIo=o("EncoderDecoderModel"),CIo=o(" (Encoder decoder model)"),wIo=l(),_2=a("li"),yhe=a("strong"),AIo=o("fsmt"),LIo=o(" \u2014 "),oV=a("a"),yIo=o("FSMTForConditionalGeneration"),xIo=o(" (FairSeq Machine-Translation model)"),$Io=l(),u2=a("li"),xhe=a("strong"),kIo=o("led"),SIo=o(" \u2014 "),rV=a("a"),RIo=o("LEDForConditionalGeneration"),PIo=o(" (LED model)"),BIo=l(),b2=a("li"),$he=a("strong"),IIo=o("longt5"),NIo=o(" \u2014 "),tV=a("a"),qIo=o("LongT5ForConditionalGeneration"),jIo=o(" (LongT5 model)"),DIo=l(),v2=a("li"),khe=a("strong"),GIo=o("m2m_100"),OIo=o(" \u2014 "),aV=a("a"),VIo=o("M2M100ForConditionalGeneration"),XIo=o(" (M2M100 model)"),zIo=l(),F2=a("li"),She=a("strong"),QIo=o("marian"),WIo=o(" \u2014 "),nV=a("a"),HIo=o("MarianMTModel"),UIo=o(" (Marian model)"),JIo=l(),T2=a("li"),Rhe=a("strong"),YIo=o("mbart"),KIo=o(" \u2014 "),sV=a("a"),ZIo=o("MBartForConditionalGeneration"),eNo=o(" (mBART model)"),oNo=l(),M2=a("li"),Phe=a("strong"),rNo=o("mt5"),tNo=o(" \u2014 "),lV=a("a"),aNo=o("MT5ForConditionalGeneration"),nNo=o(" (MT5 model)"),sNo=l(),E2=a("li"),Bhe=a("strong"),lNo=o("pegasus"),iNo=o(" \u2014 "),iV=a("a"),dNo=o("PegasusForConditionalGeneration"),cNo=o(" (Pegasus model)"),fNo=l(),C2=a("li"),Ihe=a("strong"),mNo=o("plbart"),gNo=o(" \u2014 "),dV=a("a"),hNo=o("PLBartForConditionalGeneration"),pNo=o(" (PLBart model)"),_No=l(),w2=a("li"),Nhe=a("strong"),uNo=o("prophetnet"),bNo=o(" \u2014 "),cV=a("a"),vNo=o("ProphetNetForConditionalGeneration"),FNo=o(" (ProphetNet model)"),TNo=l(),A2=a("li"),qhe=a("strong"),MNo=o("t5"),ENo=o(" \u2014 "),fV=a("a"),CNo=o("T5ForConditionalGeneration"),wNo=o(" (T5 model)"),ANo=l(),L2=a("li"),jhe=a("strong"),LNo=o("xlm-prophetnet"),yNo=o(" \u2014 "),mV=a("a"),xNo=o("XLMProphetNetForConditionalGeneration"),$No=o(" (XLM-ProphetNet model)"),kNo=l(),y2=a("p"),SNo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),BNo=o("model.train()"),INo=l(),F(x2.$$.fragment),eVe=l(),Zi=a("h2"),$2=a("a"),Ohe=a("span"),F(Ny.$$.fragment),NNo=l(),Vhe=a("span"),qNo=o("AutoModelForSequenceClassification"),oVe=l(),Po=a("div"),F(qy.$$.fragment),jNo=l(),ed=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gV=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),hV=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),jy=a("p"),QNo=o("This class cannot be instantiated directly using "),Xhe=a("code"),WNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),ft=a("div"),F(Dy.$$.fragment),JNo=l(),zhe=a("p"),YNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KNo=l(),od=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),eqo=o("not"),oqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),rqo=o("from_pretrained()"),tqo=o(" to load the model weights."),aqo=l(),F(k2.$$.fragment),nqo=l(),oo=a("div"),F(Gy.$$.fragment),sqo=l(),Whe=a("p"),lqo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iqo=l(),ja=a("p"),dqo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),cqo=o("model_type"),fqo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),mqo=o("pretrained_model_name_or_path"),gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),hqo=o("pretrained_model_name_or_path"),pqo=o(":"),_qo=l(),N=a("ul"),S2=a("li"),Yhe=a("strong"),uqo=o("albert"),bqo=o(" \u2014 "),_V=a("a"),vqo=o("AlbertForSequenceClassification"),Fqo=o(" (ALBERT model)"),Tqo=l(),R2=a("li"),Khe=a("strong"),Mqo=o("bart"),Eqo=o(" \u2014 "),uV=a("a"),Cqo=o("BartForSequenceClassification"),wqo=o(" (BART model)"),Aqo=l(),P2=a("li"),Zhe=a("strong"),Lqo=o("bert"),yqo=o(" \u2014 "),bV=a("a"),xqo=o("BertForSequenceClassification"),$qo=o(" (BERT model)"),kqo=l(),B2=a("li"),epe=a("strong"),Sqo=o("big_bird"),Rqo=o(" \u2014 "),vV=a("a"),Pqo=o("BigBirdForSequenceClassification"),Bqo=o(" (BigBird model)"),Iqo=l(),I2=a("li"),ope=a("strong"),Nqo=o("bigbird_pegasus"),qqo=o(" \u2014 "),FV=a("a"),jqo=o("BigBirdPegasusForSequenceClassification"),Dqo=o(" (BigBird-Pegasus model)"),Gqo=l(),N2=a("li"),rpe=a("strong"),Oqo=o("bloom"),Vqo=o(" \u2014 "),TV=a("a"),Xqo=o("BloomForSequenceClassification"),zqo=o(" (BLOOM model)"),Qqo=l(),q2=a("li"),tpe=a("strong"),Wqo=o("camembert"),Hqo=o(" \u2014 "),MV=a("a"),Uqo=o("CamembertForSequenceClassification"),Jqo=o(" (CamemBERT model)"),Yqo=l(),j2=a("li"),ape=a("strong"),Kqo=o("canine"),Zqo=o(" \u2014 "),EV=a("a"),ejo=o("CanineForSequenceClassification"),ojo=o(" (CANINE model)"),rjo=l(),D2=a("li"),npe=a("strong"),tjo=o("convbert"),ajo=o(" \u2014 "),CV=a("a"),njo=o("ConvBertForSequenceClassification"),sjo=o(" (ConvBERT model)"),ljo=l(),G2=a("li"),spe=a("strong"),ijo=o("ctrl"),djo=o(" \u2014 "),wV=a("a"),cjo=o("CTRLForSequenceClassification"),fjo=o(" (CTRL model)"),mjo=l(),O2=a("li"),lpe=a("strong"),gjo=o("data2vec-text"),hjo=o(" \u2014 "),AV=a("a"),pjo=o("Data2VecTextForSequenceClassification"),_jo=o(" (Data2VecText model)"),ujo=l(),V2=a("li"),ipe=a("strong"),bjo=o("deberta"),vjo=o(" \u2014 "),LV=a("a"),Fjo=o("DebertaForSequenceClassification"),Tjo=o(" (DeBERTa model)"),Mjo=l(),X2=a("li"),dpe=a("strong"),Ejo=o("deberta-v2"),Cjo=o(" \u2014 "),yV=a("a"),wjo=o("DebertaV2ForSequenceClassification"),Ajo=o(" (DeBERTa-v2 model)"),Ljo=l(),z2=a("li"),cpe=a("strong"),yjo=o("distilbert"),xjo=o(" \u2014 "),xV=a("a"),$jo=o("DistilBertForSequenceClassification"),kjo=o(" (DistilBERT model)"),Sjo=l(),Q2=a("li"),fpe=a("strong"),Rjo=o("electra"),Pjo=o(" \u2014 "),$V=a("a"),Bjo=o("ElectraForSequenceClassification"),Ijo=o(" (ELECTRA model)"),Njo=l(),W2=a("li"),mpe=a("strong"),qjo=o("flaubert"),jjo=o(" \u2014 "),kV=a("a"),Djo=o("FlaubertForSequenceClassification"),Gjo=o(" (FlauBERT model)"),Ojo=l(),H2=a("li"),gpe=a("strong"),Vjo=o("fnet"),Xjo=o(" \u2014 "),SV=a("a"),zjo=o("FNetForSequenceClassification"),Qjo=o(" (FNet model)"),Wjo=l(),U2=a("li"),hpe=a("strong"),Hjo=o("funnel"),Ujo=o(" \u2014 "),RV=a("a"),Jjo=o("FunnelForSequenceClassification"),Yjo=o(" (Funnel Transformer model)"),Kjo=l(),J2=a("li"),ppe=a("strong"),Zjo=o("gpt2"),eDo=o(" \u2014 "),PV=a("a"),oDo=o("GPT2ForSequenceClassification"),rDo=o(" (OpenAI GPT-2 model)"),tDo=l(),Y2=a("li"),_pe=a("strong"),aDo=o("gpt_neo"),nDo=o(" \u2014 "),BV=a("a"),sDo=o("GPTNeoForSequenceClassification"),lDo=o(" (GPT Neo model)"),iDo=l(),K2=a("li"),upe=a("strong"),dDo=o("gptj"),cDo=o(" \u2014 "),IV=a("a"),fDo=o("GPTJForSequenceClassification"),mDo=o(" (GPT-J model)"),gDo=l(),Z2=a("li"),bpe=a("strong"),hDo=o("ibert"),pDo=o(" \u2014 "),NV=a("a"),_Do=o("IBertForSequenceClassification"),uDo=o(" (I-BERT model)"),bDo=l(),e4=a("li"),vpe=a("strong"),vDo=o("layoutlm"),FDo=o(" \u2014 "),qV=a("a"),TDo=o("LayoutLMForSequenceClassification"),MDo=o(" (LayoutLM model)"),EDo=l(),o4=a("li"),Fpe=a("strong"),CDo=o("layoutlmv2"),wDo=o(" \u2014 "),jV=a("a"),ADo=o("LayoutLMv2ForSequenceClassification"),LDo=o(" (LayoutLMv2 model)"),yDo=l(),r4=a("li"),Tpe=a("strong"),xDo=o("layoutlmv3"),$Do=o(" \u2014 "),DV=a("a"),kDo=o("LayoutLMv3ForSequenceClassification"),SDo=o(" (LayoutLMv3 model)"),RDo=l(),t4=a("li"),Mpe=a("strong"),PDo=o("led"),BDo=o(" \u2014 "),GV=a("a"),IDo=o("LEDForSequenceClassification"),NDo=o(" (LED model)"),qDo=l(),a4=a("li"),Epe=a("strong"),jDo=o("longformer"),DDo=o(" \u2014 "),OV=a("a"),GDo=o("LongformerForSequenceClassification"),ODo=o(" (Longformer model)"),VDo=l(),n4=a("li"),Cpe=a("strong"),XDo=o("mbart"),zDo=o(" \u2014 "),VV=a("a"),QDo=o("MBartForSequenceClassification"),WDo=o(" (mBART model)"),HDo=l(),s4=a("li"),wpe=a("strong"),UDo=o("megatron-bert"),JDo=o(" \u2014 "),XV=a("a"),YDo=o("MegatronBertForSequenceClassification"),KDo=o(" (Megatron-BERT model)"),ZDo=l(),l4=a("li"),Ape=a("strong"),eGo=o("mobilebert"),oGo=o(" \u2014 "),zV=a("a"),rGo=o("MobileBertForSequenceClassification"),tGo=o(" (MobileBERT model)"),aGo=l(),i4=a("li"),Lpe=a("strong"),nGo=o("mpnet"),sGo=o(" \u2014 "),QV=a("a"),lGo=o("MPNetForSequenceClassification"),iGo=o(" (MPNet model)"),dGo=l(),d4=a("li"),ype=a("strong"),cGo=o("nezha"),fGo=o(" \u2014 "),WV=a("a"),mGo=o("NezhaForSequenceClassification"),gGo=o(" (Nezha model)"),hGo=l(),c4=a("li"),xpe=a("strong"),pGo=o("nystromformer"),_Go=o(" \u2014 "),HV=a("a"),uGo=o("NystromformerForSequenceClassification"),bGo=o(" (Nystr\xF6mformer model)"),vGo=l(),f4=a("li"),$pe=a("strong"),FGo=o("openai-gpt"),TGo=o(" \u2014 "),UV=a("a"),MGo=o("OpenAIGPTForSequenceClassification"),EGo=o(" (OpenAI GPT model)"),CGo=l(),m4=a("li"),kpe=a("strong"),wGo=o("perceiver"),AGo=o(" \u2014 "),JV=a("a"),LGo=o("PerceiverForSequenceClassification"),yGo=o(" (Perceiver model)"),xGo=l(),g4=a("li"),Spe=a("strong"),$Go=o("plbart"),kGo=o(" \u2014 "),YV=a("a"),SGo=o("PLBartForSequenceClassification"),RGo=o(" (PLBart model)"),PGo=l(),h4=a("li"),Rpe=a("strong"),BGo=o("qdqbert"),IGo=o(" \u2014 "),KV=a("a"),NGo=o("QDQBertForSequenceClassification"),qGo=o(" (QDQBert model)"),jGo=l(),p4=a("li"),Ppe=a("strong"),DGo=o("reformer"),GGo=o(" \u2014 "),ZV=a("a"),OGo=o("ReformerForSequenceClassification"),VGo=o(" (Reformer model)"),XGo=l(),_4=a("li"),Bpe=a("strong"),zGo=o("rembert"),QGo=o(" \u2014 "),eX=a("a"),WGo=o("RemBertForSequenceClassification"),HGo=o(" (RemBERT model)"),UGo=l(),u4=a("li"),Ipe=a("strong"),JGo=o("roberta"),YGo=o(" \u2014 "),oX=a("a"),KGo=o("RobertaForSequenceClassification"),ZGo=o(" (RoBERTa model)"),eOo=l(),b4=a("li"),Npe=a("strong"),oOo=o("roformer"),rOo=o(" \u2014 "),rX=a("a"),tOo=o("RoFormerForSequenceClassification"),aOo=o(" (RoFormer model)"),nOo=l(),v4=a("li"),qpe=a("strong"),sOo=o("squeezebert"),lOo=o(" \u2014 "),tX=a("a"),iOo=o("SqueezeBertForSequenceClassification"),dOo=o(" (SqueezeBERT model)"),cOo=l(),F4=a("li"),jpe=a("strong"),fOo=o("tapas"),mOo=o(" \u2014 "),aX=a("a"),gOo=o("TapasForSequenceClassification"),hOo=o(" (TAPAS model)"),pOo=l(),T4=a("li"),Dpe=a("strong"),_Oo=o("transfo-xl"),uOo=o(" \u2014 "),nX=a("a"),bOo=o("TransfoXLForSequenceClassification"),vOo=o(" (Transformer-XL model)"),FOo=l(),M4=a("li"),Gpe=a("strong"),TOo=o("xlm"),MOo=o(" \u2014 "),sX=a("a"),EOo=o("XLMForSequenceClassification"),COo=o(" (XLM model)"),wOo=l(),E4=a("li"),Ope=a("strong"),AOo=o("xlm-roberta"),LOo=o(" \u2014 "),lX=a("a"),yOo=o("XLMRobertaForSequenceClassification"),xOo=o(" (XLM-RoBERTa model)"),$Oo=l(),C4=a("li"),Vpe=a("strong"),kOo=o("xlm-roberta-xl"),SOo=o(" \u2014 "),iX=a("a"),ROo=o("XLMRobertaXLForSequenceClassification"),POo=o(" (XLM-RoBERTa-XL model)"),BOo=l(),w4=a("li"),Xpe=a("strong"),IOo=o("xlnet"),NOo=o(" \u2014 "),dX=a("a"),qOo=o("XLNetForSequenceClassification"),jOo=o(" (XLNet model)"),DOo=l(),A4=a("li"),zpe=a("strong"),GOo=o("yoso"),OOo=o(" \u2014 "),cX=a("a"),VOo=o("YosoForSequenceClassification"),XOo=o(" (YOSO model)"),zOo=l(),L4=a("p"),QOo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),WOo=o("model.eval()"),HOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),UOo=o("model.train()"),JOo=l(),F(y4.$$.fragment),rVe=l(),rd=a("h2"),x4=a("a"),Hpe=a("span"),F(Oy.$$.fragment),YOo=l(),Upe=a("span"),KOo=o("AutoModelForMultipleChoice"),tVe=l(),Bo=a("div"),F(Vy.$$.fragment),ZOo=l(),td=a("p"),eVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fX=a("a"),oVo=o("from_pretrained()"),rVo=o(" class method or the "),mX=a("a"),tVo=o("from_config()"),aVo=o(` class
method.`),nVo=l(),Xy=a("p"),sVo=o("This class cannot be instantiated directly using "),Jpe=a("code"),lVo=o("__init__()"),iVo=o(" (throws an error)."),dVo=l(),mt=a("div"),F(zy.$$.fragment),cVo=l(),Ype=a("p"),fVo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mVo=l(),ad=a("p"),gVo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),hVo=o("not"),pVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),_Vo=o("from_pretrained()"),uVo=o(" to load the model weights."),bVo=l(),F($4.$$.fragment),vVo=l(),ro=a("div"),F(Qy.$$.fragment),FVo=l(),Zpe=a("p"),TVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MVo=l(),Da=a("p"),EVo=o("The model class to instantiate is selected based on the "),e_e=a("code"),CVo=o("model_type"),wVo=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),AVo=o("pretrained_model_name_or_path"),LVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),yVo=o("pretrained_model_name_or_path"),xVo=o(":"),$Vo=l(),Z=a("ul"),k4=a("li"),t_e=a("strong"),kVo=o("albert"),SVo=o(" \u2014 "),hX=a("a"),RVo=o("AlbertForMultipleChoice"),PVo=o(" (ALBERT model)"),BVo=l(),S4=a("li"),a_e=a("strong"),IVo=o("bert"),NVo=o(" \u2014 "),pX=a("a"),qVo=o("BertForMultipleChoice"),jVo=o(" (BERT model)"),DVo=l(),R4=a("li"),n_e=a("strong"),GVo=o("big_bird"),OVo=o(" \u2014 "),_X=a("a"),VVo=o("BigBirdForMultipleChoice"),XVo=o(" (BigBird model)"),zVo=l(),P4=a("li"),s_e=a("strong"),QVo=o("camembert"),WVo=o(" \u2014 "),uX=a("a"),HVo=o("CamembertForMultipleChoice"),UVo=o(" (CamemBERT model)"),JVo=l(),B4=a("li"),l_e=a("strong"),YVo=o("canine"),KVo=o(" \u2014 "),bX=a("a"),ZVo=o("CanineForMultipleChoice"),eXo=o(" (CANINE model)"),oXo=l(),I4=a("li"),i_e=a("strong"),rXo=o("convbert"),tXo=o(" \u2014 "),vX=a("a"),aXo=o("ConvBertForMultipleChoice"),nXo=o(" (ConvBERT model)"),sXo=l(),N4=a("li"),d_e=a("strong"),lXo=o("data2vec-text"),iXo=o(" \u2014 "),FX=a("a"),dXo=o("Data2VecTextForMultipleChoice"),cXo=o(" (Data2VecText model)"),fXo=l(),q4=a("li"),c_e=a("strong"),mXo=o("deberta-v2"),gXo=o(" \u2014 "),TX=a("a"),hXo=o("DebertaV2ForMultipleChoice"),pXo=o(" (DeBERTa-v2 model)"),_Xo=l(),j4=a("li"),f_e=a("strong"),uXo=o("distilbert"),bXo=o(" \u2014 "),MX=a("a"),vXo=o("DistilBertForMultipleChoice"),FXo=o(" (DistilBERT model)"),TXo=l(),D4=a("li"),m_e=a("strong"),MXo=o("electra"),EXo=o(" \u2014 "),EX=a("a"),CXo=o("ElectraForMultipleChoice"),wXo=o(" (ELECTRA model)"),AXo=l(),G4=a("li"),g_e=a("strong"),LXo=o("flaubert"),yXo=o(" \u2014 "),CX=a("a"),xXo=o("FlaubertForMultipleChoice"),$Xo=o(" (FlauBERT model)"),kXo=l(),O4=a("li"),h_e=a("strong"),SXo=o("fnet"),RXo=o(" \u2014 "),wX=a("a"),PXo=o("FNetForMultipleChoice"),BXo=o(" (FNet model)"),IXo=l(),V4=a("li"),p_e=a("strong"),NXo=o("funnel"),qXo=o(" \u2014 "),AX=a("a"),jXo=o("FunnelForMultipleChoice"),DXo=o(" (Funnel Transformer model)"),GXo=l(),X4=a("li"),__e=a("strong"),OXo=o("ibert"),VXo=o(" \u2014 "),LX=a("a"),XXo=o("IBertForMultipleChoice"),zXo=o(" (I-BERT model)"),QXo=l(),z4=a("li"),u_e=a("strong"),WXo=o("longformer"),HXo=o(" \u2014 "),yX=a("a"),UXo=o("LongformerForMultipleChoice"),JXo=o(" (Longformer model)"),YXo=l(),Q4=a("li"),b_e=a("strong"),KXo=o("megatron-bert"),ZXo=o(" \u2014 "),xX=a("a"),ezo=o("MegatronBertForMultipleChoice"),ozo=o(" (Megatron-BERT model)"),rzo=l(),W4=a("li"),v_e=a("strong"),tzo=o("mobilebert"),azo=o(" \u2014 "),$X=a("a"),nzo=o("MobileBertForMultipleChoice"),szo=o(" (MobileBERT model)"),lzo=l(),H4=a("li"),F_e=a("strong"),izo=o("mpnet"),dzo=o(" \u2014 "),kX=a("a"),czo=o("MPNetForMultipleChoice"),fzo=o(" (MPNet model)"),mzo=l(),U4=a("li"),T_e=a("strong"),gzo=o("nezha"),hzo=o(" \u2014 "),SX=a("a"),pzo=o("NezhaForMultipleChoice"),_zo=o(" (Nezha model)"),uzo=l(),J4=a("li"),M_e=a("strong"),bzo=o("nystromformer"),vzo=o(" \u2014 "),RX=a("a"),Fzo=o("NystromformerForMultipleChoice"),Tzo=o(" (Nystr\xF6mformer model)"),Mzo=l(),Y4=a("li"),E_e=a("strong"),Ezo=o("qdqbert"),Czo=o(" \u2014 "),PX=a("a"),wzo=o("QDQBertForMultipleChoice"),Azo=o(" (QDQBert model)"),Lzo=l(),K4=a("li"),C_e=a("strong"),yzo=o("rembert"),xzo=o(" \u2014 "),BX=a("a"),$zo=o("RemBertForMultipleChoice"),kzo=o(" (RemBERT model)"),Szo=l(),Z4=a("li"),w_e=a("strong"),Rzo=o("roberta"),Pzo=o(" \u2014 "),IX=a("a"),Bzo=o("RobertaForMultipleChoice"),Izo=o(" (RoBERTa model)"),Nzo=l(),eb=a("li"),A_e=a("strong"),qzo=o("roformer"),jzo=o(" \u2014 "),NX=a("a"),Dzo=o("RoFormerForMultipleChoice"),Gzo=o(" (RoFormer model)"),Ozo=l(),ob=a("li"),L_e=a("strong"),Vzo=o("squeezebert"),Xzo=o(" \u2014 "),qX=a("a"),zzo=o("SqueezeBertForMultipleChoice"),Qzo=o(" (SqueezeBERT model)"),Wzo=l(),rb=a("li"),y_e=a("strong"),Hzo=o("xlm"),Uzo=o(" \u2014 "),jX=a("a"),Jzo=o("XLMForMultipleChoice"),Yzo=o(" (XLM model)"),Kzo=l(),tb=a("li"),x_e=a("strong"),Zzo=o("xlm-roberta"),eQo=o(" \u2014 "),DX=a("a"),oQo=o("XLMRobertaForMultipleChoice"),rQo=o(" (XLM-RoBERTa model)"),tQo=l(),ab=a("li"),$_e=a("strong"),aQo=o("xlm-roberta-xl"),nQo=o(" \u2014 "),GX=a("a"),sQo=o("XLMRobertaXLForMultipleChoice"),lQo=o(" (XLM-RoBERTa-XL model)"),iQo=l(),nb=a("li"),k_e=a("strong"),dQo=o("xlnet"),cQo=o(" \u2014 "),OX=a("a"),fQo=o("XLNetForMultipleChoice"),mQo=o(" (XLNet model)"),gQo=l(),sb=a("li"),S_e=a("strong"),hQo=o("yoso"),pQo=o(" \u2014 "),VX=a("a"),_Qo=o("YosoForMultipleChoice"),uQo=o(" (YOSO model)"),bQo=l(),lb=a("p"),vQo=o("The model is set in evaluation mode by default using "),R_e=a("code"),FQo=o("model.eval()"),TQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),MQo=o("model.train()"),EQo=l(),F(ib.$$.fragment),aVe=l(),nd=a("h2"),db=a("a"),B_e=a("span"),F(Wy.$$.fragment),CQo=l(),I_e=a("span"),wQo=o("AutoModelForNextSentencePrediction"),nVe=l(),Io=a("div"),F(Hy.$$.fragment),AQo=l(),sd=a("p"),LQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XX=a("a"),yQo=o("from_pretrained()"),xQo=o(" class method or the "),zX=a("a"),$Qo=o("from_config()"),kQo=o(` class
method.`),SQo=l(),Uy=a("p"),RQo=o("This class cannot be instantiated directly using "),N_e=a("code"),PQo=o("__init__()"),BQo=o(" (throws an error)."),IQo=l(),gt=a("div"),F(Jy.$$.fragment),NQo=l(),q_e=a("p"),qQo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jQo=l(),ld=a("p"),DQo=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),GQo=o("not"),OQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),VQo=o("from_pretrained()"),XQo=o(" to load the model weights."),zQo=l(),F(cb.$$.fragment),QQo=l(),to=a("div"),F(Yy.$$.fragment),WQo=l(),D_e=a("p"),HQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UQo=l(),Ga=a("p"),JQo=o("The model class to instantiate is selected based on the "),G_e=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),ZQo=o("pretrained_model_name_or_path"),eWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),oWo=o("pretrained_model_name_or_path"),rWo=o(":"),tWo=l(),No=a("ul"),fb=a("li"),X_e=a("strong"),aWo=o("bert"),nWo=o(" \u2014 "),WX=a("a"),sWo=o("BertForNextSentencePrediction"),lWo=o(" (BERT model)"),iWo=l(),mb=a("li"),z_e=a("strong"),dWo=o("fnet"),cWo=o(" \u2014 "),HX=a("a"),fWo=o("FNetForNextSentencePrediction"),mWo=o(" (FNet model)"),gWo=l(),gb=a("li"),Q_e=a("strong"),hWo=o("megatron-bert"),pWo=o(" \u2014 "),UX=a("a"),_Wo=o("MegatronBertForNextSentencePrediction"),uWo=o(" (Megatron-BERT model)"),bWo=l(),hb=a("li"),W_e=a("strong"),vWo=o("mobilebert"),FWo=o(" \u2014 "),JX=a("a"),TWo=o("MobileBertForNextSentencePrediction"),MWo=o(" (MobileBERT model)"),EWo=l(),pb=a("li"),H_e=a("strong"),CWo=o("nezha"),wWo=o(" \u2014 "),YX=a("a"),AWo=o("NezhaForNextSentencePrediction"),LWo=o(" (Nezha model)"),yWo=l(),_b=a("li"),U_e=a("strong"),xWo=o("qdqbert"),$Wo=o(" \u2014 "),KX=a("a"),kWo=o("QDQBertForNextSentencePrediction"),SWo=o(" (QDQBert model)"),RWo=l(),ub=a("p"),PWo=o("The model is set in evaluation mode by default using "),J_e=a("code"),BWo=o("model.eval()"),IWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),NWo=o("model.train()"),qWo=l(),F(bb.$$.fragment),sVe=l(),id=a("h2"),vb=a("a"),K_e=a("span"),F(Ky.$$.fragment),jWo=l(),Z_e=a("span"),DWo=o("AutoModelForTokenClassification"),lVe=l(),qo=a("div"),F(Zy.$$.fragment),GWo=l(),dd=a("p"),OWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZX=a("a"),VWo=o("from_pretrained()"),XWo=o(" class method or the "),ez=a("a"),zWo=o("from_config()"),QWo=o(` class
method.`),WWo=l(),e8=a("p"),HWo=o("This class cannot be instantiated directly using "),eue=a("code"),UWo=o("__init__()"),JWo=o(" (throws an error)."),YWo=l(),ht=a("div"),F(o8.$$.fragment),KWo=l(),oue=a("p"),ZWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eHo=l(),cd=a("p"),oHo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),rHo=o("not"),tHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),aHo=o("from_pretrained()"),nHo=o(" to load the model weights."),sHo=l(),F(Fb.$$.fragment),lHo=l(),ao=a("div"),F(r8.$$.fragment),iHo=l(),tue=a("p"),dHo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cHo=l(),Oa=a("p"),fHo=o("The model class to instantiate is selected based on the "),aue=a("code"),mHo=o("model_type"),gHo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),hHo=o("pretrained_model_name_or_path"),pHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),_Ho=o("pretrained_model_name_or_path"),uHo=o(":"),bHo=l(),H=a("ul"),Tb=a("li"),lue=a("strong"),vHo=o("albert"),FHo=o(" \u2014 "),rz=a("a"),THo=o("AlbertForTokenClassification"),MHo=o(" (ALBERT model)"),EHo=l(),Mb=a("li"),iue=a("strong"),CHo=o("bert"),wHo=o(" \u2014 "),tz=a("a"),AHo=o("BertForTokenClassification"),LHo=o(" (BERT model)"),yHo=l(),Eb=a("li"),due=a("strong"),xHo=o("big_bird"),$Ho=o(" \u2014 "),az=a("a"),kHo=o("BigBirdForTokenClassification"),SHo=o(" (BigBird model)"),RHo=l(),Cb=a("li"),cue=a("strong"),PHo=o("bloom"),BHo=o(" \u2014 "),nz=a("a"),IHo=o("BloomForTokenClassification"),NHo=o(" (BLOOM model)"),qHo=l(),wb=a("li"),fue=a("strong"),jHo=o("camembert"),DHo=o(" \u2014 "),sz=a("a"),GHo=o("CamembertForTokenClassification"),OHo=o(" (CamemBERT model)"),VHo=l(),Ab=a("li"),mue=a("strong"),XHo=o("canine"),zHo=o(" \u2014 "),lz=a("a"),QHo=o("CanineForTokenClassification"),WHo=o(" (CANINE model)"),HHo=l(),Lb=a("li"),gue=a("strong"),UHo=o("convbert"),JHo=o(" \u2014 "),iz=a("a"),YHo=o("ConvBertForTokenClassification"),KHo=o(" (ConvBERT model)"),ZHo=l(),yb=a("li"),hue=a("strong"),eUo=o("data2vec-text"),oUo=o(" \u2014 "),dz=a("a"),rUo=o("Data2VecTextForTokenClassification"),tUo=o(" (Data2VecText model)"),aUo=l(),xb=a("li"),pue=a("strong"),nUo=o("deberta"),sUo=o(" \u2014 "),cz=a("a"),lUo=o("DebertaForTokenClassification"),iUo=o(" (DeBERTa model)"),dUo=l(),$b=a("li"),_ue=a("strong"),cUo=o("deberta-v2"),fUo=o(" \u2014 "),fz=a("a"),mUo=o("DebertaV2ForTokenClassification"),gUo=o(" (DeBERTa-v2 model)"),hUo=l(),kb=a("li"),uue=a("strong"),pUo=o("distilbert"),_Uo=o(" \u2014 "),mz=a("a"),uUo=o("DistilBertForTokenClassification"),bUo=o(" (DistilBERT model)"),vUo=l(),Sb=a("li"),bue=a("strong"),FUo=o("electra"),TUo=o(" \u2014 "),gz=a("a"),MUo=o("ElectraForTokenClassification"),EUo=o(" (ELECTRA model)"),CUo=l(),Rb=a("li"),vue=a("strong"),wUo=o("flaubert"),AUo=o(" \u2014 "),hz=a("a"),LUo=o("FlaubertForTokenClassification"),yUo=o(" (FlauBERT model)"),xUo=l(),Pb=a("li"),Fue=a("strong"),$Uo=o("fnet"),kUo=o(" \u2014 "),pz=a("a"),SUo=o("FNetForTokenClassification"),RUo=o(" (FNet model)"),PUo=l(),Bb=a("li"),Tue=a("strong"),BUo=o("funnel"),IUo=o(" \u2014 "),_z=a("a"),NUo=o("FunnelForTokenClassification"),qUo=o(" (Funnel Transformer model)"),jUo=l(),Ib=a("li"),Mue=a("strong"),DUo=o("gpt2"),GUo=o(" \u2014 "),uz=a("a"),OUo=o("GPT2ForTokenClassification"),VUo=o(" (OpenAI GPT-2 model)"),XUo=l(),Nb=a("li"),Eue=a("strong"),zUo=o("ibert"),QUo=o(" \u2014 "),bz=a("a"),WUo=o("IBertForTokenClassification"),HUo=o(" (I-BERT model)"),UUo=l(),qb=a("li"),Cue=a("strong"),JUo=o("layoutlm"),YUo=o(" \u2014 "),vz=a("a"),KUo=o("LayoutLMForTokenClassification"),ZUo=o(" (LayoutLM model)"),eJo=l(),jb=a("li"),wue=a("strong"),oJo=o("layoutlmv2"),rJo=o(" \u2014 "),Fz=a("a"),tJo=o("LayoutLMv2ForTokenClassification"),aJo=o(" (LayoutLMv2 model)"),nJo=l(),Db=a("li"),Aue=a("strong"),sJo=o("layoutlmv3"),lJo=o(" \u2014 "),Tz=a("a"),iJo=o("LayoutLMv3ForTokenClassification"),dJo=o(" (LayoutLMv3 model)"),cJo=l(),Gb=a("li"),Lue=a("strong"),fJo=o("longformer"),mJo=o(" \u2014 "),Mz=a("a"),gJo=o("LongformerForTokenClassification"),hJo=o(" (Longformer model)"),pJo=l(),Ob=a("li"),yue=a("strong"),_Jo=o("megatron-bert"),uJo=o(" \u2014 "),Ez=a("a"),bJo=o("MegatronBertForTokenClassification"),vJo=o(" (Megatron-BERT model)"),FJo=l(),Vb=a("li"),xue=a("strong"),TJo=o("mobilebert"),MJo=o(" \u2014 "),Cz=a("a"),EJo=o("MobileBertForTokenClassification"),CJo=o(" (MobileBERT model)"),wJo=l(),Xb=a("li"),$ue=a("strong"),AJo=o("mpnet"),LJo=o(" \u2014 "),wz=a("a"),yJo=o("MPNetForTokenClassification"),xJo=o(" (MPNet model)"),$Jo=l(),zb=a("li"),kue=a("strong"),kJo=o("nezha"),SJo=o(" \u2014 "),Az=a("a"),RJo=o("NezhaForTokenClassification"),PJo=o(" (Nezha model)"),BJo=l(),Qb=a("li"),Sue=a("strong"),IJo=o("nystromformer"),NJo=o(" \u2014 "),Lz=a("a"),qJo=o("NystromformerForTokenClassification"),jJo=o(" (Nystr\xF6mformer model)"),DJo=l(),Wb=a("li"),Rue=a("strong"),GJo=o("qdqbert"),OJo=o(" \u2014 "),yz=a("a"),VJo=o("QDQBertForTokenClassification"),XJo=o(" (QDQBert model)"),zJo=l(),Hb=a("li"),Pue=a("strong"),QJo=o("rembert"),WJo=o(" \u2014 "),xz=a("a"),HJo=o("RemBertForTokenClassification"),UJo=o(" (RemBERT model)"),JJo=l(),Ub=a("li"),Bue=a("strong"),YJo=o("roberta"),KJo=o(" \u2014 "),$z=a("a"),ZJo=o("RobertaForTokenClassification"),eYo=o(" (RoBERTa model)"),oYo=l(),Jb=a("li"),Iue=a("strong"),rYo=o("roformer"),tYo=o(" \u2014 "),kz=a("a"),aYo=o("RoFormerForTokenClassification"),nYo=o(" (RoFormer model)"),sYo=l(),Yb=a("li"),Nue=a("strong"),lYo=o("squeezebert"),iYo=o(" \u2014 "),Sz=a("a"),dYo=o("SqueezeBertForTokenClassification"),cYo=o(" (SqueezeBERT model)"),fYo=l(),Kb=a("li"),que=a("strong"),mYo=o("xlm"),gYo=o(" \u2014 "),Rz=a("a"),hYo=o("XLMForTokenClassification"),pYo=o(" (XLM model)"),_Yo=l(),Zb=a("li"),jue=a("strong"),uYo=o("xlm-roberta"),bYo=o(" \u2014 "),Pz=a("a"),vYo=o("XLMRobertaForTokenClassification"),FYo=o(" (XLM-RoBERTa model)"),TYo=l(),ev=a("li"),Due=a("strong"),MYo=o("xlm-roberta-xl"),EYo=o(" \u2014 "),Bz=a("a"),CYo=o("XLMRobertaXLForTokenClassification"),wYo=o(" (XLM-RoBERTa-XL model)"),AYo=l(),ov=a("li"),Gue=a("strong"),LYo=o("xlnet"),yYo=o(" \u2014 "),Iz=a("a"),xYo=o("XLNetForTokenClassification"),$Yo=o(" (XLNet model)"),kYo=l(),rv=a("li"),Oue=a("strong"),SYo=o("yoso"),RYo=o(" \u2014 "),Nz=a("a"),PYo=o("YosoForTokenClassification"),BYo=o(" (YOSO model)"),IYo=l(),tv=a("p"),NYo=o("The model is set in evaluation mode by default using "),Vue=a("code"),qYo=o("model.eval()"),jYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),DYo=o("model.train()"),GYo=l(),F(av.$$.fragment),iVe=l(),fd=a("h2"),nv=a("a"),zue=a("span"),F(t8.$$.fragment),OYo=l(),Que=a("span"),VYo=o("AutoModelForQuestionAnswering"),dVe=l(),jo=a("div"),F(a8.$$.fragment),XYo=l(),md=a("p"),zYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qz=a("a"),QYo=o("from_pretrained()"),WYo=o(" class method or the "),jz=a("a"),HYo=o("from_config()"),UYo=o(` class
method.`),JYo=l(),n8=a("p"),YYo=o("This class cannot be instantiated directly using "),Wue=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),pt=a("div"),F(s8.$$.fragment),oKo=l(),Hue=a("p"),rKo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tKo=l(),gd=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),lKo=o("from_pretrained()"),iKo=o(" to load the model weights."),dKo=l(),F(sv.$$.fragment),cKo=l(),no=a("div"),F(l8.$$.fragment),fKo=l(),Jue=a("p"),mKo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gKo=l(),Va=a("p"),hKo=o("The model class to instantiate is selected based on the "),Yue=a("code"),pKo=o("model_type"),_Ko=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),uKo=o("pretrained_model_name_or_path"),bKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(":"),TKo=l(),V=a("ul"),lv=a("li"),e5e=a("strong"),MKo=o("albert"),EKo=o(" \u2014 "),Gz=a("a"),CKo=o("AlbertForQuestionAnswering"),wKo=o(" (ALBERT model)"),AKo=l(),iv=a("li"),o5e=a("strong"),LKo=o("bart"),yKo=o(" \u2014 "),Oz=a("a"),xKo=o("BartForQuestionAnswering"),$Ko=o(" (BART model)"),kKo=l(),dv=a("li"),r5e=a("strong"),SKo=o("bert"),RKo=o(" \u2014 "),Vz=a("a"),PKo=o("BertForQuestionAnswering"),BKo=o(" (BERT model)"),IKo=l(),cv=a("li"),t5e=a("strong"),NKo=o("big_bird"),qKo=o(" \u2014 "),Xz=a("a"),jKo=o("BigBirdForQuestionAnswering"),DKo=o(" (BigBird model)"),GKo=l(),fv=a("li"),a5e=a("strong"),OKo=o("bigbird_pegasus"),VKo=o(" \u2014 "),zz=a("a"),XKo=o("BigBirdPegasusForQuestionAnswering"),zKo=o(" (BigBird-Pegasus model)"),QKo=l(),mv=a("li"),n5e=a("strong"),WKo=o("camembert"),HKo=o(" \u2014 "),Qz=a("a"),UKo=o("CamembertForQuestionAnswering"),JKo=o(" (CamemBERT model)"),YKo=l(),gv=a("li"),s5e=a("strong"),KKo=o("canine"),ZKo=o(" \u2014 "),Wz=a("a"),eZo=o("CanineForQuestionAnswering"),oZo=o(" (CANINE model)"),rZo=l(),hv=a("li"),l5e=a("strong"),tZo=o("convbert"),aZo=o(" \u2014 "),Hz=a("a"),nZo=o("ConvBertForQuestionAnswering"),sZo=o(" (ConvBERT model)"),lZo=l(),pv=a("li"),i5e=a("strong"),iZo=o("data2vec-text"),dZo=o(" \u2014 "),Uz=a("a"),cZo=o("Data2VecTextForQuestionAnswering"),fZo=o(" (Data2VecText model)"),mZo=l(),_v=a("li"),d5e=a("strong"),gZo=o("deberta"),hZo=o(" \u2014 "),Jz=a("a"),pZo=o("DebertaForQuestionAnswering"),_Zo=o(" (DeBERTa model)"),uZo=l(),uv=a("li"),c5e=a("strong"),bZo=o("deberta-v2"),vZo=o(" \u2014 "),Yz=a("a"),FZo=o("DebertaV2ForQuestionAnswering"),TZo=o(" (DeBERTa-v2 model)"),MZo=l(),bv=a("li"),f5e=a("strong"),EZo=o("distilbert"),CZo=o(" \u2014 "),Kz=a("a"),wZo=o("DistilBertForQuestionAnswering"),AZo=o(" (DistilBERT model)"),LZo=l(),vv=a("li"),m5e=a("strong"),yZo=o("electra"),xZo=o(" \u2014 "),Zz=a("a"),$Zo=o("ElectraForQuestionAnswering"),kZo=o(" (ELECTRA model)"),SZo=l(),Fv=a("li"),g5e=a("strong"),RZo=o("flaubert"),PZo=o(" \u2014 "),eQ=a("a"),BZo=o("FlaubertForQuestionAnsweringSimple"),IZo=o(" (FlauBERT model)"),NZo=l(),Tv=a("li"),h5e=a("strong"),qZo=o("fnet"),jZo=o(" \u2014 "),oQ=a("a"),DZo=o("FNetForQuestionAnswering"),GZo=o(" (FNet model)"),OZo=l(),Mv=a("li"),p5e=a("strong"),VZo=o("funnel"),XZo=o(" \u2014 "),rQ=a("a"),zZo=o("FunnelForQuestionAnswering"),QZo=o(" (Funnel Transformer model)"),WZo=l(),Ev=a("li"),_5e=a("strong"),HZo=o("gptj"),UZo=o(" \u2014 "),tQ=a("a"),JZo=o("GPTJForQuestionAnswering"),YZo=o(" (GPT-J model)"),KZo=l(),Cv=a("li"),u5e=a("strong"),ZZo=o("ibert"),eer=o(" \u2014 "),aQ=a("a"),oer=o("IBertForQuestionAnswering"),rer=o(" (I-BERT model)"),ter=l(),wv=a("li"),b5e=a("strong"),aer=o("layoutlmv2"),ner=o(" \u2014 "),nQ=a("a"),ser=o("LayoutLMv2ForQuestionAnswering"),ler=o(" (LayoutLMv2 model)"),ier=l(),Av=a("li"),v5e=a("strong"),der=o("layoutlmv3"),cer=o(" \u2014 "),sQ=a("a"),fer=o("LayoutLMv3ForQuestionAnswering"),mer=o(" (LayoutLMv3 model)"),ger=l(),Lv=a("li"),F5e=a("strong"),her=o("led"),per=o(" \u2014 "),lQ=a("a"),_er=o("LEDForQuestionAnswering"),uer=o(" (LED model)"),ber=l(),yv=a("li"),T5e=a("strong"),ver=o("longformer"),Fer=o(" \u2014 "),iQ=a("a"),Ter=o("LongformerForQuestionAnswering"),Mer=o(" (Longformer model)"),Eer=l(),xv=a("li"),M5e=a("strong"),Cer=o("lxmert"),wer=o(" \u2014 "),dQ=a("a"),Aer=o("LxmertForQuestionAnswering"),Ler=o(" (LXMERT model)"),yer=l(),$v=a("li"),E5e=a("strong"),xer=o("mbart"),$er=o(" \u2014 "),cQ=a("a"),ker=o("MBartForQuestionAnswering"),Ser=o(" (mBART model)"),Rer=l(),kv=a("li"),C5e=a("strong"),Per=o("megatron-bert"),Ber=o(" \u2014 "),fQ=a("a"),Ier=o("MegatronBertForQuestionAnswering"),Ner=o(" (Megatron-BERT model)"),qer=l(),Sv=a("li"),w5e=a("strong"),jer=o("mobilebert"),Der=o(" \u2014 "),mQ=a("a"),Ger=o("MobileBertForQuestionAnswering"),Oer=o(" (MobileBERT model)"),Ver=l(),Rv=a("li"),A5e=a("strong"),Xer=o("mpnet"),zer=o(" \u2014 "),gQ=a("a"),Qer=o("MPNetForQuestionAnswering"),Wer=o(" (MPNet model)"),Her=l(),Pv=a("li"),L5e=a("strong"),Uer=o("nezha"),Jer=o(" \u2014 "),hQ=a("a"),Yer=o("NezhaForQuestionAnswering"),Ker=o(" (Nezha model)"),Zer=l(),Bv=a("li"),y5e=a("strong"),eor=o("nystromformer"),oor=o(" \u2014 "),pQ=a("a"),ror=o("NystromformerForQuestionAnswering"),tor=o(" (Nystr\xF6mformer model)"),aor=l(),Iv=a("li"),x5e=a("strong"),nor=o("qdqbert"),sor=o(" \u2014 "),_Q=a("a"),lor=o("QDQBertForQuestionAnswering"),ior=o(" (QDQBert model)"),dor=l(),Nv=a("li"),$5e=a("strong"),cor=o("reformer"),mor=o(" \u2014 "),uQ=a("a"),gor=o("ReformerForQuestionAnswering"),hor=o(" (Reformer model)"),por=l(),qv=a("li"),k5e=a("strong"),_or=o("rembert"),uor=o(" \u2014 "),bQ=a("a"),bor=o("RemBertForQuestionAnswering"),vor=o(" (RemBERT model)"),For=l(),jv=a("li"),S5e=a("strong"),Tor=o("roberta"),Mor=o(" \u2014 "),vQ=a("a"),Eor=o("RobertaForQuestionAnswering"),Cor=o(" (RoBERTa model)"),wor=l(),Dv=a("li"),R5e=a("strong"),Aor=o("roformer"),Lor=o(" \u2014 "),FQ=a("a"),yor=o("RoFormerForQuestionAnswering"),xor=o(" (RoFormer model)"),$or=l(),Gv=a("li"),P5e=a("strong"),kor=o("splinter"),Sor=o(" \u2014 "),TQ=a("a"),Ror=o("SplinterForQuestionAnswering"),Por=o(" (Splinter model)"),Bor=l(),Ov=a("li"),B5e=a("strong"),Ior=o("squeezebert"),Nor=o(" \u2014 "),MQ=a("a"),qor=o("SqueezeBertForQuestionAnswering"),jor=o(" (SqueezeBERT model)"),Dor=l(),Vv=a("li"),I5e=a("strong"),Gor=o("xlm"),Oor=o(" \u2014 "),EQ=a("a"),Vor=o("XLMForQuestionAnsweringSimple"),Xor=o(" (XLM model)"),zor=l(),Xv=a("li"),N5e=a("strong"),Qor=o("xlm-roberta"),Wor=o(" \u2014 "),CQ=a("a"),Hor=o("XLMRobertaForQuestionAnswering"),Uor=o(" (XLM-RoBERTa model)"),Jor=l(),zv=a("li"),q5e=a("strong"),Yor=o("xlm-roberta-xl"),Kor=o(" \u2014 "),wQ=a("a"),Zor=o("XLMRobertaXLForQuestionAnswering"),err=o(" (XLM-RoBERTa-XL model)"),orr=l(),Qv=a("li"),j5e=a("strong"),rrr=o("xlnet"),trr=o(" \u2014 "),AQ=a("a"),arr=o("XLNetForQuestionAnsweringSimple"),nrr=o(" (XLNet model)"),srr=l(),Wv=a("li"),D5e=a("strong"),lrr=o("yoso"),irr=o(" \u2014 "),LQ=a("a"),drr=o("YosoForQuestionAnswering"),crr=o(" (YOSO model)"),frr=l(),Hv=a("p"),mrr=o("The model is set in evaluation mode by default using "),G5e=a("code"),grr=o("model.eval()"),hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O5e=a("code"),prr=o("model.train()"),_rr=l(),F(Uv.$$.fragment),cVe=l(),hd=a("h2"),Jv=a("a"),V5e=a("span"),F(i8.$$.fragment),urr=l(),X5e=a("span"),brr=o("AutoModelForTableQuestionAnswering"),fVe=l(),Do=a("div"),F(d8.$$.fragment),vrr=l(),pd=a("p"),Frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yQ=a("a"),Trr=o("from_pretrained()"),Mrr=o(" class method or the "),xQ=a("a"),Err=o("from_config()"),Crr=o(` class
method.`),wrr=l(),c8=a("p"),Arr=o("This class cannot be instantiated directly using "),z5e=a("code"),Lrr=o("__init__()"),yrr=o(" (throws an error)."),xrr=l(),_t=a("div"),F(f8.$$.fragment),$rr=l(),Q5e=a("p"),krr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Srr=l(),_d=a("p"),Rrr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),Prr=o("not"),Brr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Irr=o("from_pretrained()"),Nrr=o(" to load the model weights."),qrr=l(),F(Yv.$$.fragment),jrr=l(),so=a("div"),F(m8.$$.fragment),Drr=l(),H5e=a("p"),Grr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Orr=l(),Xa=a("p"),Vrr=o("The model class to instantiate is selected based on the "),U5e=a("code"),Xrr=o("model_type"),zrr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),Qrr=o("pretrained_model_name_or_path"),Wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(":"),Jrr=l(),K5e=a("ul"),Kv=a("li"),Z5e=a("strong"),Yrr=o("tapas"),Krr=o(" \u2014 "),kQ=a("a"),Zrr=o("TapasForQuestionAnswering"),etr=o(" (TAPAS model)"),otr=l(),Zv=a("p"),rtr=o("The model is set in evaluation mode by default using "),e1e=a("code"),ttr=o("model.eval()"),atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),ntr=o("model.train()"),str=l(),F(eF.$$.fragment),mVe=l(),ud=a("h2"),oF=a("a"),r1e=a("span"),F(g8.$$.fragment),ltr=l(),t1e=a("span"),itr=o("AutoModelForImageClassification"),gVe=l(),Go=a("div"),F(h8.$$.fragment),dtr=l(),bd=a("p"),ctr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=a("a"),ftr=o("from_pretrained()"),mtr=o(" class method or the "),RQ=a("a"),gtr=o("from_config()"),htr=o(` class
method.`),ptr=l(),p8=a("p"),_tr=o("This class cannot be instantiated directly using "),a1e=a("code"),utr=o("__init__()"),btr=o(" (throws an error)."),vtr=l(),ut=a("div"),F(_8.$$.fragment),Ftr=l(),n1e=a("p"),Ttr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mtr=l(),vd=a("p"),Etr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Ctr=o("not"),wtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Atr=o("from_pretrained()"),Ltr=o(" to load the model weights."),ytr=l(),F(rF.$$.fragment),xtr=l(),lo=a("div"),F(u8.$$.fragment),$tr=l(),l1e=a("p"),ktr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Str=l(),za=a("p"),Rtr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Ptr=o("model_type"),Btr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Itr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),qtr=o("pretrained_model_name_or_path"),jtr=o(":"),Dtr=l(),Fe=a("ul"),tF=a("li"),f1e=a("strong"),Gtr=o("beit"),Otr=o(" \u2014 "),BQ=a("a"),Vtr=o("BeitForImageClassification"),Xtr=o(" (BEiT model)"),ztr=l(),aF=a("li"),m1e=a("strong"),Qtr=o("convnext"),Wtr=o(" \u2014 "),IQ=a("a"),Htr=o("ConvNextForImageClassification"),Utr=o(" (ConvNeXT model)"),Jtr=l(),nF=a("li"),g1e=a("strong"),Ytr=o("cvt"),Ktr=o(" \u2014 "),NQ=a("a"),Ztr=o("CvtForImageClassification"),ear=o(" (CvT model)"),oar=l(),sF=a("li"),h1e=a("strong"),rar=o("data2vec-vision"),tar=o(" \u2014 "),qQ=a("a"),aar=o("Data2VecVisionForImageClassification"),nar=o(" (Data2VecVision model)"),sar=l(),Qs=a("li"),p1e=a("strong"),lar=o("deit"),iar=o(" \u2014 "),jQ=a("a"),dar=o("DeiTForImageClassification"),car=o(" or "),DQ=a("a"),far=o("DeiTForImageClassificationWithTeacher"),mar=o(" (DeiT model)"),gar=l(),lF=a("li"),_1e=a("strong"),har=o("imagegpt"),par=o(" \u2014 "),GQ=a("a"),_ar=o("ImageGPTForImageClassification"),uar=o(" (ImageGPT model)"),bar=l(),Ws=a("li"),u1e=a("strong"),Far=o("levit"),Tar=o(" \u2014 "),OQ=a("a"),Mar=o("LevitForImageClassification"),Ear=o(" or "),VQ=a("a"),Car=o("LevitForImageClassificationWithTeacher"),war=o(" (LeViT model)"),Aar=l(),bt=a("li"),b1e=a("strong"),Lar=o("perceiver"),yar=o(" \u2014 "),XQ=a("a"),xar=o("PerceiverForImageClassificationLearned"),$ar=o(" or "),zQ=a("a"),kar=o("PerceiverForImageClassificationFourier"),Sar=o(" or "),QQ=a("a"),Rar=o("PerceiverForImageClassificationConvProcessing"),Par=o(" (Perceiver model)"),Bar=l(),iF=a("li"),v1e=a("strong"),Iar=o("poolformer"),Nar=o(" \u2014 "),WQ=a("a"),qar=o("PoolFormerForImageClassification"),jar=o(" (PoolFormer model)"),Dar=l(),dF=a("li"),F1e=a("strong"),Gar=o("regnet"),Oar=o(" \u2014 "),HQ=a("a"),Var=o("RegNetForImageClassification"),Xar=o(" (RegNet model)"),zar=l(),cF=a("li"),T1e=a("strong"),Qar=o("resnet"),War=o(" \u2014 "),UQ=a("a"),Har=o("ResNetForImageClassification"),Uar=o(" (ResNet model)"),Jar=l(),fF=a("li"),M1e=a("strong"),Yar=o("segformer"),Kar=o(" \u2014 "),JQ=a("a"),Zar=o("SegformerForImageClassification"),enr=o(" (SegFormer model)"),onr=l(),mF=a("li"),E1e=a("strong"),rnr=o("swin"),tnr=o(" \u2014 "),YQ=a("a"),anr=o("SwinForImageClassification"),nnr=o(" (Swin Transformer model)"),snr=l(),gF=a("li"),C1e=a("strong"),lnr=o("van"),inr=o(" \u2014 "),KQ=a("a"),dnr=o("VanForImageClassification"),cnr=o(" (VAN model)"),fnr=l(),hF=a("li"),w1e=a("strong"),mnr=o("vit"),gnr=o(" \u2014 "),ZQ=a("a"),hnr=o("ViTForImageClassification"),pnr=o(" (ViT model)"),_nr=l(),pF=a("p"),unr=o("The model is set in evaluation mode by default using "),A1e=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),Fnr=o("model.train()"),Tnr=l(),F(_F.$$.fragment),hVe=l(),Fd=a("h2"),uF=a("a"),y1e=a("span"),F(b8.$$.fragment),Mnr=l(),x1e=a("span"),Enr=o("AutoModelForVision2Seq"),pVe=l(),Oo=a("div"),F(v8.$$.fragment),Cnr=l(),Td=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eW=a("a"),Anr=o("from_pretrained()"),Lnr=o(" class method or the "),oW=a("a"),ynr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),F8=a("p"),knr=o("This class cannot be instantiated directly using "),$1e=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),vt=a("div"),F(T8.$$.fragment),Bnr=l(),k1e=a("p"),Inr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nnr=l(),Md=a("p"),qnr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(bF.$$.fragment),Xnr=l(),io=a("div"),F(M8.$$.fragment),znr=l(),R1e=a("p"),Qnr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wnr=l(),Qa=a("p"),Hnr=o("The model class to instantiate is selected based on the "),P1e=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),N1e=a("ul"),vF=a("li"),q1e=a("strong"),rsr=o("vision-encoder-decoder"),tsr=o(" \u2014 "),tW=a("a"),asr=o("VisionEncoderDecoderModel"),nsr=o(" (Vision Encoder decoder model)"),ssr=l(),FF=a("p"),lsr=o("The model is set in evaluation mode by default using "),j1e=a("code"),isr=o("model.eval()"),dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),csr=o("model.train()"),fsr=l(),F(TF.$$.fragment),_Ve=l(),Ed=a("h2"),MF=a("a"),G1e=a("span"),F(E8.$$.fragment),msr=l(),O1e=a("span"),gsr=o("AutoModelForVisualQuestionAnswering"),uVe=l(),Vo=a("div"),F(C8.$$.fragment),hsr=l(),Cd=a("p"),psr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),aW=a("a"),_sr=o("from_pretrained()"),usr=o(" class method or the "),nW=a("a"),bsr=o("from_config()"),vsr=o(` class
method.`),Fsr=l(),w8=a("p"),Tsr=o("This class cannot be instantiated directly using "),V1e=a("code"),Msr=o("__init__()"),Esr=o(" (throws an error)."),Csr=l(),Ft=a("div"),F(A8.$$.fragment),wsr=l(),X1e=a("p"),Asr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Lsr=l(),wd=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),xsr=o("not"),$sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),ksr=o("from_pretrained()"),Ssr=o(" to load the model weights."),Rsr=l(),F(EF.$$.fragment),Psr=l(),co=a("div"),F(L8.$$.fragment),Bsr=l(),Q1e=a("p"),Isr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Nsr=l(),Wa=a("p"),qsr=o("The model class to instantiate is selected based on the "),W1e=a("code"),jsr=o("model_type"),Dsr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(":"),zsr=l(),J1e=a("ul"),CF=a("li"),Y1e=a("strong"),Qsr=o("vilt"),Wsr=o(" \u2014 "),lW=a("a"),Hsr=o("ViltForQuestionAnswering"),Usr=o(" (ViLT model)"),Jsr=l(),wF=a("p"),Ysr=o("The model is set in evaluation mode by default using "),K1e=a("code"),Ksr=o("model.eval()"),Zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=a("code"),elr=o("model.train()"),olr=l(),F(AF.$$.fragment),bVe=l(),Ad=a("h2"),LF=a("a"),e2e=a("span"),F(y8.$$.fragment),rlr=l(),o2e=a("span"),tlr=o("AutoModelForAudioClassification"),vVe=l(),Xo=a("div"),F(x8.$$.fragment),alr=l(),Ld=a("p"),nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iW=a("a"),slr=o("from_pretrained()"),llr=o(" class method or the "),dW=a("a"),ilr=o("from_config()"),dlr=o(` class
method.`),clr=l(),$8=a("p"),flr=o("This class cannot be instantiated directly using "),r2e=a("code"),mlr=o("__init__()"),glr=o(" (throws an error)."),hlr=l(),Tt=a("div"),F(k8.$$.fragment),plr=l(),t2e=a("p"),_lr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ulr=l(),yd=a("p"),blr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),vlr=o("not"),Flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" to load the model weights."),Elr=l(),F(yF.$$.fragment),Clr=l(),fo=a("div"),F(S8.$$.fragment),wlr=l(),n2e=a("p"),Alr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Llr=l(),Ha=a("p"),ylr=o("The model class to instantiate is selected based on the "),s2e=a("code"),xlr=o("model_type"),$lr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(":"),Blr=l(),Pe=a("ul"),xF=a("li"),d2e=a("strong"),Ilr=o("data2vec-audio"),Nlr=o(" \u2014 "),fW=a("a"),qlr=o("Data2VecAudioForSequenceClassification"),jlr=o(" (Data2VecAudio model)"),Dlr=l(),$F=a("li"),c2e=a("strong"),Glr=o("hubert"),Olr=o(" \u2014 "),mW=a("a"),Vlr=o("HubertForSequenceClassification"),Xlr=o(" (Hubert model)"),zlr=l(),kF=a("li"),f2e=a("strong"),Qlr=o("sew"),Wlr=o(" \u2014 "),gW=a("a"),Hlr=o("SEWForSequenceClassification"),Ulr=o(" (SEW model)"),Jlr=l(),SF=a("li"),m2e=a("strong"),Ylr=o("sew-d"),Klr=o(" \u2014 "),hW=a("a"),Zlr=o("SEWDForSequenceClassification"),eir=o(" (SEW-D model)"),oir=l(),RF=a("li"),g2e=a("strong"),rir=o("unispeech"),tir=o(" \u2014 "),pW=a("a"),air=o("UniSpeechForSequenceClassification"),nir=o(" (UniSpeech model)"),sir=l(),PF=a("li"),h2e=a("strong"),lir=o("unispeech-sat"),iir=o(" \u2014 "),_W=a("a"),dir=o("UniSpeechSatForSequenceClassification"),cir=o(" (UniSpeechSat model)"),fir=l(),BF=a("li"),p2e=a("strong"),mir=o("wav2vec2"),gir=o(" \u2014 "),uW=a("a"),hir=o("Wav2Vec2ForSequenceClassification"),pir=o(" (Wav2Vec2 model)"),_ir=l(),IF=a("li"),_2e=a("strong"),uir=o("wav2vec2-conformer"),bir=o(" \u2014 "),bW=a("a"),vir=o("Wav2Vec2ConformerForSequenceClassification"),Fir=o(" (Wav2Vec2-Conformer model)"),Tir=l(),NF=a("li"),u2e=a("strong"),Mir=o("wavlm"),Eir=o(" \u2014 "),vW=a("a"),Cir=o("WavLMForSequenceClassification"),wir=o(" (WavLM model)"),Air=l(),qF=a("p"),Lir=o("The model is set in evaluation mode by default using "),b2e=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),$ir=o("model.train()"),kir=l(),F(jF.$$.fragment),FVe=l(),xd=a("h2"),DF=a("a"),F2e=a("span"),F(R8.$$.fragment),Sir=l(),T2e=a("span"),Rir=o("AutoModelForAudioFrameClassification"),TVe=l(),zo=a("div"),F(P8.$$.fragment),Pir=l(),$d=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),TW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),B8=a("p"),Gir=o("This class cannot be instantiated directly using "),M2e=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Mt=a("div"),F(I8.$$.fragment),zir=l(),E2e=a("p"),Qir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wir=l(),kd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(GF.$$.fragment),edr=l(),mo=a("div"),F(N8.$$.fragment),odr=l(),w2e=a("p"),rdr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tdr=l(),Ua=a("p"),adr=o("The model class to instantiate is selected based on the "),A2e=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),et=a("ul"),OF=a("li"),x2e=a("strong"),mdr=o("data2vec-audio"),gdr=o(" \u2014 "),EW=a("a"),hdr=o("Data2VecAudioForAudioFrameClassification"),pdr=o(" (Data2VecAudio model)"),_dr=l(),VF=a("li"),$2e=a("strong"),udr=o("unispeech-sat"),bdr=o(" \u2014 "),CW=a("a"),vdr=o("UniSpeechSatForAudioFrameClassification"),Fdr=o(" (UniSpeechSat model)"),Tdr=l(),XF=a("li"),k2e=a("strong"),Mdr=o("wav2vec2"),Edr=o(" \u2014 "),wW=a("a"),Cdr=o("Wav2Vec2ForAudioFrameClassification"),wdr=o(" (Wav2Vec2 model)"),Adr=l(),zF=a("li"),S2e=a("strong"),Ldr=o("wav2vec2-conformer"),ydr=o(" \u2014 "),AW=a("a"),xdr=o("Wav2Vec2ConformerForAudioFrameClassification"),$dr=o(" (Wav2Vec2-Conformer model)"),kdr=l(),QF=a("li"),R2e=a("strong"),Sdr=o("wavlm"),Rdr=o(" \u2014 "),LW=a("a"),Pdr=o("WavLMForAudioFrameClassification"),Bdr=o(" (WavLM model)"),Idr=l(),WF=a("p"),Ndr=o("The model is set in evaluation mode by default using "),P2e=a("code"),qdr=o("model.eval()"),jdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),Ddr=o("model.train()"),Gdr=l(),F(HF.$$.fragment),MVe=l(),Sd=a("h2"),UF=a("a"),I2e=a("span"),F(q8.$$.fragment),Odr=l(),N2e=a("span"),Vdr=o("AutoModelForCTC"),EVe=l(),Qo=a("div"),F(j8.$$.fragment),Xdr=l(),Rd=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yW=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),xW=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),D8=a("p"),Ydr=o("This class cannot be instantiated directly using "),q2e=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),Et=a("div"),F(G8.$$.fragment),ocr=l(),j2e=a("p"),rcr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tcr=l(),Pd=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),F(JF.$$.fragment),ccr=l(),go=a("div"),F(O8.$$.fragment),fcr=l(),G2e=a("p"),mcr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gcr=l(),Ja=a("p"),hcr=o("The model class to instantiate is selected based on the "),O2e=a("code"),pcr=o("model_type"),_cr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),ucr=o("pretrained_model_name_or_path"),bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(":"),Tcr=l(),Le=a("ul"),YF=a("li"),z2e=a("strong"),Mcr=o("data2vec-audio"),Ecr=o(" \u2014 "),kW=a("a"),Ccr=o("Data2VecAudioForCTC"),wcr=o(" (Data2VecAudio model)"),Acr=l(),KF=a("li"),Q2e=a("strong"),Lcr=o("hubert"),ycr=o(" \u2014 "),SW=a("a"),xcr=o("HubertForCTC"),$cr=o(" (Hubert model)"),kcr=l(),ZF=a("li"),W2e=a("strong"),Scr=o("mctct"),Rcr=o(" \u2014 "),RW=a("a"),Pcr=o("MCTCTForCTC"),Bcr=o(" (M-CTC-T model)"),Icr=l(),eT=a("li"),H2e=a("strong"),Ncr=o("sew"),qcr=o(" \u2014 "),PW=a("a"),jcr=o("SEWForCTC"),Dcr=o(" (SEW model)"),Gcr=l(),oT=a("li"),U2e=a("strong"),Ocr=o("sew-d"),Vcr=o(" \u2014 "),BW=a("a"),Xcr=o("SEWDForCTC"),zcr=o(" (SEW-D model)"),Qcr=l(),rT=a("li"),J2e=a("strong"),Wcr=o("unispeech"),Hcr=o(" \u2014 "),IW=a("a"),Ucr=o("UniSpeechForCTC"),Jcr=o(" (UniSpeech model)"),Ycr=l(),tT=a("li"),Y2e=a("strong"),Kcr=o("unispeech-sat"),Zcr=o(" \u2014 "),NW=a("a"),efr=o("UniSpeechSatForCTC"),ofr=o(" (UniSpeechSat model)"),rfr=l(),aT=a("li"),K2e=a("strong"),tfr=o("wav2vec2"),afr=o(" \u2014 "),qW=a("a"),nfr=o("Wav2Vec2ForCTC"),sfr=o(" (Wav2Vec2 model)"),lfr=l(),nT=a("li"),Z2e=a("strong"),ifr=o("wav2vec2-conformer"),dfr=o(" \u2014 "),jW=a("a"),cfr=o("Wav2Vec2ConformerForCTC"),ffr=o(" (Wav2Vec2-Conformer model)"),mfr=l(),sT=a("li"),e4e=a("strong"),gfr=o("wavlm"),hfr=o(" \u2014 "),DW=a("a"),pfr=o("WavLMForCTC"),_fr=o(" (WavLM model)"),ufr=l(),lT=a("p"),bfr=o("The model is set in evaluation mode by default using "),o4e=a("code"),vfr=o("model.eval()"),Ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=a("code"),Tfr=o("model.train()"),Mfr=l(),F(iT.$$.fragment),CVe=l(),Bd=a("h2"),dT=a("a"),t4e=a("span"),F(V8.$$.fragment),Efr=l(),a4e=a("span"),Cfr=o("AutoModelForSpeechSeq2Seq"),wVe=l(),Wo=a("div"),F(X8.$$.fragment),wfr=l(),Id=a("p"),Afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GW=a("a"),Lfr=o("from_pretrained()"),yfr=o(" class method or the "),OW=a("a"),xfr=o("from_config()"),$fr=o(` class
method.`),kfr=l(),z8=a("p"),Sfr=o("This class cannot be instantiated directly using "),n4e=a("code"),Rfr=o("__init__()"),Pfr=o(" (throws an error)."),Bfr=l(),Ct=a("div"),F(Q8.$$.fragment),Ifr=l(),s4e=a("p"),Nfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qfr=l(),Nd=a("p"),jfr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),Dfr=o("not"),Gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Ofr=o("from_pretrained()"),Vfr=o(" to load the model weights."),Xfr=l(),F(cT.$$.fragment),zfr=l(),ho=a("div"),F(W8.$$.fragment),Qfr=l(),i4e=a("p"),Wfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hfr=l(),Ya=a("p"),Ufr=o("The model class to instantiate is selected based on the "),d4e=a("code"),Jfr=o("model_type"),Yfr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(":"),rmr=l(),H8=a("ul"),fT=a("li"),m4e=a("strong"),tmr=o("speech-encoder-decoder"),amr=o(" \u2014 "),XW=a("a"),nmr=o("SpeechEncoderDecoderModel"),smr=o(" (Speech Encoder decoder model)"),lmr=l(),mT=a("li"),g4e=a("strong"),imr=o("speech_to_text"),dmr=o(" \u2014 "),zW=a("a"),cmr=o("Speech2TextForConditionalGeneration"),fmr=o(" (Speech2Text model)"),mmr=l(),gT=a("p"),gmr=o("The model is set in evaluation mode by default using "),h4e=a("code"),hmr=o("model.eval()"),pmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p4e=a("code"),_mr=o("model.train()"),umr=l(),F(hT.$$.fragment),AVe=l(),qd=a("h2"),pT=a("a"),_4e=a("span"),F(U8.$$.fragment),bmr=l(),u4e=a("span"),vmr=o("AutoModelForAudioXVector"),LVe=l(),Ho=a("div"),F(J8.$$.fragment),Fmr=l(),jd=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QW=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),WW=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),Y8=a("p"),Lmr=o("This class cannot be instantiated directly using "),b4e=a("code"),ymr=o("__init__()"),xmr=o(" (throws an error)."),$mr=l(),wt=a("div"),F(K8.$$.fragment),kmr=l(),v4e=a("p"),Smr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Rmr=l(),Dd=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),Bmr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Nmr=o("from_pretrained()"),qmr=o(" to load the model weights."),jmr=l(),F(_T.$$.fragment),Dmr=l(),po=a("div"),F(Z8.$$.fragment),Gmr=l(),T4e=a("p"),Omr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vmr=l(),Ka=a("p"),Xmr=o("The model class to instantiate is selected based on the "),M4e=a("code"),zmr=o("model_type"),Qmr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),Wmr=o("pretrained_model_name_or_path"),Hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(":"),Ymr=l(),ot=a("ul"),uT=a("li"),w4e=a("strong"),Kmr=o("data2vec-audio"),Zmr=o(" \u2014 "),UW=a("a"),egr=o("Data2VecAudioForXVector"),ogr=o(" (Data2VecAudio model)"),rgr=l(),bT=a("li"),A4e=a("strong"),tgr=o("unispeech-sat"),agr=o(" \u2014 "),JW=a("a"),ngr=o("UniSpeechSatForXVector"),sgr=o(" (UniSpeechSat model)"),lgr=l(),vT=a("li"),L4e=a("strong"),igr=o("wav2vec2"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("Wav2Vec2ForXVector"),fgr=o(" (Wav2Vec2 model)"),mgr=l(),FT=a("li"),y4e=a("strong"),ggr=o("wav2vec2-conformer"),hgr=o(" \u2014 "),KW=a("a"),pgr=o("Wav2Vec2ConformerForXVector"),_gr=o(" (Wav2Vec2-Conformer model)"),ugr=l(),TT=a("li"),x4e=a("strong"),bgr=o("wavlm"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("WavLMForXVector"),Tgr=o(" (WavLM model)"),Mgr=l(),MT=a("p"),Egr=o("The model is set in evaluation mode by default using "),$4e=a("code"),Cgr=o("model.eval()"),wgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k4e=a("code"),Agr=o("model.train()"),Lgr=l(),F(ET.$$.fragment),yVe=l(),Gd=a("h2"),CT=a("a"),S4e=a("span"),F(e9.$$.fragment),ygr=l(),R4e=a("span"),xgr=o("AutoModelForMaskedImageModeling"),xVe=l(),Uo=a("div"),F(o9.$$.fragment),$gr=l(),Od=a("p"),kgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eH=a("a"),Sgr=o("from_pretrained()"),Rgr=o(" class method or the "),oH=a("a"),Pgr=o("from_config()"),Bgr=o(` class
method.`),Igr=l(),r9=a("p"),Ngr=o("This class cannot be instantiated directly using "),P4e=a("code"),qgr=o("__init__()"),jgr=o(" (throws an error)."),Dgr=l(),At=a("div"),F(t9.$$.fragment),Ggr=l(),B4e=a("p"),Ogr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vgr=l(),Vd=a("p"),Xgr=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),zgr=o("not"),Qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Wgr=o("from_pretrained()"),Hgr=o(" to load the model weights."),Ugr=l(),F(wT.$$.fragment),Jgr=l(),_o=a("div"),F(a9.$$.fragment),Ygr=l(),N4e=a("p"),Kgr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Zgr=l(),Za=a("p"),ehr=o("The model class to instantiate is selected based on the "),q4e=a("code"),ohr=o("model_type"),rhr=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(":"),lhr=l(),Xd=a("ul"),AT=a("li"),G4e=a("strong"),ihr=o("deit"),dhr=o(" \u2014 "),tH=a("a"),chr=o("DeiTForMaskedImageModeling"),fhr=o(" (DeiT model)"),mhr=l(),LT=a("li"),O4e=a("strong"),ghr=o("swin"),hhr=o(" \u2014 "),aH=a("a"),phr=o("SwinForMaskedImageModeling"),_hr=o(" (Swin Transformer model)"),uhr=l(),yT=a("li"),V4e=a("strong"),bhr=o("vit"),vhr=o(" \u2014 "),nH=a("a"),Fhr=o("ViTForMaskedImageModeling"),Thr=o(" (ViT model)"),Mhr=l(),xT=a("p"),Ehr=o("The model is set in evaluation mode by default using "),X4e=a("code"),Chr=o("model.eval()"),whr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z4e=a("code"),Ahr=o("model.train()"),Lhr=l(),F($T.$$.fragment),$Ve=l(),zd=a("h2"),kT=a("a"),Q4e=a("span"),F(n9.$$.fragment),yhr=l(),W4e=a("span"),xhr=o("AutoModelForObjectDetection"),kVe=l(),Jo=a("div"),F(s9.$$.fragment),$hr=l(),Qd=a("p"),khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sH=a("a"),Shr=o("from_pretrained()"),Rhr=o(" class method or the "),lH=a("a"),Phr=o("from_config()"),Bhr=o(` class
method.`),Ihr=l(),l9=a("p"),Nhr=o("This class cannot be instantiated directly using "),H4e=a("code"),qhr=o("__init__()"),jhr=o(" (throws an error)."),Dhr=l(),Lt=a("div"),F(i9.$$.fragment),Ghr=l(),U4e=a("p"),Ohr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Vhr=l(),Wd=a("p"),Xhr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),zhr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Whr=o("from_pretrained()"),Hhr=o(" to load the model weights."),Uhr=l(),F(ST.$$.fragment),Jhr=l(),uo=a("div"),F(d9.$$.fragment),Yhr=l(),Y4e=a("p"),Khr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Zhr=l(),en=a("p"),epr=o("The model class to instantiate is selected based on the "),K4e=a("code"),opr=o("model_type"),rpr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),npr=o("pretrained_model_name_or_path"),spr=o(":"),lpr=l(),c9=a("ul"),RT=a("li"),obe=a("strong"),ipr=o("detr"),dpr=o(" \u2014 "),dH=a("a"),cpr=o("DetrForObjectDetection"),fpr=o(" (DETR model)"),mpr=l(),PT=a("li"),rbe=a("strong"),gpr=o("yolos"),hpr=o(" \u2014 "),cH=a("a"),ppr=o("YolosForObjectDetection"),_pr=o(" (YOLOS model)"),upr=l(),BT=a("p"),bpr=o("The model is set in evaluation mode by default using "),tbe=a("code"),vpr=o("model.eval()"),Fpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),Tpr=o("model.train()"),Mpr=l(),F(IT.$$.fragment),SVe=l(),Hd=a("h2"),NT=a("a"),nbe=a("span"),F(f9.$$.fragment),Epr=l(),sbe=a("span"),Cpr=o("AutoModelForImageSegmentation"),RVe=l(),Yo=a("div"),F(m9.$$.fragment),wpr=l(),Ud=a("p"),Apr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fH=a("a"),Lpr=o("from_pretrained()"),ypr=o(" class method or the "),mH=a("a"),xpr=o("from_config()"),$pr=o(` class
method.`),kpr=l(),g9=a("p"),Spr=o("This class cannot be instantiated directly using "),lbe=a("code"),Rpr=o("__init__()"),Ppr=o(" (throws an error)."),Bpr=l(),yt=a("div"),F(h9.$$.fragment),Ipr=l(),ibe=a("p"),Npr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),qpr=l(),Jd=a("p"),jpr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),Dpr=o("not"),Gpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),Opr=o("from_pretrained()"),Vpr=o(" to load the model weights."),Xpr=l(),F(qT.$$.fragment),zpr=l(),bo=a("div"),F(p9.$$.fragment),Qpr=l(),cbe=a("p"),Wpr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hpr=l(),on=a("p"),Upr=o("The model class to instantiate is selected based on the "),fbe=a("code"),Jpr=o("model_type"),Ypr=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),Kpr=o("pretrained_model_name_or_path"),Zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),e_r=o("pretrained_model_name_or_path"),o_r=o(":"),r_r=l(),hbe=a("ul"),jT=a("li"),pbe=a("strong"),t_r=o("detr"),a_r=o(" \u2014 "),hH=a("a"),n_r=o("DetrForSegmentation"),s_r=o(" (DETR model)"),l_r=l(),DT=a("p"),i_r=o("The model is set in evaluation mode by default using "),_be=a("code"),d_r=o("model.eval()"),c_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=a("code"),f_r=o("model.train()"),m_r=l(),F(GT.$$.fragment),PVe=l(),Yd=a("h2"),OT=a("a"),bbe=a("span"),F(_9.$$.fragment),g_r=l(),vbe=a("span"),h_r=o("AutoModelForSemanticSegmentation"),BVe=l(),Ko=a("div"),F(u9.$$.fragment),p_r=l(),Kd=a("p"),__r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pH=a("a"),u_r=o("from_pretrained()"),b_r=o(" class method or the "),_H=a("a"),v_r=o("from_config()"),F_r=o(` class
method.`),T_r=l(),b9=a("p"),M_r=o("This class cannot be instantiated directly using "),Fbe=a("code"),E_r=o("__init__()"),C_r=o(" (throws an error)."),w_r=l(),xt=a("div"),F(v9.$$.fragment),A_r=l(),Tbe=a("p"),L_r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),y_r=l(),Zd=a("p"),x_r=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),$_r=o("not"),k_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),S_r=o("from_pretrained()"),R_r=o(" to load the model weights."),P_r=l(),F(VT.$$.fragment),B_r=l(),vo=a("div"),F(F9.$$.fragment),I_r=l(),Ebe=a("p"),N_r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),q_r=l(),rn=a("p"),j_r=o("The model class to instantiate is selected based on the "),Cbe=a("code"),D_r=o("model_type"),G_r=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),O_r=o("pretrained_model_name_or_path"),V_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),X_r=o("pretrained_model_name_or_path"),z_r=o(":"),Q_r=l(),tn=a("ul"),XT=a("li"),Lbe=a("strong"),W_r=o("beit"),H_r=o(" \u2014 "),bH=a("a"),U_r=o("BeitForSemanticSegmentation"),J_r=o(" (BEiT model)"),Y_r=l(),zT=a("li"),ybe=a("strong"),K_r=o("data2vec-vision"),Z_r=o(" \u2014 "),vH=a("a"),eur=o("Data2VecVisionForSemanticSegmentation"),our=o(" (Data2VecVision model)"),rur=l(),QT=a("li"),xbe=a("strong"),tur=o("dpt"),aur=o(" \u2014 "),FH=a("a"),nur=o("DPTForSemanticSegmentation"),sur=o(" (DPT model)"),lur=l(),WT=a("li"),$be=a("strong"),iur=o("segformer"),dur=o(" \u2014 "),TH=a("a"),cur=o("SegformerForSemanticSegmentation"),fur=o(" (SegFormer model)"),mur=l(),HT=a("p"),gur=o("The model is set in evaluation mode by default using "),kbe=a("code"),hur=o("model.eval()"),pur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),_ur=o("model.train()"),uur=l(),F(UT.$$.fragment),IVe=l(),ec=a("h2"),JT=a("a"),Rbe=a("span"),F(T9.$$.fragment),bur=l(),Pbe=a("span"),vur=o("AutoModelForInstanceSegmentation"),NVe=l(),Zo=a("div"),F(M9.$$.fragment),Fur=l(),oc=a("p"),Tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),MH=a("a"),Mur=o("from_pretrained()"),Eur=o(" class method or the "),EH=a("a"),Cur=o("from_config()"),wur=o(` class
method.`),Aur=l(),E9=a("p"),Lur=o("This class cannot be instantiated directly using "),Bbe=a("code"),yur=o("__init__()"),xur=o(" (throws an error)."),$ur=l(),$t=a("div"),F(C9.$$.fragment),kur=l(),Ibe=a("p"),Sur=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Rur=l(),rc=a("p"),Pur=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),Bur=o("not"),Iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),Nur=o("from_pretrained()"),qur=o(" to load the model weights."),jur=l(),F(YT.$$.fragment),Dur=l(),Fo=a("div"),F(w9.$$.fragment),Gur=l(),qbe=a("p"),Our=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Vur=l(),an=a("p"),Xur=o("The model class to instantiate is selected based on the "),jbe=a("code"),zur=o("model_type"),Qur=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),Wur=o("pretrained_model_name_or_path"),Hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(":"),Yur=l(),Obe=a("ul"),KT=a("li"),Vbe=a("strong"),Kur=o("maskformer"),Zur=o(" \u2014 "),wH=a("a"),e5r=o("MaskFormerForInstanceSegmentation"),o5r=o(" (MaskFormer model)"),r5r=l(),ZT=a("p"),t5r=o("The model is set in evaluation mode by default using "),Xbe=a("code"),a5r=o("model.eval()"),n5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=a("code"),s5r=o("model.train()"),l5r=l(),F(e7.$$.fragment),qVe=l(),tc=a("h2"),o7=a("a"),Qbe=a("span"),F(A9.$$.fragment),i5r=l(),Wbe=a("span"),d5r=o("TFAutoModel"),jVe=l(),er=a("div"),F(L9.$$.fragment),c5r=l(),ac=a("p"),f5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AH=a("a"),m5r=o("from_pretrained()"),g5r=o(" class method or the "),LH=a("a"),h5r=o("from_config()"),p5r=o(` class
method.`),_5r=l(),y9=a("p"),u5r=o("This class cannot be instantiated directly using "),Hbe=a("code"),b5r=o("__init__()"),v5r=o(" (throws an error)."),F5r=l(),kt=a("div"),F(x9.$$.fragment),T5r=l(),Ube=a("p"),M5r=o("Instantiates one of the base model classes of the library from a configuration."),E5r=l(),nc=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),w5r=o("not"),A5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),L5r=o("from_pretrained()"),y5r=o(" to load the model weights."),x5r=l(),F(r7.$$.fragment),$5r=l(),yr=a("div"),F($9.$$.fragment),k5r=l(),Ybe=a("p"),S5r=o("Instantiate one of the base model classes of the library from a pretrained model."),R5r=l(),nn=a("p"),P5r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),B5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),N5r=o("pretrained_model_name_or_path"),q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(":"),G5r=l(),q=a("ul"),t7=a("li"),ove=a("strong"),O5r=o("albert"),V5r=o(" \u2014 "),xH=a("a"),X5r=o("TFAlbertModel"),z5r=o(" (ALBERT model)"),Q5r=l(),a7=a("li"),rve=a("strong"),W5r=o("bart"),H5r=o(" \u2014 "),$H=a("a"),U5r=o("TFBartModel"),J5r=o(" (BART model)"),Y5r=l(),n7=a("li"),tve=a("strong"),K5r=o("bert"),Z5r=o(" \u2014 "),kH=a("a"),e1r=o("TFBertModel"),o1r=o(" (BERT model)"),r1r=l(),s7=a("li"),ave=a("strong"),t1r=o("blenderbot"),a1r=o(" \u2014 "),SH=a("a"),n1r=o("TFBlenderbotModel"),s1r=o(" (Blenderbot model)"),l1r=l(),l7=a("li"),nve=a("strong"),i1r=o("blenderbot-small"),d1r=o(" \u2014 "),RH=a("a"),c1r=o("TFBlenderbotSmallModel"),f1r=o(" (BlenderbotSmall model)"),m1r=l(),i7=a("li"),sve=a("strong"),g1r=o("camembert"),h1r=o(" \u2014 "),PH=a("a"),p1r=o("TFCamembertModel"),_1r=o(" (CamemBERT model)"),u1r=l(),d7=a("li"),lve=a("strong"),b1r=o("clip"),v1r=o(" \u2014 "),BH=a("a"),F1r=o("TFCLIPModel"),T1r=o(" (CLIP model)"),M1r=l(),c7=a("li"),ive=a("strong"),E1r=o("convbert"),C1r=o(" \u2014 "),IH=a("a"),w1r=o("TFConvBertModel"),A1r=o(" (ConvBERT model)"),L1r=l(),f7=a("li"),dve=a("strong"),y1r=o("convnext"),x1r=o(" \u2014 "),NH=a("a"),$1r=o("TFConvNextModel"),k1r=o(" (ConvNeXT model)"),S1r=l(),m7=a("li"),cve=a("strong"),R1r=o("ctrl"),P1r=o(" \u2014 "),qH=a("a"),B1r=o("TFCTRLModel"),I1r=o(" (CTRL model)"),N1r=l(),g7=a("li"),fve=a("strong"),q1r=o("data2vec-vision"),j1r=o(" \u2014 "),jH=a("a"),D1r=o("TFData2VecVisionModel"),G1r=o(" (Data2VecVision model)"),O1r=l(),h7=a("li"),mve=a("strong"),V1r=o("deberta"),X1r=o(" \u2014 "),DH=a("a"),z1r=o("TFDebertaModel"),Q1r=o(" (DeBERTa model)"),W1r=l(),p7=a("li"),gve=a("strong"),H1r=o("deberta-v2"),U1r=o(" \u2014 "),GH=a("a"),J1r=o("TFDebertaV2Model"),Y1r=o(" (DeBERTa-v2 model)"),K1r=l(),_7=a("li"),hve=a("strong"),Z1r=o("distilbert"),e2r=o(" \u2014 "),OH=a("a"),o2r=o("TFDistilBertModel"),r2r=o(" (DistilBERT model)"),t2r=l(),u7=a("li"),pve=a("strong"),a2r=o("dpr"),n2r=o(" \u2014 "),VH=a("a"),s2r=o("TFDPRQuestionEncoder"),l2r=o(" (DPR model)"),i2r=l(),b7=a("li"),_ve=a("strong"),d2r=o("electra"),c2r=o(" \u2014 "),XH=a("a"),f2r=o("TFElectraModel"),m2r=o(" (ELECTRA model)"),g2r=l(),v7=a("li"),uve=a("strong"),h2r=o("flaubert"),p2r=o(" \u2014 "),zH=a("a"),_2r=o("TFFlaubertModel"),u2r=o(" (FlauBERT model)"),b2r=l(),Hs=a("li"),bve=a("strong"),v2r=o("funnel"),F2r=o(" \u2014 "),QH=a("a"),T2r=o("TFFunnelModel"),M2r=o(" or "),WH=a("a"),E2r=o("TFFunnelBaseModel"),C2r=o(" (Funnel Transformer model)"),w2r=l(),F7=a("li"),vve=a("strong"),A2r=o("gpt2"),L2r=o(" \u2014 "),HH=a("a"),y2r=o("TFGPT2Model"),x2r=o(" (OpenAI GPT-2 model)"),$2r=l(),T7=a("li"),Fve=a("strong"),k2r=o("gptj"),S2r=o(" \u2014 "),UH=a("a"),R2r=o("TFGPTJModel"),P2r=o(" (GPT-J model)"),B2r=l(),M7=a("li"),Tve=a("strong"),I2r=o("hubert"),N2r=o(" \u2014 "),JH=a("a"),q2r=o("TFHubertModel"),j2r=o(" (Hubert model)"),D2r=l(),E7=a("li"),Mve=a("strong"),G2r=o("layoutlm"),O2r=o(" \u2014 "),YH=a("a"),V2r=o("TFLayoutLMModel"),X2r=o(" (LayoutLM model)"),z2r=l(),C7=a("li"),Eve=a("strong"),Q2r=o("led"),W2r=o(" \u2014 "),KH=a("a"),H2r=o("TFLEDModel"),U2r=o(" (LED model)"),J2r=l(),w7=a("li"),Cve=a("strong"),Y2r=o("longformer"),K2r=o(" \u2014 "),ZH=a("a"),Z2r=o("TFLongformerModel"),e4r=o(" (Longformer model)"),o4r=l(),A7=a("li"),wve=a("strong"),r4r=o("lxmert"),t4r=o(" \u2014 "),eU=a("a"),a4r=o("TFLxmertModel"),n4r=o(" (LXMERT model)"),s4r=l(),L7=a("li"),Ave=a("strong"),l4r=o("marian"),i4r=o(" \u2014 "),oU=a("a"),d4r=o("TFMarianModel"),c4r=o(" (Marian model)"),f4r=l(),y7=a("li"),Lve=a("strong"),m4r=o("mbart"),g4r=o(" \u2014 "),rU=a("a"),h4r=o("TFMBartModel"),p4r=o(" (mBART model)"),_4r=l(),x7=a("li"),yve=a("strong"),u4r=o("mobilebert"),b4r=o(" \u2014 "),tU=a("a"),v4r=o("TFMobileBertModel"),F4r=o(" (MobileBERT model)"),T4r=l(),$7=a("li"),xve=a("strong"),M4r=o("mpnet"),E4r=o(" \u2014 "),aU=a("a"),C4r=o("TFMPNetModel"),w4r=o(" (MPNet model)"),A4r=l(),k7=a("li"),$ve=a("strong"),L4r=o("mt5"),y4r=o(" \u2014 "),nU=a("a"),x4r=o("TFMT5Model"),$4r=o(" (MT5 model)"),k4r=l(),S7=a("li"),kve=a("strong"),S4r=o("openai-gpt"),R4r=o(" \u2014 "),sU=a("a"),P4r=o("TFOpenAIGPTModel"),B4r=o(" (OpenAI GPT model)"),I4r=l(),R7=a("li"),Sve=a("strong"),N4r=o("opt"),q4r=o(" \u2014 "),lU=a("a"),j4r=o("TFOPTModel"),D4r=o(" (OPT model)"),G4r=l(),P7=a("li"),Rve=a("strong"),O4r=o("pegasus"),V4r=o(" \u2014 "),iU=a("a"),X4r=o("TFPegasusModel"),z4r=o(" (Pegasus model)"),Q4r=l(),B7=a("li"),Pve=a("strong"),W4r=o("regnet"),H4r=o(" \u2014 "),dU=a("a"),U4r=o("TFRegNetModel"),J4r=o(" (RegNet model)"),Y4r=l(),I7=a("li"),Bve=a("strong"),K4r=o("rembert"),Z4r=o(" \u2014 "),cU=a("a"),ebr=o("TFRemBertModel"),obr=o(" (RemBERT model)"),rbr=l(),N7=a("li"),Ive=a("strong"),tbr=o("roberta"),abr=o(" \u2014 "),fU=a("a"),nbr=o("TFRobertaModel"),sbr=o(" (RoBERTa model)"),lbr=l(),q7=a("li"),Nve=a("strong"),ibr=o("roformer"),dbr=o(" \u2014 "),mU=a("a"),cbr=o("TFRoFormerModel"),fbr=o(" (RoFormer model)"),mbr=l(),j7=a("li"),qve=a("strong"),gbr=o("speech_to_text"),hbr=o(" \u2014 "),gU=a("a"),pbr=o("TFSpeech2TextModel"),_br=o(" (Speech2Text model)"),ubr=l(),D7=a("li"),jve=a("strong"),bbr=o("swin"),vbr=o(" \u2014 "),hU=a("a"),Fbr=o("TFSwinModel"),Tbr=o(" (Swin Transformer model)"),Mbr=l(),G7=a("li"),Dve=a("strong"),Ebr=o("t5"),Cbr=o(" \u2014 "),pU=a("a"),wbr=o("TFT5Model"),Abr=o(" (T5 model)"),Lbr=l(),O7=a("li"),Gve=a("strong"),ybr=o("tapas"),xbr=o(" \u2014 "),_U=a("a"),$br=o("TFTapasModel"),kbr=o(" (TAPAS model)"),Sbr=l(),V7=a("li"),Ove=a("strong"),Rbr=o("transfo-xl"),Pbr=o(" \u2014 "),uU=a("a"),Bbr=o("TFTransfoXLModel"),Ibr=o(" (Transformer-XL model)"),Nbr=l(),X7=a("li"),Vve=a("strong"),qbr=o("vit"),jbr=o(" \u2014 "),bU=a("a"),Dbr=o("TFViTModel"),Gbr=o(" (ViT model)"),Obr=l(),z7=a("li"),Xve=a("strong"),Vbr=o("vit_mae"),Xbr=o(" \u2014 "),vU=a("a"),zbr=o("TFViTMAEModel"),Qbr=o(" (ViTMAE model)"),Wbr=l(),Q7=a("li"),zve=a("strong"),Hbr=o("wav2vec2"),Ubr=o(" \u2014 "),FU=a("a"),Jbr=o("TFWav2Vec2Model"),Ybr=o(" (Wav2Vec2 model)"),Kbr=l(),W7=a("li"),Qve=a("strong"),Zbr=o("xlm"),evr=o(" \u2014 "),TU=a("a"),ovr=o("TFXLMModel"),rvr=o(" (XLM model)"),tvr=l(),H7=a("li"),Wve=a("strong"),avr=o("xlm-roberta"),nvr=o(" \u2014 "),MU=a("a"),svr=o("TFXLMRobertaModel"),lvr=o(" (XLM-RoBERTa model)"),ivr=l(),U7=a("li"),Hve=a("strong"),dvr=o("xlnet"),cvr=o(" \u2014 "),EU=a("a"),fvr=o("TFXLNetModel"),mvr=o(" (XLNet model)"),gvr=l(),F(J7.$$.fragment),DVe=l(),sc=a("h2"),Y7=a("a"),Uve=a("span"),F(k9.$$.fragment),hvr=l(),Jve=a("span"),pvr=o("TFAutoModelForPreTraining"),GVe=l(),or=a("div"),F(S9.$$.fragment),_vr=l(),lc=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CU=a("a"),bvr=o("from_pretrained()"),vvr=o(" class method or the "),wU=a("a"),Fvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),R9=a("p"),Evr=o("This class cannot be instantiated directly using "),Yve=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),St=a("div"),F(P9.$$.fragment),Lvr=l(),Kve=a("p"),yvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xvr=l(),ic=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),kvr=o("not"),Svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Bvr=l(),F(K7.$$.fragment),Ivr=l(),xr=a("div"),F(B9.$$.fragment),Nvr=l(),eFe=a("p"),qvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jvr=l(),sn=a("p"),Dvr=o("The model class to instantiate is selected based on the "),oFe=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),zvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Wvr=l(),se=a("ul"),Z7=a("li"),aFe=a("strong"),Hvr=o("albert"),Uvr=o(" \u2014 "),LU=a("a"),Jvr=o("TFAlbertForPreTraining"),Yvr=o(" (ALBERT model)"),Kvr=l(),eM=a("li"),nFe=a("strong"),Zvr=o("bart"),eFr=o(" \u2014 "),yU=a("a"),oFr=o("TFBartForConditionalGeneration"),rFr=o(" (BART model)"),tFr=l(),oM=a("li"),sFe=a("strong"),aFr=o("bert"),nFr=o(" \u2014 "),xU=a("a"),sFr=o("TFBertForPreTraining"),lFr=o(" (BERT model)"),iFr=l(),rM=a("li"),lFe=a("strong"),dFr=o("camembert"),cFr=o(" \u2014 "),$U=a("a"),fFr=o("TFCamembertForMaskedLM"),mFr=o(" (CamemBERT model)"),gFr=l(),tM=a("li"),iFe=a("strong"),hFr=o("ctrl"),pFr=o(" \u2014 "),kU=a("a"),_Fr=o("TFCTRLLMHeadModel"),uFr=o(" (CTRL model)"),bFr=l(),aM=a("li"),dFe=a("strong"),vFr=o("distilbert"),FFr=o(" \u2014 "),SU=a("a"),TFr=o("TFDistilBertForMaskedLM"),MFr=o(" (DistilBERT model)"),EFr=l(),nM=a("li"),cFe=a("strong"),CFr=o("electra"),wFr=o(" \u2014 "),RU=a("a"),AFr=o("TFElectraForPreTraining"),LFr=o(" (ELECTRA model)"),yFr=l(),sM=a("li"),fFe=a("strong"),xFr=o("flaubert"),$Fr=o(" \u2014 "),PU=a("a"),kFr=o("TFFlaubertWithLMHeadModel"),SFr=o(" (FlauBERT model)"),RFr=l(),lM=a("li"),mFe=a("strong"),PFr=o("funnel"),BFr=o(" \u2014 "),BU=a("a"),IFr=o("TFFunnelForPreTraining"),NFr=o(" (Funnel Transformer model)"),qFr=l(),iM=a("li"),gFe=a("strong"),jFr=o("gpt2"),DFr=o(" \u2014 "),IU=a("a"),GFr=o("TFGPT2LMHeadModel"),OFr=o(" (OpenAI GPT-2 model)"),VFr=l(),dM=a("li"),hFe=a("strong"),XFr=o("layoutlm"),zFr=o(" \u2014 "),NU=a("a"),QFr=o("TFLayoutLMForMaskedLM"),WFr=o(" (LayoutLM model)"),HFr=l(),cM=a("li"),pFe=a("strong"),UFr=o("lxmert"),JFr=o(" \u2014 "),qU=a("a"),YFr=o("TFLxmertForPreTraining"),KFr=o(" (LXMERT model)"),ZFr=l(),fM=a("li"),_Fe=a("strong"),eTr=o("mobilebert"),oTr=o(" \u2014 "),jU=a("a"),rTr=o("TFMobileBertForPreTraining"),tTr=o(" (MobileBERT model)"),aTr=l(),mM=a("li"),uFe=a("strong"),nTr=o("mpnet"),sTr=o(" \u2014 "),DU=a("a"),lTr=o("TFMPNetForMaskedLM"),iTr=o(" (MPNet model)"),dTr=l(),gM=a("li"),bFe=a("strong"),cTr=o("openai-gpt"),fTr=o(" \u2014 "),GU=a("a"),mTr=o("TFOpenAIGPTLMHeadModel"),gTr=o(" (OpenAI GPT model)"),hTr=l(),hM=a("li"),vFe=a("strong"),pTr=o("roberta"),_Tr=o(" \u2014 "),OU=a("a"),uTr=o("TFRobertaForMaskedLM"),bTr=o(" (RoBERTa model)"),vTr=l(),pM=a("li"),FFe=a("strong"),FTr=o("t5"),TTr=o(" \u2014 "),VU=a("a"),MTr=o("TFT5ForConditionalGeneration"),ETr=o(" (T5 model)"),CTr=l(),_M=a("li"),TFe=a("strong"),wTr=o("tapas"),ATr=o(" \u2014 "),XU=a("a"),LTr=o("TFTapasForMaskedLM"),yTr=o(" (TAPAS model)"),xTr=l(),uM=a("li"),MFe=a("strong"),$Tr=o("transfo-xl"),kTr=o(" \u2014 "),zU=a("a"),STr=o("TFTransfoXLLMHeadModel"),RTr=o(" (Transformer-XL model)"),PTr=l(),bM=a("li"),EFe=a("strong"),BTr=o("vit_mae"),ITr=o(" \u2014 "),QU=a("a"),NTr=o("TFViTMAEForPreTraining"),qTr=o(" (ViTMAE model)"),jTr=l(),vM=a("li"),CFe=a("strong"),DTr=o("xlm"),GTr=o(" \u2014 "),WU=a("a"),OTr=o("TFXLMWithLMHeadModel"),VTr=o(" (XLM model)"),XTr=l(),FM=a("li"),wFe=a("strong"),zTr=o("xlm-roberta"),QTr=o(" \u2014 "),HU=a("a"),WTr=o("TFXLMRobertaForMaskedLM"),HTr=o(" (XLM-RoBERTa model)"),UTr=l(),TM=a("li"),AFe=a("strong"),JTr=o("xlnet"),YTr=o(" \u2014 "),UU=a("a"),KTr=o("TFXLNetLMHeadModel"),ZTr=o(" (XLNet model)"),e7r=l(),F(MM.$$.fragment),OVe=l(),dc=a("h2"),EM=a("a"),LFe=a("span"),F(I9.$$.fragment),o7r=l(),yFe=a("span"),r7r=o("TFAutoModelForCausalLM"),VVe=l(),rr=a("div"),F(N9.$$.fragment),t7r=l(),cc=a("p"),a7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=a("a"),n7r=o("from_pretrained()"),s7r=o(" class method or the "),YU=a("a"),l7r=o("from_config()"),i7r=o(` class
method.`),d7r=l(),q9=a("p"),c7r=o("This class cannot be instantiated directly using "),xFe=a("code"),f7r=o("__init__()"),m7r=o(" (throws an error)."),g7r=l(),Rt=a("div"),F(j9.$$.fragment),h7r=l(),$Fe=a("p"),p7r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_7r=l(),fc=a("p"),u7r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),b7r=o("not"),v7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),F7r=o("from_pretrained()"),T7r=o(" to load the model weights."),M7r=l(),F(CM.$$.fragment),E7r=l(),$r=a("div"),F(D9.$$.fragment),C7r=l(),SFe=a("p"),w7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A7r=l(),ln=a("p"),L7r=o("The model class to instantiate is selected based on the "),RFe=a("code"),y7r=o("model_type"),x7r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),$7r=o("pretrained_model_name_or_path"),k7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),S7r=o("pretrained_model_name_or_path"),R7r=o(":"),P7r=l(),Me=a("ul"),wM=a("li"),IFe=a("strong"),B7r=o("bert"),I7r=o(" \u2014 "),ZU=a("a"),N7r=o("TFBertLMHeadModel"),q7r=o(" (BERT model)"),j7r=l(),AM=a("li"),NFe=a("strong"),D7r=o("camembert"),G7r=o(" \u2014 "),eJ=a("a"),O7r=o("TFCamembertForCausalLM"),V7r=o(" (CamemBERT model)"),X7r=l(),LM=a("li"),qFe=a("strong"),z7r=o("ctrl"),Q7r=o(" \u2014 "),oJ=a("a"),W7r=o("TFCTRLLMHeadModel"),H7r=o(" (CTRL model)"),U7r=l(),yM=a("li"),jFe=a("strong"),J7r=o("gpt2"),Y7r=o(" \u2014 "),rJ=a("a"),K7r=o("TFGPT2LMHeadModel"),Z7r=o(" (OpenAI GPT-2 model)"),eMr=l(),xM=a("li"),DFe=a("strong"),oMr=o("gptj"),rMr=o(" \u2014 "),tJ=a("a"),tMr=o("TFGPTJForCausalLM"),aMr=o(" (GPT-J model)"),nMr=l(),$M=a("li"),GFe=a("strong"),sMr=o("openai-gpt"),lMr=o(" \u2014 "),aJ=a("a"),iMr=o("TFOpenAIGPTLMHeadModel"),dMr=o(" (OpenAI GPT model)"),cMr=l(),kM=a("li"),OFe=a("strong"),fMr=o("opt"),mMr=o(" \u2014 "),nJ=a("a"),gMr=o("TFOPTForCausalLM"),hMr=o(" (OPT model)"),pMr=l(),SM=a("li"),VFe=a("strong"),_Mr=o("rembert"),uMr=o(" \u2014 "),sJ=a("a"),bMr=o("TFRemBertForCausalLM"),vMr=o(" (RemBERT model)"),FMr=l(),RM=a("li"),XFe=a("strong"),TMr=o("roberta"),MMr=o(" \u2014 "),lJ=a("a"),EMr=o("TFRobertaForCausalLM"),CMr=o(" (RoBERTa model)"),wMr=l(),PM=a("li"),zFe=a("strong"),AMr=o("roformer"),LMr=o(" \u2014 "),iJ=a("a"),yMr=o("TFRoFormerForCausalLM"),xMr=o(" (RoFormer model)"),$Mr=l(),BM=a("li"),QFe=a("strong"),kMr=o("transfo-xl"),SMr=o(" \u2014 "),dJ=a("a"),RMr=o("TFTransfoXLLMHeadModel"),PMr=o(" (Transformer-XL model)"),BMr=l(),IM=a("li"),WFe=a("strong"),IMr=o("xlm"),NMr=o(" \u2014 "),cJ=a("a"),qMr=o("TFXLMWithLMHeadModel"),jMr=o(" (XLM model)"),DMr=l(),NM=a("li"),HFe=a("strong"),GMr=o("xlnet"),OMr=o(" \u2014 "),fJ=a("a"),VMr=o("TFXLNetLMHeadModel"),XMr=o(" (XLNet model)"),zMr=l(),F(qM.$$.fragment),XVe=l(),mc=a("h2"),jM=a("a"),UFe=a("span"),F(G9.$$.fragment),QMr=l(),JFe=a("span"),WMr=o("TFAutoModelForImageClassification"),zVe=l(),tr=a("div"),F(O9.$$.fragment),HMr=l(),gc=a("p"),UMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mJ=a("a"),JMr=o("from_pretrained()"),YMr=o(" class method or the "),gJ=a("a"),KMr=o("from_config()"),ZMr=o(` class
method.`),eEr=l(),V9=a("p"),oEr=o("This class cannot be instantiated directly using "),YFe=a("code"),rEr=o("__init__()"),tEr=o(" (throws an error)."),aEr=l(),Pt=a("div"),F(X9.$$.fragment),nEr=l(),KFe=a("p"),sEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lEr=l(),hc=a("p"),iEr=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),dEr=o("not"),cEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),fEr=o("from_pretrained()"),mEr=o(" to load the model weights."),gEr=l(),F(DM.$$.fragment),hEr=l(),kr=a("div"),F(z9.$$.fragment),pEr=l(),eTe=a("p"),_Er=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uEr=l(),dn=a("p"),bEr=o("The model class to instantiate is selected based on the "),oTe=a("code"),vEr=o("model_type"),FEr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(":"),wEr=l(),rt=a("ul"),GM=a("li"),aTe=a("strong"),AEr=o("convnext"),LEr=o(" \u2014 "),pJ=a("a"),yEr=o("TFConvNextForImageClassification"),xEr=o(" (ConvNeXT model)"),$Er=l(),OM=a("li"),nTe=a("strong"),kEr=o("data2vec-vision"),SEr=o(" \u2014 "),_J=a("a"),REr=o("TFData2VecVisionForImageClassification"),PEr=o(" (Data2VecVision model)"),BEr=l(),VM=a("li"),sTe=a("strong"),IEr=o("regnet"),NEr=o(" \u2014 "),uJ=a("a"),qEr=o("TFRegNetForImageClassification"),jEr=o(" (RegNet model)"),DEr=l(),XM=a("li"),lTe=a("strong"),GEr=o("swin"),OEr=o(" \u2014 "),bJ=a("a"),VEr=o("TFSwinForImageClassification"),XEr=o(" (Swin Transformer model)"),zEr=l(),zM=a("li"),iTe=a("strong"),QEr=o("vit"),WEr=o(" \u2014 "),vJ=a("a"),HEr=o("TFViTForImageClassification"),UEr=o(" (ViT model)"),JEr=l(),F(QM.$$.fragment),QVe=l(),pc=a("h2"),WM=a("a"),dTe=a("span"),F(Q9.$$.fragment),YEr=l(),cTe=a("span"),KEr=o("TFAutoModelForMaskedLM"),WVe=l(),ar=a("div"),F(W9.$$.fragment),ZEr=l(),_c=a("p"),eCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=a("a"),oCr=o("from_pretrained()"),rCr=o(" class method or the "),TJ=a("a"),tCr=o("from_config()"),aCr=o(` class
method.`),nCr=l(),H9=a("p"),sCr=o("This class cannot be instantiated directly using "),fTe=a("code"),lCr=o("__init__()"),iCr=o(" (throws an error)."),dCr=l(),Bt=a("div"),F(U9.$$.fragment),cCr=l(),mTe=a("p"),fCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mCr=l(),uc=a("p"),gCr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),hCr=o("not"),pCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),_Cr=o("from_pretrained()"),uCr=o(" to load the model weights."),bCr=l(),F(HM.$$.fragment),vCr=l(),Sr=a("div"),F(J9.$$.fragment),FCr=l(),hTe=a("p"),TCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MCr=l(),cn=a("p"),ECr=o("The model class to instantiate is selected based on the "),pTe=a("code"),CCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),ACr=o("pretrained_model_name_or_path"),LCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),yCr=o("pretrained_model_name_or_path"),xCr=o(":"),$Cr=l(),ie=a("ul"),UM=a("li"),bTe=a("strong"),kCr=o("albert"),SCr=o(" \u2014 "),EJ=a("a"),RCr=o("TFAlbertForMaskedLM"),PCr=o(" (ALBERT model)"),BCr=l(),JM=a("li"),vTe=a("strong"),ICr=o("bert"),NCr=o(" \u2014 "),CJ=a("a"),qCr=o("TFBertForMaskedLM"),jCr=o(" (BERT model)"),DCr=l(),YM=a("li"),FTe=a("strong"),GCr=o("camembert"),OCr=o(" \u2014 "),wJ=a("a"),VCr=o("TFCamembertForMaskedLM"),XCr=o(" (CamemBERT model)"),zCr=l(),KM=a("li"),TTe=a("strong"),QCr=o("convbert"),WCr=o(" \u2014 "),AJ=a("a"),HCr=o("TFConvBertForMaskedLM"),UCr=o(" (ConvBERT model)"),JCr=l(),ZM=a("li"),MTe=a("strong"),YCr=o("deberta"),KCr=o(" \u2014 "),LJ=a("a"),ZCr=o("TFDebertaForMaskedLM"),e3r=o(" (DeBERTa model)"),o3r=l(),eE=a("li"),ETe=a("strong"),r3r=o("deberta-v2"),t3r=o(" \u2014 "),yJ=a("a"),a3r=o("TFDebertaV2ForMaskedLM"),n3r=o(" (DeBERTa-v2 model)"),s3r=l(),oE=a("li"),CTe=a("strong"),l3r=o("distilbert"),i3r=o(" \u2014 "),xJ=a("a"),d3r=o("TFDistilBertForMaskedLM"),c3r=o(" (DistilBERT model)"),f3r=l(),rE=a("li"),wTe=a("strong"),m3r=o("electra"),g3r=o(" \u2014 "),$J=a("a"),h3r=o("TFElectraForMaskedLM"),p3r=o(" (ELECTRA model)"),_3r=l(),tE=a("li"),ATe=a("strong"),u3r=o("flaubert"),b3r=o(" \u2014 "),kJ=a("a"),v3r=o("TFFlaubertWithLMHeadModel"),F3r=o(" (FlauBERT model)"),T3r=l(),aE=a("li"),LTe=a("strong"),M3r=o("funnel"),E3r=o(" \u2014 "),SJ=a("a"),C3r=o("TFFunnelForMaskedLM"),w3r=o(" (Funnel Transformer model)"),A3r=l(),nE=a("li"),yTe=a("strong"),L3r=o("layoutlm"),y3r=o(" \u2014 "),RJ=a("a"),x3r=o("TFLayoutLMForMaskedLM"),$3r=o(" (LayoutLM model)"),k3r=l(),sE=a("li"),xTe=a("strong"),S3r=o("longformer"),R3r=o(" \u2014 "),PJ=a("a"),P3r=o("TFLongformerForMaskedLM"),B3r=o(" (Longformer model)"),I3r=l(),lE=a("li"),$Te=a("strong"),N3r=o("mobilebert"),q3r=o(" \u2014 "),BJ=a("a"),j3r=o("TFMobileBertForMaskedLM"),D3r=o(" (MobileBERT model)"),G3r=l(),iE=a("li"),kTe=a("strong"),O3r=o("mpnet"),V3r=o(" \u2014 "),IJ=a("a"),X3r=o("TFMPNetForMaskedLM"),z3r=o(" (MPNet model)"),Q3r=l(),dE=a("li"),STe=a("strong"),W3r=o("rembert"),H3r=o(" \u2014 "),NJ=a("a"),U3r=o("TFRemBertForMaskedLM"),J3r=o(" (RemBERT model)"),Y3r=l(),cE=a("li"),RTe=a("strong"),K3r=o("roberta"),Z3r=o(" \u2014 "),qJ=a("a"),e0r=o("TFRobertaForMaskedLM"),o0r=o(" (RoBERTa model)"),r0r=l(),fE=a("li"),PTe=a("strong"),t0r=o("roformer"),a0r=o(" \u2014 "),jJ=a("a"),n0r=o("TFRoFormerForMaskedLM"),s0r=o(" (RoFormer model)"),l0r=l(),mE=a("li"),BTe=a("strong"),i0r=o("tapas"),d0r=o(" \u2014 "),DJ=a("a"),c0r=o("TFTapasForMaskedLM"),f0r=o(" (TAPAS model)"),m0r=l(),gE=a("li"),ITe=a("strong"),g0r=o("xlm"),h0r=o(" \u2014 "),GJ=a("a"),p0r=o("TFXLMWithLMHeadModel"),_0r=o(" (XLM model)"),u0r=l(),hE=a("li"),NTe=a("strong"),b0r=o("xlm-roberta"),v0r=o(" \u2014 "),OJ=a("a"),F0r=o("TFXLMRobertaForMaskedLM"),T0r=o(" (XLM-RoBERTa model)"),M0r=l(),F(pE.$$.fragment),HVe=l(),bc=a("h2"),_E=a("a"),qTe=a("span"),F(Y9.$$.fragment),E0r=l(),jTe=a("span"),C0r=o("TFAutoModelForSeq2SeqLM"),UVe=l(),nr=a("div"),F(K9.$$.fragment),w0r=l(),vc=a("p"),A0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=a("a"),L0r=o("from_pretrained()"),y0r=o(" class method or the "),XJ=a("a"),x0r=o("from_config()"),$0r=o(` class
method.`),k0r=l(),Z9=a("p"),S0r=o("This class cannot be instantiated directly using "),DTe=a("code"),R0r=o("__init__()"),P0r=o(" (throws an error)."),B0r=l(),It=a("div"),F(ex.$$.fragment),I0r=l(),GTe=a("p"),N0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q0r=l(),Fc=a("p"),j0r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),D0r=o("not"),G0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),O0r=o("from_pretrained()"),V0r=o(" to load the model weights."),X0r=l(),F(uE.$$.fragment),z0r=l(),Rr=a("div"),F(ox.$$.fragment),Q0r=l(),VTe=a("p"),W0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H0r=l(),fn=a("p"),U0r=o("The model class to instantiate is selected based on the "),XTe=a("code"),J0r=o("model_type"),Y0r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(":"),rwr=l(),ye=a("ul"),bE=a("li"),WTe=a("strong"),twr=o("bart"),awr=o(" \u2014 "),QJ=a("a"),nwr=o("TFBartForConditionalGeneration"),swr=o(" (BART model)"),lwr=l(),vE=a("li"),HTe=a("strong"),iwr=o("blenderbot"),dwr=o(" \u2014 "),WJ=a("a"),cwr=o("TFBlenderbotForConditionalGeneration"),fwr=o(" (Blenderbot model)"),mwr=l(),FE=a("li"),UTe=a("strong"),gwr=o("blenderbot-small"),hwr=o(" \u2014 "),HJ=a("a"),pwr=o("TFBlenderbotSmallForConditionalGeneration"),_wr=o(" (BlenderbotSmall model)"),uwr=l(),TE=a("li"),JTe=a("strong"),bwr=o("encoder-decoder"),vwr=o(" \u2014 "),UJ=a("a"),Fwr=o("TFEncoderDecoderModel"),Twr=o(" (Encoder decoder model)"),Mwr=l(),ME=a("li"),YTe=a("strong"),Ewr=o("led"),Cwr=o(" \u2014 "),JJ=a("a"),wwr=o("TFLEDForConditionalGeneration"),Awr=o(" (LED model)"),Lwr=l(),EE=a("li"),KTe=a("strong"),ywr=o("marian"),xwr=o(" \u2014 "),YJ=a("a"),$wr=o("TFMarianMTModel"),kwr=o(" (Marian model)"),Swr=l(),CE=a("li"),ZTe=a("strong"),Rwr=o("mbart"),Pwr=o(" \u2014 "),KJ=a("a"),Bwr=o("TFMBartForConditionalGeneration"),Iwr=o(" (mBART model)"),Nwr=l(),wE=a("li"),e7e=a("strong"),qwr=o("mt5"),jwr=o(" \u2014 "),ZJ=a("a"),Dwr=o("TFMT5ForConditionalGeneration"),Gwr=o(" (MT5 model)"),Owr=l(),AE=a("li"),o7e=a("strong"),Vwr=o("pegasus"),Xwr=o(" \u2014 "),eY=a("a"),zwr=o("TFPegasusForConditionalGeneration"),Qwr=o(" (Pegasus model)"),Wwr=l(),LE=a("li"),r7e=a("strong"),Hwr=o("t5"),Uwr=o(" \u2014 "),oY=a("a"),Jwr=o("TFT5ForConditionalGeneration"),Ywr=o(" (T5 model)"),Kwr=l(),F(yE.$$.fragment),JVe=l(),Tc=a("h2"),xE=a("a"),t7e=a("span"),F(rx.$$.fragment),Zwr=l(),a7e=a("span"),eAr=o("TFAutoModelForSequenceClassification"),YVe=l(),sr=a("div"),F(tx.$$.fragment),oAr=l(),Mc=a("p"),rAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=a("a"),tAr=o("from_pretrained()"),aAr=o(" class method or the "),tY=a("a"),nAr=o("from_config()"),sAr=o(` class
method.`),lAr=l(),ax=a("p"),iAr=o("This class cannot be instantiated directly using "),n7e=a("code"),dAr=o("__init__()"),cAr=o(" (throws an error)."),fAr=l(),Nt=a("div"),F(nx.$$.fragment),mAr=l(),s7e=a("p"),gAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hAr=l(),Ec=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),_Ar=o("not"),uAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),bAr=o("from_pretrained()"),vAr=o(" to load the model weights."),FAr=l(),F($E.$$.fragment),TAr=l(),Pr=a("div"),F(sx.$$.fragment),MAr=l(),i7e=a("p"),EAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CAr=l(),mn=a("p"),wAr=o("The model class to instantiate is selected based on the "),d7e=a("code"),AAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),yAr=o("pretrained_model_name_or_path"),xAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(":"),SAr=l(),te=a("ul"),kE=a("li"),m7e=a("strong"),RAr=o("albert"),PAr=o(" \u2014 "),nY=a("a"),BAr=o("TFAlbertForSequenceClassification"),IAr=o(" (ALBERT model)"),NAr=l(),SE=a("li"),g7e=a("strong"),qAr=o("bert"),jAr=o(" \u2014 "),sY=a("a"),DAr=o("TFBertForSequenceClassification"),GAr=o(" (BERT model)"),OAr=l(),RE=a("li"),h7e=a("strong"),VAr=o("camembert"),XAr=o(" \u2014 "),lY=a("a"),zAr=o("TFCamembertForSequenceClassification"),QAr=o(" (CamemBERT model)"),WAr=l(),PE=a("li"),p7e=a("strong"),HAr=o("convbert"),UAr=o(" \u2014 "),iY=a("a"),JAr=o("TFConvBertForSequenceClassification"),YAr=o(" (ConvBERT model)"),KAr=l(),BE=a("li"),_7e=a("strong"),ZAr=o("ctrl"),e6r=o(" \u2014 "),dY=a("a"),o6r=o("TFCTRLForSequenceClassification"),r6r=o(" (CTRL model)"),t6r=l(),IE=a("li"),u7e=a("strong"),a6r=o("deberta"),n6r=o(" \u2014 "),cY=a("a"),s6r=o("TFDebertaForSequenceClassification"),l6r=o(" (DeBERTa model)"),i6r=l(),NE=a("li"),b7e=a("strong"),d6r=o("deberta-v2"),c6r=o(" \u2014 "),fY=a("a"),f6r=o("TFDebertaV2ForSequenceClassification"),m6r=o(" (DeBERTa-v2 model)"),g6r=l(),qE=a("li"),v7e=a("strong"),h6r=o("distilbert"),p6r=o(" \u2014 "),mY=a("a"),_6r=o("TFDistilBertForSequenceClassification"),u6r=o(" (DistilBERT model)"),b6r=l(),jE=a("li"),F7e=a("strong"),v6r=o("electra"),F6r=o(" \u2014 "),gY=a("a"),T6r=o("TFElectraForSequenceClassification"),M6r=o(" (ELECTRA model)"),E6r=l(),DE=a("li"),T7e=a("strong"),C6r=o("flaubert"),w6r=o(" \u2014 "),hY=a("a"),A6r=o("TFFlaubertForSequenceClassification"),L6r=o(" (FlauBERT model)"),y6r=l(),GE=a("li"),M7e=a("strong"),x6r=o("funnel"),$6r=o(" \u2014 "),pY=a("a"),k6r=o("TFFunnelForSequenceClassification"),S6r=o(" (Funnel Transformer model)"),R6r=l(),OE=a("li"),E7e=a("strong"),P6r=o("gpt2"),B6r=o(" \u2014 "),_Y=a("a"),I6r=o("TFGPT2ForSequenceClassification"),N6r=o(" (OpenAI GPT-2 model)"),q6r=l(),VE=a("li"),C7e=a("strong"),j6r=o("gptj"),D6r=o(" \u2014 "),uY=a("a"),G6r=o("TFGPTJForSequenceClassification"),O6r=o(" (GPT-J model)"),V6r=l(),XE=a("li"),w7e=a("strong"),X6r=o("layoutlm"),z6r=o(" \u2014 "),bY=a("a"),Q6r=o("TFLayoutLMForSequenceClassification"),W6r=o(" (LayoutLM model)"),H6r=l(),zE=a("li"),A7e=a("strong"),U6r=o("longformer"),J6r=o(" \u2014 "),vY=a("a"),Y6r=o("TFLongformerForSequenceClassification"),K6r=o(" (Longformer model)"),Z6r=l(),QE=a("li"),L7e=a("strong"),eLr=o("mobilebert"),oLr=o(" \u2014 "),FY=a("a"),rLr=o("TFMobileBertForSequenceClassification"),tLr=o(" (MobileBERT model)"),aLr=l(),WE=a("li"),y7e=a("strong"),nLr=o("mpnet"),sLr=o(" \u2014 "),TY=a("a"),lLr=o("TFMPNetForSequenceClassification"),iLr=o(" (MPNet model)"),dLr=l(),HE=a("li"),x7e=a("strong"),cLr=o("openai-gpt"),fLr=o(" \u2014 "),MY=a("a"),mLr=o("TFOpenAIGPTForSequenceClassification"),gLr=o(" (OpenAI GPT model)"),hLr=l(),UE=a("li"),$7e=a("strong"),pLr=o("rembert"),_Lr=o(" \u2014 "),EY=a("a"),uLr=o("TFRemBertForSequenceClassification"),bLr=o(" (RemBERT model)"),vLr=l(),JE=a("li"),k7e=a("strong"),FLr=o("roberta"),TLr=o(" \u2014 "),CY=a("a"),MLr=o("TFRobertaForSequenceClassification"),ELr=o(" (RoBERTa model)"),CLr=l(),YE=a("li"),S7e=a("strong"),wLr=o("roformer"),ALr=o(" \u2014 "),wY=a("a"),LLr=o("TFRoFormerForSequenceClassification"),yLr=o(" (RoFormer model)"),xLr=l(),KE=a("li"),R7e=a("strong"),$Lr=o("tapas"),kLr=o(" \u2014 "),AY=a("a"),SLr=o("TFTapasForSequenceClassification"),RLr=o(" (TAPAS model)"),PLr=l(),ZE=a("li"),P7e=a("strong"),BLr=o("transfo-xl"),ILr=o(" \u2014 "),LY=a("a"),NLr=o("TFTransfoXLForSequenceClassification"),qLr=o(" (Transformer-XL model)"),jLr=l(),eC=a("li"),B7e=a("strong"),DLr=o("xlm"),GLr=o(" \u2014 "),yY=a("a"),OLr=o("TFXLMForSequenceClassification"),VLr=o(" (XLM model)"),XLr=l(),oC=a("li"),I7e=a("strong"),zLr=o("xlm-roberta"),QLr=o(" \u2014 "),xY=a("a"),WLr=o("TFXLMRobertaForSequenceClassification"),HLr=o(" (XLM-RoBERTa model)"),ULr=l(),rC=a("li"),N7e=a("strong"),JLr=o("xlnet"),YLr=o(" \u2014 "),$Y=a("a"),KLr=o("TFXLNetForSequenceClassification"),ZLr=o(" (XLNet model)"),eyr=l(),F(tC.$$.fragment),KVe=l(),Cc=a("h2"),aC=a("a"),q7e=a("span"),F(lx.$$.fragment),oyr=l(),j7e=a("span"),ryr=o("TFAutoModelForMultipleChoice"),ZVe=l(),lr=a("div"),F(ix.$$.fragment),tyr=l(),wc=a("p"),ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=a("a"),nyr=o("from_pretrained()"),syr=o(" class method or the "),SY=a("a"),lyr=o("from_config()"),iyr=o(` class
method.`),dyr=l(),dx=a("p"),cyr=o("This class cannot be instantiated directly using "),D7e=a("code"),fyr=o("__init__()"),myr=o(" (throws an error)."),gyr=l(),qt=a("div"),F(cx.$$.fragment),hyr=l(),G7e=a("p"),pyr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_yr=l(),Ac=a("p"),uyr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),byr=o("not"),vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Fyr=o("from_pretrained()"),Tyr=o(" to load the model weights."),Myr=l(),F(nC.$$.fragment),Eyr=l(),Br=a("div"),F(fx.$$.fragment),Cyr=l(),V7e=a("p"),wyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ayr=l(),gn=a("p"),Lyr=o("The model class to instantiate is selected based on the "),X7e=a("code"),yyr=o("model_type"),xyr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),$yr=o("pretrained_model_name_or_path"),kyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(":"),Pyr=l(),_e=a("ul"),sC=a("li"),W7e=a("strong"),Byr=o("albert"),Iyr=o(" \u2014 "),PY=a("a"),Nyr=o("TFAlbertForMultipleChoice"),qyr=o(" (ALBERT model)"),jyr=l(),lC=a("li"),H7e=a("strong"),Dyr=o("bert"),Gyr=o(" \u2014 "),BY=a("a"),Oyr=o("TFBertForMultipleChoice"),Vyr=o(" (BERT model)"),Xyr=l(),iC=a("li"),U7e=a("strong"),zyr=o("camembert"),Qyr=o(" \u2014 "),IY=a("a"),Wyr=o("TFCamembertForMultipleChoice"),Hyr=o(" (CamemBERT model)"),Uyr=l(),dC=a("li"),J7e=a("strong"),Jyr=o("convbert"),Yyr=o(" \u2014 "),NY=a("a"),Kyr=o("TFConvBertForMultipleChoice"),Zyr=o(" (ConvBERT model)"),e8r=l(),cC=a("li"),Y7e=a("strong"),o8r=o("distilbert"),r8r=o(" \u2014 "),qY=a("a"),t8r=o("TFDistilBertForMultipleChoice"),a8r=o(" (DistilBERT model)"),n8r=l(),fC=a("li"),K7e=a("strong"),s8r=o("electra"),l8r=o(" \u2014 "),jY=a("a"),i8r=o("TFElectraForMultipleChoice"),d8r=o(" (ELECTRA model)"),c8r=l(),mC=a("li"),Z7e=a("strong"),f8r=o("flaubert"),m8r=o(" \u2014 "),DY=a("a"),g8r=o("TFFlaubertForMultipleChoice"),h8r=o(" (FlauBERT model)"),p8r=l(),gC=a("li"),eMe=a("strong"),_8r=o("funnel"),u8r=o(" \u2014 "),GY=a("a"),b8r=o("TFFunnelForMultipleChoice"),v8r=o(" (Funnel Transformer model)"),F8r=l(),hC=a("li"),oMe=a("strong"),T8r=o("longformer"),M8r=o(" \u2014 "),OY=a("a"),E8r=o("TFLongformerForMultipleChoice"),C8r=o(" (Longformer model)"),w8r=l(),pC=a("li"),rMe=a("strong"),A8r=o("mobilebert"),L8r=o(" \u2014 "),VY=a("a"),y8r=o("TFMobileBertForMultipleChoice"),x8r=o(" (MobileBERT model)"),$8r=l(),_C=a("li"),tMe=a("strong"),k8r=o("mpnet"),S8r=o(" \u2014 "),XY=a("a"),R8r=o("TFMPNetForMultipleChoice"),P8r=o(" (MPNet model)"),B8r=l(),uC=a("li"),aMe=a("strong"),I8r=o("rembert"),N8r=o(" \u2014 "),zY=a("a"),q8r=o("TFRemBertForMultipleChoice"),j8r=o(" (RemBERT model)"),D8r=l(),bC=a("li"),nMe=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),QY=a("a"),V8r=o("TFRobertaForMultipleChoice"),X8r=o(" (RoBERTa model)"),z8r=l(),vC=a("li"),sMe=a("strong"),Q8r=o("roformer"),W8r=o(" \u2014 "),WY=a("a"),H8r=o("TFRoFormerForMultipleChoice"),U8r=o(" (RoFormer model)"),J8r=l(),FC=a("li"),lMe=a("strong"),Y8r=o("xlm"),K8r=o(" \u2014 "),HY=a("a"),Z8r=o("TFXLMForMultipleChoice"),e9r=o(" (XLM model)"),o9r=l(),TC=a("li"),iMe=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),UY=a("a"),a9r=o("TFXLMRobertaForMultipleChoice"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),MC=a("li"),dMe=a("strong"),l9r=o("xlnet"),i9r=o(" \u2014 "),JY=a("a"),d9r=o("TFXLNetForMultipleChoice"),c9r=o(" (XLNet model)"),f9r=l(),F(EC.$$.fragment),eXe=l(),Lc=a("h2"),CC=a("a"),cMe=a("span"),F(mx.$$.fragment),m9r=l(),fMe=a("span"),g9r=o("TFAutoModelForNextSentencePrediction"),oXe=l(),ir=a("div"),F(gx.$$.fragment),h9r=l(),yc=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=a("a"),_9r=o("from_pretrained()"),u9r=o(" class method or the "),KY=a("a"),b9r=o("from_config()"),v9r=o(` class
method.`),F9r=l(),hx=a("p"),T9r=o("This class cannot be instantiated directly using "),mMe=a("code"),M9r=o("__init__()"),E9r=o(" (throws an error)."),C9r=l(),jt=a("div"),F(px.$$.fragment),w9r=l(),gMe=a("p"),A9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L9r=l(),xc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),x9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),k9r=o("from_pretrained()"),S9r=o(" to load the model weights."),R9r=l(),F(wC.$$.fragment),P9r=l(),Ir=a("div"),F(_x.$$.fragment),B9r=l(),pMe=a("p"),I9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N9r=l(),hn=a("p"),q9r=o("The model class to instantiate is selected based on the "),_Me=a("code"),j9r=o("model_type"),D9r=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(":"),z9r=l(),ux=a("ul"),AC=a("li"),vMe=a("strong"),Q9r=o("bert"),W9r=o(" \u2014 "),eK=a("a"),H9r=o("TFBertForNextSentencePrediction"),U9r=o(" (BERT model)"),J9r=l(),LC=a("li"),FMe=a("strong"),Y9r=o("mobilebert"),K9r=o(" \u2014 "),oK=a("a"),Z9r=o("TFMobileBertForNextSentencePrediction"),exr=o(" (MobileBERT model)"),oxr=l(),F(yC.$$.fragment),rXe=l(),$c=a("h2"),xC=a("a"),TMe=a("span"),F(bx.$$.fragment),rxr=l(),MMe=a("span"),txr=o("TFAutoModelForTableQuestionAnswering"),tXe=l(),dr=a("div"),F(vx.$$.fragment),axr=l(),kc=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rK=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),tK=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),Fx=a("p"),fxr=o("This class cannot be instantiated directly using "),EMe=a("code"),mxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),Dt=a("div"),F(Tx.$$.fragment),pxr=l(),CMe=a("p"),_xr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uxr=l(),Sc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),vxr=o("not"),Fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),F($C.$$.fragment),Cxr=l(),Nr=a("div"),F(Mx.$$.fragment),wxr=l(),AMe=a("p"),Axr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lxr=l(),pn=a("p"),yxr=o("The model class to instantiate is selected based on the "),LMe=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(":"),Bxr=l(),$Me=a("ul"),kC=a("li"),kMe=a("strong"),Ixr=o("tapas"),Nxr=o(" \u2014 "),nK=a("a"),qxr=o("TFTapasForQuestionAnswering"),jxr=o(" (TAPAS model)"),Dxr=l(),F(SC.$$.fragment),aXe=l(),Rc=a("h2"),RC=a("a"),SMe=a("span"),F(Ex.$$.fragment),Gxr=l(),RMe=a("span"),Oxr=o("TFAutoModelForTokenClassification"),nXe=l(),cr=a("div"),F(Cx.$$.fragment),Vxr=l(),Pc=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sK=a("a"),zxr=o("from_pretrained()"),Qxr=o(" class method or the "),lK=a("a"),Wxr=o("from_config()"),Hxr=o(` class
method.`),Uxr=l(),wx=a("p"),Jxr=o("This class cannot be instantiated directly using "),PMe=a("code"),Yxr=o("__init__()"),Kxr=o(" (throws an error)."),Zxr=l(),Gt=a("div"),F(Ax.$$.fragment),e$r=l(),BMe=a("p"),o$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r$r=l(),Bc=a("p"),t$r=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),a$r=o("not"),n$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),s$r=o("from_pretrained()"),l$r=o(" to load the model weights."),i$r=l(),F(PC.$$.fragment),d$r=l(),qr=a("div"),F(Lx.$$.fragment),c$r=l(),NMe=a("p"),f$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),m$r=l(),_n=a("p"),g$r=o("The model class to instantiate is selected based on the "),qMe=a("code"),h$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),_$r=o("pretrained_model_name_or_path"),u$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(":"),F$r=l(),de=a("ul"),BC=a("li"),GMe=a("strong"),T$r=o("albert"),M$r=o(" \u2014 "),dK=a("a"),E$r=o("TFAlbertForTokenClassification"),C$r=o(" (ALBERT model)"),w$r=l(),IC=a("li"),OMe=a("strong"),A$r=o("bert"),L$r=o(" \u2014 "),cK=a("a"),y$r=o("TFBertForTokenClassification"),x$r=o(" (BERT model)"),$$r=l(),NC=a("li"),VMe=a("strong"),k$r=o("camembert"),S$r=o(" \u2014 "),fK=a("a"),R$r=o("TFCamembertForTokenClassification"),P$r=o(" (CamemBERT model)"),B$r=l(),qC=a("li"),XMe=a("strong"),I$r=o("convbert"),N$r=o(" \u2014 "),mK=a("a"),q$r=o("TFConvBertForTokenClassification"),j$r=o(" (ConvBERT model)"),D$r=l(),jC=a("li"),zMe=a("strong"),G$r=o("deberta"),O$r=o(" \u2014 "),gK=a("a"),V$r=o("TFDebertaForTokenClassification"),X$r=o(" (DeBERTa model)"),z$r=l(),DC=a("li"),QMe=a("strong"),Q$r=o("deberta-v2"),W$r=o(" \u2014 "),hK=a("a"),H$r=o("TFDebertaV2ForTokenClassification"),U$r=o(" (DeBERTa-v2 model)"),J$r=l(),GC=a("li"),WMe=a("strong"),Y$r=o("distilbert"),K$r=o(" \u2014 "),pK=a("a"),Z$r=o("TFDistilBertForTokenClassification"),ekr=o(" (DistilBERT model)"),okr=l(),OC=a("li"),HMe=a("strong"),rkr=o("electra"),tkr=o(" \u2014 "),_K=a("a"),akr=o("TFElectraForTokenClassification"),nkr=o(" (ELECTRA model)"),skr=l(),VC=a("li"),UMe=a("strong"),lkr=o("flaubert"),ikr=o(" \u2014 "),uK=a("a"),dkr=o("TFFlaubertForTokenClassification"),ckr=o(" (FlauBERT model)"),fkr=l(),XC=a("li"),JMe=a("strong"),mkr=o("funnel"),gkr=o(" \u2014 "),bK=a("a"),hkr=o("TFFunnelForTokenClassification"),pkr=o(" (Funnel Transformer model)"),_kr=l(),zC=a("li"),YMe=a("strong"),ukr=o("layoutlm"),bkr=o(" \u2014 "),vK=a("a"),vkr=o("TFLayoutLMForTokenClassification"),Fkr=o(" (LayoutLM model)"),Tkr=l(),QC=a("li"),KMe=a("strong"),Mkr=o("longformer"),Ekr=o(" \u2014 "),FK=a("a"),Ckr=o("TFLongformerForTokenClassification"),wkr=o(" (Longformer model)"),Akr=l(),WC=a("li"),ZMe=a("strong"),Lkr=o("mobilebert"),ykr=o(" \u2014 "),TK=a("a"),xkr=o("TFMobileBertForTokenClassification"),$kr=o(" (MobileBERT model)"),kkr=l(),HC=a("li"),eEe=a("strong"),Skr=o("mpnet"),Rkr=o(" \u2014 "),MK=a("a"),Pkr=o("TFMPNetForTokenClassification"),Bkr=o(" (MPNet model)"),Ikr=l(),UC=a("li"),oEe=a("strong"),Nkr=o("rembert"),qkr=o(" \u2014 "),EK=a("a"),jkr=o("TFRemBertForTokenClassification"),Dkr=o(" (RemBERT model)"),Gkr=l(),JC=a("li"),rEe=a("strong"),Okr=o("roberta"),Vkr=o(" \u2014 "),CK=a("a"),Xkr=o("TFRobertaForTokenClassification"),zkr=o(" (RoBERTa model)"),Qkr=l(),YC=a("li"),tEe=a("strong"),Wkr=o("roformer"),Hkr=o(" \u2014 "),wK=a("a"),Ukr=o("TFRoFormerForTokenClassification"),Jkr=o(" (RoFormer model)"),Ykr=l(),KC=a("li"),aEe=a("strong"),Kkr=o("xlm"),Zkr=o(" \u2014 "),AK=a("a"),eSr=o("TFXLMForTokenClassification"),oSr=o(" (XLM model)"),rSr=l(),ZC=a("li"),nEe=a("strong"),tSr=o("xlm-roberta"),aSr=o(" \u2014 "),LK=a("a"),nSr=o("TFXLMRobertaForTokenClassification"),sSr=o(" (XLM-RoBERTa model)"),lSr=l(),e3=a("li"),sEe=a("strong"),iSr=o("xlnet"),dSr=o(" \u2014 "),yK=a("a"),cSr=o("TFXLNetForTokenClassification"),fSr=o(" (XLNet model)"),mSr=l(),F(o3.$$.fragment),sXe=l(),Ic=a("h2"),r3=a("a"),lEe=a("span"),F(yx.$$.fragment),gSr=l(),iEe=a("span"),hSr=o("TFAutoModelForQuestionAnswering"),lXe=l(),fr=a("div"),F(xx.$$.fragment),pSr=l(),Nc=a("p"),_Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xK=a("a"),uSr=o("from_pretrained()"),bSr=o(" class method or the "),$K=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),$x=a("p"),MSr=o("This class cannot be instantiated directly using "),dEe=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),Ot=a("div"),F(kx.$$.fragment),ASr=l(),cEe=a("p"),LSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ySr=l(),qc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),PSr=l(),F(t3.$$.fragment),BSr=l(),jr=a("div"),F(Sx.$$.fragment),ISr=l(),mEe=a("p"),NSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qSr=l(),un=a("p"),jSr=o("The model class to instantiate is selected based on the "),gEe=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),QSr=l(),ce=a("ul"),a3=a("li"),_Ee=a("strong"),WSr=o("albert"),HSr=o(" \u2014 "),SK=a("a"),USr=o("TFAlbertForQuestionAnswering"),JSr=o(" (ALBERT model)"),YSr=l(),n3=a("li"),uEe=a("strong"),KSr=o("bert"),ZSr=o(" \u2014 "),RK=a("a"),eRr=o("TFBertForQuestionAnswering"),oRr=o(" (BERT model)"),rRr=l(),s3=a("li"),bEe=a("strong"),tRr=o("camembert"),aRr=o(" \u2014 "),PK=a("a"),nRr=o("TFCamembertForQuestionAnswering"),sRr=o(" (CamemBERT model)"),lRr=l(),l3=a("li"),vEe=a("strong"),iRr=o("convbert"),dRr=o(" \u2014 "),BK=a("a"),cRr=o("TFConvBertForQuestionAnswering"),fRr=o(" (ConvBERT model)"),mRr=l(),i3=a("li"),FEe=a("strong"),gRr=o("deberta"),hRr=o(" \u2014 "),IK=a("a"),pRr=o("TFDebertaForQuestionAnswering"),_Rr=o(" (DeBERTa model)"),uRr=l(),d3=a("li"),TEe=a("strong"),bRr=o("deberta-v2"),vRr=o(" \u2014 "),NK=a("a"),FRr=o("TFDebertaV2ForQuestionAnswering"),TRr=o(" (DeBERTa-v2 model)"),MRr=l(),c3=a("li"),MEe=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),qK=a("a"),wRr=o("TFDistilBertForQuestionAnswering"),ARr=o(" (DistilBERT model)"),LRr=l(),f3=a("li"),EEe=a("strong"),yRr=o("electra"),xRr=o(" \u2014 "),jK=a("a"),$Rr=o("TFElectraForQuestionAnswering"),kRr=o(" (ELECTRA model)"),SRr=l(),m3=a("li"),CEe=a("strong"),RRr=o("flaubert"),PRr=o(" \u2014 "),DK=a("a"),BRr=o("TFFlaubertForQuestionAnsweringSimple"),IRr=o(" (FlauBERT model)"),NRr=l(),g3=a("li"),wEe=a("strong"),qRr=o("funnel"),jRr=o(" \u2014 "),GK=a("a"),DRr=o("TFFunnelForQuestionAnswering"),GRr=o(" (Funnel Transformer model)"),ORr=l(),h3=a("li"),AEe=a("strong"),VRr=o("gptj"),XRr=o(" \u2014 "),OK=a("a"),zRr=o("TFGPTJForQuestionAnswering"),QRr=o(" (GPT-J model)"),WRr=l(),p3=a("li"),LEe=a("strong"),HRr=o("longformer"),URr=o(" \u2014 "),VK=a("a"),JRr=o("TFLongformerForQuestionAnswering"),YRr=o(" (Longformer model)"),KRr=l(),_3=a("li"),yEe=a("strong"),ZRr=o("mobilebert"),ePr=o(" \u2014 "),XK=a("a"),oPr=o("TFMobileBertForQuestionAnswering"),rPr=o(" (MobileBERT model)"),tPr=l(),u3=a("li"),xEe=a("strong"),aPr=o("mpnet"),nPr=o(" \u2014 "),zK=a("a"),sPr=o("TFMPNetForQuestionAnswering"),lPr=o(" (MPNet model)"),iPr=l(),b3=a("li"),$Ee=a("strong"),dPr=o("rembert"),cPr=o(" \u2014 "),QK=a("a"),fPr=o("TFRemBertForQuestionAnswering"),mPr=o(" (RemBERT model)"),gPr=l(),v3=a("li"),kEe=a("strong"),hPr=o("roberta"),pPr=o(" \u2014 "),WK=a("a"),_Pr=o("TFRobertaForQuestionAnswering"),uPr=o(" (RoBERTa model)"),bPr=l(),F3=a("li"),SEe=a("strong"),vPr=o("roformer"),FPr=o(" \u2014 "),HK=a("a"),TPr=o("TFRoFormerForQuestionAnswering"),MPr=o(" (RoFormer model)"),EPr=l(),T3=a("li"),REe=a("strong"),CPr=o("xlm"),wPr=o(" \u2014 "),UK=a("a"),APr=o("TFXLMForQuestionAnsweringSimple"),LPr=o(" (XLM model)"),yPr=l(),M3=a("li"),PEe=a("strong"),xPr=o("xlm-roberta"),$Pr=o(" \u2014 "),JK=a("a"),kPr=o("TFXLMRobertaForQuestionAnswering"),SPr=o(" (XLM-RoBERTa model)"),RPr=l(),E3=a("li"),BEe=a("strong"),PPr=o("xlnet"),BPr=o(" \u2014 "),YK=a("a"),IPr=o("TFXLNetForQuestionAnsweringSimple"),NPr=o(" (XLNet model)"),qPr=l(),F(C3.$$.fragment),iXe=l(),jc=a("h2"),w3=a("a"),IEe=a("span"),F(Rx.$$.fragment),jPr=l(),NEe=a("span"),DPr=o("TFAutoModelForVision2Seq"),dXe=l(),mr=a("div"),F(Px.$$.fragment),GPr=l(),Dc=a("p"),OPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KK=a("a"),VPr=o("from_pretrained()"),XPr=o(" class method or the "),ZK=a("a"),zPr=o("from_config()"),QPr=o(` class
method.`),WPr=l(),Bx=a("p"),HPr=o("This class cannot be instantiated directly using "),qEe=a("code"),UPr=o("__init__()"),JPr=o(" (throws an error)."),YPr=l(),Vt=a("div"),F(Ix.$$.fragment),KPr=l(),jEe=a("p"),ZPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eBr=l(),Gc=a("p"),oBr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),rBr=o("not"),tBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),aBr=o("from_pretrained()"),nBr=o(" to load the model weights."),sBr=l(),F(A3.$$.fragment),lBr=l(),Dr=a("div"),F(Nx.$$.fragment),iBr=l(),GEe=a("p"),dBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cBr=l(),bn=a("p"),fBr=o("The model class to instantiate is selected based on the "),OEe=a("code"),mBr=o("model_type"),gBr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),hBr=o("pretrained_model_name_or_path"),pBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),_Br=o("pretrained_model_name_or_path"),uBr=o(":"),bBr=l(),zEe=a("ul"),L3=a("li"),QEe=a("strong"),vBr=o("vision-encoder-decoder"),FBr=o(" \u2014 "),oZ=a("a"),TBr=o("TFVisionEncoderDecoderModel"),MBr=o(" (Vision Encoder decoder model)"),EBr=l(),F(y3.$$.fragment),cXe=l(),Oc=a("h2"),x3=a("a"),WEe=a("span"),F(qx.$$.fragment),CBr=l(),HEe=a("span"),wBr=o("TFAutoModelForSpeechSeq2Seq"),fXe=l(),gr=a("div"),F(jx.$$.fragment),ABr=l(),Vc=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rZ=a("a"),yBr=o("from_pretrained()"),xBr=o(" class method or the "),tZ=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),Dx=a("p"),RBr=o("This class cannot be instantiated directly using "),UEe=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Xt=a("div"),F(Gx.$$.fragment),NBr=l(),JEe=a("p"),qBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jBr=l(),Xc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F($3.$$.fragment),QBr=l(),Gr=a("div"),F(Ox.$$.fragment),WBr=l(),KEe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UBr=l(),vn=a("p"),JBr=o("The model class to instantiate is selected based on the "),ZEe=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),rCe=a("ul"),k3=a("li"),tCe=a("strong"),aIr=o("speech_to_text"),nIr=o(" \u2014 "),nZ=a("a"),sIr=o("TFSpeech2TextForConditionalGeneration"),lIr=o(" (Speech2Text model)"),iIr=l(),F(S3.$$.fragment),mXe=l(),zc=a("h2"),R3=a("a"),aCe=a("span"),F(Vx.$$.fragment),dIr=l(),nCe=a("span"),cIr=o("FlaxAutoModel"),gXe=l(),hr=a("div"),F(Xx.$$.fragment),fIr=l(),Qc=a("p"),mIr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sZ=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),lZ=a("a"),pIr=o("from_config()"),_Ir=o(` class
method.`),uIr=l(),zx=a("p"),bIr=o("This class cannot be instantiated directly using "),sCe=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),zt=a("div"),F(Qx.$$.fragment),MIr=l(),lCe=a("p"),EIr=o("Instantiates one of the base model classes of the library from a configuration."),CIr=l(),Wc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),AIr=o("not"),LIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),yIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(P3.$$.fragment),kIr=l(),Or=a("div"),F(Wx.$$.fragment),SIr=l(),dCe=a("p"),RIr=o("Instantiate one of the base model classes of the library from a pretrained model."),PIr=l(),Fn=a("p"),BIr=o("The model class to instantiate is selected based on the "),cCe=a("code"),IIr=o("model_type"),NIr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),qIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),oe=a("ul"),B3=a("li"),gCe=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),dZ=a("a"),zIr=o("FlaxAlbertModel"),QIr=o(" (ALBERT model)"),WIr=l(),I3=a("li"),hCe=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),cZ=a("a"),JIr=o("FlaxBartModel"),YIr=o(" (BART model)"),KIr=l(),N3=a("li"),pCe=a("strong"),ZIr=o("beit"),eNr=o(" \u2014 "),fZ=a("a"),oNr=o("FlaxBeitModel"),rNr=o(" (BEiT model)"),tNr=l(),q3=a("li"),_Ce=a("strong"),aNr=o("bert"),nNr=o(" \u2014 "),mZ=a("a"),sNr=o("FlaxBertModel"),lNr=o(" (BERT model)"),iNr=l(),j3=a("li"),uCe=a("strong"),dNr=o("big_bird"),cNr=o(" \u2014 "),gZ=a("a"),fNr=o("FlaxBigBirdModel"),mNr=o(" (BigBird model)"),gNr=l(),D3=a("li"),bCe=a("strong"),hNr=o("blenderbot"),pNr=o(" \u2014 "),hZ=a("a"),_Nr=o("FlaxBlenderbotModel"),uNr=o(" (Blenderbot model)"),bNr=l(),G3=a("li"),vCe=a("strong"),vNr=o("blenderbot-small"),FNr=o(" \u2014 "),pZ=a("a"),TNr=o("FlaxBlenderbotSmallModel"),MNr=o(" (BlenderbotSmall model)"),ENr=l(),O3=a("li"),FCe=a("strong"),CNr=o("clip"),wNr=o(" \u2014 "),_Z=a("a"),ANr=o("FlaxCLIPModel"),LNr=o(" (CLIP model)"),yNr=l(),V3=a("li"),TCe=a("strong"),xNr=o("distilbert"),$Nr=o(" \u2014 "),uZ=a("a"),kNr=o("FlaxDistilBertModel"),SNr=o(" (DistilBERT model)"),RNr=l(),X3=a("li"),MCe=a("strong"),PNr=o("electra"),BNr=o(" \u2014 "),bZ=a("a"),INr=o("FlaxElectraModel"),NNr=o(" (ELECTRA model)"),qNr=l(),z3=a("li"),ECe=a("strong"),jNr=o("gpt2"),DNr=o(" \u2014 "),vZ=a("a"),GNr=o("FlaxGPT2Model"),ONr=o(" (OpenAI GPT-2 model)"),VNr=l(),Q3=a("li"),CCe=a("strong"),XNr=o("gpt_neo"),zNr=o(" \u2014 "),FZ=a("a"),QNr=o("FlaxGPTNeoModel"),WNr=o(" (GPT Neo model)"),HNr=l(),W3=a("li"),wCe=a("strong"),UNr=o("gptj"),JNr=o(" \u2014 "),TZ=a("a"),YNr=o("FlaxGPTJModel"),KNr=o(" (GPT-J model)"),ZNr=l(),H3=a("li"),ACe=a("strong"),eqr=o("longt5"),oqr=o(" \u2014 "),MZ=a("a"),rqr=o("FlaxLongT5Model"),tqr=o(" (LongT5 model)"),aqr=l(),U3=a("li"),LCe=a("strong"),nqr=o("marian"),sqr=o(" \u2014 "),EZ=a("a"),lqr=o("FlaxMarianModel"),iqr=o(" (Marian model)"),dqr=l(),J3=a("li"),yCe=a("strong"),cqr=o("mbart"),fqr=o(" \u2014 "),CZ=a("a"),mqr=o("FlaxMBartModel"),gqr=o(" (mBART model)"),hqr=l(),Y3=a("li"),xCe=a("strong"),pqr=o("mt5"),_qr=o(" \u2014 "),wZ=a("a"),uqr=o("FlaxMT5Model"),bqr=o(" (MT5 model)"),vqr=l(),K3=a("li"),$Ce=a("strong"),Fqr=o("opt"),Tqr=o(" \u2014 "),AZ=a("a"),Mqr=o("FlaxOPTModel"),Eqr=o(" (OPT model)"),Cqr=l(),Z3=a("li"),kCe=a("strong"),wqr=o("pegasus"),Aqr=o(" \u2014 "),LZ=a("a"),Lqr=o("FlaxPegasusModel"),yqr=o(" (Pegasus model)"),xqr=l(),e0=a("li"),SCe=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),yZ=a("a"),Sqr=o("FlaxRobertaModel"),Rqr=o(" (RoBERTa model)"),Pqr=l(),o0=a("li"),RCe=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),xZ=a("a"),Nqr=o("FlaxRoFormerModel"),qqr=o(" (RoFormer model)"),jqr=l(),r0=a("li"),PCe=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),$Z=a("a"),Oqr=o("FlaxT5Model"),Vqr=o(" (T5 model)"),Xqr=l(),t0=a("li"),BCe=a("strong"),zqr=o("vision-text-dual-encoder"),Qqr=o(" \u2014 "),kZ=a("a"),Wqr=o("FlaxVisionTextDualEncoderModel"),Hqr=o(" (VisionTextDualEncoder model)"),Uqr=l(),a0=a("li"),ICe=a("strong"),Jqr=o("vit"),Yqr=o(" \u2014 "),SZ=a("a"),Kqr=o("FlaxViTModel"),Zqr=o(" (ViT model)"),ejr=l(),n0=a("li"),NCe=a("strong"),ojr=o("wav2vec2"),rjr=o(" \u2014 "),RZ=a("a"),tjr=o("FlaxWav2Vec2Model"),ajr=o(" (Wav2Vec2 model)"),njr=l(),s0=a("li"),qCe=a("strong"),sjr=o("xglm"),ljr=o(" \u2014 "),PZ=a("a"),ijr=o("FlaxXGLMModel"),djr=o(" (XGLM model)"),cjr=l(),l0=a("li"),jCe=a("strong"),fjr=o("xlm-roberta"),mjr=o(" \u2014 "),BZ=a("a"),gjr=o("FlaxXLMRobertaModel"),hjr=o(" (XLM-RoBERTa model)"),pjr=l(),F(i0.$$.fragment),hXe=l(),Hc=a("h2"),d0=a("a"),DCe=a("span"),F(Hx.$$.fragment),_jr=l(),GCe=a("span"),ujr=o("FlaxAutoModelForCausalLM"),pXe=l(),pr=a("div"),F(Ux.$$.fragment),bjr=l(),Uc=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),NZ=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),Jx=a("p"),wjr=o("This class cannot be instantiated directly using "),OCe=a("code"),Ajr=o("__init__()"),Ljr=o(" (throws an error)."),yjr=l(),Qt=a("div"),F(Yx.$$.fragment),xjr=l(),VCe=a("p"),$jr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kjr=l(),Jc=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),Njr=l(),F(c0.$$.fragment),qjr=l(),Vr=a("div"),F(Kx.$$.fragment),jjr=l(),zCe=a("p"),Djr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gjr=l(),Tn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),QCe=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),zjr=o("pretrained_model_name_or_path"),Qjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),Wjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),xe=a("ul"),f0=a("li"),UCe=a("strong"),Jjr=o("bart"),Yjr=o(" \u2014 "),jZ=a("a"),Kjr=o("FlaxBartForCausalLM"),Zjr=o(" (BART model)"),eDr=l(),m0=a("li"),JCe=a("strong"),oDr=o("bert"),rDr=o(" \u2014 "),DZ=a("a"),tDr=o("FlaxBertForCausalLM"),aDr=o(" (BERT model)"),nDr=l(),g0=a("li"),YCe=a("strong"),sDr=o("big_bird"),lDr=o(" \u2014 "),GZ=a("a"),iDr=o("FlaxBigBirdForCausalLM"),dDr=o(" (BigBird model)"),cDr=l(),h0=a("li"),KCe=a("strong"),fDr=o("electra"),mDr=o(" \u2014 "),OZ=a("a"),gDr=o("FlaxElectraForCausalLM"),hDr=o(" (ELECTRA model)"),pDr=l(),p0=a("li"),ZCe=a("strong"),_Dr=o("gpt2"),uDr=o(" \u2014 "),VZ=a("a"),bDr=o("FlaxGPT2LMHeadModel"),vDr=o(" (OpenAI GPT-2 model)"),FDr=l(),_0=a("li"),e3e=a("strong"),TDr=o("gpt_neo"),MDr=o(" \u2014 "),XZ=a("a"),EDr=o("FlaxGPTNeoForCausalLM"),CDr=o(" (GPT Neo model)"),wDr=l(),u0=a("li"),o3e=a("strong"),ADr=o("gptj"),LDr=o(" \u2014 "),zZ=a("a"),yDr=o("FlaxGPTJForCausalLM"),xDr=o(" (GPT-J model)"),$Dr=l(),b0=a("li"),r3e=a("strong"),kDr=o("opt"),SDr=o(" \u2014 "),QZ=a("a"),RDr=o("FlaxOPTForCausalLM"),PDr=o(" (OPT model)"),BDr=l(),v0=a("li"),t3e=a("strong"),IDr=o("roberta"),NDr=o(" \u2014 "),WZ=a("a"),qDr=o("FlaxRobertaForCausalLM"),jDr=o(" (RoBERTa model)"),DDr=l(),F0=a("li"),a3e=a("strong"),GDr=o("xglm"),ODr=o(" \u2014 "),HZ=a("a"),VDr=o("FlaxXGLMForCausalLM"),XDr=o(" (XGLM model)"),zDr=l(),F(T0.$$.fragment),_Xe=l(),Yc=a("h2"),M0=a("a"),n3e=a("span"),F(Zx.$$.fragment),QDr=l(),s3e=a("span"),WDr=o("FlaxAutoModelForPreTraining"),uXe=l(),_r=a("div"),F(e$.$$.fragment),HDr=l(),Kc=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" class method or the "),JZ=a("a"),KDr=o("from_config()"),ZDr=o(` class
method.`),eGr=l(),o$=a("p"),oGr=o("This class cannot be instantiated directly using "),l3e=a("code"),rGr=o("__init__()"),tGr=o(" (throws an error)."),aGr=l(),Wt=a("div"),F(r$.$$.fragment),nGr=l(),i3e=a("p"),sGr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lGr=l(),Zc=a("p"),iGr=o(`Note:
Loading a model from its configuration file does `),d3e=a("strong"),dGr=o("not"),cGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),fGr=o("from_pretrained()"),mGr=o(" to load the model weights."),gGr=l(),F(E0.$$.fragment),hGr=l(),Xr=a("div"),F(t$.$$.fragment),pGr=l(),c3e=a("p"),_Gr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uGr=l(),Mn=a("p"),bGr=o("The model class to instantiate is selected based on the "),f3e=a("code"),vGr=o("model_type"),FGr=o(` property of the config object (either
passed as an argument or loaded from `),m3e=a("code"),TGr=o("pretrained_model_name_or_path"),MGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(":"),wGr=l(),Ee=a("ul"),C0=a("li"),h3e=a("strong"),AGr=o("albert"),LGr=o(" \u2014 "),KZ=a("a"),yGr=o("FlaxAlbertForPreTraining"),xGr=o(" (ALBERT model)"),$Gr=l(),w0=a("li"),p3e=a("strong"),kGr=o("bart"),SGr=o(" \u2014 "),ZZ=a("a"),RGr=o("FlaxBartForConditionalGeneration"),PGr=o(" (BART model)"),BGr=l(),A0=a("li"),_3e=a("strong"),IGr=o("bert"),NGr=o(" \u2014 "),eee=a("a"),qGr=o("FlaxBertForPreTraining"),jGr=o(" (BERT model)"),DGr=l(),L0=a("li"),u3e=a("strong"),GGr=o("big_bird"),OGr=o(" \u2014 "),oee=a("a"),VGr=o("FlaxBigBirdForPreTraining"),XGr=o(" (BigBird model)"),zGr=l(),y0=a("li"),b3e=a("strong"),QGr=o("electra"),WGr=o(" \u2014 "),ree=a("a"),HGr=o("FlaxElectraForPreTraining"),UGr=o(" (ELECTRA model)"),JGr=l(),x0=a("li"),v3e=a("strong"),YGr=o("longt5"),KGr=o(" \u2014 "),tee=a("a"),ZGr=o("FlaxLongT5ForConditionalGeneration"),eOr=o(" (LongT5 model)"),oOr=l(),$0=a("li"),F3e=a("strong"),rOr=o("mbart"),tOr=o(" \u2014 "),aee=a("a"),aOr=o("FlaxMBartForConditionalGeneration"),nOr=o(" (mBART model)"),sOr=l(),k0=a("li"),T3e=a("strong"),lOr=o("mt5"),iOr=o(" \u2014 "),nee=a("a"),dOr=o("FlaxMT5ForConditionalGeneration"),cOr=o(" (MT5 model)"),fOr=l(),S0=a("li"),M3e=a("strong"),mOr=o("roberta"),gOr=o(" \u2014 "),see=a("a"),hOr=o("FlaxRobertaForMaskedLM"),pOr=o(" (RoBERTa model)"),_Or=l(),R0=a("li"),E3e=a("strong"),uOr=o("roformer"),bOr=o(" \u2014 "),lee=a("a"),vOr=o("FlaxRoFormerForMaskedLM"),FOr=o(" (RoFormer model)"),TOr=l(),P0=a("li"),C3e=a("strong"),MOr=o("t5"),EOr=o(" \u2014 "),iee=a("a"),COr=o("FlaxT5ForConditionalGeneration"),wOr=o(" (T5 model)"),AOr=l(),B0=a("li"),w3e=a("strong"),LOr=o("wav2vec2"),yOr=o(" \u2014 "),dee=a("a"),xOr=o("FlaxWav2Vec2ForPreTraining"),$Or=o(" (Wav2Vec2 model)"),kOr=l(),I0=a("li"),A3e=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),cee=a("a"),POr=o("FlaxXLMRobertaForMaskedLM"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F(N0.$$.fragment),bXe=l(),ef=a("h2"),q0=a("a"),L3e=a("span"),F(a$.$$.fragment),NOr=l(),y3e=a("span"),qOr=o("FlaxAutoModelForMaskedLM"),vXe=l(),ur=a("div"),F(n$.$$.fragment),jOr=l(),of=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fee=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),mee=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),s$=a("p"),QOr=o("This class cannot be instantiated directly using "),x3e=a("code"),WOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Ht=a("div"),F(l$.$$.fragment),JOr=l(),$3e=a("p"),YOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KOr=l(),rf=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(j0.$$.fragment),nVr=l(),zr=a("div"),F(i$.$$.fragment),sVr=l(),S3e=a("p"),lVr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iVr=l(),En=a("p"),dVr=o("The model class to instantiate is selected based on the "),R3e=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),$e=a("ul"),D0=a("li"),I3e=a("strong"),uVr=o("albert"),bVr=o(" \u2014 "),hee=a("a"),vVr=o("FlaxAlbertForMaskedLM"),FVr=o(" (ALBERT model)"),TVr=l(),G0=a("li"),N3e=a("strong"),MVr=o("bart"),EVr=o(" \u2014 "),pee=a("a"),CVr=o("FlaxBartForConditionalGeneration"),wVr=o(" (BART model)"),AVr=l(),O0=a("li"),q3e=a("strong"),LVr=o("bert"),yVr=o(" \u2014 "),_ee=a("a"),xVr=o("FlaxBertForMaskedLM"),$Vr=o(" (BERT model)"),kVr=l(),V0=a("li"),j3e=a("strong"),SVr=o("big_bird"),RVr=o(" \u2014 "),uee=a("a"),PVr=o("FlaxBigBirdForMaskedLM"),BVr=o(" (BigBird model)"),IVr=l(),X0=a("li"),D3e=a("strong"),NVr=o("distilbert"),qVr=o(" \u2014 "),bee=a("a"),jVr=o("FlaxDistilBertForMaskedLM"),DVr=o(" (DistilBERT model)"),GVr=l(),z0=a("li"),G3e=a("strong"),OVr=o("electra"),VVr=o(" \u2014 "),vee=a("a"),XVr=o("FlaxElectraForMaskedLM"),zVr=o(" (ELECTRA model)"),QVr=l(),Q0=a("li"),O3e=a("strong"),WVr=o("mbart"),HVr=o(" \u2014 "),Fee=a("a"),UVr=o("FlaxMBartForConditionalGeneration"),JVr=o(" (mBART model)"),YVr=l(),W0=a("li"),V3e=a("strong"),KVr=o("roberta"),ZVr=o(" \u2014 "),Tee=a("a"),eXr=o("FlaxRobertaForMaskedLM"),oXr=o(" (RoBERTa model)"),rXr=l(),H0=a("li"),X3e=a("strong"),tXr=o("roformer"),aXr=o(" \u2014 "),Mee=a("a"),nXr=o("FlaxRoFormerForMaskedLM"),sXr=o(" (RoFormer model)"),lXr=l(),U0=a("li"),z3e=a("strong"),iXr=o("xlm-roberta"),dXr=o(" \u2014 "),Eee=a("a"),cXr=o("FlaxXLMRobertaForMaskedLM"),fXr=o(" (XLM-RoBERTa model)"),mXr=l(),F(J0.$$.fragment),FXe=l(),tf=a("h2"),Y0=a("a"),Q3e=a("span"),F(d$.$$.fragment),gXr=l(),W3e=a("span"),hXr=o("FlaxAutoModelForSeq2SeqLM"),TXe=l(),br=a("div"),F(c$.$$.fragment),pXr=l(),af=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cee=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),wee=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),f$=a("p"),MXr=o("This class cannot be instantiated directly using "),H3e=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Ut=a("div"),F(m$.$$.fragment),AXr=l(),U3e=a("p"),LXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yXr=l(),nf=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),J3e=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(K0.$$.fragment),BXr=l(),Qr=a("div"),F(g$.$$.fragment),IXr=l(),Y3e=a("p"),NXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qXr=l(),Cn=a("p"),jXr=o("The model class to instantiate is selected based on the "),K3e=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),Z3e=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),QXr=l(),ke=a("ul"),Z0=a("li"),o0e=a("strong"),WXr=o("bart"),HXr=o(" \u2014 "),Lee=a("a"),UXr=o("FlaxBartForConditionalGeneration"),JXr=o(" (BART model)"),YXr=l(),ew=a("li"),r0e=a("strong"),KXr=o("blenderbot"),ZXr=o(" \u2014 "),yee=a("a"),ezr=o("FlaxBlenderbotForConditionalGeneration"),ozr=o(" (Blenderbot model)"),rzr=l(),ow=a("li"),t0e=a("strong"),tzr=o("blenderbot-small"),azr=o(" \u2014 "),xee=a("a"),nzr=o("FlaxBlenderbotSmallForConditionalGeneration"),szr=o(" (BlenderbotSmall model)"),lzr=l(),rw=a("li"),a0e=a("strong"),izr=o("encoder-decoder"),dzr=o(" \u2014 "),$ee=a("a"),czr=o("FlaxEncoderDecoderModel"),fzr=o(" (Encoder decoder model)"),mzr=l(),tw=a("li"),n0e=a("strong"),gzr=o("longt5"),hzr=o(" \u2014 "),kee=a("a"),pzr=o("FlaxLongT5ForConditionalGeneration"),_zr=o(" (LongT5 model)"),uzr=l(),aw=a("li"),s0e=a("strong"),bzr=o("marian"),vzr=o(" \u2014 "),See=a("a"),Fzr=o("FlaxMarianMTModel"),Tzr=o(" (Marian model)"),Mzr=l(),nw=a("li"),l0e=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Ree=a("a"),wzr=o("FlaxMBartForConditionalGeneration"),Azr=o(" (mBART model)"),Lzr=l(),sw=a("li"),i0e=a("strong"),yzr=o("mt5"),xzr=o(" \u2014 "),Pee=a("a"),$zr=o("FlaxMT5ForConditionalGeneration"),kzr=o(" (MT5 model)"),Szr=l(),lw=a("li"),d0e=a("strong"),Rzr=o("pegasus"),Pzr=o(" \u2014 "),Bee=a("a"),Bzr=o("FlaxPegasusForConditionalGeneration"),Izr=o(" (Pegasus model)"),Nzr=l(),iw=a("li"),c0e=a("strong"),qzr=o("t5"),jzr=o(" \u2014 "),Iee=a("a"),Dzr=o("FlaxT5ForConditionalGeneration"),Gzr=o(" (T5 model)"),Ozr=l(),F(dw.$$.fragment),MXe=l(),sf=a("h2"),cw=a("a"),f0e=a("span"),F(h$.$$.fragment),Vzr=l(),m0e=a("span"),Xzr=o("FlaxAutoModelForSequenceClassification"),EXe=l(),vr=a("div"),F(p$.$$.fragment),zzr=l(),lf=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),qee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),_$=a("p"),Kzr=o("This class cannot be instantiated directly using "),g0e=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Jt=a("div"),F(u$.$$.fragment),rQr=l(),h0e=a("p"),tQr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aQr=l(),df=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(fw.$$.fragment),fQr=l(),Wr=a("div"),F(b$.$$.fragment),mQr=l(),_0e=a("p"),gQr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hQr=l(),wn=a("p"),pQr=o("The model class to instantiate is selected based on the "),u0e=a("code"),_Qr=o("model_type"),uQr=o(` property of the config object (either
passed as an argument or loaded from `),b0e=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),Se=a("ul"),mw=a("li"),F0e=a("strong"),EQr=o("albert"),CQr=o(" \u2014 "),Dee=a("a"),wQr=o("FlaxAlbertForSequenceClassification"),AQr=o(" (ALBERT model)"),LQr=l(),gw=a("li"),T0e=a("strong"),yQr=o("bart"),xQr=o(" \u2014 "),Gee=a("a"),$Qr=o("FlaxBartForSequenceClassification"),kQr=o(" (BART model)"),SQr=l(),hw=a("li"),M0e=a("strong"),RQr=o("bert"),PQr=o(" \u2014 "),Oee=a("a"),BQr=o("FlaxBertForSequenceClassification"),IQr=o(" (BERT model)"),NQr=l(),pw=a("li"),E0e=a("strong"),qQr=o("big_bird"),jQr=o(" \u2014 "),Vee=a("a"),DQr=o("FlaxBigBirdForSequenceClassification"),GQr=o(" (BigBird model)"),OQr=l(),_w=a("li"),C0e=a("strong"),VQr=o("distilbert"),XQr=o(" \u2014 "),Xee=a("a"),zQr=o("FlaxDistilBertForSequenceClassification"),QQr=o(" (DistilBERT model)"),WQr=l(),uw=a("li"),w0e=a("strong"),HQr=o("electra"),UQr=o(" \u2014 "),zee=a("a"),JQr=o("FlaxElectraForSequenceClassification"),YQr=o(" (ELECTRA model)"),KQr=l(),bw=a("li"),A0e=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),Qee=a("a"),oWr=o("FlaxMBartForSequenceClassification"),rWr=o(" (mBART model)"),tWr=l(),vw=a("li"),L0e=a("strong"),aWr=o("roberta"),nWr=o(" \u2014 "),Wee=a("a"),sWr=o("FlaxRobertaForSequenceClassification"),lWr=o(" (RoBERTa model)"),iWr=l(),Fw=a("li"),y0e=a("strong"),dWr=o("roformer"),cWr=o(" \u2014 "),Hee=a("a"),fWr=o("FlaxRoFormerForSequenceClassification"),mWr=o(" (RoFormer model)"),gWr=l(),Tw=a("li"),x0e=a("strong"),hWr=o("xlm-roberta"),pWr=o(" \u2014 "),Uee=a("a"),_Wr=o("FlaxXLMRobertaForSequenceClassification"),uWr=o(" (XLM-RoBERTa model)"),bWr=l(),F(Mw.$$.fragment),CXe=l(),cf=a("h2"),Ew=a("a"),$0e=a("span"),F(v$.$$.fragment),vWr=l(),k0e=a("span"),FWr=o("FlaxAutoModelForQuestionAnswering"),wXe=l(),Fr=a("div"),F(F$.$$.fragment),TWr=l(),ff=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jee=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),Yee=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),T$=a("p"),yWr=o("This class cannot be instantiated directly using "),S0e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Yt=a("div"),F(M$.$$.fragment),SWr=l(),R0e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PWr=l(),mf=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(Cw.$$.fragment),GWr=l(),Hr=a("div"),F(E$.$$.fragment),OWr=l(),B0e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XWr=l(),An=a("p"),zWr=o("The model class to instantiate is selected based on the "),I0e=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),Re=a("ul"),ww=a("li"),j0e=a("strong"),ZWr=o("albert"),eHr=o(" \u2014 "),Zee=a("a"),oHr=o("FlaxAlbertForQuestionAnswering"),rHr=o(" (ALBERT model)"),tHr=l(),Aw=a("li"),D0e=a("strong"),aHr=o("bart"),nHr=o(" \u2014 "),eoe=a("a"),sHr=o("FlaxBartForQuestionAnswering"),lHr=o(" (BART model)"),iHr=l(),Lw=a("li"),G0e=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),ooe=a("a"),fHr=o("FlaxBertForQuestionAnswering"),mHr=o(" (BERT model)"),gHr=l(),yw=a("li"),O0e=a("strong"),hHr=o("big_bird"),pHr=o(" \u2014 "),roe=a("a"),_Hr=o("FlaxBigBirdForQuestionAnswering"),uHr=o(" (BigBird model)"),bHr=l(),xw=a("li"),V0e=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),toe=a("a"),THr=o("FlaxDistilBertForQuestionAnswering"),MHr=o(" (DistilBERT model)"),EHr=l(),$w=a("li"),X0e=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),aoe=a("a"),AHr=o("FlaxElectraForQuestionAnswering"),LHr=o(" (ELECTRA model)"),yHr=l(),kw=a("li"),z0e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),noe=a("a"),kHr=o("FlaxMBartForQuestionAnswering"),SHr=o(" (mBART model)"),RHr=l(),Sw=a("li"),Q0e=a("strong"),PHr=o("roberta"),BHr=o(" \u2014 "),soe=a("a"),IHr=o("FlaxRobertaForQuestionAnswering"),NHr=o(" (RoBERTa model)"),qHr=l(),Rw=a("li"),W0e=a("strong"),jHr=o("roformer"),DHr=o(" \u2014 "),loe=a("a"),GHr=o("FlaxRoFormerForQuestionAnswering"),OHr=o(" (RoFormer model)"),VHr=l(),Pw=a("li"),H0e=a("strong"),XHr=o("xlm-roberta"),zHr=o(" \u2014 "),ioe=a("a"),QHr=o("FlaxXLMRobertaForQuestionAnswering"),WHr=o(" (XLM-RoBERTa model)"),HHr=l(),F(Bw.$$.fragment),AXe=l(),gf=a("h2"),Iw=a("a"),U0e=a("span"),F(C$.$$.fragment),UHr=l(),J0e=a("span"),JHr=o("FlaxAutoModelForTokenClassification"),LXe=l(),Tr=a("div"),F(w$.$$.fragment),YHr=l(),hf=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),doe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),coe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),A$=a("p"),aUr=o("This class cannot be instantiated directly using "),Y0e=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Kt=a("div"),F(L$.$$.fragment),iUr=l(),K0e=a("p"),dUr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cUr=l(),pf=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),mUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),hUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F(Nw.$$.fragment),uUr=l(),Ur=a("div"),F(y$.$$.fragment),bUr=l(),ewe=a("p"),vUr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FUr=l(),Ln=a("p"),TUr=o("The model class to instantiate is selected based on the "),owe=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),rwe=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Ve=a("ul"),qw=a("li"),awe=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),moe=a("a"),kUr=o("FlaxAlbertForTokenClassification"),SUr=o(" (ALBERT model)"),RUr=l(),jw=a("li"),nwe=a("strong"),PUr=o("bert"),BUr=o(" \u2014 "),goe=a("a"),IUr=o("FlaxBertForTokenClassification"),NUr=o(" (BERT model)"),qUr=l(),Dw=a("li"),swe=a("strong"),jUr=o("big_bird"),DUr=o(" \u2014 "),hoe=a("a"),GUr=o("FlaxBigBirdForTokenClassification"),OUr=o(" (BigBird model)"),VUr=l(),Gw=a("li"),lwe=a("strong"),XUr=o("distilbert"),zUr=o(" \u2014 "),poe=a("a"),QUr=o("FlaxDistilBertForTokenClassification"),WUr=o(" (DistilBERT model)"),HUr=l(),Ow=a("li"),iwe=a("strong"),UUr=o("electra"),JUr=o(" \u2014 "),_oe=a("a"),YUr=o("FlaxElectraForTokenClassification"),KUr=o(" (ELECTRA model)"),ZUr=l(),Vw=a("li"),dwe=a("strong"),eJr=o("roberta"),oJr=o(" \u2014 "),uoe=a("a"),rJr=o("FlaxRobertaForTokenClassification"),tJr=o(" (RoBERTa model)"),aJr=l(),Xw=a("li"),cwe=a("strong"),nJr=o("roformer"),sJr=o(" \u2014 "),boe=a("a"),lJr=o("FlaxRoFormerForTokenClassification"),iJr=o(" (RoFormer model)"),dJr=l(),zw=a("li"),fwe=a("strong"),cJr=o("xlm-roberta"),fJr=o(" \u2014 "),voe=a("a"),mJr=o("FlaxXLMRobertaForTokenClassification"),gJr=o(" (XLM-RoBERTa model)"),hJr=l(),F(Qw.$$.fragment),yXe=l(),_f=a("h2"),Ww=a("a"),mwe=a("span"),F(x$.$$.fragment),pJr=l(),gwe=a("span"),_Jr=o("FlaxAutoModelForMultipleChoice"),xXe=l(),Mr=a("div"),F($$.$$.fragment),uJr=l(),uf=a("p"),bJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Foe=a("a"),vJr=o("from_pretrained()"),FJr=o(" class method or the "),Toe=a("a"),TJr=o("from_config()"),MJr=o(` class
method.`),EJr=l(),k$=a("p"),CJr=o("This class cannot be instantiated directly using "),hwe=a("code"),wJr=o("__init__()"),AJr=o(" (throws an error)."),LJr=l(),Zt=a("div"),F(S$.$$.fragment),yJr=l(),pwe=a("p"),xJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Jr=l(),bf=a("p"),kJr=o(`Note:
Loading a model from its configuration file does `),_we=a("strong"),SJr=o("not"),RJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),PJr=o("from_pretrained()"),BJr=o(" to load the model weights."),IJr=l(),F(Hw.$$.fragment),NJr=l(),Jr=a("div"),F(R$.$$.fragment),qJr=l(),uwe=a("p"),jJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DJr=l(),yn=a("p"),GJr=o("The model class to instantiate is selected based on the "),bwe=a("code"),OJr=o("model_type"),VJr=o(` property of the config object (either
passed as an argument or loaded from `),vwe=a("code"),XJr=o("pretrained_model_name_or_path"),zJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=a("code"),QJr=o("pretrained_model_name_or_path"),WJr=o(":"),HJr=l(),Xe=a("ul"),Uw=a("li"),Twe=a("strong"),UJr=o("albert"),JJr=o(" \u2014 "),Eoe=a("a"),YJr=o("FlaxAlbertForMultipleChoice"),KJr=o(" (ALBERT model)"),ZJr=l(),Jw=a("li"),Mwe=a("strong"),eYr=o("bert"),oYr=o(" \u2014 "),Coe=a("a"),rYr=o("FlaxBertForMultipleChoice"),tYr=o(" (BERT model)"),aYr=l(),Yw=a("li"),Ewe=a("strong"),nYr=o("big_bird"),sYr=o(" \u2014 "),woe=a("a"),lYr=o("FlaxBigBirdForMultipleChoice"),iYr=o(" (BigBird model)"),dYr=l(),Kw=a("li"),Cwe=a("strong"),cYr=o("distilbert"),fYr=o(" \u2014 "),Aoe=a("a"),mYr=o("FlaxDistilBertForMultipleChoice"),gYr=o(" (DistilBERT model)"),hYr=l(),Zw=a("li"),wwe=a("strong"),pYr=o("electra"),_Yr=o(" \u2014 "),Loe=a("a"),uYr=o("FlaxElectraForMultipleChoice"),bYr=o(" (ELECTRA model)"),vYr=l(),eA=a("li"),Awe=a("strong"),FYr=o("roberta"),TYr=o(" \u2014 "),yoe=a("a"),MYr=o("FlaxRobertaForMultipleChoice"),EYr=o(" (RoBERTa model)"),CYr=l(),oA=a("li"),Lwe=a("strong"),wYr=o("roformer"),AYr=o(" \u2014 "),xoe=a("a"),LYr=o("FlaxRoFormerForMultipleChoice"),yYr=o(" (RoFormer model)"),xYr=l(),rA=a("li"),ywe=a("strong"),$Yr=o("xlm-roberta"),kYr=o(" \u2014 "),$oe=a("a"),SYr=o("FlaxXLMRobertaForMultipleChoice"),RYr=o(" (XLM-RoBERTa model)"),PYr=l(),F(tA.$$.fragment),$Xe=l(),vf=a("h2"),aA=a("a"),xwe=a("span"),F(P$.$$.fragment),BYr=l(),$we=a("span"),IYr=o("FlaxAutoModelForNextSentencePrediction"),kXe=l(),Er=a("div"),F(B$.$$.fragment),NYr=l(),Ff=a("p"),qYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),koe=a("a"),jYr=o("from_pretrained()"),DYr=o(" class method or the "),Soe=a("a"),GYr=o("from_config()"),OYr=o(` class
method.`),VYr=l(),I$=a("p"),XYr=o("This class cannot be instantiated directly using "),kwe=a("code"),zYr=o("__init__()"),QYr=o(" (throws an error)."),WYr=l(),ea=a("div"),F(N$.$$.fragment),HYr=l(),Swe=a("p"),UYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JYr=l(),Tf=a("p"),YYr=o(`Note:
Loading a model from its configuration file does `),Rwe=a("strong"),KYr=o("not"),ZYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),eKr=o("from_pretrained()"),oKr=o(" to load the model weights."),rKr=l(),F(nA.$$.fragment),tKr=l(),Yr=a("div"),F(q$.$$.fragment),aKr=l(),Pwe=a("p"),nKr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sKr=l(),xn=a("p"),lKr=o("The model class to instantiate is selected based on the "),Bwe=a("code"),iKr=o("model_type"),dKr=o(` property of the config object (either
passed as an argument or loaded from `),Iwe=a("code"),cKr=o("pretrained_model_name_or_path"),fKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nwe=a("code"),mKr=o("pretrained_model_name_or_path"),gKr=o(":"),hKr=l(),qwe=a("ul"),sA=a("li"),jwe=a("strong"),pKr=o("bert"),_Kr=o(" \u2014 "),Poe=a("a"),uKr=o("FlaxBertForNextSentencePrediction"),bKr=o(" (BERT model)"),vKr=l(),F(lA.$$.fragment),SXe=l(),Mf=a("h2"),iA=a("a"),Dwe=a("span"),F(j$.$$.fragment),FKr=l(),Gwe=a("span"),TKr=o("FlaxAutoModelForImageClassification"),RXe=l(),Cr=a("div"),F(D$.$$.fragment),MKr=l(),Ef=a("p"),EKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Boe=a("a"),CKr=o("from_pretrained()"),wKr=o(" class method or the "),Ioe=a("a"),AKr=o("from_config()"),LKr=o(` class
method.`),yKr=l(),G$=a("p"),xKr=o("This class cannot be instantiated directly using "),Owe=a("code"),$Kr=o("__init__()"),kKr=o(" (throws an error)."),SKr=l(),oa=a("div"),F(O$.$$.fragment),RKr=l(),Vwe=a("p"),PKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BKr=l(),Cf=a("p"),IKr=o(`Note:
Loading a model from its configuration file does `),Xwe=a("strong"),NKr=o("not"),qKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),jKr=o("from_pretrained()"),DKr=o(" to load the model weights."),GKr=l(),F(dA.$$.fragment),OKr=l(),Kr=a("div"),F(V$.$$.fragment),VKr=l(),zwe=a("p"),XKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zKr=l(),$n=a("p"),QKr=o("The model class to instantiate is selected based on the "),Qwe=a("code"),WKr=o("model_type"),HKr=o(` property of the config object (either
passed as an argument or loaded from `),Wwe=a("code"),UKr=o("pretrained_model_name_or_path"),JKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hwe=a("code"),YKr=o("pretrained_model_name_or_path"),KKr=o(":"),ZKr=l(),X$=a("ul"),cA=a("li"),Uwe=a("strong"),eZr=o("beit"),oZr=o(" \u2014 "),qoe=a("a"),rZr=o("FlaxBeitForImageClassification"),tZr=o(" (BEiT model)"),aZr=l(),fA=a("li"),Jwe=a("strong"),nZr=o("vit"),sZr=o(" \u2014 "),joe=a("a"),lZr=o("FlaxViTForImageClassification"),iZr=o(" (ViT model)"),dZr=l(),F(mA.$$.fragment),PXe=l(),wf=a("h2"),gA=a("a"),Ywe=a("span"),F(z$.$$.fragment),cZr=l(),Kwe=a("span"),fZr=o("FlaxAutoModelForVision2Seq"),BXe=l(),wr=a("div"),F(Q$.$$.fragment),mZr=l(),Af=a("p"),gZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Doe=a("a"),hZr=o("from_pretrained()"),pZr=o(" class method or the "),Goe=a("a"),_Zr=o("from_config()"),uZr=o(` class
method.`),bZr=l(),W$=a("p"),vZr=o("This class cannot be instantiated directly using "),Zwe=a("code"),FZr=o("__init__()"),TZr=o(" (throws an error)."),MZr=l(),ra=a("div"),F(H$.$$.fragment),EZr=l(),eAe=a("p"),CZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wZr=l(),Lf=a("p"),AZr=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),LZr=o("not"),yZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),xZr=o("from_pretrained()"),$Zr=o(" to load the model weights."),kZr=l(),F(hA.$$.fragment),SZr=l(),Zr=a("div"),F(U$.$$.fragment),RZr=l(),rAe=a("p"),PZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BZr=l(),kn=a("p"),IZr=o("The model class to instantiate is selected based on the "),tAe=a("code"),NZr=o("model_type"),qZr=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),jZr=o("pretrained_model_name_or_path"),DZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),GZr=o("pretrained_model_name_or_path"),OZr=o(":"),VZr=l(),sAe=a("ul"),pA=a("li"),lAe=a("strong"),XZr=o("vision-encoder-decoder"),zZr=o(" \u2014 "),Voe=a("a"),QZr=o("FlaxVisionEncoderDecoderModel"),WZr=o(" (Vision Encoder decoder model)"),HZr=l(),F(_A.$$.fragment),this.h()},l(f){const u=VOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var J$=s(p);m=n(J$,"A",{id:!0,class:!0,href:!0});var iAe=s(m);_=n(iAe,"SPAN",{});var dAe=s(_);T(d.$$.fragment,dAe),dAe.forEach(t),iAe.forEach(t),h=i(J$),Eo=n(J$,"SPAN",{});var cAe=s(Eo);Ci=r(cAe,"Auto Classes"),cAe.forEach(t),J$.forEach(t),kf=i(f),nt=n(f,"P",{});var Y$=s(nt);wi=r(Y$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ai=n(Y$,"CODE",{});var fAe=s(Ai);IL=r(fAe,"from_pretrained()"),fAe.forEach(t),Sf=r(Y$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Y$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);Li=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var mAe=s(Rn);NL=r(mAe,"AutoConfig"),mAe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var gAe=s(Bn);qL=r(gAe,"AutoModel"),gAe.forEach(t),yi=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var hAe=s(In);jL=r(hAe,"AutoTokenizer"),hAe.forEach(t),xi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Rf=i(f),T($a.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var K$=s(Ae);pS=r(K$,"will create a model that is an instance of "),$i=n(K$,"A",{href:!0});var pAe=s($i);_S=r(pAe,"BertModel"),pAe.forEach(t),uS=r(K$,"."),K$.forEach(t),Co=i(f),ka=n(f,"P",{});var Z$=s(ka);bS=r(Z$,"There is one class of "),Pf=n(Z$,"CODE",{});var _Ae=s(Pf);vS=r(_Ae,"AutoModel"),_Ae.forEach(t),QQe=r(Z$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Z$.forEach(t),kOe=i(f),ki=n(f,"H2",{class:!0});var ek=s(ki);Bf=n(ek,"A",{id:!0,class:!0,href:!0});var uAe=s(Bf);qte=n(uAe,"SPAN",{});var bAe=s(qte);T(DL.$$.fragment,bAe),bAe.forEach(t),uAe.forEach(t),WQe=i(ek),jte=n(ek,"SPAN",{});var vAe=s(jte);HQe=r(vAe,"Extending the Auto Classes"),vAe.forEach(t),ek.forEach(t),SOe=i(f),Nn=n(f,"P",{});var yf=s(Nn);UQe=r(yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dte=n(yf,"CODE",{});var FAe=s(Dte);JQe=r(FAe,"NewModel"),FAe.forEach(t),YQe=r(yf,", make sure you have a "),Gte=n(yf,"CODE",{});var TAe=s(Gte);KQe=r(TAe,"NewModelConfig"),TAe.forEach(t),ZQe=r(yf,` then you can add those to the auto
classes like this:`),yf.forEach(t),ROe=i(f),T(GL.$$.fragment,f),POe=i(f),FS=n(f,"P",{});var MAe=s(FS);eWe=r(MAe,"You will then be able to use the auto classes like you would usually do!"),MAe.forEach(t),BOe=i(f),T(If.$$.fragment,f),IOe=i(f),Si=n(f,"H2",{class:!0});var ok=s(Si);Nf=n(ok,"A",{id:!0,class:!0,href:!0});var EAe=s(Nf);Ote=n(EAe,"SPAN",{});var CAe=s(Ote);T(OL.$$.fragment,CAe),CAe.forEach(t),EAe.forEach(t),oWe=i(ok),Vte=n(ok,"SPAN",{});var wAe=s(Vte);rWe=r(wAe,"AutoConfig"),wAe.forEach(t),ok.forEach(t),NOe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(VL.$$.fragment,tt),tWe=i(tt),XL=n(tt,"P",{});var rk=s(XL);aWe=r(rk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TS=n(rk,"A",{href:!0});var AAe=s(TS);nWe=r(AAe,"from_pretrained()"),AAe.forEach(t),sWe=r(rk," class method."),rk.forEach(t),lWe=i(tt),zL=n(tt,"P",{});var tk=s(zL);iWe=r(tk,"This class cannot be instantiated directly using "),Xte=n(tk,"CODE",{});var LAe=s(Xte);dWe=r(LAe,"__init__()"),LAe.forEach(t),cWe=r(tk," (throws an error)."),tk.forEach(t),fWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(QL.$$.fragment,at),mWe=i(at),zte=n(at,"P",{});var yAe=s(zte);gWe=r(yAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),yAe.forEach(t),hWe=i(at),Ri=n(at,"P",{});var xf=s(Ri);pWe=r(xf,"The configuration class to instantiate is selected based on the "),Qte=n(xf,"CODE",{});var xAe=s(Qte);_We=r(xAe,"model_type"),xAe.forEach(t),uWe=r(xf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wte=n(xf,"CODE",{});var $Ae=s(Wte);bWe=r($Ae,"pretrained_model_name_or_path"),$Ae.forEach(t),vWe=r(xf,":"),xf.forEach(t),FWe=i(at),A=n(at,"UL",{});var L=s(A);qf=n(L,"LI",{});var uA=s(qf);Hte=n(uA,"STRONG",{});var kAe=s(Hte);TWe=r(kAe,"albert"),kAe.forEach(t),MWe=r(uA," \u2014 "),MS=n(uA,"A",{href:!0});var SAe=s(MS);EWe=r(SAe,"AlbertConfig"),SAe.forEach(t),CWe=r(uA," (ALBERT model)"),uA.forEach(t),wWe=i(L),jf=n(L,"LI",{});var bA=s(jf);Ute=n(bA,"STRONG",{});var RAe=s(Ute);AWe=r(RAe,"bart"),RAe.forEach(t),LWe=r(bA," \u2014 "),ES=n(bA,"A",{href:!0});var PAe=s(ES);yWe=r(PAe,"BartConfig"),PAe.forEach(t),xWe=r(bA," (BART model)"),bA.forEach(t),$We=i(L),Df=n(L,"LI",{});var vA=s(Df);Jte=n(vA,"STRONG",{});var BAe=s(Jte);kWe=r(BAe,"beit"),BAe.forEach(t),SWe=r(vA," \u2014 "),CS=n(vA,"A",{href:!0});var IAe=s(CS);RWe=r(IAe,"BeitConfig"),IAe.forEach(t),PWe=r(vA," (BEiT model)"),vA.forEach(t),BWe=i(L),Gf=n(L,"LI",{});var FA=s(Gf);Yte=n(FA,"STRONG",{});var NAe=s(Yte);IWe=r(NAe,"bert"),NAe.forEach(t),NWe=r(FA," \u2014 "),wS=n(FA,"A",{href:!0});var qAe=s(wS);qWe=r(qAe,"BertConfig"),qAe.forEach(t),jWe=r(FA," (BERT model)"),FA.forEach(t),DWe=i(L),Of=n(L,"LI",{});var TA=s(Of);Kte=n(TA,"STRONG",{});var jAe=s(Kte);GWe=r(jAe,"bert-generation"),jAe.forEach(t),OWe=r(TA," \u2014 "),AS=n(TA,"A",{href:!0});var DAe=s(AS);VWe=r(DAe,"BertGenerationConfig"),DAe.forEach(t),XWe=r(TA," (Bert Generation model)"),TA.forEach(t),zWe=i(L),Vf=n(L,"LI",{});var MA=s(Vf);Zte=n(MA,"STRONG",{});var GAe=s(Zte);QWe=r(GAe,"big_bird"),GAe.forEach(t),WWe=r(MA," \u2014 "),LS=n(MA,"A",{href:!0});var OAe=s(LS);HWe=r(OAe,"BigBirdConfig"),OAe.forEach(t),UWe=r(MA," (BigBird model)"),MA.forEach(t),JWe=i(L),Xf=n(L,"LI",{});var EA=s(Xf);eae=n(EA,"STRONG",{});var VAe=s(eae);YWe=r(VAe,"bigbird_pegasus"),VAe.forEach(t),KWe=r(EA," \u2014 "),yS=n(EA,"A",{href:!0});var XAe=s(yS);ZWe=r(XAe,"BigBirdPegasusConfig"),XAe.forEach(t),eHe=r(EA," (BigBird-Pegasus model)"),EA.forEach(t),oHe=i(L),zf=n(L,"LI",{});var CA=s(zf);oae=n(CA,"STRONG",{});var zAe=s(oae);rHe=r(zAe,"blenderbot"),zAe.forEach(t),tHe=r(CA," \u2014 "),xS=n(CA,"A",{href:!0});var QAe=s(xS);aHe=r(QAe,"BlenderbotConfig"),QAe.forEach(t),nHe=r(CA," (Blenderbot model)"),CA.forEach(t),sHe=i(L),Qf=n(L,"LI",{});var wA=s(Qf);rae=n(wA,"STRONG",{});var WAe=s(rae);lHe=r(WAe,"blenderbot-small"),WAe.forEach(t),iHe=r(wA," \u2014 "),$S=n(wA,"A",{href:!0});var HAe=s($S);dHe=r(HAe,"BlenderbotSmallConfig"),HAe.forEach(t),cHe=r(wA," (BlenderbotSmall model)"),wA.forEach(t),fHe=i(L),Wf=n(L,"LI",{});var AA=s(Wf);tae=n(AA,"STRONG",{});var UAe=s(tae);mHe=r(UAe,"bloom"),UAe.forEach(t),gHe=r(AA," \u2014 "),kS=n(AA,"A",{href:!0});var JAe=s(kS);hHe=r(JAe,"BloomConfig"),JAe.forEach(t),pHe=r(AA," (BLOOM model)"),AA.forEach(t),_He=i(L),Hf=n(L,"LI",{});var LA=s(Hf);aae=n(LA,"STRONG",{});var YAe=s(aae);uHe=r(YAe,"camembert"),YAe.forEach(t),bHe=r(LA," \u2014 "),SS=n(LA,"A",{href:!0});var KAe=s(SS);vHe=r(KAe,"CamembertConfig"),KAe.forEach(t),FHe=r(LA," (CamemBERT model)"),LA.forEach(t),THe=i(L),Uf=n(L,"LI",{});var yA=s(Uf);nae=n(yA,"STRONG",{});var ZAe=s(nae);MHe=r(ZAe,"canine"),ZAe.forEach(t),EHe=r(yA," \u2014 "),RS=n(yA,"A",{href:!0});var e6e=s(RS);CHe=r(e6e,"CanineConfig"),e6e.forEach(t),wHe=r(yA," (CANINE model)"),yA.forEach(t),AHe=i(L),Jf=n(L,"LI",{});var xA=s(Jf);sae=n(xA,"STRONG",{});var o6e=s(sae);LHe=r(o6e,"clip"),o6e.forEach(t),yHe=r(xA," \u2014 "),PS=n(xA,"A",{href:!0});var r6e=s(PS);xHe=r(r6e,"CLIPConfig"),r6e.forEach(t),$He=r(xA," (CLIP model)"),xA.forEach(t),kHe=i(L),Yf=n(L,"LI",{});var $A=s(Yf);lae=n($A,"STRONG",{});var t6e=s(lae);SHe=r(t6e,"codegen"),t6e.forEach(t),RHe=r($A," \u2014 "),BS=n($A,"A",{href:!0});var a6e=s(BS);PHe=r(a6e,"CodeGenConfig"),a6e.forEach(t),BHe=r($A," (CodeGen model)"),$A.forEach(t),IHe=i(L),Kf=n(L,"LI",{});var kA=s(Kf);iae=n(kA,"STRONG",{});var n6e=s(iae);NHe=r(n6e,"convbert"),n6e.forEach(t),qHe=r(kA," \u2014 "),IS=n(kA,"A",{href:!0});var s6e=s(IS);jHe=r(s6e,"ConvBertConfig"),s6e.forEach(t),DHe=r(kA," (ConvBERT model)"),kA.forEach(t),GHe=i(L),Zf=n(L,"LI",{});var SA=s(Zf);dae=n(SA,"STRONG",{});var l6e=s(dae);OHe=r(l6e,"convnext"),l6e.forEach(t),VHe=r(SA," \u2014 "),NS=n(SA,"A",{href:!0});var i6e=s(NS);XHe=r(i6e,"ConvNextConfig"),i6e.forEach(t),zHe=r(SA," (ConvNeXT model)"),SA.forEach(t),QHe=i(L),em=n(L,"LI",{});var RA=s(em);cae=n(RA,"STRONG",{});var d6e=s(cae);WHe=r(d6e,"ctrl"),d6e.forEach(t),HHe=r(RA," \u2014 "),qS=n(RA,"A",{href:!0});var c6e=s(qS);UHe=r(c6e,"CTRLConfig"),c6e.forEach(t),JHe=r(RA," (CTRL model)"),RA.forEach(t),YHe=i(L),om=n(L,"LI",{});var PA=s(om);fae=n(PA,"STRONG",{});var f6e=s(fae);KHe=r(f6e,"cvt"),f6e.forEach(t),ZHe=r(PA," \u2014 "),jS=n(PA,"A",{href:!0});var m6e=s(jS);eUe=r(m6e,"CvtConfig"),m6e.forEach(t),oUe=r(PA," (CvT model)"),PA.forEach(t),rUe=i(L),rm=n(L,"LI",{});var BA=s(rm);mae=n(BA,"STRONG",{});var g6e=s(mae);tUe=r(g6e,"data2vec-audio"),g6e.forEach(t),aUe=r(BA," \u2014 "),DS=n(BA,"A",{href:!0});var h6e=s(DS);nUe=r(h6e,"Data2VecAudioConfig"),h6e.forEach(t),sUe=r(BA," (Data2VecAudio model)"),BA.forEach(t),lUe=i(L),tm=n(L,"LI",{});var IA=s(tm);gae=n(IA,"STRONG",{});var p6e=s(gae);iUe=r(p6e,"data2vec-text"),p6e.forEach(t),dUe=r(IA," \u2014 "),GS=n(IA,"A",{href:!0});var _6e=s(GS);cUe=r(_6e,"Data2VecTextConfig"),_6e.forEach(t),fUe=r(IA," (Data2VecText model)"),IA.forEach(t),mUe=i(L),am=n(L,"LI",{});var NA=s(am);hae=n(NA,"STRONG",{});var u6e=s(hae);gUe=r(u6e,"data2vec-vision"),u6e.forEach(t),hUe=r(NA," \u2014 "),OS=n(NA,"A",{href:!0});var b6e=s(OS);pUe=r(b6e,"Data2VecVisionConfig"),b6e.forEach(t),_Ue=r(NA," (Data2VecVision model)"),NA.forEach(t),uUe=i(L),nm=n(L,"LI",{});var qA=s(nm);pae=n(qA,"STRONG",{});var v6e=s(pae);bUe=r(v6e,"deberta"),v6e.forEach(t),vUe=r(qA," \u2014 "),VS=n(qA,"A",{href:!0});var F6e=s(VS);FUe=r(F6e,"DebertaConfig"),F6e.forEach(t),TUe=r(qA," (DeBERTa model)"),qA.forEach(t),MUe=i(L),sm=n(L,"LI",{});var jA=s(sm);_ae=n(jA,"STRONG",{});var T6e=s(_ae);EUe=r(T6e,"deberta-v2"),T6e.forEach(t),CUe=r(jA," \u2014 "),XS=n(jA,"A",{href:!0});var M6e=s(XS);wUe=r(M6e,"DebertaV2Config"),M6e.forEach(t),AUe=r(jA," (DeBERTa-v2 model)"),jA.forEach(t),LUe=i(L),lm=n(L,"LI",{});var DA=s(lm);uae=n(DA,"STRONG",{});var JZr=s(uae);yUe=r(JZr,"decision_transformer"),JZr.forEach(t),xUe=r(DA," \u2014 "),zS=n(DA,"A",{href:!0});var YZr=s(zS);$Ue=r(YZr,"DecisionTransformerConfig"),YZr.forEach(t),kUe=r(DA," (Decision Transformer model)"),DA.forEach(t),SUe=i(L),im=n(L,"LI",{});var E6e=s(im);bae=n(E6e,"STRONG",{});var KZr=s(bae);RUe=r(KZr,"deit"),KZr.forEach(t),PUe=r(E6e," \u2014 "),QS=n(E6e,"A",{href:!0});var ZZr=s(QS);BUe=r(ZZr,"DeiTConfig"),ZZr.forEach(t),IUe=r(E6e," (DeiT model)"),E6e.forEach(t),NUe=i(L),dm=n(L,"LI",{});var C6e=s(dm);vae=n(C6e,"STRONG",{});var eet=s(vae);qUe=r(eet,"detr"),eet.forEach(t),jUe=r(C6e," \u2014 "),WS=n(C6e,"A",{href:!0});var oet=s(WS);DUe=r(oet,"DetrConfig"),oet.forEach(t),GUe=r(C6e," (DETR model)"),C6e.forEach(t),OUe=i(L),cm=n(L,"LI",{});var w6e=s(cm);Fae=n(w6e,"STRONG",{});var ret=s(Fae);VUe=r(ret,"distilbert"),ret.forEach(t),XUe=r(w6e," \u2014 "),HS=n(w6e,"A",{href:!0});var tet=s(HS);zUe=r(tet,"DistilBertConfig"),tet.forEach(t),QUe=r(w6e," (DistilBERT model)"),w6e.forEach(t),WUe=i(L),fm=n(L,"LI",{});var A6e=s(fm);Tae=n(A6e,"STRONG",{});var aet=s(Tae);HUe=r(aet,"dpr"),aet.forEach(t),UUe=r(A6e," \u2014 "),US=n(A6e,"A",{href:!0});var net=s(US);JUe=r(net,"DPRConfig"),net.forEach(t),YUe=r(A6e," (DPR model)"),A6e.forEach(t),KUe=i(L),mm=n(L,"LI",{});var L6e=s(mm);Mae=n(L6e,"STRONG",{});var set=s(Mae);ZUe=r(set,"dpt"),set.forEach(t),eJe=r(L6e," \u2014 "),JS=n(L6e,"A",{href:!0});var iet=s(JS);oJe=r(iet,"DPTConfig"),iet.forEach(t),rJe=r(L6e," (DPT model)"),L6e.forEach(t),tJe=i(L),gm=n(L,"LI",{});var y6e=s(gm);Eae=n(y6e,"STRONG",{});var det=s(Eae);aJe=r(det,"electra"),det.forEach(t),nJe=r(y6e," \u2014 "),YS=n(y6e,"A",{href:!0});var cet=s(YS);sJe=r(cet,"ElectraConfig"),cet.forEach(t),lJe=r(y6e," (ELECTRA model)"),y6e.forEach(t),iJe=i(L),hm=n(L,"LI",{});var x6e=s(hm);Cae=n(x6e,"STRONG",{});var fet=s(Cae);dJe=r(fet,"encoder-decoder"),fet.forEach(t),cJe=r(x6e," \u2014 "),KS=n(x6e,"A",{href:!0});var met=s(KS);fJe=r(met,"EncoderDecoderConfig"),met.forEach(t),mJe=r(x6e," (Encoder decoder model)"),x6e.forEach(t),gJe=i(L),pm=n(L,"LI",{});var $6e=s(pm);wae=n($6e,"STRONG",{});var get=s(wae);hJe=r(get,"flaubert"),get.forEach(t),pJe=r($6e," \u2014 "),ZS=n($6e,"A",{href:!0});var het=s(ZS);_Je=r(het,"FlaubertConfig"),het.forEach(t),uJe=r($6e," (FlauBERT model)"),$6e.forEach(t),bJe=i(L),_m=n(L,"LI",{});var k6e=s(_m);Aae=n(k6e,"STRONG",{});var pet=s(Aae);vJe=r(pet,"flava"),pet.forEach(t),FJe=r(k6e," \u2014 "),eR=n(k6e,"A",{href:!0});var _et=s(eR);TJe=r(_et,"FlavaConfig"),_et.forEach(t),MJe=r(k6e," (FLAVA model)"),k6e.forEach(t),EJe=i(L),um=n(L,"LI",{});var S6e=s(um);Lae=n(S6e,"STRONG",{});var uet=s(Lae);CJe=r(uet,"fnet"),uet.forEach(t),wJe=r(S6e," \u2014 "),oR=n(S6e,"A",{href:!0});var bet=s(oR);AJe=r(bet,"FNetConfig"),bet.forEach(t),LJe=r(S6e," (FNet model)"),S6e.forEach(t),yJe=i(L),bm=n(L,"LI",{});var R6e=s(bm);yae=n(R6e,"STRONG",{});var vet=s(yae);xJe=r(vet,"fsmt"),vet.forEach(t),$Je=r(R6e," \u2014 "),rR=n(R6e,"A",{href:!0});var Fet=s(rR);kJe=r(Fet,"FSMTConfig"),Fet.forEach(t),SJe=r(R6e," (FairSeq Machine-Translation model)"),R6e.forEach(t),RJe=i(L),vm=n(L,"LI",{});var P6e=s(vm);xae=n(P6e,"STRONG",{});var Tet=s(xae);PJe=r(Tet,"funnel"),Tet.forEach(t),BJe=r(P6e," \u2014 "),tR=n(P6e,"A",{href:!0});var Met=s(tR);IJe=r(Met,"FunnelConfig"),Met.forEach(t),NJe=r(P6e," (Funnel Transformer model)"),P6e.forEach(t),qJe=i(L),Fm=n(L,"LI",{});var B6e=s(Fm);$ae=n(B6e,"STRONG",{});var Eet=s($ae);jJe=r(Eet,"glpn"),Eet.forEach(t),DJe=r(B6e," \u2014 "),aR=n(B6e,"A",{href:!0});var Cet=s(aR);GJe=r(Cet,"GLPNConfig"),Cet.forEach(t),OJe=r(B6e," (GLPN model)"),B6e.forEach(t),VJe=i(L),Tm=n(L,"LI",{});var I6e=s(Tm);kae=n(I6e,"STRONG",{});var wet=s(kae);XJe=r(wet,"gpt2"),wet.forEach(t),zJe=r(I6e," \u2014 "),nR=n(I6e,"A",{href:!0});var Aet=s(nR);QJe=r(Aet,"GPT2Config"),Aet.forEach(t),WJe=r(I6e," (OpenAI GPT-2 model)"),I6e.forEach(t),HJe=i(L),Mm=n(L,"LI",{});var N6e=s(Mm);Sae=n(N6e,"STRONG",{});var Let=s(Sae);UJe=r(Let,"gpt_neo"),Let.forEach(t),JJe=r(N6e," \u2014 "),sR=n(N6e,"A",{href:!0});var yet=s(sR);YJe=r(yet,"GPTNeoConfig"),yet.forEach(t),KJe=r(N6e," (GPT Neo model)"),N6e.forEach(t),ZJe=i(L),Em=n(L,"LI",{});var q6e=s(Em);Rae=n(q6e,"STRONG",{});var xet=s(Rae);eYe=r(xet,"gpt_neox"),xet.forEach(t),oYe=r(q6e," \u2014 "),lR=n(q6e,"A",{href:!0});var $et=s(lR);rYe=r($et,"GPTNeoXConfig"),$et.forEach(t),tYe=r(q6e," (GPT NeoX model)"),q6e.forEach(t),aYe=i(L),Cm=n(L,"LI",{});var j6e=s(Cm);Pae=n(j6e,"STRONG",{});var ket=s(Pae);nYe=r(ket,"gptj"),ket.forEach(t),sYe=r(j6e," \u2014 "),iR=n(j6e,"A",{href:!0});var Set=s(iR);lYe=r(Set,"GPTJConfig"),Set.forEach(t),iYe=r(j6e," (GPT-J model)"),j6e.forEach(t),dYe=i(L),wm=n(L,"LI",{});var D6e=s(wm);Bae=n(D6e,"STRONG",{});var Ret=s(Bae);cYe=r(Ret,"groupvit"),Ret.forEach(t),fYe=r(D6e," \u2014 "),dR=n(D6e,"A",{href:!0});var Pet=s(dR);mYe=r(Pet,"GroupViTConfig"),Pet.forEach(t),gYe=r(D6e," (GroupViT model)"),D6e.forEach(t),hYe=i(L),Am=n(L,"LI",{});var G6e=s(Am);Iae=n(G6e,"STRONG",{});var Bet=s(Iae);pYe=r(Bet,"hubert"),Bet.forEach(t),_Ye=r(G6e," \u2014 "),cR=n(G6e,"A",{href:!0});var Iet=s(cR);uYe=r(Iet,"HubertConfig"),Iet.forEach(t),bYe=r(G6e," (Hubert model)"),G6e.forEach(t),vYe=i(L),Lm=n(L,"LI",{});var O6e=s(Lm);Nae=n(O6e,"STRONG",{});var Net=s(Nae);FYe=r(Net,"ibert"),Net.forEach(t),TYe=r(O6e," \u2014 "),fR=n(O6e,"A",{href:!0});var qet=s(fR);MYe=r(qet,"IBertConfig"),qet.forEach(t),EYe=r(O6e," (I-BERT model)"),O6e.forEach(t),CYe=i(L),ym=n(L,"LI",{});var V6e=s(ym);qae=n(V6e,"STRONG",{});var jet=s(qae);wYe=r(jet,"imagegpt"),jet.forEach(t),AYe=r(V6e," \u2014 "),mR=n(V6e,"A",{href:!0});var Det=s(mR);LYe=r(Det,"ImageGPTConfig"),Det.forEach(t),yYe=r(V6e," (ImageGPT model)"),V6e.forEach(t),xYe=i(L),xm=n(L,"LI",{});var X6e=s(xm);jae=n(X6e,"STRONG",{});var Get=s(jae);$Ye=r(Get,"layoutlm"),Get.forEach(t),kYe=r(X6e," \u2014 "),gR=n(X6e,"A",{href:!0});var Oet=s(gR);SYe=r(Oet,"LayoutLMConfig"),Oet.forEach(t),RYe=r(X6e," (LayoutLM model)"),X6e.forEach(t),PYe=i(L),$m=n(L,"LI",{});var z6e=s($m);Dae=n(z6e,"STRONG",{});var Vet=s(Dae);BYe=r(Vet,"layoutlmv2"),Vet.forEach(t),IYe=r(z6e," \u2014 "),hR=n(z6e,"A",{href:!0});var Xet=s(hR);NYe=r(Xet,"LayoutLMv2Config"),Xet.forEach(t),qYe=r(z6e," (LayoutLMv2 model)"),z6e.forEach(t),jYe=i(L),km=n(L,"LI",{});var Q6e=s(km);Gae=n(Q6e,"STRONG",{});var zet=s(Gae);DYe=r(zet,"layoutlmv3"),zet.forEach(t),GYe=r(Q6e," \u2014 "),pR=n(Q6e,"A",{href:!0});var Qet=s(pR);OYe=r(Qet,"LayoutLMv3Config"),Qet.forEach(t),VYe=r(Q6e," (LayoutLMv3 model)"),Q6e.forEach(t),XYe=i(L),Sm=n(L,"LI",{});var W6e=s(Sm);Oae=n(W6e,"STRONG",{});var Wet=s(Oae);zYe=r(Wet,"led"),Wet.forEach(t),QYe=r(W6e," \u2014 "),_R=n(W6e,"A",{href:!0});var Het=s(_R);WYe=r(Het,"LEDConfig"),Het.forEach(t),HYe=r(W6e," (LED model)"),W6e.forEach(t),UYe=i(L),Rm=n(L,"LI",{});var H6e=s(Rm);Vae=n(H6e,"STRONG",{});var Uet=s(Vae);JYe=r(Uet,"levit"),Uet.forEach(t),YYe=r(H6e," \u2014 "),uR=n(H6e,"A",{href:!0});var Jet=s(uR);KYe=r(Jet,"LevitConfig"),Jet.forEach(t),ZYe=r(H6e," (LeViT model)"),H6e.forEach(t),eKe=i(L),Pm=n(L,"LI",{});var U6e=s(Pm);Xae=n(U6e,"STRONG",{});var Yet=s(Xae);oKe=r(Yet,"longformer"),Yet.forEach(t),rKe=r(U6e," \u2014 "),bR=n(U6e,"A",{href:!0});var Ket=s(bR);tKe=r(Ket,"LongformerConfig"),Ket.forEach(t),aKe=r(U6e," (Longformer model)"),U6e.forEach(t),nKe=i(L),Bm=n(L,"LI",{});var J6e=s(Bm);zae=n(J6e,"STRONG",{});var Zet=s(zae);sKe=r(Zet,"longt5"),Zet.forEach(t),lKe=r(J6e," \u2014 "),vR=n(J6e,"A",{href:!0});var eot=s(vR);iKe=r(eot,"LongT5Config"),eot.forEach(t),dKe=r(J6e," (LongT5 model)"),J6e.forEach(t),cKe=i(L),Im=n(L,"LI",{});var Y6e=s(Im);Qae=n(Y6e,"STRONG",{});var oot=s(Qae);fKe=r(oot,"luke"),oot.forEach(t),mKe=r(Y6e," \u2014 "),FR=n(Y6e,"A",{href:!0});var rot=s(FR);gKe=r(rot,"LukeConfig"),rot.forEach(t),hKe=r(Y6e," (LUKE model)"),Y6e.forEach(t),pKe=i(L),Nm=n(L,"LI",{});var K6e=s(Nm);Wae=n(K6e,"STRONG",{});var tot=s(Wae);_Ke=r(tot,"lxmert"),tot.forEach(t),uKe=r(K6e," \u2014 "),TR=n(K6e,"A",{href:!0});var aot=s(TR);bKe=r(aot,"LxmertConfig"),aot.forEach(t),vKe=r(K6e," (LXMERT model)"),K6e.forEach(t),FKe=i(L),qm=n(L,"LI",{});var Z6e=s(qm);Hae=n(Z6e,"STRONG",{});var not=s(Hae);TKe=r(not,"m2m_100"),not.forEach(t),MKe=r(Z6e," \u2014 "),MR=n(Z6e,"A",{href:!0});var sot=s(MR);EKe=r(sot,"M2M100Config"),sot.forEach(t),CKe=r(Z6e," (M2M100 model)"),Z6e.forEach(t),wKe=i(L),jm=n(L,"LI",{});var eLe=s(jm);Uae=n(eLe,"STRONG",{});var lot=s(Uae);AKe=r(lot,"marian"),lot.forEach(t),LKe=r(eLe," \u2014 "),ER=n(eLe,"A",{href:!0});var iot=s(ER);yKe=r(iot,"MarianConfig"),iot.forEach(t),xKe=r(eLe," (Marian model)"),eLe.forEach(t),$Ke=i(L),Dm=n(L,"LI",{});var oLe=s(Dm);Jae=n(oLe,"STRONG",{});var dot=s(Jae);kKe=r(dot,"maskformer"),dot.forEach(t),SKe=r(oLe," \u2014 "),CR=n(oLe,"A",{href:!0});var cot=s(CR);RKe=r(cot,"MaskFormerConfig"),cot.forEach(t),PKe=r(oLe," (MaskFormer model)"),oLe.forEach(t),BKe=i(L),Gm=n(L,"LI",{});var rLe=s(Gm);Yae=n(rLe,"STRONG",{});var fot=s(Yae);IKe=r(fot,"mbart"),fot.forEach(t),NKe=r(rLe," \u2014 "),wR=n(rLe,"A",{href:!0});var mot=s(wR);qKe=r(mot,"MBartConfig"),mot.forEach(t),jKe=r(rLe," (mBART model)"),rLe.forEach(t),DKe=i(L),Om=n(L,"LI",{});var tLe=s(Om);Kae=n(tLe,"STRONG",{});var got=s(Kae);GKe=r(got,"mctct"),got.forEach(t),OKe=r(tLe," \u2014 "),AR=n(tLe,"A",{href:!0});var hot=s(AR);VKe=r(hot,"MCTCTConfig"),hot.forEach(t),XKe=r(tLe," (M-CTC-T model)"),tLe.forEach(t),zKe=i(L),Vm=n(L,"LI",{});var aLe=s(Vm);Zae=n(aLe,"STRONG",{});var pot=s(Zae);QKe=r(pot,"megatron-bert"),pot.forEach(t),WKe=r(aLe," \u2014 "),LR=n(aLe,"A",{href:!0});var _ot=s(LR);HKe=r(_ot,"MegatronBertConfig"),_ot.forEach(t),UKe=r(aLe," (Megatron-BERT model)"),aLe.forEach(t),JKe=i(L),Xm=n(L,"LI",{});var nLe=s(Xm);ene=n(nLe,"STRONG",{});var uot=s(ene);YKe=r(uot,"mobilebert"),uot.forEach(t),KKe=r(nLe," \u2014 "),yR=n(nLe,"A",{href:!0});var bot=s(yR);ZKe=r(bot,"MobileBertConfig"),bot.forEach(t),eZe=r(nLe," (MobileBERT model)"),nLe.forEach(t),oZe=i(L),zm=n(L,"LI",{});var sLe=s(zm);one=n(sLe,"STRONG",{});var vot=s(one);rZe=r(vot,"mpnet"),vot.forEach(t),tZe=r(sLe," \u2014 "),xR=n(sLe,"A",{href:!0});var Fot=s(xR);aZe=r(Fot,"MPNetConfig"),Fot.forEach(t),nZe=r(sLe," (MPNet model)"),sLe.forEach(t),sZe=i(L),Qm=n(L,"LI",{});var lLe=s(Qm);rne=n(lLe,"STRONG",{});var Tot=s(rne);lZe=r(Tot,"mt5"),Tot.forEach(t),iZe=r(lLe," \u2014 "),$R=n(lLe,"A",{href:!0});var Mot=s($R);dZe=r(Mot,"MT5Config"),Mot.forEach(t),cZe=r(lLe," (MT5 model)"),lLe.forEach(t),fZe=i(L),Wm=n(L,"LI",{});var iLe=s(Wm);tne=n(iLe,"STRONG",{});var Eot=s(tne);mZe=r(Eot,"nezha"),Eot.forEach(t),gZe=r(iLe," \u2014 "),kR=n(iLe,"A",{href:!0});var Cot=s(kR);hZe=r(Cot,"NezhaConfig"),Cot.forEach(t),pZe=r(iLe," (Nezha model)"),iLe.forEach(t),_Ze=i(L),Hm=n(L,"LI",{});var dLe=s(Hm);ane=n(dLe,"STRONG",{});var wot=s(ane);uZe=r(wot,"nystromformer"),wot.forEach(t),bZe=r(dLe," \u2014 "),SR=n(dLe,"A",{href:!0});var Aot=s(SR);vZe=r(Aot,"NystromformerConfig"),Aot.forEach(t),FZe=r(dLe," (Nystr\xF6mformer model)"),dLe.forEach(t),TZe=i(L),Um=n(L,"LI",{});var cLe=s(Um);nne=n(cLe,"STRONG",{});var Lot=s(nne);MZe=r(Lot,"openai-gpt"),Lot.forEach(t),EZe=r(cLe," \u2014 "),RR=n(cLe,"A",{href:!0});var yot=s(RR);CZe=r(yot,"OpenAIGPTConfig"),yot.forEach(t),wZe=r(cLe," (OpenAI GPT model)"),cLe.forEach(t),AZe=i(L),Jm=n(L,"LI",{});var fLe=s(Jm);sne=n(fLe,"STRONG",{});var xot=s(sne);LZe=r(xot,"opt"),xot.forEach(t),yZe=r(fLe," \u2014 "),PR=n(fLe,"A",{href:!0});var $ot=s(PR);xZe=r($ot,"OPTConfig"),$ot.forEach(t),$Ze=r(fLe," (OPT model)"),fLe.forEach(t),kZe=i(L),Ym=n(L,"LI",{});var mLe=s(Ym);lne=n(mLe,"STRONG",{});var kot=s(lne);SZe=r(kot,"pegasus"),kot.forEach(t),RZe=r(mLe," \u2014 "),BR=n(mLe,"A",{href:!0});var Sot=s(BR);PZe=r(Sot,"PegasusConfig"),Sot.forEach(t),BZe=r(mLe," (Pegasus model)"),mLe.forEach(t),IZe=i(L),Km=n(L,"LI",{});var gLe=s(Km);ine=n(gLe,"STRONG",{});var Rot=s(ine);NZe=r(Rot,"perceiver"),Rot.forEach(t),qZe=r(gLe," \u2014 "),IR=n(gLe,"A",{href:!0});var Pot=s(IR);jZe=r(Pot,"PerceiverConfig"),Pot.forEach(t),DZe=r(gLe," (Perceiver model)"),gLe.forEach(t),GZe=i(L),Zm=n(L,"LI",{});var hLe=s(Zm);dne=n(hLe,"STRONG",{});var Bot=s(dne);OZe=r(Bot,"plbart"),Bot.forEach(t),VZe=r(hLe," \u2014 "),NR=n(hLe,"A",{href:!0});var Iot=s(NR);XZe=r(Iot,"PLBartConfig"),Iot.forEach(t),zZe=r(hLe," (PLBart model)"),hLe.forEach(t),QZe=i(L),eg=n(L,"LI",{});var pLe=s(eg);cne=n(pLe,"STRONG",{});var Not=s(cne);WZe=r(Not,"poolformer"),Not.forEach(t),HZe=r(pLe," \u2014 "),qR=n(pLe,"A",{href:!0});var qot=s(qR);UZe=r(qot,"PoolFormerConfig"),qot.forEach(t),JZe=r(pLe," (PoolFormer model)"),pLe.forEach(t),YZe=i(L),og=n(L,"LI",{});var _Le=s(og);fne=n(_Le,"STRONG",{});var jot=s(fne);KZe=r(jot,"prophetnet"),jot.forEach(t),ZZe=r(_Le," \u2014 "),jR=n(_Le,"A",{href:!0});var Dot=s(jR);eeo=r(Dot,"ProphetNetConfig"),Dot.forEach(t),oeo=r(_Le," (ProphetNet model)"),_Le.forEach(t),reo=i(L),rg=n(L,"LI",{});var uLe=s(rg);mne=n(uLe,"STRONG",{});var Got=s(mne);teo=r(Got,"qdqbert"),Got.forEach(t),aeo=r(uLe," \u2014 "),DR=n(uLe,"A",{href:!0});var Oot=s(DR);neo=r(Oot,"QDQBertConfig"),Oot.forEach(t),seo=r(uLe," (QDQBert model)"),uLe.forEach(t),leo=i(L),tg=n(L,"LI",{});var bLe=s(tg);gne=n(bLe,"STRONG",{});var Vot=s(gne);ieo=r(Vot,"rag"),Vot.forEach(t),deo=r(bLe," \u2014 "),GR=n(bLe,"A",{href:!0});var Xot=s(GR);ceo=r(Xot,"RagConfig"),Xot.forEach(t),feo=r(bLe," (RAG model)"),bLe.forEach(t),meo=i(L),ag=n(L,"LI",{});var vLe=s(ag);hne=n(vLe,"STRONG",{});var zot=s(hne);geo=r(zot,"realm"),zot.forEach(t),heo=r(vLe," \u2014 "),OR=n(vLe,"A",{href:!0});var Qot=s(OR);peo=r(Qot,"RealmConfig"),Qot.forEach(t),_eo=r(vLe," (REALM model)"),vLe.forEach(t),ueo=i(L),ng=n(L,"LI",{});var FLe=s(ng);pne=n(FLe,"STRONG",{});var Wot=s(pne);beo=r(Wot,"reformer"),Wot.forEach(t),veo=r(FLe," \u2014 "),VR=n(FLe,"A",{href:!0});var Hot=s(VR);Feo=r(Hot,"ReformerConfig"),Hot.forEach(t),Teo=r(FLe," (Reformer model)"),FLe.forEach(t),Meo=i(L),sg=n(L,"LI",{});var TLe=s(sg);_ne=n(TLe,"STRONG",{});var Uot=s(_ne);Eeo=r(Uot,"regnet"),Uot.forEach(t),Ceo=r(TLe," \u2014 "),XR=n(TLe,"A",{href:!0});var Jot=s(XR);weo=r(Jot,"RegNetConfig"),Jot.forEach(t),Aeo=r(TLe," (RegNet model)"),TLe.forEach(t),Leo=i(L),lg=n(L,"LI",{});var MLe=s(lg);une=n(MLe,"STRONG",{});var Yot=s(une);yeo=r(Yot,"rembert"),Yot.forEach(t),xeo=r(MLe," \u2014 "),zR=n(MLe,"A",{href:!0});var Kot=s(zR);$eo=r(Kot,"RemBertConfig"),Kot.forEach(t),keo=r(MLe," (RemBERT model)"),MLe.forEach(t),Seo=i(L),ig=n(L,"LI",{});var ELe=s(ig);bne=n(ELe,"STRONG",{});var Zot=s(bne);Reo=r(Zot,"resnet"),Zot.forEach(t),Peo=r(ELe," \u2014 "),QR=n(ELe,"A",{href:!0});var ert=s(QR);Beo=r(ert,"ResNetConfig"),ert.forEach(t),Ieo=r(ELe," (ResNet model)"),ELe.forEach(t),Neo=i(L),dg=n(L,"LI",{});var CLe=s(dg);vne=n(CLe,"STRONG",{});var ort=s(vne);qeo=r(ort,"retribert"),ort.forEach(t),jeo=r(CLe," \u2014 "),WR=n(CLe,"A",{href:!0});var rrt=s(WR);Deo=r(rrt,"RetriBertConfig"),rrt.forEach(t),Geo=r(CLe," (RetriBERT model)"),CLe.forEach(t),Oeo=i(L),cg=n(L,"LI",{});var wLe=s(cg);Fne=n(wLe,"STRONG",{});var trt=s(Fne);Veo=r(trt,"roberta"),trt.forEach(t),Xeo=r(wLe," \u2014 "),HR=n(wLe,"A",{href:!0});var art=s(HR);zeo=r(art,"RobertaConfig"),art.forEach(t),Qeo=r(wLe," (RoBERTa model)"),wLe.forEach(t),Weo=i(L),fg=n(L,"LI",{});var ALe=s(fg);Tne=n(ALe,"STRONG",{});var nrt=s(Tne);Heo=r(nrt,"roformer"),nrt.forEach(t),Ueo=r(ALe," \u2014 "),UR=n(ALe,"A",{href:!0});var srt=s(UR);Jeo=r(srt,"RoFormerConfig"),srt.forEach(t),Yeo=r(ALe," (RoFormer model)"),ALe.forEach(t),Keo=i(L),mg=n(L,"LI",{});var LLe=s(mg);Mne=n(LLe,"STRONG",{});var lrt=s(Mne);Zeo=r(lrt,"segformer"),lrt.forEach(t),eoo=r(LLe," \u2014 "),JR=n(LLe,"A",{href:!0});var irt=s(JR);ooo=r(irt,"SegformerConfig"),irt.forEach(t),roo=r(LLe," (SegFormer model)"),LLe.forEach(t),too=i(L),gg=n(L,"LI",{});var yLe=s(gg);Ene=n(yLe,"STRONG",{});var drt=s(Ene);aoo=r(drt,"sew"),drt.forEach(t),noo=r(yLe," \u2014 "),YR=n(yLe,"A",{href:!0});var crt=s(YR);soo=r(crt,"SEWConfig"),crt.forEach(t),loo=r(yLe," (SEW model)"),yLe.forEach(t),ioo=i(L),hg=n(L,"LI",{});var xLe=s(hg);Cne=n(xLe,"STRONG",{});var frt=s(Cne);doo=r(frt,"sew-d"),frt.forEach(t),coo=r(xLe," \u2014 "),KR=n(xLe,"A",{href:!0});var mrt=s(KR);foo=r(mrt,"SEWDConfig"),mrt.forEach(t),moo=r(xLe," (SEW-D model)"),xLe.forEach(t),goo=i(L),pg=n(L,"LI",{});var $Le=s(pg);wne=n($Le,"STRONG",{});var grt=s(wne);hoo=r(grt,"speech-encoder-decoder"),grt.forEach(t),poo=r($Le," \u2014 "),ZR=n($Le,"A",{href:!0});var hrt=s(ZR);_oo=r(hrt,"SpeechEncoderDecoderConfig"),hrt.forEach(t),uoo=r($Le," (Speech Encoder decoder model)"),$Le.forEach(t),boo=i(L),_g=n(L,"LI",{});var kLe=s(_g);Ane=n(kLe,"STRONG",{});var prt=s(Ane);voo=r(prt,"speech_to_text"),prt.forEach(t),Foo=r(kLe," \u2014 "),eP=n(kLe,"A",{href:!0});var _rt=s(eP);Too=r(_rt,"Speech2TextConfig"),_rt.forEach(t),Moo=r(kLe," (Speech2Text model)"),kLe.forEach(t),Eoo=i(L),ug=n(L,"LI",{});var SLe=s(ug);Lne=n(SLe,"STRONG",{});var urt=s(Lne);Coo=r(urt,"speech_to_text_2"),urt.forEach(t),woo=r(SLe," \u2014 "),oP=n(SLe,"A",{href:!0});var brt=s(oP);Aoo=r(brt,"Speech2Text2Config"),brt.forEach(t),Loo=r(SLe," (Speech2Text2 model)"),SLe.forEach(t),yoo=i(L),bg=n(L,"LI",{});var RLe=s(bg);yne=n(RLe,"STRONG",{});var vrt=s(yne);xoo=r(vrt,"splinter"),vrt.forEach(t),$oo=r(RLe," \u2014 "),rP=n(RLe,"A",{href:!0});var Frt=s(rP);koo=r(Frt,"SplinterConfig"),Frt.forEach(t),Soo=r(RLe," (Splinter model)"),RLe.forEach(t),Roo=i(L),vg=n(L,"LI",{});var PLe=s(vg);xne=n(PLe,"STRONG",{});var Trt=s(xne);Poo=r(Trt,"squeezebert"),Trt.forEach(t),Boo=r(PLe," \u2014 "),tP=n(PLe,"A",{href:!0});var Mrt=s(tP);Ioo=r(Mrt,"SqueezeBertConfig"),Mrt.forEach(t),Noo=r(PLe," (SqueezeBERT model)"),PLe.forEach(t),qoo=i(L),Fg=n(L,"LI",{});var BLe=s(Fg);$ne=n(BLe,"STRONG",{});var Ert=s($ne);joo=r(Ert,"swin"),Ert.forEach(t),Doo=r(BLe," \u2014 "),aP=n(BLe,"A",{href:!0});var Crt=s(aP);Goo=r(Crt,"SwinConfig"),Crt.forEach(t),Ooo=r(BLe," (Swin Transformer model)"),BLe.forEach(t),Voo=i(L),Tg=n(L,"LI",{});var ILe=s(Tg);kne=n(ILe,"STRONG",{});var wrt=s(kne);Xoo=r(wrt,"t5"),wrt.forEach(t),zoo=r(ILe," \u2014 "),nP=n(ILe,"A",{href:!0});var Art=s(nP);Qoo=r(Art,"T5Config"),Art.forEach(t),Woo=r(ILe," (T5 model)"),ILe.forEach(t),Hoo=i(L),Mg=n(L,"LI",{});var NLe=s(Mg);Sne=n(NLe,"STRONG",{});var Lrt=s(Sne);Uoo=r(Lrt,"tapas"),Lrt.forEach(t),Joo=r(NLe," \u2014 "),sP=n(NLe,"A",{href:!0});var yrt=s(sP);Yoo=r(yrt,"TapasConfig"),yrt.forEach(t),Koo=r(NLe," (TAPAS model)"),NLe.forEach(t),Zoo=i(L),Eg=n(L,"LI",{});var qLe=s(Eg);Rne=n(qLe,"STRONG",{});var xrt=s(Rne);ero=r(xrt,"trajectory_transformer"),xrt.forEach(t),oro=r(qLe," \u2014 "),lP=n(qLe,"A",{href:!0});var $rt=s(lP);rro=r($rt,"TrajectoryTransformerConfig"),$rt.forEach(t),tro=r(qLe," (Trajectory Transformer model)"),qLe.forEach(t),aro=i(L),Cg=n(L,"LI",{});var jLe=s(Cg);Pne=n(jLe,"STRONG",{});var krt=s(Pne);nro=r(krt,"transfo-xl"),krt.forEach(t),sro=r(jLe," \u2014 "),iP=n(jLe,"A",{href:!0});var Srt=s(iP);lro=r(Srt,"TransfoXLConfig"),Srt.forEach(t),iro=r(jLe," (Transformer-XL model)"),jLe.forEach(t),dro=i(L),wg=n(L,"LI",{});var DLe=s(wg);Bne=n(DLe,"STRONG",{});var Rrt=s(Bne);cro=r(Rrt,"trocr"),Rrt.forEach(t),fro=r(DLe," \u2014 "),dP=n(DLe,"A",{href:!0});var Prt=s(dP);mro=r(Prt,"TrOCRConfig"),Prt.forEach(t),gro=r(DLe," (TrOCR model)"),DLe.forEach(t),hro=i(L),Ag=n(L,"LI",{});var GLe=s(Ag);Ine=n(GLe,"STRONG",{});var Brt=s(Ine);pro=r(Brt,"unispeech"),Brt.forEach(t),_ro=r(GLe," \u2014 "),cP=n(GLe,"A",{href:!0});var Irt=s(cP);uro=r(Irt,"UniSpeechConfig"),Irt.forEach(t),bro=r(GLe," (UniSpeech model)"),GLe.forEach(t),vro=i(L),Lg=n(L,"LI",{});var OLe=s(Lg);Nne=n(OLe,"STRONG",{});var Nrt=s(Nne);Fro=r(Nrt,"unispeech-sat"),Nrt.forEach(t),Tro=r(OLe," \u2014 "),fP=n(OLe,"A",{href:!0});var qrt=s(fP);Mro=r(qrt,"UniSpeechSatConfig"),qrt.forEach(t),Ero=r(OLe," (UniSpeechSat model)"),OLe.forEach(t),Cro=i(L),yg=n(L,"LI",{});var VLe=s(yg);qne=n(VLe,"STRONG",{});var jrt=s(qne);wro=r(jrt,"van"),jrt.forEach(t),Aro=r(VLe," \u2014 "),mP=n(VLe,"A",{href:!0});var Drt=s(mP);Lro=r(Drt,"VanConfig"),Drt.forEach(t),yro=r(VLe," (VAN model)"),VLe.forEach(t),xro=i(L),xg=n(L,"LI",{});var XLe=s(xg);jne=n(XLe,"STRONG",{});var Grt=s(jne);$ro=r(Grt,"vilt"),Grt.forEach(t),kro=r(XLe," \u2014 "),gP=n(XLe,"A",{href:!0});var Ort=s(gP);Sro=r(Ort,"ViltConfig"),Ort.forEach(t),Rro=r(XLe," (ViLT model)"),XLe.forEach(t),Pro=i(L),$g=n(L,"LI",{});var zLe=s($g);Dne=n(zLe,"STRONG",{});var Vrt=s(Dne);Bro=r(Vrt,"vision-encoder-decoder"),Vrt.forEach(t),Iro=r(zLe," \u2014 "),hP=n(zLe,"A",{href:!0});var Xrt=s(hP);Nro=r(Xrt,"VisionEncoderDecoderConfig"),Xrt.forEach(t),qro=r(zLe," (Vision Encoder decoder model)"),zLe.forEach(t),jro=i(L),kg=n(L,"LI",{});var QLe=s(kg);Gne=n(QLe,"STRONG",{});var zrt=s(Gne);Dro=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),Gro=r(QLe," \u2014 "),pP=n(QLe,"A",{href:!0});var Qrt=s(pP);Oro=r(Qrt,"VisionTextDualEncoderConfig"),Qrt.forEach(t),Vro=r(QLe," (VisionTextDualEncoder model)"),QLe.forEach(t),Xro=i(L),Sg=n(L,"LI",{});var WLe=s(Sg);One=n(WLe,"STRONG",{});var Wrt=s(One);zro=r(Wrt,"visual_bert"),Wrt.forEach(t),Qro=r(WLe," \u2014 "),_P=n(WLe,"A",{href:!0});var Hrt=s(_P);Wro=r(Hrt,"VisualBertConfig"),Hrt.forEach(t),Hro=r(WLe," (VisualBERT model)"),WLe.forEach(t),Uro=i(L),Rg=n(L,"LI",{});var HLe=s(Rg);Vne=n(HLe,"STRONG",{});var Urt=s(Vne);Jro=r(Urt,"vit"),Urt.forEach(t),Yro=r(HLe," \u2014 "),uP=n(HLe,"A",{href:!0});var Jrt=s(uP);Kro=r(Jrt,"ViTConfig"),Jrt.forEach(t),Zro=r(HLe," (ViT model)"),HLe.forEach(t),eto=i(L),Pg=n(L,"LI",{});var ULe=s(Pg);Xne=n(ULe,"STRONG",{});var Yrt=s(Xne);oto=r(Yrt,"vit_mae"),Yrt.forEach(t),rto=r(ULe," \u2014 "),bP=n(ULe,"A",{href:!0});var Krt=s(bP);tto=r(Krt,"ViTMAEConfig"),Krt.forEach(t),ato=r(ULe," (ViTMAE model)"),ULe.forEach(t),nto=i(L),Bg=n(L,"LI",{});var JLe=s(Bg);zne=n(JLe,"STRONG",{});var Zrt=s(zne);sto=r(Zrt,"wav2vec2"),Zrt.forEach(t),lto=r(JLe," \u2014 "),vP=n(JLe,"A",{href:!0});var ett=s(vP);ito=r(ett,"Wav2Vec2Config"),ett.forEach(t),dto=r(JLe," (Wav2Vec2 model)"),JLe.forEach(t),cto=i(L),Ig=n(L,"LI",{});var YLe=s(Ig);Qne=n(YLe,"STRONG",{});var ott=s(Qne);fto=r(ott,"wav2vec2-conformer"),ott.forEach(t),mto=r(YLe," \u2014 "),FP=n(YLe,"A",{href:!0});var rtt=s(FP);gto=r(rtt,"Wav2Vec2ConformerConfig"),rtt.forEach(t),hto=r(YLe," (Wav2Vec2-Conformer model)"),YLe.forEach(t),pto=i(L),Ng=n(L,"LI",{});var KLe=s(Ng);Wne=n(KLe,"STRONG",{});var ttt=s(Wne);_to=r(ttt,"wavlm"),ttt.forEach(t),uto=r(KLe," \u2014 "),TP=n(KLe,"A",{href:!0});var att=s(TP);bto=r(att,"WavLMConfig"),att.forEach(t),vto=r(KLe," (WavLM model)"),KLe.forEach(t),Fto=i(L),qg=n(L,"LI",{});var ZLe=s(qg);Hne=n(ZLe,"STRONG",{});var ntt=s(Hne);Tto=r(ntt,"xglm"),ntt.forEach(t),Mto=r(ZLe," \u2014 "),MP=n(ZLe,"A",{href:!0});var stt=s(MP);Eto=r(stt,"XGLMConfig"),stt.forEach(t),Cto=r(ZLe," (XGLM model)"),ZLe.forEach(t),wto=i(L),jg=n(L,"LI",{});var eye=s(jg);Une=n(eye,"STRONG",{});var ltt=s(Une);Ato=r(ltt,"xlm"),ltt.forEach(t),Lto=r(eye," \u2014 "),EP=n(eye,"A",{href:!0});var itt=s(EP);yto=r(itt,"XLMConfig"),itt.forEach(t),xto=r(eye," (XLM model)"),eye.forEach(t),$to=i(L),Dg=n(L,"LI",{});var oye=s(Dg);Jne=n(oye,"STRONG",{});var dtt=s(Jne);kto=r(dtt,"xlm-prophetnet"),dtt.forEach(t),Sto=r(oye," \u2014 "),CP=n(oye,"A",{href:!0});var ctt=s(CP);Rto=r(ctt,"XLMProphetNetConfig"),ctt.forEach(t),Pto=r(oye," (XLM-ProphetNet model)"),oye.forEach(t),Bto=i(L),Gg=n(L,"LI",{});var rye=s(Gg);Yne=n(rye,"STRONG",{});var ftt=s(Yne);Ito=r(ftt,"xlm-roberta"),ftt.forEach(t),Nto=r(rye," \u2014 "),wP=n(rye,"A",{href:!0});var mtt=s(wP);qto=r(mtt,"XLMRobertaConfig"),mtt.forEach(t),jto=r(rye," (XLM-RoBERTa model)"),rye.forEach(t),Dto=i(L),Og=n(L,"LI",{});var tye=s(Og);Kne=n(tye,"STRONG",{});var gtt=s(Kne);Gto=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),Oto=r(tye," \u2014 "),AP=n(tye,"A",{href:!0});var htt=s(AP);Vto=r(htt,"XLMRobertaXLConfig"),htt.forEach(t),Xto=r(tye," (XLM-RoBERTa-XL model)"),tye.forEach(t),zto=i(L),Vg=n(L,"LI",{});var aye=s(Vg);Zne=n(aye,"STRONG",{});var ptt=s(Zne);Qto=r(ptt,"xlnet"),ptt.forEach(t),Wto=r(aye," \u2014 "),LP=n(aye,"A",{href:!0});var _tt=s(LP);Hto=r(_tt,"XLNetConfig"),_tt.forEach(t),Uto=r(aye," (XLNet model)"),aye.forEach(t),Jto=i(L),Xg=n(L,"LI",{});var nye=s(Xg);ese=n(nye,"STRONG",{});var utt=s(ese);Yto=r(utt,"yolos"),utt.forEach(t),Kto=r(nye," \u2014 "),yP=n(nye,"A",{href:!0});var btt=s(yP);Zto=r(btt,"YolosConfig"),btt.forEach(t),eao=r(nye," (YOLOS model)"),nye.forEach(t),oao=i(L),zg=n(L,"LI",{});var sye=s(zg);ose=n(sye,"STRONG",{});var vtt=s(ose);rao=r(vtt,"yoso"),vtt.forEach(t),tao=r(sye," \u2014 "),xP=n(sye,"A",{href:!0});var Ftt=s(xP);aao=r(Ftt,"YosoConfig"),Ftt.forEach(t),nao=r(sye," (YOSO model)"),sye.forEach(t),L.forEach(t),sao=i(at),T(Qg.$$.fragment,at),at.forEach(t),lao=i(tt),Wg=n(tt,"DIV",{class:!0});var NXe=s(Wg);T(WL.$$.fragment,NXe),iao=i(NXe),rse=n(NXe,"P",{});var Ttt=s(rse);dao=r(Ttt,"Register a new configuration for this class."),Ttt.forEach(t),NXe.forEach(t),tt.forEach(t),qOe=i(f),Pi=n(f,"H2",{class:!0});var qXe=s(Pi);Hg=n(qXe,"A",{id:!0,class:!0,href:!0});var Mtt=s(Hg);tse=n(Mtt,"SPAN",{});var Ett=s(tse);T(HL.$$.fragment,Ett),Ett.forEach(t),Mtt.forEach(t),cao=i(qXe),ase=n(qXe,"SPAN",{});var Ctt=s(ase);fao=r(Ctt,"AutoTokenizer"),Ctt.forEach(t),qXe.forEach(t),jOe=i(f),Ao=n(f,"DIV",{class:!0});var Us=s(Ao);T(UL.$$.fragment,Us),mao=i(Us),JL=n(Us,"P",{});var jXe=s(JL);gao=r(jXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$P=n(jXe,"A",{href:!0});var wtt=s($P);hao=r(wtt,"AutoTokenizer.from_pretrained()"),wtt.forEach(t),pao=r(jXe," class method."),jXe.forEach(t),_ao=i(Us),YL=n(Us,"P",{});var DXe=s(YL);uao=r(DXe,"This class cannot be instantiated directly using "),nse=n(DXe,"CODE",{});var Att=s(nse);bao=r(Att,"__init__()"),Att.forEach(t),vao=r(DXe," (throws an error)."),DXe.forEach(t),Fao=i(Us),Lr=n(Us,"DIV",{class:!0});var Js=s(Lr);T(KL.$$.fragment,Js),Tao=i(Js),sse=n(Js,"P",{});var Ltt=s(sse);Mao=r(Ltt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ltt.forEach(t),Eao=i(Js),Sa=n(Js,"P",{});var GA=s(Sa);Cao=r(GA,"The tokenizer class to instantiate is selected based on the "),lse=n(GA,"CODE",{});var ytt=s(lse);wao=r(ytt,"model_type"),ytt.forEach(t),Aao=r(GA,` property of the config object (either
passed as an argument or loaded from `),ise=n(GA,"CODE",{});var xtt=s(ise);Lao=r(xtt,"pretrained_model_name_or_path"),xtt.forEach(t),yao=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(GA,"CODE",{});var $tt=s(dse);xao=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),$ao=r(GA,":"),GA.forEach(t),kao=i(Js),k=n(Js,"UL",{});var S=s(k);qn=n(S,"LI",{});var ak=s(qn);cse=n(ak,"STRONG",{});var ktt=s(cse);Sao=r(ktt,"albert"),ktt.forEach(t),Rao=r(ak," \u2014 "),kP=n(ak,"A",{href:!0});var Stt=s(kP);Pao=r(Stt,"AlbertTokenizer"),Stt.forEach(t),Bao=r(ak," or "),SP=n(ak,"A",{href:!0});var Rtt=s(SP);Iao=r(Rtt,"AlbertTokenizerFast"),Rtt.forEach(t),Nao=r(ak," (ALBERT model)"),ak.forEach(t),qao=i(S),jn=n(S,"LI",{});var nk=s(jn);fse=n(nk,"STRONG",{});var Ptt=s(fse);jao=r(Ptt,"bart"),Ptt.forEach(t),Dao=r(nk," \u2014 "),RP=n(nk,"A",{href:!0});var Btt=s(RP);Gao=r(Btt,"BartTokenizer"),Btt.forEach(t),Oao=r(nk," or "),PP=n(nk,"A",{href:!0});var Itt=s(PP);Vao=r(Itt,"BartTokenizerFast"),Itt.forEach(t),Xao=r(nk," (BART model)"),nk.forEach(t),zao=i(S),Dn=n(S,"LI",{});var sk=s(Dn);mse=n(sk,"STRONG",{});var Ntt=s(mse);Qao=r(Ntt,"barthez"),Ntt.forEach(t),Wao=r(sk," \u2014 "),BP=n(sk,"A",{href:!0});var qtt=s(BP);Hao=r(qtt,"BarthezTokenizer"),qtt.forEach(t),Uao=r(sk," or "),IP=n(sk,"A",{href:!0});var jtt=s(IP);Jao=r(jtt,"BarthezTokenizerFast"),jtt.forEach(t),Yao=r(sk," (BARThez model)"),sk.forEach(t),Kao=i(S),Ug=n(S,"LI",{});var lye=s(Ug);gse=n(lye,"STRONG",{});var Dtt=s(gse);Zao=r(Dtt,"bartpho"),Dtt.forEach(t),eno=r(lye," \u2014 "),NP=n(lye,"A",{href:!0});var Gtt=s(NP);ono=r(Gtt,"BartphoTokenizer"),Gtt.forEach(t),rno=r(lye," (BARTpho model)"),lye.forEach(t),tno=i(S),Gn=n(S,"LI",{});var lk=s(Gn);hse=n(lk,"STRONG",{});var Ott=s(hse);ano=r(Ott,"bert"),Ott.forEach(t),nno=r(lk," \u2014 "),qP=n(lk,"A",{href:!0});var Vtt=s(qP);sno=r(Vtt,"BertTokenizer"),Vtt.forEach(t),lno=r(lk," or "),jP=n(lk,"A",{href:!0});var Xtt=s(jP);ino=r(Xtt,"BertTokenizerFast"),Xtt.forEach(t),dno=r(lk," (BERT model)"),lk.forEach(t),cno=i(S),Jg=n(S,"LI",{});var iye=s(Jg);pse=n(iye,"STRONG",{});var ztt=s(pse);fno=r(ztt,"bert-generation"),ztt.forEach(t),mno=r(iye," \u2014 "),DP=n(iye,"A",{href:!0});var Qtt=s(DP);gno=r(Qtt,"BertGenerationTokenizer"),Qtt.forEach(t),hno=r(iye," (Bert Generation model)"),iye.forEach(t),pno=i(S),Yg=n(S,"LI",{});var dye=s(Yg);_se=n(dye,"STRONG",{});var Wtt=s(_se);_no=r(Wtt,"bert-japanese"),Wtt.forEach(t),uno=r(dye," \u2014 "),GP=n(dye,"A",{href:!0});var Htt=s(GP);bno=r(Htt,"BertJapaneseTokenizer"),Htt.forEach(t),vno=r(dye," (BertJapanese model)"),dye.forEach(t),Fno=i(S),Kg=n(S,"LI",{});var cye=s(Kg);use=n(cye,"STRONG",{});var Utt=s(use);Tno=r(Utt,"bertweet"),Utt.forEach(t),Mno=r(cye," \u2014 "),OP=n(cye,"A",{href:!0});var Jtt=s(OP);Eno=r(Jtt,"BertweetTokenizer"),Jtt.forEach(t),Cno=r(cye," (BERTweet model)"),cye.forEach(t),wno=i(S),On=n(S,"LI",{});var ik=s(On);bse=n(ik,"STRONG",{});var Ytt=s(bse);Ano=r(Ytt,"big_bird"),Ytt.forEach(t),Lno=r(ik," \u2014 "),VP=n(ik,"A",{href:!0});var Ktt=s(VP);yno=r(Ktt,"BigBirdTokenizer"),Ktt.forEach(t),xno=r(ik," or "),XP=n(ik,"A",{href:!0});var Ztt=s(XP);$no=r(Ztt,"BigBirdTokenizerFast"),Ztt.forEach(t),kno=r(ik," (BigBird model)"),ik.forEach(t),Sno=i(S),Vn=n(S,"LI",{});var dk=s(Vn);vse=n(dk,"STRONG",{});var eat=s(vse);Rno=r(eat,"bigbird_pegasus"),eat.forEach(t),Pno=r(dk," \u2014 "),zP=n(dk,"A",{href:!0});var oat=s(zP);Bno=r(oat,"PegasusTokenizer"),oat.forEach(t),Ino=r(dk," or "),QP=n(dk,"A",{href:!0});var rat=s(QP);Nno=r(rat,"PegasusTokenizerFast"),rat.forEach(t),qno=r(dk," (BigBird-Pegasus model)"),dk.forEach(t),jno=i(S),Xn=n(S,"LI",{});var ck=s(Xn);Fse=n(ck,"STRONG",{});var tat=s(Fse);Dno=r(tat,"blenderbot"),tat.forEach(t),Gno=r(ck," \u2014 "),WP=n(ck,"A",{href:!0});var aat=s(WP);Ono=r(aat,"BlenderbotTokenizer"),aat.forEach(t),Vno=r(ck," or "),HP=n(ck,"A",{href:!0});var nat=s(HP);Xno=r(nat,"BlenderbotTokenizerFast"),nat.forEach(t),zno=r(ck," (Blenderbot model)"),ck.forEach(t),Qno=i(S),Zg=n(S,"LI",{});var fye=s(Zg);Tse=n(fye,"STRONG",{});var sat=s(Tse);Wno=r(sat,"blenderbot-small"),sat.forEach(t),Hno=r(fye," \u2014 "),UP=n(fye,"A",{href:!0});var lat=s(UP);Uno=r(lat,"BlenderbotSmallTokenizer"),lat.forEach(t),Jno=r(fye," (BlenderbotSmall model)"),fye.forEach(t),Yno=i(S),eh=n(S,"LI",{});var mye=s(eh);Mse=n(mye,"STRONG",{});var iat=s(Mse);Kno=r(iat,"bloom"),iat.forEach(t),Zno=r(mye," \u2014 "),JP=n(mye,"A",{href:!0});var dat=s(JP);eso=r(dat,"BloomTokenizerFast"),dat.forEach(t),oso=r(mye," (BLOOM model)"),mye.forEach(t),rso=i(S),oh=n(S,"LI",{});var gye=s(oh);Ese=n(gye,"STRONG",{});var cat=s(Ese);tso=r(cat,"byt5"),cat.forEach(t),aso=r(gye," \u2014 "),YP=n(gye,"A",{href:!0});var fat=s(YP);nso=r(fat,"ByT5Tokenizer"),fat.forEach(t),sso=r(gye," (ByT5 model)"),gye.forEach(t),lso=i(S),zn=n(S,"LI",{});var fk=s(zn);Cse=n(fk,"STRONG",{});var mat=s(Cse);iso=r(mat,"camembert"),mat.forEach(t),dso=r(fk," \u2014 "),KP=n(fk,"A",{href:!0});var gat=s(KP);cso=r(gat,"CamembertTokenizer"),gat.forEach(t),fso=r(fk," or "),ZP=n(fk,"A",{href:!0});var hat=s(ZP);mso=r(hat,"CamembertTokenizerFast"),hat.forEach(t),gso=r(fk," (CamemBERT model)"),fk.forEach(t),hso=i(S),rh=n(S,"LI",{});var hye=s(rh);wse=n(hye,"STRONG",{});var pat=s(wse);pso=r(pat,"canine"),pat.forEach(t),_so=r(hye," \u2014 "),eB=n(hye,"A",{href:!0});var _at=s(eB);uso=r(_at,"CanineTokenizer"),_at.forEach(t),bso=r(hye," (CANINE model)"),hye.forEach(t),vso=i(S),Qn=n(S,"LI",{});var mk=s(Qn);Ase=n(mk,"STRONG",{});var uat=s(Ase);Fso=r(uat,"clip"),uat.forEach(t),Tso=r(mk," \u2014 "),oB=n(mk,"A",{href:!0});var bat=s(oB);Mso=r(bat,"CLIPTokenizer"),bat.forEach(t),Eso=r(mk," or "),rB=n(mk,"A",{href:!0});var vat=s(rB);Cso=r(vat,"CLIPTokenizerFast"),vat.forEach(t),wso=r(mk," (CLIP model)"),mk.forEach(t),Aso=i(S),Wn=n(S,"LI",{});var gk=s(Wn);Lse=n(gk,"STRONG",{});var Fat=s(Lse);Lso=r(Fat,"codegen"),Fat.forEach(t),yso=r(gk," \u2014 "),tB=n(gk,"A",{href:!0});var Tat=s(tB);xso=r(Tat,"CodeGenTokenizer"),Tat.forEach(t),$so=r(gk," or "),aB=n(gk,"A",{href:!0});var Mat=s(aB);kso=r(Mat,"CodeGenTokenizerFast"),Mat.forEach(t),Sso=r(gk," (CodeGen model)"),gk.forEach(t),Rso=i(S),Hn=n(S,"LI",{});var hk=s(Hn);yse=n(hk,"STRONG",{});var Eat=s(yse);Pso=r(Eat,"convbert"),Eat.forEach(t),Bso=r(hk," \u2014 "),nB=n(hk,"A",{href:!0});var Cat=s(nB);Iso=r(Cat,"ConvBertTokenizer"),Cat.forEach(t),Nso=r(hk," or "),sB=n(hk,"A",{href:!0});var wat=s(sB);qso=r(wat,"ConvBertTokenizerFast"),wat.forEach(t),jso=r(hk," (ConvBERT model)"),hk.forEach(t),Dso=i(S),Un=n(S,"LI",{});var pk=s(Un);xse=n(pk,"STRONG",{});var Aat=s(xse);Gso=r(Aat,"cpm"),Aat.forEach(t),Oso=r(pk," \u2014 "),lB=n(pk,"A",{href:!0});var Lat=s(lB);Vso=r(Lat,"CpmTokenizer"),Lat.forEach(t),Xso=r(pk," or "),iB=n(pk,"A",{href:!0});var yat=s(iB);zso=r(yat,"CpmTokenizerFast"),yat.forEach(t),Qso=r(pk," (CPM model)"),pk.forEach(t),Wso=i(S),th=n(S,"LI",{});var pye=s(th);$se=n(pye,"STRONG",{});var xat=s($se);Hso=r(xat,"ctrl"),xat.forEach(t),Uso=r(pye," \u2014 "),dB=n(pye,"A",{href:!0});var $at=s(dB);Jso=r($at,"CTRLTokenizer"),$at.forEach(t),Yso=r(pye," (CTRL model)"),pye.forEach(t),Kso=i(S),Jn=n(S,"LI",{});var _k=s(Jn);kse=n(_k,"STRONG",{});var kat=s(kse);Zso=r(kat,"data2vec-text"),kat.forEach(t),elo=r(_k," \u2014 "),cB=n(_k,"A",{href:!0});var Sat=s(cB);olo=r(Sat,"RobertaTokenizer"),Sat.forEach(t),rlo=r(_k," or "),fB=n(_k,"A",{href:!0});var Rat=s(fB);tlo=r(Rat,"RobertaTokenizerFast"),Rat.forEach(t),alo=r(_k," (Data2VecText model)"),_k.forEach(t),nlo=i(S),Yn=n(S,"LI",{});var uk=s(Yn);Sse=n(uk,"STRONG",{});var Pat=s(Sse);slo=r(Pat,"deberta"),Pat.forEach(t),llo=r(uk," \u2014 "),mB=n(uk,"A",{href:!0});var Bat=s(mB);ilo=r(Bat,"DebertaTokenizer"),Bat.forEach(t),dlo=r(uk," or "),gB=n(uk,"A",{href:!0});var Iat=s(gB);clo=r(Iat,"DebertaTokenizerFast"),Iat.forEach(t),flo=r(uk," (DeBERTa model)"),uk.forEach(t),mlo=i(S),Kn=n(S,"LI",{});var bk=s(Kn);Rse=n(bk,"STRONG",{});var Nat=s(Rse);glo=r(Nat,"deberta-v2"),Nat.forEach(t),hlo=r(bk," \u2014 "),hB=n(bk,"A",{href:!0});var qat=s(hB);plo=r(qat,"DebertaV2Tokenizer"),qat.forEach(t),_lo=r(bk," or "),pB=n(bk,"A",{href:!0});var jat=s(pB);ulo=r(jat,"DebertaV2TokenizerFast"),jat.forEach(t),blo=r(bk," (DeBERTa-v2 model)"),bk.forEach(t),vlo=i(S),Zn=n(S,"LI",{});var vk=s(Zn);Pse=n(vk,"STRONG",{});var Dat=s(Pse);Flo=r(Dat,"distilbert"),Dat.forEach(t),Tlo=r(vk," \u2014 "),_B=n(vk,"A",{href:!0});var Gat=s(_B);Mlo=r(Gat,"DistilBertTokenizer"),Gat.forEach(t),Elo=r(vk," or "),uB=n(vk,"A",{href:!0});var Oat=s(uB);Clo=r(Oat,"DistilBertTokenizerFast"),Oat.forEach(t),wlo=r(vk," (DistilBERT model)"),vk.forEach(t),Alo=i(S),es=n(S,"LI",{});var Fk=s(es);Bse=n(Fk,"STRONG",{});var Vat=s(Bse);Llo=r(Vat,"dpr"),Vat.forEach(t),ylo=r(Fk," \u2014 "),bB=n(Fk,"A",{href:!0});var Xat=s(bB);xlo=r(Xat,"DPRQuestionEncoderTokenizer"),Xat.forEach(t),$lo=r(Fk," or "),vB=n(Fk,"A",{href:!0});var zat=s(vB);klo=r(zat,"DPRQuestionEncoderTokenizerFast"),zat.forEach(t),Slo=r(Fk," (DPR model)"),Fk.forEach(t),Rlo=i(S),os=n(S,"LI",{});var Tk=s(os);Ise=n(Tk,"STRONG",{});var Qat=s(Ise);Plo=r(Qat,"electra"),Qat.forEach(t),Blo=r(Tk," \u2014 "),FB=n(Tk,"A",{href:!0});var Wat=s(FB);Ilo=r(Wat,"ElectraTokenizer"),Wat.forEach(t),Nlo=r(Tk," or "),TB=n(Tk,"A",{href:!0});var Hat=s(TB);qlo=r(Hat,"ElectraTokenizerFast"),Hat.forEach(t),jlo=r(Tk," (ELECTRA model)"),Tk.forEach(t),Dlo=i(S),ah=n(S,"LI",{});var _ye=s(ah);Nse=n(_ye,"STRONG",{});var Uat=s(Nse);Glo=r(Uat,"flaubert"),Uat.forEach(t),Olo=r(_ye," \u2014 "),MB=n(_ye,"A",{href:!0});var Jat=s(MB);Vlo=r(Jat,"FlaubertTokenizer"),Jat.forEach(t),Xlo=r(_ye," (FlauBERT model)"),_ye.forEach(t),zlo=i(S),rs=n(S,"LI",{});var Mk=s(rs);qse=n(Mk,"STRONG",{});var Yat=s(qse);Qlo=r(Yat,"fnet"),Yat.forEach(t),Wlo=r(Mk," \u2014 "),EB=n(Mk,"A",{href:!0});var Kat=s(EB);Hlo=r(Kat,"FNetTokenizer"),Kat.forEach(t),Ulo=r(Mk," or "),CB=n(Mk,"A",{href:!0});var Zat=s(CB);Jlo=r(Zat,"FNetTokenizerFast"),Zat.forEach(t),Ylo=r(Mk," (FNet model)"),Mk.forEach(t),Klo=i(S),nh=n(S,"LI",{});var uye=s(nh);jse=n(uye,"STRONG",{});var ent=s(jse);Zlo=r(ent,"fsmt"),ent.forEach(t),eio=r(uye," \u2014 "),wB=n(uye,"A",{href:!0});var ont=s(wB);oio=r(ont,"FSMTTokenizer"),ont.forEach(t),rio=r(uye," (FairSeq Machine-Translation model)"),uye.forEach(t),tio=i(S),ts=n(S,"LI",{});var Ek=s(ts);Dse=n(Ek,"STRONG",{});var rnt=s(Dse);aio=r(rnt,"funnel"),rnt.forEach(t),nio=r(Ek," \u2014 "),AB=n(Ek,"A",{href:!0});var tnt=s(AB);sio=r(tnt,"FunnelTokenizer"),tnt.forEach(t),lio=r(Ek," or "),LB=n(Ek,"A",{href:!0});var ant=s(LB);iio=r(ant,"FunnelTokenizerFast"),ant.forEach(t),dio=r(Ek," (Funnel Transformer model)"),Ek.forEach(t),cio=i(S),as=n(S,"LI",{});var Ck=s(as);Gse=n(Ck,"STRONG",{});var nnt=s(Gse);fio=r(nnt,"gpt2"),nnt.forEach(t),mio=r(Ck," \u2014 "),yB=n(Ck,"A",{href:!0});var snt=s(yB);gio=r(snt,"GPT2Tokenizer"),snt.forEach(t),hio=r(Ck," or "),xB=n(Ck,"A",{href:!0});var lnt=s(xB);pio=r(lnt,"GPT2TokenizerFast"),lnt.forEach(t),_io=r(Ck," (OpenAI GPT-2 model)"),Ck.forEach(t),uio=i(S),ns=n(S,"LI",{});var wk=s(ns);Ose=n(wk,"STRONG",{});var int=s(Ose);bio=r(int,"gpt_neo"),int.forEach(t),vio=r(wk," \u2014 "),$B=n(wk,"A",{href:!0});var dnt=s($B);Fio=r(dnt,"GPT2Tokenizer"),dnt.forEach(t),Tio=r(wk," or "),kB=n(wk,"A",{href:!0});var cnt=s(kB);Mio=r(cnt,"GPT2TokenizerFast"),cnt.forEach(t),Eio=r(wk," (GPT Neo model)"),wk.forEach(t),Cio=i(S),sh=n(S,"LI",{});var bye=s(sh);Vse=n(bye,"STRONG",{});var fnt=s(Vse);wio=r(fnt,"gpt_neox"),fnt.forEach(t),Aio=r(bye," \u2014 "),SB=n(bye,"A",{href:!0});var mnt=s(SB);Lio=r(mnt,"GPTNeoXTokenizerFast"),mnt.forEach(t),yio=r(bye," (GPT NeoX model)"),bye.forEach(t),xio=i(S),ss=n(S,"LI",{});var Ak=s(ss);Xse=n(Ak,"STRONG",{});var gnt=s(Xse);$io=r(gnt,"gptj"),gnt.forEach(t),kio=r(Ak," \u2014 "),RB=n(Ak,"A",{href:!0});var hnt=s(RB);Sio=r(hnt,"GPT2Tokenizer"),hnt.forEach(t),Rio=r(Ak," or "),PB=n(Ak,"A",{href:!0});var pnt=s(PB);Pio=r(pnt,"GPT2TokenizerFast"),pnt.forEach(t),Bio=r(Ak," (GPT-J model)"),Ak.forEach(t),Iio=i(S),ls=n(S,"LI",{});var Lk=s(ls);zse=n(Lk,"STRONG",{});var _nt=s(zse);Nio=r(_nt,"groupvit"),_nt.forEach(t),qio=r(Lk," \u2014 "),BB=n(Lk,"A",{href:!0});var unt=s(BB);jio=r(unt,"CLIPTokenizer"),unt.forEach(t),Dio=r(Lk," or "),IB=n(Lk,"A",{href:!0});var bnt=s(IB);Gio=r(bnt,"CLIPTokenizerFast"),bnt.forEach(t),Oio=r(Lk," (GroupViT model)"),Lk.forEach(t),Vio=i(S),is=n(S,"LI",{});var yk=s(is);Qse=n(yk,"STRONG",{});var vnt=s(Qse);Xio=r(vnt,"herbert"),vnt.forEach(t),zio=r(yk," \u2014 "),NB=n(yk,"A",{href:!0});var Fnt=s(NB);Qio=r(Fnt,"HerbertTokenizer"),Fnt.forEach(t),Wio=r(yk," or "),qB=n(yk,"A",{href:!0});var Tnt=s(qB);Hio=r(Tnt,"HerbertTokenizerFast"),Tnt.forEach(t),Uio=r(yk," (HerBERT model)"),yk.forEach(t),Jio=i(S),lh=n(S,"LI",{});var vye=s(lh);Wse=n(vye,"STRONG",{});var Mnt=s(Wse);Yio=r(Mnt,"hubert"),Mnt.forEach(t),Kio=r(vye," \u2014 "),jB=n(vye,"A",{href:!0});var Ent=s(jB);Zio=r(Ent,"Wav2Vec2CTCTokenizer"),Ent.forEach(t),edo=r(vye," (Hubert model)"),vye.forEach(t),odo=i(S),ds=n(S,"LI",{});var xk=s(ds);Hse=n(xk,"STRONG",{});var Cnt=s(Hse);rdo=r(Cnt,"ibert"),Cnt.forEach(t),tdo=r(xk," \u2014 "),DB=n(xk,"A",{href:!0});var wnt=s(DB);ado=r(wnt,"RobertaTokenizer"),wnt.forEach(t),ndo=r(xk," or "),GB=n(xk,"A",{href:!0});var Ant=s(GB);sdo=r(Ant,"RobertaTokenizerFast"),Ant.forEach(t),ldo=r(xk," (I-BERT model)"),xk.forEach(t),ido=i(S),cs=n(S,"LI",{});var $k=s(cs);Use=n($k,"STRONG",{});var Lnt=s(Use);ddo=r(Lnt,"layoutlm"),Lnt.forEach(t),cdo=r($k," \u2014 "),OB=n($k,"A",{href:!0});var ynt=s(OB);fdo=r(ynt,"LayoutLMTokenizer"),ynt.forEach(t),mdo=r($k," or "),VB=n($k,"A",{href:!0});var xnt=s(VB);gdo=r(xnt,"LayoutLMTokenizerFast"),xnt.forEach(t),hdo=r($k," (LayoutLM model)"),$k.forEach(t),pdo=i(S),fs=n(S,"LI",{});var kk=s(fs);Jse=n(kk,"STRONG",{});var $nt=s(Jse);_do=r($nt,"layoutlmv2"),$nt.forEach(t),udo=r(kk," \u2014 "),XB=n(kk,"A",{href:!0});var knt=s(XB);bdo=r(knt,"LayoutLMv2Tokenizer"),knt.forEach(t),vdo=r(kk," or "),zB=n(kk,"A",{href:!0});var Snt=s(zB);Fdo=r(Snt,"LayoutLMv2TokenizerFast"),Snt.forEach(t),Tdo=r(kk," (LayoutLMv2 model)"),kk.forEach(t),Mdo=i(S),ms=n(S,"LI",{});var Sk=s(ms);Yse=n(Sk,"STRONG",{});var Rnt=s(Yse);Edo=r(Rnt,"layoutlmv3"),Rnt.forEach(t),Cdo=r(Sk," \u2014 "),QB=n(Sk,"A",{href:!0});var Pnt=s(QB);wdo=r(Pnt,"LayoutLMv3Tokenizer"),Pnt.forEach(t),Ado=r(Sk," or "),WB=n(Sk,"A",{href:!0});var Bnt=s(WB);Ldo=r(Bnt,"LayoutLMv3TokenizerFast"),Bnt.forEach(t),ydo=r(Sk," (LayoutLMv3 model)"),Sk.forEach(t),xdo=i(S),gs=n(S,"LI",{});var Rk=s(gs);Kse=n(Rk,"STRONG",{});var Int=s(Kse);$do=r(Int,"layoutxlm"),Int.forEach(t),kdo=r(Rk," \u2014 "),HB=n(Rk,"A",{href:!0});var Nnt=s(HB);Sdo=r(Nnt,"LayoutXLMTokenizer"),Nnt.forEach(t),Rdo=r(Rk," or "),UB=n(Rk,"A",{href:!0});var qnt=s(UB);Pdo=r(qnt,"LayoutXLMTokenizerFast"),qnt.forEach(t),Bdo=r(Rk," (LayoutXLM model)"),Rk.forEach(t),Ido=i(S),hs=n(S,"LI",{});var Pk=s(hs);Zse=n(Pk,"STRONG",{});var jnt=s(Zse);Ndo=r(jnt,"led"),jnt.forEach(t),qdo=r(Pk," \u2014 "),JB=n(Pk,"A",{href:!0});var Dnt=s(JB);jdo=r(Dnt,"LEDTokenizer"),Dnt.forEach(t),Ddo=r(Pk," or "),YB=n(Pk,"A",{href:!0});var Gnt=s(YB);Gdo=r(Gnt,"LEDTokenizerFast"),Gnt.forEach(t),Odo=r(Pk," (LED model)"),Pk.forEach(t),Vdo=i(S),ps=n(S,"LI",{});var Bk=s(ps);ele=n(Bk,"STRONG",{});var Ont=s(ele);Xdo=r(Ont,"longformer"),Ont.forEach(t),zdo=r(Bk," \u2014 "),KB=n(Bk,"A",{href:!0});var Vnt=s(KB);Qdo=r(Vnt,"LongformerTokenizer"),Vnt.forEach(t),Wdo=r(Bk," or "),ZB=n(Bk,"A",{href:!0});var Xnt=s(ZB);Hdo=r(Xnt,"LongformerTokenizerFast"),Xnt.forEach(t),Udo=r(Bk," (Longformer model)"),Bk.forEach(t),Jdo=i(S),_s=n(S,"LI",{});var Ik=s(_s);ole=n(Ik,"STRONG",{});var znt=s(ole);Ydo=r(znt,"longt5"),znt.forEach(t),Kdo=r(Ik," \u2014 "),eI=n(Ik,"A",{href:!0});var Qnt=s(eI);Zdo=r(Qnt,"T5Tokenizer"),Qnt.forEach(t),eco=r(Ik," or "),oI=n(Ik,"A",{href:!0});var Wnt=s(oI);oco=r(Wnt,"T5TokenizerFast"),Wnt.forEach(t),rco=r(Ik," (LongT5 model)"),Ik.forEach(t),tco=i(S),ih=n(S,"LI",{});var Fye=s(ih);rle=n(Fye,"STRONG",{});var Hnt=s(rle);aco=r(Hnt,"luke"),Hnt.forEach(t),nco=r(Fye," \u2014 "),rI=n(Fye,"A",{href:!0});var Unt=s(rI);sco=r(Unt,"LukeTokenizer"),Unt.forEach(t),lco=r(Fye," (LUKE model)"),Fye.forEach(t),ico=i(S),us=n(S,"LI",{});var Nk=s(us);tle=n(Nk,"STRONG",{});var Jnt=s(tle);dco=r(Jnt,"lxmert"),Jnt.forEach(t),cco=r(Nk," \u2014 "),tI=n(Nk,"A",{href:!0});var Ynt=s(tI);fco=r(Ynt,"LxmertTokenizer"),Ynt.forEach(t),mco=r(Nk," or "),aI=n(Nk,"A",{href:!0});var Knt=s(aI);gco=r(Knt,"LxmertTokenizerFast"),Knt.forEach(t),hco=r(Nk," (LXMERT model)"),Nk.forEach(t),pco=i(S),dh=n(S,"LI",{});var Tye=s(dh);ale=n(Tye,"STRONG",{});var Znt=s(ale);_co=r(Znt,"m2m_100"),Znt.forEach(t),uco=r(Tye," \u2014 "),nI=n(Tye,"A",{href:!0});var est=s(nI);bco=r(est,"M2M100Tokenizer"),est.forEach(t),vco=r(Tye," (M2M100 model)"),Tye.forEach(t),Fco=i(S),ch=n(S,"LI",{});var Mye=s(ch);nle=n(Mye,"STRONG",{});var ost=s(nle);Tco=r(ost,"marian"),ost.forEach(t),Mco=r(Mye," \u2014 "),sI=n(Mye,"A",{href:!0});var rst=s(sI);Eco=r(rst,"MarianTokenizer"),rst.forEach(t),Cco=r(Mye," (Marian model)"),Mye.forEach(t),wco=i(S),bs=n(S,"LI",{});var qk=s(bs);sle=n(qk,"STRONG",{});var tst=s(sle);Aco=r(tst,"mbart"),tst.forEach(t),Lco=r(qk," \u2014 "),lI=n(qk,"A",{href:!0});var ast=s(lI);yco=r(ast,"MBartTokenizer"),ast.forEach(t),xco=r(qk," or "),iI=n(qk,"A",{href:!0});var nst=s(iI);$co=r(nst,"MBartTokenizerFast"),nst.forEach(t),kco=r(qk," (mBART model)"),qk.forEach(t),Sco=i(S),vs=n(S,"LI",{});var jk=s(vs);lle=n(jk,"STRONG",{});var sst=s(lle);Rco=r(sst,"mbart50"),sst.forEach(t),Pco=r(jk," \u2014 "),dI=n(jk,"A",{href:!0});var lst=s(dI);Bco=r(lst,"MBart50Tokenizer"),lst.forEach(t),Ico=r(jk," or "),cI=n(jk,"A",{href:!0});var ist=s(cI);Nco=r(ist,"MBart50TokenizerFast"),ist.forEach(t),qco=r(jk," (mBART-50 model)"),jk.forEach(t),jco=i(S),Fs=n(S,"LI",{});var Dk=s(Fs);ile=n(Dk,"STRONG",{});var dst=s(ile);Dco=r(dst,"megatron-bert"),dst.forEach(t),Gco=r(Dk," \u2014 "),fI=n(Dk,"A",{href:!0});var cst=s(fI);Oco=r(cst,"BertTokenizer"),cst.forEach(t),Vco=r(Dk," or "),mI=n(Dk,"A",{href:!0});var fst=s(mI);Xco=r(fst,"BertTokenizerFast"),fst.forEach(t),zco=r(Dk," (Megatron-BERT model)"),Dk.forEach(t),Qco=i(S),fh=n(S,"LI",{});var Eye=s(fh);dle=n(Eye,"STRONG",{});var mst=s(dle);Wco=r(mst,"mluke"),mst.forEach(t),Hco=r(Eye," \u2014 "),gI=n(Eye,"A",{href:!0});var gst=s(gI);Uco=r(gst,"MLukeTokenizer"),gst.forEach(t),Jco=r(Eye," (mLUKE model)"),Eye.forEach(t),Yco=i(S),Ts=n(S,"LI",{});var Gk=s(Ts);cle=n(Gk,"STRONG",{});var hst=s(cle);Kco=r(hst,"mobilebert"),hst.forEach(t),Zco=r(Gk," \u2014 "),hI=n(Gk,"A",{href:!0});var pst=s(hI);efo=r(pst,"MobileBertTokenizer"),pst.forEach(t),ofo=r(Gk," or "),pI=n(Gk,"A",{href:!0});var _st=s(pI);rfo=r(_st,"MobileBertTokenizerFast"),_st.forEach(t),tfo=r(Gk," (MobileBERT model)"),Gk.forEach(t),afo=i(S),Ms=n(S,"LI",{});var Ok=s(Ms);fle=n(Ok,"STRONG",{});var ust=s(fle);nfo=r(ust,"mpnet"),ust.forEach(t),sfo=r(Ok," \u2014 "),_I=n(Ok,"A",{href:!0});var bst=s(_I);lfo=r(bst,"MPNetTokenizer"),bst.forEach(t),ifo=r(Ok," or "),uI=n(Ok,"A",{href:!0});var vst=s(uI);dfo=r(vst,"MPNetTokenizerFast"),vst.forEach(t),cfo=r(Ok," (MPNet model)"),Ok.forEach(t),ffo=i(S),Es=n(S,"LI",{});var Vk=s(Es);mle=n(Vk,"STRONG",{});var Fst=s(mle);mfo=r(Fst,"mt5"),Fst.forEach(t),gfo=r(Vk," \u2014 "),bI=n(Vk,"A",{href:!0});var Tst=s(bI);hfo=r(Tst,"MT5Tokenizer"),Tst.forEach(t),pfo=r(Vk," or "),vI=n(Vk,"A",{href:!0});var Mst=s(vI);_fo=r(Mst,"MT5TokenizerFast"),Mst.forEach(t),ufo=r(Vk," (MT5 model)"),Vk.forEach(t),bfo=i(S),Cs=n(S,"LI",{});var Xk=s(Cs);gle=n(Xk,"STRONG",{});var Est=s(gle);vfo=r(Est,"nezha"),Est.forEach(t),Ffo=r(Xk," \u2014 "),FI=n(Xk,"A",{href:!0});var Cst=s(FI);Tfo=r(Cst,"BertTokenizer"),Cst.forEach(t),Mfo=r(Xk," or "),TI=n(Xk,"A",{href:!0});var wst=s(TI);Efo=r(wst,"BertTokenizerFast"),wst.forEach(t),Cfo=r(Xk," (Nezha model)"),Xk.forEach(t),wfo=i(S),ws=n(S,"LI",{});var zk=s(ws);hle=n(zk,"STRONG",{});var Ast=s(hle);Afo=r(Ast,"nystromformer"),Ast.forEach(t),Lfo=r(zk," \u2014 "),MI=n(zk,"A",{href:!0});var Lst=s(MI);yfo=r(Lst,"AlbertTokenizer"),Lst.forEach(t),xfo=r(zk," or "),EI=n(zk,"A",{href:!0});var yst=s(EI);$fo=r(yst,"AlbertTokenizerFast"),yst.forEach(t),kfo=r(zk," (Nystr\xF6mformer model)"),zk.forEach(t),Sfo=i(S),As=n(S,"LI",{});var Qk=s(As);ple=n(Qk,"STRONG",{});var xst=s(ple);Rfo=r(xst,"openai-gpt"),xst.forEach(t),Pfo=r(Qk," \u2014 "),CI=n(Qk,"A",{href:!0});var $st=s(CI);Bfo=r($st,"OpenAIGPTTokenizer"),$st.forEach(t),Ifo=r(Qk," or "),wI=n(Qk,"A",{href:!0});var kst=s(wI);Nfo=r(kst,"OpenAIGPTTokenizerFast"),kst.forEach(t),qfo=r(Qk," (OpenAI GPT model)"),Qk.forEach(t),jfo=i(S),mh=n(S,"LI",{});var Cye=s(mh);_le=n(Cye,"STRONG",{});var Sst=s(_le);Dfo=r(Sst,"opt"),Sst.forEach(t),Gfo=r(Cye," \u2014 "),AI=n(Cye,"A",{href:!0});var Rst=s(AI);Ofo=r(Rst,"GPT2Tokenizer"),Rst.forEach(t),Vfo=r(Cye," (OPT model)"),Cye.forEach(t),Xfo=i(S),Ls=n(S,"LI",{});var Wk=s(Ls);ule=n(Wk,"STRONG",{});var Pst=s(ule);zfo=r(Pst,"pegasus"),Pst.forEach(t),Qfo=r(Wk," \u2014 "),LI=n(Wk,"A",{href:!0});var Bst=s(LI);Wfo=r(Bst,"PegasusTokenizer"),Bst.forEach(t),Hfo=r(Wk," or "),yI=n(Wk,"A",{href:!0});var Ist=s(yI);Ufo=r(Ist,"PegasusTokenizerFast"),Ist.forEach(t),Jfo=r(Wk," (Pegasus model)"),Wk.forEach(t),Yfo=i(S),gh=n(S,"LI",{});var wye=s(gh);ble=n(wye,"STRONG",{});var Nst=s(ble);Kfo=r(Nst,"perceiver"),Nst.forEach(t),Zfo=r(wye," \u2014 "),xI=n(wye,"A",{href:!0});var qst=s(xI);emo=r(qst,"PerceiverTokenizer"),qst.forEach(t),omo=r(wye," (Perceiver model)"),wye.forEach(t),rmo=i(S),hh=n(S,"LI",{});var Aye=s(hh);vle=n(Aye,"STRONG",{});var jst=s(vle);tmo=r(jst,"phobert"),jst.forEach(t),amo=r(Aye," \u2014 "),$I=n(Aye,"A",{href:!0});var Dst=s($I);nmo=r(Dst,"PhobertTokenizer"),Dst.forEach(t),smo=r(Aye," (PhoBERT model)"),Aye.forEach(t),lmo=i(S),ph=n(S,"LI",{});var Lye=s(ph);Fle=n(Lye,"STRONG",{});var Gst=s(Fle);imo=r(Gst,"plbart"),Gst.forEach(t),dmo=r(Lye," \u2014 "),kI=n(Lye,"A",{href:!0});var Ost=s(kI);cmo=r(Ost,"PLBartTokenizer"),Ost.forEach(t),fmo=r(Lye," (PLBart model)"),Lye.forEach(t),mmo=i(S),_h=n(S,"LI",{});var yye=s(_h);Tle=n(yye,"STRONG",{});var Vst=s(Tle);gmo=r(Vst,"prophetnet"),Vst.forEach(t),hmo=r(yye," \u2014 "),SI=n(yye,"A",{href:!0});var Xst=s(SI);pmo=r(Xst,"ProphetNetTokenizer"),Xst.forEach(t),_mo=r(yye," (ProphetNet model)"),yye.forEach(t),umo=i(S),ys=n(S,"LI",{});var Hk=s(ys);Mle=n(Hk,"STRONG",{});var zst=s(Mle);bmo=r(zst,"qdqbert"),zst.forEach(t),vmo=r(Hk," \u2014 "),RI=n(Hk,"A",{href:!0});var Qst=s(RI);Fmo=r(Qst,"BertTokenizer"),Qst.forEach(t),Tmo=r(Hk," or "),PI=n(Hk,"A",{href:!0});var Wst=s(PI);Mmo=r(Wst,"BertTokenizerFast"),Wst.forEach(t),Emo=r(Hk," (QDQBert model)"),Hk.forEach(t),Cmo=i(S),uh=n(S,"LI",{});var xye=s(uh);Ele=n(xye,"STRONG",{});var Hst=s(Ele);wmo=r(Hst,"rag"),Hst.forEach(t),Amo=r(xye," \u2014 "),BI=n(xye,"A",{href:!0});var Ust=s(BI);Lmo=r(Ust,"RagTokenizer"),Ust.forEach(t),ymo=r(xye," (RAG model)"),xye.forEach(t),xmo=i(S),xs=n(S,"LI",{});var Uk=s(xs);Cle=n(Uk,"STRONG",{});var Jst=s(Cle);$mo=r(Jst,"realm"),Jst.forEach(t),kmo=r(Uk," \u2014 "),II=n(Uk,"A",{href:!0});var Yst=s(II);Smo=r(Yst,"RealmTokenizer"),Yst.forEach(t),Rmo=r(Uk," or "),NI=n(Uk,"A",{href:!0});var Kst=s(NI);Pmo=r(Kst,"RealmTokenizerFast"),Kst.forEach(t),Bmo=r(Uk," (REALM model)"),Uk.forEach(t),Imo=i(S),$s=n(S,"LI",{});var Jk=s($s);wle=n(Jk,"STRONG",{});var Zst=s(wle);Nmo=r(Zst,"reformer"),Zst.forEach(t),qmo=r(Jk," \u2014 "),qI=n(Jk,"A",{href:!0});var elt=s(qI);jmo=r(elt,"ReformerTokenizer"),elt.forEach(t),Dmo=r(Jk," or "),jI=n(Jk,"A",{href:!0});var olt=s(jI);Gmo=r(olt,"ReformerTokenizerFast"),olt.forEach(t),Omo=r(Jk," (Reformer model)"),Jk.forEach(t),Vmo=i(S),ks=n(S,"LI",{});var Yk=s(ks);Ale=n(Yk,"STRONG",{});var rlt=s(Ale);Xmo=r(rlt,"rembert"),rlt.forEach(t),zmo=r(Yk," \u2014 "),DI=n(Yk,"A",{href:!0});var tlt=s(DI);Qmo=r(tlt,"RemBertTokenizer"),tlt.forEach(t),Wmo=r(Yk," or "),GI=n(Yk,"A",{href:!0});var alt=s(GI);Hmo=r(alt,"RemBertTokenizerFast"),alt.forEach(t),Umo=r(Yk," (RemBERT model)"),Yk.forEach(t),Jmo=i(S),Ss=n(S,"LI",{});var Kk=s(Ss);Lle=n(Kk,"STRONG",{});var nlt=s(Lle);Ymo=r(nlt,"retribert"),nlt.forEach(t),Kmo=r(Kk," \u2014 "),OI=n(Kk,"A",{href:!0});var slt=s(OI);Zmo=r(slt,"RetriBertTokenizer"),slt.forEach(t),ego=r(Kk," or "),VI=n(Kk,"A",{href:!0});var llt=s(VI);ogo=r(llt,"RetriBertTokenizerFast"),llt.forEach(t),rgo=r(Kk," (RetriBERT model)"),Kk.forEach(t),tgo=i(S),Rs=n(S,"LI",{});var Zk=s(Rs);yle=n(Zk,"STRONG",{});var ilt=s(yle);ago=r(ilt,"roberta"),ilt.forEach(t),ngo=r(Zk," \u2014 "),XI=n(Zk,"A",{href:!0});var dlt=s(XI);sgo=r(dlt,"RobertaTokenizer"),dlt.forEach(t),lgo=r(Zk," or "),zI=n(Zk,"A",{href:!0});var clt=s(zI);igo=r(clt,"RobertaTokenizerFast"),clt.forEach(t),dgo=r(Zk," (RoBERTa model)"),Zk.forEach(t),cgo=i(S),Ps=n(S,"LI",{});var eS=s(Ps);xle=n(eS,"STRONG",{});var flt=s(xle);fgo=r(flt,"roformer"),flt.forEach(t),mgo=r(eS," \u2014 "),QI=n(eS,"A",{href:!0});var mlt=s(QI);ggo=r(mlt,"RoFormerTokenizer"),mlt.forEach(t),hgo=r(eS," or "),WI=n(eS,"A",{href:!0});var glt=s(WI);pgo=r(glt,"RoFormerTokenizerFast"),glt.forEach(t),_go=r(eS," (RoFormer model)"),eS.forEach(t),ugo=i(S),bh=n(S,"LI",{});var $ye=s(bh);$le=n($ye,"STRONG",{});var hlt=s($le);bgo=r(hlt,"speech_to_text"),hlt.forEach(t),vgo=r($ye," \u2014 "),HI=n($ye,"A",{href:!0});var plt=s(HI);Fgo=r(plt,"Speech2TextTokenizer"),plt.forEach(t),Tgo=r($ye," (Speech2Text model)"),$ye.forEach(t),Mgo=i(S),vh=n(S,"LI",{});var kye=s(vh);kle=n(kye,"STRONG",{});var _lt=s(kle);Ego=r(_lt,"speech_to_text_2"),_lt.forEach(t),Cgo=r(kye," \u2014 "),UI=n(kye,"A",{href:!0});var ult=s(UI);wgo=r(ult,"Speech2Text2Tokenizer"),ult.forEach(t),Ago=r(kye," (Speech2Text2 model)"),kye.forEach(t),Lgo=i(S),Bs=n(S,"LI",{});var oS=s(Bs);Sle=n(oS,"STRONG",{});var blt=s(Sle);ygo=r(blt,"splinter"),blt.forEach(t),xgo=r(oS," \u2014 "),JI=n(oS,"A",{href:!0});var vlt=s(JI);$go=r(vlt,"SplinterTokenizer"),vlt.forEach(t),kgo=r(oS," or "),YI=n(oS,"A",{href:!0});var Flt=s(YI);Sgo=r(Flt,"SplinterTokenizerFast"),Flt.forEach(t),Rgo=r(oS," (Splinter model)"),oS.forEach(t),Pgo=i(S),Is=n(S,"LI",{});var rS=s(Is);Rle=n(rS,"STRONG",{});var Tlt=s(Rle);Bgo=r(Tlt,"squeezebert"),Tlt.forEach(t),Igo=r(rS," \u2014 "),KI=n(rS,"A",{href:!0});var Mlt=s(KI);Ngo=r(Mlt,"SqueezeBertTokenizer"),Mlt.forEach(t),qgo=r(rS," or "),ZI=n(rS,"A",{href:!0});var Elt=s(ZI);jgo=r(Elt,"SqueezeBertTokenizerFast"),Elt.forEach(t),Dgo=r(rS," (SqueezeBERT model)"),rS.forEach(t),Ggo=i(S),Ns=n(S,"LI",{});var tS=s(Ns);Ple=n(tS,"STRONG",{});var Clt=s(Ple);Ogo=r(Clt,"t5"),Clt.forEach(t),Vgo=r(tS," \u2014 "),eN=n(tS,"A",{href:!0});var wlt=s(eN);Xgo=r(wlt,"T5Tokenizer"),wlt.forEach(t),zgo=r(tS," or "),oN=n(tS,"A",{href:!0});var Alt=s(oN);Qgo=r(Alt,"T5TokenizerFast"),Alt.forEach(t),Wgo=r(tS," (T5 model)"),tS.forEach(t),Hgo=i(S),Fh=n(S,"LI",{});var Sye=s(Fh);Ble=n(Sye,"STRONG",{});var Llt=s(Ble);Ugo=r(Llt,"tapas"),Llt.forEach(t),Jgo=r(Sye," \u2014 "),rN=n(Sye,"A",{href:!0});var ylt=s(rN);Ygo=r(ylt,"TapasTokenizer"),ylt.forEach(t),Kgo=r(Sye," (TAPAS model)"),Sye.forEach(t),Zgo=i(S),Th=n(S,"LI",{});var Rye=s(Th);Ile=n(Rye,"STRONG",{});var xlt=s(Ile);eho=r(xlt,"tapex"),xlt.forEach(t),oho=r(Rye," \u2014 "),tN=n(Rye,"A",{href:!0});var $lt=s(tN);rho=r($lt,"TapexTokenizer"),$lt.forEach(t),tho=r(Rye," (TAPEX model)"),Rye.forEach(t),aho=i(S),Mh=n(S,"LI",{});var Pye=s(Mh);Nle=n(Pye,"STRONG",{});var klt=s(Nle);nho=r(klt,"transfo-xl"),klt.forEach(t),sho=r(Pye," \u2014 "),aN=n(Pye,"A",{href:!0});var Slt=s(aN);lho=r(Slt,"TransfoXLTokenizer"),Slt.forEach(t),iho=r(Pye," (Transformer-XL model)"),Pye.forEach(t),dho=i(S),qs=n(S,"LI",{});var aS=s(qs);qle=n(aS,"STRONG",{});var Rlt=s(qle);cho=r(Rlt,"vilt"),Rlt.forEach(t),fho=r(aS," \u2014 "),nN=n(aS,"A",{href:!0});var Plt=s(nN);mho=r(Plt,"BertTokenizer"),Plt.forEach(t),gho=r(aS," or "),sN=n(aS,"A",{href:!0});var Blt=s(sN);hho=r(Blt,"BertTokenizerFast"),Blt.forEach(t),pho=r(aS," (ViLT model)"),aS.forEach(t),_ho=i(S),js=n(S,"LI",{});var nS=s(js);jle=n(nS,"STRONG",{});var Ilt=s(jle);uho=r(Ilt,"visual_bert"),Ilt.forEach(t),bho=r(nS," \u2014 "),lN=n(nS,"A",{href:!0});var Nlt=s(lN);vho=r(Nlt,"BertTokenizer"),Nlt.forEach(t),Fho=r(nS," or "),iN=n(nS,"A",{href:!0});var qlt=s(iN);Tho=r(qlt,"BertTokenizerFast"),qlt.forEach(t),Mho=r(nS," (VisualBERT model)"),nS.forEach(t),Eho=i(S),Eh=n(S,"LI",{});var Bye=s(Eh);Dle=n(Bye,"STRONG",{});var jlt=s(Dle);Cho=r(jlt,"wav2vec2"),jlt.forEach(t),who=r(Bye," \u2014 "),dN=n(Bye,"A",{href:!0});var Dlt=s(dN);Aho=r(Dlt,"Wav2Vec2CTCTokenizer"),Dlt.forEach(t),Lho=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),yho=i(S),Ch=n(S,"LI",{});var Iye=s(Ch);Gle=n(Iye,"STRONG",{});var Glt=s(Gle);xho=r(Glt,"wav2vec2-conformer"),Glt.forEach(t),$ho=r(Iye," \u2014 "),cN=n(Iye,"A",{href:!0});var Olt=s(cN);kho=r(Olt,"Wav2Vec2CTCTokenizer"),Olt.forEach(t),Sho=r(Iye," (Wav2Vec2-Conformer model)"),Iye.forEach(t),Rho=i(S),wh=n(S,"LI",{});var Nye=s(wh);Ole=n(Nye,"STRONG",{});var Vlt=s(Ole);Pho=r(Vlt,"wav2vec2_phoneme"),Vlt.forEach(t),Bho=r(Nye," \u2014 "),fN=n(Nye,"A",{href:!0});var Xlt=s(fN);Iho=r(Xlt,"Wav2Vec2PhonemeCTCTokenizer"),Xlt.forEach(t),Nho=r(Nye," (Wav2Vec2Phoneme model)"),Nye.forEach(t),qho=i(S),Ds=n(S,"LI",{});var sS=s(Ds);Vle=n(sS,"STRONG",{});var zlt=s(Vle);jho=r(zlt,"xglm"),zlt.forEach(t),Dho=r(sS," \u2014 "),mN=n(sS,"A",{href:!0});var Qlt=s(mN);Gho=r(Qlt,"XGLMTokenizer"),Qlt.forEach(t),Oho=r(sS," or "),gN=n(sS,"A",{href:!0});var Wlt=s(gN);Vho=r(Wlt,"XGLMTokenizerFast"),Wlt.forEach(t),Xho=r(sS," (XGLM model)"),sS.forEach(t),zho=i(S),Ah=n(S,"LI",{});var qye=s(Ah);Xle=n(qye,"STRONG",{});var Hlt=s(Xle);Qho=r(Hlt,"xlm"),Hlt.forEach(t),Who=r(qye," \u2014 "),hN=n(qye,"A",{href:!0});var Ult=s(hN);Hho=r(Ult,"XLMTokenizer"),Ult.forEach(t),Uho=r(qye," (XLM model)"),qye.forEach(t),Jho=i(S),Lh=n(S,"LI",{});var jye=s(Lh);zle=n(jye,"STRONG",{});var Jlt=s(zle);Yho=r(Jlt,"xlm-prophetnet"),Jlt.forEach(t),Kho=r(jye," \u2014 "),pN=n(jye,"A",{href:!0});var Ylt=s(pN);Zho=r(Ylt,"XLMProphetNetTokenizer"),Ylt.forEach(t),epo=r(jye," (XLM-ProphetNet model)"),jye.forEach(t),opo=i(S),Gs=n(S,"LI",{});var lS=s(Gs);Qle=n(lS,"STRONG",{});var Klt=s(Qle);rpo=r(Klt,"xlm-roberta"),Klt.forEach(t),tpo=r(lS," \u2014 "),_N=n(lS,"A",{href:!0});var Zlt=s(_N);apo=r(Zlt,"XLMRobertaTokenizer"),Zlt.forEach(t),npo=r(lS," or "),uN=n(lS,"A",{href:!0});var eit=s(uN);spo=r(eit,"XLMRobertaTokenizerFast"),eit.forEach(t),lpo=r(lS," (XLM-RoBERTa model)"),lS.forEach(t),ipo=i(S),Os=n(S,"LI",{});var iS=s(Os);Wle=n(iS,"STRONG",{});var oit=s(Wle);dpo=r(oit,"xlm-roberta-xl"),oit.forEach(t),cpo=r(iS," \u2014 "),bN=n(iS,"A",{href:!0});var rit=s(bN);fpo=r(rit,"RobertaTokenizer"),rit.forEach(t),mpo=r(iS," or "),vN=n(iS,"A",{href:!0});var tit=s(vN);gpo=r(tit,"RobertaTokenizerFast"),tit.forEach(t),hpo=r(iS," (XLM-RoBERTa-XL model)"),iS.forEach(t),ppo=i(S),Vs=n(S,"LI",{});var dS=s(Vs);Hle=n(dS,"STRONG",{});var ait=s(Hle);_po=r(ait,"xlnet"),ait.forEach(t),upo=r(dS," \u2014 "),FN=n(dS,"A",{href:!0});var nit=s(FN);bpo=r(nit,"XLNetTokenizer"),nit.forEach(t),vpo=r(dS," or "),TN=n(dS,"A",{href:!0});var sit=s(TN);Fpo=r(sit,"XLNetTokenizerFast"),sit.forEach(t),Tpo=r(dS," (XLNet model)"),dS.forEach(t),Mpo=i(S),Xs=n(S,"LI",{});var cS=s(Xs);Ule=n(cS,"STRONG",{});var lit=s(Ule);Epo=r(lit,"yoso"),lit.forEach(t),Cpo=r(cS," \u2014 "),MN=n(cS,"A",{href:!0});var iit=s(MN);wpo=r(iit,"AlbertTokenizer"),iit.forEach(t),Apo=r(cS," or "),EN=n(cS,"A",{href:!0});var dit=s(EN);Lpo=r(dit,"AlbertTokenizerFast"),dit.forEach(t),ypo=r(cS," (YOSO model)"),cS.forEach(t),S.forEach(t),xpo=i(Js),T(yh.$$.fragment,Js),Js.forEach(t),$po=i(Us),xh=n(Us,"DIV",{class:!0});var GXe=s(xh);T(ZL.$$.fragment,GXe),kpo=i(GXe),Jle=n(GXe,"P",{});var cit=s(Jle);Spo=r(cit,"Register a new tokenizer in this mapping."),cit.forEach(t),GXe.forEach(t),Us.forEach(t),DOe=i(f),Bi=n(f,"H2",{class:!0});var OXe=s(Bi);$h=n(OXe,"A",{id:!0,class:!0,href:!0});var fit=s($h);Yle=n(fit,"SPAN",{});var mit=s(Yle);T(ey.$$.fragment,mit),mit.forEach(t),fit.forEach(t),Rpo=i(OXe),Kle=n(OXe,"SPAN",{});var git=s(Kle);Ppo=r(git,"AutoFeatureExtractor"),git.forEach(t),OXe.forEach(t),GOe=i(f),Lo=n(f,"DIV",{class:!0});var Ys=s(Lo);T(oy.$$.fragment,Ys),Bpo=i(Ys),ry=n(Ys,"P",{});var VXe=s(ry);Ipo=r(VXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CN=n(VXe,"A",{href:!0});var hit=s(CN);Npo=r(hit,"AutoFeatureExtractor.from_pretrained()"),hit.forEach(t),qpo=r(VXe," class method."),VXe.forEach(t),jpo=i(Ys),ty=n(Ys,"P",{});var XXe=s(ty);Dpo=r(XXe,"This class cannot be instantiated directly using "),Zle=n(XXe,"CODE",{});var pit=s(Zle);Gpo=r(pit,"__init__()"),pit.forEach(t),Opo=r(XXe," (throws an error)."),XXe.forEach(t),Vpo=i(Ys),He=n(Ys,"DIV",{class:!0});var ta=s(He);T(ay.$$.fragment,ta),Xpo=i(ta),eie=n(ta,"P",{});var _it=s(eie);zpo=r(_it,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_it.forEach(t),Qpo=i(ta),Ra=n(ta,"P",{});var OA=s(Ra);Wpo=r(OA,"The feature extractor class to instantiate is selected based on the "),oie=n(OA,"CODE",{});var uit=s(oie);Hpo=r(uit,"model_type"),uit.forEach(t),Upo=r(OA,` property of the config object
(either passed as an argument or loaded from `),rie=n(OA,"CODE",{});var bit=s(rie);Jpo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),Ypo=r(OA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tie=n(OA,"CODE",{});var vit=s(tie);Kpo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),Zpo=r(OA,":"),OA.forEach(t),e_o=i(ta),Y=n(ta,"UL",{});var K=s(Y);kh=n(K,"LI",{});var Dye=s(kh);aie=n(Dye,"STRONG",{});var Fit=s(aie);o_o=r(Fit,"beit"),Fit.forEach(t),r_o=r(Dye," \u2014 "),wN=n(Dye,"A",{href:!0});var Tit=s(wN);t_o=r(Tit,"BeitFeatureExtractor"),Tit.forEach(t),a_o=r(Dye," (BEiT model)"),Dye.forEach(t),n_o=i(K),Sh=n(K,"LI",{});var Gye=s(Sh);nie=n(Gye,"STRONG",{});var Mit=s(nie);s_o=r(Mit,"clip"),Mit.forEach(t),l_o=r(Gye," \u2014 "),AN=n(Gye,"A",{href:!0});var Eit=s(AN);i_o=r(Eit,"CLIPFeatureExtractor"),Eit.forEach(t),d_o=r(Gye," (CLIP model)"),Gye.forEach(t),c_o=i(K),Rh=n(K,"LI",{});var Oye=s(Rh);sie=n(Oye,"STRONG",{});var Cit=s(sie);f_o=r(Cit,"convnext"),Cit.forEach(t),m_o=r(Oye," \u2014 "),LN=n(Oye,"A",{href:!0});var wit=s(LN);g_o=r(wit,"ConvNextFeatureExtractor"),wit.forEach(t),h_o=r(Oye," (ConvNeXT model)"),Oye.forEach(t),p_o=i(K),Ph=n(K,"LI",{});var Vye=s(Ph);lie=n(Vye,"STRONG",{});var Ait=s(lie);__o=r(Ait,"cvt"),Ait.forEach(t),u_o=r(Vye," \u2014 "),yN=n(Vye,"A",{href:!0});var Lit=s(yN);b_o=r(Lit,"ConvNextFeatureExtractor"),Lit.forEach(t),v_o=r(Vye," (CvT model)"),Vye.forEach(t),F_o=i(K),Bh=n(K,"LI",{});var Xye=s(Bh);iie=n(Xye,"STRONG",{});var yit=s(iie);T_o=r(yit,"data2vec-audio"),yit.forEach(t),M_o=r(Xye," \u2014 "),xN=n(Xye,"A",{href:!0});var xit=s(xN);E_o=r(xit,"Wav2Vec2FeatureExtractor"),xit.forEach(t),C_o=r(Xye," (Data2VecAudio model)"),Xye.forEach(t),w_o=i(K),Ih=n(K,"LI",{});var zye=s(Ih);die=n(zye,"STRONG",{});var $it=s(die);A_o=r($it,"data2vec-vision"),$it.forEach(t),L_o=r(zye," \u2014 "),$N=n(zye,"A",{href:!0});var kit=s($N);y_o=r(kit,"BeitFeatureExtractor"),kit.forEach(t),x_o=r(zye," (Data2VecVision model)"),zye.forEach(t),$_o=i(K),Nh=n(K,"LI",{});var Qye=s(Nh);cie=n(Qye,"STRONG",{});var Sit=s(cie);k_o=r(Sit,"deit"),Sit.forEach(t),S_o=r(Qye," \u2014 "),kN=n(Qye,"A",{href:!0});var Rit=s(kN);R_o=r(Rit,"DeiTFeatureExtractor"),Rit.forEach(t),P_o=r(Qye," (DeiT model)"),Qye.forEach(t),B_o=i(K),qh=n(K,"LI",{});var Wye=s(qh);fie=n(Wye,"STRONG",{});var Pit=s(fie);I_o=r(Pit,"detr"),Pit.forEach(t),N_o=r(Wye," \u2014 "),SN=n(Wye,"A",{href:!0});var Bit=s(SN);q_o=r(Bit,"DetrFeatureExtractor"),Bit.forEach(t),j_o=r(Wye," (DETR model)"),Wye.forEach(t),D_o=i(K),jh=n(K,"LI",{});var Hye=s(jh);mie=n(Hye,"STRONG",{});var Iit=s(mie);G_o=r(Iit,"dpt"),Iit.forEach(t),O_o=r(Hye," \u2014 "),RN=n(Hye,"A",{href:!0});var Nit=s(RN);V_o=r(Nit,"DPTFeatureExtractor"),Nit.forEach(t),X_o=r(Hye," (DPT model)"),Hye.forEach(t),z_o=i(K),Dh=n(K,"LI",{});var Uye=s(Dh);gie=n(Uye,"STRONG",{});var qit=s(gie);Q_o=r(qit,"flava"),qit.forEach(t),W_o=r(Uye," \u2014 "),PN=n(Uye,"A",{href:!0});var jit=s(PN);H_o=r(jit,"FlavaFeatureExtractor"),jit.forEach(t),U_o=r(Uye," (FLAVA model)"),Uye.forEach(t),J_o=i(K),Gh=n(K,"LI",{});var Jye=s(Gh);hie=n(Jye,"STRONG",{});var Dit=s(hie);Y_o=r(Dit,"glpn"),Dit.forEach(t),K_o=r(Jye," \u2014 "),BN=n(Jye,"A",{href:!0});var Git=s(BN);Z_o=r(Git,"GLPNFeatureExtractor"),Git.forEach(t),euo=r(Jye," (GLPN model)"),Jye.forEach(t),ouo=i(K),Oh=n(K,"LI",{});var Yye=s(Oh);pie=n(Yye,"STRONG",{});var Oit=s(pie);ruo=r(Oit,"groupvit"),Oit.forEach(t),tuo=r(Yye," \u2014 "),IN=n(Yye,"A",{href:!0});var Vit=s(IN);auo=r(Vit,"CLIPFeatureExtractor"),Vit.forEach(t),nuo=r(Yye," (GroupViT model)"),Yye.forEach(t),suo=i(K),Vh=n(K,"LI",{});var Kye=s(Vh);_ie=n(Kye,"STRONG",{});var Xit=s(_ie);luo=r(Xit,"hubert"),Xit.forEach(t),iuo=r(Kye," \u2014 "),NN=n(Kye,"A",{href:!0});var zit=s(NN);duo=r(zit,"Wav2Vec2FeatureExtractor"),zit.forEach(t),cuo=r(Kye," (Hubert model)"),Kye.forEach(t),fuo=i(K),Xh=n(K,"LI",{});var Zye=s(Xh);uie=n(Zye,"STRONG",{});var Qit=s(uie);muo=r(Qit,"imagegpt"),Qit.forEach(t),guo=r(Zye," \u2014 "),qN=n(Zye,"A",{href:!0});var Wit=s(qN);huo=r(Wit,"ImageGPTFeatureExtractor"),Wit.forEach(t),puo=r(Zye," (ImageGPT model)"),Zye.forEach(t),_uo=i(K),zh=n(K,"LI",{});var e8e=s(zh);bie=n(e8e,"STRONG",{});var Hit=s(bie);uuo=r(Hit,"layoutlmv2"),Hit.forEach(t),buo=r(e8e," \u2014 "),jN=n(e8e,"A",{href:!0});var Uit=s(jN);vuo=r(Uit,"LayoutLMv2FeatureExtractor"),Uit.forEach(t),Fuo=r(e8e," (LayoutLMv2 model)"),e8e.forEach(t),Tuo=i(K),Qh=n(K,"LI",{});var o8e=s(Qh);vie=n(o8e,"STRONG",{});var Jit=s(vie);Muo=r(Jit,"layoutlmv3"),Jit.forEach(t),Euo=r(o8e," \u2014 "),DN=n(o8e,"A",{href:!0});var Yit=s(DN);Cuo=r(Yit,"LayoutLMv3FeatureExtractor"),Yit.forEach(t),wuo=r(o8e," (LayoutLMv3 model)"),o8e.forEach(t),Auo=i(K),Wh=n(K,"LI",{});var r8e=s(Wh);Fie=n(r8e,"STRONG",{});var Kit=s(Fie);Luo=r(Kit,"levit"),Kit.forEach(t),yuo=r(r8e," \u2014 "),GN=n(r8e,"A",{href:!0});var Zit=s(GN);xuo=r(Zit,"LevitFeatureExtractor"),Zit.forEach(t),$uo=r(r8e," (LeViT model)"),r8e.forEach(t),kuo=i(K),Hh=n(K,"LI",{});var t8e=s(Hh);Tie=n(t8e,"STRONG",{});var edt=s(Tie);Suo=r(edt,"maskformer"),edt.forEach(t),Ruo=r(t8e," \u2014 "),ON=n(t8e,"A",{href:!0});var odt=s(ON);Puo=r(odt,"MaskFormerFeatureExtractor"),odt.forEach(t),Buo=r(t8e," (MaskFormer model)"),t8e.forEach(t),Iuo=i(K),Uh=n(K,"LI",{});var a8e=s(Uh);Mie=n(a8e,"STRONG",{});var rdt=s(Mie);Nuo=r(rdt,"mctct"),rdt.forEach(t),quo=r(a8e," \u2014 "),VN=n(a8e,"A",{href:!0});var tdt=s(VN);juo=r(tdt,"MCTCTFeatureExtractor"),tdt.forEach(t),Duo=r(a8e," (M-CTC-T model)"),a8e.forEach(t),Guo=i(K),Jh=n(K,"LI",{});var n8e=s(Jh);Eie=n(n8e,"STRONG",{});var adt=s(Eie);Ouo=r(adt,"perceiver"),adt.forEach(t),Vuo=r(n8e," \u2014 "),XN=n(n8e,"A",{href:!0});var ndt=s(XN);Xuo=r(ndt,"PerceiverFeatureExtractor"),ndt.forEach(t),zuo=r(n8e," (Perceiver model)"),n8e.forEach(t),Quo=i(K),Yh=n(K,"LI",{});var s8e=s(Yh);Cie=n(s8e,"STRONG",{});var sdt=s(Cie);Wuo=r(sdt,"poolformer"),sdt.forEach(t),Huo=r(s8e," \u2014 "),zN=n(s8e,"A",{href:!0});var ldt=s(zN);Uuo=r(ldt,"PoolFormerFeatureExtractor"),ldt.forEach(t),Juo=r(s8e," (PoolFormer model)"),s8e.forEach(t),Yuo=i(K),Kh=n(K,"LI",{});var l8e=s(Kh);wie=n(l8e,"STRONG",{});var idt=s(wie);Kuo=r(idt,"regnet"),idt.forEach(t),Zuo=r(l8e," \u2014 "),QN=n(l8e,"A",{href:!0});var ddt=s(QN);e5o=r(ddt,"ConvNextFeatureExtractor"),ddt.forEach(t),o5o=r(l8e," (RegNet model)"),l8e.forEach(t),r5o=i(K),Zh=n(K,"LI",{});var i8e=s(Zh);Aie=n(i8e,"STRONG",{});var cdt=s(Aie);t5o=r(cdt,"resnet"),cdt.forEach(t),a5o=r(i8e," \u2014 "),WN=n(i8e,"A",{href:!0});var fdt=s(WN);n5o=r(fdt,"ConvNextFeatureExtractor"),fdt.forEach(t),s5o=r(i8e," (ResNet model)"),i8e.forEach(t),l5o=i(K),ep=n(K,"LI",{});var d8e=s(ep);Lie=n(d8e,"STRONG",{});var mdt=s(Lie);i5o=r(mdt,"segformer"),mdt.forEach(t),d5o=r(d8e," \u2014 "),HN=n(d8e,"A",{href:!0});var gdt=s(HN);c5o=r(gdt,"SegformerFeatureExtractor"),gdt.forEach(t),f5o=r(d8e," (SegFormer model)"),d8e.forEach(t),m5o=i(K),op=n(K,"LI",{});var c8e=s(op);yie=n(c8e,"STRONG",{});var hdt=s(yie);g5o=r(hdt,"speech_to_text"),hdt.forEach(t),h5o=r(c8e," \u2014 "),UN=n(c8e,"A",{href:!0});var pdt=s(UN);p5o=r(pdt,"Speech2TextFeatureExtractor"),pdt.forEach(t),_5o=r(c8e," (Speech2Text model)"),c8e.forEach(t),u5o=i(K),rp=n(K,"LI",{});var f8e=s(rp);xie=n(f8e,"STRONG",{});var _dt=s(xie);b5o=r(_dt,"swin"),_dt.forEach(t),v5o=r(f8e," \u2014 "),JN=n(f8e,"A",{href:!0});var udt=s(JN);F5o=r(udt,"ViTFeatureExtractor"),udt.forEach(t),T5o=r(f8e," (Swin Transformer model)"),f8e.forEach(t),M5o=i(K),tp=n(K,"LI",{});var m8e=s(tp);$ie=n(m8e,"STRONG",{});var bdt=s($ie);E5o=r(bdt,"van"),bdt.forEach(t),C5o=r(m8e," \u2014 "),YN=n(m8e,"A",{href:!0});var vdt=s(YN);w5o=r(vdt,"ConvNextFeatureExtractor"),vdt.forEach(t),A5o=r(m8e," (VAN model)"),m8e.forEach(t),L5o=i(K),ap=n(K,"LI",{});var g8e=s(ap);kie=n(g8e,"STRONG",{});var Fdt=s(kie);y5o=r(Fdt,"vilt"),Fdt.forEach(t),x5o=r(g8e," \u2014 "),KN=n(g8e,"A",{href:!0});var Tdt=s(KN);$5o=r(Tdt,"ViltFeatureExtractor"),Tdt.forEach(t),k5o=r(g8e," (ViLT model)"),g8e.forEach(t),S5o=i(K),np=n(K,"LI",{});var h8e=s(np);Sie=n(h8e,"STRONG",{});var Mdt=s(Sie);R5o=r(Mdt,"vit"),Mdt.forEach(t),P5o=r(h8e," \u2014 "),ZN=n(h8e,"A",{href:!0});var Edt=s(ZN);B5o=r(Edt,"ViTFeatureExtractor"),Edt.forEach(t),I5o=r(h8e," (ViT model)"),h8e.forEach(t),N5o=i(K),sp=n(K,"LI",{});var p8e=s(sp);Rie=n(p8e,"STRONG",{});var Cdt=s(Rie);q5o=r(Cdt,"vit_mae"),Cdt.forEach(t),j5o=r(p8e," \u2014 "),eq=n(p8e,"A",{href:!0});var wdt=s(eq);D5o=r(wdt,"ViTFeatureExtractor"),wdt.forEach(t),G5o=r(p8e," (ViTMAE model)"),p8e.forEach(t),O5o=i(K),lp=n(K,"LI",{});var _8e=s(lp);Pie=n(_8e,"STRONG",{});var Adt=s(Pie);V5o=r(Adt,"wav2vec2"),Adt.forEach(t),X5o=r(_8e," \u2014 "),oq=n(_8e,"A",{href:!0});var Ldt=s(oq);z5o=r(Ldt,"Wav2Vec2FeatureExtractor"),Ldt.forEach(t),Q5o=r(_8e," (Wav2Vec2 model)"),_8e.forEach(t),W5o=i(K),ip=n(K,"LI",{});var u8e=s(ip);Bie=n(u8e,"STRONG",{});var ydt=s(Bie);H5o=r(ydt,"wav2vec2-conformer"),ydt.forEach(t),U5o=r(u8e," \u2014 "),rq=n(u8e,"A",{href:!0});var xdt=s(rq);J5o=r(xdt,"Wav2Vec2FeatureExtractor"),xdt.forEach(t),Y5o=r(u8e," (Wav2Vec2-Conformer model)"),u8e.forEach(t),K5o=i(K),dp=n(K,"LI",{});var b8e=s(dp);Iie=n(b8e,"STRONG",{});var $dt=s(Iie);Z5o=r($dt,"yolos"),$dt.forEach(t),e1o=r(b8e," \u2014 "),tq=n(b8e,"A",{href:!0});var kdt=s(tq);o1o=r(kdt,"YolosFeatureExtractor"),kdt.forEach(t),r1o=r(b8e," (YOLOS model)"),b8e.forEach(t),K.forEach(t),t1o=i(ta),T(cp.$$.fragment,ta),a1o=i(ta),T(fp.$$.fragment,ta),ta.forEach(t),n1o=i(Ys),mp=n(Ys,"DIV",{class:!0});var zXe=s(mp);T(ny.$$.fragment,zXe),s1o=i(zXe),Nie=n(zXe,"P",{});var Sdt=s(Nie);l1o=r(Sdt,"Register a new feature extractor for this class."),Sdt.forEach(t),zXe.forEach(t),Ys.forEach(t),OOe=i(f),Ii=n(f,"H2",{class:!0});var QXe=s(Ii);gp=n(QXe,"A",{id:!0,class:!0,href:!0});var Rdt=s(gp);qie=n(Rdt,"SPAN",{});var Pdt=s(qie);T(sy.$$.fragment,Pdt),Pdt.forEach(t),Rdt.forEach(t),i1o=i(QXe),jie=n(QXe,"SPAN",{});var Bdt=s(jie);d1o=r(Bdt,"AutoProcessor"),Bdt.forEach(t),QXe.forEach(t),VOe=i(f),yo=n(f,"DIV",{class:!0});var Ks=s(yo);T(ly.$$.fragment,Ks),c1o=i(Ks),iy=n(Ks,"P",{});var WXe=s(iy);f1o=r(WXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aq=n(WXe,"A",{href:!0});var Idt=s(aq);m1o=r(Idt,"AutoProcessor.from_pretrained()"),Idt.forEach(t),g1o=r(WXe," class method."),WXe.forEach(t),h1o=i(Ks),dy=n(Ks,"P",{});var HXe=s(dy);p1o=r(HXe,"This class cannot be instantiated directly using "),Die=n(HXe,"CODE",{});var Ndt=s(Die);_1o=r(Ndt,"__init__()"),Ndt.forEach(t),u1o=r(HXe," (throws an error)."),HXe.forEach(t),b1o=i(Ks),Ue=n(Ks,"DIV",{class:!0});var aa=s(Ue);T(cy.$$.fragment,aa),v1o=i(aa),Gie=n(aa,"P",{});var qdt=s(Gie);F1o=r(qdt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qdt.forEach(t),T1o=i(aa),Ni=n(aa,"P",{});var Xoe=s(Ni);M1o=r(Xoe,"The processor class to instantiate is selected based on the "),Oie=n(Xoe,"CODE",{});var jdt=s(Oie);E1o=r(jdt,"model_type"),jdt.forEach(t),C1o=r(Xoe,` property of the config object (either
passed as an argument or loaded from `),Vie=n(Xoe,"CODE",{});var Ddt=s(Vie);w1o=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),A1o=r(Xoe," if possible):"),Xoe.forEach(t),L1o=i(aa),he=n(aa,"UL",{});var ue=s(he);hp=n(ue,"LI",{});var v8e=s(hp);Xie=n(v8e,"STRONG",{});var Gdt=s(Xie);y1o=r(Gdt,"clip"),Gdt.forEach(t),x1o=r(v8e," \u2014 "),nq=n(v8e,"A",{href:!0});var Odt=s(nq);$1o=r(Odt,"CLIPProcessor"),Odt.forEach(t),k1o=r(v8e," (CLIP model)"),v8e.forEach(t),S1o=i(ue),pp=n(ue,"LI",{});var F8e=s(pp);zie=n(F8e,"STRONG",{});var Vdt=s(zie);R1o=r(Vdt,"flava"),Vdt.forEach(t),P1o=r(F8e," \u2014 "),Qie=n(F8e,"CODE",{});var Xdt=s(Qie);B1o=r(Xdt,"FLAVAProcessor"),Xdt.forEach(t),I1o=r(F8e," (FLAVA model)"),F8e.forEach(t),N1o=i(ue),_p=n(ue,"LI",{});var T8e=s(_p);Wie=n(T8e,"STRONG",{});var zdt=s(Wie);q1o=r(zdt,"groupvit"),zdt.forEach(t),j1o=r(T8e," \u2014 "),sq=n(T8e,"A",{href:!0});var Qdt=s(sq);D1o=r(Qdt,"CLIPProcessor"),Qdt.forEach(t),G1o=r(T8e," (GroupViT model)"),T8e.forEach(t),O1o=i(ue),up=n(ue,"LI",{});var M8e=s(up);Hie=n(M8e,"STRONG",{});var Wdt=s(Hie);V1o=r(Wdt,"layoutlmv2"),Wdt.forEach(t),X1o=r(M8e," \u2014 "),lq=n(M8e,"A",{href:!0});var Hdt=s(lq);z1o=r(Hdt,"LayoutLMv2Processor"),Hdt.forEach(t),Q1o=r(M8e," (LayoutLMv2 model)"),M8e.forEach(t),W1o=i(ue),bp=n(ue,"LI",{});var E8e=s(bp);Uie=n(E8e,"STRONG",{});var Udt=s(Uie);H1o=r(Udt,"layoutlmv3"),Udt.forEach(t),U1o=r(E8e," \u2014 "),iq=n(E8e,"A",{href:!0});var Jdt=s(iq);J1o=r(Jdt,"LayoutLMv3Processor"),Jdt.forEach(t),Y1o=r(E8e," (LayoutLMv3 model)"),E8e.forEach(t),K1o=i(ue),vp=n(ue,"LI",{});var C8e=s(vp);Jie=n(C8e,"STRONG",{});var Ydt=s(Jie);Z1o=r(Ydt,"layoutxlm"),Ydt.forEach(t),e2o=r(C8e," \u2014 "),dq=n(C8e,"A",{href:!0});var Kdt=s(dq);o2o=r(Kdt,"LayoutXLMProcessor"),Kdt.forEach(t),r2o=r(C8e," (LayoutXLM model)"),C8e.forEach(t),t2o=i(ue),Fp=n(ue,"LI",{});var w8e=s(Fp);Yie=n(w8e,"STRONG",{});var Zdt=s(Yie);a2o=r(Zdt,"sew"),Zdt.forEach(t),n2o=r(w8e," \u2014 "),cq=n(w8e,"A",{href:!0});var ect=s(cq);s2o=r(ect,"Wav2Vec2Processor"),ect.forEach(t),l2o=r(w8e," (SEW model)"),w8e.forEach(t),i2o=i(ue),Tp=n(ue,"LI",{});var A8e=s(Tp);Kie=n(A8e,"STRONG",{});var oct=s(Kie);d2o=r(oct,"sew-d"),oct.forEach(t),c2o=r(A8e," \u2014 "),fq=n(A8e,"A",{href:!0});var rct=s(fq);f2o=r(rct,"Wav2Vec2Processor"),rct.forEach(t),m2o=r(A8e," (SEW-D model)"),A8e.forEach(t),g2o=i(ue),Mp=n(ue,"LI",{});var L8e=s(Mp);Zie=n(L8e,"STRONG",{});var tct=s(Zie);h2o=r(tct,"speech_to_text"),tct.forEach(t),p2o=r(L8e," \u2014 "),mq=n(L8e,"A",{href:!0});var act=s(mq);_2o=r(act,"Speech2TextProcessor"),act.forEach(t),u2o=r(L8e," (Speech2Text model)"),L8e.forEach(t),b2o=i(ue),Ep=n(ue,"LI",{});var y8e=s(Ep);ede=n(y8e,"STRONG",{});var nct=s(ede);v2o=r(nct,"speech_to_text_2"),nct.forEach(t),F2o=r(y8e," \u2014 "),gq=n(y8e,"A",{href:!0});var sct=s(gq);T2o=r(sct,"Speech2Text2Processor"),sct.forEach(t),M2o=r(y8e," (Speech2Text2 model)"),y8e.forEach(t),E2o=i(ue),Cp=n(ue,"LI",{});var x8e=s(Cp);ode=n(x8e,"STRONG",{});var lct=s(ode);C2o=r(lct,"trocr"),lct.forEach(t),w2o=r(x8e," \u2014 "),hq=n(x8e,"A",{href:!0});var ict=s(hq);A2o=r(ict,"TrOCRProcessor"),ict.forEach(t),L2o=r(x8e," (TrOCR model)"),x8e.forEach(t),y2o=i(ue),wp=n(ue,"LI",{});var $8e=s(wp);rde=n($8e,"STRONG",{});var dct=s(rde);x2o=r(dct,"unispeech"),dct.forEach(t),$2o=r($8e," \u2014 "),pq=n($8e,"A",{href:!0});var cct=s(pq);k2o=r(cct,"Wav2Vec2Processor"),cct.forEach(t),S2o=r($8e," (UniSpeech model)"),$8e.forEach(t),R2o=i(ue),Ap=n(ue,"LI",{});var k8e=s(Ap);tde=n(k8e,"STRONG",{});var fct=s(tde);P2o=r(fct,"unispeech-sat"),fct.forEach(t),B2o=r(k8e," \u2014 "),_q=n(k8e,"A",{href:!0});var mct=s(_q);I2o=r(mct,"Wav2Vec2Processor"),mct.forEach(t),N2o=r(k8e," (UniSpeechSat model)"),k8e.forEach(t),q2o=i(ue),Lp=n(ue,"LI",{});var S8e=s(Lp);ade=n(S8e,"STRONG",{});var gct=s(ade);j2o=r(gct,"vilt"),gct.forEach(t),D2o=r(S8e," \u2014 "),uq=n(S8e,"A",{href:!0});var hct=s(uq);G2o=r(hct,"ViltProcessor"),hct.forEach(t),O2o=r(S8e," (ViLT model)"),S8e.forEach(t),V2o=i(ue),yp=n(ue,"LI",{});var R8e=s(yp);nde=n(R8e,"STRONG",{});var pct=s(nde);X2o=r(pct,"vision-text-dual-encoder"),pct.forEach(t),z2o=r(R8e," \u2014 "),bq=n(R8e,"A",{href:!0});var _ct=s(bq);Q2o=r(_ct,"VisionTextDualEncoderProcessor"),_ct.forEach(t),W2o=r(R8e," (VisionTextDualEncoder model)"),R8e.forEach(t),H2o=i(ue),xp=n(ue,"LI",{});var P8e=s(xp);sde=n(P8e,"STRONG",{});var uct=s(sde);U2o=r(uct,"wav2vec2"),uct.forEach(t),J2o=r(P8e," \u2014 "),vq=n(P8e,"A",{href:!0});var bct=s(vq);Y2o=r(bct,"Wav2Vec2Processor"),bct.forEach(t),K2o=r(P8e," (Wav2Vec2 model)"),P8e.forEach(t),Z2o=i(ue),$p=n(ue,"LI",{});var B8e=s($p);lde=n(B8e,"STRONG",{});var vct=s(lde);e4o=r(vct,"wav2vec2-conformer"),vct.forEach(t),o4o=r(B8e," \u2014 "),Fq=n(B8e,"A",{href:!0});var Fct=s(Fq);r4o=r(Fct,"Wav2Vec2Processor"),Fct.forEach(t),t4o=r(B8e," (Wav2Vec2-Conformer model)"),B8e.forEach(t),a4o=i(ue),kp=n(ue,"LI",{});var I8e=s(kp);ide=n(I8e,"STRONG",{});var Tct=s(ide);n4o=r(Tct,"wavlm"),Tct.forEach(t),s4o=r(I8e," \u2014 "),Tq=n(I8e,"A",{href:!0});var Mct=s(Tq);l4o=r(Mct,"Wav2Vec2Processor"),Mct.forEach(t),i4o=r(I8e," (WavLM model)"),I8e.forEach(t),ue.forEach(t),d4o=i(aa),T(Sp.$$.fragment,aa),c4o=i(aa),T(Rp.$$.fragment,aa),aa.forEach(t),f4o=i(Ks),Pp=n(Ks,"DIV",{class:!0});var UXe=s(Pp);T(fy.$$.fragment,UXe),m4o=i(UXe),dde=n(UXe,"P",{});var Ect=s(dde);g4o=r(Ect,"Register a new processor for this class."),Ect.forEach(t),UXe.forEach(t),Ks.forEach(t),XOe=i(f),qi=n(f,"H2",{class:!0});var JXe=s(qi);Bp=n(JXe,"A",{id:!0,class:!0,href:!0});var Cct=s(Bp);cde=n(Cct,"SPAN",{});var wct=s(cde);T(my.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),h4o=i(JXe),fde=n(JXe,"SPAN",{});var Act=s(fde);p4o=r(Act,"AutoModel"),Act.forEach(t),JXe.forEach(t),zOe=i(f),xo=n(f,"DIV",{class:!0});var Zs=s(xo);T(gy.$$.fragment,Zs),_4o=i(Zs),ji=n(Zs,"P",{});var zoe=s(ji);u4o=r(zoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=n(zoe,"A",{href:!0});var Lct=s(Mq);b4o=r(Lct,"from_pretrained()"),Lct.forEach(t),v4o=r(zoe," class method or the "),Eq=n(zoe,"A",{href:!0});var yct=s(Eq);F4o=r(yct,"from_config()"),yct.forEach(t),T4o=r(zoe,` class
method.`),zoe.forEach(t),M4o=i(Zs),hy=n(Zs,"P",{});var YXe=s(hy);E4o=r(YXe,"This class cannot be instantiated directly using "),mde=n(YXe,"CODE",{});var xct=s(mde);C4o=r(xct,"__init__()"),xct.forEach(t),w4o=r(YXe," (throws an error)."),YXe.forEach(t),A4o=i(Zs),st=n(Zs,"DIV",{class:!0});var VA=s(st);T(py.$$.fragment,VA),L4o=i(VA),gde=n(VA,"P",{});var $ct=s(gde);y4o=r($ct,"Instantiates one of the base model classes of the library from a configuration."),$ct.forEach(t),x4o=i(VA),Di=n(VA,"P",{});var Qoe=s(Di);$4o=r(Qoe,`Note:
Loading a model from its configuration file does `),hde=n(Qoe,"STRONG",{});var kct=s(hde);k4o=r(kct,"not"),kct.forEach(t),S4o=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=n(Qoe,"A",{href:!0});var Sct=s(Cq);R4o=r(Sct,"from_pretrained()"),Sct.forEach(t),P4o=r(Qoe," to load the model weights."),Qoe.forEach(t),B4o=i(VA),T(Ip.$$.fragment,VA),VA.forEach(t),I4o=i(Zs),Je=n(Zs,"DIV",{class:!0});var na=s(Je);T(_y.$$.fragment,na),N4o=i(na),pde=n(na,"P",{});var Rct=s(pde);q4o=r(Rct,"Instantiate one of the base model classes of the library from a pretrained model."),Rct.forEach(t),j4o=i(na),Pa=n(na,"P",{});var XA=s(Pa);D4o=r(XA,"The model class to instantiate is selected based on the "),_de=n(XA,"CODE",{});var Pct=s(_de);G4o=r(Pct,"model_type"),Pct.forEach(t),O4o=r(XA,` property of the config object (either
passed as an argument or loaded from `),ude=n(XA,"CODE",{});var Bct=s(ude);V4o=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),X4o=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(XA,"CODE",{});var Ict=s(bde);z4o=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),Q4o=r(XA,":"),XA.forEach(t),W4o=i(na),y=n(na,"UL",{});var x=s(y);Np=n(x,"LI",{});var N8e=s(Np);vde=n(N8e,"STRONG",{});var Nct=s(vde);H4o=r(Nct,"albert"),Nct.forEach(t),U4o=r(N8e," \u2014 "),wq=n(N8e,"A",{href:!0});var qct=s(wq);J4o=r(qct,"AlbertModel"),qct.forEach(t),Y4o=r(N8e," (ALBERT model)"),N8e.forEach(t),K4o=i(x),qp=n(x,"LI",{});var q8e=s(qp);Fde=n(q8e,"STRONG",{});var jct=s(Fde);Z4o=r(jct,"bart"),jct.forEach(t),ebo=r(q8e," \u2014 "),Aq=n(q8e,"A",{href:!0});var Dct=s(Aq);obo=r(Dct,"BartModel"),Dct.forEach(t),rbo=r(q8e," (BART model)"),q8e.forEach(t),tbo=i(x),jp=n(x,"LI",{});var j8e=s(jp);Tde=n(j8e,"STRONG",{});var Gct=s(Tde);abo=r(Gct,"beit"),Gct.forEach(t),nbo=r(j8e," \u2014 "),Lq=n(j8e,"A",{href:!0});var Oct=s(Lq);sbo=r(Oct,"BeitModel"),Oct.forEach(t),lbo=r(j8e," (BEiT model)"),j8e.forEach(t),ibo=i(x),Dp=n(x,"LI",{});var D8e=s(Dp);Mde=n(D8e,"STRONG",{});var Vct=s(Mde);dbo=r(Vct,"bert"),Vct.forEach(t),cbo=r(D8e," \u2014 "),yq=n(D8e,"A",{href:!0});var Xct=s(yq);fbo=r(Xct,"BertModel"),Xct.forEach(t),mbo=r(D8e," (BERT model)"),D8e.forEach(t),gbo=i(x),Gp=n(x,"LI",{});var G8e=s(Gp);Ede=n(G8e,"STRONG",{});var zct=s(Ede);hbo=r(zct,"bert-generation"),zct.forEach(t),pbo=r(G8e," \u2014 "),xq=n(G8e,"A",{href:!0});var Qct=s(xq);_bo=r(Qct,"BertGenerationEncoder"),Qct.forEach(t),ubo=r(G8e," (Bert Generation model)"),G8e.forEach(t),bbo=i(x),Op=n(x,"LI",{});var O8e=s(Op);Cde=n(O8e,"STRONG",{});var Wct=s(Cde);vbo=r(Wct,"big_bird"),Wct.forEach(t),Fbo=r(O8e," \u2014 "),$q=n(O8e,"A",{href:!0});var Hct=s($q);Tbo=r(Hct,"BigBirdModel"),Hct.forEach(t),Mbo=r(O8e," (BigBird model)"),O8e.forEach(t),Ebo=i(x),Vp=n(x,"LI",{});var V8e=s(Vp);wde=n(V8e,"STRONG",{});var Uct=s(wde);Cbo=r(Uct,"bigbird_pegasus"),Uct.forEach(t),wbo=r(V8e," \u2014 "),kq=n(V8e,"A",{href:!0});var Jct=s(kq);Abo=r(Jct,"BigBirdPegasusModel"),Jct.forEach(t),Lbo=r(V8e," (BigBird-Pegasus model)"),V8e.forEach(t),ybo=i(x),Xp=n(x,"LI",{});var X8e=s(Xp);Ade=n(X8e,"STRONG",{});var Yct=s(Ade);xbo=r(Yct,"blenderbot"),Yct.forEach(t),$bo=r(X8e," \u2014 "),Sq=n(X8e,"A",{href:!0});var Kct=s(Sq);kbo=r(Kct,"BlenderbotModel"),Kct.forEach(t),Sbo=r(X8e," (Blenderbot model)"),X8e.forEach(t),Rbo=i(x),zp=n(x,"LI",{});var z8e=s(zp);Lde=n(z8e,"STRONG",{});var Zct=s(Lde);Pbo=r(Zct,"blenderbot-small"),Zct.forEach(t),Bbo=r(z8e," \u2014 "),Rq=n(z8e,"A",{href:!0});var eft=s(Rq);Ibo=r(eft,"BlenderbotSmallModel"),eft.forEach(t),Nbo=r(z8e," (BlenderbotSmall model)"),z8e.forEach(t),qbo=i(x),Qp=n(x,"LI",{});var Q8e=s(Qp);yde=n(Q8e,"STRONG",{});var oft=s(yde);jbo=r(oft,"bloom"),oft.forEach(t),Dbo=r(Q8e," \u2014 "),Pq=n(Q8e,"A",{href:!0});var rft=s(Pq);Gbo=r(rft,"BloomModel"),rft.forEach(t),Obo=r(Q8e," (BLOOM model)"),Q8e.forEach(t),Vbo=i(x),Wp=n(x,"LI",{});var W8e=s(Wp);xde=n(W8e,"STRONG",{});var tft=s(xde);Xbo=r(tft,"camembert"),tft.forEach(t),zbo=r(W8e," \u2014 "),Bq=n(W8e,"A",{href:!0});var aft=s(Bq);Qbo=r(aft,"CamembertModel"),aft.forEach(t),Wbo=r(W8e," (CamemBERT model)"),W8e.forEach(t),Hbo=i(x),Hp=n(x,"LI",{});var H8e=s(Hp);$de=n(H8e,"STRONG",{});var nft=s($de);Ubo=r(nft,"canine"),nft.forEach(t),Jbo=r(H8e," \u2014 "),Iq=n(H8e,"A",{href:!0});var sft=s(Iq);Ybo=r(sft,"CanineModel"),sft.forEach(t),Kbo=r(H8e," (CANINE model)"),H8e.forEach(t),Zbo=i(x),Up=n(x,"LI",{});var U8e=s(Up);kde=n(U8e,"STRONG",{});var lft=s(kde);evo=r(lft,"clip"),lft.forEach(t),ovo=r(U8e," \u2014 "),Nq=n(U8e,"A",{href:!0});var ift=s(Nq);rvo=r(ift,"CLIPModel"),ift.forEach(t),tvo=r(U8e," (CLIP model)"),U8e.forEach(t),avo=i(x),Jp=n(x,"LI",{});var J8e=s(Jp);Sde=n(J8e,"STRONG",{});var dft=s(Sde);nvo=r(dft,"codegen"),dft.forEach(t),svo=r(J8e," \u2014 "),qq=n(J8e,"A",{href:!0});var cft=s(qq);lvo=r(cft,"CodeGenModel"),cft.forEach(t),ivo=r(J8e," (CodeGen model)"),J8e.forEach(t),dvo=i(x),Yp=n(x,"LI",{});var Y8e=s(Yp);Rde=n(Y8e,"STRONG",{});var fft=s(Rde);cvo=r(fft,"convbert"),fft.forEach(t),fvo=r(Y8e," \u2014 "),jq=n(Y8e,"A",{href:!0});var mft=s(jq);mvo=r(mft,"ConvBertModel"),mft.forEach(t),gvo=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),hvo=i(x),Kp=n(x,"LI",{});var K8e=s(Kp);Pde=n(K8e,"STRONG",{});var gft=s(Pde);pvo=r(gft,"convnext"),gft.forEach(t),_vo=r(K8e," \u2014 "),Dq=n(K8e,"A",{href:!0});var hft=s(Dq);uvo=r(hft,"ConvNextModel"),hft.forEach(t),bvo=r(K8e," (ConvNeXT model)"),K8e.forEach(t),vvo=i(x),Zp=n(x,"LI",{});var Z8e=s(Zp);Bde=n(Z8e,"STRONG",{});var pft=s(Bde);Fvo=r(pft,"ctrl"),pft.forEach(t),Tvo=r(Z8e," \u2014 "),Gq=n(Z8e,"A",{href:!0});var _ft=s(Gq);Mvo=r(_ft,"CTRLModel"),_ft.forEach(t),Evo=r(Z8e," (CTRL model)"),Z8e.forEach(t),Cvo=i(x),e_=n(x,"LI",{});var e9e=s(e_);Ide=n(e9e,"STRONG",{});var uft=s(Ide);wvo=r(uft,"cvt"),uft.forEach(t),Avo=r(e9e," \u2014 "),Oq=n(e9e,"A",{href:!0});var bft=s(Oq);Lvo=r(bft,"CvtModel"),bft.forEach(t),yvo=r(e9e," (CvT model)"),e9e.forEach(t),xvo=i(x),o_=n(x,"LI",{});var o9e=s(o_);Nde=n(o9e,"STRONG",{});var vft=s(Nde);$vo=r(vft,"data2vec-audio"),vft.forEach(t),kvo=r(o9e," \u2014 "),Vq=n(o9e,"A",{href:!0});var Fft=s(Vq);Svo=r(Fft,"Data2VecAudioModel"),Fft.forEach(t),Rvo=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),Pvo=i(x),r_=n(x,"LI",{});var r9e=s(r_);qde=n(r9e,"STRONG",{});var Tft=s(qde);Bvo=r(Tft,"data2vec-text"),Tft.forEach(t),Ivo=r(r9e," \u2014 "),Xq=n(r9e,"A",{href:!0});var Mft=s(Xq);Nvo=r(Mft,"Data2VecTextModel"),Mft.forEach(t),qvo=r(r9e," (Data2VecText model)"),r9e.forEach(t),jvo=i(x),t_=n(x,"LI",{});var t9e=s(t_);jde=n(t9e,"STRONG",{});var Eft=s(jde);Dvo=r(Eft,"data2vec-vision"),Eft.forEach(t),Gvo=r(t9e," \u2014 "),zq=n(t9e,"A",{href:!0});var Cft=s(zq);Ovo=r(Cft,"Data2VecVisionModel"),Cft.forEach(t),Vvo=r(t9e," (Data2VecVision model)"),t9e.forEach(t),Xvo=i(x),a_=n(x,"LI",{});var a9e=s(a_);Dde=n(a9e,"STRONG",{});var wft=s(Dde);zvo=r(wft,"deberta"),wft.forEach(t),Qvo=r(a9e," \u2014 "),Qq=n(a9e,"A",{href:!0});var Aft=s(Qq);Wvo=r(Aft,"DebertaModel"),Aft.forEach(t),Hvo=r(a9e," (DeBERTa model)"),a9e.forEach(t),Uvo=i(x),n_=n(x,"LI",{});var n9e=s(n_);Gde=n(n9e,"STRONG",{});var Lft=s(Gde);Jvo=r(Lft,"deberta-v2"),Lft.forEach(t),Yvo=r(n9e," \u2014 "),Wq=n(n9e,"A",{href:!0});var yft=s(Wq);Kvo=r(yft,"DebertaV2Model"),yft.forEach(t),Zvo=r(n9e," (DeBERTa-v2 model)"),n9e.forEach(t),eFo=i(x),s_=n(x,"LI",{});var s9e=s(s_);Ode=n(s9e,"STRONG",{});var xft=s(Ode);oFo=r(xft,"decision_transformer"),xft.forEach(t),rFo=r(s9e," \u2014 "),Hq=n(s9e,"A",{href:!0});var $ft=s(Hq);tFo=r($ft,"DecisionTransformerModel"),$ft.forEach(t),aFo=r(s9e," (Decision Transformer model)"),s9e.forEach(t),nFo=i(x),l_=n(x,"LI",{});var l9e=s(l_);Vde=n(l9e,"STRONG",{});var kft=s(Vde);sFo=r(kft,"deit"),kft.forEach(t),lFo=r(l9e," \u2014 "),Uq=n(l9e,"A",{href:!0});var Sft=s(Uq);iFo=r(Sft,"DeiTModel"),Sft.forEach(t),dFo=r(l9e," (DeiT model)"),l9e.forEach(t),cFo=i(x),i_=n(x,"LI",{});var i9e=s(i_);Xde=n(i9e,"STRONG",{});var Rft=s(Xde);fFo=r(Rft,"detr"),Rft.forEach(t),mFo=r(i9e," \u2014 "),Jq=n(i9e,"A",{href:!0});var Pft=s(Jq);gFo=r(Pft,"DetrModel"),Pft.forEach(t),hFo=r(i9e," (DETR model)"),i9e.forEach(t),pFo=i(x),d_=n(x,"LI",{});var d9e=s(d_);zde=n(d9e,"STRONG",{});var Bft=s(zde);_Fo=r(Bft,"distilbert"),Bft.forEach(t),uFo=r(d9e," \u2014 "),Yq=n(d9e,"A",{href:!0});var Ift=s(Yq);bFo=r(Ift,"DistilBertModel"),Ift.forEach(t),vFo=r(d9e," (DistilBERT model)"),d9e.forEach(t),FFo=i(x),c_=n(x,"LI",{});var c9e=s(c_);Qde=n(c9e,"STRONG",{});var Nft=s(Qde);TFo=r(Nft,"dpr"),Nft.forEach(t),MFo=r(c9e," \u2014 "),Kq=n(c9e,"A",{href:!0});var qft=s(Kq);EFo=r(qft,"DPRQuestionEncoder"),qft.forEach(t),CFo=r(c9e," (DPR model)"),c9e.forEach(t),wFo=i(x),f_=n(x,"LI",{});var f9e=s(f_);Wde=n(f9e,"STRONG",{});var jft=s(Wde);AFo=r(jft,"dpt"),jft.forEach(t),LFo=r(f9e," \u2014 "),Zq=n(f9e,"A",{href:!0});var Dft=s(Zq);yFo=r(Dft,"DPTModel"),Dft.forEach(t),xFo=r(f9e," (DPT model)"),f9e.forEach(t),$Fo=i(x),m_=n(x,"LI",{});var m9e=s(m_);Hde=n(m9e,"STRONG",{});var Gft=s(Hde);kFo=r(Gft,"electra"),Gft.forEach(t),SFo=r(m9e," \u2014 "),ej=n(m9e,"A",{href:!0});var Oft=s(ej);RFo=r(Oft,"ElectraModel"),Oft.forEach(t),PFo=r(m9e," (ELECTRA model)"),m9e.forEach(t),BFo=i(x),g_=n(x,"LI",{});var g9e=s(g_);Ude=n(g9e,"STRONG",{});var Vft=s(Ude);IFo=r(Vft,"flaubert"),Vft.forEach(t),NFo=r(g9e," \u2014 "),oj=n(g9e,"A",{href:!0});var Xft=s(oj);qFo=r(Xft,"FlaubertModel"),Xft.forEach(t),jFo=r(g9e," (FlauBERT model)"),g9e.forEach(t),DFo=i(x),h_=n(x,"LI",{});var h9e=s(h_);Jde=n(h9e,"STRONG",{});var zft=s(Jde);GFo=r(zft,"flava"),zft.forEach(t),OFo=r(h9e," \u2014 "),rj=n(h9e,"A",{href:!0});var Qft=s(rj);VFo=r(Qft,"FlavaModel"),Qft.forEach(t),XFo=r(h9e," (FLAVA model)"),h9e.forEach(t),zFo=i(x),p_=n(x,"LI",{});var p9e=s(p_);Yde=n(p9e,"STRONG",{});var Wft=s(Yde);QFo=r(Wft,"fnet"),Wft.forEach(t),WFo=r(p9e," \u2014 "),tj=n(p9e,"A",{href:!0});var Hft=s(tj);HFo=r(Hft,"FNetModel"),Hft.forEach(t),UFo=r(p9e," (FNet model)"),p9e.forEach(t),JFo=i(x),__=n(x,"LI",{});var _9e=s(__);Kde=n(_9e,"STRONG",{});var Uft=s(Kde);YFo=r(Uft,"fsmt"),Uft.forEach(t),KFo=r(_9e," \u2014 "),aj=n(_9e,"A",{href:!0});var Jft=s(aj);ZFo=r(Jft,"FSMTModel"),Jft.forEach(t),eTo=r(_9e," (FairSeq Machine-Translation model)"),_9e.forEach(t),oTo=i(x),zs=n(x,"LI",{});var fS=s(zs);Zde=n(fS,"STRONG",{});var Yft=s(Zde);rTo=r(Yft,"funnel"),Yft.forEach(t),tTo=r(fS," \u2014 "),nj=n(fS,"A",{href:!0});var Kft=s(nj);aTo=r(Kft,"FunnelModel"),Kft.forEach(t),nTo=r(fS," or "),sj=n(fS,"A",{href:!0});var Zft=s(sj);sTo=r(Zft,"FunnelBaseModel"),Zft.forEach(t),lTo=r(fS," (Funnel Transformer model)"),fS.forEach(t),iTo=i(x),u_=n(x,"LI",{});var u9e=s(u_);ece=n(u9e,"STRONG",{});var emt=s(ece);dTo=r(emt,"glpn"),emt.forEach(t),cTo=r(u9e," \u2014 "),lj=n(u9e,"A",{href:!0});var omt=s(lj);fTo=r(omt,"GLPNModel"),omt.forEach(t),mTo=r(u9e," (GLPN model)"),u9e.forEach(t),gTo=i(x),b_=n(x,"LI",{});var b9e=s(b_);oce=n(b9e,"STRONG",{});var rmt=s(oce);hTo=r(rmt,"gpt2"),rmt.forEach(t),pTo=r(b9e," \u2014 "),ij=n(b9e,"A",{href:!0});var tmt=s(ij);_To=r(tmt,"GPT2Model"),tmt.forEach(t),uTo=r(b9e," (OpenAI GPT-2 model)"),b9e.forEach(t),bTo=i(x),v_=n(x,"LI",{});var v9e=s(v_);rce=n(v9e,"STRONG",{});var amt=s(rce);vTo=r(amt,"gpt_neo"),amt.forEach(t),FTo=r(v9e," \u2014 "),dj=n(v9e,"A",{href:!0});var nmt=s(dj);TTo=r(nmt,"GPTNeoModel"),nmt.forEach(t),MTo=r(v9e," (GPT Neo model)"),v9e.forEach(t),ETo=i(x),F_=n(x,"LI",{});var F9e=s(F_);tce=n(F9e,"STRONG",{});var smt=s(tce);CTo=r(smt,"gpt_neox"),smt.forEach(t),wTo=r(F9e," \u2014 "),cj=n(F9e,"A",{href:!0});var lmt=s(cj);ATo=r(lmt,"GPTNeoXModel"),lmt.forEach(t),LTo=r(F9e," (GPT NeoX model)"),F9e.forEach(t),yTo=i(x),T_=n(x,"LI",{});var T9e=s(T_);ace=n(T9e,"STRONG",{});var imt=s(ace);xTo=r(imt,"gptj"),imt.forEach(t),$To=r(T9e," \u2014 "),fj=n(T9e,"A",{href:!0});var dmt=s(fj);kTo=r(dmt,"GPTJModel"),dmt.forEach(t),STo=r(T9e," (GPT-J model)"),T9e.forEach(t),RTo=i(x),M_=n(x,"LI",{});var M9e=s(M_);nce=n(M9e,"STRONG",{});var cmt=s(nce);PTo=r(cmt,"groupvit"),cmt.forEach(t),BTo=r(M9e," \u2014 "),mj=n(M9e,"A",{href:!0});var fmt=s(mj);ITo=r(fmt,"GroupViTModel"),fmt.forEach(t),NTo=r(M9e," (GroupViT model)"),M9e.forEach(t),qTo=i(x),E_=n(x,"LI",{});var E9e=s(E_);sce=n(E9e,"STRONG",{});var mmt=s(sce);jTo=r(mmt,"hubert"),mmt.forEach(t),DTo=r(E9e," \u2014 "),gj=n(E9e,"A",{href:!0});var gmt=s(gj);GTo=r(gmt,"HubertModel"),gmt.forEach(t),OTo=r(E9e," (Hubert model)"),E9e.forEach(t),VTo=i(x),C_=n(x,"LI",{});var C9e=s(C_);lce=n(C9e,"STRONG",{});var hmt=s(lce);XTo=r(hmt,"ibert"),hmt.forEach(t),zTo=r(C9e," \u2014 "),hj=n(C9e,"A",{href:!0});var pmt=s(hj);QTo=r(pmt,"IBertModel"),pmt.forEach(t),WTo=r(C9e," (I-BERT model)"),C9e.forEach(t),HTo=i(x),w_=n(x,"LI",{});var w9e=s(w_);ice=n(w9e,"STRONG",{});var _mt=s(ice);UTo=r(_mt,"imagegpt"),_mt.forEach(t),JTo=r(w9e," \u2014 "),pj=n(w9e,"A",{href:!0});var umt=s(pj);YTo=r(umt,"ImageGPTModel"),umt.forEach(t),KTo=r(w9e," (ImageGPT model)"),w9e.forEach(t),ZTo=i(x),A_=n(x,"LI",{});var A9e=s(A_);dce=n(A9e,"STRONG",{});var bmt=s(dce);e7o=r(bmt,"layoutlm"),bmt.forEach(t),o7o=r(A9e," \u2014 "),_j=n(A9e,"A",{href:!0});var vmt=s(_j);r7o=r(vmt,"LayoutLMModel"),vmt.forEach(t),t7o=r(A9e," (LayoutLM model)"),A9e.forEach(t),a7o=i(x),L_=n(x,"LI",{});var L9e=s(L_);cce=n(L9e,"STRONG",{});var Fmt=s(cce);n7o=r(Fmt,"layoutlmv2"),Fmt.forEach(t),s7o=r(L9e," \u2014 "),uj=n(L9e,"A",{href:!0});var Tmt=s(uj);l7o=r(Tmt,"LayoutLMv2Model"),Tmt.forEach(t),i7o=r(L9e," (LayoutLMv2 model)"),L9e.forEach(t),d7o=i(x),y_=n(x,"LI",{});var y9e=s(y_);fce=n(y9e,"STRONG",{});var Mmt=s(fce);c7o=r(Mmt,"layoutlmv3"),Mmt.forEach(t),f7o=r(y9e," \u2014 "),bj=n(y9e,"A",{href:!0});var Emt=s(bj);m7o=r(Emt,"LayoutLMv3Model"),Emt.forEach(t),g7o=r(y9e," (LayoutLMv3 model)"),y9e.forEach(t),h7o=i(x),x_=n(x,"LI",{});var x9e=s(x_);mce=n(x9e,"STRONG",{});var Cmt=s(mce);p7o=r(Cmt,"led"),Cmt.forEach(t),_7o=r(x9e," \u2014 "),vj=n(x9e,"A",{href:!0});var wmt=s(vj);u7o=r(wmt,"LEDModel"),wmt.forEach(t),b7o=r(x9e," (LED model)"),x9e.forEach(t),v7o=i(x),$_=n(x,"LI",{});var $9e=s($_);gce=n($9e,"STRONG",{});var Amt=s(gce);F7o=r(Amt,"levit"),Amt.forEach(t),T7o=r($9e," \u2014 "),Fj=n($9e,"A",{href:!0});var Lmt=s(Fj);M7o=r(Lmt,"LevitModel"),Lmt.forEach(t),E7o=r($9e," (LeViT model)"),$9e.forEach(t),C7o=i(x),k_=n(x,"LI",{});var k9e=s(k_);hce=n(k9e,"STRONG",{});var ymt=s(hce);w7o=r(ymt,"longformer"),ymt.forEach(t),A7o=r(k9e," \u2014 "),Tj=n(k9e,"A",{href:!0});var xmt=s(Tj);L7o=r(xmt,"LongformerModel"),xmt.forEach(t),y7o=r(k9e," (Longformer model)"),k9e.forEach(t),x7o=i(x),S_=n(x,"LI",{});var S9e=s(S_);pce=n(S9e,"STRONG",{});var $mt=s(pce);$7o=r($mt,"longt5"),$mt.forEach(t),k7o=r(S9e," \u2014 "),Mj=n(S9e,"A",{href:!0});var kmt=s(Mj);S7o=r(kmt,"LongT5Model"),kmt.forEach(t),R7o=r(S9e," (LongT5 model)"),S9e.forEach(t),P7o=i(x),R_=n(x,"LI",{});var R9e=s(R_);_ce=n(R9e,"STRONG",{});var Smt=s(_ce);B7o=r(Smt,"luke"),Smt.forEach(t),I7o=r(R9e," \u2014 "),Ej=n(R9e,"A",{href:!0});var Rmt=s(Ej);N7o=r(Rmt,"LukeModel"),Rmt.forEach(t),q7o=r(R9e," (LUKE model)"),R9e.forEach(t),j7o=i(x),P_=n(x,"LI",{});var P9e=s(P_);uce=n(P9e,"STRONG",{});var Pmt=s(uce);D7o=r(Pmt,"lxmert"),Pmt.forEach(t),G7o=r(P9e," \u2014 "),Cj=n(P9e,"A",{href:!0});var Bmt=s(Cj);O7o=r(Bmt,"LxmertModel"),Bmt.forEach(t),V7o=r(P9e," (LXMERT model)"),P9e.forEach(t),X7o=i(x),B_=n(x,"LI",{});var B9e=s(B_);bce=n(B9e,"STRONG",{});var Imt=s(bce);z7o=r(Imt,"m2m_100"),Imt.forEach(t),Q7o=r(B9e," \u2014 "),wj=n(B9e,"A",{href:!0});var Nmt=s(wj);W7o=r(Nmt,"M2M100Model"),Nmt.forEach(t),H7o=r(B9e," (M2M100 model)"),B9e.forEach(t),U7o=i(x),I_=n(x,"LI",{});var I9e=s(I_);vce=n(I9e,"STRONG",{});var qmt=s(vce);J7o=r(qmt,"marian"),qmt.forEach(t),Y7o=r(I9e," \u2014 "),Aj=n(I9e,"A",{href:!0});var jmt=s(Aj);K7o=r(jmt,"MarianModel"),jmt.forEach(t),Z7o=r(I9e," (Marian model)"),I9e.forEach(t),eMo=i(x),N_=n(x,"LI",{});var N9e=s(N_);Fce=n(N9e,"STRONG",{});var Dmt=s(Fce);oMo=r(Dmt,"maskformer"),Dmt.forEach(t),rMo=r(N9e," \u2014 "),Lj=n(N9e,"A",{href:!0});var Gmt=s(Lj);tMo=r(Gmt,"MaskFormerModel"),Gmt.forEach(t),aMo=r(N9e," (MaskFormer model)"),N9e.forEach(t),nMo=i(x),q_=n(x,"LI",{});var q9e=s(q_);Tce=n(q9e,"STRONG",{});var Omt=s(Tce);sMo=r(Omt,"mbart"),Omt.forEach(t),lMo=r(q9e," \u2014 "),yj=n(q9e,"A",{href:!0});var Vmt=s(yj);iMo=r(Vmt,"MBartModel"),Vmt.forEach(t),dMo=r(q9e," (mBART model)"),q9e.forEach(t),cMo=i(x),j_=n(x,"LI",{});var j9e=s(j_);Mce=n(j9e,"STRONG",{});var Xmt=s(Mce);fMo=r(Xmt,"mctct"),Xmt.forEach(t),mMo=r(j9e," \u2014 "),xj=n(j9e,"A",{href:!0});var zmt=s(xj);gMo=r(zmt,"MCTCTModel"),zmt.forEach(t),hMo=r(j9e," (M-CTC-T model)"),j9e.forEach(t),pMo=i(x),D_=n(x,"LI",{});var D9e=s(D_);Ece=n(D9e,"STRONG",{});var Qmt=s(Ece);_Mo=r(Qmt,"megatron-bert"),Qmt.forEach(t),uMo=r(D9e," \u2014 "),$j=n(D9e,"A",{href:!0});var Wmt=s($j);bMo=r(Wmt,"MegatronBertModel"),Wmt.forEach(t),vMo=r(D9e," (Megatron-BERT model)"),D9e.forEach(t),FMo=i(x),G_=n(x,"LI",{});var G9e=s(G_);Cce=n(G9e,"STRONG",{});var Hmt=s(Cce);TMo=r(Hmt,"mobilebert"),Hmt.forEach(t),MMo=r(G9e," \u2014 "),kj=n(G9e,"A",{href:!0});var Umt=s(kj);EMo=r(Umt,"MobileBertModel"),Umt.forEach(t),CMo=r(G9e," (MobileBERT model)"),G9e.forEach(t),wMo=i(x),O_=n(x,"LI",{});var O9e=s(O_);wce=n(O9e,"STRONG",{});var Jmt=s(wce);AMo=r(Jmt,"mpnet"),Jmt.forEach(t),LMo=r(O9e," \u2014 "),Sj=n(O9e,"A",{href:!0});var Ymt=s(Sj);yMo=r(Ymt,"MPNetModel"),Ymt.forEach(t),xMo=r(O9e," (MPNet model)"),O9e.forEach(t),$Mo=i(x),V_=n(x,"LI",{});var V9e=s(V_);Ace=n(V9e,"STRONG",{});var Kmt=s(Ace);kMo=r(Kmt,"mt5"),Kmt.forEach(t),SMo=r(V9e," \u2014 "),Rj=n(V9e,"A",{href:!0});var Zmt=s(Rj);RMo=r(Zmt,"MT5Model"),Zmt.forEach(t),PMo=r(V9e," (MT5 model)"),V9e.forEach(t),BMo=i(x),X_=n(x,"LI",{});var X9e=s(X_);Lce=n(X9e,"STRONG",{});var egt=s(Lce);IMo=r(egt,"nezha"),egt.forEach(t),NMo=r(X9e," \u2014 "),Pj=n(X9e,"A",{href:!0});var ogt=s(Pj);qMo=r(ogt,"NezhaModel"),ogt.forEach(t),jMo=r(X9e," (Nezha model)"),X9e.forEach(t),DMo=i(x),z_=n(x,"LI",{});var z9e=s(z_);yce=n(z9e,"STRONG",{});var rgt=s(yce);GMo=r(rgt,"nystromformer"),rgt.forEach(t),OMo=r(z9e," \u2014 "),Bj=n(z9e,"A",{href:!0});var tgt=s(Bj);VMo=r(tgt,"NystromformerModel"),tgt.forEach(t),XMo=r(z9e," (Nystr\xF6mformer model)"),z9e.forEach(t),zMo=i(x),Q_=n(x,"LI",{});var Q9e=s(Q_);xce=n(Q9e,"STRONG",{});var agt=s(xce);QMo=r(agt,"openai-gpt"),agt.forEach(t),WMo=r(Q9e," \u2014 "),Ij=n(Q9e,"A",{href:!0});var ngt=s(Ij);HMo=r(ngt,"OpenAIGPTModel"),ngt.forEach(t),UMo=r(Q9e," (OpenAI GPT model)"),Q9e.forEach(t),JMo=i(x),W_=n(x,"LI",{});var W9e=s(W_);$ce=n(W9e,"STRONG",{});var sgt=s($ce);YMo=r(sgt,"opt"),sgt.forEach(t),KMo=r(W9e," \u2014 "),Nj=n(W9e,"A",{href:!0});var lgt=s(Nj);ZMo=r(lgt,"OPTModel"),lgt.forEach(t),eEo=r(W9e," (OPT model)"),W9e.forEach(t),oEo=i(x),H_=n(x,"LI",{});var H9e=s(H_);kce=n(H9e,"STRONG",{});var igt=s(kce);rEo=r(igt,"pegasus"),igt.forEach(t),tEo=r(H9e," \u2014 "),qj=n(H9e,"A",{href:!0});var dgt=s(qj);aEo=r(dgt,"PegasusModel"),dgt.forEach(t),nEo=r(H9e," (Pegasus model)"),H9e.forEach(t),sEo=i(x),U_=n(x,"LI",{});var U9e=s(U_);Sce=n(U9e,"STRONG",{});var cgt=s(Sce);lEo=r(cgt,"perceiver"),cgt.forEach(t),iEo=r(U9e," \u2014 "),jj=n(U9e,"A",{href:!0});var fgt=s(jj);dEo=r(fgt,"PerceiverModel"),fgt.forEach(t),cEo=r(U9e," (Perceiver model)"),U9e.forEach(t),fEo=i(x),J_=n(x,"LI",{});var J9e=s(J_);Rce=n(J9e,"STRONG",{});var mgt=s(Rce);mEo=r(mgt,"plbart"),mgt.forEach(t),gEo=r(J9e," \u2014 "),Dj=n(J9e,"A",{href:!0});var ggt=s(Dj);hEo=r(ggt,"PLBartModel"),ggt.forEach(t),pEo=r(J9e," (PLBart model)"),J9e.forEach(t),_Eo=i(x),Y_=n(x,"LI",{});var Y9e=s(Y_);Pce=n(Y9e,"STRONG",{});var hgt=s(Pce);uEo=r(hgt,"poolformer"),hgt.forEach(t),bEo=r(Y9e," \u2014 "),Gj=n(Y9e,"A",{href:!0});var pgt=s(Gj);vEo=r(pgt,"PoolFormerModel"),pgt.forEach(t),FEo=r(Y9e," (PoolFormer model)"),Y9e.forEach(t),TEo=i(x),K_=n(x,"LI",{});var K9e=s(K_);Bce=n(K9e,"STRONG",{});var _gt=s(Bce);MEo=r(_gt,"prophetnet"),_gt.forEach(t),EEo=r(K9e," \u2014 "),Oj=n(K9e,"A",{href:!0});var ugt=s(Oj);CEo=r(ugt,"ProphetNetModel"),ugt.forEach(t),wEo=r(K9e," (ProphetNet model)"),K9e.forEach(t),AEo=i(x),Z_=n(x,"LI",{});var Z9e=s(Z_);Ice=n(Z9e,"STRONG",{});var bgt=s(Ice);LEo=r(bgt,"qdqbert"),bgt.forEach(t),yEo=r(Z9e," \u2014 "),Vj=n(Z9e,"A",{href:!0});var vgt=s(Vj);xEo=r(vgt,"QDQBertModel"),vgt.forEach(t),$Eo=r(Z9e," (QDQBert model)"),Z9e.forEach(t),kEo=i(x),eu=n(x,"LI",{});var exe=s(eu);Nce=n(exe,"STRONG",{});var Fgt=s(Nce);SEo=r(Fgt,"reformer"),Fgt.forEach(t),REo=r(exe," \u2014 "),Xj=n(exe,"A",{href:!0});var Tgt=s(Xj);PEo=r(Tgt,"ReformerModel"),Tgt.forEach(t),BEo=r(exe," (Reformer model)"),exe.forEach(t),IEo=i(x),ou=n(x,"LI",{});var oxe=s(ou);qce=n(oxe,"STRONG",{});var Mgt=s(qce);NEo=r(Mgt,"regnet"),Mgt.forEach(t),qEo=r(oxe," \u2014 "),zj=n(oxe,"A",{href:!0});var Egt=s(zj);jEo=r(Egt,"RegNetModel"),Egt.forEach(t),DEo=r(oxe," (RegNet model)"),oxe.forEach(t),GEo=i(x),ru=n(x,"LI",{});var rxe=s(ru);jce=n(rxe,"STRONG",{});var Cgt=s(jce);OEo=r(Cgt,"rembert"),Cgt.forEach(t),VEo=r(rxe," \u2014 "),Qj=n(rxe,"A",{href:!0});var wgt=s(Qj);XEo=r(wgt,"RemBertModel"),wgt.forEach(t),zEo=r(rxe," (RemBERT model)"),rxe.forEach(t),QEo=i(x),tu=n(x,"LI",{});var txe=s(tu);Dce=n(txe,"STRONG",{});var Agt=s(Dce);WEo=r(Agt,"resnet"),Agt.forEach(t),HEo=r(txe," \u2014 "),Wj=n(txe,"A",{href:!0});var Lgt=s(Wj);UEo=r(Lgt,"ResNetModel"),Lgt.forEach(t),JEo=r(txe," (ResNet model)"),txe.forEach(t),YEo=i(x),au=n(x,"LI",{});var axe=s(au);Gce=n(axe,"STRONG",{});var ygt=s(Gce);KEo=r(ygt,"retribert"),ygt.forEach(t),ZEo=r(axe," \u2014 "),Hj=n(axe,"A",{href:!0});var xgt=s(Hj);eCo=r(xgt,"RetriBertModel"),xgt.forEach(t),oCo=r(axe," (RetriBERT model)"),axe.forEach(t),rCo=i(x),nu=n(x,"LI",{});var nxe=s(nu);Oce=n(nxe,"STRONG",{});var $gt=s(Oce);tCo=r($gt,"roberta"),$gt.forEach(t),aCo=r(nxe," \u2014 "),Uj=n(nxe,"A",{href:!0});var kgt=s(Uj);nCo=r(kgt,"RobertaModel"),kgt.forEach(t),sCo=r(nxe," (RoBERTa model)"),nxe.forEach(t),lCo=i(x),su=n(x,"LI",{});var sxe=s(su);Vce=n(sxe,"STRONG",{});var Sgt=s(Vce);iCo=r(Sgt,"roformer"),Sgt.forEach(t),dCo=r(sxe," \u2014 "),Jj=n(sxe,"A",{href:!0});var Rgt=s(Jj);cCo=r(Rgt,"RoFormerModel"),Rgt.forEach(t),fCo=r(sxe," (RoFormer model)"),sxe.forEach(t),mCo=i(x),lu=n(x,"LI",{});var lxe=s(lu);Xce=n(lxe,"STRONG",{});var Pgt=s(Xce);gCo=r(Pgt,"segformer"),Pgt.forEach(t),hCo=r(lxe," \u2014 "),Yj=n(lxe,"A",{href:!0});var Bgt=s(Yj);pCo=r(Bgt,"SegformerModel"),Bgt.forEach(t),_Co=r(lxe," (SegFormer model)"),lxe.forEach(t),uCo=i(x),iu=n(x,"LI",{});var ixe=s(iu);zce=n(ixe,"STRONG",{});var Igt=s(zce);bCo=r(Igt,"sew"),Igt.forEach(t),vCo=r(ixe," \u2014 "),Kj=n(ixe,"A",{href:!0});var Ngt=s(Kj);FCo=r(Ngt,"SEWModel"),Ngt.forEach(t),TCo=r(ixe," (SEW model)"),ixe.forEach(t),MCo=i(x),du=n(x,"LI",{});var dxe=s(du);Qce=n(dxe,"STRONG",{});var qgt=s(Qce);ECo=r(qgt,"sew-d"),qgt.forEach(t),CCo=r(dxe," \u2014 "),Zj=n(dxe,"A",{href:!0});var jgt=s(Zj);wCo=r(jgt,"SEWDModel"),jgt.forEach(t),ACo=r(dxe," (SEW-D model)"),dxe.forEach(t),LCo=i(x),cu=n(x,"LI",{});var cxe=s(cu);Wce=n(cxe,"STRONG",{});var Dgt=s(Wce);yCo=r(Dgt,"speech_to_text"),Dgt.forEach(t),xCo=r(cxe," \u2014 "),eD=n(cxe,"A",{href:!0});var Ggt=s(eD);$Co=r(Ggt,"Speech2TextModel"),Ggt.forEach(t),kCo=r(cxe," (Speech2Text model)"),cxe.forEach(t),SCo=i(x),fu=n(x,"LI",{});var fxe=s(fu);Hce=n(fxe,"STRONG",{});var Ogt=s(Hce);RCo=r(Ogt,"splinter"),Ogt.forEach(t),PCo=r(fxe," \u2014 "),oD=n(fxe,"A",{href:!0});var Vgt=s(oD);BCo=r(Vgt,"SplinterModel"),Vgt.forEach(t),ICo=r(fxe," (Splinter model)"),fxe.forEach(t),NCo=i(x),mu=n(x,"LI",{});var mxe=s(mu);Uce=n(mxe,"STRONG",{});var Xgt=s(Uce);qCo=r(Xgt,"squeezebert"),Xgt.forEach(t),jCo=r(mxe," \u2014 "),rD=n(mxe,"A",{href:!0});var zgt=s(rD);DCo=r(zgt,"SqueezeBertModel"),zgt.forEach(t),GCo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),OCo=i(x),gu=n(x,"LI",{});var gxe=s(gu);Jce=n(gxe,"STRONG",{});var Qgt=s(Jce);VCo=r(Qgt,"swin"),Qgt.forEach(t),XCo=r(gxe," \u2014 "),tD=n(gxe,"A",{href:!0});var Wgt=s(tD);zCo=r(Wgt,"SwinModel"),Wgt.forEach(t),QCo=r(gxe," (Swin Transformer model)"),gxe.forEach(t),WCo=i(x),hu=n(x,"LI",{});var hxe=s(hu);Yce=n(hxe,"STRONG",{});var Hgt=s(Yce);HCo=r(Hgt,"t5"),Hgt.forEach(t),UCo=r(hxe," \u2014 "),aD=n(hxe,"A",{href:!0});var Ugt=s(aD);JCo=r(Ugt,"T5Model"),Ugt.forEach(t),YCo=r(hxe," (T5 model)"),hxe.forEach(t),KCo=i(x),pu=n(x,"LI",{});var pxe=s(pu);Kce=n(pxe,"STRONG",{});var Jgt=s(Kce);ZCo=r(Jgt,"tapas"),Jgt.forEach(t),e3o=r(pxe," \u2014 "),nD=n(pxe,"A",{href:!0});var Ygt=s(nD);o3o=r(Ygt,"TapasModel"),Ygt.forEach(t),r3o=r(pxe," (TAPAS model)"),pxe.forEach(t),t3o=i(x),_u=n(x,"LI",{});var _xe=s(_u);Zce=n(_xe,"STRONG",{});var Kgt=s(Zce);a3o=r(Kgt,"trajectory_transformer"),Kgt.forEach(t),n3o=r(_xe," \u2014 "),sD=n(_xe,"A",{href:!0});var Zgt=s(sD);s3o=r(Zgt,"TrajectoryTransformerModel"),Zgt.forEach(t),l3o=r(_xe," (Trajectory Transformer model)"),_xe.forEach(t),i3o=i(x),uu=n(x,"LI",{});var uxe=s(uu);efe=n(uxe,"STRONG",{});var eht=s(efe);d3o=r(eht,"transfo-xl"),eht.forEach(t),c3o=r(uxe," \u2014 "),lD=n(uxe,"A",{href:!0});var oht=s(lD);f3o=r(oht,"TransfoXLModel"),oht.forEach(t),m3o=r(uxe," (Transformer-XL model)"),uxe.forEach(t),g3o=i(x),bu=n(x,"LI",{});var bxe=s(bu);ofe=n(bxe,"STRONG",{});var rht=s(ofe);h3o=r(rht,"unispeech"),rht.forEach(t),p3o=r(bxe," \u2014 "),iD=n(bxe,"A",{href:!0});var tht=s(iD);_3o=r(tht,"UniSpeechModel"),tht.forEach(t),u3o=r(bxe," (UniSpeech model)"),bxe.forEach(t),b3o=i(x),vu=n(x,"LI",{});var vxe=s(vu);rfe=n(vxe,"STRONG",{});var aht=s(rfe);v3o=r(aht,"unispeech-sat"),aht.forEach(t),F3o=r(vxe," \u2014 "),dD=n(vxe,"A",{href:!0});var nht=s(dD);T3o=r(nht,"UniSpeechSatModel"),nht.forEach(t),M3o=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),E3o=i(x),Fu=n(x,"LI",{});var Fxe=s(Fu);tfe=n(Fxe,"STRONG",{});var sht=s(tfe);C3o=r(sht,"van"),sht.forEach(t),w3o=r(Fxe," \u2014 "),cD=n(Fxe,"A",{href:!0});var lht=s(cD);A3o=r(lht,"VanModel"),lht.forEach(t),L3o=r(Fxe," (VAN model)"),Fxe.forEach(t),y3o=i(x),Tu=n(x,"LI",{});var Txe=s(Tu);afe=n(Txe,"STRONG",{});var iht=s(afe);x3o=r(iht,"vilt"),iht.forEach(t),$3o=r(Txe," \u2014 "),fD=n(Txe,"A",{href:!0});var dht=s(fD);k3o=r(dht,"ViltModel"),dht.forEach(t),S3o=r(Txe," (ViLT model)"),Txe.forEach(t),R3o=i(x),Mu=n(x,"LI",{});var Mxe=s(Mu);nfe=n(Mxe,"STRONG",{});var cht=s(nfe);P3o=r(cht,"vision-text-dual-encoder"),cht.forEach(t),B3o=r(Mxe," \u2014 "),mD=n(Mxe,"A",{href:!0});var fht=s(mD);I3o=r(fht,"VisionTextDualEncoderModel"),fht.forEach(t),N3o=r(Mxe," (VisionTextDualEncoder model)"),Mxe.forEach(t),q3o=i(x),Eu=n(x,"LI",{});var Exe=s(Eu);sfe=n(Exe,"STRONG",{});var mht=s(sfe);j3o=r(mht,"visual_bert"),mht.forEach(t),D3o=r(Exe," \u2014 "),gD=n(Exe,"A",{href:!0});var ght=s(gD);G3o=r(ght,"VisualBertModel"),ght.forEach(t),O3o=r(Exe," (VisualBERT model)"),Exe.forEach(t),V3o=i(x),Cu=n(x,"LI",{});var Cxe=s(Cu);lfe=n(Cxe,"STRONG",{});var hht=s(lfe);X3o=r(hht,"vit"),hht.forEach(t),z3o=r(Cxe," \u2014 "),hD=n(Cxe,"A",{href:!0});var pht=s(hD);Q3o=r(pht,"ViTModel"),pht.forEach(t),W3o=r(Cxe," (ViT model)"),Cxe.forEach(t),H3o=i(x),wu=n(x,"LI",{});var wxe=s(wu);ife=n(wxe,"STRONG",{});var _ht=s(ife);U3o=r(_ht,"vit_mae"),_ht.forEach(t),J3o=r(wxe," \u2014 "),pD=n(wxe,"A",{href:!0});var uht=s(pD);Y3o=r(uht,"ViTMAEModel"),uht.forEach(t),K3o=r(wxe," (ViTMAE model)"),wxe.forEach(t),Z3o=i(x),Au=n(x,"LI",{});var Axe=s(Au);dfe=n(Axe,"STRONG",{});var bht=s(dfe);e0o=r(bht,"wav2vec2"),bht.forEach(t),o0o=r(Axe," \u2014 "),_D=n(Axe,"A",{href:!0});var vht=s(_D);r0o=r(vht,"Wav2Vec2Model"),vht.forEach(t),t0o=r(Axe," (Wav2Vec2 model)"),Axe.forEach(t),a0o=i(x),Lu=n(x,"LI",{});var Lxe=s(Lu);cfe=n(Lxe,"STRONG",{});var Fht=s(cfe);n0o=r(Fht,"wav2vec2-conformer"),Fht.forEach(t),s0o=r(Lxe," \u2014 "),uD=n(Lxe,"A",{href:!0});var Tht=s(uD);l0o=r(Tht,"Wav2Vec2ConformerModel"),Tht.forEach(t),i0o=r(Lxe," (Wav2Vec2-Conformer model)"),Lxe.forEach(t),d0o=i(x),yu=n(x,"LI",{});var yxe=s(yu);ffe=n(yxe,"STRONG",{});var Mht=s(ffe);c0o=r(Mht,"wavlm"),Mht.forEach(t),f0o=r(yxe," \u2014 "),bD=n(yxe,"A",{href:!0});var Eht=s(bD);m0o=r(Eht,"WavLMModel"),Eht.forEach(t),g0o=r(yxe," (WavLM model)"),yxe.forEach(t),h0o=i(x),xu=n(x,"LI",{});var xxe=s(xu);mfe=n(xxe,"STRONG",{});var Cht=s(mfe);p0o=r(Cht,"xglm"),Cht.forEach(t),_0o=r(xxe," \u2014 "),vD=n(xxe,"A",{href:!0});var wht=s(vD);u0o=r(wht,"XGLMModel"),wht.forEach(t),b0o=r(xxe," (XGLM model)"),xxe.forEach(t),v0o=i(x),$u=n(x,"LI",{});var $xe=s($u);gfe=n($xe,"STRONG",{});var Aht=s(gfe);F0o=r(Aht,"xlm"),Aht.forEach(t),T0o=r($xe," \u2014 "),FD=n($xe,"A",{href:!0});var Lht=s(FD);M0o=r(Lht,"XLMModel"),Lht.forEach(t),E0o=r($xe," (XLM model)"),$xe.forEach(t),C0o=i(x),ku=n(x,"LI",{});var kxe=s(ku);hfe=n(kxe,"STRONG",{});var yht=s(hfe);w0o=r(yht,"xlm-prophetnet"),yht.forEach(t),A0o=r(kxe," \u2014 "),TD=n(kxe,"A",{href:!0});var xht=s(TD);L0o=r(xht,"XLMProphetNetModel"),xht.forEach(t),y0o=r(kxe," (XLM-ProphetNet model)"),kxe.forEach(t),x0o=i(x),Su=n(x,"LI",{});var Sxe=s(Su);pfe=n(Sxe,"STRONG",{});var $ht=s(pfe);$0o=r($ht,"xlm-roberta"),$ht.forEach(t),k0o=r(Sxe," \u2014 "),MD=n(Sxe,"A",{href:!0});var kht=s(MD);S0o=r(kht,"XLMRobertaModel"),kht.forEach(t),R0o=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),P0o=i(x),Ru=n(x,"LI",{});var Rxe=s(Ru);_fe=n(Rxe,"STRONG",{});var Sht=s(_fe);B0o=r(Sht,"xlm-roberta-xl"),Sht.forEach(t),I0o=r(Rxe," \u2014 "),ED=n(Rxe,"A",{href:!0});var Rht=s(ED);N0o=r(Rht,"XLMRobertaXLModel"),Rht.forEach(t),q0o=r(Rxe," (XLM-RoBERTa-XL model)"),Rxe.forEach(t),j0o=i(x),Pu=n(x,"LI",{});var Pxe=s(Pu);ufe=n(Pxe,"STRONG",{});var Pht=s(ufe);D0o=r(Pht,"xlnet"),Pht.forEach(t),G0o=r(Pxe," \u2014 "),CD=n(Pxe,"A",{href:!0});var Bht=s(CD);O0o=r(Bht,"XLNetModel"),Bht.forEach(t),V0o=r(Pxe," (XLNet model)"),Pxe.forEach(t),X0o=i(x),Bu=n(x,"LI",{});var Bxe=s(Bu);bfe=n(Bxe,"STRONG",{});var Iht=s(bfe);z0o=r(Iht,"yolos"),Iht.forEach(t),Q0o=r(Bxe," \u2014 "),wD=n(Bxe,"A",{href:!0});var Nht=s(wD);W0o=r(Nht,"YolosModel"),Nht.forEach(t),H0o=r(Bxe," (YOLOS model)"),Bxe.forEach(t),U0o=i(x),Iu=n(x,"LI",{});var Ixe=s(Iu);vfe=n(Ixe,"STRONG",{});var qht=s(vfe);J0o=r(qht,"yoso"),qht.forEach(t),Y0o=r(Ixe," \u2014 "),AD=n(Ixe,"A",{href:!0});var jht=s(AD);K0o=r(jht,"YosoModel"),jht.forEach(t),Z0o=r(Ixe," (YOSO model)"),Ixe.forEach(t),x.forEach(t),ewo=i(na),Nu=n(na,"P",{});var Nxe=s(Nu);owo=r(Nxe,"The model is set in evaluation mode by default using "),Ffe=n(Nxe,"CODE",{});var Dht=s(Ffe);rwo=r(Dht,"model.eval()"),Dht.forEach(t),two=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n(Nxe,"CODE",{});var Ght=s(Tfe);awo=r(Ght,"model.train()"),Ght.forEach(t),Nxe.forEach(t),nwo=i(na),T(qu.$$.fragment,na),na.forEach(t),Zs.forEach(t),QOe=i(f),Gi=n(f,"H2",{class:!0});var KXe=s(Gi);ju=n(KXe,"A",{id:!0,class:!0,href:!0});var Oht=s(ju);Mfe=n(Oht,"SPAN",{});var Vht=s(Mfe);T(uy.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),swo=i(KXe),Efe=n(KXe,"SPAN",{});var Xht=s(Efe);lwo=r(Xht,"AutoModelForPreTraining"),Xht.forEach(t),KXe.forEach(t),WOe=i(f),$o=n(f,"DIV",{class:!0});var el=s($o);T(by.$$.fragment,el),iwo=i(el),Oi=n(el,"P",{});var Woe=s(Oi);dwo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=n(Woe,"A",{href:!0});var zht=s(LD);cwo=r(zht,"from_pretrained()"),zht.forEach(t),fwo=r(Woe," class method or the "),yD=n(Woe,"A",{href:!0});var Qht=s(yD);mwo=r(Qht,"from_config()"),Qht.forEach(t),gwo=r(Woe,` class
method.`),Woe.forEach(t),hwo=i(el),vy=n(el,"P",{});var ZXe=s(vy);pwo=r(ZXe,"This class cannot be instantiated directly using "),Cfe=n(ZXe,"CODE",{});var Wht=s(Cfe);_wo=r(Wht,"__init__()"),Wht.forEach(t),uwo=r(ZXe," (throws an error)."),ZXe.forEach(t),bwo=i(el),lt=n(el,"DIV",{class:!0});var zA=s(lt);T(Fy.$$.fragment,zA),vwo=i(zA),wfe=n(zA,"P",{});var Hht=s(wfe);Fwo=r(Hht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hht.forEach(t),Two=i(zA),Vi=n(zA,"P",{});var Hoe=s(Vi);Mwo=r(Hoe,`Note:
Loading a model from its configuration file does `),Afe=n(Hoe,"STRONG",{});var Uht=s(Afe);Ewo=r(Uht,"not"),Uht.forEach(t),Cwo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(Hoe,"A",{href:!0});var Jht=s(xD);wwo=r(Jht,"from_pretrained()"),Jht.forEach(t),Awo=r(Hoe," to load the model weights."),Hoe.forEach(t),Lwo=i(zA),T(Du.$$.fragment,zA),zA.forEach(t),ywo=i(el),Ye=n(el,"DIV",{class:!0});var sa=s(Ye);T(Ty.$$.fragment,sa),xwo=i(sa),Lfe=n(sa,"P",{});var Yht=s(Lfe);$wo=r(Yht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yht.forEach(t),kwo=i(sa),Ba=n(sa,"P",{});var QA=s(Ba);Swo=r(QA,"The model class to instantiate is selected based on the "),yfe=n(QA,"CODE",{});var Kht=s(yfe);Rwo=r(Kht,"model_type"),Kht.forEach(t),Pwo=r(QA,` property of the config object (either
passed as an argument or loaded from `),xfe=n(QA,"CODE",{});var Zht=s(xfe);Bwo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),Iwo=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(QA,"CODE",{});var ept=s($fe);Nwo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),qwo=r(QA,":"),QA.forEach(t),jwo=i(sa),G=n(sa,"UL",{});var O=s(G);Gu=n(O,"LI",{});var qxe=s(Gu);kfe=n(qxe,"STRONG",{});var opt=s(kfe);Dwo=r(opt,"albert"),opt.forEach(t),Gwo=r(qxe," \u2014 "),$D=n(qxe,"A",{href:!0});var rpt=s($D);Owo=r(rpt,"AlbertForPreTraining"),rpt.forEach(t),Vwo=r(qxe," (ALBERT model)"),qxe.forEach(t),Xwo=i(O),Ou=n(O,"LI",{});var jxe=s(Ou);Sfe=n(jxe,"STRONG",{});var tpt=s(Sfe);zwo=r(tpt,"bart"),tpt.forEach(t),Qwo=r(jxe," \u2014 "),kD=n(jxe,"A",{href:!0});var apt=s(kD);Wwo=r(apt,"BartForConditionalGeneration"),apt.forEach(t),Hwo=r(jxe," (BART model)"),jxe.forEach(t),Uwo=i(O),Vu=n(O,"LI",{});var Dxe=s(Vu);Rfe=n(Dxe,"STRONG",{});var npt=s(Rfe);Jwo=r(npt,"bert"),npt.forEach(t),Ywo=r(Dxe," \u2014 "),SD=n(Dxe,"A",{href:!0});var spt=s(SD);Kwo=r(spt,"BertForPreTraining"),spt.forEach(t),Zwo=r(Dxe," (BERT model)"),Dxe.forEach(t),eAo=i(O),Xu=n(O,"LI",{});var Gxe=s(Xu);Pfe=n(Gxe,"STRONG",{});var lpt=s(Pfe);oAo=r(lpt,"big_bird"),lpt.forEach(t),rAo=r(Gxe," \u2014 "),RD=n(Gxe,"A",{href:!0});var ipt=s(RD);tAo=r(ipt,"BigBirdForPreTraining"),ipt.forEach(t),aAo=r(Gxe," (BigBird model)"),Gxe.forEach(t),nAo=i(O),zu=n(O,"LI",{});var Oxe=s(zu);Bfe=n(Oxe,"STRONG",{});var dpt=s(Bfe);sAo=r(dpt,"bloom"),dpt.forEach(t),lAo=r(Oxe," \u2014 "),PD=n(Oxe,"A",{href:!0});var cpt=s(PD);iAo=r(cpt,"BloomForCausalLM"),cpt.forEach(t),dAo=r(Oxe," (BLOOM model)"),Oxe.forEach(t),cAo=i(O),Qu=n(O,"LI",{});var Vxe=s(Qu);Ife=n(Vxe,"STRONG",{});var fpt=s(Ife);fAo=r(fpt,"camembert"),fpt.forEach(t),mAo=r(Vxe," \u2014 "),BD=n(Vxe,"A",{href:!0});var mpt=s(BD);gAo=r(mpt,"CamembertForMaskedLM"),mpt.forEach(t),hAo=r(Vxe," (CamemBERT model)"),Vxe.forEach(t),pAo=i(O),Wu=n(O,"LI",{});var Xxe=s(Wu);Nfe=n(Xxe,"STRONG",{});var gpt=s(Nfe);_Ao=r(gpt,"ctrl"),gpt.forEach(t),uAo=r(Xxe," \u2014 "),ID=n(Xxe,"A",{href:!0});var hpt=s(ID);bAo=r(hpt,"CTRLLMHeadModel"),hpt.forEach(t),vAo=r(Xxe," (CTRL model)"),Xxe.forEach(t),FAo=i(O),Hu=n(O,"LI",{});var zxe=s(Hu);qfe=n(zxe,"STRONG",{});var ppt=s(qfe);TAo=r(ppt,"data2vec-text"),ppt.forEach(t),MAo=r(zxe," \u2014 "),ND=n(zxe,"A",{href:!0});var _pt=s(ND);EAo=r(_pt,"Data2VecTextForMaskedLM"),_pt.forEach(t),CAo=r(zxe," (Data2VecText model)"),zxe.forEach(t),wAo=i(O),Uu=n(O,"LI",{});var Qxe=s(Uu);jfe=n(Qxe,"STRONG",{});var upt=s(jfe);AAo=r(upt,"deberta"),upt.forEach(t),LAo=r(Qxe," \u2014 "),qD=n(Qxe,"A",{href:!0});var bpt=s(qD);yAo=r(bpt,"DebertaForMaskedLM"),bpt.forEach(t),xAo=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),$Ao=i(O),Ju=n(O,"LI",{});var Wxe=s(Ju);Dfe=n(Wxe,"STRONG",{});var vpt=s(Dfe);kAo=r(vpt,"deberta-v2"),vpt.forEach(t),SAo=r(Wxe," \u2014 "),jD=n(Wxe,"A",{href:!0});var Fpt=s(jD);RAo=r(Fpt,"DebertaV2ForMaskedLM"),Fpt.forEach(t),PAo=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),BAo=i(O),Yu=n(O,"LI",{});var Hxe=s(Yu);Gfe=n(Hxe,"STRONG",{});var Tpt=s(Gfe);IAo=r(Tpt,"distilbert"),Tpt.forEach(t),NAo=r(Hxe," \u2014 "),DD=n(Hxe,"A",{href:!0});var Mpt=s(DD);qAo=r(Mpt,"DistilBertForMaskedLM"),Mpt.forEach(t),jAo=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),DAo=i(O),Ku=n(O,"LI",{});var Uxe=s(Ku);Ofe=n(Uxe,"STRONG",{});var Ept=s(Ofe);GAo=r(Ept,"electra"),Ept.forEach(t),OAo=r(Uxe," \u2014 "),GD=n(Uxe,"A",{href:!0});var Cpt=s(GD);VAo=r(Cpt,"ElectraForPreTraining"),Cpt.forEach(t),XAo=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),zAo=i(O),Zu=n(O,"LI",{});var Jxe=s(Zu);Vfe=n(Jxe,"STRONG",{});var wpt=s(Vfe);QAo=r(wpt,"flaubert"),wpt.forEach(t),WAo=r(Jxe," \u2014 "),OD=n(Jxe,"A",{href:!0});var Apt=s(OD);HAo=r(Apt,"FlaubertWithLMHeadModel"),Apt.forEach(t),UAo=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),JAo=i(O),e5=n(O,"LI",{});var Yxe=s(e5);Xfe=n(Yxe,"STRONG",{});var Lpt=s(Xfe);YAo=r(Lpt,"flava"),Lpt.forEach(t),KAo=r(Yxe," \u2014 "),VD=n(Yxe,"A",{href:!0});var ypt=s(VD);ZAo=r(ypt,"FlavaForPreTraining"),ypt.forEach(t),e6o=r(Yxe," (FLAVA model)"),Yxe.forEach(t),o6o=i(O),o5=n(O,"LI",{});var Kxe=s(o5);zfe=n(Kxe,"STRONG",{});var xpt=s(zfe);r6o=r(xpt,"fnet"),xpt.forEach(t),t6o=r(Kxe," \u2014 "),XD=n(Kxe,"A",{href:!0});var $pt=s(XD);a6o=r($pt,"FNetForPreTraining"),$pt.forEach(t),n6o=r(Kxe," (FNet model)"),Kxe.forEach(t),s6o=i(O),r5=n(O,"LI",{});var Zxe=s(r5);Qfe=n(Zxe,"STRONG",{});var kpt=s(Qfe);l6o=r(kpt,"fsmt"),kpt.forEach(t),i6o=r(Zxe," \u2014 "),zD=n(Zxe,"A",{href:!0});var Spt=s(zD);d6o=r(Spt,"FSMTForConditionalGeneration"),Spt.forEach(t),c6o=r(Zxe," (FairSeq Machine-Translation model)"),Zxe.forEach(t),f6o=i(O),t5=n(O,"LI",{});var e$e=s(t5);Wfe=n(e$e,"STRONG",{});var Rpt=s(Wfe);m6o=r(Rpt,"funnel"),Rpt.forEach(t),g6o=r(e$e," \u2014 "),QD=n(e$e,"A",{href:!0});var Ppt=s(QD);h6o=r(Ppt,"FunnelForPreTraining"),Ppt.forEach(t),p6o=r(e$e," (Funnel Transformer model)"),e$e.forEach(t),_6o=i(O),a5=n(O,"LI",{});var o$e=s(a5);Hfe=n(o$e,"STRONG",{});var Bpt=s(Hfe);u6o=r(Bpt,"gpt2"),Bpt.forEach(t),b6o=r(o$e," \u2014 "),WD=n(o$e,"A",{href:!0});var Ipt=s(WD);v6o=r(Ipt,"GPT2LMHeadModel"),Ipt.forEach(t),F6o=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),T6o=i(O),n5=n(O,"LI",{});var r$e=s(n5);Ufe=n(r$e,"STRONG",{});var Npt=s(Ufe);M6o=r(Npt,"ibert"),Npt.forEach(t),E6o=r(r$e," \u2014 "),HD=n(r$e,"A",{href:!0});var qpt=s(HD);C6o=r(qpt,"IBertForMaskedLM"),qpt.forEach(t),w6o=r(r$e," (I-BERT model)"),r$e.forEach(t),A6o=i(O),s5=n(O,"LI",{});var t$e=s(s5);Jfe=n(t$e,"STRONG",{});var jpt=s(Jfe);L6o=r(jpt,"layoutlm"),jpt.forEach(t),y6o=r(t$e," \u2014 "),UD=n(t$e,"A",{href:!0});var Dpt=s(UD);x6o=r(Dpt,"LayoutLMForMaskedLM"),Dpt.forEach(t),$6o=r(t$e," (LayoutLM model)"),t$e.forEach(t),k6o=i(O),l5=n(O,"LI",{});var a$e=s(l5);Yfe=n(a$e,"STRONG",{});var Gpt=s(Yfe);S6o=r(Gpt,"longformer"),Gpt.forEach(t),R6o=r(a$e," \u2014 "),JD=n(a$e,"A",{href:!0});var Opt=s(JD);P6o=r(Opt,"LongformerForMaskedLM"),Opt.forEach(t),B6o=r(a$e," (Longformer model)"),a$e.forEach(t),I6o=i(O),i5=n(O,"LI",{});var n$e=s(i5);Kfe=n(n$e,"STRONG",{});var Vpt=s(Kfe);N6o=r(Vpt,"lxmert"),Vpt.forEach(t),q6o=r(n$e," \u2014 "),YD=n(n$e,"A",{href:!0});var Xpt=s(YD);j6o=r(Xpt,"LxmertForPreTraining"),Xpt.forEach(t),D6o=r(n$e," (LXMERT model)"),n$e.forEach(t),G6o=i(O),d5=n(O,"LI",{});var s$e=s(d5);Zfe=n(s$e,"STRONG",{});var zpt=s(Zfe);O6o=r(zpt,"megatron-bert"),zpt.forEach(t),V6o=r(s$e," \u2014 "),KD=n(s$e,"A",{href:!0});var Qpt=s(KD);X6o=r(Qpt,"MegatronBertForPreTraining"),Qpt.forEach(t),z6o=r(s$e," (Megatron-BERT model)"),s$e.forEach(t),Q6o=i(O),c5=n(O,"LI",{});var l$e=s(c5);eme=n(l$e,"STRONG",{});var Wpt=s(eme);W6o=r(Wpt,"mobilebert"),Wpt.forEach(t),H6o=r(l$e," \u2014 "),ZD=n(l$e,"A",{href:!0});var Hpt=s(ZD);U6o=r(Hpt,"MobileBertForPreTraining"),Hpt.forEach(t),J6o=r(l$e," (MobileBERT model)"),l$e.forEach(t),Y6o=i(O),f5=n(O,"LI",{});var i$e=s(f5);ome=n(i$e,"STRONG",{});var Upt=s(ome);K6o=r(Upt,"mpnet"),Upt.forEach(t),Z6o=r(i$e," \u2014 "),eG=n(i$e,"A",{href:!0});var Jpt=s(eG);eLo=r(Jpt,"MPNetForMaskedLM"),Jpt.forEach(t),oLo=r(i$e," (MPNet model)"),i$e.forEach(t),rLo=i(O),m5=n(O,"LI",{});var d$e=s(m5);rme=n(d$e,"STRONG",{});var Ypt=s(rme);tLo=r(Ypt,"nezha"),Ypt.forEach(t),aLo=r(d$e," \u2014 "),oG=n(d$e,"A",{href:!0});var Kpt=s(oG);nLo=r(Kpt,"NezhaForPreTraining"),Kpt.forEach(t),sLo=r(d$e," (Nezha model)"),d$e.forEach(t),lLo=i(O),g5=n(O,"LI",{});var c$e=s(g5);tme=n(c$e,"STRONG",{});var Zpt=s(tme);iLo=r(Zpt,"openai-gpt"),Zpt.forEach(t),dLo=r(c$e," \u2014 "),rG=n(c$e,"A",{href:!0});var e_t=s(rG);cLo=r(e_t,"OpenAIGPTLMHeadModel"),e_t.forEach(t),fLo=r(c$e," (OpenAI GPT model)"),c$e.forEach(t),mLo=i(O),h5=n(O,"LI",{});var f$e=s(h5);ame=n(f$e,"STRONG",{});var o_t=s(ame);gLo=r(o_t,"retribert"),o_t.forEach(t),hLo=r(f$e," \u2014 "),tG=n(f$e,"A",{href:!0});var r_t=s(tG);pLo=r(r_t,"RetriBertModel"),r_t.forEach(t),_Lo=r(f$e," (RetriBERT model)"),f$e.forEach(t),uLo=i(O),p5=n(O,"LI",{});var m$e=s(p5);nme=n(m$e,"STRONG",{});var t_t=s(nme);bLo=r(t_t,"roberta"),t_t.forEach(t),vLo=r(m$e," \u2014 "),aG=n(m$e,"A",{href:!0});var a_t=s(aG);FLo=r(a_t,"RobertaForMaskedLM"),a_t.forEach(t),TLo=r(m$e," (RoBERTa model)"),m$e.forEach(t),MLo=i(O),_5=n(O,"LI",{});var g$e=s(_5);sme=n(g$e,"STRONG",{});var n_t=s(sme);ELo=r(n_t,"splinter"),n_t.forEach(t),CLo=r(g$e," \u2014 "),nG=n(g$e,"A",{href:!0});var s_t=s(nG);wLo=r(s_t,"SplinterForPreTraining"),s_t.forEach(t),ALo=r(g$e," (Splinter model)"),g$e.forEach(t),LLo=i(O),u5=n(O,"LI",{});var h$e=s(u5);lme=n(h$e,"STRONG",{});var l_t=s(lme);yLo=r(l_t,"squeezebert"),l_t.forEach(t),xLo=r(h$e," \u2014 "),sG=n(h$e,"A",{href:!0});var i_t=s(sG);$Lo=r(i_t,"SqueezeBertForMaskedLM"),i_t.forEach(t),kLo=r(h$e," (SqueezeBERT model)"),h$e.forEach(t),SLo=i(O),b5=n(O,"LI",{});var p$e=s(b5);ime=n(p$e,"STRONG",{});var d_t=s(ime);RLo=r(d_t,"t5"),d_t.forEach(t),PLo=r(p$e," \u2014 "),lG=n(p$e,"A",{href:!0});var c_t=s(lG);BLo=r(c_t,"T5ForConditionalGeneration"),c_t.forEach(t),ILo=r(p$e," (T5 model)"),p$e.forEach(t),NLo=i(O),v5=n(O,"LI",{});var _$e=s(v5);dme=n(_$e,"STRONG",{});var f_t=s(dme);qLo=r(f_t,"tapas"),f_t.forEach(t),jLo=r(_$e," \u2014 "),iG=n(_$e,"A",{href:!0});var m_t=s(iG);DLo=r(m_t,"TapasForMaskedLM"),m_t.forEach(t),GLo=r(_$e," (TAPAS model)"),_$e.forEach(t),OLo=i(O),F5=n(O,"LI",{});var u$e=s(F5);cme=n(u$e,"STRONG",{});var g_t=s(cme);VLo=r(g_t,"transfo-xl"),g_t.forEach(t),XLo=r(u$e," \u2014 "),dG=n(u$e,"A",{href:!0});var h_t=s(dG);zLo=r(h_t,"TransfoXLLMHeadModel"),h_t.forEach(t),QLo=r(u$e," (Transformer-XL model)"),u$e.forEach(t),WLo=i(O),T5=n(O,"LI",{});var b$e=s(T5);fme=n(b$e,"STRONG",{});var p_t=s(fme);HLo=r(p_t,"unispeech"),p_t.forEach(t),ULo=r(b$e," \u2014 "),cG=n(b$e,"A",{href:!0});var __t=s(cG);JLo=r(__t,"UniSpeechForPreTraining"),__t.forEach(t),YLo=r(b$e," (UniSpeech model)"),b$e.forEach(t),KLo=i(O),M5=n(O,"LI",{});var v$e=s(M5);mme=n(v$e,"STRONG",{});var u_t=s(mme);ZLo=r(u_t,"unispeech-sat"),u_t.forEach(t),eyo=r(v$e," \u2014 "),fG=n(v$e,"A",{href:!0});var b_t=s(fG);oyo=r(b_t,"UniSpeechSatForPreTraining"),b_t.forEach(t),ryo=r(v$e," (UniSpeechSat model)"),v$e.forEach(t),tyo=i(O),E5=n(O,"LI",{});var F$e=s(E5);gme=n(F$e,"STRONG",{});var v_t=s(gme);ayo=r(v_t,"visual_bert"),v_t.forEach(t),nyo=r(F$e," \u2014 "),mG=n(F$e,"A",{href:!0});var F_t=s(mG);syo=r(F_t,"VisualBertForPreTraining"),F_t.forEach(t),lyo=r(F$e," (VisualBERT model)"),F$e.forEach(t),iyo=i(O),C5=n(O,"LI",{});var T$e=s(C5);hme=n(T$e,"STRONG",{});var T_t=s(hme);dyo=r(T_t,"vit_mae"),T_t.forEach(t),cyo=r(T$e," \u2014 "),gG=n(T$e,"A",{href:!0});var M_t=s(gG);fyo=r(M_t,"ViTMAEForPreTraining"),M_t.forEach(t),myo=r(T$e," (ViTMAE model)"),T$e.forEach(t),gyo=i(O),w5=n(O,"LI",{});var M$e=s(w5);pme=n(M$e,"STRONG",{});var E_t=s(pme);hyo=r(E_t,"wav2vec2"),E_t.forEach(t),pyo=r(M$e," \u2014 "),hG=n(M$e,"A",{href:!0});var C_t=s(hG);_yo=r(C_t,"Wav2Vec2ForPreTraining"),C_t.forEach(t),uyo=r(M$e," (Wav2Vec2 model)"),M$e.forEach(t),byo=i(O),A5=n(O,"LI",{});var E$e=s(A5);_me=n(E$e,"STRONG",{});var w_t=s(_me);vyo=r(w_t,"wav2vec2-conformer"),w_t.forEach(t),Fyo=r(E$e," \u2014 "),pG=n(E$e,"A",{href:!0});var A_t=s(pG);Tyo=r(A_t,"Wav2Vec2ConformerForPreTraining"),A_t.forEach(t),Myo=r(E$e," (Wav2Vec2-Conformer model)"),E$e.forEach(t),Eyo=i(O),L5=n(O,"LI",{});var C$e=s(L5);ume=n(C$e,"STRONG",{});var L_t=s(ume);Cyo=r(L_t,"xlm"),L_t.forEach(t),wyo=r(C$e," \u2014 "),_G=n(C$e,"A",{href:!0});var y_t=s(_G);Ayo=r(y_t,"XLMWithLMHeadModel"),y_t.forEach(t),Lyo=r(C$e," (XLM model)"),C$e.forEach(t),yyo=i(O),y5=n(O,"LI",{});var w$e=s(y5);bme=n(w$e,"STRONG",{});var x_t=s(bme);xyo=r(x_t,"xlm-roberta"),x_t.forEach(t),$yo=r(w$e," \u2014 "),uG=n(w$e,"A",{href:!0});var $_t=s(uG);kyo=r($_t,"XLMRobertaForMaskedLM"),$_t.forEach(t),Syo=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),Ryo=i(O),x5=n(O,"LI",{});var A$e=s(x5);vme=n(A$e,"STRONG",{});var k_t=s(vme);Pyo=r(k_t,"xlm-roberta-xl"),k_t.forEach(t),Byo=r(A$e," \u2014 "),bG=n(A$e,"A",{href:!0});var S_t=s(bG);Iyo=r(S_t,"XLMRobertaXLForMaskedLM"),S_t.forEach(t),Nyo=r(A$e," (XLM-RoBERTa-XL model)"),A$e.forEach(t),qyo=i(O),$5=n(O,"LI",{});var L$e=s($5);Fme=n(L$e,"STRONG",{});var R_t=s(Fme);jyo=r(R_t,"xlnet"),R_t.forEach(t),Dyo=r(L$e," \u2014 "),vG=n(L$e,"A",{href:!0});var P_t=s(vG);Gyo=r(P_t,"XLNetLMHeadModel"),P_t.forEach(t),Oyo=r(L$e," (XLNet model)"),L$e.forEach(t),O.forEach(t),Vyo=i(sa),k5=n(sa,"P",{});var y$e=s(k5);Xyo=r(y$e,"The model is set in evaluation mode by default using "),Tme=n(y$e,"CODE",{});var B_t=s(Tme);zyo=r(B_t,"model.eval()"),B_t.forEach(t),Qyo=r(y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(y$e,"CODE",{});var I_t=s(Mme);Wyo=r(I_t,"model.train()"),I_t.forEach(t),y$e.forEach(t),Hyo=i(sa),T(S5.$$.fragment,sa),sa.forEach(t),el.forEach(t),HOe=i(f),Xi=n(f,"H2",{class:!0});var eze=s(Xi);R5=n(eze,"A",{id:!0,class:!0,href:!0});var N_t=s(R5);Eme=n(N_t,"SPAN",{});var q_t=s(Eme);T(My.$$.fragment,q_t),q_t.forEach(t),N_t.forEach(t),Uyo=i(eze),Cme=n(eze,"SPAN",{});var j_t=s(Cme);Jyo=r(j_t,"AutoModelForCausalLM"),j_t.forEach(t),eze.forEach(t),UOe=i(f),ko=n(f,"DIV",{class:!0});var ol=s(ko);T(Ey.$$.fragment,ol),Yyo=i(ol),zi=n(ol,"P",{});var Uoe=s(zi);Kyo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FG=n(Uoe,"A",{href:!0});var D_t=s(FG);Zyo=r(D_t,"from_pretrained()"),D_t.forEach(t),e8o=r(Uoe," class method or the "),TG=n(Uoe,"A",{href:!0});var G_t=s(TG);o8o=r(G_t,"from_config()"),G_t.forEach(t),r8o=r(Uoe,` class
method.`),Uoe.forEach(t),t8o=i(ol),Cy=n(ol,"P",{});var oze=s(Cy);a8o=r(oze,"This class cannot be instantiated directly using "),wme=n(oze,"CODE",{});var O_t=s(wme);n8o=r(O_t,"__init__()"),O_t.forEach(t),s8o=r(oze," (throws an error)."),oze.forEach(t),l8o=i(ol),it=n(ol,"DIV",{class:!0});var WA=s(it);T(wy.$$.fragment,WA),i8o=i(WA),Ame=n(WA,"P",{});var V_t=s(Ame);d8o=r(V_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V_t.forEach(t),c8o=i(WA),Qi=n(WA,"P",{});var Joe=s(Qi);f8o=r(Joe,`Note:
Loading a model from its configuration file does `),Lme=n(Joe,"STRONG",{});var X_t=s(Lme);m8o=r(X_t,"not"),X_t.forEach(t),g8o=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(Joe,"A",{href:!0});var z_t=s(MG);h8o=r(z_t,"from_pretrained()"),z_t.forEach(t),p8o=r(Joe," to load the model weights."),Joe.forEach(t),_8o=i(WA),T(P5.$$.fragment,WA),WA.forEach(t),u8o=i(ol),Ke=n(ol,"DIV",{class:!0});var la=s(Ke);T(Ay.$$.fragment,la),b8o=i(la),yme=n(la,"P",{});var Q_t=s(yme);v8o=r(Q_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q_t.forEach(t),F8o=i(la),Ia=n(la,"P",{});var HA=s(Ia);T8o=r(HA,"The model class to instantiate is selected based on the "),xme=n(HA,"CODE",{});var W_t=s(xme);M8o=r(W_t,"model_type"),W_t.forEach(t),E8o=r(HA,` property of the config object (either
passed as an argument or loaded from `),$me=n(HA,"CODE",{});var H_t=s($me);C8o=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),w8o=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(HA,"CODE",{});var U_t=s(kme);A8o=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),L8o=r(HA,":"),HA.forEach(t),y8o=i(la),z=n(la,"UL",{});var Q=s(z);B5=n(Q,"LI",{});var x$e=s(B5);Sme=n(x$e,"STRONG",{});var J_t=s(Sme);x8o=r(J_t,"bart"),J_t.forEach(t),$8o=r(x$e," \u2014 "),EG=n(x$e,"A",{href:!0});var Y_t=s(EG);k8o=r(Y_t,"BartForCausalLM"),Y_t.forEach(t),S8o=r(x$e," (BART model)"),x$e.forEach(t),R8o=i(Q),I5=n(Q,"LI",{});var $$e=s(I5);Rme=n($$e,"STRONG",{});var K_t=s(Rme);P8o=r(K_t,"bert"),K_t.forEach(t),B8o=r($$e," \u2014 "),CG=n($$e,"A",{href:!0});var Z_t=s(CG);I8o=r(Z_t,"BertLMHeadModel"),Z_t.forEach(t),N8o=r($$e," (BERT model)"),$$e.forEach(t),q8o=i(Q),N5=n(Q,"LI",{});var k$e=s(N5);Pme=n(k$e,"STRONG",{});var eut=s(Pme);j8o=r(eut,"bert-generation"),eut.forEach(t),D8o=r(k$e," \u2014 "),wG=n(k$e,"A",{href:!0});var out=s(wG);G8o=r(out,"BertGenerationDecoder"),out.forEach(t),O8o=r(k$e," (Bert Generation model)"),k$e.forEach(t),V8o=i(Q),q5=n(Q,"LI",{});var S$e=s(q5);Bme=n(S$e,"STRONG",{});var rut=s(Bme);X8o=r(rut,"big_bird"),rut.forEach(t),z8o=r(S$e," \u2014 "),AG=n(S$e,"A",{href:!0});var tut=s(AG);Q8o=r(tut,"BigBirdForCausalLM"),tut.forEach(t),W8o=r(S$e," (BigBird model)"),S$e.forEach(t),H8o=i(Q),j5=n(Q,"LI",{});var R$e=s(j5);Ime=n(R$e,"STRONG",{});var aut=s(Ime);U8o=r(aut,"bigbird_pegasus"),aut.forEach(t),J8o=r(R$e," \u2014 "),LG=n(R$e,"A",{href:!0});var nut=s(LG);Y8o=r(nut,"BigBirdPegasusForCausalLM"),nut.forEach(t),K8o=r(R$e," (BigBird-Pegasus model)"),R$e.forEach(t),Z8o=i(Q),D5=n(Q,"LI",{});var P$e=s(D5);Nme=n(P$e,"STRONG",{});var sut=s(Nme);e9o=r(sut,"blenderbot"),sut.forEach(t),o9o=r(P$e," \u2014 "),yG=n(P$e,"A",{href:!0});var lut=s(yG);r9o=r(lut,"BlenderbotForCausalLM"),lut.forEach(t),t9o=r(P$e," (Blenderbot model)"),P$e.forEach(t),a9o=i(Q),G5=n(Q,"LI",{});var B$e=s(G5);qme=n(B$e,"STRONG",{});var iut=s(qme);n9o=r(iut,"blenderbot-small"),iut.forEach(t),s9o=r(B$e," \u2014 "),xG=n(B$e,"A",{href:!0});var dut=s(xG);l9o=r(dut,"BlenderbotSmallForCausalLM"),dut.forEach(t),i9o=r(B$e," (BlenderbotSmall model)"),B$e.forEach(t),d9o=i(Q),O5=n(Q,"LI",{});var I$e=s(O5);jme=n(I$e,"STRONG",{});var cut=s(jme);c9o=r(cut,"bloom"),cut.forEach(t),f9o=r(I$e," \u2014 "),$G=n(I$e,"A",{href:!0});var fut=s($G);m9o=r(fut,"BloomForCausalLM"),fut.forEach(t),g9o=r(I$e," (BLOOM model)"),I$e.forEach(t),h9o=i(Q),V5=n(Q,"LI",{});var N$e=s(V5);Dme=n(N$e,"STRONG",{});var mut=s(Dme);p9o=r(mut,"camembert"),mut.forEach(t),_9o=r(N$e," \u2014 "),kG=n(N$e,"A",{href:!0});var gut=s(kG);u9o=r(gut,"CamembertForCausalLM"),gut.forEach(t),b9o=r(N$e," (CamemBERT model)"),N$e.forEach(t),v9o=i(Q),X5=n(Q,"LI",{});var q$e=s(X5);Gme=n(q$e,"STRONG",{});var hut=s(Gme);F9o=r(hut,"codegen"),hut.forEach(t),T9o=r(q$e," \u2014 "),SG=n(q$e,"A",{href:!0});var put=s(SG);M9o=r(put,"CodeGenForCausalLM"),put.forEach(t),E9o=r(q$e," (CodeGen model)"),q$e.forEach(t),C9o=i(Q),z5=n(Q,"LI",{});var j$e=s(z5);Ome=n(j$e,"STRONG",{});var _ut=s(Ome);w9o=r(_ut,"ctrl"),_ut.forEach(t),A9o=r(j$e," \u2014 "),RG=n(j$e,"A",{href:!0});var uut=s(RG);L9o=r(uut,"CTRLLMHeadModel"),uut.forEach(t),y9o=r(j$e," (CTRL model)"),j$e.forEach(t),x9o=i(Q),Q5=n(Q,"LI",{});var D$e=s(Q5);Vme=n(D$e,"STRONG",{});var but=s(Vme);$9o=r(but,"data2vec-text"),but.forEach(t),k9o=r(D$e," \u2014 "),PG=n(D$e,"A",{href:!0});var vut=s(PG);S9o=r(vut,"Data2VecTextForCausalLM"),vut.forEach(t),R9o=r(D$e," (Data2VecText model)"),D$e.forEach(t),P9o=i(Q),W5=n(Q,"LI",{});var G$e=s(W5);Xme=n(G$e,"STRONG",{});var Fut=s(Xme);B9o=r(Fut,"electra"),Fut.forEach(t),I9o=r(G$e," \u2014 "),BG=n(G$e,"A",{href:!0});var Tut=s(BG);N9o=r(Tut,"ElectraForCausalLM"),Tut.forEach(t),q9o=r(G$e," (ELECTRA model)"),G$e.forEach(t),j9o=i(Q),H5=n(Q,"LI",{});var O$e=s(H5);zme=n(O$e,"STRONG",{});var Mut=s(zme);D9o=r(Mut,"gpt2"),Mut.forEach(t),G9o=r(O$e," \u2014 "),IG=n(O$e,"A",{href:!0});var Eut=s(IG);O9o=r(Eut,"GPT2LMHeadModel"),Eut.forEach(t),V9o=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),X9o=i(Q),U5=n(Q,"LI",{});var V$e=s(U5);Qme=n(V$e,"STRONG",{});var Cut=s(Qme);z9o=r(Cut,"gpt_neo"),Cut.forEach(t),Q9o=r(V$e," \u2014 "),NG=n(V$e,"A",{href:!0});var wut=s(NG);W9o=r(wut,"GPTNeoForCausalLM"),wut.forEach(t),H9o=r(V$e," (GPT Neo model)"),V$e.forEach(t),U9o=i(Q),J5=n(Q,"LI",{});var X$e=s(J5);Wme=n(X$e,"STRONG",{});var Aut=s(Wme);J9o=r(Aut,"gpt_neox"),Aut.forEach(t),Y9o=r(X$e," \u2014 "),qG=n(X$e,"A",{href:!0});var Lut=s(qG);K9o=r(Lut,"GPTNeoXForCausalLM"),Lut.forEach(t),Z9o=r(X$e," (GPT NeoX model)"),X$e.forEach(t),exo=i(Q),Y5=n(Q,"LI",{});var z$e=s(Y5);Hme=n(z$e,"STRONG",{});var yut=s(Hme);oxo=r(yut,"gptj"),yut.forEach(t),rxo=r(z$e," \u2014 "),jG=n(z$e,"A",{href:!0});var xut=s(jG);txo=r(xut,"GPTJForCausalLM"),xut.forEach(t),axo=r(z$e," (GPT-J model)"),z$e.forEach(t),nxo=i(Q),K5=n(Q,"LI",{});var Q$e=s(K5);Ume=n(Q$e,"STRONG",{});var $ut=s(Ume);sxo=r($ut,"marian"),$ut.forEach(t),lxo=r(Q$e," \u2014 "),DG=n(Q$e,"A",{href:!0});var kut=s(DG);ixo=r(kut,"MarianForCausalLM"),kut.forEach(t),dxo=r(Q$e," (Marian model)"),Q$e.forEach(t),cxo=i(Q),Z5=n(Q,"LI",{});var W$e=s(Z5);Jme=n(W$e,"STRONG",{});var Sut=s(Jme);fxo=r(Sut,"mbart"),Sut.forEach(t),mxo=r(W$e," \u2014 "),GG=n(W$e,"A",{href:!0});var Rut=s(GG);gxo=r(Rut,"MBartForCausalLM"),Rut.forEach(t),hxo=r(W$e," (mBART model)"),W$e.forEach(t),pxo=i(Q),e1=n(Q,"LI",{});var H$e=s(e1);Yme=n(H$e,"STRONG",{});var Put=s(Yme);_xo=r(Put,"megatron-bert"),Put.forEach(t),uxo=r(H$e," \u2014 "),OG=n(H$e,"A",{href:!0});var But=s(OG);bxo=r(But,"MegatronBertForCausalLM"),But.forEach(t),vxo=r(H$e," (Megatron-BERT model)"),H$e.forEach(t),Fxo=i(Q),o1=n(Q,"LI",{});var U$e=s(o1);Kme=n(U$e,"STRONG",{});var Iut=s(Kme);Txo=r(Iut,"openai-gpt"),Iut.forEach(t),Mxo=r(U$e," \u2014 "),VG=n(U$e,"A",{href:!0});var Nut=s(VG);Exo=r(Nut,"OpenAIGPTLMHeadModel"),Nut.forEach(t),Cxo=r(U$e," (OpenAI GPT model)"),U$e.forEach(t),wxo=i(Q),r1=n(Q,"LI",{});var J$e=s(r1);Zme=n(J$e,"STRONG",{});var qut=s(Zme);Axo=r(qut,"opt"),qut.forEach(t),Lxo=r(J$e," \u2014 "),XG=n(J$e,"A",{href:!0});var jut=s(XG);yxo=r(jut,"OPTForCausalLM"),jut.forEach(t),xxo=r(J$e," (OPT model)"),J$e.forEach(t),$xo=i(Q),t1=n(Q,"LI",{});var Y$e=s(t1);ege=n(Y$e,"STRONG",{});var Dut=s(ege);kxo=r(Dut,"pegasus"),Dut.forEach(t),Sxo=r(Y$e," \u2014 "),zG=n(Y$e,"A",{href:!0});var Gut=s(zG);Rxo=r(Gut,"PegasusForCausalLM"),Gut.forEach(t),Pxo=r(Y$e," (Pegasus model)"),Y$e.forEach(t),Bxo=i(Q),a1=n(Q,"LI",{});var K$e=s(a1);oge=n(K$e,"STRONG",{});var Out=s(oge);Ixo=r(Out,"plbart"),Out.forEach(t),Nxo=r(K$e," \u2014 "),QG=n(K$e,"A",{href:!0});var Vut=s(QG);qxo=r(Vut,"PLBartForCausalLM"),Vut.forEach(t),jxo=r(K$e," (PLBart model)"),K$e.forEach(t),Dxo=i(Q),n1=n(Q,"LI",{});var Z$e=s(n1);rge=n(Z$e,"STRONG",{});var Xut=s(rge);Gxo=r(Xut,"prophetnet"),Xut.forEach(t),Oxo=r(Z$e," \u2014 "),WG=n(Z$e,"A",{href:!0});var zut=s(WG);Vxo=r(zut,"ProphetNetForCausalLM"),zut.forEach(t),Xxo=r(Z$e," (ProphetNet model)"),Z$e.forEach(t),zxo=i(Q),s1=n(Q,"LI",{});var eke=s(s1);tge=n(eke,"STRONG",{});var Qut=s(tge);Qxo=r(Qut,"qdqbert"),Qut.forEach(t),Wxo=r(eke," \u2014 "),HG=n(eke,"A",{href:!0});var Wut=s(HG);Hxo=r(Wut,"QDQBertLMHeadModel"),Wut.forEach(t),Uxo=r(eke," (QDQBert model)"),eke.forEach(t),Jxo=i(Q),l1=n(Q,"LI",{});var oke=s(l1);age=n(oke,"STRONG",{});var Hut=s(age);Yxo=r(Hut,"reformer"),Hut.forEach(t),Kxo=r(oke," \u2014 "),UG=n(oke,"A",{href:!0});var Uut=s(UG);Zxo=r(Uut,"ReformerModelWithLMHead"),Uut.forEach(t),e$o=r(oke," (Reformer model)"),oke.forEach(t),o$o=i(Q),i1=n(Q,"LI",{});var rke=s(i1);nge=n(rke,"STRONG",{});var Jut=s(nge);r$o=r(Jut,"rembert"),Jut.forEach(t),t$o=r(rke," \u2014 "),JG=n(rke,"A",{href:!0});var Yut=s(JG);a$o=r(Yut,"RemBertForCausalLM"),Yut.forEach(t),n$o=r(rke," (RemBERT model)"),rke.forEach(t),s$o=i(Q),d1=n(Q,"LI",{});var tke=s(d1);sge=n(tke,"STRONG",{});var Kut=s(sge);l$o=r(Kut,"roberta"),Kut.forEach(t),i$o=r(tke," \u2014 "),YG=n(tke,"A",{href:!0});var Zut=s(YG);d$o=r(Zut,"RobertaForCausalLM"),Zut.forEach(t),c$o=r(tke," (RoBERTa model)"),tke.forEach(t),f$o=i(Q),c1=n(Q,"LI",{});var ake=s(c1);lge=n(ake,"STRONG",{});var e5t=s(lge);m$o=r(e5t,"roformer"),e5t.forEach(t),g$o=r(ake," \u2014 "),KG=n(ake,"A",{href:!0});var o5t=s(KG);h$o=r(o5t,"RoFormerForCausalLM"),o5t.forEach(t),p$o=r(ake," (RoFormer model)"),ake.forEach(t),_$o=i(Q),f1=n(Q,"LI",{});var nke=s(f1);ige=n(nke,"STRONG",{});var r5t=s(ige);u$o=r(r5t,"speech_to_text_2"),r5t.forEach(t),b$o=r(nke," \u2014 "),ZG=n(nke,"A",{href:!0});var t5t=s(ZG);v$o=r(t5t,"Speech2Text2ForCausalLM"),t5t.forEach(t),F$o=r(nke," (Speech2Text2 model)"),nke.forEach(t),T$o=i(Q),m1=n(Q,"LI",{});var ske=s(m1);dge=n(ske,"STRONG",{});var a5t=s(dge);M$o=r(a5t,"transfo-xl"),a5t.forEach(t),E$o=r(ske," \u2014 "),eO=n(ske,"A",{href:!0});var n5t=s(eO);C$o=r(n5t,"TransfoXLLMHeadModel"),n5t.forEach(t),w$o=r(ske," (Transformer-XL model)"),ske.forEach(t),A$o=i(Q),g1=n(Q,"LI",{});var lke=s(g1);cge=n(lke,"STRONG",{});var s5t=s(cge);L$o=r(s5t,"trocr"),s5t.forEach(t),y$o=r(lke," \u2014 "),oO=n(lke,"A",{href:!0});var l5t=s(oO);x$o=r(l5t,"TrOCRForCausalLM"),l5t.forEach(t),$$o=r(lke," (TrOCR model)"),lke.forEach(t),k$o=i(Q),h1=n(Q,"LI",{});var ike=s(h1);fge=n(ike,"STRONG",{});var i5t=s(fge);S$o=r(i5t,"xglm"),i5t.forEach(t),R$o=r(ike," \u2014 "),rO=n(ike,"A",{href:!0});var d5t=s(rO);P$o=r(d5t,"XGLMForCausalLM"),d5t.forEach(t),B$o=r(ike," (XGLM model)"),ike.forEach(t),I$o=i(Q),p1=n(Q,"LI",{});var dke=s(p1);mge=n(dke,"STRONG",{});var c5t=s(mge);N$o=r(c5t,"xlm"),c5t.forEach(t),q$o=r(dke," \u2014 "),tO=n(dke,"A",{href:!0});var f5t=s(tO);j$o=r(f5t,"XLMWithLMHeadModel"),f5t.forEach(t),D$o=r(dke," (XLM model)"),dke.forEach(t),G$o=i(Q),_1=n(Q,"LI",{});var cke=s(_1);gge=n(cke,"STRONG",{});var m5t=s(gge);O$o=r(m5t,"xlm-prophetnet"),m5t.forEach(t),V$o=r(cke," \u2014 "),aO=n(cke,"A",{href:!0});var g5t=s(aO);X$o=r(g5t,"XLMProphetNetForCausalLM"),g5t.forEach(t),z$o=r(cke," (XLM-ProphetNet model)"),cke.forEach(t),Q$o=i(Q),u1=n(Q,"LI",{});var fke=s(u1);hge=n(fke,"STRONG",{});var h5t=s(hge);W$o=r(h5t,"xlm-roberta"),h5t.forEach(t),H$o=r(fke," \u2014 "),nO=n(fke,"A",{href:!0});var p5t=s(nO);U$o=r(p5t,"XLMRobertaForCausalLM"),p5t.forEach(t),J$o=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Y$o=i(Q),b1=n(Q,"LI",{});var mke=s(b1);pge=n(mke,"STRONG",{});var _5t=s(pge);K$o=r(_5t,"xlm-roberta-xl"),_5t.forEach(t),Z$o=r(mke," \u2014 "),sO=n(mke,"A",{href:!0});var u5t=s(sO);eko=r(u5t,"XLMRobertaXLForCausalLM"),u5t.forEach(t),oko=r(mke," (XLM-RoBERTa-XL model)"),mke.forEach(t),rko=i(Q),v1=n(Q,"LI",{});var gke=s(v1);_ge=n(gke,"STRONG",{});var b5t=s(_ge);tko=r(b5t,"xlnet"),b5t.forEach(t),ako=r(gke," \u2014 "),lO=n(gke,"A",{href:!0});var v5t=s(lO);nko=r(v5t,"XLNetLMHeadModel"),v5t.forEach(t),sko=r(gke," (XLNet model)"),gke.forEach(t),Q.forEach(t),lko=i(la),F1=n(la,"P",{});var hke=s(F1);iko=r(hke,"The model is set in evaluation mode by default using "),uge=n(hke,"CODE",{});var F5t=s(uge);dko=r(F5t,"model.eval()"),F5t.forEach(t),cko=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(hke,"CODE",{});var T5t=s(bge);fko=r(T5t,"model.train()"),T5t.forEach(t),hke.forEach(t),mko=i(la),T(T1.$$.fragment,la),la.forEach(t),ol.forEach(t),JOe=i(f),Wi=n(f,"H2",{class:!0});var rze=s(Wi);M1=n(rze,"A",{id:!0,class:!0,href:!0});var M5t=s(M1);vge=n(M5t,"SPAN",{});var E5t=s(vge);T(Ly.$$.fragment,E5t),E5t.forEach(t),M5t.forEach(t),gko=i(rze),Fge=n(rze,"SPAN",{});var C5t=s(Fge);hko=r(C5t,"AutoModelForMaskedLM"),C5t.forEach(t),rze.forEach(t),YOe=i(f),So=n(f,"DIV",{class:!0});var rl=s(So);T(yy.$$.fragment,rl),pko=i(rl),Hi=n(rl,"P",{});var Yoe=s(Hi);_ko=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iO=n(Yoe,"A",{href:!0});var w5t=s(iO);uko=r(w5t,"from_pretrained()"),w5t.forEach(t),bko=r(Yoe," class method or the "),dO=n(Yoe,"A",{href:!0});var A5t=s(dO);vko=r(A5t,"from_config()"),A5t.forEach(t),Fko=r(Yoe,` class
method.`),Yoe.forEach(t),Tko=i(rl),xy=n(rl,"P",{});var tze=s(xy);Mko=r(tze,"This class cannot be instantiated directly using "),Tge=n(tze,"CODE",{});var L5t=s(Tge);Eko=r(L5t,"__init__()"),L5t.forEach(t),Cko=r(tze," (throws an error)."),tze.forEach(t),wko=i(rl),dt=n(rl,"DIV",{class:!0});var UA=s(dt);T($y.$$.fragment,UA),Ako=i(UA),Mge=n(UA,"P",{});var y5t=s(Mge);Lko=r(y5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y5t.forEach(t),yko=i(UA),Ui=n(UA,"P",{});var Koe=s(Ui);xko=r(Koe,`Note:
Loading a model from its configuration file does `),Ege=n(Koe,"STRONG",{});var x5t=s(Ege);$ko=r(x5t,"not"),x5t.forEach(t),kko=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(Koe,"A",{href:!0});var $5t=s(cO);Sko=r($5t,"from_pretrained()"),$5t.forEach(t),Rko=r(Koe," to load the model weights."),Koe.forEach(t),Pko=i(UA),T(E1.$$.fragment,UA),UA.forEach(t),Bko=i(rl),Ze=n(rl,"DIV",{class:!0});var ia=s(Ze);T(ky.$$.fragment,ia),Iko=i(ia),Cge=n(ia,"P",{});var k5t=s(Cge);Nko=r(k5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k5t.forEach(t),qko=i(ia),Na=n(ia,"P",{});var JA=s(Na);jko=r(JA,"The model class to instantiate is selected based on the "),wge=n(JA,"CODE",{});var S5t=s(wge);Dko=r(S5t,"model_type"),S5t.forEach(t),Gko=r(JA,` property of the config object (either
passed as an argument or loaded from `),Age=n(JA,"CODE",{});var R5t=s(Age);Oko=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),Vko=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(JA,"CODE",{});var P5t=s(Lge);Xko=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),zko=r(JA,":"),JA.forEach(t),Qko=i(ia),W=n(ia,"UL",{});var U=s(W);C1=n(U,"LI",{});var pke=s(C1);yge=n(pke,"STRONG",{});var B5t=s(yge);Wko=r(B5t,"albert"),B5t.forEach(t),Hko=r(pke," \u2014 "),fO=n(pke,"A",{href:!0});var I5t=s(fO);Uko=r(I5t,"AlbertForMaskedLM"),I5t.forEach(t),Jko=r(pke," (ALBERT model)"),pke.forEach(t),Yko=i(U),w1=n(U,"LI",{});var _ke=s(w1);xge=n(_ke,"STRONG",{});var N5t=s(xge);Kko=r(N5t,"bart"),N5t.forEach(t),Zko=r(_ke," \u2014 "),mO=n(_ke,"A",{href:!0});var q5t=s(mO);eSo=r(q5t,"BartForConditionalGeneration"),q5t.forEach(t),oSo=r(_ke," (BART model)"),_ke.forEach(t),rSo=i(U),A1=n(U,"LI",{});var uke=s(A1);$ge=n(uke,"STRONG",{});var j5t=s($ge);tSo=r(j5t,"bert"),j5t.forEach(t),aSo=r(uke," \u2014 "),gO=n(uke,"A",{href:!0});var D5t=s(gO);nSo=r(D5t,"BertForMaskedLM"),D5t.forEach(t),sSo=r(uke," (BERT model)"),uke.forEach(t),lSo=i(U),L1=n(U,"LI",{});var bke=s(L1);kge=n(bke,"STRONG",{});var G5t=s(kge);iSo=r(G5t,"big_bird"),G5t.forEach(t),dSo=r(bke," \u2014 "),hO=n(bke,"A",{href:!0});var O5t=s(hO);cSo=r(O5t,"BigBirdForMaskedLM"),O5t.forEach(t),fSo=r(bke," (BigBird model)"),bke.forEach(t),mSo=i(U),y1=n(U,"LI",{});var vke=s(y1);Sge=n(vke,"STRONG",{});var V5t=s(Sge);gSo=r(V5t,"camembert"),V5t.forEach(t),hSo=r(vke," \u2014 "),pO=n(vke,"A",{href:!0});var X5t=s(pO);pSo=r(X5t,"CamembertForMaskedLM"),X5t.forEach(t),_So=r(vke," (CamemBERT model)"),vke.forEach(t),uSo=i(U),x1=n(U,"LI",{});var Fke=s(x1);Rge=n(Fke,"STRONG",{});var z5t=s(Rge);bSo=r(z5t,"convbert"),z5t.forEach(t),vSo=r(Fke," \u2014 "),_O=n(Fke,"A",{href:!0});var Q5t=s(_O);FSo=r(Q5t,"ConvBertForMaskedLM"),Q5t.forEach(t),TSo=r(Fke," (ConvBERT model)"),Fke.forEach(t),MSo=i(U),$1=n(U,"LI",{});var Tke=s($1);Pge=n(Tke,"STRONG",{});var W5t=s(Pge);ESo=r(W5t,"data2vec-text"),W5t.forEach(t),CSo=r(Tke," \u2014 "),uO=n(Tke,"A",{href:!0});var H5t=s(uO);wSo=r(H5t,"Data2VecTextForMaskedLM"),H5t.forEach(t),ASo=r(Tke," (Data2VecText model)"),Tke.forEach(t),LSo=i(U),k1=n(U,"LI",{});var Mke=s(k1);Bge=n(Mke,"STRONG",{});var U5t=s(Bge);ySo=r(U5t,"deberta"),U5t.forEach(t),xSo=r(Mke," \u2014 "),bO=n(Mke,"A",{href:!0});var J5t=s(bO);$So=r(J5t,"DebertaForMaskedLM"),J5t.forEach(t),kSo=r(Mke," (DeBERTa model)"),Mke.forEach(t),SSo=i(U),S1=n(U,"LI",{});var Eke=s(S1);Ige=n(Eke,"STRONG",{});var Y5t=s(Ige);RSo=r(Y5t,"deberta-v2"),Y5t.forEach(t),PSo=r(Eke," \u2014 "),vO=n(Eke,"A",{href:!0});var K5t=s(vO);BSo=r(K5t,"DebertaV2ForMaskedLM"),K5t.forEach(t),ISo=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),NSo=i(U),R1=n(U,"LI",{});var Cke=s(R1);Nge=n(Cke,"STRONG",{});var Z5t=s(Nge);qSo=r(Z5t,"distilbert"),Z5t.forEach(t),jSo=r(Cke," \u2014 "),FO=n(Cke,"A",{href:!0});var e1t=s(FO);DSo=r(e1t,"DistilBertForMaskedLM"),e1t.forEach(t),GSo=r(Cke," (DistilBERT model)"),Cke.forEach(t),OSo=i(U),P1=n(U,"LI",{});var wke=s(P1);qge=n(wke,"STRONG",{});var o1t=s(qge);VSo=r(o1t,"electra"),o1t.forEach(t),XSo=r(wke," \u2014 "),TO=n(wke,"A",{href:!0});var r1t=s(TO);zSo=r(r1t,"ElectraForMaskedLM"),r1t.forEach(t),QSo=r(wke," (ELECTRA model)"),wke.forEach(t),WSo=i(U),B1=n(U,"LI",{});var Ake=s(B1);jge=n(Ake,"STRONG",{});var t1t=s(jge);HSo=r(t1t,"flaubert"),t1t.forEach(t),USo=r(Ake," \u2014 "),MO=n(Ake,"A",{href:!0});var a1t=s(MO);JSo=r(a1t,"FlaubertWithLMHeadModel"),a1t.forEach(t),YSo=r(Ake," (FlauBERT model)"),Ake.forEach(t),KSo=i(U),I1=n(U,"LI",{});var Lke=s(I1);Dge=n(Lke,"STRONG",{});var n1t=s(Dge);ZSo=r(n1t,"fnet"),n1t.forEach(t),eRo=r(Lke," \u2014 "),EO=n(Lke,"A",{href:!0});var s1t=s(EO);oRo=r(s1t,"FNetForMaskedLM"),s1t.forEach(t),rRo=r(Lke," (FNet model)"),Lke.forEach(t),tRo=i(U),N1=n(U,"LI",{});var yke=s(N1);Gge=n(yke,"STRONG",{});var l1t=s(Gge);aRo=r(l1t,"funnel"),l1t.forEach(t),nRo=r(yke," \u2014 "),CO=n(yke,"A",{href:!0});var i1t=s(CO);sRo=r(i1t,"FunnelForMaskedLM"),i1t.forEach(t),lRo=r(yke," (Funnel Transformer model)"),yke.forEach(t),iRo=i(U),q1=n(U,"LI",{});var xke=s(q1);Oge=n(xke,"STRONG",{});var d1t=s(Oge);dRo=r(d1t,"ibert"),d1t.forEach(t),cRo=r(xke," \u2014 "),wO=n(xke,"A",{href:!0});var c1t=s(wO);fRo=r(c1t,"IBertForMaskedLM"),c1t.forEach(t),mRo=r(xke," (I-BERT model)"),xke.forEach(t),gRo=i(U),j1=n(U,"LI",{});var $ke=s(j1);Vge=n($ke,"STRONG",{});var f1t=s(Vge);hRo=r(f1t,"layoutlm"),f1t.forEach(t),pRo=r($ke," \u2014 "),AO=n($ke,"A",{href:!0});var m1t=s(AO);_Ro=r(m1t,"LayoutLMForMaskedLM"),m1t.forEach(t),uRo=r($ke," (LayoutLM model)"),$ke.forEach(t),bRo=i(U),D1=n(U,"LI",{});var kke=s(D1);Xge=n(kke,"STRONG",{});var g1t=s(Xge);vRo=r(g1t,"longformer"),g1t.forEach(t),FRo=r(kke," \u2014 "),LO=n(kke,"A",{href:!0});var h1t=s(LO);TRo=r(h1t,"LongformerForMaskedLM"),h1t.forEach(t),MRo=r(kke," (Longformer model)"),kke.forEach(t),ERo=i(U),G1=n(U,"LI",{});var Ske=s(G1);zge=n(Ske,"STRONG",{});var p1t=s(zge);CRo=r(p1t,"luke"),p1t.forEach(t),wRo=r(Ske," \u2014 "),yO=n(Ske,"A",{href:!0});var _1t=s(yO);ARo=r(_1t,"LukeForMaskedLM"),_1t.forEach(t),LRo=r(Ske," (LUKE model)"),Ske.forEach(t),yRo=i(U),O1=n(U,"LI",{});var Rke=s(O1);Qge=n(Rke,"STRONG",{});var u1t=s(Qge);xRo=r(u1t,"mbart"),u1t.forEach(t),$Ro=r(Rke," \u2014 "),xO=n(Rke,"A",{href:!0});var b1t=s(xO);kRo=r(b1t,"MBartForConditionalGeneration"),b1t.forEach(t),SRo=r(Rke," (mBART model)"),Rke.forEach(t),RRo=i(U),V1=n(U,"LI",{});var Pke=s(V1);Wge=n(Pke,"STRONG",{});var v1t=s(Wge);PRo=r(v1t,"megatron-bert"),v1t.forEach(t),BRo=r(Pke," \u2014 "),$O=n(Pke,"A",{href:!0});var F1t=s($O);IRo=r(F1t,"MegatronBertForMaskedLM"),F1t.forEach(t),NRo=r(Pke," (Megatron-BERT model)"),Pke.forEach(t),qRo=i(U),X1=n(U,"LI",{});var Bke=s(X1);Hge=n(Bke,"STRONG",{});var T1t=s(Hge);jRo=r(T1t,"mobilebert"),T1t.forEach(t),DRo=r(Bke," \u2014 "),kO=n(Bke,"A",{href:!0});var M1t=s(kO);GRo=r(M1t,"MobileBertForMaskedLM"),M1t.forEach(t),ORo=r(Bke," (MobileBERT model)"),Bke.forEach(t),VRo=i(U),z1=n(U,"LI",{});var Ike=s(z1);Uge=n(Ike,"STRONG",{});var E1t=s(Uge);XRo=r(E1t,"mpnet"),E1t.forEach(t),zRo=r(Ike," \u2014 "),SO=n(Ike,"A",{href:!0});var C1t=s(SO);QRo=r(C1t,"MPNetForMaskedLM"),C1t.forEach(t),WRo=r(Ike," (MPNet model)"),Ike.forEach(t),HRo=i(U),Q1=n(U,"LI",{});var Nke=s(Q1);Jge=n(Nke,"STRONG",{});var w1t=s(Jge);URo=r(w1t,"nezha"),w1t.forEach(t),JRo=r(Nke," \u2014 "),RO=n(Nke,"A",{href:!0});var A1t=s(RO);YRo=r(A1t,"NezhaForMaskedLM"),A1t.forEach(t),KRo=r(Nke," (Nezha model)"),Nke.forEach(t),ZRo=i(U),W1=n(U,"LI",{});var qke=s(W1);Yge=n(qke,"STRONG",{});var L1t=s(Yge);ePo=r(L1t,"nystromformer"),L1t.forEach(t),oPo=r(qke," \u2014 "),PO=n(qke,"A",{href:!0});var y1t=s(PO);rPo=r(y1t,"NystromformerForMaskedLM"),y1t.forEach(t),tPo=r(qke," (Nystr\xF6mformer model)"),qke.forEach(t),aPo=i(U),H1=n(U,"LI",{});var jke=s(H1);Kge=n(jke,"STRONG",{});var x1t=s(Kge);nPo=r(x1t,"perceiver"),x1t.forEach(t),sPo=r(jke," \u2014 "),BO=n(jke,"A",{href:!0});var $1t=s(BO);lPo=r($1t,"PerceiverForMaskedLM"),$1t.forEach(t),iPo=r(jke," (Perceiver model)"),jke.forEach(t),dPo=i(U),U1=n(U,"LI",{});var Dke=s(U1);Zge=n(Dke,"STRONG",{});var k1t=s(Zge);cPo=r(k1t,"qdqbert"),k1t.forEach(t),fPo=r(Dke," \u2014 "),IO=n(Dke,"A",{href:!0});var S1t=s(IO);mPo=r(S1t,"QDQBertForMaskedLM"),S1t.forEach(t),gPo=r(Dke," (QDQBert model)"),Dke.forEach(t),hPo=i(U),J1=n(U,"LI",{});var Gke=s(J1);ehe=n(Gke,"STRONG",{});var R1t=s(ehe);pPo=r(R1t,"reformer"),R1t.forEach(t),_Po=r(Gke," \u2014 "),NO=n(Gke,"A",{href:!0});var P1t=s(NO);uPo=r(P1t,"ReformerForMaskedLM"),P1t.forEach(t),bPo=r(Gke," (Reformer model)"),Gke.forEach(t),vPo=i(U),Y1=n(U,"LI",{});var Oke=s(Y1);ohe=n(Oke,"STRONG",{});var B1t=s(ohe);FPo=r(B1t,"rembert"),B1t.forEach(t),TPo=r(Oke," \u2014 "),qO=n(Oke,"A",{href:!0});var I1t=s(qO);MPo=r(I1t,"RemBertForMaskedLM"),I1t.forEach(t),EPo=r(Oke," (RemBERT model)"),Oke.forEach(t),CPo=i(U),K1=n(U,"LI",{});var Vke=s(K1);rhe=n(Vke,"STRONG",{});var N1t=s(rhe);wPo=r(N1t,"roberta"),N1t.forEach(t),APo=r(Vke," \u2014 "),jO=n(Vke,"A",{href:!0});var q1t=s(jO);LPo=r(q1t,"RobertaForMaskedLM"),q1t.forEach(t),yPo=r(Vke," (RoBERTa model)"),Vke.forEach(t),xPo=i(U),Z1=n(U,"LI",{});var Xke=s(Z1);the=n(Xke,"STRONG",{});var j1t=s(the);$Po=r(j1t,"roformer"),j1t.forEach(t),kPo=r(Xke," \u2014 "),DO=n(Xke,"A",{href:!0});var D1t=s(DO);SPo=r(D1t,"RoFormerForMaskedLM"),D1t.forEach(t),RPo=r(Xke," (RoFormer model)"),Xke.forEach(t),PPo=i(U),e2=n(U,"LI",{});var zke=s(e2);ahe=n(zke,"STRONG",{});var G1t=s(ahe);BPo=r(G1t,"squeezebert"),G1t.forEach(t),IPo=r(zke," \u2014 "),GO=n(zke,"A",{href:!0});var O1t=s(GO);NPo=r(O1t,"SqueezeBertForMaskedLM"),O1t.forEach(t),qPo=r(zke," (SqueezeBERT model)"),zke.forEach(t),jPo=i(U),o2=n(U,"LI",{});var Qke=s(o2);nhe=n(Qke,"STRONG",{});var V1t=s(nhe);DPo=r(V1t,"tapas"),V1t.forEach(t),GPo=r(Qke," \u2014 "),OO=n(Qke,"A",{href:!0});var X1t=s(OO);OPo=r(X1t,"TapasForMaskedLM"),X1t.forEach(t),VPo=r(Qke," (TAPAS model)"),Qke.forEach(t),XPo=i(U),r2=n(U,"LI",{});var Wke=s(r2);she=n(Wke,"STRONG",{});var z1t=s(she);zPo=r(z1t,"wav2vec2"),z1t.forEach(t),QPo=r(Wke," \u2014 "),lhe=n(Wke,"CODE",{});var Q1t=s(lhe);WPo=r(Q1t,"Wav2Vec2ForMaskedLM"),Q1t.forEach(t),HPo=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),UPo=i(U),t2=n(U,"LI",{});var Hke=s(t2);ihe=n(Hke,"STRONG",{});var W1t=s(ihe);JPo=r(W1t,"xlm"),W1t.forEach(t),YPo=r(Hke," \u2014 "),VO=n(Hke,"A",{href:!0});var H1t=s(VO);KPo=r(H1t,"XLMWithLMHeadModel"),H1t.forEach(t),ZPo=r(Hke," (XLM model)"),Hke.forEach(t),eBo=i(U),a2=n(U,"LI",{});var Uke=s(a2);dhe=n(Uke,"STRONG",{});var U1t=s(dhe);oBo=r(U1t,"xlm-roberta"),U1t.forEach(t),rBo=r(Uke," \u2014 "),XO=n(Uke,"A",{href:!0});var J1t=s(XO);tBo=r(J1t,"XLMRobertaForMaskedLM"),J1t.forEach(t),aBo=r(Uke," (XLM-RoBERTa model)"),Uke.forEach(t),nBo=i(U),n2=n(U,"LI",{});var Jke=s(n2);che=n(Jke,"STRONG",{});var Y1t=s(che);sBo=r(Y1t,"xlm-roberta-xl"),Y1t.forEach(t),lBo=r(Jke," \u2014 "),zO=n(Jke,"A",{href:!0});var K1t=s(zO);iBo=r(K1t,"XLMRobertaXLForMaskedLM"),K1t.forEach(t),dBo=r(Jke," (XLM-RoBERTa-XL model)"),Jke.forEach(t),cBo=i(U),s2=n(U,"LI",{});var Yke=s(s2);fhe=n(Yke,"STRONG",{});var Z1t=s(fhe);fBo=r(Z1t,"yoso"),Z1t.forEach(t),mBo=r(Yke," \u2014 "),QO=n(Yke,"A",{href:!0});var e2t=s(QO);gBo=r(e2t,"YosoForMaskedLM"),e2t.forEach(t),hBo=r(Yke," (YOSO model)"),Yke.forEach(t),U.forEach(t),pBo=i(ia),l2=n(ia,"P",{});var Kke=s(l2);_Bo=r(Kke,"The model is set in evaluation mode by default using "),mhe=n(Kke,"CODE",{});var o2t=s(mhe);uBo=r(o2t,"model.eval()"),o2t.forEach(t),bBo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(Kke,"CODE",{});var r2t=s(ghe);vBo=r(r2t,"model.train()"),r2t.forEach(t),Kke.forEach(t),FBo=i(ia),T(i2.$$.fragment,ia),ia.forEach(t),rl.forEach(t),KOe=i(f),Ji=n(f,"H2",{class:!0});var aze=s(Ji);d2=n(aze,"A",{id:!0,class:!0,href:!0});var t2t=s(d2);hhe=n(t2t,"SPAN",{});var a2t=s(hhe);T(Sy.$$.fragment,a2t),a2t.forEach(t),t2t.forEach(t),TBo=i(aze),phe=n(aze,"SPAN",{});var n2t=s(phe);MBo=r(n2t,"AutoModelForSeq2SeqLM"),n2t.forEach(t),aze.forEach(t),ZOe=i(f),Ro=n(f,"DIV",{class:!0});var tl=s(Ro);T(Ry.$$.fragment,tl),EBo=i(tl),Yi=n(tl,"P",{});var Zoe=s(Yi);CBo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WO=n(Zoe,"A",{href:!0});var s2t=s(WO);wBo=r(s2t,"from_pretrained()"),s2t.forEach(t),ABo=r(Zoe," class method or the "),HO=n(Zoe,"A",{href:!0});var l2t=s(HO);LBo=r(l2t,"from_config()"),l2t.forEach(t),yBo=r(Zoe,` class
method.`),Zoe.forEach(t),xBo=i(tl),Py=n(tl,"P",{});var nze=s(Py);$Bo=r(nze,"This class cannot be instantiated directly using "),_he=n(nze,"CODE",{});var i2t=s(_he);kBo=r(i2t,"__init__()"),i2t.forEach(t),SBo=r(nze," (throws an error)."),nze.forEach(t),RBo=i(tl),ct=n(tl,"DIV",{class:!0});var YA=s(ct);T(By.$$.fragment,YA),PBo=i(YA),uhe=n(YA,"P",{});var d2t=s(uhe);BBo=r(d2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d2t.forEach(t),IBo=i(YA),Ki=n(YA,"P",{});var ere=s(Ki);NBo=r(ere,`Note:
Loading a model from its configuration file does `),bhe=n(ere,"STRONG",{});var c2t=s(bhe);qBo=r(c2t,"not"),c2t.forEach(t),jBo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(ere,"A",{href:!0});var f2t=s(UO);DBo=r(f2t,"from_pretrained()"),f2t.forEach(t),GBo=r(ere," to load the model weights."),ere.forEach(t),OBo=i(YA),T(c2.$$.fragment,YA),YA.forEach(t),VBo=i(tl),eo=n(tl,"DIV",{class:!0});var da=s(eo);T(Iy.$$.fragment,da),XBo=i(da),vhe=n(da,"P",{});var m2t=s(vhe);zBo=r(m2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m2t.forEach(t),QBo=i(da),qa=n(da,"P",{});var KA=s(qa);WBo=r(KA,"The model class to instantiate is selected based on the "),Fhe=n(KA,"CODE",{});var g2t=s(Fhe);HBo=r(g2t,"model_type"),g2t.forEach(t),UBo=r(KA,` property of the config object (either
passed as an argument or loaded from `),The=n(KA,"CODE",{});var h2t=s(The);JBo=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),YBo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(KA,"CODE",{});var p2t=s(Mhe);KBo=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),ZBo=r(KA,":"),KA.forEach(t),eIo=i(da),pe=n(da,"UL",{});var be=s(pe);f2=n(be,"LI",{});var Zke=s(f2);Ehe=n(Zke,"STRONG",{});var _2t=s(Ehe);oIo=r(_2t,"bart"),_2t.forEach(t),rIo=r(Zke," \u2014 "),JO=n(Zke,"A",{href:!0});var u2t=s(JO);tIo=r(u2t,"BartForConditionalGeneration"),u2t.forEach(t),aIo=r(Zke," (BART model)"),Zke.forEach(t),nIo=i(be),m2=n(be,"LI",{});var eSe=s(m2);Che=n(eSe,"STRONG",{});var b2t=s(Che);sIo=r(b2t,"bigbird_pegasus"),b2t.forEach(t),lIo=r(eSe," \u2014 "),YO=n(eSe,"A",{href:!0});var v2t=s(YO);iIo=r(v2t,"BigBirdPegasusForConditionalGeneration"),v2t.forEach(t),dIo=r(eSe," (BigBird-Pegasus model)"),eSe.forEach(t),cIo=i(be),g2=n(be,"LI",{});var oSe=s(g2);whe=n(oSe,"STRONG",{});var F2t=s(whe);fIo=r(F2t,"blenderbot"),F2t.forEach(t),mIo=r(oSe," \u2014 "),KO=n(oSe,"A",{href:!0});var T2t=s(KO);gIo=r(T2t,"BlenderbotForConditionalGeneration"),T2t.forEach(t),hIo=r(oSe," (Blenderbot model)"),oSe.forEach(t),pIo=i(be),h2=n(be,"LI",{});var rSe=s(h2);Ahe=n(rSe,"STRONG",{});var M2t=s(Ahe);_Io=r(M2t,"blenderbot-small"),M2t.forEach(t),uIo=r(rSe," \u2014 "),ZO=n(rSe,"A",{href:!0});var E2t=s(ZO);bIo=r(E2t,"BlenderbotSmallForConditionalGeneration"),E2t.forEach(t),vIo=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),FIo=i(be),p2=n(be,"LI",{});var tSe=s(p2);Lhe=n(tSe,"STRONG",{});var C2t=s(Lhe);TIo=r(C2t,"encoder-decoder"),C2t.forEach(t),MIo=r(tSe," \u2014 "),eV=n(tSe,"A",{href:!0});var w2t=s(eV);EIo=r(w2t,"EncoderDecoderModel"),w2t.forEach(t),CIo=r(tSe," (Encoder decoder model)"),tSe.forEach(t),wIo=i(be),_2=n(be,"LI",{});var aSe=s(_2);yhe=n(aSe,"STRONG",{});var A2t=s(yhe);AIo=r(A2t,"fsmt"),A2t.forEach(t),LIo=r(aSe," \u2014 "),oV=n(aSe,"A",{href:!0});var L2t=s(oV);yIo=r(L2t,"FSMTForConditionalGeneration"),L2t.forEach(t),xIo=r(aSe," (FairSeq Machine-Translation model)"),aSe.forEach(t),$Io=i(be),u2=n(be,"LI",{});var nSe=s(u2);xhe=n(nSe,"STRONG",{});var y2t=s(xhe);kIo=r(y2t,"led"),y2t.forEach(t),SIo=r(nSe," \u2014 "),rV=n(nSe,"A",{href:!0});var x2t=s(rV);RIo=r(x2t,"LEDForConditionalGeneration"),x2t.forEach(t),PIo=r(nSe," (LED model)"),nSe.forEach(t),BIo=i(be),b2=n(be,"LI",{});var sSe=s(b2);$he=n(sSe,"STRONG",{});var $2t=s($he);IIo=r($2t,"longt5"),$2t.forEach(t),NIo=r(sSe," \u2014 "),tV=n(sSe,"A",{href:!0});var k2t=s(tV);qIo=r(k2t,"LongT5ForConditionalGeneration"),k2t.forEach(t),jIo=r(sSe," (LongT5 model)"),sSe.forEach(t),DIo=i(be),v2=n(be,"LI",{});var lSe=s(v2);khe=n(lSe,"STRONG",{});var S2t=s(khe);GIo=r(S2t,"m2m_100"),S2t.forEach(t),OIo=r(lSe," \u2014 "),aV=n(lSe,"A",{href:!0});var R2t=s(aV);VIo=r(R2t,"M2M100ForConditionalGeneration"),R2t.forEach(t),XIo=r(lSe," (M2M100 model)"),lSe.forEach(t),zIo=i(be),F2=n(be,"LI",{});var iSe=s(F2);She=n(iSe,"STRONG",{});var P2t=s(She);QIo=r(P2t,"marian"),P2t.forEach(t),WIo=r(iSe," \u2014 "),nV=n(iSe,"A",{href:!0});var B2t=s(nV);HIo=r(B2t,"MarianMTModel"),B2t.forEach(t),UIo=r(iSe," (Marian model)"),iSe.forEach(t),JIo=i(be),T2=n(be,"LI",{});var dSe=s(T2);Rhe=n(dSe,"STRONG",{});var I2t=s(Rhe);YIo=r(I2t,"mbart"),I2t.forEach(t),KIo=r(dSe," \u2014 "),sV=n(dSe,"A",{href:!0});var N2t=s(sV);ZIo=r(N2t,"MBartForConditionalGeneration"),N2t.forEach(t),eNo=r(dSe," (mBART model)"),dSe.forEach(t),oNo=i(be),M2=n(be,"LI",{});var cSe=s(M2);Phe=n(cSe,"STRONG",{});var q2t=s(Phe);rNo=r(q2t,"mt5"),q2t.forEach(t),tNo=r(cSe," \u2014 "),lV=n(cSe,"A",{href:!0});var j2t=s(lV);aNo=r(j2t,"MT5ForConditionalGeneration"),j2t.forEach(t),nNo=r(cSe," (MT5 model)"),cSe.forEach(t),sNo=i(be),E2=n(be,"LI",{});var fSe=s(E2);Bhe=n(fSe,"STRONG",{});var D2t=s(Bhe);lNo=r(D2t,"pegasus"),D2t.forEach(t),iNo=r(fSe," \u2014 "),iV=n(fSe,"A",{href:!0});var G2t=s(iV);dNo=r(G2t,"PegasusForConditionalGeneration"),G2t.forEach(t),cNo=r(fSe," (Pegasus model)"),fSe.forEach(t),fNo=i(be),C2=n(be,"LI",{});var mSe=s(C2);Ihe=n(mSe,"STRONG",{});var O2t=s(Ihe);mNo=r(O2t,"plbart"),O2t.forEach(t),gNo=r(mSe," \u2014 "),dV=n(mSe,"A",{href:!0});var V2t=s(dV);hNo=r(V2t,"PLBartForConditionalGeneration"),V2t.forEach(t),pNo=r(mSe," (PLBart model)"),mSe.forEach(t),_No=i(be),w2=n(be,"LI",{});var gSe=s(w2);Nhe=n(gSe,"STRONG",{});var X2t=s(Nhe);uNo=r(X2t,"prophetnet"),X2t.forEach(t),bNo=r(gSe," \u2014 "),cV=n(gSe,"A",{href:!0});var z2t=s(cV);vNo=r(z2t,"ProphetNetForConditionalGeneration"),z2t.forEach(t),FNo=r(gSe," (ProphetNet model)"),gSe.forEach(t),TNo=i(be),A2=n(be,"LI",{});var hSe=s(A2);qhe=n(hSe,"STRONG",{});var Q2t=s(qhe);MNo=r(Q2t,"t5"),Q2t.forEach(t),ENo=r(hSe," \u2014 "),fV=n(hSe,"A",{href:!0});var W2t=s(fV);CNo=r(W2t,"T5ForConditionalGeneration"),W2t.forEach(t),wNo=r(hSe," (T5 model)"),hSe.forEach(t),ANo=i(be),L2=n(be,"LI",{});var pSe=s(L2);jhe=n(pSe,"STRONG",{});var H2t=s(jhe);LNo=r(H2t,"xlm-prophetnet"),H2t.forEach(t),yNo=r(pSe," \u2014 "),mV=n(pSe,"A",{href:!0});var U2t=s(mV);xNo=r(U2t,"XLMProphetNetForConditionalGeneration"),U2t.forEach(t),$No=r(pSe," (XLM-ProphetNet model)"),pSe.forEach(t),be.forEach(t),kNo=i(da),y2=n(da,"P",{});var _Se=s(y2);SNo=r(_Se,"The model is set in evaluation mode by default using "),Dhe=n(_Se,"CODE",{});var J2t=s(Dhe);RNo=r(J2t,"model.eval()"),J2t.forEach(t),PNo=r(_Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(_Se,"CODE",{});var Y2t=s(Ghe);BNo=r(Y2t,"model.train()"),Y2t.forEach(t),_Se.forEach(t),INo=i(da),T(x2.$$.fragment,da),da.forEach(t),tl.forEach(t),eVe=i(f),Zi=n(f,"H2",{class:!0});var sze=s(Zi);$2=n(sze,"A",{id:!0,class:!0,href:!0});var K2t=s($2);Ohe=n(K2t,"SPAN",{});var Z2t=s(Ohe);T(Ny.$$.fragment,Z2t),Z2t.forEach(t),K2t.forEach(t),NNo=i(sze),Vhe=n(sze,"SPAN",{});var e4t=s(Vhe);qNo=r(e4t,"AutoModelForSequenceClassification"),e4t.forEach(t),sze.forEach(t),oVe=i(f),Po=n(f,"DIV",{class:!0});var al=s(Po);T(qy.$$.fragment,al),jNo=i(al),ed=n(al,"P",{});var ore=s(ed);DNo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gV=n(ore,"A",{href:!0});var o4t=s(gV);GNo=r(o4t,"from_pretrained()"),o4t.forEach(t),ONo=r(ore," class method or the "),hV=n(ore,"A",{href:!0});var r4t=s(hV);VNo=r(r4t,"from_config()"),r4t.forEach(t),XNo=r(ore,` class
method.`),ore.forEach(t),zNo=i(al),jy=n(al,"P",{});var lze=s(jy);QNo=r(lze,"This class cannot be instantiated directly using "),Xhe=n(lze,"CODE",{});var t4t=s(Xhe);WNo=r(t4t,"__init__()"),t4t.forEach(t),HNo=r(lze," (throws an error)."),lze.forEach(t),UNo=i(al),ft=n(al,"DIV",{class:!0});var ZA=s(ft);T(Dy.$$.fragment,ZA),JNo=i(ZA),zhe=n(ZA,"P",{});var a4t=s(zhe);YNo=r(a4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),a4t.forEach(t),KNo=i(ZA),od=n(ZA,"P",{});var rre=s(od);ZNo=r(rre,`Note:
Loading a model from its configuration file does `),Qhe=n(rre,"STRONG",{});var n4t=s(Qhe);eqo=r(n4t,"not"),n4t.forEach(t),oqo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(rre,"A",{href:!0});var s4t=s(pV);rqo=r(s4t,"from_pretrained()"),s4t.forEach(t),tqo=r(rre," to load the model weights."),rre.forEach(t),aqo=i(ZA),T(k2.$$.fragment,ZA),ZA.forEach(t),nqo=i(al),oo=n(al,"DIV",{class:!0});var ca=s(oo);T(Gy.$$.fragment,ca),sqo=i(ca),Whe=n(ca,"P",{});var l4t=s(Whe);lqo=r(l4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),l4t.forEach(t),iqo=i(ca),ja=n(ca,"P",{});var e6=s(ja);dqo=r(e6,"The model class to instantiate is selected based on the "),Hhe=n(e6,"CODE",{});var i4t=s(Hhe);cqo=r(i4t,"model_type"),i4t.forEach(t),fqo=r(e6,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(e6,"CODE",{});var d4t=s(Uhe);mqo=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),gqo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(e6,"CODE",{});var c4t=s(Jhe);hqo=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),pqo=r(e6,":"),e6.forEach(t),_qo=i(ca),N=n(ca,"UL",{});var j=s(N);S2=n(j,"LI",{});var uSe=s(S2);Yhe=n(uSe,"STRONG",{});var f4t=s(Yhe);uqo=r(f4t,"albert"),f4t.forEach(t),bqo=r(uSe," \u2014 "),_V=n(uSe,"A",{href:!0});var m4t=s(_V);vqo=r(m4t,"AlbertForSequenceClassification"),m4t.forEach(t),Fqo=r(uSe," (ALBERT model)"),uSe.forEach(t),Tqo=i(j),R2=n(j,"LI",{});var bSe=s(R2);Khe=n(bSe,"STRONG",{});var g4t=s(Khe);Mqo=r(g4t,"bart"),g4t.forEach(t),Eqo=r(bSe," \u2014 "),uV=n(bSe,"A",{href:!0});var h4t=s(uV);Cqo=r(h4t,"BartForSequenceClassification"),h4t.forEach(t),wqo=r(bSe," (BART model)"),bSe.forEach(t),Aqo=i(j),P2=n(j,"LI",{});var vSe=s(P2);Zhe=n(vSe,"STRONG",{});var p4t=s(Zhe);Lqo=r(p4t,"bert"),p4t.forEach(t),yqo=r(vSe," \u2014 "),bV=n(vSe,"A",{href:!0});var _4t=s(bV);xqo=r(_4t,"BertForSequenceClassification"),_4t.forEach(t),$qo=r(vSe," (BERT model)"),vSe.forEach(t),kqo=i(j),B2=n(j,"LI",{});var FSe=s(B2);epe=n(FSe,"STRONG",{});var u4t=s(epe);Sqo=r(u4t,"big_bird"),u4t.forEach(t),Rqo=r(FSe," \u2014 "),vV=n(FSe,"A",{href:!0});var b4t=s(vV);Pqo=r(b4t,"BigBirdForSequenceClassification"),b4t.forEach(t),Bqo=r(FSe," (BigBird model)"),FSe.forEach(t),Iqo=i(j),I2=n(j,"LI",{});var TSe=s(I2);ope=n(TSe,"STRONG",{});var v4t=s(ope);Nqo=r(v4t,"bigbird_pegasus"),v4t.forEach(t),qqo=r(TSe," \u2014 "),FV=n(TSe,"A",{href:!0});var F4t=s(FV);jqo=r(F4t,"BigBirdPegasusForSequenceClassification"),F4t.forEach(t),Dqo=r(TSe," (BigBird-Pegasus model)"),TSe.forEach(t),Gqo=i(j),N2=n(j,"LI",{});var MSe=s(N2);rpe=n(MSe,"STRONG",{});var T4t=s(rpe);Oqo=r(T4t,"bloom"),T4t.forEach(t),Vqo=r(MSe," \u2014 "),TV=n(MSe,"A",{href:!0});var M4t=s(TV);Xqo=r(M4t,"BloomForSequenceClassification"),M4t.forEach(t),zqo=r(MSe," (BLOOM model)"),MSe.forEach(t),Qqo=i(j),q2=n(j,"LI",{});var ESe=s(q2);tpe=n(ESe,"STRONG",{});var E4t=s(tpe);Wqo=r(E4t,"camembert"),E4t.forEach(t),Hqo=r(ESe," \u2014 "),MV=n(ESe,"A",{href:!0});var C4t=s(MV);Uqo=r(C4t,"CamembertForSequenceClassification"),C4t.forEach(t),Jqo=r(ESe," (CamemBERT model)"),ESe.forEach(t),Yqo=i(j),j2=n(j,"LI",{});var CSe=s(j2);ape=n(CSe,"STRONG",{});var w4t=s(ape);Kqo=r(w4t,"canine"),w4t.forEach(t),Zqo=r(CSe," \u2014 "),EV=n(CSe,"A",{href:!0});var A4t=s(EV);ejo=r(A4t,"CanineForSequenceClassification"),A4t.forEach(t),ojo=r(CSe," (CANINE model)"),CSe.forEach(t),rjo=i(j),D2=n(j,"LI",{});var wSe=s(D2);npe=n(wSe,"STRONG",{});var L4t=s(npe);tjo=r(L4t,"convbert"),L4t.forEach(t),ajo=r(wSe," \u2014 "),CV=n(wSe,"A",{href:!0});var y4t=s(CV);njo=r(y4t,"ConvBertForSequenceClassification"),y4t.forEach(t),sjo=r(wSe," (ConvBERT model)"),wSe.forEach(t),ljo=i(j),G2=n(j,"LI",{});var ASe=s(G2);spe=n(ASe,"STRONG",{});var x4t=s(spe);ijo=r(x4t,"ctrl"),x4t.forEach(t),djo=r(ASe," \u2014 "),wV=n(ASe,"A",{href:!0});var $4t=s(wV);cjo=r($4t,"CTRLForSequenceClassification"),$4t.forEach(t),fjo=r(ASe," (CTRL model)"),ASe.forEach(t),mjo=i(j),O2=n(j,"LI",{});var LSe=s(O2);lpe=n(LSe,"STRONG",{});var k4t=s(lpe);gjo=r(k4t,"data2vec-text"),k4t.forEach(t),hjo=r(LSe," \u2014 "),AV=n(LSe,"A",{href:!0});var S4t=s(AV);pjo=r(S4t,"Data2VecTextForSequenceClassification"),S4t.forEach(t),_jo=r(LSe," (Data2VecText model)"),LSe.forEach(t),ujo=i(j),V2=n(j,"LI",{});var ySe=s(V2);ipe=n(ySe,"STRONG",{});var R4t=s(ipe);bjo=r(R4t,"deberta"),R4t.forEach(t),vjo=r(ySe," \u2014 "),LV=n(ySe,"A",{href:!0});var P4t=s(LV);Fjo=r(P4t,"DebertaForSequenceClassification"),P4t.forEach(t),Tjo=r(ySe," (DeBERTa model)"),ySe.forEach(t),Mjo=i(j),X2=n(j,"LI",{});var xSe=s(X2);dpe=n(xSe,"STRONG",{});var B4t=s(dpe);Ejo=r(B4t,"deberta-v2"),B4t.forEach(t),Cjo=r(xSe," \u2014 "),yV=n(xSe,"A",{href:!0});var I4t=s(yV);wjo=r(I4t,"DebertaV2ForSequenceClassification"),I4t.forEach(t),Ajo=r(xSe," (DeBERTa-v2 model)"),xSe.forEach(t),Ljo=i(j),z2=n(j,"LI",{});var $Se=s(z2);cpe=n($Se,"STRONG",{});var N4t=s(cpe);yjo=r(N4t,"distilbert"),N4t.forEach(t),xjo=r($Se," \u2014 "),xV=n($Se,"A",{href:!0});var q4t=s(xV);$jo=r(q4t,"DistilBertForSequenceClassification"),q4t.forEach(t),kjo=r($Se," (DistilBERT model)"),$Se.forEach(t),Sjo=i(j),Q2=n(j,"LI",{});var kSe=s(Q2);fpe=n(kSe,"STRONG",{});var j4t=s(fpe);Rjo=r(j4t,"electra"),j4t.forEach(t),Pjo=r(kSe," \u2014 "),$V=n(kSe,"A",{href:!0});var D4t=s($V);Bjo=r(D4t,"ElectraForSequenceClassification"),D4t.forEach(t),Ijo=r(kSe," (ELECTRA model)"),kSe.forEach(t),Njo=i(j),W2=n(j,"LI",{});var SSe=s(W2);mpe=n(SSe,"STRONG",{});var G4t=s(mpe);qjo=r(G4t,"flaubert"),G4t.forEach(t),jjo=r(SSe," \u2014 "),kV=n(SSe,"A",{href:!0});var O4t=s(kV);Djo=r(O4t,"FlaubertForSequenceClassification"),O4t.forEach(t),Gjo=r(SSe," (FlauBERT model)"),SSe.forEach(t),Ojo=i(j),H2=n(j,"LI",{});var RSe=s(H2);gpe=n(RSe,"STRONG",{});var V4t=s(gpe);Vjo=r(V4t,"fnet"),V4t.forEach(t),Xjo=r(RSe," \u2014 "),SV=n(RSe,"A",{href:!0});var X4t=s(SV);zjo=r(X4t,"FNetForSequenceClassification"),X4t.forEach(t),Qjo=r(RSe," (FNet model)"),RSe.forEach(t),Wjo=i(j),U2=n(j,"LI",{});var PSe=s(U2);hpe=n(PSe,"STRONG",{});var z4t=s(hpe);Hjo=r(z4t,"funnel"),z4t.forEach(t),Ujo=r(PSe," \u2014 "),RV=n(PSe,"A",{href:!0});var Q4t=s(RV);Jjo=r(Q4t,"FunnelForSequenceClassification"),Q4t.forEach(t),Yjo=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),Kjo=i(j),J2=n(j,"LI",{});var BSe=s(J2);ppe=n(BSe,"STRONG",{});var W4t=s(ppe);Zjo=r(W4t,"gpt2"),W4t.forEach(t),eDo=r(BSe," \u2014 "),PV=n(BSe,"A",{href:!0});var H4t=s(PV);oDo=r(H4t,"GPT2ForSequenceClassification"),H4t.forEach(t),rDo=r(BSe," (OpenAI GPT-2 model)"),BSe.forEach(t),tDo=i(j),Y2=n(j,"LI",{});var ISe=s(Y2);_pe=n(ISe,"STRONG",{});var U4t=s(_pe);aDo=r(U4t,"gpt_neo"),U4t.forEach(t),nDo=r(ISe," \u2014 "),BV=n(ISe,"A",{href:!0});var J4t=s(BV);sDo=r(J4t,"GPTNeoForSequenceClassification"),J4t.forEach(t),lDo=r(ISe," (GPT Neo model)"),ISe.forEach(t),iDo=i(j),K2=n(j,"LI",{});var NSe=s(K2);upe=n(NSe,"STRONG",{});var Y4t=s(upe);dDo=r(Y4t,"gptj"),Y4t.forEach(t),cDo=r(NSe," \u2014 "),IV=n(NSe,"A",{href:!0});var K4t=s(IV);fDo=r(K4t,"GPTJForSequenceClassification"),K4t.forEach(t),mDo=r(NSe," (GPT-J model)"),NSe.forEach(t),gDo=i(j),Z2=n(j,"LI",{});var qSe=s(Z2);bpe=n(qSe,"STRONG",{});var Z4t=s(bpe);hDo=r(Z4t,"ibert"),Z4t.forEach(t),pDo=r(qSe," \u2014 "),NV=n(qSe,"A",{href:!0});var ebt=s(NV);_Do=r(ebt,"IBertForSequenceClassification"),ebt.forEach(t),uDo=r(qSe," (I-BERT model)"),qSe.forEach(t),bDo=i(j),e4=n(j,"LI",{});var jSe=s(e4);vpe=n(jSe,"STRONG",{});var obt=s(vpe);vDo=r(obt,"layoutlm"),obt.forEach(t),FDo=r(jSe," \u2014 "),qV=n(jSe,"A",{href:!0});var rbt=s(qV);TDo=r(rbt,"LayoutLMForSequenceClassification"),rbt.forEach(t),MDo=r(jSe," (LayoutLM model)"),jSe.forEach(t),EDo=i(j),o4=n(j,"LI",{});var DSe=s(o4);Fpe=n(DSe,"STRONG",{});var tbt=s(Fpe);CDo=r(tbt,"layoutlmv2"),tbt.forEach(t),wDo=r(DSe," \u2014 "),jV=n(DSe,"A",{href:!0});var abt=s(jV);ADo=r(abt,"LayoutLMv2ForSequenceClassification"),abt.forEach(t),LDo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),yDo=i(j),r4=n(j,"LI",{});var GSe=s(r4);Tpe=n(GSe,"STRONG",{});var nbt=s(Tpe);xDo=r(nbt,"layoutlmv3"),nbt.forEach(t),$Do=r(GSe," \u2014 "),DV=n(GSe,"A",{href:!0});var sbt=s(DV);kDo=r(sbt,"LayoutLMv3ForSequenceClassification"),sbt.forEach(t),SDo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),RDo=i(j),t4=n(j,"LI",{});var OSe=s(t4);Mpe=n(OSe,"STRONG",{});var lbt=s(Mpe);PDo=r(lbt,"led"),lbt.forEach(t),BDo=r(OSe," \u2014 "),GV=n(OSe,"A",{href:!0});var ibt=s(GV);IDo=r(ibt,"LEDForSequenceClassification"),ibt.forEach(t),NDo=r(OSe," (LED model)"),OSe.forEach(t),qDo=i(j),a4=n(j,"LI",{});var VSe=s(a4);Epe=n(VSe,"STRONG",{});var dbt=s(Epe);jDo=r(dbt,"longformer"),dbt.forEach(t),DDo=r(VSe," \u2014 "),OV=n(VSe,"A",{href:!0});var cbt=s(OV);GDo=r(cbt,"LongformerForSequenceClassification"),cbt.forEach(t),ODo=r(VSe," (Longformer model)"),VSe.forEach(t),VDo=i(j),n4=n(j,"LI",{});var XSe=s(n4);Cpe=n(XSe,"STRONG",{});var fbt=s(Cpe);XDo=r(fbt,"mbart"),fbt.forEach(t),zDo=r(XSe," \u2014 "),VV=n(XSe,"A",{href:!0});var mbt=s(VV);QDo=r(mbt,"MBartForSequenceClassification"),mbt.forEach(t),WDo=r(XSe," (mBART model)"),XSe.forEach(t),HDo=i(j),s4=n(j,"LI",{});var zSe=s(s4);wpe=n(zSe,"STRONG",{});var gbt=s(wpe);UDo=r(gbt,"megatron-bert"),gbt.forEach(t),JDo=r(zSe," \u2014 "),XV=n(zSe,"A",{href:!0});var hbt=s(XV);YDo=r(hbt,"MegatronBertForSequenceClassification"),hbt.forEach(t),KDo=r(zSe," (Megatron-BERT model)"),zSe.forEach(t),ZDo=i(j),l4=n(j,"LI",{});var QSe=s(l4);Ape=n(QSe,"STRONG",{});var pbt=s(Ape);eGo=r(pbt,"mobilebert"),pbt.forEach(t),oGo=r(QSe," \u2014 "),zV=n(QSe,"A",{href:!0});var _bt=s(zV);rGo=r(_bt,"MobileBertForSequenceClassification"),_bt.forEach(t),tGo=r(QSe," (MobileBERT model)"),QSe.forEach(t),aGo=i(j),i4=n(j,"LI",{});var WSe=s(i4);Lpe=n(WSe,"STRONG",{});var ubt=s(Lpe);nGo=r(ubt,"mpnet"),ubt.forEach(t),sGo=r(WSe," \u2014 "),QV=n(WSe,"A",{href:!0});var bbt=s(QV);lGo=r(bbt,"MPNetForSequenceClassification"),bbt.forEach(t),iGo=r(WSe," (MPNet model)"),WSe.forEach(t),dGo=i(j),d4=n(j,"LI",{});var HSe=s(d4);ype=n(HSe,"STRONG",{});var vbt=s(ype);cGo=r(vbt,"nezha"),vbt.forEach(t),fGo=r(HSe," \u2014 "),WV=n(HSe,"A",{href:!0});var Fbt=s(WV);mGo=r(Fbt,"NezhaForSequenceClassification"),Fbt.forEach(t),gGo=r(HSe," (Nezha model)"),HSe.forEach(t),hGo=i(j),c4=n(j,"LI",{});var USe=s(c4);xpe=n(USe,"STRONG",{});var Tbt=s(xpe);pGo=r(Tbt,"nystromformer"),Tbt.forEach(t),_Go=r(USe," \u2014 "),HV=n(USe,"A",{href:!0});var Mbt=s(HV);uGo=r(Mbt,"NystromformerForSequenceClassification"),Mbt.forEach(t),bGo=r(USe," (Nystr\xF6mformer model)"),USe.forEach(t),vGo=i(j),f4=n(j,"LI",{});var JSe=s(f4);$pe=n(JSe,"STRONG",{});var Ebt=s($pe);FGo=r(Ebt,"openai-gpt"),Ebt.forEach(t),TGo=r(JSe," \u2014 "),UV=n(JSe,"A",{href:!0});var Cbt=s(UV);MGo=r(Cbt,"OpenAIGPTForSequenceClassification"),Cbt.forEach(t),EGo=r(JSe," (OpenAI GPT model)"),JSe.forEach(t),CGo=i(j),m4=n(j,"LI",{});var YSe=s(m4);kpe=n(YSe,"STRONG",{});var wbt=s(kpe);wGo=r(wbt,"perceiver"),wbt.forEach(t),AGo=r(YSe," \u2014 "),JV=n(YSe,"A",{href:!0});var Abt=s(JV);LGo=r(Abt,"PerceiverForSequenceClassification"),Abt.forEach(t),yGo=r(YSe," (Perceiver model)"),YSe.forEach(t),xGo=i(j),g4=n(j,"LI",{});var KSe=s(g4);Spe=n(KSe,"STRONG",{});var Lbt=s(Spe);$Go=r(Lbt,"plbart"),Lbt.forEach(t),kGo=r(KSe," \u2014 "),YV=n(KSe,"A",{href:!0});var ybt=s(YV);SGo=r(ybt,"PLBartForSequenceClassification"),ybt.forEach(t),RGo=r(KSe," (PLBart model)"),KSe.forEach(t),PGo=i(j),h4=n(j,"LI",{});var ZSe=s(h4);Rpe=n(ZSe,"STRONG",{});var xbt=s(Rpe);BGo=r(xbt,"qdqbert"),xbt.forEach(t),IGo=r(ZSe," \u2014 "),KV=n(ZSe,"A",{href:!0});var $bt=s(KV);NGo=r($bt,"QDQBertForSequenceClassification"),$bt.forEach(t),qGo=r(ZSe," (QDQBert model)"),ZSe.forEach(t),jGo=i(j),p4=n(j,"LI",{});var eRe=s(p4);Ppe=n(eRe,"STRONG",{});var kbt=s(Ppe);DGo=r(kbt,"reformer"),kbt.forEach(t),GGo=r(eRe," \u2014 "),ZV=n(eRe,"A",{href:!0});var Sbt=s(ZV);OGo=r(Sbt,"ReformerForSequenceClassification"),Sbt.forEach(t),VGo=r(eRe," (Reformer model)"),eRe.forEach(t),XGo=i(j),_4=n(j,"LI",{});var oRe=s(_4);Bpe=n(oRe,"STRONG",{});var Rbt=s(Bpe);zGo=r(Rbt,"rembert"),Rbt.forEach(t),QGo=r(oRe," \u2014 "),eX=n(oRe,"A",{href:!0});var Pbt=s(eX);WGo=r(Pbt,"RemBertForSequenceClassification"),Pbt.forEach(t),HGo=r(oRe," (RemBERT model)"),oRe.forEach(t),UGo=i(j),u4=n(j,"LI",{});var rRe=s(u4);Ipe=n(rRe,"STRONG",{});var Bbt=s(Ipe);JGo=r(Bbt,"roberta"),Bbt.forEach(t),YGo=r(rRe," \u2014 "),oX=n(rRe,"A",{href:!0});var Ibt=s(oX);KGo=r(Ibt,"RobertaForSequenceClassification"),Ibt.forEach(t),ZGo=r(rRe," (RoBERTa model)"),rRe.forEach(t),eOo=i(j),b4=n(j,"LI",{});var tRe=s(b4);Npe=n(tRe,"STRONG",{});var Nbt=s(Npe);oOo=r(Nbt,"roformer"),Nbt.forEach(t),rOo=r(tRe," \u2014 "),rX=n(tRe,"A",{href:!0});var qbt=s(rX);tOo=r(qbt,"RoFormerForSequenceClassification"),qbt.forEach(t),aOo=r(tRe," (RoFormer model)"),tRe.forEach(t),nOo=i(j),v4=n(j,"LI",{});var aRe=s(v4);qpe=n(aRe,"STRONG",{});var jbt=s(qpe);sOo=r(jbt,"squeezebert"),jbt.forEach(t),lOo=r(aRe," \u2014 "),tX=n(aRe,"A",{href:!0});var Dbt=s(tX);iOo=r(Dbt,"SqueezeBertForSequenceClassification"),Dbt.forEach(t),dOo=r(aRe," (SqueezeBERT model)"),aRe.forEach(t),cOo=i(j),F4=n(j,"LI",{});var nRe=s(F4);jpe=n(nRe,"STRONG",{});var Gbt=s(jpe);fOo=r(Gbt,"tapas"),Gbt.forEach(t),mOo=r(nRe," \u2014 "),aX=n(nRe,"A",{href:!0});var Obt=s(aX);gOo=r(Obt,"TapasForSequenceClassification"),Obt.forEach(t),hOo=r(nRe," (TAPAS model)"),nRe.forEach(t),pOo=i(j),T4=n(j,"LI",{});var sRe=s(T4);Dpe=n(sRe,"STRONG",{});var Vbt=s(Dpe);_Oo=r(Vbt,"transfo-xl"),Vbt.forEach(t),uOo=r(sRe," \u2014 "),nX=n(sRe,"A",{href:!0});var Xbt=s(nX);bOo=r(Xbt,"TransfoXLForSequenceClassification"),Xbt.forEach(t),vOo=r(sRe," (Transformer-XL model)"),sRe.forEach(t),FOo=i(j),M4=n(j,"LI",{});var lRe=s(M4);Gpe=n(lRe,"STRONG",{});var zbt=s(Gpe);TOo=r(zbt,"xlm"),zbt.forEach(t),MOo=r(lRe," \u2014 "),sX=n(lRe,"A",{href:!0});var Qbt=s(sX);EOo=r(Qbt,"XLMForSequenceClassification"),Qbt.forEach(t),COo=r(lRe," (XLM model)"),lRe.forEach(t),wOo=i(j),E4=n(j,"LI",{});var iRe=s(E4);Ope=n(iRe,"STRONG",{});var Wbt=s(Ope);AOo=r(Wbt,"xlm-roberta"),Wbt.forEach(t),LOo=r(iRe," \u2014 "),lX=n(iRe,"A",{href:!0});var Hbt=s(lX);yOo=r(Hbt,"XLMRobertaForSequenceClassification"),Hbt.forEach(t),xOo=r(iRe," (XLM-RoBERTa model)"),iRe.forEach(t),$Oo=i(j),C4=n(j,"LI",{});var dRe=s(C4);Vpe=n(dRe,"STRONG",{});var Ubt=s(Vpe);kOo=r(Ubt,"xlm-roberta-xl"),Ubt.forEach(t),SOo=r(dRe," \u2014 "),iX=n(dRe,"A",{href:!0});var Jbt=s(iX);ROo=r(Jbt,"XLMRobertaXLForSequenceClassification"),Jbt.forEach(t),POo=r(dRe," (XLM-RoBERTa-XL model)"),dRe.forEach(t),BOo=i(j),w4=n(j,"LI",{});var cRe=s(w4);Xpe=n(cRe,"STRONG",{});var Ybt=s(Xpe);IOo=r(Ybt,"xlnet"),Ybt.forEach(t),NOo=r(cRe," \u2014 "),dX=n(cRe,"A",{href:!0});var Kbt=s(dX);qOo=r(Kbt,"XLNetForSequenceClassification"),Kbt.forEach(t),jOo=r(cRe," (XLNet model)"),cRe.forEach(t),DOo=i(j),A4=n(j,"LI",{});var fRe=s(A4);zpe=n(fRe,"STRONG",{});var Zbt=s(zpe);GOo=r(Zbt,"yoso"),Zbt.forEach(t),OOo=r(fRe," \u2014 "),cX=n(fRe,"A",{href:!0});var evt=s(cX);VOo=r(evt,"YosoForSequenceClassification"),evt.forEach(t),XOo=r(fRe," (YOSO model)"),fRe.forEach(t),j.forEach(t),zOo=i(ca),L4=n(ca,"P",{});var mRe=s(L4);QOo=r(mRe,"The model is set in evaluation mode by default using "),Qpe=n(mRe,"CODE",{});var ovt=s(Qpe);WOo=r(ovt,"model.eval()"),ovt.forEach(t),HOo=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(mRe,"CODE",{});var rvt=s(Wpe);UOo=r(rvt,"model.train()"),rvt.forEach(t),mRe.forEach(t),JOo=i(ca),T(y4.$$.fragment,ca),ca.forEach(t),al.forEach(t),rVe=i(f),rd=n(f,"H2",{class:!0});var ize=s(rd);x4=n(ize,"A",{id:!0,class:!0,href:!0});var tvt=s(x4);Hpe=n(tvt,"SPAN",{});var avt=s(Hpe);T(Oy.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),YOo=i(ize),Upe=n(ize,"SPAN",{});var nvt=s(Upe);KOo=r(nvt,"AutoModelForMultipleChoice"),nvt.forEach(t),ize.forEach(t),tVe=i(f),Bo=n(f,"DIV",{class:!0});var nl=s(Bo);T(Vy.$$.fragment,nl),ZOo=i(nl),td=n(nl,"P",{});var tre=s(td);eVo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fX=n(tre,"A",{href:!0});var svt=s(fX);oVo=r(svt,"from_pretrained()"),svt.forEach(t),rVo=r(tre," class method or the "),mX=n(tre,"A",{href:!0});var lvt=s(mX);tVo=r(lvt,"from_config()"),lvt.forEach(t),aVo=r(tre,` class
method.`),tre.forEach(t),nVo=i(nl),Xy=n(nl,"P",{});var dze=s(Xy);sVo=r(dze,"This class cannot be instantiated directly using "),Jpe=n(dze,"CODE",{});var ivt=s(Jpe);lVo=r(ivt,"__init__()"),ivt.forEach(t),iVo=r(dze," (throws an error)."),dze.forEach(t),dVo=i(nl),mt=n(nl,"DIV",{class:!0});var o6=s(mt);T(zy.$$.fragment,o6),cVo=i(o6),Ype=n(o6,"P",{});var dvt=s(Ype);fVo=r(dvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dvt.forEach(t),mVo=i(o6),ad=n(o6,"P",{});var are=s(ad);gVo=r(are,`Note:
Loading a model from its configuration file does `),Kpe=n(are,"STRONG",{});var cvt=s(Kpe);hVo=r(cvt,"not"),cvt.forEach(t),pVo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(are,"A",{href:!0});var fvt=s(gX);_Vo=r(fvt,"from_pretrained()"),fvt.forEach(t),uVo=r(are," to load the model weights."),are.forEach(t),bVo=i(o6),T($4.$$.fragment,o6),o6.forEach(t),vVo=i(nl),ro=n(nl,"DIV",{class:!0});var fa=s(ro);T(Qy.$$.fragment,fa),FVo=i(fa),Zpe=n(fa,"P",{});var mvt=s(Zpe);TVo=r(mvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mvt.forEach(t),MVo=i(fa),Da=n(fa,"P",{});var r6=s(Da);EVo=r(r6,"The model class to instantiate is selected based on the "),e_e=n(r6,"CODE",{});var gvt=s(e_e);CVo=r(gvt,"model_type"),gvt.forEach(t),wVo=r(r6,` property of the config object (either
passed as an argument or loaded from `),o_e=n(r6,"CODE",{});var hvt=s(o_e);AVo=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),LVo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(r6,"CODE",{});var pvt=s(r_e);yVo=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),xVo=r(r6,":"),r6.forEach(t),$Vo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);k4=n(ee,"LI",{});var gRe=s(k4);t_e=n(gRe,"STRONG",{});var _vt=s(t_e);kVo=r(_vt,"albert"),_vt.forEach(t),SVo=r(gRe," \u2014 "),hX=n(gRe,"A",{href:!0});var uvt=s(hX);RVo=r(uvt,"AlbertForMultipleChoice"),uvt.forEach(t),PVo=r(gRe," (ALBERT model)"),gRe.forEach(t),BVo=i(ee),S4=n(ee,"LI",{});var hRe=s(S4);a_e=n(hRe,"STRONG",{});var bvt=s(a_e);IVo=r(bvt,"bert"),bvt.forEach(t),NVo=r(hRe," \u2014 "),pX=n(hRe,"A",{href:!0});var vvt=s(pX);qVo=r(vvt,"BertForMultipleChoice"),vvt.forEach(t),jVo=r(hRe," (BERT model)"),hRe.forEach(t),DVo=i(ee),R4=n(ee,"LI",{});var pRe=s(R4);n_e=n(pRe,"STRONG",{});var Fvt=s(n_e);GVo=r(Fvt,"big_bird"),Fvt.forEach(t),OVo=r(pRe," \u2014 "),_X=n(pRe,"A",{href:!0});var Tvt=s(_X);VVo=r(Tvt,"BigBirdForMultipleChoice"),Tvt.forEach(t),XVo=r(pRe," (BigBird model)"),pRe.forEach(t),zVo=i(ee),P4=n(ee,"LI",{});var _Re=s(P4);s_e=n(_Re,"STRONG",{});var Mvt=s(s_e);QVo=r(Mvt,"camembert"),Mvt.forEach(t),WVo=r(_Re," \u2014 "),uX=n(_Re,"A",{href:!0});var Evt=s(uX);HVo=r(Evt,"CamembertForMultipleChoice"),Evt.forEach(t),UVo=r(_Re," (CamemBERT model)"),_Re.forEach(t),JVo=i(ee),B4=n(ee,"LI",{});var uRe=s(B4);l_e=n(uRe,"STRONG",{});var Cvt=s(l_e);YVo=r(Cvt,"canine"),Cvt.forEach(t),KVo=r(uRe," \u2014 "),bX=n(uRe,"A",{href:!0});var wvt=s(bX);ZVo=r(wvt,"CanineForMultipleChoice"),wvt.forEach(t),eXo=r(uRe," (CANINE model)"),uRe.forEach(t),oXo=i(ee),I4=n(ee,"LI",{});var bRe=s(I4);i_e=n(bRe,"STRONG",{});var Avt=s(i_e);rXo=r(Avt,"convbert"),Avt.forEach(t),tXo=r(bRe," \u2014 "),vX=n(bRe,"A",{href:!0});var Lvt=s(vX);aXo=r(Lvt,"ConvBertForMultipleChoice"),Lvt.forEach(t),nXo=r(bRe," (ConvBERT model)"),bRe.forEach(t),sXo=i(ee),N4=n(ee,"LI",{});var vRe=s(N4);d_e=n(vRe,"STRONG",{});var yvt=s(d_e);lXo=r(yvt,"data2vec-text"),yvt.forEach(t),iXo=r(vRe," \u2014 "),FX=n(vRe,"A",{href:!0});var xvt=s(FX);dXo=r(xvt,"Data2VecTextForMultipleChoice"),xvt.forEach(t),cXo=r(vRe," (Data2VecText model)"),vRe.forEach(t),fXo=i(ee),q4=n(ee,"LI",{});var FRe=s(q4);c_e=n(FRe,"STRONG",{});var $vt=s(c_e);mXo=r($vt,"deberta-v2"),$vt.forEach(t),gXo=r(FRe," \u2014 "),TX=n(FRe,"A",{href:!0});var kvt=s(TX);hXo=r(kvt,"DebertaV2ForMultipleChoice"),kvt.forEach(t),pXo=r(FRe," (DeBERTa-v2 model)"),FRe.forEach(t),_Xo=i(ee),j4=n(ee,"LI",{});var TRe=s(j4);f_e=n(TRe,"STRONG",{});var Svt=s(f_e);uXo=r(Svt,"distilbert"),Svt.forEach(t),bXo=r(TRe," \u2014 "),MX=n(TRe,"A",{href:!0});var Rvt=s(MX);vXo=r(Rvt,"DistilBertForMultipleChoice"),Rvt.forEach(t),FXo=r(TRe," (DistilBERT model)"),TRe.forEach(t),TXo=i(ee),D4=n(ee,"LI",{});var MRe=s(D4);m_e=n(MRe,"STRONG",{});var Pvt=s(m_e);MXo=r(Pvt,"electra"),Pvt.forEach(t),EXo=r(MRe," \u2014 "),EX=n(MRe,"A",{href:!0});var Bvt=s(EX);CXo=r(Bvt,"ElectraForMultipleChoice"),Bvt.forEach(t),wXo=r(MRe," (ELECTRA model)"),MRe.forEach(t),AXo=i(ee),G4=n(ee,"LI",{});var ERe=s(G4);g_e=n(ERe,"STRONG",{});var Ivt=s(g_e);LXo=r(Ivt,"flaubert"),Ivt.forEach(t),yXo=r(ERe," \u2014 "),CX=n(ERe,"A",{href:!0});var Nvt=s(CX);xXo=r(Nvt,"FlaubertForMultipleChoice"),Nvt.forEach(t),$Xo=r(ERe," (FlauBERT model)"),ERe.forEach(t),kXo=i(ee),O4=n(ee,"LI",{});var CRe=s(O4);h_e=n(CRe,"STRONG",{});var qvt=s(h_e);SXo=r(qvt,"fnet"),qvt.forEach(t),RXo=r(CRe," \u2014 "),wX=n(CRe,"A",{href:!0});var jvt=s(wX);PXo=r(jvt,"FNetForMultipleChoice"),jvt.forEach(t),BXo=r(CRe," (FNet model)"),CRe.forEach(t),IXo=i(ee),V4=n(ee,"LI",{});var wRe=s(V4);p_e=n(wRe,"STRONG",{});var Dvt=s(p_e);NXo=r(Dvt,"funnel"),Dvt.forEach(t),qXo=r(wRe," \u2014 "),AX=n(wRe,"A",{href:!0});var Gvt=s(AX);jXo=r(Gvt,"FunnelForMultipleChoice"),Gvt.forEach(t),DXo=r(wRe," (Funnel Transformer model)"),wRe.forEach(t),GXo=i(ee),X4=n(ee,"LI",{});var ARe=s(X4);__e=n(ARe,"STRONG",{});var Ovt=s(__e);OXo=r(Ovt,"ibert"),Ovt.forEach(t),VXo=r(ARe," \u2014 "),LX=n(ARe,"A",{href:!0});var Vvt=s(LX);XXo=r(Vvt,"IBertForMultipleChoice"),Vvt.forEach(t),zXo=r(ARe," (I-BERT model)"),ARe.forEach(t),QXo=i(ee),z4=n(ee,"LI",{});var LRe=s(z4);u_e=n(LRe,"STRONG",{});var Xvt=s(u_e);WXo=r(Xvt,"longformer"),Xvt.forEach(t),HXo=r(LRe," \u2014 "),yX=n(LRe,"A",{href:!0});var zvt=s(yX);UXo=r(zvt,"LongformerForMultipleChoice"),zvt.forEach(t),JXo=r(LRe," (Longformer model)"),LRe.forEach(t),YXo=i(ee),Q4=n(ee,"LI",{});var yRe=s(Q4);b_e=n(yRe,"STRONG",{});var Qvt=s(b_e);KXo=r(Qvt,"megatron-bert"),Qvt.forEach(t),ZXo=r(yRe," \u2014 "),xX=n(yRe,"A",{href:!0});var Wvt=s(xX);ezo=r(Wvt,"MegatronBertForMultipleChoice"),Wvt.forEach(t),ozo=r(yRe," (Megatron-BERT model)"),yRe.forEach(t),rzo=i(ee),W4=n(ee,"LI",{});var xRe=s(W4);v_e=n(xRe,"STRONG",{});var Hvt=s(v_e);tzo=r(Hvt,"mobilebert"),Hvt.forEach(t),azo=r(xRe," \u2014 "),$X=n(xRe,"A",{href:!0});var Uvt=s($X);nzo=r(Uvt,"MobileBertForMultipleChoice"),Uvt.forEach(t),szo=r(xRe," (MobileBERT model)"),xRe.forEach(t),lzo=i(ee),H4=n(ee,"LI",{});var $Re=s(H4);F_e=n($Re,"STRONG",{});var Jvt=s(F_e);izo=r(Jvt,"mpnet"),Jvt.forEach(t),dzo=r($Re," \u2014 "),kX=n($Re,"A",{href:!0});var Yvt=s(kX);czo=r(Yvt,"MPNetForMultipleChoice"),Yvt.forEach(t),fzo=r($Re," (MPNet model)"),$Re.forEach(t),mzo=i(ee),U4=n(ee,"LI",{});var kRe=s(U4);T_e=n(kRe,"STRONG",{});var Kvt=s(T_e);gzo=r(Kvt,"nezha"),Kvt.forEach(t),hzo=r(kRe," \u2014 "),SX=n(kRe,"A",{href:!0});var Zvt=s(SX);pzo=r(Zvt,"NezhaForMultipleChoice"),Zvt.forEach(t),_zo=r(kRe," (Nezha model)"),kRe.forEach(t),uzo=i(ee),J4=n(ee,"LI",{});var SRe=s(J4);M_e=n(SRe,"STRONG",{});var eFt=s(M_e);bzo=r(eFt,"nystromformer"),eFt.forEach(t),vzo=r(SRe," \u2014 "),RX=n(SRe,"A",{href:!0});var oFt=s(RX);Fzo=r(oFt,"NystromformerForMultipleChoice"),oFt.forEach(t),Tzo=r(SRe," (Nystr\xF6mformer model)"),SRe.forEach(t),Mzo=i(ee),Y4=n(ee,"LI",{});var RRe=s(Y4);E_e=n(RRe,"STRONG",{});var rFt=s(E_e);Ezo=r(rFt,"qdqbert"),rFt.forEach(t),Czo=r(RRe," \u2014 "),PX=n(RRe,"A",{href:!0});var tFt=s(PX);wzo=r(tFt,"QDQBertForMultipleChoice"),tFt.forEach(t),Azo=r(RRe," (QDQBert model)"),RRe.forEach(t),Lzo=i(ee),K4=n(ee,"LI",{});var PRe=s(K4);C_e=n(PRe,"STRONG",{});var aFt=s(C_e);yzo=r(aFt,"rembert"),aFt.forEach(t),xzo=r(PRe," \u2014 "),BX=n(PRe,"A",{href:!0});var nFt=s(BX);$zo=r(nFt,"RemBertForMultipleChoice"),nFt.forEach(t),kzo=r(PRe," (RemBERT model)"),PRe.forEach(t),Szo=i(ee),Z4=n(ee,"LI",{});var BRe=s(Z4);w_e=n(BRe,"STRONG",{});var sFt=s(w_e);Rzo=r(sFt,"roberta"),sFt.forEach(t),Pzo=r(BRe," \u2014 "),IX=n(BRe,"A",{href:!0});var lFt=s(IX);Bzo=r(lFt,"RobertaForMultipleChoice"),lFt.forEach(t),Izo=r(BRe," (RoBERTa model)"),BRe.forEach(t),Nzo=i(ee),eb=n(ee,"LI",{});var IRe=s(eb);A_e=n(IRe,"STRONG",{});var iFt=s(A_e);qzo=r(iFt,"roformer"),iFt.forEach(t),jzo=r(IRe," \u2014 "),NX=n(IRe,"A",{href:!0});var dFt=s(NX);Dzo=r(dFt,"RoFormerForMultipleChoice"),dFt.forEach(t),Gzo=r(IRe," (RoFormer model)"),IRe.forEach(t),Ozo=i(ee),ob=n(ee,"LI",{});var NRe=s(ob);L_e=n(NRe,"STRONG",{});var cFt=s(L_e);Vzo=r(cFt,"squeezebert"),cFt.forEach(t),Xzo=r(NRe," \u2014 "),qX=n(NRe,"A",{href:!0});var fFt=s(qX);zzo=r(fFt,"SqueezeBertForMultipleChoice"),fFt.forEach(t),Qzo=r(NRe," (SqueezeBERT model)"),NRe.forEach(t),Wzo=i(ee),rb=n(ee,"LI",{});var qRe=s(rb);y_e=n(qRe,"STRONG",{});var mFt=s(y_e);Hzo=r(mFt,"xlm"),mFt.forEach(t),Uzo=r(qRe," \u2014 "),jX=n(qRe,"A",{href:!0});var gFt=s(jX);Jzo=r(gFt,"XLMForMultipleChoice"),gFt.forEach(t),Yzo=r(qRe," (XLM model)"),qRe.forEach(t),Kzo=i(ee),tb=n(ee,"LI",{});var jRe=s(tb);x_e=n(jRe,"STRONG",{});var hFt=s(x_e);Zzo=r(hFt,"xlm-roberta"),hFt.forEach(t),eQo=r(jRe," \u2014 "),DX=n(jRe,"A",{href:!0});var pFt=s(DX);oQo=r(pFt,"XLMRobertaForMultipleChoice"),pFt.forEach(t),rQo=r(jRe," (XLM-RoBERTa model)"),jRe.forEach(t),tQo=i(ee),ab=n(ee,"LI",{});var DRe=s(ab);$_e=n(DRe,"STRONG",{});var _Ft=s($_e);aQo=r(_Ft,"xlm-roberta-xl"),_Ft.forEach(t),nQo=r(DRe," \u2014 "),GX=n(DRe,"A",{href:!0});var uFt=s(GX);sQo=r(uFt,"XLMRobertaXLForMultipleChoice"),uFt.forEach(t),lQo=r(DRe," (XLM-RoBERTa-XL model)"),DRe.forEach(t),iQo=i(ee),nb=n(ee,"LI",{});var GRe=s(nb);k_e=n(GRe,"STRONG",{});var bFt=s(k_e);dQo=r(bFt,"xlnet"),bFt.forEach(t),cQo=r(GRe," \u2014 "),OX=n(GRe,"A",{href:!0});var vFt=s(OX);fQo=r(vFt,"XLNetForMultipleChoice"),vFt.forEach(t),mQo=r(GRe," (XLNet model)"),GRe.forEach(t),gQo=i(ee),sb=n(ee,"LI",{});var ORe=s(sb);S_e=n(ORe,"STRONG",{});var FFt=s(S_e);hQo=r(FFt,"yoso"),FFt.forEach(t),pQo=r(ORe," \u2014 "),VX=n(ORe,"A",{href:!0});var TFt=s(VX);_Qo=r(TFt,"YosoForMultipleChoice"),TFt.forEach(t),uQo=r(ORe," (YOSO model)"),ORe.forEach(t),ee.forEach(t),bQo=i(fa),lb=n(fa,"P",{});var VRe=s(lb);vQo=r(VRe,"The model is set in evaluation mode by default using "),R_e=n(VRe,"CODE",{});var MFt=s(R_e);FQo=r(MFt,"model.eval()"),MFt.forEach(t),TQo=r(VRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(VRe,"CODE",{});var EFt=s(P_e);MQo=r(EFt,"model.train()"),EFt.forEach(t),VRe.forEach(t),EQo=i(fa),T(ib.$$.fragment,fa),fa.forEach(t),nl.forEach(t),aVe=i(f),nd=n(f,"H2",{class:!0});var cze=s(nd);db=n(cze,"A",{id:!0,class:!0,href:!0});var CFt=s(db);B_e=n(CFt,"SPAN",{});var wFt=s(B_e);T(Wy.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),CQo=i(cze),I_e=n(cze,"SPAN",{});var AFt=s(I_e);wQo=r(AFt,"AutoModelForNextSentencePrediction"),AFt.forEach(t),cze.forEach(t),nVe=i(f),Io=n(f,"DIV",{class:!0});var sl=s(Io);T(Hy.$$.fragment,sl),AQo=i(sl),sd=n(sl,"P",{});var nre=s(sd);LQo=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XX=n(nre,"A",{href:!0});var LFt=s(XX);yQo=r(LFt,"from_pretrained()"),LFt.forEach(t),xQo=r(nre," class method or the "),zX=n(nre,"A",{href:!0});var yFt=s(zX);$Qo=r(yFt,"from_config()"),yFt.forEach(t),kQo=r(nre,` class
method.`),nre.forEach(t),SQo=i(sl),Uy=n(sl,"P",{});var fze=s(Uy);RQo=r(fze,"This class cannot be instantiated directly using "),N_e=n(fze,"CODE",{});var xFt=s(N_e);PQo=r(xFt,"__init__()"),xFt.forEach(t),BQo=r(fze," (throws an error)."),fze.forEach(t),IQo=i(sl),gt=n(sl,"DIV",{class:!0});var t6=s(gt);T(Jy.$$.fragment,t6),NQo=i(t6),q_e=n(t6,"P",{});var $Ft=s(q_e);qQo=r($Ft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Ft.forEach(t),jQo=i(t6),ld=n(t6,"P",{});var sre=s(ld);DQo=r(sre,`Note:
Loading a model from its configuration file does `),j_e=n(sre,"STRONG",{});var kFt=s(j_e);GQo=r(kFt,"not"),kFt.forEach(t),OQo=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(sre,"A",{href:!0});var SFt=s(QX);VQo=r(SFt,"from_pretrained()"),SFt.forEach(t),XQo=r(sre," to load the model weights."),sre.forEach(t),zQo=i(t6),T(cb.$$.fragment,t6),t6.forEach(t),QQo=i(sl),to=n(sl,"DIV",{class:!0});var ma=s(to);T(Yy.$$.fragment,ma),WQo=i(ma),D_e=n(ma,"P",{});var RFt=s(D_e);HQo=r(RFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RFt.forEach(t),UQo=i(ma),Ga=n(ma,"P",{});var a6=s(Ga);JQo=r(a6,"The model class to instantiate is selected based on the "),G_e=n(a6,"CODE",{});var PFt=s(G_e);YQo=r(PFt,"model_type"),PFt.forEach(t),KQo=r(a6,` property of the config object (either
passed as an argument or loaded from `),O_e=n(a6,"CODE",{});var BFt=s(O_e);ZQo=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),eWo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(a6,"CODE",{});var IFt=s(V_e);oWo=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),rWo=r(a6,":"),a6.forEach(t),tWo=i(ma),No=n(ma,"UL",{});var ga=s(No);fb=n(ga,"LI",{});var XRe=s(fb);X_e=n(XRe,"STRONG",{});var NFt=s(X_e);aWo=r(NFt,"bert"),NFt.forEach(t),nWo=r(XRe," \u2014 "),WX=n(XRe,"A",{href:!0});var qFt=s(WX);sWo=r(qFt,"BertForNextSentencePrediction"),qFt.forEach(t),lWo=r(XRe," (BERT model)"),XRe.forEach(t),iWo=i(ga),mb=n(ga,"LI",{});var zRe=s(mb);z_e=n(zRe,"STRONG",{});var jFt=s(z_e);dWo=r(jFt,"fnet"),jFt.forEach(t),cWo=r(zRe," \u2014 "),HX=n(zRe,"A",{href:!0});var DFt=s(HX);fWo=r(DFt,"FNetForNextSentencePrediction"),DFt.forEach(t),mWo=r(zRe," (FNet model)"),zRe.forEach(t),gWo=i(ga),gb=n(ga,"LI",{});var QRe=s(gb);Q_e=n(QRe,"STRONG",{});var GFt=s(Q_e);hWo=r(GFt,"megatron-bert"),GFt.forEach(t),pWo=r(QRe," \u2014 "),UX=n(QRe,"A",{href:!0});var OFt=s(UX);_Wo=r(OFt,"MegatronBertForNextSentencePrediction"),OFt.forEach(t),uWo=r(QRe," (Megatron-BERT model)"),QRe.forEach(t),bWo=i(ga),hb=n(ga,"LI",{});var WRe=s(hb);W_e=n(WRe,"STRONG",{});var VFt=s(W_e);vWo=r(VFt,"mobilebert"),VFt.forEach(t),FWo=r(WRe," \u2014 "),JX=n(WRe,"A",{href:!0});var XFt=s(JX);TWo=r(XFt,"MobileBertForNextSentencePrediction"),XFt.forEach(t),MWo=r(WRe," (MobileBERT model)"),WRe.forEach(t),EWo=i(ga),pb=n(ga,"LI",{});var HRe=s(pb);H_e=n(HRe,"STRONG",{});var zFt=s(H_e);CWo=r(zFt,"nezha"),zFt.forEach(t),wWo=r(HRe," \u2014 "),YX=n(HRe,"A",{href:!0});var QFt=s(YX);AWo=r(QFt,"NezhaForNextSentencePrediction"),QFt.forEach(t),LWo=r(HRe," (Nezha model)"),HRe.forEach(t),yWo=i(ga),_b=n(ga,"LI",{});var URe=s(_b);U_e=n(URe,"STRONG",{});var WFt=s(U_e);xWo=r(WFt,"qdqbert"),WFt.forEach(t),$Wo=r(URe," \u2014 "),KX=n(URe,"A",{href:!0});var HFt=s(KX);kWo=r(HFt,"QDQBertForNextSentencePrediction"),HFt.forEach(t),SWo=r(URe," (QDQBert model)"),URe.forEach(t),ga.forEach(t),RWo=i(ma),ub=n(ma,"P",{});var JRe=s(ub);PWo=r(JRe,"The model is set in evaluation mode by default using "),J_e=n(JRe,"CODE",{});var UFt=s(J_e);BWo=r(UFt,"model.eval()"),UFt.forEach(t),IWo=r(JRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(JRe,"CODE",{});var JFt=s(Y_e);NWo=r(JFt,"model.train()"),JFt.forEach(t),JRe.forEach(t),qWo=i(ma),T(bb.$$.fragment,ma),ma.forEach(t),sl.forEach(t),sVe=i(f),id=n(f,"H2",{class:!0});var mze=s(id);vb=n(mze,"A",{id:!0,class:!0,href:!0});var YFt=s(vb);K_e=n(YFt,"SPAN",{});var KFt=s(K_e);T(Ky.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),jWo=i(mze),Z_e=n(mze,"SPAN",{});var ZFt=s(Z_e);DWo=r(ZFt,"AutoModelForTokenClassification"),ZFt.forEach(t),mze.forEach(t),lVe=i(f),qo=n(f,"DIV",{class:!0});var ll=s(qo);T(Zy.$$.fragment,ll),GWo=i(ll),dd=n(ll,"P",{});var lre=s(dd);OWo=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZX=n(lre,"A",{href:!0});var eTt=s(ZX);VWo=r(eTt,"from_pretrained()"),eTt.forEach(t),XWo=r(lre," class method or the "),ez=n(lre,"A",{href:!0});var oTt=s(ez);zWo=r(oTt,"from_config()"),oTt.forEach(t),QWo=r(lre,` class
method.`),lre.forEach(t),WWo=i(ll),e8=n(ll,"P",{});var gze=s(e8);HWo=r(gze,"This class cannot be instantiated directly using "),eue=n(gze,"CODE",{});var rTt=s(eue);UWo=r(rTt,"__init__()"),rTt.forEach(t),JWo=r(gze," (throws an error)."),gze.forEach(t),YWo=i(ll),ht=n(ll,"DIV",{class:!0});var n6=s(ht);T(o8.$$.fragment,n6),KWo=i(n6),oue=n(n6,"P",{});var tTt=s(oue);ZWo=r(tTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tTt.forEach(t),eHo=i(n6),cd=n(n6,"P",{});var ire=s(cd);oHo=r(ire,`Note:
Loading a model from its configuration file does `),rue=n(ire,"STRONG",{});var aTt=s(rue);rHo=r(aTt,"not"),aTt.forEach(t),tHo=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(ire,"A",{href:!0});var nTt=s(oz);aHo=r(nTt,"from_pretrained()"),nTt.forEach(t),nHo=r(ire," to load the model weights."),ire.forEach(t),sHo=i(n6),T(Fb.$$.fragment,n6),n6.forEach(t),lHo=i(ll),ao=n(ll,"DIV",{class:!0});var ha=s(ao);T(r8.$$.fragment,ha),iHo=i(ha),tue=n(ha,"P",{});var sTt=s(tue);dHo=r(sTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sTt.forEach(t),cHo=i(ha),Oa=n(ha,"P",{});var s6=s(Oa);fHo=r(s6,"The model class to instantiate is selected based on the "),aue=n(s6,"CODE",{});var lTt=s(aue);mHo=r(lTt,"model_type"),lTt.forEach(t),gHo=r(s6,` property of the config object (either
passed as an argument or loaded from `),nue=n(s6,"CODE",{});var iTt=s(nue);hHo=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),pHo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(s6,"CODE",{});var dTt=s(sue);_Ho=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),uHo=r(s6,":"),s6.forEach(t),bHo=i(ha),H=n(ha,"UL",{});var J=s(H);Tb=n(J,"LI",{});var YRe=s(Tb);lue=n(YRe,"STRONG",{});var cTt=s(lue);vHo=r(cTt,"albert"),cTt.forEach(t),FHo=r(YRe," \u2014 "),rz=n(YRe,"A",{href:!0});var fTt=s(rz);THo=r(fTt,"AlbertForTokenClassification"),fTt.forEach(t),MHo=r(YRe," (ALBERT model)"),YRe.forEach(t),EHo=i(J),Mb=n(J,"LI",{});var KRe=s(Mb);iue=n(KRe,"STRONG",{});var mTt=s(iue);CHo=r(mTt,"bert"),mTt.forEach(t),wHo=r(KRe," \u2014 "),tz=n(KRe,"A",{href:!0});var gTt=s(tz);AHo=r(gTt,"BertForTokenClassification"),gTt.forEach(t),LHo=r(KRe," (BERT model)"),KRe.forEach(t),yHo=i(J),Eb=n(J,"LI",{});var ZRe=s(Eb);due=n(ZRe,"STRONG",{});var hTt=s(due);xHo=r(hTt,"big_bird"),hTt.forEach(t),$Ho=r(ZRe," \u2014 "),az=n(ZRe,"A",{href:!0});var pTt=s(az);kHo=r(pTt,"BigBirdForTokenClassification"),pTt.forEach(t),SHo=r(ZRe," (BigBird model)"),ZRe.forEach(t),RHo=i(J),Cb=n(J,"LI",{});var ePe=s(Cb);cue=n(ePe,"STRONG",{});var _Tt=s(cue);PHo=r(_Tt,"bloom"),_Tt.forEach(t),BHo=r(ePe," \u2014 "),nz=n(ePe,"A",{href:!0});var uTt=s(nz);IHo=r(uTt,"BloomForTokenClassification"),uTt.forEach(t),NHo=r(ePe," (BLOOM model)"),ePe.forEach(t),qHo=i(J),wb=n(J,"LI",{});var oPe=s(wb);fue=n(oPe,"STRONG",{});var bTt=s(fue);jHo=r(bTt,"camembert"),bTt.forEach(t),DHo=r(oPe," \u2014 "),sz=n(oPe,"A",{href:!0});var vTt=s(sz);GHo=r(vTt,"CamembertForTokenClassification"),vTt.forEach(t),OHo=r(oPe," (CamemBERT model)"),oPe.forEach(t),VHo=i(J),Ab=n(J,"LI",{});var rPe=s(Ab);mue=n(rPe,"STRONG",{});var FTt=s(mue);XHo=r(FTt,"canine"),FTt.forEach(t),zHo=r(rPe," \u2014 "),lz=n(rPe,"A",{href:!0});var TTt=s(lz);QHo=r(TTt,"CanineForTokenClassification"),TTt.forEach(t),WHo=r(rPe," (CANINE model)"),rPe.forEach(t),HHo=i(J),Lb=n(J,"LI",{});var tPe=s(Lb);gue=n(tPe,"STRONG",{});var MTt=s(gue);UHo=r(MTt,"convbert"),MTt.forEach(t),JHo=r(tPe," \u2014 "),iz=n(tPe,"A",{href:!0});var ETt=s(iz);YHo=r(ETt,"ConvBertForTokenClassification"),ETt.forEach(t),KHo=r(tPe," (ConvBERT model)"),tPe.forEach(t),ZHo=i(J),yb=n(J,"LI",{});var aPe=s(yb);hue=n(aPe,"STRONG",{});var CTt=s(hue);eUo=r(CTt,"data2vec-text"),CTt.forEach(t),oUo=r(aPe," \u2014 "),dz=n(aPe,"A",{href:!0});var wTt=s(dz);rUo=r(wTt,"Data2VecTextForTokenClassification"),wTt.forEach(t),tUo=r(aPe," (Data2VecText model)"),aPe.forEach(t),aUo=i(J),xb=n(J,"LI",{});var nPe=s(xb);pue=n(nPe,"STRONG",{});var ATt=s(pue);nUo=r(ATt,"deberta"),ATt.forEach(t),sUo=r(nPe," \u2014 "),cz=n(nPe,"A",{href:!0});var LTt=s(cz);lUo=r(LTt,"DebertaForTokenClassification"),LTt.forEach(t),iUo=r(nPe," (DeBERTa model)"),nPe.forEach(t),dUo=i(J),$b=n(J,"LI",{});var sPe=s($b);_ue=n(sPe,"STRONG",{});var yTt=s(_ue);cUo=r(yTt,"deberta-v2"),yTt.forEach(t),fUo=r(sPe," \u2014 "),fz=n(sPe,"A",{href:!0});var xTt=s(fz);mUo=r(xTt,"DebertaV2ForTokenClassification"),xTt.forEach(t),gUo=r(sPe," (DeBERTa-v2 model)"),sPe.forEach(t),hUo=i(J),kb=n(J,"LI",{});var lPe=s(kb);uue=n(lPe,"STRONG",{});var $Tt=s(uue);pUo=r($Tt,"distilbert"),$Tt.forEach(t),_Uo=r(lPe," \u2014 "),mz=n(lPe,"A",{href:!0});var kTt=s(mz);uUo=r(kTt,"DistilBertForTokenClassification"),kTt.forEach(t),bUo=r(lPe," (DistilBERT model)"),lPe.forEach(t),vUo=i(J),Sb=n(J,"LI",{});var iPe=s(Sb);bue=n(iPe,"STRONG",{});var STt=s(bue);FUo=r(STt,"electra"),STt.forEach(t),TUo=r(iPe," \u2014 "),gz=n(iPe,"A",{href:!0});var RTt=s(gz);MUo=r(RTt,"ElectraForTokenClassification"),RTt.forEach(t),EUo=r(iPe," (ELECTRA model)"),iPe.forEach(t),CUo=i(J),Rb=n(J,"LI",{});var dPe=s(Rb);vue=n(dPe,"STRONG",{});var PTt=s(vue);wUo=r(PTt,"flaubert"),PTt.forEach(t),AUo=r(dPe," \u2014 "),hz=n(dPe,"A",{href:!0});var BTt=s(hz);LUo=r(BTt,"FlaubertForTokenClassification"),BTt.forEach(t),yUo=r(dPe," (FlauBERT model)"),dPe.forEach(t),xUo=i(J),Pb=n(J,"LI",{});var cPe=s(Pb);Fue=n(cPe,"STRONG",{});var ITt=s(Fue);$Uo=r(ITt,"fnet"),ITt.forEach(t),kUo=r(cPe," \u2014 "),pz=n(cPe,"A",{href:!0});var NTt=s(pz);SUo=r(NTt,"FNetForTokenClassification"),NTt.forEach(t),RUo=r(cPe," (FNet model)"),cPe.forEach(t),PUo=i(J),Bb=n(J,"LI",{});var fPe=s(Bb);Tue=n(fPe,"STRONG",{});var qTt=s(Tue);BUo=r(qTt,"funnel"),qTt.forEach(t),IUo=r(fPe," \u2014 "),_z=n(fPe,"A",{href:!0});var jTt=s(_z);NUo=r(jTt,"FunnelForTokenClassification"),jTt.forEach(t),qUo=r(fPe," (Funnel Transformer model)"),fPe.forEach(t),jUo=i(J),Ib=n(J,"LI",{});var mPe=s(Ib);Mue=n(mPe,"STRONG",{});var DTt=s(Mue);DUo=r(DTt,"gpt2"),DTt.forEach(t),GUo=r(mPe," \u2014 "),uz=n(mPe,"A",{href:!0});var GTt=s(uz);OUo=r(GTt,"GPT2ForTokenClassification"),GTt.forEach(t),VUo=r(mPe," (OpenAI GPT-2 model)"),mPe.forEach(t),XUo=i(J),Nb=n(J,"LI",{});var gPe=s(Nb);Eue=n(gPe,"STRONG",{});var OTt=s(Eue);zUo=r(OTt,"ibert"),OTt.forEach(t),QUo=r(gPe," \u2014 "),bz=n(gPe,"A",{href:!0});var VTt=s(bz);WUo=r(VTt,"IBertForTokenClassification"),VTt.forEach(t),HUo=r(gPe," (I-BERT model)"),gPe.forEach(t),UUo=i(J),qb=n(J,"LI",{});var hPe=s(qb);Cue=n(hPe,"STRONG",{});var XTt=s(Cue);JUo=r(XTt,"layoutlm"),XTt.forEach(t),YUo=r(hPe," \u2014 "),vz=n(hPe,"A",{href:!0});var zTt=s(vz);KUo=r(zTt,"LayoutLMForTokenClassification"),zTt.forEach(t),ZUo=r(hPe," (LayoutLM model)"),hPe.forEach(t),eJo=i(J),jb=n(J,"LI",{});var pPe=s(jb);wue=n(pPe,"STRONG",{});var QTt=s(wue);oJo=r(QTt,"layoutlmv2"),QTt.forEach(t),rJo=r(pPe," \u2014 "),Fz=n(pPe,"A",{href:!0});var WTt=s(Fz);tJo=r(WTt,"LayoutLMv2ForTokenClassification"),WTt.forEach(t),aJo=r(pPe," (LayoutLMv2 model)"),pPe.forEach(t),nJo=i(J),Db=n(J,"LI",{});var _Pe=s(Db);Aue=n(_Pe,"STRONG",{});var HTt=s(Aue);sJo=r(HTt,"layoutlmv3"),HTt.forEach(t),lJo=r(_Pe," \u2014 "),Tz=n(_Pe,"A",{href:!0});var UTt=s(Tz);iJo=r(UTt,"LayoutLMv3ForTokenClassification"),UTt.forEach(t),dJo=r(_Pe," (LayoutLMv3 model)"),_Pe.forEach(t),cJo=i(J),Gb=n(J,"LI",{});var uPe=s(Gb);Lue=n(uPe,"STRONG",{});var JTt=s(Lue);fJo=r(JTt,"longformer"),JTt.forEach(t),mJo=r(uPe," \u2014 "),Mz=n(uPe,"A",{href:!0});var YTt=s(Mz);gJo=r(YTt,"LongformerForTokenClassification"),YTt.forEach(t),hJo=r(uPe," (Longformer model)"),uPe.forEach(t),pJo=i(J),Ob=n(J,"LI",{});var bPe=s(Ob);yue=n(bPe,"STRONG",{});var KTt=s(yue);_Jo=r(KTt,"megatron-bert"),KTt.forEach(t),uJo=r(bPe," \u2014 "),Ez=n(bPe,"A",{href:!0});var ZTt=s(Ez);bJo=r(ZTt,"MegatronBertForTokenClassification"),ZTt.forEach(t),vJo=r(bPe," (Megatron-BERT model)"),bPe.forEach(t),FJo=i(J),Vb=n(J,"LI",{});var vPe=s(Vb);xue=n(vPe,"STRONG",{});var e7t=s(xue);TJo=r(e7t,"mobilebert"),e7t.forEach(t),MJo=r(vPe," \u2014 "),Cz=n(vPe,"A",{href:!0});var o7t=s(Cz);EJo=r(o7t,"MobileBertForTokenClassification"),o7t.forEach(t),CJo=r(vPe," (MobileBERT model)"),vPe.forEach(t),wJo=i(J),Xb=n(J,"LI",{});var FPe=s(Xb);$ue=n(FPe,"STRONG",{});var r7t=s($ue);AJo=r(r7t,"mpnet"),r7t.forEach(t),LJo=r(FPe," \u2014 "),wz=n(FPe,"A",{href:!0});var t7t=s(wz);yJo=r(t7t,"MPNetForTokenClassification"),t7t.forEach(t),xJo=r(FPe," (MPNet model)"),FPe.forEach(t),$Jo=i(J),zb=n(J,"LI",{});var TPe=s(zb);kue=n(TPe,"STRONG",{});var a7t=s(kue);kJo=r(a7t,"nezha"),a7t.forEach(t),SJo=r(TPe," \u2014 "),Az=n(TPe,"A",{href:!0});var n7t=s(Az);RJo=r(n7t,"NezhaForTokenClassification"),n7t.forEach(t),PJo=r(TPe," (Nezha model)"),TPe.forEach(t),BJo=i(J),Qb=n(J,"LI",{});var MPe=s(Qb);Sue=n(MPe,"STRONG",{});var s7t=s(Sue);IJo=r(s7t,"nystromformer"),s7t.forEach(t),NJo=r(MPe," \u2014 "),Lz=n(MPe,"A",{href:!0});var l7t=s(Lz);qJo=r(l7t,"NystromformerForTokenClassification"),l7t.forEach(t),jJo=r(MPe," (Nystr\xF6mformer model)"),MPe.forEach(t),DJo=i(J),Wb=n(J,"LI",{});var EPe=s(Wb);Rue=n(EPe,"STRONG",{});var i7t=s(Rue);GJo=r(i7t,"qdqbert"),i7t.forEach(t),OJo=r(EPe," \u2014 "),yz=n(EPe,"A",{href:!0});var d7t=s(yz);VJo=r(d7t,"QDQBertForTokenClassification"),d7t.forEach(t),XJo=r(EPe," (QDQBert model)"),EPe.forEach(t),zJo=i(J),Hb=n(J,"LI",{});var CPe=s(Hb);Pue=n(CPe,"STRONG",{});var c7t=s(Pue);QJo=r(c7t,"rembert"),c7t.forEach(t),WJo=r(CPe," \u2014 "),xz=n(CPe,"A",{href:!0});var f7t=s(xz);HJo=r(f7t,"RemBertForTokenClassification"),f7t.forEach(t),UJo=r(CPe," (RemBERT model)"),CPe.forEach(t),JJo=i(J),Ub=n(J,"LI",{});var wPe=s(Ub);Bue=n(wPe,"STRONG",{});var m7t=s(Bue);YJo=r(m7t,"roberta"),m7t.forEach(t),KJo=r(wPe," \u2014 "),$z=n(wPe,"A",{href:!0});var g7t=s($z);ZJo=r(g7t,"RobertaForTokenClassification"),g7t.forEach(t),eYo=r(wPe," (RoBERTa model)"),wPe.forEach(t),oYo=i(J),Jb=n(J,"LI",{});var APe=s(Jb);Iue=n(APe,"STRONG",{});var h7t=s(Iue);rYo=r(h7t,"roformer"),h7t.forEach(t),tYo=r(APe," \u2014 "),kz=n(APe,"A",{href:!0});var p7t=s(kz);aYo=r(p7t,"RoFormerForTokenClassification"),p7t.forEach(t),nYo=r(APe," (RoFormer model)"),APe.forEach(t),sYo=i(J),Yb=n(J,"LI",{});var LPe=s(Yb);Nue=n(LPe,"STRONG",{});var _7t=s(Nue);lYo=r(_7t,"squeezebert"),_7t.forEach(t),iYo=r(LPe," \u2014 "),Sz=n(LPe,"A",{href:!0});var u7t=s(Sz);dYo=r(u7t,"SqueezeBertForTokenClassification"),u7t.forEach(t),cYo=r(LPe," (SqueezeBERT model)"),LPe.forEach(t),fYo=i(J),Kb=n(J,"LI",{});var yPe=s(Kb);que=n(yPe,"STRONG",{});var b7t=s(que);mYo=r(b7t,"xlm"),b7t.forEach(t),gYo=r(yPe," \u2014 "),Rz=n(yPe,"A",{href:!0});var v7t=s(Rz);hYo=r(v7t,"XLMForTokenClassification"),v7t.forEach(t),pYo=r(yPe," (XLM model)"),yPe.forEach(t),_Yo=i(J),Zb=n(J,"LI",{});var xPe=s(Zb);jue=n(xPe,"STRONG",{});var F7t=s(jue);uYo=r(F7t,"xlm-roberta"),F7t.forEach(t),bYo=r(xPe," \u2014 "),Pz=n(xPe,"A",{href:!0});var T7t=s(Pz);vYo=r(T7t,"XLMRobertaForTokenClassification"),T7t.forEach(t),FYo=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),TYo=i(J),ev=n(J,"LI",{});var $Pe=s(ev);Due=n($Pe,"STRONG",{});var M7t=s(Due);MYo=r(M7t,"xlm-roberta-xl"),M7t.forEach(t),EYo=r($Pe," \u2014 "),Bz=n($Pe,"A",{href:!0});var E7t=s(Bz);CYo=r(E7t,"XLMRobertaXLForTokenClassification"),E7t.forEach(t),wYo=r($Pe," (XLM-RoBERTa-XL model)"),$Pe.forEach(t),AYo=i(J),ov=n(J,"LI",{});var kPe=s(ov);Gue=n(kPe,"STRONG",{});var C7t=s(Gue);LYo=r(C7t,"xlnet"),C7t.forEach(t),yYo=r(kPe," \u2014 "),Iz=n(kPe,"A",{href:!0});var w7t=s(Iz);xYo=r(w7t,"XLNetForTokenClassification"),w7t.forEach(t),$Yo=r(kPe," (XLNet model)"),kPe.forEach(t),kYo=i(J),rv=n(J,"LI",{});var SPe=s(rv);Oue=n(SPe,"STRONG",{});var A7t=s(Oue);SYo=r(A7t,"yoso"),A7t.forEach(t),RYo=r(SPe," \u2014 "),Nz=n(SPe,"A",{href:!0});var L7t=s(Nz);PYo=r(L7t,"YosoForTokenClassification"),L7t.forEach(t),BYo=r(SPe," (YOSO model)"),SPe.forEach(t),J.forEach(t),IYo=i(ha),tv=n(ha,"P",{});var RPe=s(tv);NYo=r(RPe,"The model is set in evaluation mode by default using "),Vue=n(RPe,"CODE",{});var y7t=s(Vue);qYo=r(y7t,"model.eval()"),y7t.forEach(t),jYo=r(RPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(RPe,"CODE",{});var x7t=s(Xue);DYo=r(x7t,"model.train()"),x7t.forEach(t),RPe.forEach(t),GYo=i(ha),T(av.$$.fragment,ha),ha.forEach(t),ll.forEach(t),iVe=i(f),fd=n(f,"H2",{class:!0});var hze=s(fd);nv=n(hze,"A",{id:!0,class:!0,href:!0});var $7t=s(nv);zue=n($7t,"SPAN",{});var k7t=s(zue);T(t8.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),OYo=i(hze),Que=n(hze,"SPAN",{});var S7t=s(Que);VYo=r(S7t,"AutoModelForQuestionAnswering"),S7t.forEach(t),hze.forEach(t),dVe=i(f),jo=n(f,"DIV",{class:!0});var il=s(jo);T(a8.$$.fragment,il),XYo=i(il),md=n(il,"P",{});var dre=s(md);zYo=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qz=n(dre,"A",{href:!0});var R7t=s(qz);QYo=r(R7t,"from_pretrained()"),R7t.forEach(t),WYo=r(dre," class method or the "),jz=n(dre,"A",{href:!0});var P7t=s(jz);HYo=r(P7t,"from_config()"),P7t.forEach(t),UYo=r(dre,` class
method.`),dre.forEach(t),JYo=i(il),n8=n(il,"P",{});var pze=s(n8);YYo=r(pze,"This class cannot be instantiated directly using "),Wue=n(pze,"CODE",{});var B7t=s(Wue);KYo=r(B7t,"__init__()"),B7t.forEach(t),ZYo=r(pze," (throws an error)."),pze.forEach(t),eKo=i(il),pt=n(il,"DIV",{class:!0});var l6=s(pt);T(s8.$$.fragment,l6),oKo=i(l6),Hue=n(l6,"P",{});var I7t=s(Hue);rKo=r(I7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I7t.forEach(t),tKo=i(l6),gd=n(l6,"P",{});var cre=s(gd);aKo=r(cre,`Note:
Loading a model from its configuration file does `),Uue=n(cre,"STRONG",{});var N7t=s(Uue);nKo=r(N7t,"not"),N7t.forEach(t),sKo=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(cre,"A",{href:!0});var q7t=s(Dz);lKo=r(q7t,"from_pretrained()"),q7t.forEach(t),iKo=r(cre," to load the model weights."),cre.forEach(t),dKo=i(l6),T(sv.$$.fragment,l6),l6.forEach(t),cKo=i(il),no=n(il,"DIV",{class:!0});var pa=s(no);T(l8.$$.fragment,pa),fKo=i(pa),Jue=n(pa,"P",{});var j7t=s(Jue);mKo=r(j7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j7t.forEach(t),gKo=i(pa),Va=n(pa,"P",{});var i6=s(Va);hKo=r(i6,"The model class to instantiate is selected based on the "),Yue=n(i6,"CODE",{});var D7t=s(Yue);pKo=r(D7t,"model_type"),D7t.forEach(t),_Ko=r(i6,` property of the config object (either
passed as an argument or loaded from `),Kue=n(i6,"CODE",{});var G7t=s(Kue);uKo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),bKo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(i6,"CODE",{});var O7t=s(Zue);vKo=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),FKo=r(i6,":"),i6.forEach(t),TKo=i(pa),V=n(pa,"UL",{});var X=s(V);lv=n(X,"LI",{});var PPe=s(lv);e5e=n(PPe,"STRONG",{});var V7t=s(e5e);MKo=r(V7t,"albert"),V7t.forEach(t),EKo=r(PPe," \u2014 "),Gz=n(PPe,"A",{href:!0});var X7t=s(Gz);CKo=r(X7t,"AlbertForQuestionAnswering"),X7t.forEach(t),wKo=r(PPe," (ALBERT model)"),PPe.forEach(t),AKo=i(X),iv=n(X,"LI",{});var BPe=s(iv);o5e=n(BPe,"STRONG",{});var z7t=s(o5e);LKo=r(z7t,"bart"),z7t.forEach(t),yKo=r(BPe," \u2014 "),Oz=n(BPe,"A",{href:!0});var Q7t=s(Oz);xKo=r(Q7t,"BartForQuestionAnswering"),Q7t.forEach(t),$Ko=r(BPe," (BART model)"),BPe.forEach(t),kKo=i(X),dv=n(X,"LI",{});var IPe=s(dv);r5e=n(IPe,"STRONG",{});var W7t=s(r5e);SKo=r(W7t,"bert"),W7t.forEach(t),RKo=r(IPe," \u2014 "),Vz=n(IPe,"A",{href:!0});var H7t=s(Vz);PKo=r(H7t,"BertForQuestionAnswering"),H7t.forEach(t),BKo=r(IPe," (BERT model)"),IPe.forEach(t),IKo=i(X),cv=n(X,"LI",{});var NPe=s(cv);t5e=n(NPe,"STRONG",{});var U7t=s(t5e);NKo=r(U7t,"big_bird"),U7t.forEach(t),qKo=r(NPe," \u2014 "),Xz=n(NPe,"A",{href:!0});var J7t=s(Xz);jKo=r(J7t,"BigBirdForQuestionAnswering"),J7t.forEach(t),DKo=r(NPe," (BigBird model)"),NPe.forEach(t),GKo=i(X),fv=n(X,"LI",{});var qPe=s(fv);a5e=n(qPe,"STRONG",{});var Y7t=s(a5e);OKo=r(Y7t,"bigbird_pegasus"),Y7t.forEach(t),VKo=r(qPe," \u2014 "),zz=n(qPe,"A",{href:!0});var K7t=s(zz);XKo=r(K7t,"BigBirdPegasusForQuestionAnswering"),K7t.forEach(t),zKo=r(qPe," (BigBird-Pegasus model)"),qPe.forEach(t),QKo=i(X),mv=n(X,"LI",{});var jPe=s(mv);n5e=n(jPe,"STRONG",{});var Z7t=s(n5e);WKo=r(Z7t,"camembert"),Z7t.forEach(t),HKo=r(jPe," \u2014 "),Qz=n(jPe,"A",{href:!0});var eMt=s(Qz);UKo=r(eMt,"CamembertForQuestionAnswering"),eMt.forEach(t),JKo=r(jPe," (CamemBERT model)"),jPe.forEach(t),YKo=i(X),gv=n(X,"LI",{});var DPe=s(gv);s5e=n(DPe,"STRONG",{});var oMt=s(s5e);KKo=r(oMt,"canine"),oMt.forEach(t),ZKo=r(DPe," \u2014 "),Wz=n(DPe,"A",{href:!0});var rMt=s(Wz);eZo=r(rMt,"CanineForQuestionAnswering"),rMt.forEach(t),oZo=r(DPe," (CANINE model)"),DPe.forEach(t),rZo=i(X),hv=n(X,"LI",{});var GPe=s(hv);l5e=n(GPe,"STRONG",{});var tMt=s(l5e);tZo=r(tMt,"convbert"),tMt.forEach(t),aZo=r(GPe," \u2014 "),Hz=n(GPe,"A",{href:!0});var aMt=s(Hz);nZo=r(aMt,"ConvBertForQuestionAnswering"),aMt.forEach(t),sZo=r(GPe," (ConvBERT model)"),GPe.forEach(t),lZo=i(X),pv=n(X,"LI",{});var OPe=s(pv);i5e=n(OPe,"STRONG",{});var nMt=s(i5e);iZo=r(nMt,"data2vec-text"),nMt.forEach(t),dZo=r(OPe," \u2014 "),Uz=n(OPe,"A",{href:!0});var sMt=s(Uz);cZo=r(sMt,"Data2VecTextForQuestionAnswering"),sMt.forEach(t),fZo=r(OPe," (Data2VecText model)"),OPe.forEach(t),mZo=i(X),_v=n(X,"LI",{});var VPe=s(_v);d5e=n(VPe,"STRONG",{});var lMt=s(d5e);gZo=r(lMt,"deberta"),lMt.forEach(t),hZo=r(VPe," \u2014 "),Jz=n(VPe,"A",{href:!0});var iMt=s(Jz);pZo=r(iMt,"DebertaForQuestionAnswering"),iMt.forEach(t),_Zo=r(VPe," (DeBERTa model)"),VPe.forEach(t),uZo=i(X),uv=n(X,"LI",{});var XPe=s(uv);c5e=n(XPe,"STRONG",{});var dMt=s(c5e);bZo=r(dMt,"deberta-v2"),dMt.forEach(t),vZo=r(XPe," \u2014 "),Yz=n(XPe,"A",{href:!0});var cMt=s(Yz);FZo=r(cMt,"DebertaV2ForQuestionAnswering"),cMt.forEach(t),TZo=r(XPe," (DeBERTa-v2 model)"),XPe.forEach(t),MZo=i(X),bv=n(X,"LI",{});var zPe=s(bv);f5e=n(zPe,"STRONG",{});var fMt=s(f5e);EZo=r(fMt,"distilbert"),fMt.forEach(t),CZo=r(zPe," \u2014 "),Kz=n(zPe,"A",{href:!0});var mMt=s(Kz);wZo=r(mMt,"DistilBertForQuestionAnswering"),mMt.forEach(t),AZo=r(zPe," (DistilBERT model)"),zPe.forEach(t),LZo=i(X),vv=n(X,"LI",{});var QPe=s(vv);m5e=n(QPe,"STRONG",{});var gMt=s(m5e);yZo=r(gMt,"electra"),gMt.forEach(t),xZo=r(QPe," \u2014 "),Zz=n(QPe,"A",{href:!0});var hMt=s(Zz);$Zo=r(hMt,"ElectraForQuestionAnswering"),hMt.forEach(t),kZo=r(QPe," (ELECTRA model)"),QPe.forEach(t),SZo=i(X),Fv=n(X,"LI",{});var WPe=s(Fv);g5e=n(WPe,"STRONG",{});var pMt=s(g5e);RZo=r(pMt,"flaubert"),pMt.forEach(t),PZo=r(WPe," \u2014 "),eQ=n(WPe,"A",{href:!0});var _Mt=s(eQ);BZo=r(_Mt,"FlaubertForQuestionAnsweringSimple"),_Mt.forEach(t),IZo=r(WPe," (FlauBERT model)"),WPe.forEach(t),NZo=i(X),Tv=n(X,"LI",{});var HPe=s(Tv);h5e=n(HPe,"STRONG",{});var uMt=s(h5e);qZo=r(uMt,"fnet"),uMt.forEach(t),jZo=r(HPe," \u2014 "),oQ=n(HPe,"A",{href:!0});var bMt=s(oQ);DZo=r(bMt,"FNetForQuestionAnswering"),bMt.forEach(t),GZo=r(HPe," (FNet model)"),HPe.forEach(t),OZo=i(X),Mv=n(X,"LI",{});var UPe=s(Mv);p5e=n(UPe,"STRONG",{});var vMt=s(p5e);VZo=r(vMt,"funnel"),vMt.forEach(t),XZo=r(UPe," \u2014 "),rQ=n(UPe,"A",{href:!0});var FMt=s(rQ);zZo=r(FMt,"FunnelForQuestionAnswering"),FMt.forEach(t),QZo=r(UPe," (Funnel Transformer model)"),UPe.forEach(t),WZo=i(X),Ev=n(X,"LI",{});var JPe=s(Ev);_5e=n(JPe,"STRONG",{});var TMt=s(_5e);HZo=r(TMt,"gptj"),TMt.forEach(t),UZo=r(JPe," \u2014 "),tQ=n(JPe,"A",{href:!0});var MMt=s(tQ);JZo=r(MMt,"GPTJForQuestionAnswering"),MMt.forEach(t),YZo=r(JPe," (GPT-J model)"),JPe.forEach(t),KZo=i(X),Cv=n(X,"LI",{});var YPe=s(Cv);u5e=n(YPe,"STRONG",{});var EMt=s(u5e);ZZo=r(EMt,"ibert"),EMt.forEach(t),eer=r(YPe," \u2014 "),aQ=n(YPe,"A",{href:!0});var CMt=s(aQ);oer=r(CMt,"IBertForQuestionAnswering"),CMt.forEach(t),rer=r(YPe," (I-BERT model)"),YPe.forEach(t),ter=i(X),wv=n(X,"LI",{});var KPe=s(wv);b5e=n(KPe,"STRONG",{});var wMt=s(b5e);aer=r(wMt,"layoutlmv2"),wMt.forEach(t),ner=r(KPe," \u2014 "),nQ=n(KPe,"A",{href:!0});var AMt=s(nQ);ser=r(AMt,"LayoutLMv2ForQuestionAnswering"),AMt.forEach(t),ler=r(KPe," (LayoutLMv2 model)"),KPe.forEach(t),ier=i(X),Av=n(X,"LI",{});var ZPe=s(Av);v5e=n(ZPe,"STRONG",{});var LMt=s(v5e);der=r(LMt,"layoutlmv3"),LMt.forEach(t),cer=r(ZPe," \u2014 "),sQ=n(ZPe,"A",{href:!0});var yMt=s(sQ);fer=r(yMt,"LayoutLMv3ForQuestionAnswering"),yMt.forEach(t),mer=r(ZPe," (LayoutLMv3 model)"),ZPe.forEach(t),ger=i(X),Lv=n(X,"LI",{});var eBe=s(Lv);F5e=n(eBe,"STRONG",{});var xMt=s(F5e);her=r(xMt,"led"),xMt.forEach(t),per=r(eBe," \u2014 "),lQ=n(eBe,"A",{href:!0});var $Mt=s(lQ);_er=r($Mt,"LEDForQuestionAnswering"),$Mt.forEach(t),uer=r(eBe," (LED model)"),eBe.forEach(t),ber=i(X),yv=n(X,"LI",{});var oBe=s(yv);T5e=n(oBe,"STRONG",{});var kMt=s(T5e);ver=r(kMt,"longformer"),kMt.forEach(t),Fer=r(oBe," \u2014 "),iQ=n(oBe,"A",{href:!0});var SMt=s(iQ);Ter=r(SMt,"LongformerForQuestionAnswering"),SMt.forEach(t),Mer=r(oBe," (Longformer model)"),oBe.forEach(t),Eer=i(X),xv=n(X,"LI",{});var rBe=s(xv);M5e=n(rBe,"STRONG",{});var RMt=s(M5e);Cer=r(RMt,"lxmert"),RMt.forEach(t),wer=r(rBe," \u2014 "),dQ=n(rBe,"A",{href:!0});var PMt=s(dQ);Aer=r(PMt,"LxmertForQuestionAnswering"),PMt.forEach(t),Ler=r(rBe," (LXMERT model)"),rBe.forEach(t),yer=i(X),$v=n(X,"LI",{});var tBe=s($v);E5e=n(tBe,"STRONG",{});var BMt=s(E5e);xer=r(BMt,"mbart"),BMt.forEach(t),$er=r(tBe," \u2014 "),cQ=n(tBe,"A",{href:!0});var IMt=s(cQ);ker=r(IMt,"MBartForQuestionAnswering"),IMt.forEach(t),Ser=r(tBe," (mBART model)"),tBe.forEach(t),Rer=i(X),kv=n(X,"LI",{});var aBe=s(kv);C5e=n(aBe,"STRONG",{});var NMt=s(C5e);Per=r(NMt,"megatron-bert"),NMt.forEach(t),Ber=r(aBe," \u2014 "),fQ=n(aBe,"A",{href:!0});var qMt=s(fQ);Ier=r(qMt,"MegatronBertForQuestionAnswering"),qMt.forEach(t),Ner=r(aBe," (Megatron-BERT model)"),aBe.forEach(t),qer=i(X),Sv=n(X,"LI",{});var nBe=s(Sv);w5e=n(nBe,"STRONG",{});var jMt=s(w5e);jer=r(jMt,"mobilebert"),jMt.forEach(t),Der=r(nBe," \u2014 "),mQ=n(nBe,"A",{href:!0});var DMt=s(mQ);Ger=r(DMt,"MobileBertForQuestionAnswering"),DMt.forEach(t),Oer=r(nBe," (MobileBERT model)"),nBe.forEach(t),Ver=i(X),Rv=n(X,"LI",{});var sBe=s(Rv);A5e=n(sBe,"STRONG",{});var GMt=s(A5e);Xer=r(GMt,"mpnet"),GMt.forEach(t),zer=r(sBe," \u2014 "),gQ=n(sBe,"A",{href:!0});var OMt=s(gQ);Qer=r(OMt,"MPNetForQuestionAnswering"),OMt.forEach(t),Wer=r(sBe," (MPNet model)"),sBe.forEach(t),Her=i(X),Pv=n(X,"LI",{});var lBe=s(Pv);L5e=n(lBe,"STRONG",{});var VMt=s(L5e);Uer=r(VMt,"nezha"),VMt.forEach(t),Jer=r(lBe," \u2014 "),hQ=n(lBe,"A",{href:!0});var XMt=s(hQ);Yer=r(XMt,"NezhaForQuestionAnswering"),XMt.forEach(t),Ker=r(lBe," (Nezha model)"),lBe.forEach(t),Zer=i(X),Bv=n(X,"LI",{});var iBe=s(Bv);y5e=n(iBe,"STRONG",{});var zMt=s(y5e);eor=r(zMt,"nystromformer"),zMt.forEach(t),oor=r(iBe," \u2014 "),pQ=n(iBe,"A",{href:!0});var QMt=s(pQ);ror=r(QMt,"NystromformerForQuestionAnswering"),QMt.forEach(t),tor=r(iBe," (Nystr\xF6mformer model)"),iBe.forEach(t),aor=i(X),Iv=n(X,"LI",{});var dBe=s(Iv);x5e=n(dBe,"STRONG",{});var WMt=s(x5e);nor=r(WMt,"qdqbert"),WMt.forEach(t),sor=r(dBe," \u2014 "),_Q=n(dBe,"A",{href:!0});var HMt=s(_Q);lor=r(HMt,"QDQBertForQuestionAnswering"),HMt.forEach(t),ior=r(dBe," (QDQBert model)"),dBe.forEach(t),dor=i(X),Nv=n(X,"LI",{});var cBe=s(Nv);$5e=n(cBe,"STRONG",{});var UMt=s($5e);cor=r(UMt,"reformer"),UMt.forEach(t),mor=r(cBe," \u2014 "),uQ=n(cBe,"A",{href:!0});var JMt=s(uQ);gor=r(JMt,"ReformerForQuestionAnswering"),JMt.forEach(t),hor=r(cBe," (Reformer model)"),cBe.forEach(t),por=i(X),qv=n(X,"LI",{});var fBe=s(qv);k5e=n(fBe,"STRONG",{});var YMt=s(k5e);_or=r(YMt,"rembert"),YMt.forEach(t),uor=r(fBe," \u2014 "),bQ=n(fBe,"A",{href:!0});var KMt=s(bQ);bor=r(KMt,"RemBertForQuestionAnswering"),KMt.forEach(t),vor=r(fBe," (RemBERT model)"),fBe.forEach(t),For=i(X),jv=n(X,"LI",{});var mBe=s(jv);S5e=n(mBe,"STRONG",{});var ZMt=s(S5e);Tor=r(ZMt,"roberta"),ZMt.forEach(t),Mor=r(mBe," \u2014 "),vQ=n(mBe,"A",{href:!0});var eEt=s(vQ);Eor=r(eEt,"RobertaForQuestionAnswering"),eEt.forEach(t),Cor=r(mBe," (RoBERTa model)"),mBe.forEach(t),wor=i(X),Dv=n(X,"LI",{});var gBe=s(Dv);R5e=n(gBe,"STRONG",{});var oEt=s(R5e);Aor=r(oEt,"roformer"),oEt.forEach(t),Lor=r(gBe," \u2014 "),FQ=n(gBe,"A",{href:!0});var rEt=s(FQ);yor=r(rEt,"RoFormerForQuestionAnswering"),rEt.forEach(t),xor=r(gBe," (RoFormer model)"),gBe.forEach(t),$or=i(X),Gv=n(X,"LI",{});var hBe=s(Gv);P5e=n(hBe,"STRONG",{});var tEt=s(P5e);kor=r(tEt,"splinter"),tEt.forEach(t),Sor=r(hBe," \u2014 "),TQ=n(hBe,"A",{href:!0});var aEt=s(TQ);Ror=r(aEt,"SplinterForQuestionAnswering"),aEt.forEach(t),Por=r(hBe," (Splinter model)"),hBe.forEach(t),Bor=i(X),Ov=n(X,"LI",{});var pBe=s(Ov);B5e=n(pBe,"STRONG",{});var nEt=s(B5e);Ior=r(nEt,"squeezebert"),nEt.forEach(t),Nor=r(pBe," \u2014 "),MQ=n(pBe,"A",{href:!0});var sEt=s(MQ);qor=r(sEt,"SqueezeBertForQuestionAnswering"),sEt.forEach(t),jor=r(pBe," (SqueezeBERT model)"),pBe.forEach(t),Dor=i(X),Vv=n(X,"LI",{});var _Be=s(Vv);I5e=n(_Be,"STRONG",{});var lEt=s(I5e);Gor=r(lEt,"xlm"),lEt.forEach(t),Oor=r(_Be," \u2014 "),EQ=n(_Be,"A",{href:!0});var iEt=s(EQ);Vor=r(iEt,"XLMForQuestionAnsweringSimple"),iEt.forEach(t),Xor=r(_Be," (XLM model)"),_Be.forEach(t),zor=i(X),Xv=n(X,"LI",{});var uBe=s(Xv);N5e=n(uBe,"STRONG",{});var dEt=s(N5e);Qor=r(dEt,"xlm-roberta"),dEt.forEach(t),Wor=r(uBe," \u2014 "),CQ=n(uBe,"A",{href:!0});var cEt=s(CQ);Hor=r(cEt,"XLMRobertaForQuestionAnswering"),cEt.forEach(t),Uor=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),Jor=i(X),zv=n(X,"LI",{});var bBe=s(zv);q5e=n(bBe,"STRONG",{});var fEt=s(q5e);Yor=r(fEt,"xlm-roberta-xl"),fEt.forEach(t),Kor=r(bBe," \u2014 "),wQ=n(bBe,"A",{href:!0});var mEt=s(wQ);Zor=r(mEt,"XLMRobertaXLForQuestionAnswering"),mEt.forEach(t),err=r(bBe," (XLM-RoBERTa-XL model)"),bBe.forEach(t),orr=i(X),Qv=n(X,"LI",{});var vBe=s(Qv);j5e=n(vBe,"STRONG",{});var gEt=s(j5e);rrr=r(gEt,"xlnet"),gEt.forEach(t),trr=r(vBe," \u2014 "),AQ=n(vBe,"A",{href:!0});var hEt=s(AQ);arr=r(hEt,"XLNetForQuestionAnsweringSimple"),hEt.forEach(t),nrr=r(vBe," (XLNet model)"),vBe.forEach(t),srr=i(X),Wv=n(X,"LI",{});var FBe=s(Wv);D5e=n(FBe,"STRONG",{});var pEt=s(D5e);lrr=r(pEt,"yoso"),pEt.forEach(t),irr=r(FBe," \u2014 "),LQ=n(FBe,"A",{href:!0});var _Et=s(LQ);drr=r(_Et,"YosoForQuestionAnswering"),_Et.forEach(t),crr=r(FBe," (YOSO model)"),FBe.forEach(t),X.forEach(t),frr=i(pa),Hv=n(pa,"P",{});var TBe=s(Hv);mrr=r(TBe,"The model is set in evaluation mode by default using "),G5e=n(TBe,"CODE",{});var uEt=s(G5e);grr=r(uEt,"model.eval()"),uEt.forEach(t),hrr=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O5e=n(TBe,"CODE",{});var bEt=s(O5e);prr=r(bEt,"model.train()"),bEt.forEach(t),TBe.forEach(t),_rr=i(pa),T(Uv.$$.fragment,pa),pa.forEach(t),il.forEach(t),cVe=i(f),hd=n(f,"H2",{class:!0});var _ze=s(hd);Jv=n(_ze,"A",{id:!0,class:!0,href:!0});var vEt=s(Jv);V5e=n(vEt,"SPAN",{});var FEt=s(V5e);T(i8.$$.fragment,FEt),FEt.forEach(t),vEt.forEach(t),urr=i(_ze),X5e=n(_ze,"SPAN",{});var TEt=s(X5e);brr=r(TEt,"AutoModelForTableQuestionAnswering"),TEt.forEach(t),_ze.forEach(t),fVe=i(f),Do=n(f,"DIV",{class:!0});var dl=s(Do);T(d8.$$.fragment,dl),vrr=i(dl),pd=n(dl,"P",{});var fre=s(pd);Frr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yQ=n(fre,"A",{href:!0});var MEt=s(yQ);Trr=r(MEt,"from_pretrained()"),MEt.forEach(t),Mrr=r(fre," class method or the "),xQ=n(fre,"A",{href:!0});var EEt=s(xQ);Err=r(EEt,"from_config()"),EEt.forEach(t),Crr=r(fre,` class
method.`),fre.forEach(t),wrr=i(dl),c8=n(dl,"P",{});var uze=s(c8);Arr=r(uze,"This class cannot be instantiated directly using "),z5e=n(uze,"CODE",{});var CEt=s(z5e);Lrr=r(CEt,"__init__()"),CEt.forEach(t),yrr=r(uze," (throws an error)."),uze.forEach(t),xrr=i(dl),_t=n(dl,"DIV",{class:!0});var d6=s(_t);T(f8.$$.fragment,d6),$rr=i(d6),Q5e=n(d6,"P",{});var wEt=s(Q5e);krr=r(wEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wEt.forEach(t),Srr=i(d6),_d=n(d6,"P",{});var mre=s(_d);Rrr=r(mre,`Note:
Loading a model from its configuration file does `),W5e=n(mre,"STRONG",{});var AEt=s(W5e);Prr=r(AEt,"not"),AEt.forEach(t),Brr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(mre,"A",{href:!0});var LEt=s($Q);Irr=r(LEt,"from_pretrained()"),LEt.forEach(t),Nrr=r(mre," to load the model weights."),mre.forEach(t),qrr=i(d6),T(Yv.$$.fragment,d6),d6.forEach(t),jrr=i(dl),so=n(dl,"DIV",{class:!0});var _a=s(so);T(m8.$$.fragment,_a),Drr=i(_a),H5e=n(_a,"P",{});var yEt=s(H5e);Grr=r(yEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),yEt.forEach(t),Orr=i(_a),Xa=n(_a,"P",{});var c6=s(Xa);Vrr=r(c6,"The model class to instantiate is selected based on the "),U5e=n(c6,"CODE",{});var xEt=s(U5e);Xrr=r(xEt,"model_type"),xEt.forEach(t),zrr=r(c6,` property of the config object (either
passed as an argument or loaded from `),J5e=n(c6,"CODE",{});var $Et=s(J5e);Qrr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),Wrr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(c6,"CODE",{});var kEt=s(Y5e);Hrr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),Urr=r(c6,":"),c6.forEach(t),Jrr=i(_a),K5e=n(_a,"UL",{});var SEt=s(K5e);Kv=n(SEt,"LI",{});var MBe=s(Kv);Z5e=n(MBe,"STRONG",{});var REt=s(Z5e);Yrr=r(REt,"tapas"),REt.forEach(t),Krr=r(MBe," \u2014 "),kQ=n(MBe,"A",{href:!0});var PEt=s(kQ);Zrr=r(PEt,"TapasForQuestionAnswering"),PEt.forEach(t),etr=r(MBe," (TAPAS model)"),MBe.forEach(t),SEt.forEach(t),otr=i(_a),Zv=n(_a,"P",{});var EBe=s(Zv);rtr=r(EBe,"The model is set in evaluation mode by default using "),e1e=n(EBe,"CODE",{});var BEt=s(e1e);ttr=r(BEt,"model.eval()"),BEt.forEach(t),atr=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(EBe,"CODE",{});var IEt=s(o1e);ntr=r(IEt,"model.train()"),IEt.forEach(t),EBe.forEach(t),str=i(_a),T(eF.$$.fragment,_a),_a.forEach(t),dl.forEach(t),mVe=i(f),ud=n(f,"H2",{class:!0});var bze=s(ud);oF=n(bze,"A",{id:!0,class:!0,href:!0});var NEt=s(oF);r1e=n(NEt,"SPAN",{});var qEt=s(r1e);T(g8.$$.fragment,qEt),qEt.forEach(t),NEt.forEach(t),ltr=i(bze),t1e=n(bze,"SPAN",{});var jEt=s(t1e);itr=r(jEt,"AutoModelForImageClassification"),jEt.forEach(t),bze.forEach(t),gVe=i(f),Go=n(f,"DIV",{class:!0});var cl=s(Go);T(h8.$$.fragment,cl),dtr=i(cl),bd=n(cl,"P",{});var gre=s(bd);ctr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=n(gre,"A",{href:!0});var DEt=s(SQ);ftr=r(DEt,"from_pretrained()"),DEt.forEach(t),mtr=r(gre," class method or the "),RQ=n(gre,"A",{href:!0});var GEt=s(RQ);gtr=r(GEt,"from_config()"),GEt.forEach(t),htr=r(gre,` class
method.`),gre.forEach(t),ptr=i(cl),p8=n(cl,"P",{});var vze=s(p8);_tr=r(vze,"This class cannot be instantiated directly using "),a1e=n(vze,"CODE",{});var OEt=s(a1e);utr=r(OEt,"__init__()"),OEt.forEach(t),btr=r(vze," (throws an error)."),vze.forEach(t),vtr=i(cl),ut=n(cl,"DIV",{class:!0});var f6=s(ut);T(_8.$$.fragment,f6),Ftr=i(f6),n1e=n(f6,"P",{});var VEt=s(n1e);Ttr=r(VEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VEt.forEach(t),Mtr=i(f6),vd=n(f6,"P",{});var hre=s(vd);Etr=r(hre,`Note:
Loading a model from its configuration file does `),s1e=n(hre,"STRONG",{});var XEt=s(s1e);Ctr=r(XEt,"not"),XEt.forEach(t),wtr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(hre,"A",{href:!0});var zEt=s(PQ);Atr=r(zEt,"from_pretrained()"),zEt.forEach(t),Ltr=r(hre," to load the model weights."),hre.forEach(t),ytr=i(f6),T(rF.$$.fragment,f6),f6.forEach(t),xtr=i(cl),lo=n(cl,"DIV",{class:!0});var ua=s(lo);T(u8.$$.fragment,ua),$tr=i(ua),l1e=n(ua,"P",{});var QEt=s(l1e);ktr=r(QEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QEt.forEach(t),Str=i(ua),za=n(ua,"P",{});var m6=s(za);Rtr=r(m6,"The model class to instantiate is selected based on the "),i1e=n(m6,"CODE",{});var WEt=s(i1e);Ptr=r(WEt,"model_type"),WEt.forEach(t),Btr=r(m6,` property of the config object (either
passed as an argument or loaded from `),d1e=n(m6,"CODE",{});var HEt=s(d1e);Itr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),Ntr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(m6,"CODE",{});var UEt=s(c1e);qtr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),jtr=r(m6,":"),m6.forEach(t),Dtr=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);tF=n(Te,"LI",{});var CBe=s(tF);f1e=n(CBe,"STRONG",{});var JEt=s(f1e);Gtr=r(JEt,"beit"),JEt.forEach(t),Otr=r(CBe," \u2014 "),BQ=n(CBe,"A",{href:!0});var YEt=s(BQ);Vtr=r(YEt,"BeitForImageClassification"),YEt.forEach(t),Xtr=r(CBe," (BEiT model)"),CBe.forEach(t),ztr=i(Te),aF=n(Te,"LI",{});var wBe=s(aF);m1e=n(wBe,"STRONG",{});var KEt=s(m1e);Qtr=r(KEt,"convnext"),KEt.forEach(t),Wtr=r(wBe," \u2014 "),IQ=n(wBe,"A",{href:!0});var ZEt=s(IQ);Htr=r(ZEt,"ConvNextForImageClassification"),ZEt.forEach(t),Utr=r(wBe," (ConvNeXT model)"),wBe.forEach(t),Jtr=i(Te),nF=n(Te,"LI",{});var ABe=s(nF);g1e=n(ABe,"STRONG",{});var eCt=s(g1e);Ytr=r(eCt,"cvt"),eCt.forEach(t),Ktr=r(ABe," \u2014 "),NQ=n(ABe,"A",{href:!0});var oCt=s(NQ);Ztr=r(oCt,"CvtForImageClassification"),oCt.forEach(t),ear=r(ABe," (CvT model)"),ABe.forEach(t),oar=i(Te),sF=n(Te,"LI",{});var LBe=s(sF);h1e=n(LBe,"STRONG",{});var rCt=s(h1e);rar=r(rCt,"data2vec-vision"),rCt.forEach(t),tar=r(LBe," \u2014 "),qQ=n(LBe,"A",{href:!0});var tCt=s(qQ);aar=r(tCt,"Data2VecVisionForImageClassification"),tCt.forEach(t),nar=r(LBe," (Data2VecVision model)"),LBe.forEach(t),sar=i(Te),Qs=n(Te,"LI",{});var mS=s(Qs);p1e=n(mS,"STRONG",{});var aCt=s(p1e);lar=r(aCt,"deit"),aCt.forEach(t),iar=r(mS," \u2014 "),jQ=n(mS,"A",{href:!0});var nCt=s(jQ);dar=r(nCt,"DeiTForImageClassification"),nCt.forEach(t),car=r(mS," or "),DQ=n(mS,"A",{href:!0});var sCt=s(DQ);far=r(sCt,"DeiTForImageClassificationWithTeacher"),sCt.forEach(t),mar=r(mS," (DeiT model)"),mS.forEach(t),gar=i(Te),lF=n(Te,"LI",{});var yBe=s(lF);_1e=n(yBe,"STRONG",{});var lCt=s(_1e);har=r(lCt,"imagegpt"),lCt.forEach(t),par=r(yBe," \u2014 "),GQ=n(yBe,"A",{href:!0});var iCt=s(GQ);_ar=r(iCt,"ImageGPTForImageClassification"),iCt.forEach(t),uar=r(yBe," (ImageGPT model)"),yBe.forEach(t),bar=i(Te),Ws=n(Te,"LI",{});var gS=s(Ws);u1e=n(gS,"STRONG",{});var dCt=s(u1e);Far=r(dCt,"levit"),dCt.forEach(t),Tar=r(gS," \u2014 "),OQ=n(gS,"A",{href:!0});var cCt=s(OQ);Mar=r(cCt,"LevitForImageClassification"),cCt.forEach(t),Ear=r(gS," or "),VQ=n(gS,"A",{href:!0});var fCt=s(VQ);Car=r(fCt,"LevitForImageClassificationWithTeacher"),fCt.forEach(t),war=r(gS," (LeViT model)"),gS.forEach(t),Aar=i(Te),bt=n(Te,"LI",{});var $f=s(bt);b1e=n($f,"STRONG",{});var mCt=s(b1e);Lar=r(mCt,"perceiver"),mCt.forEach(t),yar=r($f," \u2014 "),XQ=n($f,"A",{href:!0});var gCt=s(XQ);xar=r(gCt,"PerceiverForImageClassificationLearned"),gCt.forEach(t),$ar=r($f," or "),zQ=n($f,"A",{href:!0});var hCt=s(zQ);kar=r(hCt,"PerceiverForImageClassificationFourier"),hCt.forEach(t),Sar=r($f," or "),QQ=n($f,"A",{href:!0});var pCt=s(QQ);Rar=r(pCt,"PerceiverForImageClassificationConvProcessing"),pCt.forEach(t),Par=r($f," (Perceiver model)"),$f.forEach(t),Bar=i(Te),iF=n(Te,"LI",{});var xBe=s(iF);v1e=n(xBe,"STRONG",{});var _Ct=s(v1e);Iar=r(_Ct,"poolformer"),_Ct.forEach(t),Nar=r(xBe," \u2014 "),WQ=n(xBe,"A",{href:!0});var uCt=s(WQ);qar=r(uCt,"PoolFormerForImageClassification"),uCt.forEach(t),jar=r(xBe," (PoolFormer model)"),xBe.forEach(t),Dar=i(Te),dF=n(Te,"LI",{});var $Be=s(dF);F1e=n($Be,"STRONG",{});var bCt=s(F1e);Gar=r(bCt,"regnet"),bCt.forEach(t),Oar=r($Be," \u2014 "),HQ=n($Be,"A",{href:!0});var vCt=s(HQ);Var=r(vCt,"RegNetForImageClassification"),vCt.forEach(t),Xar=r($Be," (RegNet model)"),$Be.forEach(t),zar=i(Te),cF=n(Te,"LI",{});var kBe=s(cF);T1e=n(kBe,"STRONG",{});var FCt=s(T1e);Qar=r(FCt,"resnet"),FCt.forEach(t),War=r(kBe," \u2014 "),UQ=n(kBe,"A",{href:!0});var TCt=s(UQ);Har=r(TCt,"ResNetForImageClassification"),TCt.forEach(t),Uar=r(kBe," (ResNet model)"),kBe.forEach(t),Jar=i(Te),fF=n(Te,"LI",{});var SBe=s(fF);M1e=n(SBe,"STRONG",{});var MCt=s(M1e);Yar=r(MCt,"segformer"),MCt.forEach(t),Kar=r(SBe," \u2014 "),JQ=n(SBe,"A",{href:!0});var ECt=s(JQ);Zar=r(ECt,"SegformerForImageClassification"),ECt.forEach(t),enr=r(SBe," (SegFormer model)"),SBe.forEach(t),onr=i(Te),mF=n(Te,"LI",{});var RBe=s(mF);E1e=n(RBe,"STRONG",{});var CCt=s(E1e);rnr=r(CCt,"swin"),CCt.forEach(t),tnr=r(RBe," \u2014 "),YQ=n(RBe,"A",{href:!0});var wCt=s(YQ);anr=r(wCt,"SwinForImageClassification"),wCt.forEach(t),nnr=r(RBe," (Swin Transformer model)"),RBe.forEach(t),snr=i(Te),gF=n(Te,"LI",{});var PBe=s(gF);C1e=n(PBe,"STRONG",{});var ACt=s(C1e);lnr=r(ACt,"van"),ACt.forEach(t),inr=r(PBe," \u2014 "),KQ=n(PBe,"A",{href:!0});var LCt=s(KQ);dnr=r(LCt,"VanForImageClassification"),LCt.forEach(t),cnr=r(PBe," (VAN model)"),PBe.forEach(t),fnr=i(Te),hF=n(Te,"LI",{});var BBe=s(hF);w1e=n(BBe,"STRONG",{});var yCt=s(w1e);mnr=r(yCt,"vit"),yCt.forEach(t),gnr=r(BBe," \u2014 "),ZQ=n(BBe,"A",{href:!0});var xCt=s(ZQ);hnr=r(xCt,"ViTForImageClassification"),xCt.forEach(t),pnr=r(BBe," (ViT model)"),BBe.forEach(t),Te.forEach(t),_nr=i(ua),pF=n(ua,"P",{});var IBe=s(pF);unr=r(IBe,"The model is set in evaluation mode by default using "),A1e=n(IBe,"CODE",{});var $Ct=s(A1e);bnr=r($Ct,"model.eval()"),$Ct.forEach(t),vnr=r(IBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(IBe,"CODE",{});var kCt=s(L1e);Fnr=r(kCt,"model.train()"),kCt.forEach(t),IBe.forEach(t),Tnr=i(ua),T(_F.$$.fragment,ua),ua.forEach(t),cl.forEach(t),hVe=i(f),Fd=n(f,"H2",{class:!0});var Fze=s(Fd);uF=n(Fze,"A",{id:!0,class:!0,href:!0});var SCt=s(uF);y1e=n(SCt,"SPAN",{});var RCt=s(y1e);T(b8.$$.fragment,RCt),RCt.forEach(t),SCt.forEach(t),Mnr=i(Fze),x1e=n(Fze,"SPAN",{});var PCt=s(x1e);Enr=r(PCt,"AutoModelForVision2Seq"),PCt.forEach(t),Fze.forEach(t),pVe=i(f),Oo=n(f,"DIV",{class:!0});var fl=s(Oo);T(v8.$$.fragment,fl),Cnr=i(fl),Td=n(fl,"P",{});var pre=s(Td);wnr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eW=n(pre,"A",{href:!0});var BCt=s(eW);Anr=r(BCt,"from_pretrained()"),BCt.forEach(t),Lnr=r(pre," class method or the "),oW=n(pre,"A",{href:!0});var ICt=s(oW);ynr=r(ICt,"from_config()"),ICt.forEach(t),xnr=r(pre,` class
method.`),pre.forEach(t),$nr=i(fl),F8=n(fl,"P",{});var Tze=s(F8);knr=r(Tze,"This class cannot be instantiated directly using "),$1e=n(Tze,"CODE",{});var NCt=s($1e);Snr=r(NCt,"__init__()"),NCt.forEach(t),Rnr=r(Tze," (throws an error)."),Tze.forEach(t),Pnr=i(fl),vt=n(fl,"DIV",{class:!0});var g6=s(vt);T(T8.$$.fragment,g6),Bnr=i(g6),k1e=n(g6,"P",{});var qCt=s(k1e);Inr=r(qCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qCt.forEach(t),Nnr=i(g6),Md=n(g6,"P",{});var _re=s(Md);qnr=r(_re,`Note:
Loading a model from its configuration file does `),S1e=n(_re,"STRONG",{});var jCt=s(S1e);jnr=r(jCt,"not"),jCt.forEach(t),Dnr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(_re,"A",{href:!0});var DCt=s(rW);Gnr=r(DCt,"from_pretrained()"),DCt.forEach(t),Onr=r(_re," to load the model weights."),_re.forEach(t),Vnr=i(g6),T(bF.$$.fragment,g6),g6.forEach(t),Xnr=i(fl),io=n(fl,"DIV",{class:!0});var ba=s(io);T(M8.$$.fragment,ba),znr=i(ba),R1e=n(ba,"P",{});var GCt=s(R1e);Qnr=r(GCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GCt.forEach(t),Wnr=i(ba),Qa=n(ba,"P",{});var h6=s(Qa);Hnr=r(h6,"The model class to instantiate is selected based on the "),P1e=n(h6,"CODE",{});var OCt=s(P1e);Unr=r(OCt,"model_type"),OCt.forEach(t),Jnr=r(h6,` property of the config object (either
passed as an argument or loaded from `),B1e=n(h6,"CODE",{});var VCt=s(B1e);Ynr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),Knr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(h6,"CODE",{});var XCt=s(I1e);Znr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),esr=r(h6,":"),h6.forEach(t),osr=i(ba),N1e=n(ba,"UL",{});var zCt=s(N1e);vF=n(zCt,"LI",{});var NBe=s(vF);q1e=n(NBe,"STRONG",{});var QCt=s(q1e);rsr=r(QCt,"vision-encoder-decoder"),QCt.forEach(t),tsr=r(NBe," \u2014 "),tW=n(NBe,"A",{href:!0});var WCt=s(tW);asr=r(WCt,"VisionEncoderDecoderModel"),WCt.forEach(t),nsr=r(NBe," (Vision Encoder decoder model)"),NBe.forEach(t),zCt.forEach(t),ssr=i(ba),FF=n(ba,"P",{});var qBe=s(FF);lsr=r(qBe,"The model is set in evaluation mode by default using "),j1e=n(qBe,"CODE",{});var HCt=s(j1e);isr=r(HCt,"model.eval()"),HCt.forEach(t),dsr=r(qBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(qBe,"CODE",{});var UCt=s(D1e);csr=r(UCt,"model.train()"),UCt.forEach(t),qBe.forEach(t),fsr=i(ba),T(TF.$$.fragment,ba),ba.forEach(t),fl.forEach(t),_Ve=i(f),Ed=n(f,"H2",{class:!0});var Mze=s(Ed);MF=n(Mze,"A",{id:!0,class:!0,href:!0});var JCt=s(MF);G1e=n(JCt,"SPAN",{});var YCt=s(G1e);T(E8.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),msr=i(Mze),O1e=n(Mze,"SPAN",{});var KCt=s(O1e);gsr=r(KCt,"AutoModelForVisualQuestionAnswering"),KCt.forEach(t),Mze.forEach(t),uVe=i(f),Vo=n(f,"DIV",{class:!0});var ml=s(Vo);T(C8.$$.fragment,ml),hsr=i(ml),Cd=n(ml,"P",{});var ure=s(Cd);psr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),aW=n(ure,"A",{href:!0});var ZCt=s(aW);_sr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),usr=r(ure," class method or the "),nW=n(ure,"A",{href:!0});var e3t=s(nW);bsr=r(e3t,"from_config()"),e3t.forEach(t),vsr=r(ure,` class
method.`),ure.forEach(t),Fsr=i(ml),w8=n(ml,"P",{});var Eze=s(w8);Tsr=r(Eze,"This class cannot be instantiated directly using "),V1e=n(Eze,"CODE",{});var o3t=s(V1e);Msr=r(o3t,"__init__()"),o3t.forEach(t),Esr=r(Eze," (throws an error)."),Eze.forEach(t),Csr=i(ml),Ft=n(ml,"DIV",{class:!0});var p6=s(Ft);T(A8.$$.fragment,p6),wsr=i(p6),X1e=n(p6,"P",{});var r3t=s(X1e);Asr=r(r3t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),r3t.forEach(t),Lsr=i(p6),wd=n(p6,"P",{});var bre=s(wd);ysr=r(bre,`Note:
Loading a model from its configuration file does `),z1e=n(bre,"STRONG",{});var t3t=s(z1e);xsr=r(t3t,"not"),t3t.forEach(t),$sr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(bre,"A",{href:!0});var a3t=s(sW);ksr=r(a3t,"from_pretrained()"),a3t.forEach(t),Ssr=r(bre," to load the model weights."),bre.forEach(t),Rsr=i(p6),T(EF.$$.fragment,p6),p6.forEach(t),Psr=i(ml),co=n(ml,"DIV",{class:!0});var va=s(co);T(L8.$$.fragment,va),Bsr=i(va),Q1e=n(va,"P",{});var n3t=s(Q1e);Isr=r(n3t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),n3t.forEach(t),Nsr=i(va),Wa=n(va,"P",{});var _6=s(Wa);qsr=r(_6,"The model class to instantiate is selected based on the "),W1e=n(_6,"CODE",{});var s3t=s(W1e);jsr=r(s3t,"model_type"),s3t.forEach(t),Dsr=r(_6,` property of the config object (either
passed as an argument or loaded from `),H1e=n(_6,"CODE",{});var l3t=s(H1e);Gsr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),Osr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(_6,"CODE",{});var i3t=s(U1e);Vsr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),Xsr=r(_6,":"),_6.forEach(t),zsr=i(va),J1e=n(va,"UL",{});var d3t=s(J1e);CF=n(d3t,"LI",{});var jBe=s(CF);Y1e=n(jBe,"STRONG",{});var c3t=s(Y1e);Qsr=r(c3t,"vilt"),c3t.forEach(t),Wsr=r(jBe," \u2014 "),lW=n(jBe,"A",{href:!0});var f3t=s(lW);Hsr=r(f3t,"ViltForQuestionAnswering"),f3t.forEach(t),Usr=r(jBe," (ViLT model)"),jBe.forEach(t),d3t.forEach(t),Jsr=i(va),wF=n(va,"P",{});var DBe=s(wF);Ysr=r(DBe,"The model is set in evaluation mode by default using "),K1e=n(DBe,"CODE",{});var m3t=s(K1e);Ksr=r(m3t,"model.eval()"),m3t.forEach(t),Zsr=r(DBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=n(DBe,"CODE",{});var g3t=s(Z1e);elr=r(g3t,"model.train()"),g3t.forEach(t),DBe.forEach(t),olr=i(va),T(AF.$$.fragment,va),va.forEach(t),ml.forEach(t),bVe=i(f),Ad=n(f,"H2",{class:!0});var Cze=s(Ad);LF=n(Cze,"A",{id:!0,class:!0,href:!0});var h3t=s(LF);e2e=n(h3t,"SPAN",{});var p3t=s(e2e);T(y8.$$.fragment,p3t),p3t.forEach(t),h3t.forEach(t),rlr=i(Cze),o2e=n(Cze,"SPAN",{});var _3t=s(o2e);tlr=r(_3t,"AutoModelForAudioClassification"),_3t.forEach(t),Cze.forEach(t),vVe=i(f),Xo=n(f,"DIV",{class:!0});var gl=s(Xo);T(x8.$$.fragment,gl),alr=i(gl),Ld=n(gl,"P",{});var vre=s(Ld);nlr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iW=n(vre,"A",{href:!0});var u3t=s(iW);slr=r(u3t,"from_pretrained()"),u3t.forEach(t),llr=r(vre," class method or the "),dW=n(vre,"A",{href:!0});var b3t=s(dW);ilr=r(b3t,"from_config()"),b3t.forEach(t),dlr=r(vre,` class
method.`),vre.forEach(t),clr=i(gl),$8=n(gl,"P",{});var wze=s($8);flr=r(wze,"This class cannot be instantiated directly using "),r2e=n(wze,"CODE",{});var v3t=s(r2e);mlr=r(v3t,"__init__()"),v3t.forEach(t),glr=r(wze," (throws an error)."),wze.forEach(t),hlr=i(gl),Tt=n(gl,"DIV",{class:!0});var u6=s(Tt);T(k8.$$.fragment,u6),plr=i(u6),t2e=n(u6,"P",{});var F3t=s(t2e);_lr=r(F3t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),F3t.forEach(t),ulr=i(u6),yd=n(u6,"P",{});var Fre=s(yd);blr=r(Fre,`Note:
Loading a model from its configuration file does `),a2e=n(Fre,"STRONG",{});var T3t=s(a2e);vlr=r(T3t,"not"),T3t.forEach(t),Flr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Fre,"A",{href:!0});var M3t=s(cW);Tlr=r(M3t,"from_pretrained()"),M3t.forEach(t),Mlr=r(Fre," to load the model weights."),Fre.forEach(t),Elr=i(u6),T(yF.$$.fragment,u6),u6.forEach(t),Clr=i(gl),fo=n(gl,"DIV",{class:!0});var Fa=s(fo);T(S8.$$.fragment,Fa),wlr=i(Fa),n2e=n(Fa,"P",{});var E3t=s(n2e);Alr=r(E3t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),E3t.forEach(t),Llr=i(Fa),Ha=n(Fa,"P",{});var b6=s(Ha);ylr=r(b6,"The model class to instantiate is selected based on the "),s2e=n(b6,"CODE",{});var C3t=s(s2e);xlr=r(C3t,"model_type"),C3t.forEach(t),$lr=r(b6,` property of the config object (either
passed as an argument or loaded from `),l2e=n(b6,"CODE",{});var w3t=s(l2e);klr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),Slr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(b6,"CODE",{});var A3t=s(i2e);Rlr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),Plr=r(b6,":"),b6.forEach(t),Blr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);xF=n(ze,"LI",{});var GBe=s(xF);d2e=n(GBe,"STRONG",{});var L3t=s(d2e);Ilr=r(L3t,"data2vec-audio"),L3t.forEach(t),Nlr=r(GBe," \u2014 "),fW=n(GBe,"A",{href:!0});var y3t=s(fW);qlr=r(y3t,"Data2VecAudioForSequenceClassification"),y3t.forEach(t),jlr=r(GBe," (Data2VecAudio model)"),GBe.forEach(t),Dlr=i(ze),$F=n(ze,"LI",{});var OBe=s($F);c2e=n(OBe,"STRONG",{});var x3t=s(c2e);Glr=r(x3t,"hubert"),x3t.forEach(t),Olr=r(OBe," \u2014 "),mW=n(OBe,"A",{href:!0});var $3t=s(mW);Vlr=r($3t,"HubertForSequenceClassification"),$3t.forEach(t),Xlr=r(OBe," (Hubert model)"),OBe.forEach(t),zlr=i(ze),kF=n(ze,"LI",{});var VBe=s(kF);f2e=n(VBe,"STRONG",{});var k3t=s(f2e);Qlr=r(k3t,"sew"),k3t.forEach(t),Wlr=r(VBe," \u2014 "),gW=n(VBe,"A",{href:!0});var S3t=s(gW);Hlr=r(S3t,"SEWForSequenceClassification"),S3t.forEach(t),Ulr=r(VBe," (SEW model)"),VBe.forEach(t),Jlr=i(ze),SF=n(ze,"LI",{});var XBe=s(SF);m2e=n(XBe,"STRONG",{});var R3t=s(m2e);Ylr=r(R3t,"sew-d"),R3t.forEach(t),Klr=r(XBe," \u2014 "),hW=n(XBe,"A",{href:!0});var P3t=s(hW);Zlr=r(P3t,"SEWDForSequenceClassification"),P3t.forEach(t),eir=r(XBe," (SEW-D model)"),XBe.forEach(t),oir=i(ze),RF=n(ze,"LI",{});var zBe=s(RF);g2e=n(zBe,"STRONG",{});var B3t=s(g2e);rir=r(B3t,"unispeech"),B3t.forEach(t),tir=r(zBe," \u2014 "),pW=n(zBe,"A",{href:!0});var I3t=s(pW);air=r(I3t,"UniSpeechForSequenceClassification"),I3t.forEach(t),nir=r(zBe," (UniSpeech model)"),zBe.forEach(t),sir=i(ze),PF=n(ze,"LI",{});var QBe=s(PF);h2e=n(QBe,"STRONG",{});var N3t=s(h2e);lir=r(N3t,"unispeech-sat"),N3t.forEach(t),iir=r(QBe," \u2014 "),_W=n(QBe,"A",{href:!0});var q3t=s(_W);dir=r(q3t,"UniSpeechSatForSequenceClassification"),q3t.forEach(t),cir=r(QBe," (UniSpeechSat model)"),QBe.forEach(t),fir=i(ze),BF=n(ze,"LI",{});var WBe=s(BF);p2e=n(WBe,"STRONG",{});var j3t=s(p2e);mir=r(j3t,"wav2vec2"),j3t.forEach(t),gir=r(WBe," \u2014 "),uW=n(WBe,"A",{href:!0});var D3t=s(uW);hir=r(D3t,"Wav2Vec2ForSequenceClassification"),D3t.forEach(t),pir=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),_ir=i(ze),IF=n(ze,"LI",{});var HBe=s(IF);_2e=n(HBe,"STRONG",{});var G3t=s(_2e);uir=r(G3t,"wav2vec2-conformer"),G3t.forEach(t),bir=r(HBe," \u2014 "),bW=n(HBe,"A",{href:!0});var O3t=s(bW);vir=r(O3t,"Wav2Vec2ConformerForSequenceClassification"),O3t.forEach(t),Fir=r(HBe," (Wav2Vec2-Conformer model)"),HBe.forEach(t),Tir=i(ze),NF=n(ze,"LI",{});var UBe=s(NF);u2e=n(UBe,"STRONG",{});var V3t=s(u2e);Mir=r(V3t,"wavlm"),V3t.forEach(t),Eir=r(UBe," \u2014 "),vW=n(UBe,"A",{href:!0});var X3t=s(vW);Cir=r(X3t,"WavLMForSequenceClassification"),X3t.forEach(t),wir=r(UBe," (WavLM model)"),UBe.forEach(t),ze.forEach(t),Air=i(Fa),qF=n(Fa,"P",{});var JBe=s(qF);Lir=r(JBe,"The model is set in evaluation mode by default using "),b2e=n(JBe,"CODE",{});var z3t=s(b2e);yir=r(z3t,"model.eval()"),z3t.forEach(t),xir=r(JBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(JBe,"CODE",{});var Q3t=s(v2e);$ir=r(Q3t,"model.train()"),Q3t.forEach(t),JBe.forEach(t),kir=i(Fa),T(jF.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),FVe=i(f),xd=n(f,"H2",{class:!0});var Aze=s(xd);DF=n(Aze,"A",{id:!0,class:!0,href:!0});var W3t=s(DF);F2e=n(W3t,"SPAN",{});var H3t=s(F2e);T(R8.$$.fragment,H3t),H3t.forEach(t),W3t.forEach(t),Sir=i(Aze),T2e=n(Aze,"SPAN",{});var U3t=s(T2e);Rir=r(U3t,"AutoModelForAudioFrameClassification"),U3t.forEach(t),Aze.forEach(t),TVe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(P8.$$.fragment,hl),Pir=i(hl),$d=n(hl,"P",{});var Tre=s($d);Bir=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FW=n(Tre,"A",{href:!0});var J3t=s(FW);Iir=r(J3t,"from_pretrained()"),J3t.forEach(t),Nir=r(Tre," class method or the "),TW=n(Tre,"A",{href:!0});var Y3t=s(TW);qir=r(Y3t,"from_config()"),Y3t.forEach(t),jir=r(Tre,` class
method.`),Tre.forEach(t),Dir=i(hl),B8=n(hl,"P",{});var Lze=s(B8);Gir=r(Lze,"This class cannot be instantiated directly using "),M2e=n(Lze,"CODE",{});var K3t=s(M2e);Oir=r(K3t,"__init__()"),K3t.forEach(t),Vir=r(Lze," (throws an error)."),Lze.forEach(t),Xir=i(hl),Mt=n(hl,"DIV",{class:!0});var v6=s(Mt);T(I8.$$.fragment,v6),zir=i(v6),E2e=n(v6,"P",{});var Z3t=s(E2e);Qir=r(Z3t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Z3t.forEach(t),Wir=i(v6),kd=n(v6,"P",{});var Mre=s(kd);Hir=r(Mre,`Note:
Loading a model from its configuration file does `),C2e=n(Mre,"STRONG",{});var e0t=s(C2e);Uir=r(e0t,"not"),e0t.forEach(t),Jir=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Mre,"A",{href:!0});var o0t=s(MW);Yir=r(o0t,"from_pretrained()"),o0t.forEach(t),Kir=r(Mre," to load the model weights."),Mre.forEach(t),Zir=i(v6),T(GF.$$.fragment,v6),v6.forEach(t),edr=i(hl),mo=n(hl,"DIV",{class:!0});var Ta=s(mo);T(N8.$$.fragment,Ta),odr=i(Ta),w2e=n(Ta,"P",{});var r0t=s(w2e);rdr=r(r0t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),r0t.forEach(t),tdr=i(Ta),Ua=n(Ta,"P",{});var F6=s(Ua);adr=r(F6,"The model class to instantiate is selected based on the "),A2e=n(F6,"CODE",{});var t0t=s(A2e);ndr=r(t0t,"model_type"),t0t.forEach(t),sdr=r(F6,` property of the config object (either
passed as an argument or loaded from `),L2e=n(F6,"CODE",{});var a0t=s(L2e);ldr=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),idr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(F6,"CODE",{});var n0t=s(y2e);ddr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),cdr=r(F6,":"),F6.forEach(t),fdr=i(Ta),et=n(Ta,"UL",{});var pl=s(et);OF=n(pl,"LI",{});var YBe=s(OF);x2e=n(YBe,"STRONG",{});var s0t=s(x2e);mdr=r(s0t,"data2vec-audio"),s0t.forEach(t),gdr=r(YBe," \u2014 "),EW=n(YBe,"A",{href:!0});var l0t=s(EW);hdr=r(l0t,"Data2VecAudioForAudioFrameClassification"),l0t.forEach(t),pdr=r(YBe," (Data2VecAudio model)"),YBe.forEach(t),_dr=i(pl),VF=n(pl,"LI",{});var KBe=s(VF);$2e=n(KBe,"STRONG",{});var i0t=s($2e);udr=r(i0t,"unispeech-sat"),i0t.forEach(t),bdr=r(KBe," \u2014 "),CW=n(KBe,"A",{href:!0});var d0t=s(CW);vdr=r(d0t,"UniSpeechSatForAudioFrameClassification"),d0t.forEach(t),Fdr=r(KBe," (UniSpeechSat model)"),KBe.forEach(t),Tdr=i(pl),XF=n(pl,"LI",{});var ZBe=s(XF);k2e=n(ZBe,"STRONG",{});var c0t=s(k2e);Mdr=r(c0t,"wav2vec2"),c0t.forEach(t),Edr=r(ZBe," \u2014 "),wW=n(ZBe,"A",{href:!0});var f0t=s(wW);Cdr=r(f0t,"Wav2Vec2ForAudioFrameClassification"),f0t.forEach(t),wdr=r(ZBe," (Wav2Vec2 model)"),ZBe.forEach(t),Adr=i(pl),zF=n(pl,"LI",{});var eIe=s(zF);S2e=n(eIe,"STRONG",{});var m0t=s(S2e);Ldr=r(m0t,"wav2vec2-conformer"),m0t.forEach(t),ydr=r(eIe," \u2014 "),AW=n(eIe,"A",{href:!0});var g0t=s(AW);xdr=r(g0t,"Wav2Vec2ConformerForAudioFrameClassification"),g0t.forEach(t),$dr=r(eIe," (Wav2Vec2-Conformer model)"),eIe.forEach(t),kdr=i(pl),QF=n(pl,"LI",{});var oIe=s(QF);R2e=n(oIe,"STRONG",{});var h0t=s(R2e);Sdr=r(h0t,"wavlm"),h0t.forEach(t),Rdr=r(oIe," \u2014 "),LW=n(oIe,"A",{href:!0});var p0t=s(LW);Pdr=r(p0t,"WavLMForAudioFrameClassification"),p0t.forEach(t),Bdr=r(oIe," (WavLM model)"),oIe.forEach(t),pl.forEach(t),Idr=i(Ta),WF=n(Ta,"P",{});var rIe=s(WF);Ndr=r(rIe,"The model is set in evaluation mode by default using "),P2e=n(rIe,"CODE",{});var _0t=s(P2e);qdr=r(_0t,"model.eval()"),_0t.forEach(t),jdr=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(rIe,"CODE",{});var u0t=s(B2e);Ddr=r(u0t,"model.train()"),u0t.forEach(t),rIe.forEach(t),Gdr=i(Ta),T(HF.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),MVe=i(f),Sd=n(f,"H2",{class:!0});var yze=s(Sd);UF=n(yze,"A",{id:!0,class:!0,href:!0});var b0t=s(UF);I2e=n(b0t,"SPAN",{});var v0t=s(I2e);T(q8.$$.fragment,v0t),v0t.forEach(t),b0t.forEach(t),Odr=i(yze),N2e=n(yze,"SPAN",{});var F0t=s(N2e);Vdr=r(F0t,"AutoModelForCTC"),F0t.forEach(t),yze.forEach(t),EVe=i(f),Qo=n(f,"DIV",{class:!0});var _l=s(Qo);T(j8.$$.fragment,_l),Xdr=i(_l),Rd=n(_l,"P",{});var Ere=s(Rd);zdr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yW=n(Ere,"A",{href:!0});var T0t=s(yW);Qdr=r(T0t,"from_pretrained()"),T0t.forEach(t),Wdr=r(Ere," class method or the "),xW=n(Ere,"A",{href:!0});var M0t=s(xW);Hdr=r(M0t,"from_config()"),M0t.forEach(t),Udr=r(Ere,` class
method.`),Ere.forEach(t),Jdr=i(_l),D8=n(_l,"P",{});var xze=s(D8);Ydr=r(xze,"This class cannot be instantiated directly using "),q2e=n(xze,"CODE",{});var E0t=s(q2e);Kdr=r(E0t,"__init__()"),E0t.forEach(t),Zdr=r(xze," (throws an error)."),xze.forEach(t),ecr=i(_l),Et=n(_l,"DIV",{class:!0});var T6=s(Et);T(G8.$$.fragment,T6),ocr=i(T6),j2e=n(T6,"P",{});var C0t=s(j2e);rcr=r(C0t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),C0t.forEach(t),tcr=i(T6),Pd=n(T6,"P",{});var Cre=s(Pd);acr=r(Cre,`Note:
Loading a model from its configuration file does `),D2e=n(Cre,"STRONG",{});var w0t=s(D2e);ncr=r(w0t,"not"),w0t.forEach(t),scr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Cre,"A",{href:!0});var A0t=s($W);lcr=r(A0t,"from_pretrained()"),A0t.forEach(t),icr=r(Cre," to load the model weights."),Cre.forEach(t),dcr=i(T6),T(JF.$$.fragment,T6),T6.forEach(t),ccr=i(_l),go=n(_l,"DIV",{class:!0});var Ma=s(go);T(O8.$$.fragment,Ma),fcr=i(Ma),G2e=n(Ma,"P",{});var L0t=s(G2e);mcr=r(L0t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),L0t.forEach(t),gcr=i(Ma),Ja=n(Ma,"P",{});var M6=s(Ja);hcr=r(M6,"The model class to instantiate is selected based on the "),O2e=n(M6,"CODE",{});var y0t=s(O2e);pcr=r(y0t,"model_type"),y0t.forEach(t),_cr=r(M6,` property of the config object (either
passed as an argument or loaded from `),V2e=n(M6,"CODE",{});var x0t=s(V2e);ucr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),bcr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(M6,"CODE",{});var $0t=s(X2e);vcr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),Fcr=r(M6,":"),M6.forEach(t),Tcr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);YF=n(Be,"LI",{});var tIe=s(YF);z2e=n(tIe,"STRONG",{});var k0t=s(z2e);Mcr=r(k0t,"data2vec-audio"),k0t.forEach(t),Ecr=r(tIe," \u2014 "),kW=n(tIe,"A",{href:!0});var S0t=s(kW);Ccr=r(S0t,"Data2VecAudioForCTC"),S0t.forEach(t),wcr=r(tIe," (Data2VecAudio model)"),tIe.forEach(t),Acr=i(Be),KF=n(Be,"LI",{});var aIe=s(KF);Q2e=n(aIe,"STRONG",{});var R0t=s(Q2e);Lcr=r(R0t,"hubert"),R0t.forEach(t),ycr=r(aIe," \u2014 "),SW=n(aIe,"A",{href:!0});var P0t=s(SW);xcr=r(P0t,"HubertForCTC"),P0t.forEach(t),$cr=r(aIe," (Hubert model)"),aIe.forEach(t),kcr=i(Be),ZF=n(Be,"LI",{});var nIe=s(ZF);W2e=n(nIe,"STRONG",{});var B0t=s(W2e);Scr=r(B0t,"mctct"),B0t.forEach(t),Rcr=r(nIe," \u2014 "),RW=n(nIe,"A",{href:!0});var I0t=s(RW);Pcr=r(I0t,"MCTCTForCTC"),I0t.forEach(t),Bcr=r(nIe," (M-CTC-T model)"),nIe.forEach(t),Icr=i(Be),eT=n(Be,"LI",{});var sIe=s(eT);H2e=n(sIe,"STRONG",{});var N0t=s(H2e);Ncr=r(N0t,"sew"),N0t.forEach(t),qcr=r(sIe," \u2014 "),PW=n(sIe,"A",{href:!0});var q0t=s(PW);jcr=r(q0t,"SEWForCTC"),q0t.forEach(t),Dcr=r(sIe," (SEW model)"),sIe.forEach(t),Gcr=i(Be),oT=n(Be,"LI",{});var lIe=s(oT);U2e=n(lIe,"STRONG",{});var j0t=s(U2e);Ocr=r(j0t,"sew-d"),j0t.forEach(t),Vcr=r(lIe," \u2014 "),BW=n(lIe,"A",{href:!0});var D0t=s(BW);Xcr=r(D0t,"SEWDForCTC"),D0t.forEach(t),zcr=r(lIe," (SEW-D model)"),lIe.forEach(t),Qcr=i(Be),rT=n(Be,"LI",{});var iIe=s(rT);J2e=n(iIe,"STRONG",{});var G0t=s(J2e);Wcr=r(G0t,"unispeech"),G0t.forEach(t),Hcr=r(iIe," \u2014 "),IW=n(iIe,"A",{href:!0});var O0t=s(IW);Ucr=r(O0t,"UniSpeechForCTC"),O0t.forEach(t),Jcr=r(iIe," (UniSpeech model)"),iIe.forEach(t),Ycr=i(Be),tT=n(Be,"LI",{});var dIe=s(tT);Y2e=n(dIe,"STRONG",{});var V0t=s(Y2e);Kcr=r(V0t,"unispeech-sat"),V0t.forEach(t),Zcr=r(dIe," \u2014 "),NW=n(dIe,"A",{href:!0});var X0t=s(NW);efr=r(X0t,"UniSpeechSatForCTC"),X0t.forEach(t),ofr=r(dIe," (UniSpeechSat model)"),dIe.forEach(t),rfr=i(Be),aT=n(Be,"LI",{});var cIe=s(aT);K2e=n(cIe,"STRONG",{});var z0t=s(K2e);tfr=r(z0t,"wav2vec2"),z0t.forEach(t),afr=r(cIe," \u2014 "),qW=n(cIe,"A",{href:!0});var Q0t=s(qW);nfr=r(Q0t,"Wav2Vec2ForCTC"),Q0t.forEach(t),sfr=r(cIe," (Wav2Vec2 model)"),cIe.forEach(t),lfr=i(Be),nT=n(Be,"LI",{});var fIe=s(nT);Z2e=n(fIe,"STRONG",{});var W0t=s(Z2e);ifr=r(W0t,"wav2vec2-conformer"),W0t.forEach(t),dfr=r(fIe," \u2014 "),jW=n(fIe,"A",{href:!0});var H0t=s(jW);cfr=r(H0t,"Wav2Vec2ConformerForCTC"),H0t.forEach(t),ffr=r(fIe," (Wav2Vec2-Conformer model)"),fIe.forEach(t),mfr=i(Be),sT=n(Be,"LI",{});var mIe=s(sT);e4e=n(mIe,"STRONG",{});var U0t=s(e4e);gfr=r(U0t,"wavlm"),U0t.forEach(t),hfr=r(mIe," \u2014 "),DW=n(mIe,"A",{href:!0});var J0t=s(DW);pfr=r(J0t,"WavLMForCTC"),J0t.forEach(t),_fr=r(mIe," (WavLM model)"),mIe.forEach(t),Be.forEach(t),ufr=i(Ma),lT=n(Ma,"P",{});var gIe=s(lT);bfr=r(gIe,"The model is set in evaluation mode by default using "),o4e=n(gIe,"CODE",{});var Y0t=s(o4e);vfr=r(Y0t,"model.eval()"),Y0t.forEach(t),Ffr=r(gIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r4e=n(gIe,"CODE",{});var K0t=s(r4e);Tfr=r(K0t,"model.train()"),K0t.forEach(t),gIe.forEach(t),Mfr=i(Ma),T(iT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),CVe=i(f),Bd=n(f,"H2",{class:!0});var $ze=s(Bd);dT=n($ze,"A",{id:!0,class:!0,href:!0});var Z0t=s(dT);t4e=n(Z0t,"SPAN",{});var ewt=s(t4e);T(V8.$$.fragment,ewt),ewt.forEach(t),Z0t.forEach(t),Efr=i($ze),a4e=n($ze,"SPAN",{});var owt=s(a4e);Cfr=r(owt,"AutoModelForSpeechSeq2Seq"),owt.forEach(t),$ze.forEach(t),wVe=i(f),Wo=n(f,"DIV",{class:!0});var ul=s(Wo);T(X8.$$.fragment,ul),wfr=i(ul),Id=n(ul,"P",{});var wre=s(Id);Afr=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GW=n(wre,"A",{href:!0});var rwt=s(GW);Lfr=r(rwt,"from_pretrained()"),rwt.forEach(t),yfr=r(wre," class method or the "),OW=n(wre,"A",{href:!0});var twt=s(OW);xfr=r(twt,"from_config()"),twt.forEach(t),$fr=r(wre,` class
method.`),wre.forEach(t),kfr=i(ul),z8=n(ul,"P",{});var kze=s(z8);Sfr=r(kze,"This class cannot be instantiated directly using "),n4e=n(kze,"CODE",{});var awt=s(n4e);Rfr=r(awt,"__init__()"),awt.forEach(t),Pfr=r(kze," (throws an error)."),kze.forEach(t),Bfr=i(ul),Ct=n(ul,"DIV",{class:!0});var E6=s(Ct);T(Q8.$$.fragment,E6),Ifr=i(E6),s4e=n(E6,"P",{});var nwt=s(s4e);Nfr=r(nwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nwt.forEach(t),qfr=i(E6),Nd=n(E6,"P",{});var Are=s(Nd);jfr=r(Are,`Note:
Loading a model from its configuration file does `),l4e=n(Are,"STRONG",{});var swt=s(l4e);Dfr=r(swt,"not"),swt.forEach(t),Gfr=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Are,"A",{href:!0});var lwt=s(VW);Ofr=r(lwt,"from_pretrained()"),lwt.forEach(t),Vfr=r(Are," to load the model weights."),Are.forEach(t),Xfr=i(E6),T(cT.$$.fragment,E6),E6.forEach(t),zfr=i(ul),ho=n(ul,"DIV",{class:!0});var Ea=s(ho);T(W8.$$.fragment,Ea),Qfr=i(Ea),i4e=n(Ea,"P",{});var iwt=s(i4e);Wfr=r(iwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iwt.forEach(t),Hfr=i(Ea),Ya=n(Ea,"P",{});var C6=s(Ya);Ufr=r(C6,"The model class to instantiate is selected based on the "),d4e=n(C6,"CODE",{});var dwt=s(d4e);Jfr=r(dwt,"model_type"),dwt.forEach(t),Yfr=r(C6,` property of the config object (either
passed as an argument or loaded from `),c4e=n(C6,"CODE",{});var cwt=s(c4e);Kfr=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),Zfr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(C6,"CODE",{});var fwt=s(f4e);emr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),omr=r(C6,":"),C6.forEach(t),rmr=i(Ea),H8=n(Ea,"UL",{});var Sze=s(H8);fT=n(Sze,"LI",{});var hIe=s(fT);m4e=n(hIe,"STRONG",{});var mwt=s(m4e);tmr=r(mwt,"speech-encoder-decoder"),mwt.forEach(t),amr=r(hIe," \u2014 "),XW=n(hIe,"A",{href:!0});var gwt=s(XW);nmr=r(gwt,"SpeechEncoderDecoderModel"),gwt.forEach(t),smr=r(hIe," (Speech Encoder decoder model)"),hIe.forEach(t),lmr=i(Sze),mT=n(Sze,"LI",{});var pIe=s(mT);g4e=n(pIe,"STRONG",{});var hwt=s(g4e);imr=r(hwt,"speech_to_text"),hwt.forEach(t),dmr=r(pIe," \u2014 "),zW=n(pIe,"A",{href:!0});var pwt=s(zW);cmr=r(pwt,"Speech2TextForConditionalGeneration"),pwt.forEach(t),fmr=r(pIe," (Speech2Text model)"),pIe.forEach(t),Sze.forEach(t),mmr=i(Ea),gT=n(Ea,"P",{});var _Ie=s(gT);gmr=r(_Ie,"The model is set in evaluation mode by default using "),h4e=n(_Ie,"CODE",{});var _wt=s(h4e);hmr=r(_wt,"model.eval()"),_wt.forEach(t),pmr=r(_Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p4e=n(_Ie,"CODE",{});var uwt=s(p4e);_mr=r(uwt,"model.train()"),uwt.forEach(t),_Ie.forEach(t),umr=i(Ea),T(hT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),AVe=i(f),qd=n(f,"H2",{class:!0});var Rze=s(qd);pT=n(Rze,"A",{id:!0,class:!0,href:!0});var bwt=s(pT);_4e=n(bwt,"SPAN",{});var vwt=s(_4e);T(U8.$$.fragment,vwt),vwt.forEach(t),bwt.forEach(t),bmr=i(Rze),u4e=n(Rze,"SPAN",{});var Fwt=s(u4e);vmr=r(Fwt,"AutoModelForAudioXVector"),Fwt.forEach(t),Rze.forEach(t),LVe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(J8.$$.fragment,bl),Fmr=i(bl),jd=n(bl,"P",{});var Lre=s(jd);Tmr=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QW=n(Lre,"A",{href:!0});var Twt=s(QW);Mmr=r(Twt,"from_pretrained()"),Twt.forEach(t),Emr=r(Lre," class method or the "),WW=n(Lre,"A",{href:!0});var Mwt=s(WW);Cmr=r(Mwt,"from_config()"),Mwt.forEach(t),wmr=r(Lre,` class
method.`),Lre.forEach(t),Amr=i(bl),Y8=n(bl,"P",{});var Pze=s(Y8);Lmr=r(Pze,"This class cannot be instantiated directly using "),b4e=n(Pze,"CODE",{});var Ewt=s(b4e);ymr=r(Ewt,"__init__()"),Ewt.forEach(t),xmr=r(Pze," (throws an error)."),Pze.forEach(t),$mr=i(bl),wt=n(bl,"DIV",{class:!0});var w6=s(wt);T(K8.$$.fragment,w6),kmr=i(w6),v4e=n(w6,"P",{});var Cwt=s(v4e);Smr=r(Cwt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Cwt.forEach(t),Rmr=i(w6),Dd=n(w6,"P",{});var yre=s(Dd);Pmr=r(yre,`Note:
Loading a model from its configuration file does `),F4e=n(yre,"STRONG",{});var wwt=s(F4e);Bmr=r(wwt,"not"),wwt.forEach(t),Imr=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(yre,"A",{href:!0});var Awt=s(HW);Nmr=r(Awt,"from_pretrained()"),Awt.forEach(t),qmr=r(yre," to load the model weights."),yre.forEach(t),jmr=i(w6),T(_T.$$.fragment,w6),w6.forEach(t),Dmr=i(bl),po=n(bl,"DIV",{class:!0});var Ca=s(po);T(Z8.$$.fragment,Ca),Gmr=i(Ca),T4e=n(Ca,"P",{});var Lwt=s(T4e);Omr=r(Lwt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Lwt.forEach(t),Vmr=i(Ca),Ka=n(Ca,"P",{});var A6=s(Ka);Xmr=r(A6,"The model class to instantiate is selected based on the "),M4e=n(A6,"CODE",{});var ywt=s(M4e);zmr=r(ywt,"model_type"),ywt.forEach(t),Qmr=r(A6,` property of the config object (either
passed as an argument or loaded from `),E4e=n(A6,"CODE",{});var xwt=s(E4e);Wmr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),Hmr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(A6,"CODE",{});var $wt=s(C4e);Umr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),Jmr=r(A6,":"),A6.forEach(t),Ymr=i(Ca),ot=n(Ca,"UL",{});var vl=s(ot);uT=n(vl,"LI",{});var uIe=s(uT);w4e=n(uIe,"STRONG",{});var kwt=s(w4e);Kmr=r(kwt,"data2vec-audio"),kwt.forEach(t),Zmr=r(uIe," \u2014 "),UW=n(uIe,"A",{href:!0});var Swt=s(UW);egr=r(Swt,"Data2VecAudioForXVector"),Swt.forEach(t),ogr=r(uIe," (Data2VecAudio model)"),uIe.forEach(t),rgr=i(vl),bT=n(vl,"LI",{});var bIe=s(bT);A4e=n(bIe,"STRONG",{});var Rwt=s(A4e);tgr=r(Rwt,"unispeech-sat"),Rwt.forEach(t),agr=r(bIe," \u2014 "),JW=n(bIe,"A",{href:!0});var Pwt=s(JW);ngr=r(Pwt,"UniSpeechSatForXVector"),Pwt.forEach(t),sgr=r(bIe," (UniSpeechSat model)"),bIe.forEach(t),lgr=i(vl),vT=n(vl,"LI",{});var vIe=s(vT);L4e=n(vIe,"STRONG",{});var Bwt=s(L4e);igr=r(Bwt,"wav2vec2"),Bwt.forEach(t),dgr=r(vIe," \u2014 "),YW=n(vIe,"A",{href:!0});var Iwt=s(YW);cgr=r(Iwt,"Wav2Vec2ForXVector"),Iwt.forEach(t),fgr=r(vIe," (Wav2Vec2 model)"),vIe.forEach(t),mgr=i(vl),FT=n(vl,"LI",{});var FIe=s(FT);y4e=n(FIe,"STRONG",{});var Nwt=s(y4e);ggr=r(Nwt,"wav2vec2-conformer"),Nwt.forEach(t),hgr=r(FIe," \u2014 "),KW=n(FIe,"A",{href:!0});var qwt=s(KW);pgr=r(qwt,"Wav2Vec2ConformerForXVector"),qwt.forEach(t),_gr=r(FIe," (Wav2Vec2-Conformer model)"),FIe.forEach(t),ugr=i(vl),TT=n(vl,"LI",{});var TIe=s(TT);x4e=n(TIe,"STRONG",{});var jwt=s(x4e);bgr=r(jwt,"wavlm"),jwt.forEach(t),vgr=r(TIe," \u2014 "),ZW=n(TIe,"A",{href:!0});var Dwt=s(ZW);Fgr=r(Dwt,"WavLMForXVector"),Dwt.forEach(t),Tgr=r(TIe," (WavLM model)"),TIe.forEach(t),vl.forEach(t),Mgr=i(Ca),MT=n(Ca,"P",{});var MIe=s(MT);Egr=r(MIe,"The model is set in evaluation mode by default using "),$4e=n(MIe,"CODE",{});var Gwt=s($4e);Cgr=r(Gwt,"model.eval()"),Gwt.forEach(t),wgr=r(MIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k4e=n(MIe,"CODE",{});var Owt=s(k4e);Agr=r(Owt,"model.train()"),Owt.forEach(t),MIe.forEach(t),Lgr=i(Ca),T(ET.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),yVe=i(f),Gd=n(f,"H2",{class:!0});var Bze=s(Gd);CT=n(Bze,"A",{id:!0,class:!0,href:!0});var Vwt=s(CT);S4e=n(Vwt,"SPAN",{});var Xwt=s(S4e);T(e9.$$.fragment,Xwt),Xwt.forEach(t),Vwt.forEach(t),ygr=i(Bze),R4e=n(Bze,"SPAN",{});var zwt=s(R4e);xgr=r(zwt,"AutoModelForMaskedImageModeling"),zwt.forEach(t),Bze.forEach(t),xVe=i(f),Uo=n(f,"DIV",{class:!0});var Fl=s(Uo);T(o9.$$.fragment,Fl),$gr=i(Fl),Od=n(Fl,"P",{});var xre=s(Od);kgr=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eH=n(xre,"A",{href:!0});var Qwt=s(eH);Sgr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),Rgr=r(xre," class method or the "),oH=n(xre,"A",{href:!0});var Wwt=s(oH);Pgr=r(Wwt,"from_config()"),Wwt.forEach(t),Bgr=r(xre,` class
method.`),xre.forEach(t),Igr=i(Fl),r9=n(Fl,"P",{});var Ize=s(r9);Ngr=r(Ize,"This class cannot be instantiated directly using "),P4e=n(Ize,"CODE",{});var Hwt=s(P4e);qgr=r(Hwt,"__init__()"),Hwt.forEach(t),jgr=r(Ize," (throws an error)."),Ize.forEach(t),Dgr=i(Fl),At=n(Fl,"DIV",{class:!0});var L6=s(At);T(t9.$$.fragment,L6),Ggr=i(L6),B4e=n(L6,"P",{});var Uwt=s(B4e);Ogr=r(Uwt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Uwt.forEach(t),Vgr=i(L6),Vd=n(L6,"P",{});var $re=s(Vd);Xgr=r($re,`Note:
Loading a model from its configuration file does `),I4e=n($re,"STRONG",{});var Jwt=s(I4e);zgr=r(Jwt,"not"),Jwt.forEach(t),Qgr=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n($re,"A",{href:!0});var Ywt=s(rH);Wgr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),Hgr=r($re," to load the model weights."),$re.forEach(t),Ugr=i(L6),T(wT.$$.fragment,L6),L6.forEach(t),Jgr=i(Fl),_o=n(Fl,"DIV",{class:!0});var wa=s(_o);T(a9.$$.fragment,wa),Ygr=i(wa),N4e=n(wa,"P",{});var Kwt=s(N4e);Kgr=r(Kwt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Kwt.forEach(t),Zgr=i(wa),Za=n(wa,"P",{});var y6=s(Za);ehr=r(y6,"The model class to instantiate is selected based on the "),q4e=n(y6,"CODE",{});var Zwt=s(q4e);ohr=r(Zwt,"model_type"),Zwt.forEach(t),rhr=r(y6,` property of the config object (either
passed as an argument or loaded from `),j4e=n(y6,"CODE",{});var eAt=s(j4e);thr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),ahr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(y6,"CODE",{});var oAt=s(D4e);nhr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),shr=r(y6,":"),y6.forEach(t),lhr=i(wa),Xd=n(wa,"UL",{});var kre=s(Xd);AT=n(kre,"LI",{});var EIe=s(AT);G4e=n(EIe,"STRONG",{});var rAt=s(G4e);ihr=r(rAt,"deit"),rAt.forEach(t),dhr=r(EIe," \u2014 "),tH=n(EIe,"A",{href:!0});var tAt=s(tH);chr=r(tAt,"DeiTForMaskedImageModeling"),tAt.forEach(t),fhr=r(EIe," (DeiT model)"),EIe.forEach(t),mhr=i(kre),LT=n(kre,"LI",{});var CIe=s(LT);O4e=n(CIe,"STRONG",{});var aAt=s(O4e);ghr=r(aAt,"swin"),aAt.forEach(t),hhr=r(CIe," \u2014 "),aH=n(CIe,"A",{href:!0});var nAt=s(aH);phr=r(nAt,"SwinForMaskedImageModeling"),nAt.forEach(t),_hr=r(CIe," (Swin Transformer model)"),CIe.forEach(t),uhr=i(kre),yT=n(kre,"LI",{});var wIe=s(yT);V4e=n(wIe,"STRONG",{});var sAt=s(V4e);bhr=r(sAt,"vit"),sAt.forEach(t),vhr=r(wIe," \u2014 "),nH=n(wIe,"A",{href:!0});var lAt=s(nH);Fhr=r(lAt,"ViTForMaskedImageModeling"),lAt.forEach(t),Thr=r(wIe," (ViT model)"),wIe.forEach(t),kre.forEach(t),Mhr=i(wa),xT=n(wa,"P",{});var AIe=s(xT);Ehr=r(AIe,"The model is set in evaluation mode by default using "),X4e=n(AIe,"CODE",{});var iAt=s(X4e);Chr=r(iAt,"model.eval()"),iAt.forEach(t),whr=r(AIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z4e=n(AIe,"CODE",{});var dAt=s(z4e);Ahr=r(dAt,"model.train()"),dAt.forEach(t),AIe.forEach(t),Lhr=i(wa),T($T.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),$Ve=i(f),zd=n(f,"H2",{class:!0});var Nze=s(zd);kT=n(Nze,"A",{id:!0,class:!0,href:!0});var cAt=s(kT);Q4e=n(cAt,"SPAN",{});var fAt=s(Q4e);T(n9.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),yhr=i(Nze),W4e=n(Nze,"SPAN",{});var mAt=s(W4e);xhr=r(mAt,"AutoModelForObjectDetection"),mAt.forEach(t),Nze.forEach(t),kVe=i(f),Jo=n(f,"DIV",{class:!0});var Tl=s(Jo);T(s9.$$.fragment,Tl),$hr=i(Tl),Qd=n(Tl,"P",{});var Sre=s(Qd);khr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sH=n(Sre,"A",{href:!0});var gAt=s(sH);Shr=r(gAt,"from_pretrained()"),gAt.forEach(t),Rhr=r(Sre," class method or the "),lH=n(Sre,"A",{href:!0});var hAt=s(lH);Phr=r(hAt,"from_config()"),hAt.forEach(t),Bhr=r(Sre,` class
method.`),Sre.forEach(t),Ihr=i(Tl),l9=n(Tl,"P",{});var qze=s(l9);Nhr=r(qze,"This class cannot be instantiated directly using "),H4e=n(qze,"CODE",{});var pAt=s(H4e);qhr=r(pAt,"__init__()"),pAt.forEach(t),jhr=r(qze," (throws an error)."),qze.forEach(t),Dhr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var x6=s(Lt);T(i9.$$.fragment,x6),Ghr=i(x6),U4e=n(x6,"P",{});var _At=s(U4e);Ohr=r(_At,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_At.forEach(t),Vhr=i(x6),Wd=n(x6,"P",{});var Rre=s(Wd);Xhr=r(Rre,`Note:
Loading a model from its configuration file does `),J4e=n(Rre,"STRONG",{});var uAt=s(J4e);zhr=r(uAt,"not"),uAt.forEach(t),Qhr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(Rre,"A",{href:!0});var bAt=s(iH);Whr=r(bAt,"from_pretrained()"),bAt.forEach(t),Hhr=r(Rre," to load the model weights."),Rre.forEach(t),Uhr=i(x6),T(ST.$$.fragment,x6),x6.forEach(t),Jhr=i(Tl),uo=n(Tl,"DIV",{class:!0});var Aa=s(uo);T(d9.$$.fragment,Aa),Yhr=i(Aa),Y4e=n(Aa,"P",{});var vAt=s(Y4e);Khr=r(vAt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vAt.forEach(t),Zhr=i(Aa),en=n(Aa,"P",{});var $6=s(en);epr=r($6,"The model class to instantiate is selected based on the "),K4e=n($6,"CODE",{});var FAt=s(K4e);opr=r(FAt,"model_type"),FAt.forEach(t),rpr=r($6,` property of the config object (either
passed as an argument or loaded from `),Z4e=n($6,"CODE",{});var TAt=s(Z4e);tpr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),apr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n($6,"CODE",{});var MAt=s(ebe);npr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),spr=r($6,":"),$6.forEach(t),lpr=i(Aa),c9=n(Aa,"UL",{});var jze=s(c9);RT=n(jze,"LI",{});var LIe=s(RT);obe=n(LIe,"STRONG",{});var EAt=s(obe);ipr=r(EAt,"detr"),EAt.forEach(t),dpr=r(LIe," \u2014 "),dH=n(LIe,"A",{href:!0});var CAt=s(dH);cpr=r(CAt,"DetrForObjectDetection"),CAt.forEach(t),fpr=r(LIe," (DETR model)"),LIe.forEach(t),mpr=i(jze),PT=n(jze,"LI",{});var yIe=s(PT);rbe=n(yIe,"STRONG",{});var wAt=s(rbe);gpr=r(wAt,"yolos"),wAt.forEach(t),hpr=r(yIe," \u2014 "),cH=n(yIe,"A",{href:!0});var AAt=s(cH);ppr=r(AAt,"YolosForObjectDetection"),AAt.forEach(t),_pr=r(yIe," (YOLOS model)"),yIe.forEach(t),jze.forEach(t),upr=i(Aa),BT=n(Aa,"P",{});var xIe=s(BT);bpr=r(xIe,"The model is set in evaluation mode by default using "),tbe=n(xIe,"CODE",{});var LAt=s(tbe);vpr=r(LAt,"model.eval()"),LAt.forEach(t),Fpr=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(xIe,"CODE",{});var yAt=s(abe);Tpr=r(yAt,"model.train()"),yAt.forEach(t),xIe.forEach(t),Mpr=i(Aa),T(IT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),SVe=i(f),Hd=n(f,"H2",{class:!0});var Dze=s(Hd);NT=n(Dze,"A",{id:!0,class:!0,href:!0});var xAt=s(NT);nbe=n(xAt,"SPAN",{});var $At=s(nbe);T(f9.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),Epr=i(Dze),sbe=n(Dze,"SPAN",{});var kAt=s(sbe);Cpr=r(kAt,"AutoModelForImageSegmentation"),kAt.forEach(t),Dze.forEach(t),RVe=i(f),Yo=n(f,"DIV",{class:!0});var Ml=s(Yo);T(m9.$$.fragment,Ml),wpr=i(Ml),Ud=n(Ml,"P",{});var Pre=s(Ud);Apr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fH=n(Pre,"A",{href:!0});var SAt=s(fH);Lpr=r(SAt,"from_pretrained()"),SAt.forEach(t),ypr=r(Pre," class method or the "),mH=n(Pre,"A",{href:!0});var RAt=s(mH);xpr=r(RAt,"from_config()"),RAt.forEach(t),$pr=r(Pre,` class
method.`),Pre.forEach(t),kpr=i(Ml),g9=n(Ml,"P",{});var Gze=s(g9);Spr=r(Gze,"This class cannot be instantiated directly using "),lbe=n(Gze,"CODE",{});var PAt=s(lbe);Rpr=r(PAt,"__init__()"),PAt.forEach(t),Ppr=r(Gze," (throws an error)."),Gze.forEach(t),Bpr=i(Ml),yt=n(Ml,"DIV",{class:!0});var k6=s(yt);T(h9.$$.fragment,k6),Ipr=i(k6),ibe=n(k6,"P",{});var BAt=s(ibe);Npr=r(BAt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),BAt.forEach(t),qpr=i(k6),Jd=n(k6,"P",{});var Bre=s(Jd);jpr=r(Bre,`Note:
Loading a model from its configuration file does `),dbe=n(Bre,"STRONG",{});var IAt=s(dbe);Dpr=r(IAt,"not"),IAt.forEach(t),Gpr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(Bre,"A",{href:!0});var NAt=s(gH);Opr=r(NAt,"from_pretrained()"),NAt.forEach(t),Vpr=r(Bre," to load the model weights."),Bre.forEach(t),Xpr=i(k6),T(qT.$$.fragment,k6),k6.forEach(t),zpr=i(Ml),bo=n(Ml,"DIV",{class:!0});var La=s(bo);T(p9.$$.fragment,La),Qpr=i(La),cbe=n(La,"P",{});var qAt=s(cbe);Wpr=r(qAt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qAt.forEach(t),Hpr=i(La),on=n(La,"P",{});var S6=s(on);Upr=r(S6,"The model class to instantiate is selected based on the "),fbe=n(S6,"CODE",{});var jAt=s(fbe);Jpr=r(jAt,"model_type"),jAt.forEach(t),Ypr=r(S6,` property of the config object (either
passed as an argument or loaded from `),mbe=n(S6,"CODE",{});var DAt=s(mbe);Kpr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),Zpr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(S6,"CODE",{});var GAt=s(gbe);e_r=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),o_r=r(S6,":"),S6.forEach(t),r_r=i(La),hbe=n(La,"UL",{});var OAt=s(hbe);jT=n(OAt,"LI",{});var $Ie=s(jT);pbe=n($Ie,"STRONG",{});var VAt=s(pbe);t_r=r(VAt,"detr"),VAt.forEach(t),a_r=r($Ie," \u2014 "),hH=n($Ie,"A",{href:!0});var XAt=s(hH);n_r=r(XAt,"DetrForSegmentation"),XAt.forEach(t),s_r=r($Ie," (DETR model)"),$Ie.forEach(t),OAt.forEach(t),l_r=i(La),DT=n(La,"P",{});var kIe=s(DT);i_r=r(kIe,"The model is set in evaluation mode by default using "),_be=n(kIe,"CODE",{});var zAt=s(_be);d_r=r(zAt,"model.eval()"),zAt.forEach(t),c_r=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=n(kIe,"CODE",{});var QAt=s(ube);f_r=r(QAt,"model.train()"),QAt.forEach(t),kIe.forEach(t),m_r=i(La),T(GT.$$.fragment,La),La.forEach(t),Ml.forEach(t),PVe=i(f),Yd=n(f,"H2",{class:!0});var Oze=s(Yd);OT=n(Oze,"A",{id:!0,class:!0,href:!0});var WAt=s(OT);bbe=n(WAt,"SPAN",{});var HAt=s(bbe);T(_9.$$.fragment,HAt),HAt.forEach(t),WAt.forEach(t),g_r=i(Oze),vbe=n(Oze,"SPAN",{});var UAt=s(vbe);h_r=r(UAt,"AutoModelForSemanticSegmentation"),UAt.forEach(t),Oze.forEach(t),BVe=i(f),Ko=n(f,"DIV",{class:!0});var El=s(Ko);T(u9.$$.fragment,El),p_r=i(El),Kd=n(El,"P",{});var Ire=s(Kd);__r=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pH=n(Ire,"A",{href:!0});var JAt=s(pH);u_r=r(JAt,"from_pretrained()"),JAt.forEach(t),b_r=r(Ire," class method or the "),_H=n(Ire,"A",{href:!0});var YAt=s(_H);v_r=r(YAt,"from_config()"),YAt.forEach(t),F_r=r(Ire,` class
method.`),Ire.forEach(t),T_r=i(El),b9=n(El,"P",{});var Vze=s(b9);M_r=r(Vze,"This class cannot be instantiated directly using "),Fbe=n(Vze,"CODE",{});var KAt=s(Fbe);E_r=r(KAt,"__init__()"),KAt.forEach(t),C_r=r(Vze," (throws an error)."),Vze.forEach(t),w_r=i(El),xt=n(El,"DIV",{class:!0});var R6=s(xt);T(v9.$$.fragment,R6),A_r=i(R6),Tbe=n(R6,"P",{});var ZAt=s(Tbe);L_r=r(ZAt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ZAt.forEach(t),y_r=i(R6),Zd=n(R6,"P",{});var Nre=s(Zd);x_r=r(Nre,`Note:
Loading a model from its configuration file does `),Mbe=n(Nre,"STRONG",{});var e6t=s(Mbe);$_r=r(e6t,"not"),e6t.forEach(t),k_r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(Nre,"A",{href:!0});var o6t=s(uH);S_r=r(o6t,"from_pretrained()"),o6t.forEach(t),R_r=r(Nre," to load the model weights."),Nre.forEach(t),P_r=i(R6),T(VT.$$.fragment,R6),R6.forEach(t),B_r=i(El),vo=n(El,"DIV",{class:!0});var ya=s(vo);T(F9.$$.fragment,ya),I_r=i(ya),Ebe=n(ya,"P",{});var r6t=s(Ebe);N_r=r(r6t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),r6t.forEach(t),q_r=i(ya),rn=n(ya,"P",{});var P6=s(rn);j_r=r(P6,"The model class to instantiate is selected based on the "),Cbe=n(P6,"CODE",{});var t6t=s(Cbe);D_r=r(t6t,"model_type"),t6t.forEach(t),G_r=r(P6,` property of the config object (either
passed as an argument or loaded from `),wbe=n(P6,"CODE",{});var a6t=s(wbe);O_r=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),V_r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(P6,"CODE",{});var n6t=s(Abe);X_r=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),z_r=r(P6,":"),P6.forEach(t),Q_r=i(ya),tn=n(ya,"UL",{});var B6=s(tn);XT=n(B6,"LI",{});var SIe=s(XT);Lbe=n(SIe,"STRONG",{});var s6t=s(Lbe);W_r=r(s6t,"beit"),s6t.forEach(t),H_r=r(SIe," \u2014 "),bH=n(SIe,"A",{href:!0});var l6t=s(bH);U_r=r(l6t,"BeitForSemanticSegmentation"),l6t.forEach(t),J_r=r(SIe," (BEiT model)"),SIe.forEach(t),Y_r=i(B6),zT=n(B6,"LI",{});var RIe=s(zT);ybe=n(RIe,"STRONG",{});var i6t=s(ybe);K_r=r(i6t,"data2vec-vision"),i6t.forEach(t),Z_r=r(RIe," \u2014 "),vH=n(RIe,"A",{href:!0});var d6t=s(vH);eur=r(d6t,"Data2VecVisionForSemanticSegmentation"),d6t.forEach(t),our=r(RIe," (Data2VecVision model)"),RIe.forEach(t),rur=i(B6),QT=n(B6,"LI",{});var PIe=s(QT);xbe=n(PIe,"STRONG",{});var c6t=s(xbe);tur=r(c6t,"dpt"),c6t.forEach(t),aur=r(PIe," \u2014 "),FH=n(PIe,"A",{href:!0});var f6t=s(FH);nur=r(f6t,"DPTForSemanticSegmentation"),f6t.forEach(t),sur=r(PIe," (DPT model)"),PIe.forEach(t),lur=i(B6),WT=n(B6,"LI",{});var BIe=s(WT);$be=n(BIe,"STRONG",{});var m6t=s($be);iur=r(m6t,"segformer"),m6t.forEach(t),dur=r(BIe," \u2014 "),TH=n(BIe,"A",{href:!0});var g6t=s(TH);cur=r(g6t,"SegformerForSemanticSegmentation"),g6t.forEach(t),fur=r(BIe," (SegFormer model)"),BIe.forEach(t),B6.forEach(t),mur=i(ya),HT=n(ya,"P",{});var IIe=s(HT);gur=r(IIe,"The model is set in evaluation mode by default using "),kbe=n(IIe,"CODE",{});var h6t=s(kbe);hur=r(h6t,"model.eval()"),h6t.forEach(t),pur=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(IIe,"CODE",{});var p6t=s(Sbe);_ur=r(p6t,"model.train()"),p6t.forEach(t),IIe.forEach(t),uur=i(ya),T(UT.$$.fragment,ya),ya.forEach(t),El.forEach(t),IVe=i(f),ec=n(f,"H2",{class:!0});var Xze=s(ec);JT=n(Xze,"A",{id:!0,class:!0,href:!0});var _6t=s(JT);Rbe=n(_6t,"SPAN",{});var u6t=s(Rbe);T(T9.$$.fragment,u6t),u6t.forEach(t),_6t.forEach(t),bur=i(Xze),Pbe=n(Xze,"SPAN",{});var b6t=s(Pbe);vur=r(b6t,"AutoModelForInstanceSegmentation"),b6t.forEach(t),Xze.forEach(t),NVe=i(f),Zo=n(f,"DIV",{class:!0});var Cl=s(Zo);T(M9.$$.fragment,Cl),Fur=i(Cl),oc=n(Cl,"P",{});var qre=s(oc);Tur=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),MH=n(qre,"A",{href:!0});var v6t=s(MH);Mur=r(v6t,"from_pretrained()"),v6t.forEach(t),Eur=r(qre," class method or the "),EH=n(qre,"A",{href:!0});var F6t=s(EH);Cur=r(F6t,"from_config()"),F6t.forEach(t),wur=r(qre,` class
method.`),qre.forEach(t),Aur=i(Cl),E9=n(Cl,"P",{});var zze=s(E9);Lur=r(zze,"This class cannot be instantiated directly using "),Bbe=n(zze,"CODE",{});var T6t=s(Bbe);yur=r(T6t,"__init__()"),T6t.forEach(t),xur=r(zze," (throws an error)."),zze.forEach(t),$ur=i(Cl),$t=n(Cl,"DIV",{class:!0});var I6=s($t);T(C9.$$.fragment,I6),kur=i(I6),Ibe=n(I6,"P",{});var M6t=s(Ibe);Sur=r(M6t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),M6t.forEach(t),Rur=i(I6),rc=n(I6,"P",{});var jre=s(rc);Pur=r(jre,`Note:
Loading a model from its configuration file does `),Nbe=n(jre,"STRONG",{});var E6t=s(Nbe);Bur=r(E6t,"not"),E6t.forEach(t),Iur=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(jre,"A",{href:!0});var C6t=s(CH);Nur=r(C6t,"from_pretrained()"),C6t.forEach(t),qur=r(jre," to load the model weights."),jre.forEach(t),jur=i(I6),T(YT.$$.fragment,I6),I6.forEach(t),Dur=i(Cl),Fo=n(Cl,"DIV",{class:!0});var xa=s(Fo);T(w9.$$.fragment,xa),Gur=i(xa),qbe=n(xa,"P",{});var w6t=s(qbe);Our=r(w6t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),w6t.forEach(t),Vur=i(xa),an=n(xa,"P",{});var N6=s(an);Xur=r(N6,"The model class to instantiate is selected based on the "),jbe=n(N6,"CODE",{});var A6t=s(jbe);zur=r(A6t,"model_type"),A6t.forEach(t),Qur=r(N6,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(N6,"CODE",{});var L6t=s(Dbe);Wur=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),Hur=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(N6,"CODE",{});var y6t=s(Gbe);Uur=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),Jur=r(N6,":"),N6.forEach(t),Yur=i(xa),Obe=n(xa,"UL",{});var x6t=s(Obe);KT=n(x6t,"LI",{});var NIe=s(KT);Vbe=n(NIe,"STRONG",{});var $6t=s(Vbe);Kur=r($6t,"maskformer"),$6t.forEach(t),Zur=r(NIe," \u2014 "),wH=n(NIe,"A",{href:!0});var k6t=s(wH);e5r=r(k6t,"MaskFormerForInstanceSegmentation"),k6t.forEach(t),o5r=r(NIe," (MaskFormer model)"),NIe.forEach(t),x6t.forEach(t),r5r=i(xa),ZT=n(xa,"P",{});var qIe=s(ZT);t5r=r(qIe,"The model is set in evaluation mode by default using "),Xbe=n(qIe,"CODE",{});var S6t=s(Xbe);a5r=r(S6t,"model.eval()"),S6t.forEach(t),n5r=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=n(qIe,"CODE",{});var R6t=s(zbe);s5r=r(R6t,"model.train()"),R6t.forEach(t),qIe.forEach(t),l5r=i(xa),T(e7.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),qVe=i(f),tc=n(f,"H2",{class:!0});var Qze=s(tc);o7=n(Qze,"A",{id:!0,class:!0,href:!0});var P6t=s(o7);Qbe=n(P6t,"SPAN",{});var B6t=s(Qbe);T(A9.$$.fragment,B6t),B6t.forEach(t),P6t.forEach(t),i5r=i(Qze),Wbe=n(Qze,"SPAN",{});var I6t=s(Wbe);d5r=r(I6t,"TFAutoModel"),I6t.forEach(t),Qze.forEach(t),jVe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(L9.$$.fragment,wl),c5r=i(wl),ac=n(wl,"P",{});var Dre=s(ac);f5r=r(Dre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AH=n(Dre,"A",{href:!0});var N6t=s(AH);m5r=r(N6t,"from_pretrained()"),N6t.forEach(t),g5r=r(Dre," class method or the "),LH=n(Dre,"A",{href:!0});var q6t=s(LH);h5r=r(q6t,"from_config()"),q6t.forEach(t),p5r=r(Dre,` class
method.`),Dre.forEach(t),_5r=i(wl),y9=n(wl,"P",{});var Wze=s(y9);u5r=r(Wze,"This class cannot be instantiated directly using "),Hbe=n(Wze,"CODE",{});var j6t=s(Hbe);b5r=r(j6t,"__init__()"),j6t.forEach(t),v5r=r(Wze," (throws an error)."),Wze.forEach(t),F5r=i(wl),kt=n(wl,"DIV",{class:!0});var q6=s(kt);T(x9.$$.fragment,q6),T5r=i(q6),Ube=n(q6,"P",{});var D6t=s(Ube);M5r=r(D6t,"Instantiates one of the base model classes of the library from a configuration."),D6t.forEach(t),E5r=i(q6),nc=n(q6,"P",{});var Gre=s(nc);C5r=r(Gre,`Note:
Loading a model from its configuration file does `),Jbe=n(Gre,"STRONG",{});var G6t=s(Jbe);w5r=r(G6t,"not"),G6t.forEach(t),A5r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(Gre,"A",{href:!0});var O6t=s(yH);L5r=r(O6t,"from_pretrained()"),O6t.forEach(t),y5r=r(Gre," to load the model weights."),Gre.forEach(t),x5r=i(q6),T(r7.$$.fragment,q6),q6.forEach(t),$5r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T($9.$$.fragment,Al),k5r=i(Al),Ybe=n(Al,"P",{});var V6t=s(Ybe);S5r=r(V6t,"Instantiate one of the base model classes of the library from a pretrained model."),V6t.forEach(t),R5r=i(Al),nn=n(Al,"P",{});var j6=s(nn);P5r=r(j6,"The model class to instantiate is selected based on the "),Kbe=n(j6,"CODE",{});var X6t=s(Kbe);B5r=r(X6t,"model_type"),X6t.forEach(t),I5r=r(j6,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(j6,"CODE",{});var z6t=s(Zbe);N5r=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),q5r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(j6,"CODE",{});var Q6t=s(eve);j5r=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),D5r=r(j6,":"),j6.forEach(t),G5r=i(Al),q=n(Al,"UL",{});var D=s(q);t7=n(D,"LI",{});var jIe=s(t7);ove=n(jIe,"STRONG",{});var W6t=s(ove);O5r=r(W6t,"albert"),W6t.forEach(t),V5r=r(jIe," \u2014 "),xH=n(jIe,"A",{href:!0});var H6t=s(xH);X5r=r(H6t,"TFAlbertModel"),H6t.forEach(t),z5r=r(jIe," (ALBERT model)"),jIe.forEach(t),Q5r=i(D),a7=n(D,"LI",{});var DIe=s(a7);rve=n(DIe,"STRONG",{});var U6t=s(rve);W5r=r(U6t,"bart"),U6t.forEach(t),H5r=r(DIe," \u2014 "),$H=n(DIe,"A",{href:!0});var J6t=s($H);U5r=r(J6t,"TFBartModel"),J6t.forEach(t),J5r=r(DIe," (BART model)"),DIe.forEach(t),Y5r=i(D),n7=n(D,"LI",{});var GIe=s(n7);tve=n(GIe,"STRONG",{});var Y6t=s(tve);K5r=r(Y6t,"bert"),Y6t.forEach(t),Z5r=r(GIe," \u2014 "),kH=n(GIe,"A",{href:!0});var K6t=s(kH);e1r=r(K6t,"TFBertModel"),K6t.forEach(t),o1r=r(GIe," (BERT model)"),GIe.forEach(t),r1r=i(D),s7=n(D,"LI",{});var OIe=s(s7);ave=n(OIe,"STRONG",{});var Z6t=s(ave);t1r=r(Z6t,"blenderbot"),Z6t.forEach(t),a1r=r(OIe," \u2014 "),SH=n(OIe,"A",{href:!0});var eLt=s(SH);n1r=r(eLt,"TFBlenderbotModel"),eLt.forEach(t),s1r=r(OIe," (Blenderbot model)"),OIe.forEach(t),l1r=i(D),l7=n(D,"LI",{});var VIe=s(l7);nve=n(VIe,"STRONG",{});var oLt=s(nve);i1r=r(oLt,"blenderbot-small"),oLt.forEach(t),d1r=r(VIe," \u2014 "),RH=n(VIe,"A",{href:!0});var rLt=s(RH);c1r=r(rLt,"TFBlenderbotSmallModel"),rLt.forEach(t),f1r=r(VIe," (BlenderbotSmall model)"),VIe.forEach(t),m1r=i(D),i7=n(D,"LI",{});var XIe=s(i7);sve=n(XIe,"STRONG",{});var tLt=s(sve);g1r=r(tLt,"camembert"),tLt.forEach(t),h1r=r(XIe," \u2014 "),PH=n(XIe,"A",{href:!0});var aLt=s(PH);p1r=r(aLt,"TFCamembertModel"),aLt.forEach(t),_1r=r(XIe," (CamemBERT model)"),XIe.forEach(t),u1r=i(D),d7=n(D,"LI",{});var zIe=s(d7);lve=n(zIe,"STRONG",{});var nLt=s(lve);b1r=r(nLt,"clip"),nLt.forEach(t),v1r=r(zIe," \u2014 "),BH=n(zIe,"A",{href:!0});var sLt=s(BH);F1r=r(sLt,"TFCLIPModel"),sLt.forEach(t),T1r=r(zIe," (CLIP model)"),zIe.forEach(t),M1r=i(D),c7=n(D,"LI",{});var QIe=s(c7);ive=n(QIe,"STRONG",{});var lLt=s(ive);E1r=r(lLt,"convbert"),lLt.forEach(t),C1r=r(QIe," \u2014 "),IH=n(QIe,"A",{href:!0});var iLt=s(IH);w1r=r(iLt,"TFConvBertModel"),iLt.forEach(t),A1r=r(QIe," (ConvBERT model)"),QIe.forEach(t),L1r=i(D),f7=n(D,"LI",{});var WIe=s(f7);dve=n(WIe,"STRONG",{});var dLt=s(dve);y1r=r(dLt,"convnext"),dLt.forEach(t),x1r=r(WIe," \u2014 "),NH=n(WIe,"A",{href:!0});var cLt=s(NH);$1r=r(cLt,"TFConvNextModel"),cLt.forEach(t),k1r=r(WIe," (ConvNeXT model)"),WIe.forEach(t),S1r=i(D),m7=n(D,"LI",{});var HIe=s(m7);cve=n(HIe,"STRONG",{});var fLt=s(cve);R1r=r(fLt,"ctrl"),fLt.forEach(t),P1r=r(HIe," \u2014 "),qH=n(HIe,"A",{href:!0});var mLt=s(qH);B1r=r(mLt,"TFCTRLModel"),mLt.forEach(t),I1r=r(HIe," (CTRL model)"),HIe.forEach(t),N1r=i(D),g7=n(D,"LI",{});var UIe=s(g7);fve=n(UIe,"STRONG",{});var gLt=s(fve);q1r=r(gLt,"data2vec-vision"),gLt.forEach(t),j1r=r(UIe," \u2014 "),jH=n(UIe,"A",{href:!0});var hLt=s(jH);D1r=r(hLt,"TFData2VecVisionModel"),hLt.forEach(t),G1r=r(UIe," (Data2VecVision model)"),UIe.forEach(t),O1r=i(D),h7=n(D,"LI",{});var JIe=s(h7);mve=n(JIe,"STRONG",{});var pLt=s(mve);V1r=r(pLt,"deberta"),pLt.forEach(t),X1r=r(JIe," \u2014 "),DH=n(JIe,"A",{href:!0});var _Lt=s(DH);z1r=r(_Lt,"TFDebertaModel"),_Lt.forEach(t),Q1r=r(JIe," (DeBERTa model)"),JIe.forEach(t),W1r=i(D),p7=n(D,"LI",{});var YIe=s(p7);gve=n(YIe,"STRONG",{});var uLt=s(gve);H1r=r(uLt,"deberta-v2"),uLt.forEach(t),U1r=r(YIe," \u2014 "),GH=n(YIe,"A",{href:!0});var bLt=s(GH);J1r=r(bLt,"TFDebertaV2Model"),bLt.forEach(t),Y1r=r(YIe," (DeBERTa-v2 model)"),YIe.forEach(t),K1r=i(D),_7=n(D,"LI",{});var KIe=s(_7);hve=n(KIe,"STRONG",{});var vLt=s(hve);Z1r=r(vLt,"distilbert"),vLt.forEach(t),e2r=r(KIe," \u2014 "),OH=n(KIe,"A",{href:!0});var FLt=s(OH);o2r=r(FLt,"TFDistilBertModel"),FLt.forEach(t),r2r=r(KIe," (DistilBERT model)"),KIe.forEach(t),t2r=i(D),u7=n(D,"LI",{});var ZIe=s(u7);pve=n(ZIe,"STRONG",{});var TLt=s(pve);a2r=r(TLt,"dpr"),TLt.forEach(t),n2r=r(ZIe," \u2014 "),VH=n(ZIe,"A",{href:!0});var MLt=s(VH);s2r=r(MLt,"TFDPRQuestionEncoder"),MLt.forEach(t),l2r=r(ZIe," (DPR model)"),ZIe.forEach(t),i2r=i(D),b7=n(D,"LI",{});var eNe=s(b7);_ve=n(eNe,"STRONG",{});var ELt=s(_ve);d2r=r(ELt,"electra"),ELt.forEach(t),c2r=r(eNe," \u2014 "),XH=n(eNe,"A",{href:!0});var CLt=s(XH);f2r=r(CLt,"TFElectraModel"),CLt.forEach(t),m2r=r(eNe," (ELECTRA model)"),eNe.forEach(t),g2r=i(D),v7=n(D,"LI",{});var oNe=s(v7);uve=n(oNe,"STRONG",{});var wLt=s(uve);h2r=r(wLt,"flaubert"),wLt.forEach(t),p2r=r(oNe," \u2014 "),zH=n(oNe,"A",{href:!0});var ALt=s(zH);_2r=r(ALt,"TFFlaubertModel"),ALt.forEach(t),u2r=r(oNe," (FlauBERT model)"),oNe.forEach(t),b2r=i(D),Hs=n(D,"LI",{});var hS=s(Hs);bve=n(hS,"STRONG",{});var LLt=s(bve);v2r=r(LLt,"funnel"),LLt.forEach(t),F2r=r(hS," \u2014 "),QH=n(hS,"A",{href:!0});var yLt=s(QH);T2r=r(yLt,"TFFunnelModel"),yLt.forEach(t),M2r=r(hS," or "),WH=n(hS,"A",{href:!0});var xLt=s(WH);E2r=r(xLt,"TFFunnelBaseModel"),xLt.forEach(t),C2r=r(hS," (Funnel Transformer model)"),hS.forEach(t),w2r=i(D),F7=n(D,"LI",{});var rNe=s(F7);vve=n(rNe,"STRONG",{});var $Lt=s(vve);A2r=r($Lt,"gpt2"),$Lt.forEach(t),L2r=r(rNe," \u2014 "),HH=n(rNe,"A",{href:!0});var kLt=s(HH);y2r=r(kLt,"TFGPT2Model"),kLt.forEach(t),x2r=r(rNe," (OpenAI GPT-2 model)"),rNe.forEach(t),$2r=i(D),T7=n(D,"LI",{});var tNe=s(T7);Fve=n(tNe,"STRONG",{});var SLt=s(Fve);k2r=r(SLt,"gptj"),SLt.forEach(t),S2r=r(tNe," \u2014 "),UH=n(tNe,"A",{href:!0});var RLt=s(UH);R2r=r(RLt,"TFGPTJModel"),RLt.forEach(t),P2r=r(tNe," (GPT-J model)"),tNe.forEach(t),B2r=i(D),M7=n(D,"LI",{});var aNe=s(M7);Tve=n(aNe,"STRONG",{});var PLt=s(Tve);I2r=r(PLt,"hubert"),PLt.forEach(t),N2r=r(aNe," \u2014 "),JH=n(aNe,"A",{href:!0});var BLt=s(JH);q2r=r(BLt,"TFHubertModel"),BLt.forEach(t),j2r=r(aNe," (Hubert model)"),aNe.forEach(t),D2r=i(D),E7=n(D,"LI",{});var nNe=s(E7);Mve=n(nNe,"STRONG",{});var ILt=s(Mve);G2r=r(ILt,"layoutlm"),ILt.forEach(t),O2r=r(nNe," \u2014 "),YH=n(nNe,"A",{href:!0});var NLt=s(YH);V2r=r(NLt,"TFLayoutLMModel"),NLt.forEach(t),X2r=r(nNe," (LayoutLM model)"),nNe.forEach(t),z2r=i(D),C7=n(D,"LI",{});var sNe=s(C7);Eve=n(sNe,"STRONG",{});var qLt=s(Eve);Q2r=r(qLt,"led"),qLt.forEach(t),W2r=r(sNe," \u2014 "),KH=n(sNe,"A",{href:!0});var jLt=s(KH);H2r=r(jLt,"TFLEDModel"),jLt.forEach(t),U2r=r(sNe," (LED model)"),sNe.forEach(t),J2r=i(D),w7=n(D,"LI",{});var lNe=s(w7);Cve=n(lNe,"STRONG",{});var DLt=s(Cve);Y2r=r(DLt,"longformer"),DLt.forEach(t),K2r=r(lNe," \u2014 "),ZH=n(lNe,"A",{href:!0});var GLt=s(ZH);Z2r=r(GLt,"TFLongformerModel"),GLt.forEach(t),e4r=r(lNe," (Longformer model)"),lNe.forEach(t),o4r=i(D),A7=n(D,"LI",{});var iNe=s(A7);wve=n(iNe,"STRONG",{});var OLt=s(wve);r4r=r(OLt,"lxmert"),OLt.forEach(t),t4r=r(iNe," \u2014 "),eU=n(iNe,"A",{href:!0});var VLt=s(eU);a4r=r(VLt,"TFLxmertModel"),VLt.forEach(t),n4r=r(iNe," (LXMERT model)"),iNe.forEach(t),s4r=i(D),L7=n(D,"LI",{});var dNe=s(L7);Ave=n(dNe,"STRONG",{});var XLt=s(Ave);l4r=r(XLt,"marian"),XLt.forEach(t),i4r=r(dNe," \u2014 "),oU=n(dNe,"A",{href:!0});var zLt=s(oU);d4r=r(zLt,"TFMarianModel"),zLt.forEach(t),c4r=r(dNe," (Marian model)"),dNe.forEach(t),f4r=i(D),y7=n(D,"LI",{});var cNe=s(y7);Lve=n(cNe,"STRONG",{});var QLt=s(Lve);m4r=r(QLt,"mbart"),QLt.forEach(t),g4r=r(cNe," \u2014 "),rU=n(cNe,"A",{href:!0});var WLt=s(rU);h4r=r(WLt,"TFMBartModel"),WLt.forEach(t),p4r=r(cNe," (mBART model)"),cNe.forEach(t),_4r=i(D),x7=n(D,"LI",{});var fNe=s(x7);yve=n(fNe,"STRONG",{});var HLt=s(yve);u4r=r(HLt,"mobilebert"),HLt.forEach(t),b4r=r(fNe," \u2014 "),tU=n(fNe,"A",{href:!0});var ULt=s(tU);v4r=r(ULt,"TFMobileBertModel"),ULt.forEach(t),F4r=r(fNe," (MobileBERT model)"),fNe.forEach(t),T4r=i(D),$7=n(D,"LI",{});var mNe=s($7);xve=n(mNe,"STRONG",{});var JLt=s(xve);M4r=r(JLt,"mpnet"),JLt.forEach(t),E4r=r(mNe," \u2014 "),aU=n(mNe,"A",{href:!0});var YLt=s(aU);C4r=r(YLt,"TFMPNetModel"),YLt.forEach(t),w4r=r(mNe," (MPNet model)"),mNe.forEach(t),A4r=i(D),k7=n(D,"LI",{});var gNe=s(k7);$ve=n(gNe,"STRONG",{});var KLt=s($ve);L4r=r(KLt,"mt5"),KLt.forEach(t),y4r=r(gNe," \u2014 "),nU=n(gNe,"A",{href:!0});var ZLt=s(nU);x4r=r(ZLt,"TFMT5Model"),ZLt.forEach(t),$4r=r(gNe," (MT5 model)"),gNe.forEach(t),k4r=i(D),S7=n(D,"LI",{});var hNe=s(S7);kve=n(hNe,"STRONG",{});var eyt=s(kve);S4r=r(eyt,"openai-gpt"),eyt.forEach(t),R4r=r(hNe," \u2014 "),sU=n(hNe,"A",{href:!0});var oyt=s(sU);P4r=r(oyt,"TFOpenAIGPTModel"),oyt.forEach(t),B4r=r(hNe," (OpenAI GPT model)"),hNe.forEach(t),I4r=i(D),R7=n(D,"LI",{});var pNe=s(R7);Sve=n(pNe,"STRONG",{});var ryt=s(Sve);N4r=r(ryt,"opt"),ryt.forEach(t),q4r=r(pNe," \u2014 "),lU=n(pNe,"A",{href:!0});var tyt=s(lU);j4r=r(tyt,"TFOPTModel"),tyt.forEach(t),D4r=r(pNe," (OPT model)"),pNe.forEach(t),G4r=i(D),P7=n(D,"LI",{});var _Ne=s(P7);Rve=n(_Ne,"STRONG",{});var ayt=s(Rve);O4r=r(ayt,"pegasus"),ayt.forEach(t),V4r=r(_Ne," \u2014 "),iU=n(_Ne,"A",{href:!0});var nyt=s(iU);X4r=r(nyt,"TFPegasusModel"),nyt.forEach(t),z4r=r(_Ne," (Pegasus model)"),_Ne.forEach(t),Q4r=i(D),B7=n(D,"LI",{});var uNe=s(B7);Pve=n(uNe,"STRONG",{});var syt=s(Pve);W4r=r(syt,"regnet"),syt.forEach(t),H4r=r(uNe," \u2014 "),dU=n(uNe,"A",{href:!0});var lyt=s(dU);U4r=r(lyt,"TFRegNetModel"),lyt.forEach(t),J4r=r(uNe," (RegNet model)"),uNe.forEach(t),Y4r=i(D),I7=n(D,"LI",{});var bNe=s(I7);Bve=n(bNe,"STRONG",{});var iyt=s(Bve);K4r=r(iyt,"rembert"),iyt.forEach(t),Z4r=r(bNe," \u2014 "),cU=n(bNe,"A",{href:!0});var dyt=s(cU);ebr=r(dyt,"TFRemBertModel"),dyt.forEach(t),obr=r(bNe," (RemBERT model)"),bNe.forEach(t),rbr=i(D),N7=n(D,"LI",{});var vNe=s(N7);Ive=n(vNe,"STRONG",{});var cyt=s(Ive);tbr=r(cyt,"roberta"),cyt.forEach(t),abr=r(vNe," \u2014 "),fU=n(vNe,"A",{href:!0});var fyt=s(fU);nbr=r(fyt,"TFRobertaModel"),fyt.forEach(t),sbr=r(vNe," (RoBERTa model)"),vNe.forEach(t),lbr=i(D),q7=n(D,"LI",{});var FNe=s(q7);Nve=n(FNe,"STRONG",{});var myt=s(Nve);ibr=r(myt,"roformer"),myt.forEach(t),dbr=r(FNe," \u2014 "),mU=n(FNe,"A",{href:!0});var gyt=s(mU);cbr=r(gyt,"TFRoFormerModel"),gyt.forEach(t),fbr=r(FNe," (RoFormer model)"),FNe.forEach(t),mbr=i(D),j7=n(D,"LI",{});var TNe=s(j7);qve=n(TNe,"STRONG",{});var hyt=s(qve);gbr=r(hyt,"speech_to_text"),hyt.forEach(t),hbr=r(TNe," \u2014 "),gU=n(TNe,"A",{href:!0});var pyt=s(gU);pbr=r(pyt,"TFSpeech2TextModel"),pyt.forEach(t),_br=r(TNe," (Speech2Text model)"),TNe.forEach(t),ubr=i(D),D7=n(D,"LI",{});var MNe=s(D7);jve=n(MNe,"STRONG",{});var _yt=s(jve);bbr=r(_yt,"swin"),_yt.forEach(t),vbr=r(MNe," \u2014 "),hU=n(MNe,"A",{href:!0});var uyt=s(hU);Fbr=r(uyt,"TFSwinModel"),uyt.forEach(t),Tbr=r(MNe," (Swin Transformer model)"),MNe.forEach(t),Mbr=i(D),G7=n(D,"LI",{});var ENe=s(G7);Dve=n(ENe,"STRONG",{});var byt=s(Dve);Ebr=r(byt,"t5"),byt.forEach(t),Cbr=r(ENe," \u2014 "),pU=n(ENe,"A",{href:!0});var vyt=s(pU);wbr=r(vyt,"TFT5Model"),vyt.forEach(t),Abr=r(ENe," (T5 model)"),ENe.forEach(t),Lbr=i(D),O7=n(D,"LI",{});var CNe=s(O7);Gve=n(CNe,"STRONG",{});var Fyt=s(Gve);ybr=r(Fyt,"tapas"),Fyt.forEach(t),xbr=r(CNe," \u2014 "),_U=n(CNe,"A",{href:!0});var Tyt=s(_U);$br=r(Tyt,"TFTapasModel"),Tyt.forEach(t),kbr=r(CNe," (TAPAS model)"),CNe.forEach(t),Sbr=i(D),V7=n(D,"LI",{});var wNe=s(V7);Ove=n(wNe,"STRONG",{});var Myt=s(Ove);Rbr=r(Myt,"transfo-xl"),Myt.forEach(t),Pbr=r(wNe," \u2014 "),uU=n(wNe,"A",{href:!0});var Eyt=s(uU);Bbr=r(Eyt,"TFTransfoXLModel"),Eyt.forEach(t),Ibr=r(wNe," (Transformer-XL model)"),wNe.forEach(t),Nbr=i(D),X7=n(D,"LI",{});var ANe=s(X7);Vve=n(ANe,"STRONG",{});var Cyt=s(Vve);qbr=r(Cyt,"vit"),Cyt.forEach(t),jbr=r(ANe," \u2014 "),bU=n(ANe,"A",{href:!0});var wyt=s(bU);Dbr=r(wyt,"TFViTModel"),wyt.forEach(t),Gbr=r(ANe," (ViT model)"),ANe.forEach(t),Obr=i(D),z7=n(D,"LI",{});var LNe=s(z7);Xve=n(LNe,"STRONG",{});var Ayt=s(Xve);Vbr=r(Ayt,"vit_mae"),Ayt.forEach(t),Xbr=r(LNe," \u2014 "),vU=n(LNe,"A",{href:!0});var Lyt=s(vU);zbr=r(Lyt,"TFViTMAEModel"),Lyt.forEach(t),Qbr=r(LNe," (ViTMAE model)"),LNe.forEach(t),Wbr=i(D),Q7=n(D,"LI",{});var yNe=s(Q7);zve=n(yNe,"STRONG",{});var yyt=s(zve);Hbr=r(yyt,"wav2vec2"),yyt.forEach(t),Ubr=r(yNe," \u2014 "),FU=n(yNe,"A",{href:!0});var xyt=s(FU);Jbr=r(xyt,"TFWav2Vec2Model"),xyt.forEach(t),Ybr=r(yNe," (Wav2Vec2 model)"),yNe.forEach(t),Kbr=i(D),W7=n(D,"LI",{});var xNe=s(W7);Qve=n(xNe,"STRONG",{});var $yt=s(Qve);Zbr=r($yt,"xlm"),$yt.forEach(t),evr=r(xNe," \u2014 "),TU=n(xNe,"A",{href:!0});var kyt=s(TU);ovr=r(kyt,"TFXLMModel"),kyt.forEach(t),rvr=r(xNe," (XLM model)"),xNe.forEach(t),tvr=i(D),H7=n(D,"LI",{});var $Ne=s(H7);Wve=n($Ne,"STRONG",{});var Syt=s(Wve);avr=r(Syt,"xlm-roberta"),Syt.forEach(t),nvr=r($Ne," \u2014 "),MU=n($Ne,"A",{href:!0});var Ryt=s(MU);svr=r(Ryt,"TFXLMRobertaModel"),Ryt.forEach(t),lvr=r($Ne," (XLM-RoBERTa model)"),$Ne.forEach(t),ivr=i(D),U7=n(D,"LI",{});var kNe=s(U7);Hve=n(kNe,"STRONG",{});var Pyt=s(Hve);dvr=r(Pyt,"xlnet"),Pyt.forEach(t),cvr=r(kNe," \u2014 "),EU=n(kNe,"A",{href:!0});var Byt=s(EU);fvr=r(Byt,"TFXLNetModel"),Byt.forEach(t),mvr=r(kNe," (XLNet model)"),kNe.forEach(t),D.forEach(t),gvr=i(Al),T(J7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),DVe=i(f),sc=n(f,"H2",{class:!0});var Hze=s(sc);Y7=n(Hze,"A",{id:!0,class:!0,href:!0});var Iyt=s(Y7);Uve=n(Iyt,"SPAN",{});var Nyt=s(Uve);T(k9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),hvr=i(Hze),Jve=n(Hze,"SPAN",{});var qyt=s(Jve);pvr=r(qyt,"TFAutoModelForPreTraining"),qyt.forEach(t),Hze.forEach(t),GVe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(S9.$$.fragment,Ll),_vr=i(Ll),lc=n(Ll,"P",{});var Ore=s(lc);uvr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CU=n(Ore,"A",{href:!0});var jyt=s(CU);bvr=r(jyt,"from_pretrained()"),jyt.forEach(t),vvr=r(Ore," class method or the "),wU=n(Ore,"A",{href:!0});var Dyt=s(wU);Fvr=r(Dyt,"from_config()"),Dyt.forEach(t),Tvr=r(Ore,` class
method.`),Ore.forEach(t),Mvr=i(Ll),R9=n(Ll,"P",{});var Uze=s(R9);Evr=r(Uze,"This class cannot be instantiated directly using "),Yve=n(Uze,"CODE",{});var Gyt=s(Yve);Cvr=r(Gyt,"__init__()"),Gyt.forEach(t),wvr=r(Uze," (throws an error)."),Uze.forEach(t),Avr=i(Ll),St=n(Ll,"DIV",{class:!0});var D6=s(St);T(P9.$$.fragment,D6),Lvr=i(D6),Kve=n(D6,"P",{});var Oyt=s(Kve);yvr=r(Oyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oyt.forEach(t),xvr=i(D6),ic=n(D6,"P",{});var Vre=s(ic);$vr=r(Vre,`Note:
Loading a model from its configuration file does `),Zve=n(Vre,"STRONG",{});var Vyt=s(Zve);kvr=r(Vyt,"not"),Vyt.forEach(t),Svr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Vre,"A",{href:!0});var Xyt=s(AU);Rvr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Pvr=r(Vre," to load the model weights."),Vre.forEach(t),Bvr=i(D6),T(K7.$$.fragment,D6),D6.forEach(t),Ivr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(B9.$$.fragment,yl),Nvr=i(yl),eFe=n(yl,"P",{});var zyt=s(eFe);qvr=r(zyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zyt.forEach(t),jvr=i(yl),sn=n(yl,"P",{});var G6=s(sn);Dvr=r(G6,"The model class to instantiate is selected based on the "),oFe=n(G6,"CODE",{});var Qyt=s(oFe);Gvr=r(Qyt,"model_type"),Qyt.forEach(t),Ovr=r(G6,` property of the config object (either
passed as an argument or loaded from `),rFe=n(G6,"CODE",{});var Wyt=s(rFe);Vvr=r(Wyt,"pretrained_model_name_or_path"),Wyt.forEach(t),Xvr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(G6,"CODE",{});var Hyt=s(tFe);zvr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),Qvr=r(G6,":"),G6.forEach(t),Wvr=i(yl),se=n(yl,"UL",{});var le=s(se);Z7=n(le,"LI",{});var SNe=s(Z7);aFe=n(SNe,"STRONG",{});var Uyt=s(aFe);Hvr=r(Uyt,"albert"),Uyt.forEach(t),Uvr=r(SNe," \u2014 "),LU=n(SNe,"A",{href:!0});var Jyt=s(LU);Jvr=r(Jyt,"TFAlbertForPreTraining"),Jyt.forEach(t),Yvr=r(SNe," (ALBERT model)"),SNe.forEach(t),Kvr=i(le),eM=n(le,"LI",{});var RNe=s(eM);nFe=n(RNe,"STRONG",{});var Yyt=s(nFe);Zvr=r(Yyt,"bart"),Yyt.forEach(t),eFr=r(RNe," \u2014 "),yU=n(RNe,"A",{href:!0});var Kyt=s(yU);oFr=r(Kyt,"TFBartForConditionalGeneration"),Kyt.forEach(t),rFr=r(RNe," (BART model)"),RNe.forEach(t),tFr=i(le),oM=n(le,"LI",{});var PNe=s(oM);sFe=n(PNe,"STRONG",{});var Zyt=s(sFe);aFr=r(Zyt,"bert"),Zyt.forEach(t),nFr=r(PNe," \u2014 "),xU=n(PNe,"A",{href:!0});var e8t=s(xU);sFr=r(e8t,"TFBertForPreTraining"),e8t.forEach(t),lFr=r(PNe," (BERT model)"),PNe.forEach(t),iFr=i(le),rM=n(le,"LI",{});var BNe=s(rM);lFe=n(BNe,"STRONG",{});var o8t=s(lFe);dFr=r(o8t,"camembert"),o8t.forEach(t),cFr=r(BNe," \u2014 "),$U=n(BNe,"A",{href:!0});var r8t=s($U);fFr=r(r8t,"TFCamembertForMaskedLM"),r8t.forEach(t),mFr=r(BNe," (CamemBERT model)"),BNe.forEach(t),gFr=i(le),tM=n(le,"LI",{});var INe=s(tM);iFe=n(INe,"STRONG",{});var t8t=s(iFe);hFr=r(t8t,"ctrl"),t8t.forEach(t),pFr=r(INe," \u2014 "),kU=n(INe,"A",{href:!0});var a8t=s(kU);_Fr=r(a8t,"TFCTRLLMHeadModel"),a8t.forEach(t),uFr=r(INe," (CTRL model)"),INe.forEach(t),bFr=i(le),aM=n(le,"LI",{});var NNe=s(aM);dFe=n(NNe,"STRONG",{});var n8t=s(dFe);vFr=r(n8t,"distilbert"),n8t.forEach(t),FFr=r(NNe," \u2014 "),SU=n(NNe,"A",{href:!0});var s8t=s(SU);TFr=r(s8t,"TFDistilBertForMaskedLM"),s8t.forEach(t),MFr=r(NNe," (DistilBERT model)"),NNe.forEach(t),EFr=i(le),nM=n(le,"LI",{});var qNe=s(nM);cFe=n(qNe,"STRONG",{});var l8t=s(cFe);CFr=r(l8t,"electra"),l8t.forEach(t),wFr=r(qNe," \u2014 "),RU=n(qNe,"A",{href:!0});var i8t=s(RU);AFr=r(i8t,"TFElectraForPreTraining"),i8t.forEach(t),LFr=r(qNe," (ELECTRA model)"),qNe.forEach(t),yFr=i(le),sM=n(le,"LI",{});var jNe=s(sM);fFe=n(jNe,"STRONG",{});var d8t=s(fFe);xFr=r(d8t,"flaubert"),d8t.forEach(t),$Fr=r(jNe," \u2014 "),PU=n(jNe,"A",{href:!0});var c8t=s(PU);kFr=r(c8t,"TFFlaubertWithLMHeadModel"),c8t.forEach(t),SFr=r(jNe," (FlauBERT model)"),jNe.forEach(t),RFr=i(le),lM=n(le,"LI",{});var DNe=s(lM);mFe=n(DNe,"STRONG",{});var f8t=s(mFe);PFr=r(f8t,"funnel"),f8t.forEach(t),BFr=r(DNe," \u2014 "),BU=n(DNe,"A",{href:!0});var m8t=s(BU);IFr=r(m8t,"TFFunnelForPreTraining"),m8t.forEach(t),NFr=r(DNe," (Funnel Transformer model)"),DNe.forEach(t),qFr=i(le),iM=n(le,"LI",{});var GNe=s(iM);gFe=n(GNe,"STRONG",{});var g8t=s(gFe);jFr=r(g8t,"gpt2"),g8t.forEach(t),DFr=r(GNe," \u2014 "),IU=n(GNe,"A",{href:!0});var h8t=s(IU);GFr=r(h8t,"TFGPT2LMHeadModel"),h8t.forEach(t),OFr=r(GNe," (OpenAI GPT-2 model)"),GNe.forEach(t),VFr=i(le),dM=n(le,"LI",{});var ONe=s(dM);hFe=n(ONe,"STRONG",{});var p8t=s(hFe);XFr=r(p8t,"layoutlm"),p8t.forEach(t),zFr=r(ONe," \u2014 "),NU=n(ONe,"A",{href:!0});var _8t=s(NU);QFr=r(_8t,"TFLayoutLMForMaskedLM"),_8t.forEach(t),WFr=r(ONe," (LayoutLM model)"),ONe.forEach(t),HFr=i(le),cM=n(le,"LI",{});var VNe=s(cM);pFe=n(VNe,"STRONG",{});var u8t=s(pFe);UFr=r(u8t,"lxmert"),u8t.forEach(t),JFr=r(VNe," \u2014 "),qU=n(VNe,"A",{href:!0});var b8t=s(qU);YFr=r(b8t,"TFLxmertForPreTraining"),b8t.forEach(t),KFr=r(VNe," (LXMERT model)"),VNe.forEach(t),ZFr=i(le),fM=n(le,"LI",{});var XNe=s(fM);_Fe=n(XNe,"STRONG",{});var v8t=s(_Fe);eTr=r(v8t,"mobilebert"),v8t.forEach(t),oTr=r(XNe," \u2014 "),jU=n(XNe,"A",{href:!0});var F8t=s(jU);rTr=r(F8t,"TFMobileBertForPreTraining"),F8t.forEach(t),tTr=r(XNe," (MobileBERT model)"),XNe.forEach(t),aTr=i(le),mM=n(le,"LI",{});var zNe=s(mM);uFe=n(zNe,"STRONG",{});var T8t=s(uFe);nTr=r(T8t,"mpnet"),T8t.forEach(t),sTr=r(zNe," \u2014 "),DU=n(zNe,"A",{href:!0});var M8t=s(DU);lTr=r(M8t,"TFMPNetForMaskedLM"),M8t.forEach(t),iTr=r(zNe," (MPNet model)"),zNe.forEach(t),dTr=i(le),gM=n(le,"LI",{});var QNe=s(gM);bFe=n(QNe,"STRONG",{});var E8t=s(bFe);cTr=r(E8t,"openai-gpt"),E8t.forEach(t),fTr=r(QNe," \u2014 "),GU=n(QNe,"A",{href:!0});var C8t=s(GU);mTr=r(C8t,"TFOpenAIGPTLMHeadModel"),C8t.forEach(t),gTr=r(QNe," (OpenAI GPT model)"),QNe.forEach(t),hTr=i(le),hM=n(le,"LI",{});var WNe=s(hM);vFe=n(WNe,"STRONG",{});var w8t=s(vFe);pTr=r(w8t,"roberta"),w8t.forEach(t),_Tr=r(WNe," \u2014 "),OU=n(WNe,"A",{href:!0});var A8t=s(OU);uTr=r(A8t,"TFRobertaForMaskedLM"),A8t.forEach(t),bTr=r(WNe," (RoBERTa model)"),WNe.forEach(t),vTr=i(le),pM=n(le,"LI",{});var HNe=s(pM);FFe=n(HNe,"STRONG",{});var L8t=s(FFe);FTr=r(L8t,"t5"),L8t.forEach(t),TTr=r(HNe," \u2014 "),VU=n(HNe,"A",{href:!0});var y8t=s(VU);MTr=r(y8t,"TFT5ForConditionalGeneration"),y8t.forEach(t),ETr=r(HNe," (T5 model)"),HNe.forEach(t),CTr=i(le),_M=n(le,"LI",{});var UNe=s(_M);TFe=n(UNe,"STRONG",{});var x8t=s(TFe);wTr=r(x8t,"tapas"),x8t.forEach(t),ATr=r(UNe," \u2014 "),XU=n(UNe,"A",{href:!0});var $8t=s(XU);LTr=r($8t,"TFTapasForMaskedLM"),$8t.forEach(t),yTr=r(UNe," (TAPAS model)"),UNe.forEach(t),xTr=i(le),uM=n(le,"LI",{});var JNe=s(uM);MFe=n(JNe,"STRONG",{});var k8t=s(MFe);$Tr=r(k8t,"transfo-xl"),k8t.forEach(t),kTr=r(JNe," \u2014 "),zU=n(JNe,"A",{href:!0});var S8t=s(zU);STr=r(S8t,"TFTransfoXLLMHeadModel"),S8t.forEach(t),RTr=r(JNe," (Transformer-XL model)"),JNe.forEach(t),PTr=i(le),bM=n(le,"LI",{});var YNe=s(bM);EFe=n(YNe,"STRONG",{});var R8t=s(EFe);BTr=r(R8t,"vit_mae"),R8t.forEach(t),ITr=r(YNe," \u2014 "),QU=n(YNe,"A",{href:!0});var P8t=s(QU);NTr=r(P8t,"TFViTMAEForPreTraining"),P8t.forEach(t),qTr=r(YNe," (ViTMAE model)"),YNe.forEach(t),jTr=i(le),vM=n(le,"LI",{});var KNe=s(vM);CFe=n(KNe,"STRONG",{});var B8t=s(CFe);DTr=r(B8t,"xlm"),B8t.forEach(t),GTr=r(KNe," \u2014 "),WU=n(KNe,"A",{href:!0});var I8t=s(WU);OTr=r(I8t,"TFXLMWithLMHeadModel"),I8t.forEach(t),VTr=r(KNe," (XLM model)"),KNe.forEach(t),XTr=i(le),FM=n(le,"LI",{});var ZNe=s(FM);wFe=n(ZNe,"STRONG",{});var N8t=s(wFe);zTr=r(N8t,"xlm-roberta"),N8t.forEach(t),QTr=r(ZNe," \u2014 "),HU=n(ZNe,"A",{href:!0});var q8t=s(HU);WTr=r(q8t,"TFXLMRobertaForMaskedLM"),q8t.forEach(t),HTr=r(ZNe," (XLM-RoBERTa model)"),ZNe.forEach(t),UTr=i(le),TM=n(le,"LI",{});var eqe=s(TM);AFe=n(eqe,"STRONG",{});var j8t=s(AFe);JTr=r(j8t,"xlnet"),j8t.forEach(t),YTr=r(eqe," \u2014 "),UU=n(eqe,"A",{href:!0});var D8t=s(UU);KTr=r(D8t,"TFXLNetLMHeadModel"),D8t.forEach(t),ZTr=r(eqe," (XLNet model)"),eqe.forEach(t),le.forEach(t),e7r=i(yl),T(MM.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),OVe=i(f),dc=n(f,"H2",{class:!0});var Jze=s(dc);EM=n(Jze,"A",{id:!0,class:!0,href:!0});var G8t=s(EM);LFe=n(G8t,"SPAN",{});var O8t=s(LFe);T(I9.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),o7r=i(Jze),yFe=n(Jze,"SPAN",{});var V8t=s(yFe);r7r=r(V8t,"TFAutoModelForCausalLM"),V8t.forEach(t),Jze.forEach(t),VVe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(N9.$$.fragment,xl),t7r=i(xl),cc=n(xl,"P",{});var Xre=s(cc);a7r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=n(Xre,"A",{href:!0});var X8t=s(JU);n7r=r(X8t,"from_pretrained()"),X8t.forEach(t),s7r=r(Xre," class method or the "),YU=n(Xre,"A",{href:!0});var z8t=s(YU);l7r=r(z8t,"from_config()"),z8t.forEach(t),i7r=r(Xre,` class
method.`),Xre.forEach(t),d7r=i(xl),q9=n(xl,"P",{});var Yze=s(q9);c7r=r(Yze,"This class cannot be instantiated directly using "),xFe=n(Yze,"CODE",{});var Q8t=s(xFe);f7r=r(Q8t,"__init__()"),Q8t.forEach(t),m7r=r(Yze," (throws an error)."),Yze.forEach(t),g7r=i(xl),Rt=n(xl,"DIV",{class:!0});var O6=s(Rt);T(j9.$$.fragment,O6),h7r=i(O6),$Fe=n(O6,"P",{});var W8t=s($Fe);p7r=r(W8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W8t.forEach(t),_7r=i(O6),fc=n(O6,"P",{});var zre=s(fc);u7r=r(zre,`Note:
Loading a model from its configuration file does `),kFe=n(zre,"STRONG",{});var H8t=s(kFe);b7r=r(H8t,"not"),H8t.forEach(t),v7r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(zre,"A",{href:!0});var U8t=s(KU);F7r=r(U8t,"from_pretrained()"),U8t.forEach(t),T7r=r(zre," to load the model weights."),zre.forEach(t),M7r=i(O6),T(CM.$$.fragment,O6),O6.forEach(t),E7r=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(D9.$$.fragment,$l),C7r=i($l),SFe=n($l,"P",{});var J8t=s(SFe);w7r=r(J8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J8t.forEach(t),A7r=i($l),ln=n($l,"P",{});var V6=s(ln);L7r=r(V6,"The model class to instantiate is selected based on the "),RFe=n(V6,"CODE",{});var Y8t=s(RFe);y7r=r(Y8t,"model_type"),Y8t.forEach(t),x7r=r(V6,` property of the config object (either
passed as an argument or loaded from `),PFe=n(V6,"CODE",{});var K8t=s(PFe);$7r=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),k7r=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(V6,"CODE",{});var Z8t=s(BFe);S7r=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),R7r=r(V6,":"),V6.forEach(t),P7r=i($l),Me=n($l,"UL",{});var Ce=s(Me);wM=n(Ce,"LI",{});var oqe=s(wM);IFe=n(oqe,"STRONG",{});var e9t=s(IFe);B7r=r(e9t,"bert"),e9t.forEach(t),I7r=r(oqe," \u2014 "),ZU=n(oqe,"A",{href:!0});var o9t=s(ZU);N7r=r(o9t,"TFBertLMHeadModel"),o9t.forEach(t),q7r=r(oqe," (BERT model)"),oqe.forEach(t),j7r=i(Ce),AM=n(Ce,"LI",{});var rqe=s(AM);NFe=n(rqe,"STRONG",{});var r9t=s(NFe);D7r=r(r9t,"camembert"),r9t.forEach(t),G7r=r(rqe," \u2014 "),eJ=n(rqe,"A",{href:!0});var t9t=s(eJ);O7r=r(t9t,"TFCamembertForCausalLM"),t9t.forEach(t),V7r=r(rqe," (CamemBERT model)"),rqe.forEach(t),X7r=i(Ce),LM=n(Ce,"LI",{});var tqe=s(LM);qFe=n(tqe,"STRONG",{});var a9t=s(qFe);z7r=r(a9t,"ctrl"),a9t.forEach(t),Q7r=r(tqe," \u2014 "),oJ=n(tqe,"A",{href:!0});var n9t=s(oJ);W7r=r(n9t,"TFCTRLLMHeadModel"),n9t.forEach(t),H7r=r(tqe," (CTRL model)"),tqe.forEach(t),U7r=i(Ce),yM=n(Ce,"LI",{});var aqe=s(yM);jFe=n(aqe,"STRONG",{});var s9t=s(jFe);J7r=r(s9t,"gpt2"),s9t.forEach(t),Y7r=r(aqe," \u2014 "),rJ=n(aqe,"A",{href:!0});var l9t=s(rJ);K7r=r(l9t,"TFGPT2LMHeadModel"),l9t.forEach(t),Z7r=r(aqe," (OpenAI GPT-2 model)"),aqe.forEach(t),eMr=i(Ce),xM=n(Ce,"LI",{});var nqe=s(xM);DFe=n(nqe,"STRONG",{});var i9t=s(DFe);oMr=r(i9t,"gptj"),i9t.forEach(t),rMr=r(nqe," \u2014 "),tJ=n(nqe,"A",{href:!0});var d9t=s(tJ);tMr=r(d9t,"TFGPTJForCausalLM"),d9t.forEach(t),aMr=r(nqe," (GPT-J model)"),nqe.forEach(t),nMr=i(Ce),$M=n(Ce,"LI",{});var sqe=s($M);GFe=n(sqe,"STRONG",{});var c9t=s(GFe);sMr=r(c9t,"openai-gpt"),c9t.forEach(t),lMr=r(sqe," \u2014 "),aJ=n(sqe,"A",{href:!0});var f9t=s(aJ);iMr=r(f9t,"TFOpenAIGPTLMHeadModel"),f9t.forEach(t),dMr=r(sqe," (OpenAI GPT model)"),sqe.forEach(t),cMr=i(Ce),kM=n(Ce,"LI",{});var lqe=s(kM);OFe=n(lqe,"STRONG",{});var m9t=s(OFe);fMr=r(m9t,"opt"),m9t.forEach(t),mMr=r(lqe," \u2014 "),nJ=n(lqe,"A",{href:!0});var g9t=s(nJ);gMr=r(g9t,"TFOPTForCausalLM"),g9t.forEach(t),hMr=r(lqe," (OPT model)"),lqe.forEach(t),pMr=i(Ce),SM=n(Ce,"LI",{});var iqe=s(SM);VFe=n(iqe,"STRONG",{});var h9t=s(VFe);_Mr=r(h9t,"rembert"),h9t.forEach(t),uMr=r(iqe," \u2014 "),sJ=n(iqe,"A",{href:!0});var p9t=s(sJ);bMr=r(p9t,"TFRemBertForCausalLM"),p9t.forEach(t),vMr=r(iqe," (RemBERT model)"),iqe.forEach(t),FMr=i(Ce),RM=n(Ce,"LI",{});var dqe=s(RM);XFe=n(dqe,"STRONG",{});var _9t=s(XFe);TMr=r(_9t,"roberta"),_9t.forEach(t),MMr=r(dqe," \u2014 "),lJ=n(dqe,"A",{href:!0});var u9t=s(lJ);EMr=r(u9t,"TFRobertaForCausalLM"),u9t.forEach(t),CMr=r(dqe," (RoBERTa model)"),dqe.forEach(t),wMr=i(Ce),PM=n(Ce,"LI",{});var cqe=s(PM);zFe=n(cqe,"STRONG",{});var b9t=s(zFe);AMr=r(b9t,"roformer"),b9t.forEach(t),LMr=r(cqe," \u2014 "),iJ=n(cqe,"A",{href:!0});var v9t=s(iJ);yMr=r(v9t,"TFRoFormerForCausalLM"),v9t.forEach(t),xMr=r(cqe," (RoFormer model)"),cqe.forEach(t),$Mr=i(Ce),BM=n(Ce,"LI",{});var fqe=s(BM);QFe=n(fqe,"STRONG",{});var F9t=s(QFe);kMr=r(F9t,"transfo-xl"),F9t.forEach(t),SMr=r(fqe," \u2014 "),dJ=n(fqe,"A",{href:!0});var T9t=s(dJ);RMr=r(T9t,"TFTransfoXLLMHeadModel"),T9t.forEach(t),PMr=r(fqe," (Transformer-XL model)"),fqe.forEach(t),BMr=i(Ce),IM=n(Ce,"LI",{});var mqe=s(IM);WFe=n(mqe,"STRONG",{});var M9t=s(WFe);IMr=r(M9t,"xlm"),M9t.forEach(t),NMr=r(mqe," \u2014 "),cJ=n(mqe,"A",{href:!0});var E9t=s(cJ);qMr=r(E9t,"TFXLMWithLMHeadModel"),E9t.forEach(t),jMr=r(mqe," (XLM model)"),mqe.forEach(t),DMr=i(Ce),NM=n(Ce,"LI",{});var gqe=s(NM);HFe=n(gqe,"STRONG",{});var C9t=s(HFe);GMr=r(C9t,"xlnet"),C9t.forEach(t),OMr=r(gqe," \u2014 "),fJ=n(gqe,"A",{href:!0});var w9t=s(fJ);VMr=r(w9t,"TFXLNetLMHeadModel"),w9t.forEach(t),XMr=r(gqe," (XLNet model)"),gqe.forEach(t),Ce.forEach(t),zMr=i($l),T(qM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),XVe=i(f),mc=n(f,"H2",{class:!0});var Kze=s(mc);jM=n(Kze,"A",{id:!0,class:!0,href:!0});var A9t=s(jM);UFe=n(A9t,"SPAN",{});var L9t=s(UFe);T(G9.$$.fragment,L9t),L9t.forEach(t),A9t.forEach(t),QMr=i(Kze),JFe=n(Kze,"SPAN",{});var y9t=s(JFe);WMr=r(y9t,"TFAutoModelForImageClassification"),y9t.forEach(t),Kze.forEach(t),zVe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(O9.$$.fragment,kl),HMr=i(kl),gc=n(kl,"P",{});var Qre=s(gc);UMr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mJ=n(Qre,"A",{href:!0});var x9t=s(mJ);JMr=r(x9t,"from_pretrained()"),x9t.forEach(t),YMr=r(Qre," class method or the "),gJ=n(Qre,"A",{href:!0});var $9t=s(gJ);KMr=r($9t,"from_config()"),$9t.forEach(t),ZMr=r(Qre,` class
method.`),Qre.forEach(t),eEr=i(kl),V9=n(kl,"P",{});var Zze=s(V9);oEr=r(Zze,"This class cannot be instantiated directly using "),YFe=n(Zze,"CODE",{});var k9t=s(YFe);rEr=r(k9t,"__init__()"),k9t.forEach(t),tEr=r(Zze," (throws an error)."),Zze.forEach(t),aEr=i(kl),Pt=n(kl,"DIV",{class:!0});var X6=s(Pt);T(X9.$$.fragment,X6),nEr=i(X6),KFe=n(X6,"P",{});var S9t=s(KFe);sEr=r(S9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S9t.forEach(t),lEr=i(X6),hc=n(X6,"P",{});var Wre=s(hc);iEr=r(Wre,`Note:
Loading a model from its configuration file does `),ZFe=n(Wre,"STRONG",{});var R9t=s(ZFe);dEr=r(R9t,"not"),R9t.forEach(t),cEr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Wre,"A",{href:!0});var P9t=s(hJ);fEr=r(P9t,"from_pretrained()"),P9t.forEach(t),mEr=r(Wre," to load the model weights."),Wre.forEach(t),gEr=i(X6),T(DM.$$.fragment,X6),X6.forEach(t),hEr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(z9.$$.fragment,Sl),pEr=i(Sl),eTe=n(Sl,"P",{});var B9t=s(eTe);_Er=r(B9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B9t.forEach(t),uEr=i(Sl),dn=n(Sl,"P",{});var z6=s(dn);bEr=r(z6,"The model class to instantiate is selected based on the "),oTe=n(z6,"CODE",{});var I9t=s(oTe);vEr=r(I9t,"model_type"),I9t.forEach(t),FEr=r(z6,` property of the config object (either
passed as an argument or loaded from `),rTe=n(z6,"CODE",{});var N9t=s(rTe);TEr=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),MEr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(z6,"CODE",{});var q9t=s(tTe);EEr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),CEr=r(z6,":"),z6.forEach(t),wEr=i(Sl),rt=n(Sl,"UL",{});var Rl=s(rt);GM=n(Rl,"LI",{});var hqe=s(GM);aTe=n(hqe,"STRONG",{});var j9t=s(aTe);AEr=r(j9t,"convnext"),j9t.forEach(t),LEr=r(hqe," \u2014 "),pJ=n(hqe,"A",{href:!0});var D9t=s(pJ);yEr=r(D9t,"TFConvNextForImageClassification"),D9t.forEach(t),xEr=r(hqe," (ConvNeXT model)"),hqe.forEach(t),$Er=i(Rl),OM=n(Rl,"LI",{});var pqe=s(OM);nTe=n(pqe,"STRONG",{});var G9t=s(nTe);kEr=r(G9t,"data2vec-vision"),G9t.forEach(t),SEr=r(pqe," \u2014 "),_J=n(pqe,"A",{href:!0});var O9t=s(_J);REr=r(O9t,"TFData2VecVisionForImageClassification"),O9t.forEach(t),PEr=r(pqe," (Data2VecVision model)"),pqe.forEach(t),BEr=i(Rl),VM=n(Rl,"LI",{});var _qe=s(VM);sTe=n(_qe,"STRONG",{});var V9t=s(sTe);IEr=r(V9t,"regnet"),V9t.forEach(t),NEr=r(_qe," \u2014 "),uJ=n(_qe,"A",{href:!0});var X9t=s(uJ);qEr=r(X9t,"TFRegNetForImageClassification"),X9t.forEach(t),jEr=r(_qe," (RegNet model)"),_qe.forEach(t),DEr=i(Rl),XM=n(Rl,"LI",{});var uqe=s(XM);lTe=n(uqe,"STRONG",{});var z9t=s(lTe);GEr=r(z9t,"swin"),z9t.forEach(t),OEr=r(uqe," \u2014 "),bJ=n(uqe,"A",{href:!0});var Q9t=s(bJ);VEr=r(Q9t,"TFSwinForImageClassification"),Q9t.forEach(t),XEr=r(uqe," (Swin Transformer model)"),uqe.forEach(t),zEr=i(Rl),zM=n(Rl,"LI",{});var bqe=s(zM);iTe=n(bqe,"STRONG",{});var W9t=s(iTe);QEr=r(W9t,"vit"),W9t.forEach(t),WEr=r(bqe," \u2014 "),vJ=n(bqe,"A",{href:!0});var H9t=s(vJ);HEr=r(H9t,"TFViTForImageClassification"),H9t.forEach(t),UEr=r(bqe," (ViT model)"),bqe.forEach(t),Rl.forEach(t),JEr=i(Sl),T(QM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),QVe=i(f),pc=n(f,"H2",{class:!0});var eQe=s(pc);WM=n(eQe,"A",{id:!0,class:!0,href:!0});var U9t=s(WM);dTe=n(U9t,"SPAN",{});var J9t=s(dTe);T(Q9.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),YEr=i(eQe),cTe=n(eQe,"SPAN",{});var Y9t=s(cTe);KEr=r(Y9t,"TFAutoModelForMaskedLM"),Y9t.forEach(t),eQe.forEach(t),WVe=i(f),ar=n(f,"DIV",{class:!0});var Pl=s(ar);T(W9.$$.fragment,Pl),ZEr=i(Pl),_c=n(Pl,"P",{});var Hre=s(_c);eCr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=n(Hre,"A",{href:!0});var K9t=s(FJ);oCr=r(K9t,"from_pretrained()"),K9t.forEach(t),rCr=r(Hre," class method or the "),TJ=n(Hre,"A",{href:!0});var Z9t=s(TJ);tCr=r(Z9t,"from_config()"),Z9t.forEach(t),aCr=r(Hre,` class
method.`),Hre.forEach(t),nCr=i(Pl),H9=n(Pl,"P",{});var oQe=s(H9);sCr=r(oQe,"This class cannot be instantiated directly using "),fTe=n(oQe,"CODE",{});var ext=s(fTe);lCr=r(ext,"__init__()"),ext.forEach(t),iCr=r(oQe," (throws an error)."),oQe.forEach(t),dCr=i(Pl),Bt=n(Pl,"DIV",{class:!0});var Q6=s(Bt);T(U9.$$.fragment,Q6),cCr=i(Q6),mTe=n(Q6,"P",{});var oxt=s(mTe);fCr=r(oxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oxt.forEach(t),mCr=i(Q6),uc=n(Q6,"P",{});var Ure=s(uc);gCr=r(Ure,`Note:
Loading a model from its configuration file does `),gTe=n(Ure,"STRONG",{});var rxt=s(gTe);hCr=r(rxt,"not"),rxt.forEach(t),pCr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Ure,"A",{href:!0});var txt=s(MJ);_Cr=r(txt,"from_pretrained()"),txt.forEach(t),uCr=r(Ure," to load the model weights."),Ure.forEach(t),bCr=i(Q6),T(HM.$$.fragment,Q6),Q6.forEach(t),vCr=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(J9.$$.fragment,Bl),FCr=i(Bl),hTe=n(Bl,"P",{});var axt=s(hTe);TCr=r(axt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),axt.forEach(t),MCr=i(Bl),cn=n(Bl,"P",{});var W6=s(cn);ECr=r(W6,"The model class to instantiate is selected based on the "),pTe=n(W6,"CODE",{});var nxt=s(pTe);CCr=r(nxt,"model_type"),nxt.forEach(t),wCr=r(W6,` property of the config object (either
passed as an argument or loaded from `),_Te=n(W6,"CODE",{});var sxt=s(_Te);ACr=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),LCr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(W6,"CODE",{});var lxt=s(uTe);yCr=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),xCr=r(W6,":"),W6.forEach(t),$Cr=i(Bl),ie=n(Bl,"UL",{});var fe=s(ie);UM=n(fe,"LI",{});var vqe=s(UM);bTe=n(vqe,"STRONG",{});var ixt=s(bTe);kCr=r(ixt,"albert"),ixt.forEach(t),SCr=r(vqe," \u2014 "),EJ=n(vqe,"A",{href:!0});var dxt=s(EJ);RCr=r(dxt,"TFAlbertForMaskedLM"),dxt.forEach(t),PCr=r(vqe," (ALBERT model)"),vqe.forEach(t),BCr=i(fe),JM=n(fe,"LI",{});var Fqe=s(JM);vTe=n(Fqe,"STRONG",{});var cxt=s(vTe);ICr=r(cxt,"bert"),cxt.forEach(t),NCr=r(Fqe," \u2014 "),CJ=n(Fqe,"A",{href:!0});var fxt=s(CJ);qCr=r(fxt,"TFBertForMaskedLM"),fxt.forEach(t),jCr=r(Fqe," (BERT model)"),Fqe.forEach(t),DCr=i(fe),YM=n(fe,"LI",{});var Tqe=s(YM);FTe=n(Tqe,"STRONG",{});var mxt=s(FTe);GCr=r(mxt,"camembert"),mxt.forEach(t),OCr=r(Tqe," \u2014 "),wJ=n(Tqe,"A",{href:!0});var gxt=s(wJ);VCr=r(gxt,"TFCamembertForMaskedLM"),gxt.forEach(t),XCr=r(Tqe," (CamemBERT model)"),Tqe.forEach(t),zCr=i(fe),KM=n(fe,"LI",{});var Mqe=s(KM);TTe=n(Mqe,"STRONG",{});var hxt=s(TTe);QCr=r(hxt,"convbert"),hxt.forEach(t),WCr=r(Mqe," \u2014 "),AJ=n(Mqe,"A",{href:!0});var pxt=s(AJ);HCr=r(pxt,"TFConvBertForMaskedLM"),pxt.forEach(t),UCr=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),JCr=i(fe),ZM=n(fe,"LI",{});var Eqe=s(ZM);MTe=n(Eqe,"STRONG",{});var _xt=s(MTe);YCr=r(_xt,"deberta"),_xt.forEach(t),KCr=r(Eqe," \u2014 "),LJ=n(Eqe,"A",{href:!0});var uxt=s(LJ);ZCr=r(uxt,"TFDebertaForMaskedLM"),uxt.forEach(t),e3r=r(Eqe," (DeBERTa model)"),Eqe.forEach(t),o3r=i(fe),eE=n(fe,"LI",{});var Cqe=s(eE);ETe=n(Cqe,"STRONG",{});var bxt=s(ETe);r3r=r(bxt,"deberta-v2"),bxt.forEach(t),t3r=r(Cqe," \u2014 "),yJ=n(Cqe,"A",{href:!0});var vxt=s(yJ);a3r=r(vxt,"TFDebertaV2ForMaskedLM"),vxt.forEach(t),n3r=r(Cqe," (DeBERTa-v2 model)"),Cqe.forEach(t),s3r=i(fe),oE=n(fe,"LI",{});var wqe=s(oE);CTe=n(wqe,"STRONG",{});var Fxt=s(CTe);l3r=r(Fxt,"distilbert"),Fxt.forEach(t),i3r=r(wqe," \u2014 "),xJ=n(wqe,"A",{href:!0});var Txt=s(xJ);d3r=r(Txt,"TFDistilBertForMaskedLM"),Txt.forEach(t),c3r=r(wqe," (DistilBERT model)"),wqe.forEach(t),f3r=i(fe),rE=n(fe,"LI",{});var Aqe=s(rE);wTe=n(Aqe,"STRONG",{});var Mxt=s(wTe);m3r=r(Mxt,"electra"),Mxt.forEach(t),g3r=r(Aqe," \u2014 "),$J=n(Aqe,"A",{href:!0});var Ext=s($J);h3r=r(Ext,"TFElectraForMaskedLM"),Ext.forEach(t),p3r=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),_3r=i(fe),tE=n(fe,"LI",{});var Lqe=s(tE);ATe=n(Lqe,"STRONG",{});var Cxt=s(ATe);u3r=r(Cxt,"flaubert"),Cxt.forEach(t),b3r=r(Lqe," \u2014 "),kJ=n(Lqe,"A",{href:!0});var wxt=s(kJ);v3r=r(wxt,"TFFlaubertWithLMHeadModel"),wxt.forEach(t),F3r=r(Lqe," (FlauBERT model)"),Lqe.forEach(t),T3r=i(fe),aE=n(fe,"LI",{});var yqe=s(aE);LTe=n(yqe,"STRONG",{});var Axt=s(LTe);M3r=r(Axt,"funnel"),Axt.forEach(t),E3r=r(yqe," \u2014 "),SJ=n(yqe,"A",{href:!0});var Lxt=s(SJ);C3r=r(Lxt,"TFFunnelForMaskedLM"),Lxt.forEach(t),w3r=r(yqe," (Funnel Transformer model)"),yqe.forEach(t),A3r=i(fe),nE=n(fe,"LI",{});var xqe=s(nE);yTe=n(xqe,"STRONG",{});var yxt=s(yTe);L3r=r(yxt,"layoutlm"),yxt.forEach(t),y3r=r(xqe," \u2014 "),RJ=n(xqe,"A",{href:!0});var xxt=s(RJ);x3r=r(xxt,"TFLayoutLMForMaskedLM"),xxt.forEach(t),$3r=r(xqe," (LayoutLM model)"),xqe.forEach(t),k3r=i(fe),sE=n(fe,"LI",{});var $qe=s(sE);xTe=n($qe,"STRONG",{});var $xt=s(xTe);S3r=r($xt,"longformer"),$xt.forEach(t),R3r=r($qe," \u2014 "),PJ=n($qe,"A",{href:!0});var kxt=s(PJ);P3r=r(kxt,"TFLongformerForMaskedLM"),kxt.forEach(t),B3r=r($qe," (Longformer model)"),$qe.forEach(t),I3r=i(fe),lE=n(fe,"LI",{});var kqe=s(lE);$Te=n(kqe,"STRONG",{});var Sxt=s($Te);N3r=r(Sxt,"mobilebert"),Sxt.forEach(t),q3r=r(kqe," \u2014 "),BJ=n(kqe,"A",{href:!0});var Rxt=s(BJ);j3r=r(Rxt,"TFMobileBertForMaskedLM"),Rxt.forEach(t),D3r=r(kqe," (MobileBERT model)"),kqe.forEach(t),G3r=i(fe),iE=n(fe,"LI",{});var Sqe=s(iE);kTe=n(Sqe,"STRONG",{});var Pxt=s(kTe);O3r=r(Pxt,"mpnet"),Pxt.forEach(t),V3r=r(Sqe," \u2014 "),IJ=n(Sqe,"A",{href:!0});var Bxt=s(IJ);X3r=r(Bxt,"TFMPNetForMaskedLM"),Bxt.forEach(t),z3r=r(Sqe," (MPNet model)"),Sqe.forEach(t),Q3r=i(fe),dE=n(fe,"LI",{});var Rqe=s(dE);STe=n(Rqe,"STRONG",{});var Ixt=s(STe);W3r=r(Ixt,"rembert"),Ixt.forEach(t),H3r=r(Rqe," \u2014 "),NJ=n(Rqe,"A",{href:!0});var Nxt=s(NJ);U3r=r(Nxt,"TFRemBertForMaskedLM"),Nxt.forEach(t),J3r=r(Rqe," (RemBERT model)"),Rqe.forEach(t),Y3r=i(fe),cE=n(fe,"LI",{});var Pqe=s(cE);RTe=n(Pqe,"STRONG",{});var qxt=s(RTe);K3r=r(qxt,"roberta"),qxt.forEach(t),Z3r=r(Pqe," \u2014 "),qJ=n(Pqe,"A",{href:!0});var jxt=s(qJ);e0r=r(jxt,"TFRobertaForMaskedLM"),jxt.forEach(t),o0r=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),r0r=i(fe),fE=n(fe,"LI",{});var Bqe=s(fE);PTe=n(Bqe,"STRONG",{});var Dxt=s(PTe);t0r=r(Dxt,"roformer"),Dxt.forEach(t),a0r=r(Bqe," \u2014 "),jJ=n(Bqe,"A",{href:!0});var Gxt=s(jJ);n0r=r(Gxt,"TFRoFormerForMaskedLM"),Gxt.forEach(t),s0r=r(Bqe," (RoFormer model)"),Bqe.forEach(t),l0r=i(fe),mE=n(fe,"LI",{});var Iqe=s(mE);BTe=n(Iqe,"STRONG",{});var Oxt=s(BTe);i0r=r(Oxt,"tapas"),Oxt.forEach(t),d0r=r(Iqe," \u2014 "),DJ=n(Iqe,"A",{href:!0});var Vxt=s(DJ);c0r=r(Vxt,"TFTapasForMaskedLM"),Vxt.forEach(t),f0r=r(Iqe," (TAPAS model)"),Iqe.forEach(t),m0r=i(fe),gE=n(fe,"LI",{});var Nqe=s(gE);ITe=n(Nqe,"STRONG",{});var Xxt=s(ITe);g0r=r(Xxt,"xlm"),Xxt.forEach(t),h0r=r(Nqe," \u2014 "),GJ=n(Nqe,"A",{href:!0});var zxt=s(GJ);p0r=r(zxt,"TFXLMWithLMHeadModel"),zxt.forEach(t),_0r=r(Nqe," (XLM model)"),Nqe.forEach(t),u0r=i(fe),hE=n(fe,"LI",{});var qqe=s(hE);NTe=n(qqe,"STRONG",{});var Qxt=s(NTe);b0r=r(Qxt,"xlm-roberta"),Qxt.forEach(t),v0r=r(qqe," \u2014 "),OJ=n(qqe,"A",{href:!0});var Wxt=s(OJ);F0r=r(Wxt,"TFXLMRobertaForMaskedLM"),Wxt.forEach(t),T0r=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),fe.forEach(t),M0r=i(Bl),T(pE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),HVe=i(f),bc=n(f,"H2",{class:!0});var rQe=s(bc);_E=n(rQe,"A",{id:!0,class:!0,href:!0});var Hxt=s(_E);qTe=n(Hxt,"SPAN",{});var Uxt=s(qTe);T(Y9.$$.fragment,Uxt),Uxt.forEach(t),Hxt.forEach(t),E0r=i(rQe),jTe=n(rQe,"SPAN",{});var Jxt=s(jTe);C0r=r(Jxt,"TFAutoModelForSeq2SeqLM"),Jxt.forEach(t),rQe.forEach(t),UVe=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(K9.$$.fragment,Il),w0r=i(Il),vc=n(Il,"P",{});var Jre=s(vc);A0r=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=n(Jre,"A",{href:!0});var Yxt=s(VJ);L0r=r(Yxt,"from_pretrained()"),Yxt.forEach(t),y0r=r(Jre," class method or the "),XJ=n(Jre,"A",{href:!0});var Kxt=s(XJ);x0r=r(Kxt,"from_config()"),Kxt.forEach(t),$0r=r(Jre,` class
method.`),Jre.forEach(t),k0r=i(Il),Z9=n(Il,"P",{});var tQe=s(Z9);S0r=r(tQe,"This class cannot be instantiated directly using "),DTe=n(tQe,"CODE",{});var Zxt=s(DTe);R0r=r(Zxt,"__init__()"),Zxt.forEach(t),P0r=r(tQe," (throws an error)."),tQe.forEach(t),B0r=i(Il),It=n(Il,"DIV",{class:!0});var H6=s(It);T(ex.$$.fragment,H6),I0r=i(H6),GTe=n(H6,"P",{});var e$t=s(GTe);N0r=r(e$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e$t.forEach(t),q0r=i(H6),Fc=n(H6,"P",{});var Yre=s(Fc);j0r=r(Yre,`Note:
Loading a model from its configuration file does `),OTe=n(Yre,"STRONG",{});var o$t=s(OTe);D0r=r(o$t,"not"),o$t.forEach(t),G0r=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Yre,"A",{href:!0});var r$t=s(zJ);O0r=r(r$t,"from_pretrained()"),r$t.forEach(t),V0r=r(Yre," to load the model weights."),Yre.forEach(t),X0r=i(H6),T(uE.$$.fragment,H6),H6.forEach(t),z0r=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(ox.$$.fragment,Nl),Q0r=i(Nl),VTe=n(Nl,"P",{});var t$t=s(VTe);W0r=r(t$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t$t.forEach(t),H0r=i(Nl),fn=n(Nl,"P",{});var U6=s(fn);U0r=r(U6,"The model class to instantiate is selected based on the "),XTe=n(U6,"CODE",{});var a$t=s(XTe);J0r=r(a$t,"model_type"),a$t.forEach(t),Y0r=r(U6,` property of the config object (either
passed as an argument or loaded from `),zTe=n(U6,"CODE",{});var n$t=s(zTe);K0r=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),Z0r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(U6,"CODE",{});var s$t=s(QTe);ewr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),owr=r(U6,":"),U6.forEach(t),rwr=i(Nl),ye=n(Nl,"UL",{});var Ie=s(ye);bE=n(Ie,"LI",{});var jqe=s(bE);WTe=n(jqe,"STRONG",{});var l$t=s(WTe);twr=r(l$t,"bart"),l$t.forEach(t),awr=r(jqe," \u2014 "),QJ=n(jqe,"A",{href:!0});var i$t=s(QJ);nwr=r(i$t,"TFBartForConditionalGeneration"),i$t.forEach(t),swr=r(jqe," (BART model)"),jqe.forEach(t),lwr=i(Ie),vE=n(Ie,"LI",{});var Dqe=s(vE);HTe=n(Dqe,"STRONG",{});var d$t=s(HTe);iwr=r(d$t,"blenderbot"),d$t.forEach(t),dwr=r(Dqe," \u2014 "),WJ=n(Dqe,"A",{href:!0});var c$t=s(WJ);cwr=r(c$t,"TFBlenderbotForConditionalGeneration"),c$t.forEach(t),fwr=r(Dqe," (Blenderbot model)"),Dqe.forEach(t),mwr=i(Ie),FE=n(Ie,"LI",{});var Gqe=s(FE);UTe=n(Gqe,"STRONG",{});var f$t=s(UTe);gwr=r(f$t,"blenderbot-small"),f$t.forEach(t),hwr=r(Gqe," \u2014 "),HJ=n(Gqe,"A",{href:!0});var m$t=s(HJ);pwr=r(m$t,"TFBlenderbotSmallForConditionalGeneration"),m$t.forEach(t),_wr=r(Gqe," (BlenderbotSmall model)"),Gqe.forEach(t),uwr=i(Ie),TE=n(Ie,"LI",{});var Oqe=s(TE);JTe=n(Oqe,"STRONG",{});var g$t=s(JTe);bwr=r(g$t,"encoder-decoder"),g$t.forEach(t),vwr=r(Oqe," \u2014 "),UJ=n(Oqe,"A",{href:!0});var h$t=s(UJ);Fwr=r(h$t,"TFEncoderDecoderModel"),h$t.forEach(t),Twr=r(Oqe," (Encoder decoder model)"),Oqe.forEach(t),Mwr=i(Ie),ME=n(Ie,"LI",{});var Vqe=s(ME);YTe=n(Vqe,"STRONG",{});var p$t=s(YTe);Ewr=r(p$t,"led"),p$t.forEach(t),Cwr=r(Vqe," \u2014 "),JJ=n(Vqe,"A",{href:!0});var _$t=s(JJ);wwr=r(_$t,"TFLEDForConditionalGeneration"),_$t.forEach(t),Awr=r(Vqe," (LED model)"),Vqe.forEach(t),Lwr=i(Ie),EE=n(Ie,"LI",{});var Xqe=s(EE);KTe=n(Xqe,"STRONG",{});var u$t=s(KTe);ywr=r(u$t,"marian"),u$t.forEach(t),xwr=r(Xqe," \u2014 "),YJ=n(Xqe,"A",{href:!0});var b$t=s(YJ);$wr=r(b$t,"TFMarianMTModel"),b$t.forEach(t),kwr=r(Xqe," (Marian model)"),Xqe.forEach(t),Swr=i(Ie),CE=n(Ie,"LI",{});var zqe=s(CE);ZTe=n(zqe,"STRONG",{});var v$t=s(ZTe);Rwr=r(v$t,"mbart"),v$t.forEach(t),Pwr=r(zqe," \u2014 "),KJ=n(zqe,"A",{href:!0});var F$t=s(KJ);Bwr=r(F$t,"TFMBartForConditionalGeneration"),F$t.forEach(t),Iwr=r(zqe," (mBART model)"),zqe.forEach(t),Nwr=i(Ie),wE=n(Ie,"LI",{});var Qqe=s(wE);e7e=n(Qqe,"STRONG",{});var T$t=s(e7e);qwr=r(T$t,"mt5"),T$t.forEach(t),jwr=r(Qqe," \u2014 "),ZJ=n(Qqe,"A",{href:!0});var M$t=s(ZJ);Dwr=r(M$t,"TFMT5ForConditionalGeneration"),M$t.forEach(t),Gwr=r(Qqe," (MT5 model)"),Qqe.forEach(t),Owr=i(Ie),AE=n(Ie,"LI",{});var Wqe=s(AE);o7e=n(Wqe,"STRONG",{});var E$t=s(o7e);Vwr=r(E$t,"pegasus"),E$t.forEach(t),Xwr=r(Wqe," \u2014 "),eY=n(Wqe,"A",{href:!0});var C$t=s(eY);zwr=r(C$t,"TFPegasusForConditionalGeneration"),C$t.forEach(t),Qwr=r(Wqe," (Pegasus model)"),Wqe.forEach(t),Wwr=i(Ie),LE=n(Ie,"LI",{});var Hqe=s(LE);r7e=n(Hqe,"STRONG",{});var w$t=s(r7e);Hwr=r(w$t,"t5"),w$t.forEach(t),Uwr=r(Hqe," \u2014 "),oY=n(Hqe,"A",{href:!0});var A$t=s(oY);Jwr=r(A$t,"TFT5ForConditionalGeneration"),A$t.forEach(t),Ywr=r(Hqe," (T5 model)"),Hqe.forEach(t),Ie.forEach(t),Kwr=i(Nl),T(yE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),JVe=i(f),Tc=n(f,"H2",{class:!0});var aQe=s(Tc);xE=n(aQe,"A",{id:!0,class:!0,href:!0});var L$t=s(xE);t7e=n(L$t,"SPAN",{});var y$t=s(t7e);T(rx.$$.fragment,y$t),y$t.forEach(t),L$t.forEach(t),Zwr=i(aQe),a7e=n(aQe,"SPAN",{});var x$t=s(a7e);eAr=r(x$t,"TFAutoModelForSequenceClassification"),x$t.forEach(t),aQe.forEach(t),YVe=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(tx.$$.fragment,ql),oAr=i(ql),Mc=n(ql,"P",{});var Kre=s(Mc);rAr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=n(Kre,"A",{href:!0});var $$t=s(rY);tAr=r($$t,"from_pretrained()"),$$t.forEach(t),aAr=r(Kre," class method or the "),tY=n(Kre,"A",{href:!0});var k$t=s(tY);nAr=r(k$t,"from_config()"),k$t.forEach(t),sAr=r(Kre,` class
method.`),Kre.forEach(t),lAr=i(ql),ax=n(ql,"P",{});var nQe=s(ax);iAr=r(nQe,"This class cannot be instantiated directly using "),n7e=n(nQe,"CODE",{});var S$t=s(n7e);dAr=r(S$t,"__init__()"),S$t.forEach(t),cAr=r(nQe," (throws an error)."),nQe.forEach(t),fAr=i(ql),Nt=n(ql,"DIV",{class:!0});var J6=s(Nt);T(nx.$$.fragment,J6),mAr=i(J6),s7e=n(J6,"P",{});var R$t=s(s7e);gAr=r(R$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R$t.forEach(t),hAr=i(J6),Ec=n(J6,"P",{});var Zre=s(Ec);pAr=r(Zre,`Note:
Loading a model from its configuration file does `),l7e=n(Zre,"STRONG",{});var P$t=s(l7e);_Ar=r(P$t,"not"),P$t.forEach(t),uAr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(Zre,"A",{href:!0});var B$t=s(aY);bAr=r(B$t,"from_pretrained()"),B$t.forEach(t),vAr=r(Zre," to load the model weights."),Zre.forEach(t),FAr=i(J6),T($E.$$.fragment,J6),J6.forEach(t),TAr=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(sx.$$.fragment,jl),MAr=i(jl),i7e=n(jl,"P",{});var I$t=s(i7e);EAr=r(I$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I$t.forEach(t),CAr=i(jl),mn=n(jl,"P",{});var Y6=s(mn);wAr=r(Y6,"The model class to instantiate is selected based on the "),d7e=n(Y6,"CODE",{});var N$t=s(d7e);AAr=r(N$t,"model_type"),N$t.forEach(t),LAr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),c7e=n(Y6,"CODE",{});var q$t=s(c7e);yAr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),xAr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(Y6,"CODE",{});var j$t=s(f7e);$Ar=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),kAr=r(Y6,":"),Y6.forEach(t),SAr=i(jl),te=n(jl,"UL",{});var ne=s(te);kE=n(ne,"LI",{});var Uqe=s(kE);m7e=n(Uqe,"STRONG",{});var D$t=s(m7e);RAr=r(D$t,"albert"),D$t.forEach(t),PAr=r(Uqe," \u2014 "),nY=n(Uqe,"A",{href:!0});var G$t=s(nY);BAr=r(G$t,"TFAlbertForSequenceClassification"),G$t.forEach(t),IAr=r(Uqe," (ALBERT model)"),Uqe.forEach(t),NAr=i(ne),SE=n(ne,"LI",{});var Jqe=s(SE);g7e=n(Jqe,"STRONG",{});var O$t=s(g7e);qAr=r(O$t,"bert"),O$t.forEach(t),jAr=r(Jqe," \u2014 "),sY=n(Jqe,"A",{href:!0});var V$t=s(sY);DAr=r(V$t,"TFBertForSequenceClassification"),V$t.forEach(t),GAr=r(Jqe," (BERT model)"),Jqe.forEach(t),OAr=i(ne),RE=n(ne,"LI",{});var Yqe=s(RE);h7e=n(Yqe,"STRONG",{});var X$t=s(h7e);VAr=r(X$t,"camembert"),X$t.forEach(t),XAr=r(Yqe," \u2014 "),lY=n(Yqe,"A",{href:!0});var z$t=s(lY);zAr=r(z$t,"TFCamembertForSequenceClassification"),z$t.forEach(t),QAr=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),WAr=i(ne),PE=n(ne,"LI",{});var Kqe=s(PE);p7e=n(Kqe,"STRONG",{});var Q$t=s(p7e);HAr=r(Q$t,"convbert"),Q$t.forEach(t),UAr=r(Kqe," \u2014 "),iY=n(Kqe,"A",{href:!0});var W$t=s(iY);JAr=r(W$t,"TFConvBertForSequenceClassification"),W$t.forEach(t),YAr=r(Kqe," (ConvBERT model)"),Kqe.forEach(t),KAr=i(ne),BE=n(ne,"LI",{});var Zqe=s(BE);_7e=n(Zqe,"STRONG",{});var H$t=s(_7e);ZAr=r(H$t,"ctrl"),H$t.forEach(t),e6r=r(Zqe," \u2014 "),dY=n(Zqe,"A",{href:!0});var U$t=s(dY);o6r=r(U$t,"TFCTRLForSequenceClassification"),U$t.forEach(t),r6r=r(Zqe," (CTRL model)"),Zqe.forEach(t),t6r=i(ne),IE=n(ne,"LI",{});var eje=s(IE);u7e=n(eje,"STRONG",{});var J$t=s(u7e);a6r=r(J$t,"deberta"),J$t.forEach(t),n6r=r(eje," \u2014 "),cY=n(eje,"A",{href:!0});var Y$t=s(cY);s6r=r(Y$t,"TFDebertaForSequenceClassification"),Y$t.forEach(t),l6r=r(eje," (DeBERTa model)"),eje.forEach(t),i6r=i(ne),NE=n(ne,"LI",{});var oje=s(NE);b7e=n(oje,"STRONG",{});var K$t=s(b7e);d6r=r(K$t,"deberta-v2"),K$t.forEach(t),c6r=r(oje," \u2014 "),fY=n(oje,"A",{href:!0});var Z$t=s(fY);f6r=r(Z$t,"TFDebertaV2ForSequenceClassification"),Z$t.forEach(t),m6r=r(oje," (DeBERTa-v2 model)"),oje.forEach(t),g6r=i(ne),qE=n(ne,"LI",{});var rje=s(qE);v7e=n(rje,"STRONG",{});var ekt=s(v7e);h6r=r(ekt,"distilbert"),ekt.forEach(t),p6r=r(rje," \u2014 "),mY=n(rje,"A",{href:!0});var okt=s(mY);_6r=r(okt,"TFDistilBertForSequenceClassification"),okt.forEach(t),u6r=r(rje," (DistilBERT model)"),rje.forEach(t),b6r=i(ne),jE=n(ne,"LI",{});var tje=s(jE);F7e=n(tje,"STRONG",{});var rkt=s(F7e);v6r=r(rkt,"electra"),rkt.forEach(t),F6r=r(tje," \u2014 "),gY=n(tje,"A",{href:!0});var tkt=s(gY);T6r=r(tkt,"TFElectraForSequenceClassification"),tkt.forEach(t),M6r=r(tje," (ELECTRA model)"),tje.forEach(t),E6r=i(ne),DE=n(ne,"LI",{});var aje=s(DE);T7e=n(aje,"STRONG",{});var akt=s(T7e);C6r=r(akt,"flaubert"),akt.forEach(t),w6r=r(aje," \u2014 "),hY=n(aje,"A",{href:!0});var nkt=s(hY);A6r=r(nkt,"TFFlaubertForSequenceClassification"),nkt.forEach(t),L6r=r(aje," (FlauBERT model)"),aje.forEach(t),y6r=i(ne),GE=n(ne,"LI",{});var nje=s(GE);M7e=n(nje,"STRONG",{});var skt=s(M7e);x6r=r(skt,"funnel"),skt.forEach(t),$6r=r(nje," \u2014 "),pY=n(nje,"A",{href:!0});var lkt=s(pY);k6r=r(lkt,"TFFunnelForSequenceClassification"),lkt.forEach(t),S6r=r(nje," (Funnel Transformer model)"),nje.forEach(t),R6r=i(ne),OE=n(ne,"LI",{});var sje=s(OE);E7e=n(sje,"STRONG",{});var ikt=s(E7e);P6r=r(ikt,"gpt2"),ikt.forEach(t),B6r=r(sje," \u2014 "),_Y=n(sje,"A",{href:!0});var dkt=s(_Y);I6r=r(dkt,"TFGPT2ForSequenceClassification"),dkt.forEach(t),N6r=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),q6r=i(ne),VE=n(ne,"LI",{});var lje=s(VE);C7e=n(lje,"STRONG",{});var ckt=s(C7e);j6r=r(ckt,"gptj"),ckt.forEach(t),D6r=r(lje," \u2014 "),uY=n(lje,"A",{href:!0});var fkt=s(uY);G6r=r(fkt,"TFGPTJForSequenceClassification"),fkt.forEach(t),O6r=r(lje," (GPT-J model)"),lje.forEach(t),V6r=i(ne),XE=n(ne,"LI",{});var ije=s(XE);w7e=n(ije,"STRONG",{});var mkt=s(w7e);X6r=r(mkt,"layoutlm"),mkt.forEach(t),z6r=r(ije," \u2014 "),bY=n(ije,"A",{href:!0});var gkt=s(bY);Q6r=r(gkt,"TFLayoutLMForSequenceClassification"),gkt.forEach(t),W6r=r(ije," (LayoutLM model)"),ije.forEach(t),H6r=i(ne),zE=n(ne,"LI",{});var dje=s(zE);A7e=n(dje,"STRONG",{});var hkt=s(A7e);U6r=r(hkt,"longformer"),hkt.forEach(t),J6r=r(dje," \u2014 "),vY=n(dje,"A",{href:!0});var pkt=s(vY);Y6r=r(pkt,"TFLongformerForSequenceClassification"),pkt.forEach(t),K6r=r(dje," (Longformer model)"),dje.forEach(t),Z6r=i(ne),QE=n(ne,"LI",{});var cje=s(QE);L7e=n(cje,"STRONG",{});var _kt=s(L7e);eLr=r(_kt,"mobilebert"),_kt.forEach(t),oLr=r(cje," \u2014 "),FY=n(cje,"A",{href:!0});var ukt=s(FY);rLr=r(ukt,"TFMobileBertForSequenceClassification"),ukt.forEach(t),tLr=r(cje," (MobileBERT model)"),cje.forEach(t),aLr=i(ne),WE=n(ne,"LI",{});var fje=s(WE);y7e=n(fje,"STRONG",{});var bkt=s(y7e);nLr=r(bkt,"mpnet"),bkt.forEach(t),sLr=r(fje," \u2014 "),TY=n(fje,"A",{href:!0});var vkt=s(TY);lLr=r(vkt,"TFMPNetForSequenceClassification"),vkt.forEach(t),iLr=r(fje," (MPNet model)"),fje.forEach(t),dLr=i(ne),HE=n(ne,"LI",{});var mje=s(HE);x7e=n(mje,"STRONG",{});var Fkt=s(x7e);cLr=r(Fkt,"openai-gpt"),Fkt.forEach(t),fLr=r(mje," \u2014 "),MY=n(mje,"A",{href:!0});var Tkt=s(MY);mLr=r(Tkt,"TFOpenAIGPTForSequenceClassification"),Tkt.forEach(t),gLr=r(mje," (OpenAI GPT model)"),mje.forEach(t),hLr=i(ne),UE=n(ne,"LI",{});var gje=s(UE);$7e=n(gje,"STRONG",{});var Mkt=s($7e);pLr=r(Mkt,"rembert"),Mkt.forEach(t),_Lr=r(gje," \u2014 "),EY=n(gje,"A",{href:!0});var Ekt=s(EY);uLr=r(Ekt,"TFRemBertForSequenceClassification"),Ekt.forEach(t),bLr=r(gje," (RemBERT model)"),gje.forEach(t),vLr=i(ne),JE=n(ne,"LI",{});var hje=s(JE);k7e=n(hje,"STRONG",{});var Ckt=s(k7e);FLr=r(Ckt,"roberta"),Ckt.forEach(t),TLr=r(hje," \u2014 "),CY=n(hje,"A",{href:!0});var wkt=s(CY);MLr=r(wkt,"TFRobertaForSequenceClassification"),wkt.forEach(t),ELr=r(hje," (RoBERTa model)"),hje.forEach(t),CLr=i(ne),YE=n(ne,"LI",{});var pje=s(YE);S7e=n(pje,"STRONG",{});var Akt=s(S7e);wLr=r(Akt,"roformer"),Akt.forEach(t),ALr=r(pje," \u2014 "),wY=n(pje,"A",{href:!0});var Lkt=s(wY);LLr=r(Lkt,"TFRoFormerForSequenceClassification"),Lkt.forEach(t),yLr=r(pje," (RoFormer model)"),pje.forEach(t),xLr=i(ne),KE=n(ne,"LI",{});var _je=s(KE);R7e=n(_je,"STRONG",{});var ykt=s(R7e);$Lr=r(ykt,"tapas"),ykt.forEach(t),kLr=r(_je," \u2014 "),AY=n(_je,"A",{href:!0});var xkt=s(AY);SLr=r(xkt,"TFTapasForSequenceClassification"),xkt.forEach(t),RLr=r(_je," (TAPAS model)"),_je.forEach(t),PLr=i(ne),ZE=n(ne,"LI",{});var uje=s(ZE);P7e=n(uje,"STRONG",{});var $kt=s(P7e);BLr=r($kt,"transfo-xl"),$kt.forEach(t),ILr=r(uje," \u2014 "),LY=n(uje,"A",{href:!0});var kkt=s(LY);NLr=r(kkt,"TFTransfoXLForSequenceClassification"),kkt.forEach(t),qLr=r(uje," (Transformer-XL model)"),uje.forEach(t),jLr=i(ne),eC=n(ne,"LI",{});var bje=s(eC);B7e=n(bje,"STRONG",{});var Skt=s(B7e);DLr=r(Skt,"xlm"),Skt.forEach(t),GLr=r(bje," \u2014 "),yY=n(bje,"A",{href:!0});var Rkt=s(yY);OLr=r(Rkt,"TFXLMForSequenceClassification"),Rkt.forEach(t),VLr=r(bje," (XLM model)"),bje.forEach(t),XLr=i(ne),oC=n(ne,"LI",{});var vje=s(oC);I7e=n(vje,"STRONG",{});var Pkt=s(I7e);zLr=r(Pkt,"xlm-roberta"),Pkt.forEach(t),QLr=r(vje," \u2014 "),xY=n(vje,"A",{href:!0});var Bkt=s(xY);WLr=r(Bkt,"TFXLMRobertaForSequenceClassification"),Bkt.forEach(t),HLr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),ULr=i(ne),rC=n(ne,"LI",{});var Fje=s(rC);N7e=n(Fje,"STRONG",{});var Ikt=s(N7e);JLr=r(Ikt,"xlnet"),Ikt.forEach(t),YLr=r(Fje," \u2014 "),$Y=n(Fje,"A",{href:!0});var Nkt=s($Y);KLr=r(Nkt,"TFXLNetForSequenceClassification"),Nkt.forEach(t),ZLr=r(Fje," (XLNet model)"),Fje.forEach(t),ne.forEach(t),eyr=i(jl),T(tC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),KVe=i(f),Cc=n(f,"H2",{class:!0});var sQe=s(Cc);aC=n(sQe,"A",{id:!0,class:!0,href:!0});var qkt=s(aC);q7e=n(qkt,"SPAN",{});var jkt=s(q7e);T(lx.$$.fragment,jkt),jkt.forEach(t),qkt.forEach(t),oyr=i(sQe),j7e=n(sQe,"SPAN",{});var Dkt=s(j7e);ryr=r(Dkt,"TFAutoModelForMultipleChoice"),Dkt.forEach(t),sQe.forEach(t),ZVe=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(ix.$$.fragment,Dl),tyr=i(Dl),wc=n(Dl,"P",{});var ete=s(wc);ayr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=n(ete,"A",{href:!0});var Gkt=s(kY);nyr=r(Gkt,"from_pretrained()"),Gkt.forEach(t),syr=r(ete," class method or the "),SY=n(ete,"A",{href:!0});var Okt=s(SY);lyr=r(Okt,"from_config()"),Okt.forEach(t),iyr=r(ete,` class
method.`),ete.forEach(t),dyr=i(Dl),dx=n(Dl,"P",{});var lQe=s(dx);cyr=r(lQe,"This class cannot be instantiated directly using "),D7e=n(lQe,"CODE",{});var Vkt=s(D7e);fyr=r(Vkt,"__init__()"),Vkt.forEach(t),myr=r(lQe," (throws an error)."),lQe.forEach(t),gyr=i(Dl),qt=n(Dl,"DIV",{class:!0});var K6=s(qt);T(cx.$$.fragment,K6),hyr=i(K6),G7e=n(K6,"P",{});var Xkt=s(G7e);pyr=r(Xkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xkt.forEach(t),_yr=i(K6),Ac=n(K6,"P",{});var ote=s(Ac);uyr=r(ote,`Note:
Loading a model from its configuration file does `),O7e=n(ote,"STRONG",{});var zkt=s(O7e);byr=r(zkt,"not"),zkt.forEach(t),vyr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(ote,"A",{href:!0});var Qkt=s(RY);Fyr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),Tyr=r(ote," to load the model weights."),ote.forEach(t),Myr=i(K6),T(nC.$$.fragment,K6),K6.forEach(t),Eyr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(fx.$$.fragment,Gl),Cyr=i(Gl),V7e=n(Gl,"P",{});var Wkt=s(V7e);wyr=r(Wkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wkt.forEach(t),Ayr=i(Gl),gn=n(Gl,"P",{});var Z6=s(gn);Lyr=r(Z6,"The model class to instantiate is selected based on the "),X7e=n(Z6,"CODE",{});var Hkt=s(X7e);yyr=r(Hkt,"model_type"),Hkt.forEach(t),xyr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),z7e=n(Z6,"CODE",{});var Ukt=s(z7e);$yr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),kyr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(Z6,"CODE",{});var Jkt=s(Q7e);Syr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),Ryr=r(Z6,":"),Z6.forEach(t),Pyr=i(Gl),_e=n(Gl,"UL",{});var ve=s(_e);sC=n(ve,"LI",{});var Tje=s(sC);W7e=n(Tje,"STRONG",{});var Ykt=s(W7e);Byr=r(Ykt,"albert"),Ykt.forEach(t),Iyr=r(Tje," \u2014 "),PY=n(Tje,"A",{href:!0});var Kkt=s(PY);Nyr=r(Kkt,"TFAlbertForMultipleChoice"),Kkt.forEach(t),qyr=r(Tje," (ALBERT model)"),Tje.forEach(t),jyr=i(ve),lC=n(ve,"LI",{});var Mje=s(lC);H7e=n(Mje,"STRONG",{});var Zkt=s(H7e);Dyr=r(Zkt,"bert"),Zkt.forEach(t),Gyr=r(Mje," \u2014 "),BY=n(Mje,"A",{href:!0});var eSt=s(BY);Oyr=r(eSt,"TFBertForMultipleChoice"),eSt.forEach(t),Vyr=r(Mje," (BERT model)"),Mje.forEach(t),Xyr=i(ve),iC=n(ve,"LI",{});var Eje=s(iC);U7e=n(Eje,"STRONG",{});var oSt=s(U7e);zyr=r(oSt,"camembert"),oSt.forEach(t),Qyr=r(Eje," \u2014 "),IY=n(Eje,"A",{href:!0});var rSt=s(IY);Wyr=r(rSt,"TFCamembertForMultipleChoice"),rSt.forEach(t),Hyr=r(Eje," (CamemBERT model)"),Eje.forEach(t),Uyr=i(ve),dC=n(ve,"LI",{});var Cje=s(dC);J7e=n(Cje,"STRONG",{});var tSt=s(J7e);Jyr=r(tSt,"convbert"),tSt.forEach(t),Yyr=r(Cje," \u2014 "),NY=n(Cje,"A",{href:!0});var aSt=s(NY);Kyr=r(aSt,"TFConvBertForMultipleChoice"),aSt.forEach(t),Zyr=r(Cje," (ConvBERT model)"),Cje.forEach(t),e8r=i(ve),cC=n(ve,"LI",{});var wje=s(cC);Y7e=n(wje,"STRONG",{});var nSt=s(Y7e);o8r=r(nSt,"distilbert"),nSt.forEach(t),r8r=r(wje," \u2014 "),qY=n(wje,"A",{href:!0});var sSt=s(qY);t8r=r(sSt,"TFDistilBertForMultipleChoice"),sSt.forEach(t),a8r=r(wje," (DistilBERT model)"),wje.forEach(t),n8r=i(ve),fC=n(ve,"LI",{});var Aje=s(fC);K7e=n(Aje,"STRONG",{});var lSt=s(K7e);s8r=r(lSt,"electra"),lSt.forEach(t),l8r=r(Aje," \u2014 "),jY=n(Aje,"A",{href:!0});var iSt=s(jY);i8r=r(iSt,"TFElectraForMultipleChoice"),iSt.forEach(t),d8r=r(Aje," (ELECTRA model)"),Aje.forEach(t),c8r=i(ve),mC=n(ve,"LI",{});var Lje=s(mC);Z7e=n(Lje,"STRONG",{});var dSt=s(Z7e);f8r=r(dSt,"flaubert"),dSt.forEach(t),m8r=r(Lje," \u2014 "),DY=n(Lje,"A",{href:!0});var cSt=s(DY);g8r=r(cSt,"TFFlaubertForMultipleChoice"),cSt.forEach(t),h8r=r(Lje," (FlauBERT model)"),Lje.forEach(t),p8r=i(ve),gC=n(ve,"LI",{});var yje=s(gC);eMe=n(yje,"STRONG",{});var fSt=s(eMe);_8r=r(fSt,"funnel"),fSt.forEach(t),u8r=r(yje," \u2014 "),GY=n(yje,"A",{href:!0});var mSt=s(GY);b8r=r(mSt,"TFFunnelForMultipleChoice"),mSt.forEach(t),v8r=r(yje," (Funnel Transformer model)"),yje.forEach(t),F8r=i(ve),hC=n(ve,"LI",{});var xje=s(hC);oMe=n(xje,"STRONG",{});var gSt=s(oMe);T8r=r(gSt,"longformer"),gSt.forEach(t),M8r=r(xje," \u2014 "),OY=n(xje,"A",{href:!0});var hSt=s(OY);E8r=r(hSt,"TFLongformerForMultipleChoice"),hSt.forEach(t),C8r=r(xje," (Longformer model)"),xje.forEach(t),w8r=i(ve),pC=n(ve,"LI",{});var $je=s(pC);rMe=n($je,"STRONG",{});var pSt=s(rMe);A8r=r(pSt,"mobilebert"),pSt.forEach(t),L8r=r($je," \u2014 "),VY=n($je,"A",{href:!0});var _St=s(VY);y8r=r(_St,"TFMobileBertForMultipleChoice"),_St.forEach(t),x8r=r($je," (MobileBERT model)"),$je.forEach(t),$8r=i(ve),_C=n(ve,"LI",{});var kje=s(_C);tMe=n(kje,"STRONG",{});var uSt=s(tMe);k8r=r(uSt,"mpnet"),uSt.forEach(t),S8r=r(kje," \u2014 "),XY=n(kje,"A",{href:!0});var bSt=s(XY);R8r=r(bSt,"TFMPNetForMultipleChoice"),bSt.forEach(t),P8r=r(kje," (MPNet model)"),kje.forEach(t),B8r=i(ve),uC=n(ve,"LI",{});var Sje=s(uC);aMe=n(Sje,"STRONG",{});var vSt=s(aMe);I8r=r(vSt,"rembert"),vSt.forEach(t),N8r=r(Sje," \u2014 "),zY=n(Sje,"A",{href:!0});var FSt=s(zY);q8r=r(FSt,"TFRemBertForMultipleChoice"),FSt.forEach(t),j8r=r(Sje," (RemBERT model)"),Sje.forEach(t),D8r=i(ve),bC=n(ve,"LI",{});var Rje=s(bC);nMe=n(Rje,"STRONG",{});var TSt=s(nMe);G8r=r(TSt,"roberta"),TSt.forEach(t),O8r=r(Rje," \u2014 "),QY=n(Rje,"A",{href:!0});var MSt=s(QY);V8r=r(MSt,"TFRobertaForMultipleChoice"),MSt.forEach(t),X8r=r(Rje," (RoBERTa model)"),Rje.forEach(t),z8r=i(ve),vC=n(ve,"LI",{});var Pje=s(vC);sMe=n(Pje,"STRONG",{});var ESt=s(sMe);Q8r=r(ESt,"roformer"),ESt.forEach(t),W8r=r(Pje," \u2014 "),WY=n(Pje,"A",{href:!0});var CSt=s(WY);H8r=r(CSt,"TFRoFormerForMultipleChoice"),CSt.forEach(t),U8r=r(Pje," (RoFormer model)"),Pje.forEach(t),J8r=i(ve),FC=n(ve,"LI",{});var Bje=s(FC);lMe=n(Bje,"STRONG",{});var wSt=s(lMe);Y8r=r(wSt,"xlm"),wSt.forEach(t),K8r=r(Bje," \u2014 "),HY=n(Bje,"A",{href:!0});var ASt=s(HY);Z8r=r(ASt,"TFXLMForMultipleChoice"),ASt.forEach(t),e9r=r(Bje," (XLM model)"),Bje.forEach(t),o9r=i(ve),TC=n(ve,"LI",{});var Ije=s(TC);iMe=n(Ije,"STRONG",{});var LSt=s(iMe);r9r=r(LSt,"xlm-roberta"),LSt.forEach(t),t9r=r(Ije," \u2014 "),UY=n(Ije,"A",{href:!0});var ySt=s(UY);a9r=r(ySt,"TFXLMRobertaForMultipleChoice"),ySt.forEach(t),n9r=r(Ije," (XLM-RoBERTa model)"),Ije.forEach(t),s9r=i(ve),MC=n(ve,"LI",{});var Nje=s(MC);dMe=n(Nje,"STRONG",{});var xSt=s(dMe);l9r=r(xSt,"xlnet"),xSt.forEach(t),i9r=r(Nje," \u2014 "),JY=n(Nje,"A",{href:!0});var $St=s(JY);d9r=r($St,"TFXLNetForMultipleChoice"),$St.forEach(t),c9r=r(Nje," (XLNet model)"),Nje.forEach(t),ve.forEach(t),f9r=i(Gl),T(EC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),eXe=i(f),Lc=n(f,"H2",{class:!0});var iQe=s(Lc);CC=n(iQe,"A",{id:!0,class:!0,href:!0});var kSt=s(CC);cMe=n(kSt,"SPAN",{});var SSt=s(cMe);T(mx.$$.fragment,SSt),SSt.forEach(t),kSt.forEach(t),m9r=i(iQe),fMe=n(iQe,"SPAN",{});var RSt=s(fMe);g9r=r(RSt,"TFAutoModelForNextSentencePrediction"),RSt.forEach(t),iQe.forEach(t),oXe=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(gx.$$.fragment,Ol),h9r=i(Ol),yc=n(Ol,"P",{});var rte=s(yc);p9r=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=n(rte,"A",{href:!0});var PSt=s(YY);_9r=r(PSt,"from_pretrained()"),PSt.forEach(t),u9r=r(rte," class method or the "),KY=n(rte,"A",{href:!0});var BSt=s(KY);b9r=r(BSt,"from_config()"),BSt.forEach(t),v9r=r(rte,` class
method.`),rte.forEach(t),F9r=i(Ol),hx=n(Ol,"P",{});var dQe=s(hx);T9r=r(dQe,"This class cannot be instantiated directly using "),mMe=n(dQe,"CODE",{});var ISt=s(mMe);M9r=r(ISt,"__init__()"),ISt.forEach(t),E9r=r(dQe," (throws an error)."),dQe.forEach(t),C9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var eL=s(jt);T(px.$$.fragment,eL),w9r=i(eL),gMe=n(eL,"P",{});var NSt=s(gMe);A9r=r(NSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NSt.forEach(t),L9r=i(eL),xc=n(eL,"P",{});var tte=s(xc);y9r=r(tte,`Note:
Loading a model from its configuration file does `),hMe=n(tte,"STRONG",{});var qSt=s(hMe);x9r=r(qSt,"not"),qSt.forEach(t),$9r=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(tte,"A",{href:!0});var jSt=s(ZY);k9r=r(jSt,"from_pretrained()"),jSt.forEach(t),S9r=r(tte," to load the model weights."),tte.forEach(t),R9r=i(eL),T(wC.$$.fragment,eL),eL.forEach(t),P9r=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(_x.$$.fragment,Vl),B9r=i(Vl),pMe=n(Vl,"P",{});var DSt=s(pMe);I9r=r(DSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DSt.forEach(t),N9r=i(Vl),hn=n(Vl,"P",{});var oL=s(hn);q9r=r(oL,"The model class to instantiate is selected based on the "),_Me=n(oL,"CODE",{});var GSt=s(_Me);j9r=r(GSt,"model_type"),GSt.forEach(t),D9r=r(oL,` property of the config object (either
passed as an argument or loaded from `),uMe=n(oL,"CODE",{});var OSt=s(uMe);G9r=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),O9r=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(oL,"CODE",{});var VSt=s(bMe);V9r=r(VSt,"pretrained_model_name_or_path"),VSt.forEach(t),X9r=r(oL,":"),oL.forEach(t),z9r=i(Vl),ux=n(Vl,"UL",{});var cQe=s(ux);AC=n(cQe,"LI",{});var qje=s(AC);vMe=n(qje,"STRONG",{});var XSt=s(vMe);Q9r=r(XSt,"bert"),XSt.forEach(t),W9r=r(qje," \u2014 "),eK=n(qje,"A",{href:!0});var zSt=s(eK);H9r=r(zSt,"TFBertForNextSentencePrediction"),zSt.forEach(t),U9r=r(qje," (BERT model)"),qje.forEach(t),J9r=i(cQe),LC=n(cQe,"LI",{});var jje=s(LC);FMe=n(jje,"STRONG",{});var QSt=s(FMe);Y9r=r(QSt,"mobilebert"),QSt.forEach(t),K9r=r(jje," \u2014 "),oK=n(jje,"A",{href:!0});var WSt=s(oK);Z9r=r(WSt,"TFMobileBertForNextSentencePrediction"),WSt.forEach(t),exr=r(jje," (MobileBERT model)"),jje.forEach(t),cQe.forEach(t),oxr=i(Vl),T(yC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),rXe=i(f),$c=n(f,"H2",{class:!0});var fQe=s($c);xC=n(fQe,"A",{id:!0,class:!0,href:!0});var HSt=s(xC);TMe=n(HSt,"SPAN",{});var USt=s(TMe);T(bx.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),rxr=i(fQe),MMe=n(fQe,"SPAN",{});var JSt=s(MMe);txr=r(JSt,"TFAutoModelForTableQuestionAnswering"),JSt.forEach(t),fQe.forEach(t),tXe=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(vx.$$.fragment,Xl),axr=i(Xl),kc=n(Xl,"P",{});var ate=s(kc);nxr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rK=n(ate,"A",{href:!0});var YSt=s(rK);sxr=r(YSt,"from_pretrained()"),YSt.forEach(t),lxr=r(ate," class method or the "),tK=n(ate,"A",{href:!0});var KSt=s(tK);ixr=r(KSt,"from_config()"),KSt.forEach(t),dxr=r(ate,` class
method.`),ate.forEach(t),cxr=i(Xl),Fx=n(Xl,"P",{});var mQe=s(Fx);fxr=r(mQe,"This class cannot be instantiated directly using "),EMe=n(mQe,"CODE",{});var ZSt=s(EMe);mxr=r(ZSt,"__init__()"),ZSt.forEach(t),gxr=r(mQe," (throws an error)."),mQe.forEach(t),hxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var rL=s(Dt);T(Tx.$$.fragment,rL),pxr=i(rL),CMe=n(rL,"P",{});var eRt=s(CMe);_xr=r(eRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eRt.forEach(t),uxr=i(rL),Sc=n(rL,"P",{});var nte=s(Sc);bxr=r(nte,`Note:
Loading a model from its configuration file does `),wMe=n(nte,"STRONG",{});var oRt=s(wMe);vxr=r(oRt,"not"),oRt.forEach(t),Fxr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(nte,"A",{href:!0});var rRt=s(aK);Txr=r(rRt,"from_pretrained()"),rRt.forEach(t),Mxr=r(nte," to load the model weights."),nte.forEach(t),Exr=i(rL),T($C.$$.fragment,rL),rL.forEach(t),Cxr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Mx.$$.fragment,zl),wxr=i(zl),AMe=n(zl,"P",{});var tRt=s(AMe);Axr=r(tRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tRt.forEach(t),Lxr=i(zl),pn=n(zl,"P",{});var tL=s(pn);yxr=r(tL,"The model class to instantiate is selected based on the "),LMe=n(tL,"CODE",{});var aRt=s(LMe);xxr=r(aRt,"model_type"),aRt.forEach(t),$xr=r(tL,` property of the config object (either
passed as an argument or loaded from `),yMe=n(tL,"CODE",{});var nRt=s(yMe);kxr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),Sxr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(tL,"CODE",{});var sRt=s(xMe);Rxr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),Pxr=r(tL,":"),tL.forEach(t),Bxr=i(zl),$Me=n(zl,"UL",{});var lRt=s($Me);kC=n(lRt,"LI",{});var Dje=s(kC);kMe=n(Dje,"STRONG",{});var iRt=s(kMe);Ixr=r(iRt,"tapas"),iRt.forEach(t),Nxr=r(Dje," \u2014 "),nK=n(Dje,"A",{href:!0});var dRt=s(nK);qxr=r(dRt,"TFTapasForQuestionAnswering"),dRt.forEach(t),jxr=r(Dje," (TAPAS model)"),Dje.forEach(t),lRt.forEach(t),Dxr=i(zl),T(SC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),aXe=i(f),Rc=n(f,"H2",{class:!0});var gQe=s(Rc);RC=n(gQe,"A",{id:!0,class:!0,href:!0});var cRt=s(RC);SMe=n(cRt,"SPAN",{});var fRt=s(SMe);T(Ex.$$.fragment,fRt),fRt.forEach(t),cRt.forEach(t),Gxr=i(gQe),RMe=n(gQe,"SPAN",{});var mRt=s(RMe);Oxr=r(mRt,"TFAutoModelForTokenClassification"),mRt.forEach(t),gQe.forEach(t),nXe=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Cx.$$.fragment,Ql),Vxr=i(Ql),Pc=n(Ql,"P",{});var ste=s(Pc);Xxr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sK=n(ste,"A",{href:!0});var gRt=s(sK);zxr=r(gRt,"from_pretrained()"),gRt.forEach(t),Qxr=r(ste," class method or the "),lK=n(ste,"A",{href:!0});var hRt=s(lK);Wxr=r(hRt,"from_config()"),hRt.forEach(t),Hxr=r(ste,` class
method.`),ste.forEach(t),Uxr=i(Ql),wx=n(Ql,"P",{});var hQe=s(wx);Jxr=r(hQe,"This class cannot be instantiated directly using "),PMe=n(hQe,"CODE",{});var pRt=s(PMe);Yxr=r(pRt,"__init__()"),pRt.forEach(t),Kxr=r(hQe," (throws an error)."),hQe.forEach(t),Zxr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var aL=s(Gt);T(Ax.$$.fragment,aL),e$r=i(aL),BMe=n(aL,"P",{});var _Rt=s(BMe);o$r=r(_Rt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Rt.forEach(t),r$r=i(aL),Bc=n(aL,"P",{});var lte=s(Bc);t$r=r(lte,`Note:
Loading a model from its configuration file does `),IMe=n(lte,"STRONG",{});var uRt=s(IMe);a$r=r(uRt,"not"),uRt.forEach(t),n$r=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(lte,"A",{href:!0});var bRt=s(iK);s$r=r(bRt,"from_pretrained()"),bRt.forEach(t),l$r=r(lte," to load the model weights."),lte.forEach(t),i$r=i(aL),T(PC.$$.fragment,aL),aL.forEach(t),d$r=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Lx.$$.fragment,Wl),c$r=i(Wl),NMe=n(Wl,"P",{});var vRt=s(NMe);f$r=r(vRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vRt.forEach(t),m$r=i(Wl),_n=n(Wl,"P",{});var nL=s(_n);g$r=r(nL,"The model class to instantiate is selected based on the "),qMe=n(nL,"CODE",{});var FRt=s(qMe);h$r=r(FRt,"model_type"),FRt.forEach(t),p$r=r(nL,` property of the config object (either
passed as an argument or loaded from `),jMe=n(nL,"CODE",{});var TRt=s(jMe);_$r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),u$r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(nL,"CODE",{});var MRt=s(DMe);b$r=r(MRt,"pretrained_model_name_or_path"),MRt.forEach(t),v$r=r(nL,":"),nL.forEach(t),F$r=i(Wl),de=n(Wl,"UL",{});var me=s(de);BC=n(me,"LI",{});var Gje=s(BC);GMe=n(Gje,"STRONG",{});var ERt=s(GMe);T$r=r(ERt,"albert"),ERt.forEach(t),M$r=r(Gje," \u2014 "),dK=n(Gje,"A",{href:!0});var CRt=s(dK);E$r=r(CRt,"TFAlbertForTokenClassification"),CRt.forEach(t),C$r=r(Gje," (ALBERT model)"),Gje.forEach(t),w$r=i(me),IC=n(me,"LI",{});var Oje=s(IC);OMe=n(Oje,"STRONG",{});var wRt=s(OMe);A$r=r(wRt,"bert"),wRt.forEach(t),L$r=r(Oje," \u2014 "),cK=n(Oje,"A",{href:!0});var ARt=s(cK);y$r=r(ARt,"TFBertForTokenClassification"),ARt.forEach(t),x$r=r(Oje," (BERT model)"),Oje.forEach(t),$$r=i(me),NC=n(me,"LI",{});var Vje=s(NC);VMe=n(Vje,"STRONG",{});var LRt=s(VMe);k$r=r(LRt,"camembert"),LRt.forEach(t),S$r=r(Vje," \u2014 "),fK=n(Vje,"A",{href:!0});var yRt=s(fK);R$r=r(yRt,"TFCamembertForTokenClassification"),yRt.forEach(t),P$r=r(Vje," (CamemBERT model)"),Vje.forEach(t),B$r=i(me),qC=n(me,"LI",{});var Xje=s(qC);XMe=n(Xje,"STRONG",{});var xRt=s(XMe);I$r=r(xRt,"convbert"),xRt.forEach(t),N$r=r(Xje," \u2014 "),mK=n(Xje,"A",{href:!0});var $Rt=s(mK);q$r=r($Rt,"TFConvBertForTokenClassification"),$Rt.forEach(t),j$r=r(Xje," (ConvBERT model)"),Xje.forEach(t),D$r=i(me),jC=n(me,"LI",{});var zje=s(jC);zMe=n(zje,"STRONG",{});var kRt=s(zMe);G$r=r(kRt,"deberta"),kRt.forEach(t),O$r=r(zje," \u2014 "),gK=n(zje,"A",{href:!0});var SRt=s(gK);V$r=r(SRt,"TFDebertaForTokenClassification"),SRt.forEach(t),X$r=r(zje," (DeBERTa model)"),zje.forEach(t),z$r=i(me),DC=n(me,"LI",{});var Qje=s(DC);QMe=n(Qje,"STRONG",{});var RRt=s(QMe);Q$r=r(RRt,"deberta-v2"),RRt.forEach(t),W$r=r(Qje," \u2014 "),hK=n(Qje,"A",{href:!0});var PRt=s(hK);H$r=r(PRt,"TFDebertaV2ForTokenClassification"),PRt.forEach(t),U$r=r(Qje," (DeBERTa-v2 model)"),Qje.forEach(t),J$r=i(me),GC=n(me,"LI",{});var Wje=s(GC);WMe=n(Wje,"STRONG",{});var BRt=s(WMe);Y$r=r(BRt,"distilbert"),BRt.forEach(t),K$r=r(Wje," \u2014 "),pK=n(Wje,"A",{href:!0});var IRt=s(pK);Z$r=r(IRt,"TFDistilBertForTokenClassification"),IRt.forEach(t),ekr=r(Wje," (DistilBERT model)"),Wje.forEach(t),okr=i(me),OC=n(me,"LI",{});var Hje=s(OC);HMe=n(Hje,"STRONG",{});var NRt=s(HMe);rkr=r(NRt,"electra"),NRt.forEach(t),tkr=r(Hje," \u2014 "),_K=n(Hje,"A",{href:!0});var qRt=s(_K);akr=r(qRt,"TFElectraForTokenClassification"),qRt.forEach(t),nkr=r(Hje," (ELECTRA model)"),Hje.forEach(t),skr=i(me),VC=n(me,"LI",{});var Uje=s(VC);UMe=n(Uje,"STRONG",{});var jRt=s(UMe);lkr=r(jRt,"flaubert"),jRt.forEach(t),ikr=r(Uje," \u2014 "),uK=n(Uje,"A",{href:!0});var DRt=s(uK);dkr=r(DRt,"TFFlaubertForTokenClassification"),DRt.forEach(t),ckr=r(Uje," (FlauBERT model)"),Uje.forEach(t),fkr=i(me),XC=n(me,"LI",{});var Jje=s(XC);JMe=n(Jje,"STRONG",{});var GRt=s(JMe);mkr=r(GRt,"funnel"),GRt.forEach(t),gkr=r(Jje," \u2014 "),bK=n(Jje,"A",{href:!0});var ORt=s(bK);hkr=r(ORt,"TFFunnelForTokenClassification"),ORt.forEach(t),pkr=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),_kr=i(me),zC=n(me,"LI",{});var Yje=s(zC);YMe=n(Yje,"STRONG",{});var VRt=s(YMe);ukr=r(VRt,"layoutlm"),VRt.forEach(t),bkr=r(Yje," \u2014 "),vK=n(Yje,"A",{href:!0});var XRt=s(vK);vkr=r(XRt,"TFLayoutLMForTokenClassification"),XRt.forEach(t),Fkr=r(Yje," (LayoutLM model)"),Yje.forEach(t),Tkr=i(me),QC=n(me,"LI",{});var Kje=s(QC);KMe=n(Kje,"STRONG",{});var zRt=s(KMe);Mkr=r(zRt,"longformer"),zRt.forEach(t),Ekr=r(Kje," \u2014 "),FK=n(Kje,"A",{href:!0});var QRt=s(FK);Ckr=r(QRt,"TFLongformerForTokenClassification"),QRt.forEach(t),wkr=r(Kje," (Longformer model)"),Kje.forEach(t),Akr=i(me),WC=n(me,"LI",{});var Zje=s(WC);ZMe=n(Zje,"STRONG",{});var WRt=s(ZMe);Lkr=r(WRt,"mobilebert"),WRt.forEach(t),ykr=r(Zje," \u2014 "),TK=n(Zje,"A",{href:!0});var HRt=s(TK);xkr=r(HRt,"TFMobileBertForTokenClassification"),HRt.forEach(t),$kr=r(Zje," (MobileBERT model)"),Zje.forEach(t),kkr=i(me),HC=n(me,"LI",{});var eDe=s(HC);eEe=n(eDe,"STRONG",{});var URt=s(eEe);Skr=r(URt,"mpnet"),URt.forEach(t),Rkr=r(eDe," \u2014 "),MK=n(eDe,"A",{href:!0});var JRt=s(MK);Pkr=r(JRt,"TFMPNetForTokenClassification"),JRt.forEach(t),Bkr=r(eDe," (MPNet model)"),eDe.forEach(t),Ikr=i(me),UC=n(me,"LI",{});var oDe=s(UC);oEe=n(oDe,"STRONG",{});var YRt=s(oEe);Nkr=r(YRt,"rembert"),YRt.forEach(t),qkr=r(oDe," \u2014 "),EK=n(oDe,"A",{href:!0});var KRt=s(EK);jkr=r(KRt,"TFRemBertForTokenClassification"),KRt.forEach(t),Dkr=r(oDe," (RemBERT model)"),oDe.forEach(t),Gkr=i(me),JC=n(me,"LI",{});var rDe=s(JC);rEe=n(rDe,"STRONG",{});var ZRt=s(rEe);Okr=r(ZRt,"roberta"),ZRt.forEach(t),Vkr=r(rDe," \u2014 "),CK=n(rDe,"A",{href:!0});var ePt=s(CK);Xkr=r(ePt,"TFRobertaForTokenClassification"),ePt.forEach(t),zkr=r(rDe," (RoBERTa model)"),rDe.forEach(t),Qkr=i(me),YC=n(me,"LI",{});var tDe=s(YC);tEe=n(tDe,"STRONG",{});var oPt=s(tEe);Wkr=r(oPt,"roformer"),oPt.forEach(t),Hkr=r(tDe," \u2014 "),wK=n(tDe,"A",{href:!0});var rPt=s(wK);Ukr=r(rPt,"TFRoFormerForTokenClassification"),rPt.forEach(t),Jkr=r(tDe," (RoFormer model)"),tDe.forEach(t),Ykr=i(me),KC=n(me,"LI",{});var aDe=s(KC);aEe=n(aDe,"STRONG",{});var tPt=s(aEe);Kkr=r(tPt,"xlm"),tPt.forEach(t),Zkr=r(aDe," \u2014 "),AK=n(aDe,"A",{href:!0});var aPt=s(AK);eSr=r(aPt,"TFXLMForTokenClassification"),aPt.forEach(t),oSr=r(aDe," (XLM model)"),aDe.forEach(t),rSr=i(me),ZC=n(me,"LI",{});var nDe=s(ZC);nEe=n(nDe,"STRONG",{});var nPt=s(nEe);tSr=r(nPt,"xlm-roberta"),nPt.forEach(t),aSr=r(nDe," \u2014 "),LK=n(nDe,"A",{href:!0});var sPt=s(LK);nSr=r(sPt,"TFXLMRobertaForTokenClassification"),sPt.forEach(t),sSr=r(nDe," (XLM-RoBERTa model)"),nDe.forEach(t),lSr=i(me),e3=n(me,"LI",{});var sDe=s(e3);sEe=n(sDe,"STRONG",{});var lPt=s(sEe);iSr=r(lPt,"xlnet"),lPt.forEach(t),dSr=r(sDe," \u2014 "),yK=n(sDe,"A",{href:!0});var iPt=s(yK);cSr=r(iPt,"TFXLNetForTokenClassification"),iPt.forEach(t),fSr=r(sDe," (XLNet model)"),sDe.forEach(t),me.forEach(t),mSr=i(Wl),T(o3.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),sXe=i(f),Ic=n(f,"H2",{class:!0});var pQe=s(Ic);r3=n(pQe,"A",{id:!0,class:!0,href:!0});var dPt=s(r3);lEe=n(dPt,"SPAN",{});var cPt=s(lEe);T(yx.$$.fragment,cPt),cPt.forEach(t),dPt.forEach(t),gSr=i(pQe),iEe=n(pQe,"SPAN",{});var fPt=s(iEe);hSr=r(fPt,"TFAutoModelForQuestionAnswering"),fPt.forEach(t),pQe.forEach(t),lXe=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(xx.$$.fragment,Hl),pSr=i(Hl),Nc=n(Hl,"P",{});var ite=s(Nc);_Sr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xK=n(ite,"A",{href:!0});var mPt=s(xK);uSr=r(mPt,"from_pretrained()"),mPt.forEach(t),bSr=r(ite," class method or the "),$K=n(ite,"A",{href:!0});var gPt=s($K);vSr=r(gPt,"from_config()"),gPt.forEach(t),FSr=r(ite,` class
method.`),ite.forEach(t),TSr=i(Hl),$x=n(Hl,"P",{});var _Qe=s($x);MSr=r(_Qe,"This class cannot be instantiated directly using "),dEe=n(_Qe,"CODE",{});var hPt=s(dEe);ESr=r(hPt,"__init__()"),hPt.forEach(t),CSr=r(_Qe," (throws an error)."),_Qe.forEach(t),wSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var sL=s(Ot);T(kx.$$.fragment,sL),ASr=i(sL),cEe=n(sL,"P",{});var pPt=s(cEe);LSr=r(pPt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pPt.forEach(t),ySr=i(sL),qc=n(sL,"P",{});var dte=s(qc);xSr=r(dte,`Note:
Loading a model from its configuration file does `),fEe=n(dte,"STRONG",{});var _Pt=s(fEe);$Sr=r(_Pt,"not"),_Pt.forEach(t),kSr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(dte,"A",{href:!0});var uPt=s(kK);SSr=r(uPt,"from_pretrained()"),uPt.forEach(t),RSr=r(dte," to load the model weights."),dte.forEach(t),PSr=i(sL),T(t3.$$.fragment,sL),sL.forEach(t),BSr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Sx.$$.fragment,Ul),ISr=i(Ul),mEe=n(Ul,"P",{});var bPt=s(mEe);NSr=r(bPt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bPt.forEach(t),qSr=i(Ul),un=n(Ul,"P",{});var lL=s(un);jSr=r(lL,"The model class to instantiate is selected based on the "),gEe=n(lL,"CODE",{});var vPt=s(gEe);DSr=r(vPt,"model_type"),vPt.forEach(t),GSr=r(lL,` property of the config object (either
passed as an argument or loaded from `),hEe=n(lL,"CODE",{});var FPt=s(hEe);OSr=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),VSr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(lL,"CODE",{});var TPt=s(pEe);XSr=r(TPt,"pretrained_model_name_or_path"),TPt.forEach(t),zSr=r(lL,":"),lL.forEach(t),QSr=i(Ul),ce=n(Ul,"UL",{});var ge=s(ce);a3=n(ge,"LI",{});var lDe=s(a3);_Ee=n(lDe,"STRONG",{});var MPt=s(_Ee);WSr=r(MPt,"albert"),MPt.forEach(t),HSr=r(lDe," \u2014 "),SK=n(lDe,"A",{href:!0});var EPt=s(SK);USr=r(EPt,"TFAlbertForQuestionAnswering"),EPt.forEach(t),JSr=r(lDe," (ALBERT model)"),lDe.forEach(t),YSr=i(ge),n3=n(ge,"LI",{});var iDe=s(n3);uEe=n(iDe,"STRONG",{});var CPt=s(uEe);KSr=r(CPt,"bert"),CPt.forEach(t),ZSr=r(iDe," \u2014 "),RK=n(iDe,"A",{href:!0});var wPt=s(RK);eRr=r(wPt,"TFBertForQuestionAnswering"),wPt.forEach(t),oRr=r(iDe," (BERT model)"),iDe.forEach(t),rRr=i(ge),s3=n(ge,"LI",{});var dDe=s(s3);bEe=n(dDe,"STRONG",{});var APt=s(bEe);tRr=r(APt,"camembert"),APt.forEach(t),aRr=r(dDe," \u2014 "),PK=n(dDe,"A",{href:!0});var LPt=s(PK);nRr=r(LPt,"TFCamembertForQuestionAnswering"),LPt.forEach(t),sRr=r(dDe," (CamemBERT model)"),dDe.forEach(t),lRr=i(ge),l3=n(ge,"LI",{});var cDe=s(l3);vEe=n(cDe,"STRONG",{});var yPt=s(vEe);iRr=r(yPt,"convbert"),yPt.forEach(t),dRr=r(cDe," \u2014 "),BK=n(cDe,"A",{href:!0});var xPt=s(BK);cRr=r(xPt,"TFConvBertForQuestionAnswering"),xPt.forEach(t),fRr=r(cDe," (ConvBERT model)"),cDe.forEach(t),mRr=i(ge),i3=n(ge,"LI",{});var fDe=s(i3);FEe=n(fDe,"STRONG",{});var $Pt=s(FEe);gRr=r($Pt,"deberta"),$Pt.forEach(t),hRr=r(fDe," \u2014 "),IK=n(fDe,"A",{href:!0});var kPt=s(IK);pRr=r(kPt,"TFDebertaForQuestionAnswering"),kPt.forEach(t),_Rr=r(fDe," (DeBERTa model)"),fDe.forEach(t),uRr=i(ge),d3=n(ge,"LI",{});var mDe=s(d3);TEe=n(mDe,"STRONG",{});var SPt=s(TEe);bRr=r(SPt,"deberta-v2"),SPt.forEach(t),vRr=r(mDe," \u2014 "),NK=n(mDe,"A",{href:!0});var RPt=s(NK);FRr=r(RPt,"TFDebertaV2ForQuestionAnswering"),RPt.forEach(t),TRr=r(mDe," (DeBERTa-v2 model)"),mDe.forEach(t),MRr=i(ge),c3=n(ge,"LI",{});var gDe=s(c3);MEe=n(gDe,"STRONG",{});var PPt=s(MEe);ERr=r(PPt,"distilbert"),PPt.forEach(t),CRr=r(gDe," \u2014 "),qK=n(gDe,"A",{href:!0});var BPt=s(qK);wRr=r(BPt,"TFDistilBertForQuestionAnswering"),BPt.forEach(t),ARr=r(gDe," (DistilBERT model)"),gDe.forEach(t),LRr=i(ge),f3=n(ge,"LI",{});var hDe=s(f3);EEe=n(hDe,"STRONG",{});var IPt=s(EEe);yRr=r(IPt,"electra"),IPt.forEach(t),xRr=r(hDe," \u2014 "),jK=n(hDe,"A",{href:!0});var NPt=s(jK);$Rr=r(NPt,"TFElectraForQuestionAnswering"),NPt.forEach(t),kRr=r(hDe," (ELECTRA model)"),hDe.forEach(t),SRr=i(ge),m3=n(ge,"LI",{});var pDe=s(m3);CEe=n(pDe,"STRONG",{});var qPt=s(CEe);RRr=r(qPt,"flaubert"),qPt.forEach(t),PRr=r(pDe," \u2014 "),DK=n(pDe,"A",{href:!0});var jPt=s(DK);BRr=r(jPt,"TFFlaubertForQuestionAnsweringSimple"),jPt.forEach(t),IRr=r(pDe," (FlauBERT model)"),pDe.forEach(t),NRr=i(ge),g3=n(ge,"LI",{});var _De=s(g3);wEe=n(_De,"STRONG",{});var DPt=s(wEe);qRr=r(DPt,"funnel"),DPt.forEach(t),jRr=r(_De," \u2014 "),GK=n(_De,"A",{href:!0});var GPt=s(GK);DRr=r(GPt,"TFFunnelForQuestionAnswering"),GPt.forEach(t),GRr=r(_De," (Funnel Transformer model)"),_De.forEach(t),ORr=i(ge),h3=n(ge,"LI",{});var uDe=s(h3);AEe=n(uDe,"STRONG",{});var OPt=s(AEe);VRr=r(OPt,"gptj"),OPt.forEach(t),XRr=r(uDe," \u2014 "),OK=n(uDe,"A",{href:!0});var VPt=s(OK);zRr=r(VPt,"TFGPTJForQuestionAnswering"),VPt.forEach(t),QRr=r(uDe," (GPT-J model)"),uDe.forEach(t),WRr=i(ge),p3=n(ge,"LI",{});var bDe=s(p3);LEe=n(bDe,"STRONG",{});var XPt=s(LEe);HRr=r(XPt,"longformer"),XPt.forEach(t),URr=r(bDe," \u2014 "),VK=n(bDe,"A",{href:!0});var zPt=s(VK);JRr=r(zPt,"TFLongformerForQuestionAnswering"),zPt.forEach(t),YRr=r(bDe," (Longformer model)"),bDe.forEach(t),KRr=i(ge),_3=n(ge,"LI",{});var vDe=s(_3);yEe=n(vDe,"STRONG",{});var QPt=s(yEe);ZRr=r(QPt,"mobilebert"),QPt.forEach(t),ePr=r(vDe," \u2014 "),XK=n(vDe,"A",{href:!0});var WPt=s(XK);oPr=r(WPt,"TFMobileBertForQuestionAnswering"),WPt.forEach(t),rPr=r(vDe," (MobileBERT model)"),vDe.forEach(t),tPr=i(ge),u3=n(ge,"LI",{});var FDe=s(u3);xEe=n(FDe,"STRONG",{});var HPt=s(xEe);aPr=r(HPt,"mpnet"),HPt.forEach(t),nPr=r(FDe," \u2014 "),zK=n(FDe,"A",{href:!0});var UPt=s(zK);sPr=r(UPt,"TFMPNetForQuestionAnswering"),UPt.forEach(t),lPr=r(FDe," (MPNet model)"),FDe.forEach(t),iPr=i(ge),b3=n(ge,"LI",{});var TDe=s(b3);$Ee=n(TDe,"STRONG",{});var JPt=s($Ee);dPr=r(JPt,"rembert"),JPt.forEach(t),cPr=r(TDe," \u2014 "),QK=n(TDe,"A",{href:!0});var YPt=s(QK);fPr=r(YPt,"TFRemBertForQuestionAnswering"),YPt.forEach(t),mPr=r(TDe," (RemBERT model)"),TDe.forEach(t),gPr=i(ge),v3=n(ge,"LI",{});var MDe=s(v3);kEe=n(MDe,"STRONG",{});var KPt=s(kEe);hPr=r(KPt,"roberta"),KPt.forEach(t),pPr=r(MDe," \u2014 "),WK=n(MDe,"A",{href:!0});var ZPt=s(WK);_Pr=r(ZPt,"TFRobertaForQuestionAnswering"),ZPt.forEach(t),uPr=r(MDe," (RoBERTa model)"),MDe.forEach(t),bPr=i(ge),F3=n(ge,"LI",{});var EDe=s(F3);SEe=n(EDe,"STRONG",{});var eBt=s(SEe);vPr=r(eBt,"roformer"),eBt.forEach(t),FPr=r(EDe," \u2014 "),HK=n(EDe,"A",{href:!0});var oBt=s(HK);TPr=r(oBt,"TFRoFormerForQuestionAnswering"),oBt.forEach(t),MPr=r(EDe," (RoFormer model)"),EDe.forEach(t),EPr=i(ge),T3=n(ge,"LI",{});var CDe=s(T3);REe=n(CDe,"STRONG",{});var rBt=s(REe);CPr=r(rBt,"xlm"),rBt.forEach(t),wPr=r(CDe," \u2014 "),UK=n(CDe,"A",{href:!0});var tBt=s(UK);APr=r(tBt,"TFXLMForQuestionAnsweringSimple"),tBt.forEach(t),LPr=r(CDe," (XLM model)"),CDe.forEach(t),yPr=i(ge),M3=n(ge,"LI",{});var wDe=s(M3);PEe=n(wDe,"STRONG",{});var aBt=s(PEe);xPr=r(aBt,"xlm-roberta"),aBt.forEach(t),$Pr=r(wDe," \u2014 "),JK=n(wDe,"A",{href:!0});var nBt=s(JK);kPr=r(nBt,"TFXLMRobertaForQuestionAnswering"),nBt.forEach(t),SPr=r(wDe," (XLM-RoBERTa model)"),wDe.forEach(t),RPr=i(ge),E3=n(ge,"LI",{});var ADe=s(E3);BEe=n(ADe,"STRONG",{});var sBt=s(BEe);PPr=r(sBt,"xlnet"),sBt.forEach(t),BPr=r(ADe," \u2014 "),YK=n(ADe,"A",{href:!0});var lBt=s(YK);IPr=r(lBt,"TFXLNetForQuestionAnsweringSimple"),lBt.forEach(t),NPr=r(ADe," (XLNet model)"),ADe.forEach(t),ge.forEach(t),qPr=i(Ul),T(C3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),iXe=i(f),jc=n(f,"H2",{class:!0});var uQe=s(jc);w3=n(uQe,"A",{id:!0,class:!0,href:!0});var iBt=s(w3);IEe=n(iBt,"SPAN",{});var dBt=s(IEe);T(Rx.$$.fragment,dBt),dBt.forEach(t),iBt.forEach(t),jPr=i(uQe),NEe=n(uQe,"SPAN",{});var cBt=s(NEe);DPr=r(cBt,"TFAutoModelForVision2Seq"),cBt.forEach(t),uQe.forEach(t),dXe=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Px.$$.fragment,Jl),GPr=i(Jl),Dc=n(Jl,"P",{});var cte=s(Dc);OPr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KK=n(cte,"A",{href:!0});var fBt=s(KK);VPr=r(fBt,"from_pretrained()"),fBt.forEach(t),XPr=r(cte," class method or the "),ZK=n(cte,"A",{href:!0});var mBt=s(ZK);zPr=r(mBt,"from_config()"),mBt.forEach(t),QPr=r(cte,` class
method.`),cte.forEach(t),WPr=i(Jl),Bx=n(Jl,"P",{});var bQe=s(Bx);HPr=r(bQe,"This class cannot be instantiated directly using "),qEe=n(bQe,"CODE",{});var gBt=s(qEe);UPr=r(gBt,"__init__()"),gBt.forEach(t),JPr=r(bQe," (throws an error)."),bQe.forEach(t),YPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var iL=s(Vt);T(Ix.$$.fragment,iL),KPr=i(iL),jEe=n(iL,"P",{});var hBt=s(jEe);ZPr=r(hBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hBt.forEach(t),eBr=i(iL),Gc=n(iL,"P",{});var fte=s(Gc);oBr=r(fte,`Note:
Loading a model from its configuration file does `),DEe=n(fte,"STRONG",{});var pBt=s(DEe);rBr=r(pBt,"not"),pBt.forEach(t),tBr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(fte,"A",{href:!0});var _Bt=s(eZ);aBr=r(_Bt,"from_pretrained()"),_Bt.forEach(t),nBr=r(fte," to load the model weights."),fte.forEach(t),sBr=i(iL),T(A3.$$.fragment,iL),iL.forEach(t),lBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Nx.$$.fragment,Yl),iBr=i(Yl),GEe=n(Yl,"P",{});var uBt=s(GEe);dBr=r(uBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uBt.forEach(t),cBr=i(Yl),bn=n(Yl,"P",{});var dL=s(bn);fBr=r(dL,"The model class to instantiate is selected based on the "),OEe=n(dL,"CODE",{});var bBt=s(OEe);mBr=r(bBt,"model_type"),bBt.forEach(t),gBr=r(dL,` property of the config object (either
passed as an argument or loaded from `),VEe=n(dL,"CODE",{});var vBt=s(VEe);hBr=r(vBt,"pretrained_model_name_or_path"),vBt.forEach(t),pBr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(dL,"CODE",{});var FBt=s(XEe);_Br=r(FBt,"pretrained_model_name_or_path"),FBt.forEach(t),uBr=r(dL,":"),dL.forEach(t),bBr=i(Yl),zEe=n(Yl,"UL",{});var TBt=s(zEe);L3=n(TBt,"LI",{});var LDe=s(L3);QEe=n(LDe,"STRONG",{});var MBt=s(QEe);vBr=r(MBt,"vision-encoder-decoder"),MBt.forEach(t),FBr=r(LDe," \u2014 "),oZ=n(LDe,"A",{href:!0});var EBt=s(oZ);TBr=r(EBt,"TFVisionEncoderDecoderModel"),EBt.forEach(t),MBr=r(LDe," (Vision Encoder decoder model)"),LDe.forEach(t),TBt.forEach(t),EBr=i(Yl),T(y3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),cXe=i(f),Oc=n(f,"H2",{class:!0});var vQe=s(Oc);x3=n(vQe,"A",{id:!0,class:!0,href:!0});var CBt=s(x3);WEe=n(CBt,"SPAN",{});var wBt=s(WEe);T(qx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),CBr=i(vQe),HEe=n(vQe,"SPAN",{});var ABt=s(HEe);wBr=r(ABt,"TFAutoModelForSpeechSeq2Seq"),ABt.forEach(t),vQe.forEach(t),fXe=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(jx.$$.fragment,Kl),ABr=i(Kl),Vc=n(Kl,"P",{});var mte=s(Vc);LBr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rZ=n(mte,"A",{href:!0});var LBt=s(rZ);yBr=r(LBt,"from_pretrained()"),LBt.forEach(t),xBr=r(mte," class method or the "),tZ=n(mte,"A",{href:!0});var yBt=s(tZ);$Br=r(yBt,"from_config()"),yBt.forEach(t),kBr=r(mte,` class
method.`),mte.forEach(t),SBr=i(Kl),Dx=n(Kl,"P",{});var FQe=s(Dx);RBr=r(FQe,"This class cannot be instantiated directly using "),UEe=n(FQe,"CODE",{});var xBt=s(UEe);PBr=r(xBt,"__init__()"),xBt.forEach(t),BBr=r(FQe," (throws an error)."),FQe.forEach(t),IBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var cL=s(Xt);T(Gx.$$.fragment,cL),NBr=i(cL),JEe=n(cL,"P",{});var $Bt=s(JEe);qBr=r($Bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Bt.forEach(t),jBr=i(cL),Xc=n(cL,"P",{});var gte=s(Xc);DBr=r(gte,`Note:
Loading a model from its configuration file does `),YEe=n(gte,"STRONG",{});var kBt=s(YEe);GBr=r(kBt,"not"),kBt.forEach(t),OBr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(gte,"A",{href:!0});var SBt=s(aZ);VBr=r(SBt,"from_pretrained()"),SBt.forEach(t),XBr=r(gte," to load the model weights."),gte.forEach(t),zBr=i(cL),T($3.$$.fragment,cL),cL.forEach(t),QBr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Ox.$$.fragment,Zl),WBr=i(Zl),KEe=n(Zl,"P",{});var RBt=s(KEe);HBr=r(RBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RBt.forEach(t),UBr=i(Zl),vn=n(Zl,"P",{});var fL=s(vn);JBr=r(fL,"The model class to instantiate is selected based on the "),ZEe=n(fL,"CODE",{});var PBt=s(ZEe);YBr=r(PBt,"model_type"),PBt.forEach(t),KBr=r(fL,` property of the config object (either
passed as an argument or loaded from `),eCe=n(fL,"CODE",{});var BBt=s(eCe);ZBr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),eIr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n(fL,"CODE",{});var IBt=s(oCe);oIr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),rIr=r(fL,":"),fL.forEach(t),tIr=i(Zl),rCe=n(Zl,"UL",{});var NBt=s(rCe);k3=n(NBt,"LI",{});var yDe=s(k3);tCe=n(yDe,"STRONG",{});var qBt=s(tCe);aIr=r(qBt,"speech_to_text"),qBt.forEach(t),nIr=r(yDe," \u2014 "),nZ=n(yDe,"A",{href:!0});var jBt=s(nZ);sIr=r(jBt,"TFSpeech2TextForConditionalGeneration"),jBt.forEach(t),lIr=r(yDe," (Speech2Text model)"),yDe.forEach(t),NBt.forEach(t),iIr=i(Zl),T(S3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),mXe=i(f),zc=n(f,"H2",{class:!0});var TQe=s(zc);R3=n(TQe,"A",{id:!0,class:!0,href:!0});var DBt=s(R3);aCe=n(DBt,"SPAN",{});var GBt=s(aCe);T(Vx.$$.fragment,GBt),GBt.forEach(t),DBt.forEach(t),dIr=i(TQe),nCe=n(TQe,"SPAN",{});var OBt=s(nCe);cIr=r(OBt,"FlaxAutoModel"),OBt.forEach(t),TQe.forEach(t),gXe=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(Xx.$$.fragment,ei),fIr=i(ei),Qc=n(ei,"P",{});var hte=s(Qc);mIr=r(hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sZ=n(hte,"A",{href:!0});var VBt=s(sZ);gIr=r(VBt,"from_pretrained()"),VBt.forEach(t),hIr=r(hte," class method or the "),lZ=n(hte,"A",{href:!0});var XBt=s(lZ);pIr=r(XBt,"from_config()"),XBt.forEach(t),_Ir=r(hte,` class
method.`),hte.forEach(t),uIr=i(ei),zx=n(ei,"P",{});var MQe=s(zx);bIr=r(MQe,"This class cannot be instantiated directly using "),sCe=n(MQe,"CODE",{});var zBt=s(sCe);vIr=r(zBt,"__init__()"),zBt.forEach(t),FIr=r(MQe," (throws an error)."),MQe.forEach(t),TIr=i(ei),zt=n(ei,"DIV",{class:!0});var mL=s(zt);T(Qx.$$.fragment,mL),MIr=i(mL),lCe=n(mL,"P",{});var QBt=s(lCe);EIr=r(QBt,"Instantiates one of the base model classes of the library from a configuration."),QBt.forEach(t),CIr=i(mL),Wc=n(mL,"P",{});var pte=s(Wc);wIr=r(pte,`Note:
Loading a model from its configuration file does `),iCe=n(pte,"STRONG",{});var WBt=s(iCe);AIr=r(WBt,"not"),WBt.forEach(t),LIr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(pte,"A",{href:!0});var HBt=s(iZ);yIr=r(HBt,"from_pretrained()"),HBt.forEach(t),xIr=r(pte," to load the model weights."),pte.forEach(t),$Ir=i(mL),T(P3.$$.fragment,mL),mL.forEach(t),kIr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(Wx.$$.fragment,oi),SIr=i(oi),dCe=n(oi,"P",{});var UBt=s(dCe);RIr=r(UBt,"Instantiate one of the base model classes of the library from a pretrained model."),UBt.forEach(t),PIr=i(oi),Fn=n(oi,"P",{});var gL=s(Fn);BIr=r(gL,"The model class to instantiate is selected based on the "),cCe=n(gL,"CODE",{});var JBt=s(cCe);IIr=r(JBt,"model_type"),JBt.forEach(t),NIr=r(gL,` property of the config object (either
passed as an argument or loaded from `),fCe=n(gL,"CODE",{});var YBt=s(fCe);qIr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),jIr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(gL,"CODE",{});var KBt=s(mCe);DIr=r(KBt,"pretrained_model_name_or_path"),KBt.forEach(t),GIr=r(gL,":"),gL.forEach(t),OIr=i(oi),oe=n(oi,"UL",{});var ae=s(oe);B3=n(ae,"LI",{});var xDe=s(B3);gCe=n(xDe,"STRONG",{});var ZBt=s(gCe);VIr=r(ZBt,"albert"),ZBt.forEach(t),XIr=r(xDe," \u2014 "),dZ=n(xDe,"A",{href:!0});var eIt=s(dZ);zIr=r(eIt,"FlaxAlbertModel"),eIt.forEach(t),QIr=r(xDe," (ALBERT model)"),xDe.forEach(t),WIr=i(ae),I3=n(ae,"LI",{});var $De=s(I3);hCe=n($De,"STRONG",{});var oIt=s(hCe);HIr=r(oIt,"bart"),oIt.forEach(t),UIr=r($De," \u2014 "),cZ=n($De,"A",{href:!0});var rIt=s(cZ);JIr=r(rIt,"FlaxBartModel"),rIt.forEach(t),YIr=r($De," (BART model)"),$De.forEach(t),KIr=i(ae),N3=n(ae,"LI",{});var kDe=s(N3);pCe=n(kDe,"STRONG",{});var tIt=s(pCe);ZIr=r(tIt,"beit"),tIt.forEach(t),eNr=r(kDe," \u2014 "),fZ=n(kDe,"A",{href:!0});var aIt=s(fZ);oNr=r(aIt,"FlaxBeitModel"),aIt.forEach(t),rNr=r(kDe," (BEiT model)"),kDe.forEach(t),tNr=i(ae),q3=n(ae,"LI",{});var SDe=s(q3);_Ce=n(SDe,"STRONG",{});var nIt=s(_Ce);aNr=r(nIt,"bert"),nIt.forEach(t),nNr=r(SDe," \u2014 "),mZ=n(SDe,"A",{href:!0});var sIt=s(mZ);sNr=r(sIt,"FlaxBertModel"),sIt.forEach(t),lNr=r(SDe," (BERT model)"),SDe.forEach(t),iNr=i(ae),j3=n(ae,"LI",{});var RDe=s(j3);uCe=n(RDe,"STRONG",{});var lIt=s(uCe);dNr=r(lIt,"big_bird"),lIt.forEach(t),cNr=r(RDe," \u2014 "),gZ=n(RDe,"A",{href:!0});var iIt=s(gZ);fNr=r(iIt,"FlaxBigBirdModel"),iIt.forEach(t),mNr=r(RDe," (BigBird model)"),RDe.forEach(t),gNr=i(ae),D3=n(ae,"LI",{});var PDe=s(D3);bCe=n(PDe,"STRONG",{});var dIt=s(bCe);hNr=r(dIt,"blenderbot"),dIt.forEach(t),pNr=r(PDe," \u2014 "),hZ=n(PDe,"A",{href:!0});var cIt=s(hZ);_Nr=r(cIt,"FlaxBlenderbotModel"),cIt.forEach(t),uNr=r(PDe," (Blenderbot model)"),PDe.forEach(t),bNr=i(ae),G3=n(ae,"LI",{});var BDe=s(G3);vCe=n(BDe,"STRONG",{});var fIt=s(vCe);vNr=r(fIt,"blenderbot-small"),fIt.forEach(t),FNr=r(BDe," \u2014 "),pZ=n(BDe,"A",{href:!0});var mIt=s(pZ);TNr=r(mIt,"FlaxBlenderbotSmallModel"),mIt.forEach(t),MNr=r(BDe," (BlenderbotSmall model)"),BDe.forEach(t),ENr=i(ae),O3=n(ae,"LI",{});var IDe=s(O3);FCe=n(IDe,"STRONG",{});var gIt=s(FCe);CNr=r(gIt,"clip"),gIt.forEach(t),wNr=r(IDe," \u2014 "),_Z=n(IDe,"A",{href:!0});var hIt=s(_Z);ANr=r(hIt,"FlaxCLIPModel"),hIt.forEach(t),LNr=r(IDe," (CLIP model)"),IDe.forEach(t),yNr=i(ae),V3=n(ae,"LI",{});var NDe=s(V3);TCe=n(NDe,"STRONG",{});var pIt=s(TCe);xNr=r(pIt,"distilbert"),pIt.forEach(t),$Nr=r(NDe," \u2014 "),uZ=n(NDe,"A",{href:!0});var _It=s(uZ);kNr=r(_It,"FlaxDistilBertModel"),_It.forEach(t),SNr=r(NDe," (DistilBERT model)"),NDe.forEach(t),RNr=i(ae),X3=n(ae,"LI",{});var qDe=s(X3);MCe=n(qDe,"STRONG",{});var uIt=s(MCe);PNr=r(uIt,"electra"),uIt.forEach(t),BNr=r(qDe," \u2014 "),bZ=n(qDe,"A",{href:!0});var bIt=s(bZ);INr=r(bIt,"FlaxElectraModel"),bIt.forEach(t),NNr=r(qDe," (ELECTRA model)"),qDe.forEach(t),qNr=i(ae),z3=n(ae,"LI",{});var jDe=s(z3);ECe=n(jDe,"STRONG",{});var vIt=s(ECe);jNr=r(vIt,"gpt2"),vIt.forEach(t),DNr=r(jDe," \u2014 "),vZ=n(jDe,"A",{href:!0});var FIt=s(vZ);GNr=r(FIt,"FlaxGPT2Model"),FIt.forEach(t),ONr=r(jDe," (OpenAI GPT-2 model)"),jDe.forEach(t),VNr=i(ae),Q3=n(ae,"LI",{});var DDe=s(Q3);CCe=n(DDe,"STRONG",{});var TIt=s(CCe);XNr=r(TIt,"gpt_neo"),TIt.forEach(t),zNr=r(DDe," \u2014 "),FZ=n(DDe,"A",{href:!0});var MIt=s(FZ);QNr=r(MIt,"FlaxGPTNeoModel"),MIt.forEach(t),WNr=r(DDe," (GPT Neo model)"),DDe.forEach(t),HNr=i(ae),W3=n(ae,"LI",{});var GDe=s(W3);wCe=n(GDe,"STRONG",{});var EIt=s(wCe);UNr=r(EIt,"gptj"),EIt.forEach(t),JNr=r(GDe," \u2014 "),TZ=n(GDe,"A",{href:!0});var CIt=s(TZ);YNr=r(CIt,"FlaxGPTJModel"),CIt.forEach(t),KNr=r(GDe," (GPT-J model)"),GDe.forEach(t),ZNr=i(ae),H3=n(ae,"LI",{});var ODe=s(H3);ACe=n(ODe,"STRONG",{});var wIt=s(ACe);eqr=r(wIt,"longt5"),wIt.forEach(t),oqr=r(ODe," \u2014 "),MZ=n(ODe,"A",{href:!0});var AIt=s(MZ);rqr=r(AIt,"FlaxLongT5Model"),AIt.forEach(t),tqr=r(ODe," (LongT5 model)"),ODe.forEach(t),aqr=i(ae),U3=n(ae,"LI",{});var VDe=s(U3);LCe=n(VDe,"STRONG",{});var LIt=s(LCe);nqr=r(LIt,"marian"),LIt.forEach(t),sqr=r(VDe," \u2014 "),EZ=n(VDe,"A",{href:!0});var yIt=s(EZ);lqr=r(yIt,"FlaxMarianModel"),yIt.forEach(t),iqr=r(VDe," (Marian model)"),VDe.forEach(t),dqr=i(ae),J3=n(ae,"LI",{});var XDe=s(J3);yCe=n(XDe,"STRONG",{});var xIt=s(yCe);cqr=r(xIt,"mbart"),xIt.forEach(t),fqr=r(XDe," \u2014 "),CZ=n(XDe,"A",{href:!0});var $It=s(CZ);mqr=r($It,"FlaxMBartModel"),$It.forEach(t),gqr=r(XDe," (mBART model)"),XDe.forEach(t),hqr=i(ae),Y3=n(ae,"LI",{});var zDe=s(Y3);xCe=n(zDe,"STRONG",{});var kIt=s(xCe);pqr=r(kIt,"mt5"),kIt.forEach(t),_qr=r(zDe," \u2014 "),wZ=n(zDe,"A",{href:!0});var SIt=s(wZ);uqr=r(SIt,"FlaxMT5Model"),SIt.forEach(t),bqr=r(zDe," (MT5 model)"),zDe.forEach(t),vqr=i(ae),K3=n(ae,"LI",{});var QDe=s(K3);$Ce=n(QDe,"STRONG",{});var RIt=s($Ce);Fqr=r(RIt,"opt"),RIt.forEach(t),Tqr=r(QDe," \u2014 "),AZ=n(QDe,"A",{href:!0});var PIt=s(AZ);Mqr=r(PIt,"FlaxOPTModel"),PIt.forEach(t),Eqr=r(QDe," (OPT model)"),QDe.forEach(t),Cqr=i(ae),Z3=n(ae,"LI",{});var WDe=s(Z3);kCe=n(WDe,"STRONG",{});var BIt=s(kCe);wqr=r(BIt,"pegasus"),BIt.forEach(t),Aqr=r(WDe," \u2014 "),LZ=n(WDe,"A",{href:!0});var IIt=s(LZ);Lqr=r(IIt,"FlaxPegasusModel"),IIt.forEach(t),yqr=r(WDe," (Pegasus model)"),WDe.forEach(t),xqr=i(ae),e0=n(ae,"LI",{});var HDe=s(e0);SCe=n(HDe,"STRONG",{});var NIt=s(SCe);$qr=r(NIt,"roberta"),NIt.forEach(t),kqr=r(HDe," \u2014 "),yZ=n(HDe,"A",{href:!0});var qIt=s(yZ);Sqr=r(qIt,"FlaxRobertaModel"),qIt.forEach(t),Rqr=r(HDe," (RoBERTa model)"),HDe.forEach(t),Pqr=i(ae),o0=n(ae,"LI",{});var UDe=s(o0);RCe=n(UDe,"STRONG",{});var jIt=s(RCe);Bqr=r(jIt,"roformer"),jIt.forEach(t),Iqr=r(UDe," \u2014 "),xZ=n(UDe,"A",{href:!0});var DIt=s(xZ);Nqr=r(DIt,"FlaxRoFormerModel"),DIt.forEach(t),qqr=r(UDe," (RoFormer model)"),UDe.forEach(t),jqr=i(ae),r0=n(ae,"LI",{});var JDe=s(r0);PCe=n(JDe,"STRONG",{});var GIt=s(PCe);Dqr=r(GIt,"t5"),GIt.forEach(t),Gqr=r(JDe," \u2014 "),$Z=n(JDe,"A",{href:!0});var OIt=s($Z);Oqr=r(OIt,"FlaxT5Model"),OIt.forEach(t),Vqr=r(JDe," (T5 model)"),JDe.forEach(t),Xqr=i(ae),t0=n(ae,"LI",{});var YDe=s(t0);BCe=n(YDe,"STRONG",{});var VIt=s(BCe);zqr=r(VIt,"vision-text-dual-encoder"),VIt.forEach(t),Qqr=r(YDe," \u2014 "),kZ=n(YDe,"A",{href:!0});var XIt=s(kZ);Wqr=r(XIt,"FlaxVisionTextDualEncoderModel"),XIt.forEach(t),Hqr=r(YDe," (VisionTextDualEncoder model)"),YDe.forEach(t),Uqr=i(ae),a0=n(ae,"LI",{});var KDe=s(a0);ICe=n(KDe,"STRONG",{});var zIt=s(ICe);Jqr=r(zIt,"vit"),zIt.forEach(t),Yqr=r(KDe," \u2014 "),SZ=n(KDe,"A",{href:!0});var QIt=s(SZ);Kqr=r(QIt,"FlaxViTModel"),QIt.forEach(t),Zqr=r(KDe," (ViT model)"),KDe.forEach(t),ejr=i(ae),n0=n(ae,"LI",{});var ZDe=s(n0);NCe=n(ZDe,"STRONG",{});var WIt=s(NCe);ojr=r(WIt,"wav2vec2"),WIt.forEach(t),rjr=r(ZDe," \u2014 "),RZ=n(ZDe,"A",{href:!0});var HIt=s(RZ);tjr=r(HIt,"FlaxWav2Vec2Model"),HIt.forEach(t),ajr=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),njr=i(ae),s0=n(ae,"LI",{});var eGe=s(s0);qCe=n(eGe,"STRONG",{});var UIt=s(qCe);sjr=r(UIt,"xglm"),UIt.forEach(t),ljr=r(eGe," \u2014 "),PZ=n(eGe,"A",{href:!0});var JIt=s(PZ);ijr=r(JIt,"FlaxXGLMModel"),JIt.forEach(t),djr=r(eGe," (XGLM model)"),eGe.forEach(t),cjr=i(ae),l0=n(ae,"LI",{});var oGe=s(l0);jCe=n(oGe,"STRONG",{});var YIt=s(jCe);fjr=r(YIt,"xlm-roberta"),YIt.forEach(t),mjr=r(oGe," \u2014 "),BZ=n(oGe,"A",{href:!0});var KIt=s(BZ);gjr=r(KIt,"FlaxXLMRobertaModel"),KIt.forEach(t),hjr=r(oGe," (XLM-RoBERTa model)"),oGe.forEach(t),ae.forEach(t),pjr=i(oi),T(i0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),hXe=i(f),Hc=n(f,"H2",{class:!0});var EQe=s(Hc);d0=n(EQe,"A",{id:!0,class:!0,href:!0});var ZIt=s(d0);DCe=n(ZIt,"SPAN",{});var eNt=s(DCe);T(Hx.$$.fragment,eNt),eNt.forEach(t),ZIt.forEach(t),_jr=i(EQe),GCe=n(EQe,"SPAN",{});var oNt=s(GCe);ujr=r(oNt,"FlaxAutoModelForCausalLM"),oNt.forEach(t),EQe.forEach(t),pXe=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(Ux.$$.fragment,ri),bjr=i(ri),Uc=n(ri,"P",{});var _te=s(Uc);vjr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IZ=n(_te,"A",{href:!0});var rNt=s(IZ);Fjr=r(rNt,"from_pretrained()"),rNt.forEach(t),Tjr=r(_te," class method or the "),NZ=n(_te,"A",{href:!0});var tNt=s(NZ);Mjr=r(tNt,"from_config()"),tNt.forEach(t),Ejr=r(_te,` class
method.`),_te.forEach(t),Cjr=i(ri),Jx=n(ri,"P",{});var CQe=s(Jx);wjr=r(CQe,"This class cannot be instantiated directly using "),OCe=n(CQe,"CODE",{});var aNt=s(OCe);Ajr=r(aNt,"__init__()"),aNt.forEach(t),Ljr=r(CQe," (throws an error)."),CQe.forEach(t),yjr=i(ri),Qt=n(ri,"DIV",{class:!0});var hL=s(Qt);T(Yx.$$.fragment,hL),xjr=i(hL),VCe=n(hL,"P",{});var nNt=s(VCe);$jr=r(nNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nNt.forEach(t),kjr=i(hL),Jc=n(hL,"P",{});var ute=s(Jc);Sjr=r(ute,`Note:
Loading a model from its configuration file does `),XCe=n(ute,"STRONG",{});var sNt=s(XCe);Rjr=r(sNt,"not"),sNt.forEach(t),Pjr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(ute,"A",{href:!0});var lNt=s(qZ);Bjr=r(lNt,"from_pretrained()"),lNt.forEach(t),Ijr=r(ute," to load the model weights."),ute.forEach(t),Njr=i(hL),T(c0.$$.fragment,hL),hL.forEach(t),qjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(Kx.$$.fragment,ti),jjr=i(ti),zCe=n(ti,"P",{});var iNt=s(zCe);Djr=r(iNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iNt.forEach(t),Gjr=i(ti),Tn=n(ti,"P",{});var pL=s(Tn);Ojr=r(pL,"The model class to instantiate is selected based on the "),QCe=n(pL,"CODE",{});var dNt=s(QCe);Vjr=r(dNt,"model_type"),dNt.forEach(t),Xjr=r(pL,` property of the config object (either
passed as an argument or loaded from `),WCe=n(pL,"CODE",{});var cNt=s(WCe);zjr=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),Qjr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(pL,"CODE",{});var fNt=s(HCe);Wjr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),Hjr=r(pL,":"),pL.forEach(t),Ujr=i(ti),xe=n(ti,"UL",{});var Ne=s(xe);f0=n(Ne,"LI",{});var rGe=s(f0);UCe=n(rGe,"STRONG",{});var mNt=s(UCe);Jjr=r(mNt,"bart"),mNt.forEach(t),Yjr=r(rGe," \u2014 "),jZ=n(rGe,"A",{href:!0});var gNt=s(jZ);Kjr=r(gNt,"FlaxBartForCausalLM"),gNt.forEach(t),Zjr=r(rGe," (BART model)"),rGe.forEach(t),eDr=i(Ne),m0=n(Ne,"LI",{});var tGe=s(m0);JCe=n(tGe,"STRONG",{});var hNt=s(JCe);oDr=r(hNt,"bert"),hNt.forEach(t),rDr=r(tGe," \u2014 "),DZ=n(tGe,"A",{href:!0});var pNt=s(DZ);tDr=r(pNt,"FlaxBertForCausalLM"),pNt.forEach(t),aDr=r(tGe," (BERT model)"),tGe.forEach(t),nDr=i(Ne),g0=n(Ne,"LI",{});var aGe=s(g0);YCe=n(aGe,"STRONG",{});var _Nt=s(YCe);sDr=r(_Nt,"big_bird"),_Nt.forEach(t),lDr=r(aGe," \u2014 "),GZ=n(aGe,"A",{href:!0});var uNt=s(GZ);iDr=r(uNt,"FlaxBigBirdForCausalLM"),uNt.forEach(t),dDr=r(aGe," (BigBird model)"),aGe.forEach(t),cDr=i(Ne),h0=n(Ne,"LI",{});var nGe=s(h0);KCe=n(nGe,"STRONG",{});var bNt=s(KCe);fDr=r(bNt,"electra"),bNt.forEach(t),mDr=r(nGe," \u2014 "),OZ=n(nGe,"A",{href:!0});var vNt=s(OZ);gDr=r(vNt,"FlaxElectraForCausalLM"),vNt.forEach(t),hDr=r(nGe," (ELECTRA model)"),nGe.forEach(t),pDr=i(Ne),p0=n(Ne,"LI",{});var sGe=s(p0);ZCe=n(sGe,"STRONG",{});var FNt=s(ZCe);_Dr=r(FNt,"gpt2"),FNt.forEach(t),uDr=r(sGe," \u2014 "),VZ=n(sGe,"A",{href:!0});var TNt=s(VZ);bDr=r(TNt,"FlaxGPT2LMHeadModel"),TNt.forEach(t),vDr=r(sGe," (OpenAI GPT-2 model)"),sGe.forEach(t),FDr=i(Ne),_0=n(Ne,"LI",{});var lGe=s(_0);e3e=n(lGe,"STRONG",{});var MNt=s(e3e);TDr=r(MNt,"gpt_neo"),MNt.forEach(t),MDr=r(lGe," \u2014 "),XZ=n(lGe,"A",{href:!0});var ENt=s(XZ);EDr=r(ENt,"FlaxGPTNeoForCausalLM"),ENt.forEach(t),CDr=r(lGe," (GPT Neo model)"),lGe.forEach(t),wDr=i(Ne),u0=n(Ne,"LI",{});var iGe=s(u0);o3e=n(iGe,"STRONG",{});var CNt=s(o3e);ADr=r(CNt,"gptj"),CNt.forEach(t),LDr=r(iGe," \u2014 "),zZ=n(iGe,"A",{href:!0});var wNt=s(zZ);yDr=r(wNt,"FlaxGPTJForCausalLM"),wNt.forEach(t),xDr=r(iGe," (GPT-J model)"),iGe.forEach(t),$Dr=i(Ne),b0=n(Ne,"LI",{});var dGe=s(b0);r3e=n(dGe,"STRONG",{});var ANt=s(r3e);kDr=r(ANt,"opt"),ANt.forEach(t),SDr=r(dGe," \u2014 "),QZ=n(dGe,"A",{href:!0});var LNt=s(QZ);RDr=r(LNt,"FlaxOPTForCausalLM"),LNt.forEach(t),PDr=r(dGe," (OPT model)"),dGe.forEach(t),BDr=i(Ne),v0=n(Ne,"LI",{});var cGe=s(v0);t3e=n(cGe,"STRONG",{});var yNt=s(t3e);IDr=r(yNt,"roberta"),yNt.forEach(t),NDr=r(cGe," \u2014 "),WZ=n(cGe,"A",{href:!0});var xNt=s(WZ);qDr=r(xNt,"FlaxRobertaForCausalLM"),xNt.forEach(t),jDr=r(cGe," (RoBERTa model)"),cGe.forEach(t),DDr=i(Ne),F0=n(Ne,"LI",{});var fGe=s(F0);a3e=n(fGe,"STRONG",{});var $Nt=s(a3e);GDr=r($Nt,"xglm"),$Nt.forEach(t),ODr=r(fGe," \u2014 "),HZ=n(fGe,"A",{href:!0});var kNt=s(HZ);VDr=r(kNt,"FlaxXGLMForCausalLM"),kNt.forEach(t),XDr=r(fGe," (XGLM model)"),fGe.forEach(t),Ne.forEach(t),zDr=i(ti),T(T0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),_Xe=i(f),Yc=n(f,"H2",{class:!0});var wQe=s(Yc);M0=n(wQe,"A",{id:!0,class:!0,href:!0});var SNt=s(M0);n3e=n(SNt,"SPAN",{});var RNt=s(n3e);T(Zx.$$.fragment,RNt),RNt.forEach(t),SNt.forEach(t),QDr=i(wQe),s3e=n(wQe,"SPAN",{});var PNt=s(s3e);WDr=r(PNt,"FlaxAutoModelForPreTraining"),PNt.forEach(t),wQe.forEach(t),uXe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(e$.$$.fragment,ai),HDr=i(ai),Kc=n(ai,"P",{});var bte=s(Kc);UDr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=n(bte,"A",{href:!0});var BNt=s(UZ);JDr=r(BNt,"from_pretrained()"),BNt.forEach(t),YDr=r(bte," class method or the "),JZ=n(bte,"A",{href:!0});var INt=s(JZ);KDr=r(INt,"from_config()"),INt.forEach(t),ZDr=r(bte,` class
method.`),bte.forEach(t),eGr=i(ai),o$=n(ai,"P",{});var AQe=s(o$);oGr=r(AQe,"This class cannot be instantiated directly using "),l3e=n(AQe,"CODE",{});var NNt=s(l3e);rGr=r(NNt,"__init__()"),NNt.forEach(t),tGr=r(AQe," (throws an error)."),AQe.forEach(t),aGr=i(ai),Wt=n(ai,"DIV",{class:!0});var _L=s(Wt);T(r$.$$.fragment,_L),nGr=i(_L),i3e=n(_L,"P",{});var qNt=s(i3e);sGr=r(qNt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qNt.forEach(t),lGr=i(_L),Zc=n(_L,"P",{});var vte=s(Zc);iGr=r(vte,`Note:
Loading a model from its configuration file does `),d3e=n(vte,"STRONG",{});var jNt=s(d3e);dGr=r(jNt,"not"),jNt.forEach(t),cGr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(vte,"A",{href:!0});var DNt=s(YZ);fGr=r(DNt,"from_pretrained()"),DNt.forEach(t),mGr=r(vte," to load the model weights."),vte.forEach(t),gGr=i(_L),T(E0.$$.fragment,_L),_L.forEach(t),hGr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(t$.$$.fragment,ni),pGr=i(ni),c3e=n(ni,"P",{});var GNt=s(c3e);_Gr=r(GNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GNt.forEach(t),uGr=i(ni),Mn=n(ni,"P",{});var uL=s(Mn);bGr=r(uL,"The model class to instantiate is selected based on the "),f3e=n(uL,"CODE",{});var ONt=s(f3e);vGr=r(ONt,"model_type"),ONt.forEach(t),FGr=r(uL,` property of the config object (either
passed as an argument or loaded from `),m3e=n(uL,"CODE",{});var VNt=s(m3e);TGr=r(VNt,"pretrained_model_name_or_path"),VNt.forEach(t),MGr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g3e=n(uL,"CODE",{});var XNt=s(g3e);EGr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),CGr=r(uL,":"),uL.forEach(t),wGr=i(ni),Ee=n(ni,"UL",{});var we=s(Ee);C0=n(we,"LI",{});var mGe=s(C0);h3e=n(mGe,"STRONG",{});var zNt=s(h3e);AGr=r(zNt,"albert"),zNt.forEach(t),LGr=r(mGe," \u2014 "),KZ=n(mGe,"A",{href:!0});var QNt=s(KZ);yGr=r(QNt,"FlaxAlbertForPreTraining"),QNt.forEach(t),xGr=r(mGe," (ALBERT model)"),mGe.forEach(t),$Gr=i(we),w0=n(we,"LI",{});var gGe=s(w0);p3e=n(gGe,"STRONG",{});var WNt=s(p3e);kGr=r(WNt,"bart"),WNt.forEach(t),SGr=r(gGe," \u2014 "),ZZ=n(gGe,"A",{href:!0});var HNt=s(ZZ);RGr=r(HNt,"FlaxBartForConditionalGeneration"),HNt.forEach(t),PGr=r(gGe," (BART model)"),gGe.forEach(t),BGr=i(we),A0=n(we,"LI",{});var hGe=s(A0);_3e=n(hGe,"STRONG",{});var UNt=s(_3e);IGr=r(UNt,"bert"),UNt.forEach(t),NGr=r(hGe," \u2014 "),eee=n(hGe,"A",{href:!0});var JNt=s(eee);qGr=r(JNt,"FlaxBertForPreTraining"),JNt.forEach(t),jGr=r(hGe," (BERT model)"),hGe.forEach(t),DGr=i(we),L0=n(we,"LI",{});var pGe=s(L0);u3e=n(pGe,"STRONG",{});var YNt=s(u3e);GGr=r(YNt,"big_bird"),YNt.forEach(t),OGr=r(pGe," \u2014 "),oee=n(pGe,"A",{href:!0});var KNt=s(oee);VGr=r(KNt,"FlaxBigBirdForPreTraining"),KNt.forEach(t),XGr=r(pGe," (BigBird model)"),pGe.forEach(t),zGr=i(we),y0=n(we,"LI",{});var _Ge=s(y0);b3e=n(_Ge,"STRONG",{});var ZNt=s(b3e);QGr=r(ZNt,"electra"),ZNt.forEach(t),WGr=r(_Ge," \u2014 "),ree=n(_Ge,"A",{href:!0});var eqt=s(ree);HGr=r(eqt,"FlaxElectraForPreTraining"),eqt.forEach(t),UGr=r(_Ge," (ELECTRA model)"),_Ge.forEach(t),JGr=i(we),x0=n(we,"LI",{});var uGe=s(x0);v3e=n(uGe,"STRONG",{});var oqt=s(v3e);YGr=r(oqt,"longt5"),oqt.forEach(t),KGr=r(uGe," \u2014 "),tee=n(uGe,"A",{href:!0});var rqt=s(tee);ZGr=r(rqt,"FlaxLongT5ForConditionalGeneration"),rqt.forEach(t),eOr=r(uGe," (LongT5 model)"),uGe.forEach(t),oOr=i(we),$0=n(we,"LI",{});var bGe=s($0);F3e=n(bGe,"STRONG",{});var tqt=s(F3e);rOr=r(tqt,"mbart"),tqt.forEach(t),tOr=r(bGe," \u2014 "),aee=n(bGe,"A",{href:!0});var aqt=s(aee);aOr=r(aqt,"FlaxMBartForConditionalGeneration"),aqt.forEach(t),nOr=r(bGe," (mBART model)"),bGe.forEach(t),sOr=i(we),k0=n(we,"LI",{});var vGe=s(k0);T3e=n(vGe,"STRONG",{});var nqt=s(T3e);lOr=r(nqt,"mt5"),nqt.forEach(t),iOr=r(vGe," \u2014 "),nee=n(vGe,"A",{href:!0});var sqt=s(nee);dOr=r(sqt,"FlaxMT5ForConditionalGeneration"),sqt.forEach(t),cOr=r(vGe," (MT5 model)"),vGe.forEach(t),fOr=i(we),S0=n(we,"LI",{});var FGe=s(S0);M3e=n(FGe,"STRONG",{});var lqt=s(M3e);mOr=r(lqt,"roberta"),lqt.forEach(t),gOr=r(FGe," \u2014 "),see=n(FGe,"A",{href:!0});var iqt=s(see);hOr=r(iqt,"FlaxRobertaForMaskedLM"),iqt.forEach(t),pOr=r(FGe," (RoBERTa model)"),FGe.forEach(t),_Or=i(we),R0=n(we,"LI",{});var TGe=s(R0);E3e=n(TGe,"STRONG",{});var dqt=s(E3e);uOr=r(dqt,"roformer"),dqt.forEach(t),bOr=r(TGe," \u2014 "),lee=n(TGe,"A",{href:!0});var cqt=s(lee);vOr=r(cqt,"FlaxRoFormerForMaskedLM"),cqt.forEach(t),FOr=r(TGe," (RoFormer model)"),TGe.forEach(t),TOr=i(we),P0=n(we,"LI",{});var MGe=s(P0);C3e=n(MGe,"STRONG",{});var fqt=s(C3e);MOr=r(fqt,"t5"),fqt.forEach(t),EOr=r(MGe," \u2014 "),iee=n(MGe,"A",{href:!0});var mqt=s(iee);COr=r(mqt,"FlaxT5ForConditionalGeneration"),mqt.forEach(t),wOr=r(MGe," (T5 model)"),MGe.forEach(t),AOr=i(we),B0=n(we,"LI",{});var EGe=s(B0);w3e=n(EGe,"STRONG",{});var gqt=s(w3e);LOr=r(gqt,"wav2vec2"),gqt.forEach(t),yOr=r(EGe," \u2014 "),dee=n(EGe,"A",{href:!0});var hqt=s(dee);xOr=r(hqt,"FlaxWav2Vec2ForPreTraining"),hqt.forEach(t),$Or=r(EGe," (Wav2Vec2 model)"),EGe.forEach(t),kOr=i(we),I0=n(we,"LI",{});var CGe=s(I0);A3e=n(CGe,"STRONG",{});var pqt=s(A3e);SOr=r(pqt,"xlm-roberta"),pqt.forEach(t),ROr=r(CGe," \u2014 "),cee=n(CGe,"A",{href:!0});var _qt=s(cee);POr=r(_qt,"FlaxXLMRobertaForMaskedLM"),_qt.forEach(t),BOr=r(CGe," (XLM-RoBERTa model)"),CGe.forEach(t),we.forEach(t),IOr=i(ni),T(N0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),bXe=i(f),ef=n(f,"H2",{class:!0});var LQe=s(ef);q0=n(LQe,"A",{id:!0,class:!0,href:!0});var uqt=s(q0);L3e=n(uqt,"SPAN",{});var bqt=s(L3e);T(a$.$$.fragment,bqt),bqt.forEach(t),uqt.forEach(t),NOr=i(LQe),y3e=n(LQe,"SPAN",{});var vqt=s(y3e);qOr=r(vqt,"FlaxAutoModelForMaskedLM"),vqt.forEach(t),LQe.forEach(t),vXe=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(n$.$$.fragment,si),jOr=i(si),of=n(si,"P",{});var Fte=s(of);DOr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fee=n(Fte,"A",{href:!0});var Fqt=s(fee);GOr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),OOr=r(Fte," class method or the "),mee=n(Fte,"A",{href:!0});var Tqt=s(mee);VOr=r(Tqt,"from_config()"),Tqt.forEach(t),XOr=r(Fte,` class
method.`),Fte.forEach(t),zOr=i(si),s$=n(si,"P",{});var yQe=s(s$);QOr=r(yQe,"This class cannot be instantiated directly using "),x3e=n(yQe,"CODE",{});var Mqt=s(x3e);WOr=r(Mqt,"__init__()"),Mqt.forEach(t),HOr=r(yQe," (throws an error)."),yQe.forEach(t),UOr=i(si),Ht=n(si,"DIV",{class:!0});var bL=s(Ht);T(l$.$$.fragment,bL),JOr=i(bL),$3e=n(bL,"P",{});var Eqt=s($3e);YOr=r(Eqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Eqt.forEach(t),KOr=i(bL),rf=n(bL,"P",{});var Tte=s(rf);ZOr=r(Tte,`Note:
Loading a model from its configuration file does `),k3e=n(Tte,"STRONG",{});var Cqt=s(k3e);eVr=r(Cqt,"not"),Cqt.forEach(t),oVr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Tte,"A",{href:!0});var wqt=s(gee);rVr=r(wqt,"from_pretrained()"),wqt.forEach(t),tVr=r(Tte," to load the model weights."),Tte.forEach(t),aVr=i(bL),T(j0.$$.fragment,bL),bL.forEach(t),nVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(i$.$$.fragment,li),sVr=i(li),S3e=n(li,"P",{});var Aqt=s(S3e);lVr=r(Aqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Aqt.forEach(t),iVr=i(li),En=n(li,"P",{});var vL=s(En);dVr=r(vL,"The model class to instantiate is selected based on the "),R3e=n(vL,"CODE",{});var Lqt=s(R3e);cVr=r(Lqt,"model_type"),Lqt.forEach(t),fVr=r(vL,` property of the config object (either
passed as an argument or loaded from `),P3e=n(vL,"CODE",{});var yqt=s(P3e);mVr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),gVr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(vL,"CODE",{});var xqt=s(B3e);hVr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),pVr=r(vL,":"),vL.forEach(t),_Vr=i(li),$e=n(li,"UL",{});var qe=s($e);D0=n(qe,"LI",{});var wGe=s(D0);I3e=n(wGe,"STRONG",{});var $qt=s(I3e);uVr=r($qt,"albert"),$qt.forEach(t),bVr=r(wGe," \u2014 "),hee=n(wGe,"A",{href:!0});var kqt=s(hee);vVr=r(kqt,"FlaxAlbertForMaskedLM"),kqt.forEach(t),FVr=r(wGe," (ALBERT model)"),wGe.forEach(t),TVr=i(qe),G0=n(qe,"LI",{});var AGe=s(G0);N3e=n(AGe,"STRONG",{});var Sqt=s(N3e);MVr=r(Sqt,"bart"),Sqt.forEach(t),EVr=r(AGe," \u2014 "),pee=n(AGe,"A",{href:!0});var Rqt=s(pee);CVr=r(Rqt,"FlaxBartForConditionalGeneration"),Rqt.forEach(t),wVr=r(AGe," (BART model)"),AGe.forEach(t),AVr=i(qe),O0=n(qe,"LI",{});var LGe=s(O0);q3e=n(LGe,"STRONG",{});var Pqt=s(q3e);LVr=r(Pqt,"bert"),Pqt.forEach(t),yVr=r(LGe," \u2014 "),_ee=n(LGe,"A",{href:!0});var Bqt=s(_ee);xVr=r(Bqt,"FlaxBertForMaskedLM"),Bqt.forEach(t),$Vr=r(LGe," (BERT model)"),LGe.forEach(t),kVr=i(qe),V0=n(qe,"LI",{});var yGe=s(V0);j3e=n(yGe,"STRONG",{});var Iqt=s(j3e);SVr=r(Iqt,"big_bird"),Iqt.forEach(t),RVr=r(yGe," \u2014 "),uee=n(yGe,"A",{href:!0});var Nqt=s(uee);PVr=r(Nqt,"FlaxBigBirdForMaskedLM"),Nqt.forEach(t),BVr=r(yGe," (BigBird model)"),yGe.forEach(t),IVr=i(qe),X0=n(qe,"LI",{});var xGe=s(X0);D3e=n(xGe,"STRONG",{});var qqt=s(D3e);NVr=r(qqt,"distilbert"),qqt.forEach(t),qVr=r(xGe," \u2014 "),bee=n(xGe,"A",{href:!0});var jqt=s(bee);jVr=r(jqt,"FlaxDistilBertForMaskedLM"),jqt.forEach(t),DVr=r(xGe," (DistilBERT model)"),xGe.forEach(t),GVr=i(qe),z0=n(qe,"LI",{});var $Ge=s(z0);G3e=n($Ge,"STRONG",{});var Dqt=s(G3e);OVr=r(Dqt,"electra"),Dqt.forEach(t),VVr=r($Ge," \u2014 "),vee=n($Ge,"A",{href:!0});var Gqt=s(vee);XVr=r(Gqt,"FlaxElectraForMaskedLM"),Gqt.forEach(t),zVr=r($Ge," (ELECTRA model)"),$Ge.forEach(t),QVr=i(qe),Q0=n(qe,"LI",{});var kGe=s(Q0);O3e=n(kGe,"STRONG",{});var Oqt=s(O3e);WVr=r(Oqt,"mbart"),Oqt.forEach(t),HVr=r(kGe," \u2014 "),Fee=n(kGe,"A",{href:!0});var Vqt=s(Fee);UVr=r(Vqt,"FlaxMBartForConditionalGeneration"),Vqt.forEach(t),JVr=r(kGe," (mBART model)"),kGe.forEach(t),YVr=i(qe),W0=n(qe,"LI",{});var SGe=s(W0);V3e=n(SGe,"STRONG",{});var Xqt=s(V3e);KVr=r(Xqt,"roberta"),Xqt.forEach(t),ZVr=r(SGe," \u2014 "),Tee=n(SGe,"A",{href:!0});var zqt=s(Tee);eXr=r(zqt,"FlaxRobertaForMaskedLM"),zqt.forEach(t),oXr=r(SGe," (RoBERTa model)"),SGe.forEach(t),rXr=i(qe),H0=n(qe,"LI",{});var RGe=s(H0);X3e=n(RGe,"STRONG",{});var Qqt=s(X3e);tXr=r(Qqt,"roformer"),Qqt.forEach(t),aXr=r(RGe," \u2014 "),Mee=n(RGe,"A",{href:!0});var Wqt=s(Mee);nXr=r(Wqt,"FlaxRoFormerForMaskedLM"),Wqt.forEach(t),sXr=r(RGe," (RoFormer model)"),RGe.forEach(t),lXr=i(qe),U0=n(qe,"LI",{});var PGe=s(U0);z3e=n(PGe,"STRONG",{});var Hqt=s(z3e);iXr=r(Hqt,"xlm-roberta"),Hqt.forEach(t),dXr=r(PGe," \u2014 "),Eee=n(PGe,"A",{href:!0});var Uqt=s(Eee);cXr=r(Uqt,"FlaxXLMRobertaForMaskedLM"),Uqt.forEach(t),fXr=r(PGe," (XLM-RoBERTa model)"),PGe.forEach(t),qe.forEach(t),mXr=i(li),T(J0.$$.fragment,li),li.forEach(t),si.forEach(t),FXe=i(f),tf=n(f,"H2",{class:!0});var xQe=s(tf);Y0=n(xQe,"A",{id:!0,class:!0,href:!0});var Jqt=s(Y0);Q3e=n(Jqt,"SPAN",{});var Yqt=s(Q3e);T(d$.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),gXr=i(xQe),W3e=n(xQe,"SPAN",{});var Kqt=s(W3e);hXr=r(Kqt,"FlaxAutoModelForSeq2SeqLM"),Kqt.forEach(t),xQe.forEach(t),TXe=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(c$.$$.fragment,ii),pXr=i(ii),af=n(ii,"P",{});var Mte=s(af);_Xr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cee=n(Mte,"A",{href:!0});var Zqt=s(Cee);uXr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),bXr=r(Mte," class method or the "),wee=n(Mte,"A",{href:!0});var ejt=s(wee);vXr=r(ejt,"from_config()"),ejt.forEach(t),FXr=r(Mte,` class
method.`),Mte.forEach(t),TXr=i(ii),f$=n(ii,"P",{});var $Qe=s(f$);MXr=r($Qe,"This class cannot be instantiated directly using "),H3e=n($Qe,"CODE",{});var ojt=s(H3e);EXr=r(ojt,"__init__()"),ojt.forEach(t),CXr=r($Qe," (throws an error)."),$Qe.forEach(t),wXr=i(ii),Ut=n(ii,"DIV",{class:!0});var FL=s(Ut);T(m$.$$.fragment,FL),AXr=i(FL),U3e=n(FL,"P",{});var rjt=s(U3e);LXr=r(rjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rjt.forEach(t),yXr=i(FL),nf=n(FL,"P",{});var Ete=s(nf);xXr=r(Ete,`Note:
Loading a model from its configuration file does `),J3e=n(Ete,"STRONG",{});var tjt=s(J3e);$Xr=r(tjt,"not"),tjt.forEach(t),kXr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(Ete,"A",{href:!0});var ajt=s(Aee);SXr=r(ajt,"from_pretrained()"),ajt.forEach(t),RXr=r(Ete," to load the model weights."),Ete.forEach(t),PXr=i(FL),T(K0.$$.fragment,FL),FL.forEach(t),BXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(g$.$$.fragment,di),IXr=i(di),Y3e=n(di,"P",{});var njt=s(Y3e);NXr=r(njt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),njt.forEach(t),qXr=i(di),Cn=n(di,"P",{});var TL=s(Cn);jXr=r(TL,"The model class to instantiate is selected based on the "),K3e=n(TL,"CODE",{});var sjt=s(K3e);DXr=r(sjt,"model_type"),sjt.forEach(t),GXr=r(TL,` property of the config object (either
passed as an argument or loaded from `),Z3e=n(TL,"CODE",{});var ljt=s(Z3e);OXr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),VXr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(TL,"CODE",{});var ijt=s(e0e);XXr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),zXr=r(TL,":"),TL.forEach(t),QXr=i(di),ke=n(di,"UL",{});var je=s(ke);Z0=n(je,"LI",{});var BGe=s(Z0);o0e=n(BGe,"STRONG",{});var djt=s(o0e);WXr=r(djt,"bart"),djt.forEach(t),HXr=r(BGe," \u2014 "),Lee=n(BGe,"A",{href:!0});var cjt=s(Lee);UXr=r(cjt,"FlaxBartForConditionalGeneration"),cjt.forEach(t),JXr=r(BGe," (BART model)"),BGe.forEach(t),YXr=i(je),ew=n(je,"LI",{});var IGe=s(ew);r0e=n(IGe,"STRONG",{});var fjt=s(r0e);KXr=r(fjt,"blenderbot"),fjt.forEach(t),ZXr=r(IGe," \u2014 "),yee=n(IGe,"A",{href:!0});var mjt=s(yee);ezr=r(mjt,"FlaxBlenderbotForConditionalGeneration"),mjt.forEach(t),ozr=r(IGe," (Blenderbot model)"),IGe.forEach(t),rzr=i(je),ow=n(je,"LI",{});var NGe=s(ow);t0e=n(NGe,"STRONG",{});var gjt=s(t0e);tzr=r(gjt,"blenderbot-small"),gjt.forEach(t),azr=r(NGe," \u2014 "),xee=n(NGe,"A",{href:!0});var hjt=s(xee);nzr=r(hjt,"FlaxBlenderbotSmallForConditionalGeneration"),hjt.forEach(t),szr=r(NGe," (BlenderbotSmall model)"),NGe.forEach(t),lzr=i(je),rw=n(je,"LI",{});var qGe=s(rw);a0e=n(qGe,"STRONG",{});var pjt=s(a0e);izr=r(pjt,"encoder-decoder"),pjt.forEach(t),dzr=r(qGe," \u2014 "),$ee=n(qGe,"A",{href:!0});var _jt=s($ee);czr=r(_jt,"FlaxEncoderDecoderModel"),_jt.forEach(t),fzr=r(qGe," (Encoder decoder model)"),qGe.forEach(t),mzr=i(je),tw=n(je,"LI",{});var jGe=s(tw);n0e=n(jGe,"STRONG",{});var ujt=s(n0e);gzr=r(ujt,"longt5"),ujt.forEach(t),hzr=r(jGe," \u2014 "),kee=n(jGe,"A",{href:!0});var bjt=s(kee);pzr=r(bjt,"FlaxLongT5ForConditionalGeneration"),bjt.forEach(t),_zr=r(jGe," (LongT5 model)"),jGe.forEach(t),uzr=i(je),aw=n(je,"LI",{});var DGe=s(aw);s0e=n(DGe,"STRONG",{});var vjt=s(s0e);bzr=r(vjt,"marian"),vjt.forEach(t),vzr=r(DGe," \u2014 "),See=n(DGe,"A",{href:!0});var Fjt=s(See);Fzr=r(Fjt,"FlaxMarianMTModel"),Fjt.forEach(t),Tzr=r(DGe," (Marian model)"),DGe.forEach(t),Mzr=i(je),nw=n(je,"LI",{});var GGe=s(nw);l0e=n(GGe,"STRONG",{});var Tjt=s(l0e);Ezr=r(Tjt,"mbart"),Tjt.forEach(t),Czr=r(GGe," \u2014 "),Ree=n(GGe,"A",{href:!0});var Mjt=s(Ree);wzr=r(Mjt,"FlaxMBartForConditionalGeneration"),Mjt.forEach(t),Azr=r(GGe," (mBART model)"),GGe.forEach(t),Lzr=i(je),sw=n(je,"LI",{});var OGe=s(sw);i0e=n(OGe,"STRONG",{});var Ejt=s(i0e);yzr=r(Ejt,"mt5"),Ejt.forEach(t),xzr=r(OGe," \u2014 "),Pee=n(OGe,"A",{href:!0});var Cjt=s(Pee);$zr=r(Cjt,"FlaxMT5ForConditionalGeneration"),Cjt.forEach(t),kzr=r(OGe," (MT5 model)"),OGe.forEach(t),Szr=i(je),lw=n(je,"LI",{});var VGe=s(lw);d0e=n(VGe,"STRONG",{});var wjt=s(d0e);Rzr=r(wjt,"pegasus"),wjt.forEach(t),Pzr=r(VGe," \u2014 "),Bee=n(VGe,"A",{href:!0});var Ajt=s(Bee);Bzr=r(Ajt,"FlaxPegasusForConditionalGeneration"),Ajt.forEach(t),Izr=r(VGe," (Pegasus model)"),VGe.forEach(t),Nzr=i(je),iw=n(je,"LI",{});var XGe=s(iw);c0e=n(XGe,"STRONG",{});var Ljt=s(c0e);qzr=r(Ljt,"t5"),Ljt.forEach(t),jzr=r(XGe," \u2014 "),Iee=n(XGe,"A",{href:!0});var yjt=s(Iee);Dzr=r(yjt,"FlaxT5ForConditionalGeneration"),yjt.forEach(t),Gzr=r(XGe," (T5 model)"),XGe.forEach(t),je.forEach(t),Ozr=i(di),T(dw.$$.fragment,di),di.forEach(t),ii.forEach(t),MXe=i(f),sf=n(f,"H2",{class:!0});var kQe=s(sf);cw=n(kQe,"A",{id:!0,class:!0,href:!0});var xjt=s(cw);f0e=n(xjt,"SPAN",{});var $jt=s(f0e);T(h$.$$.fragment,$jt),$jt.forEach(t),xjt.forEach(t),Vzr=i(kQe),m0e=n(kQe,"SPAN",{});var kjt=s(m0e);Xzr=r(kjt,"FlaxAutoModelForSequenceClassification"),kjt.forEach(t),kQe.forEach(t),EXe=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(p$.$$.fragment,ci),zzr=i(ci),lf=n(ci,"P",{});var Cte=s(lf);Qzr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nee=n(Cte,"A",{href:!0});var Sjt=s(Nee);Wzr=r(Sjt,"from_pretrained()"),Sjt.forEach(t),Hzr=r(Cte," class method or the "),qee=n(Cte,"A",{href:!0});var Rjt=s(qee);Uzr=r(Rjt,"from_config()"),Rjt.forEach(t),Jzr=r(Cte,` class
method.`),Cte.forEach(t),Yzr=i(ci),_$=n(ci,"P",{});var SQe=s(_$);Kzr=r(SQe,"This class cannot be instantiated directly using "),g0e=n(SQe,"CODE",{});var Pjt=s(g0e);Zzr=r(Pjt,"__init__()"),Pjt.forEach(t),eQr=r(SQe," (throws an error)."),SQe.forEach(t),oQr=i(ci),Jt=n(ci,"DIV",{class:!0});var ML=s(Jt);T(u$.$$.fragment,ML),rQr=i(ML),h0e=n(ML,"P",{});var Bjt=s(h0e);tQr=r(Bjt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bjt.forEach(t),aQr=i(ML),df=n(ML,"P",{});var wte=s(df);nQr=r(wte,`Note:
Loading a model from its configuration file does `),p0e=n(wte,"STRONG",{});var Ijt=s(p0e);sQr=r(Ijt,"not"),Ijt.forEach(t),lQr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(wte,"A",{href:!0});var Njt=s(jee);iQr=r(Njt,"from_pretrained()"),Njt.forEach(t),dQr=r(wte," to load the model weights."),wte.forEach(t),cQr=i(ML),T(fw.$$.fragment,ML),ML.forEach(t),fQr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(b$.$$.fragment,fi),mQr=i(fi),_0e=n(fi,"P",{});var qjt=s(_0e);gQr=r(qjt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qjt.forEach(t),hQr=i(fi),wn=n(fi,"P",{});var EL=s(wn);pQr=r(EL,"The model class to instantiate is selected based on the "),u0e=n(EL,"CODE",{});var jjt=s(u0e);_Qr=r(jjt,"model_type"),jjt.forEach(t),uQr=r(EL,` property of the config object (either
passed as an argument or loaded from `),b0e=n(EL,"CODE",{});var Djt=s(b0e);bQr=r(Djt,"pretrained_model_name_or_path"),Djt.forEach(t),vQr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v0e=n(EL,"CODE",{});var Gjt=s(v0e);FQr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),TQr=r(EL,":"),EL.forEach(t),MQr=i(fi),Se=n(fi,"UL",{});var De=s(Se);mw=n(De,"LI",{});var zGe=s(mw);F0e=n(zGe,"STRONG",{});var Ojt=s(F0e);EQr=r(Ojt,"albert"),Ojt.forEach(t),CQr=r(zGe," \u2014 "),Dee=n(zGe,"A",{href:!0});var Vjt=s(Dee);wQr=r(Vjt,"FlaxAlbertForSequenceClassification"),Vjt.forEach(t),AQr=r(zGe," (ALBERT model)"),zGe.forEach(t),LQr=i(De),gw=n(De,"LI",{});var QGe=s(gw);T0e=n(QGe,"STRONG",{});var Xjt=s(T0e);yQr=r(Xjt,"bart"),Xjt.forEach(t),xQr=r(QGe," \u2014 "),Gee=n(QGe,"A",{href:!0});var zjt=s(Gee);$Qr=r(zjt,"FlaxBartForSequenceClassification"),zjt.forEach(t),kQr=r(QGe," (BART model)"),QGe.forEach(t),SQr=i(De),hw=n(De,"LI",{});var WGe=s(hw);M0e=n(WGe,"STRONG",{});var Qjt=s(M0e);RQr=r(Qjt,"bert"),Qjt.forEach(t),PQr=r(WGe," \u2014 "),Oee=n(WGe,"A",{href:!0});var Wjt=s(Oee);BQr=r(Wjt,"FlaxBertForSequenceClassification"),Wjt.forEach(t),IQr=r(WGe," (BERT model)"),WGe.forEach(t),NQr=i(De),pw=n(De,"LI",{});var HGe=s(pw);E0e=n(HGe,"STRONG",{});var Hjt=s(E0e);qQr=r(Hjt,"big_bird"),Hjt.forEach(t),jQr=r(HGe," \u2014 "),Vee=n(HGe,"A",{href:!0});var Ujt=s(Vee);DQr=r(Ujt,"FlaxBigBirdForSequenceClassification"),Ujt.forEach(t),GQr=r(HGe," (BigBird model)"),HGe.forEach(t),OQr=i(De),_w=n(De,"LI",{});var UGe=s(_w);C0e=n(UGe,"STRONG",{});var Jjt=s(C0e);VQr=r(Jjt,"distilbert"),Jjt.forEach(t),XQr=r(UGe," \u2014 "),Xee=n(UGe,"A",{href:!0});var Yjt=s(Xee);zQr=r(Yjt,"FlaxDistilBertForSequenceClassification"),Yjt.forEach(t),QQr=r(UGe," (DistilBERT model)"),UGe.forEach(t),WQr=i(De),uw=n(De,"LI",{});var JGe=s(uw);w0e=n(JGe,"STRONG",{});var Kjt=s(w0e);HQr=r(Kjt,"electra"),Kjt.forEach(t),UQr=r(JGe," \u2014 "),zee=n(JGe,"A",{href:!0});var Zjt=s(zee);JQr=r(Zjt,"FlaxElectraForSequenceClassification"),Zjt.forEach(t),YQr=r(JGe," (ELECTRA model)"),JGe.forEach(t),KQr=i(De),bw=n(De,"LI",{});var YGe=s(bw);A0e=n(YGe,"STRONG",{});var eDt=s(A0e);ZQr=r(eDt,"mbart"),eDt.forEach(t),eWr=r(YGe," \u2014 "),Qee=n(YGe,"A",{href:!0});var oDt=s(Qee);oWr=r(oDt,"FlaxMBartForSequenceClassification"),oDt.forEach(t),rWr=r(YGe," (mBART model)"),YGe.forEach(t),tWr=i(De),vw=n(De,"LI",{});var KGe=s(vw);L0e=n(KGe,"STRONG",{});var rDt=s(L0e);aWr=r(rDt,"roberta"),rDt.forEach(t),nWr=r(KGe," \u2014 "),Wee=n(KGe,"A",{href:!0});var tDt=s(Wee);sWr=r(tDt,"FlaxRobertaForSequenceClassification"),tDt.forEach(t),lWr=r(KGe," (RoBERTa model)"),KGe.forEach(t),iWr=i(De),Fw=n(De,"LI",{});var ZGe=s(Fw);y0e=n(ZGe,"STRONG",{});var aDt=s(y0e);dWr=r(aDt,"roformer"),aDt.forEach(t),cWr=r(ZGe," \u2014 "),Hee=n(ZGe,"A",{href:!0});var nDt=s(Hee);fWr=r(nDt,"FlaxRoFormerForSequenceClassification"),nDt.forEach(t),mWr=r(ZGe," (RoFormer model)"),ZGe.forEach(t),gWr=i(De),Tw=n(De,"LI",{});var eOe=s(Tw);x0e=n(eOe,"STRONG",{});var sDt=s(x0e);hWr=r(sDt,"xlm-roberta"),sDt.forEach(t),pWr=r(eOe," \u2014 "),Uee=n(eOe,"A",{href:!0});var lDt=s(Uee);_Wr=r(lDt,"FlaxXLMRobertaForSequenceClassification"),lDt.forEach(t),uWr=r(eOe," (XLM-RoBERTa model)"),eOe.forEach(t),De.forEach(t),bWr=i(fi),T(Mw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),CXe=i(f),cf=n(f,"H2",{class:!0});var RQe=s(cf);Ew=n(RQe,"A",{id:!0,class:!0,href:!0});var iDt=s(Ew);$0e=n(iDt,"SPAN",{});var dDt=s($0e);T(v$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),vWr=i(RQe),k0e=n(RQe,"SPAN",{});var cDt=s(k0e);FWr=r(cDt,"FlaxAutoModelForQuestionAnswering"),cDt.forEach(t),RQe.forEach(t),wXe=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(F$.$$.fragment,mi),TWr=i(mi),ff=n(mi,"P",{});var Ate=s(ff);MWr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jee=n(Ate,"A",{href:!0});var fDt=s(Jee);EWr=r(fDt,"from_pretrained()"),fDt.forEach(t),CWr=r(Ate," class method or the "),Yee=n(Ate,"A",{href:!0});var mDt=s(Yee);wWr=r(mDt,"from_config()"),mDt.forEach(t),AWr=r(Ate,` class
method.`),Ate.forEach(t),LWr=i(mi),T$=n(mi,"P",{});var PQe=s(T$);yWr=r(PQe,"This class cannot be instantiated directly using "),S0e=n(PQe,"CODE",{});var gDt=s(S0e);xWr=r(gDt,"__init__()"),gDt.forEach(t),$Wr=r(PQe," (throws an error)."),PQe.forEach(t),kWr=i(mi),Yt=n(mi,"DIV",{class:!0});var CL=s(Yt);T(M$.$$.fragment,CL),SWr=i(CL),R0e=n(CL,"P",{});var hDt=s(R0e);RWr=r(hDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hDt.forEach(t),PWr=i(CL),mf=n(CL,"P",{});var Lte=s(mf);BWr=r(Lte,`Note:
Loading a model from its configuration file does `),P0e=n(Lte,"STRONG",{});var pDt=s(P0e);IWr=r(pDt,"not"),pDt.forEach(t),NWr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Lte,"A",{href:!0});var _Dt=s(Kee);qWr=r(_Dt,"from_pretrained()"),_Dt.forEach(t),jWr=r(Lte," to load the model weights."),Lte.forEach(t),DWr=i(CL),T(Cw.$$.fragment,CL),CL.forEach(t),GWr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(E$.$$.fragment,gi),OWr=i(gi),B0e=n(gi,"P",{});var uDt=s(B0e);VWr=r(uDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uDt.forEach(t),XWr=i(gi),An=n(gi,"P",{});var wL=s(An);zWr=r(wL,"The model class to instantiate is selected based on the "),I0e=n(wL,"CODE",{});var bDt=s(I0e);QWr=r(bDt,"model_type"),bDt.forEach(t),WWr=r(wL,` property of the config object (either
passed as an argument or loaded from `),N0e=n(wL,"CODE",{});var vDt=s(N0e);HWr=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),UWr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(wL,"CODE",{});var FDt=s(q0e);JWr=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),YWr=r(wL,":"),wL.forEach(t),KWr=i(gi),Re=n(gi,"UL",{});var Ge=s(Re);ww=n(Ge,"LI",{});var oOe=s(ww);j0e=n(oOe,"STRONG",{});var TDt=s(j0e);ZWr=r(TDt,"albert"),TDt.forEach(t),eHr=r(oOe," \u2014 "),Zee=n(oOe,"A",{href:!0});var MDt=s(Zee);oHr=r(MDt,"FlaxAlbertForQuestionAnswering"),MDt.forEach(t),rHr=r(oOe," (ALBERT model)"),oOe.forEach(t),tHr=i(Ge),Aw=n(Ge,"LI",{});var rOe=s(Aw);D0e=n(rOe,"STRONG",{});var EDt=s(D0e);aHr=r(EDt,"bart"),EDt.forEach(t),nHr=r(rOe," \u2014 "),eoe=n(rOe,"A",{href:!0});var CDt=s(eoe);sHr=r(CDt,"FlaxBartForQuestionAnswering"),CDt.forEach(t),lHr=r(rOe," (BART model)"),rOe.forEach(t),iHr=i(Ge),Lw=n(Ge,"LI",{});var tOe=s(Lw);G0e=n(tOe,"STRONG",{});var wDt=s(G0e);dHr=r(wDt,"bert"),wDt.forEach(t),cHr=r(tOe," \u2014 "),ooe=n(tOe,"A",{href:!0});var ADt=s(ooe);fHr=r(ADt,"FlaxBertForQuestionAnswering"),ADt.forEach(t),mHr=r(tOe," (BERT model)"),tOe.forEach(t),gHr=i(Ge),yw=n(Ge,"LI",{});var aOe=s(yw);O0e=n(aOe,"STRONG",{});var LDt=s(O0e);hHr=r(LDt,"big_bird"),LDt.forEach(t),pHr=r(aOe," \u2014 "),roe=n(aOe,"A",{href:!0});var yDt=s(roe);_Hr=r(yDt,"FlaxBigBirdForQuestionAnswering"),yDt.forEach(t),uHr=r(aOe," (BigBird model)"),aOe.forEach(t),bHr=i(Ge),xw=n(Ge,"LI",{});var nOe=s(xw);V0e=n(nOe,"STRONG",{});var xDt=s(V0e);vHr=r(xDt,"distilbert"),xDt.forEach(t),FHr=r(nOe," \u2014 "),toe=n(nOe,"A",{href:!0});var $Dt=s(toe);THr=r($Dt,"FlaxDistilBertForQuestionAnswering"),$Dt.forEach(t),MHr=r(nOe," (DistilBERT model)"),nOe.forEach(t),EHr=i(Ge),$w=n(Ge,"LI",{});var sOe=s($w);X0e=n(sOe,"STRONG",{});var kDt=s(X0e);CHr=r(kDt,"electra"),kDt.forEach(t),wHr=r(sOe," \u2014 "),aoe=n(sOe,"A",{href:!0});var SDt=s(aoe);AHr=r(SDt,"FlaxElectraForQuestionAnswering"),SDt.forEach(t),LHr=r(sOe," (ELECTRA model)"),sOe.forEach(t),yHr=i(Ge),kw=n(Ge,"LI",{});var lOe=s(kw);z0e=n(lOe,"STRONG",{});var RDt=s(z0e);xHr=r(RDt,"mbart"),RDt.forEach(t),$Hr=r(lOe," \u2014 "),noe=n(lOe,"A",{href:!0});var PDt=s(noe);kHr=r(PDt,"FlaxMBartForQuestionAnswering"),PDt.forEach(t),SHr=r(lOe," (mBART model)"),lOe.forEach(t),RHr=i(Ge),Sw=n(Ge,"LI",{});var iOe=s(Sw);Q0e=n(iOe,"STRONG",{});var BDt=s(Q0e);PHr=r(BDt,"roberta"),BDt.forEach(t),BHr=r(iOe," \u2014 "),soe=n(iOe,"A",{href:!0});var IDt=s(soe);IHr=r(IDt,"FlaxRobertaForQuestionAnswering"),IDt.forEach(t),NHr=r(iOe," (RoBERTa model)"),iOe.forEach(t),qHr=i(Ge),Rw=n(Ge,"LI",{});var dOe=s(Rw);W0e=n(dOe,"STRONG",{});var NDt=s(W0e);jHr=r(NDt,"roformer"),NDt.forEach(t),DHr=r(dOe," \u2014 "),loe=n(dOe,"A",{href:!0});var qDt=s(loe);GHr=r(qDt,"FlaxRoFormerForQuestionAnswering"),qDt.forEach(t),OHr=r(dOe," (RoFormer model)"),dOe.forEach(t),VHr=i(Ge),Pw=n(Ge,"LI",{});var cOe=s(Pw);H0e=n(cOe,"STRONG",{});var jDt=s(H0e);XHr=r(jDt,"xlm-roberta"),jDt.forEach(t),zHr=r(cOe," \u2014 "),ioe=n(cOe,"A",{href:!0});var DDt=s(ioe);QHr=r(DDt,"FlaxXLMRobertaForQuestionAnswering"),DDt.forEach(t),WHr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),Ge.forEach(t),HHr=i(gi),T(Bw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),AXe=i(f),gf=n(f,"H2",{class:!0});var BQe=s(gf);Iw=n(BQe,"A",{id:!0,class:!0,href:!0});var GDt=s(Iw);U0e=n(GDt,"SPAN",{});var ODt=s(U0e);T(C$.$$.fragment,ODt),ODt.forEach(t),GDt.forEach(t),UHr=i(BQe),J0e=n(BQe,"SPAN",{});var VDt=s(J0e);JHr=r(VDt,"FlaxAutoModelForTokenClassification"),VDt.forEach(t),BQe.forEach(t),LXe=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(w$.$$.fragment,hi),YHr=i(hi),hf=n(hi,"P",{});var yte=s(hf);KHr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),doe=n(yte,"A",{href:!0});var XDt=s(doe);ZHr=r(XDt,"from_pretrained()"),XDt.forEach(t),eUr=r(yte," class method or the "),coe=n(yte,"A",{href:!0});var zDt=s(coe);oUr=r(zDt,"from_config()"),zDt.forEach(t),rUr=r(yte,` class
method.`),yte.forEach(t),tUr=i(hi),A$=n(hi,"P",{});var IQe=s(A$);aUr=r(IQe,"This class cannot be instantiated directly using "),Y0e=n(IQe,"CODE",{});var QDt=s(Y0e);nUr=r(QDt,"__init__()"),QDt.forEach(t),sUr=r(IQe," (throws an error)."),IQe.forEach(t),lUr=i(hi),Kt=n(hi,"DIV",{class:!0});var AL=s(Kt);T(L$.$$.fragment,AL),iUr=i(AL),K0e=n(AL,"P",{});var WDt=s(K0e);dUr=r(WDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WDt.forEach(t),cUr=i(AL),pf=n(AL,"P",{});var xte=s(pf);fUr=r(xte,`Note:
Loading a model from its configuration file does `),Z0e=n(xte,"STRONG",{});var HDt=s(Z0e);mUr=r(HDt,"not"),HDt.forEach(t),gUr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(xte,"A",{href:!0});var UDt=s(foe);hUr=r(UDt,"from_pretrained()"),UDt.forEach(t),pUr=r(xte," to load the model weights."),xte.forEach(t),_Ur=i(AL),T(Nw.$$.fragment,AL),AL.forEach(t),uUr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(y$.$$.fragment,pi),bUr=i(pi),ewe=n(pi,"P",{});var JDt=s(ewe);vUr=r(JDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JDt.forEach(t),FUr=i(pi),Ln=n(pi,"P",{});var LL=s(Ln);TUr=r(LL,"The model class to instantiate is selected based on the "),owe=n(LL,"CODE",{});var YDt=s(owe);MUr=r(YDt,"model_type"),YDt.forEach(t),EUr=r(LL,` property of the config object (either
passed as an argument or loaded from `),rwe=n(LL,"CODE",{});var KDt=s(rwe);CUr=r(KDt,"pretrained_model_name_or_path"),KDt.forEach(t),wUr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=n(LL,"CODE",{});var ZDt=s(twe);AUr=r(ZDt,"pretrained_model_name_or_path"),ZDt.forEach(t),LUr=r(LL,":"),LL.forEach(t),yUr=i(pi),Ve=n(pi,"UL",{});var To=s(Ve);qw=n(To,"LI",{});var fOe=s(qw);awe=n(fOe,"STRONG",{});var eGt=s(awe);xUr=r(eGt,"albert"),eGt.forEach(t),$Ur=r(fOe," \u2014 "),moe=n(fOe,"A",{href:!0});var oGt=s(moe);kUr=r(oGt,"FlaxAlbertForTokenClassification"),oGt.forEach(t),SUr=r(fOe," (ALBERT model)"),fOe.forEach(t),RUr=i(To),jw=n(To,"LI",{});var mOe=s(jw);nwe=n(mOe,"STRONG",{});var rGt=s(nwe);PUr=r(rGt,"bert"),rGt.forEach(t),BUr=r(mOe," \u2014 "),goe=n(mOe,"A",{href:!0});var tGt=s(goe);IUr=r(tGt,"FlaxBertForTokenClassification"),tGt.forEach(t),NUr=r(mOe," (BERT model)"),mOe.forEach(t),qUr=i(To),Dw=n(To,"LI",{});var gOe=s(Dw);swe=n(gOe,"STRONG",{});var aGt=s(swe);jUr=r(aGt,"big_bird"),aGt.forEach(t),DUr=r(gOe," \u2014 "),hoe=n(gOe,"A",{href:!0});var nGt=s(hoe);GUr=r(nGt,"FlaxBigBirdForTokenClassification"),nGt.forEach(t),OUr=r(gOe," (BigBird model)"),gOe.forEach(t),VUr=i(To),Gw=n(To,"LI",{});var hOe=s(Gw);lwe=n(hOe,"STRONG",{});var sGt=s(lwe);XUr=r(sGt,"distilbert"),sGt.forEach(t),zUr=r(hOe," \u2014 "),poe=n(hOe,"A",{href:!0});var lGt=s(poe);QUr=r(lGt,"FlaxDistilBertForTokenClassification"),lGt.forEach(t),WUr=r(hOe," (DistilBERT model)"),hOe.forEach(t),HUr=i(To),Ow=n(To,"LI",{});var pOe=s(Ow);iwe=n(pOe,"STRONG",{});var iGt=s(iwe);UUr=r(iGt,"electra"),iGt.forEach(t),JUr=r(pOe," \u2014 "),_oe=n(pOe,"A",{href:!0});var dGt=s(_oe);YUr=r(dGt,"FlaxElectraForTokenClassification"),dGt.forEach(t),KUr=r(pOe," (ELECTRA model)"),pOe.forEach(t),ZUr=i(To),Vw=n(To,"LI",{});var _Oe=s(Vw);dwe=n(_Oe,"STRONG",{});var cGt=s(dwe);eJr=r(cGt,"roberta"),cGt.forEach(t),oJr=r(_Oe," \u2014 "),uoe=n(_Oe,"A",{href:!0});var fGt=s(uoe);rJr=r(fGt,"FlaxRobertaForTokenClassification"),fGt.forEach(t),tJr=r(_Oe," (RoBERTa model)"),_Oe.forEach(t),aJr=i(To),Xw=n(To,"LI",{});var uOe=s(Xw);cwe=n(uOe,"STRONG",{});var mGt=s(cwe);nJr=r(mGt,"roformer"),mGt.forEach(t),sJr=r(uOe," \u2014 "),boe=n(uOe,"A",{href:!0});var gGt=s(boe);lJr=r(gGt,"FlaxRoFormerForTokenClassification"),gGt.forEach(t),iJr=r(uOe," (RoFormer model)"),uOe.forEach(t),dJr=i(To),zw=n(To,"LI",{});var bOe=s(zw);fwe=n(bOe,"STRONG",{});var hGt=s(fwe);cJr=r(hGt,"xlm-roberta"),hGt.forEach(t),fJr=r(bOe," \u2014 "),voe=n(bOe,"A",{href:!0});var pGt=s(voe);mJr=r(pGt,"FlaxXLMRobertaForTokenClassification"),pGt.forEach(t),gJr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),To.forEach(t),hJr=i(pi),T(Qw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),yXe=i(f),_f=n(f,"H2",{class:!0});var NQe=s(_f);Ww=n(NQe,"A",{id:!0,class:!0,href:!0});var _Gt=s(Ww);mwe=n(_Gt,"SPAN",{});var uGt=s(mwe);T(x$.$$.fragment,uGt),uGt.forEach(t),_Gt.forEach(t),pJr=i(NQe),gwe=n(NQe,"SPAN",{});var bGt=s(gwe);_Jr=r(bGt,"FlaxAutoModelForMultipleChoice"),bGt.forEach(t),NQe.forEach(t),xXe=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T($$.$$.fragment,_i),uJr=i(_i),uf=n(_i,"P",{});var $te=s(uf);bJr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Foe=n($te,"A",{href:!0});var vGt=s(Foe);vJr=r(vGt,"from_pretrained()"),vGt.forEach(t),FJr=r($te," class method or the "),Toe=n($te,"A",{href:!0});var FGt=s(Toe);TJr=r(FGt,"from_config()"),FGt.forEach(t),MJr=r($te,` class
method.`),$te.forEach(t),EJr=i(_i),k$=n(_i,"P",{});var qQe=s(k$);CJr=r(qQe,"This class cannot be instantiated directly using "),hwe=n(qQe,"CODE",{});var TGt=s(hwe);wJr=r(TGt,"__init__()"),TGt.forEach(t),AJr=r(qQe," (throws an error)."),qQe.forEach(t),LJr=i(_i),Zt=n(_i,"DIV",{class:!0});var yL=s(Zt);T(S$.$$.fragment,yL),yJr=i(yL),pwe=n(yL,"P",{});var MGt=s(pwe);xJr=r(MGt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MGt.forEach(t),$Jr=i(yL),bf=n(yL,"P",{});var kte=s(bf);kJr=r(kte,`Note:
Loading a model from its configuration file does `),_we=n(kte,"STRONG",{});var EGt=s(_we);SJr=r(EGt,"not"),EGt.forEach(t),RJr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(kte,"A",{href:!0});var CGt=s(Moe);PJr=r(CGt,"from_pretrained()"),CGt.forEach(t),BJr=r(kte," to load the model weights."),kte.forEach(t),IJr=i(yL),T(Hw.$$.fragment,yL),yL.forEach(t),NJr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(R$.$$.fragment,ui),qJr=i(ui),uwe=n(ui,"P",{});var wGt=s(uwe);jJr=r(wGt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wGt.forEach(t),DJr=i(ui),yn=n(ui,"P",{});var xL=s(yn);GJr=r(xL,"The model class to instantiate is selected based on the "),bwe=n(xL,"CODE",{});var AGt=s(bwe);OJr=r(AGt,"model_type"),AGt.forEach(t),VJr=r(xL,` property of the config object (either
passed as an argument or loaded from `),vwe=n(xL,"CODE",{});var LGt=s(vwe);XJr=r(LGt,"pretrained_model_name_or_path"),LGt.forEach(t),zJr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fwe=n(xL,"CODE",{});var yGt=s(Fwe);QJr=r(yGt,"pretrained_model_name_or_path"),yGt.forEach(t),WJr=r(xL,":"),xL.forEach(t),HJr=i(ui),Xe=n(ui,"UL",{});var Mo=s(Xe);Uw=n(Mo,"LI",{});var vOe=s(Uw);Twe=n(vOe,"STRONG",{});var xGt=s(Twe);UJr=r(xGt,"albert"),xGt.forEach(t),JJr=r(vOe," \u2014 "),Eoe=n(vOe,"A",{href:!0});var $Gt=s(Eoe);YJr=r($Gt,"FlaxAlbertForMultipleChoice"),$Gt.forEach(t),KJr=r(vOe," (ALBERT model)"),vOe.forEach(t),ZJr=i(Mo),Jw=n(Mo,"LI",{});var FOe=s(Jw);Mwe=n(FOe,"STRONG",{});var kGt=s(Mwe);eYr=r(kGt,"bert"),kGt.forEach(t),oYr=r(FOe," \u2014 "),Coe=n(FOe,"A",{href:!0});var SGt=s(Coe);rYr=r(SGt,"FlaxBertForMultipleChoice"),SGt.forEach(t),tYr=r(FOe," (BERT model)"),FOe.forEach(t),aYr=i(Mo),Yw=n(Mo,"LI",{});var TOe=s(Yw);Ewe=n(TOe,"STRONG",{});var RGt=s(Ewe);nYr=r(RGt,"big_bird"),RGt.forEach(t),sYr=r(TOe," \u2014 "),woe=n(TOe,"A",{href:!0});var PGt=s(woe);lYr=r(PGt,"FlaxBigBirdForMultipleChoice"),PGt.forEach(t),iYr=r(TOe," (BigBird model)"),TOe.forEach(t),dYr=i(Mo),Kw=n(Mo,"LI",{});var MOe=s(Kw);Cwe=n(MOe,"STRONG",{});var BGt=s(Cwe);cYr=r(BGt,"distilbert"),BGt.forEach(t),fYr=r(MOe," \u2014 "),Aoe=n(MOe,"A",{href:!0});var IGt=s(Aoe);mYr=r(IGt,"FlaxDistilBertForMultipleChoice"),IGt.forEach(t),gYr=r(MOe," (DistilBERT model)"),MOe.forEach(t),hYr=i(Mo),Zw=n(Mo,"LI",{});var EOe=s(Zw);wwe=n(EOe,"STRONG",{});var NGt=s(wwe);pYr=r(NGt,"electra"),NGt.forEach(t),_Yr=r(EOe," \u2014 "),Loe=n(EOe,"A",{href:!0});var qGt=s(Loe);uYr=r(qGt,"FlaxElectraForMultipleChoice"),qGt.forEach(t),bYr=r(EOe," (ELECTRA model)"),EOe.forEach(t),vYr=i(Mo),eA=n(Mo,"LI",{});var COe=s(eA);Awe=n(COe,"STRONG",{});var jGt=s(Awe);FYr=r(jGt,"roberta"),jGt.forEach(t),TYr=r(COe," \u2014 "),yoe=n(COe,"A",{href:!0});var DGt=s(yoe);MYr=r(DGt,"FlaxRobertaForMultipleChoice"),DGt.forEach(t),EYr=r(COe," (RoBERTa model)"),COe.forEach(t),CYr=i(Mo),oA=n(Mo,"LI",{});var wOe=s(oA);Lwe=n(wOe,"STRONG",{});var GGt=s(Lwe);wYr=r(GGt,"roformer"),GGt.forEach(t),AYr=r(wOe," \u2014 "),xoe=n(wOe,"A",{href:!0});var OGt=s(xoe);LYr=r(OGt,"FlaxRoFormerForMultipleChoice"),OGt.forEach(t),yYr=r(wOe," (RoFormer model)"),wOe.forEach(t),xYr=i(Mo),rA=n(Mo,"LI",{});var AOe=s(rA);ywe=n(AOe,"STRONG",{});var VGt=s(ywe);$Yr=r(VGt,"xlm-roberta"),VGt.forEach(t),kYr=r(AOe," \u2014 "),$oe=n(AOe,"A",{href:!0});var XGt=s($oe);SYr=r(XGt,"FlaxXLMRobertaForMultipleChoice"),XGt.forEach(t),RYr=r(AOe," (XLM-RoBERTa model)"),AOe.forEach(t),Mo.forEach(t),PYr=i(ui),T(tA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),$Xe=i(f),vf=n(f,"H2",{class:!0});var jQe=s(vf);aA=n(jQe,"A",{id:!0,class:!0,href:!0});var zGt=s(aA);xwe=n(zGt,"SPAN",{});var QGt=s(xwe);T(P$.$$.fragment,QGt),QGt.forEach(t),zGt.forEach(t),BYr=i(jQe),$we=n(jQe,"SPAN",{});var WGt=s($we);IYr=r(WGt,"FlaxAutoModelForNextSentencePrediction"),WGt.forEach(t),jQe.forEach(t),kXe=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(B$.$$.fragment,bi),NYr=i(bi),Ff=n(bi,"P",{});var Ste=s(Ff);qYr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),koe=n(Ste,"A",{href:!0});var HGt=s(koe);jYr=r(HGt,"from_pretrained()"),HGt.forEach(t),DYr=r(Ste," class method or the "),Soe=n(Ste,"A",{href:!0});var UGt=s(Soe);GYr=r(UGt,"from_config()"),UGt.forEach(t),OYr=r(Ste,` class
method.`),Ste.forEach(t),VYr=i(bi),I$=n(bi,"P",{});var DQe=s(I$);XYr=r(DQe,"This class cannot be instantiated directly using "),kwe=n(DQe,"CODE",{});var JGt=s(kwe);zYr=r(JGt,"__init__()"),JGt.forEach(t),QYr=r(DQe," (throws an error)."),DQe.forEach(t),WYr=i(bi),ea=n(bi,"DIV",{class:!0});var $L=s(ea);T(N$.$$.fragment,$L),HYr=i($L),Swe=n($L,"P",{});var YGt=s(Swe);UYr=r(YGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YGt.forEach(t),JYr=i($L),Tf=n($L,"P",{});var Rte=s(Tf);YYr=r(Rte,`Note:
Loading a model from its configuration file does `),Rwe=n(Rte,"STRONG",{});var KGt=s(Rwe);KYr=r(KGt,"not"),KGt.forEach(t),ZYr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(Rte,"A",{href:!0});var ZGt=s(Roe);eKr=r(ZGt,"from_pretrained()"),ZGt.forEach(t),oKr=r(Rte," to load the model weights."),Rte.forEach(t),rKr=i($L),T(nA.$$.fragment,$L),$L.forEach(t),tKr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(q$.$$.fragment,vi),aKr=i(vi),Pwe=n(vi,"P",{});var eOt=s(Pwe);nKr=r(eOt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eOt.forEach(t),sKr=i(vi),xn=n(vi,"P",{});var kL=s(xn);lKr=r(kL,"The model class to instantiate is selected based on the "),Bwe=n(kL,"CODE",{});var oOt=s(Bwe);iKr=r(oOt,"model_type"),oOt.forEach(t),dKr=r(kL,` property of the config object (either
passed as an argument or loaded from `),Iwe=n(kL,"CODE",{});var rOt=s(Iwe);cKr=r(rOt,"pretrained_model_name_or_path"),rOt.forEach(t),fKr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nwe=n(kL,"CODE",{});var tOt=s(Nwe);mKr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),gKr=r(kL,":"),kL.forEach(t),hKr=i(vi),qwe=n(vi,"UL",{});var aOt=s(qwe);sA=n(aOt,"LI",{});var LOe=s(sA);jwe=n(LOe,"STRONG",{});var nOt=s(jwe);pKr=r(nOt,"bert"),nOt.forEach(t),_Kr=r(LOe," \u2014 "),Poe=n(LOe,"A",{href:!0});var sOt=s(Poe);uKr=r(sOt,"FlaxBertForNextSentencePrediction"),sOt.forEach(t),bKr=r(LOe," (BERT model)"),LOe.forEach(t),aOt.forEach(t),vKr=i(vi),T(lA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),SXe=i(f),Mf=n(f,"H2",{class:!0});var GQe=s(Mf);iA=n(GQe,"A",{id:!0,class:!0,href:!0});var lOt=s(iA);Dwe=n(lOt,"SPAN",{});var iOt=s(Dwe);T(j$.$$.fragment,iOt),iOt.forEach(t),lOt.forEach(t),FKr=i(GQe),Gwe=n(GQe,"SPAN",{});var dOt=s(Gwe);TKr=r(dOt,"FlaxAutoModelForImageClassification"),dOt.forEach(t),GQe.forEach(t),RXe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(D$.$$.fragment,Fi),MKr=i(Fi),Ef=n(Fi,"P",{});var Pte=s(Ef);EKr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Boe=n(Pte,"A",{href:!0});var cOt=s(Boe);CKr=r(cOt,"from_pretrained()"),cOt.forEach(t),wKr=r(Pte," class method or the "),Ioe=n(Pte,"A",{href:!0});var fOt=s(Ioe);AKr=r(fOt,"from_config()"),fOt.forEach(t),LKr=r(Pte,` class
method.`),Pte.forEach(t),yKr=i(Fi),G$=n(Fi,"P",{});var OQe=s(G$);xKr=r(OQe,"This class cannot be instantiated directly using "),Owe=n(OQe,"CODE",{});var mOt=s(Owe);$Kr=r(mOt,"__init__()"),mOt.forEach(t),kKr=r(OQe," (throws an error)."),OQe.forEach(t),SKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var SL=s(oa);T(O$.$$.fragment,SL),RKr=i(SL),Vwe=n(SL,"P",{});var gOt=s(Vwe);PKr=r(gOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gOt.forEach(t),BKr=i(SL),Cf=n(SL,"P",{});var Bte=s(Cf);IKr=r(Bte,`Note:
Loading a model from its configuration file does `),Xwe=n(Bte,"STRONG",{});var hOt=s(Xwe);NKr=r(hOt,"not"),hOt.forEach(t),qKr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Bte,"A",{href:!0});var pOt=s(Noe);jKr=r(pOt,"from_pretrained()"),pOt.forEach(t),DKr=r(Bte," to load the model weights."),Bte.forEach(t),GKr=i(SL),T(dA.$$.fragment,SL),SL.forEach(t),OKr=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(V$.$$.fragment,Ti),VKr=i(Ti),zwe=n(Ti,"P",{});var _Ot=s(zwe);XKr=r(_Ot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Ot.forEach(t),zKr=i(Ti),$n=n(Ti,"P",{});var RL=s($n);QKr=r(RL,"The model class to instantiate is selected based on the "),Qwe=n(RL,"CODE",{});var uOt=s(Qwe);WKr=r(uOt,"model_type"),uOt.forEach(t),HKr=r(RL,` property of the config object (either
passed as an argument or loaded from `),Wwe=n(RL,"CODE",{});var bOt=s(Wwe);UKr=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),JKr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hwe=n(RL,"CODE",{});var vOt=s(Hwe);YKr=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),KKr=r(RL,":"),RL.forEach(t),ZKr=i(Ti),X$=n(Ti,"UL",{});var VQe=s(X$);cA=n(VQe,"LI",{});var yOe=s(cA);Uwe=n(yOe,"STRONG",{});var FOt=s(Uwe);eZr=r(FOt,"beit"),FOt.forEach(t),oZr=r(yOe," \u2014 "),qoe=n(yOe,"A",{href:!0});var TOt=s(qoe);rZr=r(TOt,"FlaxBeitForImageClassification"),TOt.forEach(t),tZr=r(yOe," (BEiT model)"),yOe.forEach(t),aZr=i(VQe),fA=n(VQe,"LI",{});var xOe=s(fA);Jwe=n(xOe,"STRONG",{});var MOt=s(Jwe);nZr=r(MOt,"vit"),MOt.forEach(t),sZr=r(xOe," \u2014 "),joe=n(xOe,"A",{href:!0});var EOt=s(joe);lZr=r(EOt,"FlaxViTForImageClassification"),EOt.forEach(t),iZr=r(xOe," (ViT model)"),xOe.forEach(t),VQe.forEach(t),dZr=i(Ti),T(mA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),PXe=i(f),wf=n(f,"H2",{class:!0});var XQe=s(wf);gA=n(XQe,"A",{id:!0,class:!0,href:!0});var COt=s(gA);Ywe=n(COt,"SPAN",{});var wOt=s(Ywe);T(z$.$$.fragment,wOt),wOt.forEach(t),COt.forEach(t),cZr=i(XQe),Kwe=n(XQe,"SPAN",{});var AOt=s(Kwe);fZr=r(AOt,"FlaxAutoModelForVision2Seq"),AOt.forEach(t),XQe.forEach(t),BXe=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(Q$.$$.fragment,Mi),mZr=i(Mi),Af=n(Mi,"P",{});var Ite=s(Af);gZr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Doe=n(Ite,"A",{href:!0});var LOt=s(Doe);hZr=r(LOt,"from_pretrained()"),LOt.forEach(t),pZr=r(Ite," class method or the "),Goe=n(Ite,"A",{href:!0});var yOt=s(Goe);_Zr=r(yOt,"from_config()"),yOt.forEach(t),uZr=r(Ite,` class
method.`),Ite.forEach(t),bZr=i(Mi),W$=n(Mi,"P",{});var zQe=s(W$);vZr=r(zQe,"This class cannot be instantiated directly using "),Zwe=n(zQe,"CODE",{});var xOt=s(Zwe);FZr=r(xOt,"__init__()"),xOt.forEach(t),TZr=r(zQe," (throws an error)."),zQe.forEach(t),MZr=i(Mi),ra=n(Mi,"DIV",{class:!0});var PL=s(ra);T(H$.$$.fragment,PL),EZr=i(PL),eAe=n(PL,"P",{});var $Ot=s(eAe);CZr=r($Ot,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ot.forEach(t),wZr=i(PL),Lf=n(PL,"P",{});var Nte=s(Lf);AZr=r(Nte,`Note:
Loading a model from its configuration file does `),oAe=n(Nte,"STRONG",{});var kOt=s(oAe);LZr=r(kOt,"not"),kOt.forEach(t),yZr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(Nte,"A",{href:!0});var SOt=s(Ooe);xZr=r(SOt,"from_pretrained()"),SOt.forEach(t),$Zr=r(Nte," to load the model weights."),Nte.forEach(t),kZr=i(PL),T(hA.$$.fragment,PL),PL.forEach(t),SZr=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(U$.$$.fragment,Ei),RZr=i(Ei),rAe=n(Ei,"P",{});var ROt=s(rAe);PZr=r(ROt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ROt.forEach(t),BZr=i(Ei),kn=n(Ei,"P",{});var BL=s(kn);IZr=r(BL,"The model class to instantiate is selected based on the "),tAe=n(BL,"CODE",{});var POt=s(tAe);NZr=r(POt,"model_type"),POt.forEach(t),qZr=r(BL,` property of the config object (either
passed as an argument or loaded from `),aAe=n(BL,"CODE",{});var BOt=s(aAe);jZr=r(BOt,"pretrained_model_name_or_path"),BOt.forEach(t),DZr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(BL,"CODE",{});var IOt=s(nAe);GZr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),OZr=r(BL,":"),BL.forEach(t),VZr=i(Ei),sAe=n(Ei,"UL",{});var NOt=s(sAe);pA=n(NOt,"LI",{});var $Oe=s(pA);lAe=n($Oe,"STRONG",{});var qOt=s(lAe);XZr=r(qOt,"vision-encoder-decoder"),qOt.forEach(t),zZr=r($Oe," \u2014 "),Voe=n($Oe,"A",{href:!0});var jOt=s(Voe);QZr=r(jOt,"FlaxVisionEncoderDecoderModel"),jOt.forEach(t),WZr=r($Oe," (Vision Encoder decoder model)"),$Oe.forEach(t),NOt.forEach(t),HZr=i(Ei),T(_A.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(zXt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoTokenizer"),c($i,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertModel"),c(Bf,"id","extending-the-auto-classes"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#extending-the-auto-classes"),c(ki,"class","relative group"),c(Nf,"id","transformers.AutoConfig"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#transformers.AutoConfig"),c(Si,"class","relative group"),c(TS,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(MS,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertConfig"),c(ES,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartConfig"),c(CS,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitConfig"),c(wS,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertConfig"),c(AS,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(LS,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdConfig"),c(yS,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(xS,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c($S,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(kS,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomConfig"),c(SS,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertConfig"),c(RS,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineConfig"),c(PS,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPConfig"),c(BS,"href","/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenConfig"),c(IS,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertConfig"),c(NS,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextConfig"),c(qS,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLConfig"),c(jS,"href","/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtConfig"),c(DS,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(GS,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(OS,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(VS,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaConfig"),c(XS,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(zS,"href","/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(QS,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTConfig"),c(WS,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrConfig"),c(HS,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertConfig"),c(US,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRConfig"),c(JS,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTConfig"),c(YS,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraConfig"),c(KS,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ZS,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertConfig"),c(eR,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaConfig"),c(oR,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetConfig"),c(rR,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTConfig"),c(tR,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelConfig"),c(aR,"href","/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNConfig"),c(nR,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Config"),c(sR,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(lR,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(iR,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJConfig"),c(dR,"href","/docs/transformers/pr_17554/en/model_doc/groupvit#transformers.GroupViTConfig"),c(cR,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertConfig"),c(fR,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertConfig"),c(mR,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(gR,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(hR,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(pR,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(_R,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDConfig"),c(uR,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitConfig"),c(bR,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerConfig"),c(vR,"href","/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Config"),c(FR,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeConfig"),c(TR,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertConfig"),c(MR,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Config"),c(ER,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianConfig"),c(CR,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(wR,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartConfig"),c(AR,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTConfig"),c(LR,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(yR,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xR,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetConfig"),c($R,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Config"),c(kR,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaConfig"),c(SR,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(RR,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PR,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTConfig"),c(BR,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusConfig"),c(IR,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverConfig"),c(NR,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartConfig"),c(qR,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jR,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(DR,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(GR,"href","/docs/transformers/pr_17554/en/model_doc/rag#transformers.RagConfig"),c(OR,"href","/docs/transformers/pr_17554/en/model_doc/realm#transformers.RealmConfig"),c(VR,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerConfig"),c(XR,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetConfig"),c(zR,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertConfig"),c(QR,"href","/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetConfig"),c(WR,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertConfig"),c(HR,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaConfig"),c(UR,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerConfig"),c(JR,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerConfig"),c(YR,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWConfig"),c(KR,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDConfig"),c(ZR,"href","/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eP,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oP,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rP,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterConfig"),c(tP,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aP,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinConfig"),c(nP,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Config"),c(sP,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasConfig"),c(lP,"href","/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(iP,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(dP,"href","/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRConfig"),c(cP,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(fP,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mP,"href","/docs/transformers/pr_17554/en/model_doc/van#transformers.VanConfig"),c(gP,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltConfig"),c(hP,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(pP,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(_P,"href","/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uP,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTConfig"),c(bP,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vP,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(FP,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(TP,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMConfig"),c(MP,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMConfig"),c(EP,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMConfig"),c(CP,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wP,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(AP,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(LP,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetConfig"),c(yP,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosConfig"),c(xP,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoTokenizer"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoTokenizer"),c(Pi,"class","relative group"),c($P,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kP,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizer"),c(SP,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartTokenizer"),c(PP,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartTokenizerFast"),c(BP,"href","/docs/transformers/pr_17554/en/model_doc/barthez#transformers.BarthezTokenizer"),c(IP,"href","/docs/transformers/pr_17554/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NP,"href","/docs/transformers/pr_17554/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qP,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GP,"href","/docs/transformers/pr_17554/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OP,"href","/docs/transformers/pr_17554/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VP,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XP,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zP,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QP,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WP,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(HP,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(UP,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JP,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(YP,"href","/docs/transformers/pr_17554/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KP,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZP,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineTokenizer"),c(oB,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPTokenizer"),c(rB,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tB,"href","/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(aB,"href","/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(nB,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sB,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17554/en/model_doc/cpm#transformers.CpmTokenizer"),c(iB,"href","/docs/transformers/pr_17554/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(dB,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(cB,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaTokenizer"),c(gB,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(pB,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(_B,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uB,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(vB,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(FB,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraTokenizer"),c(TB,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(MB,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(EB,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetTokenizer"),c(CB,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wB,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(AB,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelTokenizer"),c(LB,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yB,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($B,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kB,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SB,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(RB,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PB,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BB,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPTokenizer"),c(IB,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NB,"href","/docs/transformers/pr_17554/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qB,"href","/docs/transformers/pr_17554/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(VB,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(zB,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(QB,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(WB,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(HB,"href","/docs/transformers/pr_17554/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UB,"href","/docs/transformers/pr_17554/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JB,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDTokenizer"),c(YB,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDTokenizerFast"),c(KB,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZB,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eI,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Tokenizer"),c(oI,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5TokenizerFast"),c(rI,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeTokenizer"),c(tI,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aI,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sI,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianTokenizer"),c(lI,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartTokenizer"),c(iI,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dI,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cI,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fI,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(mI,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17554/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hI,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pI,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(uI,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bI,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Tokenizer"),c(vI,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5TokenizerFast"),c(FI,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(TI,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizer"),c(EI,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wI,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AI,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LI,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yI,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xI,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($I,"href","/docs/transformers/pr_17554/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kI,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartTokenizer"),c(SI,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(RI,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17554/en/model_doc/rag#transformers.RagTokenizer"),c(II,"href","/docs/transformers/pr_17554/en/model_doc/realm#transformers.RealmTokenizer"),c(NI,"href","/docs/transformers/pr_17554/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qI,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jI,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(DI,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertTokenizer"),c(GI,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(VI,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zI,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QI,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(WI,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(HI,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(UI,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(JI,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterTokenizer"),c(YI,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(KI,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ZI,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(eN,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Tokenizer"),c(oN,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5TokenizerFast"),c(rN,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasTokenizer"),c(tN,"href","/docs/transformers/pr_17554/en/model_doc/tapex#transformers.TapexTokenizer"),c(aN,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nN,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizer"),c(iN,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertTokenizerFast"),c(dN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(mN,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gN,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hN,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMTokenizer"),c(pN,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_N,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uN,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vN,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FN,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(TN,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(MN,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizer"),c(EN,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoFeatureExtractor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoFeatureExtractor"),c(Bi,"class","relative group"),c(CN,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wN,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qN,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(DN,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(GN,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tq,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"id","transformers.AutoProcessor"),c(gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gp,"href","#transformers.AutoProcessor"),c(Ii,"class","relative group"),c(aq,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nq,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPProcessor"),c(sq,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPProcessor"),c(lq,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iq,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(dq,"href","/docs/transformers/pr_17554/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(cq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mq,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(gq,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(hq,"href","/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRProcessor"),c(pq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_q,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uq,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltProcessor"),c(bq,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Fq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Tq,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bp,"id","transformers.AutoModel"),c(Bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bp,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Mq,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eq,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cq,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wq,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertModel"),c(Aq,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartModel"),c(Lq,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitModel"),c(yq,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertModel"),c(xq,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c($q,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdModel"),c(kq,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Sq,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Rq,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Pq,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomModel"),c(Bq,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertModel"),c(Iq,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineModel"),c(Nq,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.CLIPModel"),c(qq,"href","/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenModel"),c(jq,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertModel"),c(Dq,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextModel"),c(Gq,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLModel"),c(Oq,"href","/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtModel"),c(Vq,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Xq,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zq,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Qq,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaModel"),c(Wq,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Hq,"href","/docs/transformers/pr_17554/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Uq,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTModel"),c(Jq,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrModel"),c(Yq,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertModel"),c(Kq,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Zq,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTModel"),c(ej,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraModel"),c(oj,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertModel"),c(rj,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaModel"),c(tj,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetModel"),c(aj,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTModel"),c(nj,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelModel"),c(sj,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lj,"href","/docs/transformers/pr_17554/en/model_doc/glpn#transformers.GLPNModel"),c(ij,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2Model"),c(dj,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cj,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(fj,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJModel"),c(mj,"href","/docs/transformers/pr_17554/en/model_doc/groupvit#transformers.GroupViTModel"),c(gj,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertModel"),c(hj,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertModel"),c(pj,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(_j,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(uj,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(bj,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(vj,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDModel"),c(Fj,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitModel"),c(Tj,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerModel"),c(Mj,"href","/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5Model"),c(Ej,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeModel"),c(Cj,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertModel"),c(wj,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100Model"),c(Aj,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianModel"),c(Lj,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerModel"),c(yj,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartModel"),c(xj,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTModel"),c($j,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(kj,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Sj,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetModel"),c(Rj,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5Model"),c(Pj,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaModel"),c(Bj,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Ij,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Nj,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTModel"),c(qj,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusModel"),c(jj,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dj,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartModel"),c(Gj,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oj,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vj,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xj,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModel"),c(zj,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetModel"),c(Qj,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertModel"),c(Wj,"href","/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetModel"),c(Hj,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel"),c(Uj,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaModel"),c(Jj,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerModel"),c(Yj,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerModel"),c(Kj,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWModel"),c(Zj,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDModel"),c(eD,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oD,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterModel"),c(rD,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tD,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinModel"),c(aD,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5Model"),c(nD,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasModel"),c(sD,"href","/docs/transformers/pr_17554/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lD,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iD,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dD,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cD,"href","/docs/transformers/pr_17554/en/model_doc/van#transformers.VanModel"),c(fD,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltModel"),c(mD,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gD,"href","/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hD,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTModel"),c(pD,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_D,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(uD,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bD,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMModel"),c(vD,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMModel"),c(FD,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMModel"),c(TD,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MD,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ED,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CD,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetModel"),c(wD,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosModel"),c(AD,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ju,"id","transformers.AutoModelForPreTraining"),c(ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ju,"href","#transformers.AutoModelForPreTraining"),c(Gi,"class","relative group"),c(LD,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kD,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForPreTraining"),c(RD,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PD,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM"),c(BD,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ND,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qD,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DD,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForPreTraining"),c(OD,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VD,"href","/docs/transformers/pr_17554/en/model_doc/flava#transformers.FlavaForPreTraining"),c(XD,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForPreTraining"),c(zD,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WD,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(HD,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JD,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YD,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(KD,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ZD,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(eG,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oG,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(rG,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tG,"href","/docs/transformers/pr_17554/en/model_doc/retribert#transformers.RetriBertModel"),c(aG,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nG,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(sG,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lG,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dG,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cG,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fG,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mG,"href","/docs/transformers/pr_17554/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gG,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hG,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pG,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(_G,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bG,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vG,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.AutoModelForCausalLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.AutoModelForCausalLM"),c(Xi,"class","relative group"),c(FG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForCausalLM"),c(CG,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertLMHeadModel"),c(wG,"href","/docs/transformers/pr_17554/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(AG,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(LG,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yG,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xG,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($G,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForCausalLM"),c(kG,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(SG,"href","/docs/transformers/pr_17554/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(RG,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(PG,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(BG,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForCausalLM"),c(IG,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(NG,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qG,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jG,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(DG,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianForCausalLM"),c(GG,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForCausalLM"),c(OG,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VG,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XG,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.OPTForCausalLM"),c(zG,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(QG,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(WG,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HG,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(UG,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JG,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YG,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KG,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZG,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eO,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oO,"href","/docs/transformers/pr_17554/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rO,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tO,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lO,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForMaskedLM"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForMaskedLM"),c(Wi,"class","relative group"),c(iO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mO,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pO,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_O,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uO,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bO,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vO,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FO,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MO,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EO,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CO,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wO,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LO,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yO,"href","/docs/transformers/pr_17554/en/model_doc/luke#transformers.LukeForMaskedLM"),c(xO,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kO,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(SO,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(RO,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(PO,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(BO,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(IO,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(NO,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(qO,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jO,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DO,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(GO,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VO,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zO,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QO,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d2,"id","transformers.AutoModelForSeq2SeqLM"),c(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ji,"class","relative group"),c(WO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oV,"href","/docs/transformers/pr_17554/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_17554/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_17554/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.MarianMTModel"),c(sV,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_17554/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mV,"href","/docs/transformers/pr_17554/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForSequenceClassification"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForSequenceClassification"),c(Zi,"class","relative group"),c(gV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c($V,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17554/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForMultipleChoice"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForMultipleChoice"),c(rd,"class","relative group"),c(fX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c($X,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(qX,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(jX,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(DX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(GX,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(OX,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(VX,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(db,"id","transformers.AutoModelForNextSentencePrediction"),c(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(db,"href","#transformers.AutoModelForNextSentencePrediction"),c(nd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(HX,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UX,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(JX,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(YX,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(KX,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForTokenClassification"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForTokenClassification"),c(id,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(tz,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForTokenClassification"),c(az,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(nz,"href","/docs/transformers/pr_17554/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(sz,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lz,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iz,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dz,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cz,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(fz,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(mz,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gz,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hz,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(pz,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(_z,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(uz,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bz,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vz,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(wz,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Az,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(yz,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xz,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($z,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kz,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForQuestionAnswering"),c(fd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17554/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17554/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oQ,"href","/docs/transformers/pr_17554/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17554/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17554/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17554/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17554/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17554/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17554/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17554/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17554/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17554/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CQ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LQ,"href","/docs/transformers/pr_17554/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(hd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForImageClassification"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForImageClassification"),c(ud,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForImageClassification"),c(IQ,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NQ,"href","/docs/transformers/pr_17554/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qQ,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DQ,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GQ,"href","/docs/transformers/pr_17554/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OQ,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassification"),c(VQ,"href","/docs/transformers/pr_17554/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(XQ,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zQ,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(QQ,"href","/docs/transformers/pr_17554/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WQ,"href","/docs/transformers/pr_17554/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HQ,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(UQ,"href","/docs/transformers/pr_17554/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JQ,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YQ,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForImageClassification"),c(KQ,"href","/docs/transformers/pr_17554/en/model_doc/van#transformers.VanForImageClassification"),c(ZQ,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForVision2Seq"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForVision2Seq"),c(Fd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ed,"class","relative group"),c(aW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17554/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForAudioClassification"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForAudioClassification"),c(Ad,"class","relative group"),c(iW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForAudioFrameClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForAudioFrameClassification"),c(xd,"class","relative group"),c(FW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(CW,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(wW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(AW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(LW,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForCTC"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForCTC"),c(Sd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(SW,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.HubertForCTC"),c(RW,"href","/docs/transformers/pr_17554/en/model_doc/mctct#transformers.MCTCTForCTC"),c(PW,"href","/docs/transformers/pr_17554/en/model_doc/sew#transformers.SEWForCTC"),c(BW,"href","/docs/transformers/pr_17554/en/model_doc/sew-d#transformers.SEWDForCTC"),c(IW,"href","/docs/transformers/pr_17554/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(NW,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(qW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(jW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(DW,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Bd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17554/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(zW,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForAudioXVector"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForAudioXVector"),c(qd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(JW,"href","/docs/transformers/pr_17554/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(YW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(KW,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(ZW,"href","/docs/transformers/pr_17554/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForMaskedImageModeling"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Gd,"class","relative group"),c(eH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17554/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(aH,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(nH,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForObjectDetection"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForObjectDetection"),c(zd,"class","relative group"),c(sH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForObjectDetection"),c(cH,"href","/docs/transformers/pr_17554/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForImageSegmentation"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForImageSegmentation"),c(Hd,"class","relative group"),c(fH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17554/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForSemanticSegmentation"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Yd,"class","relative group"),c(pH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(vH,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(FH,"href","/docs/transformers/pr_17554/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(TH,"href","/docs/transformers/pr_17554/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForInstanceSegmentation"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForInstanceSegmentation"),c(ec,"class","relative group"),c(MH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17554/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.TFAutoModel"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.TFAutoModel"),c(tc,"class","relative group"),c(AH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertModel"),c($H,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartModel"),c(kH,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertModel"),c(SH,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(RH,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(PH,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertModel"),c(BH,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.TFCLIPModel"),c(IH,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertModel"),c(NH,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextModel"),c(qH,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLModel"),c(jH,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(DH,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaModel"),c(GH,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(OH,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(VH,"href","/docs/transformers/pr_17554/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(XH,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraModel"),c(zH,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(QH,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelModel"),c(WH,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(HH,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2Model"),c(UH,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJModel"),c(JH,"href","/docs/transformers/pr_17554/en/model_doc/hubert#transformers.TFHubertModel"),c(YH,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(KH,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDModel"),c(ZH,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerModel"),c(eU,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertModel"),c(oU,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianModel"),c(rU,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartModel"),c(tU,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(aU,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetModel"),c(nU,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5Model"),c(sU,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(lU,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTModel"),c(iU,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusModel"),c(dU,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetModel"),c(cU,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertModel"),c(fU,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaModel"),c(mU,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerModel"),c(gU,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(hU,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinModel"),c(pU,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5Model"),c(_U,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasModel"),c(uU,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bU,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTModel"),c(vU,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(FU,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TU,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMModel"),c(MU,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(EU,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.TFAutoModelForPreTraining"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForPreTraining"),c(sc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yU,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xU,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForPreTraining"),c($U,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kU,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(SU,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RU,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(PU,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BU,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(IU,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NU,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qU,"href","/docs/transformers/pr_17554/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(jU,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(DU,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(GU,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OU,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(VU,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(zU,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(QU,"href","/docs/transformers/pr_17554/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(WU,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HU,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForCausalLM"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForCausalLM"),c(dc,"class","relative group"),c(JU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(eJ,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(oJ,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(rJ,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tJ,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(aJ,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nJ,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(sJ,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(lJ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(iJ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(dJ,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(cJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fJ,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForImageClassification"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForImageClassification"),c(mc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17554/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(_J,"href","/docs/transformers/pr_17554/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(uJ,"href","/docs/transformers/pr_17554/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(bJ,"href","/docs/transformers/pr_17554/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(vJ,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForMaskedLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForMaskedLM"),c(pc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($J,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OJ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForSeq2SeqLM"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(bc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(JJ,"href","/docs/transformers/pr_17554/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.TFMarianMTModel"),c(KJ,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForSequenceClassification"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Tc,"class","relative group"),c(rY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17554/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17554/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17554/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.TFAutoModelForMultipleChoice"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(JY,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Lc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(oK,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c($c,"class","relative group"),c(rK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17554/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForTokenClassification"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForTokenClassification"),c(Rc,"class","relative group"),c(sK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(fK,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(gK,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(hK,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(pK,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(_K,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(uK,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(bK,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(vK,"href","/docs/transformers/pr_17554/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(FK,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(TK,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(EK,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(CK,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(wK,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(AK,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LK,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(yK,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.TFAutoModelForQuestionAnswering"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(xK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17554/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17554/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17554/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17554/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17554/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(GK,"href","/docs/transformers/pr_17554/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17554/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17554/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17554/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17554/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17554/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(JK,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_17554/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.TFAutoModelForVision2Seq"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.TFAutoModelForVision2Seq"),c(jc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Oc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17554/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModel"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModel"),c(zc,"class","relative group"),c(sZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cZ,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartModel"),c(fZ,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitModel"),c(mZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertModel"),c(gZ,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hZ,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pZ,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_Z,"href","/docs/transformers/pr_17554/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uZ,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bZ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraModel"),c(vZ,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(FZ,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(TZ,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(MZ,"href","/docs/transformers/pr_17554/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(EZ,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianModel"),c(CZ,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wZ,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AZ,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTModel"),c(LZ,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yZ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xZ,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($Z,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5Model"),c(kZ,"href","/docs/transformers/pr_17554/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(SZ,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTModel"),c(RZ,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PZ,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(BZ,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.FlaxAutoModelForCausalLM"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Hc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(DZ,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(GZ,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(OZ,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(VZ,"href","/docs/transformers/pr_17554/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(XZ,"href","/docs/transformers/pr_17554/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zZ,"href","/docs/transformers/pr_17554/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QZ,"href","/docs/transformers/pr_17554/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(WZ,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HZ,"href","/docs/transformers/pr_17554/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.FlaxAutoModelForPreTraining"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Yc,"class","relative group"),c(UZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZZ,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oee,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ree,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tee,"href","/docs/transformers/pr_17554/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nee,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(see,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lee,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iee,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(dee,"href","/docs/transformers/pr_17554/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(cee,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.FlaxAutoModelForMaskedLM"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(ef,"class","relative group"),c(fee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(pee,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(uee,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(bee,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(vee,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Fee,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Mee,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Eee,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(tf,"class","relative group"),c(Cee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yee,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xee,"href","/docs/transformers/pr_17554/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($ee,"href","/docs/transformers/pr_17554/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kee,"href","/docs/transformers/pr_17554/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(See,"href","/docs/transformers/pr_17554/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ree,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_17554/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Bee,"href","/docs/transformers/pr_17554/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Iee,"href","/docs/transformers/pr_17554/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(sf,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Xee,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zee,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qee,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wee,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hee,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Uee,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(cf,"class","relative group"),c(Jee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eoe,"href","/docs/transformers/pr_17554/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ooe,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(roe,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(toe,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aoe,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(noe,"href","/docs/transformers/pr_17554/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(soe,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(loe,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ioe,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(gf,"class","relative group"),c(doe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(coe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(goe,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hoe,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(poe,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_oe,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uoe,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(boe,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(voe,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(_f,"class","relative group"),c(Foe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Toe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Moe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eoe,"href","/docs/transformers/pr_17554/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Coe,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(woe,"href","/docs/transformers/pr_17554/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Aoe,"href","/docs/transformers/pr_17554/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Loe,"href","/docs/transformers/pr_17554/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yoe,"href","/docs/transformers/pr_17554/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xoe,"href","/docs/transformers/pr_17554/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($oe,"href","/docs/transformers/pr_17554/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(aA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(vf,"class","relative group"),c(koe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/pr_17554/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iA,"id","transformers.FlaxAutoModelForImageClassification"),c(iA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Mf,"class","relative group"),c(Boe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/pr_17554/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(joe,"href","/docs/transformers/pr_17554/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.FlaxAutoModelForVision2Seq"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(wf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_17554/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_17554/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ci),b(f,kf,u),b(f,nt,u),e(nt,wi),e(nt,Ai),e(Ai,IL),e(nt,Sf),b(f,Oe,u),b(f,Qe,u),e(Qe,Li),e(Qe,Rn),e(Rn,NL),e(Qe,Pn),e(Qe,Bn),e(Bn,qL),e(Qe,yi),e(Qe,In),e(In,jL),e(Qe,xi),b(f,Rf,u),M($a,f,u),b(f,We,u),b(f,Ae,u),e(Ae,pS),e(Ae,$i),e($i,_S),e(Ae,uS),b(f,Co,u),b(f,ka,u),e(ka,bS),e(ka,Pf),e(Pf,vS),e(ka,QQe),b(f,kOe,u),b(f,ki,u),e(ki,Bf),e(Bf,qte),M(DL,qte,null),e(ki,WQe),e(ki,jte),e(jte,HQe),b(f,SOe,u),b(f,Nn,u),e(Nn,UQe),e(Nn,Dte),e(Dte,JQe),e(Nn,YQe),e(Nn,Gte),e(Gte,KQe),e(Nn,ZQe),b(f,ROe,u),M(GL,f,u),b(f,POe,u),b(f,FS,u),e(FS,eWe),b(f,BOe,u),M(If,f,u),b(f,IOe,u),b(f,Si,u),e(Si,Nf),e(Nf,Ote),M(OL,Ote,null),e(Si,oWe),e(Si,Vte),e(Vte,rWe),b(f,NOe,u),b(f,wo,u),M(VL,wo,null),e(wo,tWe),e(wo,XL),e(XL,aWe),e(XL,TS),e(TS,nWe),e(XL,sWe),e(wo,lWe),e(wo,zL),e(zL,iWe),e(zL,Xte),e(Xte,dWe),e(zL,cWe),e(wo,fWe),e(wo,Ar),M(QL,Ar,null),e(Ar,mWe),e(Ar,zte),e(zte,gWe),e(Ar,hWe),e(Ar,Ri),e(Ri,pWe),e(Ri,Qte),e(Qte,_We),e(Ri,uWe),e(Ri,Wte),e(Wte,bWe),e(Ri,vWe),e(Ar,FWe),e(Ar,A),e(A,qf),e(qf,Hte),e(Hte,TWe),e(qf,MWe),e(qf,MS),e(MS,EWe),e(qf,CWe),e(A,wWe),e(A,jf),e(jf,Ute),e(Ute,AWe),e(jf,LWe),e(jf,ES),e(ES,yWe),e(jf,xWe),e(A,$We),e(A,Df),e(Df,Jte),e(Jte,kWe),e(Df,SWe),e(Df,CS),e(CS,RWe),e(Df,PWe),e(A,BWe),e(A,Gf),e(Gf,Yte),e(Yte,IWe),e(Gf,NWe),e(Gf,wS),e(wS,qWe),e(Gf,jWe),e(A,DWe),e(A,Of),e(Of,Kte),e(Kte,GWe),e(Of,OWe),e(Of,AS),e(AS,VWe),e(Of,XWe),e(A,zWe),e(A,Vf),e(Vf,Zte),e(Zte,QWe),e(Vf,WWe),e(Vf,LS),e(LS,HWe),e(Vf,UWe),e(A,JWe),e(A,Xf),e(Xf,eae),e(eae,YWe),e(Xf,KWe),e(Xf,yS),e(yS,ZWe),e(Xf,eHe),e(A,oHe),e(A,zf),e(zf,oae),e(oae,rHe),e(zf,tHe),e(zf,xS),e(xS,aHe),e(zf,nHe),e(A,sHe),e(A,Qf),e(Qf,rae),e(rae,lHe),e(Qf,iHe),e(Qf,$S),e($S,dHe),e(Qf,cHe),e(A,fHe),e(A,Wf),e(Wf,tae),e(tae,mHe),e(Wf,gHe),e(Wf,kS),e(kS,hHe),e(Wf,pHe),e(A,_He),e(A,Hf),e(Hf,aae),e(aae,uHe),e(Hf,bHe),e(Hf,SS),e(SS,vHe),e(Hf,FHe),e(A,THe),e(A,Uf),e(Uf,nae),e(nae,MHe),e(Uf,EHe),e(Uf,RS),e(RS,CHe),e(Uf,wHe),e(A,AHe),e(A,Jf),e(Jf,sae),e(sae,LHe),e(Jf,yHe),e(Jf,PS),e(PS,xHe),e(Jf,$He),e(A,kHe),e(A,Yf),e(Yf,lae),e(lae,SHe),e(Yf,RHe),e(Yf,BS),e(BS,PHe),e(Yf,BHe),e(A,IHe),e(A,Kf),e(Kf,iae),e(iae,NHe),e(Kf,qHe),e(Kf,IS),e(IS,jHe),e(Kf,DHe),e(A,GHe),e(A,Zf),e(Zf,dae),e(dae,OHe),e(Zf,VHe),e(Zf,NS),e(NS,XHe),e(Zf,zHe),e(A,QHe),e(A,em),e(em,cae),e(cae,WHe),e(em,HHe),e(em,qS),e(qS,UHe),e(em,JHe),e(A,YHe),e(A,om),e(om,fae),e(fae,KHe),e(om,ZHe),e(om,jS),e(jS,eUe),e(om,oUe),e(A,rUe),e(A,rm),e(rm,mae),e(mae,tUe),e(rm,aUe),e(rm,DS),e(DS,nUe),e(rm,sUe),e(A,lUe),e(A,tm),e(tm,gae),e(gae,iUe),e(tm,dUe),e(tm,GS),e(GS,cUe),e(tm,fUe),e(A,mUe),e(A,am),e(am,hae),e(hae,gUe),e(am,hUe),e(am,OS),e(OS,pUe),e(am,_Ue),e(A,uUe),e(A,nm),e(nm,pae),e(pae,bUe),e(nm,vUe),e(nm,VS),e(VS,FUe),e(nm,TUe),e(A,MUe),e(A,sm),e(sm,_ae),e(_ae,EUe),e(sm,CUe),e(sm,XS),e(XS,wUe),e(sm,AUe),e(A,LUe),e(A,lm),e(lm,uae),e(uae,yUe),e(lm,xUe),e(lm,zS),e(zS,$Ue),e(lm,kUe),e(A,SUe),e(A,im),e(im,bae),e(bae,RUe),e(im,PUe),e(im,QS),e(QS,BUe),e(im,IUe),e(A,NUe),e(A,dm),e(dm,vae),e(vae,qUe),e(dm,jUe),e(dm,WS),e(WS,DUe),e(dm,GUe),e(A,OUe),e(A,cm),e(cm,Fae),e(Fae,VUe),e(cm,XUe),e(cm,HS),e(HS,zUe),e(cm,QUe),e(A,WUe),e(A,fm),e(fm,Tae),e(Tae,HUe),e(fm,UUe),e(fm,US),e(US,JUe),e(fm,YUe),e(A,KUe),e(A,mm),e(mm,Mae),e(Mae,ZUe),e(mm,eJe),e(mm,JS),e(JS,oJe),e(mm,rJe),e(A,tJe),e(A,gm),e(gm,Eae),e(Eae,aJe),e(gm,nJe),e(gm,YS),e(YS,sJe),e(gm,lJe),e(A,iJe),e(A,hm),e(hm,Cae),e(Cae,dJe),e(hm,cJe),e(hm,KS),e(KS,fJe),e(hm,mJe),e(A,gJe),e(A,pm),e(pm,wae),e(wae,hJe),e(pm,pJe),e(pm,ZS),e(ZS,_Je),e(pm,uJe),e(A,bJe),e(A,_m),e(_m,Aae),e(Aae,vJe),e(_m,FJe),e(_m,eR),e(eR,TJe),e(_m,MJe),e(A,EJe),e(A,um),e(um,Lae),e(Lae,CJe),e(um,wJe),e(um,oR),e(oR,AJe),e(um,LJe),e(A,yJe),e(A,bm),e(bm,yae),e(yae,xJe),e(bm,$Je),e(bm,rR),e(rR,kJe),e(bm,SJe),e(A,RJe),e(A,vm),e(vm,xae),e(xae,PJe),e(vm,BJe),e(vm,tR),e(tR,IJe),e(vm,NJe),e(A,qJe),e(A,Fm),e(Fm,$ae),e($ae,jJe),e(Fm,DJe),e(Fm,aR),e(aR,GJe),e(Fm,OJe),e(A,VJe),e(A,Tm),e(Tm,kae),e(kae,XJe),e(Tm,zJe),e(Tm,nR),e(nR,QJe),e(Tm,WJe),e(A,HJe),e(A,Mm),e(Mm,Sae),e(Sae,UJe),e(Mm,JJe),e(Mm,sR),e(sR,YJe),e(Mm,KJe),e(A,ZJe),e(A,Em),e(Em,Rae),e(Rae,eYe),e(Em,oYe),e(Em,lR),e(lR,rYe),e(Em,tYe),e(A,aYe),e(A,Cm),e(Cm,Pae),e(Pae,nYe),e(Cm,sYe),e(Cm,iR),e(iR,lYe),e(Cm,iYe),e(A,dYe),e(A,wm),e(wm,Bae),e(Bae,cYe),e(wm,fYe),e(wm,dR),e(dR,mYe),e(wm,gYe),e(A,hYe),e(A,Am),e(Am,Iae),e(Iae,pYe),e(Am,_Ye),e(Am,cR),e(cR,uYe),e(Am,bYe),e(A,vYe),e(A,Lm),e(Lm,Nae),e(Nae,FYe),e(Lm,TYe),e(Lm,fR),e(fR,MYe),e(Lm,EYe),e(A,CYe),e(A,ym),e(ym,qae),e(qae,wYe),e(ym,AYe),e(ym,mR),e(mR,LYe),e(ym,yYe),e(A,xYe),e(A,xm),e(xm,jae),e(jae,$Ye),e(xm,kYe),e(xm,gR),e(gR,SYe),e(xm,RYe),e(A,PYe),e(A,$m),e($m,Dae),e(Dae,BYe),e($m,IYe),e($m,hR),e(hR,NYe),e($m,qYe),e(A,jYe),e(A,km),e(km,Gae),e(Gae,DYe),e(km,GYe),e(km,pR),e(pR,OYe),e(km,VYe),e(A,XYe),e(A,Sm),e(Sm,Oae),e(Oae,zYe),e(Sm,QYe),e(Sm,_R),e(_R,WYe),e(Sm,HYe),e(A,UYe),e(A,Rm),e(Rm,Vae),e(Vae,JYe),e(Rm,YYe),e(Rm,uR),e(uR,KYe),e(Rm,ZYe),e(A,eKe),e(A,Pm),e(Pm,Xae),e(Xae,oKe),e(Pm,rKe),e(Pm,bR),e(bR,tKe),e(Pm,aKe),e(A,nKe),e(A,Bm),e(Bm,zae),e(zae,sKe),e(Bm,lKe),e(Bm,vR),e(vR,iKe),e(Bm,dKe),e(A,cKe),e(A,Im),e(Im,Qae),e(Qae,fKe),e(Im,mKe),e(Im,FR),e(FR,gKe),e(Im,hKe),e(A,pKe),e(A,Nm),e(Nm,Wae),e(Wae,_Ke),e(Nm,uKe),e(Nm,TR),e(TR,bKe),e(Nm,vKe),e(A,FKe),e(A,qm),e(qm,Hae),e(Hae,TKe),e(qm,MKe),e(qm,MR),e(MR,EKe),e(qm,CKe),e(A,wKe),e(A,jm),e(jm,Uae),e(Uae,AKe),e(jm,LKe),e(jm,ER),e(ER,yKe),e(jm,xKe),e(A,$Ke),e(A,Dm),e(Dm,Jae),e(Jae,kKe),e(Dm,SKe),e(Dm,CR),e(CR,RKe),e(Dm,PKe),e(A,BKe),e(A,Gm),e(Gm,Yae),e(Yae,IKe),e(Gm,NKe),e(Gm,wR),e(wR,qKe),e(Gm,jKe),e(A,DKe),e(A,Om),e(Om,Kae),e(Kae,GKe),e(Om,OKe),e(Om,AR),e(AR,VKe),e(Om,XKe),e(A,zKe),e(A,Vm),e(Vm,Zae),e(Zae,QKe),e(Vm,WKe),e(Vm,LR),e(LR,HKe),e(Vm,UKe),e(A,JKe),e(A,Xm),e(Xm,ene),e(ene,YKe),e(Xm,KKe),e(Xm,yR),e(yR,ZKe),e(Xm,eZe),e(A,oZe),e(A,zm),e(zm,one),e(one,rZe),e(zm,tZe),e(zm,xR),e(xR,aZe),e(zm,nZe),e(A,sZe),e(A,Qm),e(Qm,rne),e(rne,lZe),e(Qm,iZe),e(Qm,$R),e($R,dZe),e(Qm,cZe),e(A,fZe),e(A,Wm),e(Wm,tne),e(tne,mZe),e(Wm,gZe),e(Wm,kR),e(kR,hZe),e(Wm,pZe),e(A,_Ze),e(A,Hm),e(Hm,ane),e(ane,uZe),e(Hm,bZe),e(Hm,SR),e(SR,vZe),e(Hm,FZe),e(A,TZe),e(A,Um),e(Um,nne),e(nne,MZe),e(Um,EZe),e(Um,RR),e(RR,CZe),e(Um,wZe),e(A,AZe),e(A,Jm),e(Jm,sne),e(sne,LZe),e(Jm,yZe),e(Jm,PR),e(PR,xZe),e(Jm,$Ze),e(A,kZe),e(A,Ym),e(Ym,lne),e(lne,SZe),e(Ym,RZe),e(Ym,BR),e(BR,PZe),e(Ym,BZe),e(A,IZe),e(A,Km),e(Km,ine),e(ine,NZe),e(Km,qZe),e(Km,IR),e(IR,jZe),e(Km,DZe),e(A,GZe),e(A,Zm),e(Zm,dne),e(dne,OZe),e(Zm,VZe),e(Zm,NR),e(NR,XZe),e(Zm,zZe),e(A,QZe),e(A,eg),e(eg,cne),e(cne,WZe),e(eg,HZe),e(eg,qR),e(qR,UZe),e(eg,JZe),e(A,YZe),e(A,og),e(og,fne),e(fne,KZe),e(og,ZZe),e(og,jR),e(jR,eeo),e(og,oeo),e(A,reo),e(A,rg),e(rg,mne),e(mne,teo),e(rg,aeo),e(rg,DR),e(DR,neo),e(rg,seo),e(A,leo),e(A,tg),e(tg,gne),e(gne,ieo),e(tg,deo),e(tg,GR),e(GR,ceo),e(tg,feo),e(A,meo),e(A,ag),e(ag,hne),e(hne,geo),e(ag,heo),e(ag,OR),e(OR,peo),e(ag,_eo),e(A,ueo),e(A,ng),e(ng,pne),e(pne,beo),e(ng,veo),e(ng,VR),e(VR,Feo),e(ng,Teo),e(A,Meo),e(A,sg),e(sg,_ne),e(_ne,Eeo),e(sg,Ceo),e(sg,XR),e(XR,weo),e(sg,Aeo),e(A,Leo),e(A,lg),e(lg,une),e(une,yeo),e(lg,xeo),e(lg,zR),e(zR,$eo),e(lg,keo),e(A,Seo),e(A,ig),e(ig,bne),e(bne,Reo),e(ig,Peo),e(ig,QR),e(QR,Beo),e(ig,Ieo),e(A,Neo),e(A,dg),e(dg,vne),e(vne,qeo),e(dg,jeo),e(dg,WR),e(WR,Deo),e(dg,Geo),e(A,Oeo),e(A,cg),e(cg,Fne),e(Fne,Veo),e(cg,Xeo),e(cg,HR),e(HR,zeo),e(cg,Qeo),e(A,Weo),e(A,fg),e(fg,Tne),e(Tne,Heo),e(fg,Ueo),e(fg,UR),e(UR,Jeo),e(fg,Yeo),e(A,Keo),e(A,mg),e(mg,Mne),e(Mne,Zeo),e(mg,eoo),e(mg,JR),e(JR,ooo),e(mg,roo),e(A,too),e(A,gg),e(gg,Ene),e(Ene,aoo),e(gg,noo),e(gg,YR),e(YR,soo),e(gg,loo),e(A,ioo),e(A,hg),e(hg,Cne),e(Cne,doo),e(hg,coo),e(hg,KR),e(KR,foo),e(hg,moo),e(A,goo),e(A,pg),e(pg,wne),e(wne,hoo),e(pg,poo),e(pg,ZR),e(ZR,_oo),e(pg,uoo),e(A,boo),e(A,_g),e(_g,Ane),e(Ane,voo),e(_g,Foo),e(_g,eP),e(eP,Too),e(_g,Moo),e(A,Eoo),e(A,ug),e(ug,Lne),e(Lne,Coo),e(ug,woo),e(ug,oP),e(oP,Aoo),e(ug,Loo),e(A,yoo),e(A,bg),e(bg,yne),e(yne,xoo),e(bg,$oo),e(bg,rP),e(rP,koo),e(bg,Soo),e(A,Roo),e(A,vg),e(vg,xne),e(xne,Poo),e(vg,Boo),e(vg,tP),e(tP,Ioo),e(vg,Noo),e(A,qoo),e(A,Fg),e(Fg,$ne),e($ne,joo),e(Fg,Doo),e(Fg,aP),e(aP,Goo),e(Fg,Ooo),e(A,Voo),e(A,Tg),e(Tg,kne),e(kne,Xoo),e(Tg,zoo),e(Tg,nP),e(nP,Qoo),e(Tg,Woo),e(A,Hoo),e(A,Mg),e(Mg,Sne),e(Sne,Uoo),e(Mg,Joo),e(Mg,sP),e(sP,Yoo),e(Mg,Koo),e(A,Zoo),e(A,Eg),e(Eg,Rne),e(Rne,ero),e(Eg,oro),e(Eg,lP),e(lP,rro),e(Eg,tro),e(A,aro),e(A,Cg),e(Cg,Pne),e(Pne,nro),e(Cg,sro),e(Cg,iP),e(iP,lro),e(Cg,iro),e(A,dro),e(A,wg),e(wg,Bne),e(Bne,cro),e(wg,fro),e(wg,dP),e(dP,mro),e(wg,gro),e(A,hro),e(A,Ag),e(Ag,Ine),e(Ine,pro),e(Ag,_ro),e(Ag,cP),e(cP,uro),e(Ag,bro),e(A,vro),e(A,Lg),e(Lg,Nne),e(Nne,Fro),e(Lg,Tro),e(Lg,fP),e(fP,Mro),e(Lg,Ero),e(A,Cro),e(A,yg),e(yg,qne),e(qne,wro),e(yg,Aro),e(yg,mP),e(mP,Lro),e(yg,yro),e(A,xro),e(A,xg),e(xg,jne),e(jne,$ro),e(xg,kro),e(xg,gP),e(gP,Sro),e(xg,Rro),e(A,Pro),e(A,$g),e($g,Dne),e(Dne,Bro),e($g,Iro),e($g,hP),e(hP,Nro),e($g,qro),e(A,jro),e(A,kg),e(kg,Gne),e(Gne,Dro),e(kg,Gro),e(kg,pP),e(pP,Oro),e(kg,Vro),e(A,Xro),e(A,Sg),e(Sg,One),e(One,zro),e(Sg,Qro),e(Sg,_P),e(_P,Wro),e(Sg,Hro),e(A,Uro),e(A,Rg),e(Rg,Vne),e(Vne,Jro),e(Rg,Yro),e(Rg,uP),e(uP,Kro),e(Rg,Zro),e(A,eto),e(A,Pg),e(Pg,Xne),e(Xne,oto),e(Pg,rto),e(Pg,bP),e(bP,tto),e(Pg,ato),e(A,nto),e(A,Bg),e(Bg,zne),e(zne,sto),e(Bg,lto),e(Bg,vP),e(vP,ito),e(Bg,dto),e(A,cto),e(A,Ig),e(Ig,Qne),e(Qne,fto),e(Ig,mto),e(Ig,FP),e(FP,gto),e(Ig,hto),e(A,pto),e(A,Ng),e(Ng,Wne),e(Wne,_to),e(Ng,uto),e(Ng,TP),e(TP,bto),e(Ng,vto),e(A,Fto),e(A,qg),e(qg,Hne),e(Hne,Tto),e(qg,Mto),e(qg,MP),e(MP,Eto),e(qg,Cto),e(A,wto),e(A,jg),e(jg,Une),e(Une,Ato),e(jg,Lto),e(jg,EP),e(EP,yto),e(jg,xto),e(A,$to),e(A,Dg),e(Dg,Jne),e(Jne,kto),e(Dg,Sto),e(Dg,CP),e(CP,Rto),e(Dg,Pto),e(A,Bto),e(A,Gg),e(Gg,Yne),e(Yne,Ito),e(Gg,Nto),e(Gg,wP),e(wP,qto),e(Gg,jto),e(A,Dto),e(A,Og),e(Og,Kne),e(Kne,Gto),e(Og,Oto),e(Og,AP),e(AP,Vto),e(Og,Xto),e(A,zto),e(A,Vg),e(Vg,Zne),e(Zne,Qto),e(Vg,Wto),e(Vg,LP),e(LP,Hto),e(Vg,Uto),e(A,Jto),e(A,Xg),e(Xg,ese),e(ese,Yto),e(Xg,Kto),e(Xg,yP),e(yP,Zto),e(Xg,eao),e(A,oao),e(A,zg),e(zg,ose),e(ose,rao),e(zg,tao),e(zg,xP),e(xP,aao),e(zg,nao),e(Ar,sao),M(Qg,Ar,null),e(wo,lao),e(wo,Wg),M(WL,Wg,null),e(Wg,iao),e(Wg,rse),e(rse,dao),b(f,qOe,u),b(f,Pi,u),e(Pi,Hg),e(Hg,tse),M(HL,tse,null),e(Pi,cao),e(Pi,ase),e(ase,fao),b(f,jOe,u),b(f,Ao,u),M(UL,Ao,null),e(Ao,mao),e(Ao,JL),e(JL,gao),e(JL,$P),e($P,hao),e(JL,pao),e(Ao,_ao),e(Ao,YL),e(YL,uao),e(YL,nse),e(nse,bao),e(YL,vao),e(Ao,Fao),e(Ao,Lr),M(KL,Lr,null),e(Lr,Tao),e(Lr,sse),e(sse,Mao),e(Lr,Eao),e(Lr,Sa),e(Sa,Cao),e(Sa,lse),e(lse,wao),e(Sa,Aao),e(Sa,ise),e(ise,Lao),e(Sa,yao),e(Sa,dse),e(dse,xao),e(Sa,$ao),e(Lr,kao),e(Lr,k),e(k,qn),e(qn,cse),e(cse,Sao),e(qn,Rao),e(qn,kP),e(kP,Pao),e(qn,Bao),e(qn,SP),e(SP,Iao),e(qn,Nao),e(k,qao),e(k,jn),e(jn,fse),e(fse,jao),e(jn,Dao),e(jn,RP),e(RP,Gao),e(jn,Oao),e(jn,PP),e(PP,Vao),e(jn,Xao),e(k,zao),e(k,Dn),e(Dn,mse),e(mse,Qao),e(Dn,Wao),e(Dn,BP),e(BP,Hao),e(Dn,Uao),e(Dn,IP),e(IP,Jao),e(Dn,Yao),e(k,Kao),e(k,Ug),e(Ug,gse),e(gse,Zao),e(Ug,eno),e(Ug,NP),e(NP,ono),e(Ug,rno),e(k,tno),e(k,Gn),e(Gn,hse),e(hse,ano),e(Gn,nno),e(Gn,qP),e(qP,sno),e(Gn,lno),e(Gn,jP),e(jP,ino),e(Gn,dno),e(k,cno),e(k,Jg),e(Jg,pse),e(pse,fno),e(Jg,mno),e(Jg,DP),e(DP,gno),e(Jg,hno),e(k,pno),e(k,Yg),e(Yg,_se),e(_se,_no),e(Yg,uno),e(Yg,GP),e(GP,bno),e(Yg,vno),e(k,Fno),e(k,Kg),e(Kg,use),e(use,Tno),e(Kg,Mno),e(Kg,OP),e(OP,Eno),e(Kg,Cno),e(k,wno),e(k,On),e(On,bse),e(bse,Ano),e(On,Lno),e(On,VP),e(VP,yno),e(On,xno),e(On,XP),e(XP,$no),e(On,kno),e(k,Sno),e(k,Vn),e(Vn,vse),e(vse,Rno),e(Vn,Pno),e(Vn,zP),e(zP,Bno),e(Vn,Ino),e(Vn,QP),e(QP,Nno),e(Vn,qno),e(k,jno),e(k,Xn),e(Xn,Fse),e(Fse,Dno),e(Xn,Gno),e(Xn,WP),e(WP,Ono),e(Xn,Vno),e(Xn,HP),e(HP,Xno),e(Xn,zno),e(k,Qno),e(k,Zg),e(Zg,Tse),e(Tse,Wno),e(Zg,Hno),e(Zg,UP),e(UP,Uno),e(Zg,Jno),e(k,Yno),e(k,eh),e(eh,Mse),e(Mse,Kno),e(eh,Zno),e(eh,JP),e(JP,eso),e(eh,oso),e(k,rso),e(k,oh),e(oh,Ese),e(Ese,tso),e(oh,aso),e(oh,YP),e(YP,nso),e(oh,sso),e(k,lso),e(k,zn),e(zn,Cse),e(Cse,iso),e(zn,dso),e(zn,KP),e(KP,cso),e(zn,fso),e(zn,ZP),e(ZP,mso),e(zn,gso),e(k,hso),e(k,rh),e(rh,wse),e(wse,pso),e(rh,_so),e(rh,eB),e(eB,uso),e(rh,bso),e(k,vso),e(k,Qn),e(Qn,Ase),e(Ase,Fso),e(Qn,Tso),e(Qn,oB),e(oB,Mso),e(Qn,Eso),e(Qn,rB),e(rB,Cso),e(Qn,wso),e(k,Aso),e(k,Wn),e(Wn,Lse),e(Lse,Lso),e(Wn,yso),e(Wn,tB),e(tB,xso),e(Wn,$so),e(Wn,aB),e(aB,kso),e(Wn,Sso),e(k,Rso),e(k,Hn),e(Hn,yse),e(yse,Pso),e(Hn,Bso),e(Hn,nB),e(nB,Iso),e(Hn,Nso),e(Hn,sB),e(sB,qso),e(Hn,jso),e(k,Dso),e(k,Un),e(Un,xse),e(xse,Gso),e(Un,Oso),e(Un,lB),e(lB,Vso),e(Un,Xso),e(Un,iB),e(iB,zso),e(Un,Qso),e(k,Wso),e(k,th),e(th,$se),e($se,Hso),e(th,Uso),e(th,dB),e(dB,Jso),e(th,Yso),e(k,Kso),e(k,Jn),e(Jn,kse),e(kse,Zso),e(Jn,elo),e(Jn,cB),e(cB,olo),e(Jn,rlo),e(Jn,fB),e(fB,tlo),e(Jn,alo),e(k,nlo),e(k,Yn),e(Yn,Sse),e(Sse,slo),e(Yn,llo),e(Yn,mB),e(mB,ilo),e(Yn,dlo),e(Yn,gB),e(gB,clo),e(Yn,flo),e(k,mlo),e(k,Kn),e(Kn,Rse),e(Rse,glo),e(Kn,hlo),e(Kn,hB),e(hB,plo),e(Kn,_lo),e(Kn,pB),e(pB,ulo),e(Kn,blo),e(k,vlo),e(k,Zn),e(Zn,Pse),e(Pse,Flo),e(Zn,Tlo),e(Zn,_B),e(_B,Mlo),e(Zn,Elo),e(Zn,uB),e(uB,Clo),e(Zn,wlo),e(k,Alo),e(k,es),e(es,Bse),e(Bse,Llo),e(es,ylo),e(es,bB),e(bB,xlo),e(es,$lo),e(es,vB),e(vB,klo),e(es,Slo),e(k,Rlo),e(k,os),e(os,Ise),e(Ise,Plo),e(os,Blo),e(os,FB),e(FB,Ilo),e(os,Nlo),e(os,TB),e(TB,qlo),e(os,jlo),e(k,Dlo),e(k,ah),e(ah,Nse),e(Nse,Glo),e(ah,Olo),e(ah,MB),e(MB,Vlo),e(ah,Xlo),e(k,zlo),e(k,rs),e(rs,qse),e(qse,Qlo),e(rs,Wlo),e(rs,EB),e(EB,Hlo),e(rs,Ulo),e(rs,CB),e(CB,Jlo),e(rs,Ylo),e(k,Klo),e(k,nh),e(nh,jse),e(jse,Zlo),e(nh,eio),e(nh,wB),e(wB,oio),e(nh,rio),e(k,tio),e(k,ts),e(ts,Dse),e(Dse,aio),e(ts,nio),e(ts,AB),e(AB,sio),e(ts,lio),e(ts,LB),e(LB,iio),e(ts,dio),e(k,cio),e(k,as),e(as,Gse),e(Gse,fio),e(as,mio),e(as,yB),e(yB,gio),e(as,hio),e(as,xB),e(xB,pio),e(as,_io),e(k,uio),e(k,ns),e(ns,Ose),e(Ose,bio),e(ns,vio),e(ns,$B),e($B,Fio),e(ns,Tio),e(ns,kB),e(kB,Mio),e(ns,Eio),e(k,Cio),e(k,sh),e(sh,Vse),e(Vse,wio),e(sh,Aio),e(sh,SB),e(SB,Lio),e(sh,yio),e(k,xio),e(k,ss),e(ss,Xse),e(Xse,$io),e(ss,kio),e(ss,RB),e(RB,Sio),e(ss,Rio),e(ss,PB),e(PB,Pio),e(ss,Bio),e(k,Iio),e(k,ls),e(ls,zse),e(zse,Nio),e(ls,qio),e(ls,BB),e(BB,jio),e(ls,Dio),e(ls,IB),e(IB,Gio),e(ls,Oio),e(k,Vio),e(k,is),e(is,Qse),e(Qse,Xio),e(is,zio),e(is,NB),e(NB,Qio),e(is,Wio),e(is,qB),e(qB,Hio),e(is,Uio),e(k,Jio),e(k,lh),e(lh,Wse),e(Wse,Yio),e(lh,Kio),e(lh,jB),e(jB,Zio),e(lh,edo),e(k,odo),e(k,ds),e(ds,Hse),e(Hse,rdo),e(ds,tdo),e(ds,DB),e(DB,ado),e(ds,ndo),e(ds,GB),e(GB,sdo),e(ds,ldo),e(k,ido),e(k,cs),e(cs,Use),e(Use,ddo),e(cs,cdo),e(cs,OB),e(OB,fdo),e(cs,mdo),e(cs,VB),e(VB,gdo),e(cs,hdo),e(k,pdo),e(k,fs),e(fs,Jse),e(Jse,_do),e(fs,udo),e(fs,XB),e(XB,bdo),e(fs,vdo),e(fs,zB),e(zB,Fdo),e(fs,Tdo),e(k,Mdo),e(k,ms),e(ms,Yse),e(Yse,Edo),e(ms,Cdo),e(ms,QB),e(QB,wdo),e(ms,Ado),e(ms,WB),e(WB,Ldo),e(ms,ydo),e(k,xdo),e(k,gs),e(gs,Kse),e(Kse,$do),e(gs,kdo),e(gs,HB),e(HB,Sdo),e(gs,Rdo),e(gs,UB),e(UB,Pdo),e(gs,Bdo),e(k,Ido),e(k,hs),e(hs,Zse),e(Zse,Ndo),e(hs,qdo),e(hs,JB),e(JB,jdo),e(hs,Ddo),e(hs,YB),e(YB,Gdo),e(hs,Odo),e(k,Vdo),e(k,ps),e(ps,ele),e(ele,Xdo),e(ps,zdo),e(ps,KB),e(KB,Qdo),e(ps,Wdo),e(ps,ZB),e(ZB,Hdo),e(ps,Udo),e(k,Jdo),e(k,_s),e(_s,ole),e(ole,Ydo),e(_s,Kdo),e(_s,eI),e(eI,Zdo),e(_s,eco),e(_s,oI),e(oI,oco),e(_s,rco),e(k,tco),e(k,ih),e(ih,rle),e(rle,aco),e(ih,nco),e(ih,rI),e(rI,sco),e(ih,lco),e(k,ico),e(k,us),e(us,tle),e(tle,dco),e(us,cco),e(us,tI),e(tI,fco),e(us,mco),e(us,aI),e(aI,gco),e(us,hco),e(k,pco),e(k,dh),e(dh,ale),e(ale,_co),e(dh,uco),e(dh,nI),e(nI,bco),e(dh,vco),e(k,Fco),e(k,ch),e(ch,nle),e(nle,Tco),e(ch,Mco),e(ch,sI),e(sI,Eco),e(ch,Cco),e(k,wco),e(k,bs),e(bs,sle),e(sle,Aco),e(bs,Lco),e(bs,lI),e(lI,yco),e(bs,xco),e(bs,iI),e(iI,$co),e(bs,kco),e(k,Sco),e(k,vs),e(vs,lle),e(lle,Rco),e(vs,Pco),e(vs,dI),e(dI,Bco),e(vs,Ico),e(vs,cI),e(cI,Nco),e(vs,qco),e(k,jco),e(k,Fs),e(Fs,ile),e(ile,Dco),e(Fs,Gco),e(Fs,fI),e(fI,Oco),e(Fs,Vco),e(Fs,mI),e(mI,Xco),e(Fs,zco),e(k,Qco),e(k,fh),e(fh,dle),e(dle,Wco),e(fh,Hco),e(fh,gI),e(gI,Uco),e(fh,Jco),e(k,Yco),e(k,Ts),e(Ts,cle),e(cle,Kco),e(Ts,Zco),e(Ts,hI),e(hI,efo),e(Ts,ofo),e(Ts,pI),e(pI,rfo),e(Ts,tfo),e(k,afo),e(k,Ms),e(Ms,fle),e(fle,nfo),e(Ms,sfo),e(Ms,_I),e(_I,lfo),e(Ms,ifo),e(Ms,uI),e(uI,dfo),e(Ms,cfo),e(k,ffo),e(k,Es),e(Es,mle),e(mle,mfo),e(Es,gfo),e(Es,bI),e(bI,hfo),e(Es,pfo),e(Es,vI),e(vI,_fo),e(Es,ufo),e(k,bfo),e(k,Cs),e(Cs,gle),e(gle,vfo),e(Cs,Ffo),e(Cs,FI),e(FI,Tfo),e(Cs,Mfo),e(Cs,TI),e(TI,Efo),e(Cs,Cfo),e(k,wfo),e(k,ws),e(ws,hle),e(hle,Afo),e(ws,Lfo),e(ws,MI),e(MI,yfo),e(ws,xfo),e(ws,EI),e(EI,$fo),e(ws,kfo),e(k,Sfo),e(k,As),e(As,ple),e(ple,Rfo),e(As,Pfo),e(As,CI),e(CI,Bfo),e(As,Ifo),e(As,wI),e(wI,Nfo),e(As,qfo),e(k,jfo),e(k,mh),e(mh,_le),e(_le,Dfo),e(mh,Gfo),e(mh,AI),e(AI,Ofo),e(mh,Vfo),e(k,Xfo),e(k,Ls),e(Ls,ule),e(ule,zfo),e(Ls,Qfo),e(Ls,LI),e(LI,Wfo),e(Ls,Hfo),e(Ls,yI),e(yI,Ufo),e(Ls,Jfo),e(k,Yfo),e(k,gh),e(gh,ble),e(ble,Kfo),e(gh,Zfo),e(gh,xI),e(xI,emo),e(gh,omo),e(k,rmo),e(k,hh),e(hh,vle),e(vle,tmo),e(hh,amo),e(hh,$I),e($I,nmo),e(hh,smo),e(k,lmo),e(k,ph),e(ph,Fle),e(Fle,imo),e(ph,dmo),e(ph,kI),e(kI,cmo),e(ph,fmo),e(k,mmo),e(k,_h),e(_h,Tle),e(Tle,gmo),e(_h,hmo),e(_h,SI),e(SI,pmo),e(_h,_mo),e(k,umo),e(k,ys),e(ys,Mle),e(Mle,bmo),e(ys,vmo),e(ys,RI),e(RI,Fmo),e(ys,Tmo),e(ys,PI),e(PI,Mmo),e(ys,Emo),e(k,Cmo),e(k,uh),e(uh,Ele),e(Ele,wmo),e(uh,Amo),e(uh,BI),e(BI,Lmo),e(uh,ymo),e(k,xmo),e(k,xs),e(xs,Cle),e(Cle,$mo),e(xs,kmo),e(xs,II),e(II,Smo),e(xs,Rmo),e(xs,NI),e(NI,Pmo),e(xs,Bmo),e(k,Imo),e(k,$s),e($s,wle),e(wle,Nmo),e($s,qmo),e($s,qI),e(qI,jmo),e($s,Dmo),e($s,jI),e(jI,Gmo),e($s,Omo),e(k,Vmo),e(k,ks),e(ks,Ale),e(Ale,Xmo),e(ks,zmo),e(ks,DI),e(DI,Qmo),e(ks,Wmo),e(ks,GI),e(GI,Hmo),e(ks,Umo),e(k,Jmo),e(k,Ss),e(Ss,Lle),e(Lle,Ymo),e(Ss,Kmo),e(Ss,OI),e(OI,Zmo),e(Ss,ego),e(Ss,VI),e(VI,ogo),e(Ss,rgo),e(k,tgo),e(k,Rs),e(Rs,yle),e(yle,ago),e(Rs,ngo),e(Rs,XI),e(XI,sgo),e(Rs,lgo),e(Rs,zI),e(zI,igo),e(Rs,dgo),e(k,cgo),e(k,Ps),e(Ps,xle),e(xle,fgo),e(Ps,mgo),e(Ps,QI),e(QI,ggo),e(Ps,hgo),e(Ps,WI),e(WI,pgo),e(Ps,_go),e(k,ugo),e(k,bh),e(bh,$le),e($le,bgo),e(bh,vgo),e(bh,HI),e(HI,Fgo),e(bh,Tgo),e(k,Mgo),e(k,vh),e(vh,kle),e(kle,Ego),e(vh,Cgo),e(vh,UI),e(UI,wgo),e(vh,Ago),e(k,Lgo),e(k,Bs),e(Bs,Sle),e(Sle,ygo),e(Bs,xgo),e(Bs,JI),e(JI,$go),e(Bs,kgo),e(Bs,YI),e(YI,Sgo),e(Bs,Rgo),e(k,Pgo),e(k,Is),e(Is,Rle),e(Rle,Bgo),e(Is,Igo),e(Is,KI),e(KI,Ngo),e(Is,qgo),e(Is,ZI),e(ZI,jgo),e(Is,Dgo),e(k,Ggo),e(k,Ns),e(Ns,Ple),e(Ple,Ogo),e(Ns,Vgo),e(Ns,eN),e(eN,Xgo),e(Ns,zgo),e(Ns,oN),e(oN,Qgo),e(Ns,Wgo),e(k,Hgo),e(k,Fh),e(Fh,Ble),e(Ble,Ugo),e(Fh,Jgo),e(Fh,rN),e(rN,Ygo),e(Fh,Kgo),e(k,Zgo),e(k,Th),e(Th,Ile),e(Ile,eho),e(Th,oho),e(Th,tN),e(tN,rho),e(Th,tho),e(k,aho),e(k,Mh),e(Mh,Nle),e(Nle,nho),e(Mh,sho),e(Mh,aN),e(aN,lho),e(Mh,iho),e(k,dho),e(k,qs),e(qs,qle),e(qle,cho),e(qs,fho),e(qs,nN),e(nN,mho),e(qs,gho),e(qs,sN),e(sN,hho),e(qs,pho),e(k,_ho),e(k,js),e(js,jle),e(jle,uho),e(js,bho),e(js,lN),e(lN,vho),e(js,Fho),e(js,iN),e(iN,Tho),e(js,Mho),e(k,Eho),e(k,Eh),e(Eh,Dle),e(Dle,Cho),e(Eh,who),e(Eh,dN),e(dN,Aho),e(Eh,Lho),e(k,yho),e(k,Ch),e(Ch,Gle),e(Gle,xho),e(Ch,$ho),e(Ch,cN),e(cN,kho),e(Ch,Sho),e(k,Rho),e(k,wh),e(wh,Ole),e(Ole,Pho),e(wh,Bho),e(wh,fN),e(fN,Iho),e(wh,Nho),e(k,qho),e(k,Ds),e(Ds,Vle),e(Vle,jho),e(Ds,Dho),e(Ds,mN),e(mN,Gho),e(Ds,Oho),e(Ds,gN),e(gN,Vho),e(Ds,Xho),e(k,zho),e(k,Ah),e(Ah,Xle),e(Xle,Qho),e(Ah,Who),e(Ah,hN),e(hN,Hho),e(Ah,Uho),e(k,Jho),e(k,Lh),e(Lh,zle),e(zle,Yho),e(Lh,Kho),e(Lh,pN),e(pN,Zho),e(Lh,epo),e(k,opo),e(k,Gs),e(Gs,Qle),e(Qle,rpo),e(Gs,tpo),e(Gs,_N),e(_N,apo),e(Gs,npo),e(Gs,uN),e(uN,spo),e(Gs,lpo),e(k,ipo),e(k,Os),e(Os,Wle),e(Wle,dpo),e(Os,cpo),e(Os,bN),e(bN,fpo),e(Os,mpo),e(Os,vN),e(vN,gpo),e(Os,hpo),e(k,ppo),e(k,Vs),e(Vs,Hle),e(Hle,_po),e(Vs,upo),e(Vs,FN),e(FN,bpo),e(Vs,vpo),e(Vs,TN),e(TN,Fpo),e(Vs,Tpo),e(k,Mpo),e(k,Xs),e(Xs,Ule),e(Ule,Epo),e(Xs,Cpo),e(Xs,MN),e(MN,wpo),e(Xs,Apo),e(Xs,EN),e(EN,Lpo),e(Xs,ypo),e(Lr,xpo),M(yh,Lr,null),e(Ao,$po),e(Ao,xh),M(ZL,xh,null),e(xh,kpo),e(xh,Jle),e(Jle,Spo),b(f,DOe,u),b(f,Bi,u),e(Bi,$h),e($h,Yle),M(ey,Yle,null),e(Bi,Rpo),e(Bi,Kle),e(Kle,Ppo),b(f,GOe,u),b(f,Lo,u),M(oy,Lo,null),e(Lo,Bpo),e(Lo,ry),e(ry,Ipo),e(ry,CN),e(CN,Npo),e(ry,qpo),e(Lo,jpo),e(Lo,ty),e(ty,Dpo),e(ty,Zle),e(Zle,Gpo),e(ty,Opo),e(Lo,Vpo),e(Lo,He),M(ay,He,null),e(He,Xpo),e(He,eie),e(eie,zpo),e(He,Qpo),e(He,Ra),e(Ra,Wpo),e(Ra,oie),e(oie,Hpo),e(Ra,Upo),e(Ra,rie),e(rie,Jpo),e(Ra,Ypo),e(Ra,tie),e(tie,Kpo),e(Ra,Zpo),e(He,e_o),e(He,Y),e(Y,kh),e(kh,aie),e(aie,o_o),e(kh,r_o),e(kh,wN),e(wN,t_o),e(kh,a_o),e(Y,n_o),e(Y,Sh),e(Sh,nie),e(nie,s_o),e(Sh,l_o),e(Sh,AN),e(AN,i_o),e(Sh,d_o),e(Y,c_o),e(Y,Rh),e(Rh,sie),e(sie,f_o),e(Rh,m_o),e(Rh,LN),e(LN,g_o),e(Rh,h_o),e(Y,p_o),e(Y,Ph),e(Ph,lie),e(lie,__o),e(Ph,u_o),e(Ph,yN),e(yN,b_o),e(Ph,v_o),e(Y,F_o),e(Y,Bh),e(Bh,iie),e(iie,T_o),e(Bh,M_o),e(Bh,xN),e(xN,E_o),e(Bh,C_o),e(Y,w_o),e(Y,Ih),e(Ih,die),e(die,A_o),e(Ih,L_o),e(Ih,$N),e($N,y_o),e(Ih,x_o),e(Y,$_o),e(Y,Nh),e(Nh,cie),e(cie,k_o),e(Nh,S_o),e(Nh,kN),e(kN,R_o),e(Nh,P_o),e(Y,B_o),e(Y,qh),e(qh,fie),e(fie,I_o),e(qh,N_o),e(qh,SN),e(SN,q_o),e(qh,j_o),e(Y,D_o),e(Y,jh),e(jh,mie),e(mie,G_o),e(jh,O_o),e(jh,RN),e(RN,V_o),e(jh,X_o),e(Y,z_o),e(Y,Dh),e(Dh,gie),e(gie,Q_o),e(Dh,W_o),e(Dh,PN),e(PN,H_o),e(Dh,U_o),e(Y,J_o),e(Y,Gh),e(Gh,hie),e(hie,Y_o),e(Gh,K_o),e(Gh,BN),e(BN,Z_o),e(Gh,euo),e(Y,ouo),e(Y,Oh),e(Oh,pie),e(pie,ruo),e(Oh,tuo),e(Oh,IN),e(IN,auo),e(Oh,nuo),e(Y,suo),e(Y,Vh),e(Vh,_ie),e(_ie,luo),e(Vh,iuo),e(Vh,NN),e(NN,duo),e(Vh,cuo),e(Y,fuo),e(Y,Xh),e(Xh,uie),e(uie,muo),e(Xh,guo),e(Xh,qN),e(qN,huo),e(Xh,puo),e(Y,_uo),e(Y,zh),e(zh,bie),e(bie,uuo),e(zh,buo),e(zh,jN),e(jN,vuo),e(zh,Fuo),e(Y,Tuo),e(Y,Qh),e(Qh,vie),e(vie,Muo),e(Qh,Euo),e(Qh,DN),e(DN,Cuo),e(Qh,wuo),e(Y,Auo),e(Y,Wh),e(Wh,Fie),e(Fie,Luo),e(Wh,yuo),e(Wh,GN),e(GN,xuo),e(Wh,$uo),e(Y,kuo),e(Y,Hh),e(Hh,Tie),e(Tie,Suo),e(Hh,Ruo),e(Hh,ON),e(ON,Puo),e(Hh,Buo),e(Y,Iuo),e(Y,Uh),e(Uh,Mie),e(Mie,Nuo),e(Uh,quo),e(Uh,VN),e(VN,juo),e(Uh,Duo),e(Y,Guo),e(Y,Jh),e(Jh,Eie),e(Eie,Ouo),e(Jh,Vuo),e(Jh,XN),e(XN,Xuo),e(Jh,zuo),e(Y,Quo),e(Y,Yh),e(Yh,Cie),e(Cie,Wuo),e(Yh,Huo),e(Yh,zN),e(zN,Uuo),e(Yh,Juo),e(Y,Yuo),e(Y,Kh),e(Kh,wie),e(wie,Kuo),e(Kh,Zuo),e(Kh,QN),e(QN,e5o),e(Kh,o5o),e(Y,r5o),e(Y,Zh),e(Zh,Aie),e(Aie,t5o),e(Zh,a5o),e(Zh,WN),e(WN,n5o),e(Zh,s5o),e(Y,l5o),e(Y,ep),e(ep,Lie),e(Lie,i5o),e(ep,d5o),e(ep,HN),e(HN,c5o),e(ep,f5o),e(Y,m5o),e(Y,op),e(op,yie),e(yie,g5o),e(op,h5o),e(op,UN),e(UN,p5o),e(op,_5o),e(Y,u5o),e(Y,rp),e(rp,xie),e(xie,b5o),e(rp,v5o),e(rp,JN),e(JN,F5o),e(rp,T5o),e(Y,M5o),e(Y,tp),e(tp,$ie),e($ie,E5o),e(tp,C5o),e(tp,YN),e(YN,w5o),e(tp,A5o),e(Y,L5o),e(Y,ap),e(ap,kie),e(kie,y5o),e(ap,x5o),e(ap,KN),e(KN,$5o),e(ap,k5o),e(Y,S5o),e(Y,np),e(np,Sie),e(Sie,R5o),e(np,P5o),e(np,ZN),e(ZN,B5o),e(np,I5o),e(Y,N5o),e(Y,sp),e(sp,Rie),e(Rie,q5o),e(sp,j5o),e(sp,eq),e(eq,D5o),e(sp,G5o),e(Y,O5o),e(Y,lp),e(lp,Pie),e(Pie,V5o),e(lp,X5o),e(lp,oq),e(oq,z5o),e(lp,Q5o),e(Y,W5o),e(Y,ip),e(ip,Bie),e(Bie,H5o),e(ip,U5o),e(ip,rq),e(rq,J5o),e(ip,Y5o),e(Y,K5o),e(Y,dp),e(dp,Iie),e(Iie,Z5o),e(dp,e1o),e(dp,tq),e(tq,o1o),e(dp,r1o),e(He,t1o),M(cp,He,null),e(He,a1o),M(fp,He,null),e(Lo,n1o),e(Lo,mp),M(ny,mp,null),e(mp,s1o),e(mp,Nie),e(Nie,l1o),b(f,OOe,u),b(f,Ii,u),e(Ii,gp),e(gp,qie),M(sy,qie,null),e(Ii,i1o),e(Ii,jie),e(jie,d1o),b(f,VOe,u),b(f,yo,u),M(ly,yo,null),e(yo,c1o),e(yo,iy),e(iy,f1o),e(iy,aq),e(aq,m1o),e(iy,g1o),e(yo,h1o),e(yo,dy),e(dy,p1o),e(dy,Die),e(Die,_1o),e(dy,u1o),e(yo,b1o),e(yo,Ue),M(cy,Ue,null),e(Ue,v1o),e(Ue,Gie),e(Gie,F1o),e(Ue,T1o),e(Ue,Ni),e(Ni,M1o),e(Ni,Oie),e(Oie,E1o),e(Ni,C1o),e(Ni,Vie),e(Vie,w1o),e(Ni,A1o),e(Ue,L1o),e(Ue,he),e(he,hp),e(hp,Xie),e(Xie,y1o),e(hp,x1o),e(hp,nq),e(nq,$1o),e(hp,k1o),e(he,S1o),e(he,pp),e(pp,zie),e(zie,R1o),e(pp,P1o),e(pp,Qie),e(Qie,B1o),e(pp,I1o),e(he,N1o),e(he,_p),e(_p,Wie),e(Wie,q1o),e(_p,j1o),e(_p,sq),e(sq,D1o),e(_p,G1o),e(he,O1o),e(he,up),e(up,Hie),e(Hie,V1o),e(up,X1o),e(up,lq),e(lq,z1o),e(up,Q1o),e(he,W1o),e(he,bp),e(bp,Uie),e(Uie,H1o),e(bp,U1o),e(bp,iq),e(iq,J1o),e(bp,Y1o),e(he,K1o),e(he,vp),e(vp,Jie),e(Jie,Z1o),e(vp,e2o),e(vp,dq),e(dq,o2o),e(vp,r2o),e(he,t2o),e(he,Fp),e(Fp,Yie),e(Yie,a2o),e(Fp,n2o),e(Fp,cq),e(cq,s2o),e(Fp,l2o),e(he,i2o),e(he,Tp),e(Tp,Kie),e(Kie,d2o),e(Tp,c2o),e(Tp,fq),e(fq,f2o),e(Tp,m2o),e(he,g2o),e(he,Mp),e(Mp,Zie),e(Zie,h2o),e(Mp,p2o),e(Mp,mq),e(mq,_2o),e(Mp,u2o),e(he,b2o),e(he,Ep),e(Ep,ede),e(ede,v2o),e(Ep,F2o),e(Ep,gq),e(gq,T2o),e(Ep,M2o),e(he,E2o),e(he,Cp),e(Cp,ode),e(ode,C2o),e(Cp,w2o),e(Cp,hq),e(hq,A2o),e(Cp,L2o),e(he,y2o),e(he,wp),e(wp,rde),e(rde,x2o),e(wp,$2o),e(wp,pq),e(pq,k2o),e(wp,S2o),e(he,R2o),e(he,Ap),e(Ap,tde),e(tde,P2o),e(Ap,B2o),e(Ap,_q),e(_q,I2o),e(Ap,N2o),e(he,q2o),e(he,Lp),e(Lp,ade),e(ade,j2o),e(Lp,D2o),e(Lp,uq),e(uq,G2o),e(Lp,O2o),e(he,V2o),e(he,yp),e(yp,nde),e(nde,X2o),e(yp,z2o),e(yp,bq),e(bq,Q2o),e(yp,W2o),e(he,H2o),e(he,xp),e(xp,sde),e(sde,U2o),e(xp,J2o),e(xp,vq),e(vq,Y2o),e(xp,K2o),e(he,Z2o),e(he,$p),e($p,lde),e(lde,e4o),e($p,o4o),e($p,Fq),e(Fq,r4o),e($p,t4o),e(he,a4o),e(he,kp),e(kp,ide),e(ide,n4o),e(kp,s4o),e(kp,Tq),e(Tq,l4o),e(kp,i4o),e(Ue,d4o),M(Sp,Ue,null),e(Ue,c4o),M(Rp,Ue,null),e(yo,f4o),e(yo,Pp),M(fy,Pp,null),e(Pp,m4o),e(Pp,dde),e(dde,g4o),b(f,XOe,u),b(f,qi,u),e(qi,Bp),e(Bp,cde),M(my,cde,null),e(qi,h4o),e(qi,fde),e(fde,p4o),b(f,zOe,u),b(f,xo,u),M(gy,xo,null),e(xo,_4o),e(xo,ji),e(ji,u4o),e(ji,Mq),e(Mq,b4o),e(ji,v4o),e(ji,Eq),e(Eq,F4o),e(ji,T4o),e(xo,M4o),e(xo,hy),e(hy,E4o),e(hy,mde),e(mde,C4o),e(hy,w4o),e(xo,A4o),e(xo,st),M(py,st,null),e(st,L4o),e(st,gde),e(gde,y4o),e(st,x4o),e(st,Di),e(Di,$4o),e(Di,hde),e(hde,k4o),e(Di,S4o),e(Di,Cq),e(Cq,R4o),e(Di,P4o),e(st,B4o),M(Ip,st,null),e(xo,I4o),e(xo,Je),M(_y,Je,null),e(Je,N4o),e(Je,pde),e(pde,q4o),e(Je,j4o),e(Je,Pa),e(Pa,D4o),e(Pa,_de),e(_de,G4o),e(Pa,O4o),e(Pa,ude),e(ude,V4o),e(Pa,X4o),e(Pa,bde),e(bde,z4o),e(Pa,Q4o),e(Je,W4o),e(Je,y),e(y,Np),e(Np,vde),e(vde,H4o),e(Np,U4o),e(Np,wq),e(wq,J4o),e(Np,Y4o),e(y,K4o),e(y,qp),e(qp,Fde),e(Fde,Z4o),e(qp,ebo),e(qp,Aq),e(Aq,obo),e(qp,rbo),e(y,tbo),e(y,jp),e(jp,Tde),e(Tde,abo),e(jp,nbo),e(jp,Lq),e(Lq,sbo),e(jp,lbo),e(y,ibo),e(y,Dp),e(Dp,Mde),e(Mde,dbo),e(Dp,cbo),e(Dp,yq),e(yq,fbo),e(Dp,mbo),e(y,gbo),e(y,Gp),e(Gp,Ede),e(Ede,hbo),e(Gp,pbo),e(Gp,xq),e(xq,_bo),e(Gp,ubo),e(y,bbo),e(y,Op),e(Op,Cde),e(Cde,vbo),e(Op,Fbo),e(Op,$q),e($q,Tbo),e(Op,Mbo),e(y,Ebo),e(y,Vp),e(Vp,wde),e(wde,Cbo),e(Vp,wbo),e(Vp,kq),e(kq,Abo),e(Vp,Lbo),e(y,ybo),e(y,Xp),e(Xp,Ade),e(Ade,xbo),e(Xp,$bo),e(Xp,Sq),e(Sq,kbo),e(Xp,Sbo),e(y,Rbo),e(y,zp),e(zp,Lde),e(Lde,Pbo),e(zp,Bbo),e(zp,Rq),e(Rq,Ibo),e(zp,Nbo),e(y,qbo),e(y,Qp),e(Qp,yde),e(yde,jbo),e(Qp,Dbo),e(Qp,Pq),e(Pq,Gbo),e(Qp,Obo),e(y,Vbo),e(y,Wp),e(Wp,xde),e(xde,Xbo),e(Wp,zbo),e(Wp,Bq),e(Bq,Qbo),e(Wp,Wbo),e(y,Hbo),e(y,Hp),e(Hp,$de),e($de,Ubo),e(Hp,Jbo),e(Hp,Iq),e(Iq,Ybo),e(Hp,Kbo),e(y,Zbo),e(y,Up),e(Up,kde),e(kde,evo),e(Up,ovo),e(Up,Nq),e(Nq,rvo),e(Up,tvo),e(y,avo),e(y,Jp),e(Jp,Sde),e(Sde,nvo),e(Jp,svo),e(Jp,qq),e(qq,lvo),e(Jp,ivo),e(y,dvo),e(y,Yp),e(Yp,Rde),e(Rde,cvo),e(Yp,fvo),e(Yp,jq),e(jq,mvo),e(Yp,gvo),e(y,hvo),e(y,Kp),e(Kp,Pde),e(Pde,pvo),e(Kp,_vo),e(Kp,Dq),e(Dq,uvo),e(Kp,bvo),e(y,vvo),e(y,Zp),e(Zp,Bde),e(Bde,Fvo),e(Zp,Tvo),e(Zp,Gq),e(Gq,Mvo),e(Zp,Evo),e(y,Cvo),e(y,e_),e(e_,Ide),e(Ide,wvo),e(e_,Avo),e(e_,Oq),e(Oq,Lvo),e(e_,yvo),e(y,xvo),e(y,o_),e(o_,Nde),e(Nde,$vo),e(o_,kvo),e(o_,Vq),e(Vq,Svo),e(o_,Rvo),e(y,Pvo),e(y,r_),e(r_,qde),e(qde,Bvo),e(r_,Ivo),e(r_,Xq),e(Xq,Nvo),e(r_,qvo),e(y,jvo),e(y,t_),e(t_,jde),e(jde,Dvo),e(t_,Gvo),e(t_,zq),e(zq,Ovo),e(t_,Vvo),e(y,Xvo),e(y,a_),e(a_,Dde),e(Dde,zvo),e(a_,Qvo),e(a_,Qq),e(Qq,Wvo),e(a_,Hvo),e(y,Uvo),e(y,n_),e(n_,Gde),e(Gde,Jvo),e(n_,Yvo),e(n_,Wq),e(Wq,Kvo),e(n_,Zvo),e(y,eFo),e(y,s_),e(s_,Ode),e(Ode,oFo),e(s_,rFo),e(s_,Hq),e(Hq,tFo),e(s_,aFo),e(y,nFo),e(y,l_),e(l_,Vde),e(Vde,sFo),e(l_,lFo),e(l_,Uq),e(Uq,iFo),e(l_,dFo),e(y,cFo),e(y,i_),e(i_,Xde),e(Xde,fFo),e(i_,mFo),e(i_,Jq),e(Jq,gFo),e(i_,hFo),e(y,pFo),e(y,d_),e(d_,zde),e(zde,_Fo),e(d_,uFo),e(d_,Yq),e(Yq,bFo),e(d_,vFo),e(y,FFo),e(y,c_),e(c_,Qde),e(Qde,TFo),e(c_,MFo),e(c_,Kq),e(Kq,EFo),e(c_,CFo),e(y,wFo),e(y,f_),e(f_,Wde),e(Wde,AFo),e(f_,LFo),e(f_,Zq),e(Zq,yFo),e(f_,xFo),e(y,$Fo),e(y,m_),e(m_,Hde),e(Hde,kFo),e(m_,SFo),e(m_,ej),e(ej,RFo),e(m_,PFo),e(y,BFo),e(y,g_),e(g_,Ude),e(Ude,IFo),e(g_,NFo),e(g_,oj),e(oj,qFo),e(g_,jFo),e(y,DFo),e(y,h_),e(h_,Jde),e(Jde,GFo),e(h_,OFo),e(h_,rj),e(rj,VFo),e(h_,XFo),e(y,zFo),e(y,p_),e(p_,Yde),e(Yde,QFo),e(p_,WFo),e(p_,tj),e(tj,HFo),e(p_,UFo),e(y,JFo),e(y,__),e(__,Kde),e(Kde,YFo),e(__,KFo),e(__,aj),e(aj,ZFo),e(__,eTo),e(y,oTo),e(y,zs),e(zs,Zde),e(Zde,rTo),e(zs,tTo),e(zs,nj),e(nj,aTo),e(zs,nTo),e(zs,sj),e(sj,sTo),e(zs,lTo),e(y,iTo),e(y,u_),e(u_,ece),e(ece,dTo),e(u_,cTo),e(u_,lj),e(lj,fTo),e(u_,mTo),e(y,gTo),e(y,b_),e(b_,oce),e(oce,hTo),e(b_,pTo),e(b_,ij),e(ij,_To),e(b_,uTo),e(y,bTo),e(y,v_),e(v_,rce),e(rce,vTo),e(v_,FTo),e(v_,dj),e(dj,TTo),e(v_,MTo),e(y,ETo),e(y,F_),e(F_,tce),e(tce,CTo),e(F_,wTo),e(F_,cj),e(cj,ATo),e(F_,LTo),e(y,yTo),e(y,T_),e(T_,ace),e(ace,xTo),e(T_,$To),e(T_,fj),e(fj,kTo),e(T_,STo),e(y,RTo),e(y,M_),e(M_,nce),e(nce,PTo),e(M_,BTo),e(M_,mj),e(mj,ITo),e(M_,NTo),e(y,qTo),e(y,E_),e(E_,sce),e(sce,jTo),e(E_,DTo),e(E_,gj),e(gj,GTo),e(E_,OTo),e(y,VTo),e(y,C_),e(C_,lce),e(lce,XTo),e(C_,zTo),e(C_,hj),e(hj,QTo),e(C_,WTo),e(y,HTo),e(y,w_),e(w_,ice),e(ice,UTo),e(w_,JTo),e(w_,pj),e(pj,YTo),e(w_,KTo),e(y,ZTo),e(y,A_),e(A_,dce),e(dce,e7o),e(A_,o7o),e(A_,_j),e(_j,r7o),e(A_,t7o),e(y,a7o),e(y,L_),e(L_,cce),e(cce,n7o),e(L_,s7o),e(L_,uj),e(uj,l7o),e(L_,i7o),e(y,d7o),e(y,y_),e(y_,fce),e(fce,c7o),e(y_,f7o),e(y_,bj),e(bj,m7o),e(y_,g7o),e(y,h7o),e(y,x_),e(x_,mce),e(mce,p7o),e(x_,_7o),e(x_,vj),e(vj,u7o),e(x_,b7o),e(y,v7o),e(y,$_),e($_,gce),e(gce,F7o),e($_,T7o),e($_,Fj),e(Fj,M7o),e($_,E7o),e(y,C7o),e(y,k_),e(k_,hce),e(hce,w7o),e(k_,A7o),e(k_,Tj),e(Tj,L7o),e(k_,y7o),e(y,x7o),e(y,S_),e(S_,pce),e(pce,$7o),e(S_,k7o),e(S_,Mj),e(Mj,S7o),e(S_,R7o),e(y,P7o),e(y,R_),e(R_,_ce),e(_ce,B7o),e(R_,I7o),e(R_,Ej),e(Ej,N7o),e(R_,q7o),e(y,j7o),e(y,P_),e(P_,uce),e(uce,D7o),e(P_,G7o),e(P_,Cj),e(Cj,O7o),e(P_,V7o),e(y,X7o),e(y,B_),e(B_,bce),e(bce,z7o),e(B_,Q7o),e(B_,wj),e(wj,W7o),e(B_,H7o),e(y,U7o),e(y,I_),e(I_,vce),e(vce,J7o),e(I_,Y7o),e(I_,Aj),e(Aj,K7o),e(I_,Z7o),e(y,eMo),e(y,N_),e(N_,Fce),e(Fce,oMo),e(N_,rMo),e(N_,Lj),e(Lj,tMo),e(N_,aMo),e(y,nMo),e(y,q_),e(q_,Tce),e(Tce,sMo),e(q_,lMo),e(q_,yj),e(yj,iMo),e(q_,dMo),e(y,cMo),e(y,j_),e(j_,Mce),e(Mce,fMo),e(j_,mMo),e(j_,xj),e(xj,gMo),e(j_,hMo),e(y,pMo),e(y,D_),e(D_,Ece),e(Ece,_Mo),e(D_,uMo),e(D_,$j),e($j,bMo),e(D_,vMo),e(y,FMo),e(y,G_),e(G_,Cce),e(Cce,TMo),e(G_,MMo),e(G_,kj),e(kj,EMo),e(G_,CMo),e(y,wMo),e(y,O_),e(O_,wce),e(wce,AMo),e(O_,LMo),e(O_,Sj),e(Sj,yMo),e(O_,xMo),e(y,$Mo),e(y,V_),e(V_,Ace),e(Ace,kMo),e(V_,SMo),e(V_,Rj),e(Rj,RMo),e(V_,PMo),e(y,BMo),e(y,X_),e(X_,Lce),e(Lce,IMo),e(X_,NMo),e(X_,Pj),e(Pj,qMo),e(X_,jMo),e(y,DMo),e(y,z_),e(z_,yce),e(yce,GMo),e(z_,OMo),e(z_,Bj),e(Bj,VMo),e(z_,XMo),e(y,zMo),e(y,Q_),e(Q_,xce),e(xce,QMo),e(Q_,WMo),e(Q_,Ij),e(Ij,HMo),e(Q_,UMo),e(y,JMo),e(y,W_),e(W_,$ce),e($ce,YMo),e(W_,KMo),e(W_,Nj),e(Nj,ZMo),e(W_,eEo),e(y,oEo),e(y,H_),e(H_,kce),e(kce,rEo),e(H_,tEo),e(H_,qj),e(qj,aEo),e(H_,nEo),e(y,sEo),e(y,U_),e(U_,Sce),e(Sce,lEo),e(U_,iEo),e(U_,jj),e(jj,dEo),e(U_,cEo),e(y,fEo),e(y,J_),e(J_,Rce),e(Rce,mEo),e(J_,gEo),e(J_,Dj),e(Dj,hEo),e(J_,pEo),e(y,_Eo),e(y,Y_),e(Y_,Pce),e(Pce,uEo),e(Y_,bEo),e(Y_,Gj),e(Gj,vEo),e(Y_,FEo),e(y,TEo),e(y,K_),e(K_,Bce),e(Bce,MEo),e(K_,EEo),e(K_,Oj),e(Oj,CEo),e(K_,wEo),e(y,AEo),e(y,Z_),e(Z_,Ice),e(Ice,LEo),e(Z_,yEo),e(Z_,Vj),e(Vj,xEo),e(Z_,$Eo),e(y,kEo),e(y,eu),e(eu,Nce),e(Nce,SEo),e(eu,REo),e(eu,Xj),e(Xj,PEo),e(eu,BEo),e(y,IEo),e(y,ou),e(ou,qce),e(qce,NEo),e(ou,qEo),e(ou,zj),e(zj,jEo),e(ou,DEo),e(y,GEo),e(y,ru),e(ru,jce),e(jce,OEo),e(ru,VEo),e(ru,Qj),e(Qj,XEo),e(ru,zEo),e(y,QEo),e(y,tu),e(tu,Dce),e(Dce,WEo),e(tu,HEo),e(tu,Wj),e(Wj,UEo),e(tu,JEo),e(y,YEo),e(y,au),e(au,Gce),e(Gce,KEo),e(au,ZEo),e(au,Hj),e(Hj,eCo),e(au,oCo),e(y,rCo),e(y,nu),e(nu,Oce),e(Oce,tCo),e(nu,aCo),e(nu,Uj),e(Uj,nCo),e(nu,sCo),e(y,lCo),e(y,su),e(su,Vce),e(Vce,iCo),e(su,dCo),e(su,Jj),e(Jj,cCo),e(su,fCo),e(y,mCo),e(y,lu),e(lu,Xce),e(Xce,gCo),e(lu,hCo),e(lu,Yj),e(Yj,pCo),e(lu,_Co),e(y,uCo),e(y,iu),e(iu,zce),e(zce,bCo),e(iu,vCo),e(iu,Kj),e(Kj,FCo),e(iu,TCo),e(y,MCo),e(y,du),e(du,Qce),e(Qce,ECo),e(du,CCo),e(du,Zj),e(Zj,wCo),e(du,ACo),e(y,LCo),e(y,cu),e(cu,Wce),e(Wce,yCo),e(cu,xCo),e(cu,eD),e(eD,$Co),e(cu,kCo),e(y,SCo),e(y,fu),e(fu,Hce),e(Hce,RCo),e(fu,PCo),e(fu,oD),e(oD,BCo),e(fu,ICo),e(y,NCo),e(y,mu),e(mu,Uce),e(Uce,qCo),e(mu,jCo),e(mu,rD),e(rD,DCo),e(mu,GCo),e(y,OCo),e(y,gu),e(gu,Jce),e(Jce,VCo),e(gu,XCo),e(gu,tD),e(tD,zCo),e(gu,QCo),e(y,WCo),e(y,hu),e(hu,Yce),e(Yce,HCo),e(hu,UCo),e(hu,aD),e(aD,JCo),e(hu,YCo),e(y,KCo),e(y,pu),e(pu,Kce),e(Kce,ZCo),e(pu,e3o),e(pu,nD),e(nD,o3o),e(pu,r3o),e(y,t3o),e(y,_u),e(_u,Zce),e(Zce,a3o),e(_u,n3o),e(_u,sD),e(sD,s3o),e(_u,l3o),e(y,i3o),e(y,uu),e(uu,efe),e(efe,d3o),e(uu,c3o),e(uu,lD),e(lD,f3o),e(uu,m3o),e(y,g3o),e(y,bu),e(bu,ofe),e(ofe,h3o),e(bu,p3o),e(bu,iD),e(iD,_3o),e(bu,u3o),e(y,b3o),e(y,vu),e(vu,rfe),e(rfe,v3o),e(vu,F3o),e(vu,dD),e(dD,T3o),e(vu,M3o),e(y,E3o),e(y,Fu),e(Fu,tfe),e(tfe,C3o),e(Fu,w3o),e(Fu,cD),e(cD,A3o),e(Fu,L3o),e(y,y3o),e(y,Tu),e(Tu,afe),e(afe,x3o),e(Tu,$3o),e(Tu,fD),e(fD,k3o),e(Tu,S3o),e(y,R3o),e(y,Mu),e(Mu,nfe),e(nfe,P3o),e(Mu,B3o),e(Mu,mD),e(mD,I3o),e(Mu,N3o),e(y,q3o),e(y,Eu),e(Eu,sfe),e(sfe,j3o),e(Eu,D3o),e(Eu,gD),e(gD,G3o),e(Eu,O3o),e(y,V3o),e(y,Cu),e(Cu,lfe),e(lfe,X3o),e(Cu,z3o),e(Cu,hD),e(hD,Q3o),e(Cu,W3o),e(y,H3o),e(y,wu),e(wu,ife),e(ife,U3o),e(wu,J3o),e(wu,pD),e(pD,Y3o),e(wu,K3o),e(y,Z3o),e(y,Au),e(Au,dfe),e(dfe,e0o),e(Au,o0o),e(Au,_D),e(_D,r0o),e(Au,t0o),e(y,a0o),e(y,Lu),e(Lu,cfe),e(cfe,n0o),e(Lu,s0o),e(Lu,uD),e(uD,l0o),e(Lu,i0o),e(y,d0o),e(y,yu),e(yu,ffe),e(ffe,c0o),e(yu,f0o),e(yu,bD),e(bD,m0o),e(yu,g0o),e(y,h0o),e(y,xu),e(xu,mfe),e(mfe,p0o),e(xu,_0o),e(xu,vD),e(vD,u0o),e(xu,b0o),e(y,v0o),e(y,$u),e($u,gfe),e(gfe,F0o),e($u,T0o),e($u,FD),e(FD,M0o),e($u,E0o),e(y,C0o),e(y,ku),e(ku,hfe),e(hfe,w0o),e(ku,A0o),e(ku,TD),e(TD,L0o),e(ku,y0o),e(y,x0o),e(y,Su),e(Su,pfe),e(pfe,$0o),e(Su,k0o),e(Su,MD),e(MD,S0o),e(Su,R0o),e(y,P0o),e(y,Ru),e(Ru,_fe),e(_fe,B0o),e(Ru,I0o),e(Ru,ED),e(ED,N0o),e(Ru,q0o),e(y,j0o),e(y,Pu),e(Pu,ufe),e(ufe,D0o),e(Pu,G0o),e(Pu,CD),e(CD,O0o),e(Pu,V0o),e(y,X0o),e(y,Bu),e(Bu,bfe),e(bfe,z0o),e(Bu,Q0o),e(Bu,wD),e(wD,W0o),e(Bu,H0o),e(y,U0o),e(y,Iu),e(Iu,vfe),e(vfe,J0o),e(Iu,Y0o),e(Iu,AD),e(AD,K0o),e(Iu,Z0o),e(Je,ewo),e(Je,Nu),e(Nu,owo),e(Nu,Ffe),e(Ffe,rwo),e(Nu,two),e(Nu,Tfe),e(Tfe,awo),e(Je,nwo),M(qu,Je,null),b(f,QOe,u),b(f,Gi,u),e(Gi,ju),e(ju,Mfe),M(uy,Mfe,null),e(Gi,swo),e(Gi,Efe),e(Efe,lwo),b(f,WOe,u),b(f,$o,u),M(by,$o,null),e($o,iwo),e($o,Oi),e(Oi,dwo),e(Oi,LD),e(LD,cwo),e(Oi,fwo),e(Oi,yD),e(yD,mwo),e(Oi,gwo),e($o,hwo),e($o,vy),e(vy,pwo),e(vy,Cfe),e(Cfe,_wo),e(vy,uwo),e($o,bwo),e($o,lt),M(Fy,lt,null),e(lt,vwo),e(lt,wfe),e(wfe,Fwo),e(lt,Two),e(lt,Vi),e(Vi,Mwo),e(Vi,Afe),e(Afe,Ewo),e(Vi,Cwo),e(Vi,xD),e(xD,wwo),e(Vi,Awo),e(lt,Lwo),M(Du,lt,null),e($o,ywo),e($o,Ye),M(Ty,Ye,null),e(Ye,xwo),e(Ye,Lfe),e(Lfe,$wo),e(Ye,kwo),e(Ye,Ba),e(Ba,Swo),e(Ba,yfe),e(yfe,Rwo),e(Ba,Pwo),e(Ba,xfe),e(xfe,Bwo),e(Ba,Iwo),e(Ba,$fe),e($fe,Nwo),e(Ba,qwo),e(Ye,jwo),e(Ye,G),e(G,Gu),e(Gu,kfe),e(kfe,Dwo),e(Gu,Gwo),e(Gu,$D),e($D,Owo),e(Gu,Vwo),e(G,Xwo),e(G,Ou),e(Ou,Sfe),e(Sfe,zwo),e(Ou,Qwo),e(Ou,kD),e(kD,Wwo),e(Ou,Hwo),e(G,Uwo),e(G,Vu),e(Vu,Rfe),e(Rfe,Jwo),e(Vu,Ywo),e(Vu,SD),e(SD,Kwo),e(Vu,Zwo),e(G,eAo),e(G,Xu),e(Xu,Pfe),e(Pfe,oAo),e(Xu,rAo),e(Xu,RD),e(RD,tAo),e(Xu,aAo),e(G,nAo),e(G,zu),e(zu,Bfe),e(Bfe,sAo),e(zu,lAo),e(zu,PD),e(PD,iAo),e(zu,dAo),e(G,cAo),e(G,Qu),e(Qu,Ife),e(Ife,fAo),e(Qu,mAo),e(Qu,BD),e(BD,gAo),e(Qu,hAo),e(G,pAo),e(G,Wu),e(Wu,Nfe),e(Nfe,_Ao),e(Wu,uAo),e(Wu,ID),e(ID,bAo),e(Wu,vAo),e(G,FAo),e(G,Hu),e(Hu,qfe),e(qfe,TAo),e(Hu,MAo),e(Hu,ND),e(ND,EAo),e(Hu,CAo),e(G,wAo),e(G,Uu),e(Uu,jfe),e(jfe,AAo),e(Uu,LAo),e(Uu,qD),e(qD,yAo),e(Uu,xAo),e(G,$Ao),e(G,Ju),e(Ju,Dfe),e(Dfe,kAo),e(Ju,SAo),e(Ju,jD),e(jD,RAo),e(Ju,PAo),e(G,BAo),e(G,Yu),e(Yu,Gfe),e(Gfe,IAo),e(Yu,NAo),e(Yu,DD),e(DD,qAo),e(Yu,jAo),e(G,DAo),e(G,Ku),e(Ku,Ofe),e(Ofe,GAo),e(Ku,OAo),e(Ku,GD),e(GD,VAo),e(Ku,XAo),e(G,zAo),e(G,Zu),e(Zu,Vfe),e(Vfe,QAo),e(Zu,WAo),e(Zu,OD),e(OD,HAo),e(Zu,UAo),e(G,JAo),e(G,e5),e(e5,Xfe),e(Xfe,YAo),e(e5,KAo),e(e5,VD),e(VD,ZAo),e(e5,e6o),e(G,o6o),e(G,o5),e(o5,zfe),e(zfe,r6o),e(o5,t6o),e(o5,XD),e(XD,a6o),e(o5,n6o),e(G,s6o),e(G,r5),e(r5,Qfe),e(Qfe,l6o),e(r5,i6o),e(r5,zD),e(zD,d6o),e(r5,c6o),e(G,f6o),e(G,t5),e(t5,Wfe),e(Wfe,m6o),e(t5,g6o),e(t5,QD),e(QD,h6o),e(t5,p6o),e(G,_6o),e(G,a5),e(a5,Hfe),e(Hfe,u6o),e(a5,b6o),e(a5,WD),e(WD,v6o),e(a5,F6o),e(G,T6o),e(G,n5),e(n5,Ufe),e(Ufe,M6o),e(n5,E6o),e(n5,HD),e(HD,C6o),e(n5,w6o),e(G,A6o),e(G,s5),e(s5,Jfe),e(Jfe,L6o),e(s5,y6o),e(s5,UD),e(UD,x6o),e(s5,$6o),e(G,k6o),e(G,l5),e(l5,Yfe),e(Yfe,S6o),e(l5,R6o),e(l5,JD),e(JD,P6o),e(l5,B6o),e(G,I6o),e(G,i5),e(i5,Kfe),e(Kfe,N6o),e(i5,q6o),e(i5,YD),e(YD,j6o),e(i5,D6o),e(G,G6o),e(G,d5),e(d5,Zfe),e(Zfe,O6o),e(d5,V6o),e(d5,KD),e(KD,X6o),e(d5,z6o),e(G,Q6o),e(G,c5),e(c5,eme),e(eme,W6o),e(c5,H6o),e(c5,ZD),e(ZD,U6o),e(c5,J6o),e(G,Y6o),e(G,f5),e(f5,ome),e(ome,K6o),e(f5,Z6o),e(f5,eG),e(eG,eLo),e(f5,oLo),e(G,rLo),e(G,m5),e(m5,rme),e(rme,tLo),e(m5,aLo),e(m5,oG),e(oG,nLo),e(m5,sLo),e(G,lLo),e(G,g5),e(g5,tme),e(tme,iLo),e(g5,dLo),e(g5,rG),e(rG,cLo),e(g5,fLo),e(G,mLo),e(G,h5),e(h5,ame),e(ame,gLo),e(h5,hLo),e(h5,tG),e(tG,pLo),e(h5,_Lo),e(G,uLo),e(G,p5),e(p5,nme),e(nme,bLo),e(p5,vLo),e(p5,aG),e(aG,FLo),e(p5,TLo),e(G,MLo),e(G,_5),e(_5,sme),e(sme,ELo),e(_5,CLo),e(_5,nG),e(nG,wLo),e(_5,ALo),e(G,LLo),e(G,u5),e(u5,lme),e(lme,yLo),e(u5,xLo),e(u5,sG),e(sG,$Lo),e(u5,kLo),e(G,SLo),e(G,b5),e(b5,ime),e(ime,RLo),e(b5,PLo),e(b5,lG),e(lG,BLo),e(b5,ILo),e(G,NLo),e(G,v5),e(v5,dme),e(dme,qLo),e(v5,jLo),e(v5,iG),e(iG,DLo),e(v5,GLo),e(G,OLo),e(G,F5),e(F5,cme),e(cme,VLo),e(F5,XLo),e(F5,dG),e(dG,zLo),e(F5,QLo),e(G,WLo),e(G,T5),e(T5,fme),e(fme,HLo),e(T5,ULo),e(T5,cG),e(cG,JLo),e(T5,YLo),e(G,KLo),e(G,M5),e(M5,mme),e(mme,ZLo),e(M5,eyo),e(M5,fG),e(fG,oyo),e(M5,ryo),e(G,tyo),e(G,E5),e(E5,gme),e(gme,ayo),e(E5,nyo),e(E5,mG),e(mG,syo),e(E5,lyo),e(G,iyo),e(G,C5),e(C5,hme),e(hme,dyo),e(C5,cyo),e(C5,gG),e(gG,fyo),e(C5,myo),e(G,gyo),e(G,w5),e(w5,pme),e(pme,hyo),e(w5,pyo),e(w5,hG),e(hG,_yo),e(w5,uyo),e(G,byo),e(G,A5),e(A5,_me),e(_me,vyo),e(A5,Fyo),e(A5,pG),e(pG,Tyo),e(A5,Myo),e(G,Eyo),e(G,L5),e(L5,ume),e(ume,Cyo),e(L5,wyo),e(L5,_G),e(_G,Ayo),e(L5,Lyo),e(G,yyo),e(G,y5),e(y5,bme),e(bme,xyo),e(y5,$yo),e(y5,uG),e(uG,kyo),e(y5,Syo),e(G,Ryo),e(G,x5),e(x5,vme),e(vme,Pyo),e(x5,Byo),e(x5,bG),e(bG,Iyo),e(x5,Nyo),e(G,qyo),e(G,$5),e($5,Fme),e(Fme,jyo),e($5,Dyo),e($5,vG),e(vG,Gyo),e($5,Oyo),e(Ye,Vyo),e(Ye,k5),e(k5,Xyo),e(k5,Tme),e(Tme,zyo),e(k5,Qyo),e(k5,Mme),e(Mme,Wyo),e(Ye,Hyo),M(S5,Ye,null),b(f,HOe,u),b(f,Xi,u),e(Xi,R5),e(R5,Eme),M(My,Eme,null),e(Xi,Uyo),e(Xi,Cme),e(Cme,Jyo),b(f,UOe,u),b(f,ko,u),M(Ey,ko,null),e(ko,Yyo),e(ko,zi),e(zi,Kyo),e(zi,FG),e(FG,Zyo),e(zi,e8o),e(zi,TG),e(TG,o8o),e(zi,r8o),e(ko,t8o),e(ko,Cy),e(Cy,a8o),e(Cy,wme),e(wme,n8o),e(Cy,s8o),e(ko,l8o),e(ko,it),M(wy,it,null),e(it,i8o),e(it,Ame),e(Ame,d8o),e(it,c8o),e(it,Qi),e(Qi,f8o),e(Qi,Lme),e(Lme,m8o),e(Qi,g8o),e(Qi,MG),e(MG,h8o),e(Qi,p8o),e(it,_8o),M(P5,it,null),e(ko,u8o),e(ko,Ke),M(Ay,Ke,null),e(Ke,b8o),e(Ke,yme),e(yme,v8o),e(Ke,F8o),e(Ke,Ia),e(Ia,T8o),e(Ia,xme),e(xme,M8o),e(Ia,E8o),e(Ia,$me),e($me,C8o),e(Ia,w8o),e(Ia,kme),e(kme,A8o),e(Ia,L8o),e(Ke,y8o),e(Ke,z),e(z,B5),e(B5,Sme),e(Sme,x8o),e(B5,$8o),e(B5,EG),e(EG,k8o),e(B5,S8o),e(z,R8o),e(z,I5),e(I5,Rme),e(Rme,P8o),e(I5,B8o),e(I5,CG),e(CG,I8o),e(I5,N8o),e(z,q8o),e(z,N5),e(N5,Pme),e(Pme,j8o),e(N5,D8o),e(N5,wG),e(wG,G8o),e(N5,O8o),e(z,V8o),e(z,q5),e(q5,Bme),e(Bme,X8o),e(q5,z8o),e(q5,AG),e(AG,Q8o),e(q5,W8o),e(z,H8o),e(z,j5),e(j5,Ime),e(Ime,U8o),e(j5,J8o),e(j5,LG),e(LG,Y8o),e(j5,K8o),e(z,Z8o),e(z,D5),e(D5,Nme),e(Nme,e9o),e(D5,o9o),e(D5,yG),e(yG,r9o),e(D5,t9o),e(z,a9o),e(z,G5),e(G5,qme),e(qme,n9o),e(G5,s9o),e(G5,xG),e(xG,l9o),e(G5,i9o),e(z,d9o),e(z,O5),e(O5,jme),e(jme,c9o),e(O5,f9o),e(O5,$G),e($G,m9o),e(O5,g9o),e(z,h9o),e(z,V5),e(V5,Dme),e(Dme,p9o),e(V5,_9o),e(V5,kG),e(kG,u9o),e(V5,b9o),e(z,v9o),e(z,X5),e(X5,Gme),e(Gme,F9o),e(X5,T9o),e(X5,SG),e(SG,M9o),e(X5,E9o),e(z,C9o),e(z,z5),e(z5,Ome),e(Ome,w9o),e(z5,A9o),e(z5,RG),e(RG,L9o),e(z5,y9o),e(z,x9o),e(z,Q5),e(Q5,Vme),e(Vme,$9o),e(Q5,k9o),e(Q5,PG),e(PG,S9o),e(Q5,R9o),e(z,P9o),e(z,W5),e(W5,Xme),e(Xme,B9o),e(W5,I9o),e(W5,BG),e(BG,N9o),e(W5,q9o),e(z,j9o),e(z,H5),e(H5,zme),e(zme,D9o),e(H5,G9o),e(H5,IG),e(IG,O9o),e(H5,V9o),e(z,X9o),e(z,U5),e(U5,Qme),e(Qme,z9o),e(U5,Q9o),e(U5,NG),e(NG,W9o),e(U5,H9o),e(z,U9o),e(z,J5),e(J5,Wme),e(Wme,J9o),e(J5,Y9o),e(J5,qG),e(qG,K9o),e(J5,Z9o),e(z,exo),e(z,Y5),e(Y5,Hme),e(Hme,oxo),e(Y5,rxo),e(Y5,jG),e(jG,txo),e(Y5,axo),e(z,nxo),e(z,K5),e(K5,Ume),e(Ume,sxo),e(K5,lxo),e(K5,DG),e(DG,ixo),e(K5,dxo),e(z,cxo),e(z,Z5),e(Z5,Jme),e(Jme,fxo),e(Z5,mxo),e(Z5,GG),e(GG,gxo),e(Z5,hxo),e(z,pxo),e(z,e1),e(e1,Yme),e(Yme,_xo),e(e1,uxo),e(e1,OG),e(OG,bxo),e(e1,vxo),e(z,Fxo),e(z,o1),e(o1,Kme),e(Kme,Txo),e(o1,Mxo),e(o1,VG),e(VG,Exo),e(o1,Cxo),e(z,wxo),e(z,r1),e(r1,Zme),e(Zme,Axo),e(r1,Lxo),e(r1,XG),e(XG,yxo),e(r1,xxo),e(z,$xo),e(z,t1),e(t1,ege),e(ege,kxo),e(t1,Sxo),e(t1,zG),e(zG,Rxo),e(t1,Pxo),e(z,Bxo),e(z,a1),e(a1,oge),e(oge,Ixo),e(a1,Nxo),e(a1,QG),e(QG,qxo),e(a1,jxo),e(z,Dxo),e(z,n1),e(n1,rge),e(rge,Gxo),e(n1,Oxo),e(n1,WG),e(WG,Vxo),e(n1,Xxo),e(z,zxo),e(z,s1),e(s1,tge),e(tge,Qxo),e(s1,Wxo),e(s1,HG),e(HG,Hxo),e(s1,Uxo),e(z,Jxo),e(z,l1),e(l1,age),e(age,Yxo),e(l1,Kxo),e(l1,UG),e(UG,Zxo),e(l1,e$o),e(z,o$o),e(z,i1),e(i1,nge),e(nge,r$o),e(i1,t$o),e(i1,JG),e(JG,a$o),e(i1,n$o),e(z,s$o),e(z,d1),e(d1,sge),e(sge,l$o),e(d1,i$o),e(d1,YG),e(YG,d$o),e(d1,c$o),e(z,f$o),e(z,c1),e(c1,lge),e(lge,m$o),e(c1,g$o),e(c1,KG),e(KG,h$o),e(c1,p$o),e(z,_$o),e(z,f1),e(f1,ige),e(ige,u$o),e(f1,b$o),e(f1,ZG),e(ZG,v$o),e(f1,F$o),e(z,T$o),e(z,m1),e(m1,dge),e(dge,M$o),e(m1,E$o),e(m1,eO),e(eO,C$o),e(m1,w$o),e(z,A$o),e(z,g1),e(g1,cge),e(cge,L$o),e(g1,y$o),e(g1,oO),e(oO,x$o),e(g1,$$o),e(z,k$o),e(z,h1),e(h1,fge),e(fge,S$o),e(h1,R$o),e(h1,rO),e(rO,P$o),e(h1,B$o),e(z,I$o),e(z,p1),e(p1,mge),e(mge,N$o),e(p1,q$o),e(p1,tO),e(tO,j$o),e(p1,D$o),e(z,G$o),e(z,_1),e(_1,gge),e(gge,O$o),e(_1,V$o),e(_1,aO),e(aO,X$o),e(_1,z$o),e(z,Q$o),e(z,u1),e(u1,hge),e(hge,W$o),e(u1,H$o),e(u1,nO),e(nO,U$o),e(u1,J$o),e(z,Y$o),e(z,b1),e(b1,pge),e(pge,K$o),e(b1,Z$o),e(b1,sO),e(sO,eko),e(b1,oko),e(z,rko),e(z,v1),e(v1,_ge),e(_ge,tko),e(v1,ako),e(v1,lO),e(lO,nko),e(v1,sko),e(Ke,lko),e(Ke,F1),e(F1,iko),e(F1,uge),e(uge,dko),e(F1,cko),e(F1,bge),e(bge,fko),e(Ke,mko),M(T1,Ke,null),b(f,JOe,u),b(f,Wi,u),e(Wi,M1),e(M1,vge),M(Ly,vge,null),e(Wi,gko),e(Wi,Fge),e(Fge,hko),b(f,YOe,u),b(f,So,u),M(yy,So,null),e(So,pko),e(So,Hi),e(Hi,_ko),e(Hi,iO),e(iO,uko),e(Hi,bko),e(Hi,dO),e(dO,vko),e(Hi,Fko),e(So,Tko),e(So,xy),e(xy,Mko),e(xy,Tge),e(Tge,Eko),e(xy,Cko),e(So,wko),e(So,dt),M($y,dt,null),e(dt,Ako),e(dt,Mge),e(Mge,Lko),e(dt,yko),e(dt,Ui),e(Ui,xko),e(Ui,Ege),e(Ege,$ko),e(Ui,kko),e(Ui,cO),e(cO,Sko),e(Ui,Rko),e(dt,Pko),M(E1,dt,null),e(So,Bko),e(So,Ze),M(ky,Ze,null),e(Ze,Iko),e(Ze,Cge),e(Cge,Nko),e(Ze,qko),e(Ze,Na),e(Na,jko),e(Na,wge),e(wge,Dko),e(Na,Gko),e(Na,Age),e(Age,Oko),e(Na,Vko),e(Na,Lge),e(Lge,Xko),e(Na,zko),e(Ze,Qko),e(Ze,W),e(W,C1),e(C1,yge),e(yge,Wko),e(C1,Hko),e(C1,fO),e(fO,Uko),e(C1,Jko),e(W,Yko),e(W,w1),e(w1,xge),e(xge,Kko),e(w1,Zko),e(w1,mO),e(mO,eSo),e(w1,oSo),e(W,rSo),e(W,A1),e(A1,$ge),e($ge,tSo),e(A1,aSo),e(A1,gO),e(gO,nSo),e(A1,sSo),e(W,lSo),e(W,L1),e(L1,kge),e(kge,iSo),e(L1,dSo),e(L1,hO),e(hO,cSo),e(L1,fSo),e(W,mSo),e(W,y1),e(y1,Sge),e(Sge,gSo),e(y1,hSo),e(y1,pO),e(pO,pSo),e(y1,_So),e(W,uSo),e(W,x1),e(x1,Rge),e(Rge,bSo),e(x1,vSo),e(x1,_O),e(_O,FSo),e(x1,TSo),e(W,MSo),e(W,$1),e($1,Pge),e(Pge,ESo),e($1,CSo),e($1,uO),e(uO,wSo),e($1,ASo),e(W,LSo),e(W,k1),e(k1,Bge),e(Bge,ySo),e(k1,xSo),e(k1,bO),e(bO,$So),e(k1,kSo),e(W,SSo),e(W,S1),e(S1,Ige),e(Ige,RSo),e(S1,PSo),e(S1,vO),e(vO,BSo),e(S1,ISo),e(W,NSo),e(W,R1),e(R1,Nge),e(Nge,qSo),e(R1,jSo),e(R1,FO),e(FO,DSo),e(R1,GSo),e(W,OSo),e(W,P1),e(P1,qge),e(qge,VSo),e(P1,XSo),e(P1,TO),e(TO,zSo),e(P1,QSo),e(W,WSo),e(W,B1),e(B1,jge),e(jge,HSo),e(B1,USo),e(B1,MO),e(MO,JSo),e(B1,YSo),e(W,KSo),e(W,I1),e(I1,Dge),e(Dge,ZSo),e(I1,eRo),e(I1,EO),e(EO,oRo),e(I1,rRo),e(W,tRo),e(W,N1),e(N1,Gge),e(Gge,aRo),e(N1,nRo),e(N1,CO),e(CO,sRo),e(N1,lRo),e(W,iRo),e(W,q1),e(q1,Oge),e(Oge,dRo),e(q1,cRo),e(q1,wO),e(wO,fRo),e(q1,mRo),e(W,gRo),e(W,j1),e(j1,Vge),e(Vge,hRo),e(j1,pRo),e(j1,AO),e(AO,_Ro),e(j1,uRo),e(W,bRo),e(W,D1),e(D1,Xge),e(Xge,vRo),e(D1,FRo),e(D1,LO),e(LO,TRo),e(D1,MRo),e(W,ERo),e(W,G1),e(G1,zge),e(zge,CRo),e(G1,wRo),e(G1,yO),e(yO,ARo),e(G1,LRo),e(W,yRo),e(W,O1),e(O1,Qge),e(Qge,xRo),e(O1,$Ro),e(O1,xO),e(xO,kRo),e(O1,SRo),e(W,RRo),e(W,V1),e(V1,Wge),e(Wge,PRo),e(V1,BRo),e(V1,$O),e($O,IRo),e(V1,NRo),e(W,qRo),e(W,X1),e(X1,Hge),e(Hge,jRo),e(X1,DRo),e(X1,kO),e(kO,GRo),e(X1,ORo),e(W,VRo),e(W,z1),e(z1,Uge),e(Uge,XRo),e(z1,zRo),e(z1,SO),e(SO,QRo),e(z1,WRo),e(W,HRo),e(W,Q1),e(Q1,Jge),e(Jge,URo),e(Q1,JRo),e(Q1,RO),e(RO,YRo),e(Q1,KRo),e(W,ZRo),e(W,W1),e(W1,Yge),e(Yge,ePo),e(W1,oPo),e(W1,PO),e(PO,rPo),e(W1,tPo),e(W,aPo),e(W,H1),e(H1,Kge),e(Kge,nPo),e(H1,sPo),e(H1,BO),e(BO,lPo),e(H1,iPo),e(W,dPo),e(W,U1),e(U1,Zge),e(Zge,cPo),e(U1,fPo),e(U1,IO),e(IO,mPo),e(U1,gPo),e(W,hPo),e(W,J1),e(J1,ehe),e(ehe,pPo),e(J1,_Po),e(J1,NO),e(NO,uPo),e(J1,bPo),e(W,vPo),e(W,Y1),e(Y1,ohe),e(ohe,FPo),e(Y1,TPo),e(Y1,qO),e(qO,MPo),e(Y1,EPo),e(W,CPo),e(W,K1),e(K1,rhe),e(rhe,wPo),e(K1,APo),e(K1,jO),e(jO,LPo),e(K1,yPo),e(W,xPo),e(W,Z1),e(Z1,the),e(the,$Po),e(Z1,kPo),e(Z1,DO),e(DO,SPo),e(Z1,RPo),e(W,PPo),e(W,e2),e(e2,ahe),e(ahe,BPo),e(e2,IPo),e(e2,GO),e(GO,NPo),e(e2,qPo),e(W,jPo),e(W,o2),e(o2,nhe),e(nhe,DPo),e(o2,GPo),e(o2,OO),e(OO,OPo),e(o2,VPo),e(W,XPo),e(W,r2),e(r2,she),e(she,zPo),e(r2,QPo),e(r2,lhe),e(lhe,WPo),e(r2,HPo),e(W,UPo),e(W,t2),e(t2,ihe),e(ihe,JPo),e(t2,YPo),e(t2,VO),e(VO,KPo),e(t2,ZPo),e(W,eBo),e(W,a2),e(a2,dhe),e(dhe,oBo),e(a2,rBo),e(a2,XO),e(XO,tBo),e(a2,aBo),e(W,nBo),e(W,n2),e(n2,che),e(che,sBo),e(n2,lBo),e(n2,zO),e(zO,iBo),e(n2,dBo),e(W,cBo),e(W,s2),e(s2,fhe),e(fhe,fBo),e(s2,mBo),e(s2,QO),e(QO,gBo),e(s2,hBo),e(Ze,pBo),e(Ze,l2),e(l2,_Bo),e(l2,mhe),e(mhe,uBo),e(l2,bBo),e(l2,ghe),e(ghe,vBo),e(Ze,FBo),M(i2,Ze,null),b(f,KOe,u),b(f,Ji,u),e(Ji,d2),e(d2,hhe),M(Sy,hhe,null),e(Ji,TBo),e(Ji,phe),e(phe,MBo),b(f,ZOe,u),b(f,Ro,u),M(Ry,Ro,null),e(Ro,EBo),e(Ro,Yi),e(Yi,CBo),e(Yi,WO),e(WO,wBo),e(Yi,ABo),e(Yi,HO),e(HO,LBo),e(Yi,yBo),e(Ro,xBo),e(Ro,Py),e(Py,$Bo),e(Py,_he),e(_he,kBo),e(Py,SBo),e(Ro,RBo),e(Ro,ct),M(By,ct,null),e(ct,PBo),e(ct,uhe),e(uhe,BBo),e(ct,IBo),e(ct,Ki),e(Ki,NBo),e(Ki,bhe),e(bhe,qBo),e(Ki,jBo),e(Ki,UO),e(UO,DBo),e(Ki,GBo),e(ct,OBo),M(c2,ct,null),e(Ro,VBo),e(Ro,eo),M(Iy,eo,null),e(eo,XBo),e(eo,vhe),e(vhe,zBo),e(eo,QBo),e(eo,qa),e(qa,WBo),e(qa,Fhe),e(Fhe,HBo),e(qa,UBo),e(qa,The),e(The,JBo),e(qa,YBo),e(qa,Mhe),e(Mhe,KBo),e(qa,ZBo),e(eo,eIo),e(eo,pe),e(pe,f2),e(f2,Ehe),e(Ehe,oIo),e(f2,rIo),e(f2,JO),e(JO,tIo),e(f2,aIo),e(pe,nIo),e(pe,m2),e(m2,Che),e(Che,sIo),e(m2,lIo),e(m2,YO),e(YO,iIo),e(m2,dIo),e(pe,cIo),e(pe,g2),e(g2,whe),e(whe,fIo),e(g2,mIo),e(g2,KO),e(KO,gIo),e(g2,hIo),e(pe,pIo),e(pe,h2),e(h2,Ahe),e(Ahe,_Io),e(h2,uIo),e(h2,ZO),e(ZO,bIo),e(h2,vIo),e(pe,FIo),e(pe,p2),e(p2,Lhe),e(Lhe,TIo),e(p2,MIo),e(p2,eV),e(eV,EIo),e(p2,CIo),e(pe,wIo),e(pe,_2),e(_2,yhe),e(yhe,AIo),e(_2,LIo),e(_2,oV),e(oV,yIo),e(_2,xIo),e(pe,$Io),e(pe,u2),e(u2,xhe),e(xhe,kIo),e(u2,SIo),e(u2,rV),e(rV,RIo),e(u2,PIo),e(pe,BIo),e(pe,b2),e(b2,$he),e($he,IIo),e(b2,NIo),e(b2,tV),e(tV,qIo),e(b2,jIo),e(pe,DIo),e(pe,v2),e(v2,khe),e(khe,GIo),e(v2,OIo),e(v2,aV),e(aV,VIo),e(v2,XIo),e(pe,zIo),e(pe,F2),e(F2,She),e(She,QIo),e(F2,WIo),e(F2,nV),e(nV,HIo),e(F2,UIo),e(pe,JIo),e(pe,T2),e(T2,Rhe),e(Rhe,YIo),e(T2,KIo),e(T2,sV),e(sV,ZIo),e(T2,eNo),e(pe,oNo),e(pe,M2),e(M2,Phe),e(Phe,rNo),e(M2,tNo),e(M2,lV),e(lV,aNo),e(M2,nNo),e(pe,sNo),e(pe,E2),e(E2,Bhe),e(Bhe,lNo),e(E2,iNo),e(E2,iV),e(iV,dNo),e(E2,cNo),e(pe,fNo),e(pe,C2),e(C2,Ihe),e(Ihe,mNo),e(C2,gNo),e(C2,dV),e(dV,hNo),e(C2,pNo),e(pe,_No),e(pe,w2),e(w2,Nhe),e(Nhe,uNo),e(w2,bNo),e(w2,cV),e(cV,vNo),e(w2,FNo),e(pe,TNo),e(pe,A2),e(A2,qhe),e(qhe,MNo),e(A2,ENo),e(A2,fV),e(fV,CNo),e(A2,wNo),e(pe,ANo),e(pe,L2),e(L2,jhe),e(jhe,LNo),e(L2,yNo),e(L2,mV),e(mV,xNo),e(L2,$No),e(eo,kNo),e(eo,y2),e(y2,SNo),e(y2,Dhe),e(Dhe,RNo),e(y2,PNo),e(y2,Ghe),e(Ghe,BNo),e(eo,INo),M(x2,eo,null),b(f,eVe,u),b(f,Zi,u),e(Zi,$2),e($2,Ohe),M(Ny,Ohe,null),e(Zi,NNo),e(Zi,Vhe),e(Vhe,qNo),b(f,oVe,u),b(f,Po,u),M(qy,Po,null),e(Po,jNo),e(Po,ed),e(ed,DNo),e(ed,gV),e(gV,GNo),e(ed,ONo),e(ed,hV),e(hV,VNo),e(ed,XNo),e(Po,zNo),e(Po,jy),e(jy,QNo),e(jy,Xhe),e(Xhe,WNo),e(jy,HNo),e(Po,UNo),e(Po,ft),M(Dy,ft,null),e(ft,JNo),e(ft,zhe),e(zhe,YNo),e(ft,KNo),e(ft,od),e(od,ZNo),e(od,Qhe),e(Qhe,eqo),e(od,oqo),e(od,pV),e(pV,rqo),e(od,tqo),e(ft,aqo),M(k2,ft,null),e(Po,nqo),e(Po,oo),M(Gy,oo,null),e(oo,sqo),e(oo,Whe),e(Whe,lqo),e(oo,iqo),e(oo,ja),e(ja,dqo),e(ja,Hhe),e(Hhe,cqo),e(ja,fqo),e(ja,Uhe),e(Uhe,mqo),e(ja,gqo),e(ja,Jhe),e(Jhe,hqo),e(ja,pqo),e(oo,_qo),e(oo,N),e(N,S2),e(S2,Yhe),e(Yhe,uqo),e(S2,bqo),e(S2,_V),e(_V,vqo),e(S2,Fqo),e(N,Tqo),e(N,R2),e(R2,Khe),e(Khe,Mqo),e(R2,Eqo),e(R2,uV),e(uV,Cqo),e(R2,wqo),e(N,Aqo),e(N,P2),e(P2,Zhe),e(Zhe,Lqo),e(P2,yqo),e(P2,bV),e(bV,xqo),e(P2,$qo),e(N,kqo),e(N,B2),e(B2,epe),e(epe,Sqo),e(B2,Rqo),e(B2,vV),e(vV,Pqo),e(B2,Bqo),e(N,Iqo),e(N,I2),e(I2,ope),e(ope,Nqo),e(I2,qqo),e(I2,FV),e(FV,jqo),e(I2,Dqo),e(N,Gqo),e(N,N2),e(N2,rpe),e(rpe,Oqo),e(N2,Vqo),e(N2,TV),e(TV,Xqo),e(N2,zqo),e(N,Qqo),e(N,q2),e(q2,tpe),e(tpe,Wqo),e(q2,Hqo),e(q2,MV),e(MV,Uqo),e(q2,Jqo),e(N,Yqo),e(N,j2),e(j2,ape),e(ape,Kqo),e(j2,Zqo),e(j2,EV),e(EV,ejo),e(j2,ojo),e(N,rjo),e(N,D2),e(D2,npe),e(npe,tjo),e(D2,ajo),e(D2,CV),e(CV,njo),e(D2,sjo),e(N,ljo),e(N,G2),e(G2,spe),e(spe,ijo),e(G2,djo),e(G2,wV),e(wV,cjo),e(G2,fjo),e(N,mjo),e(N,O2),e(O2,lpe),e(lpe,gjo),e(O2,hjo),e(O2,AV),e(AV,pjo),e(O2,_jo),e(N,ujo),e(N,V2),e(V2,ipe),e(ipe,bjo),e(V2,vjo),e(V2,LV),e(LV,Fjo),e(V2,Tjo),e(N,Mjo),e(N,X2),e(X2,dpe),e(dpe,Ejo),e(X2,Cjo),e(X2,yV),e(yV,wjo),e(X2,Ajo),e(N,Ljo),e(N,z2),e(z2,cpe),e(cpe,yjo),e(z2,xjo),e(z2,xV),e(xV,$jo),e(z2,kjo),e(N,Sjo),e(N,Q2),e(Q2,fpe),e(fpe,Rjo),e(Q2,Pjo),e(Q2,$V),e($V,Bjo),e(Q2,Ijo),e(N,Njo),e(N,W2),e(W2,mpe),e(mpe,qjo),e(W2,jjo),e(W2,kV),e(kV,Djo),e(W2,Gjo),e(N,Ojo),e(N,H2),e(H2,gpe),e(gpe,Vjo),e(H2,Xjo),e(H2,SV),e(SV,zjo),e(H2,Qjo),e(N,Wjo),e(N,U2),e(U2,hpe),e(hpe,Hjo),e(U2,Ujo),e(U2,RV),e(RV,Jjo),e(U2,Yjo),e(N,Kjo),e(N,J2),e(J2,ppe),e(ppe,Zjo),e(J2,eDo),e(J2,PV),e(PV,oDo),e(J2,rDo),e(N,tDo),e(N,Y2),e(Y2,_pe),e(_pe,aDo),e(Y2,nDo),e(Y2,BV),e(BV,sDo),e(Y2,lDo),e(N,iDo),e(N,K2),e(K2,upe),e(upe,dDo),e(K2,cDo),e(K2,IV),e(IV,fDo),e(K2,mDo),e(N,gDo),e(N,Z2),e(Z2,bpe),e(bpe,hDo),e(Z2,pDo),e(Z2,NV),e(NV,_Do),e(Z2,uDo),e(N,bDo),e(N,e4),e(e4,vpe),e(vpe,vDo),e(e4,FDo),e(e4,qV),e(qV,TDo),e(e4,MDo),e(N,EDo),e(N,o4),e(o4,Fpe),e(Fpe,CDo),e(o4,wDo),e(o4,jV),e(jV,ADo),e(o4,LDo),e(N,yDo),e(N,r4),e(r4,Tpe),e(Tpe,xDo),e(r4,$Do),e(r4,DV),e(DV,kDo),e(r4,SDo),e(N,RDo),e(N,t4),e(t4,Mpe),e(Mpe,PDo),e(t4,BDo),e(t4,GV),e(GV,IDo),e(t4,NDo),e(N,qDo),e(N,a4),e(a4,Epe),e(Epe,jDo),e(a4,DDo),e(a4,OV),e(OV,GDo),e(a4,ODo),e(N,VDo),e(N,n4),e(n4,Cpe),e(Cpe,XDo),e(n4,zDo),e(n4,VV),e(VV,QDo),e(n4,WDo),e(N,HDo),e(N,s4),e(s4,wpe),e(wpe,UDo),e(s4,JDo),e(s4,XV),e(XV,YDo),e(s4,KDo),e(N,ZDo),e(N,l4),e(l4,Ape),e(Ape,eGo),e(l4,oGo),e(l4,zV),e(zV,rGo),e(l4,tGo),e(N,aGo),e(N,i4),e(i4,Lpe),e(Lpe,nGo),e(i4,sGo),e(i4,QV),e(QV,lGo),e(i4,iGo),e(N,dGo),e(N,d4),e(d4,ype),e(ype,cGo),e(d4,fGo),e(d4,WV),e(WV,mGo),e(d4,gGo),e(N,hGo),e(N,c4),e(c4,xpe),e(xpe,pGo),e(c4,_Go),e(c4,HV),e(HV,uGo),e(c4,bGo),e(N,vGo),e(N,f4),e(f4,$pe),e($pe,FGo),e(f4,TGo),e(f4,UV),e(UV,MGo),e(f4,EGo),e(N,CGo),e(N,m4),e(m4,kpe),e(kpe,wGo),e(m4,AGo),e(m4,JV),e(JV,LGo),e(m4,yGo),e(N,xGo),e(N,g4),e(g4,Spe),e(Spe,$Go),e(g4,kGo),e(g4,YV),e(YV,SGo),e(g4,RGo),e(N,PGo),e(N,h4),e(h4,Rpe),e(Rpe,BGo),e(h4,IGo),e(h4,KV),e(KV,NGo),e(h4,qGo),e(N,jGo),e(N,p4),e(p4,Ppe),e(Ppe,DGo),e(p4,GGo),e(p4,ZV),e(ZV,OGo),e(p4,VGo),e(N,XGo),e(N,_4),e(_4,Bpe),e(Bpe,zGo),e(_4,QGo),e(_4,eX),e(eX,WGo),e(_4,HGo),e(N,UGo),e(N,u4),e(u4,Ipe),e(Ipe,JGo),e(u4,YGo),e(u4,oX),e(oX,KGo),e(u4,ZGo),e(N,eOo),e(N,b4),e(b4,Npe),e(Npe,oOo),e(b4,rOo),e(b4,rX),e(rX,tOo),e(b4,aOo),e(N,nOo),e(N,v4),e(v4,qpe),e(qpe,sOo),e(v4,lOo),e(v4,tX),e(tX,iOo),e(v4,dOo),e(N,cOo),e(N,F4),e(F4,jpe),e(jpe,fOo),e(F4,mOo),e(F4,aX),e(aX,gOo),e(F4,hOo),e(N,pOo),e(N,T4),e(T4,Dpe),e(Dpe,_Oo),e(T4,uOo),e(T4,nX),e(nX,bOo),e(T4,vOo),e(N,FOo),e(N,M4),e(M4,Gpe),e(Gpe,TOo),e(M4,MOo),e(M4,sX),e(sX,EOo),e(M4,COo),e(N,wOo),e(N,E4),e(E4,Ope),e(Ope,AOo),e(E4,LOo),e(E4,lX),e(lX,yOo),e(E4,xOo),e(N,$Oo),e(N,C4),e(C4,Vpe),e(Vpe,kOo),e(C4,SOo),e(C4,iX),e(iX,ROo),e(C4,POo),e(N,BOo),e(N,w4),e(w4,Xpe),e(Xpe,IOo),e(w4,NOo),e(w4,dX),e(dX,qOo),e(w4,jOo),e(N,DOo),e(N,A4),e(A4,zpe),e(zpe,GOo),e(A4,OOo),e(A4,cX),e(cX,VOo),e(A4,XOo),e(oo,zOo),e(oo,L4),e(L4,QOo),e(L4,Qpe),e(Qpe,WOo),e(L4,HOo),e(L4,Wpe),e(Wpe,UOo),e(oo,JOo),M(y4,oo,null),b(f,rVe,u),b(f,rd,u),e(rd,x4),e(x4,Hpe),M(Oy,Hpe,null),e(rd,YOo),e(rd,Upe),e(Upe,KOo),b(f,tVe,u),b(f,Bo,u),M(Vy,Bo,null),e(Bo,ZOo),e(Bo,td),e(td,eVo),e(td,fX),e(fX,oVo),e(td,rVo),e(td,mX),e(mX,tVo),e(td,aVo),e(Bo,nVo),e(Bo,Xy),e(Xy,sVo),e(Xy,Jpe),e(Jpe,lVo),e(Xy,iVo),e(Bo,dVo),e(Bo,mt),M(zy,mt,null),e(mt,cVo),e(mt,Ype),e(Ype,fVo),e(mt,mVo),e(mt,ad),e(ad,gVo),e(ad,Kpe),e(Kpe,hVo),e(ad,pVo),e(ad,gX),e(gX,_Vo),e(ad,uVo),e(mt,bVo),M($4,mt,null),e(Bo,vVo),e(Bo,ro),M(Qy,ro,null),e(ro,FVo),e(ro,Zpe),e(Zpe,TVo),e(ro,MVo),e(ro,Da),e(Da,EVo),e(Da,e_e),e(e_e,CVo),e(Da,wVo),e(Da,o_e),e(o_e,AVo),e(Da,LVo),e(Da,r_e),e(r_e,yVo),e(Da,xVo),e(ro,$Vo),e(ro,Z),e(Z,k4),e(k4,t_e),e(t_e,kVo),e(k4,SVo),e(k4,hX),e(hX,RVo),e(k4,PVo),e(Z,BVo),e(Z,S4),e(S4,a_e),e(a_e,IVo),e(S4,NVo),e(S4,pX),e(pX,qVo),e(S4,jVo),e(Z,DVo),e(Z,R4),e(R4,n_e),e(n_e,GVo),e(R4,OVo),e(R4,_X),e(_X,VVo),e(R4,XVo),e(Z,zVo),e(Z,P4),e(P4,s_e),e(s_e,QVo),e(P4,WVo),e(P4,uX),e(uX,HVo),e(P4,UVo),e(Z,JVo),e(Z,B4),e(B4,l_e),e(l_e,YVo),e(B4,KVo),e(B4,bX),e(bX,ZVo),e(B4,eXo),e(Z,oXo),e(Z,I4),e(I4,i_e),e(i_e,rXo),e(I4,tXo),e(I4,vX),e(vX,aXo),e(I4,nXo),e(Z,sXo),e(Z,N4),e(N4,d_e),e(d_e,lXo),e(N4,iXo),e(N4,FX),e(FX,dXo),e(N4,cXo),e(Z,fXo),e(Z,q4),e(q4,c_e),e(c_e,mXo),e(q4,gXo),e(q4,TX),e(TX,hXo),e(q4,pXo),e(Z,_Xo),e(Z,j4),e(j4,f_e),e(f_e,uXo),e(j4,bXo),e(j4,MX),e(MX,vXo),e(j4,FXo),e(Z,TXo),e(Z,D4),e(D4,m_e),e(m_e,MXo),e(D4,EXo),e(D4,EX),e(EX,CXo),e(D4,wXo),e(Z,AXo),e(Z,G4),e(G4,g_e),e(g_e,LXo),e(G4,yXo),e(G4,CX),e(CX,xXo),e(G4,$Xo),e(Z,kXo),e(Z,O4),e(O4,h_e),e(h_e,SXo),e(O4,RXo),e(O4,wX),e(wX,PXo),e(O4,BXo),e(Z,IXo),e(Z,V4),e(V4,p_e),e(p_e,NXo),e(V4,qXo),e(V4,AX),e(AX,jXo),e(V4,DXo),e(Z,GXo),e(Z,X4),e(X4,__e),e(__e,OXo),e(X4,VXo),e(X4,LX),e(LX,XXo),e(X4,zXo),e(Z,QXo),e(Z,z4),e(z4,u_e),e(u_e,WXo),e(z4,HXo),e(z4,yX),e(yX,UXo),e(z4,JXo),e(Z,YXo),e(Z,Q4),e(Q4,b_e),e(b_e,KXo),e(Q4,ZXo),e(Q4,xX),e(xX,ezo),e(Q4,ozo),e(Z,rzo),e(Z,W4),e(W4,v_e),e(v_e,tzo),e(W4,azo),e(W4,$X),e($X,nzo),e(W4,szo),e(Z,lzo),e(Z,H4),e(H4,F_e),e(F_e,izo),e(H4,dzo),e(H4,kX),e(kX,czo),e(H4,fzo),e(Z,mzo),e(Z,U4),e(U4,T_e),e(T_e,gzo),e(U4,hzo),e(U4,SX),e(SX,pzo),e(U4,_zo),e(Z,uzo),e(Z,J4),e(J4,M_e),e(M_e,bzo),e(J4,vzo),e(J4,RX),e(RX,Fzo),e(J4,Tzo),e(Z,Mzo),e(Z,Y4),e(Y4,E_e),e(E_e,Ezo),e(Y4,Czo),e(Y4,PX),e(PX,wzo),e(Y4,Azo),e(Z,Lzo),e(Z,K4),e(K4,C_e),e(C_e,yzo),e(K4,xzo),e(K4,BX),e(BX,$zo),e(K4,kzo),e(Z,Szo),e(Z,Z4),e(Z4,w_e),e(w_e,Rzo),e(Z4,Pzo),e(Z4,IX),e(IX,Bzo),e(Z4,Izo),e(Z,Nzo),e(Z,eb),e(eb,A_e),e(A_e,qzo),e(eb,jzo),e(eb,NX),e(NX,Dzo),e(eb,Gzo),e(Z,Ozo),e(Z,ob),e(ob,L_e),e(L_e,Vzo),e(ob,Xzo),e(ob,qX),e(qX,zzo),e(ob,Qzo),e(Z,Wzo),e(Z,rb),e(rb,y_e),e(y_e,Hzo),e(rb,Uzo),e(rb,jX),e(jX,Jzo),e(rb,Yzo),e(Z,Kzo),e(Z,tb),e(tb,x_e),e(x_e,Zzo),e(tb,eQo),e(tb,DX),e(DX,oQo),e(tb,rQo),e(Z,tQo),e(Z,ab),e(ab,$_e),e($_e,aQo),e(ab,nQo),e(ab,GX),e(GX,sQo),e(ab,lQo),e(Z,iQo),e(Z,nb),e(nb,k_e),e(k_e,dQo),e(nb,cQo),e(nb,OX),e(OX,fQo),e(nb,mQo),e(Z,gQo),e(Z,sb),e(sb,S_e),e(S_e,hQo),e(sb,pQo),e(sb,VX),e(VX,_Qo),e(sb,uQo),e(ro,bQo),e(ro,lb),e(lb,vQo),e(lb,R_e),e(R_e,FQo),e(lb,TQo),e(lb,P_e),e(P_e,MQo),e(ro,EQo),M(ib,ro,null),b(f,aVe,u),b(f,nd,u),e(nd,db),e(db,B_e),M(Wy,B_e,null),e(nd,CQo),e(nd,I_e),e(I_e,wQo),b(f,nVe,u),b(f,Io,u),M(Hy,Io,null),e(Io,AQo),e(Io,sd),e(sd,LQo),e(sd,XX),e(XX,yQo),e(sd,xQo),e(sd,zX),e(zX,$Qo),e(sd,kQo),e(Io,SQo),e(Io,Uy),e(Uy,RQo),e(Uy,N_e),e(N_e,PQo),e(Uy,BQo),e(Io,IQo),e(Io,gt),M(Jy,gt,null),e(gt,NQo),e(gt,q_e),e(q_e,qQo),e(gt,jQo),e(gt,ld),e(ld,DQo),e(ld,j_e),e(j_e,GQo),e(ld,OQo),e(ld,QX),e(QX,VQo),e(ld,XQo),e(gt,zQo),M(cb,gt,null),e(Io,QQo),e(Io,to),M(Yy,to,null),e(to,WQo),e(to,D_e),e(D_e,HQo),e(to,UQo),e(to,Ga),e(Ga,JQo),e(Ga,G_e),e(G_e,YQo),e(Ga,KQo),e(Ga,O_e),e(O_e,ZQo),e(Ga,eWo),e(Ga,V_e),e(V_e,oWo),e(Ga,rWo),e(to,tWo),e(to,No),e(No,fb),e(fb,X_e),e(X_e,aWo),e(fb,nWo),e(fb,WX),e(WX,sWo),e(fb,lWo),e(No,iWo),e(No,mb),e(mb,z_e),e(z_e,dWo),e(mb,cWo),e(mb,HX),e(HX,fWo),e(mb,mWo),e(No,gWo),e(No,gb),e(gb,Q_e),e(Q_e,hWo),e(gb,pWo),e(gb,UX),e(UX,_Wo),e(gb,uWo),e(No,bWo),e(No,hb),e(hb,W_e),e(W_e,vWo),e(hb,FWo),e(hb,JX),e(JX,TWo),e(hb,MWo),e(No,EWo),e(No,pb),e(pb,H_e),e(H_e,CWo),e(pb,wWo),e(pb,YX),e(YX,AWo),e(pb,LWo),e(No,yWo),e(No,_b),e(_b,U_e),e(U_e,xWo),e(_b,$Wo),e(_b,KX),e(KX,kWo),e(_b,SWo),e(to,RWo),e(to,ub),e(ub,PWo),e(ub,J_e),e(J_e,BWo),e(ub,IWo),e(ub,Y_e),e(Y_e,NWo),e(to,qWo),M(bb,to,null),b(f,sVe,u),b(f,id,u),e(id,vb),e(vb,K_e),M(Ky,K_e,null),e(id,jWo),e(id,Z_e),e(Z_e,DWo),b(f,lVe,u),b(f,qo,u),M(Zy,qo,null),e(qo,GWo),e(qo,dd),e(dd,OWo),e(dd,ZX),e(ZX,VWo),e(dd,XWo),e(dd,ez),e(ez,zWo),e(dd,QWo),e(qo,WWo),e(qo,e8),e(e8,HWo),e(e8,eue),e(eue,UWo),e(e8,JWo),e(qo,YWo),e(qo,ht),M(o8,ht,null),e(ht,KWo),e(ht,oue),e(oue,ZWo),e(ht,eHo),e(ht,cd),e(cd,oHo),e(cd,rue),e(rue,rHo),e(cd,tHo),e(cd,oz),e(oz,aHo),e(cd,nHo),e(ht,sHo),M(Fb,ht,null),e(qo,lHo),e(qo,ao),M(r8,ao,null),e(ao,iHo),e(ao,tue),e(tue,dHo),e(ao,cHo),e(ao,Oa),e(Oa,fHo),e(Oa,aue),e(aue,mHo),e(Oa,gHo),e(Oa,nue),e(nue,hHo),e(Oa,pHo),e(Oa,sue),e(sue,_Ho),e(Oa,uHo),e(ao,bHo),e(ao,H),e(H,Tb),e(Tb,lue),e(lue,vHo),e(Tb,FHo),e(Tb,rz),e(rz,THo),e(Tb,MHo),e(H,EHo),e(H,Mb),e(Mb,iue),e(iue,CHo),e(Mb,wHo),e(Mb,tz),e(tz,AHo),e(Mb,LHo),e(H,yHo),e(H,Eb),e(Eb,due),e(due,xHo),e(Eb,$Ho),e(Eb,az),e(az,kHo),e(Eb,SHo),e(H,RHo),e(H,Cb),e(Cb,cue),e(cue,PHo),e(Cb,BHo),e(Cb,nz),e(nz,IHo),e(Cb,NHo),e(H,qHo),e(H,wb),e(wb,fue),e(fue,jHo),e(wb,DHo),e(wb,sz),e(sz,GHo),e(wb,OHo),e(H,VHo),e(H,Ab),e(Ab,mue),e(mue,XHo),e(Ab,zHo),e(Ab,lz),e(lz,QHo),e(Ab,WHo),e(H,HHo),e(H,Lb),e(Lb,gue),e(gue,UHo),e(Lb,JHo),e(Lb,iz),e(iz,YHo),e(Lb,KHo),e(H,ZHo),e(H,yb),e(yb,hue),e(hue,eUo),e(yb,oUo),e(yb,dz),e(dz,rUo),e(yb,tUo),e(H,aUo),e(H,xb),e(xb,pue),e(pue,nUo),e(xb,sUo),e(xb,cz),e(cz,lUo),e(xb,iUo),e(H,dUo),e(H,$b),e($b,_ue),e(_ue,cUo),e($b,fUo),e($b,fz),e(fz,mUo),e($b,gUo),e(H,hUo),e(H,kb),e(kb,uue),e(uue,pUo),e(kb,_Uo),e(kb,mz),e(mz,uUo),e(kb,bUo),e(H,vUo),e(H,Sb),e(Sb,bue),e(bue,FUo),e(Sb,TUo),e(Sb,gz),e(gz,MUo),e(Sb,EUo),e(H,CUo),e(H,Rb),e(Rb,vue),e(vue,wUo),e(Rb,AUo),e(Rb,hz),e(hz,LUo),e(Rb,yUo),e(H,xUo),e(H,Pb),e(Pb,Fue),e(Fue,$Uo),e(Pb,kUo),e(Pb,pz),e(pz,SUo),e(Pb,RUo),e(H,PUo),e(H,Bb),e(Bb,Tue),e(Tue,BUo),e(Bb,IUo),e(Bb,_z),e(_z,NUo),e(Bb,qUo),e(H,jUo),e(H,Ib),e(Ib,Mue),e(Mue,DUo),e(Ib,GUo),e(Ib,uz),e(uz,OUo),e(Ib,VUo),e(H,XUo),e(H,Nb),e(Nb,Eue),e(Eue,zUo),e(Nb,QUo),e(Nb,bz),e(bz,WUo),e(Nb,HUo),e(H,UUo),e(H,qb),e(qb,Cue),e(Cue,JUo),e(qb,YUo),e(qb,vz),e(vz,KUo),e(qb,ZUo),e(H,eJo),e(H,jb),e(jb,wue),e(wue,oJo),e(jb,rJo),e(jb,Fz),e(Fz,tJo),e(jb,aJo),e(H,nJo),e(H,Db),e(Db,Aue),e(Aue,sJo),e(Db,lJo),e(Db,Tz),e(Tz,iJo),e(Db,dJo),e(H,cJo),e(H,Gb),e(Gb,Lue),e(Lue,fJo),e(Gb,mJo),e(Gb,Mz),e(Mz,gJo),e(Gb,hJo),e(H,pJo),e(H,Ob),e(Ob,yue),e(yue,_Jo),e(Ob,uJo),e(Ob,Ez),e(Ez,bJo),e(Ob,vJo),e(H,FJo),e(H,Vb),e(Vb,xue),e(xue,TJo),e(Vb,MJo),e(Vb,Cz),e(Cz,EJo),e(Vb,CJo),e(H,wJo),e(H,Xb),e(Xb,$ue),e($ue,AJo),e(Xb,LJo),e(Xb,wz),e(wz,yJo),e(Xb,xJo),e(H,$Jo),e(H,zb),e(zb,kue),e(kue,kJo),e(zb,SJo),e(zb,Az),e(Az,RJo),e(zb,PJo),e(H,BJo),e(H,Qb),e(Qb,Sue),e(Sue,IJo),e(Qb,NJo),e(Qb,Lz),e(Lz,qJo),e(Qb,jJo),e(H,DJo),e(H,Wb),e(Wb,Rue),e(Rue,GJo),e(Wb,OJo),e(Wb,yz),e(yz,VJo),e(Wb,XJo),e(H,zJo),e(H,Hb),e(Hb,Pue),e(Pue,QJo),e(Hb,WJo),e(Hb,xz),e(xz,HJo),e(Hb,UJo),e(H,JJo),e(H,Ub),e(Ub,Bue),e(Bue,YJo),e(Ub,KJo),e(Ub,$z),e($z,ZJo),e(Ub,eYo),e(H,oYo),e(H,Jb),e(Jb,Iue),e(Iue,rYo),e(Jb,tYo),e(Jb,kz),e(kz,aYo),e(Jb,nYo),e(H,sYo),e(H,Yb),e(Yb,Nue),e(Nue,lYo),e(Yb,iYo),e(Yb,Sz),e(Sz,dYo),e(Yb,cYo),e(H,fYo),e(H,Kb),e(Kb,que),e(que,mYo),e(Kb,gYo),e(Kb,Rz),e(Rz,hYo),e(Kb,pYo),e(H,_Yo),e(H,Zb),e(Zb,jue),e(jue,uYo),e(Zb,bYo),e(Zb,Pz),e(Pz,vYo),e(Zb,FYo),e(H,TYo),e(H,ev),e(ev,Due),e(Due,MYo),e(ev,EYo),e(ev,Bz),e(Bz,CYo),e(ev,wYo),e(H,AYo),e(H,ov),e(ov,Gue),e(Gue,LYo),e(ov,yYo),e(ov,Iz),e(Iz,xYo),e(ov,$Yo),e(H,kYo),e(H,rv),e(rv,Oue),e(Oue,SYo),e(rv,RYo),e(rv,Nz),e(Nz,PYo),e(rv,BYo),e(ao,IYo),e(ao,tv),e(tv,NYo),e(tv,Vue),e(Vue,qYo),e(tv,jYo),e(tv,Xue),e(Xue,DYo),e(ao,GYo),M(av,ao,null),b(f,iVe,u),b(f,fd,u),e(fd,nv),e(nv,zue),M(t8,zue,null),e(fd,OYo),e(fd,Que),e(Que,VYo),b(f,dVe,u),b(f,jo,u),M(a8,jo,null),e(jo,XYo),e(jo,md),e(md,zYo),e(md,qz),e(qz,QYo),e(md,WYo),e(md,jz),e(jz,HYo),e(md,UYo),e(jo,JYo),e(jo,n8),e(n8,YYo),e(n8,Wue),e(Wue,KYo),e(n8,ZYo),e(jo,eKo),e(jo,pt),M(s8,pt,null),e(pt,oKo),e(pt,Hue),e(Hue,rKo),e(pt,tKo),e(pt,gd),e(gd,aKo),e(gd,Uue),e(Uue,nKo),e(gd,sKo),e(gd,Dz),e(Dz,lKo),e(gd,iKo),e(pt,dKo),M(sv,pt,null),e(jo,cKo),e(jo,no),M(l8,no,null),e(no,fKo),e(no,Jue),e(Jue,mKo),e(no,gKo),e(no,Va),e(Va,hKo),e(Va,Yue),e(Yue,pKo),e(Va,_Ko),e(Va,Kue),e(Kue,uKo),e(Va,bKo),e(Va,Zue),e(Zue,vKo),e(Va,FKo),e(no,TKo),e(no,V),e(V,lv),e(lv,e5e),e(e5e,MKo),e(lv,EKo),e(lv,Gz),e(Gz,CKo),e(lv,wKo),e(V,AKo),e(V,iv),e(iv,o5e),e(o5e,LKo),e(iv,yKo),e(iv,Oz),e(Oz,xKo),e(iv,$Ko),e(V,kKo),e(V,dv),e(dv,r5e),e(r5e,SKo),e(dv,RKo),e(dv,Vz),e(Vz,PKo),e(dv,BKo),e(V,IKo),e(V,cv),e(cv,t5e),e(t5e,NKo),e(cv,qKo),e(cv,Xz),e(Xz,jKo),e(cv,DKo),e(V,GKo),e(V,fv),e(fv,a5e),e(a5e,OKo),e(fv,VKo),e(fv,zz),e(zz,XKo),e(fv,zKo),e(V,QKo),e(V,mv),e(mv,n5e),e(n5e,WKo),e(mv,HKo),e(mv,Qz),e(Qz,UKo),e(mv,JKo),e(V,YKo),e(V,gv),e(gv,s5e),e(s5e,KKo),e(gv,ZKo),e(gv,Wz),e(Wz,eZo),e(gv,oZo),e(V,rZo),e(V,hv),e(hv,l5e),e(l5e,tZo),e(hv,aZo),e(hv,Hz),e(Hz,nZo),e(hv,sZo),e(V,lZo),e(V,pv),e(pv,i5e),e(i5e,iZo),e(pv,dZo),e(pv,Uz),e(Uz,cZo),e(pv,fZo),e(V,mZo),e(V,_v),e(_v,d5e),e(d5e,gZo),e(_v,hZo),e(_v,Jz),e(Jz,pZo),e(_v,_Zo),e(V,uZo),e(V,uv),e(uv,c5e),e(c5e,bZo),e(uv,vZo),e(uv,Yz),e(Yz,FZo),e(uv,TZo),e(V,MZo),e(V,bv),e(bv,f5e),e(f5e,EZo),e(bv,CZo),e(bv,Kz),e(Kz,wZo),e(bv,AZo),e(V,LZo),e(V,vv),e(vv,m5e),e(m5e,yZo),e(vv,xZo),e(vv,Zz),e(Zz,$Zo),e(vv,kZo),e(V,SZo),e(V,Fv),e(Fv,g5e),e(g5e,RZo),e(Fv,PZo),e(Fv,eQ),e(eQ,BZo),e(Fv,IZo),e(V,NZo),e(V,Tv),e(Tv,h5e),e(h5e,qZo),e(Tv,jZo),e(Tv,oQ),e(oQ,DZo),e(Tv,GZo),e(V,OZo),e(V,Mv),e(Mv,p5e),e(p5e,VZo),e(Mv,XZo),e(Mv,rQ),e(rQ,zZo),e(Mv,QZo),e(V,WZo),e(V,Ev),e(Ev,_5e),e(_5e,HZo),e(Ev,UZo),e(Ev,tQ),e(tQ,JZo),e(Ev,YZo),e(V,KZo),e(V,Cv),e(Cv,u5e),e(u5e,ZZo),e(Cv,eer),e(Cv,aQ),e(aQ,oer),e(Cv,rer),e(V,ter),e(V,wv),e(wv,b5e),e(b5e,aer),e(wv,ner),e(wv,nQ),e(nQ,ser),e(wv,ler),e(V,ier),e(V,Av),e(Av,v5e),e(v5e,der),e(Av,cer),e(Av,sQ),e(sQ,fer),e(Av,mer),e(V,ger),e(V,Lv),e(Lv,F5e),e(F5e,her),e(Lv,per),e(Lv,lQ),e(lQ,_er),e(Lv,uer),e(V,ber),e(V,yv),e(yv,T5e),e(T5e,ver),e(yv,Fer),e(yv,iQ),e(iQ,Ter),e(yv,Mer),e(V,Eer),e(V,xv),e(xv,M5e),e(M5e,Cer),e(xv,wer),e(xv,dQ),e(dQ,Aer),e(xv,Ler),e(V,yer),e(V,$v),e($v,E5e),e(E5e,xer),e($v,$er),e($v,cQ),e(cQ,ker),e($v,Ser),e(V,Rer),e(V,kv),e(kv,C5e),e(C5e,Per),e(kv,Ber),e(kv,fQ),e(fQ,Ier),e(kv,Ner),e(V,qer),e(V,Sv),e(Sv,w5e),e(w5e,jer),e(Sv,Der),e(Sv,mQ),e(mQ,Ger),e(Sv,Oer),e(V,Ver),e(V,Rv),e(Rv,A5e),e(A5e,Xer),e(Rv,zer),e(Rv,gQ),e(gQ,Qer),e(Rv,Wer),e(V,Her),e(V,Pv),e(Pv,L5e),e(L5e,Uer),e(Pv,Jer),e(Pv,hQ),e(hQ,Yer),e(Pv,Ker),e(V,Zer),e(V,Bv),e(Bv,y5e),e(y5e,eor),e(Bv,oor),e(Bv,pQ),e(pQ,ror),e(Bv,tor),e(V,aor),e(V,Iv),e(Iv,x5e),e(x5e,nor),e(Iv,sor),e(Iv,_Q),e(_Q,lor),e(Iv,ior),e(V,dor),e(V,Nv),e(Nv,$5e),e($5e,cor),e(Nv,mor),e(Nv,uQ),e(uQ,gor),e(Nv,hor),e(V,por),e(V,qv),e(qv,k5e),e(k5e,_or),e(qv,uor),e(qv,bQ),e(bQ,bor),e(qv,vor),e(V,For),e(V,jv),e(jv,S5e),e(S5e,Tor),e(jv,Mor),e(jv,vQ),e(vQ,Eor),e(jv,Cor),e(V,wor),e(V,Dv),e(Dv,R5e),e(R5e,Aor),e(Dv,Lor),e(Dv,FQ),e(FQ,yor),e(Dv,xor),e(V,$or),e(V,Gv),e(Gv,P5e),e(P5e,kor),e(Gv,Sor),e(Gv,TQ),e(TQ,Ror),e(Gv,Por),e(V,Bor),e(V,Ov),e(Ov,B5e),e(B5e,Ior),e(Ov,Nor),e(Ov,MQ),e(MQ,qor),e(Ov,jor),e(V,Dor),e(V,Vv),e(Vv,I5e),e(I5e,Gor),e(Vv,Oor),e(Vv,EQ),e(EQ,Vor),e(Vv,Xor),e(V,zor),e(V,Xv),e(Xv,N5e),e(N5e,Qor),e(Xv,Wor),e(Xv,CQ),e(CQ,Hor),e(Xv,Uor),e(V,Jor),e(V,zv),e(zv,q5e),e(q5e,Yor),e(zv,Kor),e(zv,wQ),e(wQ,Zor),e(zv,err),e(V,orr),e(V,Qv),e(Qv,j5e),e(j5e,rrr),e(Qv,trr),e(Qv,AQ),e(AQ,arr),e(Qv,nrr),e(V,srr),e(V,Wv),e(Wv,D5e),e(D5e,lrr),e(Wv,irr),e(Wv,LQ),e(LQ,drr),e(Wv,crr),e(no,frr),e(no,Hv),e(Hv,mrr),e(Hv,G5e),e(G5e,grr),e(Hv,hrr),e(Hv,O5e),e(O5e,prr),e(no,_rr),M(Uv,no,null),b(f,cVe,u),b(f,hd,u),e(hd,Jv),e(Jv,V5e),M(i8,V5e,null),e(hd,urr),e(hd,X5e),e(X5e,brr),b(f,fVe,u),b(f,Do,u),M(d8,Do,null),e(Do,vrr),e(Do,pd),e(pd,Frr),e(pd,yQ),e(yQ,Trr),e(pd,Mrr),e(pd,xQ),e(xQ,Err),e(pd,Crr),e(Do,wrr),e(Do,c8),e(c8,Arr),e(c8,z5e),e(z5e,Lrr),e(c8,yrr),e(Do,xrr),e(Do,_t),M(f8,_t,null),e(_t,$rr),e(_t,Q5e),e(Q5e,krr),e(_t,Srr),e(_t,_d),e(_d,Rrr),e(_d,W5e),e(W5e,Prr),e(_d,Brr),e(_d,$Q),e($Q,Irr),e(_d,Nrr),e(_t,qrr),M(Yv,_t,null),e(Do,jrr),e(Do,so),M(m8,so,null),e(so,Drr),e(so,H5e),e(H5e,Grr),e(so,Orr),e(so,Xa),e(Xa,Vrr),e(Xa,U5e),e(U5e,Xrr),e(Xa,zrr),e(Xa,J5e),e(J5e,Qrr),e(Xa,Wrr),e(Xa,Y5e),e(Y5e,Hrr),e(Xa,Urr),e(so,Jrr),e(so,K5e),e(K5e,Kv),e(Kv,Z5e),e(Z5e,Yrr),e(Kv,Krr),e(Kv,kQ),e(kQ,Zrr),e(Kv,etr),e(so,otr),e(so,Zv),e(Zv,rtr),e(Zv,e1e),e(e1e,ttr),e(Zv,atr),e(Zv,o1e),e(o1e,ntr),e(so,str),M(eF,so,null),b(f,mVe,u),b(f,ud,u),e(ud,oF),e(oF,r1e),M(g8,r1e,null),e(ud,ltr),e(ud,t1e),e(t1e,itr),b(f,gVe,u),b(f,Go,u),M(h8,Go,null),e(Go,dtr),e(Go,bd),e(bd,ctr),e(bd,SQ),e(SQ,ftr),e(bd,mtr),e(bd,RQ),e(RQ,gtr),e(bd,htr),e(Go,ptr),e(Go,p8),e(p8,_tr),e(p8,a1e),e(a1e,utr),e(p8,btr),e(Go,vtr),e(Go,ut),M(_8,ut,null),e(ut,Ftr),e(ut,n1e),e(n1e,Ttr),e(ut,Mtr),e(ut,vd),e(vd,Etr),e(vd,s1e),e(s1e,Ctr),e(vd,wtr),e(vd,PQ),e(PQ,Atr),e(vd,Ltr),e(ut,ytr),M(rF,ut,null),e(Go,xtr),e(Go,lo),M(u8,lo,null),e(lo,$tr),e(lo,l1e),e(l1e,ktr),e(lo,Str),e(lo,za),e(za,Rtr),e(za,i1e),e(i1e,Ptr),e(za,Btr),e(za,d1e),e(d1e,Itr),e(za,Ntr),e(za,c1e),e(c1e,qtr),e(za,jtr),e(lo,Dtr),e(lo,Fe),e(Fe,tF),e(tF,f1e),e(f1e,Gtr),e(tF,Otr),e(tF,BQ),e(BQ,Vtr),e(tF,Xtr),e(Fe,ztr),e(Fe,aF),e(aF,m1e),e(m1e,Qtr),e(aF,Wtr),e(aF,IQ),e(IQ,Htr),e(aF,Utr),e(Fe,Jtr),e(Fe,nF),e(nF,g1e),e(g1e,Ytr),e(nF,Ktr),e(nF,NQ),e(NQ,Ztr),e(nF,ear),e(Fe,oar),e(Fe,sF),e(sF,h1e),e(h1e,rar),e(sF,tar),e(sF,qQ),e(qQ,aar),e(sF,nar),e(Fe,sar),e(Fe,Qs),e(Qs,p1e),e(p1e,lar),e(Qs,iar),e(Qs,jQ),e(jQ,dar),e(Qs,car),e(Qs,DQ),e(DQ,far),e(Qs,mar),e(Fe,gar),e(Fe,lF),e(lF,_1e),e(_1e,har),e(lF,par),e(lF,GQ),e(GQ,_ar),e(lF,uar),e(Fe,bar),e(Fe,Ws),e(Ws,u1e),e(u1e,Far),e(Ws,Tar),e(Ws,OQ),e(OQ,Mar),e(Ws,Ear),e(Ws,VQ),e(VQ,Car),e(Ws,war),e(Fe,Aar),e(Fe,bt),e(bt,b1e),e(b1e,Lar),e(bt,yar),e(bt,XQ),e(XQ,xar),e(bt,$ar),e(bt,zQ),e(zQ,kar),e(bt,Sar),e(bt,QQ),e(QQ,Rar),e(bt,Par),e(Fe,Bar),e(Fe,iF),e(iF,v1e),e(v1e,Iar),e(iF,Nar),e(iF,WQ),e(WQ,qar),e(iF,jar),e(Fe,Dar),e(Fe,dF),e(dF,F1e),e(F1e,Gar),e(dF,Oar),e(dF,HQ),e(HQ,Var),e(dF,Xar),e(Fe,zar),e(Fe,cF),e(cF,T1e),e(T1e,Qar),e(cF,War),e(cF,UQ),e(UQ,Har),e(cF,Uar),e(Fe,Jar),e(Fe,fF),e(fF,M1e),e(M1e,Yar),e(fF,Kar),e(fF,JQ),e(JQ,Zar),e(fF,enr),e(Fe,onr),e(Fe,mF),e(mF,E1e),e(E1e,rnr),e(mF,tnr),e(mF,YQ),e(YQ,anr),e(mF,nnr),e(Fe,snr),e(Fe,gF),e(gF,C1e),e(C1e,lnr),e(gF,inr),e(gF,KQ),e(KQ,dnr),e(gF,cnr),e(Fe,fnr),e(Fe,hF),e(hF,w1e),e(w1e,mnr),e(hF,gnr),e(hF,ZQ),e(ZQ,hnr),e(hF,pnr),e(lo,_nr),e(lo,pF),e(pF,unr),e(pF,A1e),e(A1e,bnr),e(pF,vnr),e(pF,L1e),e(L1e,Fnr),e(lo,Tnr),M(_F,lo,null),b(f,hVe,u),b(f,Fd,u),e(Fd,uF),e(uF,y1e),M(b8,y1e,null),e(Fd,Mnr),e(Fd,x1e),e(x1e,Enr),b(f,pVe,u),b(f,Oo,u),M(v8,Oo,null),e(Oo,Cnr),e(Oo,Td),e(Td,wnr),e(Td,eW),e(eW,Anr),e(Td,Lnr),e(Td,oW),e(oW,ynr),e(Td,xnr),e(Oo,$nr),e(Oo,F8),e(F8,knr),e(F8,$1e),e($1e,Snr),e(F8,Rnr),e(Oo,Pnr),e(Oo,vt),M(T8,vt,null),e(vt,Bnr),e(vt,k1e),e(k1e,Inr),e(vt,Nnr),e(vt,Md),e(Md,qnr),e(Md,S1e),e(S1e,jnr),e(Md,Dnr),e(Md,rW),e(rW,Gnr),e(Md,Onr),e(vt,Vnr),M(bF,vt,null),e(Oo,Xnr),e(Oo,io),M(M8,io,null),e(io,znr),e(io,R1e),e(R1e,Qnr),e(io,Wnr),e(io,Qa),e(Qa,Hnr),e(Qa,P1e),e(P1e,Unr),e(Qa,Jnr),e(Qa,B1e),e(B1e,Ynr),e(Qa,Knr),e(Qa,I1e),e(I1e,Znr),e(Qa,esr),e(io,osr),e(io,N1e),e(N1e,vF),e(vF,q1e),e(q1e,rsr),e(vF,tsr),e(vF,tW),e(tW,asr),e(vF,nsr),e(io,ssr),e(io,FF),e(FF,lsr),e(FF,j1e),e(j1e,isr),e(FF,dsr),e(FF,D1e),e(D1e,csr),e(io,fsr),M(TF,io,null),b(f,_Ve,u),b(f,Ed,u),e(Ed,MF),e(MF,G1e),M(E8,G1e,null),e(Ed,msr),e(Ed,O1e),e(O1e,gsr),b(f,uVe,u),b(f,Vo,u),M(C8,Vo,null),e(Vo,hsr),e(Vo,Cd),e(Cd,psr),e(Cd,aW),e(aW,_sr),e(Cd,usr),e(Cd,nW),e(nW,bsr),e(Cd,vsr),e(Vo,Fsr),e(Vo,w8),e(w8,Tsr),e(w8,V1e),e(V1e,Msr),e(w8,Esr),e(Vo,Csr),e(Vo,Ft),M(A8,Ft,null),e(Ft,wsr),e(Ft,X1e),e(X1e,Asr),e(Ft,Lsr),e(Ft,wd),e(wd,ysr),e(wd,z1e),e(z1e,xsr),e(wd,$sr),e(wd,sW),e(sW,ksr),e(wd,Ssr),e(Ft,Rsr),M(EF,Ft,null),e(Vo,Psr),e(Vo,co),M(L8,co,null),e(co,Bsr),e(co,Q1e),e(Q1e,Isr),e(co,Nsr),e(co,Wa),e(Wa,qsr),e(Wa,W1e),e(W1e,jsr),e(Wa,Dsr),e(Wa,H1e),e(H1e,Gsr),e(Wa,Osr),e(Wa,U1e),e(U1e,Vsr),e(Wa,Xsr),e(co,zsr),e(co,J1e),e(J1e,CF),e(CF,Y1e),e(Y1e,Qsr),e(CF,Wsr),e(CF,lW),e(lW,Hsr),e(CF,Usr),e(co,Jsr),e(co,wF),e(wF,Ysr),e(wF,K1e),e(K1e,Ksr),e(wF,Zsr),e(wF,Z1e),e(Z1e,elr),e(co,olr),M(AF,co,null),b(f,bVe,u),b(f,Ad,u),e(Ad,LF),e(LF,e2e),M(y8,e2e,null),e(Ad,rlr),e(Ad,o2e),e(o2e,tlr),b(f,vVe,u),b(f,Xo,u),M(x8,Xo,null),e(Xo,alr),e(Xo,Ld),e(Ld,nlr),e(Ld,iW),e(iW,slr),e(Ld,llr),e(Ld,dW),e(dW,ilr),e(Ld,dlr),e(Xo,clr),e(Xo,$8),e($8,flr),e($8,r2e),e(r2e,mlr),e($8,glr),e(Xo,hlr),e(Xo,Tt),M(k8,Tt,null),e(Tt,plr),e(Tt,t2e),e(t2e,_lr),e(Tt,ulr),e(Tt,yd),e(yd,blr),e(yd,a2e),e(a2e,vlr),e(yd,Flr),e(yd,cW),e(cW,Tlr),e(yd,Mlr),e(Tt,Elr),M(yF,Tt,null),e(Xo,Clr),e(Xo,fo),M(S8,fo,null),e(fo,wlr),e(fo,n2e),e(n2e,Alr),e(fo,Llr),e(fo,Ha),e(Ha,ylr),e(Ha,s2e),e(s2e,xlr),e(Ha,$lr),e(Ha,l2e),e(l2e,klr),e(Ha,Slr),e(Ha,i2e),e(i2e,Rlr),e(Ha,Plr),e(fo,Blr),e(fo,Pe),e(Pe,xF),e(xF,d2e),e(d2e,Ilr),e(xF,Nlr),e(xF,fW),e(fW,qlr),e(xF,jlr),e(Pe,Dlr),e(Pe,$F),e($F,c2e),e(c2e,Glr),e($F,Olr),e($F,mW),e(mW,Vlr),e($F,Xlr),e(Pe,zlr),e(Pe,kF),e(kF,f2e),e(f2e,Qlr),e(kF,Wlr),e(kF,gW),e(gW,Hlr),e(kF,Ulr),e(Pe,Jlr),e(Pe,SF),e(SF,m2e),e(m2e,Ylr),e(SF,Klr),e(SF,hW),e(hW,Zlr),e(SF,eir),e(Pe,oir),e(Pe,RF),e(RF,g2e),e(g2e,rir),e(RF,tir),e(RF,pW),e(pW,air),e(RF,nir),e(Pe,sir),e(Pe,PF),e(PF,h2e),e(h2e,lir),e(PF,iir),e(PF,_W),e(_W,dir),e(PF,cir),e(Pe,fir),e(Pe,BF),e(BF,p2e),e(p2e,mir),e(BF,gir),e(BF,uW),e(uW,hir),e(BF,pir),e(Pe,_ir),e(Pe,IF),e(IF,_2e),e(_2e,uir),e(IF,bir),e(IF,bW),e(bW,vir),e(IF,Fir),e(Pe,Tir),e(Pe,NF),e(NF,u2e),e(u2e,Mir),e(NF,Eir),e(NF,vW),e(vW,Cir),e(NF,wir),e(fo,Air),e(fo,qF),e(qF,Lir),e(qF,b2e),e(b2e,yir),e(qF,xir),e(qF,v2e),e(v2e,$ir),e(fo,kir),M(jF,fo,null),b(f,FVe,u),b(f,xd,u),e(xd,DF),e(DF,F2e),M(R8,F2e,null),e(xd,Sir),e(xd,T2e),e(T2e,Rir),b(f,TVe,u),b(f,zo,u),M(P8,zo,null),e(zo,Pir),e(zo,$d),e($d,Bir),e($d,FW),e(FW,Iir),e($d,Nir),e($d,TW),e(TW,qir),e($d,jir),e(zo,Dir),e(zo,B8),e(B8,Gir),e(B8,M2e),e(M2e,Oir),e(B8,Vir),e(zo,Xir),e(zo,Mt),M(I8,Mt,null),e(Mt,zir),e(Mt,E2e),e(E2e,Qir),e(Mt,Wir),e(Mt,kd),e(kd,Hir),e(kd,C2e),e(C2e,Uir),e(kd,Jir),e(kd,MW),e(MW,Yir),e(kd,Kir),e(Mt,Zir),M(GF,Mt,null),e(zo,edr),e(zo,mo),M(N8,mo,null),e(mo,odr),e(mo,w2e),e(w2e,rdr),e(mo,tdr),e(mo,Ua),e(Ua,adr),e(Ua,A2e),e(A2e,ndr),e(Ua,sdr),e(Ua,L2e),e(L2e,ldr),e(Ua,idr),e(Ua,y2e),e(y2e,ddr),e(Ua,cdr),e(mo,fdr),e(mo,et),e(et,OF),e(OF,x2e),e(x2e,mdr),e(OF,gdr),e(OF,EW),e(EW,hdr),e(OF,pdr),e(et,_dr),e(et,VF),e(VF,$2e),e($2e,udr),e(VF,bdr),e(VF,CW),e(CW,vdr),e(VF,Fdr),e(et,Tdr),e(et,XF),e(XF,k2e),e(k2e,Mdr),e(XF,Edr),e(XF,wW),e(wW,Cdr),e(XF,wdr),e(et,Adr),e(et,zF),e(zF,S2e),e(S2e,Ldr),e(zF,ydr),e(zF,AW),e(AW,xdr),e(zF,$dr),e(et,kdr),e(et,QF),e(QF,R2e),e(R2e,Sdr),e(QF,Rdr),e(QF,LW),e(LW,Pdr),e(QF,Bdr),e(mo,Idr),e(mo,WF),e(WF,Ndr),e(WF,P2e),e(P2e,qdr),e(WF,jdr),e(WF,B2e),e(B2e,Ddr),e(mo,Gdr),M(HF,mo,null),b(f,MVe,u),b(f,Sd,u),e(Sd,UF),e(UF,I2e),M(q8,I2e,null),e(Sd,Odr),e(Sd,N2e),e(N2e,Vdr),b(f,EVe,u),b(f,Qo,u),M(j8,Qo,null),e(Qo,Xdr),e(Qo,Rd),e(Rd,zdr),e(Rd,yW),e(yW,Qdr),e(Rd,Wdr),e(Rd,xW),e(xW,Hdr),e(Rd,Udr),e(Qo,Jdr),e(Qo,D8),e(D8,Ydr),e(D8,q2e),e(q2e,Kdr),e(D8,Zdr),e(Qo,ecr),e(Qo,Et),M(G8,Et,null),e(Et,ocr),e(Et,j2e),e(j2e,rcr),e(Et,tcr),e(Et,Pd),e(Pd,acr),e(Pd,D2e),e(D2e,ncr),e(Pd,scr),e(Pd,$W),e($W,lcr),e(Pd,icr),e(Et,dcr),M(JF,Et,null),e(Qo,ccr),e(Qo,go),M(O8,go,null),e(go,fcr),e(go,G2e),e(G2e,mcr),e(go,gcr),e(go,Ja),e(Ja,hcr),e(Ja,O2e),e(O2e,pcr),e(Ja,_cr),e(Ja,V2e),e(V2e,ucr),e(Ja,bcr),e(Ja,X2e),e(X2e,vcr),e(Ja,Fcr),e(go,Tcr),e(go,Le),e(Le,YF),e(YF,z2e),e(z2e,Mcr),e(YF,Ecr),e(YF,kW),e(kW,Ccr),e(YF,wcr),e(Le,Acr),e(Le,KF),e(KF,Q2e),e(Q2e,Lcr),e(KF,ycr),e(KF,SW),e(SW,xcr),e(KF,$cr),e(Le,kcr),e(Le,ZF),e(ZF,W2e),e(W2e,Scr),e(ZF,Rcr),e(ZF,RW),e(RW,Pcr),e(ZF,Bcr),e(Le,Icr),e(Le,eT),e(eT,H2e),e(H2e,Ncr),e(eT,qcr),e(eT,PW),e(PW,jcr),e(eT,Dcr),e(Le,Gcr),e(Le,oT),e(oT,U2e),e(U2e,Ocr),e(oT,Vcr),e(oT,BW),e(BW,Xcr),e(oT,zcr),e(Le,Qcr),e(Le,rT),e(rT,J2e),e(J2e,Wcr),e(rT,Hcr),e(rT,IW),e(IW,Ucr),e(rT,Jcr),e(Le,Ycr),e(Le,tT),e(tT,Y2e),e(Y2e,Kcr),e(tT,Zcr),e(tT,NW),e(NW,efr),e(tT,ofr),e(Le,rfr),e(Le,aT),e(aT,K2e),e(K2e,tfr),e(aT,afr),e(aT,qW),e(qW,nfr),e(aT,sfr),e(Le,lfr),e(Le,nT),e(nT,Z2e),e(Z2e,ifr),e(nT,dfr),e(nT,jW),e(jW,cfr),e(nT,ffr),e(Le,mfr),e(Le,sT),e(sT,e4e),e(e4e,gfr),e(sT,hfr),e(sT,DW),e(DW,pfr),e(sT,_fr),e(go,ufr),e(go,lT),e(lT,bfr),e(lT,o4e),e(o4e,vfr),e(lT,Ffr),e(lT,r4e),e(r4e,Tfr),e(go,Mfr),M(iT,go,null),b(f,CVe,u),b(f,Bd,u),e(Bd,dT),e(dT,t4e),M(V8,t4e,null),e(Bd,Efr),e(Bd,a4e),e(a4e,Cfr),b(f,wVe,u),b(f,Wo,u),M(X8,Wo,null),e(Wo,wfr),e(Wo,Id),e(Id,Afr),e(Id,GW),e(GW,Lfr),e(Id,yfr),e(Id,OW),e(OW,xfr),e(Id,$fr),e(Wo,kfr),e(Wo,z8),e(z8,Sfr),e(z8,n4e),e(n4e,Rfr),e(z8,Pfr),e(Wo,Bfr),e(Wo,Ct),M(Q8,Ct,null),e(Ct,Ifr),e(Ct,s4e),e(s4e,Nfr),e(Ct,qfr),e(Ct,Nd),e(Nd,jfr),e(Nd,l4e),e(l4e,Dfr),e(Nd,Gfr),e(Nd,VW),e(VW,Ofr),e(Nd,Vfr),e(Ct,Xfr),M(cT,Ct,null),e(Wo,zfr),e(Wo,ho),M(W8,ho,null),e(ho,Qfr),e(ho,i4e),e(i4e,Wfr),e(ho,Hfr),e(ho,Ya),e(Ya,Ufr),e(Ya,d4e),e(d4e,Jfr),e(Ya,Yfr),e(Ya,c4e),e(c4e,Kfr),e(Ya,Zfr),e(Ya,f4e),e(f4e,emr),e(Ya,omr),e(ho,rmr),e(ho,H8),e(H8,fT),e(fT,m4e),e(m4e,tmr),e(fT,amr),e(fT,XW),e(XW,nmr),e(fT,smr),e(H8,lmr),e(H8,mT),e(mT,g4e),e(g4e,imr),e(mT,dmr),e(mT,zW),e(zW,cmr),e(mT,fmr),e(ho,mmr),e(ho,gT),e(gT,gmr),e(gT,h4e),e(h4e,hmr),e(gT,pmr),e(gT,p4e),e(p4e,_mr),e(ho,umr),M(hT,ho,null),b(f,AVe,u),b(f,qd,u),e(qd,pT),e(pT,_4e),M(U8,_4e,null),e(qd,bmr),e(qd,u4e),e(u4e,vmr),b(f,LVe,u),b(f,Ho,u),M(J8,Ho,null),e(Ho,Fmr),e(Ho,jd),e(jd,Tmr),e(jd,QW),e(QW,Mmr),e(jd,Emr),e(jd,WW),e(WW,Cmr),e(jd,wmr),e(Ho,Amr),e(Ho,Y8),e(Y8,Lmr),e(Y8,b4e),e(b4e,ymr),e(Y8,xmr),e(Ho,$mr),e(Ho,wt),M(K8,wt,null),e(wt,kmr),e(wt,v4e),e(v4e,Smr),e(wt,Rmr),e(wt,Dd),e(Dd,Pmr),e(Dd,F4e),e(F4e,Bmr),e(Dd,Imr),e(Dd,HW),e(HW,Nmr),e(Dd,qmr),e(wt,jmr),M(_T,wt,null),e(Ho,Dmr),e(Ho,po),M(Z8,po,null),e(po,Gmr),e(po,T4e),e(T4e,Omr),e(po,Vmr),e(po,Ka),e(Ka,Xmr),e(Ka,M4e),e(M4e,zmr),e(Ka,Qmr),e(Ka,E4e),e(E4e,Wmr),e(Ka,Hmr),e(Ka,C4e),e(C4e,Umr),e(Ka,Jmr),e(po,Ymr),e(po,ot),e(ot,uT),e(uT,w4e),e(w4e,Kmr),e(uT,Zmr),e(uT,UW),e(UW,egr),e(uT,ogr),e(ot,rgr),e(ot,bT),e(bT,A4e),e(A4e,tgr),e(bT,agr),e(bT,JW),e(JW,ngr),e(bT,sgr),e(ot,lgr),e(ot,vT),e(vT,L4e),e(L4e,igr),e(vT,dgr),e(vT,YW),e(YW,cgr),e(vT,fgr),e(ot,mgr),e(ot,FT),e(FT,y4e),e(y4e,ggr),e(FT,hgr),e(FT,KW),e(KW,pgr),e(FT,_gr),e(ot,ugr),e(ot,TT),e(TT,x4e),e(x4e,bgr),e(TT,vgr),e(TT,ZW),e(ZW,Fgr),e(TT,Tgr),e(po,Mgr),e(po,MT),e(MT,Egr),e(MT,$4e),e($4e,Cgr),e(MT,wgr),e(MT,k4e),e(k4e,Agr),e(po,Lgr),M(ET,po,null),b(f,yVe,u),b(f,Gd,u),e(Gd,CT),e(CT,S4e),M(e9,S4e,null),e(Gd,ygr),e(Gd,R4e),e(R4e,xgr),b(f,xVe,u),b(f,Uo,u),M(o9,Uo,null),e(Uo,$gr),e(Uo,Od),e(Od,kgr),e(Od,eH),e(eH,Sgr),e(Od,Rgr),e(Od,oH),e(oH,Pgr),e(Od,Bgr),e(Uo,Igr),e(Uo,r9),e(r9,Ngr),e(r9,P4e),e(P4e,qgr),e(r9,jgr),e(Uo,Dgr),e(Uo,At),M(t9,At,null),e(At,Ggr),e(At,B4e),e(B4e,Ogr),e(At,Vgr),e(At,Vd),e(Vd,Xgr),e(Vd,I4e),e(I4e,zgr),e(Vd,Qgr),e(Vd,rH),e(rH,Wgr),e(Vd,Hgr),e(At,Ugr),M(wT,At,null),e(Uo,Jgr),e(Uo,_o),M(a9,_o,null),e(_o,Ygr),e(_o,N4e),e(N4e,Kgr),e(_o,Zgr),e(_o,Za),e(Za,ehr),e(Za,q4e),e(q4e,ohr),e(Za,rhr),e(Za,j4e),e(j4e,thr),e(Za,ahr),e(Za,D4e),e(D4e,nhr),e(Za,shr),e(_o,lhr),e(_o,Xd),e(Xd,AT),e(AT,G4e),e(G4e,ihr),e(AT,dhr),e(AT,tH),e(tH,chr),e(AT,fhr),e(Xd,mhr),e(Xd,LT),e(LT,O4e),e(O4e,ghr),e(LT,hhr),e(LT,aH),e(aH,phr),e(LT,_hr),e(Xd,uhr),e(Xd,yT),e(yT,V4e),e(V4e,bhr),e(yT,vhr),e(yT,nH),e(nH,Fhr),e(yT,Thr),e(_o,Mhr),e(_o,xT),e(xT,Ehr),e(xT,X4e),e(X4e,Chr),e(xT,whr),e(xT,z4e),e(z4e,Ahr),e(_o,Lhr),M($T,_o,null),b(f,$Ve,u),b(f,zd,u),e(zd,kT),e(kT,Q4e),M(n9,Q4e,null),e(zd,yhr),e(zd,W4e),e(W4e,xhr),b(f,kVe,u),b(f,Jo,u),M(s9,Jo,null),e(Jo,$hr),e(Jo,Qd),e(Qd,khr),e(Qd,sH),e(sH,Shr),e(Qd,Rhr),e(Qd,lH),e(lH,Phr),e(Qd,Bhr),e(Jo,Ihr),e(Jo,l9),e(l9,Nhr),e(l9,H4e),e(H4e,qhr),e(l9,jhr),e(Jo,Dhr),e(Jo,Lt),M(i9,Lt,null),e(Lt,Ghr),e(Lt,U4e),e(U4e,Ohr),e(Lt,Vhr),e(Lt,Wd),e(Wd,Xhr),e(Wd,J4e),e(J4e,zhr),e(Wd,Qhr),e(Wd,iH),e(iH,Whr),e(Wd,Hhr),e(Lt,Uhr),M(ST,Lt,null),e(Jo,Jhr),e(Jo,uo),M(d9,uo,null),e(uo,Yhr),e(uo,Y4e),e(Y4e,Khr),e(uo,Zhr),e(uo,en),e(en,epr),e(en,K4e),e(K4e,opr),e(en,rpr),e(en,Z4e),e(Z4e,tpr),e(en,apr),e(en,ebe),e(ebe,npr),e(en,spr),e(uo,lpr),e(uo,c9),e(c9,RT),e(RT,obe),e(obe,ipr),e(RT,dpr),e(RT,dH),e(dH,cpr),e(RT,fpr),e(c9,mpr),e(c9,PT),e(PT,rbe),e(rbe,gpr),e(PT,hpr),e(PT,cH),e(cH,ppr),e(PT,_pr),e(uo,upr),e(uo,BT),e(BT,bpr),e(BT,tbe),e(tbe,vpr),e(BT,Fpr),e(BT,abe),e(abe,Tpr),e(uo,Mpr),M(IT,uo,null),b(f,SVe,u),b(f,Hd,u),e(Hd,NT),e(NT,nbe),M(f9,nbe,null),e(Hd,Epr),e(Hd,sbe),e(sbe,Cpr),b(f,RVe,u),b(f,Yo,u),M(m9,Yo,null),e(Yo,wpr),e(Yo,Ud),e(Ud,Apr),e(Ud,fH),e(fH,Lpr),e(Ud,ypr),e(Ud,mH),e(mH,xpr),e(Ud,$pr),e(Yo,kpr),e(Yo,g9),e(g9,Spr),e(g9,lbe),e(lbe,Rpr),e(g9,Ppr),e(Yo,Bpr),e(Yo,yt),M(h9,yt,null),e(yt,Ipr),e(yt,ibe),e(ibe,Npr),e(yt,qpr),e(yt,Jd),e(Jd,jpr),e(Jd,dbe),e(dbe,Dpr),e(Jd,Gpr),e(Jd,gH),e(gH,Opr),e(Jd,Vpr),e(yt,Xpr),M(qT,yt,null),e(Yo,zpr),e(Yo,bo),M(p9,bo,null),e(bo,Qpr),e(bo,cbe),e(cbe,Wpr),e(bo,Hpr),e(bo,on),e(on,Upr),e(on,fbe),e(fbe,Jpr),e(on,Ypr),e(on,mbe),e(mbe,Kpr),e(on,Zpr),e(on,gbe),e(gbe,e_r),e(on,o_r),e(bo,r_r),e(bo,hbe),e(hbe,jT),e(jT,pbe),e(pbe,t_r),e(jT,a_r),e(jT,hH),e(hH,n_r),e(jT,s_r),e(bo,l_r),e(bo,DT),e(DT,i_r),e(DT,_be),e(_be,d_r),e(DT,c_r),e(DT,ube),e(ube,f_r),e(bo,m_r),M(GT,bo,null),b(f,PVe,u),b(f,Yd,u),e(Yd,OT),e(OT,bbe),M(_9,bbe,null),e(Yd,g_r),e(Yd,vbe),e(vbe,h_r),b(f,BVe,u),b(f,Ko,u),M(u9,Ko,null),e(Ko,p_r),e(Ko,Kd),e(Kd,__r),e(Kd,pH),e(pH,u_r),e(Kd,b_r),e(Kd,_H),e(_H,v_r),e(Kd,F_r),e(Ko,T_r),e(Ko,b9),e(b9,M_r),e(b9,Fbe),e(Fbe,E_r),e(b9,C_r),e(Ko,w_r),e(Ko,xt),M(v9,xt,null),e(xt,A_r),e(xt,Tbe),e(Tbe,L_r),e(xt,y_r),e(xt,Zd),e(Zd,x_r),e(Zd,Mbe),e(Mbe,$_r),e(Zd,k_r),e(Zd,uH),e(uH,S_r),e(Zd,R_r),e(xt,P_r),M(VT,xt,null),e(Ko,B_r),e(Ko,vo),M(F9,vo,null),e(vo,I_r),e(vo,Ebe),e(Ebe,N_r),e(vo,q_r),e(vo,rn),e(rn,j_r),e(rn,Cbe),e(Cbe,D_r),e(rn,G_r),e(rn,wbe),e(wbe,O_r),e(rn,V_r),e(rn,Abe),e(Abe,X_r),e(rn,z_r),e(vo,Q_r),e(vo,tn),e(tn,XT),e(XT,Lbe),e(Lbe,W_r),e(XT,H_r),e(XT,bH),e(bH,U_r),e(XT,J_r),e(tn,Y_r),e(tn,zT),e(zT,ybe),e(ybe,K_r),e(zT,Z_r),e(zT,vH),e(vH,eur),e(zT,our),e(tn,rur),e(tn,QT),e(QT,xbe),e(xbe,tur),e(QT,aur),e(QT,FH),e(FH,nur),e(QT,sur),e(tn,lur),e(tn,WT),e(WT,$be),e($be,iur),e(WT,dur),e(WT,TH),e(TH,cur),e(WT,fur),e(vo,mur),e(vo,HT),e(HT,gur),e(HT,kbe),e(kbe,hur),e(HT,pur),e(HT,Sbe),e(Sbe,_ur),e(vo,uur),M(UT,vo,null),b(f,IVe,u),b(f,ec,u),e(ec,JT),e(JT,Rbe),M(T9,Rbe,null),e(ec,bur),e(ec,Pbe),e(Pbe,vur),b(f,NVe,u),b(f,Zo,u),M(M9,Zo,null),e(Zo,Fur),e(Zo,oc),e(oc,Tur),e(oc,MH),e(MH,Mur),e(oc,Eur),e(oc,EH),e(EH,Cur),e(oc,wur),e(Zo,Aur),e(Zo,E9),e(E9,Lur),e(E9,Bbe),e(Bbe,yur),e(E9,xur),e(Zo,$ur),e(Zo,$t),M(C9,$t,null),e($t,kur),e($t,Ibe),e(Ibe,Sur),e($t,Rur),e($t,rc),e(rc,Pur),e(rc,Nbe),e(Nbe,Bur),e(rc,Iur),e(rc,CH),e(CH,Nur),e(rc,qur),e($t,jur),M(YT,$t,null),e(Zo,Dur),e(Zo,Fo),M(w9,Fo,null),e(Fo,Gur),e(Fo,qbe),e(qbe,Our),e(Fo,Vur),e(Fo,an),e(an,Xur),e(an,jbe),e(jbe,zur),e(an,Qur),e(an,Dbe),e(Dbe,Wur),e(an,Hur),e(an,Gbe),e(Gbe,Uur),e(an,Jur),e(Fo,Yur),e(Fo,Obe),e(Obe,KT),e(KT,Vbe),e(Vbe,Kur),e(KT,Zur),e(KT,wH),e(wH,e5r),e(KT,o5r),e(Fo,r5r),e(Fo,ZT),e(ZT,t5r),e(ZT,Xbe),e(Xbe,a5r),e(ZT,n5r),e(ZT,zbe),e(zbe,s5r),e(Fo,l5r),M(e7,Fo,null),b(f,qVe,u),b(f,tc,u),e(tc,o7),e(o7,Qbe),M(A9,Qbe,null),e(tc,i5r),e(tc,Wbe),e(Wbe,d5r),b(f,jVe,u),b(f,er,u),M(L9,er,null),e(er,c5r),e(er,ac),e(ac,f5r),e(ac,AH),e(AH,m5r),e(ac,g5r),e(ac,LH),e(LH,h5r),e(ac,p5r),e(er,_5r),e(er,y9),e(y9,u5r),e(y9,Hbe),e(Hbe,b5r),e(y9,v5r),e(er,F5r),e(er,kt),M(x9,kt,null),e(kt,T5r),e(kt,Ube),e(Ube,M5r),e(kt,E5r),e(kt,nc),e(nc,C5r),e(nc,Jbe),e(Jbe,w5r),e(nc,A5r),e(nc,yH),e(yH,L5r),e(nc,y5r),e(kt,x5r),M(r7,kt,null),e(er,$5r),e(er,yr),M($9,yr,null),e(yr,k5r),e(yr,Ybe),e(Ybe,S5r),e(yr,R5r),e(yr,nn),e(nn,P5r),e(nn,Kbe),e(Kbe,B5r),e(nn,I5r),e(nn,Zbe),e(Zbe,N5r),e(nn,q5r),e(nn,eve),e(eve,j5r),e(nn,D5r),e(yr,G5r),e(yr,q),e(q,t7),e(t7,ove),e(ove,O5r),e(t7,V5r),e(t7,xH),e(xH,X5r),e(t7,z5r),e(q,Q5r),e(q,a7),e(a7,rve),e(rve,W5r),e(a7,H5r),e(a7,$H),e($H,U5r),e(a7,J5r),e(q,Y5r),e(q,n7),e(n7,tve),e(tve,K5r),e(n7,Z5r),e(n7,kH),e(kH,e1r),e(n7,o1r),e(q,r1r),e(q,s7),e(s7,ave),e(ave,t1r),e(s7,a1r),e(s7,SH),e(SH,n1r),e(s7,s1r),e(q,l1r),e(q,l7),e(l7,nve),e(nve,i1r),e(l7,d1r),e(l7,RH),e(RH,c1r),e(l7,f1r),e(q,m1r),e(q,i7),e(i7,sve),e(sve,g1r),e(i7,h1r),e(i7,PH),e(PH,p1r),e(i7,_1r),e(q,u1r),e(q,d7),e(d7,lve),e(lve,b1r),e(d7,v1r),e(d7,BH),e(BH,F1r),e(d7,T1r),e(q,M1r),e(q,c7),e(c7,ive),e(ive,E1r),e(c7,C1r),e(c7,IH),e(IH,w1r),e(c7,A1r),e(q,L1r),e(q,f7),e(f7,dve),e(dve,y1r),e(f7,x1r),e(f7,NH),e(NH,$1r),e(f7,k1r),e(q,S1r),e(q,m7),e(m7,cve),e(cve,R1r),e(m7,P1r),e(m7,qH),e(qH,B1r),e(m7,I1r),e(q,N1r),e(q,g7),e(g7,fve),e(fve,q1r),e(g7,j1r),e(g7,jH),e(jH,D1r),e(g7,G1r),e(q,O1r),e(q,h7),e(h7,mve),e(mve,V1r),e(h7,X1r),e(h7,DH),e(DH,z1r),e(h7,Q1r),e(q,W1r),e(q,p7),e(p7,gve),e(gve,H1r),e(p7,U1r),e(p7,GH),e(GH,J1r),e(p7,Y1r),e(q,K1r),e(q,_7),e(_7,hve),e(hve,Z1r),e(_7,e2r),e(_7,OH),e(OH,o2r),e(_7,r2r),e(q,t2r),e(q,u7),e(u7,pve),e(pve,a2r),e(u7,n2r),e(u7,VH),e(VH,s2r),e(u7,l2r),e(q,i2r),e(q,b7),e(b7,_ve),e(_ve,d2r),e(b7,c2r),e(b7,XH),e(XH,f2r),e(b7,m2r),e(q,g2r),e(q,v7),e(v7,uve),e(uve,h2r),e(v7,p2r),e(v7,zH),e(zH,_2r),e(v7,u2r),e(q,b2r),e(q,Hs),e(Hs,bve),e(bve,v2r),e(Hs,F2r),e(Hs,QH),e(QH,T2r),e(Hs,M2r),e(Hs,WH),e(WH,E2r),e(Hs,C2r),e(q,w2r),e(q,F7),e(F7,vve),e(vve,A2r),e(F7,L2r),e(F7,HH),e(HH,y2r),e(F7,x2r),e(q,$2r),e(q,T7),e(T7,Fve),e(Fve,k2r),e(T7,S2r),e(T7,UH),e(UH,R2r),e(T7,P2r),e(q,B2r),e(q,M7),e(M7,Tve),e(Tve,I2r),e(M7,N2r),e(M7,JH),e(JH,q2r),e(M7,j2r),e(q,D2r),e(q,E7),e(E7,Mve),e(Mve,G2r),e(E7,O2r),e(E7,YH),e(YH,V2r),e(E7,X2r),e(q,z2r),e(q,C7),e(C7,Eve),e(Eve,Q2r),e(C7,W2r),e(C7,KH),e(KH,H2r),e(C7,U2r),e(q,J2r),e(q,w7),e(w7,Cve),e(Cve,Y2r),e(w7,K2r),e(w7,ZH),e(ZH,Z2r),e(w7,e4r),e(q,o4r),e(q,A7),e(A7,wve),e(wve,r4r),e(A7,t4r),e(A7,eU),e(eU,a4r),e(A7,n4r),e(q,s4r),e(q,L7),e(L7,Ave),e(Ave,l4r),e(L7,i4r),e(L7,oU),e(oU,d4r),e(L7,c4r),e(q,f4r),e(q,y7),e(y7,Lve),e(Lve,m4r),e(y7,g4r),e(y7,rU),e(rU,h4r),e(y7,p4r),e(q,_4r),e(q,x7),e(x7,yve),e(yve,u4r),e(x7,b4r),e(x7,tU),e(tU,v4r),e(x7,F4r),e(q,T4r),e(q,$7),e($7,xve),e(xve,M4r),e($7,E4r),e($7,aU),e(aU,C4r),e($7,w4r),e(q,A4r),e(q,k7),e(k7,$ve),e($ve,L4r),e(k7,y4r),e(k7,nU),e(nU,x4r),e(k7,$4r),e(q,k4r),e(q,S7),e(S7,kve),e(kve,S4r),e(S7,R4r),e(S7,sU),e(sU,P4r),e(S7,B4r),e(q,I4r),e(q,R7),e(R7,Sve),e(Sve,N4r),e(R7,q4r),e(R7,lU),e(lU,j4r),e(R7,D4r),e(q,G4r),e(q,P7),e(P7,Rve),e(Rve,O4r),e(P7,V4r),e(P7,iU),e(iU,X4r),e(P7,z4r),e(q,Q4r),e(q,B7),e(B7,Pve),e(Pve,W4r),e(B7,H4r),e(B7,dU),e(dU,U4r),e(B7,J4r),e(q,Y4r),e(q,I7),e(I7,Bve),e(Bve,K4r),e(I7,Z4r),e(I7,cU),e(cU,ebr),e(I7,obr),e(q,rbr),e(q,N7),e(N7,Ive),e(Ive,tbr),e(N7,abr),e(N7,fU),e(fU,nbr),e(N7,sbr),e(q,lbr),e(q,q7),e(q7,Nve),e(Nve,ibr),e(q7,dbr),e(q7,mU),e(mU,cbr),e(q7,fbr),e(q,mbr),e(q,j7),e(j7,qve),e(qve,gbr),e(j7,hbr),e(j7,gU),e(gU,pbr),e(j7,_br),e(q,ubr),e(q,D7),e(D7,jve),e(jve,bbr),e(D7,vbr),e(D7,hU),e(hU,Fbr),e(D7,Tbr),e(q,Mbr),e(q,G7),e(G7,Dve),e(Dve,Ebr),e(G7,Cbr),e(G7,pU),e(pU,wbr),e(G7,Abr),e(q,Lbr),e(q,O7),e(O7,Gve),e(Gve,ybr),e(O7,xbr),e(O7,_U),e(_U,$br),e(O7,kbr),e(q,Sbr),e(q,V7),e(V7,Ove),e(Ove,Rbr),e(V7,Pbr),e(V7,uU),e(uU,Bbr),e(V7,Ibr),e(q,Nbr),e(q,X7),e(X7,Vve),e(Vve,qbr),e(X7,jbr),e(X7,bU),e(bU,Dbr),e(X7,Gbr),e(q,Obr),e(q,z7),e(z7,Xve),e(Xve,Vbr),e(z7,Xbr),e(z7,vU),e(vU,zbr),e(z7,Qbr),e(q,Wbr),e(q,Q7),e(Q7,zve),e(zve,Hbr),e(Q7,Ubr),e(Q7,FU),e(FU,Jbr),e(Q7,Ybr),e(q,Kbr),e(q,W7),e(W7,Qve),e(Qve,Zbr),e(W7,evr),e(W7,TU),e(TU,ovr),e(W7,rvr),e(q,tvr),e(q,H7),e(H7,Wve),e(Wve,avr),e(H7,nvr),e(H7,MU),e(MU,svr),e(H7,lvr),e(q,ivr),e(q,U7),e(U7,Hve),e(Hve,dvr),e(U7,cvr),e(U7,EU),e(EU,fvr),e(U7,mvr),e(yr,gvr),M(J7,yr,null),b(f,DVe,u),b(f,sc,u),e(sc,Y7),e(Y7,Uve),M(k9,Uve,null),e(sc,hvr),e(sc,Jve),e(Jve,pvr),b(f,GVe,u),b(f,or,u),M(S9,or,null),e(or,_vr),e(or,lc),e(lc,uvr),e(lc,CU),e(CU,bvr),e(lc,vvr),e(lc,wU),e(wU,Fvr),e(lc,Tvr),e(or,Mvr),e(or,R9),e(R9,Evr),e(R9,Yve),e(Yve,Cvr),e(R9,wvr),e(or,Avr),e(or,St),M(P9,St,null),e(St,Lvr),e(St,Kve),e(Kve,yvr),e(St,xvr),e(St,ic),e(ic,$vr),e(ic,Zve),e(Zve,kvr),e(ic,Svr),e(ic,AU),e(AU,Rvr),e(ic,Pvr),e(St,Bvr),M(K7,St,null),e(or,Ivr),e(or,xr),M(B9,xr,null),e(xr,Nvr),e(xr,eFe),e(eFe,qvr),e(xr,jvr),e(xr,sn),e(sn,Dvr),e(sn,oFe),e(oFe,Gvr),e(sn,Ovr),e(sn,rFe),e(rFe,Vvr),e(sn,Xvr),e(sn,tFe),e(tFe,zvr),e(sn,Qvr),e(xr,Wvr),e(xr,se),e(se,Z7),e(Z7,aFe),e(aFe,Hvr),e(Z7,Uvr),e(Z7,LU),e(LU,Jvr),e(Z7,Yvr),e(se,Kvr),e(se,eM),e(eM,nFe),e(nFe,Zvr),e(eM,eFr),e(eM,yU),e(yU,oFr),e(eM,rFr),e(se,tFr),e(se,oM),e(oM,sFe),e(sFe,aFr),e(oM,nFr),e(oM,xU),e(xU,sFr),e(oM,lFr),e(se,iFr),e(se,rM),e(rM,lFe),e(lFe,dFr),e(rM,cFr),e(rM,$U),e($U,fFr),e(rM,mFr),e(se,gFr),e(se,tM),e(tM,iFe),e(iFe,hFr),e(tM,pFr),e(tM,kU),e(kU,_Fr),e(tM,uFr),e(se,bFr),e(se,aM),e(aM,dFe),e(dFe,vFr),e(aM,FFr),e(aM,SU),e(SU,TFr),e(aM,MFr),e(se,EFr),e(se,nM),e(nM,cFe),e(cFe,CFr),e(nM,wFr),e(nM,RU),e(RU,AFr),e(nM,LFr),e(se,yFr),e(se,sM),e(sM,fFe),e(fFe,xFr),e(sM,$Fr),e(sM,PU),e(PU,kFr),e(sM,SFr),e(se,RFr),e(se,lM),e(lM,mFe),e(mFe,PFr),e(lM,BFr),e(lM,BU),e(BU,IFr),e(lM,NFr),e(se,qFr),e(se,iM),e(iM,gFe),e(gFe,jFr),e(iM,DFr),e(iM,IU),e(IU,GFr),e(iM,OFr),e(se,VFr),e(se,dM),e(dM,hFe),e(hFe,XFr),e(dM,zFr),e(dM,NU),e(NU,QFr),e(dM,WFr),e(se,HFr),e(se,cM),e(cM,pFe),e(pFe,UFr),e(cM,JFr),e(cM,qU),e(qU,YFr),e(cM,KFr),e(se,ZFr),e(se,fM),e(fM,_Fe),e(_Fe,eTr),e(fM,oTr),e(fM,jU),e(jU,rTr),e(fM,tTr),e(se,aTr),e(se,mM),e(mM,uFe),e(uFe,nTr),e(mM,sTr),e(mM,DU),e(DU,lTr),e(mM,iTr),e(se,dTr),e(se,gM),e(gM,bFe),e(bFe,cTr),e(gM,fTr),e(gM,GU),e(GU,mTr),e(gM,gTr),e(se,hTr),e(se,hM),e(hM,vFe),e(vFe,pTr),e(hM,_Tr),e(hM,OU),e(OU,uTr),e(hM,bTr),e(se,vTr),e(se,pM),e(pM,FFe),e(FFe,FTr),e(pM,TTr),e(pM,VU),e(VU,MTr),e(pM,ETr),e(se,CTr),e(se,_M),e(_M,TFe),e(TFe,wTr),e(_M,ATr),e(_M,XU),e(XU,LTr),e(_M,yTr),e(se,xTr),e(se,uM),e(uM,MFe),e(MFe,$Tr),e(uM,kTr),e(uM,zU),e(zU,STr),e(uM,RTr),e(se,PTr),e(se,bM),e(bM,EFe),e(EFe,BTr),e(bM,ITr),e(bM,QU),e(QU,NTr),e(bM,qTr),e(se,jTr),e(se,vM),e(vM,CFe),e(CFe,DTr),e(vM,GTr),e(vM,WU),e(WU,OTr),e(vM,VTr),e(se,XTr),e(se,FM),e(FM,wFe),e(wFe,zTr),e(FM,QTr),e(FM,HU),e(HU,WTr),e(FM,HTr),e(se,UTr),e(se,TM),e(TM,AFe),e(AFe,JTr),e(TM,YTr),e(TM,UU),e(UU,KTr),e(TM,ZTr),e(xr,e7r),M(MM,xr,null),b(f,OVe,u),b(f,dc,u),e(dc,EM),e(EM,LFe),M(I9,LFe,null),e(dc,o7r),e(dc,yFe),e(yFe,r7r),b(f,VVe,u),b(f,rr,u),M(N9,rr,null),e(rr,t7r),e(rr,cc),e(cc,a7r),e(cc,JU),e(JU,n7r),e(cc,s7r),e(cc,YU),e(YU,l7r),e(cc,i7r),e(rr,d7r),e(rr,q9),e(q9,c7r),e(q9,xFe),e(xFe,f7r),e(q9,m7r),e(rr,g7r),e(rr,Rt),M(j9,Rt,null),e(Rt,h7r),e(Rt,$Fe),e($Fe,p7r),e(Rt,_7r),e(Rt,fc),e(fc,u7r),e(fc,kFe),e(kFe,b7r),e(fc,v7r),e(fc,KU),e(KU,F7r),e(fc,T7r),e(Rt,M7r),M(CM,Rt,null),e(rr,E7r),e(rr,$r),M(D9,$r,null),e($r,C7r),e($r,SFe),e(SFe,w7r),e($r,A7r),e($r,ln),e(ln,L7r),e(ln,RFe),e(RFe,y7r),e(ln,x7r),e(ln,PFe),e(PFe,$7r),e(ln,k7r),e(ln,BFe),e(BFe,S7r),e(ln,R7r),e($r,P7r),e($r,Me),e(Me,wM),e(wM,IFe),e(IFe,B7r),e(wM,I7r),e(wM,ZU),e(ZU,N7r),e(wM,q7r),e(Me,j7r),e(Me,AM),e(AM,NFe),e(NFe,D7r),e(AM,G7r),e(AM,eJ),e(eJ,O7r),e(AM,V7r),e(Me,X7r),e(Me,LM),e(LM,qFe),e(qFe,z7r),e(LM,Q7r),e(LM,oJ),e(oJ,W7r),e(LM,H7r),e(Me,U7r),e(Me,yM),e(yM,jFe),e(jFe,J7r),e(yM,Y7r),e(yM,rJ),e(rJ,K7r),e(yM,Z7r),e(Me,eMr),e(Me,xM),e(xM,DFe),e(DFe,oMr),e(xM,rMr),e(xM,tJ),e(tJ,tMr),e(xM,aMr),e(Me,nMr),e(Me,$M),e($M,GFe),e(GFe,sMr),e($M,lMr),e($M,aJ),e(aJ,iMr),e($M,dMr),e(Me,cMr),e(Me,kM),e(kM,OFe),e(OFe,fMr),e(kM,mMr),e(kM,nJ),e(nJ,gMr),e(kM,hMr),e(Me,pMr),e(Me,SM),e(SM,VFe),e(VFe,_Mr),e(SM,uMr),e(SM,sJ),e(sJ,bMr),e(SM,vMr),e(Me,FMr),e(Me,RM),e(RM,XFe),e(XFe,TMr),e(RM,MMr),e(RM,lJ),e(lJ,EMr),e(RM,CMr),e(Me,wMr),e(Me,PM),e(PM,zFe),e(zFe,AMr),e(PM,LMr),e(PM,iJ),e(iJ,yMr),e(PM,xMr),e(Me,$Mr),e(Me,BM),e(BM,QFe),e(QFe,kMr),e(BM,SMr),e(BM,dJ),e(dJ,RMr),e(BM,PMr),e(Me,BMr),e(Me,IM),e(IM,WFe),e(WFe,IMr),e(IM,NMr),e(IM,cJ),e(cJ,qMr),e(IM,jMr),e(Me,DMr),e(Me,NM),e(NM,HFe),e(HFe,GMr),e(NM,OMr),e(NM,fJ),e(fJ,VMr),e(NM,XMr),e($r,zMr),M(qM,$r,null),b(f,XVe,u),b(f,mc,u),e(mc,jM),e(jM,UFe),M(G9,UFe,null),e(mc,QMr),e(mc,JFe),e(JFe,WMr),b(f,zVe,u),b(f,tr,u),M(O9,tr,null),e(tr,HMr),e(tr,gc),e(gc,UMr),e(gc,mJ),e(mJ,JMr),e(gc,YMr),e(gc,gJ),e(gJ,KMr),e(gc,ZMr),e(tr,eEr),e(tr,V9),e(V9,oEr),e(V9,YFe),e(YFe,rEr),e(V9,tEr),e(tr,aEr),e(tr,Pt),M(X9,Pt,null),e(Pt,nEr),e(Pt,KFe),e(KFe,sEr),e(Pt,lEr),e(Pt,hc),e(hc,iEr),e(hc,ZFe),e(ZFe,dEr),e(hc,cEr),e(hc,hJ),e(hJ,fEr),e(hc,mEr),e(Pt,gEr),M(DM,Pt,null),e(tr,hEr),e(tr,kr),M(z9,kr,null),e(kr,pEr),e(kr,eTe),e(eTe,_Er),e(kr,uEr),e(kr,dn),e(dn,bEr),e(dn,oTe),e(oTe,vEr),e(dn,FEr),e(dn,rTe),e(rTe,TEr),e(dn,MEr),e(dn,tTe),e(tTe,EEr),e(dn,CEr),e(kr,wEr),e(kr,rt),e(rt,GM),e(GM,aTe),e(aTe,AEr),e(GM,LEr),e(GM,pJ),e(pJ,yEr),e(GM,xEr),e(rt,$Er),e(rt,OM),e(OM,nTe),e(nTe,kEr),e(OM,SEr),e(OM,_J),e(_J,REr),e(OM,PEr),e(rt,BEr),e(rt,VM),e(VM,sTe),e(sTe,IEr),e(VM,NEr),e(VM,uJ),e(uJ,qEr),e(VM,jEr),e(rt,DEr),e(rt,XM),e(XM,lTe),e(lTe,GEr),e(XM,OEr),e(XM,bJ),e(bJ,VEr),e(XM,XEr),e(rt,zEr),e(rt,zM),e(zM,iTe),e(iTe,QEr),e(zM,WEr),e(zM,vJ),e(vJ,HEr),e(zM,UEr),e(kr,JEr),M(QM,kr,null),b(f,QVe,u),b(f,pc,u),e(pc,WM),e(WM,dTe),M(Q9,dTe,null),e(pc,YEr),e(pc,cTe),e(cTe,KEr),b(f,WVe,u),b(f,ar,u),M(W9,ar,null),e(ar,ZEr),e(ar,_c),e(_c,eCr),e(_c,FJ),e(FJ,oCr),e(_c,rCr),e(_c,TJ),e(TJ,tCr),e(_c,aCr),e(ar,nCr),e(ar,H9),e(H9,sCr),e(H9,fTe),e(fTe,lCr),e(H9,iCr),e(ar,dCr),e(ar,Bt),M(U9,Bt,null),e(Bt,cCr),e(Bt,mTe),e(mTe,fCr),e(Bt,mCr),e(Bt,uc),e(uc,gCr),e(uc,gTe),e(gTe,hCr),e(uc,pCr),e(uc,MJ),e(MJ,_Cr),e(uc,uCr),e(Bt,bCr),M(HM,Bt,null),e(ar,vCr),e(ar,Sr),M(J9,Sr,null),e(Sr,FCr),e(Sr,hTe),e(hTe,TCr),e(Sr,MCr),e(Sr,cn),e(cn,ECr),e(cn,pTe),e(pTe,CCr),e(cn,wCr),e(cn,_Te),e(_Te,ACr),e(cn,LCr),e(cn,uTe),e(uTe,yCr),e(cn,xCr),e(Sr,$Cr),e(Sr,ie),e(ie,UM),e(UM,bTe),e(bTe,kCr),e(UM,SCr),e(UM,EJ),e(EJ,RCr),e(UM,PCr),e(ie,BCr),e(ie,JM),e(JM,vTe),e(vTe,ICr),e(JM,NCr),e(JM,CJ),e(CJ,qCr),e(JM,jCr),e(ie,DCr),e(ie,YM),e(YM,FTe),e(FTe,GCr),e(YM,OCr),e(YM,wJ),e(wJ,VCr),e(YM,XCr),e(ie,zCr),e(ie,KM),e(KM,TTe),e(TTe,QCr),e(KM,WCr),e(KM,AJ),e(AJ,HCr),e(KM,UCr),e(ie,JCr),e(ie,ZM),e(ZM,MTe),e(MTe,YCr),e(ZM,KCr),e(ZM,LJ),e(LJ,ZCr),e(ZM,e3r),e(ie,o3r),e(ie,eE),e(eE,ETe),e(ETe,r3r),e(eE,t3r),e(eE,yJ),e(yJ,a3r),e(eE,n3r),e(ie,s3r),e(ie,oE),e(oE,CTe),e(CTe,l3r),e(oE,i3r),e(oE,xJ),e(xJ,d3r),e(oE,c3r),e(ie,f3r),e(ie,rE),e(rE,wTe),e(wTe,m3r),e(rE,g3r),e(rE,$J),e($J,h3r),e(rE,p3r),e(ie,_3r),e(ie,tE),e(tE,ATe),e(ATe,u3r),e(tE,b3r),e(tE,kJ),e(kJ,v3r),e(tE,F3r),e(ie,T3r),e(ie,aE),e(aE,LTe),e(LTe,M3r),e(aE,E3r),e(aE,SJ),e(SJ,C3r),e(aE,w3r),e(ie,A3r),e(ie,nE),e(nE,yTe),e(yTe,L3r),e(nE,y3r),e(nE,RJ),e(RJ,x3r),e(nE,$3r),e(ie,k3r),e(ie,sE),e(sE,xTe),e(xTe,S3r),e(sE,R3r),e(sE,PJ),e(PJ,P3r),e(sE,B3r),e(ie,I3r),e(ie,lE),e(lE,$Te),e($Te,N3r),e(lE,q3r),e(lE,BJ),e(BJ,j3r),e(lE,D3r),e(ie,G3r),e(ie,iE),e(iE,kTe),e(kTe,O3r),e(iE,V3r),e(iE,IJ),e(IJ,X3r),e(iE,z3r),e(ie,Q3r),e(ie,dE),e(dE,STe),e(STe,W3r),e(dE,H3r),e(dE,NJ),e(NJ,U3r),e(dE,J3r),e(ie,Y3r),e(ie,cE),e(cE,RTe),e(RTe,K3r),e(cE,Z3r),e(cE,qJ),e(qJ,e0r),e(cE,o0r),e(ie,r0r),e(ie,fE),e(fE,PTe),e(PTe,t0r),e(fE,a0r),e(fE,jJ),e(jJ,n0r),e(fE,s0r),e(ie,l0r),e(ie,mE),e(mE,BTe),e(BTe,i0r),e(mE,d0r),e(mE,DJ),e(DJ,c0r),e(mE,f0r),e(ie,m0r),e(ie,gE),e(gE,ITe),e(ITe,g0r),e(gE,h0r),e(gE,GJ),e(GJ,p0r),e(gE,_0r),e(ie,u0r),e(ie,hE),e(hE,NTe),e(NTe,b0r),e(hE,v0r),e(hE,OJ),e(OJ,F0r),e(hE,T0r),e(Sr,M0r),M(pE,Sr,null),b(f,HVe,u),b(f,bc,u),e(bc,_E),e(_E,qTe),M(Y9,qTe,null),e(bc,E0r),e(bc,jTe),e(jTe,C0r),b(f,UVe,u),b(f,nr,u),M(K9,nr,null),e(nr,w0r),e(nr,vc),e(vc,A0r),e(vc,VJ),e(VJ,L0r),e(vc,y0r),e(vc,XJ),e(XJ,x0r),e(vc,$0r),e(nr,k0r),e(nr,Z9),e(Z9,S0r),e(Z9,DTe),e(DTe,R0r),e(Z9,P0r),e(nr,B0r),e(nr,It),M(ex,It,null),e(It,I0r),e(It,GTe),e(GTe,N0r),e(It,q0r),e(It,Fc),e(Fc,j0r),e(Fc,OTe),e(OTe,D0r),e(Fc,G0r),e(Fc,zJ),e(zJ,O0r),e(Fc,V0r),e(It,X0r),M(uE,It,null),e(nr,z0r),e(nr,Rr),M(ox,Rr,null),e(Rr,Q0r),e(Rr,VTe),e(VTe,W0r),e(Rr,H0r),e(Rr,fn),e(fn,U0r),e(fn,XTe),e(XTe,J0r),e(fn,Y0r),e(fn,zTe),e(zTe,K0r),e(fn,Z0r),e(fn,QTe),e(QTe,ewr),e(fn,owr),e(Rr,rwr),e(Rr,ye),e(ye,bE),e(bE,WTe),e(WTe,twr),e(bE,awr),e(bE,QJ),e(QJ,nwr),e(bE,swr),e(ye,lwr),e(ye,vE),e(vE,HTe),e(HTe,iwr),e(vE,dwr),e(vE,WJ),e(WJ,cwr),e(vE,fwr),e(ye,mwr),e(ye,FE),e(FE,UTe),e(UTe,gwr),e(FE,hwr),e(FE,HJ),e(HJ,pwr),e(FE,_wr),e(ye,uwr),e(ye,TE),e(TE,JTe),e(JTe,bwr),e(TE,vwr),e(TE,UJ),e(UJ,Fwr),e(TE,Twr),e(ye,Mwr),e(ye,ME),e(ME,YTe),e(YTe,Ewr),e(ME,Cwr),e(ME,JJ),e(JJ,wwr),e(ME,Awr),e(ye,Lwr),e(ye,EE),e(EE,KTe),e(KTe,ywr),e(EE,xwr),e(EE,YJ),e(YJ,$wr),e(EE,kwr),e(ye,Swr),e(ye,CE),e(CE,ZTe),e(ZTe,Rwr),e(CE,Pwr),e(CE,KJ),e(KJ,Bwr),e(CE,Iwr),e(ye,Nwr),e(ye,wE),e(wE,e7e),e(e7e,qwr),e(wE,jwr),e(wE,ZJ),e(ZJ,Dwr),e(wE,Gwr),e(ye,Owr),e(ye,AE),e(AE,o7e),e(o7e,Vwr),e(AE,Xwr),e(AE,eY),e(eY,zwr),e(AE,Qwr),e(ye,Wwr),e(ye,LE),e(LE,r7e),e(r7e,Hwr),e(LE,Uwr),e(LE,oY),e(oY,Jwr),e(LE,Ywr),e(Rr,Kwr),M(yE,Rr,null),b(f,JVe,u),b(f,Tc,u),e(Tc,xE),e(xE,t7e),M(rx,t7e,null),e(Tc,Zwr),e(Tc,a7e),e(a7e,eAr),b(f,YVe,u),b(f,sr,u),M(tx,sr,null),e(sr,oAr),e(sr,Mc),e(Mc,rAr),e(Mc,rY),e(rY,tAr),e(Mc,aAr),e(Mc,tY),e(tY,nAr),e(Mc,sAr),e(sr,lAr),e(sr,ax),e(ax,iAr),e(ax,n7e),e(n7e,dAr),e(ax,cAr),e(sr,fAr),e(sr,Nt),M(nx,Nt,null),e(Nt,mAr),e(Nt,s7e),e(s7e,gAr),e(Nt,hAr),e(Nt,Ec),e(Ec,pAr),e(Ec,l7e),e(l7e,_Ar),e(Ec,uAr),e(Ec,aY),e(aY,bAr),e(Ec,vAr),e(Nt,FAr),M($E,Nt,null),e(sr,TAr),e(sr,Pr),M(sx,Pr,null),e(Pr,MAr),e(Pr,i7e),e(i7e,EAr),e(Pr,CAr),e(Pr,mn),e(mn,wAr),e(mn,d7e),e(d7e,AAr),e(mn,LAr),e(mn,c7e),e(c7e,yAr),e(mn,xAr),e(mn,f7e),e(f7e,$Ar),e(mn,kAr),e(Pr,SAr),e(Pr,te),e(te,kE),e(kE,m7e),e(m7e,RAr),e(kE,PAr),e(kE,nY),e(nY,BAr),e(kE,IAr),e(te,NAr),e(te,SE),e(SE,g7e),e(g7e,qAr),e(SE,jAr),e(SE,sY),e(sY,DAr),e(SE,GAr),e(te,OAr),e(te,RE),e(RE,h7e),e(h7e,VAr),e(RE,XAr),e(RE,lY),e(lY,zAr),e(RE,QAr),e(te,WAr),e(te,PE),e(PE,p7e),e(p7e,HAr),e(PE,UAr),e(PE,iY),e(iY,JAr),e(PE,YAr),e(te,KAr),e(te,BE),e(BE,_7e),e(_7e,ZAr),e(BE,e6r),e(BE,dY),e(dY,o6r),e(BE,r6r),e(te,t6r),e(te,IE),e(IE,u7e),e(u7e,a6r),e(IE,n6r),e(IE,cY),e(cY,s6r),e(IE,l6r),e(te,i6r),e(te,NE),e(NE,b7e),e(b7e,d6r),e(NE,c6r),e(NE,fY),e(fY,f6r),e(NE,m6r),e(te,g6r),e(te,qE),e(qE,v7e),e(v7e,h6r),e(qE,p6r),e(qE,mY),e(mY,_6r),e(qE,u6r),e(te,b6r),e(te,jE),e(jE,F7e),e(F7e,v6r),e(jE,F6r),e(jE,gY),e(gY,T6r),e(jE,M6r),e(te,E6r),e(te,DE),e(DE,T7e),e(T7e,C6r),e(DE,w6r),e(DE,hY),e(hY,A6r),e(DE,L6r),e(te,y6r),e(te,GE),e(GE,M7e),e(M7e,x6r),e(GE,$6r),e(GE,pY),e(pY,k6r),e(GE,S6r),e(te,R6r),e(te,OE),e(OE,E7e),e(E7e,P6r),e(OE,B6r),e(OE,_Y),e(_Y,I6r),e(OE,N6r),e(te,q6r),e(te,VE),e(VE,C7e),e(C7e,j6r),e(VE,D6r),e(VE,uY),e(uY,G6r),e(VE,O6r),e(te,V6r),e(te,XE),e(XE,w7e),e(w7e,X6r),e(XE,z6r),e(XE,bY),e(bY,Q6r),e(XE,W6r),e(te,H6r),e(te,zE),e(zE,A7e),e(A7e,U6r),e(zE,J6r),e(zE,vY),e(vY,Y6r),e(zE,K6r),e(te,Z6r),e(te,QE),e(QE,L7e),e(L7e,eLr),e(QE,oLr),e(QE,FY),e(FY,rLr),e(QE,tLr),e(te,aLr),e(te,WE),e(WE,y7e),e(y7e,nLr),e(WE,sLr),e(WE,TY),e(TY,lLr),e(WE,iLr),e(te,dLr),e(te,HE),e(HE,x7e),e(x7e,cLr),e(HE,fLr),e(HE,MY),e(MY,mLr),e(HE,gLr),e(te,hLr),e(te,UE),e(UE,$7e),e($7e,pLr),e(UE,_Lr),e(UE,EY),e(EY,uLr),e(UE,bLr),e(te,vLr),e(te,JE),e(JE,k7e),e(k7e,FLr),e(JE,TLr),e(JE,CY),e(CY,MLr),e(JE,ELr),e(te,CLr),e(te,YE),e(YE,S7e),e(S7e,wLr),e(YE,ALr),e(YE,wY),e(wY,LLr),e(YE,yLr),e(te,xLr),e(te,KE),e(KE,R7e),e(R7e,$Lr),e(KE,kLr),e(KE,AY),e(AY,SLr),e(KE,RLr),e(te,PLr),e(te,ZE),e(ZE,P7e),e(P7e,BLr),e(ZE,ILr),e(ZE,LY),e(LY,NLr),e(ZE,qLr),e(te,jLr),e(te,eC),e(eC,B7e),e(B7e,DLr),e(eC,GLr),e(eC,yY),e(yY,OLr),e(eC,VLr),e(te,XLr),e(te,oC),e(oC,I7e),e(I7e,zLr),e(oC,QLr),e(oC,xY),e(xY,WLr),e(oC,HLr),e(te,ULr),e(te,rC),e(rC,N7e),e(N7e,JLr),e(rC,YLr),e(rC,$Y),e($Y,KLr),e(rC,ZLr),e(Pr,eyr),M(tC,Pr,null),b(f,KVe,u),b(f,Cc,u),e(Cc,aC),e(aC,q7e),M(lx,q7e,null),e(Cc,oyr),e(Cc,j7e),e(j7e,ryr),b(f,ZVe,u),b(f,lr,u),M(ix,lr,null),e(lr,tyr),e(lr,wc),e(wc,ayr),e(wc,kY),e(kY,nyr),e(wc,syr),e(wc,SY),e(SY,lyr),e(wc,iyr),e(lr,dyr),e(lr,dx),e(dx,cyr),e(dx,D7e),e(D7e,fyr),e(dx,myr),e(lr,gyr),e(lr,qt),M(cx,qt,null),e(qt,hyr),e(qt,G7e),e(G7e,pyr),e(qt,_yr),e(qt,Ac),e(Ac,uyr),e(Ac,O7e),e(O7e,byr),e(Ac,vyr),e(Ac,RY),e(RY,Fyr),e(Ac,Tyr),e(qt,Myr),M(nC,qt,null),e(lr,Eyr),e(lr,Br),M(fx,Br,null),e(Br,Cyr),e(Br,V7e),e(V7e,wyr),e(Br,Ayr),e(Br,gn),e(gn,Lyr),e(gn,X7e),e(X7e,yyr),e(gn,xyr),e(gn,z7e),e(z7e,$yr),e(gn,kyr),e(gn,Q7e),e(Q7e,Syr),e(gn,Ryr),e(Br,Pyr),e(Br,_e),e(_e,sC),e(sC,W7e),e(W7e,Byr),e(sC,Iyr),e(sC,PY),e(PY,Nyr),e(sC,qyr),e(_e,jyr),e(_e,lC),e(lC,H7e),e(H7e,Dyr),e(lC,Gyr),e(lC,BY),e(BY,Oyr),e(lC,Vyr),e(_e,Xyr),e(_e,iC),e(iC,U7e),e(U7e,zyr),e(iC,Qyr),e(iC,IY),e(IY,Wyr),e(iC,Hyr),e(_e,Uyr),e(_e,dC),e(dC,J7e),e(J7e,Jyr),e(dC,Yyr),e(dC,NY),e(NY,Kyr),e(dC,Zyr),e(_e,e8r),e(_e,cC),e(cC,Y7e),e(Y7e,o8r),e(cC,r8r),e(cC,qY),e(qY,t8r),e(cC,a8r),e(_e,n8r),e(_e,fC),e(fC,K7e),e(K7e,s8r),e(fC,l8r),e(fC,jY),e(jY,i8r),e(fC,d8r),e(_e,c8r),e(_e,mC),e(mC,Z7e),e(Z7e,f8r),e(mC,m8r),e(mC,DY),e(DY,g8r),e(mC,h8r),e(_e,p8r),e(_e,gC),e(gC,eMe),e(eMe,_8r),e(gC,u8r),e(gC,GY),e(GY,b8r),e(gC,v8r),e(_e,F8r),e(_e,hC),e(hC,oMe),e(oMe,T8r),e(hC,M8r),e(hC,OY),e(OY,E8r),e(hC,C8r),e(_e,w8r),e(_e,pC),e(pC,rMe),e(rMe,A8r),e(pC,L8r),e(pC,VY),e(VY,y8r),e(pC,x8r),e(_e,$8r),e(_e,_C),e(_C,tMe),e(tMe,k8r),e(_C,S8r),e(_C,XY),e(XY,R8r),e(_C,P8r),e(_e,B8r),e(_e,uC),e(uC,aMe),e(aMe,I8r),e(uC,N8r),e(uC,zY),e(zY,q8r),e(uC,j8r),e(_e,D8r),e(_e,bC),e(bC,nMe),e(nMe,G8r),e(bC,O8r),e(bC,QY),e(QY,V8r),e(bC,X8r),e(_e,z8r),e(_e,vC),e(vC,sMe),e(sMe,Q8r),e(vC,W8r),e(vC,WY),e(WY,H8r),e(vC,U8r),e(_e,J8r),e(_e,FC),e(FC,lMe),e(lMe,Y8r),e(FC,K8r),e(FC,HY),e(HY,Z8r),e(FC,e9r),e(_e,o9r),e(_e,TC),e(TC,iMe),e(iMe,r9r),e(TC,t9r),e(TC,UY),e(UY,a9r),e(TC,n9r),e(_e,s9r),e(_e,MC),e(MC,dMe),e(dMe,l9r),e(MC,i9r),e(MC,JY),e(JY,d9r),e(MC,c9r),e(Br,f9r),M(EC,Br,null),b(f,eXe,u),b(f,Lc,u),e(Lc,CC),e(CC,cMe),M(mx,cMe,null),e(Lc,m9r),e(Lc,fMe),e(fMe,g9r),b(f,oXe,u),b(f,ir,u),M(gx,ir,null),e(ir,h9r),e(ir,yc),e(yc,p9r),e(yc,YY),e(YY,_9r),e(yc,u9r),e(yc,KY),e(KY,b9r),e(yc,v9r),e(ir,F9r),e(ir,hx),e(hx,T9r),e(hx,mMe),e(mMe,M9r),e(hx,E9r),e(ir,C9r),e(ir,jt),M(px,jt,null),e(jt,w9r),e(jt,gMe),e(gMe,A9r),e(jt,L9r),e(jt,xc),e(xc,y9r),e(xc,hMe),e(hMe,x9r),e(xc,$9r),e(xc,ZY),e(ZY,k9r),e(xc,S9r),e(jt,R9r),M(wC,jt,null),e(ir,P9r),e(ir,Ir),M(_x,Ir,null),e(Ir,B9r),e(Ir,pMe),e(pMe,I9r),e(Ir,N9r),e(Ir,hn),e(hn,q9r),e(hn,_Me),e(_Me,j9r),e(hn,D9r),e(hn,uMe),e(uMe,G9r),e(hn,O9r),e(hn,bMe),e(bMe,V9r),e(hn,X9r),e(Ir,z9r),e(Ir,ux),e(ux,AC),e(AC,vMe),e(vMe,Q9r),e(AC,W9r),e(AC,eK),e(eK,H9r),e(AC,U9r),e(ux,J9r),e(ux,LC),e(LC,FMe),e(FMe,Y9r),e(LC,K9r),e(LC,oK),e(oK,Z9r),e(LC,exr),e(Ir,oxr),M(yC,Ir,null),b(f,rXe,u),b(f,$c,u),e($c,xC),e(xC,TMe),M(bx,TMe,null),e($c,rxr),e($c,MMe),e(MMe,txr),b(f,tXe,u),b(f,dr,u),M(vx,dr,null),e(dr,axr),e(dr,kc),e(kc,nxr),e(kc,rK),e(rK,sxr),e(kc,lxr),e(kc,tK),e(tK,ixr),e(kc,dxr),e(dr,cxr),e(dr,Fx),e(Fx,fxr),e(Fx,EMe),e(EMe,mxr),e(Fx,gxr),e(dr,hxr),e(dr,Dt),M(Tx,Dt,null),e(Dt,pxr),e(Dt,CMe),e(CMe,_xr),e(Dt,uxr),e(Dt,Sc),e(Sc,bxr),e(Sc,wMe),e(wMe,vxr),e(Sc,Fxr),e(Sc,aK),e(aK,Txr),e(Sc,Mxr),e(Dt,Exr),M($C,Dt,null),e(dr,Cxr),e(dr,Nr),M(Mx,Nr,null),e(Nr,wxr),e(Nr,AMe),e(AMe,Axr),e(Nr,Lxr),e(Nr,pn),e(pn,yxr),e(pn,LMe),e(LMe,xxr),e(pn,$xr),e(pn,yMe),e(yMe,kxr),e(pn,Sxr),e(pn,xMe),e(xMe,Rxr),e(pn,Pxr),e(Nr,Bxr),e(Nr,$Me),e($Me,kC),e(kC,kMe),e(kMe,Ixr),e(kC,Nxr),e(kC,nK),e(nK,qxr),e(kC,jxr),e(Nr,Dxr),M(SC,Nr,null),b(f,aXe,u),b(f,Rc,u),e(Rc,RC),e(RC,SMe),M(Ex,SMe,null),e(Rc,Gxr),e(Rc,RMe),e(RMe,Oxr),b(f,nXe,u),b(f,cr,u),M(Cx,cr,null),e(cr,Vxr),e(cr,Pc),e(Pc,Xxr),e(Pc,sK),e(sK,zxr),e(Pc,Qxr),e(Pc,lK),e(lK,Wxr),e(Pc,Hxr),e(cr,Uxr),e(cr,wx),e(wx,Jxr),e(wx,PMe),e(PMe,Yxr),e(wx,Kxr),e(cr,Zxr),e(cr,Gt),M(Ax,Gt,null),e(Gt,e$r),e(Gt,BMe),e(BMe,o$r),e(Gt,r$r),e(Gt,Bc),e(Bc,t$r),e(Bc,IMe),e(IMe,a$r),e(Bc,n$r),e(Bc,iK),e(iK,s$r),e(Bc,l$r),e(Gt,i$r),M(PC,Gt,null),e(cr,d$r),e(cr,qr),M(Lx,qr,null),e(qr,c$r),e(qr,NMe),e(NMe,f$r),e(qr,m$r),e(qr,_n),e(_n,g$r),e(_n,qMe),e(qMe,h$r),e(_n,p$r),e(_n,jMe),e(jMe,_$r),e(_n,u$r),e(_n,DMe),e(DMe,b$r),e(_n,v$r),e(qr,F$r),e(qr,de),e(de,BC),e(BC,GMe),e(GMe,T$r),e(BC,M$r),e(BC,dK),e(dK,E$r),e(BC,C$r),e(de,w$r),e(de,IC),e(IC,OMe),e(OMe,A$r),e(IC,L$r),e(IC,cK),e(cK,y$r),e(IC,x$r),e(de,$$r),e(de,NC),e(NC,VMe),e(VMe,k$r),e(NC,S$r),e(NC,fK),e(fK,R$r),e(NC,P$r),e(de,B$r),e(de,qC),e(qC,XMe),e(XMe,I$r),e(qC,N$r),e(qC,mK),e(mK,q$r),e(qC,j$r),e(de,D$r),e(de,jC),e(jC,zMe),e(zMe,G$r),e(jC,O$r),e(jC,gK),e(gK,V$r),e(jC,X$r),e(de,z$r),e(de,DC),e(DC,QMe),e(QMe,Q$r),e(DC,W$r),e(DC,hK),e(hK,H$r),e(DC,U$r),e(de,J$r),e(de,GC),e(GC,WMe),e(WMe,Y$r),e(GC,K$r),e(GC,pK),e(pK,Z$r),e(GC,ekr),e(de,okr),e(de,OC),e(OC,HMe),e(HMe,rkr),e(OC,tkr),e(OC,_K),e(_K,akr),e(OC,nkr),e(de,skr),e(de,VC),e(VC,UMe),e(UMe,lkr),e(VC,ikr),e(VC,uK),e(uK,dkr),e(VC,ckr),e(de,fkr),e(de,XC),e(XC,JMe),e(JMe,mkr),e(XC,gkr),e(XC,bK),e(bK,hkr),e(XC,pkr),e(de,_kr),e(de,zC),e(zC,YMe),e(YMe,ukr),e(zC,bkr),e(zC,vK),e(vK,vkr),e(zC,Fkr),e(de,Tkr),e(de,QC),e(QC,KMe),e(KMe,Mkr),e(QC,Ekr),e(QC,FK),e(FK,Ckr),e(QC,wkr),e(de,Akr),e(de,WC),e(WC,ZMe),e(ZMe,Lkr),e(WC,ykr),e(WC,TK),e(TK,xkr),e(WC,$kr),e(de,kkr),e(de,HC),e(HC,eEe),e(eEe,Skr),e(HC,Rkr),e(HC,MK),e(MK,Pkr),e(HC,Bkr),e(de,Ikr),e(de,UC),e(UC,oEe),e(oEe,Nkr),e(UC,qkr),e(UC,EK),e(EK,jkr),e(UC,Dkr),e(de,Gkr),e(de,JC),e(JC,rEe),e(rEe,Okr),e(JC,Vkr),e(JC,CK),e(CK,Xkr),e(JC,zkr),e(de,Qkr),e(de,YC),e(YC,tEe),e(tEe,Wkr),e(YC,Hkr),e(YC,wK),e(wK,Ukr),e(YC,Jkr),e(de,Ykr),e(de,KC),e(KC,aEe),e(aEe,Kkr),e(KC,Zkr),e(KC,AK),e(AK,eSr),e(KC,oSr),e(de,rSr),e(de,ZC),e(ZC,nEe),e(nEe,tSr),e(ZC,aSr),e(ZC,LK),e(LK,nSr),e(ZC,sSr),e(de,lSr),e(de,e3),e(e3,sEe),e(sEe,iSr),e(e3,dSr),e(e3,yK),e(yK,cSr),e(e3,fSr),e(qr,mSr),M(o3,qr,null),b(f,sXe,u),b(f,Ic,u),e(Ic,r3),e(r3,lEe),M(yx,lEe,null),e(Ic,gSr),e(Ic,iEe),e(iEe,hSr),b(f,lXe,u),b(f,fr,u),M(xx,fr,null),e(fr,pSr),e(fr,Nc),e(Nc,_Sr),e(Nc,xK),e(xK,uSr),e(Nc,bSr),e(Nc,$K),e($K,vSr),e(Nc,FSr),e(fr,TSr),e(fr,$x),e($x,MSr),e($x,dEe),e(dEe,ESr),e($x,CSr),e(fr,wSr),e(fr,Ot),M(kx,Ot,null),e(Ot,ASr),e(Ot,cEe),e(cEe,LSr),e(Ot,ySr),e(Ot,qc),e(qc,xSr),e(qc,fEe),e(fEe,$Sr),e(qc,kSr),e(qc,kK),e(kK,SSr),e(qc,RSr),e(Ot,PSr),M(t3,Ot,null),e(fr,BSr),e(fr,jr),M(Sx,jr,null),e(jr,ISr),e(jr,mEe),e(mEe,NSr),e(jr,qSr),e(jr,un),e(un,jSr),e(un,gEe),e(gEe,DSr),e(un,GSr),e(un,hEe),e(hEe,OSr),e(un,VSr),e(un,pEe),e(pEe,XSr),e(un,zSr),e(jr,QSr),e(jr,ce),e(ce,a3),e(a3,_Ee),e(_Ee,WSr),e(a3,HSr),e(a3,SK),e(SK,USr),e(a3,JSr),e(ce,YSr),e(ce,n3),e(n3,uEe),e(uEe,KSr),e(n3,ZSr),e(n3,RK),e(RK,eRr),e(n3,oRr),e(ce,rRr),e(ce,s3),e(s3,bEe),e(bEe,tRr),e(s3,aRr),e(s3,PK),e(PK,nRr),e(s3,sRr),e(ce,lRr),e(ce,l3),e(l3,vEe),e(vEe,iRr),e(l3,dRr),e(l3,BK),e(BK,cRr),e(l3,fRr),e(ce,mRr),e(ce,i3),e(i3,FEe),e(FEe,gRr),e(i3,hRr),e(i3,IK),e(IK,pRr),e(i3,_Rr),e(ce,uRr),e(ce,d3),e(d3,TEe),e(TEe,bRr),e(d3,vRr),e(d3,NK),e(NK,FRr),e(d3,TRr),e(ce,MRr),e(ce,c3),e(c3,MEe),e(MEe,ERr),e(c3,CRr),e(c3,qK),e(qK,wRr),e(c3,ARr),e(ce,LRr),e(ce,f3),e(f3,EEe),e(EEe,yRr),e(f3,xRr),e(f3,jK),e(jK,$Rr),e(f3,kRr),e(ce,SRr),e(ce,m3),e(m3,CEe),e(CEe,RRr),e(m3,PRr),e(m3,DK),e(DK,BRr),e(m3,IRr),e(ce,NRr),e(ce,g3),e(g3,wEe),e(wEe,qRr),e(g3,jRr),e(g3,GK),e(GK,DRr),e(g3,GRr),e(ce,ORr),e(ce,h3),e(h3,AEe),e(AEe,VRr),e(h3,XRr),e(h3,OK),e(OK,zRr),e(h3,QRr),e(ce,WRr),e(ce,p3),e(p3,LEe),e(LEe,HRr),e(p3,URr),e(p3,VK),e(VK,JRr),e(p3,YRr),e(ce,KRr),e(ce,_3),e(_3,yEe),e(yEe,ZRr),e(_3,ePr),e(_3,XK),e(XK,oPr),e(_3,rPr),e(ce,tPr),e(ce,u3),e(u3,xEe),e(xEe,aPr),e(u3,nPr),e(u3,zK),e(zK,sPr),e(u3,lPr),e(ce,iPr),e(ce,b3),e(b3,$Ee),e($Ee,dPr),e(b3,cPr),e(b3,QK),e(QK,fPr),e(b3,mPr),e(ce,gPr),e(ce,v3),e(v3,kEe),e(kEe,hPr),e(v3,pPr),e(v3,WK),e(WK,_Pr),e(v3,uPr),e(ce,bPr),e(ce,F3),e(F3,SEe),e(SEe,vPr),e(F3,FPr),e(F3,HK),e(HK,TPr),e(F3,MPr),e(ce,EPr),e(ce,T3),e(T3,REe),e(REe,CPr),e(T3,wPr),e(T3,UK),e(UK,APr),e(T3,LPr),e(ce,yPr),e(ce,M3),e(M3,PEe),e(PEe,xPr),e(M3,$Pr),e(M3,JK),e(JK,kPr),e(M3,SPr),e(ce,RPr),e(ce,E3),e(E3,BEe),e(BEe,PPr),e(E3,BPr),e(E3,YK),e(YK,IPr),e(E3,NPr),e(jr,qPr),M(C3,jr,null),b(f,iXe,u),b(f,jc,u),e(jc,w3),e(w3,IEe),M(Rx,IEe,null),e(jc,jPr),e(jc,NEe),e(NEe,DPr),b(f,dXe,u),b(f,mr,u),M(Px,mr,null),e(mr,GPr),e(mr,Dc),e(Dc,OPr),e(Dc,KK),e(KK,VPr),e(Dc,XPr),e(Dc,ZK),e(ZK,zPr),e(Dc,QPr),e(mr,WPr),e(mr,Bx),e(Bx,HPr),e(Bx,qEe),e(qEe,UPr),e(Bx,JPr),e(mr,YPr),e(mr,Vt),M(Ix,Vt,null),e(Vt,KPr),e(Vt,jEe),e(jEe,ZPr),e(Vt,eBr),e(Vt,Gc),e(Gc,oBr),e(Gc,DEe),e(DEe,rBr),e(Gc,tBr),e(Gc,eZ),e(eZ,aBr),e(Gc,nBr),e(Vt,sBr),M(A3,Vt,null),e(mr,lBr),e(mr,Dr),M(Nx,Dr,null),e(Dr,iBr),e(Dr,GEe),e(GEe,dBr),e(Dr,cBr),e(Dr,bn),e(bn,fBr),e(bn,OEe),e(OEe,mBr),e(bn,gBr),e(bn,VEe),e(VEe,hBr),e(bn,pBr),e(bn,XEe),e(XEe,_Br),e(bn,uBr),e(Dr,bBr),e(Dr,zEe),e(zEe,L3),e(L3,QEe),e(QEe,vBr),e(L3,FBr),e(L3,oZ),e(oZ,TBr),e(L3,MBr),e(Dr,EBr),M(y3,Dr,null),b(f,cXe,u),b(f,Oc,u),e(Oc,x3),e(x3,WEe),M(qx,WEe,null),e(Oc,CBr),e(Oc,HEe),e(HEe,wBr),b(f,fXe,u),b(f,gr,u),M(jx,gr,null),e(gr,ABr),e(gr,Vc),e(Vc,LBr),e(Vc,rZ),e(rZ,yBr),e(Vc,xBr),e(Vc,tZ),e(tZ,$Br),e(Vc,kBr),e(gr,SBr),e(gr,Dx),e(Dx,RBr),e(Dx,UEe),e(UEe,PBr),e(Dx,BBr),e(gr,IBr),e(gr,Xt),M(Gx,Xt,null),e(Xt,NBr),e(Xt,JEe),e(JEe,qBr),e(Xt,jBr),e(Xt,Xc),e(Xc,DBr),e(Xc,YEe),e(YEe,GBr),e(Xc,OBr),e(Xc,aZ),e(aZ,VBr),e(Xc,XBr),e(Xt,zBr),M($3,Xt,null),e(gr,QBr),e(gr,Gr),M(Ox,Gr,null),e(Gr,WBr),e(Gr,KEe),e(KEe,HBr),e(Gr,UBr),e(Gr,vn),e(vn,JBr),e(vn,ZEe),e(ZEe,YBr),e(vn,KBr),e(vn,eCe),e(eCe,ZBr),e(vn,eIr),e(vn,oCe),e(oCe,oIr),e(vn,rIr),e(Gr,tIr),e(Gr,rCe),e(rCe,k3),e(k3,tCe),e(tCe,aIr),e(k3,nIr),e(k3,nZ),e(nZ,sIr),e(k3,lIr),e(Gr,iIr),M(S3,Gr,null),b(f,mXe,u),b(f,zc,u),e(zc,R3),e(R3,aCe),M(Vx,aCe,null),e(zc,dIr),e(zc,nCe),e(nCe,cIr),b(f,gXe,u),b(f,hr,u),M(Xx,hr,null),e(hr,fIr),e(hr,Qc),e(Qc,mIr),e(Qc,sZ),e(sZ,gIr),e(Qc,hIr),e(Qc,lZ),e(lZ,pIr),e(Qc,_Ir),e(hr,uIr),e(hr,zx),e(zx,bIr),e(zx,sCe),e(sCe,vIr),e(zx,FIr),e(hr,TIr),e(hr,zt),M(Qx,zt,null),e(zt,MIr),e(zt,lCe),e(lCe,EIr),e(zt,CIr),e(zt,Wc),e(Wc,wIr),e(Wc,iCe),e(iCe,AIr),e(Wc,LIr),e(Wc,iZ),e(iZ,yIr),e(Wc,xIr),e(zt,$Ir),M(P3,zt,null),e(hr,kIr),e(hr,Or),M(Wx,Or,null),e(Or,SIr),e(Or,dCe),e(dCe,RIr),e(Or,PIr),e(Or,Fn),e(Fn,BIr),e(Fn,cCe),e(cCe,IIr),e(Fn,NIr),e(Fn,fCe),e(fCe,qIr),e(Fn,jIr),e(Fn,mCe),e(mCe,DIr),e(Fn,GIr),e(Or,OIr),e(Or,oe),e(oe,B3),e(B3,gCe),e(gCe,VIr),e(B3,XIr),e(B3,dZ),e(dZ,zIr),e(B3,QIr),e(oe,WIr),e(oe,I3),e(I3,hCe),e(hCe,HIr),e(I3,UIr),e(I3,cZ),e(cZ,JIr),e(I3,YIr),e(oe,KIr),e(oe,N3),e(N3,pCe),e(pCe,ZIr),e(N3,eNr),e(N3,fZ),e(fZ,oNr),e(N3,rNr),e(oe,tNr),e(oe,q3),e(q3,_Ce),e(_Ce,aNr),e(q3,nNr),e(q3,mZ),e(mZ,sNr),e(q3,lNr),e(oe,iNr),e(oe,j3),e(j3,uCe),e(uCe,dNr),e(j3,cNr),e(j3,gZ),e(gZ,fNr),e(j3,mNr),e(oe,gNr),e(oe,D3),e(D3,bCe),e(bCe,hNr),e(D3,pNr),e(D3,hZ),e(hZ,_Nr),e(D3,uNr),e(oe,bNr),e(oe,G3),e(G3,vCe),e(vCe,vNr),e(G3,FNr),e(G3,pZ),e(pZ,TNr),e(G3,MNr),e(oe,ENr),e(oe,O3),e(O3,FCe),e(FCe,CNr),e(O3,wNr),e(O3,_Z),e(_Z,ANr),e(O3,LNr),e(oe,yNr),e(oe,V3),e(V3,TCe),e(TCe,xNr),e(V3,$Nr),e(V3,uZ),e(uZ,kNr),e(V3,SNr),e(oe,RNr),e(oe,X3),e(X3,MCe),e(MCe,PNr),e(X3,BNr),e(X3,bZ),e(bZ,INr),e(X3,NNr),e(oe,qNr),e(oe,z3),e(z3,ECe),e(ECe,jNr),e(z3,DNr),e(z3,vZ),e(vZ,GNr),e(z3,ONr),e(oe,VNr),e(oe,Q3),e(Q3,CCe),e(CCe,XNr),e(Q3,zNr),e(Q3,FZ),e(FZ,QNr),e(Q3,WNr),e(oe,HNr),e(oe,W3),e(W3,wCe),e(wCe,UNr),e(W3,JNr),e(W3,TZ),e(TZ,YNr),e(W3,KNr),e(oe,ZNr),e(oe,H3),e(H3,ACe),e(ACe,eqr),e(H3,oqr),e(H3,MZ),e(MZ,rqr),e(H3,tqr),e(oe,aqr),e(oe,U3),e(U3,LCe),e(LCe,nqr),e(U3,sqr),e(U3,EZ),e(EZ,lqr),e(U3,iqr),e(oe,dqr),e(oe,J3),e(J3,yCe),e(yCe,cqr),e(J3,fqr),e(J3,CZ),e(CZ,mqr),e(J3,gqr),e(oe,hqr),e(oe,Y3),e(Y3,xCe),e(xCe,pqr),e(Y3,_qr),e(Y3,wZ),e(wZ,uqr),e(Y3,bqr),e(oe,vqr),e(oe,K3),e(K3,$Ce),e($Ce,Fqr),e(K3,Tqr),e(K3,AZ),e(AZ,Mqr),e(K3,Eqr),e(oe,Cqr),e(oe,Z3),e(Z3,kCe),e(kCe,wqr),e(Z3,Aqr),e(Z3,LZ),e(LZ,Lqr),e(Z3,yqr),e(oe,xqr),e(oe,e0),e(e0,SCe),e(SCe,$qr),e(e0,kqr),e(e0,yZ),e(yZ,Sqr),e(e0,Rqr),e(oe,Pqr),e(oe,o0),e(o0,RCe),e(RCe,Bqr),e(o0,Iqr),e(o0,xZ),e(xZ,Nqr),e(o0,qqr),e(oe,jqr),e(oe,r0),e(r0,PCe),e(PCe,Dqr),e(r0,Gqr),e(r0,$Z),e($Z,Oqr),e(r0,Vqr),e(oe,Xqr),e(oe,t0),e(t0,BCe),e(BCe,zqr),e(t0,Qqr),e(t0,kZ),e(kZ,Wqr),e(t0,Hqr),e(oe,Uqr),e(oe,a0),e(a0,ICe),e(ICe,Jqr),e(a0,Yqr),e(a0,SZ),e(SZ,Kqr),e(a0,Zqr),e(oe,ejr),e(oe,n0),e(n0,NCe),e(NCe,ojr),e(n0,rjr),e(n0,RZ),e(RZ,tjr),e(n0,ajr),e(oe,njr),e(oe,s0),e(s0,qCe),e(qCe,sjr),e(s0,ljr),e(s0,PZ),e(PZ,ijr),e(s0,djr),e(oe,cjr),e(oe,l0),e(l0,jCe),e(jCe,fjr),e(l0,mjr),e(l0,BZ),e(BZ,gjr),e(l0,hjr),e(Or,pjr),M(i0,Or,null),b(f,hXe,u),b(f,Hc,u),e(Hc,d0),e(d0,DCe),M(Hx,DCe,null),e(Hc,_jr),e(Hc,GCe),e(GCe,ujr),b(f,pXe,u),b(f,pr,u),M(Ux,pr,null),e(pr,bjr),e(pr,Uc),e(Uc,vjr),e(Uc,IZ),e(IZ,Fjr),e(Uc,Tjr),e(Uc,NZ),e(NZ,Mjr),e(Uc,Ejr),e(pr,Cjr),e(pr,Jx),e(Jx,wjr),e(Jx,OCe),e(OCe,Ajr),e(Jx,Ljr),e(pr,yjr),e(pr,Qt),M(Yx,Qt,null),e(Qt,xjr),e(Qt,VCe),e(VCe,$jr),e(Qt,kjr),e(Qt,Jc),e(Jc,Sjr),e(Jc,XCe),e(XCe,Rjr),e(Jc,Pjr),e(Jc,qZ),e(qZ,Bjr),e(Jc,Ijr),e(Qt,Njr),M(c0,Qt,null),e(pr,qjr),e(pr,Vr),M(Kx,Vr,null),e(Vr,jjr),e(Vr,zCe),e(zCe,Djr),e(Vr,Gjr),e(Vr,Tn),e(Tn,Ojr),e(Tn,QCe),e(QCe,Vjr),e(Tn,Xjr),e(Tn,WCe),e(WCe,zjr),e(Tn,Qjr),e(Tn,HCe),e(HCe,Wjr),e(Tn,Hjr),e(Vr,Ujr),e(Vr,xe),e(xe,f0),e(f0,UCe),e(UCe,Jjr),e(f0,Yjr),e(f0,jZ),e(jZ,Kjr),e(f0,Zjr),e(xe,eDr),e(xe,m0),e(m0,JCe),e(JCe,oDr),e(m0,rDr),e(m0,DZ),e(DZ,tDr),e(m0,aDr),e(xe,nDr),e(xe,g0),e(g0,YCe),e(YCe,sDr),e(g0,lDr),e(g0,GZ),e(GZ,iDr),e(g0,dDr),e(xe,cDr),e(xe,h0),e(h0,KCe),e(KCe,fDr),e(h0,mDr),e(h0,OZ),e(OZ,gDr),e(h0,hDr),e(xe,pDr),e(xe,p0),e(p0,ZCe),e(ZCe,_Dr),e(p0,uDr),e(p0,VZ),e(VZ,bDr),e(p0,vDr),e(xe,FDr),e(xe,_0),e(_0,e3e),e(e3e,TDr),e(_0,MDr),e(_0,XZ),e(XZ,EDr),e(_0,CDr),e(xe,wDr),e(xe,u0),e(u0,o3e),e(o3e,ADr),e(u0,LDr),e(u0,zZ),e(zZ,yDr),e(u0,xDr),e(xe,$Dr),e(xe,b0),e(b0,r3e),e(r3e,kDr),e(b0,SDr),e(b0,QZ),e(QZ,RDr),e(b0,PDr),e(xe,BDr),e(xe,v0),e(v0,t3e),e(t3e,IDr),e(v0,NDr),e(v0,WZ),e(WZ,qDr),e(v0,jDr),e(xe,DDr),e(xe,F0),e(F0,a3e),e(a3e,GDr),e(F0,ODr),e(F0,HZ),e(HZ,VDr),e(F0,XDr),e(Vr,zDr),M(T0,Vr,null),b(f,_Xe,u),b(f,Yc,u),e(Yc,M0),e(M0,n3e),M(Zx,n3e,null),e(Yc,QDr),e(Yc,s3e),e(s3e,WDr),b(f,uXe,u),b(f,_r,u),M(e$,_r,null),e(_r,HDr),e(_r,Kc),e(Kc,UDr),e(Kc,UZ),e(UZ,JDr),e(Kc,YDr),e(Kc,JZ),e(JZ,KDr),e(Kc,ZDr),e(_r,eGr),e(_r,o$),e(o$,oGr),e(o$,l3e),e(l3e,rGr),e(o$,tGr),e(_r,aGr),e(_r,Wt),M(r$,Wt,null),e(Wt,nGr),e(Wt,i3e),e(i3e,sGr),e(Wt,lGr),e(Wt,Zc),e(Zc,iGr),e(Zc,d3e),e(d3e,dGr),e(Zc,cGr),e(Zc,YZ),e(YZ,fGr),e(Zc,mGr),e(Wt,gGr),M(E0,Wt,null),e(_r,hGr),e(_r,Xr),M(t$,Xr,null),e(Xr,pGr),e(Xr,c3e),e(c3e,_Gr),e(Xr,uGr),e(Xr,Mn),e(Mn,bGr),e(Mn,f3e),e(f3e,vGr),e(Mn,FGr),e(Mn,m3e),e(m3e,TGr),e(Mn,MGr),e(Mn,g3e),e(g3e,EGr),e(Mn,CGr),e(Xr,wGr),e(Xr,Ee),e(Ee,C0),e(C0,h3e),e(h3e,AGr),e(C0,LGr),e(C0,KZ),e(KZ,yGr),e(C0,xGr),e(Ee,$Gr),e(Ee,w0),e(w0,p3e),e(p3e,kGr),e(w0,SGr),e(w0,ZZ),e(ZZ,RGr),e(w0,PGr),e(Ee,BGr),e(Ee,A0),e(A0,_3e),e(_3e,IGr),e(A0,NGr),e(A0,eee),e(eee,qGr),e(A0,jGr),e(Ee,DGr),e(Ee,L0),e(L0,u3e),e(u3e,GGr),e(L0,OGr),e(L0,oee),e(oee,VGr),e(L0,XGr),e(Ee,zGr),e(Ee,y0),e(y0,b3e),e(b3e,QGr),e(y0,WGr),e(y0,ree),e(ree,HGr),e(y0,UGr),e(Ee,JGr),e(Ee,x0),e(x0,v3e),e(v3e,YGr),e(x0,KGr),e(x0,tee),e(tee,ZGr),e(x0,eOr),e(Ee,oOr),e(Ee,$0),e($0,F3e),e(F3e,rOr),e($0,tOr),e($0,aee),e(aee,aOr),e($0,nOr),e(Ee,sOr),e(Ee,k0),e(k0,T3e),e(T3e,lOr),e(k0,iOr),e(k0,nee),e(nee,dOr),e(k0,cOr),e(Ee,fOr),e(Ee,S0),e(S0,M3e),e(M3e,mOr),e(S0,gOr),e(S0,see),e(see,hOr),e(S0,pOr),e(Ee,_Or),e(Ee,R0),e(R0,E3e),e(E3e,uOr),e(R0,bOr),e(R0,lee),e(lee,vOr),e(R0,FOr),e(Ee,TOr),e(Ee,P0),e(P0,C3e),e(C3e,MOr),e(P0,EOr),e(P0,iee),e(iee,COr),e(P0,wOr),e(Ee,AOr),e(Ee,B0),e(B0,w3e),e(w3e,LOr),e(B0,yOr),e(B0,dee),e(dee,xOr),e(B0,$Or),e(Ee,kOr),e(Ee,I0),e(I0,A3e),e(A3e,SOr),e(I0,ROr),e(I0,cee),e(cee,POr),e(I0,BOr),e(Xr,IOr),M(N0,Xr,null),b(f,bXe,u),b(f,ef,u),e(ef,q0),e(q0,L3e),M(a$,L3e,null),e(ef,NOr),e(ef,y3e),e(y3e,qOr),b(f,vXe,u),b(f,ur,u),M(n$,ur,null),e(ur,jOr),e(ur,of),e(of,DOr),e(of,fee),e(fee,GOr),e(of,OOr),e(of,mee),e(mee,VOr),e(of,XOr),e(ur,zOr),e(ur,s$),e(s$,QOr),e(s$,x3e),e(x3e,WOr),e(s$,HOr),e(ur,UOr),e(ur,Ht),M(l$,Ht,null),e(Ht,JOr),e(Ht,$3e),e($3e,YOr),e(Ht,KOr),e(Ht,rf),e(rf,ZOr),e(rf,k3e),e(k3e,eVr),e(rf,oVr),e(rf,gee),e(gee,rVr),e(rf,tVr),e(Ht,aVr),M(j0,Ht,null),e(ur,nVr),e(ur,zr),M(i$,zr,null),e(zr,sVr),e(zr,S3e),e(S3e,lVr),e(zr,iVr),e(zr,En),e(En,dVr),e(En,R3e),e(R3e,cVr),e(En,fVr),e(En,P3e),e(P3e,mVr),e(En,gVr),e(En,B3e),e(B3e,hVr),e(En,pVr),e(zr,_Vr),e(zr,$e),e($e,D0),e(D0,I3e),e(I3e,uVr),e(D0,bVr),e(D0,hee),e(hee,vVr),e(D0,FVr),e($e,TVr),e($e,G0),e(G0,N3e),e(N3e,MVr),e(G0,EVr),e(G0,pee),e(pee,CVr),e(G0,wVr),e($e,AVr),e($e,O0),e(O0,q3e),e(q3e,LVr),e(O0,yVr),e(O0,_ee),e(_ee,xVr),e(O0,$Vr),e($e,kVr),e($e,V0),e(V0,j3e),e(j3e,SVr),e(V0,RVr),e(V0,uee),e(uee,PVr),e(V0,BVr),e($e,IVr),e($e,X0),e(X0,D3e),e(D3e,NVr),e(X0,qVr),e(X0,bee),e(bee,jVr),e(X0,DVr),e($e,GVr),e($e,z0),e(z0,G3e),e(G3e,OVr),e(z0,VVr),e(z0,vee),e(vee,XVr),e(z0,zVr),e($e,QVr),e($e,Q0),e(Q0,O3e),e(O3e,WVr),e(Q0,HVr),e(Q0,Fee),e(Fee,UVr),e(Q0,JVr),e($e,YVr),e($e,W0),e(W0,V3e),e(V3e,KVr),e(W0,ZVr),e(W0,Tee),e(Tee,eXr),e(W0,oXr),e($e,rXr),e($e,H0),e(H0,X3e),e(X3e,tXr),e(H0,aXr),e(H0,Mee),e(Mee,nXr),e(H0,sXr),e($e,lXr),e($e,U0),e(U0,z3e),e(z3e,iXr),e(U0,dXr),e(U0,Eee),e(Eee,cXr),e(U0,fXr),e(zr,mXr),M(J0,zr,null),b(f,FXe,u),b(f,tf,u),e(tf,Y0),e(Y0,Q3e),M(d$,Q3e,null),e(tf,gXr),e(tf,W3e),e(W3e,hXr),b(f,TXe,u),b(f,br,u),M(c$,br,null),e(br,pXr),e(br,af),e(af,_Xr),e(af,Cee),e(Cee,uXr),e(af,bXr),e(af,wee),e(wee,vXr),e(af,FXr),e(br,TXr),e(br,f$),e(f$,MXr),e(f$,H3e),e(H3e,EXr),e(f$,CXr),e(br,wXr),e(br,Ut),M(m$,Ut,null),e(Ut,AXr),e(Ut,U3e),e(U3e,LXr),e(Ut,yXr),e(Ut,nf),e(nf,xXr),e(nf,J3e),e(J3e,$Xr),e(nf,kXr),e(nf,Aee),e(Aee,SXr),e(nf,RXr),e(Ut,PXr),M(K0,Ut,null),e(br,BXr),e(br,Qr),M(g$,Qr,null),e(Qr,IXr),e(Qr,Y3e),e(Y3e,NXr),e(Qr,qXr),e(Qr,Cn),e(Cn,jXr),e(Cn,K3e),e(K3e,DXr),e(Cn,GXr),e(Cn,Z3e),e(Z3e,OXr),e(Cn,VXr),e(Cn,e0e),e(e0e,XXr),e(Cn,zXr),e(Qr,QXr),e(Qr,ke),e(ke,Z0),e(Z0,o0e),e(o0e,WXr),e(Z0,HXr),e(Z0,Lee),e(Lee,UXr),e(Z0,JXr),e(ke,YXr),e(ke,ew),e(ew,r0e),e(r0e,KXr),e(ew,ZXr),e(ew,yee),e(yee,ezr),e(ew,ozr),e(ke,rzr),e(ke,ow),e(ow,t0e),e(t0e,tzr),e(ow,azr),e(ow,xee),e(xee,nzr),e(ow,szr),e(ke,lzr),e(ke,rw),e(rw,a0e),e(a0e,izr),e(rw,dzr),e(rw,$ee),e($ee,czr),e(rw,fzr),e(ke,mzr),e(ke,tw),e(tw,n0e),e(n0e,gzr),e(tw,hzr),e(tw,kee),e(kee,pzr),e(tw,_zr),e(ke,uzr),e(ke,aw),e(aw,s0e),e(s0e,bzr),e(aw,vzr),e(aw,See),e(See,Fzr),e(aw,Tzr),e(ke,Mzr),e(ke,nw),e(nw,l0e),e(l0e,Ezr),e(nw,Czr),e(nw,Ree),e(Ree,wzr),e(nw,Azr),e(ke,Lzr),e(ke,sw),e(sw,i0e),e(i0e,yzr),e(sw,xzr),e(sw,Pee),e(Pee,$zr),e(sw,kzr),e(ke,Szr),e(ke,lw),e(lw,d0e),e(d0e,Rzr),e(lw,Pzr),e(lw,Bee),e(Bee,Bzr),e(lw,Izr),e(ke,Nzr),e(ke,iw),e(iw,c0e),e(c0e,qzr),e(iw,jzr),e(iw,Iee),e(Iee,Dzr),e(iw,Gzr),e(Qr,Ozr),M(dw,Qr,null),b(f,MXe,u),b(f,sf,u),e(sf,cw),e(cw,f0e),M(h$,f0e,null),e(sf,Vzr),e(sf,m0e),e(m0e,Xzr),b(f,EXe,u),b(f,vr,u),M(p$,vr,null),e(vr,zzr),e(vr,lf),e(lf,Qzr),e(lf,Nee),e(Nee,Wzr),e(lf,Hzr),e(lf,qee),e(qee,Uzr),e(lf,Jzr),e(vr,Yzr),e(vr,_$),e(_$,Kzr),e(_$,g0e),e(g0e,Zzr),e(_$,eQr),e(vr,oQr),e(vr,Jt),M(u$,Jt,null),e(Jt,rQr),e(Jt,h0e),e(h0e,tQr),e(Jt,aQr),e(Jt,df),e(df,nQr),e(df,p0e),e(p0e,sQr),e(df,lQr),e(df,jee),e(jee,iQr),e(df,dQr),e(Jt,cQr),M(fw,Jt,null),e(vr,fQr),e(vr,Wr),M(b$,Wr,null),e(Wr,mQr),e(Wr,_0e),e(_0e,gQr),e(Wr,hQr),e(Wr,wn),e(wn,pQr),e(wn,u0e),e(u0e,_Qr),e(wn,uQr),e(wn,b0e),e(b0e,bQr),e(wn,vQr),e(wn,v0e),e(v0e,FQr),e(wn,TQr),e(Wr,MQr),e(Wr,Se),e(Se,mw),e(mw,F0e),e(F0e,EQr),e(mw,CQr),e(mw,Dee),e(Dee,wQr),e(mw,AQr),e(Se,LQr),e(Se,gw),e(gw,T0e),e(T0e,yQr),e(gw,xQr),e(gw,Gee),e(Gee,$Qr),e(gw,kQr),e(Se,SQr),e(Se,hw),e(hw,M0e),e(M0e,RQr),e(hw,PQr),e(hw,Oee),e(Oee,BQr),e(hw,IQr),e(Se,NQr),e(Se,pw),e(pw,E0e),e(E0e,qQr),e(pw,jQr),e(pw,Vee),e(Vee,DQr),e(pw,GQr),e(Se,OQr),e(Se,_w),e(_w,C0e),e(C0e,VQr),e(_w,XQr),e(_w,Xee),e(Xee,zQr),e(_w,QQr),e(Se,WQr),e(Se,uw),e(uw,w0e),e(w0e,HQr),e(uw,UQr),e(uw,zee),e(zee,JQr),e(uw,YQr),e(Se,KQr),e(Se,bw),e(bw,A0e),e(A0e,ZQr),e(bw,eWr),e(bw,Qee),e(Qee,oWr),e(bw,rWr),e(Se,tWr),e(Se,vw),e(vw,L0e),e(L0e,aWr),e(vw,nWr),e(vw,Wee),e(Wee,sWr),e(vw,lWr),e(Se,iWr),e(Se,Fw),e(Fw,y0e),e(y0e,dWr),e(Fw,cWr),e(Fw,Hee),e(Hee,fWr),e(Fw,mWr),e(Se,gWr),e(Se,Tw),e(Tw,x0e),e(x0e,hWr),e(Tw,pWr),e(Tw,Uee),e(Uee,_Wr),e(Tw,uWr),e(Wr,bWr),M(Mw,Wr,null),b(f,CXe,u),b(f,cf,u),e(cf,Ew),e(Ew,$0e),M(v$,$0e,null),e(cf,vWr),e(cf,k0e),e(k0e,FWr),b(f,wXe,u),b(f,Fr,u),M(F$,Fr,null),e(Fr,TWr),e(Fr,ff),e(ff,MWr),e(ff,Jee),e(Jee,EWr),e(ff,CWr),e(ff,Yee),e(Yee,wWr),e(ff,AWr),e(Fr,LWr),e(Fr,T$),e(T$,yWr),e(T$,S0e),e(S0e,xWr),e(T$,$Wr),e(Fr,kWr),e(Fr,Yt),M(M$,Yt,null),e(Yt,SWr),e(Yt,R0e),e(R0e,RWr),e(Yt,PWr),e(Yt,mf),e(mf,BWr),e(mf,P0e),e(P0e,IWr),e(mf,NWr),e(mf,Kee),e(Kee,qWr),e(mf,jWr),e(Yt,DWr),M(Cw,Yt,null),e(Fr,GWr),e(Fr,Hr),M(E$,Hr,null),e(Hr,OWr),e(Hr,B0e),e(B0e,VWr),e(Hr,XWr),e(Hr,An),e(An,zWr),e(An,I0e),e(I0e,QWr),e(An,WWr),e(An,N0e),e(N0e,HWr),e(An,UWr),e(An,q0e),e(q0e,JWr),e(An,YWr),e(Hr,KWr),e(Hr,Re),e(Re,ww),e(ww,j0e),e(j0e,ZWr),e(ww,eHr),e(ww,Zee),e(Zee,oHr),e(ww,rHr),e(Re,tHr),e(Re,Aw),e(Aw,D0e),e(D0e,aHr),e(Aw,nHr),e(Aw,eoe),e(eoe,sHr),e(Aw,lHr),e(Re,iHr),e(Re,Lw),e(Lw,G0e),e(G0e,dHr),e(Lw,cHr),e(Lw,ooe),e(ooe,fHr),e(Lw,mHr),e(Re,gHr),e(Re,yw),e(yw,O0e),e(O0e,hHr),e(yw,pHr),e(yw,roe),e(roe,_Hr),e(yw,uHr),e(Re,bHr),e(Re,xw),e(xw,V0e),e(V0e,vHr),e(xw,FHr),e(xw,toe),e(toe,THr),e(xw,MHr),e(Re,EHr),e(Re,$w),e($w,X0e),e(X0e,CHr),e($w,wHr),e($w,aoe),e(aoe,AHr),e($w,LHr),e(Re,yHr),e(Re,kw),e(kw,z0e),e(z0e,xHr),e(kw,$Hr),e(kw,noe),e(noe,kHr),e(kw,SHr),e(Re,RHr),e(Re,Sw),e(Sw,Q0e),e(Q0e,PHr),e(Sw,BHr),e(Sw,soe),e(soe,IHr),e(Sw,NHr),e(Re,qHr),e(Re,Rw),e(Rw,W0e),e(W0e,jHr),e(Rw,DHr),e(Rw,loe),e(loe,GHr),e(Rw,OHr),e(Re,VHr),e(Re,Pw),e(Pw,H0e),e(H0e,XHr),e(Pw,zHr),e(Pw,ioe),e(ioe,QHr),e(Pw,WHr),e(Hr,HHr),M(Bw,Hr,null),b(f,AXe,u),b(f,gf,u),e(gf,Iw),e(Iw,U0e),M(C$,U0e,null),e(gf,UHr),e(gf,J0e),e(J0e,JHr),b(f,LXe,u),b(f,Tr,u),M(w$,Tr,null),e(Tr,YHr),e(Tr,hf),e(hf,KHr),e(hf,doe),e(doe,ZHr),e(hf,eUr),e(hf,coe),e(coe,oUr),e(hf,rUr),e(Tr,tUr),e(Tr,A$),e(A$,aUr),e(A$,Y0e),e(Y0e,nUr),e(A$,sUr),e(Tr,lUr),e(Tr,Kt),M(L$,Kt,null),e(Kt,iUr),e(Kt,K0e),e(K0e,dUr),e(Kt,cUr),e(Kt,pf),e(pf,fUr),e(pf,Z0e),e(Z0e,mUr),e(pf,gUr),e(pf,foe),e(foe,hUr),e(pf,pUr),e(Kt,_Ur),M(Nw,Kt,null),e(Tr,uUr),e(Tr,Ur),M(y$,Ur,null),e(Ur,bUr),e(Ur,ewe),e(ewe,vUr),e(Ur,FUr),e(Ur,Ln),e(Ln,TUr),e(Ln,owe),e(owe,MUr),e(Ln,EUr),e(Ln,rwe),e(rwe,CUr),e(Ln,wUr),e(Ln,twe),e(twe,AUr),e(Ln,LUr),e(Ur,yUr),e(Ur,Ve),e(Ve,qw),e(qw,awe),e(awe,xUr),e(qw,$Ur),e(qw,moe),e(moe,kUr),e(qw,SUr),e(Ve,RUr),e(Ve,jw),e(jw,nwe),e(nwe,PUr),e(jw,BUr),e(jw,goe),e(goe,IUr),e(jw,NUr),e(Ve,qUr),e(Ve,Dw),e(Dw,swe),e(swe,jUr),e(Dw,DUr),e(Dw,hoe),e(hoe,GUr),e(Dw,OUr),e(Ve,VUr),e(Ve,Gw),e(Gw,lwe),e(lwe,XUr),e(Gw,zUr),e(Gw,poe),e(poe,QUr),e(Gw,WUr),e(Ve,HUr),e(Ve,Ow),e(Ow,iwe),e(iwe,UUr),e(Ow,JUr),e(Ow,_oe),e(_oe,YUr),e(Ow,KUr),e(Ve,ZUr),e(Ve,Vw),e(Vw,dwe),e(dwe,eJr),e(Vw,oJr),e(Vw,uoe),e(uoe,rJr),e(Vw,tJr),e(Ve,aJr),e(Ve,Xw),e(Xw,cwe),e(cwe,nJr),e(Xw,sJr),e(Xw,boe),e(boe,lJr),e(Xw,iJr),e(Ve,dJr),e(Ve,zw),e(zw,fwe),e(fwe,cJr),e(zw,fJr),e(zw,voe),e(voe,mJr),e(zw,gJr),e(Ur,hJr),M(Qw,Ur,null),b(f,yXe,u),b(f,_f,u),e(_f,Ww),e(Ww,mwe),M(x$,mwe,null),e(_f,pJr),e(_f,gwe),e(gwe,_Jr),b(f,xXe,u),b(f,Mr,u),M($$,Mr,null),e(Mr,uJr),e(Mr,uf),e(uf,bJr),e(uf,Foe),e(Foe,vJr),e(uf,FJr),e(uf,Toe),e(Toe,TJr),e(uf,MJr),e(Mr,EJr),e(Mr,k$),e(k$,CJr),e(k$,hwe),e(hwe,wJr),e(k$,AJr),e(Mr,LJr),e(Mr,Zt),M(S$,Zt,null),e(Zt,yJr),e(Zt,pwe),e(pwe,xJr),e(Zt,$Jr),e(Zt,bf),e(bf,kJr),e(bf,_we),e(_we,SJr),e(bf,RJr),e(bf,Moe),e(Moe,PJr),e(bf,BJr),e(Zt,IJr),M(Hw,Zt,null),e(Mr,NJr),e(Mr,Jr),M(R$,Jr,null),e(Jr,qJr),e(Jr,uwe),e(uwe,jJr),e(Jr,DJr),e(Jr,yn),e(yn,GJr),e(yn,bwe),e(bwe,OJr),e(yn,VJr),e(yn,vwe),e(vwe,XJr),e(yn,zJr),e(yn,Fwe),e(Fwe,QJr),e(yn,WJr),e(Jr,HJr),e(Jr,Xe),e(Xe,Uw),e(Uw,Twe),e(Twe,UJr),e(Uw,JJr),e(Uw,Eoe),e(Eoe,YJr),e(Uw,KJr),e(Xe,ZJr),e(Xe,Jw),e(Jw,Mwe),e(Mwe,eYr),e(Jw,oYr),e(Jw,Coe),e(Coe,rYr),e(Jw,tYr),e(Xe,aYr),e(Xe,Yw),e(Yw,Ewe),e(Ewe,nYr),e(Yw,sYr),e(Yw,woe),e(woe,lYr),e(Yw,iYr),e(Xe,dYr),e(Xe,Kw),e(Kw,Cwe),e(Cwe,cYr),e(Kw,fYr),e(Kw,Aoe),e(Aoe,mYr),e(Kw,gYr),e(Xe,hYr),e(Xe,Zw),e(Zw,wwe),e(wwe,pYr),e(Zw,_Yr),e(Zw,Loe),e(Loe,uYr),e(Zw,bYr),e(Xe,vYr),e(Xe,eA),e(eA,Awe),e(Awe,FYr),e(eA,TYr),e(eA,yoe),e(yoe,MYr),e(eA,EYr),e(Xe,CYr),e(Xe,oA),e(oA,Lwe),e(Lwe,wYr),e(oA,AYr),e(oA,xoe),e(xoe,LYr),e(oA,yYr),e(Xe,xYr),e(Xe,rA),e(rA,ywe),e(ywe,$Yr),e(rA,kYr),e(rA,$oe),e($oe,SYr),e(rA,RYr),e(Jr,PYr),M(tA,Jr,null),b(f,$Xe,u),b(f,vf,u),e(vf,aA),e(aA,xwe),M(P$,xwe,null),e(vf,BYr),e(vf,$we),e($we,IYr),b(f,kXe,u),b(f,Er,u),M(B$,Er,null),e(Er,NYr),e(Er,Ff),e(Ff,qYr),e(Ff,koe),e(koe,jYr),e(Ff,DYr),e(Ff,Soe),e(Soe,GYr),e(Ff,OYr),e(Er,VYr),e(Er,I$),e(I$,XYr),e(I$,kwe),e(kwe,zYr),e(I$,QYr),e(Er,WYr),e(Er,ea),M(N$,ea,null),e(ea,HYr),e(ea,Swe),e(Swe,UYr),e(ea,JYr),e(ea,Tf),e(Tf,YYr),e(Tf,Rwe),e(Rwe,KYr),e(Tf,ZYr),e(Tf,Roe),e(Roe,eKr),e(Tf,oKr),e(ea,rKr),M(nA,ea,null),e(Er,tKr),e(Er,Yr),M(q$,Yr,null),e(Yr,aKr),e(Yr,Pwe),e(Pwe,nKr),e(Yr,sKr),e(Yr,xn),e(xn,lKr),e(xn,Bwe),e(Bwe,iKr),e(xn,dKr),e(xn,Iwe),e(Iwe,cKr),e(xn,fKr),e(xn,Nwe),e(Nwe,mKr),e(xn,gKr),e(Yr,hKr),e(Yr,qwe),e(qwe,sA),e(sA,jwe),e(jwe,pKr),e(sA,_Kr),e(sA,Poe),e(Poe,uKr),e(sA,bKr),e(Yr,vKr),M(lA,Yr,null),b(f,SXe,u),b(f,Mf,u),e(Mf,iA),e(iA,Dwe),M(j$,Dwe,null),e(Mf,FKr),e(Mf,Gwe),e(Gwe,TKr),b(f,RXe,u),b(f,Cr,u),M(D$,Cr,null),e(Cr,MKr),e(Cr,Ef),e(Ef,EKr),e(Ef,Boe),e(Boe,CKr),e(Ef,wKr),e(Ef,Ioe),e(Ioe,AKr),e(Ef,LKr),e(Cr,yKr),e(Cr,G$),e(G$,xKr),e(G$,Owe),e(Owe,$Kr),e(G$,kKr),e(Cr,SKr),e(Cr,oa),M(O$,oa,null),e(oa,RKr),e(oa,Vwe),e(Vwe,PKr),e(oa,BKr),e(oa,Cf),e(Cf,IKr),e(Cf,Xwe),e(Xwe,NKr),e(Cf,qKr),e(Cf,Noe),e(Noe,jKr),e(Cf,DKr),e(oa,GKr),M(dA,oa,null),e(Cr,OKr),e(Cr,Kr),M(V$,Kr,null),e(Kr,VKr),e(Kr,zwe),e(zwe,XKr),e(Kr,zKr),e(Kr,$n),e($n,QKr),e($n,Qwe),e(Qwe,WKr),e($n,HKr),e($n,Wwe),e(Wwe,UKr),e($n,JKr),e($n,Hwe),e(Hwe,YKr),e($n,KKr),e(Kr,ZKr),e(Kr,X$),e(X$,cA),e(cA,Uwe),e(Uwe,eZr),e(cA,oZr),e(cA,qoe),e(qoe,rZr),e(cA,tZr),e(X$,aZr),e(X$,fA),e(fA,Jwe),e(Jwe,nZr),e(fA,sZr),e(fA,joe),e(joe,lZr),e(fA,iZr),e(Kr,dZr),M(mA,Kr,null),b(f,PXe,u),b(f,wf,u),e(wf,gA),e(gA,Ywe),M(z$,Ywe,null),e(wf,cZr),e(wf,Kwe),e(Kwe,fZr),b(f,BXe,u),b(f,wr,u),M(Q$,wr,null),e(wr,mZr),e(wr,Af),e(Af,gZr),e(Af,Doe),e(Doe,hZr),e(Af,pZr),e(Af,Goe),e(Goe,_Zr),e(Af,uZr),e(wr,bZr),e(wr,W$),e(W$,vZr),e(W$,Zwe),e(Zwe,FZr),e(W$,TZr),e(wr,MZr),e(wr,ra),M(H$,ra,null),e(ra,EZr),e(ra,eAe),e(eAe,CZr),e(ra,wZr),e(ra,Lf),e(Lf,AZr),e(Lf,oAe),e(oAe,LZr),e(Lf,yZr),e(Lf,Ooe),e(Ooe,xZr),e(Lf,$Zr),e(ra,kZr),M(hA,ra,null),e(wr,SZr),e(wr,Zr),M(U$,Zr,null),e(Zr,RZr),e(Zr,rAe),e(rAe,PZr),e(Zr,BZr),e(Zr,kn),e(kn,IZr),e(kn,tAe),e(tAe,NZr),e(kn,qZr),e(kn,aAe),e(aAe,jZr),e(kn,DZr),e(kn,nAe),e(nAe,GZr),e(kn,OZr),e(Zr,VZr),e(Zr,sAe),e(sAe,pA),e(pA,lAe),e(lAe,XZr),e(pA,zZr),e(pA,Voe),e(Voe,QZr),e(pA,WZr),e(Zr,HZr),M(_A,Zr,null),IXe=!0},p(f,[u]){const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),If.$set(J$);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),Qg.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),yh.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),cp.$set(cAe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),fp.$set(Y$);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),Sp.$set(fAe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Rp.$set(Sn);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),Ip.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),qu.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),Du.$set(hAe);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),S5.$set(K$);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),P5.$set(pAe);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),T1.$set(Z$);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),E1.$set(_Ae);const ek={};u&2&&(ek.$$scope={dirty:u,ctx:f}),i2.$set(ek);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),c2.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),x2.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),k2.$set(vAe);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),y4.$set(yf);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),$4.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),ib.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),cb.$set(MAe);const ok={};u&2&&(ok.$$scope={dirty:u,ctx:f}),bb.$set(ok);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),Fb.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),av.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),sv.$set(wAe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),Uv.$set(tt);const rk={};u&2&&(rk.$$scope={dirty:u,ctx:f}),Yv.$set(rk);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),eF.$set(AAe);const tk={};u&2&&(tk.$$scope={dirty:u,ctx:f}),rF.$set(tk);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),_F.$set(LAe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),bF.$set(at);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),TF.$set(yAe);const xf={};u&2&&(xf.$$scope={dirty:u,ctx:f}),EF.$set(xf);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),AF.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),yF.$set($Ae);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),jF.$set(L);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),GF.$set(uA);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),HF.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),JF.$set(SAe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),iT.$set(bA);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),cT.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),hT.$set(PAe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),_T.$set(vA);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),ET.$set(BAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),wT.$set(IAe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),$T.$set(FA);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),ST.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),IT.$set(qAe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),qT.$set(TA);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),GT.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),VT.$set(DAe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),UT.$set(MA);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),YT.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),e7.$set(OAe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),r7.$set(EA);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),J7.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),K7.$set(XAe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),MM.$set(CA);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),CM.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),qM.$set(QAe);const wA={};u&2&&(wA.$$scope={dirty:u,ctx:f}),DM.$set(wA);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),QM.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),HM.$set(HAe);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),pE.$set(AA);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),uE.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),yE.$set(JAe);const LA={};u&2&&(LA.$$scope={dirty:u,ctx:f}),$E.$set(LA);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),tC.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),nC.$set(KAe);const yA={};u&2&&(yA.$$scope={dirty:u,ctx:f}),EC.$set(yA);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),wC.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),yC.$set(e6e);const xA={};u&2&&(xA.$$scope={dirty:u,ctx:f}),$C.$set(xA);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),SC.$set(o6e);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),PC.$set(r6e);const $A={};u&2&&($A.$$scope={dirty:u,ctx:f}),o3.$set($A);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),t3.$set(t6e);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),C3.$set(a6e);const kA={};u&2&&(kA.$$scope={dirty:u,ctx:f}),A3.$set(kA);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),y3.$set(n6e);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),$3.$set(s6e);const SA={};u&2&&(SA.$$scope={dirty:u,ctx:f}),S3.$set(SA);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),P3.$set(l6e);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),i0.$set(i6e);const RA={};u&2&&(RA.$$scope={dirty:u,ctx:f}),c0.$set(RA);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),T0.$set(d6e);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),E0.$set(c6e);const PA={};u&2&&(PA.$$scope={dirty:u,ctx:f}),N0.$set(PA);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),j0.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),J0.$set(m6e);const BA={};u&2&&(BA.$$scope={dirty:u,ctx:f}),K0.$set(BA);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),dw.$set(g6e);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),fw.$set(h6e);const IA={};u&2&&(IA.$$scope={dirty:u,ctx:f}),Mw.$set(IA);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),Cw.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),Bw.$set(_6e);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),Nw.$set(NA);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),Qw.$set(u6e);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),Hw.$set(b6e);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),tA.$set(qA);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),nA.$set(v6e);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),lA.$set(F6e);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),dA.$set(jA);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),mA.$set(T6e);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),hA.$set(M6e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),_A.$set(DA)},i(f){IXe||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(If.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(QL.$$.fragment,f),E(Qg.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(KL.$$.fragment,f),E(yh.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ay.$$.fragment,f),E(cp.$$.fragment,f),E(fp.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(cy.$$.fragment,f),E(Sp.$$.fragment,f),E(Rp.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Ip.$$.fragment,f),E(_y.$$.fragment,f),E(qu.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Du.$$.fragment,f),E(Ty.$$.fragment,f),E(S5.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(P5.$$.fragment,f),E(Ay.$$.fragment,f),E(T1.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(E1.$$.fragment,f),E(ky.$$.fragment,f),E(i2.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(c2.$$.fragment,f),E(Iy.$$.fragment,f),E(x2.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(k2.$$.fragment,f),E(Gy.$$.fragment,f),E(y4.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E($4.$$.fragment,f),E(Qy.$$.fragment,f),E(ib.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(cb.$$.fragment,f),E(Yy.$$.fragment,f),E(bb.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(Fb.$$.fragment,f),E(r8.$$.fragment,f),E(av.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(sv.$$.fragment,f),E(l8.$$.fragment,f),E(Uv.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(Yv.$$.fragment,f),E(m8.$$.fragment,f),E(eF.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(rF.$$.fragment,f),E(u8.$$.fragment,f),E(_F.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(bF.$$.fragment,f),E(M8.$$.fragment,f),E(TF.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(EF.$$.fragment,f),E(L8.$$.fragment,f),E(AF.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(yF.$$.fragment,f),E(S8.$$.fragment,f),E(jF.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(GF.$$.fragment,f),E(N8.$$.fragment,f),E(HF.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(JF.$$.fragment,f),E(O8.$$.fragment,f),E(iT.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(cT.$$.fragment,f),E(W8.$$.fragment,f),E(hT.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(_T.$$.fragment,f),E(Z8.$$.fragment,f),E(ET.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(wT.$$.fragment,f),E(a9.$$.fragment,f),E($T.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(ST.$$.fragment,f),E(d9.$$.fragment,f),E(IT.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(qT.$$.fragment,f),E(p9.$$.fragment,f),E(GT.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(VT.$$.fragment,f),E(F9.$$.fragment,f),E(UT.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(YT.$$.fragment,f),E(w9.$$.fragment,f),E(e7.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(r7.$$.fragment,f),E($9.$$.fragment,f),E(J7.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(K7.$$.fragment,f),E(B9.$$.fragment,f),E(MM.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(CM.$$.fragment,f),E(D9.$$.fragment,f),E(qM.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(DM.$$.fragment,f),E(z9.$$.fragment,f),E(QM.$$.fragment,f),E(Q9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(HM.$$.fragment,f),E(J9.$$.fragment,f),E(pE.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(uE.$$.fragment,f),E(ox.$$.fragment,f),E(yE.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E($E.$$.fragment,f),E(sx.$$.fragment,f),E(tC.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(nC.$$.fragment,f),E(fx.$$.fragment,f),E(EC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(wC.$$.fragment,f),E(_x.$$.fragment,f),E(yC.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E($C.$$.fragment,f),E(Mx.$$.fragment,f),E(SC.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(PC.$$.fragment,f),E(Lx.$$.fragment,f),E(o3.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(t3.$$.fragment,f),E(Sx.$$.fragment,f),E(C3.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(A3.$$.fragment,f),E(Nx.$$.fragment,f),E(y3.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E($3.$$.fragment,f),E(Ox.$$.fragment,f),E(S3.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(P3.$$.fragment,f),E(Wx.$$.fragment,f),E(i0.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(c0.$$.fragment,f),E(Kx.$$.fragment,f),E(T0.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(E0.$$.fragment,f),E(t$.$$.fragment,f),E(N0.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(j0.$$.fragment,f),E(i$.$$.fragment,f),E(J0.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(K0.$$.fragment,f),E(g$.$$.fragment,f),E(dw.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(fw.$$.fragment,f),E(b$.$$.fragment,f),E(Mw.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(Cw.$$.fragment,f),E(E$.$$.fragment,f),E(Bw.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(Nw.$$.fragment,f),E(y$.$$.fragment,f),E(Qw.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(Hw.$$.fragment,f),E(R$.$$.fragment,f),E(tA.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(nA.$$.fragment,f),E(q$.$$.fragment,f),E(lA.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(dA.$$.fragment,f),E(V$.$$.fragment,f),E(mA.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(hA.$$.fragment,f),E(U$.$$.fragment,f),E(_A.$$.fragment,f),IXe=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(If.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(QL.$$.fragment,f),C(Qg.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(KL.$$.fragment,f),C(yh.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ay.$$.fragment,f),C(cp.$$.fragment,f),C(fp.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(cy.$$.fragment,f),C(Sp.$$.fragment,f),C(Rp.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Ip.$$.fragment,f),C(_y.$$.fragment,f),C(qu.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Du.$$.fragment,f),C(Ty.$$.fragment,f),C(S5.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(P5.$$.fragment,f),C(Ay.$$.fragment,f),C(T1.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(E1.$$.fragment,f),C(ky.$$.fragment,f),C(i2.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(c2.$$.fragment,f),C(Iy.$$.fragment,f),C(x2.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(k2.$$.fragment,f),C(Gy.$$.fragment,f),C(y4.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C($4.$$.fragment,f),C(Qy.$$.fragment,f),C(ib.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(cb.$$.fragment,f),C(Yy.$$.fragment,f),C(bb.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(Fb.$$.fragment,f),C(r8.$$.fragment,f),C(av.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(sv.$$.fragment,f),C(l8.$$.fragment,f),C(Uv.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(Yv.$$.fragment,f),C(m8.$$.fragment,f),C(eF.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(rF.$$.fragment,f),C(u8.$$.fragment,f),C(_F.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(bF.$$.fragment,f),C(M8.$$.fragment,f),C(TF.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(EF.$$.fragment,f),C(L8.$$.fragment,f),C(AF.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(yF.$$.fragment,f),C(S8.$$.fragment,f),C(jF.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(GF.$$.fragment,f),C(N8.$$.fragment,f),C(HF.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(JF.$$.fragment,f),C(O8.$$.fragment,f),C(iT.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(cT.$$.fragment,f),C(W8.$$.fragment,f),C(hT.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(_T.$$.fragment,f),C(Z8.$$.fragment,f),C(ET.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(wT.$$.fragment,f),C(a9.$$.fragment,f),C($T.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(ST.$$.fragment,f),C(d9.$$.fragment,f),C(IT.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(qT.$$.fragment,f),C(p9.$$.fragment,f),C(GT.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(VT.$$.fragment,f),C(F9.$$.fragment,f),C(UT.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(YT.$$.fragment,f),C(w9.$$.fragment,f),C(e7.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(r7.$$.fragment,f),C($9.$$.fragment,f),C(J7.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(K7.$$.fragment,f),C(B9.$$.fragment,f),C(MM.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(CM.$$.fragment,f),C(D9.$$.fragment,f),C(qM.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(DM.$$.fragment,f),C(z9.$$.fragment,f),C(QM.$$.fragment,f),C(Q9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(HM.$$.fragment,f),C(J9.$$.fragment,f),C(pE.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(uE.$$.fragment,f),C(ox.$$.fragment,f),C(yE.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C($E.$$.fragment,f),C(sx.$$.fragment,f),C(tC.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(nC.$$.fragment,f),C(fx.$$.fragment,f),C(EC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(wC.$$.fragment,f),C(_x.$$.fragment,f),C(yC.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C($C.$$.fragment,f),C(Mx.$$.fragment,f),C(SC.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(PC.$$.fragment,f),C(Lx.$$.fragment,f),C(o3.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(t3.$$.fragment,f),C(Sx.$$.fragment,f),C(C3.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(A3.$$.fragment,f),C(Nx.$$.fragment,f),C(y3.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C($3.$$.fragment,f),C(Ox.$$.fragment,f),C(S3.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(P3.$$.fragment,f),C(Wx.$$.fragment,f),C(i0.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(c0.$$.fragment,f),C(Kx.$$.fragment,f),C(T0.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(E0.$$.fragment,f),C(t$.$$.fragment,f),C(N0.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(j0.$$.fragment,f),C(i$.$$.fragment,f),C(J0.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(K0.$$.fragment,f),C(g$.$$.fragment,f),C(dw.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(fw.$$.fragment,f),C(b$.$$.fragment,f),C(Mw.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(Cw.$$.fragment,f),C(E$.$$.fragment,f),C(Bw.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(Nw.$$.fragment,f),C(y$.$$.fragment,f),C(Qw.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(Hw.$$.fragment,f),C(R$.$$.fragment,f),C(tA.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(nA.$$.fragment,f),C(q$.$$.fragment,f),C(lA.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(dA.$$.fragment,f),C(V$.$$.fragment,f),C(mA.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(hA.$$.fragment,f),C(U$.$$.fragment,f),C(_A.$$.fragment,f),IXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(kf),f&&t(nt),f&&t(Oe),f&&t(Qe),f&&t(Rf),w($a,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(kOe),f&&t(ki),w(DL),f&&t(SOe),f&&t(Nn),f&&t(ROe),w(GL,f),f&&t(POe),f&&t(FS),f&&t(BOe),w(If,f),f&&t(IOe),f&&t(Si),w(OL),f&&t(NOe),f&&t(wo),w(VL),w(QL),w(Qg),w(WL),f&&t(qOe),f&&t(Pi),w(HL),f&&t(jOe),f&&t(Ao),w(UL),w(KL),w(yh),w(ZL),f&&t(DOe),f&&t(Bi),w(ey),f&&t(GOe),f&&t(Lo),w(oy),w(ay),w(cp),w(fp),w(ny),f&&t(OOe),f&&t(Ii),w(sy),f&&t(VOe),f&&t(yo),w(ly),w(cy),w(Sp),w(Rp),w(fy),f&&t(XOe),f&&t(qi),w(my),f&&t(zOe),f&&t(xo),w(gy),w(py),w(Ip),w(_y),w(qu),f&&t(QOe),f&&t(Gi),w(uy),f&&t(WOe),f&&t($o),w(by),w(Fy),w(Du),w(Ty),w(S5),f&&t(HOe),f&&t(Xi),w(My),f&&t(UOe),f&&t(ko),w(Ey),w(wy),w(P5),w(Ay),w(T1),f&&t(JOe),f&&t(Wi),w(Ly),f&&t(YOe),f&&t(So),w(yy),w($y),w(E1),w(ky),w(i2),f&&t(KOe),f&&t(Ji),w(Sy),f&&t(ZOe),f&&t(Ro),w(Ry),w(By),w(c2),w(Iy),w(x2),f&&t(eVe),f&&t(Zi),w(Ny),f&&t(oVe),f&&t(Po),w(qy),w(Dy),w(k2),w(Gy),w(y4),f&&t(rVe),f&&t(rd),w(Oy),f&&t(tVe),f&&t(Bo),w(Vy),w(zy),w($4),w(Qy),w(ib),f&&t(aVe),f&&t(nd),w(Wy),f&&t(nVe),f&&t(Io),w(Hy),w(Jy),w(cb),w(Yy),w(bb),f&&t(sVe),f&&t(id),w(Ky),f&&t(lVe),f&&t(qo),w(Zy),w(o8),w(Fb),w(r8),w(av),f&&t(iVe),f&&t(fd),w(t8),f&&t(dVe),f&&t(jo),w(a8),w(s8),w(sv),w(l8),w(Uv),f&&t(cVe),f&&t(hd),w(i8),f&&t(fVe),f&&t(Do),w(d8),w(f8),w(Yv),w(m8),w(eF),f&&t(mVe),f&&t(ud),w(g8),f&&t(gVe),f&&t(Go),w(h8),w(_8),w(rF),w(u8),w(_F),f&&t(hVe),f&&t(Fd),w(b8),f&&t(pVe),f&&t(Oo),w(v8),w(T8),w(bF),w(M8),w(TF),f&&t(_Ve),f&&t(Ed),w(E8),f&&t(uVe),f&&t(Vo),w(C8),w(A8),w(EF),w(L8),w(AF),f&&t(bVe),f&&t(Ad),w(y8),f&&t(vVe),f&&t(Xo),w(x8),w(k8),w(yF),w(S8),w(jF),f&&t(FVe),f&&t(xd),w(R8),f&&t(TVe),f&&t(zo),w(P8),w(I8),w(GF),w(N8),w(HF),f&&t(MVe),f&&t(Sd),w(q8),f&&t(EVe),f&&t(Qo),w(j8),w(G8),w(JF),w(O8),w(iT),f&&t(CVe),f&&t(Bd),w(V8),f&&t(wVe),f&&t(Wo),w(X8),w(Q8),w(cT),w(W8),w(hT),f&&t(AVe),f&&t(qd),w(U8),f&&t(LVe),f&&t(Ho),w(J8),w(K8),w(_T),w(Z8),w(ET),f&&t(yVe),f&&t(Gd),w(e9),f&&t(xVe),f&&t(Uo),w(o9),w(t9),w(wT),w(a9),w($T),f&&t($Ve),f&&t(zd),w(n9),f&&t(kVe),f&&t(Jo),w(s9),w(i9),w(ST),w(d9),w(IT),f&&t(SVe),f&&t(Hd),w(f9),f&&t(RVe),f&&t(Yo),w(m9),w(h9),w(qT),w(p9),w(GT),f&&t(PVe),f&&t(Yd),w(_9),f&&t(BVe),f&&t(Ko),w(u9),w(v9),w(VT),w(F9),w(UT),f&&t(IVe),f&&t(ec),w(T9),f&&t(NVe),f&&t(Zo),w(M9),w(C9),w(YT),w(w9),w(e7),f&&t(qVe),f&&t(tc),w(A9),f&&t(jVe),f&&t(er),w(L9),w(x9),w(r7),w($9),w(J7),f&&t(DVe),f&&t(sc),w(k9),f&&t(GVe),f&&t(or),w(S9),w(P9),w(K7),w(B9),w(MM),f&&t(OVe),f&&t(dc),w(I9),f&&t(VVe),f&&t(rr),w(N9),w(j9),w(CM),w(D9),w(qM),f&&t(XVe),f&&t(mc),w(G9),f&&t(zVe),f&&t(tr),w(O9),w(X9),w(DM),w(z9),w(QM),f&&t(QVe),f&&t(pc),w(Q9),f&&t(WVe),f&&t(ar),w(W9),w(U9),w(HM),w(J9),w(pE),f&&t(HVe),f&&t(bc),w(Y9),f&&t(UVe),f&&t(nr),w(K9),w(ex),w(uE),w(ox),w(yE),f&&t(JVe),f&&t(Tc),w(rx),f&&t(YVe),f&&t(sr),w(tx),w(nx),w($E),w(sx),w(tC),f&&t(KVe),f&&t(Cc),w(lx),f&&t(ZVe),f&&t(lr),w(ix),w(cx),w(nC),w(fx),w(EC),f&&t(eXe),f&&t(Lc),w(mx),f&&t(oXe),f&&t(ir),w(gx),w(px),w(wC),w(_x),w(yC),f&&t(rXe),f&&t($c),w(bx),f&&t(tXe),f&&t(dr),w(vx),w(Tx),w($C),w(Mx),w(SC),f&&t(aXe),f&&t(Rc),w(Ex),f&&t(nXe),f&&t(cr),w(Cx),w(Ax),w(PC),w(Lx),w(o3),f&&t(sXe),f&&t(Ic),w(yx),f&&t(lXe),f&&t(fr),w(xx),w(kx),w(t3),w(Sx),w(C3),f&&t(iXe),f&&t(jc),w(Rx),f&&t(dXe),f&&t(mr),w(Px),w(Ix),w(A3),w(Nx),w(y3),f&&t(cXe),f&&t(Oc),w(qx),f&&t(fXe),f&&t(gr),w(jx),w(Gx),w($3),w(Ox),w(S3),f&&t(mXe),f&&t(zc),w(Vx),f&&t(gXe),f&&t(hr),w(Xx),w(Qx),w(P3),w(Wx),w(i0),f&&t(hXe),f&&t(Hc),w(Hx),f&&t(pXe),f&&t(pr),w(Ux),w(Yx),w(c0),w(Kx),w(T0),f&&t(_Xe),f&&t(Yc),w(Zx),f&&t(uXe),f&&t(_r),w(e$),w(r$),w(E0),w(t$),w(N0),f&&t(bXe),f&&t(ef),w(a$),f&&t(vXe),f&&t(ur),w(n$),w(l$),w(j0),w(i$),w(J0),f&&t(FXe),f&&t(tf),w(d$),f&&t(TXe),f&&t(br),w(c$),w(m$),w(K0),w(g$),w(dw),f&&t(MXe),f&&t(sf),w(h$),f&&t(EXe),f&&t(vr),w(p$),w(u$),w(fw),w(b$),w(Mw),f&&t(CXe),f&&t(cf),w(v$),f&&t(wXe),f&&t(Fr),w(F$),w(M$),w(Cw),w(E$),w(Bw),f&&t(AXe),f&&t(gf),w(C$),f&&t(LXe),f&&t(Tr),w(w$),w(L$),w(Nw),w(y$),w(Qw),f&&t(yXe),f&&t(_f),w(x$),f&&t(xXe),f&&t(Mr),w($$),w(S$),w(Hw),w(R$),w(tA),f&&t($Xe),f&&t(vf),w(P$),f&&t(kXe),f&&t(Er),w(B$),w(N$),w(nA),w(q$),w(lA),f&&t(SXe),f&&t(Mf),w(j$),f&&t(RXe),f&&t(Cr),w(D$),w(O$),w(dA),w(V$),w(mA),f&&t(PXe),f&&t(wf),w(z$),f&&t(BXe),f&&t(wr),w(Q$),w(H$),w(hA),w(U$),w(_A)}}}const zXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function QXt($){return XOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ZXt extends DOt{constructor(g){super();GOt(this,g,QXt,XXt,OOt,{})}}export{ZXt as default,zXt as metadata};
