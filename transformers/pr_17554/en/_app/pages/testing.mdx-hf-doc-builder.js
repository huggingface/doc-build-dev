import{S as sS,i as oS,s as lS,e as r,k as f,w as d,t as o,M as rS,c as a,d as s,m as h,a as i,x as c,h as l,b as u,G as t,g as p,y as m,q as _,o as v,B as w,v as aS}from"../chunks/vendor-hf-doc-builder.js";import{T as xE}from"../chunks/Tip-hf-doc-builder.js";import{I as E}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as y}from"../chunks/CodeBlock-hf-doc-builder.js";function iS(we){let $,O,b,j,A,C,z,T;return{c(){$=r("p"),O=o("This plugin doesn\u2019t work with "),b=r("code"),j=o("-n"),A=o(" flag from "),C=r("code"),z=o("pytest-xdist"),T=o(".")},l(x){$=a(x,"P",{});var g=i($);O=l(g,"This plugin doesn\u2019t work with "),b=a(g,"CODE",{});var S=i(b);j=l(S,"-n"),S.forEach(s),A=l(g," flag from "),C=a(g,"CODE",{});var R=i(C);z=l(R,"pytest-xdist"),R.forEach(s),T=l(g,"."),g.forEach(s)},m(x,g){p(x,$,g),t($,O),t($,b),t(b,j),t($,A),t($,C),t(C,z),t($,T)},d(x){x&&s($)}}}function nS(we){let $,O,b,j,A,C,z,T;return{c(){$=r("p"),O=o("There is another plugin "),b=r("code"),j=o("pytest-repeat"),A=o(", but it doesn\u2019t work with "),C=r("code"),z=o("unittest"),T=o(".")},l(x){$=a(x,"P",{});var g=i($);O=l(g,"There is another plugin "),b=a(g,"CODE",{});var S=i(b);j=l(S,"pytest-repeat"),S.forEach(s),A=l(g,", but it doesn\u2019t work with "),C=a(g,"CODE",{});var R=i(C);z=l(R,"unittest"),R.forEach(s),T=l(g,"."),g.forEach(s)},m(x,g){p(x,$,g),t($,O),t($,b),t(b,j),t($,A),t($,C),t(C,z),t($,T)},d(x){x&&s($)}}}function pS(we){let $,O,b,j,A,C,z,T,x,g,S,R,Nt,ye;return{c(){$=r("p"),O=o("In order to run the equivalent of "),b=r("code"),j=o("rm -r"),A=o(` safely, only subdirs of the project repository checkout are allowed if
an explicit `),C=r("code"),z=o("tmp_dir"),T=o(" is used, so that by mistake no "),x=r("code"),g=o("/tmp"),S=o(` or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with `),R=r("code"),Nt=o("./"),ye=o(".")},l(Be){$=a(Be,"P",{});var q=i($);O=l(q,"In order to run the equivalent of "),b=a(q,"CODE",{});var me=i(b);j=l(me,"rm -r"),me.forEach(s),A=l(q,` safely, only subdirs of the project repository checkout are allowed if
an explicit `),C=a(q,"CODE",{});var Ye=i(C);z=l(Ye,"tmp_dir"),Ye.forEach(s),T=l(q," is used, so that by mistake no "),x=a(q,"CODE",{});var Ht=i(x);g=l(Ht,"/tmp"),Ht.forEach(s),S=l(q,` or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with `),R=a(q,"CODE",{});var ti=i(R);Nt=l(ti,"./"),ti.forEach(s),ye=l(q,"."),q.forEach(s)},m(Be,q){p(Be,$,q),t($,O),t($,b),t(b,j),t($,A),t($,C),t(C,z),t($,T),t($,x),t(x,g),t($,S),t($,R),t(R,Nt),t($,ye)},d(Be){Be&&s($)}}}function fS(we){let $,O;return{c(){$=r("p"),O=o(`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`)},l(b){$=a(b,"P",{});var j=i($);O=l(j,`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`),j.forEach(s)},m(b,j){p(b,$,j),t($,O)},d(b){b&&s($)}}}function hS(we){let $,O,b,j,A,C,z,T,x,g,S,R,Nt,ye,Be,q,me,Ye,Ht,ti,OE,IE,si,fp,DE,AE,fm,Ve,zt,hp,Lo,TE,up,qE,hm,Rt,Uo,No,SE,Ho,LE,UE,NE,zo,HE,dp,zE,RE,GE,Ro,Go,FE,Fo,WE,ME,BE,Xe,cp,oi,Wo,YE,VE,XE,mp,L,Mo,JE,ZE,_p,KE,QE,vp,eb,tb,wp,sb,ob,yp,lb,rb,$p,ab,ib,nb,Ep,$e,Bo,pb,fb,bp,hb,ub,gp,db,cb,um,Yo,dm,Gt,mb,Vo,_b,vb,cm,Je,Ft,kp,Xo,wb,jp,yb,mm,Ze,Wt,Cp,Jo,$b,Pp,Eb,_m,Mt,bb,Zo,gb,kb,vm,li,jb,wm,ri,Cb,ym,Ko,$m,ai,Pb,Em,Qo,bm,ii,xb,gm,el,km,ni,Ob,jm,Q,xp,Ib,Db,Op,Ab,Tb,Ip,qb,Sb,Dp,Lb,Cm,Ke,Bt,Ap,tl,Ub,Tp,Nb,Pm,pi,Hb,xm,sl,Om,fi,zb,Im,ol,Dm,Qe,Yt,qp,ll,Rb,Sp,Gb,Am,hi,Fb,Tm,rl,qm,et,Vt,Lp,al,Wb,Up,Mb,Sm,ui,Bb,Lm,il,Um,di,Yb,Nm,Ee,ci,Np,Vb,Xb,Jb,mi,Hp,Zb,Kb,Qb,_i,zp,e3,t3,Hm,vi,s3,zm,nl,Rm,wi,o3,Gm,Xt,l3,Rp,r3,a3,Fm,pl,Wm,yi,i3,Mm,Jt,n3,Gp,p3,f3,Bm,fl,Ym,ee,h3,Fp,u3,d3,Wp,c3,m3,Mp,_3,v3,Vm,Zt,w3,Bp,y3,$3,Xm,hl,Jm,$i,E3,Zm,ul,Km,be,b3,Yp,g3,k3,Vp,j3,C3,Qm,dl,e_,Kt,P3,Xp,x3,O3,t_,Qt,I3,Jp,D3,A3,s_,cl,o_,tt,es,Zp,ml,T3,Kp,q3,l_,ts,S3,_l,L3,U3,r_,vl,a_,wl,i_,Ei,N3,n_,st,ss,Qp,yl,H3,ef,z3,p_,$l,El,R3,G3,f_,bl,h_,ot,F3,tf,W3,M3,sf,B3,u_,ge,Y3,of,V3,X3,lf,J3,Z3,d_,gl,c_,ke,K3,rf,Q3,eg,af,tg,sg,m_,kl,__,bi,og,v_,jl,Cl,lg,rg,w_,lt,os,nf,Pl,ag,pf,ig,y_,ls,ng,ff,pg,fg,$_,xl,E_,rt,rs,hf,Ol,hg,uf,ug,b_,gi,dg,g_,Il,k_,at,as,df,Dl,cg,cf,mg,j_,W,_g,mf,vg,wg,_f,yg,$g,vf,Eg,bg,wf,gg,kg,C_,_e,yf,jg,Cg,$f,Pg,xg,Ef,Og,Ig,P_,je,Dg,bf,Ag,Tg,Al,qg,Sg,x_,it,is,gf,Tl,Lg,kf,Ug,O_,ki,Ng,I_,nt,ns,jf,ql,Hg,Cf,zg,D_,ji,Ci,Sl,Rg,Gg,A_,Ll,T_,Pi,Fg,q_,Ul,S_,ps,L_,fs,U_,pt,hs,Pf,Nl,Wg,xf,Mg,N_,Hl,H_,us,Bg,Of,Yg,Vg,z_,ds,Xg,If,Jg,Zg,R_,zl,G_,xi,Kg,F_,Rl,W_,cs,Qg,Df,e2,t2,M_,Gl,B_,Oi,s2,Y_,Fl,V_,I,o2,Af,l2,r2,Tf,a2,i2,qf,n2,p2,Sf,f2,h2,Lf,u2,d2,Wl,c2,m2,X_,Ce,_2,Ml,Uf,v2,w2,Nf,y2,$2,J_,ft,ms,Hf,Bl,E2,zf,b2,Z_,ht,_s,Rf,Yl,g2,Gf,k2,K_,Vl,Xl,j2,C2,Q_,Jl,ev,Ii,P2,tv,Zl,sv,Di,x2,ov,ut,vs,Ff,Kl,O2,Wf,I2,lv,Pe,D2,Mf,A2,T2,Bf,q2,S2,rv,Ql,av,dt,ws,Yf,er,L2,Vf,U2,iv,tr,sr,N2,H2,nv,or,pv,lr,fv,ct,ys,Xf,rr,z2,Jf,R2,hv,$s,G2,Zf,F2,W2,uv,ar,dv,te,M2,Kf,B2,Y2,Qf,V2,X2,eh,J2,Z2,cv,ir,mv,Ai,K2,_v,Ti,Q2,vv,U,qi,th,e5,t5,s5,Es,sh,o5,l5,oh,r5,a5,i5,bs,lh,n5,p5,rh,f5,h5,u5,gs,ah,d5,c5,ih,m5,_5,v5,ks,nh,w5,y5,ph,$5,E5,b5,js,fh,g5,k5,hh,j5,C5,wv,Si,P5,yv,k,x5,uh,O5,I5,dh,D5,A5,ch,T5,q5,mh,S5,L5,_h,U5,N5,vh,H5,z5,wh,R5,G5,yh,F5,W5,$h,M5,B5,Eh,Y5,V5,$v,Li,X5,Ev,nr,bv,xe,J5,bh,Z5,K5,gh,Q5,ek,gv,pr,kv,Ui,tk,jv,fr,Cv,Oe,sk,kh,ok,lk,jh,rk,ak,Pv,hr,xv,Cs,ik,Ch,nk,pk,Ov,Ni,fk,Iv,Hi,Ph,hk,Dv,ur,Av,mt,Ps,xh,dr,uk,Oh,dk,Tv,_t,Ih,ck,mk,Dh,_k,vk,qv,zi,wk,Sv,xs,Ah,cr,yk,$k,Th,mr,Ek,Lv,Os,bk,qh,gk,kk,Uv,Ri,jk,Nv,_r,Hv,vt,Is,Sh,vr,Ck,Lh,Pk,zv,Ie,xk,Uh,Ok,Ik,Nh,Dk,Ak,Rv,M,Tk,Hh,qk,Sk,zh,Lk,Uk,Rh,Nk,Hk,Gh,zk,Rk,Gv,wr,Fv,Gi,Gk,Wv,yr,Mv,wt,Ds,Fh,$r,Fk,Wh,Wk,Bv,Fi,Mk,Yv,Er,Vv,yt,As,Mh,br,Bk,Bh,Yk,Xv,Wi,Vk,Jv,gr,Zv,Mi,Xk,Kv,Bi,Jk,Qv,kr,e1,$t,Ts,Yh,jr,Zk,Vh,Kk,t1,De,Qk,Xh,e4,t4,Jh,s4,o4,s1,se,l4,Cr,r4,a4,Zh,i4,n4,Kh,p4,f4,o1,Et,qs,Qh,Pr,h4,eu,u4,l1,Yi,d4,r1,xr,a1,Ss,c4,tu,m4,_4,i1,Ae,v4,su,w4,y4,ou,$4,E4,n1,Or,p1,Ls,b4,lu,g4,k4,f1,Ir,h1,Us,j4,ru,C4,P4,u1,Dr,d1,Vi,x4,c1,Ar,m1,Xi,O4,_1,Tr,v1,B,I4,qr,D4,A4,au,T4,q4,iu,S4,L4,nu,U4,N4,w1,oe,H4,pu,z4,R4,fu,G4,F4,hu,W4,M4,y1,Te,B4,uu,Y4,V4,du,X4,J4,$1,Sr,E1,le,Z4,cu,K4,Q4,mu,e0,t0,_u,s0,o0,b1,Lr,g1,Ji,l0,k1,Ur,j1,Zi,r0,C1,Nr,P1,Ki,a0,x1,bt,Ns,vu,Hr,i0,wu,n0,O1,Hs,p0,yu,f0,h0,I1,zs,zr,Qi,$u,u0,d0,c0,G,Rr,Eu,m0,_0,bu,v0,w0,en,gu,y0,$0,E0,Rs,ku,b0,g0,ju,k0,j0,C0,Gs,Cu,P0,x0,Pu,O0,I0,D0,tn,xu,A0,T0,q0,qe,Ou,S0,L0,Iu,U0,N0,Du,H0,z0,R0,Gr,Fr,G0,Au,F0,W0,M0,F,Tu,qu,B0,Y0,Su,Lu,V0,X0,Uu,Nu,J0,Z0,Hu,zu,K0,Q0,Ru,Gu,e6,t6,Fu,Wu,s6,D1,Fs,o6,Mu,l6,r6,A1,Wr,T1,Y,a6,Bu,i6,n6,Yu,p6,f6,Vu,h6,u6,Xu,d6,c6,q1,Mr,S1,gt,Ws,Ju,Br,m6,Zu,_6,L1,Ms,v6,Ku,w6,y6,U1,sn,$6,N1,Se,E6,Qu,b6,g6,ed,k6,j6,H1,on,C6,z1,Yr,R1,Bs,P6,td,x6,O6,G1,ln,sd,I6,F1,Vr,W1,Xr,od,D6,A6,M1,rn,ld,T6,B1,Jr,Y1,an,q6,V1,nn,Zr,kt,S6,rd,L6,U6,ad,N6,H6,z6,ve,pn,id,R6,G6,F6,fn,nd,W6,M6,B6,hn,pd,Y6,V6,X6,un,fd,J6,Z6,X1,Ys,J1,Vs,Z1,jt,Xs,hd,Kr,K6,ud,Q6,K1,Le,e7,dd,t7,s7,cd,o7,l7,Q1,Qr,ew,Ct,Js,md,ea,r7,_d,a7,tw,Zs,i7,vd,n7,p7,sw,dn,f7,ow,Ks,wd,ta,h7,yd,u7,d7,c7,$d,sa,m7,Ed,_7,v7,lw,re,w7,bd,y7,$7,gd,E7,b7,kd,g7,k7,rw,Pt,Qs,jd,oa,j7,Cd,C7,aw,cn,Pd,P7,iw,la,nw,mn,x7,pw,ra,fw,eo,O7,xd,I7,D7,hw,aa,uw,_n,Od,A7,dw,ia,cw,vn,T7,mw,na,_w,to,q7,Id,S7,L7,vw,pa,ww,wn,Dd,U7,yw,fa,$w,yn,Ad,N7,Ew,ha,bw,$n,H7,gw,ua,kw,En,z7,jw,da,Cw,so,R7,ca,G7,F7,Pw,xt,oo,Td,ma,W7,qd,M7,xw,bn,B7,Ow,_a,Iw,Ue,Y7,Sd,V7,X7,Ld,J7,Z7,Dw,va,Aw,ae,K7,Ud,Q7,e8,Nd,t8,s8,Hd,o8,l8,Tw,wa,qw,gn,r8,Sw,kn,a8,Lw,jn,i8,Uw,ie,zd,n8,p8,Rd,f8,h8,Ot,u8,Gd,d8,c8,Fd,m8,_8,v8,Wd,w8,Nw,Ne,y8,Md,$8,E8,Bd,b8,g8,Hw,ya,zw,He,k8,$a,j8,C8,Ea,P8,x8,Rw,lo,O8,Yd,I8,D8,Gw,Cn,A8,Fw,It,ro,Vd,ba,T8,Xd,q8,Ww,V,S8,Jd,L8,U8,Zd,N8,H8,Kd,z8,R8,ga,G8,F8,Mw,ka,Bw,ao,W8,Qd,M8,B8,Yw,ja,Vw,io,Y8,ec,V8,X8,Xw,Ca,Jw,D,J8,tc,Z8,K8,sc,Q8,e9,oc,t9,s9,lc,o9,l9,rc,r9,a9,ac,i9,n9,Zw,no,p9,ic,f9,h9,Kw,Pa,Qw,Pn,u9,ey,xa,ty,ze,d9,nc,c9,m9,pc,_9,v9,sy,Oa,oy,po,w9,fc,y9,$9,ly,Ia,ry,xn,E9,ay,Dt,fo,hc,Da,b9,uc,g9,iy,ho,k9,dc,j9,C9,ny,Aa,py,At,uo,cc,Ta,P9,mc,x9,fy,qa,O9,_c,I9,hy,Sa,uy,ne,D9,vc,A9,T9,wc,q9,S9,yc,L9,U9,dy,La,cy,N,N9,$c,H9,z9,Ec,R9,G9,bc,F9,W9,gc,M9,B9,kc,Y9,V9,my,co,X9,jc,J9,Z9,_y,Tt,mo,Cc,Ua,K9,Pc,Q9,vy,On,ej,wy,Na,yy,qt,_o,xc,Ha,tj,Oc,sj,$y,In,oj,Ey,za,by,St,vo,Ic,Ra,lj,Dc,rj,gy,Dn,aj,ky,pe,Ga,ij,Ac,nj,pj,fj,H,hj,Tc,uj,dj,qc,cj,mj,Sc,_j,vj,Lc,wj,yj,Fa,$j,Ej,Uc,bj,gj,Nc,kj,jj,Wa,Cj,Ma,Pj,xj,jy,Lt,wo,Hc,Ba,Oj,zc,Ij,Cy,An,Dj,Py,fe,Rc,Aj,Tj,Gc,qj,Sj,Fc,Lj,Uj,Wc,Nj,xy,Tn,Hj,Oy,qn,zj,Iy,Sn,Rj,Dy,Ln,Gj,Ay,yo,Un,Mc,Fj,Wj,Mj,Ut,Bj,Bc,Yj,Vj,Yc,Xj,Jj,Ty,Nn,Zj,qy,Ya,Sy,Hn,Kj,Ly,Va,Uy,$o,Qj,Vc,eC,tC,Ny,Eo,sC,Xc,oC,lC,Hy,zn,rC,zy,bo,Jc,Xa,aC,iC,Zc,Ja,nC,Ry;return C=new E({}),Lo=new E({}),Yo=new y({props:{code:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/`,highlighted:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/`}}),Xo=new E({}),Jo=new E({}),Ko=new y({props:{code:"pytest",highlighted:"pytest"}}),Qo=new y({props:{code:"make test",highlighted:'make <span class="hljs-built_in">test</span>'}}),el=new y({props:{code:"python -m pytest -n auto --dist=loadfile -s -v ./tests/",highlighted:"python -m pytest -n auto --dist=loadfile -s -v ./tests/"}}),tl=new E({}),sl=new y({props:{code:"pytest --collect-only -q",highlighted:"pytest --collect-only -q"}}),ol=new y({props:{code:"pytest tests/test_optimization.py --collect-only -q",highlighted:"pytest tests/test_optimization.py --collect-only -q"}}),ll=new E({}),rl=new y({props:{code:"pytest tests/test_logging.py",highlighted:"pytest tests/test_logging.py"}}),al=new E({}),il=new y({props:{code:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w",highlighted:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w"}}),nl=new y({props:{code:"pytest tests/test_optimization.py::OptimizationTest",highlighted:"pytest tests/test_optimization.py::OptimizationTest"}}),pl=new y({props:{code:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q",highlighted:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q"}}),fl=new y({props:{code:"pytest -k adam tests/test_optimization.py",highlighted:"pytest -k adam tests/test_optimization.py"}}),hl=new y({props:{code:'pytest -k "not adam" tests/test_optimization.py',highlighted:'pytest -k <span class="hljs-string">&quot;not adam&quot;</span> tests/test_optimization.py'}}),ul=new y({props:{code:'pytest -k "ada and not adam" tests/test_optimization.py',highlighted:'pytest -k <span class="hljs-string">&quot;ada and not adam&quot;</span> tests/test_optimization.py'}}),dl=new y({props:{code:'pytest -k "test_adam_w or test_adam_w" tests/test_optimization.py',highlighted:'pytest -k <span class="hljs-string">&quot;test_adam_w or test_adam_w&quot;</span> tests/test_optimization.py'}}),cl=new y({props:{code:'pytest -k "test and ada" tests/test_optimization.py',highlighted:'pytest -k <span class="hljs-string">&quot;test and ada&quot;</span> tests/test_optimization.py'}}),ml=new E({}),vl=new y({props:{code:"pip install pytest-picked",highlighted:"pip install pytest-picked"}}),wl=new y({props:{code:"pytest --picked",highlighted:"pytest --picked"}}),yl=new E({}),bl=new y({props:{code:"pip install pytest-xdist",highlighted:"pip install pytest-xdist"}}),gl=new y({props:{code:`[tool:pytest]
looponfailroots = transformers tests`,highlighted:`<span class="hljs-section">[tool:pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`}}),kl=new y({props:{code:`[pytest]
looponfailroots = transformers tests`,highlighted:`<span class="hljs-section">[pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`}}),Pl=new E({}),xl=new y({props:{code:"pytest *ls -1 tests/*py | grep -v test_modeling*",highlighted:'pytest *<span class="hljs-built_in">ls</span> -1 tests/*py | grep -v test_modeling*'}}),Ol=new E({}),Il=new y({props:{code:"pytest --cache-clear tests",highlighted:"pytest --cache-clear tests"}}),Dl=new E({}),Tl=new E({}),ql=new E({}),Ll=new y({props:{code:"pip install pytest-flakefinder",highlighted:"pip install pytest-flakefinder"}}),Ul=new y({props:{code:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py",highlighted:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py"}}),ps=new xE({props:{$$slots:{default:[iS]},$$scope:{ctx:we}}}),fs=new xE({props:{$$slots:{default:[nS]},$$scope:{ctx:we}}}),Nl=new E({}),Hl=new y({props:{code:"pip install pytest-random-order",highlighted:"pip install pytest-random-order"}}),zl=new y({props:{code:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`,highlighted:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`}}),Rl=new y({props:{code:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`,highlighted:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`}}),Gl=new y({props:{code:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py",highlighted:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py"}}),Fl=new y({props:{code:"pytest --random-order-bucket=none",highlighted:"pytest --random-order-bucket=none"}}),Bl=new E({}),Yl=new E({}),Jl=new y({props:{code:"pip install pytest-sugar",highlighted:"pip install pytest-sugar"}}),Zl=new y({props:{code:"pytest -p no:sugar",highlighted:"pytest -p no:sugar"}}),Kl=new E({}),Ql=new y({props:{code:"pytest --pspec tests/test_optimization.py",highlighted:"pytest --pspec tests/test_optimization.py"}}),er=new E({}),or=new y({props:{code:"pip install pytest-instafail",highlighted:"pip install pytest-instafail"}}),lr=new y({props:{code:"pytest --instafail",highlighted:"pytest --instafail"}}),rr=new E({}),ar=new y({props:{code:'CUDA_VISIBLE_DEVICES="" pytest tests/test_logging.py',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;&quot;</span> pytest tests/test_logging.py'}}),ir=new y({props:{code:'CUDA_VISIBLE_DEVICES="1" pytest tests/test_logging.py',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;1&quot;</span> pytest tests/test_logging.py'}}),nr=new y({props:{code:`@require_torch_multi_gpu
def test_example_with_multi_gpu():`,highlighted:`<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_with_multi_gpu</span>():`}}),pr=new y({props:{code:`@require_tf
def test_tf_thing_with_tensorflow():`,highlighted:`<span class="hljs-meta">@require_tf</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tf_thing_with_tensorflow</span>():`}}),fr=new y({props:{code:`@require_torch_gpu
@slow
def test_example_slow_on_gpu():`,highlighted:`<span class="hljs-meta">@require_torch_gpu</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_slow_on_gpu</span>():`}}),hr=new y({props:{code:`@parameterized.expand(...)
@require_torch_multi_gpu
def test_integration_foo():`,highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),ur=new y({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> get_gpu_count

n_gpu = get_gpu_count()  <span class="hljs-comment"># works with torch and tf</span>`}}),dr=new E({}),_r=new y({props:{code:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py",highlighted:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py"}}),vr=new E({}),wr=new y({props:{code:"pytest -s tests/test_logging.py",highlighted:"pytest -s tests/test_logging.py"}}),yr=new y({props:{code:"py.test tests --junitxml=result.xml",highlighted:"py.test tests --junitxml=result.xml"}}),$r=new E({}),Er=new y({props:{code:"pytest --color=no tests/test_logging.py",highlighted:"pytest --color=no tests/test_logging.py"}}),br=new E({}),gr=new y({props:{code:"pytest --pastebin=failed tests/test_logging.py",highlighted:"pytest --pastebin=failed tests/test_logging.py"}}),kr=new y({props:{code:"pytest --pastebin=all tests/test_logging.py",highlighted:"pytest --pastebin=all tests/test_logging.py"}}),jr=new E({}),Pr=new E({}),xr=new y({props:{code:`
`,highlighted:`<span class="hljs-comment"># test_this1.py</span>
<span class="hljs-keyword">import</span> unittest
<span class="hljs-keyword">from</span> parameterized <span class="hljs-keyword">import</span> parameterized


<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMathUnitTest</span>(unittest.TestCase):
<span class="hljs-meta">    @parameterized.expand(<span class="hljs-params">
        [
            (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
            (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
            (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
        ]
    </span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">self, name, <span class="hljs-built_in">input</span>, expected</span>):
        assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`}}),Or=new y({props:{code:'pytest -k "negative and integer" tests/test_mytest.py',highlighted:'pytest -k <span class="hljs-string">&quot;negative and integer&quot;</span> tests/test_mytest.py'}}),Ir=new y({props:{code:'pytest -k "not negative" tests/test_mytest.py',highlighted:'pytest -k <span class="hljs-string">&quot;not negative&quot;</span> tests/test_mytest.py'}}),Dr=new y({props:{code:"pytest test_this1.py --collect-only -q",highlighted:"pytest test_this1.py --collect-only -q"}}),Ar=new y({props:{code:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction`,highlighted:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction`}}),Tr=new y({props:{code:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer",highlighted:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer"}}),Sr=new y({props:{code:`
`,highlighted:`<span class="hljs-comment"># test_this2.py</span>
<span class="hljs-keyword">import</span> pytest


<span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params">
    <span class="hljs-string">&quot;name, input, expected&quot;</span>,
    [
        (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
    ],
</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">name, <span class="hljs-built_in">input</span>, expected</span>):
    assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`}}),Lr=new y({props:{code:"pytest test_this2.py --collect-only -q",highlighted:"pytest test_this2.py --collect-only -q"}}),Ur=new y({props:{code:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1]`,highlighted:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1]`}}),Nr=new y({props:{code:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0]",highlighted:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0]"}}),Hr=new E({}),Wr=new y({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_local_locations</span>(<span class="hljs-params">self</span>):
        data_dir = self.tests_dir / <span class="hljs-string">&quot;fixtures/tests_samples/wmt_en_ro&quot;</span>`}}),Mr=new y({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_stringified_locations</span>(<span class="hljs-params">self</span>):
        examples_dir = self.examples_dir_str`}}),Br=new E({}),Yr=new y({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamplesTests</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
        tmp_dir = self.get_auto_remove_tmp_dir()`}}),Vr=new y({props:{code:`def test_whatever(self):
    tmp_dir = self.get_auto_remove_tmp_dir()`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir()`}}),Jr=new y({props:{code:`def test_whatever(self):
    tmp_dir = self.get_auto_remove_tmp_dir("./xxx")`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir(<span class="hljs-string">&quot;./xxx&quot;</span>)`}}),Ys=new xE({props:{$$slots:{default:[pS]},$$scope:{ctx:we}}}),Vs=new xE({props:{$$slots:{default:[fS]},$$scope:{ctx:we}}}),Kr=new E({}),Qr=new y({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> ExtendSysPath

bindir = os.path.abspath(os.path.dirname(__file__))
<span class="hljs-keyword">with</span> ExtendSysPath(<span class="hljs-string">f&quot;<span class="hljs-subst">{bindir}</span>/..&quot;</span>):
    <span class="hljs-keyword">from</span> test_trainer <span class="hljs-keyword">import</span> TrainerIntegrationCommon  <span class="hljs-comment"># noqa</span>`}}),ea=new E({}),oa=new E({}),la=new y({props:{code:`@unittest.skip("this bug needs to be fixed")
def test_feature_x():`,highlighted:`<span class="hljs-meta">@unittest.skip(<span class="hljs-params"><span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),ra=new y({props:{code:'@pytest.mark.skip(reason="this bug needs to be fixed")',highlighted:'<span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>'}}),aa=new y({props:{code:`@pytest.mark.xfail
def test_feature_x():`,highlighted:`<span class="hljs-meta">@pytest.mark.xfail</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),ia=new y({props:{code:`def test_feature_x():
    if not has_something():
        pytest.skip("unsupported configuration")`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> has_something():
        pytest.skip(<span class="hljs-string">&quot;unsupported configuration&quot;</span>)`}}),na=new y({props:{code:"",highlighted:`<span class="hljs-keyword">import</span> pytest

<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pytest.config.getoption(<span class="hljs-string">&quot;--custom-flag&quot;</span>):
    pytest.skip(<span class="hljs-string">&quot;--custom-flag is missing, skipping tests&quot;</span>, allow_module_level=<span class="hljs-literal">True</span>)`}}),pa=new y({props:{code:`def test_feature_x():
    pytest.xfail("expected to fail until bug XYZ is fixed")`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    pytest.xfail(<span class="hljs-string">&quot;expected to fail until bug XYZ is fixed&quot;</span>)`}}),fa=new y({props:{code:'docutils = pytest.importorskip("docutils", minversion="0.3")',highlighted:'docutils = pytest.importorskip(<span class="hljs-string">&quot;docutils&quot;</span>, minversion=<span class="hljs-string">&quot;0.3&quot;</span>)'}}),ha=new y({props:{code:`@pytest.mark.skipif(sys.version_info < (3,6), reason="requires python3.6 or higher")
def test_feature_x():`,highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>,<span class="hljs-number">6</span></span>), reason=<span class="hljs-string">&quot;requires python3.6 or higher&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),ua=new y({props:{code:`@unittest.skipIf(torch_device == "cpu", "Can't do half precision")
def test_feature_x():`,highlighted:`<span class="hljs-meta">@unittest.skipIf(<span class="hljs-params">torch_device == <span class="hljs-string">&quot;cpu&quot;</span>, <span class="hljs-string">&quot;Can&#x27;t do half precision&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),da=new y({props:{code:`@pytest.mark.skipif(sys.platform == 'win32', reason="does not run on windows")
class TestClass():
    def test_feature_x(self):`,highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>, reason=<span class="hljs-string">&quot;does not run on windows&quot;</span></span>)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>(<span class="hljs-params">self</span>):`}}),ma=new E({}),_a=new y({props:{code:`from transformers.testing_utils import slow
@slow
def test_integration_foo():`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> slow
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),va=new y({props:{code:"RUN_SLOW=1 pytest tests",highlighted:"RUN_SLOW=1 pytest tests"}}),wa=new y({props:{code:`@parameteriz ed.expand(...)
@slow
def test_integration_foo():`,highlighted:`<span class="hljs-meta">@parameteriz ed.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),ya=new y({props:{code:"grep tiny tests examples",highlighted:"grep tiny tests examples"}}),ba=new E({}),ka=new y({props:{code:`




`,highlighted:`<span class="hljs-keyword">import</span> sys


<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>):
    <span class="hljs-built_in">print</span>(s)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stderr</span>(<span class="hljs-params">s</span>):
    sys.stderr.write(s)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>(<span class="hljs-params">capsys</span>):
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    print_to_stdout(msg)
    print_to_stderr(msg)
    out, err = capsys.readouterr()  <span class="hljs-comment"># consume the captured output streams</span>
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    sys.stderr.write(err)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> err`}}),ja=new y({props:{code:`
`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">raise_exception</span>(<span class="hljs-params">msg</span>):
    <span class="hljs-keyword">raise</span> ValueError(msg)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_exception</span>():
    msg = <span class="hljs-string">&quot;Not a good value&quot;</span>
    error = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">try</span>:
        raise_exception(msg)
    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
        error = <span class="hljs-built_in">str</span>(e)
        <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> error, <span class="hljs-string">f&quot;<span class="hljs-subst">{msg}</span> is in the exception:\\n<span class="hljs-subst">{error}</span>&quot;</span>`}}),Ca=new y({props:{code:`


`,highlighted:`<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO
<span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> redirect_stdout


<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>):
    <span class="hljs-built_in">print</span>(s)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>():
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    buffer = StringIO()
    <span class="hljs-keyword">with</span> redirect_stdout(buffer):
        print_to_stdout(msg)
    out = buffer.getvalue()
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out`}}),Pa=new y({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout

<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout()
<span class="hljs-built_in">print</span>(cs.out)`}}),xa=new y({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout

msg = <span class="hljs-string">&quot;Secret message\\r&quot;</span>
final = <span class="hljs-string">&quot;Hello World&quot;</span>
<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    <span class="hljs-built_in">print</span>(msg + final)
<span class="hljs-keyword">assert</span> cs.out == final + <span class="hljs-string">&quot;\\n&quot;</span>, <span class="hljs-string">f&quot;captured: <span class="hljs-subst">{cs.out}</span>, expecting <span class="hljs-subst">{final}</span>&quot;</span>`}}),Oa=new y({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStderr

<span class="hljs-keyword">with</span> CaptureStderr() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stderr()
<span class="hljs-built_in">print</span>(cs.err)`}}),Ia=new y({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStd

<span class="hljs-keyword">with</span> CaptureStd() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout_and_stderr()
<span class="hljs-built_in">print</span>(cs.err, cs.out)`}}),Da=new E({}),Aa=new y({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> logging
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureLogger

msg = <span class="hljs-string">&quot;Testing 1, 2, 3&quot;</span>
logging.set_verbosity_info()
logger = logging.get_logger(<span class="hljs-string">&quot;transformers.models.bart.tokenization_bart&quot;</span>)
<span class="hljs-keyword">with</span> CaptureLogger(logger) <span class="hljs-keyword">as</span> cl:
    logger.info(msg)
<span class="hljs-keyword">assert</span> cl.out, msg + <span class="hljs-string">&quot;\\n&quot;</span>`}}),Ta=new E({}),Sa=new y({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> mockenv


<span class="hljs-keyword">class</span> <span class="hljs-title class_">HfArgumentParserTest</span>(unittest.TestCase):
<span class="hljs-meta">    @mockenv(<span class="hljs-params">TRANSFORMERS_VERBOSITY=<span class="hljs-string">&quot;error&quot;</span></span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_env_override</span>(<span class="hljs-params">self</span>):
        env_level_str = os.getenv(<span class="hljs-string">&quot;TRANSFORMERS_VERBOSITY&quot;</span>, <span class="hljs-literal">None</span>)`}}),La=new y({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus


<span class="hljs-keyword">class</span> <span class="hljs-title class_">EnvExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_external_prog</span>(<span class="hljs-params">self</span>):
        env = self.get_env()
        <span class="hljs-comment"># now call the external program, passing \`env\` to it</span>`}}),Ua=new E({}),Na=new y({props:{code:`





`,highlighted:`seed = <span class="hljs-number">42</span>

<span class="hljs-comment"># python RNG</span>
<span class="hljs-keyword">import</span> random

random.seed(seed)

<span class="hljs-comment"># pytorch RNGs</span>
<span class="hljs-keyword">import</span> torch

torch.manual_seed(seed)
torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span>
<span class="hljs-keyword">if</span> torch.cuda.is_available():
    torch.cuda.manual_seed_all(seed)

<span class="hljs-comment"># numpy RNG</span>
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

np.random.seed(seed)

<span class="hljs-comment"># tf RNG</span>
tf.random.set_seed(seed)`}}),Ha=new E({}),za=new y({props:{code:"pytest tests/test_logging.py -W error::UserWarning --pdb",highlighted:"pytest tests/test_logging.py -W error::UserWarning --pdb"}}),Ra=new E({}),Ba=new E({}),Ya=new y({props:{code:`- run:
    name: run CI experiment
    command: |
        set +euo pipefail
        echo "setting run-all-despite-any-errors-mode"
        this_command_will_fail
        echo "but bash continues to run"
        # emulate another failure
        false
        # but the last command must be a success
        echo "during experiment do not remove: reporting success to CI, even if there were failures"`,highlighted:`<span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">CI</span> <span class="hljs-string">experiment</span>
    <span class="hljs-attr">command:</span> <span class="hljs-string">|
        set +euo pipefail
        echo &quot;setting run-all-despite-any-errors-mode&quot;
        this_command_will_fail
        echo &quot;but bash continues to run&quot;
        # emulate another failure
        false
        # but the last command must be a success
        echo &quot;during experiment do not remove: reporting success to CI, even if there were failures&quot;</span>`}}),Va=new y({props:{code:"cmd_that_may_fail || true",highlighted:'cmd_that_may_fail || <span class="hljs-literal">true</span>'}}),{c(){$=r("meta"),O=f(),b=r("h1"),j=r("a"),A=r("span"),d(C.$$.fragment),z=f(),T=r("span"),x=o("Testing"),g=f(),S=r("p"),R=o("Let\u2019s take a look at how \u{1F917} Transformers models are tested and how you can write new tests and improve the existing ones."),Nt=f(),ye=r("p"),Be=o("There are 2 test suites in the repository:"),q=f(),me=r("ol"),Ye=r("li"),Ht=r("code"),ti=o("tests"),OE=o(" \u2014 tests for the general API"),IE=f(),si=r("li"),fp=r("code"),DE=o("examples"),AE=o(" \u2014 tests primarily for various applications that aren\u2019t part of the API"),fm=f(),Ve=r("h2"),zt=r("a"),hp=r("span"),d(Lo.$$.fragment),TE=f(),up=r("span"),qE=o("How transformers are tested"),hm=f(),Rt=r("ol"),Uo=r("li"),No=r("p"),SE=o(`Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this `),Ho=r("a"),LE=o("config file"),UE=o(`, so that if needed you can reproduce the same
environment on your machine.`),NE=f(),zo=r("p"),HE=o("These CI jobs don\u2019t run "),dp=r("code"),zE=o("@slow"),RE=o(" tests."),GE=f(),Ro=r("li"),Go=r("p"),FE=o("There are 3 jobs run by "),Fo=r("a"),WE=o("github actions"),ME=o(":"),BE=f(),Xe=r("ul"),cp=r("li"),oi=r("p"),Wo=r("a"),YE=o("torch hub integration"),VE=o(`: checks whether torch hub
integration works.`),XE=f(),mp=r("li"),L=r("p"),Mo=r("a"),JE=o("self-hosted (push)"),ZE=o(`: runs fast tests on GPU only on commits on
`),_p=r("code"),KE=o("main"),QE=o(". It only runs if a commit on "),vp=r("code"),eb=o("main"),tb=o(" has updated the code in one of the following folders: "),wp=r("code"),sb=o("src"),ob=o(`,
`),yp=r("code"),lb=o("tests"),rb=o(", "),$p=r("code"),ab=o(".github"),ib=o(" (to prevent running on added model cards, notebooks, etc.)"),nb=f(),Ep=r("li"),$e=r("p"),Bo=r("a"),pb=o("self-hosted runner"),fb=o(`: runs normal and slow tests on GPU in
`),bp=r("code"),hb=o("tests"),ub=o(" and "),gp=r("code"),db=o("examples"),cb=o(":"),um=f(),d(Yo.$$.fragment),dm=f(),Gt=r("p"),mb=o("The results can be observed "),Vo=r("a"),_b=o("here"),vb=o("."),cm=f(),Je=r("h2"),Ft=r("a"),kp=r("span"),d(Xo.$$.fragment),wb=f(),jp=r("span"),yb=o("Running tests"),mm=f(),Ze=r("h3"),Wt=r("a"),Cp=r("span"),d(Jo.$$.fragment),$b=f(),Pp=r("span"),Eb=o("Choosing which tests to run"),_m=f(),Mt=r("p"),bb=o(`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them `),Zo=r("a"),gb=o("here"),kb=o("."),vm=f(),li=r("p"),jb=o("Here are some most useful ways of running tests."),wm=f(),ri=r("p"),Cb=o("Run all:"),ym=f(),d(Ko.$$.fragment),$m=f(),ai=r("p"),Pb=o("or:"),Em=f(),d(Qo.$$.fragment),bm=f(),ii=r("p"),xb=o("Note that the latter is defined as:"),gm=f(),d(el.$$.fragment),km=f(),ni=r("p"),Ob=o("which tells pytest to:"),jm=f(),Q=r("ul"),xp=r("li"),Ib=o("run as many test processes as they are CPU cores (which could be too many if you don\u2019t have a ton of RAM!)"),Db=f(),Op=r("li"),Ab=o("ensure that all tests from the same file will be run by the same test process"),Tb=f(),Ip=r("li"),qb=o("do not capture output"),Sb=f(),Dp=r("li"),Lb=o("run in verbose mode"),Cm=f(),Ke=r("h3"),Bt=r("a"),Ap=r("span"),d(tl.$$.fragment),Ub=f(),Tp=r("span"),Nb=o("Getting the list of all tests"),Pm=f(),pi=r("p"),Hb=o("All tests of the test suite:"),xm=f(),d(sl.$$.fragment),Om=f(),fi=r("p"),zb=o("All tests of a given test file:"),Im=f(),d(ol.$$.fragment),Dm=f(),Qe=r("h3"),Yt=r("a"),qp=r("span"),d(ll.$$.fragment),Rb=f(),Sp=r("span"),Gb=o("Run a specific test module"),Am=f(),hi=r("p"),Fb=o("To run an individual test module:"),Tm=f(),d(rl.$$.fragment),qm=f(),et=r("h3"),Vt=r("a"),Lp=r("span"),d(al.$$.fragment),Wb=f(),Up=r("span"),Mb=o("Run specific tests"),Sm=f(),ui=r("p"),Bb=o(`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`),Lm=f(),d(il.$$.fragment),Um=f(),di=r("p"),Yb=o("Here:"),Nm=f(),Ee=r("ul"),ci=r("li"),Np=r("code"),Vb=o("tests/test_optimization.py"),Xb=o(" - the file with tests"),Jb=f(),mi=r("li"),Hp=r("code"),Zb=o("OptimizationTest"),Kb=o(" - the name of the class"),Qb=f(),_i=r("li"),zp=r("code"),e3=o("test_adam_w"),t3=o(" - the name of the specific test function"),Hm=f(),vi=r("p"),s3=o("If the file contains multiple classes, you can choose to run only tests of a given class. For example:"),zm=f(),d(nl.$$.fragment),Rm=f(),wi=r("p"),o3=o("will run all the tests inside that class."),Gm=f(),Xt=r("p"),l3=o("As mentioned earlier you can see what tests are contained inside the "),Rp=r("code"),r3=o("OptimizationTest"),a3=o(" class by running:"),Fm=f(),d(pl.$$.fragment),Wm=f(),yi=r("p"),i3=o("You can run tests by keyword expressions."),Mm=f(),Jt=r("p"),n3=o("To run only tests whose name contains "),Gp=r("code"),p3=o("adam"),f3=o(":"),Bm=f(),d(fl.$$.fragment),Ym=f(),ee=r("p"),h3=o("Logical "),Fp=r("code"),u3=o("and"),d3=o(" and "),Wp=r("code"),c3=o("or"),m3=o(" can be used to indicate whether all keywords should match or either. "),Mp=r("code"),_3=o("not"),v3=o(` can be used to
negate.`),Vm=f(),Zt=r("p"),w3=o("To run all tests except those whose name contains "),Bp=r("code"),y3=o("adam"),$3=o(":"),Xm=f(),d(hl.$$.fragment),Jm=f(),$i=r("p"),E3=o("And you can combine the two patterns in one:"),Zm=f(),d(ul.$$.fragment),Km=f(),be=r("p"),b3=o("For example to run both "),Yp=r("code"),g3=o("test_adafactor"),k3=o(" and "),Vp=r("code"),j3=o("test_adam_w"),C3=o(" you can use:"),Qm=f(),d(dl.$$.fragment),e_=f(),Kt=r("p"),P3=o("Note that we use "),Xp=r("code"),x3=o("or"),O3=o(" here, since we want either of the keywords to match to include both."),t_=f(),Qt=r("p"),I3=o("If you want to include only tests that include both patterns, "),Jp=r("code"),D3=o("and"),A3=o(" is to be used:"),s_=f(),d(cl.$$.fragment),o_=f(),tt=r("h3"),es=r("a"),Zp=r("span"),d(ml.$$.fragment),T3=f(),Kp=r("span"),q3=o("Run only modified tests"),l_=f(),ts=r("p"),S3=o("You can run the tests related to the unstaged files or the current branch (according to Git) by using "),_l=r("a"),L3=o("pytest-picked"),U3=o(`. This is a great way of quickly testing your changes didn\u2019t break
anything, since it won\u2019t run the tests related to files you didn\u2019t touch.`),r_=f(),d(vl.$$.fragment),a_=f(),d(wl.$$.fragment),i_=f(),Ei=r("p"),N3=o("All tests will be run from files and folders which are modified, but not yet committed."),n_=f(),st=r("h3"),ss=r("a"),Qp=r("span"),d(yl.$$.fragment),H3=f(),ef=r("span"),z3=o("Automatically rerun failed tests on source modification"),p_=f(),$l=r("p"),El=r("a"),R3=o("pytest-xdist"),G3=o(` provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you don\u2019t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`),f_=f(),d(bl.$$.fragment),h_=f(),ot=r("p"),F3=o("To enter the mode: "),tf=r("code"),W3=o("pytest -f"),M3=o(" or "),sf=r("code"),B3=o("pytest --looponfail"),u_=f(),ge=r("p"),Y3=o("File changes are detected by looking at "),of=r("code"),V3=o("looponfailroots"),X3=o(` root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in `),lf=r("code"),J3=o("setup.cfg"),Z3=o(":"),d_=f(),d(gl.$$.fragment),c_=f(),ke=r("p"),K3=o("or "),rf=r("code"),Q3=o("pytest.ini"),eg=o("/"),af=r("code"),tg=o("tox.ini"),sg=o(" files:"),m_=f(),d(kl.$$.fragment),__=f(),bi=r("p"),og=o(`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-file\u2019s
directory.`),v_=f(),jl=r("p"),Cl=r("a"),lg=o("pytest-watch"),rg=o(" is an alternative implementation of this functionality."),w_=f(),lt=r("h3"),os=r("a"),nf=r("span"),d(Pl.$$.fragment),ag=f(),pf=r("span"),ig=o("Skip a test module"),y_=f(),ls=r("p"),ng=o(`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except `),ff=r("code"),pg=o("test_modeling_*.py"),fg=o(" tests:"),$_=f(),d(xl.$$.fragment),E_=f(),rt=r("h3"),rs=r("a"),hf=r("span"),d(Ol.$$.fragment),hg=f(),uf=r("span"),ug=o("Clearing state"),b_=f(),gi=r("p"),dg=o("CI builds and when isolation is important (against speed), cache should be cleared:"),g_=f(),d(Il.$$.fragment),k_=f(),at=r("h3"),as=r("a"),df=r("span"),d(Dl.$$.fragment),cg=f(),cf=r("span"),mg=o("Running tests in parallel"),j_=f(),W=r("p"),_g=o("As mentioned earlier "),mf=r("code"),vg=o("make test"),wg=o(" runs tests in parallel via "),_f=r("code"),yg=o("pytest-xdist"),$g=o(" plugin ("),vf=r("code"),Eg=o("-n X"),bg=o(" argument, e.g. "),wf=r("code"),gg=o("-n 2"),kg=o(`
to run 2 parallel jobs).`),C_=f(),_e=r("p"),yf=r("code"),jg=o("pytest-xdist"),Cg=o("\u2019s "),$f=r("code"),Pg=o("--dist="),xg=o(" option allows one to control how the tests are grouped. "),Ef=r("code"),Og=o("--dist=loadfile"),Ig=o(` puts the
tests located in one file onto the same process.`),P_=f(),je=r("p"),Dg=o("Since the order of executed tests is different and unpredictable, if running the test suite with "),bf=r("code"),Ag=o("pytest-xdist"),Tg=o(`
produces failures (meaning we have some undetected coupled tests), use `),Al=r("a"),qg=o("pytest-replay"),Sg=o(` to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`),x_=f(),it=r("h3"),is=r("a"),gf=r("span"),d(Tl.$$.fragment),Lg=f(),kf=r("span"),Ug=o("Test order and repetition"),O_=f(),ki=r("p"),Ng=o(`It\u2019s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`),I_=f(),nt=r("h4"),ns=r("a"),jf=r("span"),d(ql.$$.fragment),Hg=f(),Cf=r("span"),zg=o("Repeat tests"),D_=f(),ji=r("ul"),Ci=r("li"),Sl=r("a"),Rg=o("pytest-flakefinder"),Gg=o(":"),A_=f(),d(Ll.$$.fragment),T_=f(),Pi=r("p"),Fg=o("And then run every test multiple times (50 by default):"),q_=f(),d(Ul.$$.fragment),S_=f(),d(ps.$$.fragment),L_=f(),d(fs.$$.fragment),U_=f(),pt=r("h4"),hs=r("a"),Pf=r("span"),d(Nl.$$.fragment),Wg=f(),xf=r("span"),Mg=o("Run tests in a random order"),N_=f(),d(Hl.$$.fragment),H_=f(),us=r("p"),Bg=o("Important: the presence of "),Of=r("code"),Yg=o("pytest-random-order"),Vg=o(` will automatically randomize tests, no configuration change or
command line options is required.`),z_=f(),ds=r("p"),Xg=o(`As explained earlier this allows detection of coupled tests - where one test\u2019s state affects the state of another. When
`),If=r("code"),Jg=o("pytest-random-order"),Zg=o(" is installed it will print the random seed it used for that session, e.g:"),R_=f(),d(zl.$$.fragment),G_=f(),xi=r("p"),Kg=o("So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:"),F_=f(),d(Rl.$$.fragment),W_=f(),cs=r("p"),Qg=o(`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using `),Df=r("code"),e2=o("--random-order-bucket=none"),t2=o(", e.g.:"),M_=f(),d(Gl.$$.fragment),B_=f(),Oi=r("p"),s2=o("To disable the shuffling for all tests:"),Y_=f(),d(Fl.$$.fragment),V_=f(),I=r("p"),o2=o("By default "),Af=r("code"),l2=o("--random-order-bucket=module"),r2=o(` is implied, which will shuffle the files on the module levels. It can also
shuffle on `),Tf=r("code"),a2=o("class"),i2=o(", "),qf=r("code"),n2=o("package"),p2=o(", "),Sf=r("code"),f2=o("global"),h2=o(" and "),Lf=r("code"),u2=o("none"),d2=o(` levels. For the complete details please see its
`),Wl=r("a"),c2=o("documentation"),m2=o("."),X_=f(),Ce=r("p"),_2=o("Another randomization alternative is: "),Ml=r("a"),Uf=r("code"),v2=o("pytest-randomly"),w2=o(`. This
module has a very similar functionality/interface, but it doesn\u2019t have the bucket modes available in
`),Nf=r("code"),y2=o("pytest-random-order"),$2=o(". It has the same problem of imposing itself once installed."),J_=f(),ft=r("h3"),ms=r("a"),Hf=r("span"),d(Bl.$$.fragment),E2=f(),zf=r("span"),b2=o("Look and feel variations"),Z_=f(),ht=r("h4"),_s=r("a"),Rf=r("span"),d(Yl.$$.fragment),g2=f(),Gf=r("span"),k2=o("pytest-sugar"),K_=f(),Vl=r("p"),Xl=r("a"),j2=o("pytest-sugar"),C2=o(` is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`),Q_=f(),d(Jl.$$.fragment),ev=f(),Ii=r("p"),P2=o("To run tests without it, run:"),tv=f(),d(Zl.$$.fragment),sv=f(),Di=r("p"),x2=o("or uninstall it."),ov=f(),ut=r("h4"),vs=r("a"),Ff=r("span"),d(Kl.$$.fragment),O2=f(),Wf=r("span"),I2=o("Report each sub-test name and its progress"),lv=f(),Pe=r("p"),D2=o("For a single or a group of tests via "),Mf=r("code"),A2=o("pytest"),T2=o(" (after "),Bf=r("code"),q2=o("pip install pytest-pspec"),S2=o("):"),rv=f(),d(Ql.$$.fragment),av=f(),dt=r("h4"),ws=r("a"),Yf=r("span"),d(er.$$.fragment),L2=f(),Vf=r("span"),U2=o("Instantly shows failed tests"),iv=f(),tr=r("p"),sr=r("a"),N2=o("pytest-instafail"),H2=o(` shows failures and errors instantly instead of
waiting until the end of test session.`),nv=f(),d(or.$$.fragment),pv=f(),d(lr.$$.fragment),fv=f(),ct=r("h3"),ys=r("a"),Xf=r("span"),d(rr.$$.fragment),z2=f(),Jf=r("span"),R2=o("To GPU or not to GPU"),hv=f(),$s=r("p"),G2=o("On a GPU-enabled setup, to test in CPU-only mode add "),Zf=r("code"),F2=o('CUDA_VISIBLE_DEVICES=""'),W2=o(":"),uv=f(),d(ar.$$.fragment),dv=f(),te=r("p"),M2=o("or if you have multiple gpus, you can specify which one is to be used by "),Kf=r("code"),B2=o("pytest"),Y2=o(`. For example, to use only the
second gpu if you have gpus `),Qf=r("code"),V2=o("0"),X2=o(" and "),eh=r("code"),J2=o("1"),Z2=o(", you can run:"),cv=f(),d(ir.$$.fragment),mv=f(),Ai=r("p"),K2=o("This is handy when you want to run different tasks on different GPUs."),_v=f(),Ti=r("p"),Q2=o(`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`),vv=f(),U=r("ul"),qi=r("li"),th=r("code"),e5=o("require_torch"),t5=o(" - this test will run only under torch"),s5=f(),Es=r("li"),sh=r("code"),o5=o("require_torch_gpu"),l5=o(" - as "),oh=r("code"),r5=o("require_torch"),a5=o(" plus requires at least 1 GPU"),i5=f(),bs=r("li"),lh=r("code"),n5=o("require_torch_multi_gpu"),p5=o(" - as "),rh=r("code"),f5=o("require_torch"),h5=o(" plus requires at least 2 GPUs"),u5=f(),gs=r("li"),ah=r("code"),d5=o("require_torch_non_multi_gpu"),c5=o(" - as "),ih=r("code"),m5=o("require_torch"),_5=o(" plus requires 0 or 1 GPUs"),v5=f(),ks=r("li"),nh=r("code"),w5=o("require_torch_up_to_2_gpus"),y5=o(" - as "),ph=r("code"),$5=o("require_torch"),E5=o(" plus requires 0 or 1 or 2 GPUs"),b5=f(),js=r("li"),fh=r("code"),g5=o("require_torch_tpu"),k5=o(" - as "),hh=r("code"),j5=o("require_torch"),C5=o(" plus requires at least 1 TPU"),wv=f(),Si=r("p"),P5=o("Let\u2019s depict the GPU requirements in the following table:"),yv=f(),k=r("p"),x5=o(`| n gpus | decorator                      |
|--------+--------------------------------|
| `),uh=r("code"),O5=o(">= 0"),I5=o(" | "),dh=r("code"),D5=o("@require_torch"),A5=o(`               |
| `),ch=r("code"),T5=o(">= 1"),q5=o(" | "),mh=r("code"),S5=o("@require_torch_gpu"),L5=o(`           |
| `),_h=r("code"),U5=o(">= 2"),N5=o(" | "),vh=r("code"),H5=o("@require_torch_multi_gpu"),z5=o(`     |
| `),wh=r("code"),R5=o("< 2"),G5=o("  | "),yh=r("code"),F5=o("@require_torch_non_multi_gpu"),W5=o(` |
| `),$h=r("code"),M5=o("< 3"),B5=o("  | "),Eh=r("code"),Y5=o("@require_torch_up_to_2_gpus"),V5=o("  |"),$v=f(),Li=r("p"),X5=o("For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:"),Ev=f(),d(nr.$$.fragment),bv=f(),xe=r("p"),J5=o("If a test requires "),bh=r("code"),Z5=o("tensorflow"),K5=o(" use the "),gh=r("code"),Q5=o("require_tf"),ek=o(" decorator. For example:"),gv=f(),d(pr.$$.fragment),kv=f(),Ui=r("p"),tk=o(`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`),jv=f(),d(fr.$$.fragment),Cv=f(),Oe=r("p"),sk=o("Some decorators like "),kh=r("code"),ok=o("@parametrized"),lk=o(" rewrite test names, therefore "),jh=r("code"),rk=o("@require_*"),ak=o(` skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`),Pv=f(),d(hr.$$.fragment),xv=f(),Cs=r("p"),ik=o("This order problem doesn\u2019t exist with "),Ch=r("code"),nk=o("@pytest.mark.parametrize"),pk=o(`, you can put it first or last and it will still
work. But it only works with non-unittests.`),Ov=f(),Ni=r("p"),fk=o("Inside tests:"),Iv=f(),Hi=r("ul"),Ph=r("li"),hk=o("How many GPUs are available:"),Dv=f(),d(ur.$$.fragment),Av=f(),mt=r("h3"),Ps=r("a"),xh=r("span"),d(dr.$$.fragment),uk=f(),Oh=r("span"),dk=o("Distributed training"),Tv=f(),_t=r("p"),Ih=r("code"),ck=o("pytest"),mk=o(` can\u2019t deal with distributed training directly. If this is attempted - the sub-processes don\u2019t do the right
thing and end up thinking they are `),Dh=r("code"),_k=o("pytest"),vk=o(` and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`),qv=f(),zi=r("p"),wk=o("Here are some tests that use it:"),Sv=f(),xs=r("ul"),Ah=r("li"),cr=r("a"),yk=o("test_trainer_distributed.py"),$k=f(),Th=r("li"),mr=r("a"),Ek=o("test_deepspeed.py"),Lv=f(),Os=r("p"),bk=o("To jump right into the execution point, search for the "),qh=r("code"),gk=o("execute_subprocess_async"),kk=o(" call in those tests."),Uv=f(),Ri=r("p"),jk=o("You will need at least 2 GPUs to see these tests in action:"),Nv=f(),d(_r.$$.fragment),Hv=f(),vt=r("h3"),Is=r("a"),Sh=r("span"),d(vr.$$.fragment),Ck=f(),Lh=r("span"),Pk=o("Output capture"),zv=f(),Ie=r("p"),xk=o("During test execution any output sent to "),Uh=r("code"),Ok=o("stdout"),Ik=o(" and "),Nh=r("code"),Dk=o("stderr"),Ak=o(` is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`),Rv=f(),M=r("p"),Tk=o("To disable output capturing and to get the "),Hh=r("code"),qk=o("stdout"),Sk=o(" and "),zh=r("code"),Lk=o("stderr"),Uk=o(" normally, use "),Rh=r("code"),Nk=o("-s"),Hk=o(" or "),Gh=r("code"),zk=o("--capture=no"),Rk=o(":"),Gv=f(),d(wr.$$.fragment),Fv=f(),Gi=r("p"),Gk=o("To send test results to JUnit format output:"),Wv=f(),d(yr.$$.fragment),Mv=f(),wt=r("h3"),Ds=r("a"),Fh=r("span"),d($r.$$.fragment),Fk=f(),Wh=r("span"),Wk=o("Color control"),Bv=f(),Fi=r("p"),Mk=o("To have no color (e.g., yellow on white background is not readable):"),Yv=f(),d(Er.$$.fragment),Vv=f(),yt=r("h3"),As=r("a"),Mh=r("span"),d(br.$$.fragment),Bk=f(),Bh=r("span"),Yk=o("Sending test report to online pastebin service"),Xv=f(),Wi=r("p"),Vk=o("Creating a URL for each test failure:"),Jv=f(),d(gr.$$.fragment),Zv=f(),Mi=r("p"),Xk=o(`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`),Kv=f(),Bi=r("p"),Jk=o("Creating a URL for a whole test session log:"),Qv=f(),d(kr.$$.fragment),e1=f(),$t=r("h2"),Ts=r("a"),Yh=r("span"),d(jr.$$.fragment),Zk=f(),Vh=r("span"),Kk=o("Writing tests"),t1=f(),De=r("p"),Qk=o("\u{1F917} transformers tests are based on "),Xh=r("code"),e4=o("unittest"),t4=o(", but run by "),Jh=r("code"),s4=o("pytest"),o4=o(`, so most of the time features from both systems
can be used.`),s1=f(),se=r("p"),l4=o("You can read "),Cr=r("a"),r4=o("here"),a4=o(` which features are supported, but the important
thing to remember is that most `),Zh=r("code"),i4=o("pytest"),n4=o(` fixtures don\u2019t work. Neither parametrization, but we use the module
`),Kh=r("code"),p4=o("parameterized"),f4=o(" that works in a similar way."),o1=f(),Et=r("h3"),qs=r("a"),Qh=r("span"),d(Pr.$$.fragment),h4=f(),eu=r("span"),u4=o("Parametrization"),l1=f(),Yi=r("p"),d4=o(`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`),r1=f(),d(xr.$$.fragment),a1=f(),Ss=r("p"),c4=o("Now, by default this test will be run 3 times, each time with the last 3 arguments of "),tu=r("code"),m4=o("test_floor"),_4=o(` being assigned the
corresponding arguments in the parameter list.`),i1=f(),Ae=r("p"),v4=o("and you could run just the "),su=r("code"),w4=o("negative"),y4=o(" and "),ou=r("code"),$4=o("integer"),E4=o(" sets of params with:"),n1=f(),d(Or.$$.fragment),p1=f(),Ls=r("p"),b4=o("or all but "),lu=r("code"),g4=o("negative"),k4=o(" sub-tests, with:"),f1=f(),d(Ir.$$.fragment),h1=f(),Us=r("p"),j4=o("Besides using the "),ru=r("code"),C4=o("-k"),P4=o(` filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`),u1=f(),d(Dr.$$.fragment),d1=f(),Vi=r("p"),x4=o("and it will list:"),c1=f(),d(Ar.$$.fragment),m1=f(),Xi=r("p"),O4=o("So now you can run just 2 specific sub-tests:"),_1=f(),d(Tr.$$.fragment),v1=f(),B=r("p"),I4=o("The module "),qr=r("a"),D4=o("parameterized"),A4=o(` which is already in the developer dependencies
of `),au=r("code"),T4=o("transformers"),q4=o(" works for both: "),iu=r("code"),S4=o("unittests"),L4=o(" and "),nu=r("code"),U4=o("pytest"),N4=o(" tests."),w1=f(),oe=r("p"),H4=o("If, however, the test is not a "),pu=r("code"),z4=o("unittest"),R4=o(", you may use "),fu=r("code"),G4=o("pytest.mark.parametrize"),F4=o(` (or you may see it being used in
some existing tests, mostly under `),hu=r("code"),W4=o("examples"),M4=o(")."),y1=f(),Te=r("p"),B4=o("Here is the same example, this time using "),uu=r("code"),Y4=o("pytest"),V4=o("\u2019s "),du=r("code"),X4=o("parametrize"),J4=o(" marker:"),$1=f(),d(Sr.$$.fragment),E1=f(),le=r("p"),Z4=o("Same as with "),cu=r("code"),K4=o("parameterized"),Q4=o(", with "),mu=r("code"),e0=o("pytest.mark.parametrize"),t0=o(` you can have a fine control over which sub-tests are
run, if the `),_u=r("code"),s0=o("-k"),o0=o(` filter doesn\u2019t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`),b1=f(),d(Lr.$$.fragment),g1=f(),Ji=r("p"),l0=o("and it will list:"),k1=f(),d(Ur.$$.fragment),j1=f(),Zi=r("p"),r0=o("So now you can run just the specific test:"),C1=f(),d(Nr.$$.fragment),P1=f(),Ki=r("p"),a0=o("as in the previous example."),x1=f(),bt=r("h3"),Ns=r("a"),vu=r("span"),d(Hr.$$.fragment),i0=f(),wu=r("span"),n0=o("Files and directories"),O1=f(),Hs=r("p"),p0=o(`In tests often we need to know where things are relative to the current test file, and it\u2019s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
`),yu=r("code"),f0=o("transformers.test_utils.TestCasePlus"),h0=o(` solves this problem by sorting out all the basic paths and provides easy
accessors to them:`),I1=f(),zs=r("ul"),zr=r("li"),Qi=r("p"),$u=r("code"),u0=o("pathlib"),d0=o(" objects (all fully resolved):"),c0=f(),G=r("ul"),Rr=r("li"),Eu=r("code"),m0=o("test_file_path"),_0=o(" - the current test file path, i.e. "),bu=r("code"),v0=o("__file__"),w0=f(),en=r("li"),gu=r("code"),y0=o("test_file_dir"),$0=o(" - the directory containing the current test file"),E0=f(),Rs=r("li"),ku=r("code"),b0=o("tests_dir"),g0=o(" - the directory of the "),ju=r("code"),k0=o("tests"),j0=o(" test suite"),C0=f(),Gs=r("li"),Cu=r("code"),P0=o("examples_dir"),x0=o(" - the directory of the "),Pu=r("code"),O0=o("examples"),I0=o(" test suite"),D0=f(),tn=r("li"),xu=r("code"),A0=o("repo_root_dir"),T0=o(" - the directory of the repository"),q0=f(),qe=r("li"),Ou=r("code"),S0=o("src_dir"),L0=o(" - the directory of "),Iu=r("code"),U0=o("src"),N0=o(" (i.e. where the "),Du=r("code"),H0=o("transformers"),z0=o(" sub-dir resides)"),R0=f(),Gr=r("li"),Fr=r("p"),G0=o("stringified paths---same as above but these return paths as strings, rather than "),Au=r("code"),F0=o("pathlib"),W0=o(" objects:"),M0=f(),F=r("ul"),Tu=r("li"),qu=r("code"),B0=o("test_file_path_str"),Y0=f(),Su=r("li"),Lu=r("code"),V0=o("test_file_dir_str"),X0=f(),Uu=r("li"),Nu=r("code"),J0=o("tests_dir_str"),Z0=f(),Hu=r("li"),zu=r("code"),K0=o("examples_dir_str"),Q0=f(),Ru=r("li"),Gu=r("code"),e6=o("repo_root_dir_str"),t6=f(),Fu=r("li"),Wu=r("code"),s6=o("src_dir_str"),D1=f(),Fs=r("p"),o6=o(`To start using those all you need is to make sure that the test resides in a subclass of
`),Mu=r("code"),l6=o("transformers.test_utils.TestCasePlus"),r6=o(". For example:"),A1=f(),d(Wr.$$.fragment),T1=f(),Y=r("p"),a6=o("If you don\u2019t need to manipulate paths via "),Bu=r("code"),i6=o("pathlib"),n6=o(` or you just need a path as a string, you can always invoked
`),Yu=r("code"),p6=o("str()"),f6=o(" on the "),Vu=r("code"),h6=o("pathlib"),u6=o(" object or use the accessors ending with "),Xu=r("code"),d6=o("_str"),c6=o(". For example:"),q1=f(),d(Mr.$$.fragment),S1=f(),gt=r("h3"),Ws=r("a"),Ju=r("span"),d(Br.$$.fragment),m6=f(),Zu=r("span"),_6=o("Temporary files and directories"),L1=f(),Ms=r("p"),v6=o(`Using unique temporary files and directories are essential for parallel test running, so that the tests won\u2019t overwrite
each other\u2019s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like `),Ku=r("code"),w6=o("tempfile"),y6=o(", which address these needs is essential."),U1=f(),sn=r("p"),$6=o(`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know it\u2019s exact path and not having it randomized on every test re-run.`),N1=f(),Se=r("p"),E6=o("A helper class "),Qu=r("code"),b6=o("transformers.test_utils.TestCasePlus"),g6=o(` is best used for such purposes. It\u2019s a sub-class of
`),ed=r("code"),k6=o("unittest.TestCase"),j6=o(", so we can easily inherit from it in the test modules."),H1=f(),on=r("p"),C6=o("Here is an example of its usage:"),z1=f(),d(Yr.$$.fragment),R1=f(),Bs=r("p"),P6=o("This code creates a unique temporary directory, and sets "),td=r("code"),x6=o("tmp_dir"),O6=o(" to its location."),G1=f(),ln=r("ul"),sd=r("li"),I6=o("Create a unique temporary dir:"),F1=f(),d(Vr.$$.fragment),W1=f(),Xr=r("p"),od=r("code"),D6=o("tmp_dir"),A6=o(` will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`),M1=f(),rn=r("ul"),ld=r("li"),T6=o("Create a temporary dir of my choice, ensure it\u2019s empty before the test starts and don\u2019t empty it after the test."),B1=f(),d(Jr.$$.fragment),Y1=f(),an=r("p"),q6=o(`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didn\u2019t
leave any data in there.`),V1=f(),nn=r("ul"),Zr=r("li"),kt=r("p"),S6=o("You can override the default behavior by directly overriding the "),rd=r("code"),L6=o("before"),U6=o(" and "),ad=r("code"),N6=o("after"),H6=o(` args, leading to one of the
following behaviors:`),z6=f(),ve=r("ul"),pn=r("li"),id=r("code"),R6=o("before=True"),G6=o(": the temporary dir will always be cleared at the beginning of the test."),F6=f(),fn=r("li"),nd=r("code"),W6=o("before=False"),M6=o(": if the temporary dir already existed, any existing files will remain there."),B6=f(),hn=r("li"),pd=r("code"),Y6=o("after=True"),V6=o(": the temporary dir will always be deleted at the end of the test."),X6=f(),un=r("li"),fd=r("code"),J6=o("after=False"),Z6=o(": the temporary dir will always be left intact at the end of the test."),X1=f(),d(Ys.$$.fragment),J1=f(),d(Vs.$$.fragment),Z1=f(),jt=r("h3"),Xs=r("a"),hd=r("span"),d(Kr.$$.fragment),K6=f(),ud=r("span"),Q6=o("Temporary sys.path override"),K1=f(),Le=r("p"),e7=o("If you need to temporary override "),dd=r("code"),t7=o("sys.path"),s7=o(` to import from another test for example, you can use the
`),cd=r("code"),o7=o("ExtendSysPath"),l7=o(" context manager. Example:"),Q1=f(),d(Qr.$$.fragment),ew=f(),Ct=r("h3"),Js=r("a"),md=r("span"),d(ea.$$.fragment),r7=f(),_d=r("span"),a7=o("Skipping tests"),tw=f(),Zs=r("p"),i7=o(`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure it\u2019s skipped during `),vd=r("code"),n7=o("make test"),p7=o("."),sw=f(),dn=r("p"),f7=o("Methods:"),ow=f(),Ks=r("ul"),wd=r("li"),ta=r("p"),h7=o("A "),yd=r("strong"),u7=o("skip"),d7=o(` means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).`),c7=f(),$d=r("li"),sa=r("p"),m7=o("A "),Ed=r("strong"),_7=o("xfail"),v7=o(` means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), it\u2019s an xpass and will be reported in the test summary.`),lw=f(),re=r("p"),w7=o("One of the important differences between the two is that "),bd=r("code"),y7=o("skip"),$7=o(" doesn\u2019t run the test, and "),gd=r("code"),E7=o("xfail"),b7=o(` does. So if the
code that\u2019s buggy causes some bad state that will affect other tests, do not use `),kd=r("code"),g7=o("xfail"),k7=o("."),rw=f(),Pt=r("h4"),Qs=r("a"),jd=r("span"),d(oa.$$.fragment),j7=f(),Cd=r("span"),C7=o("Implementation"),aw=f(),cn=r("ul"),Pd=r("li"),P7=o("Here is how to skip whole test unconditionally:"),iw=f(),d(la.$$.fragment),nw=f(),mn=r("p"),x7=o("or via pytest:"),pw=f(),d(ra.$$.fragment),fw=f(),eo=r("p"),O7=o("or the "),xd=r("code"),I7=o("xfail"),D7=o(" way:"),hw=f(),d(aa.$$.fragment),uw=f(),_n=r("ul"),Od=r("li"),A7=o("Here is how to skip a test based on some internal check inside the test:"),dw=f(),d(ia.$$.fragment),cw=f(),vn=r("p"),T7=o("or the whole module:"),mw=f(),d(na.$$.fragment),_w=f(),to=r("p"),q7=o("or the "),Id=r("code"),S7=o("xfail"),L7=o(" way:"),vw=f(),d(pa.$$.fragment),ww=f(),wn=r("ul"),Dd=r("li"),U7=o("Here is how to skip all tests in a module if some import is missing:"),yw=f(),d(fa.$$.fragment),$w=f(),yn=r("ul"),Ad=r("li"),N7=o("Skip a test based on a condition:"),Ew=f(),d(ha.$$.fragment),bw=f(),$n=r("p"),H7=o("or:"),gw=f(),d(ua.$$.fragment),kw=f(),En=r("p"),z7=o("or skip the whole module:"),jw=f(),d(da.$$.fragment),Cw=f(),so=r("p"),R7=o("More details, example and ways are "),ca=r("a"),G7=o("here"),F7=o("."),Pw=f(),xt=r("h3"),oo=r("a"),Td=r("span"),d(ma.$$.fragment),W7=f(),qd=r("span"),M7=o("Slow tests"),xw=f(),bn=r("p"),B7=o(`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we can\u2019t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`),Ow=f(),d(_a.$$.fragment),Iw=f(),Ue=r("p"),Y7=o("Once a test is marked as "),Sd=r("code"),V7=o("@slow"),X7=o(", to run such tests set "),Ld=r("code"),J7=o("RUN_SLOW=1"),Z7=o(" env var, e.g.:"),Dw=f(),d(va.$$.fragment),Aw=f(),ae=r("p"),K7=o("Some decorators like "),Ud=r("code"),Q7=o("@parameterized"),e8=o(" rewrite test names, therefore "),Nd=r("code"),t8=o("@slow"),s8=o(` and the rest of the skip decorators
`),Hd=r("code"),o8=o("@require_*"),l8=o(" have to be listed last for them to work correctly. Here is an example of the correct usage:"),Tw=f(),d(wa.$$.fragment),qw=f(),gn=r("p"),r8=o(`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So it\u2019s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that it\u2019s important to run the slow tests on your
machine before submitting the PR.`),Sw=f(),kn=r("p"),a8=o("Here is a rough decision making mechanism for choosing which tests should be marked as slow:"),Lw=f(),jn=r("p"),i8=o(`If the test is focused on one of the library\u2019s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If it\u2019s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`),Uw=f(),ie=r("ul"),zd=r("li"),n8=o(`All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If you\u2019re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.`),p8=f(),Rd=r("li"),f8=o("All tests that need to do a training not specifically optimized to be fast should be set to slow."),h8=f(),Ot=r("li"),u8=o(`We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
`),Gd=r("code"),d8=o("@slow"),c8=o(`. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as `),Fd=r("code"),m8=o("@slow"),_8=o("."),v8=f(),Wd=r("li"),w8=o("If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless."),Nw=f(),Ne=r("p"),y8=o(`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `),Md=r("code"),$8=o("@slow"),E8=o(` tests can use large
slow models to do qualitative testing. To see the use of these simply look for `),Bd=r("em"),b8=o("tiny"),g8=o(" models with:"),Hw=f(),d(ya.$$.fragment),zw=f(),He=r("p"),k8=o("Here is a an example of a "),$a=r("a"),j8=o("script"),C8=o(` that created the tiny model
`),Ea=r("a"),P8=o("stas/tiny-wmt19-en-de"),x8=o(`. You can easily adjust it to your specific
model\u2019s architecture.`),Rw=f(),lo=r("p"),O8=o(`It\u2019s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of `),Yd=r("code"),I8=o("pytest --durations=0 tests"),D8=o(")."),Gw=f(),Cn=r("p"),A8=o(`That report is also useful to find slow outliers that aren\u2019t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`),Fw=f(),It=r("h3"),ro=r("a"),Vd=r("span"),d(ba.$$.fragment),T8=f(),Xd=r("span"),q8=o("Testing the stdout/stderr output"),Ww=f(),V=r("p"),S8=o("In order to test functions that write to "),Jd=r("code"),L8=o("stdout"),U8=o(" and/or "),Zd=r("code"),N8=o("stderr"),H8=o(`, the test can access those streams using the
`),Kd=r("code"),z8=o("pytest"),R8=o("\u2019s "),ga=r("a"),G8=o("capsys system"),F8=o(". Here is how this is accomplished:"),Mw=f(),d(ka.$$.fragment),Bw=f(),ao=r("p"),W8=o("And, of course, most of the time, "),Qd=r("code"),M8=o("stderr"),B8=o(` will come as a part of an exception, so try/except has to be used in such
a case:`),Yw=f(),d(ja.$$.fragment),Vw=f(),io=r("p"),Y8=o("Another approach to capturing stdout is via "),ec=r("code"),V8=o("contextlib.redirect_stdout"),X8=o(":"),Xw=f(),d(Ca.$$.fragment),Jw=f(),D=r("p"),J8=o("An important potential issue with capturing stdout is that it may contain "),tc=r("code"),Z8=o("\\r"),K8=o(" characters that in normal "),sc=r("code"),Q8=o("print"),e9=o(`
reset everything that has been printed so far. There is no problem with `),oc=r("code"),t9=o("pytest"),s9=o(", but with "),lc=r("code"),o9=o("pytest -s"),l9=o(` these
characters get included in the buffer, so to be able to have the test run with and without `),rc=r("code"),r9=o("-s"),a9=o(`, you have to make an
extra cleanup to the captured output, using `),ac=r("code"),i9=o("re.sub(r'~.*\\r', '', buf, 0, re.M)"),n9=o("."),Zw=f(),no=r("p"),p9=o(`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some `),ic=r("code"),f9=o("\\r"),h9=o("\u2019s in it or not, so it\u2019s a simple:"),Kw=f(),d(Pa.$$.fragment),Qw=f(),Pn=r("p"),u9=o("Here is a full test example:"),ey=f(),d(xa.$$.fragment),ty=f(),ze=r("p"),d9=o("If you\u2019d like to capture "),nc=r("code"),c9=o("stderr"),m9=o(" use the "),pc=r("code"),_9=o("CaptureStderr"),v9=o(" class instead:"),sy=f(),d(Oa.$$.fragment),oy=f(),po=r("p"),w9=o("If you need to capture both streams at once, use the parent "),fc=r("code"),y9=o("CaptureStd"),$9=o(" class:"),ly=f(),d(Ia.$$.fragment),ry=f(),xn=r("p"),E9=o(`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`),ay=f(),Dt=r("h3"),fo=r("a"),hc=r("span"),d(Da.$$.fragment),b9=f(),uc=r("span"),g9=o("Capturing logger stream"),iy=f(),ho=r("p"),k9=o("If you need to validate the output of a logger, you can use "),dc=r("code"),j9=o("CaptureLogger"),C9=o(":"),ny=f(),d(Aa.$$.fragment),py=f(),At=r("h3"),uo=r("a"),cc=r("span"),d(Ta.$$.fragment),P9=f(),mc=r("span"),x9=o("Testing with environment variables"),fy=f(),qa=r("p"),O9=o(`If you want to test the impact of environment variables for a specific test you can use a helper decorator
`),_c=r("code"),I9=o("transformers.testing_utils.mockenv"),hy=f(),d(Sa.$$.fragment),uy=f(),ne=r("p"),D9=o("At times an external program needs to be called, which requires setting "),vc=r("code"),A9=o("PYTHONPATH"),T9=o(" in "),wc=r("code"),q9=o("os.environ"),S9=o(` to include
multiple local paths. A helper class `),yc=r("code"),L9=o("transformers.test_utils.TestCasePlus"),U9=o(" comes to help:"),dy=f(),d(La.$$.fragment),cy=f(),N=r("p"),N9=o("Depending on whether the test file was under the "),$c=r("code"),H9=o("tests"),z9=o(" test suite or "),Ec=r("code"),R9=o("examples"),G9=o(` it\u2019ll correctly set up
`),bc=r("code"),F9=o("env[PYTHONPATH]"),W9=o(" to include one of these two directories, and also the "),gc=r("code"),M9=o("src"),B9=o(` directory to ensure the testing is
done against the current repo, and finally with whatever `),kc=r("code"),Y9=o("env[PYTHONPATH]"),V9=o(` was already set to before the test was
called if anything.`),my=f(),co=r("p"),X9=o("This helper method creates a copy of the "),jc=r("code"),J9=o("os.environ"),Z9=o(" object, so the original remains intact."),_y=f(),Tt=r("h3"),mo=r("a"),Cc=r("span"),d(Ua.$$.fragment),K9=f(),Pc=r("span"),Q9=o("Getting reproducible results"),vy=f(),On=r("p"),ej=o(`In some situations you may want to remove randomness for your tests. To get identical reproducable results set, you
will need to fix the seed:`),wy=f(),d(Na.$$.fragment),yy=f(),qt=r("h3"),_o=r("a"),xc=r("span"),d(Ha.$$.fragment),tj=f(),Oc=r("span"),sj=o("Debugging tests"),$y=f(),In=r("p"),oj=o("To start a debugger at the point of the warning, do this:"),Ey=f(),d(za.$$.fragment),by=f(),St=r("h2"),vo=r("a"),Ic=r("span"),d(Ra.$$.fragment),lj=f(),Dc=r("span"),rj=o("Working with github actions workflows"),gy=f(),Dn=r("p"),aj=o("To trigger a self-push workflow CI job, you must:"),ky=f(),pe=r("ol"),Ga=r("li"),ij=o("Create a new branch on "),Ac=r("code"),nj=o("transformers"),pj=o(" origin (not a fork!)."),fj=f(),H=r("li"),hj=o("The branch name has to start with either "),Tc=r("code"),uj=o("ci_"),dj=o(" or "),qc=r("code"),cj=o("ci-"),mj=o(" ("),Sc=r("code"),_j=o("main"),vj=o(` triggers it too, but we can\u2019t do PRs on
`),Lc=r("code"),wj=o("main"),yj=o(`). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written `),Fa=r("a"),$j=o("here"),Ej=o(" under "),Uc=r("em"),bj=o("push:"),gj=f(),Nc=r("li"),kj=o("Create a PR from this branch."),jj=f(),Wa=r("li"),Cj=o("Then you can see the job appear "),Ma=r("a"),Pj=o("here"),xj=o(`. It may not run right away if there
is a backlog.`),jy=f(),Lt=r("h2"),wo=r("a"),Hc=r("span"),d(Ba.$$.fragment),Oj=f(),zc=r("span"),Ij=o("Testing Experimental CI Features"),Cy=f(),An=r("p"),Dj=o(`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`),Py=f(),fe=r("ol"),Rc=r("li"),Aj=o("Create a new dedicated job that tests what needs to be tested"),Tj=f(),Gc=r("li"),qj=o("The new job must always succeed so that it gives us a green \u2713 (details below)."),Sj=f(),Fc=r("li"),Lj=o(`Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental job\u2019s logs (not the overall job green as it\u2019s purposefully always
green)`),Uj=f(),Wc=r("li"),Nj=o("When it\u2019s clear that everything is solid, then merge the new changes into existing jobs."),xy=f(),Tn=r("p"),Hj=o("That way experiments on CI functionality itself won\u2019t interfere with the normal workflow."),Oy=f(),qn=r("p"),zj=o("Now how can we make the job always succeed while the new CI feature is being developed?"),Iy=f(),Sn=r("p"),Rj=o(`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing don\u2019t support that.`),Dy=f(),Ln=r("p"),Gj=o("So the following workaround can be used:"),Ay=f(),yo=r("ol"),Un=r("li"),Mc=r("code"),Fj=o("set +euo pipefail"),Wj=o(" at the beginning of the run command to suppress most potential failures in the bash script."),Mj=f(),Ut=r("li"),Bj=o("the last command must be a success: "),Bc=r("code"),Yj=o('echo "done"'),Vj=o(" or just "),Yc=r("code"),Xj=o("true"),Jj=o(" will do"),Ty=f(),Nn=r("p"),Zj=o("Here is an example:"),qy=f(),d(Ya.$$.fragment),Sy=f(),Hn=r("p"),Kj=o("For simple commands you could also do:"),Ly=f(),d(Va.$$.fragment),Uy=f(),$o=r("p"),Qj=o(`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing `),Vc=r("code"),eC=o("set +euo pipefail"),tC=o(` or any other things you may have added to ensure that the experimental job doesn\u2019t
interfere with the normal CI functioning.`),Ny=f(),Eo=r("p"),sC=o("This whole process would have been much easier if we only could set something like "),Xc=r("code"),oC=o("allow-failure"),lC=o(` for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions don\u2019t support it at the moment.`),Hy=f(),zn=r("p"),rC=o("You can vote for this feature and see where it is at at these CI-specific threads:"),zy=f(),bo=r("ul"),Jc=r("li"),Xa=r("a"),aC=o("Github Actions:"),iC=f(),Zc=r("li"),Ja=r("a"),nC=o("CircleCI:"),this.h()},l(e){const n=rS('[data-svelte="svelte-1phssyn"]',document.head);$=a(n,"META",{name:!0,content:!0}),n.forEach(s),O=h(e),b=a(e,"H1",{class:!0});var Za=i(b);j=a(Za,"A",{id:!0,class:!0,href:!0});var Kc=i(j);A=a(Kc,"SPAN",{});var Qc=i(A);c(C.$$.fragment,Qc),Qc.forEach(s),Kc.forEach(s),z=h(Za),T=a(Za,"SPAN",{});var em=i(T);x=l(em,"Testing"),em.forEach(s),Za.forEach(s),g=h(e),S=a(e,"P",{});var DC=i(S);R=l(DC,"Let\u2019s take a look at how \u{1F917} Transformers models are tested and how you can write new tests and improve the existing ones."),DC.forEach(s),Nt=h(e),ye=a(e,"P",{});var AC=i(ye);Be=l(AC,"There are 2 test suites in the repository:"),AC.forEach(s),q=h(e),me=a(e,"OL",{});var Gy=i(me);Ye=a(Gy,"LI",{});var pC=i(Ye);Ht=a(pC,"CODE",{});var TC=i(Ht);ti=l(TC,"tests"),TC.forEach(s),OE=l(pC," \u2014 tests for the general API"),pC.forEach(s),IE=h(Gy),si=a(Gy,"LI",{});var fC=i(si);fp=a(fC,"CODE",{});var qC=i(fp);DE=l(qC,"examples"),qC.forEach(s),AE=l(fC," \u2014 tests primarily for various applications that aren\u2019t part of the API"),fC.forEach(s),Gy.forEach(s),fm=h(e),Ve=a(e,"H2",{class:!0});var Fy=i(Ve);zt=a(Fy,"A",{id:!0,class:!0,href:!0});var SC=i(zt);hp=a(SC,"SPAN",{});var LC=i(hp);c(Lo.$$.fragment,LC),LC.forEach(s),SC.forEach(s),TE=h(Fy),up=a(Fy,"SPAN",{});var UC=i(up);qE=l(UC,"How transformers are tested"),UC.forEach(s),Fy.forEach(s),hm=h(e),Rt=a(e,"OL",{});var Wy=i(Rt);Uo=a(Wy,"LI",{});var My=i(Uo);No=a(My,"P",{});var By=i(No);SE=l(By,`Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this `),Ho=a(By,"A",{href:!0,rel:!0});var NC=i(Ho);LE=l(NC,"config file"),NC.forEach(s),UE=l(By,`, so that if needed you can reproduce the same
environment on your machine.`),By.forEach(s),NE=h(My),zo=a(My,"P",{});var Yy=i(zo);HE=l(Yy,"These CI jobs don\u2019t run "),dp=a(Yy,"CODE",{});var HC=i(dp);zE=l(HC,"@slow"),HC.forEach(s),RE=l(Yy," tests."),Yy.forEach(s),My.forEach(s),GE=h(Wy),Ro=a(Wy,"LI",{});var Vy=i(Ro);Go=a(Vy,"P",{});var Xy=i(Go);FE=l(Xy,"There are 3 jobs run by "),Fo=a(Xy,"A",{href:!0,rel:!0});var zC=i(Fo);WE=l(zC,"github actions"),zC.forEach(s),ME=l(Xy,":"),Xy.forEach(s),BE=h(Vy),Xe=a(Vy,"UL",{});var Rn=i(Xe);cp=a(Rn,"LI",{});var RC=i(cp);oi=a(RC,"P",{});var hC=i(oi);Wo=a(hC,"A",{href:!0,rel:!0});var GC=i(Wo);YE=l(GC,"torch hub integration"),GC.forEach(s),VE=l(hC,`: checks whether torch hub
integration works.`),hC.forEach(s),RC.forEach(s),XE=h(Rn),mp=a(Rn,"LI",{});var FC=i(mp);L=a(FC,"P",{});var Z=i(L);Mo=a(Z,"A",{href:!0,rel:!0});var WC=i(Mo);JE=l(WC,"self-hosted (push)"),WC.forEach(s),ZE=l(Z,`: runs fast tests on GPU only on commits on
`),_p=a(Z,"CODE",{});var MC=i(_p);KE=l(MC,"main"),MC.forEach(s),QE=l(Z,". It only runs if a commit on "),vp=a(Z,"CODE",{});var BC=i(vp);eb=l(BC,"main"),BC.forEach(s),tb=l(Z," has updated the code in one of the following folders: "),wp=a(Z,"CODE",{});var YC=i(wp);sb=l(YC,"src"),YC.forEach(s),ob=l(Z,`,
`),yp=a(Z,"CODE",{});var VC=i(yp);lb=l(VC,"tests"),VC.forEach(s),rb=l(Z,", "),$p=a(Z,"CODE",{});var XC=i($p);ab=l(XC,".github"),XC.forEach(s),ib=l(Z," (to prevent running on added model cards, notebooks, etc.)"),Z.forEach(s),FC.forEach(s),nb=h(Rn),Ep=a(Rn,"LI",{});var JC=i(Ep);$e=a(JC,"P",{});var Ka=i($e);Bo=a(Ka,"A",{href:!0,rel:!0});var ZC=i(Bo);pb=l(ZC,"self-hosted runner"),ZC.forEach(s),fb=l(Ka,`: runs normal and slow tests on GPU in
`),bp=a(Ka,"CODE",{});var KC=i(bp);hb=l(KC,"tests"),KC.forEach(s),ub=l(Ka," and "),gp=a(Ka,"CODE",{});var QC=i(gp);db=l(QC,"examples"),QC.forEach(s),cb=l(Ka,":"),Ka.forEach(s),JC.forEach(s),Rn.forEach(s),Vy.forEach(s),Wy.forEach(s),um=h(e),c(Yo.$$.fragment,e),dm=h(e),Gt=a(e,"P",{});var Jy=i(Gt);mb=l(Jy,"The results can be observed "),Vo=a(Jy,"A",{href:!0,rel:!0});var eP=i(Vo);_b=l(eP,"here"),eP.forEach(s),vb=l(Jy,"."),Jy.forEach(s),cm=h(e),Je=a(e,"H2",{class:!0});var Zy=i(Je);Ft=a(Zy,"A",{id:!0,class:!0,href:!0});var tP=i(Ft);kp=a(tP,"SPAN",{});var sP=i(kp);c(Xo.$$.fragment,sP),sP.forEach(s),tP.forEach(s),wb=h(Zy),jp=a(Zy,"SPAN",{});var oP=i(jp);yb=l(oP,"Running tests"),oP.forEach(s),Zy.forEach(s),mm=h(e),Ze=a(e,"H3",{class:!0});var Ky=i(Ze);Wt=a(Ky,"A",{id:!0,class:!0,href:!0});var lP=i(Wt);Cp=a(lP,"SPAN",{});var rP=i(Cp);c(Jo.$$.fragment,rP),rP.forEach(s),lP.forEach(s),$b=h(Ky),Pp=a(Ky,"SPAN",{});var aP=i(Pp);Eb=l(aP,"Choosing which tests to run"),aP.forEach(s),Ky.forEach(s),_m=h(e),Mt=a(e,"P",{});var Qy=i(Mt);bb=l(Qy,`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them `),Zo=a(Qy,"A",{href:!0,rel:!0});var iP=i(Zo);gb=l(iP,"here"),iP.forEach(s),kb=l(Qy,"."),Qy.forEach(s),vm=h(e),li=a(e,"P",{});var nP=i(li);jb=l(nP,"Here are some most useful ways of running tests."),nP.forEach(s),wm=h(e),ri=a(e,"P",{});var pP=i(ri);Cb=l(pP,"Run all:"),pP.forEach(s),ym=h(e),c(Ko.$$.fragment,e),$m=h(e),ai=a(e,"P",{});var fP=i(ai);Pb=l(fP,"or:"),fP.forEach(s),Em=h(e),c(Qo.$$.fragment,e),bm=h(e),ii=a(e,"P",{});var hP=i(ii);xb=l(hP,"Note that the latter is defined as:"),hP.forEach(s),gm=h(e),c(el.$$.fragment,e),km=h(e),ni=a(e,"P",{});var uP=i(ni);Ob=l(uP,"which tells pytest to:"),uP.forEach(s),jm=h(e),Q=a(e,"UL",{});var go=i(Q);xp=a(go,"LI",{});var dP=i(xp);Ib=l(dP,"run as many test processes as they are CPU cores (which could be too many if you don\u2019t have a ton of RAM!)"),dP.forEach(s),Db=h(go),Op=a(go,"LI",{});var cP=i(Op);Ab=l(cP,"ensure that all tests from the same file will be run by the same test process"),cP.forEach(s),Tb=h(go),Ip=a(go,"LI",{});var mP=i(Ip);qb=l(mP,"do not capture output"),mP.forEach(s),Sb=h(go),Dp=a(go,"LI",{});var _P=i(Dp);Lb=l(_P,"run in verbose mode"),_P.forEach(s),go.forEach(s),Cm=h(e),Ke=a(e,"H3",{class:!0});var e$=i(Ke);Bt=a(e$,"A",{id:!0,class:!0,href:!0});var vP=i(Bt);Ap=a(vP,"SPAN",{});var wP=i(Ap);c(tl.$$.fragment,wP),wP.forEach(s),vP.forEach(s),Ub=h(e$),Tp=a(e$,"SPAN",{});var yP=i(Tp);Nb=l(yP,"Getting the list of all tests"),yP.forEach(s),e$.forEach(s),Pm=h(e),pi=a(e,"P",{});var $P=i(pi);Hb=l($P,"All tests of the test suite:"),$P.forEach(s),xm=h(e),c(sl.$$.fragment,e),Om=h(e),fi=a(e,"P",{});var EP=i(fi);zb=l(EP,"All tests of a given test file:"),EP.forEach(s),Im=h(e),c(ol.$$.fragment,e),Dm=h(e),Qe=a(e,"H3",{class:!0});var t$=i(Qe);Yt=a(t$,"A",{id:!0,class:!0,href:!0});var bP=i(Yt);qp=a(bP,"SPAN",{});var gP=i(qp);c(ll.$$.fragment,gP),gP.forEach(s),bP.forEach(s),Rb=h(t$),Sp=a(t$,"SPAN",{});var kP=i(Sp);Gb=l(kP,"Run a specific test module"),kP.forEach(s),t$.forEach(s),Am=h(e),hi=a(e,"P",{});var jP=i(hi);Fb=l(jP,"To run an individual test module:"),jP.forEach(s),Tm=h(e),c(rl.$$.fragment,e),qm=h(e),et=a(e,"H3",{class:!0});var s$=i(et);Vt=a(s$,"A",{id:!0,class:!0,href:!0});var CP=i(Vt);Lp=a(CP,"SPAN",{});var PP=i(Lp);c(al.$$.fragment,PP),PP.forEach(s),CP.forEach(s),Wb=h(s$),Up=a(s$,"SPAN",{});var xP=i(Up);Mb=l(xP,"Run specific tests"),xP.forEach(s),s$.forEach(s),Sm=h(e),ui=a(e,"P",{});var OP=i(ui);Bb=l(OP,`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`),OP.forEach(s),Lm=h(e),c(il.$$.fragment,e),Um=h(e),di=a(e,"P",{});var IP=i(di);Yb=l(IP,"Here:"),IP.forEach(s),Nm=h(e),Ee=a(e,"UL",{});var Gn=i(Ee);ci=a(Gn,"LI",{});var uC=i(ci);Np=a(uC,"CODE",{});var DP=i(Np);Vb=l(DP,"tests/test_optimization.py"),DP.forEach(s),Xb=l(uC," - the file with tests"),uC.forEach(s),Jb=h(Gn),mi=a(Gn,"LI",{});var dC=i(mi);Hp=a(dC,"CODE",{});var AP=i(Hp);Zb=l(AP,"OptimizationTest"),AP.forEach(s),Kb=l(dC," - the name of the class"),dC.forEach(s),Qb=h(Gn),_i=a(Gn,"LI",{});var cC=i(_i);zp=a(cC,"CODE",{});var TP=i(zp);e3=l(TP,"test_adam_w"),TP.forEach(s),t3=l(cC," - the name of the specific test function"),cC.forEach(s),Gn.forEach(s),Hm=h(e),vi=a(e,"P",{});var qP=i(vi);s3=l(qP,"If the file contains multiple classes, you can choose to run only tests of a given class. For example:"),qP.forEach(s),zm=h(e),c(nl.$$.fragment,e),Rm=h(e),wi=a(e,"P",{});var SP=i(wi);o3=l(SP,"will run all the tests inside that class."),SP.forEach(s),Gm=h(e),Xt=a(e,"P",{});var o$=i(Xt);l3=l(o$,"As mentioned earlier you can see what tests are contained inside the "),Rp=a(o$,"CODE",{});var LP=i(Rp);r3=l(LP,"OptimizationTest"),LP.forEach(s),a3=l(o$," class by running:"),o$.forEach(s),Fm=h(e),c(pl.$$.fragment,e),Wm=h(e),yi=a(e,"P",{});var UP=i(yi);i3=l(UP,"You can run tests by keyword expressions."),UP.forEach(s),Mm=h(e),Jt=a(e,"P",{});var l$=i(Jt);n3=l(l$,"To run only tests whose name contains "),Gp=a(l$,"CODE",{});var NP=i(Gp);p3=l(NP,"adam"),NP.forEach(s),f3=l(l$,":"),l$.forEach(s),Bm=h(e),c(fl.$$.fragment,e),Ym=h(e),ee=a(e,"P",{});var ko=i(ee);h3=l(ko,"Logical "),Fp=a(ko,"CODE",{});var HP=i(Fp);u3=l(HP,"and"),HP.forEach(s),d3=l(ko," and "),Wp=a(ko,"CODE",{});var zP=i(Wp);c3=l(zP,"or"),zP.forEach(s),m3=l(ko," can be used to indicate whether all keywords should match or either. "),Mp=a(ko,"CODE",{});var RP=i(Mp);_3=l(RP,"not"),RP.forEach(s),v3=l(ko,` can be used to
negate.`),ko.forEach(s),Vm=h(e),Zt=a(e,"P",{});var r$=i(Zt);w3=l(r$,"To run all tests except those whose name contains "),Bp=a(r$,"CODE",{});var GP=i(Bp);y3=l(GP,"adam"),GP.forEach(s),$3=l(r$,":"),r$.forEach(s),Xm=h(e),c(hl.$$.fragment,e),Jm=h(e),$i=a(e,"P",{});var FP=i($i);E3=l(FP,"And you can combine the two patterns in one:"),FP.forEach(s),Zm=h(e),c(ul.$$.fragment,e),Km=h(e),be=a(e,"P",{});var Fn=i(be);b3=l(Fn,"For example to run both "),Yp=a(Fn,"CODE",{});var WP=i(Yp);g3=l(WP,"test_adafactor"),WP.forEach(s),k3=l(Fn," and "),Vp=a(Fn,"CODE",{});var MP=i(Vp);j3=l(MP,"test_adam_w"),MP.forEach(s),C3=l(Fn," you can use:"),Fn.forEach(s),Qm=h(e),c(dl.$$.fragment,e),e_=h(e),Kt=a(e,"P",{});var a$=i(Kt);P3=l(a$,"Note that we use "),Xp=a(a$,"CODE",{});var BP=i(Xp);x3=l(BP,"or"),BP.forEach(s),O3=l(a$," here, since we want either of the keywords to match to include both."),a$.forEach(s),t_=h(e),Qt=a(e,"P",{});var i$=i(Qt);I3=l(i$,"If you want to include only tests that include both patterns, "),Jp=a(i$,"CODE",{});var YP=i(Jp);D3=l(YP,"and"),YP.forEach(s),A3=l(i$," is to be used:"),i$.forEach(s),s_=h(e),c(cl.$$.fragment,e),o_=h(e),tt=a(e,"H3",{class:!0});var n$=i(tt);es=a(n$,"A",{id:!0,class:!0,href:!0});var VP=i(es);Zp=a(VP,"SPAN",{});var XP=i(Zp);c(ml.$$.fragment,XP),XP.forEach(s),VP.forEach(s),T3=h(n$),Kp=a(n$,"SPAN",{});var JP=i(Kp);q3=l(JP,"Run only modified tests"),JP.forEach(s),n$.forEach(s),l_=h(e),ts=a(e,"P",{});var p$=i(ts);S3=l(p$,"You can run the tests related to the unstaged files or the current branch (according to Git) by using "),_l=a(p$,"A",{href:!0,rel:!0});var ZP=i(_l);L3=l(ZP,"pytest-picked"),ZP.forEach(s),U3=l(p$,`. This is a great way of quickly testing your changes didn\u2019t break
anything, since it won\u2019t run the tests related to files you didn\u2019t touch.`),p$.forEach(s),r_=h(e),c(vl.$$.fragment,e),a_=h(e),c(wl.$$.fragment,e),i_=h(e),Ei=a(e,"P",{});var KP=i(Ei);N3=l(KP,"All tests will be run from files and folders which are modified, but not yet committed."),KP.forEach(s),n_=h(e),st=a(e,"H3",{class:!0});var f$=i(st);ss=a(f$,"A",{id:!0,class:!0,href:!0});var QP=i(ss);Qp=a(QP,"SPAN",{});var ex=i(Qp);c(yl.$$.fragment,ex),ex.forEach(s),QP.forEach(s),H3=h(f$),ef=a(f$,"SPAN",{});var tx=i(ef);z3=l(tx,"Automatically rerun failed tests on source modification"),tx.forEach(s),f$.forEach(s),p_=h(e),$l=a(e,"P",{});var mC=i($l);El=a(mC,"A",{href:!0,rel:!0});var sx=i(El);R3=l(sx,"pytest-xdist"),sx.forEach(s),G3=l(mC,` provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you don\u2019t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`),mC.forEach(s),f_=h(e),c(bl.$$.fragment,e),h_=h(e),ot=a(e,"P",{});var tm=i(ot);F3=l(tm,"To enter the mode: "),tf=a(tm,"CODE",{});var ox=i(tf);W3=l(ox,"pytest -f"),ox.forEach(s),M3=l(tm," or "),sf=a(tm,"CODE",{});var lx=i(sf);B3=l(lx,"pytest --looponfail"),lx.forEach(s),tm.forEach(s),u_=h(e),ge=a(e,"P",{});var Wn=i(ge);Y3=l(Wn,"File changes are detected by looking at "),of=a(Wn,"CODE",{});var rx=i(of);V3=l(rx,"looponfailroots"),rx.forEach(s),X3=l(Wn,` root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in `),lf=a(Wn,"CODE",{});var ax=i(lf);J3=l(ax,"setup.cfg"),ax.forEach(s),Z3=l(Wn,":"),Wn.forEach(s),d_=h(e),c(gl.$$.fragment,e),c_=h(e),ke=a(e,"P",{});var Mn=i(ke);K3=l(Mn,"or "),rf=a(Mn,"CODE",{});var ix=i(rf);Q3=l(ix,"pytest.ini"),ix.forEach(s),eg=l(Mn,"/"),af=a(Mn,"CODE",{});var nx=i(af);tg=l(nx,"tox.ini"),nx.forEach(s),sg=l(Mn," files:"),Mn.forEach(s),m_=h(e),c(kl.$$.fragment,e),__=h(e),bi=a(e,"P",{});var px=i(bi);og=l(px,`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-file\u2019s
directory.`),px.forEach(s),v_=h(e),jl=a(e,"P",{});var _C=i(jl);Cl=a(_C,"A",{href:!0,rel:!0});var fx=i(Cl);lg=l(fx,"pytest-watch"),fx.forEach(s),rg=l(_C," is an alternative implementation of this functionality."),_C.forEach(s),w_=h(e),lt=a(e,"H3",{class:!0});var h$=i(lt);os=a(h$,"A",{id:!0,class:!0,href:!0});var hx=i(os);nf=a(hx,"SPAN",{});var ux=i(nf);c(Pl.$$.fragment,ux),ux.forEach(s),hx.forEach(s),ag=h(h$),pf=a(h$,"SPAN",{});var dx=i(pf);ig=l(dx,"Skip a test module"),dx.forEach(s),h$.forEach(s),y_=h(e),ls=a(e,"P",{});var u$=i(ls);ng=l(u$,`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except `),ff=a(u$,"CODE",{});var cx=i(ff);pg=l(cx,"test_modeling_*.py"),cx.forEach(s),fg=l(u$," tests:"),u$.forEach(s),$_=h(e),c(xl.$$.fragment,e),E_=h(e),rt=a(e,"H3",{class:!0});var d$=i(rt);rs=a(d$,"A",{id:!0,class:!0,href:!0});var mx=i(rs);hf=a(mx,"SPAN",{});var _x=i(hf);c(Ol.$$.fragment,_x),_x.forEach(s),mx.forEach(s),hg=h(d$),uf=a(d$,"SPAN",{});var vx=i(uf);ug=l(vx,"Clearing state"),vx.forEach(s),d$.forEach(s),b_=h(e),gi=a(e,"P",{});var wx=i(gi);dg=l(wx,"CI builds and when isolation is important (against speed), cache should be cleared:"),wx.forEach(s),g_=h(e),c(Il.$$.fragment,e),k_=h(e),at=a(e,"H3",{class:!0});var c$=i(at);as=a(c$,"A",{id:!0,class:!0,href:!0});var yx=i(as);df=a(yx,"SPAN",{});var $x=i(df);c(Dl.$$.fragment,$x),$x.forEach(s),yx.forEach(s),cg=h(c$),cf=a(c$,"SPAN",{});var Ex=i(cf);mg=l(Ex,"Running tests in parallel"),Ex.forEach(s),c$.forEach(s),j_=h(e),W=a(e,"P",{});var Re=i(W);_g=l(Re,"As mentioned earlier "),mf=a(Re,"CODE",{});var bx=i(mf);vg=l(bx,"make test"),bx.forEach(s),wg=l(Re," runs tests in parallel via "),_f=a(Re,"CODE",{});var gx=i(_f);yg=l(gx,"pytest-xdist"),gx.forEach(s),$g=l(Re," plugin ("),vf=a(Re,"CODE",{});var kx=i(vf);Eg=l(kx,"-n X"),kx.forEach(s),bg=l(Re," argument, e.g. "),wf=a(Re,"CODE",{});var jx=i(wf);gg=l(jx,"-n 2"),jx.forEach(s),kg=l(Re,`
to run 2 parallel jobs).`),Re.forEach(s),C_=h(e),_e=a(e,"P",{});var Qa=i(_e);yf=a(Qa,"CODE",{});var Cx=i(yf);jg=l(Cx,"pytest-xdist"),Cx.forEach(s),Cg=l(Qa,"\u2019s "),$f=a(Qa,"CODE",{});var Px=i($f);Pg=l(Px,"--dist="),Px.forEach(s),xg=l(Qa," option allows one to control how the tests are grouped. "),Ef=a(Qa,"CODE",{});var xx=i(Ef);Og=l(xx,"--dist=loadfile"),xx.forEach(s),Ig=l(Qa,` puts the
tests located in one file onto the same process.`),Qa.forEach(s),P_=h(e),je=a(e,"P",{});var Bn=i(je);Dg=l(Bn,"Since the order of executed tests is different and unpredictable, if running the test suite with "),bf=a(Bn,"CODE",{});var Ox=i(bf);Ag=l(Ox,"pytest-xdist"),Ox.forEach(s),Tg=l(Bn,`
produces failures (meaning we have some undetected coupled tests), use `),Al=a(Bn,"A",{href:!0,rel:!0});var Ix=i(Al);qg=l(Ix,"pytest-replay"),Ix.forEach(s),Sg=l(Bn,` to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`),Bn.forEach(s),x_=h(e),it=a(e,"H3",{class:!0});var m$=i(it);is=a(m$,"A",{id:!0,class:!0,href:!0});var Dx=i(is);gf=a(Dx,"SPAN",{});var Ax=i(gf);c(Tl.$$.fragment,Ax),Ax.forEach(s),Dx.forEach(s),Lg=h(m$),kf=a(m$,"SPAN",{});var Tx=i(kf);Ug=l(Tx,"Test order and repetition"),Tx.forEach(s),m$.forEach(s),O_=h(e),ki=a(e,"P",{});var qx=i(ki);Ng=l(qx,`It\u2019s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`),qx.forEach(s),I_=h(e),nt=a(e,"H4",{class:!0});var _$=i(nt);ns=a(_$,"A",{id:!0,class:!0,href:!0});var Sx=i(ns);jf=a(Sx,"SPAN",{});var Lx=i(jf);c(ql.$$.fragment,Lx),Lx.forEach(s),Sx.forEach(s),Hg=h(_$),Cf=a(_$,"SPAN",{});var Ux=i(Cf);zg=l(Ux,"Repeat tests"),Ux.forEach(s),_$.forEach(s),D_=h(e),ji=a(e,"UL",{});var Nx=i(ji);Ci=a(Nx,"LI",{});var vC=i(Ci);Sl=a(vC,"A",{href:!0,rel:!0});var Hx=i(Sl);Rg=l(Hx,"pytest-flakefinder"),Hx.forEach(s),Gg=l(vC,":"),vC.forEach(s),Nx.forEach(s),A_=h(e),c(Ll.$$.fragment,e),T_=h(e),Pi=a(e,"P",{});var zx=i(Pi);Fg=l(zx,"And then run every test multiple times (50 by default):"),zx.forEach(s),q_=h(e),c(Ul.$$.fragment,e),S_=h(e),c(ps.$$.fragment,e),L_=h(e),c(fs.$$.fragment,e),U_=h(e),pt=a(e,"H4",{class:!0});var v$=i(pt);hs=a(v$,"A",{id:!0,class:!0,href:!0});var Rx=i(hs);Pf=a(Rx,"SPAN",{});var Gx=i(Pf);c(Nl.$$.fragment,Gx),Gx.forEach(s),Rx.forEach(s),Wg=h(v$),xf=a(v$,"SPAN",{});var Fx=i(xf);Mg=l(Fx,"Run tests in a random order"),Fx.forEach(s),v$.forEach(s),N_=h(e),c(Hl.$$.fragment,e),H_=h(e),us=a(e,"P",{});var w$=i(us);Bg=l(w$,"Important: the presence of "),Of=a(w$,"CODE",{});var Wx=i(Of);Yg=l(Wx,"pytest-random-order"),Wx.forEach(s),Vg=l(w$,` will automatically randomize tests, no configuration change or
command line options is required.`),w$.forEach(s),z_=h(e),ds=a(e,"P",{});var y$=i(ds);Xg=l(y$,`As explained earlier this allows detection of coupled tests - where one test\u2019s state affects the state of another. When
`),If=a(y$,"CODE",{});var Mx=i(If);Jg=l(Mx,"pytest-random-order"),Mx.forEach(s),Zg=l(y$," is installed it will print the random seed it used for that session, e.g:"),y$.forEach(s),R_=h(e),c(zl.$$.fragment,e),G_=h(e),xi=a(e,"P",{});var Bx=i(xi);Kg=l(Bx,"So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:"),Bx.forEach(s),F_=h(e),c(Rl.$$.fragment,e),W_=h(e),cs=a(e,"P",{});var $$=i(cs);Qg=l($$,`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using `),Df=a($$,"CODE",{});var Yx=i(Df);e2=l(Yx,"--random-order-bucket=none"),Yx.forEach(s),t2=l($$,", e.g.:"),$$.forEach(s),M_=h(e),c(Gl.$$.fragment,e),B_=h(e),Oi=a(e,"P",{});var Vx=i(Oi);s2=l(Vx,"To disable the shuffling for all tests:"),Vx.forEach(s),Y_=h(e),c(Fl.$$.fragment,e),V_=h(e),I=a(e,"P",{});var X=i(I);o2=l(X,"By default "),Af=a(X,"CODE",{});var Xx=i(Af);l2=l(Xx,"--random-order-bucket=module"),Xx.forEach(s),r2=l(X,` is implied, which will shuffle the files on the module levels. It can also
shuffle on `),Tf=a(X,"CODE",{});var Jx=i(Tf);a2=l(Jx,"class"),Jx.forEach(s),i2=l(X,", "),qf=a(X,"CODE",{});var Zx=i(qf);n2=l(Zx,"package"),Zx.forEach(s),p2=l(X,", "),Sf=a(X,"CODE",{});var Kx=i(Sf);f2=l(Kx,"global"),Kx.forEach(s),h2=l(X," and "),Lf=a(X,"CODE",{});var Qx=i(Lf);u2=l(Qx,"none"),Qx.forEach(s),d2=l(X,` levels. For the complete details please see its
`),Wl=a(X,"A",{href:!0,rel:!0});var eO=i(Wl);c2=l(eO,"documentation"),eO.forEach(s),m2=l(X,"."),X.forEach(s),X_=h(e),Ce=a(e,"P",{});var Yn=i(Ce);_2=l(Yn,"Another randomization alternative is: "),Ml=a(Yn,"A",{href:!0,rel:!0});var tO=i(Ml);Uf=a(tO,"CODE",{});var sO=i(Uf);v2=l(sO,"pytest-randomly"),sO.forEach(s),tO.forEach(s),w2=l(Yn,`. This
module has a very similar functionality/interface, but it doesn\u2019t have the bucket modes available in
`),Nf=a(Yn,"CODE",{});var oO=i(Nf);y2=l(oO,"pytest-random-order"),oO.forEach(s),$2=l(Yn,". It has the same problem of imposing itself once installed."),Yn.forEach(s),J_=h(e),ft=a(e,"H3",{class:!0});var E$=i(ft);ms=a(E$,"A",{id:!0,class:!0,href:!0});var lO=i(ms);Hf=a(lO,"SPAN",{});var rO=i(Hf);c(Bl.$$.fragment,rO),rO.forEach(s),lO.forEach(s),E2=h(E$),zf=a(E$,"SPAN",{});var aO=i(zf);b2=l(aO,"Look and feel variations"),aO.forEach(s),E$.forEach(s),Z_=h(e),ht=a(e,"H4",{class:!0});var b$=i(ht);_s=a(b$,"A",{id:!0,class:!0,href:!0});var iO=i(_s);Rf=a(iO,"SPAN",{});var nO=i(Rf);c(Yl.$$.fragment,nO),nO.forEach(s),iO.forEach(s),g2=h(b$),Gf=a(b$,"SPAN",{});var pO=i(Gf);k2=l(pO,"pytest-sugar"),pO.forEach(s),b$.forEach(s),K_=h(e),Vl=a(e,"P",{});var wC=i(Vl);Xl=a(wC,"A",{href:!0,rel:!0});var fO=i(Xl);j2=l(fO,"pytest-sugar"),fO.forEach(s),C2=l(wC,` is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`),wC.forEach(s),Q_=h(e),c(Jl.$$.fragment,e),ev=h(e),Ii=a(e,"P",{});var hO=i(Ii);P2=l(hO,"To run tests without it, run:"),hO.forEach(s),tv=h(e),c(Zl.$$.fragment,e),sv=h(e),Di=a(e,"P",{});var uO=i(Di);x2=l(uO,"or uninstall it."),uO.forEach(s),ov=h(e),ut=a(e,"H4",{class:!0});var g$=i(ut);vs=a(g$,"A",{id:!0,class:!0,href:!0});var dO=i(vs);Ff=a(dO,"SPAN",{});var cO=i(Ff);c(Kl.$$.fragment,cO),cO.forEach(s),dO.forEach(s),O2=h(g$),Wf=a(g$,"SPAN",{});var mO=i(Wf);I2=l(mO,"Report each sub-test name and its progress"),mO.forEach(s),g$.forEach(s),lv=h(e),Pe=a(e,"P",{});var Vn=i(Pe);D2=l(Vn,"For a single or a group of tests via "),Mf=a(Vn,"CODE",{});var _O=i(Mf);A2=l(_O,"pytest"),_O.forEach(s),T2=l(Vn," (after "),Bf=a(Vn,"CODE",{});var vO=i(Bf);q2=l(vO,"pip install pytest-pspec"),vO.forEach(s),S2=l(Vn,"):"),Vn.forEach(s),rv=h(e),c(Ql.$$.fragment,e),av=h(e),dt=a(e,"H4",{class:!0});var k$=i(dt);ws=a(k$,"A",{id:!0,class:!0,href:!0});var wO=i(ws);Yf=a(wO,"SPAN",{});var yO=i(Yf);c(er.$$.fragment,yO),yO.forEach(s),wO.forEach(s),L2=h(k$),Vf=a(k$,"SPAN",{});var $O=i(Vf);U2=l($O,"Instantly shows failed tests"),$O.forEach(s),k$.forEach(s),iv=h(e),tr=a(e,"P",{});var yC=i(tr);sr=a(yC,"A",{href:!0,rel:!0});var EO=i(sr);N2=l(EO,"pytest-instafail"),EO.forEach(s),H2=l(yC,` shows failures and errors instantly instead of
waiting until the end of test session.`),yC.forEach(s),nv=h(e),c(or.$$.fragment,e),pv=h(e),c(lr.$$.fragment,e),fv=h(e),ct=a(e,"H3",{class:!0});var j$=i(ct);ys=a(j$,"A",{id:!0,class:!0,href:!0});var bO=i(ys);Xf=a(bO,"SPAN",{});var gO=i(Xf);c(rr.$$.fragment,gO),gO.forEach(s),bO.forEach(s),z2=h(j$),Jf=a(j$,"SPAN",{});var kO=i(Jf);R2=l(kO,"To GPU or not to GPU"),kO.forEach(s),j$.forEach(s),hv=h(e),$s=a(e,"P",{});var C$=i($s);G2=l(C$,"On a GPU-enabled setup, to test in CPU-only mode add "),Zf=a(C$,"CODE",{});var jO=i(Zf);F2=l(jO,'CUDA_VISIBLE_DEVICES=""'),jO.forEach(s),W2=l(C$,":"),C$.forEach(s),uv=h(e),c(ar.$$.fragment,e),dv=h(e),te=a(e,"P",{});var jo=i(te);M2=l(jo,"or if you have multiple gpus, you can specify which one is to be used by "),Kf=a(jo,"CODE",{});var CO=i(Kf);B2=l(CO,"pytest"),CO.forEach(s),Y2=l(jo,`. For example, to use only the
second gpu if you have gpus `),Qf=a(jo,"CODE",{});var PO=i(Qf);V2=l(PO,"0"),PO.forEach(s),X2=l(jo," and "),eh=a(jo,"CODE",{});var xO=i(eh);J2=l(xO,"1"),xO.forEach(s),Z2=l(jo,", you can run:"),jo.forEach(s),cv=h(e),c(ir.$$.fragment,e),mv=h(e),Ai=a(e,"P",{});var OO=i(Ai);K2=l(OO,"This is handy when you want to run different tasks on different GPUs."),OO.forEach(s),_v=h(e),Ti=a(e,"P",{});var IO=i(Ti);Q2=l(IO,`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`),IO.forEach(s),vv=h(e),U=a(e,"UL",{});var he=i(U);qi=a(he,"LI",{});var $C=i(qi);th=a($C,"CODE",{});var DO=i(th);e5=l(DO,"require_torch"),DO.forEach(s),t5=l($C," - this test will run only under torch"),$C.forEach(s),s5=h(he),Es=a(he,"LI",{});var sm=i(Es);sh=a(sm,"CODE",{});var AO=i(sh);o5=l(AO,"require_torch_gpu"),AO.forEach(s),l5=l(sm," - as "),oh=a(sm,"CODE",{});var TO=i(oh);r5=l(TO,"require_torch"),TO.forEach(s),a5=l(sm," plus requires at least 1 GPU"),sm.forEach(s),i5=h(he),bs=a(he,"LI",{});var om=i(bs);lh=a(om,"CODE",{});var qO=i(lh);n5=l(qO,"require_torch_multi_gpu"),qO.forEach(s),p5=l(om," - as "),rh=a(om,"CODE",{});var SO=i(rh);f5=l(SO,"require_torch"),SO.forEach(s),h5=l(om," plus requires at least 2 GPUs"),om.forEach(s),u5=h(he),gs=a(he,"LI",{});var lm=i(gs);ah=a(lm,"CODE",{});var LO=i(ah);d5=l(LO,"require_torch_non_multi_gpu"),LO.forEach(s),c5=l(lm," - as "),ih=a(lm,"CODE",{});var UO=i(ih);m5=l(UO,"require_torch"),UO.forEach(s),_5=l(lm," plus requires 0 or 1 GPUs"),lm.forEach(s),v5=h(he),ks=a(he,"LI",{});var rm=i(ks);nh=a(rm,"CODE",{});var NO=i(nh);w5=l(NO,"require_torch_up_to_2_gpus"),NO.forEach(s),y5=l(rm," - as "),ph=a(rm,"CODE",{});var HO=i(ph);$5=l(HO,"require_torch"),HO.forEach(s),E5=l(rm," plus requires 0 or 1 or 2 GPUs"),rm.forEach(s),b5=h(he),js=a(he,"LI",{});var am=i(js);fh=a(am,"CODE",{});var zO=i(fh);g5=l(zO,"require_torch_tpu"),zO.forEach(s),k5=l(am," - as "),hh=a(am,"CODE",{});var RO=i(hh);j5=l(RO,"require_torch"),RO.forEach(s),C5=l(am," plus requires at least 1 TPU"),am.forEach(s),he.forEach(s),wv=h(e),Si=a(e,"P",{});var GO=i(Si);P5=l(GO,"Let\u2019s depict the GPU requirements in the following table:"),GO.forEach(s),yv=h(e),k=a(e,"P",{});var P=i(k);x5=l(P,`| n gpus | decorator                      |
|--------+--------------------------------|
| `),uh=a(P,"CODE",{});var FO=i(uh);O5=l(FO,">= 0"),FO.forEach(s),I5=l(P," | "),dh=a(P,"CODE",{});var WO=i(dh);D5=l(WO,"@require_torch"),WO.forEach(s),A5=l(P,`               |
| `),ch=a(P,"CODE",{});var MO=i(ch);T5=l(MO,">= 1"),MO.forEach(s),q5=l(P," | "),mh=a(P,"CODE",{});var BO=i(mh);S5=l(BO,"@require_torch_gpu"),BO.forEach(s),L5=l(P,`           |
| `),_h=a(P,"CODE",{});var YO=i(_h);U5=l(YO,">= 2"),YO.forEach(s),N5=l(P," | "),vh=a(P,"CODE",{});var VO=i(vh);H5=l(VO,"@require_torch_multi_gpu"),VO.forEach(s),z5=l(P,`     |
| `),wh=a(P,"CODE",{});var XO=i(wh);R5=l(XO,"< 2"),XO.forEach(s),G5=l(P,"  | "),yh=a(P,"CODE",{});var JO=i(yh);F5=l(JO,"@require_torch_non_multi_gpu"),JO.forEach(s),W5=l(P,` |
| `),$h=a(P,"CODE",{});var ZO=i($h);M5=l(ZO,"< 3"),ZO.forEach(s),B5=l(P,"  | "),Eh=a(P,"CODE",{});var KO=i(Eh);Y5=l(KO,"@require_torch_up_to_2_gpus"),KO.forEach(s),V5=l(P,"  |"),P.forEach(s),$v=h(e),Li=a(e,"P",{});var QO=i(Li);X5=l(QO,"For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:"),QO.forEach(s),Ev=h(e),c(nr.$$.fragment,e),bv=h(e),xe=a(e,"P",{});var Xn=i(xe);J5=l(Xn,"If a test requires "),bh=a(Xn,"CODE",{});var eI=i(bh);Z5=l(eI,"tensorflow"),eI.forEach(s),K5=l(Xn," use the "),gh=a(Xn,"CODE",{});var tI=i(gh);Q5=l(tI,"require_tf"),tI.forEach(s),ek=l(Xn," decorator. For example:"),Xn.forEach(s),gv=h(e),c(pr.$$.fragment,e),kv=h(e),Ui=a(e,"P",{});var sI=i(Ui);tk=l(sI,`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`),sI.forEach(s),jv=h(e),c(fr.$$.fragment,e),Cv=h(e),Oe=a(e,"P",{});var Jn=i(Oe);sk=l(Jn,"Some decorators like "),kh=a(Jn,"CODE",{});var oI=i(kh);ok=l(oI,"@parametrized"),oI.forEach(s),lk=l(Jn," rewrite test names, therefore "),jh=a(Jn,"CODE",{});var lI=i(jh);rk=l(lI,"@require_*"),lI.forEach(s),ak=l(Jn,` skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`),Jn.forEach(s),Pv=h(e),c(hr.$$.fragment,e),xv=h(e),Cs=a(e,"P",{});var P$=i(Cs);ik=l(P$,"This order problem doesn\u2019t exist with "),Ch=a(P$,"CODE",{});var rI=i(Ch);nk=l(rI,"@pytest.mark.parametrize"),rI.forEach(s),pk=l(P$,`, you can put it first or last and it will still
work. But it only works with non-unittests.`),P$.forEach(s),Ov=h(e),Ni=a(e,"P",{});var aI=i(Ni);fk=l(aI,"Inside tests:"),aI.forEach(s),Iv=h(e),Hi=a(e,"UL",{});var iI=i(Hi);Ph=a(iI,"LI",{});var nI=i(Ph);hk=l(nI,"How many GPUs are available:"),nI.forEach(s),iI.forEach(s),Dv=h(e),c(ur.$$.fragment,e),Av=h(e),mt=a(e,"H3",{class:!0});var x$=i(mt);Ps=a(x$,"A",{id:!0,class:!0,href:!0});var pI=i(Ps);xh=a(pI,"SPAN",{});var fI=i(xh);c(dr.$$.fragment,fI),fI.forEach(s),pI.forEach(s),uk=h(x$),Oh=a(x$,"SPAN",{});var hI=i(Oh);dk=l(hI,"Distributed training"),hI.forEach(s),x$.forEach(s),Tv=h(e),_t=a(e,"P",{});var im=i(_t);Ih=a(im,"CODE",{});var uI=i(Ih);ck=l(uI,"pytest"),uI.forEach(s),mk=l(im,` can\u2019t deal with distributed training directly. If this is attempted - the sub-processes don\u2019t do the right
thing and end up thinking they are `),Dh=a(im,"CODE",{});var dI=i(Dh);_k=l(dI,"pytest"),dI.forEach(s),vk=l(im,` and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`),im.forEach(s),qv=h(e),zi=a(e,"P",{});var cI=i(zi);wk=l(cI,"Here are some tests that use it:"),cI.forEach(s),Sv=h(e),xs=a(e,"UL",{});var O$=i(xs);Ah=a(O$,"LI",{});var mI=i(Ah);cr=a(mI,"A",{href:!0,rel:!0});var _I=i(cr);yk=l(_I,"test_trainer_distributed.py"),_I.forEach(s),mI.forEach(s),$k=h(O$),Th=a(O$,"LI",{});var vI=i(Th);mr=a(vI,"A",{href:!0,rel:!0});var wI=i(mr);Ek=l(wI,"test_deepspeed.py"),wI.forEach(s),vI.forEach(s),O$.forEach(s),Lv=h(e),Os=a(e,"P",{});var I$=i(Os);bk=l(I$,"To jump right into the execution point, search for the "),qh=a(I$,"CODE",{});var yI=i(qh);gk=l(yI,"execute_subprocess_async"),yI.forEach(s),kk=l(I$," call in those tests."),I$.forEach(s),Uv=h(e),Ri=a(e,"P",{});var $I=i(Ri);jk=l($I,"You will need at least 2 GPUs to see these tests in action:"),$I.forEach(s),Nv=h(e),c(_r.$$.fragment,e),Hv=h(e),vt=a(e,"H3",{class:!0});var D$=i(vt);Is=a(D$,"A",{id:!0,class:!0,href:!0});var EI=i(Is);Sh=a(EI,"SPAN",{});var bI=i(Sh);c(vr.$$.fragment,bI),bI.forEach(s),EI.forEach(s),Ck=h(D$),Lh=a(D$,"SPAN",{});var gI=i(Lh);Pk=l(gI,"Output capture"),gI.forEach(s),D$.forEach(s),zv=h(e),Ie=a(e,"P",{});var Zn=i(Ie);xk=l(Zn,"During test execution any output sent to "),Uh=a(Zn,"CODE",{});var kI=i(Uh);Ok=l(kI,"stdout"),kI.forEach(s),Ik=l(Zn," and "),Nh=a(Zn,"CODE",{});var jI=i(Nh);Dk=l(jI,"stderr"),jI.forEach(s),Ak=l(Zn,` is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`),Zn.forEach(s),Rv=h(e),M=a(e,"P",{});var Ge=i(M);Tk=l(Ge,"To disable output capturing and to get the "),Hh=a(Ge,"CODE",{});var CI=i(Hh);qk=l(CI,"stdout"),CI.forEach(s),Sk=l(Ge," and "),zh=a(Ge,"CODE",{});var PI=i(zh);Lk=l(PI,"stderr"),PI.forEach(s),Uk=l(Ge," normally, use "),Rh=a(Ge,"CODE",{});var xI=i(Rh);Nk=l(xI,"-s"),xI.forEach(s),Hk=l(Ge," or "),Gh=a(Ge,"CODE",{});var OI=i(Gh);zk=l(OI,"--capture=no"),OI.forEach(s),Rk=l(Ge,":"),Ge.forEach(s),Gv=h(e),c(wr.$$.fragment,e),Fv=h(e),Gi=a(e,"P",{});var II=i(Gi);Gk=l(II,"To send test results to JUnit format output:"),II.forEach(s),Wv=h(e),c(yr.$$.fragment,e),Mv=h(e),wt=a(e,"H3",{class:!0});var A$=i(wt);Ds=a(A$,"A",{id:!0,class:!0,href:!0});var DI=i(Ds);Fh=a(DI,"SPAN",{});var AI=i(Fh);c($r.$$.fragment,AI),AI.forEach(s),DI.forEach(s),Fk=h(A$),Wh=a(A$,"SPAN",{});var TI=i(Wh);Wk=l(TI,"Color control"),TI.forEach(s),A$.forEach(s),Bv=h(e),Fi=a(e,"P",{});var qI=i(Fi);Mk=l(qI,"To have no color (e.g., yellow on white background is not readable):"),qI.forEach(s),Yv=h(e),c(Er.$$.fragment,e),Vv=h(e),yt=a(e,"H3",{class:!0});var T$=i(yt);As=a(T$,"A",{id:!0,class:!0,href:!0});var SI=i(As);Mh=a(SI,"SPAN",{});var LI=i(Mh);c(br.$$.fragment,LI),LI.forEach(s),SI.forEach(s),Bk=h(T$),Bh=a(T$,"SPAN",{});var UI=i(Bh);Yk=l(UI,"Sending test report to online pastebin service"),UI.forEach(s),T$.forEach(s),Xv=h(e),Wi=a(e,"P",{});var NI=i(Wi);Vk=l(NI,"Creating a URL for each test failure:"),NI.forEach(s),Jv=h(e),c(gr.$$.fragment,e),Zv=h(e),Mi=a(e,"P",{});var HI=i(Mi);Xk=l(HI,`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`),HI.forEach(s),Kv=h(e),Bi=a(e,"P",{});var zI=i(Bi);Jk=l(zI,"Creating a URL for a whole test session log:"),zI.forEach(s),Qv=h(e),c(kr.$$.fragment,e),e1=h(e),$t=a(e,"H2",{class:!0});var q$=i($t);Ts=a(q$,"A",{id:!0,class:!0,href:!0});var RI=i(Ts);Yh=a(RI,"SPAN",{});var GI=i(Yh);c(jr.$$.fragment,GI),GI.forEach(s),RI.forEach(s),Zk=h(q$),Vh=a(q$,"SPAN",{});var FI=i(Vh);Kk=l(FI,"Writing tests"),FI.forEach(s),q$.forEach(s),t1=h(e),De=a(e,"P",{});var Kn=i(De);Qk=l(Kn,"\u{1F917} transformers tests are based on "),Xh=a(Kn,"CODE",{});var WI=i(Xh);e4=l(WI,"unittest"),WI.forEach(s),t4=l(Kn,", but run by "),Jh=a(Kn,"CODE",{});var MI=i(Jh);s4=l(MI,"pytest"),MI.forEach(s),o4=l(Kn,`, so most of the time features from both systems
can be used.`),Kn.forEach(s),s1=h(e),se=a(e,"P",{});var Co=i(se);l4=l(Co,"You can read "),Cr=a(Co,"A",{href:!0,rel:!0});var BI=i(Cr);r4=l(BI,"here"),BI.forEach(s),a4=l(Co,` which features are supported, but the important
thing to remember is that most `),Zh=a(Co,"CODE",{});var YI=i(Zh);i4=l(YI,"pytest"),YI.forEach(s),n4=l(Co,` fixtures don\u2019t work. Neither parametrization, but we use the module
`),Kh=a(Co,"CODE",{});var VI=i(Kh);p4=l(VI,"parameterized"),VI.forEach(s),f4=l(Co," that works in a similar way."),Co.forEach(s),o1=h(e),Et=a(e,"H3",{class:!0});var S$=i(Et);qs=a(S$,"A",{id:!0,class:!0,href:!0});var XI=i(qs);Qh=a(XI,"SPAN",{});var JI=i(Qh);c(Pr.$$.fragment,JI),JI.forEach(s),XI.forEach(s),h4=h(S$),eu=a(S$,"SPAN",{});var ZI=i(eu);u4=l(ZI,"Parametrization"),ZI.forEach(s),S$.forEach(s),l1=h(e),Yi=a(e,"P",{});var KI=i(Yi);d4=l(KI,`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`),KI.forEach(s),r1=h(e),c(xr.$$.fragment,e),a1=h(e),Ss=a(e,"P",{});var L$=i(Ss);c4=l(L$,"Now, by default this test will be run 3 times, each time with the last 3 arguments of "),tu=a(L$,"CODE",{});var QI=i(tu);m4=l(QI,"test_floor"),QI.forEach(s),_4=l(L$,` being assigned the
corresponding arguments in the parameter list.`),L$.forEach(s),i1=h(e),Ae=a(e,"P",{});var Qn=i(Ae);v4=l(Qn,"and you could run just the "),su=a(Qn,"CODE",{});var eD=i(su);w4=l(eD,"negative"),eD.forEach(s),y4=l(Qn," and "),ou=a(Qn,"CODE",{});var tD=i(ou);$4=l(tD,"integer"),tD.forEach(s),E4=l(Qn," sets of params with:"),Qn.forEach(s),n1=h(e),c(Or.$$.fragment,e),p1=h(e),Ls=a(e,"P",{});var U$=i(Ls);b4=l(U$,"or all but "),lu=a(U$,"CODE",{});var sD=i(lu);g4=l(sD,"negative"),sD.forEach(s),k4=l(U$," sub-tests, with:"),U$.forEach(s),f1=h(e),c(Ir.$$.fragment,e),h1=h(e),Us=a(e,"P",{});var N$=i(Us);j4=l(N$,"Besides using the "),ru=a(N$,"CODE",{});var oD=i(ru);C4=l(oD,"-k"),oD.forEach(s),P4=l(N$,` filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`),N$.forEach(s),u1=h(e),c(Dr.$$.fragment,e),d1=h(e),Vi=a(e,"P",{});var lD=i(Vi);x4=l(lD,"and it will list:"),lD.forEach(s),c1=h(e),c(Ar.$$.fragment,e),m1=h(e),Xi=a(e,"P",{});var rD=i(Xi);O4=l(rD,"So now you can run just 2 specific sub-tests:"),rD.forEach(s),_1=h(e),c(Tr.$$.fragment,e),v1=h(e),B=a(e,"P",{});var Fe=i(B);I4=l(Fe,"The module "),qr=a(Fe,"A",{href:!0,rel:!0});var aD=i(qr);D4=l(aD,"parameterized"),aD.forEach(s),A4=l(Fe,` which is already in the developer dependencies
of `),au=a(Fe,"CODE",{});var iD=i(au);T4=l(iD,"transformers"),iD.forEach(s),q4=l(Fe," works for both: "),iu=a(Fe,"CODE",{});var nD=i(iu);S4=l(nD,"unittests"),nD.forEach(s),L4=l(Fe," and "),nu=a(Fe,"CODE",{});var pD=i(nu);U4=l(pD,"pytest"),pD.forEach(s),N4=l(Fe," tests."),Fe.forEach(s),w1=h(e),oe=a(e,"P",{});var Po=i(oe);H4=l(Po,"If, however, the test is not a "),pu=a(Po,"CODE",{});var fD=i(pu);z4=l(fD,"unittest"),fD.forEach(s),R4=l(Po,", you may use "),fu=a(Po,"CODE",{});var hD=i(fu);G4=l(hD,"pytest.mark.parametrize"),hD.forEach(s),F4=l(Po,` (or you may see it being used in
some existing tests, mostly under `),hu=a(Po,"CODE",{});var uD=i(hu);W4=l(uD,"examples"),uD.forEach(s),M4=l(Po,")."),Po.forEach(s),y1=h(e),Te=a(e,"P",{});var ep=i(Te);B4=l(ep,"Here is the same example, this time using "),uu=a(ep,"CODE",{});var dD=i(uu);Y4=l(dD,"pytest"),dD.forEach(s),V4=l(ep,"\u2019s "),du=a(ep,"CODE",{});var cD=i(du);X4=l(cD,"parametrize"),cD.forEach(s),J4=l(ep," marker:"),ep.forEach(s),$1=h(e),c(Sr.$$.fragment,e),E1=h(e),le=a(e,"P",{});var xo=i(le);Z4=l(xo,"Same as with "),cu=a(xo,"CODE",{});var mD=i(cu);K4=l(mD,"parameterized"),mD.forEach(s),Q4=l(xo,", with "),mu=a(xo,"CODE",{});var _D=i(mu);e0=l(_D,"pytest.mark.parametrize"),_D.forEach(s),t0=l(xo,` you can have a fine control over which sub-tests are
run, if the `),_u=a(xo,"CODE",{});var vD=i(_u);s0=l(vD,"-k"),vD.forEach(s),o0=l(xo,` filter doesn\u2019t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`),xo.forEach(s),b1=h(e),c(Lr.$$.fragment,e),g1=h(e),Ji=a(e,"P",{});var wD=i(Ji);l0=l(wD,"and it will list:"),wD.forEach(s),k1=h(e),c(Ur.$$.fragment,e),j1=h(e),Zi=a(e,"P",{});var yD=i(Zi);r0=l(yD,"So now you can run just the specific test:"),yD.forEach(s),C1=h(e),c(Nr.$$.fragment,e),P1=h(e),Ki=a(e,"P",{});var $D=i(Ki);a0=l($D,"as in the previous example."),$D.forEach(s),x1=h(e),bt=a(e,"H3",{class:!0});var H$=i(bt);Ns=a(H$,"A",{id:!0,class:!0,href:!0});var ED=i(Ns);vu=a(ED,"SPAN",{});var bD=i(vu);c(Hr.$$.fragment,bD),bD.forEach(s),ED.forEach(s),i0=h(H$),wu=a(H$,"SPAN",{});var gD=i(wu);n0=l(gD,"Files and directories"),gD.forEach(s),H$.forEach(s),O1=h(e),Hs=a(e,"P",{});var z$=i(Hs);p0=l(z$,`In tests often we need to know where things are relative to the current test file, and it\u2019s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
`),yu=a(z$,"CODE",{});var kD=i(yu);f0=l(kD,"transformers.test_utils.TestCasePlus"),kD.forEach(s),h0=l(z$,` solves this problem by sorting out all the basic paths and provides easy
accessors to them:`),z$.forEach(s),I1=h(e),zs=a(e,"UL",{});var R$=i(zs);zr=a(R$,"LI",{});var G$=i(zr);Qi=a(G$,"P",{});var EC=i(Qi);$u=a(EC,"CODE",{});var jD=i($u);u0=l(jD,"pathlib"),jD.forEach(s),d0=l(EC," objects (all fully resolved):"),EC.forEach(s),c0=h(G$),G=a(G$,"UL",{});var ue=i(G);Rr=a(ue,"LI",{});var F$=i(Rr);Eu=a(F$,"CODE",{});var CD=i(Eu);m0=l(CD,"test_file_path"),CD.forEach(s),_0=l(F$," - the current test file path, i.e. "),bu=a(F$,"CODE",{});var PD=i(bu);v0=l(PD,"__file__"),PD.forEach(s),F$.forEach(s),w0=h(ue),en=a(ue,"LI",{});var bC=i(en);gu=a(bC,"CODE",{});var xD=i(gu);y0=l(xD,"test_file_dir"),xD.forEach(s),$0=l(bC," - the directory containing the current test file"),bC.forEach(s),E0=h(ue),Rs=a(ue,"LI",{});var nm=i(Rs);ku=a(nm,"CODE",{});var OD=i(ku);b0=l(OD,"tests_dir"),OD.forEach(s),g0=l(nm," - the directory of the "),ju=a(nm,"CODE",{});var ID=i(ju);k0=l(ID,"tests"),ID.forEach(s),j0=l(nm," test suite"),nm.forEach(s),C0=h(ue),Gs=a(ue,"LI",{});var pm=i(Gs);Cu=a(pm,"CODE",{});var DD=i(Cu);P0=l(DD,"examples_dir"),DD.forEach(s),x0=l(pm," - the directory of the "),Pu=a(pm,"CODE",{});var AD=i(Pu);O0=l(AD,"examples"),AD.forEach(s),I0=l(pm," test suite"),pm.forEach(s),D0=h(ue),tn=a(ue,"LI",{});var gC=i(tn);xu=a(gC,"CODE",{});var TD=i(xu);A0=l(TD,"repo_root_dir"),TD.forEach(s),T0=l(gC," - the directory of the repository"),gC.forEach(s),q0=h(ue),qe=a(ue,"LI",{});var ei=i(qe);Ou=a(ei,"CODE",{});var qD=i(Ou);S0=l(qD,"src_dir"),qD.forEach(s),L0=l(ei," - the directory of "),Iu=a(ei,"CODE",{});var SD=i(Iu);U0=l(SD,"src"),SD.forEach(s),N0=l(ei," (i.e. where the "),Du=a(ei,"CODE",{});var LD=i(Du);H0=l(LD,"transformers"),LD.forEach(s),z0=l(ei," sub-dir resides)"),ei.forEach(s),ue.forEach(s),G$.forEach(s),R0=h(R$),Gr=a(R$,"LI",{});var W$=i(Gr);Fr=a(W$,"P",{});var M$=i(Fr);G0=l(M$,"stringified paths---same as above but these return paths as strings, rather than "),Au=a(M$,"CODE",{});var UD=i(Au);F0=l(UD,"pathlib"),UD.forEach(s),W0=l(M$," objects:"),M$.forEach(s),M0=h(W$),F=a(W$,"UL",{});var de=i(F);Tu=a(de,"LI",{});var ND=i(Tu);qu=a(ND,"CODE",{});var HD=i(qu);B0=l(HD,"test_file_path_str"),HD.forEach(s),ND.forEach(s),Y0=h(de),Su=a(de,"LI",{});var zD=i(Su);Lu=a(zD,"CODE",{});var RD=i(Lu);V0=l(RD,"test_file_dir_str"),RD.forEach(s),zD.forEach(s),X0=h(de),Uu=a(de,"LI",{});var GD=i(Uu);Nu=a(GD,"CODE",{});var FD=i(Nu);J0=l(FD,"tests_dir_str"),FD.forEach(s),GD.forEach(s),Z0=h(de),Hu=a(de,"LI",{});var WD=i(Hu);zu=a(WD,"CODE",{});var MD=i(zu);K0=l(MD,"examples_dir_str"),MD.forEach(s),WD.forEach(s),Q0=h(de),Ru=a(de,"LI",{});var BD=i(Ru);Gu=a(BD,"CODE",{});var YD=i(Gu);e6=l(YD,"repo_root_dir_str"),YD.forEach(s),BD.forEach(s),t6=h(de),Fu=a(de,"LI",{});var VD=i(Fu);Wu=a(VD,"CODE",{});var XD=i(Wu);s6=l(XD,"src_dir_str"),XD.forEach(s),VD.forEach(s),de.forEach(s),W$.forEach(s),R$.forEach(s),D1=h(e),Fs=a(e,"P",{});var B$=i(Fs);o6=l(B$,`To start using those all you need is to make sure that the test resides in a subclass of
`),Mu=a(B$,"CODE",{});var JD=i(Mu);l6=l(JD,"transformers.test_utils.TestCasePlus"),JD.forEach(s),r6=l(B$,". For example:"),B$.forEach(s),A1=h(e),c(Wr.$$.fragment,e),T1=h(e),Y=a(e,"P",{});var We=i(Y);a6=l(We,"If you don\u2019t need to manipulate paths via "),Bu=a(We,"CODE",{});var ZD=i(Bu);i6=l(ZD,"pathlib"),ZD.forEach(s),n6=l(We,` or you just need a path as a string, you can always invoked
`),Yu=a(We,"CODE",{});var KD=i(Yu);p6=l(KD,"str()"),KD.forEach(s),f6=l(We," on the "),Vu=a(We,"CODE",{});var QD=i(Vu);h6=l(QD,"pathlib"),QD.forEach(s),u6=l(We," object or use the accessors ending with "),Xu=a(We,"CODE",{});var eA=i(Xu);d6=l(eA,"_str"),eA.forEach(s),c6=l(We,". For example:"),We.forEach(s),q1=h(e),c(Mr.$$.fragment,e),S1=h(e),gt=a(e,"H3",{class:!0});var Y$=i(gt);Ws=a(Y$,"A",{id:!0,class:!0,href:!0});var tA=i(Ws);Ju=a(tA,"SPAN",{});var sA=i(Ju);c(Br.$$.fragment,sA),sA.forEach(s),tA.forEach(s),m6=h(Y$),Zu=a(Y$,"SPAN",{});var oA=i(Zu);_6=l(oA,"Temporary files and directories"),oA.forEach(s),Y$.forEach(s),L1=h(e),Ms=a(e,"P",{});var V$=i(Ms);v6=l(V$,`Using unique temporary files and directories are essential for parallel test running, so that the tests won\u2019t overwrite
each other\u2019s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like `),Ku=a(V$,"CODE",{});var lA=i(Ku);w6=l(lA,"tempfile"),lA.forEach(s),y6=l(V$,", which address these needs is essential."),V$.forEach(s),U1=h(e),sn=a(e,"P",{});var rA=i(sn);$6=l(rA,`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know it\u2019s exact path and not having it randomized on every test re-run.`),rA.forEach(s),N1=h(e),Se=a(e,"P",{});var tp=i(Se);E6=l(tp,"A helper class "),Qu=a(tp,"CODE",{});var aA=i(Qu);b6=l(aA,"transformers.test_utils.TestCasePlus"),aA.forEach(s),g6=l(tp,` is best used for such purposes. It\u2019s a sub-class of
`),ed=a(tp,"CODE",{});var iA=i(ed);k6=l(iA,"unittest.TestCase"),iA.forEach(s),j6=l(tp,", so we can easily inherit from it in the test modules."),tp.forEach(s),H1=h(e),on=a(e,"P",{});var nA=i(on);C6=l(nA,"Here is an example of its usage:"),nA.forEach(s),z1=h(e),c(Yr.$$.fragment,e),R1=h(e),Bs=a(e,"P",{});var X$=i(Bs);P6=l(X$,"This code creates a unique temporary directory, and sets "),td=a(X$,"CODE",{});var pA=i(td);x6=l(pA,"tmp_dir"),pA.forEach(s),O6=l(X$," to its location."),X$.forEach(s),G1=h(e),ln=a(e,"UL",{});var fA=i(ln);sd=a(fA,"LI",{});var hA=i(sd);I6=l(hA,"Create a unique temporary dir:"),hA.forEach(s),fA.forEach(s),F1=h(e),c(Vr.$$.fragment,e),W1=h(e),Xr=a(e,"P",{});var kC=i(Xr);od=a(kC,"CODE",{});var uA=i(od);D6=l(uA,"tmp_dir"),uA.forEach(s),A6=l(kC,` will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`),kC.forEach(s),M1=h(e),rn=a(e,"UL",{});var dA=i(rn);ld=a(dA,"LI",{});var cA=i(ld);T6=l(cA,"Create a temporary dir of my choice, ensure it\u2019s empty before the test starts and don\u2019t empty it after the test."),cA.forEach(s),dA.forEach(s),B1=h(e),c(Jr.$$.fragment,e),Y1=h(e),an=a(e,"P",{});var mA=i(an);q6=l(mA,`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didn\u2019t
leave any data in there.`),mA.forEach(s),V1=h(e),nn=a(e,"UL",{});var _A=i(nn);Zr=a(_A,"LI",{});var J$=i(Zr);kt=a(J$,"P",{});var sp=i(kt);S6=l(sp,"You can override the default behavior by directly overriding the "),rd=a(sp,"CODE",{});var vA=i(rd);L6=l(vA,"before"),vA.forEach(s),U6=l(sp," and "),ad=a(sp,"CODE",{});var wA=i(ad);N6=l(wA,"after"),wA.forEach(s),H6=l(sp,` args, leading to one of the
following behaviors:`),sp.forEach(s),z6=h(J$),ve=a(J$,"UL",{});var Oo=i(ve);pn=a(Oo,"LI",{});var jC=i(pn);id=a(jC,"CODE",{});var yA=i(id);R6=l(yA,"before=True"),yA.forEach(s),G6=l(jC,": the temporary dir will always be cleared at the beginning of the test."),jC.forEach(s),F6=h(Oo),fn=a(Oo,"LI",{});var CC=i(fn);nd=a(CC,"CODE",{});var $A=i(nd);W6=l($A,"before=False"),$A.forEach(s),M6=l(CC,": if the temporary dir already existed, any existing files will remain there."),CC.forEach(s),B6=h(Oo),hn=a(Oo,"LI",{});var PC=i(hn);pd=a(PC,"CODE",{});var EA=i(pd);Y6=l(EA,"after=True"),EA.forEach(s),V6=l(PC,": the temporary dir will always be deleted at the end of the test."),PC.forEach(s),X6=h(Oo),un=a(Oo,"LI",{});var xC=i(un);fd=a(xC,"CODE",{});var bA=i(fd);J6=l(bA,"after=False"),bA.forEach(s),Z6=l(xC,": the temporary dir will always be left intact at the end of the test."),xC.forEach(s),Oo.forEach(s),J$.forEach(s),_A.forEach(s),X1=h(e),c(Ys.$$.fragment,e),J1=h(e),c(Vs.$$.fragment,e),Z1=h(e),jt=a(e,"H3",{class:!0});var Z$=i(jt);Xs=a(Z$,"A",{id:!0,class:!0,href:!0});var gA=i(Xs);hd=a(gA,"SPAN",{});var kA=i(hd);c(Kr.$$.fragment,kA),kA.forEach(s),gA.forEach(s),K6=h(Z$),ud=a(Z$,"SPAN",{});var jA=i(ud);Q6=l(jA,"Temporary sys.path override"),jA.forEach(s),Z$.forEach(s),K1=h(e),Le=a(e,"P",{});var op=i(Le);e7=l(op,"If you need to temporary override "),dd=a(op,"CODE",{});var CA=i(dd);t7=l(CA,"sys.path"),CA.forEach(s),s7=l(op,` to import from another test for example, you can use the
`),cd=a(op,"CODE",{});var PA=i(cd);o7=l(PA,"ExtendSysPath"),PA.forEach(s),l7=l(op," context manager. Example:"),op.forEach(s),Q1=h(e),c(Qr.$$.fragment,e),ew=h(e),Ct=a(e,"H3",{class:!0});var K$=i(Ct);Js=a(K$,"A",{id:!0,class:!0,href:!0});var xA=i(Js);md=a(xA,"SPAN",{});var OA=i(md);c(ea.$$.fragment,OA),OA.forEach(s),xA.forEach(s),r7=h(K$),_d=a(K$,"SPAN",{});var IA=i(_d);a7=l(IA,"Skipping tests"),IA.forEach(s),K$.forEach(s),tw=h(e),Zs=a(e,"P",{});var Q$=i(Zs);i7=l(Q$,`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure it\u2019s skipped during `),vd=a(Q$,"CODE",{});var DA=i(vd);n7=l(DA,"make test"),DA.forEach(s),p7=l(Q$,"."),Q$.forEach(s),sw=h(e),dn=a(e,"P",{});var AA=i(dn);f7=l(AA,"Methods:"),AA.forEach(s),ow=h(e),Ks=a(e,"UL",{});var eE=i(Ks);wd=a(eE,"LI",{});var TA=i(wd);ta=a(TA,"P",{});var tE=i(ta);h7=l(tE,"A "),yd=a(tE,"STRONG",{});var qA=i(yd);u7=l(qA,"skip"),qA.forEach(s),d7=l(tE,` means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).`),tE.forEach(s),TA.forEach(s),c7=h(eE),$d=a(eE,"LI",{});var SA=i($d);sa=a(SA,"P",{});var sE=i(sa);m7=l(sE,"A "),Ed=a(sE,"STRONG",{});var LA=i(Ed);_7=l(LA,"xfail"),LA.forEach(s),v7=l(sE,` means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), it\u2019s an xpass and will be reported in the test summary.`),sE.forEach(s),SA.forEach(s),eE.forEach(s),lw=h(e),re=a(e,"P",{});var Io=i(re);w7=l(Io,"One of the important differences between the two is that "),bd=a(Io,"CODE",{});var UA=i(bd);y7=l(UA,"skip"),UA.forEach(s),$7=l(Io," doesn\u2019t run the test, and "),gd=a(Io,"CODE",{});var NA=i(gd);E7=l(NA,"xfail"),NA.forEach(s),b7=l(Io,` does. So if the
code that\u2019s buggy causes some bad state that will affect other tests, do not use `),kd=a(Io,"CODE",{});var HA=i(kd);g7=l(HA,"xfail"),HA.forEach(s),k7=l(Io,"."),Io.forEach(s),rw=h(e),Pt=a(e,"H4",{class:!0});var oE=i(Pt);Qs=a(oE,"A",{id:!0,class:!0,href:!0});var zA=i(Qs);jd=a(zA,"SPAN",{});var RA=i(jd);c(oa.$$.fragment,RA),RA.forEach(s),zA.forEach(s),j7=h(oE),Cd=a(oE,"SPAN",{});var GA=i(Cd);C7=l(GA,"Implementation"),GA.forEach(s),oE.forEach(s),aw=h(e),cn=a(e,"UL",{});var FA=i(cn);Pd=a(FA,"LI",{});var WA=i(Pd);P7=l(WA,"Here is how to skip whole test unconditionally:"),WA.forEach(s),FA.forEach(s),iw=h(e),c(la.$$.fragment,e),nw=h(e),mn=a(e,"P",{});var MA=i(mn);x7=l(MA,"or via pytest:"),MA.forEach(s),pw=h(e),c(ra.$$.fragment,e),fw=h(e),eo=a(e,"P",{});var lE=i(eo);O7=l(lE,"or the "),xd=a(lE,"CODE",{});var BA=i(xd);I7=l(BA,"xfail"),BA.forEach(s),D7=l(lE," way:"),lE.forEach(s),hw=h(e),c(aa.$$.fragment,e),uw=h(e),_n=a(e,"UL",{});var YA=i(_n);Od=a(YA,"LI",{});var VA=i(Od);A7=l(VA,"Here is how to skip a test based on some internal check inside the test:"),VA.forEach(s),YA.forEach(s),dw=h(e),c(ia.$$.fragment,e),cw=h(e),vn=a(e,"P",{});var XA=i(vn);T7=l(XA,"or the whole module:"),XA.forEach(s),mw=h(e),c(na.$$.fragment,e),_w=h(e),to=a(e,"P",{});var rE=i(to);q7=l(rE,"or the "),Id=a(rE,"CODE",{});var JA=i(Id);S7=l(JA,"xfail"),JA.forEach(s),L7=l(rE," way:"),rE.forEach(s),vw=h(e),c(pa.$$.fragment,e),ww=h(e),wn=a(e,"UL",{});var ZA=i(wn);Dd=a(ZA,"LI",{});var KA=i(Dd);U7=l(KA,"Here is how to skip all tests in a module if some import is missing:"),KA.forEach(s),ZA.forEach(s),yw=h(e),c(fa.$$.fragment,e),$w=h(e),yn=a(e,"UL",{});var QA=i(yn);Ad=a(QA,"LI",{});var eT=i(Ad);N7=l(eT,"Skip a test based on a condition:"),eT.forEach(s),QA.forEach(s),Ew=h(e),c(ha.$$.fragment,e),bw=h(e),$n=a(e,"P",{});var tT=i($n);H7=l(tT,"or:"),tT.forEach(s),gw=h(e),c(ua.$$.fragment,e),kw=h(e),En=a(e,"P",{});var sT=i(En);z7=l(sT,"or skip the whole module:"),sT.forEach(s),jw=h(e),c(da.$$.fragment,e),Cw=h(e),so=a(e,"P",{});var aE=i(so);R7=l(aE,"More details, example and ways are "),ca=a(aE,"A",{href:!0,rel:!0});var oT=i(ca);G7=l(oT,"here"),oT.forEach(s),F7=l(aE,"."),aE.forEach(s),Pw=h(e),xt=a(e,"H3",{class:!0});var iE=i(xt);oo=a(iE,"A",{id:!0,class:!0,href:!0});var lT=i(oo);Td=a(lT,"SPAN",{});var rT=i(Td);c(ma.$$.fragment,rT),rT.forEach(s),lT.forEach(s),W7=h(iE),qd=a(iE,"SPAN",{});var aT=i(qd);M7=l(aT,"Slow tests"),aT.forEach(s),iE.forEach(s),xw=h(e),bn=a(e,"P",{});var iT=i(bn);B7=l(iT,`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we can\u2019t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`),iT.forEach(s),Ow=h(e),c(_a.$$.fragment,e),Iw=h(e),Ue=a(e,"P",{});var lp=i(Ue);Y7=l(lp,"Once a test is marked as "),Sd=a(lp,"CODE",{});var nT=i(Sd);V7=l(nT,"@slow"),nT.forEach(s),X7=l(lp,", to run such tests set "),Ld=a(lp,"CODE",{});var pT=i(Ld);J7=l(pT,"RUN_SLOW=1"),pT.forEach(s),Z7=l(lp," env var, e.g.:"),lp.forEach(s),Dw=h(e),c(va.$$.fragment,e),Aw=h(e),ae=a(e,"P",{});var Do=i(ae);K7=l(Do,"Some decorators like "),Ud=a(Do,"CODE",{});var fT=i(Ud);Q7=l(fT,"@parameterized"),fT.forEach(s),e8=l(Do," rewrite test names, therefore "),Nd=a(Do,"CODE",{});var hT=i(Nd);t8=l(hT,"@slow"),hT.forEach(s),s8=l(Do,` and the rest of the skip decorators
`),Hd=a(Do,"CODE",{});var uT=i(Hd);o8=l(uT,"@require_*"),uT.forEach(s),l8=l(Do," have to be listed last for them to work correctly. Here is an example of the correct usage:"),Do.forEach(s),Tw=h(e),c(wa.$$.fragment,e),qw=h(e),gn=a(e,"P",{});var dT=i(gn);r8=l(dT,`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So it\u2019s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that it\u2019s important to run the slow tests on your
machine before submitting the PR.`),dT.forEach(s),Sw=h(e),kn=a(e,"P",{});var cT=i(kn);a8=l(cT,"Here is a rough decision making mechanism for choosing which tests should be marked as slow:"),cT.forEach(s),Lw=h(e),jn=a(e,"P",{});var mT=i(jn);i8=l(mT,`If the test is focused on one of the library\u2019s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If it\u2019s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`),mT.forEach(s),Uw=h(e),ie=a(e,"UL",{});var Ao=i(ie);zd=a(Ao,"LI",{});var _T=i(zd);n8=l(_T,`All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If you\u2019re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.`),_T.forEach(s),p8=h(Ao),Rd=a(Ao,"LI",{});var vT=i(Rd);f8=l(vT,"All tests that need to do a training not specifically optimized to be fast should be set to slow."),vT.forEach(s),h8=h(Ao),Ot=a(Ao,"LI",{});var rp=i(Ot);u8=l(rp,`We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
`),Gd=a(rp,"CODE",{});var wT=i(Gd);d8=l(wT,"@slow"),wT.forEach(s),c8=l(rp,`. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as `),Fd=a(rp,"CODE",{});var yT=i(Fd);m8=l(yT,"@slow"),yT.forEach(s),_8=l(rp,"."),rp.forEach(s),v8=h(Ao),Wd=a(Ao,"LI",{});var $T=i(Wd);w8=l($T,"If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless."),$T.forEach(s),Ao.forEach(s),Nw=h(e),Ne=a(e,"P",{});var ap=i(Ne);y8=l(ap,`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `),Md=a(ap,"CODE",{});var ET=i(Md);$8=l(ET,"@slow"),ET.forEach(s),E8=l(ap,` tests can use large
slow models to do qualitative testing. To see the use of these simply look for `),Bd=a(ap,"EM",{});var bT=i(Bd);b8=l(bT,"tiny"),bT.forEach(s),g8=l(ap," models with:"),ap.forEach(s),Hw=h(e),c(ya.$$.fragment,e),zw=h(e),He=a(e,"P",{});var ip=i(He);k8=l(ip,"Here is a an example of a "),$a=a(ip,"A",{href:!0,rel:!0});var gT=i($a);j8=l(gT,"script"),gT.forEach(s),C8=l(ip,` that created the tiny model
`),Ea=a(ip,"A",{href:!0,rel:!0});var kT=i(Ea);P8=l(kT,"stas/tiny-wmt19-en-de"),kT.forEach(s),x8=l(ip,`. You can easily adjust it to your specific
model\u2019s architecture.`),ip.forEach(s),Rw=h(e),lo=a(e,"P",{});var nE=i(lo);O8=l(nE,`It\u2019s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of `),Yd=a(nE,"CODE",{});var jT=i(Yd);I8=l(jT,"pytest --durations=0 tests"),jT.forEach(s),D8=l(nE,")."),nE.forEach(s),Gw=h(e),Cn=a(e,"P",{});var CT=i(Cn);A8=l(CT,`That report is also useful to find slow outliers that aren\u2019t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`),CT.forEach(s),Fw=h(e),It=a(e,"H3",{class:!0});var pE=i(It);ro=a(pE,"A",{id:!0,class:!0,href:!0});var PT=i(ro);Vd=a(PT,"SPAN",{});var xT=i(Vd);c(ba.$$.fragment,xT),xT.forEach(s),PT.forEach(s),T8=h(pE),Xd=a(pE,"SPAN",{});var OT=i(Xd);q8=l(OT,"Testing the stdout/stderr output"),OT.forEach(s),pE.forEach(s),Ww=h(e),V=a(e,"P",{});var Me=i(V);S8=l(Me,"In order to test functions that write to "),Jd=a(Me,"CODE",{});var IT=i(Jd);L8=l(IT,"stdout"),IT.forEach(s),U8=l(Me," and/or "),Zd=a(Me,"CODE",{});var DT=i(Zd);N8=l(DT,"stderr"),DT.forEach(s),H8=l(Me,`, the test can access those streams using the
`),Kd=a(Me,"CODE",{});var AT=i(Kd);z8=l(AT,"pytest"),AT.forEach(s),R8=l(Me,"\u2019s "),ga=a(Me,"A",{href:!0,rel:!0});var TT=i(ga);G8=l(TT,"capsys system"),TT.forEach(s),F8=l(Me,". Here is how this is accomplished:"),Me.forEach(s),Mw=h(e),c(ka.$$.fragment,e),Bw=h(e),ao=a(e,"P",{});var fE=i(ao);W8=l(fE,"And, of course, most of the time, "),Qd=a(fE,"CODE",{});var qT=i(Qd);M8=l(qT,"stderr"),qT.forEach(s),B8=l(fE,` will come as a part of an exception, so try/except has to be used in such
a case:`),fE.forEach(s),Yw=h(e),c(ja.$$.fragment,e),Vw=h(e),io=a(e,"P",{});var hE=i(io);Y8=l(hE,"Another approach to capturing stdout is via "),ec=a(hE,"CODE",{});var ST=i(ec);V8=l(ST,"contextlib.redirect_stdout"),ST.forEach(s),X8=l(hE,":"),hE.forEach(s),Xw=h(e),c(Ca.$$.fragment,e),Jw=h(e),D=a(e,"P",{});var J=i(D);J8=l(J,"An important potential issue with capturing stdout is that it may contain "),tc=a(J,"CODE",{});var LT=i(tc);Z8=l(LT,"\\r"),LT.forEach(s),K8=l(J," characters that in normal "),sc=a(J,"CODE",{});var UT=i(sc);Q8=l(UT,"print"),UT.forEach(s),e9=l(J,`
reset everything that has been printed so far. There is no problem with `),oc=a(J,"CODE",{});var NT=i(oc);t9=l(NT,"pytest"),NT.forEach(s),s9=l(J,", but with "),lc=a(J,"CODE",{});var HT=i(lc);o9=l(HT,"pytest -s"),HT.forEach(s),l9=l(J,` these
characters get included in the buffer, so to be able to have the test run with and without `),rc=a(J,"CODE",{});var zT=i(rc);r9=l(zT,"-s"),zT.forEach(s),a9=l(J,`, you have to make an
extra cleanup to the captured output, using `),ac=a(J,"CODE",{});var RT=i(ac);i9=l(RT,"re.sub(r'~.*\\r', '', buf, 0, re.M)"),RT.forEach(s),n9=l(J,"."),J.forEach(s),Zw=h(e),no=a(e,"P",{});var uE=i(no);p9=l(uE,`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some `),ic=a(uE,"CODE",{});var GT=i(ic);f9=l(GT,"\\r"),GT.forEach(s),h9=l(uE,"\u2019s in it or not, so it\u2019s a simple:"),uE.forEach(s),Kw=h(e),c(Pa.$$.fragment,e),Qw=h(e),Pn=a(e,"P",{});var FT=i(Pn);u9=l(FT,"Here is a full test example:"),FT.forEach(s),ey=h(e),c(xa.$$.fragment,e),ty=h(e),ze=a(e,"P",{});var np=i(ze);d9=l(np,"If you\u2019d like to capture "),nc=a(np,"CODE",{});var WT=i(nc);c9=l(WT,"stderr"),WT.forEach(s),m9=l(np," use the "),pc=a(np,"CODE",{});var MT=i(pc);_9=l(MT,"CaptureStderr"),MT.forEach(s),v9=l(np," class instead:"),np.forEach(s),sy=h(e),c(Oa.$$.fragment,e),oy=h(e),po=a(e,"P",{});var dE=i(po);w9=l(dE,"If you need to capture both streams at once, use the parent "),fc=a(dE,"CODE",{});var BT=i(fc);y9=l(BT,"CaptureStd"),BT.forEach(s),$9=l(dE," class:"),dE.forEach(s),ly=h(e),c(Ia.$$.fragment,e),ry=h(e),xn=a(e,"P",{});var YT=i(xn);E9=l(YT,`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`),YT.forEach(s),ay=h(e),Dt=a(e,"H3",{class:!0});var cE=i(Dt);fo=a(cE,"A",{id:!0,class:!0,href:!0});var VT=i(fo);hc=a(VT,"SPAN",{});var XT=i(hc);c(Da.$$.fragment,XT),XT.forEach(s),VT.forEach(s),b9=h(cE),uc=a(cE,"SPAN",{});var JT=i(uc);g9=l(JT,"Capturing logger stream"),JT.forEach(s),cE.forEach(s),iy=h(e),ho=a(e,"P",{});var mE=i(ho);k9=l(mE,"If you need to validate the output of a logger, you can use "),dc=a(mE,"CODE",{});var ZT=i(dc);j9=l(ZT,"CaptureLogger"),ZT.forEach(s),C9=l(mE,":"),mE.forEach(s),ny=h(e),c(Aa.$$.fragment,e),py=h(e),At=a(e,"H3",{class:!0});var _E=i(At);uo=a(_E,"A",{id:!0,class:!0,href:!0});var KT=i(uo);cc=a(KT,"SPAN",{});var QT=i(cc);c(Ta.$$.fragment,QT),QT.forEach(s),KT.forEach(s),P9=h(_E),mc=a(_E,"SPAN",{});var eq=i(mc);x9=l(eq,"Testing with environment variables"),eq.forEach(s),_E.forEach(s),fy=h(e),qa=a(e,"P",{});var OC=i(qa);O9=l(OC,`If you want to test the impact of environment variables for a specific test you can use a helper decorator
`),_c=a(OC,"CODE",{});var tq=i(_c);I9=l(tq,"transformers.testing_utils.mockenv"),tq.forEach(s),OC.forEach(s),hy=h(e),c(Sa.$$.fragment,e),uy=h(e),ne=a(e,"P",{});var To=i(ne);D9=l(To,"At times an external program needs to be called, which requires setting "),vc=a(To,"CODE",{});var sq=i(vc);A9=l(sq,"PYTHONPATH"),sq.forEach(s),T9=l(To," in "),wc=a(To,"CODE",{});var oq=i(wc);q9=l(oq,"os.environ"),oq.forEach(s),S9=l(To,` to include
multiple local paths. A helper class `),yc=a(To,"CODE",{});var lq=i(yc);L9=l(lq,"transformers.test_utils.TestCasePlus"),lq.forEach(s),U9=l(To," comes to help:"),To.forEach(s),dy=h(e),c(La.$$.fragment,e),cy=h(e),N=a(e,"P",{});var ce=i(N);N9=l(ce,"Depending on whether the test file was under the "),$c=a(ce,"CODE",{});var rq=i($c);H9=l(rq,"tests"),rq.forEach(s),z9=l(ce," test suite or "),Ec=a(ce,"CODE",{});var aq=i(Ec);R9=l(aq,"examples"),aq.forEach(s),G9=l(ce,` it\u2019ll correctly set up
`),bc=a(ce,"CODE",{});var iq=i(bc);F9=l(iq,"env[PYTHONPATH]"),iq.forEach(s),W9=l(ce," to include one of these two directories, and also the "),gc=a(ce,"CODE",{});var nq=i(gc);M9=l(nq,"src"),nq.forEach(s),B9=l(ce,` directory to ensure the testing is
done against the current repo, and finally with whatever `),kc=a(ce,"CODE",{});var pq=i(kc);Y9=l(pq,"env[PYTHONPATH]"),pq.forEach(s),V9=l(ce,` was already set to before the test was
called if anything.`),ce.forEach(s),my=h(e),co=a(e,"P",{});var vE=i(co);X9=l(vE,"This helper method creates a copy of the "),jc=a(vE,"CODE",{});var fq=i(jc);J9=l(fq,"os.environ"),fq.forEach(s),Z9=l(vE," object, so the original remains intact."),vE.forEach(s),_y=h(e),Tt=a(e,"H3",{class:!0});var wE=i(Tt);mo=a(wE,"A",{id:!0,class:!0,href:!0});var hq=i(mo);Cc=a(hq,"SPAN",{});var uq=i(Cc);c(Ua.$$.fragment,uq),uq.forEach(s),hq.forEach(s),K9=h(wE),Pc=a(wE,"SPAN",{});var dq=i(Pc);Q9=l(dq,"Getting reproducible results"),dq.forEach(s),wE.forEach(s),vy=h(e),On=a(e,"P",{});var cq=i(On);ej=l(cq,`In some situations you may want to remove randomness for your tests. To get identical reproducable results set, you
will need to fix the seed:`),cq.forEach(s),wy=h(e),c(Na.$$.fragment,e),yy=h(e),qt=a(e,"H3",{class:!0});var yE=i(qt);_o=a(yE,"A",{id:!0,class:!0,href:!0});var mq=i(_o);xc=a(mq,"SPAN",{});var _q=i(xc);c(Ha.$$.fragment,_q),_q.forEach(s),mq.forEach(s),tj=h(yE),Oc=a(yE,"SPAN",{});var vq=i(Oc);sj=l(vq,"Debugging tests"),vq.forEach(s),yE.forEach(s),$y=h(e),In=a(e,"P",{});var wq=i(In);oj=l(wq,"To start a debugger at the point of the warning, do this:"),wq.forEach(s),Ey=h(e),c(za.$$.fragment,e),by=h(e),St=a(e,"H2",{class:!0});var $E=i(St);vo=a($E,"A",{id:!0,class:!0,href:!0});var yq=i(vo);Ic=a(yq,"SPAN",{});var $q=i(Ic);c(Ra.$$.fragment,$q),$q.forEach(s),yq.forEach(s),lj=h($E),Dc=a($E,"SPAN",{});var Eq=i(Dc);rj=l(Eq,"Working with github actions workflows"),Eq.forEach(s),$E.forEach(s),gy=h(e),Dn=a(e,"P",{});var bq=i(Dn);aj=l(bq,"To trigger a self-push workflow CI job, you must:"),bq.forEach(s),ky=h(e),pe=a(e,"OL",{});var qo=i(pe);Ga=a(qo,"LI",{});var EE=i(Ga);ij=l(EE,"Create a new branch on "),Ac=a(EE,"CODE",{});var gq=i(Ac);nj=l(gq,"transformers"),gq.forEach(s),pj=l(EE," origin (not a fork!)."),EE.forEach(s),fj=h(qo),H=a(qo,"LI",{});var K=i(H);hj=l(K,"The branch name has to start with either "),Tc=a(K,"CODE",{});var kq=i(Tc);uj=l(kq,"ci_"),kq.forEach(s),dj=l(K," or "),qc=a(K,"CODE",{});var jq=i(qc);cj=l(jq,"ci-"),jq.forEach(s),mj=l(K," ("),Sc=a(K,"CODE",{});var Cq=i(Sc);_j=l(Cq,"main"),Cq.forEach(s),vj=l(K,` triggers it too, but we can\u2019t do PRs on
`),Lc=a(K,"CODE",{});var Pq=i(Lc);wj=l(Pq,"main"),Pq.forEach(s),yj=l(K,`). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written `),Fa=a(K,"A",{href:!0,rel:!0});var xq=i(Fa);$j=l(xq,"here"),xq.forEach(s),Ej=l(K," under "),Uc=a(K,"EM",{});var Oq=i(Uc);bj=l(Oq,"push:"),Oq.forEach(s),K.forEach(s),gj=h(qo),Nc=a(qo,"LI",{});var Iq=i(Nc);kj=l(Iq,"Create a PR from this branch."),Iq.forEach(s),jj=h(qo),Wa=a(qo,"LI",{});var bE=i(Wa);Cj=l(bE,"Then you can see the job appear "),Ma=a(bE,"A",{href:!0,rel:!0});var Dq=i(Ma);Pj=l(Dq,"here"),Dq.forEach(s),xj=l(bE,`. It may not run right away if there
is a backlog.`),bE.forEach(s),qo.forEach(s),jy=h(e),Lt=a(e,"H2",{class:!0});var gE=i(Lt);wo=a(gE,"A",{id:!0,class:!0,href:!0});var Aq=i(wo);Hc=a(Aq,"SPAN",{});var Tq=i(Hc);c(Ba.$$.fragment,Tq),Tq.forEach(s),Aq.forEach(s),Oj=h(gE),zc=a(gE,"SPAN",{});var qq=i(zc);Ij=l(qq,"Testing Experimental CI Features"),qq.forEach(s),gE.forEach(s),Cy=h(e),An=a(e,"P",{});var Sq=i(An);Dj=l(Sq,`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`),Sq.forEach(s),Py=h(e),fe=a(e,"OL",{});var So=i(fe);Rc=a(So,"LI",{});var Lq=i(Rc);Aj=l(Lq,"Create a new dedicated job that tests what needs to be tested"),Lq.forEach(s),Tj=h(So),Gc=a(So,"LI",{});var Uq=i(Gc);qj=l(Uq,"The new job must always succeed so that it gives us a green \u2713 (details below)."),Uq.forEach(s),Sj=h(So),Fc=a(So,"LI",{});var Nq=i(Fc);Lj=l(Nq,`Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental job\u2019s logs (not the overall job green as it\u2019s purposefully always
green)`),Nq.forEach(s),Uj=h(So),Wc=a(So,"LI",{});var Hq=i(Wc);Nj=l(Hq,"When it\u2019s clear that everything is solid, then merge the new changes into existing jobs."),Hq.forEach(s),So.forEach(s),xy=h(e),Tn=a(e,"P",{});var zq=i(Tn);Hj=l(zq,"That way experiments on CI functionality itself won\u2019t interfere with the normal workflow."),zq.forEach(s),Oy=h(e),qn=a(e,"P",{});var Rq=i(qn);zj=l(Rq,"Now how can we make the job always succeed while the new CI feature is being developed?"),Rq.forEach(s),Iy=h(e),Sn=a(e,"P",{});var Gq=i(Sn);Rj=l(Gq,`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing don\u2019t support that.`),Gq.forEach(s),Dy=h(e),Ln=a(e,"P",{});var Fq=i(Ln);Gj=l(Fq,"So the following workaround can be used:"),Fq.forEach(s),Ay=h(e),yo=a(e,"OL",{});var kE=i(yo);Un=a(kE,"LI",{});var IC=i(Un);Mc=a(IC,"CODE",{});var Wq=i(Mc);Fj=l(Wq,"set +euo pipefail"),Wq.forEach(s),Wj=l(IC," at the beginning of the run command to suppress most potential failures in the bash script."),IC.forEach(s),Mj=h(kE),Ut=a(kE,"LI",{});var pp=i(Ut);Bj=l(pp,"the last command must be a success: "),Bc=a(pp,"CODE",{});var Mq=i(Bc);Yj=l(Mq,'echo "done"'),Mq.forEach(s),Vj=l(pp," or just "),Yc=a(pp,"CODE",{});var Bq=i(Yc);Xj=l(Bq,"true"),Bq.forEach(s),Jj=l(pp," will do"),pp.forEach(s),kE.forEach(s),Ty=h(e),Nn=a(e,"P",{});var Yq=i(Nn);Zj=l(Yq,"Here is an example:"),Yq.forEach(s),qy=h(e),c(Ya.$$.fragment,e),Sy=h(e),Hn=a(e,"P",{});var Vq=i(Hn);Kj=l(Vq,"For simple commands you could also do:"),Vq.forEach(s),Ly=h(e),c(Va.$$.fragment,e),Uy=h(e),$o=a(e,"P",{});var jE=i($o);Qj=l(jE,`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing `),Vc=a(jE,"CODE",{});var Xq=i(Vc);eC=l(Xq,"set +euo pipefail"),Xq.forEach(s),tC=l(jE,` or any other things you may have added to ensure that the experimental job doesn\u2019t
interfere with the normal CI functioning.`),jE.forEach(s),Ny=h(e),Eo=a(e,"P",{});var CE=i(Eo);sC=l(CE,"This whole process would have been much easier if we only could set something like "),Xc=a(CE,"CODE",{});var Jq=i(Xc);oC=l(Jq,"allow-failure"),Jq.forEach(s),lC=l(CE,` for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions don\u2019t support it at the moment.`),CE.forEach(s),Hy=h(e),zn=a(e,"P",{});var Zq=i(zn);rC=l(Zq,"You can vote for this feature and see where it is at at these CI-specific threads:"),Zq.forEach(s),zy=h(e),bo=a(e,"UL",{});var PE=i(bo);Jc=a(PE,"LI",{});var Kq=i(Jc);Xa=a(Kq,"A",{href:!0,rel:!0});var Qq=i(Xa);aC=l(Qq,"Github Actions:"),Qq.forEach(s),Kq.forEach(s),iC=h(PE),Zc=a(PE,"LI",{});var eS=i(Zc);Ja=a(eS,"A",{href:!0,rel:!0});var tS=i(Ja);nC=l(tS,"CircleCI:"),tS.forEach(s),eS.forEach(s),PE.forEach(s),this.h()},h(){u($,"name","hf:doc:metadata"),u($,"content",JSON.stringify(uS)),u(j,"id","testing"),u(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(j,"href","#testing"),u(b,"class","relative group"),u(zt,"id","how-transformers-are-tested"),u(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(zt,"href","#how-transformers-are-tested"),u(Ve,"class","relative group"),u(Ho,"href","https://github.com/huggingface/transformers/tree/main/.circleci/config.yml"),u(Ho,"rel","nofollow"),u(Fo,"href","https://github.com/huggingface/transformers/actions"),u(Fo,"rel","nofollow"),u(Wo,"href","https://github.com/huggingface/transformers/tree/main/.github/workflows/github-torch-hub.yml"),u(Wo,"rel","nofollow"),u(Mo,"href","https://github.com/huggingface/transformers/tree/main/.github/workflows/self-push.yml"),u(Mo,"rel","nofollow"),u(Bo,"href","https://github.com/huggingface/transformers/tree/main/.github/workflows/self-scheduled.yml"),u(Bo,"rel","nofollow"),u(Vo,"href","https://github.com/huggingface/transformers/actions"),u(Vo,"rel","nofollow"),u(Ft,"id","running-tests"),u(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ft,"href","#running-tests"),u(Je,"class","relative group"),u(Wt,"id","choosing-which-tests-to-run"),u(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Wt,"href","#choosing-which-tests-to-run"),u(Ze,"class","relative group"),u(Zo,"href","https://docs.pytest.org/en/latest/usage.html"),u(Zo,"rel","nofollow"),u(Bt,"id","getting-the-list-of-all-tests"),u(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Bt,"href","#getting-the-list-of-all-tests"),u(Ke,"class","relative group"),u(Yt,"id","run-a-specific-test-module"),u(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Yt,"href","#run-a-specific-test-module"),u(Qe,"class","relative group"),u(Vt,"id","run-specific-tests"),u(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Vt,"href","#run-specific-tests"),u(et,"class","relative group"),u(es,"id","run-only-modified-tests"),u(es,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(es,"href","#run-only-modified-tests"),u(tt,"class","relative group"),u(_l,"href","https://github.com/anapaulagomes/pytest-picked"),u(_l,"rel","nofollow"),u(ss,"id","automatically-rerun-failed-tests-on-source-modification"),u(ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ss,"href","#automatically-rerun-failed-tests-on-source-modification"),u(st,"class","relative group"),u(El,"href","https://github.com/pytest-dev/pytest-xdist"),u(El,"rel","nofollow"),u(Cl,"href","https://github.com/joeyespo/pytest-watch"),u(Cl,"rel","nofollow"),u(os,"id","skip-a-test-module"),u(os,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(os,"href","#skip-a-test-module"),u(lt,"class","relative group"),u(rs,"id","clearing-state"),u(rs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(rs,"href","#clearing-state"),u(rt,"class","relative group"),u(as,"id","running-tests-in-parallel"),u(as,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(as,"href","#running-tests-in-parallel"),u(at,"class","relative group"),u(Al,"href","https://github.com/ESSS/pytest-replay"),u(Al,"rel","nofollow"),u(is,"id","test-order-and-repetition"),u(is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(is,"href","#test-order-and-repetition"),u(it,"class","relative group"),u(ns,"id","repeat-tests"),u(ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ns,"href","#repeat-tests"),u(nt,"class","relative group"),u(Sl,"href","https://github.com/dropbox/pytest-flakefinder"),u(Sl,"rel","nofollow"),u(hs,"id","run-tests-in-a-random-order"),u(hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(hs,"href","#run-tests-in-a-random-order"),u(pt,"class","relative group"),u(Wl,"href","https://github.com/jbasko/pytest-random-order"),u(Wl,"rel","nofollow"),u(Ml,"href","https://github.com/pytest-dev/pytest-randomly"),u(Ml,"rel","nofollow"),u(ms,"id","look-and-feel-variations"),u(ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ms,"href","#look-and-feel-variations"),u(ft,"class","relative group"),u(_s,"id","pytestsugar"),u(_s,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_s,"href","#pytestsugar"),u(ht,"class","relative group"),u(Xl,"href","https://github.com/Frozenball/pytest-sugar"),u(Xl,"rel","nofollow"),u(vs,"id","report-each-subtest-name-and-its-progress"),u(vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(vs,"href","#report-each-subtest-name-and-its-progress"),u(ut,"class","relative group"),u(ws,"id","instantly-shows-failed-tests"),u(ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ws,"href","#instantly-shows-failed-tests"),u(dt,"class","relative group"),u(sr,"href","https://github.com/pytest-dev/pytest-instafail"),u(sr,"rel","nofollow"),u(ys,"id","to-gpu-or-not-to-gpu"),u(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ys,"href","#to-gpu-or-not-to-gpu"),u(ct,"class","relative group"),u(Ps,"id","distributed-training"),u(Ps,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ps,"href","#distributed-training"),u(mt,"class","relative group"),u(cr,"href","https://github.com/huggingface/transformers/tree/main/tests/test_trainer_distributed.py"),u(cr,"rel","nofollow"),u(mr,"href","https://github.com/huggingface/transformers/tree/main/tests/deepspeed/test_deepspeed.py"),u(mr,"rel","nofollow"),u(Is,"id","output-capture"),u(Is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Is,"href","#output-capture"),u(vt,"class","relative group"),u(Ds,"id","color-control"),u(Ds,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ds,"href","#color-control"),u(wt,"class","relative group"),u(As,"id","sending-test-report-to-online-pastebin-service"),u(As,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(As,"href","#sending-test-report-to-online-pastebin-service"),u(yt,"class","relative group"),u(Ts,"id","writing-tests"),u(Ts,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ts,"href","#writing-tests"),u($t,"class","relative group"),u(Cr,"href","https://docs.pytest.org/en/stable/unittest.html"),u(Cr,"rel","nofollow"),u(qs,"id","parametrization"),u(qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(qs,"href","#parametrization"),u(Et,"class","relative group"),u(qr,"href","https://pypi.org/project/parameterized/"),u(qr,"rel","nofollow"),u(Ns,"id","files-and-directories"),u(Ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ns,"href","#files-and-directories"),u(bt,"class","relative group"),u(Ws,"id","temporary-files-and-directories"),u(Ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ws,"href","#temporary-files-and-directories"),u(gt,"class","relative group"),u(Xs,"id","temporary-syspath-override"),u(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Xs,"href","#temporary-syspath-override"),u(jt,"class","relative group"),u(Js,"id","skipping-tests"),u(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Js,"href","#skipping-tests"),u(Ct,"class","relative group"),u(Qs,"id","implementation"),u(Qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Qs,"href","#implementation"),u(Pt,"class","relative group"),u(ca,"href","https://docs.pytest.org/en/latest/skipping.html"),u(ca,"rel","nofollow"),u(oo,"id","slow-tests"),u(oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oo,"href","#slow-tests"),u(xt,"class","relative group"),u($a,"href","https://github.com/huggingface/transformers/tree/main/scripts/fsmt/fsmt-make-tiny-model.py"),u($a,"rel","nofollow"),u(Ea,"href","https://huggingface.co/stas/tiny-wmt19-en-de"),u(Ea,"rel","nofollow"),u(ro,"id","testing-the-stdoutstderr-output"),u(ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ro,"href","#testing-the-stdoutstderr-output"),u(It,"class","relative group"),u(ga,"href","https://docs.pytest.org/en/latest/capture.html"),u(ga,"rel","nofollow"),u(fo,"id","capturing-logger-stream"),u(fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(fo,"href","#capturing-logger-stream"),u(Dt,"class","relative group"),u(uo,"id","testing-with-environment-variables"),u(uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(uo,"href","#testing-with-environment-variables"),u(At,"class","relative group"),u(mo,"id","getting-reproducible-results"),u(mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(mo,"href","#getting-reproducible-results"),u(Tt,"class","relative group"),u(_o,"id","debugging-tests"),u(_o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_o,"href","#debugging-tests"),u(qt,"class","relative group"),u(vo,"id","working-with-github-actions-workflows"),u(vo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(vo,"href","#working-with-github-actions-workflows"),u(St,"class","relative group"),u(Fa,"href","https://github.com/huggingface/transformers/blob/main/.github/workflows/self-push.yml"),u(Fa,"rel","nofollow"),u(Ma,"href","https://github.com/huggingface/transformers/actions/workflows/self-push.yml"),u(Ma,"rel","nofollow"),u(wo,"id","testing-experimental-ci-features"),u(wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(wo,"href","#testing-experimental-ci-features"),u(Lt,"class","relative group"),u(Xa,"href","https://github.com/actions/toolkit/issues/399"),u(Xa,"rel","nofollow"),u(Ja,"href","https://ideas.circleci.com/ideas/CCI-I-344"),u(Ja,"rel","nofollow")},m(e,n){t(document.head,$),p(e,O,n),p(e,b,n),t(b,j),t(j,A),m(C,A,null),t(b,z),t(b,T),t(T,x),p(e,g,n),p(e,S,n),t(S,R),p(e,Nt,n),p(e,ye,n),t(ye,Be),p(e,q,n),p(e,me,n),t(me,Ye),t(Ye,Ht),t(Ht,ti),t(Ye,OE),t(me,IE),t(me,si),t(si,fp),t(fp,DE),t(si,AE),p(e,fm,n),p(e,Ve,n),t(Ve,zt),t(zt,hp),m(Lo,hp,null),t(Ve,TE),t(Ve,up),t(up,qE),p(e,hm,n),p(e,Rt,n),t(Rt,Uo),t(Uo,No),t(No,SE),t(No,Ho),t(Ho,LE),t(No,UE),t(Uo,NE),t(Uo,zo),t(zo,HE),t(zo,dp),t(dp,zE),t(zo,RE),t(Rt,GE),t(Rt,Ro),t(Ro,Go),t(Go,FE),t(Go,Fo),t(Fo,WE),t(Go,ME),t(Ro,BE),t(Ro,Xe),t(Xe,cp),t(cp,oi),t(oi,Wo),t(Wo,YE),t(oi,VE),t(Xe,XE),t(Xe,mp),t(mp,L),t(L,Mo),t(Mo,JE),t(L,ZE),t(L,_p),t(_p,KE),t(L,QE),t(L,vp),t(vp,eb),t(L,tb),t(L,wp),t(wp,sb),t(L,ob),t(L,yp),t(yp,lb),t(L,rb),t(L,$p),t($p,ab),t(L,ib),t(Xe,nb),t(Xe,Ep),t(Ep,$e),t($e,Bo),t(Bo,pb),t($e,fb),t($e,bp),t(bp,hb),t($e,ub),t($e,gp),t(gp,db),t($e,cb),p(e,um,n),m(Yo,e,n),p(e,dm,n),p(e,Gt,n),t(Gt,mb),t(Gt,Vo),t(Vo,_b),t(Gt,vb),p(e,cm,n),p(e,Je,n),t(Je,Ft),t(Ft,kp),m(Xo,kp,null),t(Je,wb),t(Je,jp),t(jp,yb),p(e,mm,n),p(e,Ze,n),t(Ze,Wt),t(Wt,Cp),m(Jo,Cp,null),t(Ze,$b),t(Ze,Pp),t(Pp,Eb),p(e,_m,n),p(e,Mt,n),t(Mt,bb),t(Mt,Zo),t(Zo,gb),t(Mt,kb),p(e,vm,n),p(e,li,n),t(li,jb),p(e,wm,n),p(e,ri,n),t(ri,Cb),p(e,ym,n),m(Ko,e,n),p(e,$m,n),p(e,ai,n),t(ai,Pb),p(e,Em,n),m(Qo,e,n),p(e,bm,n),p(e,ii,n),t(ii,xb),p(e,gm,n),m(el,e,n),p(e,km,n),p(e,ni,n),t(ni,Ob),p(e,jm,n),p(e,Q,n),t(Q,xp),t(xp,Ib),t(Q,Db),t(Q,Op),t(Op,Ab),t(Q,Tb),t(Q,Ip),t(Ip,qb),t(Q,Sb),t(Q,Dp),t(Dp,Lb),p(e,Cm,n),p(e,Ke,n),t(Ke,Bt),t(Bt,Ap),m(tl,Ap,null),t(Ke,Ub),t(Ke,Tp),t(Tp,Nb),p(e,Pm,n),p(e,pi,n),t(pi,Hb),p(e,xm,n),m(sl,e,n),p(e,Om,n),p(e,fi,n),t(fi,zb),p(e,Im,n),m(ol,e,n),p(e,Dm,n),p(e,Qe,n),t(Qe,Yt),t(Yt,qp),m(ll,qp,null),t(Qe,Rb),t(Qe,Sp),t(Sp,Gb),p(e,Am,n),p(e,hi,n),t(hi,Fb),p(e,Tm,n),m(rl,e,n),p(e,qm,n),p(e,et,n),t(et,Vt),t(Vt,Lp),m(al,Lp,null),t(et,Wb),t(et,Up),t(Up,Mb),p(e,Sm,n),p(e,ui,n),t(ui,Bb),p(e,Lm,n),m(il,e,n),p(e,Um,n),p(e,di,n),t(di,Yb),p(e,Nm,n),p(e,Ee,n),t(Ee,ci),t(ci,Np),t(Np,Vb),t(ci,Xb),t(Ee,Jb),t(Ee,mi),t(mi,Hp),t(Hp,Zb),t(mi,Kb),t(Ee,Qb),t(Ee,_i),t(_i,zp),t(zp,e3),t(_i,t3),p(e,Hm,n),p(e,vi,n),t(vi,s3),p(e,zm,n),m(nl,e,n),p(e,Rm,n),p(e,wi,n),t(wi,o3),p(e,Gm,n),p(e,Xt,n),t(Xt,l3),t(Xt,Rp),t(Rp,r3),t(Xt,a3),p(e,Fm,n),m(pl,e,n),p(e,Wm,n),p(e,yi,n),t(yi,i3),p(e,Mm,n),p(e,Jt,n),t(Jt,n3),t(Jt,Gp),t(Gp,p3),t(Jt,f3),p(e,Bm,n),m(fl,e,n),p(e,Ym,n),p(e,ee,n),t(ee,h3),t(ee,Fp),t(Fp,u3),t(ee,d3),t(ee,Wp),t(Wp,c3),t(ee,m3),t(ee,Mp),t(Mp,_3),t(ee,v3),p(e,Vm,n),p(e,Zt,n),t(Zt,w3),t(Zt,Bp),t(Bp,y3),t(Zt,$3),p(e,Xm,n),m(hl,e,n),p(e,Jm,n),p(e,$i,n),t($i,E3),p(e,Zm,n),m(ul,e,n),p(e,Km,n),p(e,be,n),t(be,b3),t(be,Yp),t(Yp,g3),t(be,k3),t(be,Vp),t(Vp,j3),t(be,C3),p(e,Qm,n),m(dl,e,n),p(e,e_,n),p(e,Kt,n),t(Kt,P3),t(Kt,Xp),t(Xp,x3),t(Kt,O3),p(e,t_,n),p(e,Qt,n),t(Qt,I3),t(Qt,Jp),t(Jp,D3),t(Qt,A3),p(e,s_,n),m(cl,e,n),p(e,o_,n),p(e,tt,n),t(tt,es),t(es,Zp),m(ml,Zp,null),t(tt,T3),t(tt,Kp),t(Kp,q3),p(e,l_,n),p(e,ts,n),t(ts,S3),t(ts,_l),t(_l,L3),t(ts,U3),p(e,r_,n),m(vl,e,n),p(e,a_,n),m(wl,e,n),p(e,i_,n),p(e,Ei,n),t(Ei,N3),p(e,n_,n),p(e,st,n),t(st,ss),t(ss,Qp),m(yl,Qp,null),t(st,H3),t(st,ef),t(ef,z3),p(e,p_,n),p(e,$l,n),t($l,El),t(El,R3),t($l,G3),p(e,f_,n),m(bl,e,n),p(e,h_,n),p(e,ot,n),t(ot,F3),t(ot,tf),t(tf,W3),t(ot,M3),t(ot,sf),t(sf,B3),p(e,u_,n),p(e,ge,n),t(ge,Y3),t(ge,of),t(of,V3),t(ge,X3),t(ge,lf),t(lf,J3),t(ge,Z3),p(e,d_,n),m(gl,e,n),p(e,c_,n),p(e,ke,n),t(ke,K3),t(ke,rf),t(rf,Q3),t(ke,eg),t(ke,af),t(af,tg),t(ke,sg),p(e,m_,n),m(kl,e,n),p(e,__,n),p(e,bi,n),t(bi,og),p(e,v_,n),p(e,jl,n),t(jl,Cl),t(Cl,lg),t(jl,rg),p(e,w_,n),p(e,lt,n),t(lt,os),t(os,nf),m(Pl,nf,null),t(lt,ag),t(lt,pf),t(pf,ig),p(e,y_,n),p(e,ls,n),t(ls,ng),t(ls,ff),t(ff,pg),t(ls,fg),p(e,$_,n),m(xl,e,n),p(e,E_,n),p(e,rt,n),t(rt,rs),t(rs,hf),m(Ol,hf,null),t(rt,hg),t(rt,uf),t(uf,ug),p(e,b_,n),p(e,gi,n),t(gi,dg),p(e,g_,n),m(Il,e,n),p(e,k_,n),p(e,at,n),t(at,as),t(as,df),m(Dl,df,null),t(at,cg),t(at,cf),t(cf,mg),p(e,j_,n),p(e,W,n),t(W,_g),t(W,mf),t(mf,vg),t(W,wg),t(W,_f),t(_f,yg),t(W,$g),t(W,vf),t(vf,Eg),t(W,bg),t(W,wf),t(wf,gg),t(W,kg),p(e,C_,n),p(e,_e,n),t(_e,yf),t(yf,jg),t(_e,Cg),t(_e,$f),t($f,Pg),t(_e,xg),t(_e,Ef),t(Ef,Og),t(_e,Ig),p(e,P_,n),p(e,je,n),t(je,Dg),t(je,bf),t(bf,Ag),t(je,Tg),t(je,Al),t(Al,qg),t(je,Sg),p(e,x_,n),p(e,it,n),t(it,is),t(is,gf),m(Tl,gf,null),t(it,Lg),t(it,kf),t(kf,Ug),p(e,O_,n),p(e,ki,n),t(ki,Ng),p(e,I_,n),p(e,nt,n),t(nt,ns),t(ns,jf),m(ql,jf,null),t(nt,Hg),t(nt,Cf),t(Cf,zg),p(e,D_,n),p(e,ji,n),t(ji,Ci),t(Ci,Sl),t(Sl,Rg),t(Ci,Gg),p(e,A_,n),m(Ll,e,n),p(e,T_,n),p(e,Pi,n),t(Pi,Fg),p(e,q_,n),m(Ul,e,n),p(e,S_,n),m(ps,e,n),p(e,L_,n),m(fs,e,n),p(e,U_,n),p(e,pt,n),t(pt,hs),t(hs,Pf),m(Nl,Pf,null),t(pt,Wg),t(pt,xf),t(xf,Mg),p(e,N_,n),m(Hl,e,n),p(e,H_,n),p(e,us,n),t(us,Bg),t(us,Of),t(Of,Yg),t(us,Vg),p(e,z_,n),p(e,ds,n),t(ds,Xg),t(ds,If),t(If,Jg),t(ds,Zg),p(e,R_,n),m(zl,e,n),p(e,G_,n),p(e,xi,n),t(xi,Kg),p(e,F_,n),m(Rl,e,n),p(e,W_,n),p(e,cs,n),t(cs,Qg),t(cs,Df),t(Df,e2),t(cs,t2),p(e,M_,n),m(Gl,e,n),p(e,B_,n),p(e,Oi,n),t(Oi,s2),p(e,Y_,n),m(Fl,e,n),p(e,V_,n),p(e,I,n),t(I,o2),t(I,Af),t(Af,l2),t(I,r2),t(I,Tf),t(Tf,a2),t(I,i2),t(I,qf),t(qf,n2),t(I,p2),t(I,Sf),t(Sf,f2),t(I,h2),t(I,Lf),t(Lf,u2),t(I,d2),t(I,Wl),t(Wl,c2),t(I,m2),p(e,X_,n),p(e,Ce,n),t(Ce,_2),t(Ce,Ml),t(Ml,Uf),t(Uf,v2),t(Ce,w2),t(Ce,Nf),t(Nf,y2),t(Ce,$2),p(e,J_,n),p(e,ft,n),t(ft,ms),t(ms,Hf),m(Bl,Hf,null),t(ft,E2),t(ft,zf),t(zf,b2),p(e,Z_,n),p(e,ht,n),t(ht,_s),t(_s,Rf),m(Yl,Rf,null),t(ht,g2),t(ht,Gf),t(Gf,k2),p(e,K_,n),p(e,Vl,n),t(Vl,Xl),t(Xl,j2),t(Vl,C2),p(e,Q_,n),m(Jl,e,n),p(e,ev,n),p(e,Ii,n),t(Ii,P2),p(e,tv,n),m(Zl,e,n),p(e,sv,n),p(e,Di,n),t(Di,x2),p(e,ov,n),p(e,ut,n),t(ut,vs),t(vs,Ff),m(Kl,Ff,null),t(ut,O2),t(ut,Wf),t(Wf,I2),p(e,lv,n),p(e,Pe,n),t(Pe,D2),t(Pe,Mf),t(Mf,A2),t(Pe,T2),t(Pe,Bf),t(Bf,q2),t(Pe,S2),p(e,rv,n),m(Ql,e,n),p(e,av,n),p(e,dt,n),t(dt,ws),t(ws,Yf),m(er,Yf,null),t(dt,L2),t(dt,Vf),t(Vf,U2),p(e,iv,n),p(e,tr,n),t(tr,sr),t(sr,N2),t(tr,H2),p(e,nv,n),m(or,e,n),p(e,pv,n),m(lr,e,n),p(e,fv,n),p(e,ct,n),t(ct,ys),t(ys,Xf),m(rr,Xf,null),t(ct,z2),t(ct,Jf),t(Jf,R2),p(e,hv,n),p(e,$s,n),t($s,G2),t($s,Zf),t(Zf,F2),t($s,W2),p(e,uv,n),m(ar,e,n),p(e,dv,n),p(e,te,n),t(te,M2),t(te,Kf),t(Kf,B2),t(te,Y2),t(te,Qf),t(Qf,V2),t(te,X2),t(te,eh),t(eh,J2),t(te,Z2),p(e,cv,n),m(ir,e,n),p(e,mv,n),p(e,Ai,n),t(Ai,K2),p(e,_v,n),p(e,Ti,n),t(Ti,Q2),p(e,vv,n),p(e,U,n),t(U,qi),t(qi,th),t(th,e5),t(qi,t5),t(U,s5),t(U,Es),t(Es,sh),t(sh,o5),t(Es,l5),t(Es,oh),t(oh,r5),t(Es,a5),t(U,i5),t(U,bs),t(bs,lh),t(lh,n5),t(bs,p5),t(bs,rh),t(rh,f5),t(bs,h5),t(U,u5),t(U,gs),t(gs,ah),t(ah,d5),t(gs,c5),t(gs,ih),t(ih,m5),t(gs,_5),t(U,v5),t(U,ks),t(ks,nh),t(nh,w5),t(ks,y5),t(ks,ph),t(ph,$5),t(ks,E5),t(U,b5),t(U,js),t(js,fh),t(fh,g5),t(js,k5),t(js,hh),t(hh,j5),t(js,C5),p(e,wv,n),p(e,Si,n),t(Si,P5),p(e,yv,n),p(e,k,n),t(k,x5),t(k,uh),t(uh,O5),t(k,I5),t(k,dh),t(dh,D5),t(k,A5),t(k,ch),t(ch,T5),t(k,q5),t(k,mh),t(mh,S5),t(k,L5),t(k,_h),t(_h,U5),t(k,N5),t(k,vh),t(vh,H5),t(k,z5),t(k,wh),t(wh,R5),t(k,G5),t(k,yh),t(yh,F5),t(k,W5),t(k,$h),t($h,M5),t(k,B5),t(k,Eh),t(Eh,Y5),t(k,V5),p(e,$v,n),p(e,Li,n),t(Li,X5),p(e,Ev,n),m(nr,e,n),p(e,bv,n),p(e,xe,n),t(xe,J5),t(xe,bh),t(bh,Z5),t(xe,K5),t(xe,gh),t(gh,Q5),t(xe,ek),p(e,gv,n),m(pr,e,n),p(e,kv,n),p(e,Ui,n),t(Ui,tk),p(e,jv,n),m(fr,e,n),p(e,Cv,n),p(e,Oe,n),t(Oe,sk),t(Oe,kh),t(kh,ok),t(Oe,lk),t(Oe,jh),t(jh,rk),t(Oe,ak),p(e,Pv,n),m(hr,e,n),p(e,xv,n),p(e,Cs,n),t(Cs,ik),t(Cs,Ch),t(Ch,nk),t(Cs,pk),p(e,Ov,n),p(e,Ni,n),t(Ni,fk),p(e,Iv,n),p(e,Hi,n),t(Hi,Ph),t(Ph,hk),p(e,Dv,n),m(ur,e,n),p(e,Av,n),p(e,mt,n),t(mt,Ps),t(Ps,xh),m(dr,xh,null),t(mt,uk),t(mt,Oh),t(Oh,dk),p(e,Tv,n),p(e,_t,n),t(_t,Ih),t(Ih,ck),t(_t,mk),t(_t,Dh),t(Dh,_k),t(_t,vk),p(e,qv,n),p(e,zi,n),t(zi,wk),p(e,Sv,n),p(e,xs,n),t(xs,Ah),t(Ah,cr),t(cr,yk),t(xs,$k),t(xs,Th),t(Th,mr),t(mr,Ek),p(e,Lv,n),p(e,Os,n),t(Os,bk),t(Os,qh),t(qh,gk),t(Os,kk),p(e,Uv,n),p(e,Ri,n),t(Ri,jk),p(e,Nv,n),m(_r,e,n),p(e,Hv,n),p(e,vt,n),t(vt,Is),t(Is,Sh),m(vr,Sh,null),t(vt,Ck),t(vt,Lh),t(Lh,Pk),p(e,zv,n),p(e,Ie,n),t(Ie,xk),t(Ie,Uh),t(Uh,Ok),t(Ie,Ik),t(Ie,Nh),t(Nh,Dk),t(Ie,Ak),p(e,Rv,n),p(e,M,n),t(M,Tk),t(M,Hh),t(Hh,qk),t(M,Sk),t(M,zh),t(zh,Lk),t(M,Uk),t(M,Rh),t(Rh,Nk),t(M,Hk),t(M,Gh),t(Gh,zk),t(M,Rk),p(e,Gv,n),m(wr,e,n),p(e,Fv,n),p(e,Gi,n),t(Gi,Gk),p(e,Wv,n),m(yr,e,n),p(e,Mv,n),p(e,wt,n),t(wt,Ds),t(Ds,Fh),m($r,Fh,null),t(wt,Fk),t(wt,Wh),t(Wh,Wk),p(e,Bv,n),p(e,Fi,n),t(Fi,Mk),p(e,Yv,n),m(Er,e,n),p(e,Vv,n),p(e,yt,n),t(yt,As),t(As,Mh),m(br,Mh,null),t(yt,Bk),t(yt,Bh),t(Bh,Yk),p(e,Xv,n),p(e,Wi,n),t(Wi,Vk),p(e,Jv,n),m(gr,e,n),p(e,Zv,n),p(e,Mi,n),t(Mi,Xk),p(e,Kv,n),p(e,Bi,n),t(Bi,Jk),p(e,Qv,n),m(kr,e,n),p(e,e1,n),p(e,$t,n),t($t,Ts),t(Ts,Yh),m(jr,Yh,null),t($t,Zk),t($t,Vh),t(Vh,Kk),p(e,t1,n),p(e,De,n),t(De,Qk),t(De,Xh),t(Xh,e4),t(De,t4),t(De,Jh),t(Jh,s4),t(De,o4),p(e,s1,n),p(e,se,n),t(se,l4),t(se,Cr),t(Cr,r4),t(se,a4),t(se,Zh),t(Zh,i4),t(se,n4),t(se,Kh),t(Kh,p4),t(se,f4),p(e,o1,n),p(e,Et,n),t(Et,qs),t(qs,Qh),m(Pr,Qh,null),t(Et,h4),t(Et,eu),t(eu,u4),p(e,l1,n),p(e,Yi,n),t(Yi,d4),p(e,r1,n),m(xr,e,n),p(e,a1,n),p(e,Ss,n),t(Ss,c4),t(Ss,tu),t(tu,m4),t(Ss,_4),p(e,i1,n),p(e,Ae,n),t(Ae,v4),t(Ae,su),t(su,w4),t(Ae,y4),t(Ae,ou),t(ou,$4),t(Ae,E4),p(e,n1,n),m(Or,e,n),p(e,p1,n),p(e,Ls,n),t(Ls,b4),t(Ls,lu),t(lu,g4),t(Ls,k4),p(e,f1,n),m(Ir,e,n),p(e,h1,n),p(e,Us,n),t(Us,j4),t(Us,ru),t(ru,C4),t(Us,P4),p(e,u1,n),m(Dr,e,n),p(e,d1,n),p(e,Vi,n),t(Vi,x4),p(e,c1,n),m(Ar,e,n),p(e,m1,n),p(e,Xi,n),t(Xi,O4),p(e,_1,n),m(Tr,e,n),p(e,v1,n),p(e,B,n),t(B,I4),t(B,qr),t(qr,D4),t(B,A4),t(B,au),t(au,T4),t(B,q4),t(B,iu),t(iu,S4),t(B,L4),t(B,nu),t(nu,U4),t(B,N4),p(e,w1,n),p(e,oe,n),t(oe,H4),t(oe,pu),t(pu,z4),t(oe,R4),t(oe,fu),t(fu,G4),t(oe,F4),t(oe,hu),t(hu,W4),t(oe,M4),p(e,y1,n),p(e,Te,n),t(Te,B4),t(Te,uu),t(uu,Y4),t(Te,V4),t(Te,du),t(du,X4),t(Te,J4),p(e,$1,n),m(Sr,e,n),p(e,E1,n),p(e,le,n),t(le,Z4),t(le,cu),t(cu,K4),t(le,Q4),t(le,mu),t(mu,e0),t(le,t0),t(le,_u),t(_u,s0),t(le,o0),p(e,b1,n),m(Lr,e,n),p(e,g1,n),p(e,Ji,n),t(Ji,l0),p(e,k1,n),m(Ur,e,n),p(e,j1,n),p(e,Zi,n),t(Zi,r0),p(e,C1,n),m(Nr,e,n),p(e,P1,n),p(e,Ki,n),t(Ki,a0),p(e,x1,n),p(e,bt,n),t(bt,Ns),t(Ns,vu),m(Hr,vu,null),t(bt,i0),t(bt,wu),t(wu,n0),p(e,O1,n),p(e,Hs,n),t(Hs,p0),t(Hs,yu),t(yu,f0),t(Hs,h0),p(e,I1,n),p(e,zs,n),t(zs,zr),t(zr,Qi),t(Qi,$u),t($u,u0),t(Qi,d0),t(zr,c0),t(zr,G),t(G,Rr),t(Rr,Eu),t(Eu,m0),t(Rr,_0),t(Rr,bu),t(bu,v0),t(G,w0),t(G,en),t(en,gu),t(gu,y0),t(en,$0),t(G,E0),t(G,Rs),t(Rs,ku),t(ku,b0),t(Rs,g0),t(Rs,ju),t(ju,k0),t(Rs,j0),t(G,C0),t(G,Gs),t(Gs,Cu),t(Cu,P0),t(Gs,x0),t(Gs,Pu),t(Pu,O0),t(Gs,I0),t(G,D0),t(G,tn),t(tn,xu),t(xu,A0),t(tn,T0),t(G,q0),t(G,qe),t(qe,Ou),t(Ou,S0),t(qe,L0),t(qe,Iu),t(Iu,U0),t(qe,N0),t(qe,Du),t(Du,H0),t(qe,z0),t(zs,R0),t(zs,Gr),t(Gr,Fr),t(Fr,G0),t(Fr,Au),t(Au,F0),t(Fr,W0),t(Gr,M0),t(Gr,F),t(F,Tu),t(Tu,qu),t(qu,B0),t(F,Y0),t(F,Su),t(Su,Lu),t(Lu,V0),t(F,X0),t(F,Uu),t(Uu,Nu),t(Nu,J0),t(F,Z0),t(F,Hu),t(Hu,zu),t(zu,K0),t(F,Q0),t(F,Ru),t(Ru,Gu),t(Gu,e6),t(F,t6),t(F,Fu),t(Fu,Wu),t(Wu,s6),p(e,D1,n),p(e,Fs,n),t(Fs,o6),t(Fs,Mu),t(Mu,l6),t(Fs,r6),p(e,A1,n),m(Wr,e,n),p(e,T1,n),p(e,Y,n),t(Y,a6),t(Y,Bu),t(Bu,i6),t(Y,n6),t(Y,Yu),t(Yu,p6),t(Y,f6),t(Y,Vu),t(Vu,h6),t(Y,u6),t(Y,Xu),t(Xu,d6),t(Y,c6),p(e,q1,n),m(Mr,e,n),p(e,S1,n),p(e,gt,n),t(gt,Ws),t(Ws,Ju),m(Br,Ju,null),t(gt,m6),t(gt,Zu),t(Zu,_6),p(e,L1,n),p(e,Ms,n),t(Ms,v6),t(Ms,Ku),t(Ku,w6),t(Ms,y6),p(e,U1,n),p(e,sn,n),t(sn,$6),p(e,N1,n),p(e,Se,n),t(Se,E6),t(Se,Qu),t(Qu,b6),t(Se,g6),t(Se,ed),t(ed,k6),t(Se,j6),p(e,H1,n),p(e,on,n),t(on,C6),p(e,z1,n),m(Yr,e,n),p(e,R1,n),p(e,Bs,n),t(Bs,P6),t(Bs,td),t(td,x6),t(Bs,O6),p(e,G1,n),p(e,ln,n),t(ln,sd),t(sd,I6),p(e,F1,n),m(Vr,e,n),p(e,W1,n),p(e,Xr,n),t(Xr,od),t(od,D6),t(Xr,A6),p(e,M1,n),p(e,rn,n),t(rn,ld),t(ld,T6),p(e,B1,n),m(Jr,e,n),p(e,Y1,n),p(e,an,n),t(an,q6),p(e,V1,n),p(e,nn,n),t(nn,Zr),t(Zr,kt),t(kt,S6),t(kt,rd),t(rd,L6),t(kt,U6),t(kt,ad),t(ad,N6),t(kt,H6),t(Zr,z6),t(Zr,ve),t(ve,pn),t(pn,id),t(id,R6),t(pn,G6),t(ve,F6),t(ve,fn),t(fn,nd),t(nd,W6),t(fn,M6),t(ve,B6),t(ve,hn),t(hn,pd),t(pd,Y6),t(hn,V6),t(ve,X6),t(ve,un),t(un,fd),t(fd,J6),t(un,Z6),p(e,X1,n),m(Ys,e,n),p(e,J1,n),m(Vs,e,n),p(e,Z1,n),p(e,jt,n),t(jt,Xs),t(Xs,hd),m(Kr,hd,null),t(jt,K6),t(jt,ud),t(ud,Q6),p(e,K1,n),p(e,Le,n),t(Le,e7),t(Le,dd),t(dd,t7),t(Le,s7),t(Le,cd),t(cd,o7),t(Le,l7),p(e,Q1,n),m(Qr,e,n),p(e,ew,n),p(e,Ct,n),t(Ct,Js),t(Js,md),m(ea,md,null),t(Ct,r7),t(Ct,_d),t(_d,a7),p(e,tw,n),p(e,Zs,n),t(Zs,i7),t(Zs,vd),t(vd,n7),t(Zs,p7),p(e,sw,n),p(e,dn,n),t(dn,f7),p(e,ow,n),p(e,Ks,n),t(Ks,wd),t(wd,ta),t(ta,h7),t(ta,yd),t(yd,u7),t(ta,d7),t(Ks,c7),t(Ks,$d),t($d,sa),t(sa,m7),t(sa,Ed),t(Ed,_7),t(sa,v7),p(e,lw,n),p(e,re,n),t(re,w7),t(re,bd),t(bd,y7),t(re,$7),t(re,gd),t(gd,E7),t(re,b7),t(re,kd),t(kd,g7),t(re,k7),p(e,rw,n),p(e,Pt,n),t(Pt,Qs),t(Qs,jd),m(oa,jd,null),t(Pt,j7),t(Pt,Cd),t(Cd,C7),p(e,aw,n),p(e,cn,n),t(cn,Pd),t(Pd,P7),p(e,iw,n),m(la,e,n),p(e,nw,n),p(e,mn,n),t(mn,x7),p(e,pw,n),m(ra,e,n),p(e,fw,n),p(e,eo,n),t(eo,O7),t(eo,xd),t(xd,I7),t(eo,D7),p(e,hw,n),m(aa,e,n),p(e,uw,n),p(e,_n,n),t(_n,Od),t(Od,A7),p(e,dw,n),m(ia,e,n),p(e,cw,n),p(e,vn,n),t(vn,T7),p(e,mw,n),m(na,e,n),p(e,_w,n),p(e,to,n),t(to,q7),t(to,Id),t(Id,S7),t(to,L7),p(e,vw,n),m(pa,e,n),p(e,ww,n),p(e,wn,n),t(wn,Dd),t(Dd,U7),p(e,yw,n),m(fa,e,n),p(e,$w,n),p(e,yn,n),t(yn,Ad),t(Ad,N7),p(e,Ew,n),m(ha,e,n),p(e,bw,n),p(e,$n,n),t($n,H7),p(e,gw,n),m(ua,e,n),p(e,kw,n),p(e,En,n),t(En,z7),p(e,jw,n),m(da,e,n),p(e,Cw,n),p(e,so,n),t(so,R7),t(so,ca),t(ca,G7),t(so,F7),p(e,Pw,n),p(e,xt,n),t(xt,oo),t(oo,Td),m(ma,Td,null),t(xt,W7),t(xt,qd),t(qd,M7),p(e,xw,n),p(e,bn,n),t(bn,B7),p(e,Ow,n),m(_a,e,n),p(e,Iw,n),p(e,Ue,n),t(Ue,Y7),t(Ue,Sd),t(Sd,V7),t(Ue,X7),t(Ue,Ld),t(Ld,J7),t(Ue,Z7),p(e,Dw,n),m(va,e,n),p(e,Aw,n),p(e,ae,n),t(ae,K7),t(ae,Ud),t(Ud,Q7),t(ae,e8),t(ae,Nd),t(Nd,t8),t(ae,s8),t(ae,Hd),t(Hd,o8),t(ae,l8),p(e,Tw,n),m(wa,e,n),p(e,qw,n),p(e,gn,n),t(gn,r8),p(e,Sw,n),p(e,kn,n),t(kn,a8),p(e,Lw,n),p(e,jn,n),t(jn,i8),p(e,Uw,n),p(e,ie,n),t(ie,zd),t(zd,n8),t(ie,p8),t(ie,Rd),t(Rd,f8),t(ie,h8),t(ie,Ot),t(Ot,u8),t(Ot,Gd),t(Gd,d8),t(Ot,c8),t(Ot,Fd),t(Fd,m8),t(Ot,_8),t(ie,v8),t(ie,Wd),t(Wd,w8),p(e,Nw,n),p(e,Ne,n),t(Ne,y8),t(Ne,Md),t(Md,$8),t(Ne,E8),t(Ne,Bd),t(Bd,b8),t(Ne,g8),p(e,Hw,n),m(ya,e,n),p(e,zw,n),p(e,He,n),t(He,k8),t(He,$a),t($a,j8),t(He,C8),t(He,Ea),t(Ea,P8),t(He,x8),p(e,Rw,n),p(e,lo,n),t(lo,O8),t(lo,Yd),t(Yd,I8),t(lo,D8),p(e,Gw,n),p(e,Cn,n),t(Cn,A8),p(e,Fw,n),p(e,It,n),t(It,ro),t(ro,Vd),m(ba,Vd,null),t(It,T8),t(It,Xd),t(Xd,q8),p(e,Ww,n),p(e,V,n),t(V,S8),t(V,Jd),t(Jd,L8),t(V,U8),t(V,Zd),t(Zd,N8),t(V,H8),t(V,Kd),t(Kd,z8),t(V,R8),t(V,ga),t(ga,G8),t(V,F8),p(e,Mw,n),m(ka,e,n),p(e,Bw,n),p(e,ao,n),t(ao,W8),t(ao,Qd),t(Qd,M8),t(ao,B8),p(e,Yw,n),m(ja,e,n),p(e,Vw,n),p(e,io,n),t(io,Y8),t(io,ec),t(ec,V8),t(io,X8),p(e,Xw,n),m(Ca,e,n),p(e,Jw,n),p(e,D,n),t(D,J8),t(D,tc),t(tc,Z8),t(D,K8),t(D,sc),t(sc,Q8),t(D,e9),t(D,oc),t(oc,t9),t(D,s9),t(D,lc),t(lc,o9),t(D,l9),t(D,rc),t(rc,r9),t(D,a9),t(D,ac),t(ac,i9),t(D,n9),p(e,Zw,n),p(e,no,n),t(no,p9),t(no,ic),t(ic,f9),t(no,h9),p(e,Kw,n),m(Pa,e,n),p(e,Qw,n),p(e,Pn,n),t(Pn,u9),p(e,ey,n),m(xa,e,n),p(e,ty,n),p(e,ze,n),t(ze,d9),t(ze,nc),t(nc,c9),t(ze,m9),t(ze,pc),t(pc,_9),t(ze,v9),p(e,sy,n),m(Oa,e,n),p(e,oy,n),p(e,po,n),t(po,w9),t(po,fc),t(fc,y9),t(po,$9),p(e,ly,n),m(Ia,e,n),p(e,ry,n),p(e,xn,n),t(xn,E9),p(e,ay,n),p(e,Dt,n),t(Dt,fo),t(fo,hc),m(Da,hc,null),t(Dt,b9),t(Dt,uc),t(uc,g9),p(e,iy,n),p(e,ho,n),t(ho,k9),t(ho,dc),t(dc,j9),t(ho,C9),p(e,ny,n),m(Aa,e,n),p(e,py,n),p(e,At,n),t(At,uo),t(uo,cc),m(Ta,cc,null),t(At,P9),t(At,mc),t(mc,x9),p(e,fy,n),p(e,qa,n),t(qa,O9),t(qa,_c),t(_c,I9),p(e,hy,n),m(Sa,e,n),p(e,uy,n),p(e,ne,n),t(ne,D9),t(ne,vc),t(vc,A9),t(ne,T9),t(ne,wc),t(wc,q9),t(ne,S9),t(ne,yc),t(yc,L9),t(ne,U9),p(e,dy,n),m(La,e,n),p(e,cy,n),p(e,N,n),t(N,N9),t(N,$c),t($c,H9),t(N,z9),t(N,Ec),t(Ec,R9),t(N,G9),t(N,bc),t(bc,F9),t(N,W9),t(N,gc),t(gc,M9),t(N,B9),t(N,kc),t(kc,Y9),t(N,V9),p(e,my,n),p(e,co,n),t(co,X9),t(co,jc),t(jc,J9),t(co,Z9),p(e,_y,n),p(e,Tt,n),t(Tt,mo),t(mo,Cc),m(Ua,Cc,null),t(Tt,K9),t(Tt,Pc),t(Pc,Q9),p(e,vy,n),p(e,On,n),t(On,ej),p(e,wy,n),m(Na,e,n),p(e,yy,n),p(e,qt,n),t(qt,_o),t(_o,xc),m(Ha,xc,null),t(qt,tj),t(qt,Oc),t(Oc,sj),p(e,$y,n),p(e,In,n),t(In,oj),p(e,Ey,n),m(za,e,n),p(e,by,n),p(e,St,n),t(St,vo),t(vo,Ic),m(Ra,Ic,null),t(St,lj),t(St,Dc),t(Dc,rj),p(e,gy,n),p(e,Dn,n),t(Dn,aj),p(e,ky,n),p(e,pe,n),t(pe,Ga),t(Ga,ij),t(Ga,Ac),t(Ac,nj),t(Ga,pj),t(pe,fj),t(pe,H),t(H,hj),t(H,Tc),t(Tc,uj),t(H,dj),t(H,qc),t(qc,cj),t(H,mj),t(H,Sc),t(Sc,_j),t(H,vj),t(H,Lc),t(Lc,wj),t(H,yj),t(H,Fa),t(Fa,$j),t(H,Ej),t(H,Uc),t(Uc,bj),t(pe,gj),t(pe,Nc),t(Nc,kj),t(pe,jj),t(pe,Wa),t(Wa,Cj),t(Wa,Ma),t(Ma,Pj),t(Wa,xj),p(e,jy,n),p(e,Lt,n),t(Lt,wo),t(wo,Hc),m(Ba,Hc,null),t(Lt,Oj),t(Lt,zc),t(zc,Ij),p(e,Cy,n),p(e,An,n),t(An,Dj),p(e,Py,n),p(e,fe,n),t(fe,Rc),t(Rc,Aj),t(fe,Tj),t(fe,Gc),t(Gc,qj),t(fe,Sj),t(fe,Fc),t(Fc,Lj),t(fe,Uj),t(fe,Wc),t(Wc,Nj),p(e,xy,n),p(e,Tn,n),t(Tn,Hj),p(e,Oy,n),p(e,qn,n),t(qn,zj),p(e,Iy,n),p(e,Sn,n),t(Sn,Rj),p(e,Dy,n),p(e,Ln,n),t(Ln,Gj),p(e,Ay,n),p(e,yo,n),t(yo,Un),t(Un,Mc),t(Mc,Fj),t(Un,Wj),t(yo,Mj),t(yo,Ut),t(Ut,Bj),t(Ut,Bc),t(Bc,Yj),t(Ut,Vj),t(Ut,Yc),t(Yc,Xj),t(Ut,Jj),p(e,Ty,n),p(e,Nn,n),t(Nn,Zj),p(e,qy,n),m(Ya,e,n),p(e,Sy,n),p(e,Hn,n),t(Hn,Kj),p(e,Ly,n),m(Va,e,n),p(e,Uy,n),p(e,$o,n),t($o,Qj),t($o,Vc),t(Vc,eC),t($o,tC),p(e,Ny,n),p(e,Eo,n),t(Eo,sC),t(Eo,Xc),t(Xc,oC),t(Eo,lC),p(e,Hy,n),p(e,zn,n),t(zn,rC),p(e,zy,n),p(e,bo,n),t(bo,Jc),t(Jc,Xa),t(Xa,aC),t(bo,iC),t(bo,Zc),t(Zc,Ja),t(Ja,nC),Ry=!0},p(e,[n]){const Za={};n&2&&(Za.$$scope={dirty:n,ctx:e}),ps.$set(Za);const Kc={};n&2&&(Kc.$$scope={dirty:n,ctx:e}),fs.$set(Kc);const Qc={};n&2&&(Qc.$$scope={dirty:n,ctx:e}),Ys.$set(Qc);const em={};n&2&&(em.$$scope={dirty:n,ctx:e}),Vs.$set(em)},i(e){Ry||(_(C.$$.fragment,e),_(Lo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Ko.$$.fragment,e),_(Qo.$$.fragment,e),_(el.$$.fragment,e),_(tl.$$.fragment,e),_(sl.$$.fragment,e),_(ol.$$.fragment,e),_(ll.$$.fragment,e),_(rl.$$.fragment,e),_(al.$$.fragment,e),_(il.$$.fragment,e),_(nl.$$.fragment,e),_(pl.$$.fragment,e),_(fl.$$.fragment,e),_(hl.$$.fragment,e),_(ul.$$.fragment,e),_(dl.$$.fragment,e),_(cl.$$.fragment,e),_(ml.$$.fragment,e),_(vl.$$.fragment,e),_(wl.$$.fragment,e),_(yl.$$.fragment,e),_(bl.$$.fragment,e),_(gl.$$.fragment,e),_(kl.$$.fragment,e),_(Pl.$$.fragment,e),_(xl.$$.fragment,e),_(Ol.$$.fragment,e),_(Il.$$.fragment,e),_(Dl.$$.fragment,e),_(Tl.$$.fragment,e),_(ql.$$.fragment,e),_(Ll.$$.fragment,e),_(Ul.$$.fragment,e),_(ps.$$.fragment,e),_(fs.$$.fragment,e),_(Nl.$$.fragment,e),_(Hl.$$.fragment,e),_(zl.$$.fragment,e),_(Rl.$$.fragment,e),_(Gl.$$.fragment,e),_(Fl.$$.fragment,e),_(Bl.$$.fragment,e),_(Yl.$$.fragment,e),_(Jl.$$.fragment,e),_(Zl.$$.fragment,e),_(Kl.$$.fragment,e),_(Ql.$$.fragment,e),_(er.$$.fragment,e),_(or.$$.fragment,e),_(lr.$$.fragment,e),_(rr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(nr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(hr.$$.fragment,e),_(ur.$$.fragment,e),_(dr.$$.fragment,e),_(_r.$$.fragment,e),_(vr.$$.fragment,e),_(wr.$$.fragment,e),_(yr.$$.fragment,e),_($r.$$.fragment,e),_(Er.$$.fragment,e),_(br.$$.fragment,e),_(gr.$$.fragment,e),_(kr.$$.fragment,e),_(jr.$$.fragment,e),_(Pr.$$.fragment,e),_(xr.$$.fragment,e),_(Or.$$.fragment,e),_(Ir.$$.fragment,e),_(Dr.$$.fragment,e),_(Ar.$$.fragment,e),_(Tr.$$.fragment,e),_(Sr.$$.fragment,e),_(Lr.$$.fragment,e),_(Ur.$$.fragment,e),_(Nr.$$.fragment,e),_(Hr.$$.fragment,e),_(Wr.$$.fragment,e),_(Mr.$$.fragment,e),_(Br.$$.fragment,e),_(Yr.$$.fragment,e),_(Vr.$$.fragment,e),_(Jr.$$.fragment,e),_(Ys.$$.fragment,e),_(Vs.$$.fragment,e),_(Kr.$$.fragment,e),_(Qr.$$.fragment,e),_(ea.$$.fragment,e),_(oa.$$.fragment,e),_(la.$$.fragment,e),_(ra.$$.fragment,e),_(aa.$$.fragment,e),_(ia.$$.fragment,e),_(na.$$.fragment,e),_(pa.$$.fragment,e),_(fa.$$.fragment,e),_(ha.$$.fragment,e),_(ua.$$.fragment,e),_(da.$$.fragment,e),_(ma.$$.fragment,e),_(_a.$$.fragment,e),_(va.$$.fragment,e),_(wa.$$.fragment,e),_(ya.$$.fragment,e),_(ba.$$.fragment,e),_(ka.$$.fragment,e),_(ja.$$.fragment,e),_(Ca.$$.fragment,e),_(Pa.$$.fragment,e),_(xa.$$.fragment,e),_(Oa.$$.fragment,e),_(Ia.$$.fragment,e),_(Da.$$.fragment,e),_(Aa.$$.fragment,e),_(Ta.$$.fragment,e),_(Sa.$$.fragment,e),_(La.$$.fragment,e),_(Ua.$$.fragment,e),_(Na.$$.fragment,e),_(Ha.$$.fragment,e),_(za.$$.fragment,e),_(Ra.$$.fragment,e),_(Ba.$$.fragment,e),_(Ya.$$.fragment,e),_(Va.$$.fragment,e),Ry=!0)},o(e){v(C.$$.fragment,e),v(Lo.$$.fragment,e),v(Yo.$$.fragment,e),v(Xo.$$.fragment,e),v(Jo.$$.fragment,e),v(Ko.$$.fragment,e),v(Qo.$$.fragment,e),v(el.$$.fragment,e),v(tl.$$.fragment,e),v(sl.$$.fragment,e),v(ol.$$.fragment,e),v(ll.$$.fragment,e),v(rl.$$.fragment,e),v(al.$$.fragment,e),v(il.$$.fragment,e),v(nl.$$.fragment,e),v(pl.$$.fragment,e),v(fl.$$.fragment,e),v(hl.$$.fragment,e),v(ul.$$.fragment,e),v(dl.$$.fragment,e),v(cl.$$.fragment,e),v(ml.$$.fragment,e),v(vl.$$.fragment,e),v(wl.$$.fragment,e),v(yl.$$.fragment,e),v(bl.$$.fragment,e),v(gl.$$.fragment,e),v(kl.$$.fragment,e),v(Pl.$$.fragment,e),v(xl.$$.fragment,e),v(Ol.$$.fragment,e),v(Il.$$.fragment,e),v(Dl.$$.fragment,e),v(Tl.$$.fragment,e),v(ql.$$.fragment,e),v(Ll.$$.fragment,e),v(Ul.$$.fragment,e),v(ps.$$.fragment,e),v(fs.$$.fragment,e),v(Nl.$$.fragment,e),v(Hl.$$.fragment,e),v(zl.$$.fragment,e),v(Rl.$$.fragment,e),v(Gl.$$.fragment,e),v(Fl.$$.fragment,e),v(Bl.$$.fragment,e),v(Yl.$$.fragment,e),v(Jl.$$.fragment,e),v(Zl.$$.fragment,e),v(Kl.$$.fragment,e),v(Ql.$$.fragment,e),v(er.$$.fragment,e),v(or.$$.fragment,e),v(lr.$$.fragment,e),v(rr.$$.fragment,e),v(ar.$$.fragment,e),v(ir.$$.fragment,e),v(nr.$$.fragment,e),v(pr.$$.fragment,e),v(fr.$$.fragment,e),v(hr.$$.fragment,e),v(ur.$$.fragment,e),v(dr.$$.fragment,e),v(_r.$$.fragment,e),v(vr.$$.fragment,e),v(wr.$$.fragment,e),v(yr.$$.fragment,e),v($r.$$.fragment,e),v(Er.$$.fragment,e),v(br.$$.fragment,e),v(gr.$$.fragment,e),v(kr.$$.fragment,e),v(jr.$$.fragment,e),v(Pr.$$.fragment,e),v(xr.$$.fragment,e),v(Or.$$.fragment,e),v(Ir.$$.fragment,e),v(Dr.$$.fragment,e),v(Ar.$$.fragment,e),v(Tr.$$.fragment,e),v(Sr.$$.fragment,e),v(Lr.$$.fragment,e),v(Ur.$$.fragment,e),v(Nr.$$.fragment,e),v(Hr.$$.fragment,e),v(Wr.$$.fragment,e),v(Mr.$$.fragment,e),v(Br.$$.fragment,e),v(Yr.$$.fragment,e),v(Vr.$$.fragment,e),v(Jr.$$.fragment,e),v(Ys.$$.fragment,e),v(Vs.$$.fragment,e),v(Kr.$$.fragment,e),v(Qr.$$.fragment,e),v(ea.$$.fragment,e),v(oa.$$.fragment,e),v(la.$$.fragment,e),v(ra.$$.fragment,e),v(aa.$$.fragment,e),v(ia.$$.fragment,e),v(na.$$.fragment,e),v(pa.$$.fragment,e),v(fa.$$.fragment,e),v(ha.$$.fragment,e),v(ua.$$.fragment,e),v(da.$$.fragment,e),v(ma.$$.fragment,e),v(_a.$$.fragment,e),v(va.$$.fragment,e),v(wa.$$.fragment,e),v(ya.$$.fragment,e),v(ba.$$.fragment,e),v(ka.$$.fragment,e),v(ja.$$.fragment,e),v(Ca.$$.fragment,e),v(Pa.$$.fragment,e),v(xa.$$.fragment,e),v(Oa.$$.fragment,e),v(Ia.$$.fragment,e),v(Da.$$.fragment,e),v(Aa.$$.fragment,e),v(Ta.$$.fragment,e),v(Sa.$$.fragment,e),v(La.$$.fragment,e),v(Ua.$$.fragment,e),v(Na.$$.fragment,e),v(Ha.$$.fragment,e),v(za.$$.fragment,e),v(Ra.$$.fragment,e),v(Ba.$$.fragment,e),v(Ya.$$.fragment,e),v(Va.$$.fragment,e),Ry=!1},d(e){s($),e&&s(O),e&&s(b),w(C),e&&s(g),e&&s(S),e&&s(Nt),e&&s(ye),e&&s(q),e&&s(me),e&&s(fm),e&&s(Ve),w(Lo),e&&s(hm),e&&s(Rt),e&&s(um),w(Yo,e),e&&s(dm),e&&s(Gt),e&&s(cm),e&&s(Je),w(Xo),e&&s(mm),e&&s(Ze),w(Jo),e&&s(_m),e&&s(Mt),e&&s(vm),e&&s(li),e&&s(wm),e&&s(ri),e&&s(ym),w(Ko,e),e&&s($m),e&&s(ai),e&&s(Em),w(Qo,e),e&&s(bm),e&&s(ii),e&&s(gm),w(el,e),e&&s(km),e&&s(ni),e&&s(jm),e&&s(Q),e&&s(Cm),e&&s(Ke),w(tl),e&&s(Pm),e&&s(pi),e&&s(xm),w(sl,e),e&&s(Om),e&&s(fi),e&&s(Im),w(ol,e),e&&s(Dm),e&&s(Qe),w(ll),e&&s(Am),e&&s(hi),e&&s(Tm),w(rl,e),e&&s(qm),e&&s(et),w(al),e&&s(Sm),e&&s(ui),e&&s(Lm),w(il,e),e&&s(Um),e&&s(di),e&&s(Nm),e&&s(Ee),e&&s(Hm),e&&s(vi),e&&s(zm),w(nl,e),e&&s(Rm),e&&s(wi),e&&s(Gm),e&&s(Xt),e&&s(Fm),w(pl,e),e&&s(Wm),e&&s(yi),e&&s(Mm),e&&s(Jt),e&&s(Bm),w(fl,e),e&&s(Ym),e&&s(ee),e&&s(Vm),e&&s(Zt),e&&s(Xm),w(hl,e),e&&s(Jm),e&&s($i),e&&s(Zm),w(ul,e),e&&s(Km),e&&s(be),e&&s(Qm),w(dl,e),e&&s(e_),e&&s(Kt),e&&s(t_),e&&s(Qt),e&&s(s_),w(cl,e),e&&s(o_),e&&s(tt),w(ml),e&&s(l_),e&&s(ts),e&&s(r_),w(vl,e),e&&s(a_),w(wl,e),e&&s(i_),e&&s(Ei),e&&s(n_),e&&s(st),w(yl),e&&s(p_),e&&s($l),e&&s(f_),w(bl,e),e&&s(h_),e&&s(ot),e&&s(u_),e&&s(ge),e&&s(d_),w(gl,e),e&&s(c_),e&&s(ke),e&&s(m_),w(kl,e),e&&s(__),e&&s(bi),e&&s(v_),e&&s(jl),e&&s(w_),e&&s(lt),w(Pl),e&&s(y_),e&&s(ls),e&&s($_),w(xl,e),e&&s(E_),e&&s(rt),w(Ol),e&&s(b_),e&&s(gi),e&&s(g_),w(Il,e),e&&s(k_),e&&s(at),w(Dl),e&&s(j_),e&&s(W),e&&s(C_),e&&s(_e),e&&s(P_),e&&s(je),e&&s(x_),e&&s(it),w(Tl),e&&s(O_),e&&s(ki),e&&s(I_),e&&s(nt),w(ql),e&&s(D_),e&&s(ji),e&&s(A_),w(Ll,e),e&&s(T_),e&&s(Pi),e&&s(q_),w(Ul,e),e&&s(S_),w(ps,e),e&&s(L_),w(fs,e),e&&s(U_),e&&s(pt),w(Nl),e&&s(N_),w(Hl,e),e&&s(H_),e&&s(us),e&&s(z_),e&&s(ds),e&&s(R_),w(zl,e),e&&s(G_),e&&s(xi),e&&s(F_),w(Rl,e),e&&s(W_),e&&s(cs),e&&s(M_),w(Gl,e),e&&s(B_),e&&s(Oi),e&&s(Y_),w(Fl,e),e&&s(V_),e&&s(I),e&&s(X_),e&&s(Ce),e&&s(J_),e&&s(ft),w(Bl),e&&s(Z_),e&&s(ht),w(Yl),e&&s(K_),e&&s(Vl),e&&s(Q_),w(Jl,e),e&&s(ev),e&&s(Ii),e&&s(tv),w(Zl,e),e&&s(sv),e&&s(Di),e&&s(ov),e&&s(ut),w(Kl),e&&s(lv),e&&s(Pe),e&&s(rv),w(Ql,e),e&&s(av),e&&s(dt),w(er),e&&s(iv),e&&s(tr),e&&s(nv),w(or,e),e&&s(pv),w(lr,e),e&&s(fv),e&&s(ct),w(rr),e&&s(hv),e&&s($s),e&&s(uv),w(ar,e),e&&s(dv),e&&s(te),e&&s(cv),w(ir,e),e&&s(mv),e&&s(Ai),e&&s(_v),e&&s(Ti),e&&s(vv),e&&s(U),e&&s(wv),e&&s(Si),e&&s(yv),e&&s(k),e&&s($v),e&&s(Li),e&&s(Ev),w(nr,e),e&&s(bv),e&&s(xe),e&&s(gv),w(pr,e),e&&s(kv),e&&s(Ui),e&&s(jv),w(fr,e),e&&s(Cv),e&&s(Oe),e&&s(Pv),w(hr,e),e&&s(xv),e&&s(Cs),e&&s(Ov),e&&s(Ni),e&&s(Iv),e&&s(Hi),e&&s(Dv),w(ur,e),e&&s(Av),e&&s(mt),w(dr),e&&s(Tv),e&&s(_t),e&&s(qv),e&&s(zi),e&&s(Sv),e&&s(xs),e&&s(Lv),e&&s(Os),e&&s(Uv),e&&s(Ri),e&&s(Nv),w(_r,e),e&&s(Hv),e&&s(vt),w(vr),e&&s(zv),e&&s(Ie),e&&s(Rv),e&&s(M),e&&s(Gv),w(wr,e),e&&s(Fv),e&&s(Gi),e&&s(Wv),w(yr,e),e&&s(Mv),e&&s(wt),w($r),e&&s(Bv),e&&s(Fi),e&&s(Yv),w(Er,e),e&&s(Vv),e&&s(yt),w(br),e&&s(Xv),e&&s(Wi),e&&s(Jv),w(gr,e),e&&s(Zv),e&&s(Mi),e&&s(Kv),e&&s(Bi),e&&s(Qv),w(kr,e),e&&s(e1),e&&s($t),w(jr),e&&s(t1),e&&s(De),e&&s(s1),e&&s(se),e&&s(o1),e&&s(Et),w(Pr),e&&s(l1),e&&s(Yi),e&&s(r1),w(xr,e),e&&s(a1),e&&s(Ss),e&&s(i1),e&&s(Ae),e&&s(n1),w(Or,e),e&&s(p1),e&&s(Ls),e&&s(f1),w(Ir,e),e&&s(h1),e&&s(Us),e&&s(u1),w(Dr,e),e&&s(d1),e&&s(Vi),e&&s(c1),w(Ar,e),e&&s(m1),e&&s(Xi),e&&s(_1),w(Tr,e),e&&s(v1),e&&s(B),e&&s(w1),e&&s(oe),e&&s(y1),e&&s(Te),e&&s($1),w(Sr,e),e&&s(E1),e&&s(le),e&&s(b1),w(Lr,e),e&&s(g1),e&&s(Ji),e&&s(k1),w(Ur,e),e&&s(j1),e&&s(Zi),e&&s(C1),w(Nr,e),e&&s(P1),e&&s(Ki),e&&s(x1),e&&s(bt),w(Hr),e&&s(O1),e&&s(Hs),e&&s(I1),e&&s(zs),e&&s(D1),e&&s(Fs),e&&s(A1),w(Wr,e),e&&s(T1),e&&s(Y),e&&s(q1),w(Mr,e),e&&s(S1),e&&s(gt),w(Br),e&&s(L1),e&&s(Ms),e&&s(U1),e&&s(sn),e&&s(N1),e&&s(Se),e&&s(H1),e&&s(on),e&&s(z1),w(Yr,e),e&&s(R1),e&&s(Bs),e&&s(G1),e&&s(ln),e&&s(F1),w(Vr,e),e&&s(W1),e&&s(Xr),e&&s(M1),e&&s(rn),e&&s(B1),w(Jr,e),e&&s(Y1),e&&s(an),e&&s(V1),e&&s(nn),e&&s(X1),w(Ys,e),e&&s(J1),w(Vs,e),e&&s(Z1),e&&s(jt),w(Kr),e&&s(K1),e&&s(Le),e&&s(Q1),w(Qr,e),e&&s(ew),e&&s(Ct),w(ea),e&&s(tw),e&&s(Zs),e&&s(sw),e&&s(dn),e&&s(ow),e&&s(Ks),e&&s(lw),e&&s(re),e&&s(rw),e&&s(Pt),w(oa),e&&s(aw),e&&s(cn),e&&s(iw),w(la,e),e&&s(nw),e&&s(mn),e&&s(pw),w(ra,e),e&&s(fw),e&&s(eo),e&&s(hw),w(aa,e),e&&s(uw),e&&s(_n),e&&s(dw),w(ia,e),e&&s(cw),e&&s(vn),e&&s(mw),w(na,e),e&&s(_w),e&&s(to),e&&s(vw),w(pa,e),e&&s(ww),e&&s(wn),e&&s(yw),w(fa,e),e&&s($w),e&&s(yn),e&&s(Ew),w(ha,e),e&&s(bw),e&&s($n),e&&s(gw),w(ua,e),e&&s(kw),e&&s(En),e&&s(jw),w(da,e),e&&s(Cw),e&&s(so),e&&s(Pw),e&&s(xt),w(ma),e&&s(xw),e&&s(bn),e&&s(Ow),w(_a,e),e&&s(Iw),e&&s(Ue),e&&s(Dw),w(va,e),e&&s(Aw),e&&s(ae),e&&s(Tw),w(wa,e),e&&s(qw),e&&s(gn),e&&s(Sw),e&&s(kn),e&&s(Lw),e&&s(jn),e&&s(Uw),e&&s(ie),e&&s(Nw),e&&s(Ne),e&&s(Hw),w(ya,e),e&&s(zw),e&&s(He),e&&s(Rw),e&&s(lo),e&&s(Gw),e&&s(Cn),e&&s(Fw),e&&s(It),w(ba),e&&s(Ww),e&&s(V),e&&s(Mw),w(ka,e),e&&s(Bw),e&&s(ao),e&&s(Yw),w(ja,e),e&&s(Vw),e&&s(io),e&&s(Xw),w(Ca,e),e&&s(Jw),e&&s(D),e&&s(Zw),e&&s(no),e&&s(Kw),w(Pa,e),e&&s(Qw),e&&s(Pn),e&&s(ey),w(xa,e),e&&s(ty),e&&s(ze),e&&s(sy),w(Oa,e),e&&s(oy),e&&s(po),e&&s(ly),w(Ia,e),e&&s(ry),e&&s(xn),e&&s(ay),e&&s(Dt),w(Da),e&&s(iy),e&&s(ho),e&&s(ny),w(Aa,e),e&&s(py),e&&s(At),w(Ta),e&&s(fy),e&&s(qa),e&&s(hy),w(Sa,e),e&&s(uy),e&&s(ne),e&&s(dy),w(La,e),e&&s(cy),e&&s(N),e&&s(my),e&&s(co),e&&s(_y),e&&s(Tt),w(Ua),e&&s(vy),e&&s(On),e&&s(wy),w(Na,e),e&&s(yy),e&&s(qt),w(Ha),e&&s($y),e&&s(In),e&&s(Ey),w(za,e),e&&s(by),e&&s(St),w(Ra),e&&s(gy),e&&s(Dn),e&&s(ky),e&&s(pe),e&&s(jy),e&&s(Lt),w(Ba),e&&s(Cy),e&&s(An),e&&s(Py),e&&s(fe),e&&s(xy),e&&s(Tn),e&&s(Oy),e&&s(qn),e&&s(Iy),e&&s(Sn),e&&s(Dy),e&&s(Ln),e&&s(Ay),e&&s(yo),e&&s(Ty),e&&s(Nn),e&&s(qy),w(Ya,e),e&&s(Sy),e&&s(Hn),e&&s(Ly),w(Va,e),e&&s(Uy),e&&s($o),e&&s(Ny),e&&s(Eo),e&&s(Hy),e&&s(zn),e&&s(zy),e&&s(bo)}}}const uS={local:"testing",sections:[{local:"how-transformers-are-tested",title:"How transformers are tested"},{local:"running-tests",sections:[{local:"choosing-which-tests-to-run",title:"Choosing which tests to run"},{local:"getting-the-list-of-all-tests",title:"Getting the list of all tests"},{local:"run-a-specific-test-module",title:"Run a specific test module"},{local:"run-specific-tests",title:"Run specific tests"},{local:"run-only-modified-tests",title:"Run only modified tests"},{local:"automatically-rerun-failed-tests-on-source-modification",title:"Automatically rerun failed tests on source modification"},{local:"skip-a-test-module",title:"Skip a test module"},{local:"clearing-state",title:"Clearing state"},{local:"running-tests-in-parallel",title:"Running tests in parallel"},{local:"test-order-and-repetition",sections:[{local:"repeat-tests",title:"Repeat tests"},{local:"run-tests-in-a-random-order",title:"Run tests in a random order"}],title:"Test order and repetition"},{local:"look-and-feel-variations",sections:[{local:"pytestsugar",title:"pytest-sugar"},{local:"report-each-subtest-name-and-its-progress",title:"Report each sub-test name and its progress"},{local:"instantly-shows-failed-tests",title:"Instantly shows failed tests"}],title:"Look and feel variations"},{local:"to-gpu-or-not-to-gpu",title:"To GPU or not to GPU"},{local:"distributed-training",title:"Distributed training"},{local:"output-capture",title:"Output capture"},{local:"color-control",title:"Color control"},{local:"sending-test-report-to-online-pastebin-service",title:"Sending test report to online pastebin service"}],title:"Running tests"},{local:"writing-tests",sections:[{local:"parametrization",title:"Parametrization"},{local:"files-and-directories",title:"Files and directories"},{local:"temporary-files-and-directories",title:"Temporary files and directories"},{local:"temporary-syspath-override",title:"Temporary sys.path override"},{local:"skipping-tests",sections:[{local:"implementation",title:"Implementation"}],title:"Skipping tests"},{local:"slow-tests",title:"Slow tests"},{local:"testing-the-stdoutstderr-output",title:"Testing the stdout/stderr output"},{local:"capturing-logger-stream",title:"Capturing logger stream"},{local:"testing-with-environment-variables",title:"Testing with environment variables"},{local:"getting-reproducible-results",title:"Getting reproducible results"},{local:"debugging-tests",title:"Debugging tests"}],title:"Writing tests"},{local:"working-with-github-actions-workflows",title:"Working with github actions workflows"},{local:"testing-experimental-ci-features",title:"Testing Experimental CI Features"}],title:"Testing"};function dS(we){return aS(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wS extends sS{constructor($){super();oS(this,$,dS,hS,lS,{})}}export{wS as default,uS as metadata};
